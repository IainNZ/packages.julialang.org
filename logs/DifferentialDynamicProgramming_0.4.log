>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from git://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.1.0
INFO: Installing MacroTools v0.3.7
INFO: Installing Requires v0.2.3
INFO: Package database updated

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-128-generic #177-Ubuntu SMP Tue Aug 8 11:40:23 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1150.8515625 MB free)
Uptime: 23943.0 sec
Load Avg:  1.015625  0.98974609375  0.97607421875
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz    1079456 s       4510 s      92880 s     991578 s         44 s
#2  3499 MHz     796452 s       3743 s      77722 s    1449278 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - DifferentialDynamicProgramming 0.1.0
 - JSON                          0.9.1
3 additional packages:
 - Compat                        0.26.0
 - MacroTools                    0.3.7
 - Requires                      0.2.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 66264.251   
RESULT: Gradient norm smaller than tolerance.
iterations 25  gradient 2.87853e-12  final value -19.8817      factorizations 24
  4.357635 seconds (3.12 M allocations: 286.620 MB, 2.62% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

---------- begin iLQG ----------
iteration     cost    reduction     expected    gradient    log10(lambda)
1           51.1657     26.3        26.3        0.111       0.0         
2           24.8939     10.3        10.3        0.083       -0.2        
3           14.5875     4.12        4.12        0.0741      -0.6        
4           10.4628     2.02        2.02        0.086       -1.2        
5           8.44376     1.12        1.12        0.142       -2.0        
6           7.31909     0.32        0.32        0.164       -3.1        
7           6.99914     0.0191      0.0191      0.0522      -4.3        
8           6.98004     2.27e-05    2.27e-05    0.00204     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

            final cost:   6.980019    

            final grad:   3.385662e-06

            final lambda: 4.4841551e-08

            time / iter:  789   ms

            total time:   7.10  seconds, of which

            derivs:     0.5 %

            back pass:  92.3%

            fwd pass:   1.5 %

            other:      5.7 % (graphics etc.)
 =========== end iLQG ===========
 19.873970 seconds (14.73 M allocations: 920.830 MB, 2.96% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
