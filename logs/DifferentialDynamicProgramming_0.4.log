>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from git://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.1.0
INFO: Installing MacroTools v0.3.7
INFO: Installing Requires v0.2.3
INFO: Package database updated

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-121-generic #170-Ubuntu SMP Wed Jun 14 09:04:33 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1117.15625 MB free)
Uptime: 23213.0 sec
Load Avg:  1.30224609375  1.08837890625  1.0615234375
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz    1071562 s       4162 s      91567 s     923340 s         46 s
#2  3500 MHz     753704 s       9902 s      80068 s    1392846 s          1 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - DifferentialDynamicProgramming 0.1.0
 - JSON                          0.9.1
3 additional packages:
 - Compat                        0.26.0
 - MacroTools                    0.3.7
 - Requires                      0.2.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 67060.560   
RESULT: Gradient norm smaller than tolerance.
iterations 16  gradient 3.39709e-12  final value -36.1978      factorizations 14
  4.567336 seconds (3.10 M allocations: 230.517 MB, 3.22% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

---------- begin iLQG ----------
iteration     cost    reduction     expected    gradient    log10(lambda)
1           49.1741     13.9        13.9        0.0808      0.0         
2           35.3149     11.2        11.2        0.0864      -0.2        
3           24.1421     9.74        9.74        0.117       -0.6        
4           14.4009     6.28        6.28        0.168       -1.2        
5           8.12443     3.56        3.56        0.232       -2.0        
6           4.56705     1.64        1.64        0.305       -3.1        
7           2.92751     0.0934      0.0934      0.095       -4.3        
8           2.83409     7.92e-05    7.92e-05    0.00312     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

            final cost:   2.834011    

            final grad:   4.791441e-06

            final lambda: 4.4841551e-08

            time / iter:  906   ms

            total time:   8.16  seconds, of which

            derivs:     0.6 %

            back pass:  92.3%

            fwd pass:   1.5 %

            other:      5.6 % (graphics etc.)
 =========== end iLQG ===========
 19.564345 seconds (14.73 M allocations: 920.856 MB, 2.89% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
