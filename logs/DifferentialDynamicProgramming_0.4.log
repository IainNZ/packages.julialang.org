>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from git://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.1.0
INFO: Installing MacroTools v0.3.7
INFO: Installing Requires v0.2.3
INFO: Package database updated

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-128-generic #177-Ubuntu SMP Tue Aug 8 11:40:23 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1157.90625 MB free)
Uptime: 24196.0 sec
Load Avg:  1.1767578125  1.10107421875  1.05810546875
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3503 MHz    1125346 s       5568 s      94665 s     947080 s         39 s
#2  3503 MHz     777656 s       1039 s      81864 s    1476592 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - DifferentialDynamicProgramming 0.1.0
 - JSON                          0.9.1
3 additional packages:
 - Compat                        0.26.0
 - MacroTools                    0.3.7
 - Requires                      0.2.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 60782.651   
RESULT: Gradient norm smaller than tolerance.
iterations 16  gradient 2.89814e-12  final value -28.5951      factorizations 15
  5.368964 seconds (3.10 M allocations: 233.504 MB, 2.60% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

---------- begin iLQG ----------
iteration     cost    reduction     expected    gradient    log10(lambda)
1           50.4702     21.5        21.5        0.106       0.0         
2           28.9817     11.6        11.6        0.0924      -0.2        
3           17.3873     6.19        6.19        0.0938      -0.6        
4           11.1995     3.31        3.31        0.104       -1.2        
5           7.88777     2.1         2.1         0.188       -2.0        
6           5.78298     0.61        0.61        0.208       -3.1        
7           5.17295     0.0314      0.0314      0.0599      -4.3        
8           5.14152     3.27e-05    3.27e-05    0.00222     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

            final cost:   5.141483    

            final grad:   3.490684e-06

            final lambda: 4.4841551e-08

            time / iter:  972   ms

            total time:   8.74  seconds, of which

            derivs:     0.6 %

            back pass:  93.1%

            fwd pass:   1.6 %

            other:      4.8 % (graphics etc.)
 =========== end iLQG ===========
 21.400122 seconds (14.73 M allocations: 920.800 MB, 2.65% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
