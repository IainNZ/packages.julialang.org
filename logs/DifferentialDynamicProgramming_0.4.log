>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from git://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.1.0
INFO: Installing MacroTools v0.3.7
INFO: Installing Requires v0.2.3
INFO: Package database updated

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-132-generic #181-Ubuntu SMP Wed Sep 13 13:25:03 UTC 2017 x86_64 x86_64
Memory: 2.93927001953125 GB (1176.33203125 MB free)
Uptime: 24437.0 sec
Load Avg:  0.9921875  0.98583984375  0.98681640625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz    1055928 s         71 s      92822 s    1044146 s         17 s
#2  3499 MHz     783436 s       5750 s      82236 s    1499691 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - DifferentialDynamicProgramming 0.1.0
 - JSON                          0.9.1
3 additional packages:
 - Compat                        0.26.0
 - MacroTools                    0.3.7
 - Requires                      0.2.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 63975.881   
RESULT: Gradient norm smaller than tolerance.
iterations 16  gradient 2.93454e-12  final value -24.3599      factorizations 15
  2.992225 seconds (3.10 M allocations: 232.853 MB, 3.37% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

---------- begin iLQG ----------
iteration     cost    reduction     expected    gradient    log10(lambda)
1           49.2861     32.9        32.9        0.126       0.0         
2           16.3932     8.35        8.35        0.072       -0.2        
3           8.03891     2.88        2.88        0.0529      -0.6        
4           5.15739     1.36        1.36        0.0706      -1.2        
5           3.79372     0.514       0.514       0.108       -2.0        
6           3.27938     0.119       0.119       0.113       -3.1        
7           3.16027     0.0089      0.0089      0.044       -4.3        
8           3.15136     1.13e-05    1.13e-05    0.00185     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

            final cost:   3.151352    

            final grad:   3.074932e-06

            final lambda: 4.4841551e-08

            time / iter:  571   ms

            total time:   5.14  seconds, of which

            derivs:     1.1 %

            back pass:  89.7%

            fwd pass:   2.6 %

            other:      6.6 % (graphics etc.)
 =========== end iLQG ===========
 13.324911 seconds (14.73 M allocations: 920.829 MB, 3.57% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
