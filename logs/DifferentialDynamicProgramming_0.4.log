>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from git://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.1.0
INFO: Installing MacroTools v0.3.7
INFO: Installing Requires v0.2.3
INFO: Package database updated

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-129-generic #178-Ubuntu SMP Fri Aug 11 12:48:20 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1149.984375 MB free)
Uptime: 24426.0 sec
Load Avg:  0.91455078125  0.97607421875  1.02392578125
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3504 MHz    1163861 s        424 s      87554 s     941609 s         44 s
#2  3504 MHz     776129 s       6252 s      76242 s    1508641 s          1 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - DifferentialDynamicProgramming 0.1.0
 - JSON                          0.9.1
3 additional packages:
 - Compat                        0.26.0
 - MacroTools                    0.3.7
 - Requires                      0.2.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 64320.561   
RESULT: Gradient norm smaller than tolerance.
iterations 18  gradient 3.07662e-12  final value -34.4956      factorizations 17
  4.571682 seconds (3.11 M allocations: 245.048 MB, 2.86% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

---------- begin iLQG ----------
iteration     cost    reduction     expected    gradient    log10(lambda)
1           50.3474     24.5        24.5        0.109       0.0         
2           25.8453     10.3        10.3        0.0824      -0.2        
3           15.511      5.73        5.73        0.0906      -0.6        
4           9.7766      3.59        3.59        0.139       -1.2        
5           6.18484     1.42        1.42        0.179       -2.0        
6           4.76925     0.244       0.244       0.183       -3.1        
7           4.52495     0.00851     0.00851     0.0546      -4.3        
8           4.51644     8.79e-06    8.79e-06    0.0019      -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

            final cost:   4.51643     

            final grad:   3.193098e-06

            final lambda: 4.4841551e-08

            time / iter:  819   ms

            total time:   7.37  seconds, of which

            derivs:     0.7 %

            back pass:  93.9%

            fwd pass:   1.5 %

            other:      4.0 % (graphics etc.)
 =========== end iLQG ===========
 20.241808 seconds (14.73 M allocations: 920.800 MB, 2.88% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
