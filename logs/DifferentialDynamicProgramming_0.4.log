>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from git://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.1.0
INFO: Installing MacroTools v0.3.6
INFO: Installing Requires v0.2.3
INFO: Package database updated

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-116-generic #163-Ubuntu SMP Fri Mar 31 14:13:22 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1086.19140625 MB free)
Uptime: 22478.0 sec
Load Avg:  1.05712890625  1.06201171875  1.0517578125
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz    1026712 s       5231 s      89057 s     923098 s         39 s
#2  3499 MHz     740480 s       1746 s      79649 s    1360358 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - DifferentialDynamicProgramming 0.1.0
 - JSON                          0.9.0
3 additional packages:
 - Compat                        0.23.0
 - MacroTools                    0.3.6
 - Requires                      0.2.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 60217.926   
RESULT: Gradient norm smaller than tolerance.
iterations 17  gradient 2.96661e-12  final value -36.0567      factorizations 16
  5.006197 seconds (3.10 M allocations: 238.272 MB, 2.91% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

---------- begin iLQG ----------
iteration     cost    reduction     expected    gradient    log10(lambda)
1           48.9883     17.4        17.4        0.093       0.0         
2           31.554      11.6        11.6        0.0917      -0.2        
3           20.0035     7.47        7.47        0.11        -0.6        
4           12.5339     3.93        3.93        0.136       -1.2        
5           8.60055     2.24        2.24        0.203       -2.0        
6           6.35815     0.871       0.871       0.249       -3.1        
7           5.48764     0.0617      0.0617      0.0778      -4.3        
8           5.42592     7.64e-05    7.64e-05    0.00293     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

            final cost:   5.425844    

            final grad:   4.727411e-06

            final lambda: 4.4841551e-08

            time / iter:  778   ms

            total time:   7.00  seconds, of which

            derivs:     0.8 %

            back pass:  91.7%

            fwd pass:   1.7 %

            other:      5.8 % (graphics etc.)
 =========== end iLQG ===========
 20.967860 seconds (14.73 M allocations: 920.829 MB, 2.97% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
