>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from git://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.1.0
INFO: Installing MacroTools v0.3.7
INFO: Installing Requires v0.2.3
INFO: Package database updated

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-121-generic #170-Ubuntu SMP Wed Jun 14 09:04:33 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1150.06640625 MB free)
Uptime: 24155.0 sec
Load Avg:  1.08203125  1.04443359375  1.04931640625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz    1099162 s       1734 s     101416 s     977949 s         40 s
#2  3500 MHz     771714 s       4772 s      91390 s    1464750 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - DifferentialDynamicProgramming 0.1.0
 - JSON                          0.9.1
3 additional packages:
 - Compat                        0.26.0
 - MacroTools                    0.3.7
 - Requires                      0.2.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 60071.618   
RESULT: Gradient norm smaller than tolerance.
iterations 17  gradient 3.08429e-12  final value -30.9448      factorizations 16
  4.248922 seconds (3.10 M allocations: 239.631 MB, 2.68% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

---------- begin iLQG ----------
iteration     cost    reduction     expected    gradient    log10(lambda)
1           50.5544     28          28          0.118       0.0         
2           22.5795     9.82        9.82        0.0813      -0.2        
3           12.7574     3.75        3.75        0.0683      -0.6        
4           9.01135     2.05        2.05        0.0836      -1.2        
5           6.96266     1.14        1.14        0.153       -2.0        
6           5.82379     0.282       0.282       0.161       -3.1        
7           5.54177     0.017       0.017       0.0531      -4.3        
8           5.52478     2.1e-05    2.1e-05    0.00207     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

            final cost:   5.52476     

            final grad:   3.541619e-06

            final lambda: 4.4841551e-08

            time / iter:  858   ms

            total time:   7.72  seconds, of which

            derivs:     0.8 %

            back pass:  92.3%

            fwd pass:   1.8 %

            other:      5.1 % (graphics etc.)
 =========== end iLQG ===========
 21.244393 seconds (14.73 M allocations: 920.800 MB, 2.77% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
