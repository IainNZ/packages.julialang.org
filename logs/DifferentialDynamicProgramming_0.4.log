>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from git://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.1.0
INFO: Installing MacroTools v0.3.7
INFO: Installing Requires v0.2.3
INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of DifferentialDynamicProgramming
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-128-generic #177-Ubuntu SMP Tue Aug 8 11:40:23 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1141.4921875 MB free)
Uptime: 23987.0 sec
Load Avg:  1.09716796875  1.072265625  1.05517578125
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3507 MHz    1076304 s       6252 s      95706 s     994395 s         37 s
#2  3507 MHz     841726 s        388 s      82775 s    1393463 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - DifferentialDynamicProgramming 0.1.0
 - JSON                          0.9.1
3 additional packages:
 - Compat                        0.26.0
 - MacroTools                    0.3.7
 - Requires                      0.2.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 62605.304   
RESULT: Gradient norm smaller than tolerance.
iterations 16  gradient 2.62396e-12  final value -32.9359      factorizations 15
  4.345574 seconds (3.10 M allocations: 233.446 MB, 2.67% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

---------- begin iLQG ----------
iteration     cost    reduction     expected    gradient    log10(lambda)
1           49.7872     21.4        21.4        0.0991      0.0         
2           28.4128     11.5        11.5        0.086       -0.2        
3           16.9392     6.38        6.38        0.0918      -0.6        
4           10.5636     3.33        3.33        0.115       -1.2        
5           7.23047     1.71        1.71        0.173       -2.0        
6           5.52188     0.499       0.499       0.207       -3.1        
7           5.02285     0.0262      0.0262      0.0681      -4.3        
8           4.99663     2.4e-05    2.4e-05    0.00257     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

            final cost:   4.99661     

            final grad:   3.910169e-06

            final lambda: 4.4841551e-08

            time / iter:  786   ms

            total time:   7.08  seconds, of which

            derivs:     0.4 %

            back pass:  93.7%

            fwd pass:   1.4 %

            other:      4.5 % (graphics etc.)
 =========== end iLQG ===========
 19.484543 seconds (14.73 M allocations: 920.910 MB, 3.04% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
