>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from git://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.1.0
INFO: Installing MacroTools v0.3.6
INFO: Installing Requires v0.2.3
INFO: Package database updated

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-119-generic #166-Ubuntu SMP Wed May 3 12:18:55 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1057.29296875 MB free)
Uptime: 22061.0 sec
Load Avg:  0.91748046875  0.9716796875  1.0029296875
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz    1046495 s       4283 s      93028 s     824790 s         35 s
#2  3499 MHz     665489 s       2597 s      85583 s    1375624 s          1 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - DifferentialDynamicProgramming 0.1.0
 - JSON                          0.9.1
3 additional packages:
 - Compat                        0.25.2
 - MacroTools                    0.3.6
 - Requires                      0.2.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 65353.161   
RESULT: Gradient norm smaller than tolerance.
iterations 18  gradient 3.26218e-12  final value -38.5794      factorizations 17
  5.009269 seconds (3.11 M allocations: 244.421 MB, 2.81% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

---------- begin iLQG ----------
iteration     cost    reduction     expected    gradient    log10(lambda)
1           48.3181     19.7        19.7        0.0949      0.0         
2           28.6401     9.53        9.53        0.0796      -0.2        
3           19.1073     6.11        6.11        0.0913      -0.6        
4           12.9927     4.36        4.36        0.153       -1.2        
5           8.63386     2.12        2.12        0.244       -2.0        
6           6.51699     0.462       0.462       0.205       -3.1        
7           6.05511     0.0231      0.0231      0.061       -4.3        
8           6.03202     2.74e-05    2.74e-05    0.00233     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

            final cost:   6.031996    

            final grad:   3.783599e-06

            final lambda: 4.4841551e-08

            time / iter:  899   ms

            total time:   8.09  seconds, of which

            derivs:     0.5 %

            back pass:  92.6%

            fwd pass:   1.8 %

            other:      5.0 % (graphics etc.)
 =========== end iLQG ===========
 21.292172 seconds (14.73 M allocations: 920.798 MB, 2.92% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
