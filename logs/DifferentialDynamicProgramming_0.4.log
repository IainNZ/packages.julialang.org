>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from git://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.1.0
INFO: Installing MacroTools v0.3.6
INFO: Installing Requires v0.2.3
INFO: Package database updated

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-117-generic #164-Ubuntu SMP Fri Apr 7 11:05:26 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1121.0234375 MB free)
Uptime: 22918.0 sec
Load Avg:  0.9560546875  1.017578125  0.98095703125
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz    1050565 s       6912 s      85661 s     926677 s         45 s
#2  3500 MHz     696628 s         39 s      75716 s    1436737 s          1 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - DifferentialDynamicProgramming 0.1.0
 - JSON                          0.9.1
3 additional packages:
 - Compat                        0.24.0
 - MacroTools                    0.3.6
 - Requires                      0.2.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 69341.090   
RESULT: Gradient norm smaller than tolerance.
iterations 14  gradient 3.10057e-12  final value -47.2559      factorizations 13
  4.700078 seconds (3.10 M allocations: 220.073 MB, 2.77% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

---------- begin iLQG ----------
iteration     cost    reduction     expected    gradient    log10(lambda)
1           49.8171     23.9        23.9        0.108       0.0         
2           25.877      10.3        10.3        0.0807      -0.2        
3           15.6        6.1         6.1         0.0921      -0.6        
4           9.50228     3.5         3.5         0.128       -1.2        
5           6.00147     1.23        1.23        0.155       -2.0        
6           4.76698     0.19        0.19        0.172       -3.1        
7           4.57692     0.00586     0.00586     0.0548      -4.3        
8           4.57106     5.48e-06    5.48e-06    0.0019      -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

            final cost:   4.571059    

            final grad:   3.143639e-06

            final lambda: 4.4841551e-08

            time / iter:  784   ms

            total time:   7.06  seconds, of which

            derivs:     0.8 %

            back pass:  92.1%

            fwd pass:   1.9 %

            other:      5.3 % (graphics etc.)
 =========== end iLQG ===========
 20.287666 seconds (14.73 M allocations: 920.854 MB, 3.00% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
