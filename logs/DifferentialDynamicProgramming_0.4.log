>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from git://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.1.0
INFO: Installing MacroTools v0.3.7
INFO: Installing Requires v0.2.3
INFO: Package database updated

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-121-generic #170-Ubuntu SMP Wed Jun 14 09:04:33 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1141.359375 MB free)
Uptime: 23062.0 sec
Load Avg:  0.939453125  1.00830078125  1.037109375
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz    1086745 s       6289 s      91947 s     884894 s         30 s
#2  3500 MHz     753390 s        575 s      84072 s    1398267 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - DifferentialDynamicProgramming 0.1.0
 - JSON                          0.9.1
3 additional packages:
 - Compat                        0.26.0
 - MacroTools                    0.3.7
 - Requires                      0.2.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 62330.002   
RESULT: Gradient norm smaller than tolerance.
iterations 20  gradient 2.93735e-12  final value -25.7425      factorizations 19
  5.342258 seconds (3.11 M allocations: 257.896 MB, 2.78% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

---------- begin iLQG ----------
iteration     cost    reduction     expected    gradient    log10(lambda)
1           51.1144     36.4        36.4        0.143       0.0         
2           14.7518     5.75        5.75        0.0637      -0.2        
3           8.99813     1.8         1.8         0.0511      -0.6        
4           7.19601     0.932       0.932       0.0669      -1.2        
5           6.26424     0.435       0.435       0.0957      -2.0        
6           5.8292      0.121       0.121       0.112       -3.1        
7           5.70789     0.00787     0.00787     0.0455      -4.3        
8           5.70002     9.08e-06    9.08e-06    0.00182     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

            final cost:   5.70001     

            final grad:   3.011418e-06

            final lambda: 4.4841551e-08

            time / iter:  910   ms

            total time:   8.19  seconds, of which

            derivs:     0.6 %

            back pass:  94.3%

            fwd pass:   1.2 %

            other:      3.9 % (graphics etc.)
 =========== end iLQG ===========
 20.176136 seconds (14.73 M allocations: 920.829 MB, 2.81% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
