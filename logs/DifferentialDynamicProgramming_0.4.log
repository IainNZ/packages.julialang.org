>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from git://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.1.0
INFO: Installing MacroTools v0.3.7
INFO: Installing Requires v0.2.3
INFO: Package database updated

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-128-generic #177-Ubuntu SMP Tue Aug 8 11:40:23 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1164.9765625 MB free)
Uptime: 24541.0 sec
Load Avg:  1.0703125  1.05322265625  0.982421875
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz    1029662 s       6528 s      87287 s    1100727 s         42 s
#2  3499 MHz     790760 s         40 s      75222 s    1504452 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - DifferentialDynamicProgramming 0.1.0
 - JSON                          0.9.1
3 additional packages:
 - Compat                        0.26.0
 - MacroTools                    0.3.7
 - Requires                      0.2.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 69659.408   
RESULT: Gradient norm smaller than tolerance.
iterations 13  gradient 2.98344e-12  final value -25.6104      factorizations 12
  5.134904 seconds (3.10 M allocations: 214.858 MB, 2.55% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

---------- begin iLQG ----------
iteration     cost    reduction     expected    gradient    log10(lambda)
1           49.2282     21.4        21.4        0.105       0.0         
2           27.8023     11.5        11.5        0.0925      -0.2        
3           16.2745     6.01        6.01        0.097       -0.6        
4           10.2606     2.85        2.85        0.101       -1.2        
5           7.40786     1.49        1.49        0.151       -2.0        
6           5.92223     0.486       0.486       0.186       -3.1        
7           5.43606     0.0338      0.0338      0.0635      -4.3        
8           5.40222     4.04e-05    4.04e-05    0.00232     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

            final cost:   5.402182    

            final grad:   3.78479e-06

            final lambda: 4.4841551e-08

            time / iter:  952   ms

            total time:   8.57  seconds, of which

            derivs:     0.5 %

            back pass:  94.3%

            fwd pass:   1.3 %

            other:      3.9 % (graphics etc.)
 =========== end iLQG ===========
 22.172093 seconds (14.73 M allocations: 920.910 MB, 2.64% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
