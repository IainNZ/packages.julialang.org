>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from git://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.1.0
INFO: Installing MacroTools v0.3.6
INFO: Installing Requires v0.2.3
INFO: Package database updated

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-119-generic #166-Ubuntu SMP Wed May 3 12:18:55 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1119.0859375 MB free)
Uptime: 22434.0 sec
Load Avg:  1.0078125  1.029296875  1.04541015625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz     950043 s       6927 s      75588 s     995054 s         29 s
#2  3500 MHz     712032 s         60 s      68198 s    1391858 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - DifferentialDynamicProgramming 0.1.0
 - JSON                          0.9.1
3 additional packages:
 - Compat                        0.25.2
 - MacroTools                    0.3.6
 - Requires                      0.2.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 58863.045   
RESULT: Gradient norm smaller than tolerance.
iterations 19  gradient 2.95699e-12  final value -28.629       factorizations 18
  3.850157 seconds (3.11 M allocations: 250.564 MB, 2.85% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

---------- begin iLQG ----------
iteration     cost    reduction     expected    gradient    log10(lambda)
1           49.6388     20.7        20.7        0.1         0.0         
2           28.962      11.3        11.3        0.0887      -0.2        
3           17.6522     6.49        6.49        0.1         -0.6        
4           11.1615     3.25        3.25        0.121       -1.2        
5           7.91106     1.5         1.5         0.173       -2.0        
6           6.4093      0.42        0.42        0.203       -3.1        
7           5.98881     0.0239      0.0239      0.0653      -4.3        
8           5.96495     2.69e-05    2.69e-05    0.00225     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

            final cost:   5.964923    

            final grad:   3.59436e-06

            final lambda: 4.4841551e-08

            time / iter:  935   ms

            total time:   8.42  seconds, of which

            derivs:     0.6 %

            back pass:  92.8%

            fwd pass:   1.5 %

            other:      5.1 % (graphics etc.)
 =========== end iLQG ===========
 21.813332 seconds (14.73 M allocations: 920.906 MB, 2.80% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
