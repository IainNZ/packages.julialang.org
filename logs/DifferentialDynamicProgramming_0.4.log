>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from git://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.1.0
INFO: Installing MacroTools v0.3.6
INFO: Installing Requires v0.2.3
INFO: Package database updated

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-117-generic #164-Ubuntu SMP Fri Apr 7 11:05:26 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1062.39453125 MB free)
Uptime: 22436.0 sec
Load Avg:  1.0  1.0146484375  1.03466796875
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz    1015341 s       4275 s      93970 s     927224 s         38 s
#2  3499 MHz     733764 s       3023 s      83251 s    1346155 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - DifferentialDynamicProgramming 0.1.0
 - JSON                          0.9.1
3 additional packages:
 - Compat                        0.24.0
 - MacroTools                    0.3.6
 - Requires                      0.2.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 63512.316   
RESULT: Gradient norm smaller than tolerance.
iterations 16  gradient 3.12518e-12  final value -28.3321      factorizations 15
  4.451891 seconds (3.10 M allocations: 234.832 MB, 3.03% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

---------- begin iLQG ----------
iteration     cost    reduction     expected    gradient    log10(lambda)
1           51.0746     27.1        27.1        0.115       0.0         
2           24.0163     11.4        11.4        0.0878      -0.2        
3           12.6654     4.64        4.64        0.0764      -0.6        
4           8.02479     2.18        2.18        0.0819      -1.2        
5           5.84668     1.09        1.09        0.139       -2.0        
6           4.75336     0.432       0.432       0.156       -3.1        
7           4.32124     0.0375      0.0375      0.0569      -4.3        
8           4.28374     4.81e-05    4.81e-05    0.00236     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

            final cost:   4.283696    

            final grad:   3.840024e-06

            final lambda: 4.4841551e-08

            time / iter:  842   ms

            total time:   7.58  seconds, of which

            derivs:     0.6 %

            back pass:  92.2%

            fwd pass:   1.3 %

            other:      5.8 % (graphics etc.)
 =========== end iLQG ===========
 20.294840 seconds (14.73 M allocations: 920.916 MB, 2.79% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
