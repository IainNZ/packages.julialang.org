>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from git://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.1.0
INFO: Installing MacroTools v0.3.7
INFO: Installing Requires v0.2.3
INFO: Package database updated

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-121-generic #170-Ubuntu SMP Wed Jun 14 09:04:33 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1125.86328125 MB free)
Uptime: 24605.0 sec
Load Avg:  1.15576171875  1.068359375  1.05029296875
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3501 MHz    1091794 s       7945 s      92459 s    1031327 s         33 s
#2  3501 MHz     766508 s       5988 s      83998 s    1517829 s          1 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - DifferentialDynamicProgramming 0.1.0
 - JSON                          0.9.1
3 additional packages:
 - Compat                        0.26.0
 - MacroTools                    0.3.7
 - Requires                      0.2.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 53272.964   
RESULT: Gradient norm smaller than tolerance.
iterations 20  gradient 3.29627e-12  final value -28.9618      factorizations 19
  5.477546 seconds (3.11 M allocations: 257.543 MB, 2.59% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

---------- begin iLQG ----------
iteration     cost    reduction     expected    gradient    log10(lambda)
1           49.0979     21.5        21.5        0.104       0.0         
2           27.5533     8.78        8.78        0.0772      -0.2        
3           18.777      4.37        4.37        0.0766      -0.6        
4           14.4029     2.71        2.71        0.111       -1.2        
5           11.6945     1.19        1.19        0.186       -2.0        
6           10.5039     0.142       0.142       0.173       -3.1        
7           10.3622     0.0032      0.0032      0.043       -4.3        
8           10.359      3.69e-06    3.69e-06    0.00154     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

            final cost:   10.35899    

            final grad:   2.650109e-06

            final lambda: 4.4841551e-08

            time / iter:  970   ms

            total time:   8.73  seconds, of which

            derivs:     0.5 %

            back pass:  92.9%

            fwd pass:   1.6 %

            other:      5.0 % (graphics etc.)
 =========== end iLQG ===========
 23.615742 seconds (14.73 M allocations: 920.830 MB, 2.67% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
