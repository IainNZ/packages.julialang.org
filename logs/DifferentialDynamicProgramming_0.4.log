>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from git://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.1.0
INFO: Installing MacroTools v0.3.7
INFO: Installing Requires v0.2.3
INFO: Package database updated

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-121-generic #170-Ubuntu SMP Wed Jun 14 09:04:33 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1139.53515625 MB free)
Uptime: 24154.0 sec
Load Avg:  0.87890625  0.98681640625  1.029296875
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3501 MHz    1071035 s       3185 s      96406 s    1020772 s         41 s
#2  3501 MHz     812867 s       3986 s      85126 s    1419502 s          1 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - DifferentialDynamicProgramming 0.1.0
 - JSON                          0.9.1
3 additional packages:
 - Compat                        0.26.0
 - MacroTools                    0.3.7
 - Requires                      0.2.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 65431.852   
RESULT: Gradient norm smaller than tolerance.
iterations 16  gradient 2.86776e-12  final value -32.4771      factorizations 15
  4.607262 seconds (3.10 M allocations: 232.282 MB, 2.77% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

---------- begin iLQG ----------
iteration     cost    reduction     expected    gradient    log10(lambda)
1           51.6206     25.5        25.5        0.112       0.0         
2           26.1008     9.66        9.66        0.0828      -0.2        
3           16.4424     5.49        5.49        0.0897      -0.6        
4           10.9573     4.17        4.17        0.138       -1.2        
5           6.78285     2.6         2.6         0.233       -2.0        
6           4.18228     0.683       0.683       0.306       -3.1        
7           3.49952     0.028       0.028       0.0823      -4.3        
8           3.47155     2.32e-05    2.32e-05    0.00256     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

            final cost:   3.471528    

            final grad:   3.881567e-06

            final lambda: 4.4841551e-08

            time / iter:  867   ms

            total time:   7.80  seconds, of which

            derivs:     0.7 %

            back pass:  93.2%

            fwd pass:   1.5 %

            other:      4.5 % (graphics etc.)
 =========== end iLQG ===========
 21.603333 seconds (14.73 M allocations: 920.855 MB, 2.85% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
