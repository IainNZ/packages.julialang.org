>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from git://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.1.0
INFO: Installing MacroTools v0.3.7
INFO: Installing Requires v0.2.3
INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of DifferentialDynamicProgramming
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-121-generic #170-Ubuntu SMP Wed Jun 14 09:04:33 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1107.60546875 MB free)
Uptime: 23639.0 sec
Load Avg:  0.95751953125  0.998046875  1.037109375
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3501 MHz    1080752 s       5230 s      84204 s     956490 s         46 s
#2  3501 MHz     762542 s       1858 s      73596 s    1445164 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - DifferentialDynamicProgramming 0.1.0
 - JSON                          0.9.1
3 additional packages:
 - Compat                        0.26.0
 - MacroTools                    0.3.7
 - Requires                      0.2.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 65211.912   
RESULT: Gradient norm smaller than tolerance.
iterations 18  gradient 3.10976e-12  final value -32.4202      factorizations 16
  5.196071 seconds (3.11 M allocations: 240.348 MB, 2.73% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

---------- begin iLQG ----------
iteration     cost    reduction     expected    gradient    log10(lambda)
1           48.8591     27.5        27.5        0.12        0.0         
2           21.3802     9.96        9.96        0.0859      -0.2        
3           11.4169     3.54        3.54        0.0702      -0.6        
4           7.87408     1.71        1.71        0.0833      -1.2        
5           6.16869     1.15        1.15        0.155       -2.0        
6           5.0229      0.287       0.287       0.191       -3.1        
7           4.73564     0.00811     0.00811     0.053       -4.3        
8           4.72753     6.55e-06    6.55e-06    0.00186     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

            final cost:   4.727523    

            final grad:   3.160212e-06

            final lambda: 4.4841551e-08

            time / iter:  964   ms

            total time:   8.68  seconds, of which

            derivs:     0.7 %

            back pass:  92.5%

            fwd pass:   1.9 %

            other:      4.9 % (graphics etc.)
 =========== end iLQG ===========
 20.758491 seconds (14.73 M allocations: 920.799 MB, 2.91% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
