>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from git://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.1.0
INFO: Installing MacroTools v0.3.7
INFO: Installing Requires v0.2.3
INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of DifferentialDynamicProgramming
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-126-generic #175-Ubuntu SMP Thu Jul 20 17:33:56 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1136.16015625 MB free)
Uptime: 23406.0 sec
Load Avg:  1.1259765625  1.06640625  0.99853515625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz    1035676 s        566 s      87643 s     992640 s         32 s
#2  3500 MHz     802830 s       6474 s      76862 s    1372501 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - DifferentialDynamicProgramming 0.1.0
 - JSON                          0.9.1
3 additional packages:
 - Compat                        0.26.0
 - MacroTools                    0.3.7
 - Requires                      0.2.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 67875.103   
RESULT: Gradient norm smaller than tolerance.
iterations 18  gradient 3.0621e-12  final value -29.8778      factorizations 17
  5.357722 seconds (3.11 M allocations: 244.216 MB, 2.65% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

---------- begin iLQG ----------
iteration     cost    reduction     expected    gradient    log10(lambda)
1           51.0253     23.4        23.4        0.0942      0.0         
2           27.6141     12.5        12.5        0.0828      -0.2        
3           15.1394     6.53        6.53        0.0892      -0.6        
4           8.61181     2.98        2.98        0.0998      -1.2        
5           5.62867     1.68        1.68        0.158       -2.0        
6           3.94665     0.609       0.609       0.211       -3.1        
7           3.33814     0.0367      0.0367      0.0733      -4.3        
8           3.3014      3.87e-05    3.87e-05    0.00264     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

            final cost:   3.301364    

            final grad:   3.999321e-06

            final lambda: 4.4841551e-08

            time / iter:  755   ms

            total time:   6.80  seconds, of which

            derivs:     0.4 %

            back pass:  92.7%

            fwd pass:   1.5 %

            other:      5.4 % (graphics etc.)
 =========== end iLQG ===========
 20.539288 seconds (14.73 M allocations: 920.823 MB, 3.09% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
