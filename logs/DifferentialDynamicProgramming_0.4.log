>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from git://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.1.0
INFO: Installing MacroTools v0.3.7
INFO: Installing Requires v0.2.3
INFO: Package database updated

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-121-generic #170-Ubuntu SMP Wed Jun 14 09:04:33 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1138.61328125 MB free)
Uptime: 23486.0 sec
Load Avg:  1.0556640625  1.0302734375  1.048828125
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz    1040831 s         68 s      97145 s     995490 s         36 s
#2  3499 MHz     825954 s       6072 s      89062 s    1350068 s          1 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - DifferentialDynamicProgramming 0.1.0
 - JSON                          0.9.1
3 additional packages:
 - Compat                        0.26.0
 - MacroTools                    0.3.7
 - Requires                      0.2.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 61131.075   
RESULT: Gradient norm smaller than tolerance.
iterations 18  gradient 3.17084e-12  final value -27.199       factorizations 17
  4.694416 seconds (3.11 M allocations: 244.340 MB, 2.70% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

---------- begin iLQG ----------
iteration     cost    reduction     expected    gradient    log10(lambda)
1           51.6489     24          24          0.104       0.0         
2           27.5994     9.6         9.6         0.0806      -0.2        
3           17.9957     4.19        4.19        0.0822      -0.6        
4           13.8032     2.32        2.32        0.11        -1.2        
5           11.4842     1.19        1.19        0.184       -2.0        
6           10.2934     0.36        0.36        0.207       -3.1        
7           9.93341     0.0272      0.0272      0.0597      -4.3        
8           9.90621     3.6e-05    3.6e-05    0.00215     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

            final cost:   9.906171    

            final grad:   3.641034e-06

            final lambda: 4.4841551e-08

            time / iter:  1012  ms

            total time:   9.11  seconds, of which

            derivs:     0.7 %

            back pass:  92.3%

            fwd pass:   1.5 %

            other:      5.6 % (graphics etc.)
 =========== end iLQG ===========
 23.424046 seconds (14.73 M allocations: 920.824 MB, 2.85% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
