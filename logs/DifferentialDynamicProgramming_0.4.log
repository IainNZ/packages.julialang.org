>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from git://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.1.0
INFO: Installing MacroTools v0.3.7
INFO: Installing Requires v0.2.3
INFO: Package database updated

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-121-generic #170-Ubuntu SMP Wed Jun 14 09:04:33 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1139.65625 MB free)
Uptime: 23559.0 sec
Load Avg:  0.99609375  1.00537109375  1.03466796875
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz    1084663 s       5452 s      95630 s     928603 s         40 s
#2  3499 MHz     746424 s       1831 s      84944 s    1425882 s          1 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - DifferentialDynamicProgramming 0.1.0
 - JSON                          0.9.1
3 additional packages:
 - Compat                        0.26.0
 - MacroTools                    0.3.7
 - Requires                      0.2.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 68211.547   
RESULT: Gradient norm smaller than tolerance.
iterations 12  gradient 3.25394e-12  final value -46.2496      factorizations 11
  4.714715 seconds (3.09 M allocations: 211.100 MB, 2.70% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

---------- begin iLQG ----------
iteration     cost    reduction     expected    gradient    log10(lambda)
1           48.4775     23.1        23.1        0.108       0.0         
2           25.3608     9.46        9.46        0.0802      -0.2        
3           15.898      4.68        4.68        0.0819      -0.6        
4           11.2145     2.64        2.64        0.104       -1.2        
5           8.57312     1.27        1.27        0.161       -2.0        
6           7.30213     0.211       0.211       0.157       -3.1        
7           7.0912      0.00592     0.00592     0.0464      -4.3        
8           7.08528     5.49e-06    5.49e-06    0.00172     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

            final cost:   7.085278    

            final grad:   2.858557e-06

            final lambda: 4.4841551e-08

            time / iter:  1019  ms

            total time:   9.18  seconds, of which

            derivs:     0.5 %

            back pass:  92.3%

            fwd pass:   1.6 %

            other:      5.6 % (graphics etc.)
 =========== end iLQG ===========
 23.943613 seconds (14.73 M allocations: 920.829 MB, 2.66% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
