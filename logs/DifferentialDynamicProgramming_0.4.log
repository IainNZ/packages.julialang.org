>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from git://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.1.0
INFO: Installing MacroTools v0.3.7
INFO: Installing Requires v0.2.3
INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of DifferentialDynamicProgramming
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-128-generic #177-Ubuntu SMP Tue Aug 8 11:40:23 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1139.46875 MB free)
Uptime: 24156.0 sec
Load Avg:  1.09814453125  1.05029296875  1.04541015625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz    1027346 s       6310 s      92042 s    1039866 s         36 s
#2  3499 MHz     818911 s        282 s      82753 s    1419014 s          2 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - DifferentialDynamicProgramming 0.1.0
 - JSON                          0.9.1
3 additional packages:
 - Compat                        0.26.0
 - MacroTools                    0.3.7
 - Requires                      0.2.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 64807.636   
RESULT: Gradient norm smaller than tolerance.
iterations 19  gradient 3.0535e-12  final value -38.0338      factorizations 18
  4.849070 seconds (3.11 M allocations: 250.338 MB, 2.74% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

---------- begin iLQG ----------
iteration     cost    reduction     expected    gradient    log10(lambda)
1           50.2601     21.6        21.6        0.105       0.0         
2           28.684      11.7        11.7        0.0928      -0.2        
3           17.0279     6.29        6.29        0.0977      -0.6        
4           10.7409     3.38        3.38        0.11        -1.2        
5           7.36464     2.12        2.12        0.185       -2.0        
6           5.24595     0.9         0.9         0.227       -3.1        
7           4.34565     0.0724      0.0724      0.077       -4.3        
8           4.27326     8.94e-05    8.94e-05    0.00272     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

            final cost:   4.27317     

            final grad:   4.287637e-06

            final lambda: 4.4841551e-08

            time / iter:  809   ms

            total time:   7.28  seconds, of which

            derivs:     0.7 %

            back pass:  93.5%

            fwd pass:   1.2 %

            other:      4.6 % (graphics etc.)
 =========== end iLQG ===========
 20.154101 seconds (14.73 M allocations: 920.857 MB, 2.90% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
