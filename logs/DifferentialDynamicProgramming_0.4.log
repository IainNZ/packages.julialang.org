>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from git://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.1.0
INFO: Installing MacroTools v0.3.7
INFO: Installing Requires v0.2.3
INFO: Package database updated

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-128-generic #177-Ubuntu SMP Tue Aug 8 11:40:23 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1149.23046875 MB free)
Uptime: 24373.0 sec
Load Avg:  0.87939453125  0.9716796875  1.02392578125
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz    1098360 s       1246 s      90723 s    1015354 s         41 s
#2  3500 MHz     838671 s       5229 s      80640 s    1430356 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - DifferentialDynamicProgramming 0.1.0
 - JSON                          0.9.1
3 additional packages:
 - Compat                        0.26.0
 - MacroTools                    0.3.7
 - Requires                      0.2.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 61672.747   
RESULT: Gradient norm smaller than tolerance.
iterations 13  gradient 2.6999e-12  final value -17.6747      factorizations 12
  5.070345 seconds (3.10 M allocations: 218.680 MB, 2.69% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

---------- begin iLQG ----------
iteration     cost    reduction     expected    gradient    log10(lambda)
1           49.9498     21.9        21.9        0.107       0.0         
2           28.0477     10.7        10.7        0.0864      -0.2        
3           17.3467     7           7           0.101       -0.6        
4           10.3421     4.01        4.01        0.142       -1.2        
5           6.32889     1.94        1.94        0.178       -2.0        
6           4.39335     0.754       0.754       0.237       -3.1        
7           3.63983     0.0466      0.0466      0.0725      -4.3        
8           3.59328     4.62e-05    4.62e-05    0.00262     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

            final cost:   3.593234    

            final grad:   3.944775e-06

            final lambda: 4.4841551e-08

            time / iter:  868   ms

            total time:   7.81  seconds, of which

            derivs:     0.7 %

            back pass:  94.2%

            fwd pass:   1.2 %

            other:      3.9 % (graphics etc.)
 =========== end iLQG ===========
 22.651214 seconds (14.73 M allocations: 920.831 MB, 2.79% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
