>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from git://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.1.0
INFO: Installing MacroTools v0.3.6
INFO: Installing Requires v0.2.3
INFO: Package database updated

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-116-generic #163-Ubuntu SMP Fri Mar 31 14:13:22 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1105.6875 MB free)
Uptime: 22184.0 sec
Load Avg:  1.00830078125  1.06982421875  1.04833984375
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz    1017947 s       6918 s      83304 s     885100 s         46 s
#2  3499 MHz     686002 s       6508 s      75443 s    1371659 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - DifferentialDynamicProgramming 0.1.0
 - JSON                          0.9.0
3 additional packages:
 - Compat                        0.23.0
 - MacroTools                    0.3.6
 - Requires                      0.2.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 64517.219   
RESULT: Gradient norm smaller than tolerance.
iterations 19  gradient 3.20444e-12  final value -22.8021      factorizations 16
  5.421953 seconds (3.11 M allocations: 244.041 MB, 2.61% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

---------- begin iLQG ----------
iteration     cost    reduction     expected    gradient    log10(lambda)
1           51.1883     33.9        33.9        0.123       0.0         
2           17.3277     10          10          0.0773      -0.2        
3           7.3013      3.53        3.53        0.0582      -0.6        
4           3.7694      1.61        1.61        0.066       -1.2        
5           2.15805     0.523       0.523       0.106       -2.0        
6           1.6346      0.0878      0.0878      0.108       -3.1        
7           1.54684     0.00553     0.00553     0.0451      -4.3        
8           1.54131     7.25e-06    7.25e-06    0.00189     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

            final cost:   1.541304    

            final grad:   3.231921e-06

            final lambda: 4.4841551e-08

            time / iter:  941   ms

            total time:   8.47  seconds, of which

            derivs:     0.6 %

            back pass:  92.7%

            fwd pass:   1.7 %

            other:      5.0 % (graphics etc.)
 =========== end iLQG ===========
 22.702810 seconds (14.73 M allocations: 920.828 MB, 2.87% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
