>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from git://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.1.0
INFO: Installing MacroTools v0.3.7
INFO: Installing Requires v0.2.3
INFO: Package database updated

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-135-generic #184-Ubuntu SMP Wed Oct 18 11:55:51 UTC 2017 x86_64 x86_64
Memory: 2.93927001953125 GB (1068.08984375 MB free)
Uptime: 28219.0 sec
Load Avg:  1.10791015625  1.0224609375  1.0400390625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz    1303838 s         55 s     113838 s    1136883 s         48 s
#2  3500 MHz     914516 s       6193 s     102312 s    1700155 s          1 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - DifferentialDynamicProgramming 0.1.0
 - JSON                          0.9.1
3 additional packages:
 - Compat                        0.26.0
 - MacroTools                    0.3.7
 - Requires                      0.2.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 55978.499   
RESULT: Gradient norm smaller than tolerance.
iterations 16  gradient 2.95656e-12  final value -27.1771      factorizations 15
  4.897859 seconds (3.10 M allocations: 235.532 MB, 2.74% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

---------- begin iLQG ----------
iteration     cost    reduction     expected    gradient    log10(lambda)
1           50.1315     19.1        19.1        0.0881      0.0         
2           31.0782     9.43        9.43        0.0736      -0.2        
3           21.6517     5.59        5.59        0.0808      -0.6        
4           16.065      4.4         4.4         0.139       -1.2        
5           11.6612     2.41        2.41        0.27        -2.0        
6           9.25567     0.408       0.408       0.223       -3.1        
7           8.84803     0.0147      0.0147      0.0528      -4.3        
8           8.83334     1.47e-05    1.47e-05    0.00191     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

            final cost:   8.833328    

            final grad:   3.13963e-06

            final lambda: 4.4841551e-08

            time / iter:  764   ms

            total time:   6.88  seconds, of which

            derivs:     0.9 %

            back pass:  92.3%

            fwd pass:   1.4 %

            other:      5.4 % (graphics etc.)
 =========== end iLQG ===========
 17.441112 seconds (14.73 M allocations: 920.881 MB, 3.19% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
