>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from git://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.1.0
INFO: Installing MacroTools v0.3.7
INFO: Installing Requires v0.2.3
INFO: Package database updated

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-125-generic #174-Ubuntu SMP Mon Jul 10 18:51:24 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1147.09375 MB free)
Uptime: 24173.0 sec
Load Avg:  1.11328125  1.072265625  1.0556640625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3506 MHz    1110254 s       6722 s      98295 s     968465 s         32 s
#2  3506 MHz     776926 s        134 s      89359 s    1473233 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - DifferentialDynamicProgramming 0.1.0
 - JSON                          0.9.1
3 additional packages:
 - Compat                        0.26.0
 - MacroTools                    0.3.7
 - Requires                      0.2.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 61330.995   
RESULT: Gradient norm smaller than tolerance.
iterations 16  gradient 3.088e-12  final value -28.1101      factorizations 15
  5.170156 seconds (3.10 M allocations: 234.863 MB, 2.92% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

---------- begin iLQG ----------
iteration     cost    reduction     expected    gradient    log10(lambda)
1           48.1817     22.1        22.1        0.109       0.0         
2           26.0801     8.42        8.42        0.0789      -0.2        
3           17.6551     4.6         4.6         0.0753      -0.6        
4           13.0589     4.72        4.72        0.135       -1.2        
5           8.34337     3.24        3.24        0.252       -2.0        
6           5.10465     0.622       0.622       0.205       -3.1        
7           4.48233     0.0179      0.0179      0.0619      -4.3        
8           4.46439     1.31e-05    1.31e-05    0.00216     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

            final cost:   4.464377    

            final grad:   3.325526e-06

            final lambda: 4.4841551e-08

            time / iter:  917   ms

            total time:   8.25  seconds, of which

            derivs:     0.6 %

            back pass:  93.0%

            fwd pass:   1.2 %

            other:      5.2 % (graphics etc.)
 =========== end iLQG ===========
 20.433974 seconds (14.73 M allocations: 920.829 MB, 2.92% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
