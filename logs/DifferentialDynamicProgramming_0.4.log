>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from git://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.1.0
INFO: Installing MacroTools v0.3.7
INFO: Installing Requires v0.2.3
INFO: Package database updated

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-125-generic #174-Ubuntu SMP Mon Jul 10 18:51:24 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1154.66796875 MB free)
Uptime: 23570.0 sec
Load Avg:  0.96923828125  0.9853515625  1.02392578125
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz    1078122 s       5895 s      87359 s     968671 s         32 s
#2  3499 MHz     785667 s         72 s      78175 s    1398616 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - DifferentialDynamicProgramming 0.1.0
 - JSON                          0.9.1
3 additional packages:
 - Compat                        0.26.0
 - MacroTools                    0.3.7
 - Requires                      0.2.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 58471.699   
RESULT: Gradient norm smaller than tolerance.
iterations 18  gradient 3.27677e-12  final value -29.6775      factorizations 16
  5.507843 seconds (3.11 M allocations: 241.627 MB, 2.73% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

---------- begin iLQG ----------
iteration     cost    reduction     expected    gradient    log10(lambda)
1           50.819      31          31          0.131       0.0         
2           19.8557     8.72        8.72        0.0816      -0.2        
3           11.1312     3.05        3.05        0.0593      -0.6        
4           8.08362     2.02        2.02        0.0844      -1.2        
5           6.05915     1.45        1.45        0.151       -2.0        
6           4.60969     0.541       0.541       0.173       -3.1        
7           4.06834     0.036       0.036       0.059       -4.3        
8           4.03233     3.78e-05    3.78e-05    0.00228     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

            final cost:   4.032294    

            final grad:   3.585945e-06

            final lambda: 4.4841551e-08

            time / iter:  839   ms

            total time:   7.55  seconds, of which

            derivs:     0.7 %

            back pass:  92.1%

            fwd pass:   1.9 %

            other:      5.3 % (graphics etc.)
 =========== end iLQG ===========
 20.433446 seconds (14.73 M allocations: 920.855 MB, 2.98% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
