>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from git://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.1.0
INFO: Installing MacroTools v0.3.7
INFO: Installing Requires v0.2.3
INFO: Package database updated

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-121-generic #170-Ubuntu SMP Wed Jun 14 09:04:33 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1078.46875 MB free)
Uptime: 23188.0 sec
Load Avg:  0.99072265625  0.99462890625  0.97265625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz    1105371 s        277 s      94291 s     866227 s         36 s
#2  3499 MHz     698939 s       6134 s      86198 s    1439165 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - DifferentialDynamicProgramming 0.1.0
 - JSON                          0.9.1
3 additional packages:
 - Compat                        0.26.0
 - MacroTools                    0.3.7
 - Requires                      0.2.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 62566.820   
RESULT: Gradient norm smaller than tolerance.
iterations 17  gradient 2.88427e-12  final value -28.204       factorizations 16
  5.276898 seconds (3.10 M allocations: 238.250 MB, 2.64% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

---------- begin iLQG ----------
iteration     cost    reduction     expected    gradient    log10(lambda)
1           50.1441     24.8        24.8        0.11        0.0         
2           25.3923     12.4        12.4        0.092       -0.2        
3           13.0144     5.65        5.65        0.0894      -0.6        
4           7.36481     2.48        2.48        0.0893      -1.2        
5           4.88698     1.43        1.43        0.159       -2.0        
6           3.45874     0.347       0.347       0.191       -3.1        
7           3.11179     0.0113      0.0113      0.0601      -4.3        
8           3.10052     9.67e-06    9.67e-06    0.00207     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

            final cost:   3.100509    

            final grad:   3.43023e-06

            final lambda: 4.4841551e-08

            time / iter:  698   ms

            total time:   6.28  seconds, of which

            derivs:     0.8 %

            back pass:  89.7%

            fwd pass:   2.3 %

            other:      7.1 % (graphics etc.)
 =========== end iLQG ===========
 20.107138 seconds (14.73 M allocations: 920.854 MB, 2.91% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
