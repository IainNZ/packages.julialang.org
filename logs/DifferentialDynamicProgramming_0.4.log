>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from git://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.1.0
INFO: Installing MacroTools v0.3.6
INFO: Installing Requires v0.2.3
INFO: Package database updated

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-117-generic #164-Ubuntu SMP Fri Apr 7 11:05:26 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1064.1640625 MB free)
Uptime: 22167.0 sec
Load Avg:  1.03662109375  1.025390625  1.04541015625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz     992469 s       3412 s      90503 s     908703 s         36 s
#2  3499 MHz     711893 s       4055 s      79628 s    1338903 s          1 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - DifferentialDynamicProgramming 0.1.0
 - JSON                          0.9.1
3 additional packages:
 - Compat                        0.24.0
 - MacroTools                    0.3.6
 - Requires                      0.2.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 61497.614   
RESULT: Gradient norm smaller than tolerance.
iterations 21  gradient 3.02616e-12  final value -29.4781      factorizations 20
  5.037927 seconds (3.11 M allocations: 261.343 MB, 2.59% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

---------- begin iLQG ----------
iteration     cost    reduction     expected    gradient    log10(lambda)
1           49.1073     27.4        27.4        0.115       0.0         
2           21.6596     11          11          0.0846      -0.2        
3           10.709      4.32        4.32        0.0703      -0.6        
4           6.38725     2.47        2.47        0.0813      -1.2        
5           3.91268     1.49        1.49        0.152       -2.0        
6           2.42753     0.362       0.362       0.157       -3.1        
7           2.06563     0.0157      0.0157      0.0555      -4.3        
8           2.04992     1.58e-05    1.58e-05    0.0021      -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

            final cost:   2.049904    

            final grad:   3.490959e-06

            final lambda: 4.4841551e-08

            time / iter:  929   ms

            total time:   8.36  seconds, of which

            derivs:     0.7 %

            back pass:  92.7%

            fwd pass:   1.7 %

            other:      5.0 % (graphics etc.)
 =========== end iLQG ===========
 21.313628 seconds (14.73 M allocations: 920.891 MB, 2.86% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
