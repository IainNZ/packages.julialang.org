>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from git://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.1.0
INFO: Installing MacroTools v0.3.6
INFO: Installing Requires v0.2.3
INFO: Package database updated

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-119-generic #166-Ubuntu SMP Wed May 3 12:18:55 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1121.70703125 MB free)
Uptime: 23444.0 sec
Load Avg:  1.064453125  1.123046875  1.07080078125
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz    1062248 s       5878 s      87511 s     945176 s         57 s
#2  3500 MHz     738268 s       1080 s      74828 s    1428358 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - DifferentialDynamicProgramming 0.1.0
 - JSON                          0.9.1
3 additional packages:
 - Compat                        0.25.2
 - MacroTools                    0.3.6
 - Requires                      0.2.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 74498.175   
RESULT: Gradient norm smaller than tolerance.
iterations 12  gradient 2.92746e-12  final value -33.9338      factorizations 11
  5.339890 seconds (3.09 M allocations: 210.052 MB, 2.57% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

---------- begin iLQG ----------
iteration     cost    reduction     expected    gradient    log10(lambda)
1           49.3474     15.6        15.6        0.0799      0.0         
2           33.746      9.92        9.92        0.0788      -0.2        
3           23.8265     7.08        7.08        0.104       -0.6        
4           16.7422     4.12        4.12        0.145       -1.2        
5           12.6234     2.25        2.25        0.232       -2.0        
6           10.3742     0.676       0.676       0.28        -3.1        
7           9.69861     0.0279      0.0279      0.0656      -4.3        
8           9.67066     2.41e-05    2.41e-05    0.00219     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

            final cost:   9.670636    

            final grad:   3.24093e-06

            final lambda: 4.4841551e-08

            time / iter:  996   ms

            total time:   8.96  seconds, of which

            derivs:     0.4 %

            back pass:  92.9%

            fwd pass:   1.4 %

            other:      5.3 % (graphics etc.)
 =========== end iLQG ===========
 23.806800 seconds (14.73 M allocations: 920.833 MB, 2.74% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
