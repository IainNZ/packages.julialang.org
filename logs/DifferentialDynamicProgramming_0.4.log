>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from git://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.0.1
INFO: Installing MacroTools v0.3.0
INFO: Installing Requires v0.2.2
INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of DifferentialDynamicProgramming
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.4.5
Commit 2ac304d (2016-03-18 00:58 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 64609.605   
RESULT: Gradient norm smaller than tolerance.
iterations 18  gradient 3.06377e-12  final value -25.5169      factorizations 17
  4.572437 seconds (3.07 M allocations: 218.335 MB, 1.51% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

=========== begin iLQG ===========
iteration     cost    reduction     expected    gradient    log10(lambda)
1           50.4887     24.7        24.7        0.102       0.0         
2           25.8121     11.7        11.7        0.0821      -0.2        
3           14.1159     5.33        5.33        0.0797      -0.6        
4           8.7881      2.26        2.26        0.0866      -1.2        
5           6.52376     0.934       0.934       0.139       -2.0        
6           5.5897      0.271       0.271       0.166       -3.1        
7           5.31919     0.0195      0.0195      0.0548      -4.3        
8           5.29966     2.46e-05    2.46e-05    0.00207     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

                     final cost:   5.299639    

                     final grad:   3.504343e-06

                     final lambda: 0.0000000e+00

                     time / iter:  747   ms

                     total time:   6.72  seconds, of which

                     derivs:     0.6 %

                     back pass:  91.8%

                     fwd pass:   1.8 %

                     other:      5.8 % (graphics etc.)
 =========== end iLQG ===========
 18.331706 seconds (14.44 M allocations: 876.418 MB, 2.90% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
