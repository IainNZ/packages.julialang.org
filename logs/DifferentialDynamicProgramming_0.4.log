>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from git://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.1.0
INFO: Installing MacroTools v0.3.6
INFO: Installing Requires v0.2.3
INFO: Package database updated

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-117-generic #164-Ubuntu SMP Fri Apr 7 11:05:26 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1109.30859375 MB free)
Uptime: 22063.0 sec
Load Avg:  1.0263671875  1.04052734375  1.04541015625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz    1006998 s       4039 s      84287 s     888347 s         40 s
#2  3500 MHz     714018 s       3070 s      74471 s    1342806 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - DifferentialDynamicProgramming 0.1.0
 - JSON                          0.9.1
3 additional packages:
 - Compat                        0.24.0
 - MacroTools                    0.3.6
 - Requires                      0.2.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 70541.247   
RESULT: Gradient norm smaller than tolerance.
iterations 14  gradient 2.69145e-12  final value -23.3283      factorizations 13
  4.263820 seconds (3.10 M allocations: 222.026 MB, 2.96% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

---------- begin iLQG ----------
iteration     cost    reduction     expected    gradient    log10(lambda)
1           49.487      13.1        13.1        0.0816      0.0         
2           36.4195     11.3        11.3        0.0919      -0.2        
3           25.1301     9.84        9.84        0.126       -0.6        
4           15.2906     5.57        5.57        0.166       -1.2        
5           9.72047     1.83        1.83        0.161       -2.0        
6           7.88779     0.301       0.301       0.17        -3.1        
7           7.58706     0.00985     0.00985     0.0561      -4.3        
8           7.57722     8.61e-06    8.61e-06    0.00206     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

            final cost:   7.577208    

            final grad:   3.222558e-06

            final lambda: 4.4841551e-08

            time / iter:  795   ms

            total time:   7.16  seconds, of which

            derivs:     0.7 %

            back pass:  92.9%

            fwd pass:   1.4 %

            other:      5.0 % (graphics etc.)
 =========== end iLQG ===========
 21.523656 seconds (14.73 M allocations: 920.960 MB, 2.80% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
