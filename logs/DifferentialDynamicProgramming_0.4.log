>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from git://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.1.0
INFO: Installing MacroTools v0.3.7
INFO: Installing Requires v0.2.3
INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of DifferentialDynamicProgramming
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-121-generic #170-Ubuntu SMP Wed Jun 14 09:04:33 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1119.66015625 MB free)
Uptime: 23350.0 sec
Load Avg:  1.02880859375  1.02587890625  1.04541015625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz    1094824 s        720 s      88082 s     917882 s         29 s
#2  3500 MHz     723484 s       6004 s      75840 s    1434409 s          2 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - DifferentialDynamicProgramming 0.1.0
 - JSON                          0.9.1
3 additional packages:
 - Compat                        0.26.0
 - MacroTools                    0.3.7
 - Requires                      0.2.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 68087.238   
RESULT: Gradient norm smaller than tolerance.
iterations 19  gradient 2.86441e-12  final value -32.5224      factorizations 18
  3.938281 seconds (3.11 M allocations: 249.594 MB, 3.37% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

---------- begin iLQG ----------
iteration     cost    reduction     expected    gradient    log10(lambda)
1           52.4674     28.9        28.9        0.119       0.0         
2           23.5181     10.7        10.7        0.0854      -0.2        
3           12.8384     4.43        4.43        0.0791      -0.6        
4           8.4077      1.95        1.95        0.0847      -1.2        
5           6.45656     1.05        1.05        0.138       -2.0        
6           5.40821     0.423       0.423       0.158       -3.1        
7           4.98489     0.0313      0.0313      0.0581      -4.3        
8           4.95363     3.68e-05    3.68e-05    0.00234     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

            final cost:   4.953595    

            final grad:   3.731252e-06

            final lambda: 4.4841551e-08

            time / iter:  729   ms

            total time:   6.56  seconds, of which

            derivs:     0.6 %

            back pass:  91.7%

            fwd pass:   2.1 %

            other:      5.6 % (graphics etc.)
 =========== end iLQG ===========
 19.988049 seconds (14.73 M allocations: 920.799 MB, 2.76% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
