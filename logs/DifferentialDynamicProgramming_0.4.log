>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from git://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.1.0
INFO: Installing MacroTools v0.3.7
INFO: Installing Requires v0.2.3
INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of DifferentialDynamicProgramming
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-128-generic #177-Ubuntu SMP Tue Aug 8 11:40:23 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1132.6640625 MB free)
Uptime: 24902.0 sec
Load Avg:  0.99169921875  0.998046875  1.03662109375
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3504 MHz    1146608 s       2476 s      96846 s    1003630 s         31 s
#2  3504 MHz     787832 s       4112 s      88174 s    1529124 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - DifferentialDynamicProgramming 0.1.0
 - JSON                          0.9.1
3 additional packages:
 - Compat                        0.26.0
 - MacroTools                    0.3.7
 - Requires                      0.2.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 63407.787   
RESULT: Gradient norm smaller than tolerance.
iterations 15  gradient 3.04328e-12  final value -32.6561      factorizations 14
  4.588725 seconds (3.10 M allocations: 227.678 MB, 2.48% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

---------- begin iLQG ----------
iteration     cost    reduction     expected    gradient    log10(lambda)
1           50.0215     19.8        19.8        0.1         0.0         
2           30.2492     11.5        11.5        0.0899      -0.2        
3           18.7528     7.14        7.14        0.103       -0.6        
4           11.6156     4.04        4.04        0.142       -1.2        
5           7.57317     1.89        1.89        0.182       -2.0        
6           5.68624     0.502       0.502       0.205       -3.1        
7           5.1841      0.0263      0.0263      0.0657      -4.3        
8           5.15778     3.01e-05    3.01e-05    0.00229     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

            final cost:   5.157746    

            final grad:   3.66047e-06

            final lambda: 4.4841551e-08

            time / iter:  922   ms

            total time:   8.30  seconds, of which

            derivs:     0.5 %

            back pass:  93.1%

            fwd pass:   1.1 %

            other:      5.3 % (graphics etc.)
 =========== end iLQG ===========
 19.609030 seconds (14.73 M allocations: 920.855 MB, 2.93% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
