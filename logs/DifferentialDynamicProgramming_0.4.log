>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from git://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.1.0
INFO: Installing MacroTools v0.3.7
INFO: Installing Requires v0.2.3
INFO: Package database updated

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-128-generic #177-Ubuntu SMP Tue Aug 8 11:40:23 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1147.00390625 MB free)
Uptime: 23631.0 sec
Load Avg:  0.98486328125  1.01611328125  1.0400390625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3502 MHz    1080365 s        110 s      91856 s     928423 s         42 s
#2  3502 MHz     759737 s       6024 s      80207 s    1432092 s          1 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - DifferentialDynamicProgramming 0.1.0
 - JSON                          0.9.1
3 additional packages:
 - Compat                        0.26.0
 - MacroTools                    0.3.7
 - Requires                      0.2.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 68229.110   
RESULT: Gradient norm smaller than tolerance.
iterations 15  gradient 3.18748e-12  final value -25.0789      factorizations 14
  3.351747 seconds (3.10 M allocations: 229.096 MB, 3.23% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

---------- begin iLQG ----------
iteration     cost    reduction     expected    gradient    log10(lambda)
1           51.2        25.4        25.4        0.11        0.0         
2           25.7703     11.6        11.6        0.085       -0.2        
3           14.1375     5.71        5.71        0.0817      -0.6        
4           8.42542     2.58        2.58        0.0892      -1.2        
5           5.8484      1.51        1.51        0.143       -2.0        
6           4.33991     0.656       0.656       0.186       -3.1        
7           3.6835      0.049       0.049       0.0653      -4.3        
8           3.63448     5.84e-05    5.84e-05    0.00246     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

            final cost:   3.634421    

            final grad:   3.874095e-06

            final lambda: 4.4841551e-08

            time / iter:  696   ms

            total time:   6.27  seconds, of which

            derivs:     0.7 %

            back pass:  90.6%

            fwd pass:   2.3 %

            other:      6.4 % (graphics etc.)
 =========== end iLQG ===========
 18.420844 seconds (14.73 M allocations: 920.857 MB, 2.82% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
