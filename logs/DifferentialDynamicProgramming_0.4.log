>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from git://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.1.0
INFO: Installing MacroTools v0.3.6
INFO: Installing Requires v0.2.3
INFO: Package database updated

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-116-generic #163-Ubuntu SMP Fri Mar 31 14:13:22 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1060.05078125 MB free)
Uptime: 21833.0 sec
Load Avg:  1.10693359375  1.02685546875  0.97412109375
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz    1000598 s       3376 s      93138 s     869656 s         43 s
#2  3500 MHz     697189 s       3509 s      84105 s    1316889 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - DifferentialDynamicProgramming 0.1.0
 - JSON                          0.9.0
3 additional packages:
 - Compat                        0.23.0
 - MacroTools                    0.3.6
 - Requires                      0.2.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 60220.306   
RESULT: Gradient norm smaller than tolerance.
iterations 19  gradient 3.26727e-12  final value -33.1446      factorizations 18
  4.609469 seconds (3.11 M allocations: 248.811 MB, 2.64% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

---------- begin iLQG ----------
iteration     cost    reduction     expected    gradient    log10(lambda)
1           50.3711     27.3        27.3        0.119       0.0         
2           23.1005     10.6        10.6        0.0825      -0.2        
3           12.5069     5.03        5.03        0.0807      -0.6        
4           7.47607     2.28        2.28        0.104       -1.2        
5           5.19738     0.716       0.716       0.132       -2.0        
6           4.48146     0.106       0.106       0.126       -3.1        
7           4.37529     0.00429     0.00429     0.0432      -4.3        
8           4.371       5.21e-06    5.21e-06    0.00175     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

            final cost:   4.370995    

            final grad:   2.978517e-06

            final lambda: 4.4841551e-08

            time / iter:  650   ms

            total time:   5.85  seconds, of which

            derivs:     0.9 %

            back pass:  92.7%

            fwd pass:   1.7 %

            other:      4.8 % (graphics etc.)
 =========== end iLQG ===========
 18.096870 seconds (14.73 M allocations: 920.891 MB, 3.02% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
