>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from git://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.1.0
INFO: Installing MacroTools v0.3.7
INFO: Installing Requires v0.2.3
INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of DifferentialDynamicProgramming
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-128-generic #177-Ubuntu SMP Tue Aug 8 11:40:23 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1151.13671875 MB free)
Uptime: 24685.0 sec
Load Avg:  1.01123046875  1.03857421875  1.04541015625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz    1158084 s        139 s      98745 s     975147 s         28 s
#2  3499 MHz     781914 s       6519 s      86124 s    1520336 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - DifferentialDynamicProgramming 0.1.0
 - JSON                          0.9.1
3 additional packages:
 - Compat                        0.26.0
 - MacroTools                    0.3.7
 - Requires                      0.2.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 58329.204   
RESULT: Gradient norm smaller than tolerance.
iterations 16  gradient 3.12883e-12  final value -25.748       factorizations 15
  5.234566 seconds (3.10 M allocations: 233.202 MB, 2.72% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

---------- begin iLQG ----------
iteration     cost    reduction     expected    gradient    log10(lambda)
1           50.5051     20.3        20.3        0.0958      0.0         
2           30.1777     11.9        11.9        0.0887      -0.2        
3           18.3204     7.34        7.34        0.105       -0.6        
4           10.9795     3.42        3.42        0.117       -1.2        
5           7.56347     1.82        1.82        0.188       -2.0        
6           5.74107     0.601       0.601       0.244       -3.1        
7           5.14015     0.0291      0.0291      0.0682      -4.3        
8           5.11102     2.81e-05    2.81e-05    0.0024      -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

            final cost:   5.110989    

            final grad:   3.796039e-06

            final lambda: 4.4841551e-08

            time / iter:  758   ms

            total time:   6.83  seconds, of which

            derivs:     0.8 %

            back pass:  91.4%

            fwd pass:   1.7 %

            other:      6.2 % (graphics etc.)
 =========== end iLQG ===========
 20.870277 seconds (14.73 M allocations: 920.850 MB, 2.92% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
