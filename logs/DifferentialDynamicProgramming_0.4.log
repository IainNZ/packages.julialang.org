>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from git://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.1.0
INFO: Installing MacroTools v0.3.7
INFO: Installing Requires v0.2.3
INFO: Package database updated

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-128-generic #177-Ubuntu SMP Tue Aug 8 11:40:23 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1156.87890625 MB free)
Uptime: 24293.0 sec
Load Avg:  1.0029296875  1.02880859375  1.04541015625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3512 MHz    1102191 s        106 s      95398 s    1000025 s         36 s
#2  3512 MHz     820620 s       6368 s      84474 s    1437172 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - DifferentialDynamicProgramming 0.1.0
 - JSON                          0.9.1
3 additional packages:
 - Compat                        0.26.0
 - MacroTools                    0.3.7
 - Requires                      0.2.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 68818.242   
RESULT: Gradient norm smaller than tolerance.
iterations 16  gradient 2.62093e-12  final value -31.4266      factorizations 15
  3.118359 seconds (3.10 M allocations: 232.860 MB, 3.31% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

---------- begin iLQG ----------
iteration     cost    reduction     expected    gradient    log10(lambda)
1           50.3745     15.4        15.4        0.0867      0.0         
2           34.9874     9.97        9.97        0.0828      -0.2        
3           25.0199     8.69        8.69        0.12        -0.6        
4           16.3298     6.55        6.55        0.196       -1.2        
5           9.78267     2.91        2.91        0.245       -2.0        
6           6.87732     0.795       0.795       0.271       -3.1        
7           6.08239     0.0501      0.0501      0.0797      -4.3        
8           6.03226     5.7e-05    5.7e-05    0.00273     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

            final cost:   6.032201    

            final grad:   4.220821e-06

            final lambda: 4.4841551e-08

            time / iter:  865   ms

            total time:   7.78  seconds, of which

            derivs:     0.6 %

            back pass:  92.8%

            fwd pass:   1.7 %

            other:      4.9 % (graphics etc.)
 =========== end iLQG ===========
 20.380436 seconds (14.73 M allocations: 920.800 MB, 2.96% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
