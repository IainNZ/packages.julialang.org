>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from git://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.1.0
INFO: Installing MacroTools v0.3.7
INFO: Installing Requires v0.2.3
INFO: Package database updated

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-119-generic #166-Ubuntu SMP Wed May 3 12:18:55 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1038.91796875 MB free)
Uptime: 22906.0 sec
Load Avg:  0.9970703125  1.0146484375  1.0400390625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz    1039878 s       6972 s     100058 s     915151 s         43 s
#2  3500 MHz     768476 s         61 s      88804 s    1340038 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - DifferentialDynamicProgramming 0.1.0
 - JSON                          0.9.1
3 additional packages:
 - Compat                        0.26.0
 - MacroTools                    0.3.7
 - Requires                      0.2.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 67606.459   
RESULT: Gradient norm smaller than tolerance.
iterations 17  gradient 3.04909e-12  final value -31.0842      factorizations 16
  5.125290 seconds (3.10 M allocations: 238.670 MB, 2.57% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

---------- begin iLQG ----------
iteration     cost    reduction     expected    gradient    log10(lambda)
1           50.5812     27.2        27.2        0.119       0.0         
2           23.3845     10.6        10.6        0.0867      -0.2        
3           12.7427     4.9         4.9         0.0781      -0.6        
4           7.83867     3.02        3.02        0.109       -1.2        
5           4.82364     1.64        1.64        0.159       -2.0        
6           3.18133     0.542       0.542       0.161       -3.1        
7           2.63957     0.0352      0.0352      0.0587      -4.3        
8           2.60436     3.97e-05    3.97e-05    0.00231     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

            final cost:   2.604324    

            final grad:   3.833509e-06

            final lambda: 4.4841551e-08

            time / iter:  604   ms

            total time:   5.44  seconds, of which

            derivs:     0.6 %

            back pass:  91.7%

            fwd pass:   1.6 %

            other:      6.1 % (graphics etc.)
 =========== end iLQG ===========
 19.263978 seconds (14.73 M allocations: 920.798 MB, 3.05% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
