>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from git://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.1.0
INFO: Installing MacroTools v0.3.6
INFO: Installing Requires v0.2.3
INFO: Package database updated

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-116-generic #163-Ubuntu SMP Fri Mar 31 14:13:22 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1062.08203125 MB free)
Uptime: 22609.0 sec
Load Avg:  1.14892578125  1.07275390625  1.0693359375
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3515 MHz    1052222 s       6739 s      90787 s     874067 s         45 s
#2  3515 MHz     656140 s         94 s      79747 s    1441167 s          1 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - DifferentialDynamicProgramming 0.1.0
 - JSON                          0.9.1
3 additional packages:
 - Compat                        0.24.0
 - MacroTools                    0.3.6
 - Requires                      0.2.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 59516.202   
RESULT: Gradient norm smaller than tolerance.
iterations 17  gradient 2.9134e-12  final value -27.394       factorizations 16
  4.099826 seconds (3.10 M allocations: 240.569 MB, 3.00% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

---------- begin iLQG ----------
iteration     cost    reduction     expected    gradient    log10(lambda)
1           49.4526     20.8        20.8        0.0982      0.0         
2           28.6627     9.58        9.58        0.0784      -0.2        
3           19.0794     5.62        5.62        0.0902      -0.6        
4           13.4607     3.24        3.24        0.128       -1.2        
5           10.2172     1.65        1.65        0.177       -2.0        
6           8.56307     0.609       0.609       0.21        -3.1        
7           7.95448     0.0456      0.0456      0.0671      -4.3        
8           7.90885     5.52e-05    5.52e-05    0.00256     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

            final cost:   7.908793    

            final grad:   3.975901e-06

            final lambda: 4.4841551e-08

            time / iter:  832   ms

            total time:   7.49  seconds, of which

            derivs:     0.9 %

            back pass:  93.7%

            fwd pass:   1.3 %

            other:      4.1 % (graphics etc.)
 =========== end iLQG ===========
 20.638114 seconds (14.73 M allocations: 920.828 MB, 2.86% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
