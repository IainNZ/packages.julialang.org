>>> 'Pkg.add("DiffEqSensitivity")' log
INFO: Installing BinDeps v0.8.8
INFO: Installing BinaryProvider v0.3.3
INFO: Installing CommonSubexpressions v0.1.0
INFO: Installing DataStructures v0.8.4
INFO: Installing DiffBase v0.3.2
INFO: Installing DiffEqBase v3.13.3
INFO: Installing DiffEqCallbacks v1.1.1
INFO: Installing DiffEqDiffTools v0.4.1
INFO: Installing DiffEqOperators v1.3.0
INFO: Installing DiffEqSensitivity v1.2.0
INFO: Installing DiffResults v0.0.3
INFO: Installing DiffRules v0.0.6
INFO: Installing Distances v0.6.0
INFO: Installing ForwardDiff v0.7.5
INFO: Installing FunctionWrappers v0.1.0
INFO: Installing GenericSVD v0.1.0
INFO: Installing IteratorInterfaceExtensions v0.0.2
INFO: Installing Juno v0.4.1
INFO: Installing LineSearches v4.0.0
INFO: Installing LinearMaps v1.0.4
INFO: Installing MacroTools v0.4.2
INFO: Installing Media v0.3.0
INFO: Installing Missings v0.2.10
INFO: Installing MuladdMacro v0.0.2
INFO: Installing NLSolversBase v4.4.1
INFO: Installing NLsolve v1.1.1
INFO: Installing NaNMath v0.3.1
INFO: Installing NamedTuples v4.0.2
INFO: Installing OrdinaryDiffEq v3.21.0
INFO: Installing Parameters v0.9.1
INFO: Installing QuadGK v0.3.0
INFO: Installing RecipesBase v0.3.1
INFO: Installing RecursiveArrayTools v0.15.0
INFO: Installing Reexport v0.1.0
INFO: Installing Requires v0.4.4
INFO: Installing Roots v0.6.0
INFO: Installing SHA v0.5.7
INFO: Installing SimpleTraits v0.6.0
INFO: Installing SpecialFunctions v0.6.0
INFO: Installing StaticArrays v0.7.2
INFO: Installing TableTraits v0.2.0
INFO: Installing URIParser v0.3.1
INFO: Building DiffEqBase
INFO: ~~~ DifferentialEquations.jl *BREAKING* changes  ~~~

We have changed the front-end API on how
users may define equations of motion and 
problems, for all problem types that can
be used in the DifferentialEquations.jl.
These are *BREAKING* changes, and they
also have *NO WARNINGS*!

Please see our latest documentation here:
http://docs.juliadiffeq.org/latest/

or the blogpost that describes the changes:
http://juliadiffeq.org/2018/01/24/Parameters.html

In short, the mutated argument is the first argument,
and parameters are now directly passed
into the equations of motion function. For all
types now mutation goes first, then dependent variables, 
then parameters, then independent variables. 

`f(mutated, dependent variables, p/integrator, independent variables)`

For example, this means that the ODE syntax will be `f(u,p,t)` (for the
out-of-place) and `f(du,u,p,t)` (for the in-place). Notice
that this change also removes the need for ParameterizedFunctions
as now parameters are part of the equations of motion.

For more details please visit the above links!
INFO: Building SpecialFunctions
INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of DiffEqSensitivity
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("DiffEqSensitivity")' log
Julia Version 0.6.4
Commit 9d11f62bcb (2018-07-09 19:09 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-143-generic #192-Ubuntu SMP Tue Feb 27 10:45:36 UTC 2018 x86_64 x86_64
Memory: 2.939197540283203 GB (1990.625 MB free)
Uptime: 63013.0 sec
Load Avg:  1.01953125  1.0146484375  1.0400390625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz    3924844 s       4766 s     288038 s    1112994 s         12 s
#2  3500 MHz     984488 s         54 s     131832 s    5042047 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem MAX_THREADS=16)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.6
2 required packages:
 - DiffEqSensitivity             1.2.0
 - JSON                          0.17.2
43 additional packages:
 - BinDeps                       0.8.8
 - BinaryProvider                0.3.3
 - CommonSubexpressions          0.1.0
 - Compat                        1.0.0
 - DataStructures                0.8.4
 - DiffBase                      0.3.2
 - DiffEqBase                    3.13.3
 - DiffEqCallbacks               1.1.1
 - DiffEqDiffTools               0.4.1
 - DiffEqOperators               1.3.0
 - DiffResults                   0.0.3
 - DiffRules                     0.0.6
 - Distances                     0.6.0
 - ForwardDiff                   0.7.5
 - FunctionWrappers              0.1.0
 - GenericSVD                    0.1.0
 - IteratorInterfaceExtensions   0.0.2
 - Juno                          0.4.1
 - LineSearches                  4.0.0
 - LinearMaps                    1.0.4
 - MacroTools                    0.4.2
 - Media                         0.3.0
 - Missings                      0.2.10
 - MuladdMacro                   0.0.2
 - NLSolversBase                 4.4.1
 - NLsolve                       1.1.1
 - NaNMath                       0.3.1
 - NamedTuples                   4.0.2
 - Nullables                     0.0.6
 - OrdinaryDiffEq                3.21.0
 - Parameters                    0.9.1
 - QuadGK                        0.3.0
 - RecipesBase                   0.3.1
 - RecursiveArrayTools           0.15.0
 - Reexport                      0.1.0
 - Requires                      0.4.4
 - Roots                         0.6.0
 - SHA                           0.5.7
 - SimpleTraits                  0.6.0
 - SpecialFunctions              0.6.0
 - StaticArrays                  0.7.2
 - TableTraits                   0.2.0
 - URIParser                     0.3.1
INFO: Computing test dependencies for DiffEqSensitivity...
INFO: Installing Calculus v0.4.0
INFO: Installing ParameterizedFunctions v3.1.0
INFO: Installing SymEngine v0.4.1
INFO: Building SymEngine
Info: Found a valid dl path libgmp.so while looking for libmpfr
Info: Found a valid dl path libgmp.so.10 while looking for libmpfr
Info: Found a valid dl path libgmp.so.10.3.2 while looking for libmpfr
Info: Found a valid dl path libgmpxx.so while looking for libmpfr
Info: Found a valid dl path libgmpxx.so.4 while looking for libmpfr
Info: Found a valid dl path libgmpxx.so.4.5.2 while looking for libmpfr
Info: Found a valid dl path libmpc.so while looking for libmpfr
Info: Found a valid dl path libmpc.so.3 while looking for libmpfr
Info: Found a valid dl path libmpc.so.3.1.0 while looking for libmpfr
Info: Found a valid dl path libmpfr.so while looking for libmpfr
Info: /home/vagrant/.julia/v0.6/SymEngine/deps/symengine-0.3/lib/libmpfr.so matches our search criteria of libmpfr
Info: Found a valid dl path libgmp.so while looking for libgmp
Info: /home/vagrant/.julia/v0.6/SymEngine/deps/symengine-0.3/lib/libgmp.so matches our search criteria of libgmp
Info: Found a valid dl path libgmp.so while looking for libsymengine
Info: Found a valid dl path libgmp.so.10 while looking for libsymengine
Info: Found a valid dl path libgmp.so.10.3.2 while looking for libsymengine
Info: Found a valid dl path libgmpxx.so while looking for libsymengine
Info: Found a valid dl path libgmpxx.so.4 while looking for libsymengine
Info: Found a valid dl path libgmpxx.so.4.5.2 while looking for libsymengine
Info: Found a valid dl path libmpc.so while looking for libsymengine
Info: Found a valid dl path libmpc.so.3 while looking for libsymengine
Info: Found a valid dl path libmpc.so.3.1.0 while looking for libsymengine
Info: Found a valid dl path libmpfr.so while looking for libsymengine
Info: Found a valid dl path libmpfr.so.6 while looking for libsymengine
Info: Found a valid dl path libmpfr.so.6.0.1 while looking for libsymengine
Info: Found a valid dl path libsymengine.so while looking for libsymengine
Info: /home/vagrant/.julia/v0.6/SymEngine/deps/symengine-0.3/lib/libsymengine.so matches our search criteria of libsymengine
Info: Found a valid dl path libgmp.so while looking for libmpc
Info: Found a valid dl path libgmp.so.10 while looking for libmpc
Info: Found a valid dl path libgmp.so.10.3.2 while looking for libmpc
Info: Found a valid dl path libgmpxx.so while looking for libmpc
Info: Found a valid dl path libgmpxx.so.4 while looking for libmpc
Info: Found a valid dl path libgmpxx.so.4.5.2 while looking for libmpc
Info: Found a valid dl path libmpc.so while looking for libmpc
Info: /home/vagrant/.julia/v0.6/SymEngine/deps/symengine-0.3/lib/libmpc.so matches our search criteria of libmpc
INFO: Building DiffEqBase
INFO: ~~~ DifferentialEquations.jl *BREAKING* changes  ~~~

We have changed the front-end API on how
users may define equations of motion and 
problems, for all problem types that can
be used in the DifferentialEquations.jl.
These are *BREAKING* changes, and they
also have *NO WARNINGS*!

Please see our latest documentation here:
http://docs.juliadiffeq.org/latest/

or the blogpost that describes the changes:
http://juliadiffeq.org/2018/01/24/Parameters.html

In short, the mutated argument is the first argument,
and parameters are now directly passed
into the equations of motion function. For all
types now mutation goes first, then dependent variables, 
then parameters, then independent variables. 

`f(mutated, dependent variables, p/integrator, independent variables)`

For example, this means that the ODE syntax will be `f(u,p,t)` (for the
out-of-place) and `f(du,u,p,t)` (for the in-place). Notice
that this change also removes the need for ParameterizedFunctions
as now parameters are part of the equations of motion.

For more details please visit the above links!
INFO: Testing DiffEqSensitivity
Test Summary:     | Pass  Total
Local Sensitivity |    4      4
WARNING: abstol and reltol keywords are now atol and rtol, respectively
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] tols(::Float64, ::Float64, ::Float64, ::Float64) at /home/vagrant/.julia/v0.6/QuadGK/src/QuadGK.jl:166
 [3] #quadgk#13(::Float64, ::Float64, ::Float64, ::Float64, ::Int64, ::Int64, ::Function, ::Function, ::DiffEqSensitivity.AdjointSensitivityIntegrand{DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,Array{Float64,1},LotkaVolterra,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{LotkaVolterra,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Vern9Cache{Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}},DiffEqBase.ODESolution{Float64,3,Array{RowVector{Float64,Array{Float64,1}},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,2},1},1},DiffEqSensitivity.ODEAdjointProblem{RowVector{Float64,Array{Float64,1}},Float64,true,Array{Float64,1},DiffEqSensitivity.ODEAdjointSensitvityFunction{LotkaVolterra,DiffEqDiffTools.UJacobianWrapper{LotkaVolterra,Float64,Array{Float64,1}},DiffEqDiffTools.UJacobianWrapper{#dg,Float64,Array{Float64,1}},Void,Void,DiffEqSensitivity.SensitivityAlg{0,true,DataType},Array{Float64,1},DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,Array{Float64,1},LotkaVolterra,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{LotkaVolterra,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Vern9Cache{Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}},Void,Float64},DiffEqBase.CallbackSet{Tuple{},Tuple{DiffEqBase.DiscreteCallback{DiffEqCallbacks.##33#36{Base.RefValue{Float64}},DiffEqCallbacks.##34#37{DiffEqSensitivity.#time_choice#12{StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}},DiffEqSensitivity.#affect!#13{#dg,StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}},Array{Float64,1}},Base.RefValue{Float64}},DiffEqCallbacks.##35#38{DiffEqBase.#INITIALIZE_DEFAULT,Bool,DiffEqSensitivity.#time_choice#12{StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}},Base.RefValue{Float64},DiffEqCallbacks.##34#37{DiffEqSensitivity.#time_choice#12{StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}},DiffEqSensitivity.#affect!#13{#dg,StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}},Array{Float64,1}},Base.RefValue{Float64}}}}}},UniformScaling{Int64}},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{DiffEqSensitivity.ODEAdjointSensitvityFunction{LotkaVolterra,DiffEqDiffTools.UJacobianWrapper{LotkaVolterra,Float64,Array{Float64,1}},DiffEqDiffTools.UJacobianWrapper{#dg,Float64,Array{Float64,1}},Void,Void,DiffEqSensitivity.SensitivityAlg{0,true,DataType},Array{Float64,1},DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,Array{Float64,1},LotkaVolterra,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{LotkaVolterra,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Vern9Cache{Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}},Void,Float64},Array{RowVector{Float64,Array{Float64,1}},1},Array{Float64,1},Array{Array{Array{Float64,2},1},1},OrdinaryDiffEq.Vern9Cache{RowVector{Float64,Array{Float64,1}},Array{Float64,2},Array{Float64,2},Array{Float64,2},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}},LotkaVolterra,DiffEqDiffTools.ParamJacobianWrapper{LotkaVolterra,Float64,Array{Float64,1}},Void,Float64,DiffEqSensitivity.SensitivityAlg{0,true,DataType}}, ::Float64, ::Float64) at /home/vagrant/.julia/v0.6/QuadGK/src/QuadGK.jl:176
 [4] (::Base.#kw##quadgk)(::Array{Any,1}, ::Base.#quadgk, ::DiffEqSensitivity.AdjointSensitivityIntegrand{DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,Array{Float64,1},LotkaVolterra,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{LotkaVolterra,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Vern9Cache{Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}},DiffEqBase.ODESolution{Float64,3,Array{RowVector{Float64,Array{Float64,1}},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,2},1},1},DiffEqSensitivity.ODEAdjointProblem{RowVector{Float64,Array{Float64,1}},Float64,true,Array{Float64,1},DiffEqSensitivity.ODEAdjointSensitvityFunction{LotkaVolterra,DiffEqDiffTools.UJacobianWrapper{LotkaVolterra,Float64,Array{Float64,1}},DiffEqDiffTools.UJacobianWrapper{#dg,Float64,Array{Float64,1}},Void,Void,DiffEqSensitivity.SensitivityAlg{0,true,DataType},Array{Float64,1},DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,Array{Float64,1},LotkaVolterra,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{LotkaVolterra,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Vern9Cache{Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}},Void,Float64},DiffEqBase.CallbackSet{Tuple{},Tuple{DiffEqBase.DiscreteCallback{DiffEqCallbacks.##33#36{Base.RefValue{Float64}},DiffEqCallbacks.##34#37{DiffEqSensitivity.#time_choice#12{StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}},DiffEqSensitivity.#affect!#13{#dg,StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}},Array{Float64,1}},Base.RefValue{Float64}},DiffEqCallbacks.##35#38{DiffEqBase.#INITIALIZE_DEFAULT,Bool,DiffEqSensitivity.#time_choice#12{StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}},Base.RefValue{Float64},DiffEqCallbacks.##34#37{DiffEqSensitivity.#time_choice#12{StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}},DiffEqSensitivity.#affect!#13{#dg,StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}},Array{Float64,1}},Base.RefValue{Float64}}}}}},UniformScaling{Int64}},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{DiffEqSensitivity.ODEAdjointSensitvityFunction{LotkaVolterra,DiffEqDiffTools.UJacobianWrapper{LotkaVolterra,Float64,Array{Float64,1}},DiffEqDiffTools.UJacobianWrapper{#dg,Float64,Array{Float64,1}},Void,Void,DiffEqSensitivity.SensitivityAlg{0,true,DataType},Array{Float64,1},DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,Array{Float64,1},LotkaVolterra,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{LotkaVolterra,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Vern9Cache{Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}},Void,Float64},Array{RowVector{Float64,Array{Float64,1}},1},Array{Float64,1},Array{Array{Array{Float64,2},1},1},OrdinaryDiffEq.Vern9Cache{RowVector{Float64,Array{Float64,1}},Array{Float64,2},Array{Float64,2},Array{Float64,2},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}},LotkaVolterra,DiffEqDiffTools.ParamJacobianWrapper{LotkaVolterra,Float64,Array{Float64,1}},Void,Float64,DiffEqSensitivity.SensitivityAlg{0,true,DataType}}, ::Float64, ::Float64) at ./<missing>:0
 [5] #adjoint_sensitivities#14(::Float64, ::Float64, ::Float64, ::Float64, ::Array{Any,1}, ::Function, ::DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,Array{Float64,1},LotkaVolterra,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{LotkaVolterra,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Vern9Cache{Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}}, ::OrdinaryDiffEq.Vern9, ::#dg, ::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}, ::Void) at /home/vagrant/.julia/v0.6/DiffEqSensitivity/src/adjoint_sensitivity.jl:198
 [6] (::DiffEqSensitivity.#kw##adjoint_sensitivities)(::Array{Any,1}, ::DiffEqSensitivity.#adjoint_sensitivities, ::DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,Array{Float64,1},LotkaVolterra,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{LotkaVolterra,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Vern9Cache{Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}}, ::OrdinaryDiffEq.Vern9, ::Function, ::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}, ::Void) at ./<missing>:0 (repeats 2 times)
 [7] include_from_node1(::String) at ./loading.jl:576
 [8] include(::String) at ./sysimg.jl:14
 [9] macro expansion at /home/vagrant/.julia/v0.6/DiffEqSensitivity/test/runtests.jl:5 [inlined]
 [10] macro expansion at ./test.jl:860 [inlined]
 [11] anonymous at ./<missing>:?
 [12] include_from_node1(::String) at ./loading.jl:576
 [13] include(::String) at ./sysimg.jl:14
 [14] process_options(::Base.JLOptions) at ./client.jl:305
 [15] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/DiffEqSensitivity/test/adjoint.jl, in expression starting on line 20
WARNING: abstol and reltol keywords are now atol and rtol, respectively
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] tols(::Float64, ::Float64, ::Float64, ::Float64) at /home/vagrant/.julia/v0.6/QuadGK/src/QuadGK.jl:166
 [3] #quadgk#13(::Float64, ::Float64, ::Float64, ::Float64, ::Int64, ::Int64, ::Function, ::Function, ::DiffEqSensitivity.AdjointSensitivityIntegrand{DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,Array{Float64,1},LotkaVolterra,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{LotkaVolterra,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Vern9Cache{Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}},DiffEqBase.ODESolution{Float64,3,Array{RowVector{Float64,Array{Float64,1}},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,2},1},1},DiffEqSensitivity.ODEAdjointProblem{RowVector{Float64,Array{Float64,1}},Float64,true,Array{Float64,1},DiffEqSensitivity.ODEAdjointSensitvityFunction{LotkaVolterra,DiffEqDiffTools.UJacobianWrapper{LotkaVolterra,Float64,Array{Float64,1}},DiffEqDiffTools.UJacobianWrapper{#dg,Float64,Array{Float64,1}},Void,Void,DiffEqSensitivity.SensitivityAlg{0,true,DataType},Array{Float64,1},DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,Array{Float64,1},LotkaVolterra,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{LotkaVolterra,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Vern9Cache{Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}},Void,Float64},DiffEqBase.CallbackSet{Tuple{},Tuple{DiffEqBase.DiscreteCallback{DiffEqCallbacks.##33#36{Base.RefValue{Float64}},DiffEqCallbacks.##34#37{DiffEqSensitivity.#time_choice#12{StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}},DiffEqSensitivity.#affect!#13{#dg,StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}},Array{Float64,1}},Base.RefValue{Float64}},DiffEqCallbacks.##35#38{DiffEqBase.#INITIALIZE_DEFAULT,Bool,DiffEqSensitivity.#time_choice#12{StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}},Base.RefValue{Float64},DiffEqCallbacks.##34#37{DiffEqSensitivity.#time_choice#12{StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}},DiffEqSensitivity.#affect!#13{#dg,StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}},Array{Float64,1}},Base.RefValue{Float64}}}}}},UniformScaling{Int64}},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{DiffEqSensitivity.ODEAdjointSensitvityFunction{LotkaVolterra,DiffEqDiffTools.UJacobianWrapper{LotkaVolterra,Float64,Array{Float64,1}},DiffEqDiffTools.UJacobianWrapper{#dg,Float64,Array{Float64,1}},Void,Void,DiffEqSensitivity.SensitivityAlg{0,true,DataType},Array{Float64,1},DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,Array{Float64,1},LotkaVolterra,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{LotkaVolterra,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Vern9Cache{Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}},Void,Float64},Array{RowVector{Float64,Array{Float64,1}},1},Array{Float64,1},Array{Array{Array{Float64,2},1},1},OrdinaryDiffEq.Vern9Cache{RowVector{Float64,Array{Float64,1}},Array{Float64,2},Array{Float64,2},Array{Float64,2},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}},LotkaVolterra,DiffEqDiffTools.ParamJacobianWrapper{LotkaVolterra,Float64,Array{Float64,1}},Void,Float64,DiffEqSensitivity.SensitivityAlg{0,true,DataType}}, ::Float64, ::Float64) at /home/vagrant/.julia/v0.6/QuadGK/src/QuadGK.jl:176
 [4] (::Base.#kw##quadgk)(::Array{Any,1}, ::Base.#quadgk, ::DiffEqSensitivity.AdjointSensitivityIntegrand{DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,Array{Float64,1},LotkaVolterra,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{LotkaVolterra,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Vern9Cache{Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}},DiffEqBase.ODESolution{Float64,3,Array{RowVector{Float64,Array{Float64,1}},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,2},1},1},DiffEqSensitivity.ODEAdjointProblem{RowVector{Float64,Array{Float64,1}},Float64,true,Array{Float64,1},DiffEqSensitivity.ODEAdjointSensitvityFunction{LotkaVolterra,DiffEqDiffTools.UJacobianWrapper{LotkaVolterra,Float64,Array{Float64,1}},DiffEqDiffTools.UJacobianWrapper{#dg,Float64,Array{Float64,1}},Void,Void,DiffEqSensitivity.SensitivityAlg{0,true,DataType},Array{Float64,1},DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,Array{Float64,1},LotkaVolterra,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{LotkaVolterra,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Vern9Cache{Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}},Void,Float64},DiffEqBase.CallbackSet{Tuple{},Tuple{DiffEqBase.DiscreteCallback{DiffEqCallbacks.##33#36{Base.RefValue{Float64}},DiffEqCallbacks.##34#37{DiffEqSensitivity.#time_choice#12{StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}},DiffEqSensitivity.#affect!#13{#dg,StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}},Array{Float64,1}},Base.RefValue{Float64}},DiffEqCallbacks.##35#38{DiffEqBase.#INITIALIZE_DEFAULT,Bool,DiffEqSensitivity.#time_choice#12{StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}},Base.RefValue{Float64},DiffEqCallbacks.##34#37{DiffEqSensitivity.#time_choice#12{StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}},DiffEqSensitivity.#affect!#13{#dg,StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}},Array{Float64,1}},Base.RefValue{Float64}}}}}},UniformScaling{Int64}},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{DiffEqSensitivity.ODEAdjointSensitvityFunction{LotkaVolterra,DiffEqDiffTools.UJacobianWrapper{LotkaVolterra,Float64,Array{Float64,1}},DiffEqDiffTools.UJacobianWrapper{#dg,Float64,Array{Float64,1}},Void,Void,DiffEqSensitivity.SensitivityAlg{0,true,DataType},Array{Float64,1},DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,Array{Float64,1},LotkaVolterra,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{LotkaVolterra,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Vern9Cache{Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}},Void,Float64},Array{RowVector{Float64,Array{Float64,1}},1},Array{Float64,1},Array{Array{Array{Float64,2},1},1},OrdinaryDiffEq.Vern9Cache{RowVector{Float64,Array{Float64,1}},Array{Float64,2},Array{Float64,2},Array{Float64,2},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}},LotkaVolterra,DiffEqDiffTools.ParamJacobianWrapper{LotkaVolterra,Float64,Array{Float64,1}},Void,Float64,DiffEqSensitivity.SensitivityAlg{0,true,DataType}}, ::Float64, ::Float64) at ./<missing>:0
 [5] #adjoint_sensitivities#14(::Float64, ::Float64, ::Float64, ::Float64, ::Array{Any,1}, ::Function, ::DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,Array{Float64,1},LotkaVolterra,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{LotkaVolterra,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Vern9Cache{Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}}, ::OrdinaryDiffEq.Vern9, ::#dg, ::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}, ::Void) at /home/vagrant/.julia/v0.6/DiffEqSensitivity/src/adjoint_sensitivity.jl:198
 [6] (::DiffEqSensitivity.#kw##adjoint_sensitivities)(::Array{Any,1}, ::DiffEqSensitivity.#adjoint_sensitivities, ::DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,Array{Float64,1},LotkaVolterra,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{LotkaVolterra,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Vern9Cache{Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}}, ::OrdinaryDiffEq.Vern9, ::Function, ::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}, ::Void) at ./<missing>:0 (repeats 2 times)
 [7] include_from_node1(::String) at ./loading.jl:576
 [8] include(::String) at ./sysimg.jl:14
 [9] macro expansion at /home/vagrant/.julia/v0.6/DiffEqSensitivity/test/runtests.jl:5 [inlined]
 [10] macro expansion at ./test.jl:860 [inlined]
 [11] anonymous at ./<missing>:?
 [12] include_from_node1(::String) at ./loading.jl:576
 [13] include(::String) at ./sysimg.jl:14
 [14] process_options(::Base.JLOptions) at ./client.jl:305
 [15] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/DiffEqSensitivity/test/adjoint.jl, in expression starting on line 20
WARNING: abstol and reltol keywords are now atol and rtol, respectively
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] tols(::Float64, ::Float64, ::Float64, ::Float64) at /home/vagrant/.julia/v0.6/QuadGK/src/QuadGK.jl:166
 [3] #quadgk#13(::Float64, ::Float64, ::Float64, ::Float64, ::Int64, ::Int64, ::Function, ::Function, ::DiffEqSensitivity.AdjointSensitivityIntegrand{DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,Array{Float64,1},LotkaVolterra,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{LotkaVolterra,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Vern9Cache{Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}},DiffEqBase.ODESolution{Float64,3,Array{RowVector{Float64,Array{Float64,1}},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,2},1},1},DiffEqSensitivity.ODEAdjointProblem{RowVector{Float64,Array{Float64,1}},Float64,true,Array{Float64,1},DiffEqSensitivity.ODEAdjointSensitvityFunction{LotkaVolterra,DiffEqDiffTools.UJacobianWrapper{LotkaVolterra,Float64,Array{Float64,1}},DiffEqDiffTools.UJacobianWrapper{#dg,Float64,Array{Float64,1}},Void,Void,DiffEqSensitivity.SensitivityAlg{0,true,DataType},Array{Float64,1},DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,Array{Float64,1},LotkaVolterra,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{LotkaVolterra,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Vern9Cache{Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}},Void,Float64},DiffEqBase.CallbackSet{Tuple{},Tuple{DiffEqBase.DiscreteCallback{DiffEqCallbacks.##33#36{Base.RefValue{Float64}},DiffEqCallbacks.##34#37{DiffEqSensitivity.#time_choice#12{StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}},DiffEqSensitivity.#affect!#13{#dg,StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}},Array{Float64,1}},Base.RefValue{Float64}},DiffEqCallbacks.##35#38{DiffEqBase.#INITIALIZE_DEFAULT,Bool,DiffEqSensitivity.#time_choice#12{StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}},Base.RefValue{Float64},DiffEqCallbacks.##34#37{DiffEqSensitivity.#time_choice#12{StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}},DiffEqSensitivity.#affect!#13{#dg,StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}},Array{Float64,1}},Base.RefValue{Float64}}}}}},UniformScaling{Int64}},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{DiffEqSensitivity.ODEAdjointSensitvityFunction{LotkaVolterra,DiffEqDiffTools.UJacobianWrapper{LotkaVolterra,Float64,Array{Float64,1}},DiffEqDiffTools.UJacobianWrapper{#dg,Float64,Array{Float64,1}},Void,Void,DiffEqSensitivity.SensitivityAlg{0,true,DataType},Array{Float64,1},DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,Array{Float64,1},LotkaVolterra,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{LotkaVolterra,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Vern9Cache{Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}},Void,Float64},Array{RowVector{Float64,Array{Float64,1}},1},Array{Float64,1},Array{Array{Array{Float64,2},1},1},OrdinaryDiffEq.Vern9Cache{RowVector{Float64,Array{Float64,1}},Array{Float64,2},Array{Float64,2},Array{Float64,2},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}},LotkaVolterra,DiffEqDiffTools.ParamJacobianWrapper{LotkaVolterra,Float64,Array{Float64,1}},Void,Float64,DiffEqSensitivity.SensitivityAlg{0,true,DataType}}, ::Float64, ::Float64) at /home/vagrant/.julia/v0.6/QuadGK/src/QuadGK.jl:176
 [4] (::Base.#kw##quadgk)(::Array{Any,1}, ::Base.#quadgk, ::DiffEqSensitivity.AdjointSensitivityIntegrand{DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,Array{Float64,1},LotkaVolterra,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{LotkaVolterra,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Vern9Cache{Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}},DiffEqBase.ODESolution{Float64,3,Array{RowVector{Float64,Array{Float64,1}},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,2},1},1},DiffEqSensitivity.ODEAdjointProblem{RowVector{Float64,Array{Float64,1}},Float64,true,Array{Float64,1},DiffEqSensitivity.ODEAdjointSensitvityFunction{LotkaVolterra,DiffEqDiffTools.UJacobianWrapper{LotkaVolterra,Float64,Array{Float64,1}},DiffEqDiffTools.UJacobianWrapper{#dg,Float64,Array{Float64,1}},Void,Void,DiffEqSensitivity.SensitivityAlg{0,true,DataType},Array{Float64,1},DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,Array{Float64,1},LotkaVolterra,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{LotkaVolterra,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Vern9Cache{Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}},Void,Float64},DiffEqBase.CallbackSet{Tuple{},Tuple{DiffEqBase.DiscreteCallback{DiffEqCallbacks.##33#36{Base.RefValue{Float64}},DiffEqCallbacks.##34#37{DiffEqSensitivity.#time_choice#12{StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}},DiffEqSensitivity.#affect!#13{#dg,StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}},Array{Float64,1}},Base.RefValue{Float64}},DiffEqCallbacks.##35#38{DiffEqBase.#INITIALIZE_DEFAULT,Bool,DiffEqSensitivity.#time_choice#12{StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}},Base.RefValue{Float64},DiffEqCallbacks.##34#37{DiffEqSensitivity.#time_choice#12{StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}},DiffEqSensitivity.#affect!#13{#dg,StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}},Array{Float64,1}},Base.RefValue{Float64}}}}}},UniformScaling{Int64}},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{DiffEqSensitivity.ODEAdjointSensitvityFunction{LotkaVolterra,DiffEqDiffTools.UJacobianWrapper{LotkaVolterra,Float64,Array{Float64,1}},DiffEqDiffTools.UJacobianWrapper{#dg,Float64,Array{Float64,1}},Void,Void,DiffEqSensitivity.SensitivityAlg{0,true,DataType},Array{Float64,1},DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,Array{Float64,1},LotkaVolterra,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{LotkaVolterra,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Vern9Cache{Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}},Void,Float64},Array{RowVector{Float64,Array{Float64,1}},1},Array{Float64,1},Array{Array{Array{Float64,2},1},1},OrdinaryDiffEq.Vern9Cache{RowVector{Float64,Array{Float64,1}},Array{Float64,2},Array{Float64,2},Array{Float64,2},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}},LotkaVolterra,DiffEqDiffTools.ParamJacobianWrapper{LotkaVolterra,Float64,Array{Float64,1}},Void,Float64,DiffEqSensitivity.SensitivityAlg{0,true,DataType}}, ::Float64, ::Float64) at ./<missing>:0
 [5] #adjoint_sensitivities#14(::Float64, ::Float64, ::Float64, ::Float64, ::Array{Any,1}, ::Function, ::DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,Array{Float64,1},LotkaVolterra,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{LotkaVolterra,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Vern9Cache{Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}}, ::OrdinaryDiffEq.Vern9, ::#dg, ::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}, ::Void) at /home/vagrant/.julia/v0.6/DiffEqSensitivity/src/adjoint_sensitivity.jl:198
 [6] (::DiffEqSensitivity.#kw##adjoint_sensitivities)(::Array{Any,1}, ::DiffEqSensitivity.#adjoint_sensitivities, ::DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,Array{Float64,1},LotkaVolterra,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{LotkaVolterra,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Vern9Cache{Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}}, ::OrdinaryDiffEq.Vern9, ::Function, ::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}, ::Void) at ./<missing>:0 (repeats 2 times)
 [7] include_from_node1(::String) at ./loading.jl:576
 [8] include(::String) at ./sysimg.jl:14
 [9] macro expansion at /home/vagrant/.julia/v0.6/DiffEqSensitivity/test/runtests.jl:5 [inlined]
 [10] macro expansion at ./test.jl:860 [inlined]
 [11] anonymous at ./<missing>:?
 [12] include_from_node1(::String) at ./loading.jl:576
 [13] include(::String) at ./sysimg.jl:14
 [14] process_options(::Base.JLOptions) at ./client.jl:305
 [15] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/DiffEqSensitivity/test/adjoint.jl, in expression starting on line 20
WARNING: abstol and reltol keywords are now atol and rtol, respectively
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] tols(::Float64, ::Float64, ::Float64, ::Float64) at /home/vagrant/.julia/v0.6/QuadGK/src/QuadGK.jl:166
 [3] #quadgk#13(::Float64, ::Float64, ::Float64, ::Float64, ::Int64, ::Int64, ::Function, ::Function, ::DiffEqSensitivity.AdjointSensitivityIntegrand{DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,Array{Float64,1},LotkaVolterra,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{LotkaVolterra,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Vern9Cache{Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}},DiffEqBase.ODESolution{Float64,3,Array{RowVector{Float64,Array{Float64,1}},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,2},1},1},DiffEqSensitivity.ODEAdjointProblem{RowVector{Float64,Array{Float64,1}},Float64,true,Array{Float64,1},DiffEqSensitivity.ODEAdjointSensitvityFunction{LotkaVolterra,DiffEqDiffTools.UJacobianWrapper{LotkaVolterra,Float64,Array{Float64,1}},DiffEqDiffTools.UJacobianWrapper{#dg,Float64,Array{Float64,1}},Void,Void,DiffEqSensitivity.SensitivityAlg{0,true,DataType},Array{Float64,1},DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,Array{Float64,1},LotkaVolterra,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{LotkaVolterra,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Vern9Cache{Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}},Void,Float64},DiffEqBase.CallbackSet{Tuple{},Tuple{DiffEqBase.DiscreteCallback{DiffEqCallbacks.##33#36{Base.RefValue{Float64}},DiffEqCallbacks.##34#37{DiffEqSensitivity.#time_choice#12{StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}},DiffEqSensitivity.#affect!#13{#dg,StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}},Array{Float64,1}},Base.RefValue{Float64}},DiffEqCallbacks.##35#38{DiffEqBase.#INITIALIZE_DEFAULT,Bool,DiffEqSensitivity.#time_choice#12{StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}},Base.RefValue{Float64},DiffEqCallbacks.##34#37{DiffEqSensitivity.#time_choice#12{StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}},DiffEqSensitivity.#affect!#13{#dg,StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}},Array{Float64,1}},Base.RefValue{Float64}}}}}},UniformScaling{Int64}},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{DiffEqSensitivity.ODEAdjointSensitvityFunction{LotkaVolterra,DiffEqDiffTools.UJacobianWrapper{LotkaVolterra,Float64,Array{Float64,1}},DiffEqDiffTools.UJacobianWrapper{#dg,Float64,Array{Float64,1}},Void,Void,DiffEqSensitivity.SensitivityAlg{0,true,DataType},Array{Float64,1},DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,Array{Float64,1},LotkaVolterra,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{LotkaVolterra,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Vern9Cache{Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}},Void,Float64},Array{RowVector{Float64,Array{Float64,1}},1},Array{Float64,1},Array{Array{Array{Float64,2},1},1},OrdinaryDiffEq.Vern9Cache{RowVector{Float64,Array{Float64,1}},Array{Float64,2},Array{Float64,2},Array{Float64,2},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}},LotkaVolterra,DiffEqDiffTools.ParamJacobianWrapper{LotkaVolterra,Float64,Array{Float64,1}},Void,Float64,DiffEqSensitivity.SensitivityAlg{0,true,DataType}}, ::Float64, ::Float64) at /home/vagrant/.julia/v0.6/QuadGK/src/QuadGK.jl:176
 [4] (::Base.#kw##quadgk)(::Array{Any,1}, ::Base.#quadgk, ::DiffEqSensitivity.AdjointSensitivityIntegrand{DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,Array{Float64,1},LotkaVolterra,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{LotkaVolterra,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Vern9Cache{Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}},DiffEqBase.ODESolution{Float64,3,Array{RowVector{Float64,Array{Float64,1}},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,2},1},1},DiffEqSensitivity.ODEAdjointProblem{RowVector{Float64,Array{Float64,1}},Float64,true,Array{Float64,1},DiffEqSensitivity.ODEAdjointSensitvityFunction{LotkaVolterra,DiffEqDiffTools.UJacobianWrapper{LotkaVolterra,Float64,Array{Float64,1}},DiffEqDiffTools.UJacobianWrapper{#dg,Float64,Array{Float64,1}},Void,Void,DiffEqSensitivity.SensitivityAlg{0,true,DataType},Array{Float64,1},DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,Array{Float64,1},LotkaVolterra,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{LotkaVolterra,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Vern9Cache{Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}},Void,Float64},DiffEqBase.CallbackSet{Tuple{},Tuple{DiffEqBase.DiscreteCallback{DiffEqCallbacks.##33#36{Base.RefValue{Float64}},DiffEqCallbacks.##34#37{DiffEqSensitivity.#time_choice#12{StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}},DiffEqSensitivity.#affect!#13{#dg,StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}},Array{Float64,1}},Base.RefValue{Float64}},DiffEqCallbacks.##35#38{DiffEqBase.#INITIALIZE_DEFAULT,Bool,DiffEqSensitivity.#time_choice#12{StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}},Base.RefValue{Float64},DiffEqCallbacks.##34#37{DiffEqSensitivity.#time_choice#12{StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}},DiffEqSensitivity.#affect!#13{#dg,StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}},Array{Float64,1}},Base.RefValue{Float64}}}}}},UniformScaling{Int64}},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{DiffEqSensitivity.ODEAdjointSensitvityFunction{LotkaVolterra,DiffEqDiffTools.UJacobianWrapper{LotkaVolterra,Float64,Array{Float64,1}},DiffEqDiffTools.UJacobianWrapper{#dg,Float64,Array{Float64,1}},Void,Void,DiffEqSensitivity.SensitivityAlg{0,true,DataType},Array{Float64,1},DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,Array{Float64,1},LotkaVolterra,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{LotkaVolterra,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Vern9Cache{Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}},Void,Float64},Array{RowVector{Float64,Array{Float64,1}},1},Array{Float64,1},Array{Array{Array{Float64,2},1},1},OrdinaryDiffEq.Vern9Cache{RowVector{Float64,Array{Float64,1}},Array{Float64,2},Array{Float64,2},Array{Float64,2},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}},LotkaVolterra,DiffEqDiffTools.ParamJacobianWrapper{LotkaVolterra,Float64,Array{Float64,1}},Void,Float64,DiffEqSensitivity.SensitivityAlg{0,true,DataType}}, ::Float64, ::Float64) at ./<missing>:0
 [5] #adjoint_sensitivities#14(::Float64, ::Float64, ::Float64, ::Float64, ::Array{Any,1}, ::Function, ::DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,Array{Float64,1},LotkaVolterra,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{LotkaVolterra,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Vern9Cache{Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}}, ::OrdinaryDiffEq.Vern9, ::#dg, ::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}, ::Void) at /home/vagrant/.julia/v0.6/DiffEqSensitivity/src/adjoint_sensitivity.jl:198
 [6] (::DiffEqSensitivity.#kw##adjoint_sensitivities)(::Array{Any,1}, ::DiffEqSensitivity.#adjoint_sensitivities, ::DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,Array{Float64,1},LotkaVolterra,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{LotkaVolterra,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Vern9Cache{Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}}, ::OrdinaryDiffEq.Vern9, ::Function, ::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}, ::Void) at ./<missing>:0 (repeats 2 times)
 [7] include_from_node1(::String) at ./loading.jl:576
 [8] include(::String) at ./sysimg.jl:14
 [9] macro expansion at /home/vagrant/.julia/v0.6/DiffEqSensitivity/test/runtests.jl:5 [inlined]
 [10] macro expansion at ./test.jl:860 [inlined]
 [11] anonymous at ./<missing>:?
 [12] include_from_node1(::String) at ./loading.jl:576
 [13] include(::String) at ./sysimg.jl:14
 [14] process_options(::Base.JLOptions) at ./client.jl:305
 [15] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/DiffEqSensitivity/test/adjoint.jl, in expression starting on line 20
WARNING: abstol and reltol keywords are now atol and rtol, respectively
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] tols(::Float64, ::Float64, ::Float64, ::Float64) at /home/vagrant/.julia/v0.6/QuadGK/src/QuadGK.jl:166
 [3] #quadgk#13(::Float64, ::Float64, ::Float64, ::Float64, ::Int64, ::Int64, ::Function, ::Function, ::DiffEqSensitivity.AdjointSensitivityIntegrand{DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,Array{Float64,1},LotkaVolterra,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{LotkaVolterra,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Vern9Cache{Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}},DiffEqBase.ODESolution{Float64,3,Array{RowVector{Float64,Array{Float64,1}},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,2},1},1},DiffEqSensitivity.ODEAdjointProblem{RowVector{Float64,Array{Float64,1}},Float64,true,Array{Float64,1},DiffEqSensitivity.ODEAdjointSensitvityFunction{LotkaVolterra,DiffEqDiffTools.UJacobianWrapper{LotkaVolterra,Float64,Array{Float64,1}},DiffEqDiffTools.UJacobianWrapper{#dg,Float64,Array{Float64,1}},Void,Void,DiffEqSensitivity.SensitivityAlg{0,true,DataType},Array{Float64,1},DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,Array{Float64,1},LotkaVolterra,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{LotkaVolterra,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Vern9Cache{Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}},Void,Float64},DiffEqBase.CallbackSet{Tuple{},Tuple{DiffEqBase.DiscreteCallback{DiffEqCallbacks.##33#36{Base.RefValue{Float64}},DiffEqCallbacks.##34#37{DiffEqSensitivity.#time_choice#12{StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}},DiffEqSensitivity.#affect!#13{#dg,StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}},Array{Float64,1}},Base.RefValue{Float64}},DiffEqCallbacks.##35#38{DiffEqBase.#INITIALIZE_DEFAULT,Bool,DiffEqSensitivity.#time_choice#12{StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}},Base.RefValue{Float64},DiffEqCallbacks.##34#37{DiffEqSensitivity.#time_choice#12{StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}},DiffEqSensitivity.#affect!#13{#dg,StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}},Array{Float64,1}},Base.RefValue{Float64}}}}}},UniformScaling{Int64}},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{DiffEqSensitivity.ODEAdjointSensitvityFunction{LotkaVolterra,DiffEqDiffTools.UJacobianWrapper{LotkaVolterra,Float64,Array{Float64,1}},DiffEqDiffTools.UJacobianWrapper{#dg,Float64,Array{Float64,1}},Void,Void,DiffEqSensitivity.SensitivityAlg{0,true,DataType},Array{Float64,1},DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,Array{Float64,1},LotkaVolterra,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{LotkaVolterra,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Vern9Cache{Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}},Void,Float64},Array{RowVector{Float64,Array{Float64,1}},1},Array{Float64,1},Array{Array{Array{Float64,2},1},1},OrdinaryDiffEq.Vern9Cache{RowVector{Float64,Array{Float64,1}},Array{Float64,2},Array{Float64,2},Array{Float64,2},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}},LotkaVolterra,DiffEqDiffTools.ParamJacobianWrapper{LotkaVolterra,Float64,Array{Float64,1}},Void,Float64,DiffEqSensitivity.SensitivityAlg{0,true,DataType}}, ::Float64, ::Float64) at /home/vagrant/.julia/v0.6/QuadGK/src/QuadGK.jl:176
 [4] (::Base.#kw##quadgk)(::Array{Any,1}, ::Base.#quadgk, ::DiffEqSensitivity.AdjointSensitivityIntegrand{DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,Array{Float64,1},LotkaVolterra,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{LotkaVolterra,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Vern9Cache{Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}},DiffEqBase.ODESolution{Float64,3,Array{RowVector{Float64,Array{Float64,1}},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,2},1},1},DiffEqSensitivity.ODEAdjointProblem{RowVector{Float64,Array{Float64,1}},Float64,true,Array{Float64,1},DiffEqSensitivity.ODEAdjointSensitvityFunction{LotkaVolterra,DiffEqDiffTools.UJacobianWrapper{LotkaVolterra,Float64,Array{Float64,1}},DiffEqDiffTools.UJacobianWrapper{#dg,Float64,Array{Float64,1}},Void,Void,DiffEqSensitivity.SensitivityAlg{0,true,DataType},Array{Float64,1},DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,Array{Float64,1},LotkaVolterra,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{LotkaVolterra,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Vern9Cache{Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}},Void,Float64},DiffEqBase.CallbackSet{Tuple{},Tuple{DiffEqBase.DiscreteCallback{DiffEqCallbacks.##33#36{Base.RefValue{Float64}},DiffEqCallbacks.##34#37{DiffEqSensitivity.#time_choice#12{StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}},DiffEqSensitivity.#affect!#13{#dg,StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}},Array{Float64,1}},Base.RefValue{Float64}},DiffEqCallbacks.##35#38{DiffEqBase.#INITIALIZE_DEFAULT,Bool,DiffEqSensitivity.#time_choice#12{StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}},Base.RefValue{Float64},DiffEqCallbacks.##34#37{DiffEqSensitivity.#time_choice#12{StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}},DiffEqSensitivity.#affect!#13{#dg,StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}},Array{Float64,1}},Base.RefValue{Float64}}}}}},UniformScaling{Int64}},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{DiffEqSensitivity.ODEAdjointSensitvityFunction{LotkaVolterra,DiffEqDiffTools.UJacobianWrapper{LotkaVolterra,Float64,Array{Float64,1}},DiffEqDiffTools.UJacobianWrapper{#dg,Float64,Array{Float64,1}},Void,Void,DiffEqSensitivity.SensitivityAlg{0,true,DataType},Array{Float64,1},DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,Array{Float64,1},LotkaVolterra,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{LotkaVolterra,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Vern9Cache{Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}},Void,Float64},Array{RowVector{Float64,Array{Float64,1}},1},Array{Float64,1},Array{Array{Array{Float64,2},1},1},OrdinaryDiffEq.Vern9Cache{RowVector{Float64,Array{Float64,1}},Array{Float64,2},Array{Float64,2},Array{Float64,2},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}},LotkaVolterra,DiffEqDiffTools.ParamJacobianWrapper{LotkaVolterra,Float64,Array{Float64,1}},Void,Float64,DiffEqSensitivity.SensitivityAlg{0,true,DataType}}, ::Float64, ::Float64) at ./<missing>:0
 [5] #adjoint_sensitivities#14(::Float64, ::Float64, ::Float64, ::Float64, ::Array{Any,1}, ::Function, ::DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,Array{Float64,1},LotkaVolterra,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{LotkaVolterra,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Vern9Cache{Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}}, ::OrdinaryDiffEq.Vern9, ::#dg, ::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}, ::Void) at /home/vagrant/.julia/v0.6/DiffEqSensitivity/src/adjoint_sensitivity.jl:198
 [6] (::DiffEqSensitivity.#kw##adjoint_sensitivities)(::Array{Any,1}, ::DiffEqSensitivity.#adjoint_sensitivities, ::DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,Array{Float64,1},LotkaVolterra,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{LotkaVolterra,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Vern9Cache{Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}}, ::OrdinaryDiffEq.Vern9, ::Function, ::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}, ::Void) at ./<missing>:0 (repeats 2 times)
 [7] include_from_node1(::String) at ./loading.jl:576
 [8] include(::String) at ./sysimg.jl:14
 [9] macro expansion at /home/vagrant/.julia/v0.6/DiffEqSensitivity/test/runtests.jl:5 [inlined]
 [10] macro expansion at ./test.jl:860 [inlined]
 [11] anonymous at ./<missing>:?
 [12] include_from_node1(::String) at ./loading.jl:576
 [13] include(::String) at ./sysimg.jl:14
 [14] process_options(::Base.JLOptions) at ./client.jl:305
 [15] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/DiffEqSensitivity/test/adjoint.jl, in expression starting on line 20
WARNING: abstol and reltol keywords are now atol and rtol, respectively
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] tols(::Float64, ::Float64, ::Float64, ::Float64) at /home/vagrant/.julia/v0.6/QuadGK/src/QuadGK.jl:166
 [3] #quadgk#13(::Float64, ::Float64, ::Float64, ::Float64, ::Int64, ::Int64, ::Function, ::Function, ::DiffEqSensitivity.AdjointSensitivityIntegrand{DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,Array{Float64,1},LotkaVolterra,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{LotkaVolterra,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Vern9Cache{Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}},DiffEqBase.ODESolution{Float64,3,Array{RowVector{Float64,Array{Float64,1}},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,2},1},1},DiffEqSensitivity.ODEAdjointProblem{RowVector{Float64,Array{Float64,1}},Float64,true,Array{Float64,1},DiffEqSensitivity.ODEAdjointSensitvityFunction{LotkaVolterra,DiffEqDiffTools.UJacobianWrapper{LotkaVolterra,Float64,Array{Float64,1}},DiffEqDiffTools.UJacobianWrapper{#dg,Float64,Array{Float64,1}},Void,Void,DiffEqSensitivity.SensitivityAlg{0,true,DataType},Array{Float64,1},DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,Array{Float64,1},LotkaVolterra,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{LotkaVolterra,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Vern9Cache{Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}},Void,Float64},DiffEqBase.CallbackSet{Tuple{},Tuple{DiffEqBase.DiscreteCallback{DiffEqCallbacks.##33#36{Base.RefValue{Float64}},DiffEqCallbacks.##34#37{DiffEqSensitivity.#time_choice#12{StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}},DiffEqSensitivity.#affect!#13{#dg,StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}},Array{Float64,1}},Base.RefValue{Float64}},DiffEqCallbacks.##35#38{DiffEqBase.#INITIALIZE_DEFAULT,Bool,DiffEqSensitivity.#time_choice#12{StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}},Base.RefValue{Float64},DiffEqCallbacks.##34#37{DiffEqSensitivity.#time_choice#12{StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}},DiffEqSensitivity.#affect!#13{#dg,StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}},Array{Float64,1}},Base.RefValue{Float64}}}}}},UniformScaling{Int64}},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{DiffEqSensitivity.ODEAdjointSensitvityFunction{LotkaVolterra,DiffEqDiffTools.UJacobianWrapper{LotkaVolterra,Float64,Array{Float64,1}},DiffEqDiffTools.UJacobianWrapper{#dg,Float64,Array{Float64,1}},Void,Void,DiffEqSensitivity.SensitivityAlg{0,true,DataType},Array{Float64,1},DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,Array{Float64,1},LotkaVolterra,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{LotkaVolterra,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Vern9Cache{Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}},Void,Float64},Array{RowVector{Float64,Array{Float64,1}},1},Array{Float64,1},Array{Array{Array{Float64,2},1},1},OrdinaryDiffEq.Vern9Cache{RowVector{Float64,Array{Float64,1}},Array{Float64,2},Array{Float64,2},Array{Float64,2},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}},LotkaVolterra,DiffEqDiffTools.ParamJacobianWrapper{LotkaVolterra,Float64,Array{Float64,1}},Void,Float64,DiffEqSensitivity.SensitivityAlg{0,true,DataType}}, ::Float64, ::Float64) at /home/vagrant/.julia/v0.6/QuadGK/src/QuadGK.jl:176
 [4] (::Base.#kw##quadgk)(::Array{Any,1}, ::Base.#quadgk, ::DiffEqSensitivity.AdjointSensitivityIntegrand{DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,Array{Float64,1},LotkaVolterra,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{LotkaVolterra,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Vern9Cache{Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}},DiffEqBase.ODESolution{Float64,3,Array{RowVector{Float64,Array{Float64,1}},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,2},1},1},DiffEqSensitivity.ODEAdjointProblem{RowVector{Float64,Array{Float64,1}},Float64,true,Array{Float64,1},DiffEqSensitivity.ODEAdjointSensitvityFunction{LotkaVolterra,DiffEqDiffTools.UJacobianWrapper{LotkaVolterra,Float64,Array{Float64,1}},DiffEqDiffTools.UJacobianWrapper{#dg,Float64,Array{Float64,1}},Void,Void,DiffEqSensitivity.SensitivityAlg{0,true,DataType},Array{Float64,1},DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,Array{Float64,1},LotkaVolterra,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{LotkaVolterra,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Vern9Cache{Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}},Void,Float64},DiffEqBase.CallbackSet{Tuple{},Tuple{DiffEqBase.DiscreteCallback{DiffEqCallbacks.##33#36{Base.RefValue{Float64}},DiffEqCallbacks.##34#37{DiffEqSensitivity.#time_choice#12{StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}},DiffEqSensitivity.#affect!#13{#dg,StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}},Array{Float64,1}},Base.RefValue{Float64}},DiffEqCallbacks.##35#38{DiffEqBase.#INITIALIZE_DEFAULT,Bool,DiffEqSensitivity.#time_choice#12{StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}},Base.RefValue{Float64},DiffEqCallbacks.##34#37{DiffEqSensitivity.#time_choice#12{StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}},DiffEqSensitivity.#affect!#13{#dg,StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}},Array{Float64,1}},Base.RefValue{Float64}}}}}},UniformScaling{Int64}},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{DiffEqSensitivity.ODEAdjointSensitvityFunction{LotkaVolterra,DiffEqDiffTools.UJacobianWrapper{LotkaVolterra,Float64,Array{Float64,1}},DiffEqDiffTools.UJacobianWrapper{#dg,Float64,Array{Float64,1}},Void,Void,DiffEqSensitivity.SensitivityAlg{0,true,DataType},Array{Float64,1},DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,Array{Float64,1},LotkaVolterra,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{LotkaVolterra,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Vern9Cache{Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}},Void,Float64},Array{RowVector{Float64,Array{Float64,1}},1},Array{Float64,1},Array{Array{Array{Float64,2},1},1},OrdinaryDiffEq.Vern9Cache{RowVector{Float64,Array{Float64,1}},Array{Float64,2},Array{Float64,2},Array{Float64,2},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}},LotkaVolterra,DiffEqDiffTools.ParamJacobianWrapper{LotkaVolterra,Float64,Array{Float64,1}},Void,Float64,DiffEqSensitivity.SensitivityAlg{0,true,DataType}}, ::Float64, ::Float64) at ./<missing>:0
 [5] #adjoint_sensitivities#14(::Float64, ::Float64, ::Float64, ::Float64, ::Array{Any,1}, ::Function, ::DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,Array{Float64,1},LotkaVolterra,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{LotkaVolterra,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Vern9Cache{Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}}, ::OrdinaryDiffEq.Vern9, ::#dg, ::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}, ::Void) at /home/vagrant/.julia/v0.6/DiffEqSensitivity/src/adjoint_sensitivity.jl:198
 [6] (::DiffEqSensitivity.#kw##adjoint_sensitivities)(::Array{Any,1}, ::DiffEqSensitivity.#adjoint_sensitivities, ::DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,Array{Float64,1},LotkaVolterra,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{LotkaVolterra,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Vern9Cache{Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}}, ::OrdinaryDiffEq.Vern9, ::Function, ::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}, ::Void) at ./<missing>:0 (repeats 2 times)
 [7] include_from_node1(::String) at ./loading.jl:576
 [8] include(::String) at ./sysimg.jl:14
 [9] macro expansion at /home/vagrant/.julia/v0.6/DiffEqSensitivity/test/runtests.jl:5 [inlined]
 [10] macro expansion at ./test.jl:860 [inlined]
 [11] anonymous at ./<missing>:?
 [12] include_from_node1(::String) at ./loading.jl:576
 [13] include(::String) at ./sysimg.jl:14
 [14] process_options(::Base.JLOptions) at ./client.jl:305
 [15] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/DiffEqSensitivity/test/adjoint.jl, in expression starting on line 20
WARNING: abstol and reltol keywords are now atol and rtol, respectively
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] tols(::Float64, ::Float64, ::Float64, ::Float64) at /home/vagrant/.julia/v0.6/QuadGK/src/QuadGK.jl:166
 [3] #quadgk#13(::Float64, ::Float64, ::Float64, ::Float64, ::Int64, ::Int64, ::Function, ::Function, ::DiffEqSensitivity.AdjointSensitivityIntegrand{DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,Array{Float64,1},LotkaVolterra,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{LotkaVolterra,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Vern9Cache{Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}},DiffEqBase.ODESolution{Float64,3,Array{RowVector{Float64,Array{Float64,1}},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,2},1},1},DiffEqSensitivity.ODEAdjointProblem{RowVector{Float64,Array{Float64,1}},Float64,true,Array{Float64,1},DiffEqSensitivity.ODEAdjointSensitvityFunction{LotkaVolterra,DiffEqDiffTools.UJacobianWrapper{LotkaVolterra,Float64,Array{Float64,1}},DiffEqDiffTools.UJacobianWrapper{#dg,Float64,Array{Float64,1}},Void,Void,DiffEqSensitivity.SensitivityAlg{0,true,DataType},Array{Float64,1},DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,Array{Float64,1},LotkaVolterra,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{LotkaVolterra,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Vern9Cache{Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}},Void,Float64},DiffEqBase.CallbackSet{Tuple{},Tuple{DiffEqBase.DiscreteCallback{DiffEqCallbacks.##33#36{Base.RefValue{Float64}},DiffEqCallbacks.##34#37{DiffEqSensitivity.#time_choice#12{StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}},DiffEqSensitivity.#affect!#13{#dg,StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}},Array{Float64,1}},Base.RefValue{Float64}},DiffEqCallbacks.##35#38{DiffEqBase.#INITIALIZE_DEFAULT,Bool,DiffEqSensitivity.#time_choice#12{StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}},Base.RefValue{Float64},DiffEqCallbacks.##34#37{DiffEqSensitivity.#time_choice#12{StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}},DiffEqSensitivity.#affect!#13{#dg,StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}},Array{Float64,1}},Base.RefValue{Float64}}}}}},UniformScaling{Int64}},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{DiffEqSensitivity.ODEAdjointSensitvityFunction{LotkaVolterra,DiffEqDiffTools.UJacobianWrapper{LotkaVolterra,Float64,Array{Float64,1}},DiffEqDiffTools.UJacobianWrapper{#dg,Float64,Array{Float64,1}},Void,Void,DiffEqSensitivity.SensitivityAlg{0,true,DataType},Array{Float64,1},DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,Array{Float64,1},LotkaVolterra,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{LotkaVolterra,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Vern9Cache{Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}},Void,Float64},Array{RowVector{Float64,Array{Float64,1}},1},Array{Float64,1},Array{Array{Array{Float64,2},1},1},OrdinaryDiffEq.Vern9Cache{RowVector{Float64,Array{Float64,1}},Array{Float64,2},Array{Float64,2},Array{Float64,2},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}},LotkaVolterra,DiffEqDiffTools.ParamJacobianWrapper{LotkaVolterra,Float64,Array{Float64,1}},Void,Float64,DiffEqSensitivity.SensitivityAlg{0,true,DataType}}, ::Float64, ::Float64) at /home/vagrant/.julia/v0.6/QuadGK/src/QuadGK.jl:176
 [4] (::Base.#kw##quadgk)(::Array{Any,1}, ::Base.#quadgk, ::DiffEqSensitivity.AdjointSensitivityIntegrand{DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,Array{Float64,1},LotkaVolterra,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{LotkaVolterra,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Vern9Cache{Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}},DiffEqBase.ODESolution{Float64,3,Array{RowVector{Float64,Array{Float64,1}},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,2},1},1},DiffEqSensitivity.ODEAdjointProblem{RowVector{Float64,Array{Float64,1}},Float64,true,Array{Float64,1},DiffEqSensitivity.ODEAdjointSensitvityFunction{LotkaVolterra,DiffEqDiffTools.UJacobianWrapper{LotkaVolterra,Float64,Array{Float64,1}},DiffEqDiffTools.UJacobianWrapper{#dg,Float64,Array{Float64,1}},Void,Void,DiffEqSensitivity.SensitivityAlg{0,true,DataType},Array{Float64,1},DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,Array{Float64,1},LotkaVolterra,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{LotkaVolterra,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Vern9Cache{Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}},Void,Float64},DiffEqBase.CallbackSet{Tuple{},Tuple{DiffEqBase.DiscreteCallback{DiffEqCallbacks.##33#36{Base.RefValue{Float64}},DiffEqCallbacks.##34#37{DiffEqSensitivity.#time_choice#12{StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}},DiffEqSensitivity.#affect!#13{#dg,StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}},Array{Float64,1}},Base.RefValue{Float64}},DiffEqCallbacks.##35#38{DiffEqBase.#INITIALIZE_DEFAULT,Bool,DiffEqSensitivity.#time_choice#12{StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}},Base.RefValue{Float64},DiffEqCallbacks.##34#37{DiffEqSensitivity.#time_choice#12{StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}},DiffEqSensitivity.#affect!#13{#dg,StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}},Array{Float64,1}},Base.RefValue{Float64}}}}}},UniformScaling{Int64}},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{DiffEqSensitivity.ODEAdjointSensitvityFunction{LotkaVolterra,DiffEqDiffTools.UJacobianWrapper{LotkaVolterra,Float64,Array{Float64,1}},DiffEqDiffTools.UJacobianWrapper{#dg,Float64,Array{Float64,1}},Void,Void,DiffEqSensitivity.SensitivityAlg{0,true,DataType},Array{Float64,1},DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,Array{Float64,1},LotkaVolterra,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{LotkaVolterra,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Vern9Cache{Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}},Void,Float64},Array{RowVector{Float64,Array{Float64,1}},1},Array{Float64,1},Array{Array{Array{Float64,2},1},1},OrdinaryDiffEq.Vern9Cache{RowVector{Float64,Array{Float64,1}},Array{Float64,2},Array{Float64,2},Array{Float64,2},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}},LotkaVolterra,DiffEqDiffTools.ParamJacobianWrapper{LotkaVolterra,Float64,Array{Float64,1}},Void,Float64,DiffEqSensitivity.SensitivityAlg{0,true,DataType}}, ::Float64, ::Float64) at ./<missing>:0
 [5] #adjoint_sensitivities#14(::Float64, ::Float64, ::Float64, ::Float64, ::Array{Any,1}, ::Function, ::DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,Array{Float64,1},LotkaVolterra,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{LotkaVolterra,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Vern9Cache{Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}}, ::OrdinaryDiffEq.Vern9, ::#dg, ::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}, ::Void) at /home/vagrant/.julia/v0.6/DiffEqSensitivity/src/adjoint_sensitivity.jl:198
 [6] (::DiffEqSensitivity.#kw##adjoint_sensitivities)(::Array{Any,1}, ::DiffEqSensitivity.#adjoint_sensitivities, ::DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,Array{Float64,1},LotkaVolterra,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{LotkaVolterra,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Vern9Cache{Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}}, ::OrdinaryDiffEq.Vern9, ::Function, ::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}, ::Void) at ./<missing>:0 (repeats 2 times)
 [7] include_from_node1(::String) at ./loading.jl:576
 [8] include(::String) at ./sysimg.jl:14
 [9] macro expansion at /home/vagrant/.julia/v0.6/DiffEqSensitivity/test/runtests.jl:5 [inlined]
 [10] macro expansion at ./test.jl:860 [inlined]
 [11] anonymous at ./<missing>:?
 [12] include_from_node1(::String) at ./loading.jl:576
 [13] include(::String) at ./sysimg.jl:14
 [14] process_options(::Base.JLOptions) at ./client.jl:305
 [15] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/DiffEqSensitivity/test/adjoint.jl, in expression starting on line 20
WARNING: abstol and reltol keywords are now atol and rtol, respectively
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] tols(::Float64, ::Float64, ::Float64, ::Float64) at /home/vagrant/.julia/v0.6/QuadGK/src/QuadGK.jl:166
 [3] #quadgk#13(::Float64, ::Float64, ::Float64, ::Float64, ::Int64, ::Int64, ::Function, ::Function, ::DiffEqSensitivity.AdjointSensitivityIntegrand{DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,Array{Float64,1},LotkaVolterra,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{LotkaVolterra,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Vern9Cache{Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}},DiffEqBase.ODESolution{Float64,3,Array{RowVector{Float64,Array{Float64,1}},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,2},1},1},DiffEqSensitivity.ODEAdjointProblem{RowVector{Float64,Array{Float64,1}},Float64,true,Array{Float64,1},DiffEqSensitivity.ODEAdjointSensitvityFunction{LotkaVolterra,DiffEqDiffTools.UJacobianWrapper{LotkaVolterra,Float64,Array{Float64,1}},DiffEqDiffTools.UJacobianWrapper{#dg,Float64,Array{Float64,1}},Void,Void,DiffEqSensitivity.SensitivityAlg{0,true,DataType},Array{Float64,1},DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,Array{Float64,1},LotkaVolterra,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{LotkaVolterra,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Vern9Cache{Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}},Void,Float64},DiffEqBase.CallbackSet{Tuple{},Tuple{DiffEqBase.DiscreteCallback{DiffEqCallbacks.##33#36{Base.RefValue{Float64}},DiffEqCallbacks.##34#37{DiffEqSensitivity.#time_choice#12{StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}},DiffEqSensitivity.#affect!#13{#dg,StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}},Array{Float64,1}},Base.RefValue{Float64}},DiffEqCallbacks.##35#38{DiffEqBase.#INITIALIZE_DEFAULT,Bool,DiffEqSensitivity.#time_choice#12{StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}},Base.RefValue{Float64},DiffEqCallbacks.##34#37{DiffEqSensitivity.#time_choice#12{StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}},DiffEqSensitivity.#affect!#13{#dg,StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}},Array{Float64,1}},Base.RefValue{Float64}}}}}},UniformScaling{Int64}},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{DiffEqSensitivity.ODEAdjointSensitvityFunction{LotkaVolterra,DiffEqDiffTools.UJacobianWrapper{LotkaVolterra,Float64,Array{Float64,1}},DiffEqDiffTools.UJacobianWrapper{#dg,Float64,Array{Float64,1}},Void,Void,DiffEqSensitivity.SensitivityAlg{0,true,DataType},Array{Float64,1},DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,Array{Float64,1},LotkaVolterra,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{LotkaVolterra,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Vern9Cache{Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}},Void,Float64},Array{RowVector{Float64,Array{Float64,1}},1},Array{Float64,1},Array{Array{Array{Float64,2},1},1},OrdinaryDiffEq.Vern9Cache{RowVector{Float64,Array{Float64,1}},Array{Float64,2},Array{Float64,2},Array{Float64,2},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}},LotkaVolterra,DiffEqDiffTools.ParamJacobianWrapper{LotkaVolterra,Float64,Array{Float64,1}},Void,Float64,DiffEqSensitivity.SensitivityAlg{0,true,DataType}}, ::Float64, ::Float64) at /home/vagrant/.julia/v0.6/QuadGK/src/QuadGK.jl:176
 [4] (::Base.#kw##quadgk)(::Array{Any,1}, ::Base.#quadgk, ::DiffEqSensitivity.AdjointSensitivityIntegrand{DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,Array{Float64,1},LotkaVolterra,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{LotkaVolterra,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Vern9Cache{Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}},DiffEqBase.ODESolution{Float64,3,Array{RowVector{Float64,Array{Float64,1}},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,2},1},1},DiffEqSensitivity.ODEAdjointProblem{RowVector{Float64,Array{Float64,1}},Float64,true,Array{Float64,1},DiffEqSensitivity.ODEAdjointSensitvityFunction{LotkaVolterra,DiffEqDiffTools.UJacobianWrapper{LotkaVolterra,Float64,Array{Float64,1}},DiffEqDiffTools.UJacobianWrapper{#dg,Float64,Array{Float64,1}},Void,Void,DiffEqSensitivity.SensitivityAlg{0,true,DataType},Array{Float64,1},DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,Array{Float64,1},LotkaVolterra,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{LotkaVolterra,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Vern9Cache{Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}},Void,Float64},DiffEqBase.CallbackSet{Tuple{},Tuple{DiffEqBase.DiscreteCallback{DiffEqCallbacks.##33#36{Base.RefValue{Float64}},DiffEqCallbacks.##34#37{DiffEqSensitivity.#time_choice#12{StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}},DiffEqSensitivity.#affect!#13{#dg,StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}},Array{Float64,1}},Base.RefValue{Float64}},DiffEqCallbacks.##35#38{DiffEqBase.#INITIALIZE_DEFAULT,Bool,DiffEqSensitivity.#time_choice#12{StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}},Base.RefValue{Float64},DiffEqCallbacks.##34#37{DiffEqSensitivity.#time_choice#12{StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}},DiffEqSensitivity.#affect!#13{#dg,StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}},Array{Float64,1}},Base.RefValue{Float64}}}}}},UniformScaling{Int64}},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{DiffEqSensitivity.ODEAdjointSensitvityFunction{LotkaVolterra,DiffEqDiffTools.UJacobianWrapper{LotkaVolterra,Float64,Array{Float64,1}},DiffEqDiffTools.UJacobianWrapper{#dg,Float64,Array{Float64,1}},Void,Void,DiffEqSensitivity.SensitivityAlg{0,true,DataType},Array{Float64,1},DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,Array{Float64,1},LotkaVolterra,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{LotkaVolterra,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Vern9Cache{Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}},Void,Float64},Array{RowVector{Float64,Array{Float64,1}},1},Array{Float64,1},Array{Array{Array{Float64,2},1},1},OrdinaryDiffEq.Vern9Cache{RowVector{Float64,Array{Float64,1}},Array{Float64,2},Array{Float64,2},Array{Float64,2},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}},LotkaVolterra,DiffEqDiffTools.ParamJacobianWrapper{LotkaVolterra,Float64,Array{Float64,1}},Void,Float64,DiffEqSensitivity.SensitivityAlg{0,true,DataType}}, ::Float64, ::Float64) at ./<missing>:0
 [5] #adjoint_sensitivities#14(::Float64, ::Float64, ::Float64, ::Float64, ::Array{Any,1}, ::Function, ::DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,Array{Float64,1},LotkaVolterra,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{LotkaVolterra,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Vern9Cache{Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}}, ::OrdinaryDiffEq.Vern9, ::#dg, ::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}, ::Void) at /home/vagrant/.julia/v0.6/DiffEqSensitivity/src/adjoint_sensitivity.jl:198
 [6] (::DiffEqSensitivity.#kw##adjoint_sensitivities)(::Array{Any,1}, ::DiffEqSensitivity.#adjoint_sensitivities, ::DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,Array{Float64,1},LotkaVolterra,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{LotkaVolterra,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Vern9Cache{Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}}, ::OrdinaryDiffEq.Vern9, ::Function, ::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}, ::Void) at ./<missing>:0 (repeats 2 times)
 [7] include_from_node1(::String) at ./loading.jl:576
 [8] include(::String) at ./sysimg.jl:14
 [9] macro expansion at /home/vagrant/.julia/v0.6/DiffEqSensitivity/test/runtests.jl:5 [inlined]
 [10] macro expansion at ./test.jl:860 [inlined]
 [11] anonymous at ./<missing>:?
 [12] include_from_node1(::String) at ./loading.jl:576
 [13] include(::String) at ./sysimg.jl:14
 [14] process_options(::Base.JLOptions) at ./client.jl:305
 [15] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/DiffEqSensitivity/test/adjoint.jl, in expression starting on line 20
WARNING: abstol and reltol keywords are now atol and rtol, respectively
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] tols(::Float64, ::Float64, ::Float64, ::Float64) at /home/vagrant/.julia/v0.6/QuadGK/src/QuadGK.jl:166
 [3] #quadgk#13(::Float64, ::Float64, ::Float64, ::Float64, ::Int64, ::Int64, ::Function, ::Function, ::DiffEqSensitivity.AdjointSensitivityIntegrand{DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,Array{Float64,1},LotkaVolterra,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{LotkaVolterra,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Vern9Cache{Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}},DiffEqBase.ODESolution{Float64,3,Array{RowVector{Float64,Array{Float64,1}},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,2},1},1},DiffEqSensitivity.ODEAdjointProblem{RowVector{Float64,Array{Float64,1}},Float64,true,Array{Float64,1},DiffEqSensitivity.ODEAdjointSensitvityFunction{LotkaVolterra,DiffEqDiffTools.UJacobianWrapper{LotkaVolterra,Float64,Array{Float64,1}},DiffEqDiffTools.UJacobianWrapper{#dg,Float64,Array{Float64,1}},Void,Void,DiffEqSensitivity.SensitivityAlg{0,true,DataType},Array{Float64,1},DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,Array{Float64,1},LotkaVolterra,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{LotkaVolterra,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Vern9Cache{Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}},Void,Float64},DiffEqBase.CallbackSet{Tuple{},Tuple{DiffEqBase.DiscreteCallback{DiffEqCallbacks.##33#36{Base.RefValue{Float64}},DiffEqCallbacks.##34#37{DiffEqSensitivity.#time_choice#12{StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}},DiffEqSensitivity.#affect!#13{#dg,StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}},Array{Float64,1}},Base.RefValue{Float64}},DiffEqCallbacks.##35#38{DiffEqBase.#INITIALIZE_DEFAULT,Bool,DiffEqSensitivity.#time_choice#12{StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}},Base.RefValue{Float64},DiffEqCallbacks.##34#37{DiffEqSensitivity.#time_choice#12{StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}},DiffEqSensitivity.#affect!#13{#dg,StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}},Array{Float64,1}},Base.RefValue{Float64}}}}}},UniformScaling{Int64}},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{DiffEqSensitivity.ODEAdjointSensitvityFunction{LotkaVolterra,DiffEqDiffTools.UJacobianWrapper{LotkaVolterra,Float64,Array{Float64,1}},DiffEqDiffTools.UJacobianWrapper{#dg,Float64,Array{Float64,1}},Void,Void,DiffEqSensitivity.SensitivityAlg{0,true,DataType},Array{Float64,1},DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,Array{Float64,1},LotkaVolterra,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{LotkaVolterra,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Vern9Cache{Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}},Void,Float64},Array{RowVector{Float64,Array{Float64,1}},1},Array{Float64,1},Array{Array{Array{Float64,2},1},1},OrdinaryDiffEq.Vern9Cache{RowVector{Float64,Array{Float64,1}},Array{Float64,2},Array{Float64,2},Array{Float64,2},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}},LotkaVolterra,DiffEqDiffTools.ParamJacobianWrapper{LotkaVolterra,Float64,Array{Float64,1}},Void,Float64,DiffEqSensitivity.SensitivityAlg{0,true,DataType}}, ::Float64, ::Float64) at /home/vagrant/.julia/v0.6/QuadGK/src/QuadGK.jl:176
 [4] (::Base.#kw##quadgk)(::Array{Any,1}, ::Base.#quadgk, ::DiffEqSensitivity.AdjointSensitivityIntegrand{DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,Array{Float64,1},LotkaVolterra,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{LotkaVolterra,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Vern9Cache{Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}},DiffEqBase.ODESolution{Float64,3,Array{RowVector{Float64,Array{Float64,1}},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,2},1},1},DiffEqSensitivity.ODEAdjointProblem{RowVector{Float64,Array{Float64,1}},Float64,true,Array{Float64,1},DiffEqSensitivity.ODEAdjointSensitvityFunction{LotkaVolterra,DiffEqDiffTools.UJacobianWrapper{LotkaVolterra,Float64,Array{Float64,1}},DiffEqDiffTools.UJacobianWrapper{#dg,Float64,Array{Float64,1}},Void,Void,DiffEqSensitivity.SensitivityAlg{0,true,DataType},Array{Float64,1},DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,Array{Float64,1},LotkaVolterra,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{LotkaVolterra,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Vern9Cache{Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}},Void,Float64},DiffEqBase.CallbackSet{Tuple{},Tuple{DiffEqBase.DiscreteCallback{DiffEqCallbacks.##33#36{Base.RefValue{Float64}},DiffEqCallbacks.##34#37{DiffEqSensitivity.#time_choice#12{StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}},DiffEqSensitivity.#affect!#13{#dg,StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}},Array{Float64,1}},Base.RefValue{Float64}},DiffEqCallbacks.##35#38{DiffEqBase.#INITIALIZE_DEFAULT,Bool,DiffEqSensitivity.#time_choice#12{StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}},Base.RefValue{Float64},DiffEqCallbacks.##34#37{DiffEqSensitivity.#time_choice#12{StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}},DiffEqSensitivity.#affect!#13{#dg,StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}},Array{Float64,1}},Base.RefValue{Float64}}}}}},UniformScaling{Int64}},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{DiffEqSensitivity.ODEAdjointSensitvityFunction{LotkaVolterra,DiffEqDiffTools.UJacobianWrapper{LotkaVolterra,Float64,Array{Float64,1}},DiffEqDiffTools.UJacobianWrapper{#dg,Float64,Array{Float64,1}},Void,Void,DiffEqSensitivity.SensitivityAlg{0,true,DataType},Array{Float64,1},DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,Array{Float64,1},LotkaVolterra,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{LotkaVolterra,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Vern9Cache{Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}},Void,Float64},Array{RowVector{Float64,Array{Float64,1}},1},Array{Float64,1},Array{Array{Array{Float64,2},1},1},OrdinaryDiffEq.Vern9Cache{RowVector{Float64,Array{Float64,1}},Array{Float64,2},Array{Float64,2},Array{Float64,2},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}},LotkaVolterra,DiffEqDiffTools.ParamJacobianWrapper{LotkaVolterra,Float64,Array{Float64,1}},Void,Float64,DiffEqSensitivity.SensitivityAlg{0,true,DataType}}, ::Float64, ::Float64) at ./<missing>:0
 [5] #adjoint_sensitivities#14(::Float64, ::Float64, ::Float64, ::Float64, ::Array{Any,1}, ::Function, ::DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,Array{Float64,1},LotkaVolterra,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{LotkaVolterra,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Vern9Cache{Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}}, ::OrdinaryDiffEq.Vern9, ::#dg, ::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}, ::Void) at /home/vagrant/.julia/v0.6/DiffEqSensitivity/src/adjoint_sensitivity.jl:198
 [6] (::DiffEqSensitivity.#kw##adjoint_sensitivities)(::Array{Any,1}, ::DiffEqSensitivity.#adjoint_sensitivities, ::DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,Array{Float64,1},LotkaVolterra,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{LotkaVolterra,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Vern9Cache{Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}}, ::OrdinaryDiffEq.Vern9, ::Function, ::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}, ::Void) at ./<missing>:0 (repeats 2 times)
 [7] include_from_node1(::String) at ./loading.jl:576
 [8] include(::String) at ./sysimg.jl:14
 [9] macro expansion at /home/vagrant/.julia/v0.6/DiffEqSensitivity/test/runtests.jl:5 [inlined]
 [10] macro expansion at ./test.jl:860 [inlined]
 [11] anonymous at ./<missing>:?
 [12] include_from_node1(::String) at ./loading.jl:576
 [13] include(::String) at ./sysimg.jl:14
 [14] process_options(::Base.JLOptions) at ./client.jl:305
 [15] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/DiffEqSensitivity/test/adjoint.jl, in expression starting on line 20
WARNING: abstol and reltol keywords are now atol and rtol, respectively
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] tols(::Float64, ::Float64, ::Float64, ::Float64) at /home/vagrant/.julia/v0.6/QuadGK/src/QuadGK.jl:166
 [3] #quadgk#13(::Float64, ::Float64, ::Float64, ::Float64, ::Int64, ::Int64, ::Function, ::Function, ::DiffEqSensitivity.AdjointSensitivityIntegrand{DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,Array{Float64,1},LotkaVolterra,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{LotkaVolterra,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Vern9Cache{Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}},DiffEqBase.ODESolution{Float64,3,Array{RowVector{Float64,Array{Float64,1}},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,2},1},1},DiffEqSensitivity.ODEAdjointProblem{RowVector{Float64,Array{Float64,1}},Float64,true,Array{Float64,1},DiffEqSensitivity.ODEAdjointSensitvityFunction{LotkaVolterra,DiffEqDiffTools.UJacobianWrapper{LotkaVolterra,Float64,Array{Float64,1}},DiffEqDiffTools.UJacobianWrapper{#dg,Float64,Array{Float64,1}},Void,Void,DiffEqSensitivity.SensitivityAlg{0,true,DataType},Array{Float64,1},DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,Array{Float64,1},LotkaVolterra,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{LotkaVolterra,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Vern9Cache{Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}},Void,Float64},DiffEqBase.CallbackSet{Tuple{},Tuple{DiffEqBase.DiscreteCallback{DiffEqCallbacks.##33#36{Base.RefValue{Float64}},DiffEqCallbacks.##34#37{DiffEqSensitivity.#time_choice#12{StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}},DiffEqSensitivity.#affect!#13{#dg,StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}},Array{Float64,1}},Base.RefValue{Float64}},DiffEqCallbacks.##35#38{DiffEqBase.#INITIALIZE_DEFAULT,Bool,DiffEqSensitivity.#time_choice#12{StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}},Base.RefValue{Float64},DiffEqCallbacks.##34#37{DiffEqSensitivity.#time_choice#12{StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}},DiffEqSensitivity.#affect!#13{#dg,StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}},Array{Float64,1}},Base.RefValue{Float64}}}}}},UniformScaling{Int64}},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{DiffEqSensitivity.ODEAdjointSensitvityFunction{LotkaVolterra,DiffEqDiffTools.UJacobianWrapper{LotkaVolterra,Float64,Array{Float64,1}},DiffEqDiffTools.UJacobianWrapper{#dg,Float64,Array{Float64,1}},Void,Void,DiffEqSensitivity.SensitivityAlg{0,true,DataType},Array{Float64,1},DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,Array{Float64,1},LotkaVolterra,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{LotkaVolterra,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Vern9Cache{Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}},Void,Float64},Array{RowVector{Float64,Array{Float64,1}},1},Array{Float64,1},Array{Array{Array{Float64,2},1},1},OrdinaryDiffEq.Vern9Cache{RowVector{Float64,Array{Float64,1}},Array{Float64,2},Array{Float64,2},Array{Float64,2},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}},LotkaVolterra,DiffEqDiffTools.ParamJacobianWrapper{LotkaVolterra,Float64,Array{Float64,1}},Void,Float64,DiffEqSensitivity.SensitivityAlg{0,true,DataType}}, ::Float64, ::Float64) at /home/vagrant/.julia/v0.6/QuadGK/src/QuadGK.jl:176
 [4] (::Base.#kw##quadgk)(::Array{Any,1}, ::Base.#quadgk, ::DiffEqSensitivity.AdjointSensitivityIntegrand{DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,Array{Float64,1},LotkaVolterra,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{LotkaVolterra,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Vern9Cache{Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}},DiffEqBase.ODESolution{Float64,3,Array{RowVector{Float64,Array{Float64,1}},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,2},1},1},DiffEqSensitivity.ODEAdjointProblem{RowVector{Float64,Array{Float64,1}},Float64,true,Array{Float64,1},DiffEqSensitivity.ODEAdjointSensitvityFunction{LotkaVolterra,DiffEqDiffTools.UJacobianWrapper{LotkaVolterra,Float64,Array{Float64,1}},DiffEqDiffTools.UJacobianWrapper{#dg,Float64,Array{Float64,1}},Void,Void,DiffEqSensitivity.SensitivityAlg{0,true,DataType},Array{Float64,1},DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,Array{Float64,1},LotkaVolterra,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{LotkaVolterra,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Vern9Cache{Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}},Void,Float64},DiffEqBase.CallbackSet{Tuple{},Tuple{DiffEqBase.DiscreteCallback{DiffEqCallbacks.##33#36{Base.RefValue{Float64}},DiffEqCallbacks.##34#37{DiffEqSensitivity.#time_choice#12{StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}},DiffEqSensitivity.#affect!#13{#dg,StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}},Array{Float64,1}},Base.RefValue{Float64}},DiffEqCallbacks.##35#38{DiffEqBase.#INITIALIZE_DEFAULT,Bool,DiffEqSensitivity.#time_choice#12{StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}},Base.RefValue{Float64},DiffEqCallbacks.##34#37{DiffEqSensitivity.#time_choice#12{StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}},DiffEqSensitivity.#affect!#13{#dg,StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}},Array{Float64,1}},Base.RefValue{Float64}}}}}},UniformScaling{Int64}},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{DiffEqSensitivity.ODEAdjointSensitvityFunction{LotkaVolterra,DiffEqDiffTools.UJacobianWrapper{LotkaVolterra,Float64,Array{Float64,1}},DiffEqDiffTools.UJacobianWrapper{#dg,Float64,Array{Float64,1}},Void,Void,DiffEqSensitivity.SensitivityAlg{0,true,DataType},Array{Float64,1},DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,Array{Float64,1},LotkaVolterra,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{LotkaVolterra,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Vern9Cache{Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}},Void,Float64},Array{RowVector{Float64,Array{Float64,1}},1},Array{Float64,1},Array{Array{Array{Float64,2},1},1},OrdinaryDiffEq.Vern9Cache{RowVector{Float64,Array{Float64,1}},Array{Float64,2},Array{Float64,2},Array{Float64,2},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}},LotkaVolterra,DiffEqDiffTools.ParamJacobianWrapper{LotkaVolterra,Float64,Array{Float64,1}},Void,Float64,DiffEqSensitivity.SensitivityAlg{0,true,DataType}}, ::Float64, ::Float64) at ./<missing>:0
 [5] #adjoint_sensitivities#14(::Float64, ::Float64, ::Float64, ::Float64, ::Array{Any,1}, ::Function, ::DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,Array{Float64,1},LotkaVolterra,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{LotkaVolterra,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Vern9Cache{Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}}, ::OrdinaryDiffEq.Vern9, ::#dg, ::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}, ::Void) at /home/vagrant/.julia/v0.6/DiffEqSensitivity/src/adjoint_sensitivity.jl:198
 [6] (::DiffEqSensitivity.#kw##adjoint_sensitivities)(::Array{Any,1}, ::DiffEqSensitivity.#adjoint_sensitivities, ::DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,Array{Float64,1},LotkaVolterra,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{LotkaVolterra,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Vern9Cache{Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}}, ::OrdinaryDiffEq.Vern9, ::Function, ::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}, ::Void) at ./<missing>:0 (repeats 2 times)
 [7] include_from_node1(::String) at ./loading.jl:576
 [8] include(::String) at ./sysimg.jl:14
 [9] macro expansion at /home/vagrant/.julia/v0.6/DiffEqSensitivity/test/runtests.jl:5 [inlined]
 [10] macro expansion at ./test.jl:860 [inlined]
 [11] anonymous at ./<missing>:?
 [12] include_from_node1(::String) at ./loading.jl:576
 [13] include(::String) at ./sysimg.jl:14
 [14] process_options(::Base.JLOptions) at ./client.jl:305
 [15] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/DiffEqSensitivity/test/adjoint.jl, in expression starting on line 20
WARNING: abstol and reltol keywords are now atol and rtol, respectively
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] tols(::Float64, ::Float64, ::Float64, ::Float64) at /home/vagrant/.julia/v0.6/QuadGK/src/QuadGK.jl:166
 [3] #quadgk#13(::Float64, ::Float64, ::Float64, ::Float64, ::Int64, ::Int64, ::Function, ::Function, ::DiffEqSensitivity.AdjointSensitivityIntegrand{DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,Array{Float64,1},LotkaVolterra,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{LotkaVolterra,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Vern9Cache{Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}},DiffEqBase.ODESolution{Float64,3,Array{RowVector{Float64,Array{Float64,1}},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,2},1},1},DiffEqSensitivity.ODEAdjointProblem{RowVector{Float64,Array{Float64,1}},Float64,true,Array{Float64,1},DiffEqSensitivity.ODEAdjointSensitvityFunction{LotkaVolterra,DiffEqDiffTools.UJacobianWrapper{LotkaVolterra,Float64,Array{Float64,1}},DiffEqDiffTools.UJacobianWrapper{#dg,Float64,Array{Float64,1}},Void,Void,DiffEqSensitivity.SensitivityAlg{0,true,DataType},Array{Float64,1},DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,Array{Float64,1},LotkaVolterra,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{LotkaVolterra,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Vern9Cache{Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}},Void,Float64},DiffEqBase.CallbackSet{Tuple{},Tuple{DiffEqBase.DiscreteCallback{DiffEqCallbacks.##33#36{Base.RefValue{Float64}},DiffEqCallbacks.##34#37{DiffEqSensitivity.#time_choice#12{StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}},DiffEqSensitivity.#affect!#13{#dg,StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}},Array{Float64,1}},Base.RefValue{Float64}},DiffEqCallbacks.##35#38{DiffEqBase.#INITIALIZE_DEFAULT,Bool,DiffEqSensitivity.#time_choice#12{StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}},Base.RefValue{Float64},DiffEqCallbacks.##34#37{DiffEqSensitivity.#time_choice#12{StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}},DiffEqSensitivity.#affect!#13{#dg,StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}},Array{Float64,1}},Base.RefValue{Float64}}}}}},UniformScaling{Int64}},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{DiffEqSensitivity.ODEAdjointSensitvityFunction{LotkaVolterra,DiffEqDiffTools.UJacobianWrapper{LotkaVolterra,Float64,Array{Float64,1}},DiffEqDiffTools.UJacobianWrapper{#dg,Float64,Array{Float64,1}},Void,Void,DiffEqSensitivity.SensitivityAlg{0,true,DataType},Array{Float64,1},DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,Array{Float64,1},LotkaVolterra,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{LotkaVolterra,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Vern9Cache{Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}},Void,Float64},Array{RowVector{Float64,Array{Float64,1}},1},Array{Float64,1},Array{Array{Array{Float64,2},1},1},OrdinaryDiffEq.Vern9Cache{RowVector{Float64,Array{Float64,1}},Array{Float64,2},Array{Float64,2},Array{Float64,2},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}},LotkaVolterra,DiffEqDiffTools.ParamJacobianWrapper{LotkaVolterra,Float64,Array{Float64,1}},Void,Float64,DiffEqSensitivity.SensitivityAlg{0,true,DataType}}, ::Float64, ::Float64) at /home/vagrant/.julia/v0.6/QuadGK/src/QuadGK.jl:176
 [4] (::Base.#kw##quadgk)(::Array{Any,1}, ::Base.#quadgk, ::DiffEqSensitivity.AdjointSensitivityIntegrand{DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,Array{Float64,1},LotkaVolterra,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{LotkaVolterra,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Vern9Cache{Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}},DiffEqBase.ODESolution{Float64,3,Array{RowVector{Float64,Array{Float64,1}},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,2},1},1},DiffEqSensitivity.ODEAdjointProblem{RowVector{Float64,Array{Float64,1}},Float64,true,Array{Float64,1},DiffEqSensitivity.ODEAdjointSensitvityFunction{LotkaVolterra,DiffEqDiffTools.UJacobianWrapper{LotkaVolterra,Float64,Array{Float64,1}},DiffEqDiffTools.UJacobianWrapper{#dg,Float64,Array{Float64,1}},Void,Void,DiffEqSensitivity.SensitivityAlg{0,true,DataType},Array{Float64,1},DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,Array{Float64,1},LotkaVolterra,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{LotkaVolterra,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Vern9Cache{Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}},Void,Float64},DiffEqBase.CallbackSet{Tuple{},Tuple{DiffEqBase.DiscreteCallback{DiffEqCallbacks.##33#36{Base.RefValue{Float64}},DiffEqCallbacks.##34#37{DiffEqSensitivity.#time_choice#12{StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}},DiffEqSensitivity.#affect!#13{#dg,StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}},Array{Float64,1}},Base.RefValue{Float64}},DiffEqCallbacks.##35#38{DiffEqBase.#INITIALIZE_DEFAULT,Bool,DiffEqSensitivity.#time_choice#12{StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}},Base.RefValue{Float64},DiffEqCallbacks.##34#37{DiffEqSensitivity.#time_choice#12{StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}},DiffEqSensitivity.#affect!#13{#dg,StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}},Array{Float64,1}},Base.RefValue{Float64}}}}}},UniformScaling{Int64}},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{DiffEqSensitivity.ODEAdjointSensitvityFunction{LotkaVolterra,DiffEqDiffTools.UJacobianWrapper{LotkaVolterra,Float64,Array{Float64,1}},DiffEqDiffTools.UJacobianWrapper{#dg,Float64,Array{Float64,1}},Void,Void,DiffEqSensitivity.SensitivityAlg{0,true,DataType},Array{Float64,1},DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,Array{Float64,1},LotkaVolterra,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{LotkaVolterra,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Vern9Cache{Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}},Void,Float64},Array{RowVector{Float64,Array{Float64,1}},1},Array{Float64,1},Array{Array{Array{Float64,2},1},1},OrdinaryDiffEq.Vern9Cache{RowVector{Float64,Array{Float64,1}},Array{Float64,2},Array{Float64,2},Array{Float64,2},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}},LotkaVolterra,DiffEqDiffTools.ParamJacobianWrapper{LotkaVolterra,Float64,Array{Float64,1}},Void,Float64,DiffEqSensitivity.SensitivityAlg{0,true,DataType}}, ::Float64, ::Float64) at ./<missing>:0
 [5] #adjoint_sensitivities#14(::Float64, ::Float64, ::Float64, ::Float64, ::Array{Any,1}, ::Function, ::DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,Array{Float64,1},LotkaVolterra,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{LotkaVolterra,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Vern9Cache{Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}}, ::OrdinaryDiffEq.Vern9, ::#dg, ::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}, ::Void) at /home/vagrant/.julia/v0.6/DiffEqSensitivity/src/adjoint_sensitivity.jl:198
 [6] (::DiffEqSensitivity.#kw##adjoint_sensitivities)(::Array{Any,1}, ::DiffEqSensitivity.#adjoint_sensitivities, ::DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,Array{Float64,1},LotkaVolterra,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{LotkaVolterra,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Vern9Cache{Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}}, ::OrdinaryDiffEq.Vern9, ::Function, ::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}, ::Void) at ./<missing>:0 (repeats 2 times)
 [7] include_from_node1(::String) at ./loading.jl:576
 [8] include(::String) at ./sysimg.jl:14
 [9] macro expansion at /home/vagrant/.julia/v0.6/DiffEqSensitivity/test/runtests.jl:5 [inlined]
 [10] macro expansion at ./test.jl:860 [inlined]
 [11] anonymous at ./<missing>:?
 [12] include_from_node1(::String) at ./loading.jl:576
 [13] include(::String) at ./sysimg.jl:14
 [14] process_options(::Base.JLOptions) at ./client.jl:305
 [15] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/DiffEqSensitivity/test/adjoint.jl, in expression starting on line 20
WARNING: abstol and reltol keywords are now atol and rtol, respectively
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] tols(::Float64, ::Float64, ::Float64, ::Float64) at /home/vagrant/.julia/v0.6/QuadGK/src/QuadGK.jl:166
 [3] #quadgk#13(::Float64, ::Float64, ::Float64, ::Float64, ::Int64, ::Int64, ::Function, ::Function, ::DiffEqSensitivity.AdjointSensitivityIntegrand{DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,Array{Float64,1},LotkaVolterra,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{LotkaVolterra,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Vern9Cache{Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}},DiffEqBase.ODESolution{Float64,3,Array{RowVector{Float64,Array{Float64,1}},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,2},1},1},DiffEqSensitivity.ODEAdjointProblem{RowVector{Float64,Array{Float64,1}},Float64,true,Array{Float64,1},DiffEqSensitivity.ODEAdjointSensitvityFunction{LotkaVolterra,DiffEqDiffTools.UJacobianWrapper{LotkaVolterra,Float64,Array{Float64,1}},DiffEqDiffTools.UJacobianWrapper{#dg,Float64,Array{Float64,1}},Void,Void,DiffEqSensitivity.SensitivityAlg{0,true,DataType},Array{Float64,1},DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,Array{Float64,1},LotkaVolterra,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{LotkaVolterra,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Vern9Cache{Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}},Void,Float64},DiffEqBase.CallbackSet{Tuple{},Tuple{DiffEqBase.DiscreteCallback{DiffEqCallbacks.##33#36{Base.RefValue{Float64}},DiffEqCallbacks.##34#37{DiffEqSensitivity.#time_choice#12{StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}},DiffEqSensitivity.#affect!#13{#dg,StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}},Array{Float64,1}},Base.RefValue{Float64}},DiffEqCallbacks.##35#38{DiffEqBase.#INITIALIZE_DEFAULT,Bool,DiffEqSensitivity.#time_choice#12{StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}},Base.RefValue{Float64},DiffEqCallbacks.##34#37{DiffEqSensitivity.#time_choice#12{StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}},DiffEqSensitivity.#affect!#13{#dg,StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}},Array{Float64,1}},Base.RefValue{Float64}}}}}},UniformScaling{Int64}},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{DiffEqSensitivity.ODEAdjointSensitvityFunction{LotkaVolterra,DiffEqDiffTools.UJacobianWrapper{LotkaVolterra,Float64,Array{Float64,1}},DiffEqDiffTools.UJacobianWrapper{#dg,Float64,Array{Float64,1}},Void,Void,DiffEqSensitivity.SensitivityAlg{0,true,DataType},Array{Float64,1},DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,Array{Float64,1},LotkaVolterra,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{LotkaVolterra,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Vern9Cache{Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}},Void,Float64},Array{RowVector{Float64,Array{Float64,1}},1},Array{Float64,1},Array{Array{Array{Float64,2},1},1},OrdinaryDiffEq.Vern9Cache{RowVector{Float64,Array{Float64,1}},Array{Float64,2},Array{Float64,2},Array{Float64,2},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}},LotkaVolterra,DiffEqDiffTools.ParamJacobianWrapper{LotkaVolterra,Float64,Array{Float64,1}},Void,Float64,DiffEqSensitivity.SensitivityAlg{0,true,DataType}}, ::Float64, ::Float64) at /home/vagrant/.julia/v0.6/QuadGK/src/QuadGK.jl:176
 [4] (::Base.#kw##quadgk)(::Array{Any,1}, ::Base.#quadgk, ::DiffEqSensitivity.AdjointSensitivityIntegrand{DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,Array{Float64,1},LotkaVolterra,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{LotkaVolterra,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Vern9Cache{Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}},DiffEqBase.ODESolution{Float64,3,Array{RowVector{Float64,Array{Float64,1}},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,2},1},1},DiffEqSensitivity.ODEAdjointProblem{RowVector{Float64,Array{Float64,1}},Float64,true,Array{Float64,1},DiffEqSensitivity.ODEAdjointSensitvityFunction{LotkaVolterra,DiffEqDiffTools.UJacobianWrapper{LotkaVolterra,Float64,Array{Float64,1}},DiffEqDiffTools.UJacobianWrapper{#dg,Float64,Array{Float64,1}},Void,Void,DiffEqSensitivity.SensitivityAlg{0,true,DataType},Array{Float64,1},DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,Array{Float64,1},LotkaVolterra,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{LotkaVolterra,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Vern9Cache{Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}},Void,Float64},DiffEqBase.CallbackSet{Tuple{},Tuple{DiffEqBase.DiscreteCallback{DiffEqCallbacks.##33#36{Base.RefValue{Float64}},DiffEqCallbacks.##34#37{DiffEqSensitivity.#time_choice#12{StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}},DiffEqSensitivity.#affect!#13{#dg,StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}},Array{Float64,1}},Base.RefValue{Float64}},DiffEqCallbacks.##35#38{DiffEqBase.#INITIALIZE_DEFAULT,Bool,DiffEqSensitivity.#time_choice#12{StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}},Base.RefValue{Float64},DiffEqCallbacks.##34#37{DiffEqSensitivity.#time_choice#12{StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}},DiffEqSensitivity.#affect!#13{#dg,StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}},Array{Float64,1}},Base.RefValue{Float64}}}}}},UniformScaling{Int64}},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{DiffEqSensitivity.ODEAdjointSensitvityFunction{LotkaVolterra,DiffEqDiffTools.UJacobianWrapper{LotkaVolterra,Float64,Array{Float64,1}},DiffEqDiffTools.UJacobianWrapper{#dg,Float64,Array{Float64,1}},Void,Void,DiffEqSensitivity.SensitivityAlg{0,true,DataType},Array{Float64,1},DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,Array{Float64,1},LotkaVolterra,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{LotkaVolterra,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Vern9Cache{Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}},Void,Float64},Array{RowVector{Float64,Array{Float64,1}},1},Array{Float64,1},Array{Array{Array{Float64,2},1},1},OrdinaryDiffEq.Vern9Cache{RowVector{Float64,Array{Float64,1}},Array{Float64,2},Array{Float64,2},Array{Float64,2},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}},LotkaVolterra,DiffEqDiffTools.ParamJacobianWrapper{LotkaVolterra,Float64,Array{Float64,1}},Void,Float64,DiffEqSensitivity.SensitivityAlg{0,true,DataType}}, ::Float64, ::Float64) at ./<missing>:0
 [5] #adjoint_sensitivities#14(::Float64, ::Float64, ::Float64, ::Float64, ::Array{Any,1}, ::Function, ::DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,Array{Float64,1},LotkaVolterra,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{LotkaVolterra,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Vern9Cache{Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}}, ::OrdinaryDiffEq.Vern9, ::#dg, ::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}, ::Void) at /home/vagrant/.julia/v0.6/DiffEqSensitivity/src/adjoint_sensitivity.jl:198
 [6] (::DiffEqSensitivity.#kw##adjoint_sensitivities)(::Array{Any,1}, ::DiffEqSensitivity.#adjoint_sensitivities, ::DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,Array{Float64,1},LotkaVolterra,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{LotkaVolterra,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Vern9Cache{Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}}, ::OrdinaryDiffEq.Vern9, ::Function, ::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}, ::Void) at ./<missing>:0 (repeats 2 times)
 [7] include_from_node1(::String) at ./loading.jl:576
 [8] include(::String) at ./sysimg.jl:14
 [9] macro expansion at /home/vagrant/.julia/v0.6/DiffEqSensitivity/test/runtests.jl:5 [inlined]
 [10] macro expansion at ./test.jl:860 [inlined]
 [11] anonymous at ./<missing>:?
 [12] include_from_node1(::String) at ./loading.jl:576
 [13] include(::String) at ./sysimg.jl:14
 [14] process_options(::Base.JLOptions) at ./client.jl:305
 [15] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/DiffEqSensitivity/test/adjoint.jl, in expression starting on line 20
WARNING: abstol and reltol keywords are now atol and rtol, respectively
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] tols(::Float64, ::Float64, ::Float64, ::Float64) at /home/vagrant/.julia/v0.6/QuadGK/src/QuadGK.jl:166
 [3] #quadgk#13(::Float64, ::Float64, ::Float64, ::Float64, ::Int64, ::Int64, ::Function, ::Function, ::DiffEqSensitivity.AdjointSensitivityIntegrand{DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,Array{Float64,1},LotkaVolterra,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{LotkaVolterra,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Vern9Cache{Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}},DiffEqBase.ODESolution{Float64,3,Array{RowVector{Float64,Array{Float64,1}},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,2},1},1},DiffEqSensitivity.ODEAdjointProblem{RowVector{Float64,Array{Float64,1}},Float64,true,Array{Float64,1},DiffEqSensitivity.ODEAdjointSensitvityFunction{LotkaVolterra,DiffEqDiffTools.UJacobianWrapper{LotkaVolterra,Float64,Array{Float64,1}},DiffEqDiffTools.UJacobianWrapper{#dg,Float64,Array{Float64,1}},Void,Void,DiffEqSensitivity.SensitivityAlg{0,true,DataType},Array{Float64,1},DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,Array{Float64,1},LotkaVolterra,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{LotkaVolterra,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Vern9Cache{Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}},Void,Float64},DiffEqBase.CallbackSet{Tuple{},Tuple{DiffEqBase.DiscreteCallback{DiffEqCallbacks.##33#36{Base.RefValue{Float64}},DiffEqCallbacks.##34#37{DiffEqSensitivity.#time_choice#12{StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}},DiffEqSensitivity.#affect!#13{#dg,StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}},Array{Float64,1}},Base.RefValue{Float64}},DiffEqCallbacks.##35#38{DiffEqBase.#INITIALIZE_DEFAULT,Bool,DiffEqSensitivity.#time_choice#12{StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}},Base.RefValue{Float64},DiffEqCallbacks.##34#37{DiffEqSensitivity.#time_choice#12{StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}},DiffEqSensitivity.#affect!#13{#dg,StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}},Array{Float64,1}},Base.RefValue{Float64}}}}}},UniformScaling{Int64}},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{DiffEqSensitivity.ODEAdjointSensitvityFunction{LotkaVolterra,DiffEqDiffTools.UJacobianWrapper{LotkaVolterra,Float64,Array{Float64,1}},DiffEqDiffTools.UJacobianWrapper{#dg,Float64,Array{Float64,1}},Void,Void,DiffEqSensitivity.SensitivityAlg{0,true,DataType},Array{Float64,1},DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,Array{Float64,1},LotkaVolterra,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{LotkaVolterra,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Vern9Cache{Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}},Void,Float64},Array{RowVector{Float64,Array{Float64,1}},1},Array{Float64,1},Array{Array{Array{Float64,2},1},1},OrdinaryDiffEq.Vern9Cache{RowVector{Float64,Array{Float64,1}},Array{Float64,2},Array{Float64,2},Array{Float64,2},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}},LotkaVolterra,DiffEqDiffTools.ParamJacobianWrapper{LotkaVolterra,Float64,Array{Float64,1}},Void,Float64,DiffEqSensitivity.SensitivityAlg{0,true,DataType}}, ::Float64, ::Float64) at /home/vagrant/.julia/v0.6/QuadGK/src/QuadGK.jl:176
 [4] (::Base.#kw##quadgk)(::Array{Any,1}, ::Base.#quadgk, ::DiffEqSensitivity.AdjointSensitivityIntegrand{DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,Array{Float64,1},LotkaVolterra,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{LotkaVolterra,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Vern9Cache{Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}},DiffEqBase.ODESolution{Float64,3,Array{RowVector{Float64,Array{Float64,1}},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,2},1},1},DiffEqSensitivity.ODEAdjointProblem{RowVector{Float64,Array{Float64,1}},Float64,true,Array{Float64,1},DiffEqSensitivity.ODEAdjointSensitvityFunction{LotkaVolterra,DiffEqDiffTools.UJacobianWrapper{LotkaVolterra,Float64,Array{Float64,1}},DiffEqDiffTools.UJacobianWrapper{#dg,Float64,Array{Float64,1}},Void,Void,DiffEqSensitivity.SensitivityAlg{0,true,DataType},Array{Float64,1},DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,Array{Float64,1},LotkaVolterra,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{LotkaVolterra,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Vern9Cache{Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}},Void,Float64},DiffEqBase.CallbackSet{Tuple{},Tuple{DiffEqBase.DiscreteCallback{DiffEqCallbacks.##33#36{Base.RefValue{Float64}},DiffEqCallbacks.##34#37{DiffEqSensitivity.#time_choice#12{StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}},DiffEqSensitivity.#affect!#13{#dg,StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}},Array{Float64,1}},Base.RefValue{Float64}},DiffEqCallbacks.##35#38{DiffEqBase.#INITIALIZE_DEFAULT,Bool,DiffEqSensitivity.#time_choice#12{StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}},Base.RefValue{Float64},DiffEqCallbacks.##34#37{DiffEqSensitivity.#time_choice#12{StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}},DiffEqSensitivity.#affect!#13{#dg,StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}},Array{Float64,1}},Base.RefValue{Float64}}}}}},UniformScaling{Int64}},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{DiffEqSensitivity.ODEAdjointSensitvityFunction{LotkaVolterra,DiffEqDiffTools.UJacobianWrapper{LotkaVolterra,Float64,Array{Float64,1}},DiffEqDiffTools.UJacobianWrapper{#dg,Float64,Array{Float64,1}},Void,Void,DiffEqSensitivity.SensitivityAlg{0,true,DataType},Array{Float64,1},DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,Array{Float64,1},LotkaVolterra,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{LotkaVolterra,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Vern9Cache{Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}},Void,Float64},Array{RowVector{Float64,Array{Float64,1}},1},Array{Float64,1},Array{Array{Array{Float64,2},1},1},OrdinaryDiffEq.Vern9Cache{RowVector{Float64,Array{Float64,1}},Array{Float64,2},Array{Float64,2},Array{Float64,2},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}},LotkaVolterra,DiffEqDiffTools.ParamJacobianWrapper{LotkaVolterra,Float64,Array{Float64,1}},Void,Float64,DiffEqSensitivity.SensitivityAlg{0,true,DataType}}, ::Float64, ::Float64) at ./<missing>:0
 [5] #adjoint_sensitivities#14(::Float64, ::Float64, ::Float64, ::Float64, ::Array{Any,1}, ::Function, ::DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,Array{Float64,1},LotkaVolterra,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{LotkaVolterra,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Vern9Cache{Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}}, ::OrdinaryDiffEq.Vern9, ::#dg, ::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}, ::Void) at /home/vagrant/.julia/v0.6/DiffEqSensitivity/src/adjoint_sensitivity.jl:198
 [6] (::DiffEqSensitivity.#kw##adjoint_sensitivities)(::Array{Any,1}, ::DiffEqSensitivity.#adjoint_sensitivities, ::DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,Array{Float64,1},LotkaVolterra,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{LotkaVolterra,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Vern9Cache{Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}}, ::OrdinaryDiffEq.Vern9, ::Function, ::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}, ::Void) at ./<missing>:0 (repeats 2 times)
 [7] include_from_node1(::String) at ./loading.jl:576
 [8] include(::String) at ./sysimg.jl:14
 [9] macro expansion at /home/vagrant/.julia/v0.6/DiffEqSensitivity/test/runtests.jl:5 [inlined]
 [10] macro expansion at ./test.jl:860 [inlined]
 [11] anonymous at ./<missing>:?
 [12] include_from_node1(::String) at ./loading.jl:576
 [13] include(::String) at ./sysimg.jl:14
 [14] process_options(::Base.JLOptions) at ./client.jl:305
 [15] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/DiffEqSensitivity/test/adjoint.jl, in expression starting on line 20
WARNING: abstol and reltol keywords are now atol and rtol, respectively
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] tols(::Float64, ::Float64, ::Float64, ::Float64) at /home/vagrant/.julia/v0.6/QuadGK/src/QuadGK.jl:166
 [3] #quadgk#13(::Float64, ::Float64, ::Float64, ::Float64, ::Int64, ::Int64, ::Function, ::Function, ::DiffEqSensitivity.AdjointSensitivityIntegrand{DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,Array{Float64,1},LotkaVolterra,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{LotkaVolterra,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Vern9Cache{Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}},DiffEqBase.ODESolution{Float64,3,Array{RowVector{Float64,Array{Float64,1}},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,2},1},1},DiffEqSensitivity.ODEAdjointProblem{RowVector{Float64,Array{Float64,1}},Float64,true,Array{Float64,1},DiffEqSensitivity.ODEAdjointSensitvityFunction{LotkaVolterra,DiffEqDiffTools.UJacobianWrapper{LotkaVolterra,Float64,Array{Float64,1}},DiffEqDiffTools.UJacobianWrapper{#dg,Float64,Array{Float64,1}},Void,Void,DiffEqSensitivity.SensitivityAlg{0,true,DataType},Array{Float64,1},DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,Array{Float64,1},LotkaVolterra,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{LotkaVolterra,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Vern9Cache{Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}},Void,Float64},DiffEqBase.CallbackSet{Tuple{},Tuple{DiffEqBase.DiscreteCallback{DiffEqCallbacks.##33#36{Base.RefValue{Float64}},DiffEqCallbacks.##34#37{DiffEqSensitivity.#time_choice#12{StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}},DiffEqSensitivity.#affect!#13{#dg,StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}},Array{Float64,1}},Base.RefValue{Float64}},DiffEqCallbacks.##35#38{DiffEqBase.#INITIALIZE_DEFAULT,Bool,DiffEqSensitivity.#time_choice#12{StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}},Base.RefValue{Float64},DiffEqCallbacks.##34#37{DiffEqSensitivity.#time_choice#12{StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}},DiffEqSensitivity.#affect!#13{#dg,StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}},Array{Float64,1}},Base.RefValue{Float64}}}}}},UniformScaling{Int64}},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{DiffEqSensitivity.ODEAdjointSensitvityFunction{LotkaVolterra,DiffEqDiffTools.UJacobianWrapper{LotkaVolterra,Float64,Array{Float64,1}},DiffEqDiffTools.UJacobianWrapper{#dg,Float64,Array{Float64,1}},Void,Void,DiffEqSensitivity.SensitivityAlg{0,true,DataType},Array{Float64,1},DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,Array{Float64,1},LotkaVolterra,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{LotkaVolterra,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Vern9Cache{Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}},Void,Float64},Array{RowVector{Float64,Array{Float64,1}},1},Array{Float64,1},Array{Array{Array{Float64,2},1},1},OrdinaryDiffEq.Vern9Cache{RowVector{Float64,Array{Float64,1}},Array{Float64,2},Array{Float64,2},Array{Float64,2},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}},LotkaVolterra,DiffEqDiffTools.ParamJacobianWrapper{LotkaVolterra,Float64,Array{Float64,1}},Void,Float64,DiffEqSensitivity.SensitivityAlg{0,true,DataType}}, ::Float64, ::Float64) at /home/vagrant/.julia/v0.6/QuadGK/src/QuadGK.jl:176
 [4] (::Base.#kw##quadgk)(::Array{Any,1}, ::Base.#quadgk, ::DiffEqSensitivity.AdjointSensitivityIntegrand{DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,Array{Float64,1},LotkaVolterra,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{LotkaVolterra,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Vern9Cache{Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}},DiffEqBase.ODESolution{Float64,3,Array{RowVector{Float64,Array{Float64,1}},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,2},1},1},DiffEqSensitivity.ODEAdjointProblem{RowVector{Float64,Array{Float64,1}},Float64,true,Array{Float64,1},DiffEqSensitivity.ODEAdjointSensitvityFunction{LotkaVolterra,DiffEqDiffTools.UJacobianWrapper{LotkaVolterra,Float64,Array{Float64,1}},DiffEqDiffTools.UJacobianWrapper{#dg,Float64,Array{Float64,1}},Void,Void,DiffEqSensitivity.SensitivityAlg{0,true,DataType},Array{Float64,1},DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,Array{Float64,1},LotkaVolterra,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{LotkaVolterra,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Vern9Cache{Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}},Void,Float64},DiffEqBase.CallbackSet{Tuple{},Tuple{DiffEqBase.DiscreteCallback{DiffEqCallbacks.##33#36{Base.RefValue{Float64}},DiffEqCallbacks.##34#37{DiffEqSensitivity.#time_choice#12{StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}},DiffEqSensitivity.#affect!#13{#dg,StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}},Array{Float64,1}},Base.RefValue{Float64}},DiffEqCallbacks.##35#38{DiffEqBase.#INITIALIZE_DEFAULT,Bool,DiffEqSensitivity.#time_choice#12{StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}},Base.RefValue{Float64},DiffEqCallbacks.##34#37{DiffEqSensitivity.#time_choice#12{StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}},DiffEqSensitivity.#affect!#13{#dg,StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}},Array{Float64,1}},Base.RefValue{Float64}}}}}},UniformScaling{Int64}},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{DiffEqSensitivity.ODEAdjointSensitvityFunction{LotkaVolterra,DiffEqDiffTools.UJacobianWrapper{LotkaVolterra,Float64,Array{Float64,1}},DiffEqDiffTools.UJacobianWrapper{#dg,Float64,Array{Float64,1}},Void,Void,DiffEqSensitivity.SensitivityAlg{0,true,DataType},Array{Float64,1},DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,Array{Float64,1},LotkaVolterra,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{LotkaVolterra,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Vern9Cache{Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}},Void,Float64},Array{RowVector{Float64,Array{Float64,1}},1},Array{Float64,1},Array{Array{Array{Float64,2},1},1},OrdinaryDiffEq.Vern9Cache{RowVector{Float64,Array{Float64,1}},Array{Float64,2},Array{Float64,2},Array{Float64,2},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}},LotkaVolterra,DiffEqDiffTools.ParamJacobianWrapper{LotkaVolterra,Float64,Array{Float64,1}},Void,Float64,DiffEqSensitivity.SensitivityAlg{0,true,DataType}}, ::Float64, ::Float64) at ./<missing>:0
 [5] #adjoint_sensitivities#14(::Float64, ::Float64, ::Float64, ::Float64, ::Array{Any,1}, ::Function, ::DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,Array{Float64,1},LotkaVolterra,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{LotkaVolterra,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Vern9Cache{Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}}, ::OrdinaryDiffEq.Vern9, ::#dg, ::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}, ::Void) at /home/vagrant/.julia/v0.6/DiffEqSensitivity/src/adjoint_sensitivity.jl:198
 [6] (::DiffEqSensitivity.#kw##adjoint_sensitivities)(::Array{Any,1}, ::DiffEqSensitivity.#adjoint_sensitivities, ::DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,Array{Float64,1},LotkaVolterra,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{LotkaVolterra,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Vern9Cache{Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}}, ::OrdinaryDiffEq.Vern9, ::Function, ::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}, ::Void) at ./<missing>:0 (repeats 2 times)
 [7] include_from_node1(::String) at ./loading.jl:576
 [8] include(::String) at ./sysimg.jl:14
 [9] macro expansion at /home/vagrant/.julia/v0.6/DiffEqSensitivity/test/runtests.jl:5 [inlined]
 [10] macro expansion at ./test.jl:860 [inlined]
 [11] anonymous at ./<missing>:?
 [12] include_from_node1(::String) at ./loading.jl:576
 [13] include(::String) at ./sysimg.jl:14
 [14] process_options(::Base.JLOptions) at ./client.jl:305
 [15] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/DiffEqSensitivity/test/adjoint.jl, in expression starting on line 20
WARNING: abstol and reltol keywords are now atol and rtol, respectively
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] tols(::Float64, ::Float64, ::Float64, ::Float64) at /home/vagrant/.julia/v0.6/QuadGK/src/QuadGK.jl:166
 [3] #quadgk#13(::Float64, ::Float64, ::Float64, ::Float64, ::Int64, ::Int64, ::Function, ::Function, ::DiffEqSensitivity.AdjointSensitivityIntegrand{DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,Array{Float64,1},LotkaVolterra,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{LotkaVolterra,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Vern9Cache{Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}},DiffEqBase.ODESolution{Float64,3,Array{RowVector{Float64,Array{Float64,1}},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,2},1},1},DiffEqSensitivity.ODEAdjointProblem{RowVector{Float64,Array{Float64,1}},Float64,true,Array{Float64,1},DiffEqSensitivity.ODEAdjointSensitvityFunction{LotkaVolterra,DiffEqDiffTools.UJacobianWrapper{LotkaVolterra,Float64,Array{Float64,1}},DiffEqDiffTools.UJacobianWrapper{#dg,Float64,Array{Float64,1}},Void,Void,DiffEqSensitivity.SensitivityAlg{0,true,DataType},Array{Float64,1},DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,Array{Float64,1},LotkaVolterra,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{LotkaVolterra,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Vern9Cache{Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}},Void,Float64},DiffEqBase.CallbackSet{Tuple{},Tuple{DiffEqBase.DiscreteCallback{DiffEqCallbacks.##33#36{Base.RefValue{Float64}},DiffEqCallbacks.##34#37{DiffEqSensitivity.#time_choice#12{StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}},DiffEqSensitivity.#affect!#13{#dg,StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}},Array{Float64,1}},Base.RefValue{Float64}},DiffEqCallbacks.##35#38{DiffEqBase.#INITIALIZE_DEFAULT,Bool,DiffEqSensitivity.#time_choice#12{StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}},Base.RefValue{Float64},DiffEqCallbacks.##34#37{DiffEqSensitivity.#time_choice#12{StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}},DiffEqSensitivity.#affect!#13{#dg,StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}},Array{Float64,1}},Base.RefValue{Float64}}}}}},UniformScaling{Int64}},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{DiffEqSensitivity.ODEAdjointSensitvityFunction{LotkaVolterra,DiffEqDiffTools.UJacobianWrapper{LotkaVolterra,Float64,Array{Float64,1}},DiffEqDiffTools.UJacobianWrapper{#dg,Float64,Array{Float64,1}},Void,Void,DiffEqSensitivity.SensitivityAlg{0,true,DataType},Array{Float64,1},DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,Array{Float64,1},LotkaVolterra,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{LotkaVolterra,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Vern9Cache{Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}},Void,Float64},Array{RowVector{Float64,Array{Float64,1}},1},Array{Float64,1},Array{Array{Array{Float64,2},1},1},OrdinaryDiffEq.Vern9Cache{RowVector{Float64,Array{Float64,1}},Array{Float64,2},Array{Float64,2},Array{Float64,2},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}},LotkaVolterra,DiffEqDiffTools.ParamJacobianWrapper{LotkaVolterra,Float64,Array{Float64,1}},Void,Float64,DiffEqSensitivity.SensitivityAlg{0,true,DataType}}, ::Float64, ::Float64) at /home/vagrant/.julia/v0.6/QuadGK/src/QuadGK.jl:176
 [4] (::Base.#kw##quadgk)(::Array{Any,1}, ::Base.#quadgk, ::DiffEqSensitivity.AdjointSensitivityIntegrand{DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,Array{Float64,1},LotkaVolterra,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{LotkaVolterra,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Vern9Cache{Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}},DiffEqBase.ODESolution{Float64,3,Array{RowVector{Float64,Array{Float64,1}},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,2},1},1},DiffEqSensitivity.ODEAdjointProblem{RowVector{Float64,Array{Float64,1}},Float64,true,Array{Float64,1},DiffEqSensitivity.ODEAdjointSensitvityFunction{LotkaVolterra,DiffEqDiffTools.UJacobianWrapper{LotkaVolterra,Float64,Array{Float64,1}},DiffEqDiffTools.UJacobianWrapper{#dg,Float64,Array{Float64,1}},Void,Void,DiffEqSensitivity.SensitivityAlg{0,true,DataType},Array{Float64,1},DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,Array{Float64,1},LotkaVolterra,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{LotkaVolterra,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Vern9Cache{Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}},Void,Float64},DiffEqBase.CallbackSet{Tuple{},Tuple{DiffEqBase.DiscreteCallback{DiffEqCallbacks.##33#36{Base.RefValue{Float64}},DiffEqCallbacks.##34#37{DiffEqSensitivity.#time_choice#12{StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}},DiffEqSensitivity.#affect!#13{#dg,StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}},Array{Float64,1}},Base.RefValue{Float64}},DiffEqCallbacks.##35#38{DiffEqBase.#INITIALIZE_DEFAULT,Bool,DiffEqSensitivity.#time_choice#12{StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}},Base.RefValue{Float64},DiffEqCallbacks.##34#37{DiffEqSensitivity.#time_choice#12{StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}},DiffEqSensitivity.#affect!#13{#dg,StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}},Array{Float64,1}},Base.RefValue{Float64}}}}}},UniformScaling{Int64}},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{DiffEqSensitivity.ODEAdjointSensitvityFunction{LotkaVolterra,DiffEqDiffTools.UJacobianWrapper{LotkaVolterra,Float64,Array{Float64,1}},DiffEqDiffTools.UJacobianWrapper{#dg,Float64,Array{Float64,1}},Void,Void,DiffEqSensitivity.SensitivityAlg{0,true,DataType},Array{Float64,1},DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,Array{Float64,1},LotkaVolterra,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{LotkaVolterra,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Vern9Cache{Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}},Void,Float64},Array{RowVector{Float64,Array{Float64,1}},1},Array{Float64,1},Array{Array{Array{Float64,2},1},1},OrdinaryDiffEq.Vern9Cache{RowVector{Float64,Array{Float64,1}},Array{Float64,2},Array{Float64,2},Array{Float64,2},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}},LotkaVolterra,DiffEqDiffTools.ParamJacobianWrapper{LotkaVolterra,Float64,Array{Float64,1}},Void,Float64,DiffEqSensitivity.SensitivityAlg{0,true,DataType}}, ::Float64, ::Float64) at ./<missing>:0
 [5] #adjoint_sensitivities#14(::Float64, ::Float64, ::Float64, ::Float64, ::Array{Any,1}, ::Function, ::DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,Array{Float64,1},LotkaVolterra,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{LotkaVolterra,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Vern9Cache{Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}}, ::OrdinaryDiffEq.Vern9, ::#dg, ::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}, ::Void) at /home/vagrant/.julia/v0.6/DiffEqSensitivity/src/adjoint_sensitivity.jl:198
 [6] (::DiffEqSensitivity.#kw##adjoint_sensitivities)(::Array{Any,1}, ::DiffEqSensitivity.#adjoint_sensitivities, ::DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,Array{Float64,1},LotkaVolterra,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{LotkaVolterra,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Vern9Cache{Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}}, ::OrdinaryDiffEq.Vern9, ::Function, ::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}, ::Void) at ./<missing>:0 (repeats 2 times)
 [7] include_from_node1(::String) at ./loading.jl:576
 [8] include(::String) at ./sysimg.jl:14
 [9] macro expansion at /home/vagrant/.julia/v0.6/DiffEqSensitivity/test/runtests.jl:5 [inlined]
 [10] macro expansion at ./test.jl:860 [inlined]
 [11] anonymous at ./<missing>:?
 [12] include_from_node1(::String) at ./loading.jl:576
 [13] include(::String) at ./sysimg.jl:14
 [14] process_options(::Base.JLOptions) at ./client.jl:305
 [15] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/DiffEqSensitivity/test/adjoint.jl, in expression starting on line 20
WARNING: abstol and reltol keywords are now atol and rtol, respectively
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] tols(::Float64, ::Float64, ::Float64, ::Float64) at /home/vagrant/.julia/v0.6/QuadGK/src/QuadGK.jl:166
 [3] #quadgk#13(::Float64, ::Float64, ::Float64, ::Float64, ::Int64, ::Int64, ::Function, ::Function, ::DiffEqSensitivity.AdjointSensitivityIntegrand{DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,Array{Float64,1},LotkaVolterra,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{LotkaVolterra,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Vern9Cache{Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}},DiffEqBase.ODESolution{Float64,3,Array{RowVector{Float64,Array{Float64,1}},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,2},1},1},DiffEqSensitivity.ODEAdjointProblem{RowVector{Float64,Array{Float64,1}},Float64,true,Array{Float64,1},DiffEqSensitivity.ODEAdjointSensitvityFunction{LotkaVolterra,DiffEqDiffTools.UJacobianWrapper{LotkaVolterra,Float64,Array{Float64,1}},DiffEqDiffTools.UJacobianWrapper{#dg,Float64,Array{Float64,1}},Void,Void,DiffEqSensitivity.SensitivityAlg{0,true,DataType},Array{Float64,1},DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,Array{Float64,1},LotkaVolterra,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{LotkaVolterra,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Vern9Cache{Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}},Void,Float64},DiffEqBase.CallbackSet{Tuple{},Tuple{DiffEqBase.DiscreteCallback{DiffEqCallbacks.##33#36{Base.RefValue{Float64}},DiffEqCallbacks.##34#37{DiffEqSensitivity.#time_choice#12{StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}},DiffEqSensitivity.#affect!#13{#dg,StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}},Array{Float64,1}},Base.RefValue{Float64}},DiffEqCallbacks.##35#38{DiffEqBase.#INITIALIZE_DEFAULT,Bool,DiffEqSensitivity.#time_choice#12{StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}},Base.RefValue{Float64},DiffEqCallbacks.##34#37{DiffEqSensitivity.#time_choice#12{StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}},DiffEqSensitivity.#affect!#13{#dg,StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}},Array{Float64,1}},Base.RefValue{Float64}}}}}},UniformScaling{Int64}},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{DiffEqSensitivity.ODEAdjointSensitvityFunction{LotkaVolterra,DiffEqDiffTools.UJacobianWrapper{LotkaVolterra,Float64,Array{Float64,1}},DiffEqDiffTools.UJacobianWrapper{#dg,Float64,Array{Float64,1}},Void,Void,DiffEqSensitivity.SensitivityAlg{0,true,DataType},Array{Float64,1},DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,Array{Float64,1},LotkaVolterra,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{LotkaVolterra,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Vern9Cache{Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}},Void,Float64},Array{RowVector{Float64,Array{Float64,1}},1},Array{Float64,1},Array{Array{Array{Float64,2},1},1},OrdinaryDiffEq.Vern9Cache{RowVector{Float64,Array{Float64,1}},Array{Float64,2},Array{Float64,2},Array{Float64,2},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}},LotkaVolterra,DiffEqDiffTools.ParamJacobianWrapper{LotkaVolterra,Float64,Array{Float64,1}},Void,Float64,DiffEqSensitivity.SensitivityAlg{0,true,DataType}}, ::Float64, ::Float64) at /home/vagrant/.julia/v0.6/QuadGK/src/QuadGK.jl:176
 [4] (::Base.#kw##quadgk)(::Array{Any,1}, ::Base.#quadgk, ::DiffEqSensitivity.AdjointSensitivityIntegrand{DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,Array{Float64,1},LotkaVolterra,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{LotkaVolterra,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Vern9Cache{Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}},DiffEqBase.ODESolution{Float64,3,Array{RowVector{Float64,Array{Float64,1}},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,2},1},1},DiffEqSensitivity.ODEAdjointProblem{RowVector{Float64,Array{Float64,1}},Float64,true,Array{Float64,1},DiffEqSensitivity.ODEAdjointSensitvityFunction{LotkaVolterra,DiffEqDiffTools.UJacobianWrapper{LotkaVolterra,Float64,Array{Float64,1}},DiffEqDiffTools.UJacobianWrapper{#dg,Float64,Array{Float64,1}},Void,Void,DiffEqSensitivity.SensitivityAlg{0,true,DataType},Array{Float64,1},DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,Array{Float64,1},LotkaVolterra,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{LotkaVolterra,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Vern9Cache{Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}},Void,Float64},DiffEqBase.CallbackSet{Tuple{},Tuple{DiffEqBase.DiscreteCallback{DiffEqCallbacks.##33#36{Base.RefValue{Float64}},DiffEqCallbacks.##34#37{DiffEqSensitivity.#time_choice#12{StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}},DiffEqSensitivity.#affect!#13{#dg,StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}},Array{Float64,1}},Base.RefValue{Float64}},DiffEqCallbacks.##35#38{DiffEqBase.#INITIALIZE_DEFAULT,Bool,DiffEqSensitivity.#time_choice#12{StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}},Base.RefValue{Float64},DiffEqCallbacks.##34#37{DiffEqSensitivity.#time_choice#12{StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}},DiffEqSensitivity.#affect!#13{#dg,StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}},Array{Float64,1}},Base.RefValue{Float64}}}}}},UniformScaling{Int64}},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{DiffEqSensitivity.ODEAdjointSensitvityFunction{LotkaVolterra,DiffEqDiffTools.UJacobianWrapper{LotkaVolterra,Float64,Array{Float64,1}},DiffEqDiffTools.UJacobianWrapper{#dg,Float64,Array{Float64,1}},Void,Void,DiffEqSensitivity.SensitivityAlg{0,true,DataType},Array{Float64,1},DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,Array{Float64,1},LotkaVolterra,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{LotkaVolterra,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Vern9Cache{Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}},Void,Float64},Array{RowVector{Float64,Array{Float64,1}},1},Array{Float64,1},Array{Array{Array{Float64,2},1},1},OrdinaryDiffEq.Vern9Cache{RowVector{Float64,Array{Float64,1}},Array{Float64,2},Array{Float64,2},Array{Float64,2},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}},LotkaVolterra,DiffEqDiffTools.ParamJacobianWrapper{LotkaVolterra,Float64,Array{Float64,1}},Void,Float64,DiffEqSensitivity.SensitivityAlg{0,true,DataType}}, ::Float64, ::Float64) at ./<missing>:0
 [5] #adjoint_sensitivities#14(::Float64, ::Float64, ::Float64, ::Float64, ::Array{Any,1}, ::Function, ::DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,Array{Float64,1},LotkaVolterra,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{LotkaVolterra,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Vern9Cache{Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}}, ::OrdinaryDiffEq.Vern9, ::#dg, ::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}, ::Void) at /home/vagrant/.julia/v0.6/DiffEqSensitivity/src/adjoint_sensitivity.jl:198
 [6] (::DiffEqSensitivity.#kw##adjoint_sensitivities)(::Array{Any,1}, ::DiffEqSensitivity.#adjoint_sensitivities, ::DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,Array{Float64,1},LotkaVolterra,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{LotkaVolterra,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Vern9Cache{Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}}, ::OrdinaryDiffEq.Vern9, ::Function, ::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}, ::Void) at ./<missing>:0 (repeats 2 times)
 [7] include_from_node1(::String) at ./loading.jl:576
 [8] include(::String) at ./sysimg.jl:14
 [9] macro expansion at /home/vagrant/.julia/v0.6/DiffEqSensitivity/test/runtests.jl:5 [inlined]
 [10] macro expansion at ./test.jl:860 [inlined]
 [11] anonymous at ./<missing>:?
 [12] include_from_node1(::String) at ./loading.jl:576
 [13] include(::String) at ./sysimg.jl:14
 [14] process_options(::Base.JLOptions) at ./client.jl:305
 [15] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/DiffEqSensitivity/test/adjoint.jl, in expression starting on line 20
WARNING: abstol and reltol keywords are now atol and rtol, respectively
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] tols(::Float64, ::Float64, ::Float64, ::Float64) at /home/vagrant/.julia/v0.6/QuadGK/src/QuadGK.jl:166
 [3] #quadgk#13(::Float64, ::Float64, ::Float64, ::Float64, ::Int64, ::Int64, ::Function, ::Function, ::DiffEqSensitivity.AdjointSensitivityIntegrand{DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,Array{Float64,1},LotkaVolterra,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{LotkaVolterra,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Vern9Cache{Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}},DiffEqBase.ODESolution{Float64,3,Array{RowVector{Float64,Array{Float64,1}},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,2},1},1},DiffEqSensitivity.ODEAdjointProblem{RowVector{Float64,Array{Float64,1}},Float64,true,Array{Float64,1},DiffEqSensitivity.ODEAdjointSensitvityFunction{LotkaVolterra,DiffEqDiffTools.UJacobianWrapper{LotkaVolterra,Float64,Array{Float64,1}},DiffEqDiffTools.UJacobianWrapper{#dg,Float64,Array{Float64,1}},Void,Void,DiffEqSensitivity.SensitivityAlg{0,true,DataType},Array{Float64,1},DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,Array{Float64,1},LotkaVolterra,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{LotkaVolterra,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Vern9Cache{Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}},Void,Float64},DiffEqBase.CallbackSet{Tuple{},Tuple{DiffEqBase.DiscreteCallback{DiffEqCallbacks.##33#36{Base.RefValue{Float64}},DiffEqCallbacks.##34#37{DiffEqSensitivity.#time_choice#12{StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}},DiffEqSensitivity.#affect!#13{#dg,StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}},Array{Float64,1}},Base.RefValue{Float64}},DiffEqCallbacks.##35#38{DiffEqBase.#INITIALIZE_DEFAULT,Bool,DiffEqSensitivity.#time_choice#12{StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}},Base.RefValue{Float64},DiffEqCallbacks.##34#37{DiffEqSensitivity.#time_choice#12{StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}},DiffEqSensitivity.#affect!#13{#dg,StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}},Array{Float64,1}},Base.RefValue{Float64}}}}}},UniformScaling{Int64}},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{DiffEqSensitivity.ODEAdjointSensitvityFunction{LotkaVolterra,DiffEqDiffTools.UJacobianWrapper{LotkaVolterra,Float64,Array{Float64,1}},DiffEqDiffTools.UJacobianWrapper{#dg,Float64,Array{Float64,1}},Void,Void,DiffEqSensitivity.SensitivityAlg{0,true,DataType},Array{Float64,1},DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,Array{Float64,1},LotkaVolterra,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{LotkaVolterra,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Vern9Cache{Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}},Void,Float64},Array{RowVector{Float64,Array{Float64,1}},1},Array{Float64,1},Array{Array{Array{Float64,2},1},1},OrdinaryDiffEq.Vern9Cache{RowVector{Float64,Array{Float64,1}},Array{Float64,2},Array{Float64,2},Array{Float64,2},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}},LotkaVolterra,DiffEqDiffTools.ParamJacobianWrapper{LotkaVolterra,Float64,Array{Float64,1}},Void,Float64,DiffEqSensitivity.SensitivityAlg{0,true,DataType}}, ::Float64, ::Float64) at /home/vagrant/.julia/v0.6/QuadGK/src/QuadGK.jl:176
 [4] (::Base.#kw##quadgk)(::Array{Any,1}, ::Base.#quadgk, ::DiffEqSensitivity.AdjointSensitivityIntegrand{DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,Array{Float64,1},LotkaVolterra,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{LotkaVolterra,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Vern9Cache{Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}},DiffEqBase.ODESolution{Float64,3,Array{RowVector{Float64,Array{Float64,1}},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,2},1},1},DiffEqSensitivity.ODEAdjointProblem{RowVector{Float64,Array{Float64,1}},Float64,true,Array{Float64,1},DiffEqSensitivity.ODEAdjointSensitvityFunction{LotkaVolterra,DiffEqDiffTools.UJacobianWrapper{LotkaVolterra,Float64,Array{Float64,1}},DiffEqDiffTools.UJacobianWrapper{#dg,Float64,Array{Float64,1}},Void,Void,DiffEqSensitivity.SensitivityAlg{0,true,DataType},Array{Float64,1},DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,Array{Float64,1},LotkaVolterra,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{LotkaVolterra,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Vern9Cache{Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}},Void,Float64},DiffEqBase.CallbackSet{Tuple{},Tuple{DiffEqBase.DiscreteCallback{DiffEqCallbacks.##33#36{Base.RefValue{Float64}},DiffEqCallbacks.##34#37{DiffEqSensitivity.#time_choice#12{StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}},DiffEqSensitivity.#affect!#13{#dg,StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}},Array{Float64,1}},Base.RefValue{Float64}},DiffEqCallbacks.##35#38{DiffEqBase.#INITIALIZE_DEFAULT,Bool,DiffEqSensitivity.#time_choice#12{StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}},Base.RefValue{Float64},DiffEqCallbacks.##34#37{DiffEqSensitivity.#time_choice#12{StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}},DiffEqSensitivity.#affect!#13{#dg,StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}},Array{Float64,1}},Base.RefValue{Float64}}}}}},UniformScaling{Int64}},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{DiffEqSensitivity.ODEAdjointSensitvityFunction{LotkaVolterra,DiffEqDiffTools.UJacobianWrapper{LotkaVolterra,Float64,Array{Float64,1}},DiffEqDiffTools.UJacobianWrapper{#dg,Float64,Array{Float64,1}},Void,Void,DiffEqSensitivity.SensitivityAlg{0,true,DataType},Array{Float64,1},DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,Array{Float64,1},LotkaVolterra,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{LotkaVolterra,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Vern9Cache{Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}},Void,Float64},Array{RowVector{Float64,Array{Float64,1}},1},Array{Float64,1},Array{Array{Array{Float64,2},1},1},OrdinaryDiffEq.Vern9Cache{RowVector{Float64,Array{Float64,1}},Array{Float64,2},Array{Float64,2},Array{Float64,2},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}},LotkaVolterra,DiffEqDiffTools.ParamJacobianWrapper{LotkaVolterra,Float64,Array{Float64,1}},Void,Float64,DiffEqSensitivity.SensitivityAlg{0,true,DataType}}, ::Float64, ::Float64) at ./<missing>:0
 [5] #adjoint_sensitivities#14(::Float64, ::Float64, ::Float64, ::Float64, ::Array{Any,1}, ::Function, ::DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,Array{Float64,1},LotkaVolterra,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{LotkaVolterra,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Vern9Cache{Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}}, ::OrdinaryDiffEq.Vern9, ::#dg, ::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}, ::Void) at /home/vagrant/.julia/v0.6/DiffEqSensitivity/src/adjoint_sensitivity.jl:198
 [6] (::DiffEqSensitivity.#kw##adjoint_sensitivities)(::Array{Any,1}, ::DiffEqSensitivity.#adjoint_sensitivities, ::DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,Array{Float64,1},LotkaVolterra,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{LotkaVolterra,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Vern9Cache{Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}}, ::OrdinaryDiffEq.Vern9, ::Function, ::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}, ::Void) at ./<missing>:0 (repeats 2 times)
 [7] include_from_node1(::String) at ./loading.jl:576
 [8] include(::String) at ./sysimg.jl:14
 [9] macro expansion at /home/vagrant/.julia/v0.6/DiffEqSensitivity/test/runtests.jl:5 [inlined]
 [10] macro expansion at ./test.jl:860 [inlined]
 [11] anonymous at ./<missing>:?
 [12] include_from_node1(::String) at ./loading.jl:576
 [13] include(::String) at ./sysimg.jl:14
 [14] process_options(::Base.JLOptions) at ./client.jl:305
 [15] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/DiffEqSensitivity/test/adjoint.jl, in expression starting on line 20
WARNING: abstol and reltol keywords are now atol and rtol, respectively
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] tols(::Float64, ::Float64, ::Float64, ::Float64) at /home/vagrant/.julia/v0.6/QuadGK/src/QuadGK.jl:166
 [3] #quadgk#13(::Float64, ::Float64, ::Float64, ::Float64, ::Int64, ::Int64, ::Function, ::Function, ::DiffEqSensitivity.AdjointSensitivityIntegrand{DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,Array{Float64,1},LotkaVolterra,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{LotkaVolterra,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Vern9Cache{Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}},DiffEqBase.ODESolution{Float64,3,Array{RowVector{Float64,Array{Float64,1}},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,2},1},1},DiffEqSensitivity.ODEAdjointProblem{RowVector{Float64,Array{Float64,1}},Float64,true,Array{Float64,1},DiffEqSensitivity.ODEAdjointSensitvityFunction{LotkaVolterra,DiffEqDiffTools.UJacobianWrapper{LotkaVolterra,Float64,Array{Float64,1}},DiffEqDiffTools.UJacobianWrapper{#dg,Float64,Array{Float64,1}},Void,Void,DiffEqSensitivity.SensitivityAlg{0,true,DataType},Array{Float64,1},DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,Array{Float64,1},LotkaVolterra,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{LotkaVolterra,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Vern9Cache{Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}},Void,Float64},DiffEqBase.CallbackSet{Tuple{},Tuple{DiffEqBase.DiscreteCallback{DiffEqCallbacks.##33#36{Base.RefValue{Float64}},DiffEqCallbacks.##34#37{DiffEqSensitivity.#time_choice#12{StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}},DiffEqSensitivity.#affect!#13{#dg,StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}},Array{Float64,1}},Base.RefValue{Float64}},DiffEqCallbacks.##35#38{DiffEqBase.#INITIALIZE_DEFAULT,Bool,DiffEqSensitivity.#time_choice#12{StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}},Base.RefValue{Float64},DiffEqCallbacks.##34#37{DiffEqSensitivity.#time_choice#12{StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}},DiffEqSensitivity.#affect!#13{#dg,StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}},Array{Float64,1}},Base.RefValue{Float64}}}}}},UniformScaling{Int64}},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{DiffEqSensitivity.ODEAdjointSensitvityFunction{LotkaVolterra,DiffEqDiffTools.UJacobianWrapper{LotkaVolterra,Float64,Array{Float64,1}},DiffEqDiffTools.UJacobianWrapper{#dg,Float64,Array{Float64,1}},Void,Void,DiffEqSensitivity.SensitivityAlg{0,true,DataType},Array{Float64,1},DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,Array{Float64,1},LotkaVolterra,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{LotkaVolterra,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Vern9Cache{Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}},Void,Float64},Array{RowVector{Float64,Array{Float64,1}},1},Array{Float64,1},Array{Array{Array{Float64,2},1},1},OrdinaryDiffEq.Vern9Cache{RowVector{Float64,Array{Float64,1}},Array{Float64,2},Array{Float64,2},Array{Float64,2},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}},LotkaVolterra,DiffEqDiffTools.ParamJacobianWrapper{LotkaVolterra,Float64,Array{Float64,1}},Void,Float64,DiffEqSensitivity.SensitivityAlg{0,true,DataType}}, ::Float64, ::Float64) at /home/vagrant/.julia/v0.6/QuadGK/src/QuadGK.jl:176
 [4] (::Base.#kw##quadgk)(::Array{Any,1}, ::Base.#quadgk, ::DiffEqSensitivity.AdjointSensitivityIntegrand{DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,Array{Float64,1},LotkaVolterra,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{LotkaVolterra,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Vern9Cache{Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}},DiffEqBase.ODESolution{Float64,3,Array{RowVector{Float64,Array{Float64,1}},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,2},1},1},DiffEqSensitivity.ODEAdjointProblem{RowVector{Float64,Array{Float64,1}},Float64,true,Array{Float64,1},DiffEqSensitivity.ODEAdjointSensitvityFunction{LotkaVolterra,DiffEqDiffTools.UJacobianWrapper{LotkaVolterra,Float64,Array{Float64,1}},DiffEqDiffTools.UJacobianWrapper{#dg,Float64,Array{Float64,1}},Void,Void,DiffEqSensitivity.SensitivityAlg{0,true,DataType},Array{Float64,1},DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,Array{Float64,1},LotkaVolterra,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{LotkaVolterra,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Vern9Cache{Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}},Void,Float64},DiffEqBase.CallbackSet{Tuple{},Tuple{DiffEqBase.DiscreteCallback{DiffEqCallbacks.##33#36{Base.RefValue{Float64}},DiffEqCallbacks.##34#37{DiffEqSensitivity.#time_choice#12{StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}},DiffEqSensitivity.#affect!#13{#dg,StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}},Array{Float64,1}},Base.RefValue{Float64}},DiffEqCallbacks.##35#38{DiffEqBase.#INITIALIZE_DEFAULT,Bool,DiffEqSensitivity.#time_choice#12{StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}},Base.RefValue{Float64},DiffEqCallbacks.##34#37{DiffEqSensitivity.#time_choice#12{StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}},DiffEqSensitivity.#affect!#13{#dg,StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}},Array{Float64,1}},Base.RefValue{Float64}}}}}},UniformScaling{Int64}},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{DiffEqSensitivity.ODEAdjointSensitvityFunction{LotkaVolterra,DiffEqDiffTools.UJacobianWrapper{LotkaVolterra,Float64,Array{Float64,1}},DiffEqDiffTools.UJacobianWrapper{#dg,Float64,Array{Float64,1}},Void,Void,DiffEqSensitivity.SensitivityAlg{0,true,DataType},Array{Float64,1},DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,Array{Float64,1},LotkaVolterra,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{LotkaVolterra,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Vern9Cache{Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}},Void,Float64},Array{RowVector{Float64,Array{Float64,1}},1},Array{Float64,1},Array{Array{Array{Float64,2},1},1},OrdinaryDiffEq.Vern9Cache{RowVector{Float64,Array{Float64,1}},Array{Float64,2},Array{Float64,2},Array{Float64,2},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}},LotkaVolterra,DiffEqDiffTools.ParamJacobianWrapper{LotkaVolterra,Float64,Array{Float64,1}},Void,Float64,DiffEqSensitivity.SensitivityAlg{0,true,DataType}}, ::Float64, ::Float64) at ./<missing>:0
 [5] #adjoint_sensitivities#14(::Float64, ::Float64, ::Float64, ::Float64, ::Array{Any,1}, ::Function, ::DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,Array{Float64,1},LotkaVolterra,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{LotkaVolterra,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Vern9Cache{Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}}, ::OrdinaryDiffEq.Vern9, ::#dg, ::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}, ::Void) at /home/vagrant/.julia/v0.6/DiffEqSensitivity/src/adjoint_sensitivity.jl:198
 [6] (::DiffEqSensitivity.#kw##adjoint_sensitivities)(::Array{Any,1}, ::DiffEqSensitivity.#adjoint_sensitivities, ::DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,Array{Float64,1},LotkaVolterra,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{LotkaVolterra,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Vern9Cache{Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}}, ::OrdinaryDiffEq.Vern9, ::Function, ::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}, ::Void) at ./<missing>:0 (repeats 2 times)
 [7] include_from_node1(::String) at ./loading.jl:576
 [8] include(::String) at ./sysimg.jl:14
 [9] macro expansion at /home/vagrant/.julia/v0.6/DiffEqSensitivity/test/runtests.jl:5 [inlined]
 [10] macro expansion at ./test.jl:860 [inlined]
 [11] anonymous at ./<missing>:?
 [12] include_from_node1(::String) at ./loading.jl:576
 [13] include(::String) at ./sysimg.jl:14
 [14] process_options(::Base.JLOptions) at ./client.jl:305
 [15] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/DiffEqSensitivity/test/adjoint.jl, in expression starting on line 20
WARNING: abstol and reltol keywords are now atol and rtol, respectively
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] tols(::Float64, ::Float64, ::Float64, ::Float64) at /home/vagrant/.julia/v0.6/QuadGK/src/QuadGK.jl:166
 [3] #quadgk#13(::Float64, ::Float64, ::Float64, ::Float64, ::Int64, ::Int64, ::Function, ::Function, ::DiffEqSensitivity.AdjointSensitivityIntegrand{DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,Array{Float64,1},LotkaVolterra,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{LotkaVolterra,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Vern9Cache{Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}},DiffEqBase.ODESolution{Float64,3,Array{RowVector{Float64,Array{Float64,1}},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,2},1},1},DiffEqSensitivity.ODEAdjointProblem{RowVector{Float64,Array{Float64,1}},Float64,true,Array{Float64,1},DiffEqSensitivity.ODEAdjointSensitvityFunction{LotkaVolterra,DiffEqDiffTools.UJacobianWrapper{LotkaVolterra,Float64,Array{Float64,1}},DiffEqDiffTools.UJacobianWrapper{#dg,Float64,Array{Float64,1}},Void,Void,DiffEqSensitivity.SensitivityAlg{0,true,DataType},Array{Float64,1},DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,Array{Float64,1},LotkaVolterra,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{LotkaVolterra,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Vern9Cache{Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}},Void,Float64},DiffEqBase.CallbackSet{Tuple{},Tuple{DiffEqBase.DiscreteCallback{DiffEqCallbacks.##33#36{Base.RefValue{Float64}},DiffEqCallbacks.##34#37{DiffEqSensitivity.#time_choice#12{StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}},DiffEqSensitivity.#affect!#13{#dg,StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}},Array{Float64,1}},Base.RefValue{Float64}},DiffEqCallbacks.##35#38{DiffEqBase.#INITIALIZE_DEFAULT,Bool,DiffEqSensitivity.#time_choice#12{StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}},Base.RefValue{Float64},DiffEqCallbacks.##34#37{DiffEqSensitivity.#time_choice#12{StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}},DiffEqSensitivity.#affect!#13{#dg,StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}},Array{Float64,1}},Base.RefValue{Float64}}}}}},UniformScaling{Int64}},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{DiffEqSensitivity.ODEAdjointSensitvityFunction{LotkaVolterra,DiffEqDiffTools.UJacobianWrapper{LotkaVolterra,Float64,Array{Float64,1}},DiffEqDiffTools.UJacobianWrapper{#dg,Float64,Array{Float64,1}},Void,Void,DiffEqSensitivity.SensitivityAlg{0,true,DataType},Array{Float64,1},DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,Array{Float64,1},LotkaVolterra,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{LotkaVolterra,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Vern9Cache{Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}},Void,Float64},Array{RowVector{Float64,Array{Float64,1}},1},Array{Float64,1},Array{Array{Array{Float64,2},1},1},OrdinaryDiffEq.Vern9Cache{RowVector{Float64,Array{Float64,1}},Array{Float64,2},Array{Float64,2},Array{Float64,2},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}},LotkaVolterra,DiffEqDiffTools.ParamJacobianWrapper{LotkaVolterra,Float64,Array{Float64,1}},Void,Float64,DiffEqSensitivity.SensitivityAlg{0,true,DataType}}, ::Float64, ::Float64) at /home/vagrant/.julia/v0.6/QuadGK/src/QuadGK.jl:176
 [4] (::Base.#kw##quadgk)(::Array{Any,1}, ::Base.#quadgk, ::DiffEqSensitivity.AdjointSensitivityIntegrand{DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,Array{Float64,1},LotkaVolterra,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{LotkaVolterra,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Vern9Cache{Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}},DiffEqBase.ODESolution{Float64,3,Array{RowVector{Float64,Array{Float64,1}},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,2},1},1},DiffEqSensitivity.ODEAdjointProblem{RowVector{Float64,Array{Float64,1}},Float64,true,Array{Float64,1},DiffEqSensitivity.ODEAdjointSensitvityFunction{LotkaVolterra,DiffEqDiffTools.UJacobianWrapper{LotkaVolterra,Float64,Array{Float64,1}},DiffEqDiffTools.UJacobianWrapper{#dg,Float64,Array{Float64,1}},Void,Void,DiffEqSensitivity.SensitivityAlg{0,true,DataType},Array{Float64,1},DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,Array{Float64,1},LotkaVolterra,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{LotkaVolterra,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Vern9Cache{Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}},Void,Float64},DiffEqBase.CallbackSet{Tuple{},Tuple{DiffEqBase.DiscreteCallback{DiffEqCallbacks.##33#36{Base.RefValue{Float64}},DiffEqCallbacks.##34#37{DiffEqSensitivity.#time_choice#12{StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}},DiffEqSensitivity.#affect!#13{#dg,StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}},Array{Float64,1}},Base.RefValue{Float64}},DiffEqCallbacks.##35#38{DiffEqBase.#INITIALIZE_DEFAULT,Bool,DiffEqSensitivity.#time_choice#12{StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}},Base.RefValue{Float64},DiffEqCallbacks.##34#37{DiffEqSensitivity.#time_choice#12{StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}},DiffEqSensitivity.#affect!#13{#dg,StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}},Array{Float64,1}},Base.RefValue{Float64}}}}}},UniformScaling{Int64}},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{DiffEqSensitivity.ODEAdjointSensitvityFunction{LotkaVolterra,DiffEqDiffTools.UJacobianWrapper{LotkaVolterra,Float64,Array{Float64,1}},DiffEqDiffTools.UJacobianWrapper{#dg,Float64,Array{Float64,1}},Void,Void,DiffEqSensitivity.SensitivityAlg{0,true,DataType},Array{Float64,1},DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,Array{Float64,1},LotkaVolterra,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{LotkaVolterra,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Vern9Cache{Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}},Void,Float64},Array{RowVector{Float64,Array{Float64,1}},1},Array{Float64,1},Array{Array{Array{Float64,2},1},1},OrdinaryDiffEq.Vern9Cache{RowVector{Float64,Array{Float64,1}},Array{Float64,2},Array{Float64,2},Array{Float64,2},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}},LotkaVolterra,DiffEqDiffTools.ParamJacobianWrapper{LotkaVolterra,Float64,Array{Float64,1}},Void,Float64,DiffEqSensitivity.SensitivityAlg{0,true,DataType}}, ::Float64, ::Float64) at ./<missing>:0
 [5] #adjoint_sensitivities#14(::Float64, ::Float64, ::Float64, ::Float64, ::Array{Any,1}, ::Function, ::DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,Array{Float64,1},LotkaVolterra,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{LotkaVolterra,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Vern9Cache{Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}}, ::OrdinaryDiffEq.Vern9, ::#dg, ::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}, ::Void) at /home/vagrant/.julia/v0.6/DiffEqSensitivity/src/adjoint_sensitivity.jl:198
 [6] (::DiffEqSensitivity.#kw##adjoint_sensitivities)(::Array{Any,1}, ::DiffEqSensitivity.#adjoint_sensitivities, ::DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,Array{Float64,1},LotkaVolterra,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{LotkaVolterra,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Vern9Cache{Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}}, ::OrdinaryDiffEq.Vern9, ::Function, ::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}, ::Void) at ./<missing>:0 (repeats 2 times)
 [7] include_from_node1(::String) at ./loading.jl:576
 [8] include(::String) at ./sysimg.jl:14
 [9] macro expansion at /home/vagrant/.julia/v0.6/DiffEqSensitivity/test/runtests.jl:5 [inlined]
 [10] macro expansion at ./test.jl:860 [inlined]
 [11] anonymous at ./<missing>:?
 [12] include_from_node1(::String) at ./loading.jl:576
 [13] include(::String) at ./sysimg.jl:14
 [14] process_options(::Base.JLOptions) at ./client.jl:305
 [15] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/DiffEqSensitivity/test/adjoint.jl, in expression starting on line 20
WARNING: abstol and reltol keywords are now atol and rtol, respectively
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] tols(::Float64, ::Float64, ::Float64, ::Float64) at /home/vagrant/.julia/v0.6/QuadGK/src/QuadGK.jl:166
 [3] #quadgk#13(::Float64, ::Float64, ::Float64, ::Float64, ::Int64, ::Int64, ::Function, ::Function, ::DiffEqSensitivity.AdjointSensitivityIntegrand{DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,Array{Float64,1},LotkaVolterra,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{LotkaVolterra,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Vern9Cache{Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}},DiffEqBase.ODESolution{Float64,3,Array{RowVector{Float64,Array{Float64,1}},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,2},1},1},DiffEqSensitivity.ODEAdjointProblem{RowVector{Float64,Array{Float64,1}},Float64,true,Array{Float64,1},DiffEqSensitivity.ODEAdjointSensitvityFunction{LotkaVolterra,DiffEqDiffTools.UJacobianWrapper{LotkaVolterra,Float64,Array{Float64,1}},DiffEqDiffTools.UJacobianWrapper{#dg,Float64,Array{Float64,1}},Void,Void,DiffEqSensitivity.SensitivityAlg{0,true,DataType},Array{Float64,1},DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,Array{Float64,1},LotkaVolterra,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{LotkaVolterra,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Vern9Cache{Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}},Void,Float64},DiffEqBase.CallbackSet{Tuple{},Tuple{DiffEqBase.DiscreteCallback{DiffEqCallbacks.##33#36{Base.RefValue{Float64}},DiffEqCallbacks.##34#37{DiffEqSensitivity.#time_choice#12{StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}},DiffEqSensitivity.#affect!#13{#dg,StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}},Array{Float64,1}},Base.RefValue{Float64}},DiffEqCallbacks.##35#38{DiffEqBase.#INITIALIZE_DEFAULT,Bool,DiffEqSensitivity.#time_choice#12{StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}},Base.RefValue{Float64},DiffEqCallbacks.##34#37{DiffEqSensitivity.#time_choice#12{StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}},DiffEqSensitivity.#affect!#13{#dg,StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}},Array{Float64,1}},Base.RefValue{Float64}}}}}},UniformScaling{Int64}},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{DiffEqSensitivity.ODEAdjointSensitvityFunction{LotkaVolterra,DiffEqDiffTools.UJacobianWrapper{LotkaVolterra,Float64,Array{Float64,1}},DiffEqDiffTools.UJacobianWrapper{#dg,Float64,Array{Float64,1}},Void,Void,DiffEqSensitivity.SensitivityAlg{0,true,DataType},Array{Float64,1},DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,Array{Float64,1},LotkaVolterra,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{LotkaVolterra,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Vern9Cache{Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}},Void,Float64},Array{RowVector{Float64,Array{Float64,1}},1},Array{Float64,1},Array{Array{Array{Float64,2},1},1},OrdinaryDiffEq.Vern9Cache{RowVector{Float64,Array{Float64,1}},Array{Float64,2},Array{Float64,2},Array{Float64,2},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}},LotkaVolterra,DiffEqDiffTools.ParamJacobianWrapper{LotkaVolterra,Float64,Array{Float64,1}},Void,Float64,DiffEqSensitivity.SensitivityAlg{0,true,DataType}}, ::Float64, ::Float64) at /home/vagrant/.julia/v0.6/QuadGK/src/QuadGK.jl:176
 [4] (::Base.#kw##quadgk)(::Array{Any,1}, ::Base.#quadgk, ::DiffEqSensitivity.AdjointSensitivityIntegrand{DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,Array{Float64,1},LotkaVolterra,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{LotkaVolterra,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Vern9Cache{Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}},DiffEqBase.ODESolution{Float64,3,Array{RowVector{Float64,Array{Float64,1}},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,2},1},1},DiffEqSensitivity.ODEAdjointProblem{RowVector{Float64,Array{Float64,1}},Float64,true,Array{Float64,1},DiffEqSensitivity.ODEAdjointSensitvityFunction{LotkaVolterra,DiffEqDiffTools.UJacobianWrapper{LotkaVolterra,Float64,Array{Float64,1}},DiffEqDiffTools.UJacobianWrapper{#dg,Float64,Array{Float64,1}},Void,Void,DiffEqSensitivity.SensitivityAlg{0,true,DataType},Array{Float64,1},DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,Array{Float64,1},LotkaVolterra,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{LotkaVolterra,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Vern9Cache{Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}},Void,Float64},DiffEqBase.CallbackSet{Tuple{},Tuple{DiffEqBase.DiscreteCallback{DiffEqCallbacks.##33#36{Base.RefValue{Float64}},DiffEqCallbacks.##34#37{DiffEqSensitivity.#time_choice#12{StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}},DiffEqSensitivity.#affect!#13{#dg,StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}},Array{Float64,1}},Base.RefValue{Float64}},DiffEqCallbacks.##35#38{DiffEqBase.#INITIALIZE_DEFAULT,Bool,DiffEqSensitivity.#time_choice#12{StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}},Base.RefValue{Float64},DiffEqCallbacks.##34#37{DiffEqSensitivity.#time_choice#12{StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}},DiffEqSensitivity.#affect!#13{#dg,StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}},Array{Float64,1}},Base.RefValue{Float64}}}}}},UniformScaling{Int64}},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{DiffEqSensitivity.ODEAdjointSensitvityFunction{LotkaVolterra,DiffEqDiffTools.UJacobianWrapper{LotkaVolterra,Float64,Array{Float64,1}},DiffEqDiffTools.UJacobianWrapper{#dg,Float64,Array{Float64,1}},Void,Void,DiffEqSensitivity.SensitivityAlg{0,true,DataType},Array{Float64,1},DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,Array{Float64,1},LotkaVolterra,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{LotkaVolterra,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Vern9Cache{Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}},Void,Float64},Array{RowVector{Float64,Array{Float64,1}},1},Array{Float64,1},Array{Array{Array{Float64,2},1},1},OrdinaryDiffEq.Vern9Cache{RowVector{Float64,Array{Float64,1}},Array{Float64,2},Array{Float64,2},Array{Float64,2},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}},LotkaVolterra,DiffEqDiffTools.ParamJacobianWrapper{LotkaVolterra,Float64,Array{Float64,1}},Void,Float64,DiffEqSensitivity.SensitivityAlg{0,true,DataType}}, ::Float64, ::Float64) at ./<missing>:0
 [5] #adjoint_sensitivities#14(::Float64, ::Float64, ::Float64, ::Float64, ::Array{Any,1}, ::Function, ::DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,Array{Float64,1},LotkaVolterra,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{LotkaVolterra,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Vern9Cache{Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}}, ::OrdinaryDiffEq.Vern9, ::#dg, ::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}, ::Void) at /home/vagrant/.julia/v0.6/DiffEqSensitivity/src/adjoint_sensitivity.jl:198
 [6] (::DiffEqSensitivity.#kw##adjoint_sensitivities)(::Array{Any,1}, ::DiffEqSensitivity.#adjoint_sensitivities, ::DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,Array{Float64,1},LotkaVolterra,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{LotkaVolterra,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Vern9Cache{Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}}, ::OrdinaryDiffEq.Vern9, ::Function, ::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}, ::Void) at ./<missing>:0 (repeats 2 times)
 [7] include_from_node1(::String) at ./loading.jl:576
 [8] include(::String) at ./sysimg.jl:14
 [9] macro expansion at /home/vagrant/.julia/v0.6/DiffEqSensitivity/test/runtests.jl:5 [inlined]
 [10] macro expansion at ./test.jl:860 [inlined]
 [11] anonymous at ./<missing>:?
 [12] include_from_node1(::String) at ./loading.jl:576
 [13] include(::String) at ./sysimg.jl:14
 [14] process_options(::Base.JLOptions) at ./client.jl:305
 [15] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/DiffEqSensitivity/test/adjoint.jl, in expression starting on line 20
WARNING: abstol and reltol keywords are now atol and rtol, respectively
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] tols(::Float64, ::Float64, ::Float64, ::Float64) at /home/vagrant/.julia/v0.6/QuadGK/src/QuadGK.jl:166
 [3] #quadgk#13(::Float64, ::Float64, ::Float64, ::Float64, ::Int64, ::Int64, ::Function, ::Function, ::DiffEqSensitivity.AdjointSensitivityIntegrand{DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,Array{Float64,1},LotkaVolterra,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{LotkaVolterra,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Vern9Cache{Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}},DiffEqBase.ODESolution{Float64,3,Array{RowVector{Float64,Array{Float64,1}},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,2},1},1},DiffEqSensitivity.ODEAdjointProblem{RowVector{Float64,Array{Float64,1}},Float64,true,Array{Float64,1},DiffEqSensitivity.ODEAdjointSensitvityFunction{LotkaVolterra,DiffEqDiffTools.UJacobianWrapper{LotkaVolterra,Float64,Array{Float64,1}},DiffEqDiffTools.UJacobianWrapper{#dg,Float64,Array{Float64,1}},Void,Void,DiffEqSensitivity.SensitivityAlg{0,true,DataType},Array{Float64,1},DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,Array{Float64,1},LotkaVolterra,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{LotkaVolterra,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Vern9Cache{Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}},Void,Float64},DiffEqBase.CallbackSet{Tuple{},Tuple{DiffEqBase.DiscreteCallback{DiffEqCallbacks.##33#36{Base.RefValue{Float64}},DiffEqCallbacks.##34#37{DiffEqSensitivity.#time_choice#12{StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}},DiffEqSensitivity.#affect!#13{#dg,StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}},Array{Float64,1}},Base.RefValue{Float64}},DiffEqCallbacks.##35#38{DiffEqBase.#INITIALIZE_DEFAULT,Bool,DiffEqSensitivity.#time_choice#12{StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}},Base.RefValue{Float64},DiffEqCallbacks.##34#37{DiffEqSensitivity.#time_choice#12{StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}},DiffEqSensitivity.#affect!#13{#dg,StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}},Array{Float64,1}},Base.RefValue{Float64}}}}}},UniformScaling{Int64}},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{DiffEqSensitivity.ODEAdjointSensitvityFunction{LotkaVolterra,DiffEqDiffTools.UJacobianWrapper{LotkaVolterra,Float64,Array{Float64,1}},DiffEqDiffTools.UJacobianWrapper{#dg,Float64,Array{Float64,1}},Void,Void,DiffEqSensitivity.SensitivityAlg{0,true,DataType},Array{Float64,1},DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,Array{Float64,1},LotkaVolterra,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{LotkaVolterra,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Vern9Cache{Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}},Void,Float64},Array{RowVector{Float64,Array{Float64,1}},1},Array{Float64,1},Array{Array{Array{Float64,2},1},1},OrdinaryDiffEq.Vern9Cache{RowVector{Float64,Array{Float64,1}},Array{Float64,2},Array{Float64,2},Array{Float64,2},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}},LotkaVolterra,DiffEqDiffTools.ParamJacobianWrapper{LotkaVolterra,Float64,Array{Float64,1}},Void,Float64,DiffEqSensitivity.SensitivityAlg{0,true,DataType}}, ::Float64, ::Float64) at /home/vagrant/.julia/v0.6/QuadGK/src/QuadGK.jl:176
 [4] (::Base.#kw##quadgk)(::Array{Any,1}, ::Base.#quadgk, ::DiffEqSensitivity.AdjointSensitivityIntegrand{DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,Array{Float64,1},LotkaVolterra,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{LotkaVolterra,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Vern9Cache{Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}},DiffEqBase.ODESolution{Float64,3,Array{RowVector{Float64,Array{Float64,1}},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,2},1},1},DiffEqSensitivity.ODEAdjointProblem{RowVector{Float64,Array{Float64,1}},Float64,true,Array{Float64,1},DiffEqSensitivity.ODEAdjointSensitvityFunction{LotkaVolterra,DiffEqDiffTools.UJacobianWrapper{LotkaVolterra,Float64,Array{Float64,1}},DiffEqDiffTools.UJacobianWrapper{#dg,Float64,Array{Float64,1}},Void,Void,DiffEqSensitivity.SensitivityAlg{0,true,DataType},Array{Float64,1},DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,Array{Float64,1},LotkaVolterra,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{LotkaVolterra,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Vern9Cache{Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}},Void,Float64},DiffEqBase.CallbackSet{Tuple{},Tuple{DiffEqBase.DiscreteCallback{DiffEqCallbacks.##33#36{Base.RefValue{Float64}},DiffEqCallbacks.##34#37{DiffEqSensitivity.#time_choice#12{StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}},DiffEqSensitivity.#affect!#13{#dg,StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}},Array{Float64,1}},Base.RefValue{Float64}},DiffEqCallbacks.##35#38{DiffEqBase.#INITIALIZE_DEFAULT,Bool,DiffEqSensitivity.#time_choice#12{StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}},Base.RefValue{Float64},DiffEqCallbacks.##34#37{DiffEqSensitivity.#time_choice#12{StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}},DiffEqSensitivity.#affect!#13{#dg,StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}},Array{Float64,1}},Base.RefValue{Float64}}}}}},UniformScaling{Int64}},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{DiffEqSensitivity.ODEAdjointSensitvityFunction{LotkaVolterra,DiffEqDiffTools.UJacobianWrapper{LotkaVolterra,Float64,Array{Float64,1}},DiffEqDiffTools.UJacobianWrapper{#dg,Float64,Array{Float64,1}},Void,Void,DiffEqSensitivity.SensitivityAlg{0,true,DataType},Array{Float64,1},DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,Array{Float64,1},LotkaVolterra,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{LotkaVolterra,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Vern9Cache{Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}},Void,Float64},Array{RowVector{Float64,Array{Float64,1}},1},Array{Float64,1},Array{Array{Array{Float64,2},1},1},OrdinaryDiffEq.Vern9Cache{RowVector{Float64,Array{Float64,1}},Array{Float64,2},Array{Float64,2},Array{Float64,2},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}},LotkaVolterra,DiffEqDiffTools.ParamJacobianWrapper{LotkaVolterra,Float64,Array{Float64,1}},Void,Float64,DiffEqSensitivity.SensitivityAlg{0,true,DataType}}, ::Float64, ::Float64) at ./<missing>:0
 [5] include_from_node1(::String) at ./loading.jl:576
 [6] include(::String) at ./sysimg.jl:14
 [7] macro expansion at /home/vagrant/.julia/v0.6/DiffEqSensitivity/test/runtests.jl:5 [inlined]
 [8] macro expansion at ./test.jl:860 [inlined]
 [9] anonymous at ./<missing>:?
 [10] include_from_node1(::String) at ./loading.jl:576
 [11] include(::String) at ./sysimg.jl:14
 [12] process_options(::Base.JLOptions) at ./client.jl:305
 [13] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/DiffEqSensitivity/test/adjoint.jl, in expression starting on line 26
WARNING: abstol and reltol keywords are now atol and rtol, respectively
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] tols(::Float64, ::Float64, ::Float64, ::Float64) at /home/vagrant/.julia/v0.6/QuadGK/src/QuadGK.jl:166
 [3] #quadgk#13(::Float64, ::Float64, ::Float64, ::Float64, ::Int64, ::Int64, ::Function, ::Function, ::DiffEqSensitivity.AdjointSensitivityIntegrand{DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,Array{Float64,1},LotkaVolterra,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{LotkaVolterra,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Vern9Cache{Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}},DiffEqBase.ODESolution{Float64,3,Array{RowVector{Float64,Array{Float64,1}},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,2},1},1},DiffEqSensitivity.ODEAdjointProblem{RowVector{Float64,Array{Float64,1}},Float64,true,Array{Float64,1},DiffEqSensitivity.ODEAdjointSensitvityFunction{LotkaVolterra,DiffEqDiffTools.UJacobianWrapper{LotkaVolterra,Float64,Array{Float64,1}},DiffEqDiffTools.UJacobianWrapper{#g,Float64,Array{Float64,1}},Void,Void,DiffEqSensitivity.SensitivityAlg{0,true,DataType},Array{Float64,1},DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,Array{Float64,1},LotkaVolterra,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{LotkaVolterra,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Vern9Cache{Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}},#dg,Float64},DiffEqBase.CallbackSet{Tuple{},Tuple{}},UniformScaling{Int64}},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{DiffEqSensitivity.ODEAdjointSensitvityFunction{LotkaVolterra,DiffEqDiffTools.UJacobianWrapper{LotkaVolterra,Float64,Array{Float64,1}},DiffEqDiffTools.UJacobianWrapper{#g,Float64,Array{Float64,1}},Void,Void,DiffEqSensitivity.SensitivityAlg{0,true,DataType},Array{Float64,1},DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,Array{Float64,1},LotkaVolterra,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{LotkaVolterra,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Vern9Cache{Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}},#dg,Float64},Array{RowVector{Float64,Array{Float64,1}},1},Array{Float64,1},Array{Array{Array{Float64,2},1},1},OrdinaryDiffEq.Vern9Cache{RowVector{Float64,Array{Float64,1}},Array{Float64,2},Array{Float64,2},Array{Float64,2},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}},LotkaVolterra,DiffEqDiffTools.ParamJacobianWrapper{LotkaVolterra,Float64,Array{Float64,1}},Void,Float64,DiffEqSensitivity.SensitivityAlg{0,true,DataType}}, ::Float64, ::Float64) at /home/vagrant/.julia/v0.6/QuadGK/src/QuadGK.jl:176
 [4] (::Base.#kw##quadgk)(::Array{Any,1}, ::Base.#quadgk, ::DiffEqSensitivity.AdjointSensitivityIntegrand{DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,Array{Float64,1},LotkaVolterra,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{LotkaVolterra,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Vern9Cache{Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}},DiffEqBase.ODESolution{Float64,3,Array{RowVector{Float64,Array{Float64,1}},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,2},1},1},DiffEqSensitivity.ODEAdjointProblem{RowVector{Float64,Array{Float64,1}},Float64,true,Array{Float64,1},DiffEqSensitivity.ODEAdjointSensitvityFunction{LotkaVolterra,DiffEqDiffTools.UJacobianWrapper{LotkaVolterra,Float64,Array{Float64,1}},DiffEqDiffTools.UJacobianWrapper{#g,Float64,Array{Float64,1}},Void,Void,DiffEqSensitivity.SensitivityAlg{0,true,DataType},Array{Float64,1},DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,Array{Float64,1},LotkaVolterra,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{LotkaVolterra,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Vern9Cache{Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}},#dg,Float64},DiffEqBase.CallbackSet{Tuple{},Tuple{}},UniformScaling{Int64}},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{DiffEqSensitivity.ODEAdjointSensitvityFunction{LotkaVolterra,DiffEqDiffTools.UJacobianWrapper{LotkaVolterra,Float64,Array{Float64,1}},DiffEqDiffTools.UJacobianWrapper{#g,Float64,Array{Float64,1}},Void,Void,DiffEqSensitivity.SensitivityAlg{0,true,DataType},Array{Float64,1},DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,Array{Float64,1},LotkaVolterra,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{LotkaVolterra,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Vern9Cache{Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}},#dg,Float64},Array{RowVector{Float64,Array{Float64,1}},1},Array{Float64,1},Array{Array{Array{Float64,2},1},1},OrdinaryDiffEq.Vern9Cache{RowVector{Float64,Array{Float64,1}},Array{Float64,2},Array{Float64,2},Array{Float64,2},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}},LotkaVolterra,DiffEqDiffTools.ParamJacobianWrapper{LotkaVolterra,Float64,Array{Float64,1}},Void,Float64,DiffEqSensitivity.SensitivityAlg{0,true,DataType}}, ::Float64, ::Float64) at ./<missing>:0
 [5] include_from_node1(::String) at ./loading.jl:576
 [6] include(::String) at ./sysimg.jl:14
 [7] macro expansion at /home/vagrant/.julia/v0.6/DiffEqSensitivity/test/runtests.jl:5 [inlined]
 [8] macro expansion at ./test.jl:860 [inlined]
 [9] anonymous at ./<missing>:?
 [10] include_from_node1(::String) at ./loading.jl:576
 [11] include(::String) at ./sysimg.jl:14
 [12] process_options(::Base.JLOptions) at ./client.jl:305
 [13] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/DiffEqSensitivity/test/adjoint.jl, in expression starting on line 56
WARNING: abstol and reltol keywords are now atol and rtol, respectively
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] tols(::Float64, ::Float64, ::Float64, ::Float64) at /home/vagrant/.julia/v0.6/QuadGK/src/QuadGK.jl:166
 [3] #quadgk#13(::Float64, ::Float64, ::Float64, ::Float64, ::Int64, ::Int64, ::Function, ::Function, ::DiffEqSensitivity.AdjointSensitivityIntegrand{DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,Array{Float64,1},LotkaVolterra,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{LotkaVolterra,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Vern9Cache{Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}},DiffEqBase.ODESolution{Float64,3,Array{RowVector{Float64,Array{Float64,1}},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,2},1},1},DiffEqSensitivity.ODEAdjointProblem{RowVector{Float64,Array{Float64,1}},Float64,true,Array{Float64,1},DiffEqSensitivity.ODEAdjointSensitvityFunction{LotkaVolterra,DiffEqDiffTools.UJacobianWrapper{LotkaVolterra,Float64,Array{Float64,1}},DiffEqDiffTools.UJacobianWrapper{#g,Float64,Array{Float64,1}},Void,Void,DiffEqSensitivity.SensitivityAlg{0,true,DataType},Array{Float64,1},DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,Array{Float64,1},LotkaVolterra,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{LotkaVolterra,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Vern9Cache{Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}},#dg,Float64},DiffEqBase.CallbackSet{Tuple{},Tuple{}},UniformScaling{Int64}},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{DiffEqSensitivity.ODEAdjointSensitvityFunction{LotkaVolterra,DiffEqDiffTools.UJacobianWrapper{LotkaVolterra,Float64,Array{Float64,1}},DiffEqDiffTools.UJacobianWrapper{#g,Float64,Array{Float64,1}},Void,Void,DiffEqSensitivity.SensitivityAlg{0,true,DataType},Array{Float64,1},DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,Array{Float64,1},LotkaVolterra,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{LotkaVolterra,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Vern9Cache{Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}},#dg,Float64},Array{RowVector{Float64,Array{Float64,1}},1},Array{Float64,1},Array{Array{Array{Float64,2},1},1},OrdinaryDiffEq.Vern9Cache{RowVector{Float64,Array{Float64,1}},Array{Float64,2},Array{Float64,2},Array{Float64,2},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}},LotkaVolterra,DiffEqDiffTools.ParamJacobianWrapper{LotkaVolterra,Float64,Array{Float64,1}},Void,Float64,DiffEqSensitivity.SensitivityAlg{0,true,DataType}}, ::Float64, ::Float64) at /home/vagrant/.julia/v0.6/QuadGK/src/QuadGK.jl:176
 [4] (::Base.#kw##quadgk)(::Array{Any,1}, ::Base.#quadgk, ::DiffEqSensitivity.AdjointSensitivityIntegrand{DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,Array{Float64,1},LotkaVolterra,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{LotkaVolterra,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Vern9Cache{Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}},DiffEqBase.ODESolution{Float64,3,Array{RowVector{Float64,Array{Float64,1}},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,2},1},1},DiffEqSensitivity.ODEAdjointProblem{RowVector{Float64,Array{Float64,1}},Float64,true,Array{Float64,1},DiffEqSensitivity.ODEAdjointSensitvityFunction{LotkaVolterra,DiffEqDiffTools.UJacobianWrapper{LotkaVolterra,Float64,Array{Float64,1}},DiffEqDiffTools.UJacobianWrapper{#g,Float64,Array{Float64,1}},Void,Void,DiffEqSensitivity.SensitivityAlg{0,true,DataType},Array{Float64,1},DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,Array{Float64,1},LotkaVolterra,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{LotkaVolterra,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Vern9Cache{Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}},#dg,Float64},DiffEqBase.CallbackSet{Tuple{},Tuple{}},UniformScaling{Int64}},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{DiffEqSensitivity.ODEAdjointSensitvityFunction{LotkaVolterra,DiffEqDiffTools.UJacobianWrapper{LotkaVolterra,Float64,Array{Float64,1}},DiffEqDiffTools.UJacobianWrapper{#g,Float64,Array{Float64,1}},Void,Void,DiffEqSensitivity.SensitivityAlg{0,true,DataType},Array{Float64,1},DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,Array{Float64,1},LotkaVolterra,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{LotkaVolterra,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Vern9Cache{Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}},#dg,Float64},Array{RowVector{Float64,Array{Float64,1}},1},Array{Float64,1},Array{Array{Array{Float64,2},1},1},OrdinaryDiffEq.Vern9Cache{RowVector{Float64,Array{Float64,1}},Array{Float64,2},Array{Float64,2},Array{Float64,2},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}},LotkaVolterra,DiffEqDiffTools.ParamJacobianWrapper{LotkaVolterra,Float64,Array{Float64,1}},Void,Float64,DiffEqSensitivity.SensitivityAlg{0,true,DataType}}, ::Float64, ::Float64) at ./<missing>:0
 [5] #adjoint_sensitivities#14(::Float64, ::Float64, ::Float64, ::Float64, ::Array{Any,1}, ::Function, ::DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,Array{Float64,1},LotkaVolterra,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{LotkaVolterra,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Vern9Cache{Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}}, ::OrdinaryDiffEq.Vern9, ::#g, ::Void, ::#dg) at /home/vagrant/.julia/v0.6/DiffEqSensitivity/src/adjoint_sensitivity.jl:193
 [6] (::DiffEqSensitivity.#kw##adjoint_sensitivities)(::Array{Any,1}, ::DiffEqSensitivity.#adjoint_sensitivities, ::DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,Array{Float64,1},LotkaVolterra,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{LotkaVolterra,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Vern9Cache{Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}}, ::OrdinaryDiffEq.Vern9, ::Function, ::Void, ::Function) at ./<missing>:0
 [7] include_from_node1(::String) at ./loading.jl:576
 [8] include(::String) at ./sysimg.jl:14
 [9] macro expansion at /home/vagrant/.julia/v0.6/DiffEqSensitivity/test/runtests.jl:5 [inlined]
 [10] macro expansion at ./test.jl:860 [inlined]
 [11] anonymous at ./<missing>:?
 [12] include_from_node1(::String) at ./loading.jl:576
 [13] include(::String) at ./sysimg.jl:14
 [14] process_options(::Base.JLOptions) at ./client.jl:305
 [15] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/DiffEqSensitivity/test/adjoint.jl, in expression starting on line 58
WARNING: abstol and reltol keywords are now atol and rtol, respectively
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] tols(::Float64, ::Float64, ::Float64, ::Float64) at /home/vagrant/.julia/v0.6/QuadGK/src/QuadGK.jl:166
 [3] #quadgk#13(::Float64, ::Float64, ::Float64, ::Float64, ::Int64, ::Int64, ::Function, ::Function, ::##9#11{DiffEqBase.ODESolution{ForwardDiff.Dual{ForwardDiff.Tag{#G,Float64},Float64,3},2,Array{Array{ForwardDiff.Dual{ForwardDiff.Tag{#G,Float64},Float64,3},1},1},Void,Void,Array{ForwardDiff.Dual{ForwardDiff.Tag{#G,Float64},Float64,3},1},Array{Array{Array{ForwardDiff.Dual{ForwardDiff.Tag{#G,Float64},Float64,3},1},1},1},DiffEqBase.ODEProblem{Array{ForwardDiff.Dual{ForwardDiff.Tag{#G,Float64},Float64,3},1},ForwardDiff.Dual{ForwardDiff.Tag{#G,Float64},Float64,3},true,Array{ForwardDiff.Dual{ForwardDiff.Tag{#G,Float64},Float64,3},1},LotkaVolterra,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{LotkaVolterra,Array{Array{ForwardDiff.Dual{ForwardDiff.Tag{#G,Float64},Float64,3},1},1},Array{ForwardDiff.Dual{ForwardDiff.Tag{#G,Float64},Float64,3},1},Array{Array{Array{ForwardDiff.Dual{ForwardDiff.Tag{#G,Float64},Float64,3},1},1},1},OrdinaryDiffEq.Vern9Cache{Array{ForwardDiff.Dual{ForwardDiff.Tag{#G,Float64},Float64,3},1},Array{ForwardDiff.Dual{ForwardDiff.Tag{#G,Float64},Float64,3},1},Array{ForwardDiff.Dual{ForwardDiff.Tag{#G,Float64},Float64,3},1},Array{ForwardDiff.Dual{ForwardDiff.Tag{#G,Float64},Float64,3},1},OrdinaryDiffEq.Vern9ConstantCache{ForwardDiff.Dual{ForwardDiff.Tag{#G,Float64},Float64,3},ForwardDiff.Dual{ForwardDiff.Tag{#G,Float64},Float64,3}}}}}}, ::Float64, ::Float64) at /home/vagrant/.julia/v0.6/QuadGK/src/QuadGK.jl:176
 [4] (::Base.#kw##quadgk)(::Array{Any,1}, ::Base.#quadgk, ::Function, ::Float64, ::Float64) at ./<missing>:0
 [5] G(::Array{ForwardDiff.Dual{ForwardDiff.Tag{#G,Float64},Float64,3},1}) at /home/vagrant/.julia/v0.6/DiffEqSensitivity/test/adjoint.jl:66
 [6] vector_mode_gradient at /home/vagrant/.julia/v0.6/ForwardDiff/src/gradient.jl:96 [inlined]
 [7] gradient(::Function, ::Array{Float64,1}, ::ForwardDiff.GradientConfig{ForwardDiff.Tag{#G,Float64},Float64,3,Array{ForwardDiff.Dual{ForwardDiff.Tag{#G,Float64},Float64,3},1}}, ::Val{true}) at /home/vagrant/.julia/v0.6/ForwardDiff/src/gradient.jl:17
 [8] gradient(::Function, ::Array{Float64,1}, ::ForwardDiff.GradientConfig{ForwardDiff.Tag{#G,Float64},Float64,3,Array{ForwardDiff.Dual{ForwardDiff.Tag{#G,Float64},Float64,3},1}}) at /home/vagrant/.julia/v0.6/ForwardDiff/src/gradient.jl:15 (repeats 2 times)
 [9] include_from_node1(::String) at ./loading.jl:576
 [10] include(::String) at ./sysimg.jl:14
 [11] macro expansion at /home/vagrant/.julia/v0.6/DiffEqSensitivity/test/runtests.jl:5 [inlined]
 [12] macro expansion at ./test.jl:860 [inlined]
 [13] anonymous at ./<missing>:?
 [14] include_from_node1(::String) at ./loading.jl:576
 [15] include(::String) at ./sysimg.jl:14
 [16] process_options(::Base.JLOptions) at ./client.jl:305
 [17] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/DiffEqSensitivity/test/adjoint.jl, in expression starting on line 69
WARNING: abstol and reltol keywords are now atol and rtol, respectively
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] tols(::Float64, ::Float64, ::Float64, ::Float64) at /home/vagrant/.julia/v0.6/QuadGK/src/QuadGK.jl:166
 [3] #quadgk#13(::Float64, ::Float64, ::Float64, ::Float64, ::Int64, ::Int64, ::Function, ::Function, ::##9#11{DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,Array{Float64,1},LotkaVolterra,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{LotkaVolterra,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Vern9Cache{Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}}}, ::Float64, ::Float64) at /home/vagrant/.julia/v0.6/QuadGK/src/QuadGK.jl:176
 [4] (::Base.#kw##quadgk)(::Array{Any,1}, ::Base.#quadgk, ::Function, ::Float64, ::Float64) at ./<missing>:0
 [5] G(::Array{Float64,1}) at /home/vagrant/.julia/v0.6/DiffEqSensitivity/test/adjoint.jl:66
 [6] finite_difference!(::#G, ::Array{Float64,1}, ::Array{Float64,1}, ::Symbol) at /home/vagrant/.julia/v0.6/Calculus/src/finite_difference.jl:126
 [7] finite_difference at /home/vagrant/.julia/v0.6/Calculus/src/finite_difference.jl:145 [inlined]
 [8] gradient at /home/vagrant/.julia/v0.6/Calculus/src/derivative.jl:13 [inlined] (repeats 2 times)
 [9] include_from_node1(::String) at ./loading.jl:576
 [10] include(::String) at ./sysimg.jl:14
 [11] macro expansion at /home/vagrant/.julia/v0.6/DiffEqSensitivity/test/runtests.jl:5 [inlined]
 [12] macro expansion at ./test.jl:860 [inlined]
 [13] anonymous at ./<missing>:?
 [14] include_from_node1(::String) at ./loading.jl:576
 [15] include(::String) at ./sysimg.jl:14
 [16] process_options(::Base.JLOptions) at ./client.jl:305
 [17] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/DiffEqSensitivity/test/adjoint.jl, in expression starting on line 70
WARNING: abstol and reltol keywords are now atol and rtol, respectively
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] tols(::Float64, ::Float64, ::Float64, ::Float64) at /home/vagrant/.julia/v0.6/QuadGK/src/QuadGK.jl:166
 [3] #quadgk#13(::Float64, ::Float64, ::Float64, ::Float64, ::Int64, ::Int64, ::Function, ::Function, ::##9#11{DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,Array{Float64,1},LotkaVolterra,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{LotkaVolterra,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Vern9Cache{Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}}}, ::Float64, ::Float64) at /home/vagrant/.julia/v0.6/QuadGK/src/QuadGK.jl:176
 [4] (::Base.#kw##quadgk)(::Array{Any,1}, ::Base.#quadgk, ::Function, ::Float64, ::Float64) at ./<missing>:0
 [5] G(::Array{Float64,1}) at /home/vagrant/.julia/v0.6/DiffEqSensitivity/test/adjoint.jl:66
 [6] finite_difference!(::#G, ::Array{Float64,1}, ::Array{Float64,1}, ::Symbol) at /home/vagrant/.julia/v0.6/Calculus/src/finite_difference.jl:128
 [7] finite_difference at /home/vagrant/.julia/v0.6/Calculus/src/finite_difference.jl:145 [inlined]
 [8] gradient at /home/vagrant/.julia/v0.6/Calculus/src/derivative.jl:13 [inlined] (repeats 2 times)
 [9] include_from_node1(::String) at ./loading.jl:576
 [10] include(::String) at ./sysimg.jl:14
 [11] macro expansion at /home/vagrant/.julia/v0.6/DiffEqSensitivity/test/runtests.jl:5 [inlined]
 [12] macro expansion at ./test.jl:860 [inlined]
 [13] anonymous at ./<missing>:?
 [14] include_from_node1(::String) at ./loading.jl:576
 [15] include(::String) at ./sysimg.jl:14
 [16] process_options(::Base.JLOptions) at ./client.jl:305
 [17] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/DiffEqSensitivity/test/adjoint.jl, in expression starting on line 70
WARNING: abstol and reltol keywords are now atol and rtol, respectively
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] tols(::Float64, ::Float64, ::Float64, ::Float64) at /home/vagrant/.julia/v0.6/QuadGK/src/QuadGK.jl:166
 [3] #quadgk#13(::Float64, ::Float64, ::Float64, ::Float64, ::Int64, ::Int64, ::Function, ::Function, ::##9#11{DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,Array{Float64,1},LotkaVolterra,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{LotkaVolterra,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Vern9Cache{Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}}}, ::Float64, ::Float64) at /home/vagrant/.julia/v0.6/QuadGK/src/QuadGK.jl:176
 [4] (::Base.#kw##quadgk)(::Array{Any,1}, ::Base.#quadgk, ::Function, ::Float64, ::Float64) at ./<missing>:0
 [5] G(::Array{Float64,1}) at /home/vagrant/.julia/v0.6/DiffEqSensitivity/test/adjoint.jl:66
 [6] finite_difference!(::#G, ::Array{Float64,1}, ::Array{Float64,1}, ::Symbol) at /home/vagrant/.julia/v0.6/Calculus/src/finite_difference.jl:126
 [7] finite_difference at /home/vagrant/.julia/v0.6/Calculus/src/finite_difference.jl:145 [inlined]
 [8] gradient at /home/vagrant/.julia/v0.6/Calculus/src/derivative.jl:13 [inlined] (repeats 2 times)
 [9] include_from_node1(::String) at ./loading.jl:576
 [10] include(::String) at ./sysimg.jl:14
 [11] macro expansion at /home/vagrant/.julia/v0.6/DiffEqSensitivity/test/runtests.jl:5 [inlined]
 [12] macro expansion at ./test.jl:860 [inlined]
 [13] anonymous at ./<missing>:?
 [14] include_from_node1(::String) at ./loading.jl:576
 [15] include(::String) at ./sysimg.jl:14
 [16] process_options(::Base.JLOptions) at ./client.jl:305
 [17] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/DiffEqSensitivity/test/adjoint.jl, in expression starting on line 70
WARNING: abstol and reltol keywords are now atol and rtol, respectively
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] tols(::Float64, ::Float64, ::Float64, ::Float64) at /home/vagrant/.julia/v0.6/QuadGK/src/QuadGK.jl:166
 [3] #quadgk#13(::Float64, ::Float64, ::Float64, ::Float64, ::Int64, ::Int64, ::Function, ::Function, ::##9#11{DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,Array{Float64,1},LotkaVolterra,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{LotkaVolterra,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Vern9Cache{Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}}}, ::Float64, ::Float64) at /home/vagrant/.julia/v0.6/QuadGK/src/QuadGK.jl:176
 [4] (::Base.#kw##quadgk)(::Array{Any,1}, ::Base.#quadgk, ::Function, ::Float64, ::Float64) at ./<missing>:0
 [5] G(::Array{Float64,1}) at /home/vagrant/.julia/v0.6/DiffEqSensitivity/test/adjoint.jl:66
 [6] finite_difference!(::#G, ::Array{Float64,1}, ::Array{Float64,1}, ::Symbol) at /home/vagrant/.julia/v0.6/Calculus/src/finite_difference.jl:128
 [7] finite_difference at /home/vagrant/.julia/v0.6/Calculus/src/finite_difference.jl:145 [inlined]
 [8] gradient at /home/vagrant/.julia/v0.6/Calculus/src/derivative.jl:13 [inlined] (repeats 2 times)
 [9] include_from_node1(::String) at ./loading.jl:576
 [10] include(::String) at ./sysimg.jl:14
 [11] macro expansion at /home/vagrant/.julia/v0.6/DiffEqSensitivity/test/runtests.jl:5 [inlined]
 [12] macro expansion at ./test.jl:860 [inlined]
 [13] anonymous at ./<missing>:?
 [14] include_from_node1(::String) at ./loading.jl:576
 [15] include(::String) at ./sysimg.jl:14
 [16] process_options(::Base.JLOptions) at ./client.jl:305
 [17] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/DiffEqSensitivity/test/adjoint.jl, in expression starting on line 70
WARNING: abstol and reltol keywords are now atol and rtol, respectively
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] tols(::Float64, ::Float64, ::Float64, ::Float64) at /home/vagrant/.julia/v0.6/QuadGK/src/QuadGK.jl:166
 [3] #quadgk#13(::Float64, ::Float64, ::Float64, ::Float64, ::Int64, ::Int64, ::Function, ::Function, ::##9#11{DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,Array{Float64,1},LotkaVolterra,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{LotkaVolterra,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Vern9Cache{Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}}}, ::Float64, ::Float64) at /home/vagrant/.julia/v0.6/QuadGK/src/QuadGK.jl:176
 [4] (::Base.#kw##quadgk)(::Array{Any,1}, ::Base.#quadgk, ::Function, ::Float64, ::Float64) at ./<missing>:0
 [5] G(::Array{Float64,1}) at /home/vagrant/.julia/v0.6/DiffEqSensitivity/test/adjoint.jl:66
 [6] finite_difference!(::#G, ::Array{Float64,1}, ::Array{Float64,1}, ::Symbol) at /home/vagrant/.julia/v0.6/Calculus/src/finite_difference.jl:126
 [7] finite_difference at /home/vagrant/.julia/v0.6/Calculus/src/finite_difference.jl:145 [inlined]
 [8] gradient at /home/vagrant/.julia/v0.6/Calculus/src/derivative.jl:13 [inlined] (repeats 2 times)
 [9] include_from_node1(::String) at ./loading.jl:576
 [10] include(::String) at ./sysimg.jl:14
 [11] macro expansion at /home/vagrant/.julia/v0.6/DiffEqSensitivity/test/runtests.jl:5 [inlined]
 [12] macro expansion at ./test.jl:860 [inlined]
 [13] anonymous at ./<missing>:?
 [14] include_from_node1(::String) at ./loading.jl:576
 [15] include(::String) at ./sysimg.jl:14
 [16] process_options(::Base.JLOptions) at ./client.jl:305
 [17] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/DiffEqSensitivity/test/adjoint.jl, in expression starting on line 70
WARNING: abstol and reltol keywords are now atol and rtol, respectively
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] tols(::Float64, ::Float64, ::Float64, ::Float64) at /home/vagrant/.julia/v0.6/QuadGK/src/QuadGK.jl:166
 [3] #quadgk#13(::Float64, ::Float64, ::Float64, ::Float64, ::Int64, ::Int64, ::Function, ::Function, ::##9#11{DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,Array{Float64,1},LotkaVolterra,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Vern9,OrdinaryDiffEq.InterpolationData{LotkaVolterra,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Vern9Cache{Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.Vern9ConstantCache{Float64,Float64}}}}}, ::Float64, ::Float64) at /home/vagrant/.julia/v0.6/QuadGK/src/QuadGK.jl:176
 [4] (::Base.#kw##quadgk)(::Array{Any,1}, ::Base.#quadgk, ::Function, ::Float64, ::Float64) at ./<missing>:0
 [5] G(::Array{Float64,1}) at /home/vagrant/.julia/v0.6/DiffEqSensitivity/test/adjoint.jl:66
 [6] finite_difference!(::#G, ::Array{Float64,1}, ::Array{Float64,1}, ::Symbol) at /home/vagrant/.julia/v0.6/Calculus/src/finite_difference.jl:128
 [7] finite_difference at /home/vagrant/.julia/v0.6/Calculus/src/finite_difference.jl:145 [inlined]
 [8] gradient at /home/vagrant/.julia/v0.6/Calculus/src/derivative.jl:13 [inlined] (repeats 2 times)
 [9] include_from_node1(::String) at ./loading.jl:576
 [10] include(::String) at ./sysimg.jl:14
 [11] macro expansion at /home/vagrant/.julia/v0.6/DiffEqSensitivity/test/runtests.jl:5 [inlined]
 [12] macro expansion at ./test.jl:860 [inlined]
 [13] anonymous at ./<missing>:?
 [14] include_from_node1(::String) at ./loading.jl:576
 [15] include(::String) at ./sysimg.jl:14
 [16] process_options(::Base.JLOptions) at ./client.jl:305
 [17] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/DiffEqSensitivity/test/adjoint.jl, in expression starting on line 70
Test Summary:       | Pass  Total
Adjoint Sensitivity |    6      6
Test Summary: | Pass  Total
Morris Method |    6      6
Test Summary: | Pass  Total
Sobol Method  |    2      2
INFO: DiffEqSensitivity tests passed
INFO: Removing Calculus v0.4.0
INFO: Removing ParameterizedFunctions v3.1.0
INFO: Removing SymEngine v0.4.1

>>> End of log
