>>> 'Pkg.add("MolecularPDB")' log
INFO: Cloning cache of MolecularPDB from git://github.com/UMOL/MolecularPDB.jl.git
INFO: Installing MolecularDataType v0.0.2
INFO: Installing MolecularPDB v0.0.1
INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of MolecularPDB
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("MolecularPDB")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-121-generic #170-Ubuntu SMP Wed Jun 14 09:04:33 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (561.14453125 MB free)
Uptime: 11952.0 sec
Load Avg:  1.080078125  1.02734375  1.01318359375
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz     543550 s       6313 s      47920 s     483649 s         22 s
#2  3500 MHz     391059 s         40 s      42802 s     715178 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.9.1
 - MolecularPDB                  0.0.1
2 additional packages:
 - Compat                        0.26.0
 - MolecularDataType             0.0.2
INFO: Testing MolecularPDB
----------------------------------------
Test ==() for type PDB


VERIFIED! ==() for type PDB
----------------------------------------


----------------------------------------
Test ==() for type PDB


VERIFIED! ==() for type PDB
----------------------------------------


----------------------------------------
Test obtain(obj, :molecular_system) for type PDB


VERIFIED! obtain(obj, :molecular_system) for type PDB
----------------------------------------


----------------------------------------
Test get_records()


VERIFIED! get_records()
----------------------------------------


----------------------------------------
Test get_records()


VERIFIED! get_records()
----------------------------------------


----------------------------------------
Test get_records()


VERIFIED! get_records()
----------------------------------------


----------------------------------------
Test format_atom_index()


VERIFIED! format_atom_index()
----------------------------------------


----------------------------------------
Test format_atom_index()


VERIFIED! format_atom_index()
----------------------------------------


----------------------------------------
Test format_atom_index()


VERIFIED! format_atom_index()
----------------------------------------


----------------------------------------
Test format_atom_index()


VERIFIED! format_atom_index()
----------------------------------------


----------------------------------------
Test format_atom_name()


VERIFIED! format_atom_name()
----------------------------------------


----------------------------------------
Test format_atom_name()


VERIFIED! format_atom_name()
----------------------------------------


----------------------------------------
Test format_atom_name()


VERIFIED! format_atom_name()
----------------------------------------


----------------------------------------
Test format_residue_name()


VERIFIED! format_residue_name()
----------------------------------------


----------------------------------------
Test format_residue_name()


VERIFIED! format_residue_name()
----------------------------------------


----------------------------------------
Test format_residue_name()


VERIFIED! format_residue_name()
----------------------------------------


----------------------------------------
Test format_residue_name()


VERIFIED! format_residue_name()
----------------------------------------


----------------------------------------
Test format_residue_name()


VERIFIED! format_residue_name()
----------------------------------------


----------------------------------------
Test format_residue_name()


VERIFIED! format_residue_name()
----------------------------------------


----------------------------------------
Test format_residue_name()

WARNING! residue name length is truncated from 5 by format_residue_name()


VERIFIED! format_residue_name()
----------------------------------------


----------------------------------------
Test format_residue_id()


VERIFIED! format_residue_id()
----------------------------------------


----------------------------------------
Test format_residue_id()


VERIFIED! format_residue_id()
----------------------------------------


----------------------------------------
Test format_residue_id()


VERIFIED! format_residue_id()
----------------------------------------


----------------------------------------
Test format_atom_coordinate())


VERIFIED! format_atom_coordinate()
----------------------------------------


----------------------------------------
Test format_atom_coordinate())


VERIFIED! format_atom_coordinate()
----------------------------------------


----------------------------------------
Test format_atom_coordinate())


VERIFIED! format_atom_coordinate()
----------------------------------------


----------------------------------------
Test format_atom_coordinate())


VERIFIED! format_atom_coordinate()
----------------------------------------


----------------------------------------
Test format_atom_coordinate())


VERIFIED! format_atom_coordinate()
----------------------------------------


----------------------------------------
Test format_atom_coordinate())


VERIFIED! format_atom_coordinate()
----------------------------------------


----------------------------------------
Test format_atom_occupancy()


VERIFIED! format_atom_occupancy()
----------------------------------------


----------------------------------------
Test format_atom_occupancy()


VERIFIED! format_atom_occupancy()
----------------------------------------


----------------------------------------
Test format_atom_occupancy()


VERIFIED! format_atom_occupancy()
----------------------------------------


----------------------------------------
Test format_atom_occupancy()


VERIFIED! format_atom_occupancy()
----------------------------------------


----------------------------------------
Test format_atom_occupancy()


VERIFIED! format_atom_occupancy()
----------------------------------------


----------------------------------------
Test format_atom_beta()


VERIFIED! format_atom_beta()
----------------------------------------


----------------------------------------
Test format_atom_beta()


VERIFIED! format_atom_beta()
----------------------------------------


----------------------------------------
Test format_atom_beta()


VERIFIED! format_atom_beta()
----------------------------------------


----------------------------------------
Test format_atom_beta()


VERIFIED! format_atom_beta()
----------------------------------------


----------------------------------------
Test format_atom_beta()


VERIFIED! format_atom_beta()
----------------------------------------


----------------------------------------
Test format_segment_name()


VERIFIED! format_segment_name()
----------------------------------------


----------------------------------------
Test format_segment_name()


VERIFIED! format_segment_name()
----------------------------------------


----------------------------------------
Test format_segment_name()


VERIFIED! format_segment_name()
----------------------------------------


----------------------------------------
Test format_atom_element()


VERIFIED! format_atom_element()
----------------------------------------


----------------------------------------
Test format_atom_element()


VERIFIED! format_atom_element()
----------------------------------------


----------------------------------------
Test format_atom_element()


VERIFIED! format_atom_element()
----------------------------------------


----------------------------------------
Test format_atom_charge())


VERIFIED! format_atom_charge()
----------------------------------------


----------------------------------------
Test format_atom_charge())


VERIFIED! format_atom_charge()
----------------------------------------


----------------------------------------
Test format_atom_charge())


VERIFIED! format_atom_charge()
----------------------------------------


----------------------------------------
Test parse_ATOM()


VERIFIED! parse_ATOM()
----------------------------------------


----------------------------------------
Test parse_ATOM()


VERIFIED! parse_ATOM()
----------------------------------------


----------------------------------------
Test parse_ATOM()


VERIFIED! parse_ATOM()
----------------------------------------


----------------------------------------
Test format_ATOM()


VERIFIED! format_ATOM()
----------------------------------------


----------------------------------------
Test format_ATOM()


VERIFIED! format_ATOM()
----------------------------------------


----------------------------------------
Test create_atoms()


VERIFIED! create_atoms()
----------------------------------------
----------------------------------------
Test create_atoms()


VERIFIED! create_atoms()
----------------------------------------
-------------------------------------
Test parse_symmetry()

VERIFIED! parse_symmetry()

-------------------------------------
-------------------------------------
Test parse_symmetry()

VERIFIED! parse_symmetry()

-------------------------------------
-------------------------------------
Test parse_symmetry()

VERIFIED! parse_symmetry()

-------------------------------------
--------------------------------
Test parse_CRYST1()

VERIFIED! parse_CRYST1()

--------------------------------
--------------------------------
Test parse_CRYST1()

VERIFIED! parse_CRYST1()

--------------------------------
--------------------------------
Test create_crystal_symmetry()

RCSB

VERIFIED! create_crystal_symmetry()

--------------------------------
--------------------------------
Test create_crystal_symmetry()

VMD

VERIFIED! create_crystal_symmetry()

--------------------------------
---------------------------------------
Test format_lattice_space_group()

VERIFIED! format_lattice_space_group()

---------------------------------------
---------------------------------------
Test format_lattice_space_group()

VERIFIED! format_lattice_space_group()

---------------------------------------
---------------------------------------
Test format_lattice_lengths()

VERIFIED! format_lattice_lengths()

---------------------------------------
---------------------------------------
Test format_lattice_angles()

VERIFIED! format_lattice_angles()

---------------------------------------
---------------------------------------
Test format_lattice_chain_count()

VERIFIED! format_lattice_chain_count()

---------------------------------------
---------------------------------------
Test format_lattice_chain_count()

VERIFIED! format_lattice_chain_count()

---------------------------------------
---------------------------------------
Test format_lattice_chain_count()

WARNING! format ":unsupported" is not supported by format_lattice_chain_count()

VERIFIED! format_lattice_chain_count()

---------------------------------------
---------------------------------------
Test format_CRYST1()

VERIFIED! format_CRYST1()

---------------------------------------
---------------------------------------
Test format_CRYST1()

VERIFIED! format_CRYST1()

---------------------------------------
----------------------------------------
Test read(RCSB,...)


VERIFIED! read(RCSB,...)

----------------------------------------
----------------------------------------
Test save(RCSB,...)


VERIFIED! save(RCSB,...)
----------------------------------------


----------------------------------------
Test save(VMD,...)


VERIFIED! save(VMD,...)
----------------------------------------


----------------------------------------
Test save(VMD,...)


VERIFIED! save(VMD,...)
----------------------------------------


INFO: MolecularPDB tests passed

>>> End of log
