>>> 'Pkg.add("JuMPeR")' log
INFO: Cloning cache of JuMPeR from https://github.com/IainNZ/JuMPeR.jl.git
INFO: Installing Calculus v0.3.1
INFO: Installing DataStructures v0.8.1
INFO: Installing DiffBase v0.2.0
INFO: Installing ForwardDiff v0.2.5
INFO: Installing JuMP v0.14.2
INFO: Installing JuMPeR v0.5.0
INFO: Installing Lazy v0.12.0
INFO: Installing MacroTools v0.4.0
INFO: Installing MathProgBase v0.5.10
INFO: Installing ReverseDiffSparse v0.5.8
INFO: Package database updated

>>> 'Pkg.test("JuMPeR")' log
Julia Version 0.6.2
Commit d386e40c17 (2017-12-13 18:08 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-143-generic #192-Ubuntu SMP Tue Feb 27 10:45:36 UTC 2018 x86_64 x86_64
Memory: 2.939197540283203 GB (964.2109375 MB free)
Uptime: 43578.0 sec
Load Avg:  1.00537109375  1.01513671875  1.001953125
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz    2678004 s       3008 s     196205 s     854977 s         35 s
#2  3500 MHz     566036 s       4414 s      75446 s    3634721 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.6
2 required packages:
 - JSON                          0.17.2
 - JuMPeR                        0.5.0
26 additional packages:
 - BinDeps                       0.8.8
 - Cairo                         0.5.1
 - Calculus                      0.3.1
 - ColorTypes                    0.6.7
 - Colors                        0.8.2
 - Compat                        0.64.0
 - DataStructures                0.8.1
 - DiffBase                      0.2.0
 - FixedPointNumbers             0.4.6
 - ForwardDiff                   0.2.5
 - Graphics                      0.3.0
 - Gtk                           0.13.1
 - JuMP                          0.14.2
 - Lazy                          0.12.0
 - MacroTools                    0.4.0
 - MathProgBase                  0.5.10
 - NaNMath                       0.3.1
 - NodeJS                        0.4.0
 - Nullables                     0.0.5
 - Reexport                      0.1.0
 - Requires                      0.4.3
 - ReverseDiffSparse             0.5.8
 - Rsvg                          0.2.0
 - SHA                           0.5.7
 - URIParser                     0.3.1
 - VegaLite                      0.1.0              ecb31725 (dirty)
INFO: Computing test dependencies for JuMPeR...
INFO: Installing BaseTestNext v0.2.2
INFO: Installing ECOS v0.8.0
INFO: Installing GLPK v0.5.0
INFO: Installing GLPKMathProgInterface v0.4.0
INFO: Building ECOS
INFO: Building GLPK
INFO: Testing JuMPeR

WARNING: deprecated syntax "abstract AbstractModel" at /home/vagrant/.julia/v0.6/JuMP/src/JuMP.jl:70.
Use "abstract type AbstractModel end" instead.

WARNING: deprecated syntax "abstract AbstractConstraint" at /home/vagrant/.julia/v0.6/JuMP/src/JuMP.jl:321.
Use "abstract type AbstractConstraint end" instead.

WARNING: deprecated syntax "abstract AbstractJuMPScalar" at /home/vagrant/.julia/v0.6/JuMP/src/JuMP.jl:324.
Use "abstract type AbstractJuMPScalar end" instead.

WARNING: deprecated syntax "typealias LinConstrRef ConstraintRef{Model,LinearConstraint}" at /home/vagrant/.julia/v0.6/JuMP/src/JuMP.jl:539.
Use "const LinConstrRef = ConstraintRef{Model,LinearConstraint}" instead.

WARNING: deprecated syntax "typealias JuMPTypes Union{AbstractJuMPScalar,NonlinearExpression,Norm,GenericAffExpr,QuadExpr,SOCExpr}" at /home/vagrant/.julia/v0.6/JuMP/src/JuMP.jl:752.
Use "const JuMPTypes = Union{AbstractJuMPScalar,NonlinearExpression,Norm,GenericAffExpr,QuadExpr,SOCExpr}" instead.

WARNING: deprecated syntax "typealias JuMPScalars Union{Number,JuMPTypes}" at /home/vagrant/.julia/v0.6/JuMP/src/JuMP.jl:753.
Use "const JuMPScalars = Union{Number,JuMPTypes}" instead.

WARNING: deprecated syntax "abstract AbstractMathProgModel" at /home/vagrant/.julia/v0.6/MathProgBase/src/SolverInterface/SolverInterface.jl:48.
Use "abstract type AbstractMathProgModel end" instead.

WARNING: deprecated syntax "abstract AbstractMathProgSolver" at /home/vagrant/.julia/v0.6/MathProgBase/src/SolverInterface/SolverInterface.jl:52.
Use "abstract type AbstractMathProgSolver end" instead.

WARNING: deprecated syntax "abstract AbstractLinearQuadraticModel<:AbstractMathProgModel" at /home/vagrant/.julia/v0.6/MathProgBase/src/SolverInterface/LinearQuadratic.jl:4.
Use "abstract type AbstractLinearQuadraticModel<:AbstractMathProgModel end" instead.

WARNING: deprecated syntax "abstract MathProgCallbackData" at /home/vagrant/.julia/v0.6/MathProgBase/src/SolverInterface/callbacks.jl:2.
Use "abstract type MathProgCallbackData end" instead.

WARNING: deprecated syntax "abstract AbstractNonlinearModel<:AbstractMathProgModel" at /home/vagrant/.julia/v0.6/MathProgBase/src/SolverInterface/Nonlinear.jl:4.
Use "abstract type AbstractNonlinearModel<:AbstractMathProgModel end" instead.

WARNING: deprecated syntax "abstract AbstractNLPEvaluator" at /home/vagrant/.julia/v0.6/MathProgBase/src/SolverInterface/Nonlinear.jl:7.
Use "abstract type AbstractNLPEvaluator end" instead.

WARNING: deprecated syntax "abstract AbstractConicModel<:AbstractMathProgModel" at /home/vagrant/.julia/v0.6/MathProgBase/src/SolverInterface/Conic.jl:4.
Use "abstract type AbstractConicModel<:AbstractMathProgModel end" instead.

WARNING: deprecated syntax "typealias InputVector{T<:Union{Real,Char}} Union{Vector{T},Real,Char}" at /home/vagrant/.julia/v0.6/MathProgBase/src/HighLevelInterface/linprog.jl:9.
Use "InputVector{T<:Union{Real,Char}} = Union{Vector{T},Real,Char}" instead.

WARNING: deprecated syntax "typealias SymbolInputVector Union{Vector{Symbol},Symbol}" at /home/vagrant/.julia/v0.6/MathProgBase/src/HighLevelInterface/mixintprog.jl:10.
Use "const SymbolInputVector = Union{Vector{Symbol},Symbol}" instead.

WARNING: deprecated syntax "abstract ForwardDiffResult" at /home/vagrant/.julia/v0.6/ForwardDiff/src/ForwardDiff.jl:71.
Use "abstract type ForwardDiffResult end" instead.

WARNING: deprecated syntax "inner constructor Chunk(...) around /home/vagrant/.julia/v0.6/ForwardDiff/src/ForwardDiff.jl:41".
Use "Chunk{N}(...) where N" instead.
WARNING: eval from module Calculus to ForwardDiff:    
Expr(:call, :/, 1, 2)::Any
  ** incremental compilation may be broken for this module **

WARNING: eval from module Calculus to ForwardDiff:    
Expr(:call, :/, 1, 3)::Any
  ** incremental compilation may be broken for this module **

WARNING: eval from module Calculus to ForwardDiff:    
Expr(:call, :log, 10)::Any
  ** incremental compilation may be broken for this module **

WARNING: eval from module Calculus to ForwardDiff:    
Expr(:call, :log, 2)::Any
  ** incremental compilation may be broken for this module **

WARNING: eval from module Calculus to ForwardDiff:    
Expr(:call, :log, 2)::Any
  ** incremental compilation may be broken for this module **

WARNING: eval from module Calculus to ForwardDiff:    
Expr(:call, :/, Base.Irrational{:π}(), 180)::Any
  ** incremental compilation may be broken for this module **

WARNING: eval from module Calculus to ForwardDiff:    
Expr(:call, :-, Base.Irrational{:π}())::Any
  ** incremental compilation may be broken for this module **

WARNING: eval from module Calculus to ForwardDiff:    
Expr(:call, :/, -3.14159, 180)::Any
  ** incremental compilation may be broken for this module **

WARNING: eval from module Calculus to ForwardDiff:    
Expr(:call, :/, Base.Irrational{:π}(), 180)::Any
  ** incremental compilation may be broken for this module **

WARNING: eval from module Calculus to ForwardDiff:    
Expr(:call, :/, Base.Irrational{:π}(), 180)::Any
  ** incremental compilation may be broken for this module **

WARNING: eval from module Calculus to ForwardDiff:    
Expr(:call, :-, Base.Irrational{:π}())::Any
  ** incremental compilation may be broken for this module **

WARNING: eval from module Calculus to ForwardDiff:    
Expr(:call, :/, -3.14159, 180)::Any
  ** incremental compilation may be broken for this module **

WARNING: eval from module Calculus to ForwardDiff:    
Expr(:call, :-, Base.Irrational{:π}())::Any
  ** incremental compilation may be broken for this module **

WARNING: eval from module Calculus to ForwardDiff:    
Expr(:call, :/, -3.14159, 180)::Any
  ** incremental compilation may be broken for this module **

WARNING: eval from module Calculus to ForwardDiff:    
Expr(:call, :/, 180, Base.Irrational{:π}())::Any
  ** incremental compilation may be broken for this module **

WARNING: eval from module Calculus to ForwardDiff:    
Expr(:call, :/, -180, Base.Irrational{:π}())::Any
  ** incremental compilation may be broken for this module **

WARNING: eval from module Calculus to ForwardDiff:    
Expr(:call, :/, 180, Base.Irrational{:π}())::Any
  ** incremental compilation may be broken for this module **

WARNING: eval from module Calculus to ForwardDiff:    
Expr(:call, :/, 180, Base.Irrational{:π}())::Any
  ** incremental compilation may be broken for this module **

WARNING: eval from module Calculus to ForwardDiff:    
Expr(:call, :/, -180, Base.Irrational{:π}())::Any
  ** incremental compilation may be broken for this module **

WARNING: eval from module Calculus to ForwardDiff:    
Expr(:call, :/, -180, Base.Irrational{:π}())::Any
  ** incremental compilation may be broken for this module **

WARNING: eval from module Calculus to ForwardDiff:    
Expr(:call, :/, Base.Irrational{:π}(), 180)::Any
  ** incremental compilation may be broken for this module **

WARNING: eval from module Calculus to ForwardDiff:    
Expr(:call, :/, 180, Base.Irrational{:π}())::Any
  ** incremental compilation may be broken for this module **

WARNING: eval from module Calculus to ForwardDiff:    
Expr(:call, :sqrt, Base.Irrational{:π}())::Any
  ** incremental compilation may be broken for this module **

WARNING: eval from module Calculus to ForwardDiff:    
Expr(:call, :sqrt, Base.Irrational{:π}())::Any
  ** incremental compilation may be broken for this module **

WARNING: eval from module Calculus to ForwardDiff:    
Expr(:call, :sqrt, Base.Irrational{:π}())::Any
  ** incremental compilation may be broken for this module **

WARNING: eval from module Calculus to ForwardDiff:    
Expr(:call, :sqrt, Base.Irrational{:π}())::Any
  ** incremental compilation may be broken for this module **

WARNING: eval from module Calculus to ForwardDiff:    
Expr(:call, :sqrt, Base.Irrational{:π}())::Any
  ** incremental compilation may be broken for this module **

WARNING: eval from module Calculus to ForwardDiff:    
Expr(:call, :sqrt, Base.Irrational{:π}())::Any
  ** incremental compilation may be broken for this module **

WARNING: eval from module Calculus to ForwardDiff:    
Expr(:call, :/, 2, 1.77245)::Any
  ** incremental compilation may be broken for this module **

WARNING: Method definition exp(ForwardDiff.Dual{N, T} where T<:Real) in module ForwardDiff at /home/vagrant/.julia/v0.6/ForwardDiff/src/dual.jl:281 overwritten at /home/vagrant/.julia/v0.6/ForwardDiff/src/dual.jl:306.
WARNING: Method definition sqrt(ForwardDiff.Dual{N, T} where T<:Real) in module ForwardDiff at /home/vagrant/.julia/v0.6/ForwardDiff/src/dual.jl:281 overwritten at /home/vagrant/.julia/v0.6/ForwardDiff/src/dual.jl:311.
WARNING: Method definition exp(ForwardDiff.Dual{N, T} where T<:Real) in module ForwardDiff at /home/vagrant/.julia/v0.6/ForwardDiff/src/dual.jl:281 overwritten at /home/vagrant/.julia/v0.6/ForwardDiff/src/dual.jl:306.
WARNING: Method definition sqrt(ForwardDiff.Dual{N, T} where T<:Real) in module ForwardDiff at /home/vagrant/.julia/v0.6/ForwardDiff/src/dual.jl:281 overwritten at /home/vagrant/.julia/v0.6/ForwardDiff/src/dual.jl:311.
WARNING: eval from module Calculus to ReverseDiffSparse:    
Expr(:call, :/, 1, 2)::Any
  ** incremental compilation may be broken for this module **

WARNING: eval from module Calculus to ReverseDiffSparse:    
Expr(:call, :/, 1, 2)::Any
  ** incremental compilation may be broken for this module **

WARNING: eval from module Calculus to ReverseDiffSparse:    
Expr(:call, :/, 1, 3)::Any
  ** incremental compilation may be broken for this module **

WARNING: eval from module Calculus to ReverseDiffSparse:    
Expr(:call, :-, 2, 1)::Any
  ** incremental compilation may be broken for this module **

WARNING: eval from module Calculus to ReverseDiffSparse:    
Expr(:call, :/, 1, 3)::Any
  ** incremental compilation may be broken for this module **

WARNING: eval from module Calculus to ReverseDiffSparse:    
Expr(:call, :*, 1, 2, 1)::Any
  ** incremental compilation may be broken for this module **

WARNING: eval from module Calculus to ReverseDiffSparse:    
Expr(:call, :+, 2)::Any
  ** incremental compilation may be broken for this module **

WARNING: eval from module Calculus to ReverseDiffSparse:    
Expr(:call, :-, 1)::Any
  ** incremental compilation may be broken for this module **

WARNING: eval from module Calculus to ReverseDiffSparse:    
Expr(:call, :-, 1)::Any
  ** incremental compilation may be broken for this module **

WARNING: eval from module Calculus to ReverseDiffSparse:    
Expr(:call, :log, 10)::Any
  ** incremental compilation may be broken for this module **

WARNING: eval from module Calculus to ReverseDiffSparse:    
Expr(:call, :-, 1)::Any
  ** incremental compilation may be broken for this module **

WARNING: eval from module Calculus to ReverseDiffSparse:    
Expr(:call, :log, 2)::Any
  ** incremental compilation may be broken for this module **

WARNING: eval from module Calculus to ReverseDiffSparse:    
Expr(:call, :-, 1)::Any
  ** incremental compilation may be broken for this module **

WARNING: eval from module Calculus to ReverseDiffSparse:    
Expr(:call, :log, 2)::Any
  ** incremental compilation may be broken for this module **

WARNING: eval from module Calculus to ReverseDiffSparse:    
Expr(:call, :log, 2)::Any
  ** incremental compilation may be broken for this module **

WARNING: eval from module Calculus to ReverseDiffSparse:    
Expr(:call, :-, 2, 1)::Any
  ** incremental compilation may be broken for this module **

WARNING: eval from module Calculus to ReverseDiffSparse:    
Expr(:call, :-, 2, 1)::Any
  ** incremental compilation may be broken for this module **

WARNING: eval from module Calculus to ReverseDiffSparse:    
Expr(:call, :-, Base.Irrational{:π}())::Any
  ** incremental compilation may be broken for this module **

WARNING: eval from module Calculus to ReverseDiffSparse:    
Expr(:call, :/, -3.14159, 180)::Any
  ** incremental compilation may be broken for this module **

WARNING: eval from module Calculus to ReverseDiffSparse:    
Expr(:call, :/, Base.Irrational{:π}(), 180)::Any
  ** incremental compilation may be broken for this module **

WARNING: eval from module Calculus to ReverseDiffSparse:    
Expr(:call, :/, Base.Irrational{:π}(), 180)::Any
  ** incremental compilation may be broken for this module **

WARNING: eval from module Calculus to ReverseDiffSparse:    
Expr(:call, :-, 2, 1)::Any
  ** incremental compilation may be broken for this module **

WARNING: eval from module Calculus to ReverseDiffSparse:    
Expr(:call, :/, Base.Irrational{:π}(), 180)::Any
  ** incremental compilation may be broken for this module **

WARNING: eval from module Calculus to ReverseDiffSparse:    
Expr(:call, :/, Base.Irrational{:π}(), 180)::Any
  ** incremental compilation may be broken for this module **

WARNING: eval from module Calculus to ReverseDiffSparse:    
Expr(:call, :-, Base.Irrational{:π}())::Any
  ** incremental compilation may be broken for this module **

WARNING: eval from module Calculus to ReverseDiffSparse:    
Expr(:call, :/, -3.14159, 180)::Any
  ** incremental compilation may be broken for this module **

WARNING: eval from module Calculus to ReverseDiffSparse:    
Expr(:call, :-, Base.Irrational{:π}())::Any
  ** incremental compilation may be broken for this module **

WARNING: eval from module Calculus to ReverseDiffSparse:    
Expr(:call, :/, -3.14159, 180)::Any
  ** incremental compilation may be broken for this module **

WARNING: eval from module Calculus to ReverseDiffSparse:    
Expr(:call, :-, Base.Irrational{:π}())::Any
  ** incremental compilation may be broken for this module **

WARNING: eval from module Calculus to ReverseDiffSparse:    
Expr(:call, :/, -3.14159, 180)::Any
  ** incremental compilation may be broken for this module **

WARNING: eval from module Calculus to ReverseDiffSparse:    
Expr(:call, :-, 2, 1)::Any
  ** incremental compilation may be broken for this module **

WARNING: eval from module Calculus to ReverseDiffSparse:    
Expr(:call, :-, 2, 1)::Any
  ** incremental compilation may be broken for this module **

WARNING: eval from module Calculus to ReverseDiffSparse:    
Expr(:call, :/, 1, 2)::Any
  ** incremental compilation may be broken for this module **

WARNING: eval from module Calculus to ReverseDiffSparse:    
Expr(:call, :-, 2, 1)::Any
  ** incremental compilation may be broken for this module **

WARNING: eval from module Calculus to ReverseDiffSparse:    
Expr(:call, :/, 1, 2)::Any
  ** incremental compilation may be broken for this module **

WARNING: eval from module Calculus to ReverseDiffSparse:    
Expr(:call, :-, 2, 1)::Any
  ** incremental compilation may be broken for this module **

WARNING: eval from module Calculus to ReverseDiffSparse:    
Expr(:call, :-, 2, 1)::Any
  ** incremental compilation may be broken for this module **

WARNING: eval from module Calculus to ReverseDiffSparse:    
Expr(:call, :-, 2, 1)::Any
  ** incremental compilation may be broken for this module **

WARNING: eval from module Calculus to ReverseDiffSparse:    
Expr(:call, :/, 1, 2)::Any
  ** incremental compilation may be broken for this module **

WARNING: eval from module Calculus to ReverseDiffSparse:    
Expr(:call, :-, 2, 1)::Any
  ** incremental compilation may be broken for this module **

WARNING: eval from module Calculus to ReverseDiffSparse:    
Expr(:call, :/, 1, 2)::Any
  ** incremental compilation may be broken for this module **

WARNING: eval from module Calculus to ReverseDiffSparse:    
Expr(:call, :-, 2, 1)::Any
  ** incremental compilation may be broken for this module **

WARNING: eval from module Calculus to ReverseDiffSparse:    
Expr(:call, :-, 2, 1)::Any
  ** incremental compilation may be broken for this module **

WARNING: eval from module Calculus to ReverseDiffSparse:    
Expr(:call, :-, 2, 1)::Any
  ** incremental compilation may be broken for this module **

WARNING: eval from module Calculus to ReverseDiffSparse:    
Expr(:call, :-, 2, 1)::Any
  ** incremental compilation may be broken for this module **

WARNING: eval from module Calculus to ReverseDiffSparse:    
Expr(:call, :-, 2, 1)::Any
  ** incremental compilation may be broken for this module **

WARNING: eval from module Calculus to ReverseDiffSparse:    
Expr(:call, :/, 1, 2)::Any
  ** incremental compilation may be broken for this module **

WARNING: eval from module Calculus to ReverseDiffSparse:    
Expr(:call, :-, 2, 1)::Any
  ** incremental compilation may be broken for this module **

WARNING: eval from module Calculus to ReverseDiffSparse:    
Expr(:call, :/, 1, 2)::Any
  ** incremental compilation may be broken for this module **

WARNING: eval from module Calculus to ReverseDiffSparse:    
Expr(:call, :-, 2, 1)::Any
  ** incremental compilation may be broken for this module **

WARNING: eval from module Calculus to ReverseDiffSparse:    
Expr(:call, :-, 1)::Any
  ** incremental compilation may be broken for this module **

WARNING: eval from module Calculus to ReverseDiffSparse:    
Expr(:call, :-, -1)::Any
  ** incremental compilation may be broken for this module **

WARNING: eval from module Calculus to ReverseDiffSparse:    
Expr(:call, :-, 2, 1)::Any
  ** incremental compilation may be broken for this module **

WARNING: eval from module Calculus to ReverseDiffSparse:    
Expr(:call, :/, 1, 2)::Any
  ** incremental compilation may be broken for this module **

WARNING: eval from module Calculus to ReverseDiffSparse:    
Expr(:call, :-, 2, 1)::Any
  ** incremental compilation may be broken for this module **

WARNING: eval from module Calculus to ReverseDiffSparse:    
Expr(:call, :-, 1)::Any
  ** incremental compilation may be broken for this module **

WARNING: eval from module Calculus to ReverseDiffSparse:    
Expr(:call, :sqrt, Base.Irrational{:π}())::Any
  ** incremental compilation may be broken for this module **

WARNING: eval from module Calculus to ReverseDiffSparse:    
Expr(:call, :sqrt, Base.Irrational{:π}())::Any
  ** incremental compilation may be broken for this module **

WARNING: eval from module Calculus to ReverseDiffSparse:    
Expr(:call, :-, 1)::Any
  ** incremental compilation may be broken for this module **

WARNING: eval from module Calculus to ReverseDiffSparse:    
Expr(:call, :sqrt, Base.Irrational{:π}())::Any
  ** incremental compilation may be broken for this module **

WARNING: eval from module Calculus to ReverseDiffSparse:    
Expr(:call, :sqrt, Base.Irrational{:π}())::Any
  ** incremental compilation may be broken for this module **

WARNING: eval from module Calculus to ReverseDiffSparse:    
Expr(:call, :-, 2, 1)::Any
  ** incremental compilation may be broken for this module **

WARNING: eval from module Calculus to ReverseDiffSparse:    
Expr(:call, :+, 2, 1)::Any
  ** incremental compilation may be broken for this module **

WARNING: eval from module Calculus to ReverseDiffSparse:    
Expr(:call, :-, 2, 1)::Any
  ** incremental compilation may be broken for this module **

WARNING: eval from module Calculus to ReverseDiffSparse:    
Expr(:call, :+, 2, 1)::Any
  ** incremental compilation may be broken for this module **

WARNING: eval from module Calculus to ReverseDiffSparse:    
Expr(:call, :sqrt, Base.Irrational{:π}())::Any
  ** incremental compilation may be broken for this module **

WARNING: eval from module Calculus to ReverseDiffSparse:    
Expr(:call, :/, 2, 1.77245)::Any
  ** incremental compilation may be broken for this module **

WARNING: eval from module Calculus to ReverseDiffSparse:    
Expr(:call, :*, 2, 1)::Any
  ** incremental compilation may be broken for this module **

WARNING: eval from module Calculus to ReverseDiffSparse:    
Expr(:call, :+, 2)::Any
  ** incremental compilation may be broken for this module **

WARNING: Method definition exp(ForwardDiff.Dual{N, T} where T<:Real) in module ForwardDiff at /home/vagrant/.julia/v0.6/ForwardDiff/src/dual.jl:281 overwritten at /home/vagrant/.julia/v0.6/ForwardDiff/src/dual.jl:306.
WARNING: Method definition sqrt(ForwardDiff.Dual{N, T} where T<:Real) in module ForwardDiff at /home/vagrant/.julia/v0.6/ForwardDiff/src/dual.jl:281 overwritten at /home/vagrant/.julia/v0.6/ForwardDiff/src/dual.jl:311.

WARNING: deprecated syntax "abstract JuMPContainer{T,N}" at /home/vagrant/.julia/v0.6/JuMP/src/JuMPContainer.jl:10.
Use "abstract type JuMPContainer{T,N} end" instead.
ERROR: LoadError: LoadError: LoadError: invalid subtyping in definition of JuMPArray
Stacktrace:
 [1] include_from_node1(::String) at ./loading.jl:576
 [2] include(::String) at ./sysimg.jl:14
 [3] include_from_node1(::String) at ./loading.jl:576
 [4] include(::String) at ./sysimg.jl:14
 [5] include_from_node1(::String) at ./loading.jl:576
 [6] include(::String) at ./sysimg.jl:14
 [7] anonymous at ./<missing>:2
while loading /home/vagrant/.julia/v0.6/JuMP/src/JuMPArray.jl, in expression starting on line 6
while loading /home/vagrant/.julia/v0.6/JuMP/src/JuMPContainer.jl, in expression starting on line 11
while loading /home/vagrant/.julia/v0.6/JuMP/src/JuMP.jl, in expression starting on line 63
ERROR: LoadError: Failed to precompile JuMP to /home/vagrant/.julia/lib/v0.6/JuMP.ji.
Stacktrace:
 [1] compilecache(::String) at ./loading.jl:710
 [2] _require(::Symbol) at ./loading.jl:463
 [3] require(::Symbol) at ./loading.jl:405
 [4] include_from_node1(::String) at ./loading.jl:576
 [5] include(::String) at ./sysimg.jl:14
 [6] process_options(::Base.JLOptions) at ./client.jl:305
 [7] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/JuMPeR/test/runtests.jl, in expression starting on line 14
===============================[ ERROR: JuMPeR ]================================

failed process: Process(`/home/vagrant/julia/bin/julia -Cx86-64 -J/home/vagrant/julia/lib/julia/sys.so --compile=yes --depwarn=yes --check-bounds=yes --code-coverage=none --color=no --compilecache=yes /home/vagrant/.julia/v0.6/JuMPeR/test/runtests.jl`, ProcessExited(1)) [1]

================================================================================
INFO: Removing BaseTestNext v0.2.2
INFO: Removing ECOS v0.8.0
INFO: Removing GLPK v0.5.0
INFO: Removing GLPKMathProgInterface v0.4.0
ERROR: JuMPeR had test errors

>>> End of log
