>>> 'Pkg.add("ChangePrecision")' log
┌ Info: Cloning cache of ChangePrecision from https://github.com/stevengj/ChangePrecision.jl.git
└                                                   @ Base.Pkg.Cache cache.jl:43
[ Info: Installing ChangePrecision v0.2.1          @ Base.Pkg.Entry entry.jl:543
[ Info: Package database updated                    @ Base.Pkg.Entry entry.jl:32
┌ Info: METADATA is out-of-date — you may not have the latest version of ChangePrecision
│ Use `Pkg.update()` to get the latest versions of your packages
└                                                   @ Base.Pkg.Entry entry.jl:74

>>> 'Pkg.test("ChangePrecision")' log
Julia Version 0.7.0-DEV.3354
Commit 9b5eed2b6c (2018-01-09 08:03 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
      Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-135-generic #184-Ubuntu SMP Wed Oct 18 11:55:51 UTC 2017 x86_64 x86_64
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
              speed         user         nice          sys         idle          irq
       #1  3500 MHz    1319878 s        115 s      74416 s     394205 s          8 s
       #2  3500 MHz     267494 s         41 s      31384 s    1803256 s          0 s
       
  Memory: 2.93927001953125 GB (987.67578125 MB free)
  Uptime: 21319.0 sec
  Load Avg:  0.90771484375  0.998046875  1.03466796875
  WORD_SIZE: 64
  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant
Packages:
  Package Directory: /home/vagrant/.julia/v0.7
  Package Status:
2 required packages:
 - ChangePrecision               0.2.1
 - JSON                          0.16.3
2 additional packages:
 - Compat                        0.44.0
 - Nullables                     0.0.2
[ Info: Testing ChangePrecision                    @ Base.Pkg.Entry entry.jl:723
┌ Warning: Deprecated syntax `(arrayfuncs...)` at /home/vagrant/.julia/v0.7/ChangePrecision/src/ChangePrecision.jl:238.
│ Use `(arrayfuncs...,)` instead.
└                                               @ nothing ChangePrecision.jl:238
┌ Warning: Deprecated syntax `(arrayfuncs...)` at /home/vagrant/.julia/v0.7/ChangePrecision/src/ChangePrecision.jl:238.
│ Use `(arrayfuncs...,)` instead.
└                                               @ nothing ChangePrecision.jl:238
WARNING: Base.Test is deprecated, run `using Test` instead.
  likely near /home/vagrant/.julia/v0.7/ChangePrecision/test/runtests.jl:2
Test Summary: | Pass  Total
basic tests   |   34     34
Test Summary: | Pass  Total
rationals     |    6      6
Test Summary: | Pass  Total
complex       |    2      2
Test Summary: | Pass  Total
irrational    |   10     10
Test Summary: | Pass  Total
powers        |    4      4
┌ Warning: `copy!(dst::AbstractArray, src::AbstractArray)` is deprecated. You can either use `copyto!(dst, src)` or `Future.copy!(dst, src)` instead.
│   caller = tofloat at ChangePrecision.jl:150 [inlined]
└                                                  @ Core ChangePrecision.jl:150
┌ Warning: `copy!(dst::AbstractArray, src::AbstractArray)` is deprecated. You can either use `copyto!(dst, src)` or `Future.copy!(dst, src)` instead.
│   caller = tofloat at ChangePrecision.jl:150 [inlined]
└                                                  @ Core ChangePrecision.jl:150
┌ Warning: `copy!(dst::AbstractArray, src::AbstractArray)` is deprecated. You can either use `copyto!(dst, src)` or `Future.copy!(dst, src)` instead.
│   caller = tofloat at ChangePrecision.jl:150 [inlined]
└                                                  @ Core ChangePrecision.jl:150
┌ Warning: `copy!(dst::AbstractArray, src::AbstractArray)` is deprecated. You can either use `copyto!(dst, src)` or `Future.copy!(dst, src)` instead.
│   caller = tofloat at ChangePrecision.jl:150 [inlined]
└                                                  @ Core ChangePrecision.jl:150
┌ Warning: `copy!(dst::AbstractArray, src::AbstractArray)` is deprecated. You can either use `copyto!(dst, src)` or `Future.copy!(dst, src)` instead.
│   caller = tofloat at ChangePrecision.jl:150 [inlined]
└                                                  @ Core ChangePrecision.jl:150
┌ Warning: `copy!(dst::AbstractArray, src::AbstractArray)` is deprecated. You can either use `copyto!(dst, src)` or `Future.copy!(dst, src)` instead.
│   caller = tofloat at ChangePrecision.jl:150 [inlined]
└                                                  @ Core ChangePrecision.jl:150
Test Summary: | Pass  Total
arrays        |    6      6
┌ Warning: `eye(T::Type, m::Integer, n::Integer)` has been deprecated in favor of `I` and `Matrix` constructors. For a direct replacement, consider `Matrix{T}(I, m, n)`.If `T` element type is not necessary, consider the shorter `Matrix(I, m, n)` (with default `eltype(I)` `Bool`).
│   caller = eye(::Type, ::Type, ::Int64, ::Vararg{Int64,N} where N) at ChangePrecision.jl:175
└                                       @ ChangePrecision ChangePrecision.jl:175
┌ Warning: `F[:U]` is deprecated, use `F.U` instead.
│   caller = macro expansion at runtests.jl:73 [inlined]
└                                                          @ Core runtests.jl:73
┌ Warning: `eye(T::Type, m::Integer, n::Integer)` has been deprecated in favor of `I` and `Matrix` constructors. For a direct replacement, consider `Matrix{T}(I, m, n)`.If `T` element type is not necessary, consider the shorter `Matrix(I, m, n)` (with default `eltype(I)` `Bool`).
│   caller = macro expansion at runtests.jl:73 [inlined]
└                                                          @ Core runtests.jl:73
┌ Warning: `copy!(dst::AbstractArray, src::AbstractArray)` is deprecated. You can either use `copyto!(dst, src)` or `Future.copy!(dst, src)` instead.
│   caller = tofloat at ChangePrecision.jl:150 [inlined]
└                                                  @ Core ChangePrecision.jl:150
┌ Warning: `copy!(dst::AbstractArray, src::AbstractArray)` is deprecated. You can either use `copyto!(dst, src)` or `Future.copy!(dst, src)` instead.
│   caller = tofloat at ChangePrecision.jl:150 [inlined]
└                                                  @ Core ChangePrecision.jl:150
┌ Warning: `F[:U]` is deprecated, use `F.U` instead.
│   caller = macro expansion at runtests.jl:74 [inlined]
└                                                          @ Core runtests.jl:74
┌ Warning: `eye(T::Type, m::Integer, n::Integer)` has been deprecated in favor of `I` and `Matrix` constructors. For a direct replacement, consider `Matrix{T}(I, m, n)`.If `T` element type is not necessary, consider the shorter `Matrix(I, m, n)` (with default `eltype(I)` `Bool`).
│   caller = macro expansion at runtests.jl:74 [inlined]
└                                                          @ Core runtests.jl:74
┌ Warning: `eye(T::Type, m::Integer, n::Integer)` has been deprecated in favor of `I` and `Matrix` constructors. For a direct replacement, consider `Matrix{T}(I, m, n)`.If `T` element type is not necessary, consider the shorter `Matrix(I, m, n)` (with default `eltype(I)` `Bool`).
│   caller = macro expansion at runtests.jl:75 [inlined]
└                                                          @ Core runtests.jl:75
┌ Warning: `copy!(dst::AbstractArray, src::AbstractArray)` is deprecated. You can either use `copyto!(dst, src)` or `Future.copy!(dst, src)` instead.
│   caller = tofloat at ChangePrecision.jl:150 [inlined]
└                                                  @ Core ChangePrecision.jl:150
┌ Warning: `copy!(dst::AbstractArray, src::AbstractArray)` is deprecated. You can either use `copyto!(dst, src)` or `Future.copy!(dst, src)` instead.
│   caller = tofloat at ChangePrecision.jl:150 [inlined]
└                                                  @ Core ChangePrecision.jl:150
┌ Warning: `copy!(dst::AbstractArray, src::AbstractArray)` is deprecated. You can either use `copyto!(dst, src)` or `Future.copy!(dst, src)` instead.
│   caller = tofloat at ChangePrecision.jl:150 [inlined]
└                                                  @ Core ChangePrecision.jl:150
┌ Warning: `copy!(dst::AbstractArray, src::AbstractArray)` is deprecated. You can either use `copyto!(dst, src)` or `Future.copy!(dst, src)` instead.
│   caller = tofloat at ChangePrecision.jl:150 [inlined]
└                                                  @ Core ChangePrecision.jl:150
┌ Warning: `copy!(dst::AbstractArray, src::AbstractArray)` is deprecated. You can either use `copyto!(dst, src)` or `Future.copy!(dst, src)` instead.
│   caller = tofloat at ChangePrecision.jl:150 [inlined]
└                                                  @ Core ChangePrecision.jl:150
┌ Warning: `copy!(dst::AbstractArray, src::AbstractArray)` is deprecated. You can either use `copyto!(dst, src)` or `Future.copy!(dst, src)` instead.
│   caller = tofloat at ChangePrecision.jl:150 [inlined]
└                                                  @ Core ChangePrecision.jl:150
┌ Warning: `eye(T::Type, m::Integer, n::Integer)` has been deprecated in favor of `I` and `Matrix` constructors. For a direct replacement, consider `Matrix{T}(I, m, n)`.If `T` element type is not necessary, consider the shorter `Matrix(I, m, n)` (with default `eltype(I)` `Bool`).
│   caller = macro expansion at runtests.jl:78 [inlined]
└                                                          @ Core runtests.jl:78
┌ Warning: `copy!(dst::AbstractArray, src::AbstractArray)` is deprecated. You can either use `copyto!(dst, src)` or `Future.copy!(dst, src)` instead.
│   caller = tofloat at ChangePrecision.jl:150 [inlined]
└                                                  @ Core ChangePrecision.jl:150
┌ Warning: `copy!(dst::AbstractArray, src::AbstractArray)` is deprecated. You can either use `copyto!(dst, src)` or `Future.copy!(dst, src)` instead.
│   caller = tofloat at ChangePrecision.jl:150 [inlined]
└                                                  @ Core ChangePrecision.jl:150
┌ Warning: `eye(T::Type, m::Integer, n::Integer)` has been deprecated in favor of `I` and `Matrix` constructors. For a direct replacement, consider `Matrix{T}(I, m, n)`.If `T` element type is not necessary, consider the shorter `Matrix(I, m, n)` (with default `eltype(I)` `Bool`).
│   caller = macro expansion at runtests.jl:79 [inlined]
└                                                          @ Core runtests.jl:79
Test Summary: | Pass  Total
matrices      |    7      7
┌ Warning: `current_module()` is deprecated, use `@__MODULE__` instead.
│   caller = include(::Type, ::String) at ChangePrecision.jl:111
└                                       @ ChangePrecision ChangePrecision.jl:111
Test Summary: | Pass  Total
include       |    2      2
Test Summary: | Pass  Total
bigfloat      |    3      3
┌ Warning: `linspace(start, stop)` is deprecated, use `linspace(start, stop, 50)` instead.
│   caller = linspace(::Type, ::Int64, ::Int64) at ChangePrecision.jl:278
└                                       @ ChangePrecision ChangePrecision.jl:278
┌ Warning: `linspace(start, stop)` is deprecated, use `linspace(start, stop, 50)` instead.
│   caller = linspace(::Type, ::Rational{Int64}, ::Rational{Int64}) at ChangePrecision.jl:281
└                                       @ ChangePrecision ChangePrecision.jl:281
┌ Warning: `logspace(start, stop)` is deprecated, use `logspace(start, stop, 50)` instead.
│   caller = logspace(::Type, ::Int64, ::Int64) at ChangePrecision.jl:279
└                                       @ ChangePrecision ChangePrecision.jl:279
┌ Warning: `logspace(start, stop)` is deprecated, use `logspace(start, stop, 50)` instead.
│   caller = logspace(::Type, ::Int64, ::Float64) at ChangePrecision.jl:281
└                                       @ ChangePrecision ChangePrecision.jl:281
Test Summary: | Pass  Total
ranges        |    4      4
[ Info: ChangePrecision tests passed               @ Base.Pkg.Entry entry.jl:737

>>> End of log
