>>> 'Pkg.add("Arrowhead")' log
INFO: Cloning cache of Arrowhead from https://github.com/ivanslapnicar/Arrowhead.jl.git
INFO: Cloning cache of DoubleDouble from https://github.com/JuliaMath/DoubleDouble.jl.git
INFO: Installing Arrowhead v0.0.1
INFO: Installing DoubleDouble v0.2.1
INFO: Package database updated

>>> 'Pkg.test("Arrowhead")' log
Julia Version 0.5.2
Commit f4c6c9d (2017-05-06 16:34 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-121-generic #170-Ubuntu SMP Wed Jun 14 09:04:33 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (587.9921875 MB free)
Uptime: 6104.0 sec
Load Avg:  0.974609375  1.626953125  1.57958984375
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3496 MHz     294234 s        114 s      35534 s     216827 s          6 s
#2  3496 MHz     162942 s         43 s      26545 s     405063 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.7.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.5
2 required packages:
 - Arrowhead                     0.0.1
 - JSON                          0.13.0
2 additional packages:
 - Compat                        0.28.0
 - DoubleDouble                  0.2.1
INFO: Testing Arrowhead
There are four tests for arrowhead matrices, a random matrix test and three
tests from the arrowhead paper [1] (see README for details)

tols = [100.0,100.0,100.0,100.0,100.0] = [100.0,100.0,100.0,100.0,100.0]

1st test - Random SymArrow matrix

A = Arrowhead.GenSymArrow(10,10) = [0.502564 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.00205792; 0.0 0.795691 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.423501; 0.0 0.0 0.0862094 0.0 0.0 0.0 0.0 0.0 0.0 0.548909; 0.0 0.0 0.0 0.887276 0.0 0.0 0.0 0.0 0.0 0.979948; 0.0 0.0 0.0 0.0 0.737278 0.0 0.0 0.0 0.0 0.50167; 0.0 0.0 0.0 0.0 0.0 0.394536 0.0 0.0 0.0 0.265192; 0.0 0.0 0.0 0.0 0.0 0.0 0.657973 0.0 0.0 0.14709; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.648424 0.0 0.96944; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.87547 0.41997; 0.00205792 0.423501 0.548909 0.979948 0.50167 0.265192 0.14709 0.96944 0.41997 0.182449]
(U,Lambda) = eig(full(A)) = ([-1.29946,0.153626,0.404874,0.502565,0.657737,0.706941,0.76819,0.817777,0.877438,2.17818],
[-0.000857319 0.000677742 0.000803966 0.999999 -2.09645e-5 0.000405062 -0.000303178 -0.000247843 -2.33045e-5 -0.000793242; -0.151744 0.0757981 0.0413563 -0.000292031 0.0048528 -0.191959 0.602607 -0.72793 -0.0219926 -0.197853; -0.297382 -0.93565 -0.0657398 0.000266481 -0.00151822 0.035573 -0.0314968 -0.0284838 -0.00294506 -0.169471; -0.336419 0.153496 0.0775273 -0.00051487 0.00674868 -0.218598 0.322016 0.535274 0.422864 -0.490298; -0.184908 0.0987751 0.0575987 -0.000432025 0.00997009 -0.665223 -0.635095 -0.236581 -0.0151946 -0.224872; -0.117523 0.1265 -0.979006 0.000496191 -0.00159273 0.034148 -0.0277733 -0.0237861 -0.00233129 -0.096029; -0.0564117 0.0335147 0.0221795 -0.00019131 0.986276 0.120835 -0.0522244 -0.0349419 -0.0028452 -0.0624928; -0.373621 0.225152 0.151913 -0.00134343 -0.164546 0.666442 -0.316757 -0.21731 -0.0179702 -0.409307; -0.14496 0.0668588 0.034059 -0.000227641 0.00304907 -0.100246 0.153192 0.276345 -0.905598 -0.20822; 0.750711 -0.114917 -0.0381646 0.000202129 -0.00158078 0.0402276 -0.0391325 -0.0379622 -0.00424518 -0.645878])
Remedy 3 
ERROR: LoadError: MethodError: Cannot `convert` an object of type Array{Float64,1} to an object of type Float64
This may have arisen from a call to the constructor Float64(...),
since type constructors fall back to convert methods.
 in macro expansion at ./multidimensional.jl:352 [inlined]
 in macro expansion at ./cartesian.jl:64 [inlined]
 in macro expansion at ./multidimensional.jl:350 [inlined]
 in _unsafe_getindex! at ./multidimensional.jl:342 [inlined]
 in macro expansion at ./multidimensional.jl:300 [inlined]
 in _unsafe_getindex(::Base.LinearFast, ::Array{Float64,2}, ::Array{Any,1}, ::Array{Int64,1}) at ./multidimensional.jl:293
 in aheigall(::Arrowhead.SymArrow{Float64}, ::Array{Float64,1}) at /home/vagrant/.julia/v0.5/Arrowhead/src/arrowhead3.jl:540
 in include_from_node1(::String) at ./loading.jl:488
 in process_options(::Base.JLOptions) at ./client.jl:265
 in _start() at ./client.jl:321
while loading /home/vagrant/.julia/v0.5/Arrowhead/test/runtests.jl, in expression starting on line 218
==============================[ ERROR: Arrowhead ]==============================

failed process: Process(`/home/vagrant/julia/bin/julia -Cx86-64 -J/home/vagrant/julia/lib/julia/sys.so --compile=yes --depwarn=yes --check-bounds=yes --code-coverage=none --color=no --compilecache=yes /home/vagrant/.julia/v0.5/Arrowhead/test/runtests.jl`, ProcessExited(1)) [1]

================================================================================
ERROR: Arrowhead had test errors
 in #test#61(::Bool, ::Function, ::Array{AbstractString,1}) at ./pkg/entry.jl:748
 in (::Base.Pkg.Entry.#kw##test)(::Array{Any,1}, ::Base.Pkg.Entry.#test, ::Array{AbstractString,1}) at ./<missing>:0
 in (::Base.Pkg.Dir.##2#3{Array{Any,1},Base.Pkg.Entry.#test,Tuple{Array{AbstractString,1}}})() at ./pkg/dir.jl:31
 in cd(::Base.Pkg.Dir.##2#3{Array{Any,1},Base.Pkg.Entry.#test,Tuple{Array{AbstractString,1}}}, ::String) at ./file.jl:59
 in #cd#1(::Array{Any,1}, ::Function, ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N}) at ./pkg/dir.jl:31
 in (::Base.Pkg.Dir.#kw##cd)(::Array{Any,1}, ::Base.Pkg.Dir.#cd, ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N}) at ./<missing>:0
 in #test#3(::Bool, ::Function, ::String, ::Vararg{String,N}) at ./pkg/pkg.jl:258
 in test(::String, ::Vararg{String,N}) at ./pkg/pkg.jl:258
 in eval(::Module, ::Any) at ./boot.jl:234
 in process_options(::Base.JLOptions) at ./client.jl:242
 in _start() at ./client.jl:321

>>> End of log
