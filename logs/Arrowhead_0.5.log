>>> 'Pkg.add("Arrowhead")' log
INFO: Cloning cache of Arrowhead from https://github.com/ivanslapnicar/Arrowhead.jl.git
INFO: Cloning cache of DoubleDouble from https://github.com/JuliaMath/DoubleDouble.jl.git
INFO: Installing Arrowhead v0.0.1
INFO: Installing DoubleDouble v0.2.1
INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of Arrowhead
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("Arrowhead")' log
Julia Version 0.5.2
Commit f4c6c9d (2017-05-06 16:34 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-119-generic #166-Ubuntu SMP Wed May 3 12:18:55 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (550.61328125 MB free)
Uptime: 6219.0 sec
Load Avg:  0.9541015625  1.39599609375  1.50244140625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz     268164 s        108 s      35090 s     257591 s         12 s
#2  3500 MHz     195741 s         40 s      25352 s     374689 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.7.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.5
2 required packages:
 - Arrowhead                     0.0.1
 - JSON                          0.12.0
2 additional packages:
 - Compat                        0.26.0
 - DoubleDouble                  0.2.1
INFO: Testing Arrowhead
There are four tests for arrowhead matrices, a random matrix test and three
tests from the arrowhead paper [1] (see README for details)

tols = [100.0,100.0,100.0,100.0,100.0] = [100.0,100.0,100.0,100.0,100.0]

1st test - Random SymArrow matrix

A = Arrowhead.GenSymArrow(10,10) = [0.495997 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.140695; 0.0 0.345421 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.626689; 0.0 0.0 0.732629 0.0 0.0 0.0 0.0 0.0 0.0 0.166847; 0.0 0.0 0.0 0.996756 0.0 0.0 0.0 0.0 0.0 0.311737; 0.0 0.0 0.0 0.0 0.145412 0.0 0.0 0.0 0.0 0.266391; 0.0 0.0 0.0 0.0 0.0 0.665488 0.0 0.0 0.0 0.422715; 0.0 0.0 0.0 0.0 0.0 0.0 0.349993 0.0 0.0 0.507215; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.700219 0.0 0.881591; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.334268 0.0473593; 0.140695 0.626689 0.166847 0.311737 0.266391 0.422715 0.507215 0.881591 0.0473593 0.491667]
(U,Lambda) = eig(full(A)) = ([-0.839238,0.15919,0.334309,0.348164,0.472189,0.510239,0.67224,0.731659,0.973742,1.89535],
[-0.0746084 0.020965 0.000758874 0.00264836 -0.594336 0.797107 0.0113706 -0.00342107 -0.0208722 0.0692389; -0.374565 0.168888 0.0491852 -0.635671 0.497183 0.306805 0.0273126 -0.00929762 -0.0706897 0.278445; -0.0751573 0.0146026 0.000365305 0.00120762 -0.0644296 -0.0605368 -0.0393528 0.986206 -0.0490437 0.0988195; -0.120222 0.0186796 0.000410399 0.00133748 -0.059767 -0.0517018 -0.0136826 0.00673844 0.960022 0.238904; -0.19156 -0.970324 -0.00122988 -0.00365613 0.0819863 0.0589179 0.00720224 -0.00260383 -0.022793 0.104833; -0.198911 0.0419025 0.00111315 0.00370694 -0.219935 -0.219703 0.891746 -0.0366059 -0.0971907 0.236696; -0.301991 0.133415 0.0282037 0.771841 0.417454 0.255399 0.0224192 -0.00761523 -0.0576326 0.226028; -0.405478 0.0817796 0.00210118 0.00696829 -0.388821 -0.374434 -0.448794 -0.160676 -0.228433 0.507985; -0.0285751 0.013576 -0.998387 -0.00948341 0.0345341 0.0217159 0.00199591 -0.000682907 -0.00524889 0.020892; 0.708057 -0.0501878 -0.000872106 -0.00278272 0.100571 0.0806892 0.0142435 -0.00573027 -0.0708739 0.688654])
Remedy 3 
ERROR: LoadError: MethodError: Cannot `convert` an object of type Array{Float64,1} to an object of type Float64
This may have arisen from a call to the constructor Float64(...),
since type constructors fall back to convert methods.
 in macro expansion at ./multidimensional.jl:352 [inlined]
 in macro expansion at ./cartesian.jl:64 [inlined]
 in macro expansion at ./multidimensional.jl:350 [inlined]
 in _unsafe_getindex! at ./multidimensional.jl:342 [inlined]
 in macro expansion at ./multidimensional.jl:300 [inlined]
 in _unsafe_getindex(::Base.LinearFast, ::Array{Float64,2}, ::Array{Any,1}, ::Array{Int64,1}) at ./multidimensional.jl:293
 in aheigall(::Arrowhead.SymArrow{Float64}, ::Array{Float64,1}) at /home/vagrant/.julia/v0.5/Arrowhead/src/arrowhead3.jl:540
 in include_from_node1(::String) at ./loading.jl:488
 in process_options(::Base.JLOptions) at ./client.jl:265
 in _start() at ./client.jl:321
while loading /home/vagrant/.julia/v0.5/Arrowhead/test/runtests.jl, in expression starting on line 218
==============================[ ERROR: Arrowhead ]==============================

failed process: Process(`/home/vagrant/julia/bin/julia -Cx86-64 -J/home/vagrant/julia/lib/julia/sys.so --compile=yes --depwarn=yes --check-bounds=yes --code-coverage=none --color=no --compilecache=yes /home/vagrant/.julia/v0.5/Arrowhead/test/runtests.jl`, ProcessExited(1)) [1]

================================================================================
ERROR: Arrowhead had test errors
 in #test#61(::Bool, ::Function, ::Array{AbstractString,1}) at ./pkg/entry.jl:748
 in (::Base.Pkg.Entry.#kw##test)(::Array{Any,1}, ::Base.Pkg.Entry.#test, ::Array{AbstractString,1}) at ./<missing>:0
 in (::Base.Pkg.Dir.##2#3{Array{Any,1},Base.Pkg.Entry.#test,Tuple{Array{AbstractString,1}}})() at ./pkg/dir.jl:31
 in cd(::Base.Pkg.Dir.##2#3{Array{Any,1},Base.Pkg.Entry.#test,Tuple{Array{AbstractString,1}}}, ::String) at ./file.jl:59
 in #cd#1(::Array{Any,1}, ::Function, ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N}) at ./pkg/dir.jl:31
 in (::Base.Pkg.Dir.#kw##cd)(::Array{Any,1}, ::Base.Pkg.Dir.#cd, ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N}) at ./<missing>:0
 in #test#3(::Bool, ::Function, ::String, ::Vararg{String,N}) at ./pkg/pkg.jl:258
 in test(::String, ::Vararg{String,N}) at ./pkg/pkg.jl:258
 in eval(::Module, ::Any) at ./boot.jl:234
 in process_options(::Base.JLOptions) at ./client.jl:242
 in _start() at ./client.jl:321

>>> End of log
