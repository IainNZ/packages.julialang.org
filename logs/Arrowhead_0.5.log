>>> 'Pkg.add("Arrowhead")' log
INFO: Cloning cache of Arrowhead from https://github.com/ivanslapnicar/Arrowhead.jl.git
INFO: Cloning cache of DoubleDouble from https://github.com/JuliaMath/DoubleDouble.jl.git
INFO: Installing Arrowhead v0.0.1
INFO: Installing DoubleDouble v0.2.1
INFO: Package database updated

>>> 'Pkg.test("Arrowhead")' log
Julia Version 0.5.2
Commit f4c6c9d (2017-05-06 16:34 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-119-generic #166-Ubuntu SMP Wed May 3 12:18:55 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (454.06640625 MB free)
Uptime: 6174.0 sec
Load Avg:  0.939453125  1.4091796875  1.54345703125
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3498 MHz     280201 s         14 s      38162 s     234772 s         11 s
#2  3498 MHz     116040 s        143 s      28154 s     460265 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.7.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.5
2 required packages:
 - Arrowhead                     0.0.1
 - JSON                          0.12.0
2 additional packages:
 - Compat                        0.25.2
 - DoubleDouble                  0.2.1
INFO: Testing Arrowhead
There are four tests for arrowhead matrices, a random matrix test and three
tests from the arrowhead paper [1] (see README for details)

tols = [100.0,100.0,100.0,100.0,100.0] = [100.0,100.0,100.0,100.0,100.0]

1st test - Random SymArrow matrix

A = Arrowhead.GenSymArrow(10,10) = [0.270934 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.896666; 0.0 0.134153 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.229428; 0.0 0.0 0.528377 0.0 0.0 0.0 0.0 0.0 0.0 0.235969; 0.0 0.0 0.0 0.575217 0.0 0.0 0.0 0.0 0.0 0.336366; 0.0 0.0 0.0 0.0 0.349029 0.0 0.0 0.0 0.0 0.144949; 0.0 0.0 0.0 0.0 0.0 0.755886 0.0 0.0 0.0 0.942789; 0.0 0.0 0.0 0.0 0.0 0.0 0.854131 0.0 0.0 0.735888; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.916269 0.0 0.322376; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.843408 0.0405632; 0.896666 0.229428 0.235969 0.336366 0.144949 0.942789 0.735888 0.322376 0.0405632 0.311969]
(U,Lambda) = eig(full(A)) = ([-1.174,0.140123,0.345903,0.426776,0.537597,0.598208,0.817915,0.843449,0.910054,2.09335],
[-0.453119 0.175254 0.249007 0.740709 -0.120951 0.163847 0.0636339 -0.00156929 -0.0260245 -0.327278; -0.128061 -0.982519 0.0225572 0.100934 -0.0204552 0.0295662 0.0130248 -0.000324098 -0.00548497 -0.0778937; -0.101212 0.015539 -0.0269226 -0.298992 -0.920525 0.20208 0.0316359 -0.000750418 -0.0114681 -0.100296; -0.14041 0.0197657 -0.0305383 -0.291716 0.321621 0.874905 0.0537992 -0.00125649 -0.0186343 -0.147379; -0.0694922 0.0177397 -0.965429 0.240011 -0.0276495 0.0347873 0.0119999 -0.000293749 -0.00479255 -0.0552741; -0.356708 0.0391456 -0.0478752 -0.368786 0.155355 -0.35757 0.590002 -0.0107883 -0.113437 -0.468885; -0.264939 0.0263506 -0.030145 -0.221679 0.0836247 -0.171958 -0.788752 0.0690266 -0.244091 -0.395001; -0.112613 0.0106194 -0.0117671 -0.0847845 0.0306225 -0.0606136 -0.127233 0.00443575 0.962222 -0.182176; -0.0146814 0.00147463 -0.00169745 -0.0125337 0.00477113 -0.00989305 -0.061764 -0.997544 -0.0112899 -0.0215862; 0.730181 -0.0255671 0.0208191 0.128736 -0.0359701 0.0598024 0.0388177 -0.00100198 -0.0185496 -0.665172])
Remedy 3 
Remedy 3 
Remedy 3 
ERROR: LoadError: MethodError: Cannot `convert` an object of type Array{Float64,1} to an object of type Float64
This may have arisen from a call to the constructor Float64(...),
since type constructors fall back to convert methods.
 in macro expansion at ./multidimensional.jl:352 [inlined]
 in macro expansion at ./cartesian.jl:64 [inlined]
 in macro expansion at ./multidimensional.jl:350 [inlined]
 in _unsafe_getindex! at ./multidimensional.jl:342 [inlined]
 in macro expansion at ./multidimensional.jl:300 [inlined]
 in _unsafe_getindex(::Base.LinearFast, ::Array{Float64,2}, ::Array{Any,1}, ::Array{Int64,1}) at ./multidimensional.jl:293
 in aheigall(::Arrowhead.SymArrow{Float64}, ::Array{Float64,1}) at /home/vagrant/.julia/v0.5/Arrowhead/src/arrowhead3.jl:540
 in include_from_node1(::String) at ./loading.jl:488
 in process_options(::Base.JLOptions) at ./client.jl:265
 in _start() at ./client.jl:321
while loading /home/vagrant/.julia/v0.5/Arrowhead/test/runtests.jl, in expression starting on line 218
==============================[ ERROR: Arrowhead ]==============================

failed process: Process(`/home/vagrant/julia/bin/julia -Cx86-64 -J/home/vagrant/julia/lib/julia/sys.so --compile=yes --depwarn=yes --check-bounds=yes --code-coverage=none --color=no --compilecache=yes /home/vagrant/.julia/v0.5/Arrowhead/test/runtests.jl`, ProcessExited(1)) [1]

================================================================================
ERROR: Arrowhead had test errors
 in #test#61(::Bool, ::Function, ::Array{AbstractString,1}) at ./pkg/entry.jl:748
 in (::Base.Pkg.Entry.#kw##test)(::Array{Any,1}, ::Base.Pkg.Entry.#test, ::Array{AbstractString,1}) at ./<missing>:0
 in (::Base.Pkg.Dir.##2#3{Array{Any,1},Base.Pkg.Entry.#test,Tuple{Array{AbstractString,1}}})() at ./pkg/dir.jl:31
 in cd(::Base.Pkg.Dir.##2#3{Array{Any,1},Base.Pkg.Entry.#test,Tuple{Array{AbstractString,1}}}, ::String) at ./file.jl:59
 in #cd#1(::Array{Any,1}, ::Function, ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N}) at ./pkg/dir.jl:31
 in (::Base.Pkg.Dir.#kw##cd)(::Array{Any,1}, ::Base.Pkg.Dir.#cd, ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N}) at ./<missing>:0
 in #test#3(::Bool, ::Function, ::String, ::Vararg{String,N}) at ./pkg/pkg.jl:258
 in test(::String, ::Vararg{String,N}) at ./pkg/pkg.jl:258
 in eval(::Module, ::Any) at ./boot.jl:234
 in process_options(::Base.JLOptions) at ./client.jl:242
 in _start() at ./client.jl:321

>>> End of log
