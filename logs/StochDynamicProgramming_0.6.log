>>> 'Pkg.add("StochDynamicProgramming")' log
INFO: Cloning cache of StochDynamicProgramming from https://github.com/JuliaOpt/StochDynamicProgramming.jl.git
INFO: Installing AbstractFFTs v0.1.0
INFO: Installing AxisAlgorithms v0.1.6
INFO: Installing BinDeps v0.6.0
INFO: Installing Calculus v0.2.2
INFO: Installing DataStructures v0.5.3
INFO: Installing DiffBase v0.2.0
INFO: Installing Distributions v0.14.0
INFO: Installing DualNumbers v0.3.0
INFO: Installing FFTW v0.0.2
INFO: Installing ForwardDiff v0.4.2
INFO: Installing Interpolations v0.6.2
INFO: Installing Iterators v0.3.1
INFO: Installing JuMP v0.17.1
INFO: Installing MathProgBase v0.6.4
INFO: Installing NaNMath v0.2.5
INFO: Installing PDMats v0.7.0
INFO: Installing ProgressMeter v0.3.4
INFO: Installing QuadGK v0.1.2
INFO: Installing Ratios v0.1.0
INFO: Installing ReverseDiffSparse v0.7.3
INFO: Installing Rmath v0.1.7
INFO: Installing SHA v0.3.3
INFO: Installing ShowItLikeYouBuildIt v0.0.1
INFO: Installing SpecialFunctions v0.1.1
INFO: Installing StatsBase v0.17.0
INFO: Installing StatsFuns v0.5.0
INFO: Installing StochDynamicProgramming v0.3.0
INFO: Installing URIParser v0.1.8
INFO: Installing WoodburyMatrices v0.2.2
INFO: Building FFTW
INFO: Building Rmath
INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of StochDynamicProgramming
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("StochDynamicProgramming")' log
Julia Version 0.6.0
Commit 9036443 (2017-06-19 13:05 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-121-generic #170-Ubuntu SMP Wed Jun 14 09:04:33 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1085.12109375 MB free)
Uptime: 67076.0 sec
Load Avg:  1.0029296875  1.001953125  1.0400390625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz    4465967 s       6064 s     202545 s     934162 s         87 s
#2  3499 MHz     928987 s        138 s     102474 s    5530972 s          2 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.6
2 required packages:
 - JSON                          0.12.0
 - StochDynamicProgramming       0.3.0
29 additional packages:
 - AbstractFFTs                  0.1.0
 - AxisAlgorithms                0.1.6
 - BinDeps                       0.6.0
 - Calculus                      0.2.2
 - Compat                        0.26.0
 - DataStructures                0.5.3
 - DiffBase                      0.2.0
 - Distributions                 0.14.0
 - DualNumbers                   0.3.0
 - FFTW                          0.0.2
 - ForwardDiff                   0.4.2
 - Interpolations                0.6.2
 - Iterators                     0.3.1
 - JuMP                          0.17.1
 - MathProgBase                  0.6.4
 - NaNMath                       0.2.5
 - PDMats                        0.7.0
 - ProgressMeter                 0.3.4
 - QuadGK                        0.1.2
 - Ratios                        0.1.0
 - ReverseDiffSparse             0.7.3
 - Rmath                         0.1.7
 - SHA                           0.3.3
 - ShowItLikeYouBuildIt          0.0.1
 - SpecialFunctions              0.1.1
 - StatsBase                     0.17.0
 - StatsFuns                     0.5.0
 - URIParser                     0.1.8
 - WoodburyMatrices              0.2.2
INFO: Computing test dependencies for StochDynamicProgramming...
INFO: Installing Cbc v0.3.2
INFO: Installing Clp v0.3.1
INFO: Installing FactCheck v0.4.3
INFO: Building Cbc
INFO: Testing StochDynamicProgramming

WARNING: deprecated syntax "abstract SPModel" at /home/vagrant/.julia/v0.6/StochDynamicProgramming/src/objects.jl:12.
Use "abstract type SPModel end" instead.

WARNING: deprecated syntax "typealias LevelOne Val{:LevelOne}" at /home/vagrant/.julia/v0.6/StochDynamicProgramming/src/objects.jl:145.
Use "const LevelOne = Val{:LevelOne}" instead.

WARNING: deprecated syntax "typealias ExactPruning Val{:Exact}" at /home/vagrant/.julia/v0.6/StochDynamicProgramming/src/objects.jl:146.
Use "const ExactPruning = Val{:Exact}" instead.

WARNING: deprecated syntax "typealias Territory Val{:Exact_Plus}" at /home/vagrant/.julia/v0.6/StochDynamicProgramming/src/objects.jl:147.
Use "const Territory = Val{:Exact_Plus}" instead.

WARNING: deprecated syntax "typealias NoPruning Val{:none}" at /home/vagrant/.julia/v0.6/StochDynamicProgramming/src/objects.jl:148.
Use "const NoPruning = Val{:none}" instead.

WARNING: deprecated syntax "abstract Result" at /home/vagrant/.julia/v0.6/FactCheck/src/FactCheck.jl:46.
Use "abstract type Result end" instead.
Probability functions
8 facts verified.
Utils functions
INFO: extract_vector_from_3Dmatrix is now deprecated. Use collect instead.
3 facts verified.
WARNING: is is deprecated, use === instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] is(::Void, ::Vararg{Void,N} where N) at ./deprecated.jl:31
 [3] @fact_throws(::Vararg{Any,N} where N) at /home/vagrant/.julia/v0.6/FactCheck/src/FactCheck.jl:307
 [4] include_from_node1(::String) at ./loading.jl:569
 [5] include(::String) at ./sysimg.jl:14
 [6] include_from_node1(::String) at ./loading.jl:569
 [7] include(::String) at ./sysimg.jl:14
 [8] process_options(::Base.JLOptions) at ./client.jl:305
 [9] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/StochDynamicProgramming/test/sddp.jl, in expression starting on line 7
SDDP algorithm: 1D case
  > Linear cost
WARNING: getvariable is deprecated, use getindex instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] getvariable(::JuMP.Model, ::Vararg{Any,N} where N) at ./deprecated.jl:31
 [3] #solve_one_step_one_alea#20(::Bool, ::Bool, ::Function, ::StochDynamicProgramming.LinearSPModel, ::StochDynamicProgramming.SDDPparameters, ::JuMP.Model, ::Int64, ::Array{Float64,1}, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/StochDynamicProgramming/src/oneStepOneAleaProblem.jl:55
 [4] (::StochDynamicProgramming.#kw##solve_one_step_one_alea)(::Array{Any,1}, ::StochDynamicProgramming.#solve_one_step_one_alea, ::StochDynamicProgramming.LinearSPModel, ::StochDynamicProgramming.SDDPparameters, ::JuMP.Model, ::Int64, ::Array{Float64,1}, ::Array{Float64,1}) at ./<missing>:0
 [5] backward_pass!(::StochDynamicProgramming.LinearSPModel, ::StochDynamicProgramming.SDDPparameters, ::Array{StochDynamicProgramming.PolyhedralFunction,1}, ::Array{JuMP.Model,1}, ::Array{Float64,3}, ::Array{StochDynamicProgramming.NoiseLaw,1}) at /home/vagrant/.julia/v0.6/StochDynamicProgramming/src/forwardBackwardIterations.jl:268
 [6] initialize_value_functions(::StochDynamicProgramming.LinearSPModel, ::StochDynamicProgramming.SDDPparameters) at /home/vagrant/.julia/v0.6/StochDynamicProgramming/src/SDDPoptimize.jl:348
 [7] solve_SDDP(::StochDynamicProgramming.LinearSPModel, ::StochDynamicProgramming.SDDPparameters, ::Int64) at /home/vagrant/.julia/v0.6/StochDynamicProgramming/src/SDDPoptimize.jl:41
 [8] (::##51#126{Int64,Int64,Int64})() at /home/vagrant/.julia/v0.6/StochDynamicProgramming/test/sddp.jl:66
 [9] context(::##51#126{Int64,Int64,Int64}, ::String) at /home/vagrant/.julia/v0.6/FactCheck/src/FactCheck.jl:475
 [10] (::##49#122)() at /home/vagrant/.julia/v0.6/StochDynamicProgramming/test/sddp.jl:64
 [11] facts(::##49#122, ::String) at /home/vagrant/.julia/v0.6/FactCheck/src/FactCheck.jl:449
 [12] include_from_node1(::String) at ./loading.jl:569
 [13] include(::String) at ./sysimg.jl:14
 [14] include_from_node1(::String) at ./loading.jl:569
 [15] include(::String) at ./sysimg.jl:14
 [16] process_options(::Base.JLOptions) at ./client.jl:305
 [17] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/StochDynamicProgramming/test/sddp.jl, in expression starting on line 7
WARNING: getvariable is deprecated, use getindex instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] getvariable(::JuMP.Model, ::Vararg{Any,N} where N) at ./deprecated.jl:31
 [3] #solve_one_step_one_alea#20(::Bool, ::Bool, ::Function, ::StochDynamicProgramming.LinearSPModel, ::StochDynamicProgramming.SDDPparameters, ::JuMP.Model, ::Int64, ::Array{Float64,1}, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/StochDynamicProgramming/src/oneStepOneAleaProblem.jl:56
 [4] (::StochDynamicProgramming.#kw##solve_one_step_one_alea)(::Array{Any,1}, ::StochDynamicProgramming.#solve_one_step_one_alea, ::StochDynamicProgramming.LinearSPModel, ::StochDynamicProgramming.SDDPparameters, ::JuMP.Model, ::Int64, ::Array{Float64,1}, ::Array{Float64,1}) at ./<missing>:0
 [5] backward_pass!(::StochDynamicProgramming.LinearSPModel, ::StochDynamicProgramming.SDDPparameters, ::Array{StochDynamicProgramming.PolyhedralFunction,1}, ::Array{JuMP.Model,1}, ::Array{Float64,3}, ::Array{StochDynamicProgramming.NoiseLaw,1}) at /home/vagrant/.julia/v0.6/StochDynamicProgramming/src/forwardBackwardIterations.jl:268
 [6] initialize_value_functions(::StochDynamicProgramming.LinearSPModel, ::StochDynamicProgramming.SDDPparameters) at /home/vagrant/.julia/v0.6/StochDynamicProgramming/src/SDDPoptimize.jl:348
 [7] solve_SDDP(::StochDynamicProgramming.LinearSPModel, ::StochDynamicProgramming.SDDPparameters, ::Int64) at /home/vagrant/.julia/v0.6/StochDynamicProgramming/src/SDDPoptimize.jl:41
 [8] (::##51#126{Int64,Int64,Int64})() at /home/vagrant/.julia/v0.6/StochDynamicProgramming/test/sddp.jl:66
 [9] context(::##51#126{Int64,Int64,Int64}, ::String) at /home/vagrant/.julia/v0.6/FactCheck/src/FactCheck.jl:475
 [10] (::##49#122)() at /home/vagrant/.julia/v0.6/StochDynamicProgramming/test/sddp.jl:64
 [11] facts(::##49#122, ::String) at /home/vagrant/.julia/v0.6/FactCheck/src/FactCheck.jl:449
 [12] include_from_node1(::String) at ./loading.jl:569
 [13] include(::String) at ./sysimg.jl:14
 [14] include_from_node1(::String) at ./loading.jl:569
 [15] include(::String) at ./sysimg.jl:14
 [16] process_options(::Base.JLOptions) at ./client.jl:305
 [17] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/StochDynamicProgramming/test/sddp.jl, in expression starting on line 7
WARNING: getvariable is deprecated, use getindex instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] getvariable(::JuMP.Model, ::Vararg{Any,N} where N) at ./deprecated.jl:31
 [3] #solve_one_step_one_alea#20(::Bool, ::Bool, ::Function, ::StochDynamicProgramming.LinearSPModel, ::StochDynamicProgramming.SDDPparameters, ::JuMP.Model, ::Int64, ::Array{Float64,1}, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/StochDynamicProgramming/src/oneStepOneAleaProblem.jl:57
 [4] (::StochDynamicProgramming.#kw##solve_one_step_one_alea)(::Array{Any,1}, ::StochDynamicProgramming.#solve_one_step_one_alea, ::StochDynamicProgramming.LinearSPModel, ::StochDynamicProgramming.SDDPparameters, ::JuMP.Model, ::Int64, ::Array{Float64,1}, ::Array{Float64,1}) at ./<missing>:0
 [5] backward_pass!(::StochDynamicProgramming.LinearSPModel, ::StochDynamicProgramming.SDDPparameters, ::Array{StochDynamicProgramming.PolyhedralFunction,1}, ::Array{JuMP.Model,1}, ::Array{Float64,3}, ::Array{StochDynamicProgramming.NoiseLaw,1}) at /home/vagrant/.julia/v0.6/StochDynamicProgramming/src/forwardBackwardIterations.jl:268
 [6] initialize_value_functions(::StochDynamicProgramming.LinearSPModel, ::StochDynamicProgramming.SDDPparameters) at /home/vagrant/.julia/v0.6/StochDynamicProgramming/src/SDDPoptimize.jl:348
 [7] solve_SDDP(::StochDynamicProgramming.LinearSPModel, ::StochDynamicProgramming.SDDPparameters, ::Int64) at /home/vagrant/.julia/v0.6/StochDynamicProgramming/src/SDDPoptimize.jl:41
 [8] (::##51#126{Int64,Int64,Int64})() at /home/vagrant/.julia/v0.6/StochDynamicProgramming/test/sddp.jl:66
 [9] context(::##51#126{Int64,Int64,Int64}, ::String) at /home/vagrant/.julia/v0.6/FactCheck/src/FactCheck.jl:475
 [10] (::##49#122)() at /home/vagrant/.julia/v0.6/StochDynamicProgramming/test/sddp.jl:64
 [11] facts(::##49#122, ::String) at /home/vagrant/.julia/v0.6/FactCheck/src/FactCheck.jl:449
 [12] include_from_node1(::String) at ./loading.jl:569
 [13] include(::String) at ./sysimg.jl:14
 [14] include_from_node1(::String) at ./loading.jl:569
 [15] include(::String) at ./sysimg.jl:14
 [16] process_options(::Base.JLOptions) at ./client.jl:305
 [17] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/StochDynamicProgramming/test/sddp.jl, in expression starting on line 7
WARNING: isfinite{T <: Number}(x::AbstractArray{T}) is deprecated, use isfinite.(x) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] isfinite(::Array{Float64,1}) at ./deprecated.jl:57
 [3] estimate_upper_bound(::StochDynamicProgramming.LinearSPModel, ::StochDynamicProgramming.SDDPparameters, ::Array{Float64,3}, ::Array{JuMP.Model,1}) at /home/vagrant/.julia/v0.6/StochDynamicProgramming/src/stoppingtest.jl:107
 [4] estimate_upper_bound(::StochDynamicProgramming.LinearSPModel, ::StochDynamicProgramming.SDDPparameters, ::Array{StochDynamicProgramming.PolyhedralFunction,1}, ::Array{JuMP.Model,1}, ::Int64) at /home/vagrant/.julia/v0.6/StochDynamicProgramming/src/stoppingtest.jl:98
 [5] (::##51#126{Int64,Int64,Int64})() at /home/vagrant/.julia/v0.6/StochDynamicProgramming/test/sddp.jl:79
 [6] context(::##51#126{Int64,Int64,Int64}, ::String) at /home/vagrant/.julia/v0.6/FactCheck/src/FactCheck.jl:475
 [7] (::##49#122)() at /home/vagrant/.julia/v0.6/StochDynamicProgramming/test/sddp.jl:64
 [8] facts(::##49#122, ::String) at /home/vagrant/.julia/v0.6/FactCheck/src/FactCheck.jl:449
 [9] include_from_node1(::String) at ./loading.jl:569
 [10] include(::String) at ./sysimg.jl:14
 [11] include_from_node1(::String) at ./loading.jl:569
 [12] include(::String) at ./sysimg.jl:14
 [13] process_options(::Base.JLOptions) at ./client.jl:305
 [14] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/StochDynamicProgramming/test/sddp.jl, in expression starting on line 7
Initialize cuts
Pass nÂ° 2	Lower-bound: -1.3440e+01	Time: 0.09s
Compute final upper-bound with 1000 scenarios...

############################################################
SDDP CONVERGENCE
- Exact lower bound:          -1.3440e+01 [Gap < -0.50%]
- Estimation of upper-bound:  -1.3443e+01
- Upper-bound's s.t.d:        1.1243e+00
- Confidence interval (95%):  [-1.3513e+01 , -1.3373e+01]
############################################################
  > Value functions calculation
  > Hotstart
  > Cuts pruning
  > Quadratic regularization
WARNING: getvariable is deprecated, use getindex instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] getvariable(::JuMP.Model, ::Vararg{Any,N} where N) at ./deprecated.jl:31
 [3] solve_one_step_one_alea(::StochDynamicProgramming.LinearSPModel, ::StochDynamicProgramming.SDDPparameters, ::JuMP.Model, ::Int64, ::Array{Float64,1}, ::Array{Float64,1}, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/StochDynamicProgramming/src/oneStepOneAleaProblem.jl:100
 [4] #forward_simulations#21(::Bool, ::Function, ::StochDynamicProgramming.LinearSPModel, ::StochDynamicProgramming.SDDPparameters, ::Array{JuMP.Model,1}, ::Array{Float64,3}) at /home/vagrant/.julia/v0.6/StochDynamicProgramming/src/forwardBackwardIterations.jl:128
 [5] (::StochDynamicProgramming.#kw##forward_simulations)(::Array{Any,1}, ::StochDynamicProgramming.#forward_simulations, ::StochDynamicProgramming.LinearSPModel, ::StochDynamicProgramming.SDDPparameters, ::Array{JuMP.Model,1}, ::Array{Float64,3}) at ./<missing>:0
 [6] forward_pass!(::StochDynamicProgramming.LinearSPModel, ::StochDynamicProgramming.SDDPparameters, ::Array{StochDynamicProgramming.PolyhedralFunction,1}, ::Array{JuMP.Model,1}) at /home/vagrant/.julia/v0.6/StochDynamicProgramming/src/forwardBackwardIterations.jl:44
 [7] run_SDDP!(::StochDynamicProgramming.LinearSPModel, ::StochDynamicProgramming.SDDPparameters, ::Array{StochDynamicProgramming.PolyhedralFunction,1}, ::Array{JuMP.Model,1}, ::Int64) at /home/vagrant/.julia/v0.6/StochDynamicProgramming/src/SDDPoptimize.jl:136
 [8] solve_SDDP(::StochDynamicProgramming.LinearSPModel, ::StochDynamicProgramming.SDDPparameters, ::Int64) at /home/vagrant/.julia/v0.6/StochDynamicProgramming/src/SDDPoptimize.jl:44
 [9] (::##105#180{StochDynamicProgramming.SDDPparameters})() at /home/vagrant/.julia/v0.6/FactCheck/src/FactCheck.jl:309
 [10] do_fact(::##105#180{StochDynamicProgramming.SDDPparameters}, ::Expr, ::Symbol, ::FactCheck.ResultMetadata) at /home/vagrant/.julia/v0.6/FactCheck/src/FactCheck.jl:334
 [11] macro expansion at /home/vagrant/.julia/v0.6/FactCheck/src/FactCheck.jl:308 [inlined]
 [12] #104 at /home/vagrant/.julia/v0.6/StochDynamicProgramming/test/sddp.jl:178 [inlined]
 [13] context(::##104#179{Clp.ClpMathProgSolverInterface.ClpSolver,Float64,Int64,Int64}, ::String) at /home/vagrant/.julia/v0.6/FactCheck/src/FactCheck.jl:475
 [14] (::##49#122)() at /home/vagrant/.julia/v0.6/StochDynamicProgramming/test/sddp.jl:171
 [15] facts(::##49#122, ::String) at /home/vagrant/.julia/v0.6/FactCheck/src/FactCheck.jl:449
 [16] include_from_node1(::String) at ./loading.jl:569
 [17] include(::String) at ./sysimg.jl:14
 [18] include_from_node1(::String) at ./loading.jl:569
 [19] include(::String) at ./sysimg.jl:14
 [20] process_options(::Base.JLOptions) at ./client.jl:305
 [21] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/StochDynamicProgramming/test/sddp.jl, in expression starting on line 7
  > Final cost
WARNING: getvariable is deprecated, use getindex instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] getvariable(::JuMP.Model, ::Vararg{Any,N} where N) at ./deprecated.jl:31
 [3] (::#fcost#182)(::StochDynamicProgramming.LinearSPModel, ::JuMP.Model) at /home/vagrant/.julia/v0.6/StochDynamicProgramming/test/sddp.jl:184
 [4] initialize_value_functions(::StochDynamicProgramming.LinearSPModel, ::StochDynamicProgramming.SDDPparameters) at /home/vagrant/.julia/v0.6/StochDynamicProgramming/src/SDDPoptimize.jl:340
 [5] solve_SDDP(::StochDynamicProgramming.LinearSPModel, ::StochDynamicProgramming.SDDPparameters, ::Int64) at /home/vagrant/.julia/v0.6/StochDynamicProgramming/src/SDDPoptimize.jl:41
 [6] (::##106#181)() at /home/vagrant/.julia/v0.6/StochDynamicProgramming/test/sddp.jl:189
 [7] context(::##106#181, ::String) at /home/vagrant/.julia/v0.6/FactCheck/src/FactCheck.jl:475
 [8] (::##49#122)() at /home/vagrant/.julia/v0.6/StochDynamicProgramming/test/sddp.jl:182
 [9] facts(::##49#122, ::String) at /home/vagrant/.julia/v0.6/FactCheck/src/FactCheck.jl:449
 [10] include_from_node1(::String) at ./loading.jl:569
 [11] include(::String) at ./sysimg.jl:14
 [12] include_from_node1(::String) at ./loading.jl:569
 [13] include(::String) at ./sysimg.jl:14
 [14] process_options(::Base.JLOptions) at ./client.jl:305
 [15] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/StochDynamicProgramming/test/sddp.jl, in expression starting on line 7
  > Piecewise linear cost
  > SMIP
  > Stopping criterion
  > Dump
  > Compare parameters
32 facts verified.
SDDP algorithm: 2D case
  > Linear cost
WARNING: getvariable is deprecated, use getindex instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] getvariable(::JuMP.Model, ::Vararg{Any,N} where N) at ./deprecated.jl:31
 [3] build_terminal_cost!(::StochDynamicProgramming.LinearSPModel, ::JuMP.Model, ::StochDynamicProgramming.PolyhedralFunction) at /home/vagrant/.julia/v0.6/StochDynamicProgramming/src/SDDPoptimize.jl:218
 [4] initialize_value_functions(::StochDynamicProgramming.LinearSPModel, ::StochDynamicProgramming.SDDPparameters) at /home/vagrant/.julia/v0.6/StochDynamicProgramming/src/SDDPoptimize.jl:336
 [5] solve_SDDP(::StochDynamicProgramming.LinearSPModel, ::StochDynamicProgramming.SDDPparameters, ::Int64) at /home/vagrant/.julia/v0.6/StochDynamicProgramming/src/SDDPoptimize.jl:41
 [6] (::##199#224{Int64,#dynamic#222,#cost#223,Array{StochDynamicProgramming.NoiseLaw,1}})() at /home/vagrant/.julia/v0.6/StochDynamicProgramming/test/sddp.jl:301
 [7] context(::##199#224{Int64,#dynamic#222,#cost#223,Array{StochDynamicProgramming.NoiseLaw,1}}, ::String) at /home/vagrant/.julia/v0.6/FactCheck/src/FactCheck.jl:475
 [8] (::##198#221)() at /home/vagrant/.julia/v0.6/StochDynamicProgramming/test/sddp.jl:291
 [9] facts(::##198#221, ::String) at /home/vagrant/.julia/v0.6/FactCheck/src/FactCheck.jl:449
 [10] include_from_node1(::String) at ./loading.jl:569
 [11] include(::String) at ./sysimg.jl:14
 [12] include_from_node1(::String) at ./loading.jl:569
 [13] include(::String) at ./sysimg.jl:14
 [14] process_options(::Base.JLOptions) at ./client.jl:305
 [15] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/StochDynamicProgramming/test/sddp.jl, in expression starting on line 248
WARNING: getvariable is deprecated, use getindex instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] getvariable(::JuMP.Model, ::Vararg{Any,N} where N) at ./deprecated.jl:31
 [3] #solve_one_step_one_alea#20(::Bool, ::Bool, ::Function, ::StochDynamicProgramming.LinearSPModel, ::StochDynamicProgramming.SDDPparameters, ::JuMP.Model, ::Int64, ::Array{Float64,1}, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/StochDynamicProgramming/src/oneStepOneAleaProblem.jl:55
 [4] (::StochDynamicProgramming.#kw##solve_one_step_one_alea)(::Array{Any,1}, ::StochDynamicProgramming.#solve_one_step_one_alea, ::StochDynamicProgramming.LinearSPModel, ::StochDynamicProgramming.SDDPparameters, ::JuMP.Model, ::Int64, ::Array{Float64,1}, ::Array{Float64,1}) at ./<missing>:0
 [5] backward_pass!(::StochDynamicProgramming.LinearSPModel, ::StochDynamicProgramming.SDDPparameters, ::Array{StochDynamicProgramming.PolyhedralFunction,1}, ::Array{JuMP.Model,1}, ::Array{Float64,3}, ::Array{StochDynamicProgramming.NoiseLaw,1}) at /home/vagrant/.julia/v0.6/StochDynamicProgramming/src/forwardBackwardIterations.jl:268
 [6] initialize_value_functions(::StochDynamicProgramming.LinearSPModel, ::StochDynamicProgramming.SDDPparameters) at /home/vagrant/.julia/v0.6/StochDynamicProgramming/src/SDDPoptimize.jl:348
 [7] solve_SDDP(::StochDynamicProgramming.LinearSPModel, ::StochDynamicProgramming.SDDPparameters, ::Int64) at /home/vagrant/.julia/v0.6/StochDynamicProgramming/src/SDDPoptimize.jl:41
 [8] (::##199#224{Int64,#dynamic#222,#cost#223,Array{StochDynamicProgramming.NoiseLaw,1}})() at /home/vagrant/.julia/v0.6/StochDynamicProgramming/test/sddp.jl:301
 [9] context(::##199#224{Int64,#dynamic#222,#cost#223,Array{StochDynamicProgramming.NoiseLaw,1}}, ::String) at /home/vagrant/.julia/v0.6/FactCheck/src/FactCheck.jl:475
 [10] (::##198#221)() at /home/vagrant/.julia/v0.6/StochDynamicProgramming/test/sddp.jl:291
 [11] facts(::##198#221, ::String) at /home/vagrant/.julia/v0.6/FactCheck/src/FactCheck.jl:449
 [12] include_from_node1(::String) at ./loading.jl:569
 [13] include(::String) at ./sysimg.jl:14
 [14] include_from_node1(::String) at ./loading.jl:569
 [15] include(::String) at ./sysimg.jl:14
 [16] process_options(::Base.JLOptions) at ./client.jl:305
 [17] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/StochDynamicProgramming/test/sddp.jl, in expression starting on line 248
WARNING: getvariable is deprecated, use getindex instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] getvariable(::JuMP.Model, ::Vararg{Any,N} where N) at ./deprecated.jl:31
 [3] #solve_one_step_one_alea#20(::Bool, ::Bool, ::Function, ::StochDynamicProgramming.LinearSPModel, ::StochDynamicProgramming.SDDPparameters, ::JuMP.Model, ::Int64, ::Array{Float64,1}, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/StochDynamicProgramming/src/oneStepOneAleaProblem.jl:56
 [4] (::StochDynamicProgramming.#kw##solve_one_step_one_alea)(::Array{Any,1}, ::StochDynamicProgramming.#solve_one_step_one_alea, ::StochDynamicProgramming.LinearSPModel, ::StochDynamicProgramming.SDDPparameters, ::JuMP.Model, ::Int64, ::Array{Float64,1}, ::Array{Float64,1}) at ./<missing>:0
 [5] backward_pass!(::StochDynamicProgramming.LinearSPModel, ::StochDynamicProgramming.SDDPparameters, ::Array{StochDynamicProgramming.PolyhedralFunction,1}, ::Array{JuMP.Model,1}, ::Array{Float64,3}, ::Array{StochDynamicProgramming.NoiseLaw,1}) at /home/vagrant/.julia/v0.6/StochDynamicProgramming/src/forwardBackwardIterations.jl:268
 [6] initialize_value_functions(::StochDynamicProgramming.LinearSPModel, ::StochDynamicProgramming.SDDPparameters) at /home/vagrant/.julia/v0.6/StochDynamicProgramming/src/SDDPoptimize.jl:348
 [7] solve_SDDP(::StochDynamicProgramming.LinearSPModel, ::StochDynamicProgramming.SDDPparameters, ::Int64) at /home/vagrant/.julia/v0.6/StochDynamicProgramming/src/SDDPoptimize.jl:41
 [8] (::##199#224{Int64,#dynamic#222,#cost#223,Array{StochDynamicProgramming.NoiseLaw,1}})() at /home/vagrant/.julia/v0.6/StochDynamicProgramming/test/sddp.jl:301
 [9] context(::##199#224{Int64,#dynamic#222,#cost#223,Array{StochDynamicProgramming.NoiseLaw,1}}, ::String) at /home/vagrant/.julia/v0.6/FactCheck/src/FactCheck.jl:475
 [10] (::##198#221)() at /home/vagrant/.julia/v0.6/StochDynamicProgramming/test/sddp.jl:291
 [11] facts(::##198#221, ::String) at /home/vagrant/.julia/v0.6/FactCheck/src/FactCheck.jl:449
 [12] include_from_node1(::String) at ./loading.jl:569
 [13] include(::String) at ./sysimg.jl:14
 [14] include_from_node1(::String) at ./loading.jl:569
 [15] include(::String) at ./sysimg.jl:14
 [16] process_options(::Base.JLOptions) at ./client.jl:305
 [17] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/StochDynamicProgramming/test/sddp.jl, in expression starting on line 248
WARNING: getvariable is deprecated, use getindex instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] getvariable(::JuMP.Model, ::Vararg{Any,N} where N) at ./deprecated.jl:31
 [3] #solve_one_step_one_alea#20(::Bool, ::Bool, ::Function, ::StochDynamicProgramming.LinearSPModel, ::StochDynamicProgramming.SDDPparameters, ::JuMP.Model, ::Int64, ::Array{Float64,1}, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/StochDynamicProgramming/src/oneStepOneAleaProblem.jl:57
 [4] (::StochDynamicProgramming.#kw##solve_one_step_one_alea)(::Array{Any,1}, ::StochDynamicProgramming.#solve_one_step_one_alea, ::StochDynamicProgramming.LinearSPModel, ::StochDynamicProgramming.SDDPparameters, ::JuMP.Model, ::Int64, ::Array{Float64,1}, ::Array{Float64,1}) at ./<missing>:0
 [5] backward_pass!(::StochDynamicProgramming.LinearSPModel, ::StochDynamicProgramming.SDDPparameters, ::Array{StochDynamicProgramming.PolyhedralFunction,1}, ::Array{JuMP.Model,1}, ::Array{Float64,3}, ::Array{StochDynamicProgramming.NoiseLaw,1}) at /home/vagrant/.julia/v0.6/StochDynamicProgramming/src/forwardBackwardIterations.jl:268
 [6] initialize_value_functions(::StochDynamicProgramming.LinearSPModel, ::StochDynamicProgramming.SDDPparameters) at /home/vagrant/.julia/v0.6/StochDynamicProgramming/src/SDDPoptimize.jl:348
 [7] solve_SDDP(::StochDynamicProgramming.LinearSPModel, ::StochDynamicProgramming.SDDPparameters, ::Int64) at /home/vagrant/.julia/v0.6/StochDynamicProgramming/src/SDDPoptimize.jl:41
 [8] (::##199#224{Int64,#dynamic#222,#cost#223,Array{StochDynamicProgramming.NoiseLaw,1}})() at /home/vagrant/.julia/v0.6/StochDynamicProgramming/test/sddp.jl:301
 [9] context(::##199#224{Int64,#dynamic#222,#cost#223,Array{StochDynamicProgramming.NoiseLaw,1}}, ::String) at /home/vagrant/.julia/v0.6/FactCheck/src/FactCheck.jl:475
 [10] (::##198#221)() at /home/vagrant/.julia/v0.6/StochDynamicProgramming/test/sddp.jl:291
 [11] facts(::##198#221, ::String) at /home/vagrant/.julia/v0.6/FactCheck/src/FactCheck.jl:449
 [12] include_from_node1(::String) at ./loading.jl:569
 [13] include(::String) at ./sysimg.jl:14
 [14] include_from_node1(::String) at ./loading.jl:569
 [15] include(::String) at ./sysimg.jl:14
 [16] process_options(::Base.JLOptions) at ./client.jl:305
 [17] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/StochDynamicProgramming/test/sddp.jl, in expression starting on line 248
WARNING: isfinite{T <: Number}(x::AbstractArray{T}) is deprecated, use isfinite.(x) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] isfinite(::Array{Float64,1}) at ./deprecated.jl:57
 [3] estimate_upper_bound(::StochDynamicProgramming.LinearSPModel, ::StochDynamicProgramming.SDDPparameters, ::Array{Float64,3}, ::Array{JuMP.Model,1}) at /home/vagrant/.julia/v0.6/StochDynamicProgramming/src/stoppingtest.jl:107
 [4] estimate_upper_bound(::StochDynamicProgramming.LinearSPModel, ::StochDynamicProgramming.SDDPparameters, ::Array{StochDynamicProgramming.PolyhedralFunction,1}, ::Array{JuMP.Model,1}, ::Int64) at /home/vagrant/.julia/v0.6/StochDynamicProgramming/src/stoppingtest.jl:98
 [5] (::##199#224{Int64,#dynamic#222,#cost#223,Array{StochDynamicProgramming.NoiseLaw,1}})() at /home/vagrant/.julia/v0.6/StochDynamicProgramming/test/sddp.jl:311
 [6] context(::##199#224{Int64,#dynamic#222,#cost#223,Array{StochDynamicProgramming.NoiseLaw,1}}, ::String) at /home/vagrant/.julia/v0.6/FactCheck/src/FactCheck.jl:475
 [7] (::##198#221)() at /home/vagrant/.julia/v0.6/StochDynamicProgramming/test/sddp.jl:291
 [8] facts(::##198#221, ::String) at /home/vagrant/.julia/v0.6/FactCheck/src/FactCheck.jl:449
 [9] include_from_node1(::String) at ./loading.jl:569
 [10] include(::String) at ./sysimg.jl:14
 [11] include_from_node1(::String) at ./loading.jl:569
 [12] include(::String) at ./sysimg.jl:14
 [13] process_options(::Base.JLOptions) at ./client.jl:305
 [14] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/StochDynamicProgramming/test/sddp.jl, in expression starting on line 248
  > Dump
10 facts verified.
Indexation for SDP
6 facts verified.
WARNING: is is deprecated, use === instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] is(::Void, ::Vararg{Void,N} where N) at ./deprecated.jl:31
 [3] @fact_throws(::Vararg{Any,N} where N) at /home/vagrant/.julia/v0.6/FactCheck/src/FactCheck.jl:307
 [4] include_from_node1(::String) at ./loading.jl:569
 [5] include(::String) at ./sysimg.jl:14
 [6] include_from_node1(::String) at ./loading.jl:569
 [7] include(::String) at ./sysimg.jl:14
 [8] process_options(::Base.JLOptions) at ./client.jl:305
 [9] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/StochDynamicProgramming/test/sdp.jl, in expression starting on line 31
SDP algorithm
  > Compare StochDynProgModel constructors
  > Solve and simulate using SDP
22 facts verified.
WARNING: is is deprecated, use === instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] is(::Void, ::Vararg{Void,N} where N) at ./deprecated.jl:31
 [3] @fact_throws(::Vararg{Any,N} where N) at /home/vagrant/.julia/v0.6/FactCheck/src/FactCheck.jl:307
 [4] include_from_node1(::String) at ./loading.jl:569
 [5] include(::String) at ./sysimg.jl:14
 [6] include_from_node1(::String) at ./loading.jl:569
 [7] include(::String) at ./sysimg.jl:14
 [8] process_options(::Base.JLOptions) at ./client.jl:305
 [9] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/StochDynamicProgramming/test/extensive_formulation.jl, in expression starting on line 6
SDDP algorithm: 1D case
  > Extensive solving
  > Unsolvable extensive formulation
WARNING: Not solved to optimality, status: Infeasible
2 facts verified.
INFO: StochDynamicProgramming tests passed
INFO: Removing Cbc v0.3.2
INFO: Removing Clp v0.3.1
INFO: Removing FactCheck v0.4.3

>>> End of log
