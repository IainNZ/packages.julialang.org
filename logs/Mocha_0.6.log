>>> 'Pkg.add("Mocha")' log
INFO: Cloning cache of Mocha from https://github.com/pluskid/Mocha.jl.git
INFO: Installing BinDeps v0.8.2
INFO: Installing Blosc v0.3.0
INFO: Installing FileIO v0.6.1
INFO: Installing HDF5 v0.8.8
INFO: Installing JLD v0.8.3
INFO: Installing LegacyStrings v0.3.0
INFO: Installing Memento v0.4.0
INFO: Installing Mocha v0.3.0
INFO: Installing SHA v0.5.2
INFO: Installing Syslogs v0.0.1
INFO: Installing URIParser v0.3.0
INFO: Building Blosc
INFO: Building HDF5
INFO: Building Mocha
Running `g++ -fPIC -Wall -O3 -shared -fopenmp -o libmochaext.so im2col.cpp pooling.cpp`
INFO: Package database updated

>>> 'Pkg.test("Mocha")' log
Julia Version 0.6.2
Commit d386e40c17 (2017-12-13 18:08 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-135-generic #184-Ubuntu SMP Wed Oct 18 11:55:51 UTC 2017 x86_64 x86_64
Memory: 2.93927001953125 GB (968.7421875 MB free)
Uptime: 27362.0 sec
Load Avg:  0.9970703125  0.9853515625  1.029296875
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz    1610108 s        106 s      81028 s     657544 s         29 s
#2  3499 MHz     489656 s       6432 s      56200 s    2136449 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.6
2 required packages:
 - JSON                          0.16.3
 - Mocha                         0.3.0
12 additional packages:
 - BinDeps                       0.8.2
 - Blosc                         0.3.0
 - Compat                        0.41.0
 - FileIO                        0.6.1
 - HDF5                          0.8.8
 - JLD                           0.8.3
 - LegacyStrings                 0.3.0
 - Memento                       0.4.0
 - Nullables                     0.0.1
 - SHA                           0.5.2
 - Syslogs                       0.0.1
 - URIParser                     0.3.0
INFO: Testing Mocha
Configuring Mocha...
 * CUDA       disabled by default
 * Native Ext disabled by default
Mocha configured, continue loading module...
DefaultBackend = Mocha.CPUBackend
-- Testing simple Adam solver call
[2017-12-23T07:59:05 | info | Mocha]: Constructing net TEST on Mocha.CPUBackend...
[2017-12-23T07:59:06 | info | Mocha]: Topological sorting 4 layers...
[2017-12-23T07:59:06 | info | Mocha]: Setup layers...
[2017-12-23T07:59:07 | info | Mocha]: Network constructed!
-- Testing simple SGD solver call
[2017-12-23T07:59:12 | info | Mocha]: Constructing net TEST on Mocha.CPUBackend...
[2017-12-23T07:59:12 | info | Mocha]: Topological sorting 4 layers...
[2017-12-23T07:59:12 | info | Mocha]: Setup layers...
[2017-12-23T07:59:12 | info | Mocha]: Network constructed!
-- Testing network topology with duplicated blobs
[2017-12-23T07:59:13 | info | Mocha]: Constructing net net on Mocha.CPUBackend...
[2017-12-23T07:59:13 | info | Mocha]: Topological sorting 1 layers...
[2017-12-23T07:59:13 | info | Mocha]: Constructing net net on Mocha.CPUBackend...
[2017-12-23T07:59:13 | info | Mocha]: Topological sorting 2 layers...
-- Testing network topology with missing blobs
[2017-12-23T07:59:13 | info | Mocha]: Constructing net net on Mocha.CPUBackend...
[2017-12-23T07:59:13 | info | Mocha]: Topological sorting 1 layers...
-- Testing network topology with circular dependency
[2017-12-23T07:59:13 | info | Mocha]: Constructing net net on Mocha.CPUBackend...
[2017-12-23T07:59:13 | info | Mocha]: Topological sorting 2 layers...
-- Testing network topology with multiple back-propagate path
    > Good blob sharing
[2017-12-23T07:59:13 | info | Mocha]: Constructing net net on Mocha.CPUBackend...
[2017-12-23T07:59:13 | info | Mocha]: Topological sorting 5 layers...
[2017-12-23T07:59:13 | info | Mocha]: Setup layers...
[2017-12-23T07:59:14 | info | Mocha]: Network constructed!
    > Bad blob sharing
[2017-12-23T07:59:14 | info | Mocha]: Constructing net net on Mocha.CPUBackend...
[2017-12-23T07:59:14 | info | Mocha]: Topological sorting 6 layers...
[2017-12-23T07:59:14 | info | Mocha]: Setup layers...
[2017-12-23T07:59:14 | info | Mocha]: Network constructed!
-- Testing network topology with dangling blob
    > Good case
[2017-12-23T07:59:14 | info | Mocha]: Constructing net net on Mocha.CPUBackend...
[2017-12-23T07:59:14 | info | Mocha]: Topological sorting 4 layers...
[2017-12-23T07:59:14 | info | Mocha]: Setup layers...
[2017-12-23T07:59:15 | info | Mocha]: Network constructed!
    > Bad case
[2017-12-23T07:59:15 | info | Mocha]: Constructing net net on Mocha.CPUBackend...
[2017-12-23T07:59:15 | info | Mocha]: Topological sorting 4 layers...
[2017-12-23T07:59:15 | info | Mocha]: Setup layers...
[2017-12-23T07:59:15 | info | Mocha]: Network constructed!
    > Good case 2
[2017-12-23T07:59:15 | info | Mocha]: Constructing net net on Mocha.CPUBackend...
[2017-12-23T07:59:15 | info | Mocha]: Topological sorting 5 layers...
[2017-12-23T07:59:15 | info | Mocha]: Setup layers...
[2017-12-23T07:59:15 | info | Mocha]: Network constructed!
    > Bad case 2
[2017-12-23T07:59:15 | info | Mocha]: Constructing net net on Mocha.CPUBackend...
[2017-12-23T07:59:15 | info | Mocha]: Topological sorting 6 layers...
[2017-12-23T07:59:15 | info | Mocha]: Setup layers...
[2017-12-23T07:59:15 | info | Mocha]: Network constructed!
-- Testing gradients on simple network (example for gradient checking code)
[2017-12-23T07:59:15 | info | Mocha]: Constructing net TEST on Mocha.CPUBackend...
[2017-12-23T07:59:15 | info | Mocha]: Topological sorting 4 layers...
[2017-12-23T07:59:15 | info | Mocha]: Setup layers...
[2017-12-23T07:59:15 | info | Mocha]: Network constructed!
-- Testing simple reference counting...
-- Testing glob Utilities
-- Testing RawBLAS{Float32} Utilities
-- Testing RawBLAS{Float64} Utilities
-- Testing blob reshape on Mocha.CPUBackend{Float32}...
-- Testing blob reshape on Mocha.CPUBackend{Float64}...
-- Testing ReLU neuron on Mocha.CPUBackend{Float32}...
    > Forward
    > Backward
-- Testing ReLU neuron on Mocha.CPUBackend{Float64}...
    > Forward
    > Backward
-- Testing Sigmoid neuron on Mocha.CPUBackend{Float32}...
    > Forward
    > Backward
-- Testing Sigmoid neuron on Mocha.CPUBackend{Float64}...
    > Forward
    > Backward
-- Testing Tanh neuron on Mocha.CPUBackend{Float32}...
    > Forward
    > Backward
-- Testing Tanh neuron on Mocha.CPUBackend{Float64}...
    > Forward
    > Backward
-- Testing Exponential neuron on Mocha.CPUBackend{Float32}...
    > Forward
    > Backward
-- Testing Exponential neuron on Mocha.CPUBackend{Float64}...
    > Forward
    > Backward
-- Testing L2 regularizer on Mocha.CPUBackend{Float32}...
-- Testing L2 regularizer on Mocha.CPUBackend{Float64}...
-- Testing L1 regularizer on Mocha.CPUBackend{Float32}...
-- Testing L1 regularizer on Mocha.CPUBackend{Float64}...
-- Testing L2 constraint on Mocha.CPUBackend{Float32}...
-- Testing L2 constraint on Mocha.CPUBackend{Float64}...
-- Testing DataTransformers on Mocha.CPUBackend{Float32}...
    > SubMean
    > Scale
-- Testing DataTransformers on Mocha.CPUBackend{Float64}...
    > SubMean
    > Scale
-- Testing TiedInnerProductLayer on Mocha.CPUBackend{Float32}...
    > Setup
[2017-12-23T07:59:36 | info | Mocha]: Constructing net test-tied-ip on Mocha.CPUBackend...
[2017-12-23T07:59:36 | info | Mocha]: Topological sorting 3 layers...
[2017-12-23T07:59:36 | info | Mocha]: Setup layers...
[2017-12-23T07:59:36 | info | Mocha]: Network constructed!
    > Forward
    > Backward
-- Testing TiedInnerProductLayer on Mocha.CPUBackend{Float64}...
    > Setup
[2017-12-23T07:59:37 | info | Mocha]: Constructing net test-tied-ip on Mocha.CPUBackend...
[2017-12-23T07:59:37 | info | Mocha]: Topological sorting 3 layers...
[2017-12-23T07:59:37 | info | Mocha]: Setup layers...
[2017-12-23T07:59:37 | info | Mocha]: Network constructed!
    > Forward
    > Backward
-- Testing SquareLossLayer on Mocha.CPUBackend{Float32}...
    > (8, 8, 9, 11, 11)
-- Testing SquareLossLayer on Mocha.CPUBackend{Float64}...
    > (9, 10)
-- Testing SplitLayer on Mocha.CPUBackend{Float32}...
    > Setup
    > Forward
    > Backward
-- Testing SplitLayer on Mocha.CPUBackend{Float64}...
    > Setup
    > Forward
    > Backward
-- Testing SoftmaxLossLayer on Mocha.CPUBackend{Float64} ...
    > (9, 9) (operate on dimension 1)
    > Forward
    > Backward
-- Testing SoftmaxLossLayer on Mocha.CPUBackend{Float64} ...
    > (8, 10, 9, 9) (operate on dimension 1)
    > Forward
    > Backward
-- Testing SoftmaxLossLayer on Mocha.CPUBackend{Float64} ...
    > (7, 6, 7, 9, 11) (operate on dimension 1)
    > Forward
    > Backward
-- Testing SoftmaxLossLayer on Mocha.CPUBackend{Float64} (with weights)...
    > (6, 7) (operate on dimension 1)
    > Forward
    > Backward
-- Testing SoftmaxLossLayer on Mocha.CPUBackend{Float64} (with weights)...
    > (6, 8, 8, 10) (operate on dimension 3)
    > Forward
    > Backward
-- Testing SoftmaxLossLayer on Mocha.CPUBackend{Float64} (with weights)...
    > (8, 8, 10, 9, 10) (operate on dimension 4)
    > Forward
    > Backward
-- Testing SoftmaxLossLayer on Mocha.CPUBackend{Float32} ...
    > (9, 7) (operate on dimension 1)
    > Forward
    > Backward
-- Testing SoftmaxLossLayer on Mocha.CPUBackend{Float32} ...
    > (10, 9, 8, 9) (operate on dimension 1)
    > Forward
    > Backward
-- Testing SoftmaxLossLayer on Mocha.CPUBackend{Float32} ...
    > (9, 6, 8, 6, 7) (operate on dimension 4)
    > Forward
    > Backward
-- Testing SoftmaxLossLayer on Mocha.CPUBackend{Float32} (with weights)...
    > (6, 11) (operate on dimension 1)
    > Forward
    > Backward
-- Testing SoftmaxLossLayer on Mocha.CPUBackend{Float32} (with weights)...
    > (7, 6, 11, 7) (operate on dimension 3)
    > Forward
    > Backward
-- Testing SoftmaxLossLayer on Mocha.CPUBackend{Float32} (with weights)...
    > (8, 7, 11, 10, 11) (operate on dimension 4)
    > Forward
    > Backward
-- Testing SoftmaxLayer on Mocha.CPUBackend{Float64}...
    > 2-dimensional input, normalize along dimension 1
    > Forward
    > Backward
-- Testing SoftmaxLayer on Mocha.CPUBackend{Float64}...
    > 4-dimensional input, normalize along dimension 1
    > Forward
    > Backward
-- Testing SoftmaxLayer on Mocha.CPUBackend{Float64}...
    > 5-dimensional input, normalize along dimension 1
    > Forward
    > Backward
-- Testing SoftmaxLayer on Mocha.CPUBackend{Float32}...
    > 2-dimensional input, normalize along dimension 1
    > Forward
    > Backward
-- Testing SoftmaxLayer on Mocha.CPUBackend{Float32}...
    > 4-dimensional input, normalize along dimension 1
    > Forward
    > Backward
-- Testing SoftmaxLayer on Mocha.CPUBackend{Float32}...
    > 5-dimensional input, normalize along dimension 4
    > Forward
    > Backward
-- Testing SoftlabelSoftmaxLossLayer on Mocha.CPUBackend{Float64}...
    > (11, 7) (operate on dimension 1)
    > Forward
    > Backward
-- Testing SoftlabelSoftmaxLossLayer on Mocha.CPUBackend{Float64}...
    > (6, 9, 7, 8) (operate on dimension 3)
    > Forward
    > Backward
-- Testing SoftlabelSoftmaxLossLayer on Mocha.CPUBackend{Float64}...
    > (11, 8, 11, 8, 10) (operate on dimension 3)
    > Forward
    > Backward
-- Testing SoftlabelSoftmaxLossLayer on Mocha.CPUBackend{Float32}...
    > (7, 9) (operate on dimension 1)
    > Forward
    > Backward
-- Testing SoftlabelSoftmaxLossLayer on Mocha.CPUBackend{Float32}...
    > (9, 7, 8, 8) (operate on dimension 1)
    > Forward
    > Backward
-- Testing SoftlabelSoftmaxLossLayer on Mocha.CPUBackend{Float32}...
    > (11, 6, 7, 11, 8) (operate on dimension 1)
    > Forward
    > Backward
-- Testing convolution layer with shared param on Mocha.CPUBackend{Float64}...
[2017-12-23T08:00:11 | info | Mocha]: Constructing net test-shared-params on Mocha.CPUBackend...
[2017-12-23T08:00:11 | info | Mocha]: Topological sorting 5 layers...
[2017-12-23T08:00:11 | info | Mocha]: Setup layers...
[2017-12-23T08:00:12 | info | Mocha]: Network constructed!
-- Testing inner-product layer with shared param on Mocha.CPUBackend{Float64}...
[2017-12-23T08:00:12 | info | Mocha]: Constructing net test-shared-params on Mocha.CPUBackend...
[2017-12-23T08:00:12 | info | Mocha]: Topological sorting 5 layers...
[2017-12-23T08:00:12 | info | Mocha]: Setup layers...
[2017-12-23T08:00:12 | info | Mocha]: Network constructed!
-- Testing convolution layer with shared param on Mocha.CPUBackend{Float32}...
[2017-12-23T08:00:12 | info | Mocha]: Constructing net test-shared-params on Mocha.CPUBackend...
[2017-12-23T08:00:12 | info | Mocha]: Topological sorting 5 layers...
[2017-12-23T08:00:12 | info | Mocha]: Setup layers...
[2017-12-23T08:00:12 | info | Mocha]: Network constructed!
-- Testing inner-product layer with shared param on Mocha.CPUBackend{Float32}...
[2017-12-23T08:00:13 | info | Mocha]: Constructing net test-shared-params on Mocha.CPUBackend...
[2017-12-23T08:00:13 | info | Mocha]: Topological sorting 5 layers...
[2017-12-23T08:00:13 | info | Mocha]: Setup layers...
[2017-12-23T08:00:13 | info | Mocha]: Network constructed!
-- Testing ReshapeLayer on Mocha.CPUBackend{Float64}...
    > Setup
    > Forward
    > Backward
-- Testing ReshapeLayer on Mocha.CPUBackend{Float32}...
    > Setup
    > Forward
    > Backward
-- Testing RandomNormal Layer on Mocha.CPUBackend{Float32}...
    > Random output 2[3, 2]
-- Testing RandomNormal Layer on Mocha.CPUBackend{Float64}...
    > Random output 4[1, 3, 2, 3]
-- Testing RandomMask on Mocha.CPUBackend{Float64}
    > 3 input blobs with tensor dims [2, 2, 2]
    > Setup
    > Forward
    > Backward
-- Testing RandomMask on Mocha.CPUBackend{Float32}
    > 3 input blobs with tensor dims [3, 1, 3]
    > Setup
    > Forward
    > Backward
-- Testing PowerLayer on Mocha.CPUBackend{Float32}...
    > scale=0.03, shift=0.76, power=2, tensor_dim=1
    > scale=0, shift=0.21, power=6, tensor_dim=3
    > scale=0.79, shift=0.06, power=2, tensor_dim=3
    > scale=0.24, shift=0, power=3, tensor_dim=2
    > scale=0.9, shift=0.73, power=4, tensor_dim=6
    > scale=0.05, shift=0.29, power=0, tensor_dim=2
    > scale=0.01, shift=0.49, power=1, tensor_dim=5
    > scale=0.2, shift=0.13, power=-1, tensor_dim=1
-- Testing PowerLayer on Mocha.CPUBackend{Float64}...
    > scale=0.89, shift=0.76, power=2, tensor_dim=5
    > scale=0, shift=0.85, power=4, tensor_dim=5
    > scale=0.89, shift=0.44, power=2, tensor_dim=4
    > scale=0.3, shift=0, power=3, tensor_dim=2
    > scale=0.66, shift=0.81, power=4, tensor_dim=1
    > scale=0.6, shift=0.89, power=0, tensor_dim=4
    > scale=0.96, shift=0.57, power=1, tensor_dim=6
    > scale=0.45, shift=0.89, power=-1, tensor_dim=3
-- Testing Pooling(Mocha.Pooling.Max)  on Mocha.CPUBackend{Float64}...
    > Setup
    > Forward
    > Backward
-- Testing Pooling(Mocha.Pooling.Mean)  on Mocha.CPUBackend{Float64}...
    > Setup
    > Forward
    > Backward
-- Testing Pooling(Mocha.Pooling.Max) with padding on Mocha.CPUBackend{Float64}...
    > Setup
    > Forward
    > Backward
-- Testing Pooling(Mocha.Pooling.Mean) with padding on Mocha.CPUBackend{Float64}...
    > Setup
    > Forward
    > Backward
-- Testing Pooling(Mocha.Pooling.Max)  on Mocha.CPUBackend{Float32}...
    > Setup
    > Forward
    > Backward
-- Testing Pooling(Mocha.Pooling.Mean)  on Mocha.CPUBackend{Float32}...
    > Setup
    > Forward
    > Backward
-- Testing Pooling(Mocha.Pooling.Max) with padding on Mocha.CPUBackend{Float32}...
    > Setup
    > Forward
    > Backward
-- Testing Pooling(Mocha.Pooling.Mean) with padding on Mocha.CPUBackend{Float32}...
    > Setup
    > Forward
    > Backward
-- Testing MultinomialLogisticLossLayer{equal,local} on Mocha.CPUBackend{Float64}...
    > [10, 8] (operate on dimension 1)
-- Testing MultinomialLogisticLossLayer{equal,local} on Mocha.CPUBackend{Float64}...
    > [6, 8, 8, 9] (operate on dimension 3)
-- Testing MultinomialLogisticLossLayer{equal,local} on Mocha.CPUBackend{Float64}...
    > [10, 6, 7, 6, 9] (operate on dimension 4)
-- Testing MultinomialLogisticLossLayer{local,local} on Mocha.CPUBackend{Float64}...
    > [11, 6] (operate on dimension 1)
-- Testing MultinomialLogisticLossLayer{local,local} on Mocha.CPUBackend{Float64}...
    > [10, 10, 10, 8] (operate on dimension 3)
-- Testing MultinomialLogisticLossLayer{local,local} on Mocha.CPUBackend{Float64}...
    > [6, 7, 10, 7, 10] (operate on dimension 4)
-- Testing MultinomialLogisticLossLayer{global,global} on Mocha.CPUBackend{Float64}...
    > [9, 8] (operate on dimension 1)
-- Testing MultinomialLogisticLossLayer{global,global} on Mocha.CPUBackend{Float64}...
    > [6, 11, 7, 7] (operate on dimension 3)
-- Testing MultinomialLogisticLossLayer{global,global} on Mocha.CPUBackend{Float64}...
    > [10, 10, 7, 9, 10] (operate on dimension 4)
-- Testing MultinomialLogisticLossLayer{global,local} on Mocha.CPUBackend{Float64}...
    > [6, 8] (operate on dimension 1)
-- Testing MultinomialLogisticLossLayer{global,local} on Mocha.CPUBackend{Float64}...
    > [10, 11, 8, 9] (operate on dimension 3)
-- Testing MultinomialLogisticLossLayer{global,local} on Mocha.CPUBackend{Float64}...
    > [10, 8, 6, 10, 6] (operate on dimension 4)
-- Testing MultinomialLogisticLossLayer{no,no} on Mocha.CPUBackend{Float64}...
    > [9, 8] (operate on dimension 1)
-- Testing MultinomialLogisticLossLayer{no,no} on Mocha.CPUBackend{Float64}...
    > [9, 6, 6, 9] (operate on dimension 2)
-- Testing MultinomialLogisticLossLayer{no,no} on Mocha.CPUBackend{Float64}...
    > [11, 10, 7, 8, 11] (operate on dimension 4)
-- Testing MultinomialLogisticLossLayer{equal,local} on Mocha.CPUBackend{Float32}...
    > [9, 8] (operate on dimension 1)
-- Testing MultinomialLogisticLossLayer{equal,local} on Mocha.CPUBackend{Float32}...
    > [6, 10, 11, 10] (operate on dimension 3)
-- Testing MultinomialLogisticLossLayer{equal,local} on Mocha.CPUBackend{Float32}...
    > [8, 7, 8, 7, 10] (operate on dimension 4)
-- Testing MultinomialLogisticLossLayer{local,local} on Mocha.CPUBackend{Float32}...
    > [9, 7] (operate on dimension 1)
-- Testing MultinomialLogisticLossLayer{local,local} on Mocha.CPUBackend{Float32}...
    > [6, 11, 10, 6] (operate on dimension 3)
-- Testing MultinomialLogisticLossLayer{local,local} on Mocha.CPUBackend{Float32}...
    > [10, 6, 6, 10, 8] (operate on dimension 4)
-- Testing MultinomialLogisticLossLayer{global,global} on Mocha.CPUBackend{Float32}...
    > [10, 11] (operate on dimension 1)
-- Testing MultinomialLogisticLossLayer{global,global} on Mocha.CPUBackend{Float32}...
    > [11, 8, 9, 9] (operate on dimension 3)
-- Testing MultinomialLogisticLossLayer{global,global} on Mocha.CPUBackend{Float32}...
    > [6, 9, 11, 7, 9] (operate on dimension 4)
-- Testing MultinomialLogisticLossLayer{global,local} on Mocha.CPUBackend{Float32}...
    > [11, 10] (operate on dimension 1)
-- Testing MultinomialLogisticLossLayer{global,local} on Mocha.CPUBackend{Float32}...
    > [9, 8, 10, 10] (operate on dimension 3)
-- Testing MultinomialLogisticLossLayer{global,local} on Mocha.CPUBackend{Float32}...
    > [8, 7, 10, 8, 11] (operate on dimension 4)
-- Testing MultinomialLogisticLossLayer{no,no} on Mocha.CPUBackend{Float32}...
    > [10, 7] (operate on dimension 1)
-- Testing MultinomialLogisticLossLayer{no,no} on Mocha.CPUBackend{Float32}...
    > [11, 6, 6, 11] (operate on dimension 3)
-- Testing MultinomialLogisticLossLayer{no,no} on Mocha.CPUBackend{Float32}...
    > [6, 7, 11, 10, 6] (operate on dimension 1)
-- Testing Memory Output Layer on Mocha.CPUBackend{Float32}...
    > (5, 7)
-- Testing Memory Output Layer on Mocha.CPUBackend{Float64}...
    > (3, 1, 1)
-- Testing Memory Data Layer on Mocha.CPUBackend{Float32}...
    > (6, 3, 6, 5, 4, 2)
-- Testing Memory Data Layer on Mocha.CPUBackend{Float64}...
    > (5, 1, 1)
-- Testing LRN(Mocha.LRNMode.AcrossChannel) on Mocha.CPUBackend{Float32}...
    > Setup with dims (9, 10, 9, 9)
    > Forward
    > Backward
-- Testing LRN(Mocha.LRNMode.WithinChannel) on Mocha.CPUBackend{Float32}...
    > Setup with dims (8, 9, 9, 7)
    > Forward
    > Backward
-- Testing LRN(Mocha.LRNMode.AcrossChannel) on Mocha.CPUBackend{Float64}...
    > Setup with dims (10, 6, 6, 10)
    > Forward
    > Backward
-- Testing LRN(Mocha.LRNMode.WithinChannel) on Mocha.CPUBackend{Float64}...
    > Setup with dims (9, 6, 11, 8)
    > Forward
    > Backward
-- Testing InplaceLayer on Mocha.CPUBackend{Float64}...
    > Setup
[2017-12-23T08:01:05 | info | Mocha]: Constructing net test-inplace on Mocha.CPUBackend...
[2017-12-23T08:01:05 | info | Mocha]: Topological sorting 5 layers...
[2017-12-23T08:01:05 | info | Mocha]: Setup layers...
[2017-12-23T08:01:05 | info | Mocha]: Network constructed!
    > Forward
    > Backward
-- Testing InplaceLayer on Mocha.CPUBackend{Float32}...
    > Setup
[2017-12-23T08:01:05 | info | Mocha]: Constructing net test-inplace on Mocha.CPUBackend...
[2017-12-23T08:01:05 | info | Mocha]: Topological sorting 5 layers...
[2017-12-23T08:01:05 | info | Mocha]: Setup layers...
[2017-12-23T08:01:05 | info | Mocha]: Network constructed!
    > Forward
    > Backward
-- Testing InnerProductLayer on Mocha.CPUBackend{Float32}...
    > Setup
    > Forward
    > Backward
-- Testing InnerProductLayer on Mocha.CPUBackend{Float64}...
    > Setup
    > Forward
    > Backward
-- Testing Index2OnehotLayer on Mocha.CPUBackend{Float32}...
    > 2-dimensional input, expanding along dimension 1
-- Testing Index2OnehotLayer on Mocha.CPUBackend{Float32}...
    > 4-dimensional input, expanding along dimension 3
-- Testing Index2OnehotLayer on Mocha.CPUBackend{Float32}...
    > 5-dimensional input, expanding along dimension 1
-- Testing Index2OnehotLayer on Mocha.CPUBackend{Float64}...
    > 2-dimensional input, expanding along dimension 1
-- Testing Index2OnehotLayer on Mocha.CPUBackend{Float64}...
    > 4-dimensional input, expanding along dimension 3
-- Testing Index2OnehotLayer on Mocha.CPUBackend{Float64}...
    > 5-dimensional input, expanding along dimension 1
-- Testing IdentityLayer on Mocha.CPUBackend{Float32}...
    > Setup
    > Forward
-- Testing IdentityLayer on Mocha.CPUBackend{Float64}...
    > Setup
    > Forward
-- Testing HingeLossLayer on Mocha.CPUBackend{Float32}...
    > (6, 8, 10)
-- Testing HingeLossLayer on Mocha.CPUBackend{Float64}...
    > (10, 6, 10, 7, 9)
-- Testing HDF5 Output Layer on Mocha.CPUBackend{Float32}...
    > (3, 5, 1, 8, 6)
[2017-12-23T08:01:11 | warn | Mocha]: HDF5OutputLayer: output file '/tmp/Mocha-18128-1tv3iT8gK9GQIwXQYBbRYyWi9NaCvjdn.hdf5' already exists, overwriting[warn | Mocha]: HDF5OutputLayer: output file '/tmp/Mocha-18128-1tv3iT8gK9GQIwXQYBbRYyWi9NaCvjdn.hdf5' already exists, overwriting

-- Testing HDF5 Output Layer on Mocha.CPUBackend{Float64}...
    > (8, 2, 2, 1)
[2017-12-23T08:01:12 | warn | Mocha]: HDF5OutputLayer: output file '/tmp/Mocha-18128-zOMbOxRo7fLf4VhanD1t2WfBEnBrSKUX.hdf5' already exists, overwriting[warn | Mocha]: HDF5OutputLayer: output file '/tmp/Mocha-18128-zOMbOxRo7fLf4VhanD1t2WfBEnBrSKUX.hdf5' already exists, overwriting

-- Testing  HDF5 Data Layer on Mocha.CPUBackend{Float32}...
    > (6,)
-- Testing (Async) HDF5 Data Layer on Mocha.CPUBackend{Float32}...
    > (4, 3, 3)
[2017-12-23T08:01:15 | info | Mocha]: AsyncHDF5DataLayer: Stopping IO task...
[2017-12-23T08:01:15 | info | Mocha]: AsyncHDF5DataLayer: IO Task reaching the end...
-- Testing  HDF5 Data Layer on Mocha.CPUBackend{Float64}...
    > (5, 2, 3, 5, 7)
-- Testing (Async) HDF5 Data Layer on Mocha.CPUBackend{Float64}...
    > (3, 2, 4, 6, 2, 5)
[2017-12-23T08:01:18 | info | Mocha]: AsyncHDF5DataLayer: Stopping IO task...
[2017-12-23T08:01:18 | info | Mocha]: AsyncHDF5DataLayer: IO Task reaching the end...
-- Testing  HDF5 Data Layer (shuffle,n=6,b=4) on Mocha.CPUBackend{Float32}...
-- Testing (Async) HDF5 Data Layer (shuffle,n=6,b=4) on Mocha.CPUBackend{Float32}...
[2017-12-23T08:01:19 | info | Mocha]: AsyncHDF5DataLayer: Stopping IO task...
[2017-12-23T08:01:19 | info | Mocha]: AsyncHDF5DataLayer: IO Task reaching the end...
-- Testing  HDF5 Data Layer (shuffle,n=4,b=6) on Mocha.CPUBackend{Float32}...
-- Testing (Async) HDF5 Data Layer (shuffle,n=4,b=6) on Mocha.CPUBackend{Float32}...
[2017-12-23T08:01:19 | info | Mocha]: AsyncHDF5DataLayer: Stopping IO task...
[2017-12-23T08:01:19 | info | Mocha]: AsyncHDF5DataLayer: IO Task reaching the end...
-- Testing  HDF5 Data Layer (shuffle,n=6,b=4) on Mocha.CPUBackend{Float64}...
-- Testing (Async) HDF5 Data Layer (shuffle,n=6,b=4) on Mocha.CPUBackend{Float64}...
[2017-12-23T08:01:19 | info | Mocha]: AsyncHDF5DataLayer: Stopping IO task...
[2017-12-23T08:01:19 | info | Mocha]: AsyncHDF5DataLayer: IO Task reaching the end...
-- Testing  HDF5 Data Layer (shuffle,n=4,b=6) on Mocha.CPUBackend{Float64}...
-- Testing (Async) HDF5 Data Layer (shuffle,n=4,b=6) on Mocha.CPUBackend{Float64}...
[2017-12-23T08:01:19 | info | Mocha]: AsyncHDF5DataLayer: Stopping IO task...
[2017-12-23T08:01:19 | info | Mocha]: AsyncHDF5DataLayer: IO Task reaching the end...
-- Testing GaussianKLLossLayer on Mocha.CPUBackend{Float32}...
    > (9, 9, 9, 11, 10)
-- Testing GaussianKLLossLayer on Mocha.CPUBackend{Float64}...
    > (9, 7, 7)
-- Testing ElementWiseLayer{Mocha.ElementWiseFunctors.Add()} on Mocha.CPUBackend{Float32}...
    > (7, 8, 7, 4, 3, 8)
-- Testing ElementWiseLayer{Mocha.ElementWiseFunctors.Subtract()} on Mocha.CPUBackend{Float32}...
    > (2, 8, 8, 6)
-- Testing ElementWiseLayer{Mocha.ElementWiseFunctors.Multiply()} on Mocha.CPUBackend{Float32}...
    > (8, 5, 4, 6, 5)
-- Testing ElementWiseLayer{Mocha.ElementWiseFunctors.Divide()} on Mocha.CPUBackend{Float32}...
    > (6, 6)
-- Testing ElementWiseLayer{Mocha.ElementWiseFunctors.Add()} on Mocha.CPUBackend{Float64}...
    > (4, 4, 7, 5, 1, 5)
-- Testing ElementWiseLayer{Mocha.ElementWiseFunctors.Subtract()} on Mocha.CPUBackend{Float64}...
    > (7, 3, 6)
-- Testing ElementWiseLayer{Mocha.ElementWiseFunctors.Multiply()} on Mocha.CPUBackend{Float64}...
    > (7, 3)
-- Testing ElementWiseLayer{Mocha.ElementWiseFunctors.Divide()} on Mocha.CPUBackend{Float64}...
    > (3, 2, 2, 7)
-- Testing Dropout on Mocha.CPUBackend{Float64}...
    > (8, 7, 6, 1)
    > Setup
    > Forward
    > Backward
-- Testing Dropout on Mocha.CPUBackend{Float32}...
    > (3, 8, 5, 4)
    > Setup
    > Forward
    > Backward
-- Testing CropLayer on Mocha.CPUBackend{Float64} ...
    > Setup
    > Forward
-- Testing CropLayer on Mocha.CPUBackend{Float64} with mirror...
    > Setup
    > Forward
-- Testing CropLayer{rnd} on Mocha.CPUBackend{Float64} ...
    > Setup
    > Forward
-- Testing CropLayer{rnd} on Mocha.CPUBackend{Float64} with mirror...
    > Setup
    > Forward
-- Testing CropLayer on Mocha.CPUBackend{Float32} ...
    > Setup
    > Forward
-- Testing CropLayer on Mocha.CPUBackend{Float32} with mirror...
    > Setup
    > Forward
-- Testing CropLayer{rnd} on Mocha.CPUBackend{Float32} ...
    > Setup
    > Forward
-- Testing CropLayer{rnd} on Mocha.CPUBackend{Float32} with mirror...
    > Setup
    > Forward
-- Testing Convolution(frozen=true) on Mocha.CPUBackend{Float64} filter=(3, 4)...
    > Setup
    > Forward
    > Backward
-- Testing Convolution(frozen=false) on Mocha.CPUBackend{Float64} filter=(3, 4)...
    > Setup
    > Forward
    > Backward
maximum(abs.(grad_filter_exp .- grad_filter_got)) = 3.637978807091713e-12
eps = 1.0e-5
-- Testing Convolution(frozen=true) on Mocha.CPUBackend{Float64} filter=(1, 1)...
    > Setup
    > Forward
    > Backward
-- Testing Convolution(frozen=false) on Mocha.CPUBackend{Float64} filter=(1, 1)...
    > Setup
    > Forward
    > Backward
maximum(abs.(grad_filter_exp .- grad_filter_got)) = 8.185452315956354e-12
eps = 1.0e-5
-- Testing Convolution(frozen=true) on Mocha.CPUBackend{Float32} filter=(3, 4)...
    > Setup
    > Forward
    > Backward
-- Testing Convolution(frozen=false) on Mocha.CPUBackend{Float32} filter=(3, 4)...
    > Setup
    > Forward
    > Backward
maximum(abs.(grad_filter_exp .- grad_filter_got)) = 0.0015869141f0
eps = 0.01
-- Testing Convolution(frozen=true) on Mocha.CPUBackend{Float32} filter=(1, 1)...
    > Setup
    > Forward
    > Backward
-- Testing Convolution(frozen=false) on Mocha.CPUBackend{Float32} filter=(1, 1)...
    > Setup
    > Forward
    > Backward
maximum(abs.(grad_filter_exp .- grad_filter_got)) = 0.0034179688f0
eps = 0.01
-- Testing ConcatLayer(dim=1) on Mocha.CPUBackend{Float64}...
    > 2-dimensional tensor
    > Forward
    > Backward
-- Testing ConcatLayer(dim=2) on Mocha.CPUBackend{Float64}...
    > 3-dimensional tensor
    > Forward
    > Backward
-- Testing ConcatLayer(dim=3) on Mocha.CPUBackend{Float64}...
    > 5-dimensional tensor
    > Forward
    > Backward
-- Testing ConcatLayer(dim=4) on Mocha.CPUBackend{Float64}...
    > 4-dimensional tensor
    > Forward
    > Backward
-- Testing ConcatLayer(dim=5) on Mocha.CPUBackend{Float64}...
    > 5-dimensional tensor
    > Forward
    > Backward
-- Testing ConcatLayer(dim=1) on Mocha.CPUBackend{Float32}...
    > 6-dimensional tensor
    > Forward
    > Backward
-- Testing ConcatLayer(dim=2) on Mocha.CPUBackend{Float32}...
    > 7-dimensional tensor
    > Forward
    > Backward
-- Testing ConcatLayer(dim=3) on Mocha.CPUBackend{Float32}...
    > 4-dimensional tensor
    > Forward
    > Backward
-- Testing ConcatLayer(dim=4) on Mocha.CPUBackend{Float32}...
    > 6-dimensional tensor
    > Forward
    > Backward
-- Testing ConcatLayer(dim=5) on Mocha.CPUBackend{Float32}...
    > 5-dimensional tensor
    > Forward
    > Backward
-- Testing ChannelPooling(Mocha.Pooling.Max) on Mocha.CPUBackend{Float32}...
    > Setup (pool along dimension 1 for 2-D tensors)
    > Forward
    > Backward
-- Testing ChannelPooling(Mocha.Pooling.Max) on Mocha.CPUBackend{Float32}...
    > Setup (pool along dimension 1 for 3-D tensors)
    > Forward
    > Backward
-- Testing ChannelPooling(Mocha.Pooling.Max) on Mocha.CPUBackend{Float32}...
    > Setup (pool along dimension 3 for 4-D tensors)
    > Forward
    > Backward
-- Testing ChannelPooling(Mocha.Pooling.Max) on Mocha.CPUBackend{Float32}...
    > Setup (pool along dimension 2 for 5-D tensors)
    > Forward
    > Backward
-- Testing ChannelPooling(Mocha.Pooling.Max) on Mocha.CPUBackend{Float32}...
    > Setup (pool along dimension 3 for 6-D tensors)
    > Forward
    > Backward
-- Testing ChannelPooling(Mocha.Pooling.Mean) on Mocha.CPUBackend{Float32}...
    > Setup (pool along dimension 1 for 2-D tensors)
    > Forward
    > Backward
-- Testing ChannelPooling(Mocha.Pooling.Mean) on Mocha.CPUBackend{Float32}...
    > Setup (pool along dimension 2 for 3-D tensors)
    > Forward
    > Backward
-- Testing ChannelPooling(Mocha.Pooling.Mean) on Mocha.CPUBackend{Float32}...
    > Setup (pool along dimension 3 for 4-D tensors)
    > Forward
    > Backward
-- Testing ChannelPooling(Mocha.Pooling.Mean) on Mocha.CPUBackend{Float32}...
    > Setup (pool along dimension 4 for 5-D tensors)
    > Forward
    > Backward
-- Testing ChannelPooling(Mocha.Pooling.Mean) on Mocha.CPUBackend{Float32}...
    > Setup (pool along dimension 4 for 6-D tensors)
    > Forward
    > Backward
-- Testing ChannelPooling(Mocha.Pooling.Max) on Mocha.CPUBackend{Float64}...
    > Setup (pool along dimension 1 for 2-D tensors)
    > Forward
    > Backward
-- Testing ChannelPooling(Mocha.Pooling.Max) on Mocha.CPUBackend{Float64}...
    > Setup (pool along dimension 1 for 3-D tensors)
    > Forward
    > Backward
-- Testing ChannelPooling(Mocha.Pooling.Max) on Mocha.CPUBackend{Float64}...
    > Setup (pool along dimension 3 for 4-D tensors)
    > Forward
    > Backward
-- Testing ChannelPooling(Mocha.Pooling.Max) on Mocha.CPUBackend{Float64}...
    > Setup (pool along dimension 2 for 5-D tensors)
    > Forward
    > Backward
-- Testing ChannelPooling(Mocha.Pooling.Max) on Mocha.CPUBackend{Float64}...
    > Setup (pool along dimension 1 for 6-D tensors)
    > Forward
    > Backward
-- Testing ChannelPooling(Mocha.Pooling.Mean) on Mocha.CPUBackend{Float64}...
    > Setup (pool along dimension 1 for 2-D tensors)
    > Forward
    > Backward
-- Testing ChannelPooling(Mocha.Pooling.Mean) on Mocha.CPUBackend{Float64}...
    > Setup (pool along dimension 1 for 3-D tensors)
    > Forward
    > Backward
-- Testing ChannelPooling(Mocha.Pooling.Mean) on Mocha.CPUBackend{Float64}...
    > Setup (pool along dimension 1 for 4-D tensors)
    > Forward
    > Backward
-- Testing ChannelPooling(Mocha.Pooling.Mean) on Mocha.CPUBackend{Float64}...
    > Setup (pool along dimension 4 for 5-D tensors)
    > Forward
    > Backward
-- Testing ChannelPooling(Mocha.Pooling.Mean) on Mocha.CPUBackend{Float64}...
    > Setup (pool along dimension 1 for 6-D tensors)
    > Forward
    > Backward
-- Testing BinaryCrossEntropyLossLayer on Mocha.CPUBackend{Float32}...
    > [3, 7]
-- Testing BinaryCrossEntropyLossLayer on Mocha.CPUBackend{Float32}...
    > [5, 4, 3, 7]
-- Testing BinaryCrossEntropyLossLayer on Mocha.CPUBackend{Float32}...
    > [4, 6, 4, 4, 6]
-- Testing BinaryCrossEntropyLossLayer on Mocha.CPUBackend{Float64}...
    > [4, 4]
-- Testing BinaryCrossEntropyLossLayer on Mocha.CPUBackend{Float64}...
    > [4, 5, 5, 7]
-- Testing BinaryCrossEntropyLossLayer on Mocha.CPUBackend{Float64}...
    > [5, 7, 5, 3, 4]
-- Testing BinaryAccuracyLayer on Mocha.CPUBackend{Float32}...
    > (6, 7)
    > Forward
    > Forward Again
    > Forward Again and Again
-- Testing BinaryAccuracyLayer on Mocha.CPUBackend{Float32}...
    > (11, 6)
    > Forward
    > Forward Again
    > Forward Again and Again
-- Testing BinaryAccuracyLayer on Mocha.CPUBackend{Float32}...
    > (8, 10, 8, 10)
    > Forward
    > Forward Again
    > Forward Again and Again
-- Testing BinaryAccuracyLayer on Mocha.CPUBackend{Float32}...
    > (11, 6, 11, 6)
    > Forward
    > Forward Again
    > Forward Again and Again
-- Testing BinaryAccuracyLayer on Mocha.CPUBackend{Float32}...
    > (6, 7, 10, 7, 7)
    > Forward
    > Forward Again
    > Forward Again and Again
-- Testing BinaryAccuracyLayer on Mocha.CPUBackend{Float32}...
    > (10, 10, 8, 11, 11)
    > Forward
    > Forward Again
    > Forward Again and Again
-- Testing BinaryAccuracyLayer on Mocha.CPUBackend{Float64}...
    > (9, 10)
    > Forward
    > Forward Again
    > Forward Again and Again
-- Testing BinaryAccuracyLayer on Mocha.CPUBackend{Float64}...
    > (10, 6)
    > Forward
    > Forward Again
    > Forward Again and Again
-- Testing BinaryAccuracyLayer on Mocha.CPUBackend{Float64}...
    > (11, 8, 8, 6)
    > Forward
    > Forward Again
    > Forward Again and Again
-- Testing BinaryAccuracyLayer on Mocha.CPUBackend{Float64}...
    > (11, 10, 6, 11)
    > Forward
    > Forward Again
    > Forward Again and Again
-- Testing BinaryAccuracyLayer on Mocha.CPUBackend{Float64}...
    > (7, 7, 7, 10, 9)
    > Forward
    > Forward Again
    > Forward Again and Again
-- Testing BinaryAccuracyLayer on Mocha.CPUBackend{Float64}...
    > (8, 6, 11, 10, 11)
    > Forward
    > Forward Again
    > Forward Again and Again
-- Testing ArgmaxLayer on Mocha.CPUBackend{Float64}...
    > 2-dimensional tensor
    > Setup
    > Forward
-- Testing ArgmaxLayer on Mocha.CPUBackend{Float64}...
    > 4-dimensional tensor
    > Setup
    > Forward
-- Testing ArgmaxLayer on Mocha.CPUBackend{Float64}...
    > 5-dimensional tensor
    > Setup
    > Forward
-- Testing ArgmaxLayer on Mocha.CPUBackend{Float32}...
    > 2-dimensional tensor
    > Setup
    > Forward
-- Testing ArgmaxLayer on Mocha.CPUBackend{Float32}...
    > 4-dimensional tensor
    > Setup
    > Forward
-- Testing ArgmaxLayer on Mocha.CPUBackend{Float32}...
    > 5-dimensional tensor
    > Setup
    > Forward
-- Testing AccuracyLayer on Mocha.CPUBackend{Float32}...
    > (11, 8) (operate on dimension 1)
    > Forward
    > Forward Again
    > Forward Again and Again
-- Testing AccuracyLayer on Mocha.CPUBackend{Float32}...
    > (8, 7, 10, 8) (operate on dimension 2)
    > Forward
    > Forward Again
    > Forward Again and Again
-- Testing AccuracyLayer on Mocha.CPUBackend{Float32}...
    > (10, 6, 10, 10, 6) (operate on dimension 4)
    > Forward
    > Forward Again
    > Forward Again and Again
-- Testing AccuracyLayer on Mocha.CPUBackend{Float64}...
    > (10, 9) (operate on dimension 1)
    > Forward
    > Forward Again
    > Forward Again and Again
-- Testing AccuracyLayer on Mocha.CPUBackend{Float64}...
    > (8, 8, 11, 10) (operate on dimension 1)
    > Forward
    > Forward Again
    > Forward Again and Again
-- Testing AccuracyLayer on Mocha.CPUBackend{Float64}...
    > (7, 9, 10, 11, 6) (operate on dimension 1)
    > Forward
    > Forward Again
    > Forward Again and Again
INFO: Mocha tests passed

>>> End of log
