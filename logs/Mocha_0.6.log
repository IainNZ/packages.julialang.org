>>> 'Pkg.add("Mocha")' log
INFO: Cloning cache of Mocha from https://github.com/pluskid/Mocha.jl.git
INFO: Installing BinDeps v0.8.8
INFO: Installing BinaryProvider v0.3.3
INFO: Installing Blosc v0.5.0
INFO: Installing CMakeWrapper v0.1.0
INFO: Installing DataStructures v0.8.4
INFO: Installing FileIO v0.9.1
INFO: Installing HDF5 v0.9.3
INFO: Installing JLD v0.8.3
INFO: Installing LegacyStrings v0.3.0
INFO: Installing Memento v0.9.0
INFO: Installing Mocha v0.3.1
INFO: Installing Parameters v0.9.1
INFO: Installing SHA v0.5.7
INFO: Installing Syslogs v0.2.0
INFO: Installing URIParser v0.3.1
INFO: Building CMakeWrapper
INFO: Building Blosc
INFO: Building HDF5
INFO: Building Mocha
Running `g++ -fPIC -Wall -O3 -shared -fopenmp -o libmochaext.so im2col.cpp pooling.cpp`
INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of Mocha
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("Mocha")' log
Julia Version 0.6.4
Commit 9d11f62bcb (2018-07-09 19:09 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-143-generic #192-Ubuntu SMP Tue Feb 27 10:45:36 UTC 2018 x86_64 x86_64
Memory: 2.939197540283203 GB (1655.015625 MB free)
Uptime: 67267.0 sec
Load Avg:  0.99169921875  0.96240234375  0.95458984375
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz    4119261 s         39 s     303401 s    1217863 s         29 s
#2  3499 MHz     670824 s       5652 s     107072 s    5846788 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem MAX_THREADS=16)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.6
2 required packages:
 - JSON                          0.17.2
 - Mocha                         0.3.1
16 additional packages:
 - BinDeps                       0.8.8
 - BinaryProvider                0.3.3
 - Blosc                         0.5.0
 - CMakeWrapper                  0.1.0
 - Compat                        1.0.0
 - DataStructures                0.8.4
 - FileIO                        0.9.1
 - HDF5                          0.9.3
 - JLD                           0.8.3
 - LegacyStrings                 0.3.0
 - Memento                       0.9.0
 - Nullables                     0.0.6
 - Parameters                    0.9.1
 - SHA                           0.5.7
 - Syslogs                       0.2.0
 - URIParser                     0.3.1
INFO: Testing Mocha
Configuring Mocha...
 * CUDA       disabled by default
 * Native Ext disabled by default
Mocha configured, continue loading module...
DefaultBackend = Mocha.CPUBackend
-- Testing simple Adam solver call
[2018-07-31T18:42:33 | info | Mocha]: Constructing net TEST on Mocha.CPUBackend...
[2018-07-31T18:42:34 | info | Mocha]: Topological sorting 4 layers...
[2018-07-31T18:42:34 | info | Mocha]: Setup layers...
[2018-07-31T18:42:34 | info | Mocha]: Network constructed!
-- Testing simple SGD solver call
[2018-07-31T18:42:38 | info | Mocha]: Constructing net TEST on Mocha.CPUBackend...
[2018-07-31T18:42:38 | info | Mocha]: Topological sorting 4 layers...
[2018-07-31T18:42:38 | info | Mocha]: Setup layers...
[2018-07-31T18:42:38 | info | Mocha]: Network constructed!
-- Testing network topology with duplicated blobs
[2018-07-31T18:42:39 | info | Mocha]: Constructing net net on Mocha.CPUBackend...
[2018-07-31T18:42:39 | info | Mocha]: Topological sorting 1 layers...
[2018-07-31T18:42:39 | info | Mocha]: Constructing net net on Mocha.CPUBackend...
[2018-07-31T18:42:39 | info | Mocha]: Topological sorting 2 layers...
-- Testing network topology with missing blobs
[2018-07-31T18:42:39 | info | Mocha]: Constructing net net on Mocha.CPUBackend...
[2018-07-31T18:42:39 | info | Mocha]: Topological sorting 1 layers...
-- Testing network topology with circular dependency
[2018-07-31T18:42:39 | info | Mocha]: Constructing net net on Mocha.CPUBackend...
[2018-07-31T18:42:39 | info | Mocha]: Topological sorting 2 layers...
-- Testing network topology with multiple back-propagate path
    > Good blob sharing
[2018-07-31T18:42:39 | info | Mocha]: Constructing net net on Mocha.CPUBackend...
[2018-07-31T18:42:39 | info | Mocha]: Topological sorting 5 layers...
[2018-07-31T18:42:39 | info | Mocha]: Setup layers...
[2018-07-31T18:42:39 | info | Mocha]: Network constructed!
    > Bad blob sharing
[2018-07-31T18:42:39 | info | Mocha]: Constructing net net on Mocha.CPUBackend...
[2018-07-31T18:42:39 | info | Mocha]: Topological sorting 6 layers...
[2018-07-31T18:42:39 | info | Mocha]: Setup layers...
[2018-07-31T18:42:39 | info | Mocha]: Network constructed!
-- Testing network topology with dangling blob
    > Good case
[2018-07-31T18:42:39 | info | Mocha]: Constructing net net on Mocha.CPUBackend...
[2018-07-31T18:42:39 | info | Mocha]: Topological sorting 4 layers...
[2018-07-31T18:42:39 | info | Mocha]: Setup layers...
[2018-07-31T18:42:40 | info | Mocha]: Network constructed!
    > Bad case
[2018-07-31T18:42:40 | info | Mocha]: Constructing net net on Mocha.CPUBackend...
[2018-07-31T18:42:40 | info | Mocha]: Topological sorting 4 layers...
[2018-07-31T18:42:40 | info | Mocha]: Setup layers...
[2018-07-31T18:42:40 | info | Mocha]: Network constructed!
    > Good case 2
[2018-07-31T18:42:40 | info | Mocha]: Constructing net net on Mocha.CPUBackend...
[2018-07-31T18:42:40 | info | Mocha]: Topological sorting 5 layers...
[2018-07-31T18:42:40 | info | Mocha]: Setup layers...
[2018-07-31T18:42:40 | info | Mocha]: Network constructed!
    > Bad case 2
[2018-07-31T18:42:40 | info | Mocha]: Constructing net net on Mocha.CPUBackend...
[2018-07-31T18:42:40 | info | Mocha]: Topological sorting 6 layers...
[2018-07-31T18:42:40 | info | Mocha]: Setup layers...
[2018-07-31T18:42:40 | info | Mocha]: Network constructed!
-- Testing gradients on simple network (example for gradient checking code)
[2018-07-31T18:42:40 | info | Mocha]: Constructing net TEST on Mocha.CPUBackend...
[2018-07-31T18:42:40 | info | Mocha]: Topological sorting 4 layers...
[2018-07-31T18:42:40 | info | Mocha]: Setup layers...
[2018-07-31T18:42:40 | info | Mocha]: Network constructed!
-- Testing simple reference counting...
-- Testing glob Utilities
-- Testing RawBLAS{Float32} Utilities
-- Testing RawBLAS{Float64} Utilities
-- Testing blob reshape on Mocha.CPUBackend{Float32}...
-- Testing blob reshape on Mocha.CPUBackend{Float64}...
-- Testing ReLU neuron on Mocha.CPUBackend{Float32}...
    > Forward
    > Backward
-- Testing ReLU neuron on Mocha.CPUBackend{Float64}...
    > Forward
    > Backward
-- Testing Sigmoid neuron on Mocha.CPUBackend{Float32}...
    > Forward
    > Backward
-- Testing Sigmoid neuron on Mocha.CPUBackend{Float64}...
    > Forward
    > Backward
-- Testing Tanh neuron on Mocha.CPUBackend{Float32}...
    > Forward
    > Backward
-- Testing Tanh neuron on Mocha.CPUBackend{Float64}...
    > Forward
    > Backward
-- Testing Exponential neuron on Mocha.CPUBackend{Float32}...
    > Forward
    > Backward
-- Testing Exponential neuron on Mocha.CPUBackend{Float64}...
    > Forward
    > Backward
-- Testing L2 regularizer on Mocha.CPUBackend{Float32}...
-- Testing L2 regularizer on Mocha.CPUBackend{Float64}...
-- Testing L1 regularizer on Mocha.CPUBackend{Float32}...
-- Testing L1 regularizer on Mocha.CPUBackend{Float64}...
-- Testing L2 constraint on Mocha.CPUBackend{Float32}...
-- Testing L2 constraint on Mocha.CPUBackend{Float64}...
-- Testing DataTransformers on Mocha.CPUBackend{Float32}...
    > SubMean
    > Scale
-- Testing DataTransformers on Mocha.CPUBackend{Float64}...
    > SubMean
    > Scale
-- Testing TiedInnerProductLayer on Mocha.CPUBackend{Float32}...
    > Setup
[2018-07-31T18:42:54 | info | Mocha]: Constructing net test-tied-ip on Mocha.CPUBackend...
[2018-07-31T18:42:54 | info | Mocha]: Topological sorting 3 layers...
[2018-07-31T18:42:54 | info | Mocha]: Setup layers...
[2018-07-31T18:42:54 | info | Mocha]: Network constructed!
    > Forward
    > Backward
-- Testing TiedInnerProductLayer on Mocha.CPUBackend{Float64}...
    > Setup
[2018-07-31T18:42:55 | info | Mocha]: Constructing net test-tied-ip on Mocha.CPUBackend...
[2018-07-31T18:42:55 | info | Mocha]: Topological sorting 3 layers...
[2018-07-31T18:42:55 | info | Mocha]: Setup layers...
[2018-07-31T18:42:55 | info | Mocha]: Network constructed!
    > Forward
    > Backward
-- Testing SquareLossLayer on Mocha.CPUBackend{Float32}...
    > (8, 8, 9, 11, 11)
-- Testing SquareLossLayer on Mocha.CPUBackend{Float64}...
    > (9, 10)
-- Testing SplitLayer on Mocha.CPUBackend{Float32}...
    > Setup
    > Forward
    > Backward
-- Testing SplitLayer on Mocha.CPUBackend{Float64}...
    > Setup
    > Forward
    > Backward
-- Testing SoftmaxLayer on Mocha.CPUBackend{Float64}...
    > 2-dimensional input, normalize along dimension 1
    > Forward
    > Backward
-- Testing SoftmaxLayer on Mocha.CPUBackend{Float64}...
    > 4-dimensional input, normalize along dimension 1
    > Forward
    > Backward
-- Testing SoftmaxLayer on Mocha.CPUBackend{Float64}...
    > 5-dimensional input, normalize along dimension 4
    > Forward
    > Backward
-- Testing SoftmaxLayer on Mocha.CPUBackend{Float32}...
    > 2-dimensional input, normalize along dimension 1
    > Forward
    > Backward
-- Testing SoftmaxLayer on Mocha.CPUBackend{Float32}...
    > 4-dimensional input, normalize along dimension 1
    > Forward
    > Backward
-- Testing SoftmaxLayer on Mocha.CPUBackend{Float32}...
    > 5-dimensional input, normalize along dimension 2
    > Forward
    > Backward
-- Testing SoftmaxLossLayer on Mocha.CPUBackend{Float64} ...
    > (9, 10) (operate on dimension 1)
    > Forward
    > Backward
-- Testing SoftmaxLossLayer on Mocha.CPUBackend{Float64} ...
    > (7, 8, 11, 11) (operate on dimension 1)
    > Forward
    > Backward
-- Testing SoftmaxLossLayer on Mocha.CPUBackend{Float64} ...
    > (6, 8, 11, 7, 10) (operate on dimension 4)
    > Forward
    > Backward
-- Testing SoftmaxLossLayer on Mocha.CPUBackend{Float64} (with weights)...
    > (10, 8) (operate on dimension 1)
    > Forward
    > Backward
-- Testing SoftmaxLossLayer on Mocha.CPUBackend{Float64} (with weights)...
    > (9, 6, 9, 10) (operate on dimension 3)
    > Forward
    > Backward
-- Testing SoftmaxLossLayer on Mocha.CPUBackend{Float64} (with weights)...
    > (7, 9, 8, 9, 10) (operate on dimension 4)
    > Forward
    > Backward
-- Testing SoftmaxLossLayer on Mocha.CPUBackend{Float32} ...
    > (6, 11) (operate on dimension 1)
    > Forward
    > Backward
-- Testing SoftmaxLossLayer on Mocha.CPUBackend{Float32} ...
    > (11, 10, 10, 8) (operate on dimension 1)
    > Forward
    > Backward
-- Testing SoftmaxLossLayer on Mocha.CPUBackend{Float32} ...
    > (11, 7, 8, 8, 8) (operate on dimension 3)
    > Forward
    > Backward
-- Testing SoftmaxLossLayer on Mocha.CPUBackend{Float32} (with weights)...
    > (6, 10) (operate on dimension 1)
    > Forward
    > Backward
-- Testing SoftmaxLossLayer on Mocha.CPUBackend{Float32} (with weights)...
    > (10, 11, 8, 9) (operate on dimension 3)
    > Forward
    > Backward
-- Testing SoftmaxLossLayer on Mocha.CPUBackend{Float32} (with weights)...
    > (6, 6, 7, 8, 6) (operate on dimension 4)
    > Forward
    > Backward
-- Testing SoftlabelSoftmaxLossLayer on Mocha.CPUBackend{Float64}...
    > (11, 9) (operate on dimension 1)
    > Forward
    > Backward
-- Testing SoftlabelSoftmaxLossLayer on Mocha.CPUBackend{Float64}...
    > (8, 9, 10, 9) (operate on dimension 1)
    > Forward
    > Backward
-- Testing SoftlabelSoftmaxLossLayer on Mocha.CPUBackend{Float64}...
    > (10, 11, 6, 11, 7) (operate on dimension 1)
    > Forward
    > Backward
-- Testing SoftlabelSoftmaxLossLayer on Mocha.CPUBackend{Float32}...
    > (10, 6) (operate on dimension 1)
    > Forward
    > Backward
-- Testing SoftlabelSoftmaxLossLayer on Mocha.CPUBackend{Float32}...
    > (9, 6, 11, 7) (operate on dimension 2)
    > Forward
    > Backward
-- Testing SoftlabelSoftmaxLossLayer on Mocha.CPUBackend{Float32}...
    > (8, 10, 10, 7, 9) (operate on dimension 4)
    > Forward
    > Backward
-- Testing convolution layer with shared param on Mocha.CPUBackend{Float64}...
[2018-07-31T18:43:18 | info | Mocha]: Constructing net test-shared-params on Mocha.CPUBackend...
[2018-07-31T18:43:18 | info | Mocha]: Topological sorting 5 layers...
[2018-07-31T18:43:18 | info | Mocha]: Setup layers...
[2018-07-31T18:43:18 | info | Mocha]: Network constructed!
-- Testing inner-product layer with shared param on Mocha.CPUBackend{Float64}...
[2018-07-31T18:43:18 | info | Mocha]: Constructing net test-shared-params on Mocha.CPUBackend...
[2018-07-31T18:43:18 | info | Mocha]: Topological sorting 5 layers...
[2018-07-31T18:43:18 | info | Mocha]: Setup layers...
[2018-07-31T18:43:18 | info | Mocha]: Network constructed!
-- Testing convolution layer with shared param on Mocha.CPUBackend{Float32}...
[2018-07-31T18:43:18 | info | Mocha]: Constructing net test-shared-params on Mocha.CPUBackend...
[2018-07-31T18:43:18 | info | Mocha]: Topological sorting 5 layers...
[2018-07-31T18:43:18 | info | Mocha]: Setup layers...
[2018-07-31T18:43:18 | info | Mocha]: Network constructed!
-- Testing inner-product layer with shared param on Mocha.CPUBackend{Float32}...
[2018-07-31T18:43:19 | info | Mocha]: Constructing net test-shared-params on Mocha.CPUBackend...
[2018-07-31T18:43:19 | info | Mocha]: Topological sorting 5 layers...
[2018-07-31T18:43:19 | info | Mocha]: Setup layers...
[2018-07-31T18:43:19 | info | Mocha]: Network constructed!
-- Testing ReshapeLayer on Mocha.CPUBackend{Float64}...
    > Setup
    > Forward
    > Backward
-- Testing ReshapeLayer on Mocha.CPUBackend{Float32}...
    > Setup
    > Forward
    > Backward
-- Testing RandomNormal Layer on Mocha.CPUBackend{Float32}...
    > Random output 4[2, 1, 3, 2]
-- Testing RandomNormal Layer on Mocha.CPUBackend{Float64}...
    > Random output 3[3, 3, 3]
-- Testing RandomMask on Mocha.CPUBackend{Float64}
    > 3 input blobs with tensor dims [5, 6, 3]
    > Setup
    > Forward
    > Backward
-- Testing RandomMask on Mocha.CPUBackend{Float32}
    > 3 input blobs with tensor dims [1, 2, 1]
    > Setup
    > Forward
    > Backward
-- Testing PowerLayer on Mocha.CPUBackend{Float32}...
    > scale=0.59, shift=0.39, power=2, tensor_dim=4
    > scale=0, shift=0.17, power=4, tensor_dim=1
    > scale=0.19, shift=0.24, power=2, tensor_dim=3
    > scale=0.29, shift=0, power=3, tensor_dim=1
    > scale=0.46, shift=0.4, power=4, tensor_dim=6
    > scale=0.58, shift=0.58, power=0, tensor_dim=4
    > scale=0.24, shift=0.87, power=1, tensor_dim=1
    > scale=0.89, shift=0.42, power=-1, tensor_dim=4
-- Testing PowerLayer on Mocha.CPUBackend{Float64}...
    > scale=0.79, shift=0.34, power=2, tensor_dim=5
    > scale=0, shift=0.09, power=5, tensor_dim=2
    > scale=0.45, shift=0.47, power=2, tensor_dim=3
    > scale=0.72, shift=0, power=3, tensor_dim=4
    > scale=0.64, shift=0.3, power=4, tensor_dim=4
    > scale=0.07, shift=0.55, power=0, tensor_dim=1
    > scale=0.6, shift=0.58, power=1, tensor_dim=1
    > scale=0.81, shift=0.96, power=-1, tensor_dim=6
-- Testing Pooling(Mocha.Pooling.Max)  on Mocha.CPUBackend{Float64}...
    > Setup
    > Forward
    > Backward
-- Testing Pooling(Mocha.Pooling.Mean)  on Mocha.CPUBackend{Float64}...
    > Setup
    > Forward
    > Backward
-- Testing Pooling(Mocha.Pooling.Max) with padding on Mocha.CPUBackend{Float64}...
    > Setup
    > Forward
    > Backward
-- Testing Pooling(Mocha.Pooling.Mean) with padding on Mocha.CPUBackend{Float64}...
    > Setup
    > Forward
    > Backward
-- Testing Pooling(Mocha.Pooling.Max)  on Mocha.CPUBackend{Float32}...
    > Setup
    > Forward
    > Backward
-- Testing Pooling(Mocha.Pooling.Mean)  on Mocha.CPUBackend{Float32}...
    > Setup
    > Forward
    > Backward
-- Testing Pooling(Mocha.Pooling.Max) with padding on Mocha.CPUBackend{Float32}...
    > Setup
    > Forward
    > Backward
-- Testing Pooling(Mocha.Pooling.Mean) with padding on Mocha.CPUBackend{Float32}...
    > Setup
    > Forward
    > Backward
-- Testing MultinomialLogisticLossLayer{equal,local} on Mocha.CPUBackend{Float64}...
    > [7, 6] (operate on dimension 1)
-- Testing MultinomialLogisticLossLayer{equal,local} on Mocha.CPUBackend{Float64}...
    > [11, 6, 6, 8] (operate on dimension 3)
-- Testing MultinomialLogisticLossLayer{equal,local} on Mocha.CPUBackend{Float64}...
    > [9, 6, 6, 6, 6] (operate on dimension 4)
-- Testing MultinomialLogisticLossLayer{local,local} on Mocha.CPUBackend{Float64}...
    > [9, 9] (operate on dimension 1)
-- Testing MultinomialLogisticLossLayer{local,local} on Mocha.CPUBackend{Float64}...
    > [6, 11, 9, 11] (operate on dimension 3)
-- Testing MultinomialLogisticLossLayer{local,local} on Mocha.CPUBackend{Float64}...
    > [11, 10, 10, 10, 8] (operate on dimension 4)
-- Testing MultinomialLogisticLossLayer{global,global} on Mocha.CPUBackend{Float64}...
    > [6, 8] (operate on dimension 1)
-- Testing MultinomialLogisticLossLayer{global,global} on Mocha.CPUBackend{Float64}...
    > [10, 7, 8, 8] (operate on dimension 3)
-- Testing MultinomialLogisticLossLayer{global,global} on Mocha.CPUBackend{Float64}...
    > [7, 7, 9, 9, 7] (operate on dimension 4)
-- Testing MultinomialLogisticLossLayer{global,local} on Mocha.CPUBackend{Float64}...
    > [8, 6] (operate on dimension 1)
-- Testing MultinomialLogisticLossLayer{global,local} on Mocha.CPUBackend{Float64}...
    > [11, 7, 10, 8] (operate on dimension 3)
-- Testing MultinomialLogisticLossLayer{global,local} on Mocha.CPUBackend{Float64}...
    > [7, 8, 6, 8, 11] (operate on dimension 4)
-- Testing MultinomialLogisticLossLayer{no,no} on Mocha.CPUBackend{Float64}...
    > [6, 9] (operate on dimension 1)
-- Testing MultinomialLogisticLossLayer{no,no} on Mocha.CPUBackend{Float64}...
    > [7, 10, 6, 10] (operate on dimension 1)
-- Testing MultinomialLogisticLossLayer{no,no} on Mocha.CPUBackend{Float64}...
    > [10, 10, 7, 9, 11] (operate on dimension 4)
-- Testing MultinomialLogisticLossLayer{equal,local} on Mocha.CPUBackend{Float32}...
    > [9, 8] (operate on dimension 1)
-- Testing MultinomialLogisticLossLayer{equal,local} on Mocha.CPUBackend{Float32}...
    > [10, 9, 9, 7] (operate on dimension 3)
-- Testing MultinomialLogisticLossLayer{equal,local} on Mocha.CPUBackend{Float32}...
    > [6, 6, 7, 9, 8] (operate on dimension 4)
-- Testing MultinomialLogisticLossLayer{local,local} on Mocha.CPUBackend{Float32}...
    > [7, 8] (operate on dimension 1)
-- Testing MultinomialLogisticLossLayer{local,local} on Mocha.CPUBackend{Float32}...
    > [9, 9, 10, 9] (operate on dimension 3)
-- Testing MultinomialLogisticLossLayer{local,local} on Mocha.CPUBackend{Float32}...
    > [8, 8, 6, 9, 10] (operate on dimension 4)
-- Testing MultinomialLogisticLossLayer{global,global} on Mocha.CPUBackend{Float32}...
    > [7, 9] (operate on dimension 1)
-- Testing MultinomialLogisticLossLayer{global,global} on Mocha.CPUBackend{Float32}...
    > [7, 8, 9, 9] (operate on dimension 3)
-- Testing MultinomialLogisticLossLayer{global,global} on Mocha.CPUBackend{Float32}...
    > [11, 11, 7, 6, 8] (operate on dimension 4)
-- Testing MultinomialLogisticLossLayer{global,local} on Mocha.CPUBackend{Float32}...
    > [7, 8] (operate on dimension 1)
-- Testing MultinomialLogisticLossLayer{global,local} on Mocha.CPUBackend{Float32}...
    > [10, 6, 10, 10] (operate on dimension 3)
-- Testing MultinomialLogisticLossLayer{global,local} on Mocha.CPUBackend{Float32}...
    > [11, 11, 7, 9, 9] (operate on dimension 4)
-- Testing MultinomialLogisticLossLayer{no,no} on Mocha.CPUBackend{Float32}...
    > [8, 6] (operate on dimension 1)
-- Testing MultinomialLogisticLossLayer{no,no} on Mocha.CPUBackend{Float32}...
    > [11, 6, 10, 9] (operate on dimension 2)
-- Testing MultinomialLogisticLossLayer{no,no} on Mocha.CPUBackend{Float32}...
    > [9, 7, 8, 10, 11] (operate on dimension 1)
-- Testing Memory Output Layer on Mocha.CPUBackend{Float32}...
    > (5, 2, 6)
-- Testing Memory Output Layer on Mocha.CPUBackend{Float64}...
    > (4, 2, 8)
-- Testing Memory Data Layer on Mocha.CPUBackend{Float32}...
    > (3, 4)
-- Testing Memory Data Layer on Mocha.CPUBackend{Float64}...
    > (3,)
-- Testing LRN(Mocha.LRNMode.AcrossChannel) on Mocha.CPUBackend{Float32}...
    > Setup with dims (10, 10, 7, 10)
    > Forward
    > Backward
-- Testing LRN(Mocha.LRNMode.WithinChannel) on Mocha.CPUBackend{Float32}...
    > Setup with dims (10, 10, 8, 7)
    > Forward
    > Backward
-- Testing LRN(Mocha.LRNMode.AcrossChannel) on Mocha.CPUBackend{Float64}...
    > Setup with dims (8, 6, 9, 7)
    > Forward
    > Backward
-- Testing LRN(Mocha.LRNMode.WithinChannel) on Mocha.CPUBackend{Float64}...
    > Setup with dims (10, 10, 10, 8)
    > Forward
    > Backward
-- Testing InplaceLayer on Mocha.CPUBackend{Float64}...
    > Setup
[2018-07-31T18:43:48 | info | Mocha]: Constructing net test-inplace on Mocha.CPUBackend...
[2018-07-31T18:43:48 | info | Mocha]: Topological sorting 5 layers...
[2018-07-31T18:43:48 | info | Mocha]: Setup layers...
[2018-07-31T18:43:48 | info | Mocha]: Network constructed!
    > Forward
    > Backward
-- Testing InplaceLayer on Mocha.CPUBackend{Float32}...
    > Setup
[2018-07-31T18:43:48 | info | Mocha]: Constructing net test-inplace on Mocha.CPUBackend...
[2018-07-31T18:43:48 | info | Mocha]: Topological sorting 5 layers...
[2018-07-31T18:43:48 | info | Mocha]: Setup layers...
[2018-07-31T18:43:48 | info | Mocha]: Network constructed!
    > Forward
    > Backward
-- Testing InnerProductLayer on Mocha.CPUBackend{Float32}...
    > Setup
    > Forward
    > Backward
-- Testing InnerProductLayer on Mocha.CPUBackend{Float64}...
    > Setup
    > Forward
    > Backward
-- Testing Index2OnehotLayer on Mocha.CPUBackend{Float32}...
    > 2-dimensional input, expanding along dimension 1
-- Testing Index2OnehotLayer on Mocha.CPUBackend{Float32}...
    > 4-dimensional input, expanding along dimension 3
-- Testing Index2OnehotLayer on Mocha.CPUBackend{Float32}...
    > 5-dimensional input, expanding along dimension 1
-- Testing Index2OnehotLayer on Mocha.CPUBackend{Float64}...
    > 2-dimensional input, expanding along dimension 1
-- Testing Index2OnehotLayer on Mocha.CPUBackend{Float64}...
    > 4-dimensional input, expanding along dimension 2
-- Testing Index2OnehotLayer on Mocha.CPUBackend{Float64}...
    > 5-dimensional input, expanding along dimension 1
-- Testing IdentityLayer on Mocha.CPUBackend{Float32}...
    > Setup
    > Forward
-- Testing IdentityLayer on Mocha.CPUBackend{Float64}...
    > Setup
    > Forward
-- Testing HingeLossLayer on Mocha.CPUBackend{Float32}...
    > (8, 7, 7, 8)
-- Testing HingeLossLayer on Mocha.CPUBackend{Float64}...
    > (8, 9)
-- Testing HDF5 Output Layer on Mocha.CPUBackend{Float32}...
    > (4, 8, 8)
[2018-07-31T18:43:52 | warn | Mocha]: HDF5OutputLayer: output file '/tmp/Mocha-12347-IVnsXR4gvvy3BkXACLpnLlKExAqP8kq8.hdf5' already exists, overwriting
-- Testing HDF5 Output Layer on Mocha.CPUBackend{Float64}...
    > (5, 7)
[2018-07-31T18:43:53 | warn | Mocha]: HDF5OutputLayer: output file '/tmp/Mocha-12347-LmqLSX2Yl4YOFJH5sQA2bhD3Yoq18MJB.hdf5' already exists, overwriting
-- Testing  HDF5 Data Layer on Mocha.CPUBackend{Float32}...
    > (2, 4, 1, 2, 8)
-- Testing (Async) HDF5 Data Layer on Mocha.CPUBackend{Float32}...
    > (5, 8)
[2018-07-31T18:43:56 | info | Mocha]: AsyncHDF5DataLayer: Stopping IO task...
[2018-07-31T18:43:56 | info | Mocha]: AsyncHDF5DataLayer: IO Task reaching the end...
-- Testing  HDF5 Data Layer on Mocha.CPUBackend{Float64}...
    > (7, 1, 7, 3, 1)
-- Testing (Async) HDF5 Data Layer on Mocha.CPUBackend{Float64}...
    > (7, 3)
[2018-07-31T18:43:57 | info | Mocha]: AsyncHDF5DataLayer: Stopping IO task...
[2018-07-31T18:43:57 | info | Mocha]: AsyncHDF5DataLayer: IO Task reaching the end...
-- Testing  HDF5 Data Layer (shuffle,n=6,b=4) on Mocha.CPUBackend{Float32}...
-- Testing (Async) HDF5 Data Layer (shuffle,n=6,b=4) on Mocha.CPUBackend{Float32}...
[2018-07-31T18:43:57 | info | Mocha]: AsyncHDF5DataLayer: Stopping IO task...
[2018-07-31T18:43:57 | info | Mocha]: AsyncHDF5DataLayer: IO Task reaching the end...
-- Testing  HDF5 Data Layer (shuffle,n=4,b=6) on Mocha.CPUBackend{Float32}...
-- Testing (Async) HDF5 Data Layer (shuffle,n=4,b=6) on Mocha.CPUBackend{Float32}...
[2018-07-31T18:43:57 | info | Mocha]: AsyncHDF5DataLayer: Stopping IO task...
[2018-07-31T18:43:57 | info | Mocha]: AsyncHDF5DataLayer: IO Task reaching the end...
-- Testing  HDF5 Data Layer (shuffle,n=6,b=4) on Mocha.CPUBackend{Float64}...
-- Testing (Async) HDF5 Data Layer (shuffle,n=6,b=4) on Mocha.CPUBackend{Float64}...
[2018-07-31T18:43:57 | info | Mocha]: AsyncHDF5DataLayer: Stopping IO task...
[2018-07-31T18:43:57 | info | Mocha]: AsyncHDF5DataLayer: IO Task reaching the end...
-- Testing  HDF5 Data Layer (shuffle,n=4,b=6) on Mocha.CPUBackend{Float64}...
-- Testing (Async) HDF5 Data Layer (shuffle,n=4,b=6) on Mocha.CPUBackend{Float64}...
[2018-07-31T18:43:57 | info | Mocha]: AsyncHDF5DataLayer: Stopping IO task...
[2018-07-31T18:43:57 | info | Mocha]: AsyncHDF5DataLayer: IO Task reaching the end...
-- Testing GaussianKLLossLayer on Mocha.CPUBackend{Float32}...
    > (9, 8, 11)
-- Testing GaussianKLLossLayer on Mocha.CPUBackend{Float64}...
    > (11, 6, 6, 8)
-- Testing ElementWiseLayer{Mocha.ElementWiseFunctors.Add()} on Mocha.CPUBackend{Float32}...
    > (5, 6, 7, 3, 4)
-- Testing ElementWiseLayer{Mocha.ElementWiseFunctors.Subtract()} on Mocha.CPUBackend{Float32}...
    > (1,)
-- Testing ElementWiseLayer{Mocha.ElementWiseFunctors.Multiply()} on Mocha.CPUBackend{Float32}...
    > (2, 1, 6)
-- Testing ElementWiseLayer{Mocha.ElementWiseFunctors.Divide()} on Mocha.CPUBackend{Float32}...
    > (6, 5, 5, 6, 7, 5)
-- Testing ElementWiseLayer{Mocha.ElementWiseFunctors.Add()} on Mocha.CPUBackend{Float64}...
    > (4, 2, 1, 8, 6)
-- Testing ElementWiseLayer{Mocha.ElementWiseFunctors.Subtract()} on Mocha.CPUBackend{Float64}...
    > (3, 7, 8)
-- Testing ElementWiseLayer{Mocha.ElementWiseFunctors.Multiply()} on Mocha.CPUBackend{Float64}...
    > (2, 6, 7)
-- Testing ElementWiseLayer{Mocha.ElementWiseFunctors.Divide()} on Mocha.CPUBackend{Float64}...
    > (5, 3)
-- Testing Dropout on Mocha.CPUBackend{Float64}...
    > (6, 7)
    > Setup
    > Forward
    > Backward
-- Testing Dropout on Mocha.CPUBackend{Float32}...
    > (4, 5, 1)
    > Setup
    > Forward
    > Backward
-- Testing CropLayer on Mocha.CPUBackend{Float64} ...
    > Setup
    > Forward
-- Testing CropLayer on Mocha.CPUBackend{Float64} with mirror...
    > Setup
    > Forward
-- Testing CropLayer{rnd} on Mocha.CPUBackend{Float64} ...
    > Setup
    > Forward
-- Testing CropLayer{rnd} on Mocha.CPUBackend{Float64} with mirror...
    > Setup
    > Forward
-- Testing CropLayer on Mocha.CPUBackend{Float32} ...
    > Setup
    > Forward
-- Testing CropLayer on Mocha.CPUBackend{Float32} with mirror...
    > Setup
    > Forward
-- Testing CropLayer{rnd} on Mocha.CPUBackend{Float32} ...
    > Setup
    > Forward
-- Testing CropLayer{rnd} on Mocha.CPUBackend{Float32} with mirror...
    > Setup
    > Forward
-- Testing Convolution(frozen=true) on Mocha.CPUBackend{Float64} filter=(3, 4)...
    > Setup
    > Forward
    > Backward
-- Testing Convolution(frozen=false) on Mocha.CPUBackend{Float64} filter=(3, 4)...
    > Setup
    > Forward
    > Backward
maximum(abs.(grad_filter_exp .- grad_filter_got)) = 3.637978807091713e-12
eps = 1.0e-5
-- Testing Convolution(frozen=true) on Mocha.CPUBackend{Float64} filter=(1, 1)...
    > Setup
    > Forward
    > Backward
-- Testing Convolution(frozen=false) on Mocha.CPUBackend{Float64} filter=(1, 1)...
    > Setup
    > Forward
    > Backward
maximum(abs.(grad_filter_exp .- grad_filter_got)) = 6.821210263296962e-12
eps = 1.0e-5
-- Testing Convolution(frozen=true) on Mocha.CPUBackend{Float32} filter=(3, 4)...
    > Setup
    > Forward
    > Backward
-- Testing Convolution(frozen=false) on Mocha.CPUBackend{Float32} filter=(3, 4)...
    > Setup
    > Forward
    > Backward
maximum(abs.(grad_filter_exp .- grad_filter_got)) = 0.0015869141f0
eps = 0.01
-- Testing Convolution(frozen=true) on Mocha.CPUBackend{Float32} filter=(1, 1)...
    > Setup
    > Forward
    > Backward
-- Testing Convolution(frozen=false) on Mocha.CPUBackend{Float32} filter=(1, 1)...
    > Setup
    > Forward
    > Backward
maximum(abs.(grad_filter_exp .- grad_filter_got)) = 0.0034179688f0
eps = 0.01
-- Testing ConcatLayer(dim=1) on Mocha.CPUBackend{Float64}...
    > 6-dimensional tensor
    > Forward
    > Backward
-- Testing ConcatLayer(dim=2) on Mocha.CPUBackend{Float64}...
    > 3-dimensional tensor
    > Forward
    > Backward
-- Testing ConcatLayer(dim=3) on Mocha.CPUBackend{Float64}...
    > 6-dimensional tensor
    > Forward
    > Backward
-- Testing ConcatLayer(dim=4) on Mocha.CPUBackend{Float64}...
    > 4-dimensional tensor
    > Forward
    > Backward
-- Testing ConcatLayer(dim=5) on Mocha.CPUBackend{Float64}...
    > 5-dimensional tensor
    > Forward
    > Backward
-- Testing ConcatLayer(dim=1) on Mocha.CPUBackend{Float32}...
    > 4-dimensional tensor
    > Forward
    > Backward
-- Testing ConcatLayer(dim=2) on Mocha.CPUBackend{Float32}...
    > 4-dimensional tensor
    > Forward
    > Backward
-- Testing ConcatLayer(dim=3) on Mocha.CPUBackend{Float32}...
    > 3-dimensional tensor
    > Forward
    > Backward
-- Testing ConcatLayer(dim=4) on Mocha.CPUBackend{Float32}...
    > 4-dimensional tensor
    > Forward
    > Backward
-- Testing ConcatLayer(dim=5) on Mocha.CPUBackend{Float32}...
    > 5-dimensional tensor
    > Forward
    > Backward
-- Testing ChannelPooling(Mocha.Pooling.Max) on Mocha.CPUBackend{Float32}...
    > Setup (pool along dimension 1 for 2-D tensors)
    > Forward
    > Backward
-- Testing ChannelPooling(Mocha.Pooling.Max) on Mocha.CPUBackend{Float32}...
    > Setup (pool along dimension 1 for 3-D tensors)
    > Forward
    > Backward
-- Testing ChannelPooling(Mocha.Pooling.Max) on Mocha.CPUBackend{Float32}...
    > Setup (pool along dimension 1 for 4-D tensors)
    > Forward
    > Backward
-- Testing ChannelPooling(Mocha.Pooling.Max) on Mocha.CPUBackend{Float32}...
    > Setup (pool along dimension 2 for 5-D tensors)
    > Forward
    > Backward
-- Testing ChannelPooling(Mocha.Pooling.Max) on Mocha.CPUBackend{Float32}...
    > Setup (pool along dimension 2 for 6-D tensors)
    > Forward
    > Backward
-- Testing ChannelPooling(Mocha.Pooling.Mean) on Mocha.CPUBackend{Float32}...
    > Setup (pool along dimension 1 for 2-D tensors)
    > Forward
    > Backward
-- Testing ChannelPooling(Mocha.Pooling.Mean) on Mocha.CPUBackend{Float32}...
    > Setup (pool along dimension 1 for 3-D tensors)
    > Forward
    > Backward
-- Testing ChannelPooling(Mocha.Pooling.Mean) on Mocha.CPUBackend{Float32}...
    > Setup (pool along dimension 2 for 4-D tensors)
    > Forward
    > Backward
-- Testing ChannelPooling(Mocha.Pooling.Mean) on Mocha.CPUBackend{Float32}...
    > Setup (pool along dimension 3 for 5-D tensors)
    > Forward
    > Backward
-- Testing ChannelPooling(Mocha.Pooling.Mean) on Mocha.CPUBackend{Float32}...
    > Setup (pool along dimension 5 for 6-D tensors)
    > Forward
    > Backward
-- Testing ChannelPooling(Mocha.Pooling.Max) on Mocha.CPUBackend{Float64}...
    > Setup (pool along dimension 1 for 2-D tensors)
    > Forward
    > Backward
-- Testing ChannelPooling(Mocha.Pooling.Max) on Mocha.CPUBackend{Float64}...
    > Setup (pool along dimension 1 for 3-D tensors)
    > Forward
    > Backward
-- Testing ChannelPooling(Mocha.Pooling.Max) on Mocha.CPUBackend{Float64}...
    > Setup (pool along dimension 1 for 4-D tensors)
    > Forward
    > Backward
-- Testing ChannelPooling(Mocha.Pooling.Max) on Mocha.CPUBackend{Float64}...
    > Setup (pool along dimension 4 for 5-D tensors)
    > Forward
    > Backward
-- Testing ChannelPooling(Mocha.Pooling.Max) on Mocha.CPUBackend{Float64}...
    > Setup (pool along dimension 1 for 6-D tensors)
    > Forward
    > Backward
-- Testing ChannelPooling(Mocha.Pooling.Mean) on Mocha.CPUBackend{Float64}...
    > Setup (pool along dimension 1 for 2-D tensors)
    > Forward
    > Backward
-- Testing ChannelPooling(Mocha.Pooling.Mean) on Mocha.CPUBackend{Float64}...
    > Setup (pool along dimension 2 for 3-D tensors)
    > Forward
    > Backward
-- Testing ChannelPooling(Mocha.Pooling.Mean) on Mocha.CPUBackend{Float64}...
    > Setup (pool along dimension 1 for 4-D tensors)
    > Forward
    > Backward
-- Testing ChannelPooling(Mocha.Pooling.Mean) on Mocha.CPUBackend{Float64}...
    > Setup (pool along dimension 2 for 5-D tensors)
    > Forward
    > Backward
-- Testing ChannelPooling(Mocha.Pooling.Mean) on Mocha.CPUBackend{Float64}...
    > Setup (pool along dimension 3 for 6-D tensors)
    > Forward
    > Backward
-- Testing BinaryCrossEntropyLossLayer on Mocha.CPUBackend{Float32}...
    > [5, 6]
-- Testing BinaryCrossEntropyLossLayer on Mocha.CPUBackend{Float32}...
    > [6, 3, 3, 5]
-- Testing BinaryCrossEntropyLossLayer on Mocha.CPUBackend{Float32}...
    > [4, 7, 4, 3, 3]
-- Testing BinaryCrossEntropyLossLayer on Mocha.CPUBackend{Float64}...
    > [6, 7]
-- Testing BinaryCrossEntropyLossLayer on Mocha.CPUBackend{Float64}...
    > [6, 2, 5, 2]
-- Testing BinaryCrossEntropyLossLayer on Mocha.CPUBackend{Float64}...
    > [3, 2, 5, 5, 3]
-- Testing BinaryAccuracyLayer on Mocha.CPUBackend{Float32}...
    > (8, 8)
    > Forward
    > Forward Again
    > Forward Again and Again
-- Testing BinaryAccuracyLayer on Mocha.CPUBackend{Float32}...
    > (9, 6)
    > Forward
    > Forward Again
    > Forward Again and Again
-- Testing BinaryAccuracyLayer on Mocha.CPUBackend{Float32}...
    > (11, 6, 8, 11)
    > Forward
    > Forward Again
    > Forward Again and Again
-- Testing BinaryAccuracyLayer on Mocha.CPUBackend{Float32}...
    > (8, 7, 8, 11)
    > Forward
    > Forward Again
    > Forward Again and Again
-- Testing BinaryAccuracyLayer on Mocha.CPUBackend{Float32}...
    > (7, 7, 11, 8, 7)
    > Forward
    > Forward Again
    > Forward Again and Again
-- Testing BinaryAccuracyLayer on Mocha.CPUBackend{Float32}...
    > (10, 9, 11, 8, 9)
    > Forward
    > Forward Again
    > Forward Again and Again
-- Testing BinaryAccuracyLayer on Mocha.CPUBackend{Float64}...
    > (7, 11)
    > Forward
    > Forward Again
    > Forward Again and Again
-- Testing BinaryAccuracyLayer on Mocha.CPUBackend{Float64}...
    > (8, 7)
    > Forward
    > Forward Again
    > Forward Again and Again
-- Testing BinaryAccuracyLayer on Mocha.CPUBackend{Float64}...
    > (7, 9, 8, 8)
    > Forward
    > Forward Again
    > Forward Again and Again
-- Testing BinaryAccuracyLayer on Mocha.CPUBackend{Float64}...
    > (9, 6, 11, 11)
    > Forward
    > Forward Again
    > Forward Again and Again
-- Testing BinaryAccuracyLayer on Mocha.CPUBackend{Float64}...
    > (6, 10, 10, 7, 6)
    > Forward
    > Forward Again
    > Forward Again and Again
-- Testing BinaryAccuracyLayer on Mocha.CPUBackend{Float64}...
    > (10, 9, 7, 8, 6)
    > Forward
    > Forward Again
    > Forward Again and Again
-- Testing ArgmaxLayer on Mocha.CPUBackend{Float64}...
    > 2-dimensional tensor
    > Setup
    > Forward
-- Testing ArgmaxLayer on Mocha.CPUBackend{Float64}...
    > 4-dimensional tensor
    > Setup
    > Forward
-- Testing ArgmaxLayer on Mocha.CPUBackend{Float64}...
    > 5-dimensional tensor
    > Setup
    > Forward
-- Testing ArgmaxLayer on Mocha.CPUBackend{Float32}...
    > 2-dimensional tensor
    > Setup
    > Forward
-- Testing ArgmaxLayer on Mocha.CPUBackend{Float32}...
    > 4-dimensional tensor
    > Setup
    > Forward
-- Testing ArgmaxLayer on Mocha.CPUBackend{Float32}...
    > 5-dimensional tensor
    > Setup
    > Forward
-- Testing AccuracyLayer on Mocha.CPUBackend{Float32}...
    > (10, 10) (operate on dimension 1)
    > Forward
    > Forward Again
    > Forward Again and Again
-- Testing AccuracyLayer on Mocha.CPUBackend{Float32}...
    > (6, 9, 6, 10) (operate on dimension 2)
    > Forward
    > Forward Again
    > Forward Again and Again
-- Testing AccuracyLayer on Mocha.CPUBackend{Float32}...
    > (6, 6, 9, 9, 7) (operate on dimension 1)
    > Forward
    > Forward Again
    > Forward Again and Again
-- Testing AccuracyLayer on Mocha.CPUBackend{Float64}...
    > (9, 8) (operate on dimension 1)
    > Forward
    > Forward Again
    > Forward Again and Again
-- Testing AccuracyLayer on Mocha.CPUBackend{Float64}...
    > (10, 8, 6, 8) (operate on dimension 3)
    > Forward
    > Forward Again
    > Forward Again and Again
-- Testing AccuracyLayer on Mocha.CPUBackend{Float64}...
    > (9, 11, 6, 7, 9) (operate on dimension 1)
    > Forward
    > Forward Again
    > Forward Again and Again
INFO: Mocha tests passed

>>> End of log
