>>> 'Pkg.add("KrylovMethods")' log
INFO: Cloning cache of KrylovMethods from https://github.com/lruthotto/KrylovMethods.jl.git
INFO: Installing KrylovMethods v0.4.0
INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of KrylovMethods
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("KrylovMethods")' log
Julia Version 0.6.2
Commit d386e40c17 (2017-12-13 18:08 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-143-generic #192-Ubuntu SMP Tue Feb 27 10:45:36 UTC 2018 x86_64 x86_64
Memory: 2.939197540283203 GB (1213.02734375 MB free)
Uptime: 51923.0 sec
Load Avg:  0.9931640625  0.9853515625  1.02392578125
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz    3082090 s        162 s     196426 s    1183295 s         36 s
#2  3500 MHz     751191 s       6612 s      83426 s    4256544 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.6
2 required packages:
 - JSON                          0.17.2
 - KrylovMethods                 0.4.0
17 additional packages:
 - BinDeps                       0.8.8
 - Cairo                         0.5.1
 - ColorTypes                    0.6.7
 - Colors                        0.8.2
 - Compat                        0.64.0
 - FixedPointNumbers             0.4.6
 - Graphics                      0.3.0
 - Gtk                           0.13.1
 - NaNMath                       0.3.1
 - NodeJS                        0.4.0
 - Nullables                     0.0.5
 - Reexport                      0.1.0
 - Requires                      0.4.3
 - Rsvg                          0.2.0
 - SHA                           0.5.7
 - URIParser                     0.3.1
 - VegaLite                      0.1.0              ecb31725 (dirty)
INFO: Computing test dependencies for KrylovMethods...
INFO: Cloning cache of LinearOperators from https://github.com/JuliaSmoothOptimizers/LinearOperators.jl.git
INFO: Cloning cache of MatrixDepot from https://github.com/JuliaMatrices/MatrixDepot.jl.git
INFO: Installing GZip v0.3.0
INFO: Installing LinearOperators v0.4.0
INFO: Installing MatrixDepot v0.6.0
INFO: Testing KrylovMethods
=== bicgstb ===
iter	 relres
  1	8.20e-02
  2	7.37e-03
  3	8.38e-03
bicgstb iterated maxIter (=3) times but reached only residual norm 7.37e-03 instead of tol=1.00e-06.
bcgstb achieved desired tolerance at iteration 6. Residual norm is 6.28e-07.
=== block bicgstb ===
iter	 relres
  1	1.00e-01
  2	1.25e-01
  3	2.02e-03
blockBiCGSTB iterated maxIter (=3) times but reached only residual norm 1.25e-01 instead of tol=1.00e-06.
blockBiCGSTB achieved desired tolerance at iteration 7. Residual norm is 5.63e-07.
=== cg ===
iter	 relres
  1	0.00e+00
cg achieved desired tolerance at iteration 1. Residual norm is 0.00e+00.
=== cg ===
iter	 relres
  1	7.89e-02
cg iterated maxIter (=1) times but reached only residual norm 7.89e-02 instead of tol=1.00e-15.
Matrix A in cg has to be positive definite.
cg achieved desired tolerance at iteration 24. Residual norm is 8.11e-06.
WARNING: sqrt(x::AbstractArray{T}) where T <: Number is deprecated, use sqrt.(x) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] sqrt(::Array{Float64,1}) at ./deprecated.jl:57
 [3] computeNorm(::Array{Float64,2}) at /home/vagrant/.julia/v0.6/KrylovMethods/src/blockCG.jl:140
 [4] #blockCG#14(::Array{Float64,2}, ::Base.#identity, ::Int64, ::Float64, ::Bool, ::Float64, ::Int64, ::Bool, ::KrylovMethods.#blockCG, ::KrylovMethods.##12#13{Array{Float64,2}}, ::Array{Float64,2}) at /home/vagrant/.julia/v0.6/KrylovMethods/src/blockCG.jl:60
 [5] (::KrylovMethods.#kw##blockCG)(::Array{Any,1}, ::KrylovMethods.#blockCG, ::Function, ::Array{Float64,2}) at ./<missing>:0
 [6] #blockCG#11(::Array{Any,1}, ::Function, ::Array{Float64,2}, ::Array{Float64,2}) at /home/vagrant/.julia/v0.6/KrylovMethods/src/blockCG.jl:8
 [7] (::KrylovMethods.#kw##blockCG)(::Array{Any,1}, ::KrylovMethods.#blockCG, ::Array{Float64,2}, ::Array{Float64,2}) at ./<missing>:0
 [8] macro expansion at /home/vagrant/.julia/v0.6/KrylovMethods/test/testBlockCG.jl:10 [inlined]
 [9] macro expansion at ./test.jl:860 [inlined]
 [10] anonymous at ./<missing>:?
 [11] include_from_node1(::String) at ./loading.jl:576
 [12] include(::String) at ./sysimg.jl:14
 [13] macro expansion at /home/vagrant/.julia/v0.6/KrylovMethods/test/runtests.jl:13 [inlined]
 [14] macro expansion at ./test.jl:860 [inlined]
 [15] anonymous at ./<missing>:?
 [16] include_from_node1(::String) at ./loading.jl:576
 [17] include(::String) at ./sysimg.jl:14
 [18] process_options(::Base.JLOptions) at ./client.jl:305
 [19] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/KrylovMethods/test/testBlockCG.jl, in expression starting on line 6
=== blockcg ===
iter	max(relres)
WARNING: isfinite(x::AbstractArray{T}) where T <: Number is deprecated, use isfinite.(x) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] isfinite(::Array{Float64,1}) at ./deprecated.jl:57
 [3] getPinv!(::Array{Float64,2}, ::Float64) at /home/vagrant/.julia/v0.6/KrylovMethods/src/blockCG.jl:148
 [4] #blockCG#14(::Array{Float64,2}, ::Base.#identity, ::Int64, ::Float64, ::Bool, ::Float64, ::Int64, ::Bool, ::KrylovMethods.#blockCG, ::KrylovMethods.##12#13{Array{Float64,2}}, ::Array{Float64,2}) at /home/vagrant/.julia/v0.6/KrylovMethods/src/blockCG.jl:86
 [5] (::KrylovMethods.#kw##blockCG)(::Array{Any,1}, ::KrylovMethods.#blockCG, ::Function, ::Array{Float64,2}) at ./<missing>:0
 [6] #blockCG#11(::Array{Any,1}, ::Function, ::Array{Float64,2}, ::Array{Float64,2}) at /home/vagrant/.julia/v0.6/KrylovMethods/src/blockCG.jl:8
 [7] (::KrylovMethods.#kw##blockCG)(::Array{Any,1}, ::KrylovMethods.#blockCG, ::Array{Float64,2}, ::Array{Float64,2}) at ./<missing>:0
 [8] macro expansion at /home/vagrant/.julia/v0.6/KrylovMethods/test/testBlockCG.jl:10 [inlined]
 [9] macro expansion at ./test.jl:860 [inlined]
 [10] anonymous at ./<missing>:?
 [11] include_from_node1(::String) at ./loading.jl:576
 [12] include(::String) at ./sysimg.jl:14
 [13] macro expansion at /home/vagrant/.julia/v0.6/KrylovMethods/test/runtests.jl:13 [inlined]
 [14] macro expansion at ./test.jl:860 [inlined]
 [15] anonymous at ./<missing>:?
 [16] include_from_node1(::String) at ./loading.jl:576
 [17] include(::String) at ./sysimg.jl:14
 [18] process_options(::Base.JLOptions) at ./client.jl:305
 [19] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/KrylovMethods/test/testBlockCG.jl, in expression starting on line 6
  1	2.53e-16
blockCG achieved desired tolerance at iteration 1. Residual norm is 2.53e-16.
=== blockcg ===
iter	max(relres)
  1	2.98e-16
blockCG iterated maxIter (=1) times but reached only residual norm 2.98e-16 instead of tol=1.00e-30.
=== blockcg ===
iter	max(relres)
  1	3.98e-01
  2	2.59e-01
  3	2.13e-01
  4	1.77e-01
  5	1.37e-01
  6	8.98e-02
  7	5.00e-02
  8	2.39e-02
  9	1.04e-02
 10	4.56e-03
 11	1.83e-03
 12	7.45e-04
blockCG achieved desired tolerance at iteration 12. Residual norm is 7.45e-04.
=== blockcg ===
iter	max(relres)
  1	3.98e-01
  2	2.59e-01
  3	2.13e-01
  4	1.77e-01
  5	1.37e-01
  6	8.98e-02
  7	5.00e-02
  8	2.39e-02
  9	1.04e-02
 10	4.56e-03
 11	1.83e-03
 12	7.45e-04
blockCG achieved desired tolerance at iteration 12. Residual norm is 7.45e-04.
=== cgls ===
iter	   |A'r|	 norm(r)	 norm(x)
  1	3.09e+01	7.49e-01	1.00e+01
  2	5.69e+00	8.81e-01	9.96e+00
cgls iterated maxIter (=2) times witout reaching tolerance. Returned result has residual norm  5.69e+00.
cgls relative gradient norm below desired tolerance at iteration 10. Returned result has residual norm  1.54e-10.
=== gmres ===
iter	 relres

  1	3.0e-01 1.2e-01 4.3e-02 	 4.3e-02
  2	1.3e-02 4.4e-03 1.4e-03 	 1.4e-03
  3	4.0e-04 1.1e-04 3.3e-05 	 3.3e-05
gmres iterated maxIter (=3) times without achieving the desired tolerance.
gmres achieved desired tolerance at iteration 3. Residual norm is 9.33e-07.
Givens rotation for v=[0.0,0.5549263565891027]
Givens rotation for v=[-1.0811455562295593,0.0]
Givens rotation for v=[-1.9473207923847193,-0.7195051432679506]
=== Testing Lanczos Bidiagonalization ===
ssor achieved desired tolerance at iteration 30. Residual norm is 9.89e-03.
ssor achieved desired tolerance at iteration 45. Residual norm is 9.86e-03.
cg achieved desired tolerance at iteration 54. Residual norm is 6.76e-13.
=== sor ===
iter	 relres

  1	1.45e-01
  2	6.53e-02
  3	4.01e-02
ssor iterated maxIter (=3) times but reached only residual norm 4.01e-02 instead of tol=1.00e-02.
ssor achieved desired tolerance at iteration 15. Residual norm is 9.79e-03.
ssor achieved desired tolerance at iteration 23. Residual norm is 9.29e-03.
iter	|r_k|		|A'*r_k|	|A|		cond(A)		STOP
001	4.629e-01	4.792e-01	1.673e+00	1.000e+00	[0,0,0]
002	2.979e-16	4.965e-16	2.000e+00	2.309e+00	[1,0,0]
lsqr achieved desired tolerance at iteration 2. The system should be compatible. Residual norm is 2.98e-16.
lsqr achieved desired tolerance at iteration 2. The system should be incompatible. Gradient norm is 4.89e-02.
lsqr achieved desired tolerance at iteration 10. The system should be incompatible. Gradient norm is 8.35e+00.
minres iterated maxIter (=1) times but reached only residual norm 1.96e-01 instead of tol=1.00e-12.
=== minres ===
iter	|r_k|		|A*r_k|		|A|			cond(A)
1	1.96e-01	4.40e-01	5.12e+00		1.16e+00
2	2.34e-02	4.91e-02	7.32e+00		1.66e+00
3	9.96e-04	5.47e-04	7.32e+00		1.66e+00
4	8.37e-05	7.52e-05	7.32e+00		1.77e+00
5	4.29e-06	4.09e-06	7.32e+00		1.77e+00
6	2.28e-07	1.46e-07	7.32e+00		1.77e+00
7	1.17e-10	6.50e-13	7.32e+00		1.77e+00
8	4.43e-19	1.76e-26	7.32e+00		1.80e+00
minres converged at iteration 8. |A r_k|=1.76e-26 and |r_k|=4.43e-19.
=== minres ===
iter	|r_k|		|A*r_k|		|A|			cond(A)
1	4.46e-02	1.82e-01	6.98e+00		1.00e+00
2	2.67e-03	1.82e-03	6.98e+00		1.54e+00
3	1.18e-04	6.55e-05	6.98e+00		1.54e+00
4	3.34e-05	1.32e-04	6.98e+00		1.54e+00
5	2.88e-07	3.45e-08	6.98e+00		1.54e+00
6	1.97e-08	1.59e-08	6.98e+00		1.54e+00
7	1.13e-11	7.14e-14	6.98e+00		1.64e+00
8	8.96e-20	7.46e-27	6.98e+00		1.71e+00
minres converged at iteration 8. |A r_k|=7.46e-27 and |r_k|=8.96e-20.
test stop by condlim
WARNING: abs(x::AbstractArray{T}) where T <: Number is deprecated, use abs.(x) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] abs(::Array{Float64,2}) at ./deprecated.jl:57
 [3] fiedler(::Type{Float64}, ::Array{Int64,1}) at /home/vagrant/.julia/v0.6/MatrixDepot/src/higham.jl:744
 [4] fiedler(::Int64) at /home/vagrant/.julia/v0.6/MatrixDepot/src/higham.jl:747
 [5] macro expansion at /home/vagrant/.julia/v0.6/KrylovMethods/test/testMINRES.jl:22 [inlined]
 [6] macro expansion at ./test.jl:860 [inlined]
 [7] anonymous at ./<missing>:?
 [8] include_from_node1(::String) at ./loading.jl:576
 [9] include(::String) at ./sysimg.jl:14
 [10] macro expansion at /home/vagrant/.julia/v0.6/KrylovMethods/test/runtests.jl:20 [inlined]
 [11] macro expansion at ./test.jl:860 [inlined]
 [12] anonymous at ./<missing>:?
 [13] include_from_node1(::String) at ./loading.jl:576
 [14] include(::String) at ./sysimg.jl:14
 [15] process_options(::Base.JLOptions) at ./client.jl:305
 [16] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/KrylovMethods/test/testMINRES.jl, in expression starting on line 1
The estimated condition number (=2.92e+02) in minres is bigger than the tolerance (=2.00e+02) at iteration 11.
test stop by beta
minres stopped because beta (=1.57e-12) became smaller than the tolerance (btol=1.00e-10) at iteration 5.
test if anything is done for zero right hand side
hilb	n=[5,5]	gmres iterated maxIter (=250) times without achieving the desired tolerance.
 gmres is OK cg is OK
cauchy	n=[4,4]	gmres iterated maxIter (=200) times without achieving the desired tolerance.
 gmres is OK cg is OK
invhilb	n=[4,4]	 gmres is OK cg is OK
moler	n=[7,7]	 gmres is OK cg is OK
pascal	n=[6,6]	gmres iterated maxIter (=300) times without achieving the desired tolerance.
 gmres is OK cg is OK
pei	n=[100,100]	 gmres is OK cg is OK
tridiag	n=[100,100]	 gmres is OK cg is OK
lehmer	n=[100,100]	gmres iterated maxIter (=5000) times without achieving the desired tolerance.
 gmres is OK cg is OK
poisson	n=[144,144]	 gmres is OK cg is OK
wathen	n=[341,341]	 gmres is OK cg is OK
Test Summary: | Pass  Total
KrylovMethods |  160    160
INFO: KrylovMethods tests passed
INFO: Removing GZip v0.3.0
INFO: Removing LinearOperators v0.4.0
INFO: Removing MatrixDepot v0.6.0

>>> End of log
