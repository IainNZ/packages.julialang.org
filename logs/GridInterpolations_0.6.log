>>> 'Pkg.add("GridInterpolations")' log
INFO: Cloning cache of GridInterpolations from https://github.com/sisl/GridInterpolations.jl.git
INFO: Installing GridInterpolations v0.1.1
INFO: Installing StaticArrays v0.7.0
INFO: Package database updated

>>> 'Pkg.test("GridInterpolations")' log
Julia Version 0.6.2
Commit d386e40c17 (2017-12-13 18:08 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-143-generic #192-Ubuntu SMP Tue Feb 27 10:45:36 UTC 2018 x86_64 x86_64
Memory: 2.939197540283203 GB (712.76171875 MB free)
Uptime: 15343.0 sec
Load Avg:  0.9970703125  0.9853515625  0.95458984375
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3504 MHz     853266 s        110 s      70482 s     401947 s         12 s
#2  3504 MHz     177068 s         40 s      30242 s    1297844 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.6
2 required packages:
 - GridInterpolations            0.1.1
 - JSON                          0.17.2
3 additional packages:
 - Compat                        0.64.0
 - Nullables                     0.0.5
 - StaticArrays                  0.7.0
INFO: Computing test dependencies for GridInterpolations...
INFO: Installing AxisAlgorithms v0.2.0
INFO: Installing Calculus v0.3.1
INFO: Installing DualNumbers v0.3.0
INFO: Installing Interpolations v0.7.3
INFO: Installing NaNMath v0.3.1
INFO: Installing Ratios v0.2.0
INFO: Installing ShowItLikeYouBuildIt v0.2.0
INFO: Installing WoodburyMatrices v0.2.2
INFO: Testing GridInterpolations
1000 interpolations of 6 dimensions with 15 cut points per dimension:
  Rectangle required 0.003020614182000002 +/- 0.007187914117310461 sec
  Simplex   required 0.0026653604909999975 +/- 0.011668472744659182 sec
How large is the simplex grid speed up over the multilinear grid?
  limiting to 2 dimensions and therefore 316 points per dim:
    mean speed: 0.0014540305000000002, std dev: 0.0014594428796237094
  limiting to 3 dimensions and therefore 46 points per dim:
    mean speed: 0.0014973656333333333, std dev: 0.0014436635976086227
  limiting to 4 dimensions and therefore 18 points per dim:
    mean speed: 0.0014418808666666666, std dev: 0.00095879597769253
  limiting to 5 dimensions and therefore 10 points per dim:
    mean speed: 0.002199029933333333, std dev: 0.001714893042250172
100 interpolations of 4 dimensions with 10 cut points per dimension:
  Rectangle required 0.0011012714299999996 +/- 0.0009503821928221692 sec
  Simplex   required 0.0019134878300000005 +/- 0.001401245894100266 sec
All tests complete
INFO: GridInterpolations tests passed
INFO: Removing AxisAlgorithms v0.2.0
INFO: Removing Calculus v0.3.1
INFO: Removing DualNumbers v0.3.0
INFO: Removing Interpolations v0.7.3
INFO: Removing NaNMath v0.3.1
INFO: Removing Ratios v0.2.0
INFO: Removing ShowItLikeYouBuildIt v0.2.0
INFO: Removing WoodburyMatrices v0.2.2

>>> End of log
