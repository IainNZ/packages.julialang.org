>>> 'Pkg.add("ApproxFun")' log
INFO: Cloning cache of ApproxFun from https://github.com/JuliaApproximation/ApproxFun.jl.git
INFO: Cloning cache of BandedMatrices from https://github.com/JuliaMatrices/BandedMatrices.jl.git
INFO: Cloning cache of FastGaussQuadrature from https://github.com/ajt60gaibb/FastGaussQuadrature.jl.git
INFO: Cloning cache of FastTransforms from https://github.com/MikaelSlevinsky/FastTransforms.jl.git
INFO: Cloning cache of ToeplitzMatrices from https://github.com/JuliaMatrices/ToeplitzMatrices.jl.git
INFO: Installing ApproxFun v0.6.0
INFO: Installing BandedMatrices v0.2.2
INFO: Installing Calculus v0.2.2
INFO: Installing DataStructures v0.5.3
INFO: Installing DualNumbers v0.3.0
INFO: Installing FastGaussQuadrature v0.2.1
INFO: Installing FastTransforms v0.1.0
INFO: Installing IntervalSets v0.0.5
INFO: Installing NaNMath v0.2.4
INFO: Installing RecipesBase v0.1.0
INFO: Installing SpecialFunctions v0.1.1
INFO: Installing StaticArrays v0.4.0
INFO: Installing StatsBase v0.13.1
INFO: Installing ToeplitzMatrices v0.2.0
INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of ApproxFun
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("ApproxFun")' log
Julia Version 0.6.0-pre.beta.314
Commit 7cd0324 (2017-04-24 22:37 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-117-generic #164-Ubuntu SMP Fri Apr 7 11:05:26 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (616.8359375 MB free)
Uptime: 4574.0 sec
Load Avg:  0.97412109375  0.96142578125  0.91259765625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3506 MHz     194692 s        114 s      19630 s     191033 s          5 s
#2  3506 MHz      68142 s         40 s      15071 s     363606 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.6
2 required packages:
 - ApproxFun                     0.6.0
 - JSON                          0.9.1
14 additional packages:
 - BandedMatrices                0.2.2
 - Calculus                      0.2.2
 - Compat                        0.24.0
 - DataStructures                0.5.3
 - DualNumbers                   0.3.0
 - FastGaussQuadrature           0.2.1
 - FastTransforms                0.1.0
 - IntervalSets                  0.0.5
 - NaNMath                       0.2.4
 - RecipesBase                   0.1.0
 - SpecialFunctions              0.1.1
 - StaticArrays                  0.4.0
 - StatsBase                     0.13.1
 - ToeplitzMatrices              0.2.0
INFO: Testing ApproxFun
Julia Version 0.6.0-pre.beta.314
Commit 7cd0324 (2017-04-24 22:37 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Helper tests
Domain tests
  5.968498 seconds (2.45 M allocations: 128.483 MiB, 1.30% gc time)
Fun tests
 69.769233 seconds (26.86 M allocations: 1.873 GiB, 2.24% gc time)
 77.205157 seconds (27.28 M allocations: 1.443 GiB, 2.09% gc time)
  1.057673 seconds (265.76 k allocations: 14.488 MiB, 1.95% gc time)
  9.593878 seconds (2.96 M allocations: 156.372 MiB, 1.72% gc time)
Operator tests
  2.676256 seconds (506.66 k allocations: 24.662 MiB, 1.64% gc time)
  3.969780 seconds (973.92 k allocations: 47.305 MiB, 1.26% gc time)
  2.344632 seconds (576.07 k allocations: 28.706 MiB, 1.15% gc time)
  3.187264 seconds (796.54 k allocations: 42.681 MiB, 1.68% gc time)
  4.051018 seconds (834.72 k allocations: 40.315 MiB, 1.19% gc time)
  4.145733 seconds (1.65 M allocations: 185.443 MiB, 4.13% gc time)
  5.108574 seconds (1.91 M allocations: 120.875 MiB, 2.17% gc time)
  0.039782 seconds (14.55 k allocations: 928.115 KiB)
  0.195208 seconds (52.13 k allocations: 2.767 MiB)
104.131397 seconds (42.33 M allocations: 2.495 GiB, 2.35% gc time)
ODE tests
  0.092924 seconds (15.54 k allocations: 1008.138 KiB)
  2.036175 seconds (486.43 k allocations: 26.613 MiB, 1.98% gc time)
  3.207254 seconds (635.00 k allocations: 34.748 MiB, 10.62% gc time)
  0.943999 seconds (260.97 k allocations: 24.802 MiB, 2.50% gc time)
  2.533456 seconds (828.24 k allocations: 45.247 MiB, 1.86% gc time)
  1.381022 seconds (434.01 k allocations: 22.878 MiB, 1.99% gc time)
  7.037237 seconds (250.17 k allocations: 16.152 MiB, 0.28% gc time)
 83.148089 seconds (31.74 M allocations: 27.917 GiB, 15.98% gc time)
Vector tests
  1.712369 seconds (422.63 k allocations: 22.235 MiB, 1.63% gc time)
  0.016288 seconds (19.90 k allocations: 850.765 KiB)
  0.081942 seconds (34.29 k allocations: 1.484 MiB)
  0.027169 seconds (27.42 k allocations: 1.114 MiB)
  3.596637 seconds (945.97 k allocations: 49.293 MiB, 1.89% gc time)
  0.237966 seconds (137.56 k allocations: 6.309 MiB)
 54.441252 seconds (21.51 M allocations: 1.073 GiB, 3.57% gc time)
Singularities tests
    Jacobi singularity tests
    Ray tests
117.338568 seconds (33.77 M allocations: 1.873 GiB, 3.08% gc time)
Integral Equations tests
 31.882206 seconds (6.02 M allocations: 331.265 MiB, 1.83% gc time)
  0.468404 seconds (99.05 k allocations: 5.484 MiB)
ERROR: LoadError: LoadError: getindex(::typeof(a), ::Int) is not defined.
Stacktrace:
 [1] getindex(::StaticArrays.SVector{2,Float64}, ::Int64) at /home/vagrant/.julia/v0.6/StaticArrays/src/indexing.jl:2
 [2] append_any(::StaticArrays.SVector{2,Float64}, ::Vararg{StaticArrays.SVector{2,Float64},N} where N) at ./essentials.jl:170
 [3] #standardLowRankFun#180(::Symbol, ::Int64, ::Int64, ::Int64, ::Function, ::ApproxFun.F, ::ApproxFun.Ultraspherical{Int64,ApproxFun.Segment{Float64}}, ::ApproxFun.JacobiWeight{ApproxFun.Ultraspherical{Int64,ApproxFun.Segment{Float64}},ApproxFun.Segment{Float64}}) at /home/vagrant/.julia/v0.6/ApproxFun/src/Multivariate/LowRankFun.jl:82
 [4] (::ApproxFun.#kw##standardLowRankFun)(::Array{Any,1}, ::ApproxFun.#standardLowRankFun, ::ApproxFun.F, ::ApproxFun.Ultraspherical{Int64,ApproxFun.Segment{Float64}}, ::ApproxFun.JacobiWeight{ApproxFun.Ultraspherical{Int64,ApproxFun.Segment{Float64}},ApproxFun.Segment{Float64}}) at ./<missing>:0
 [5] #LowRankFun#177(::Symbol, ::Symbol, ::Bool, ::Int64, ::Int64, ::Int64, ::Type{T} where T, ::ApproxFun.F, ::ApproxFun.Ultraspherical{Int64,ApproxFun.Segment{Float64}}, ::ApproxFun.JacobiWeight{ApproxFun.Ultraspherical{Int64,ApproxFun.Segment{Float64}},ApproxFun.Segment{Float64}}) at /home/vagrant/.julia/v0.6/ApproxFun/src/Multivariate/LowRankFun.jl:65
 [6] ApproxFun.LowRankFun(::ApproxFun.F, ::ApproxFun.Ultraspherical{Int64,ApproxFun.Segment{Float64}}, ::ApproxFun.JacobiWeight{ApproxFun.Ultraspherical{Int64,ApproxFun.Segment{Float64}},ApproxFun.Segment{Float64}}) at /home/vagrant/.julia/v0.6/ApproxFun/src/Multivariate/LowRankFun.jl:64
 [7] #LowRankFun#194(::Array{Any,1}, ::Type{T} where T, ::Function, ::ApproxFun.Ultraspherical{Int64,ApproxFun.Segment{Float64}}, ::Vararg{Any,N} where N) at /home/vagrant/.julia/v0.6/ApproxFun/src/Multivariate/LowRankFun.jl:184
 [8] ApproxFun.LowRankFun(::Function, ::ApproxFun.Ultraspherical{Int64,ApproxFun.Segment{Float64}}, ::ApproxFun.JacobiWeight{ApproxFun.Ultraspherical{Int64,ApproxFun.Segment{Float64}},ApproxFun.Segment{Float64}}) at /home/vagrant/.julia/v0.6/ApproxFun/src/Multivariate/LowRankFun.jl:184
 [9] include_from_node1(::String) at ./loading.jl:539
 [10] include(::String) at ./sysimg.jl:14
 [11] include_from_node1(::String) at ./loading.jl:539
 [12] include(::String) at ./sysimg.jl:14
 [13] process_options(::Base.JLOptions) at ./client.jl:305
 [14] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/ApproxFun/test/IntegralEquationsTest.jl, in expression starting on line 70
while loading /home/vagrant/.julia/v0.6/ApproxFun/test/runtests.jl, in expression starting on line 237
==============================[ ERROR: ApproxFun ]==============================

failed process: Process(`/home/vagrant/julia/bin/julia -Cx86-64 -J/home/vagrant/julia/lib/julia/sys.so --compile=yes --depwarn=yes --check-bounds=yes --code-coverage=none --color=no --compilecache=yes /home/vagrant/.julia/v0.6/ApproxFun/test/runtests.jl`, ProcessExited(1)) [1]

================================================================================
ERROR: ApproxFun had test errors

>>> End of log
