>>> 'Pkg.add("ApproxFun")' log
INFO: Cloning cache of ApproxFun from https://github.com/JuliaApproximation/ApproxFun.jl.git
INFO: Cloning cache of BandedMatrices from https://github.com/JuliaMatrices/BandedMatrices.jl.git
INFO: Cloning cache of FastGaussQuadrature from https://github.com/ajt60gaibb/FastGaussQuadrature.jl.git
INFO: Cloning cache of FastTransforms from https://github.com/MikaelSlevinsky/FastTransforms.jl.git
INFO: Cloning cache of ToeplitzMatrices from https://github.com/JuliaMatrices/ToeplitzMatrices.jl.git
INFO: Installing ApproxFun v0.6.0
INFO: Installing BandedMatrices v0.2.2
INFO: Installing Calculus v0.2.2
INFO: Installing DataStructures v0.5.3
INFO: Installing DualNumbers v0.3.0
INFO: Installing FastGaussQuadrature v0.2.1
INFO: Installing FastTransforms v0.1.0
INFO: Installing IntervalSets v0.0.5
INFO: Installing NaNMath v0.2.4
INFO: Installing RecipesBase v0.1.0
INFO: Installing SpecialFunctions v0.1.1
INFO: Installing StaticArrays v0.4.0
INFO: Installing StatsBase v0.13.1
INFO: Installing ToeplitzMatrices v0.2.0
INFO: Package database updated

>>> 'Pkg.test("ApproxFun")' log
Julia Version 0.6.0-pre.beta.230
Commit b9a541e (2017-04-21 02:02 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-116-generic #163-Ubuntu SMP Fri Mar 31 14:13:22 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (376.73046875 MB free)
Uptime: 4665.0 sec
Load Avg:  0.9970703125  0.970703125  0.916015625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz     203838 s         86 s      19592 s     190613 s          4 s
#2  3499 MHz      63296 s         72 s      15740 s     376210 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.6
2 required packages:
 - ApproxFun                     0.6.0
 - JSON                          0.9.0
14 additional packages:
 - BandedMatrices                0.2.2
 - Calculus                      0.2.2
 - Compat                        0.24.0
 - DataStructures                0.5.3
 - DualNumbers                   0.3.0
 - FastGaussQuadrature           0.2.1
 - FastTransforms                0.1.0
 - IntervalSets                  0.0.5
 - NaNMath                       0.2.4
 - RecipesBase                   0.1.0
 - SpecialFunctions              0.1.1
 - StaticArrays                  0.4.0
 - StatsBase                     0.13.1
 - ToeplitzMatrices              0.2.0
INFO: Testing ApproxFun
Julia Version 0.6.0-pre.beta.230
Commit b9a541e (2017-04-21 02:02 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Helper tests
Domain tests
  5.813202 seconds (2.45 M allocations: 128.355 MiB, 1.43% gc time)
Fun tests
 69.118905 seconds (26.86 M allocations: 1.873 GiB, 2.22% gc time)
 90.452604 seconds (27.28 M allocations: 1.443 GiB, 1.89% gc time)
  1.119707 seconds (267.26 k allocations: 14.607 MiB, 1.60% gc time)
  9.185121 seconds (2.96 M allocations: 157.374 MiB, 1.68% gc time)
Operator tests
  2.125283 seconds (506.65 k allocations: 24.590 MiB, 2.16% gc time)
  5.103969 seconds (973.88 k allocations: 47.243 MiB, 1.01% gc time)
  2.843206 seconds (576.08 k allocations: 29.239 MiB, 0.71% gc time)
  2.766920 seconds (796.55 k allocations: 42.670 MiB, 1.56% gc time)
  3.547393 seconds (834.73 k allocations: 40.294 MiB, 0.54% gc time)
  4.997109 seconds (1.65 M allocations: 185.532 MiB, 3.19% gc time)
  6.373380 seconds (1.91 M allocations: 120.901 MiB, 1.56% gc time)
  0.037126 seconds (14.55 k allocations: 928.115 KiB)
  0.266791 seconds (52.13 k allocations: 2.767 MiB)
110.313076 seconds (42.34 M allocations: 2.496 GiB, 2.11% gc time)
ODE tests
  0.076731 seconds (15.53 k allocations: 998.106 KiB)
  2.181771 seconds (486.45 k allocations: 26.737 MiB, 1.85% gc time)
  3.357990 seconds (634.99 k allocations: 34.547 MiB, 9.15% gc time)
  0.997458 seconds (260.97 k allocations: 24.846 MiB, 1.99% gc time)
  2.946779 seconds (828.20 k allocations: 45.934 MiB, 2.32% gc time)
  0.922684 seconds (433.96 k allocations: 22.843 MiB, 2.03% gc time)
  7.339350 seconds (250.29 k allocations: 16.710 MiB, 0.22% gc time)
 85.149692 seconds (31.89 M allocations: 27.918 GiB, 12.83% gc time)
Vector tests
  1.712902 seconds (422.64 k allocations: 22.239 MiB, 1.70% gc time)
  0.018506 seconds (19.89 k allocations: 785.562 KiB)
  0.072620 seconds (34.29 k allocations: 1.484 MiB)
  0.020737 seconds (27.42 k allocations: 1.114 MiB)
  3.462923 seconds (944.01 k allocations: 49.196 MiB, 1.69% gc time)
  0.225246 seconds (136.88 k allocations: 6.763 MiB)
 50.434467 seconds (21.49 M allocations: 1.070 GiB, 3.29% gc time)
Singularities tests
    Jacobi singularity tests
    Ray tests
100.807655 seconds (33.77 M allocations: 1.872 GiB, 3.08% gc time)
Integral Equations tests
 30.335897 seconds (6.02 M allocations: 331.739 MiB, 1.82% gc time)
  0.388704 seconds (99.05 k allocations: 5.483 MiB, 8.51% gc time)
ERROR: LoadError: LoadError: getindex(::typeof(a), ::Int) is not defined.
Stacktrace:
 [1] getindex(::StaticArrays.SVector{2,Float64}, ::Int64) at /home/vagrant/.julia/v0.6/StaticArrays/src/indexing.jl:2
 [2] append_any(::StaticArrays.SVector{2,Float64}, ::Vararg{StaticArrays.SVector{2,Float64},N} where N) at ./essentials.jl:170
 [3] #standardLowRankFun#180(::Symbol, ::Int64, ::Int64, ::Int64, ::Function, ::ApproxFun.F, ::ApproxFun.Ultraspherical{Int64,ApproxFun.Segment{Float64}}, ::ApproxFun.JacobiWeight{ApproxFun.Ultraspherical{Int64,ApproxFun.Segment{Float64}},ApproxFun.Segment{Float64}}) at /home/vagrant/.julia/v0.6/ApproxFun/src/Multivariate/LowRankFun.jl:82
 [4] (::ApproxFun.#kw##standardLowRankFun)(::Array{Any,1}, ::ApproxFun.#standardLowRankFun, ::ApproxFun.F, ::ApproxFun.Ultraspherical{Int64,ApproxFun.Segment{Float64}}, ::ApproxFun.JacobiWeight{ApproxFun.Ultraspherical{Int64,ApproxFun.Segment{Float64}},ApproxFun.Segment{Float64}}) at ./<missing>:0
 [5] #LowRankFun#177(::Symbol, ::Symbol, ::Bool, ::Int64, ::Int64, ::Int64, ::Type{T} where T, ::ApproxFun.F, ::ApproxFun.Ultraspherical{Int64,ApproxFun.Segment{Float64}}, ::ApproxFun.JacobiWeight{ApproxFun.Ultraspherical{Int64,ApproxFun.Segment{Float64}},ApproxFun.Segment{Float64}}) at /home/vagrant/.julia/v0.6/ApproxFun/src/Multivariate/LowRankFun.jl:65
 [6] ApproxFun.LowRankFun(::ApproxFun.F, ::ApproxFun.Ultraspherical{Int64,ApproxFun.Segment{Float64}}, ::ApproxFun.JacobiWeight{ApproxFun.Ultraspherical{Int64,ApproxFun.Segment{Float64}},ApproxFun.Segment{Float64}}) at /home/vagrant/.julia/v0.6/ApproxFun/src/Multivariate/LowRankFun.jl:64
 [7] #LowRankFun#194(::Array{Any,1}, ::Type{T} where T, ::Function, ::ApproxFun.Ultraspherical{Int64,ApproxFun.Segment{Float64}}, ::Vararg{Any,N} where N) at /home/vagrant/.julia/v0.6/ApproxFun/src/Multivariate/LowRankFun.jl:184
 [8] ApproxFun.LowRankFun(::Function, ::ApproxFun.Ultraspherical{Int64,ApproxFun.Segment{Float64}}, ::ApproxFun.JacobiWeight{ApproxFun.Ultraspherical{Int64,ApproxFun.Segment{Float64}},ApproxFun.Segment{Float64}}) at /home/vagrant/.julia/v0.6/ApproxFun/src/Multivariate/LowRankFun.jl:184
 [9] include_from_node1(::String) at ./loading.jl:539
 [10] include(::String) at ./sysimg.jl:14
 [11] include_from_node1(::String) at ./loading.jl:539
 [12] include(::String) at ./sysimg.jl:14
 [13] process_options(::Base.JLOptions) at ./client.jl:305
 [14] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/ApproxFun/test/IntegralEquationsTest.jl, in expression starting on line 70
while loading /home/vagrant/.julia/v0.6/ApproxFun/test/runtests.jl, in expression starting on line 237
==============================[ ERROR: ApproxFun ]==============================

failed process: Process(`/home/vagrant/julia/bin/julia -Cx86-64 -J/home/vagrant/julia/lib/julia/sys.so --compile=yes --depwarn=yes --check-bounds=yes --code-coverage=none --color=no --compilecache=yes /home/vagrant/.julia/v0.6/ApproxFun/test/runtests.jl`, ProcessExited(1)) [1]

================================================================================
ERROR: ApproxFun had test errors

>>> End of log
