>>> 'Pkg.add("BioStructures")' log
WARNING: Base.Pkg is deprecated, run `using Pkg` instead
 in module Main
[ Info: Cloning cache of BioStructures from https://github.com/BioJulia/BioStructures.jl.git
[ Info: Installing Automa v0.4.0
[ Info: Installing BioCore v1.3.0
[ Info: Installing BioSequences v0.8.3
[ Info: Installing BioStructures v0.1.0
[ Info: Installing BioSymbols v1.2.0
[ Info: Installing BufferedStreams v0.4.0
[ Info: Installing Combinatorics v0.5.0
[ Info: Installing DataStructures v0.7.4
[ Info: Installing IndexableBitVectors v0.1.2
[ Info: Installing IntervalTrees v0.4.1
[ Info: Installing IterTools v0.2.1
[ Info: Installing Libz v0.2.4
[ Info: Installing Polynomials v0.2.1
[ Info: Installing Twiddle v0.4.0
[ Info: Package database updated

>>> 'Pkg.test("BioStructures")' log
WARNING: Base.versioninfo is deprecated: it has been moved to the standard library package `InteractiveUtils`.
Add `using InteractiveUtils` to your imports.
 in module Main
WARNING: Base.versioninfo is deprecated: it has been moved to the standard library package `InteractiveUtils`.
Add `using InteractiveUtils` to your imports.
 in module Main
Julia Version 0.7.0-DEV.4449
Commit d1f26785f2 (2018-03-02 17:11 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
      Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-135-generic #184-Ubuntu SMP Wed Oct 18 11:55:51 UTC 2017 x86_64 x86_64
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
              speed         user         nice          sys         idle          irq
       #1  3499 MHz     989957 s         98 s      58876 s     302902 s         10 s
       #2  3499 MHz     236560 s         44 s      25871 s    1298085 s          0 s
       
  Memory: 2.93927001953125 GB (655.6328125 MB free)
  Uptime: 15846.0 sec
  Load Avg:  0.98291015625  0.9853515625  0.97998046875
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant
Packages:
  Package Directory: /home/vagrant/.julia/v0.7
  Package Status:
2 required packages:
 - BioStructures                 0.1.0
 - JSON                          0.17.1
15 additional packages:
 - Automa                        0.4.0
 - BioCore                       1.3.0
 - BioSequences                  0.8.3
 - BioSymbols                    1.2.0
 - BufferedStreams               0.4.0
 - Combinatorics                 0.5.0
 - Compat                        0.56.0
 - DataStructures                0.7.4
 - IndexableBitVectors           0.1.2
 - IntervalTrees                 0.4.1
 - IterTools                     0.2.1
 - Libz                          0.2.4
 - Nullables                     0.0.3
 - Polynomials                   0.2.1
 - Twiddle                       0.4.0
WARNING: Base.Pkg is deprecated, run `using Pkg` instead
 in module Main
[ Info: Testing BioStructures
WARNING: Base.Test is deprecated, run `using Test` instead
  likely near /home/vagrant/.julia/v0.7/BioStructures/test/runtests.jl:3
┌ Warning: Deprecated syntax `immutable` at /home/vagrant/.julia/v0.7/BioCore/src/Exceptions.jl:11.
│ Use `struct` instead.
└ @ nothing Exceptions.jl:11
┌ Warning: Deprecated syntax `parametric method syntax Base.open{T <: AbstractFormattedIO}(f::Function, ::Type{T}, args...; kwargs...)` around /home/vagrant/.julia/v0.7/BioCore/src/IO.jl:41.
│ Use `Base.open(f::Function, #s1::Type{T}, args...; kwargs...) where T <: AbstractFormattedIO` instead.
└ @ nothing IO.jl:41
┌ Warning: Deprecated syntax `parametric method syntax Base.iteratorsize{T <: AbstractReader}(::Type{T})` around /home/vagrant/.julia/v0.7/BioCore/src/IO.jl:57.
│ Use `Base.iteratorsize(#unused#::Type{T}) where T <: AbstractReader` instead.
└ @ nothing IO.jl:57
WARNING: Base.iteratorsize is deprecated, use IteratorSize instead.
  likely near /home/vagrant/.julia/v0.7/BioCore/src/IO.jl:57
┌ Warning: Deprecated syntax `parametric method syntax Base.open{T <: AbstractReader}(::Type{T}, filepath::AbstractString, args...; kwargs...)` around /home/vagrant/.julia/v0.7/BioCore/src/IO.jl:60.
│ Use `Base.open(#s6::Type{T}, filepath::AbstractString, args...; kwargs...) where T <: AbstractReader` instead.
└ @ nothing IO.jl:60
┌ Warning: Deprecated syntax `parametric method syntax Base.open{T <: AbstractWriter}(::Type{T}, filepath::AbstractString, args...; kwargs...)` around /home/vagrant/.julia/v0.7/BioCore/src/IO.jl:72.
│ Use `Base.open(#s6::Type{T}, filepath::AbstractString, args...; kwargs...) where T <: AbstractWriter` instead.
└ @ nothing IO.jl:72
┌ Warning: Deprecated syntax `parametric method syntax Base.open{F <: FileFormat}(::AbstractString, ::Type{F})` around /home/vagrant/.julia/v0.7/BioCore/src/IO.jl:87.
│ Use `Base.open(#unused#::AbstractString, #unused#::Type{F}) where F <: FileFormat` instead.
└ @ nothing IO.jl:87
┌ Warning: Deprecated syntax `parametric method syntax Base.open{F <: FileFormat}(::AbstractString, ::AbstractString, ::Type{F})` around /home/vagrant/.julia/v0.7/BioCore/src/IO.jl:91.
│ Use `Base.open(#unused#::AbstractString, #unused#::AbstractString, #unused#::Type{F}) where F <: FileFormat` instead.
└ @ nothing IO.jl:91
WARNING: importing deprecated binding Base.Void into Mem.
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/BioCore/src/Mem.jl:10
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/BioCore/src/Mem.jl:10
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/BioCore/src/Mem.jl:10
┌ Warning: Deprecated syntax `type` at /home/vagrant/.julia/v0.7/BioCore/src/Ragel.jl:17.
│ Use `mutable struct` instead.
└ @ nothing Ragel.jl:17
┌ Warning: Deprecated syntax `parametric method syntax (::Type{StableDict{K, V}}){K, V}()` around /home/vagrant/.julia/v0.7/Automa/src/sdict.jl:12.
│ Use `(::Type{StableDict{K, V}})() where {K, V}` instead.
└ @ nothing sdict.jl:12
┌ Warning: Deprecated syntax `parametric method syntax (::Type{StableDict}){K, V}(dict::StableDict{K, V})` around /home/vagrant/.julia/v0.7/Automa/src/sdict.jl:20.
│ Use `(::Type{StableDict})(dict::StableDict{K, V}) where {K, V}` instead.
└ @ nothing sdict.jl:20
WARNING: importing deprecated binding Base.Associative into Automa.
WARNING: Base.Associative is deprecated, use AbstractDict instead.
  likely near /home/vagrant/.julia/v0.7/Automa/src/sdict.jl:4
┌ Warning: Deprecated syntax `parametric method syntax StableDict{K, V}(kvs::Pair{K, V}...)` around /home/vagrant/.julia/v0.7/Automa/src/sdict.jl:29.
│ Use `StableDict(kvs::Pair{K, V}...) where {K, V}` instead.
└ @ nothing sdict.jl:29
┌ Warning: Deprecated syntax `parametric method syntax (::Type{StableDict{K, V}}){K, V}(kvs)` around /home/vagrant/.julia/v0.7/Automa/src/sdict.jl:37.
│ Use `(::Type{StableDict{K, V}})(kvs) where {K, V}` instead.
└ @ nothing sdict.jl:37
┌ Warning: Deprecated syntax `parametric method syntax Base.convert{K, V}(::Type{StableDict{K, V}}, dict::Associative)` around /home/vagrant/.julia/v0.7/Automa/src/sdict.jl:53.
│ Use `Base.convert(#unused#::Type{StableDict{K, V}}, dict::Associative) where {K, V}` instead.
└ @ nothing sdict.jl:53
WARNING: Base.Associative is deprecated, use AbstractDict instead.
  likely near /home/vagrant/.julia/v0.7/Automa/src/sdict.jl:52
┌ Warning: Deprecated syntax `parametric method syntax (::Type{StableSet{T}}){T}()` around /home/vagrant/.julia/v0.7/Automa/src/sset.jl:8.
│ Use `(::Type{StableSet{T}})() where T` instead.
└ @ nothing sset.jl:8
WARNING: importing deprecated binding Base.Void into Automa.
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/Automa/src/sset.jl:4
┌ Warning: Deprecated syntax `parametric method syntax Base.eltype{T}(::Type{StableSet{T}})` around /home/vagrant/.julia/v0.7/Automa/src/sset.jl:31.
│ Use `Base.eltype(#unused#::Type{StableSet{T}}) where T` instead.
└ @ nothing sset.jl:31
WARNING: importing deprecated binding Base.Nullable into RegExp.
ERROR: LoadError: LoadError: TypeError: in Type{...} expression, expected UnionAll, got typeof(Base.Nullable)
Stacktrace:
 [1] top-level scope
 [2] include at ./boot.jl:305 [inlined]
 [3] include_relative(::Module, ::String) at ./loading.jl:1072
 [4] include at ./sysimg.jl:29 [inlined]
 [5] include(::String) at /home/vagrant/.julia/v0.7/Automa/src/Automa.jl:3
 [6] top-level scope
 [7] include at ./boot.jl:305 [inlined]
 [8] include_relative(::Module, ::String) at ./loading.jl:1072
 [9] include(::Module, ::String) at ./sysimg.jl:29
 [10] top-level scope
 [11] eval at ./boot.jl:308 [inlined]
 [12] top-level scope at ./<missing>:3
in expression starting at /home/vagrant/.julia/v0.7/Automa/src/re.jl:13
in expression starting at /home/vagrant/.julia/v0.7/Automa/src/Automa.jl:15
ERROR: LoadError: LoadError: Failed to precompile Automa to /home/vagrant/.julia/compiled/v0.7/Automa.ji.
Stacktrace:
 [1] error at ./error.jl:33 [inlined]
 [2] compilecache(::Base.PkgId) at ./loading.jl:1206
 [3] _require(::Base.PkgId) at ./loading.jl:979
 [4] require(::Base.PkgId) at ./loading.jl:879
 [5] require(::Module, ::Symbol) at ./loading.jl:874
 [6] include at ./boot.jl:305 [inlined]
 [7] include_relative(::Module, ::String) at ./loading.jl:1072
 [8] include at ./sysimg.jl:29 [inlined]
 [9] include(::String) at /home/vagrant/.julia/v0.7/BioCore/src/BioCore.jl:11
 [10] top-level scope
 [11] include at ./boot.jl:305 [inlined]
 [12] include_relative(::Module, ::String) at ./loading.jl:1072
 [13] include(::Module, ::String) at ./sysimg.jl:29
 [14] top-level scope
 [15] eval at ./boot.jl:308 [inlined]
 [16] top-level scope at ./<missing>:3
in expression starting at /home/vagrant/.julia/v0.7/BioCore/src/ReaderHelper.jl:11
in expression starting at /home/vagrant/.julia/v0.7/BioCore/src/BioCore.jl:18
ERROR: LoadError: Failed to precompile BioCore to /home/vagrant/.julia/compiled/v0.7/BioCore.ji.
Stacktrace:
 [1] error at ./error.jl:33 [inlined]
 [2] compilecache(::Base.PkgId) at ./loading.jl:1206
 [3] _require(::Base.PkgId) at ./loading.jl:1008
 [4] require(::Base.PkgId) at ./loading.jl:879
 [5] require(::Module, ::Symbol) at ./loading.jl:874
 [6] include at ./boot.jl:305 [inlined]
 [7] include_relative(::Module, ::String) at ./loading.jl:1072
 [8] include(::Module, ::String) at ./sysimg.jl:29
 [9] exec_options(::Base.JLOptions) at ./client.jl:332
 [10] _start() at ./client.jl:448
in expression starting at /home/vagrant/.julia/v0.7/BioStructures/test/runtests.jl:4
┌ Error: ------------------------------------------------------------
│ # Testing failed for BioStructures
│   exception =
│    failed process: Process(`/home/vagrant/julia/bin/julia -Cnative -J/home/vagrant/julia/lib/julia/sys.so --compile=yes --depwarn=yes --code-coverage=none --color=no --compiled-modules=yes --check-bounds=yes --warn-overwrite=yes --startup-file=yes /home/vagrant/.julia/v0.7/BioStructures/test/runtests.jl`, ProcessExited(1)) [1]
│    Stacktrace:
│     [1] error(::String, ::Base.Process, ::String, ::Int64, ::String) at ./error.jl:42
│     [2] pipeline_error(::Base.Process) at ./process.jl:712
│     [3] #run#534(::Bool, ::Function, ::Cmd) at ./process.jl:670
│     [4] run at ./process.jl:668 [inlined]
│     [5] (::getfield(Pkg.Entry, Symbol("##56#57")){Bool,String,Array{AbstractString,1}})() at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Pkg/src/entry.jl:729
│     [6] cd(::getfield(Pkg.Entry, Symbol("##56#57")){Bool,String,Array{AbstractString,1}}, ::String) at ./file.jl:72
│     [7] #test!#55(::Bool, ::Function, ::String, ::Array{AbstractString,1}, ::Array{AbstractString,1}, ::Array{AbstractString,1}) at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Pkg/src/entry.jl:717
│     [8] (::getfield(Pkg.Entry, Symbol("#kw##test!")))(::NamedTuple{(:coverage,),Tuple{Bool}}, ::typeof(Pkg.Entry.test!), ::String, ::Array{AbstractString,1}, ::Array{AbstractString,1}, ::Array{AbstractString,1}) at ./<missing>:0
│     [9] #test#59(::Bool, ::Function, ::Array{AbstractString,1}) at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Pkg/src/entry.jl:756
│     [10] #test at ./<missing>:0 [inlined]
│     [11] #4 at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Pkg/src/dir.jl:36 [inlined]
│     [12] cd(::getfield(Pkg.Dir, Symbol("##4#7")){Base.Iterators.Pairs{Symbol,Bool,Tuple{Symbol},NamedTuple{(:coverage,),Tuple{Bool}}},typeof(Pkg.Entry.test),Tuple{Array{AbstractString,1}}}, ::String) at ./file.jl:72
│     [13] #cd#1(::Base.Iterators.Pairs{Symbol,Bool,Tuple{Symbol},NamedTuple{(:coverage,),Tuple{Bool}}}, ::Function, ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N} where N) at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Pkg/src/dir.jl:36
│     [14] (::getfield(Pkg.Dir, Symbol("#kw##cd")))(::NamedTuple{(:coverage,),Tuple{Bool}}, ::typeof(Pkg.Dir.cd), ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N} where N) at ./<missing>:0
│     [15] #test#3(::Bool, ::Function, ::String, ::Vararg{String,N} where N) at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Pkg/src/Pkg.jl:276
│     [16] test(::String, ::Vararg{String,N} where N) at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Pkg/src/Pkg.jl:276
│     [17] top-level scope
│     [18] eval at ./boot.jl:308 [inlined]
│     [19] eval(::Module, ::Expr) at ./sysimg.jl:74
│     [20] exec_options(::Base.JLOptions) at ./client.jl:309
│     [21] _start() at ./client.jl:448
└ @ Pkg.Entry entry.jl:732
ERROR: BioStructures had test errors

>>> End of log
