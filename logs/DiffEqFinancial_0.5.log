>>> 'Pkg.add("DiffEqFinancial")' log
INFO: Installing DataStructures v0.5.3
INFO: Installing DiffEqBase v1.9.0
INFO: Installing DiffEqFinancial v0.2.0
INFO: Installing DiffEqNoiseProcess v0.2.0
INFO: Installing Hiccup v0.1.1
INFO: Installing Juno v0.2.7
INFO: Installing MacroTools v0.3.7
INFO: Installing Media v0.2.7
INFO: Installing Ranges v0.0.1
INFO: Installing RecipesBase v0.1.0
INFO: Installing RecursiveArrayTools v0.8.0
INFO: Installing ResettableStacks v0.1.0
INFO: Installing SimpleTraits v0.5.0
INFO: Installing StaticArrays v0.3.1
INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of DiffEqFinancial
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("DiffEqFinancial")' log
Julia Version 0.5.2
Commit f4c6c9d (2017-05-06 16:34 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-121-generic #170-Ubuntu SMP Wed Jun 14 09:04:33 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1726.56640625 MB free)
Uptime: 29273.0 sec
Load Avg:  0.9970703125  1.0146484375  1.04541015625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3498 MHz    1804653 s        212 s     134117 s     655061 s         36 s
#2  3498 MHz     780517 s       6284 s      79677 s    1975685 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.7.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.5
2 required packages:
 - DiffEqFinancial               0.2.0
 - JSON                          0.12.0
14 additional packages:
 - Compat                        0.26.0
 - DataStructures                0.5.3
 - DiffEqBase                    1.9.0
 - DiffEqNoiseProcess            0.2.0
 - Hiccup                        0.1.1
 - Juno                          0.2.7
 - MacroTools                    0.3.7
 - Media                         0.2.7
 - Ranges                        0.0.1
 - RecipesBase                   0.1.0
 - RecursiveArrayTools           0.8.0
 - ResettableStacks              0.1.0
 - SimpleTraits                  0.5.0
 - StaticArrays                  0.3.1
INFO: Computing test dependencies for DiffEqFinancial...
INFO: Installing Calculus v0.2.2
INFO: Installing DiffBase v0.1.0
INFO: Installing Distances v0.4.1
INFO: Installing ForwardDiff v0.4.2
INFO: Installing Iterators v0.3.1
INFO: Installing LineSearches v0.1.5
INFO: Installing NLsolve v0.9.1
INFO: Installing NaNMath v0.2.5
INFO: Installing Optim v0.7.8
INFO: Installing Parameters v0.7.2
INFO: Installing PositiveFactorizations v0.0.4
INFO: Installing Roots v0.4.0
INFO: Installing SpecialFunctions v0.1.1
INFO: Installing StochasticDiffEq v2.2.1
INFO: Testing DiffEqFinancial
ERROR: LoadError: Bridging distribution is unknown. Cannot use adapativity
 in reject_step!(::DiffEqNoiseProcess.NoiseProcess{Float64,2,Float64,Array{Float64,1},Array{Float64,1},Array{Array{Float64,1},1},DiffEqNoiseProcess.##24#26{Array{Float64,2},Array{Float64,1}},DiffEqNoiseProcess.##25#27,true,DataStructures.Stack{Tuple{Float64,Array{Float64,1},Array{Float64,1}}},ResettableStacks.ResettableStack{Tuple{Float64,Array{Float64,1},Array{Float64,1}}},DiffEqNoiseProcess.RSWM{:RSwM3,Float64}}, ::Float64) at /home/vagrant/.julia/v0.5/DiffEqNoiseProcess/src/noise_interfaces/noise_process_interface.jl:296
 in loopheader! at /home/vagrant/.julia/v0.5/StochasticDiffEq/src/integrators/integrator_utils.jl:15 [inlined]
 in solve!(::StochasticDiffEq.SDEIntegrator{StochasticDiffEq.SRIW1,Array{Float64,1},Float64,Float64,Float64,Float64,DiffEqNoiseProcess.NoiseProcess{Float64,2,Float64,Array{Float64,1},Array{Float64,1},Array{Array{Float64,1},1},DiffEqNoiseProcess.##24#26{Array{Float64,2},Array{Float64,1}},DiffEqNoiseProcess.##25#27,true,DataStructures.Stack{Tuple{Float64,Array{Float64,1},Array{Float64,1}}},ResettableStacks.ResettableStack{Tuple{Float64,Array{Float64,1},Array{Float64,1}}},DiffEqNoiseProcess.RSWM{:RSwM3,Float64}},Array{Float64,1},DiffEqBase.RODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},DiffEqNoiseProcess.NoiseProcess{Float64,2,Float64,Array{Float64,1},Array{Float64,1},Array{Array{Float64,1},1},DiffEqNoiseProcess.##24#26{Array{Float64,2},Array{Float64,1}},DiffEqNoiseProcess.##25#27,true,DataStructures.Stack{Tuple{Float64,Array{Float64,1},Array{Float64,1}}},ResettableStacks.ResettableStack{Tuple{Float64,Array{Float64,1},Array{Float64,1}}},DiffEqNoiseProcess.RSWM{:RSwM3,Float64}},DiffEqFinancial.HestonProblem{Array{Float64,1},Float64,true,DiffEqNoiseProcess.NoiseProcess{Float64,2,Float64,Array{Float64,1},Array{Float64,1},Array{Array{Float64,1},1},DiffEqNoiseProcess.##24#26{Array{Float64,2},Array{Float64,1}},DiffEqNoiseProcess.##25#27,true,DataStructures.Stack{Tuple{Float64,Array{Float64,1},Array{Float64,1}}},ResettableStacks.ResettableStack{Tuple{Float64,Array{Float64,1},Array{Float64,1}}},DiffEqNoiseProcess.RSWM{:RSwM3,Float64}},DiffEqFinancial.##2#4{Float64,Float64,Float64},DiffEqFinancial.##3#5{Float64},DiffEqBase.CallbackSet{Tuple{},Tuple{}},Void,UniformScaling{Int64}},StochasticDiffEq.SRIW1,StochasticDiffEq.LinearInterpolationData{Array{Array{Float64,1},1},Array{Float64,1}}},StochasticDiffEq.SRIW1Cache{Array{Float64,1},Array{Float64,1},Array{Float64,1}},Void,DiffEqFinancial.##2#4{Float64,Float64,Float64},DiffEqFinancial.##3#5{Float64},StochasticDiffEq.SDEOptions{Float64,Float64,Float64,Float64,DiffEqBase.#ODE_DEFAULT_NORM,DiffEqBase.CallbackSet{Tuple{},Tuple{}},DiffEqBase.#ODE_DEFAULT_ISOUTOFDOMAIN,DiffEqBase.#ODE_DEFAULT_PROG_MESSAGE,DiffEqBase.#ODE_DEFAULT_UNSTABLE_CHECK,DataStructures.BinaryHeap{Float64,DataStructures.LessThan},Void,Void},DiffEqNoiseProcess.NoiseProcess{Float64,2,Float64,Array{Float64,1},Array{Float64,1},Array{Array{Float64,1},1},DiffEqNoiseProcess.##24#26{Array{Float64,2},Array{Float64,1}},DiffEqNoiseProcess.##25#27,true,DataStructures.Stack{Tuple{Float64,Array{Float64,1},Array{Float64,1}}},ResettableStacks.ResettableStack{Tuple{Float64,Array{Float64,1},Array{Float64,1}}},DiffEqNoiseProcess.RSWM{:RSwM3,Float64}}}) at /home/vagrant/.julia/v0.5/StochasticDiffEq/src/solve.jl:352
 in #solve#34(::Array{Any,1}, ::Function, ::DiffEqFinancial.HestonProblem{Array{Float64,1},Float64,true,DiffEqNoiseProcess.NoiseProcess{Float64,2,Float64,Array{Float64,1},Array{Float64,1},Array{Array{Float64,1},1},DiffEqNoiseProcess.##24#26{Array{Float64,2},Array{Float64,1}},DiffEqNoiseProcess.##25#27,true,DataStructures.Stack{Tuple{Float64,Array{Float64,1},Array{Float64,1}}},ResettableStacks.ResettableStack{Tuple{Float64,Array{Float64,1},Array{Float64,1}}},DiffEqNoiseProcess.RSWM{:RSwM3,Float64}},DiffEqFinancial.##2#4{Float64,Float64,Float64},DiffEqFinancial.##3#5{Float64},DiffEqBase.CallbackSet{Tuple{},Tuple{}},Void,UniformScaling{Int64}}, ::StochasticDiffEq.SRIW1, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.5/StochasticDiffEq/src/solve.jl:8
 in solve(::DiffEqFinancial.HestonProblem{Array{Float64,1},Float64,true,DiffEqNoiseProcess.NoiseProcess{Float64,2,Float64,Array{Float64,1},Array{Float64,1},Array{Array{Float64,1},1},DiffEqNoiseProcess.##24#26{Array{Float64,2},Array{Float64,1}},DiffEqNoiseProcess.##25#27,true,DataStructures.Stack{Tuple{Float64,Array{Float64,1},Array{Float64,1}}},ResettableStacks.ResettableStack{Tuple{Float64,Array{Float64,1},Array{Float64,1}}},DiffEqNoiseProcess.RSWM{:RSwM3,Float64}},DiffEqFinancial.##2#4{Float64,Float64,Float64},DiffEqFinancial.##3#5{Float64},DiffEqBase.CallbackSet{Tuple{},Tuple{}},Void,UniformScaling{Int64}}, ::StochasticDiffEq.SRIW1) at /home/vagrant/.julia/v0.5/StochasticDiffEq/src/solve.jl:7
 in include_from_node1(::String) at ./loading.jl:488
 in process_options(::Base.JLOptions) at ./client.jl:265
 in _start() at ./client.jl:321
while loading /home/vagrant/.julia/v0.5/DiffEqFinancial/test/runtests.jl, in expression starting on line 8
===========================[ ERROR: DiffEqFinancial ]===========================

failed process: Process(`/home/vagrant/julia/bin/julia -Cx86-64 -J/home/vagrant/julia/lib/julia/sys.so --compile=yes --depwarn=yes --check-bounds=yes --code-coverage=none --color=no --compilecache=yes /home/vagrant/.julia/v0.5/DiffEqFinancial/test/runtests.jl`, ProcessExited(1)) [1]

================================================================================
INFO: Removing Calculus v0.2.2
INFO: Removing DiffBase v0.1.0
INFO: Removing Distances v0.4.1
INFO: Removing ForwardDiff v0.4.2
INFO: Removing Iterators v0.3.1
INFO: Removing LineSearches v0.1.5
INFO: Removing NLsolve v0.9.1
INFO: Removing NaNMath v0.2.5
INFO: Removing Optim v0.7.8
INFO: Removing Parameters v0.7.2
INFO: Removing PositiveFactorizations v0.0.4
INFO: Removing Roots v0.4.0
INFO: Removing SpecialFunctions v0.1.1
INFO: Removing StochasticDiffEq v2.2.1
ERROR: DiffEqFinancial had test errors
 in #test#61(::Bool, ::Function, ::Array{AbstractString,1}) at ./pkg/entry.jl:748
 in (::Base.Pkg.Entry.#kw##test)(::Array{Any,1}, ::Base.Pkg.Entry.#test, ::Array{AbstractString,1}) at ./<missing>:0
 in (::Base.Pkg.Dir.##2#3{Array{Any,1},Base.Pkg.Entry.#test,Tuple{Array{AbstractString,1}}})() at ./pkg/dir.jl:31
 in cd(::Base.Pkg.Dir.##2#3{Array{Any,1},Base.Pkg.Entry.#test,Tuple{Array{AbstractString,1}}}, ::String) at ./file.jl:59
 in #cd#1(::Array{Any,1}, ::Function, ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N}) at ./pkg/dir.jl:31
 in (::Base.Pkg.Dir.#kw##cd)(::Array{Any,1}, ::Base.Pkg.Dir.#cd, ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N}) at ./<missing>:0
 in #test#3(::Bool, ::Function, ::String, ::Vararg{String,N}) at ./pkg/pkg.jl:258
 in test(::String, ::Vararg{String,N}) at ./pkg/pkg.jl:258
 in eval(::Module, ::Any) at ./boot.jl:234
 in process_options(::Base.JLOptions) at ./client.jl:242
 in _start() at ./client.jl:321

>>> End of log
