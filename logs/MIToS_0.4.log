>>> 'Pkg.add("MIToS")' log
INFO: Cloning cache of ArgParse from git://github.com/carlobaldassi/ArgParse.jl.git
INFO: Cloning cache of IndexedArrays from git://github.com/garrison/IndexedArrays.jl.git
INFO: Cloning cache of MIToS from git://github.com/diegozea/MIToS.jl.git
INFO: Cloning cache of NumericFuns from git://github.com/lindahua/NumericFuns.jl.git
INFO: Cloning cache of PairwiseListMatrices from git://github.com/diegozea/PairwiseListMatrices.jl.git
INFO: Cloning cache of ROCAnalysis from git://github.com/davidavdav/ROCAnalysis.jl.git
INFO: Cloning cache of TextWrap from git://github.com/carlobaldassi/TextWrap.jl.git
INFO: Installing ArgParse v0.3.0
INFO: Installing ArrayViews v0.6.4
INFO: Installing AutoHashEquals v0.0.9
INFO: Installing Clustering v0.5.0
INFO: Installing DataArrays v0.3.0
INFO: Installing DataFrames v0.7.2
INFO: Installing DataStructures v0.4.4
INFO: Installing Distances v0.3.1
INFO: Installing Docile v0.5.23
INFO: Installing Formatting v0.1.5
INFO: Installing GZip v0.2.18
INFO: Installing IndexedArrays v0.1.0
INFO: Installing LightXML v0.2.1
INFO: Installing MIToS v1.0.0
INFO: Installing MacroTools v0.3.0
INFO: Installing NumericFuns v0.2.4
INFO: Installing PairwiseListMatrices v0.3.0
INFO: Installing ROCAnalysis v0.0.1
INFO: Installing Reexport v0.0.3
INFO: Installing Requires v0.2.2
INFO: Installing SortingAlgorithms v0.0.6
INFO: Installing StatsBase v0.8.1
INFO: Installing StatsFuns v0.2.2
INFO: Installing TextWrap v0.1.5
INFO: Building LightXML
INFO: Package database updated

>>> 'Pkg.test("MIToS")' log
Julia Version 0.4.5
Commit 2ac304d (2016-03-18 00:58 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
INFO: Testing MIToS

Test General Utils
==================
deleteitems!
get_n_words
hascoordinates
select_element

matrix2list
-----------

list2matrix
-----------

Test findobjects
================
findobjects, isobject and AbstractTest
collectobjects & isobject
collectcaptures & capture
collectcaptures & guess_type

Test eachline for ASCIIString
=============================

Test Residue
============
Convert
GAP
Convert to and from ASCIIString
Ambiguous or not standard residues (are gaps on MIToS)
Comparisons
Random

Tests for IndexedArray
=======================

Creation
--------

Mapping
-------
Test selectvalue
Test selectindex

Comparisons and getindex
------------------------

Iterations
----------

swap! and copy
--------------

push!
-----

Tests for Annotations
=====================

Annotations() for empty annotations
ncolums

Getters & Setters
-----------------

copy, empty, isempty & empty!
-----------------------------

Filters
-------

Tests for Raw Multiple Sequence Alignment a.k.a Matrix{Residue}
================================================================

Parse Raw
---------

Print Raw
---------

Test %
------

Reference and Gapstrip
----------------------

Tests for Multiple Sequence Alignments
======================================

Parse Pfam
----------
Test pfam stockholm parser using the 4 sequence full MSA for PF09645
> Order: Tree
> Inserts lower case
> Gaps as "." or "-" (mixed)
> Pfam version 28.0, based on UniProt release 2014_07
Test parse for string inputs

Keep insert columns
-------------------

Parse Fasta
-----------
Test download of read(URL, ...)
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0100    77  100    77    0     0    241      0 --:--:-- --:--:-- --:--:--   241100    77  100    77    0     0    237      0 --:--:-- --:--:-- --:--:--   237
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0100   378  100   378    0     0   5422      0 --:--:-- --:--:-- --:--:--  5478
Test parse for string inputs
Test the FASTA parser usando Gao et.al. 2011 example
Are the parsers (pfam/fasta) getting the same result?
Test parse with ambiguous or not standard residues (are gaps on MIToS)
Dots are part of the alphabet for input.

Selection without Mappings
--------------------------
Test getindex
Test setindex! with copy and deepcopy
Test getresidues, getsequence and getresiduesequence
Test sequence 1 for getresidues and getsequence
Test sequence 2 for getresidues and getsequence
Test sequence 3 for getresidues and getsequence
Test sequence 4 for getresidues and getsequence
Test sequence 5 for getresidues and getsequence
Test sequence 6 for getresidues and getsequence
Test sequence 1 from getresiduesequences
Test sequence 2 from getresiduesequences
Test sequence 3 from getresiduesequences
Test sequence 4 from getresiduesequences
Test sequence 5 from getresiduesequences
Test sequence 6 from getresiduesequences

Size, sequences and columns
---------------------------

AnnotatedAlignedSequence and AlignedSequence
--------------------------------------------
Test getsequence using Index and ID and convert to AlignedSequence

Test Filters!
-------------
filtersequences! with and without annotations
filtercolumns! with and without annotations
Test for BoundsError's on filters with bad masks
Test copy and deepcopy for sequences
Test filtercolumns! for sequences
Test Sequence .== Residue for mask generation
Test filtercolumns!

Test Annotation Getters
-----------------------

Test Gaps and Coverage
----------------------
Test residuefraction
Test coverage

Reference
---------
Test setreference!
Test gapstrip!
Test adjustreference!

Printers
--------
Test asciisequence
Test printfasta
Test printpfam
Tests for Mappings on Annotated Multiple Sequence Alignments
------------------------------------------------------------

Tests for annotation of modifications
-------------------------------------
Test printing annotations and modifications
Test delete MIToS annotations

Test shuffle_...
================

Clustering
==========


percentidentity
---------------

-> Float64
-> Bool

Hobohm I
--------

percentidentity on a MSA
------------------------
SequenceIdentityMatrix

Test meanpercentidentity
------------------------

Tests for PDB
=============

Parse PDB and PDBML
-------------------
2VQC => Missings
Test download
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0
100 37900  100 37900    0     0   168k      0 --:--:-- --:--:-- --:--:--  168k
1SSX => Residues with insert codes: 15A 15B
test @residues
Occupancy != 1.0 and @atom
@atom with residue wildcard
1CBN => Identical PDBe ResNum for Residue 22:

        <residue dbSource="PDBe" dbCoordSys="PDBe" dbResNum="22" dbResName="SER">
          <crossRefDb dbSource="PDB" dbCoordSys="PDBresnum" dbAccessionId="1cbn" dbResNum="22" dbResName="SER" dbChainId="A"/>
          <crossRefDb dbSource="UniProt" dbCoordSys="UniProt" dbAccessionId="P01542" dbResNum="22" dbResName="P"/>
          ....
        <residue dbSource="PDBe" dbCoordSys="PDBe" dbResNum="22" dbResName="PRO">
          <crossRefDb dbSource="PDB" dbCoordSys="PDBresnum" dbAccessionId="1cbn" dbResNum="22" dbResName="PRO" dbChainId="A"/>
          <crossRefDb dbSource="UniProt" dbCoordSys="UniProt" dbAccessionId="P01542" dbResNum="22" dbResName="P"/>
          ...

1AS5 => NMR
1DPO => Inserted residues lack insertion letters
Single unnamed chain in 1DPO contains insertions at postions 184 (Gly, Phe), 188 (Gly, Lys), and 221 (Ala, Leu) but no insertion letters.
1IGY => Insertions have more than one copy of the same amino acid in a single insertion block.
For example, chain B in 1IGY contains a block of four residues inserted at sequence position 82. The block contains Leu-Ser-Ser-Leu.
1HAG => Chain E begins with 1H, 1G, 1F, ... 1A, then 1 (in reverse alphabetic order)
1NSA => Contains a single (unnamed) protein chain with sequence 7A-95A that continues 4-308.
1IAO => Contains in chain B (in this order) 1S, 2S, 323P-334P, 6-94, 94A, 95-188, 1T, 2T

RESTful PDB Interface
=====================
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0100  1097  100  1097    0     0  23419      0 --:--:-- --:--:-- --:--:-- 23847
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0100   529  100   529    0     0   9233      0 --:--:-- --:--:-- --:--:--  9280

Tests for Contacts on PDB
=========================
1IGY => Test it using data from http://www-cryst.bioc.cam.ac.uk/~richard/piccolo/piccolo.php?PDB=1IGY (28/Sep/2015)
WARNING: RESIDUE: NAG is unknown for MIToS.PDB (AtomsData.jl)
WARNING: RESIDUE: FUL is unknown for MIToS.PDB (AtomsData.jl)
WARNING: RESIDUE: NDG is unknown for MIToS.PDB (AtomsData.jl)
WARNING: RESIDUE: BMA is unknown for MIToS.PDB (AtomsData.jl)
WARNING: RESIDUE: MAN is unknown for MIToS.PDB (AtomsData.jl)
WARNING: RESIDUE: NAG is unknown for MIToS.PDB (AtomsData.jl)
WARNING: RESIDUE: GAL is unknown for MIToS.PDB (AtomsData.jl)
WARNING: RESIDUE: MAN is unknown for MIToS.PDB (AtomsData.jl)
WARNING: RESIDUE: NAG is unknown for MIToS.PDB (AtomsData.jl)
WARNING: RESIDUE: NAG is unknown for MIToS.PDB (AtomsData.jl)
WARNING: RESIDUE: FUC is unknown for MIToS.PDB (AtomsData.jl)
WARNING: RESIDUE: NDG is unknown for MIToS.PDB (AtomsData.jl)
WARNING: RESIDUE: BMA is unknown for MIToS.PDB (AtomsData.jl)
WARNING: RESIDUE: MAN is unknown for MIToS.PDB (AtomsData.jl)
WARNING: RESIDUE: NAG is unknown for MIToS.PDB (AtomsData.jl)
WARNING: RESIDUE: GAL is unknown for MIToS.PDB (AtomsData.jl)
WARNING: RESIDUE: MAN is unknown for MIToS.PDB (AtomsData.jl)
WARNING: RESIDUE: NAG is unknown for MIToS.PDB (AtomsData.jl)

Test findheavy

All the interface between chain A and D
aromatic between chain A and B

Vectorized contact/distance
---------------------------

Proximity Mean
--------------

Tests for SIFTS Mappings
========================

Parse SIFTS
-----------
all against all

siftsmapping
------------
missings
1SSX => Residues with insert codes: 15A 15B
1CBN => Multiple InterProt annotations, the last is used.
Identical PDBe ResNum for Residue 22:

        <residue dbSource="PDBe" dbCoordSys="PDBe" dbResNum="22" dbResName="SER">
          <crossRefDb dbSource="PDB" dbCoordSys="PDBresnum" dbAccessionId="1cbn" dbResNum="22" dbResName="SER" dbChainId="A"/>
          <crossRefDb dbSource="UniProt" dbCoordSys="UniProt" dbAccessionId="P01542" dbResNum="22" dbResName="P"/>
          ....
        <residue dbSource="PDBe" dbCoordSys="PDBe" dbResNum="22" dbResName="PRO">
          <crossRefDb dbSource="PDB" dbCoordSys="PDBresnum" dbAccessionId="1cbn" dbResNum="22" dbResName="PRO" dbChainId="A"/>
          <crossRefDb dbSource="UniProt" dbCoordSys="UniProt" dbAccessionId="P01542" dbResNum="22" dbResName="P"/>
          ...

WARNING: 22 is already in the mapping with the value 22. The value is replaced by 22
WARNING: 25 is already in the mapping with the value 25. The value is replaced by 25
1AS5 => NMR
1DPO => Inserted residues lack insertion letters
Single unnamed chain in 1DPO contains insertions at postions 184 (Gly, Phe), 188 (Gly, Lys), and 221 (Ala, Leu) but no insertion letters.
1IGY => Insertions have more than one copy of the same amino acid in a single insertion block.
For example, chain B in 1IGY contains a block of four residues inserted at sequence position 82. The block contains Leu-Ser-Ser-Leu.
1HAG => Chain E begins with 1H, 1G, 1F, ... 1A, then 1 (in reverse alphabetic order)

Functions for SIFTSResidues
===========================
1NSA => Contains a single (unnamed) protein chain with sequence 7A-95A that continues 4-308.
Test findobjects & read
Test collectcaptures
1IAO => Contains in chain B (in this order) 1S, 323P-334P, 6-94, 94A, 95-188, 1T, 2T
Test collectobjects and isobject

Test download
=============
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0  0     0    0     0    0     0      0      0 --:--:--  0:00:01 --:--:--     0100  5210  100  5210    0     0   2311      0  0:00:02  0:00:02 --:--:--  2312

Tests for ResidueContingencyTables
==================================

Tests for ResidueCount
----------------------

Iterate for N & UseGap:
# Iteration = N: 1 UseGap: true
Test nresidues for ResidueCount{Float64, 1, true}
Test zeros for ResidueCount{Float64, 1, true}
Test iteration interface for ResidueCount{Float64, 1, true}
Test size for ResidueCount{Float64, 1, true}
Test indexing with i for ResidueCount{Float64, 1, true}
Test setindex! with i for ResidueCount{Float64, 1, true}
Test update! for ResidueCount{Float64, 1, true}
Test apply_pseudocount! with Laplace Smoothing for ResidueCount{Float64, 1, true}
Test fill! with AdditiveSmoothing(0.05) for ResidueCount{Float64, 1, true}
# Iteration = N: 1 UseGap: false
Test nresidues for ResidueCount{Float64, 1, false}
Test zeros for ResidueCount{Float64, 1, false}
Test iteration interface for ResidueCount{Float64, 1, false}
Test size for ResidueCount{Float64, 1, false}
Test indexing with i for ResidueCount{Float64, 1, false}
Test setindex! with i for ResidueCount{Float64, 1, false}
Test update! for ResidueCount{Float64, 1, false}
Test apply_pseudocount! with Laplace Smoothing for ResidueCount{Float64, 1, false}
Test fill! with AdditiveSmoothing(0.05) for ResidueCount{Float64, 1, false}
# Iteration = N: 2 UseGap: true
Test nresidues for ResidueCount{Float64, 2, true}
Test zeros for ResidueCount{Float64, 2, true}
Test iteration interface for ResidueCount{Float64, 2, true}
Test size for ResidueCount{Float64, 2, true}
Test indexing with i for ResidueCount{Float64, 2, true}
Test setindex! with i for ResidueCount{Float64, 2, true}
Test update! for ResidueCount{Float64, 2, true}
Test apply_pseudocount! with Laplace Smoothing for ResidueCount{Float64, 2, true}
Test fill! with AdditiveSmoothing(0.05) for ResidueCount{Float64, 2, true}
# Iteration = N: 2 UseGap: false
Test nresidues for ResidueCount{Float64, 2, false}
Test zeros for ResidueCount{Float64, 2, false}
Test iteration interface for ResidueCount{Float64, 2, false}
Test size for ResidueCount{Float64, 2, false}
Test indexing with i for ResidueCount{Float64, 2, false}
Test setindex! with i for ResidueCount{Float64, 2, false}
Test update! for ResidueCount{Float64, 2, false}
Test apply_pseudocount! with Laplace Smoothing for ResidueCount{Float64, 2, false}
Test fill! with AdditiveSmoothing(0.05) for ResidueCount{Float64, 2, false}
# Iteration = N: 3 UseGap: true
Test nresidues for ResidueCount{Float64, 3, true}
Test zeros for ResidueCount{Float64, 3, true}
Test iteration interface for ResidueCount{Float64, 3, true}
Test size for ResidueCount{Float64, 3, true}
Test indexing with i for ResidueCount{Float64, 3, true}
Test setindex! with i for ResidueCount{Float64, 3, true}
Test update! for ResidueCount{Float64, 3, true}
Test apply_pseudocount! with Laplace Smoothing for ResidueCount{Float64, 3, true}
Test fill! with AdditiveSmoothing(0.05) for ResidueCount{Float64, 3, true}
# Iteration = N: 3 UseGap: false
Test nresidues for ResidueCount{Float64, 3, false}
Test zeros for ResidueCount{Float64, 3, false}
Test iteration interface for ResidueCount{Float64, 3, false}
Test size for ResidueCount{Float64, 3, false}
Test indexing with i for ResidueCount{Float64, 3, false}
Test setindex! with i for ResidueCount{Float64, 3, false}
Test update! for ResidueCount{Float64, 3, false}
Test apply_pseudocount! with Laplace Smoothing for ResidueCount{Float64, 3, false}
Test fill! with AdditiveSmoothing(0.05) for ResidueCount{Float64, 3, false}
# Iteration = N: 4 UseGap: true
Test nresidues for ResidueCount{Float64, 4, true}
Test zeros for ResidueCount{Float64, 4, true}
Test iteration interface for ResidueCount{Float64, 4, true}
Test size for ResidueCount{Float64, 4, true}
Test indexing with i for ResidueCount{Float64, 4, true}
Test setindex! with i for ResidueCount{Float64, 4, true}
Test update! for ResidueCount{Float64, 4, true}
Test apply_pseudocount! with Laplace Smoothing for ResidueCount{Float64, 4, true}
Test fill! with AdditiveSmoothing(0.05) for ResidueCount{Float64, 4, true}
# Iteration = N: 4 UseGap: false
Test nresidues for ResidueCount{Float64, 4, false}
Test zeros for ResidueCount{Float64, 4, false}
Test iteration interface for ResidueCount{Float64, 4, false}
Test size for ResidueCount{Float64, 4, false}
Test indexing with i for ResidueCount{Float64, 4, false}
Test setindex! with i for ResidueCount{Float64, 4, false}
Test update! for ResidueCount{Float64, 4, false}
Test apply_pseudocount! with Laplace Smoothing for ResidueCount{Float64, 4, false}
Test fill! with AdditiveSmoothing(0.05) for ResidueCount{Float64, 4, false}
Iteration end


Iterate for UseGap in [true, false]:
# Iteration = UseGap: true
Test indexing with ij for ResidueCount{Float64, 2, true}
Test setindex! with ij for ResidueCount{Float64, 2, true}
Test count! for ResidueCount{Float64, 2, true} and ResidueCount{Float64, 1, true}
Test count! for ResidueCount{Float64, 5, true} and  ResidueCount{Float64, 5, true}}
Test count! for ResidueCount{Float64, 4, true} and  ResidueCount{Float64, 4, true}}
# Iteration = UseGap: false
Test indexing with ij for ResidueCount{Float64, 2, false}
Test setindex! with ij for ResidueCount{Float64, 2, false}
Test count! for ResidueCount{Float64, 2, false} and ResidueCount{Float64, 1, false}
Test count! for ResidueCount{Float64, 5, false} and  ResidueCount{Float64, 5, false}}
Test count! for ResidueCount{Float64, 4, false} and  ResidueCount{Float64, 4, false}}
Iteration end

Test similar
Test count! with SequenceClusters
Test count

Tests for ResidueProbability
----------------------

Iterate for N & UseGap:
# Iteration = N: 1 UseGap: true
Test zeros for ResidueProbability{BigFloat, 1, true}
Test iteration interface for ResidueProbability{BigFloat, 1, true}
Test size for ResidueProbability{BigFloat, 1, true}
Test indexing with i for ResidueProbability{BigFloat, 1, true}
Test setindex! with i for ResidueProbability{BigFloat, 1, true}
Test update! for ResidueProbability{BigFloat, 1, true}
Test normalize! for ResidueProbability{BigFloat, 1, true}
Test fill! with ResidueCount{Int, 1, true} for ResidueProbability{BigFloat, 1, true}
# Iteration = N: 1 UseGap: false
Test zeros for ResidueProbability{BigFloat, 1, false}
Test iteration interface for ResidueProbability{BigFloat, 1, false}
Test size for ResidueProbability{BigFloat, 1, false}
Test indexing with i for ResidueProbability{BigFloat, 1, false}
Test setindex! with i for ResidueProbability{BigFloat, 1, false}
Test update! for ResidueProbability{BigFloat, 1, false}
Test normalize! for ResidueProbability{BigFloat, 1, false}
Test fill! with ResidueCount{Int, 1, false} for ResidueProbability{BigFloat, 1, false}
# Iteration = N: 2 UseGap: true
Test zeros for ResidueProbability{BigFloat, 2, true}
Test iteration interface for ResidueProbability{BigFloat, 2, true}
Test size for ResidueProbability{BigFloat, 2, true}
Test indexing with i for ResidueProbability{BigFloat, 2, true}
Test setindex! with i for ResidueProbability{BigFloat, 2, true}
Test update! for ResidueProbability{BigFloat, 2, true}
Test normalize! for ResidueProbability{BigFloat, 2, true}
Test fill! with ResidueCount{Int, 2, true} for ResidueProbability{BigFloat, 2, true}
# Iteration = N: 2 UseGap: false
Test zeros for ResidueProbability{BigFloat, 2, false}
Test iteration interface for ResidueProbability{BigFloat, 2, false}
Test size for ResidueProbability{BigFloat, 2, false}
Test indexing with i for ResidueProbability{BigFloat, 2, false}
Test setindex! with i for ResidueProbability{BigFloat, 2, false}
Test update! for ResidueProbability{BigFloat, 2, false}
Test normalize! for ResidueProbability{BigFloat, 2, false}
Test fill! with ResidueCount{Int, 2, false} for ResidueProbability{BigFloat, 2, false}
# Iteration = N: 3 UseGap: true
Test zeros for ResidueProbability{BigFloat, 3, true}
Test iteration interface for ResidueProbability{BigFloat, 3, true}
Test size for ResidueProbability{BigFloat, 3, true}
Test indexing with i for ResidueProbability{BigFloat, 3, true}
Test setindex! with i for ResidueProbability{BigFloat, 3, true}
Test update! for ResidueProbability{BigFloat, 3, true}
Test normalize! for ResidueProbability{BigFloat, 3, true}
Test fill! with ResidueCount{Int, 3, true} for ResidueProbability{BigFloat, 3, true}
# Iteration = N: 3 UseGap: false
Test zeros for ResidueProbability{BigFloat, 3, false}
Test iteration interface for ResidueProbability{BigFloat, 3, false}
Test size for ResidueProbability{BigFloat, 3, false}
Test indexing with i for ResidueProbability{BigFloat, 3, false}
Test setindex! with i for ResidueProbability{BigFloat, 3, false}
Test update! for ResidueProbability{BigFloat, 3, false}
Test normalize! for ResidueProbability{BigFloat, 3, false}
Test fill! with ResidueCount{Int, 3, false} for ResidueProbability{BigFloat, 3, false}
# Iteration = N: 4 UseGap: true
Test zeros for ResidueProbability{BigFloat, 4, true}
Test iteration interface for ResidueProbability{BigFloat, 4, true}
Test size for ResidueProbability{BigFloat, 4, true}
Test indexing with i for ResidueProbability{BigFloat, 4, true}
Test setindex! with i for ResidueProbability{BigFloat, 4, true}
Test update! for ResidueProbability{BigFloat, 4, true}
Test normalize! for ResidueProbability{BigFloat, 4, true}
Test fill! with ResidueCount{Int, 4, true} for ResidueProbability{BigFloat, 4, true}
# Iteration = N: 4 UseGap: false
Test zeros for ResidueProbability{BigFloat, 4, false}
Test iteration interface for ResidueProbability{BigFloat, 4, false}
Test size for ResidueProbability{BigFloat, 4, false}
Test indexing with i for ResidueProbability{BigFloat, 4, false}
Test setindex! with i for ResidueProbability{BigFloat, 4, false}
Test update! for ResidueProbability{BigFloat, 4, false}
Test normalize! for ResidueProbability{BigFloat, 4, false}
Test fill! with ResidueCount{Int, 4, false} for ResidueProbability{BigFloat, 4, false}
Iteration end

Test Float64

Iterate for UseGap in [true, false]:
# Iteration = UseGap: true
Test indexing with ij for ResidueProbability{BigFloat, 2, true}
Test setindex! with ij for ResidueProbability{BigFloat, 2, true}
# Iteration = UseGap: false
Test indexing with ij for ResidueProbability{BigFloat, 2, false}
Test setindex! with ij for ResidueProbability{BigFloat, 2, false}
Iteration end

Test pseudofrequencies
Test probabilities
Test delete_dimensions

Tests for Information Measures
==============================

Entropy
-------
Entropy: H(X)
Joint Entropy: H(X,Y)
Joint Entropy: H(X,Y,Z)
Entropy using ResidueCount

Kullback-Leibler
----------------

Mutual Information
------------------
MI(X,Y) = H(X) + H(Y) - H(X,Y)
MI using ResidueCount
MI(X,Y,Z)
MI(X,Y,Z) = H(X) + H(Y) + H(Z) - H(X,Y) - H(X,Z) - H(Y,Z) + H(X,Y,Z)
MI(X,Y,Z) <= min{ H(X,Y), H(X,Z), H(Y,Z) }

Pairwise Gap Percentage
-----------------------

Estimation of measures on a MSA
===============================
This is the example of MI(X, Y)/H(X, Y) from:
Gao, H., Dou, Y., Yang, J., & Wang, J. (2011). New methods to measure residues coevolution in proteins. BMC bioinformatics, 12(1), 206.

Test APC!
=========

Simple examples
===============
MI

MI: Using pseudocount (0.05)
----------------------------

Test APC!

Z-score
MI

MI: Using pseudocount (0.05)
----------------------------

Test APC!

Z-score

Results from Buslje et. al 2009
===============================

MI

Pearson for Z-score: 0.9398475339817065

cMI

MI + clustering

Pearson for Z-score: 0.9608926239053848

MIp

Pearson for MIp: 0.9999999999999999
Pearson for Z-score: 0.9478222563797292

MIp + clustering

Pearson for MIp: 0.9999999999999999
Pearson for Z-score: 0.9127524261632635

Test for BLMI
=============

Test for Pairwise Gap Percentage
================================

Test download from Pfam
=======================
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0  0     0    0     0    0     0      0      0 --:--:--  0:00:01 --:--:--     0  0     0    0     0    0     0      0      0 --:--:--  0:00:01 --:--:--     0100   922  100   922    0     0    517      0  0:00:01  0:00:01 --:--:--   517

Test PDB code from Pfam
=======================

Test Mapping PDB/Pfam
=====================

Test Residues
-------------

Test Contacts
=============

Test MSA contact map using PDBResidues from the MSA
---------------------------------------------------



Test hasresidues

Test AUC and Contact Masks
==========================

AUC Example using MI
--------------------

Test scripts
============

STDIN -> STDOUT
---------------
--arg
--list & -a

File -> File
------------
--list & -a

-p (parallel)
-------------
File -> File (--list)
STDIN -> File (--list)

----- =D -----

INFO: MIToS tests passed

>>> End of log
