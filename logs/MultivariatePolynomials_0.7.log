>>> 'Pkg.add("MultivariatePolynomials")' log
[ Info: Installing MultivariatePolynomials v0.1.1 @ Base.Pkg.Entry entry.jl:543
[ Info: Package database updated @ Base.Pkg.Entry entry.jl:32
┌ Info: METADATA is out-of-date — you may not have the latest version of MultivariatePolynomials
│ Use `Pkg.update()` to get the latest versions of your packages
└ @ Base.Pkg.Entry entry.jl:74

>>> 'Pkg.test("MultivariatePolynomials")' log
Julia Version 0.7.0-DEV.3299
Commit fb527308bb (2018-01-05 19:41 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
      Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-135-generic #184-Ubuntu SMP Wed Oct 18 11:55:51 UTC 2017 x86_64 x86_64
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
              speed         user         nice          sys         idle          irq
       #1  3500 MHz    3938930 s        111 s     190929 s     904867 s         21 s
       #2  3500 MHz     717328 s         72 s      71425 s    5067393 s          0 s
       
  Memory: 2.93927001953125 GB (843.84765625 MB free)
  Uptime: 59371.0 sec
  Load Avg:  1.0830078125  1.01953125  0.9970703125
  WORD_SIZE: 64
  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant
Packages:
  Package Directory: /home/vagrant/.julia/v0.7
  Package Status:
2 required packages:
 - JSON                          0.16.3
 - MultivariatePolynomials       0.1.1
2 additional packages:
 - Compat                        0.42.0
 - Nullables                     0.0.2
[ Info: Computing test dependencies for MultivariatePolynomials... @ Base.Pkg.Entry entry.jl:713
[ Info: Installing BenchmarkTools v0.2.3 @ Base.Pkg.Entry entry.jl:543
[ Info: Installing DynamicPolynomials v0.0.2 @ Base.Pkg.Entry entry.jl:543
[ Info: Testing MultivariatePolynomials @ Base.Pkg.Entry entry.jl:723
WARNING: Base.Test is deprecated, run `using Test` instead.
  likely near /home/vagrant/.julia/v0.7/MultivariatePolynomials/test/runtests.jl:1
Test Summary: | Pass  Total
zip tests     |    9      9
WARNING: importing deprecated binding Base.IntSet into DynamicPolynomials.
WARNING: Base.IntSet is deprecated, use BitSet instead.
  likely near /home/vagrant/.julia/v0.7/MultivariatePolynomials/test/variable.jl:3
WARNING: Base.IntSet is deprecated, use BitSet instead.
  likely near /home/vagrant/.julia/v0.7/MultivariatePolynomials/test/variable.jl:3
WARNING: Base.IntSet is deprecated, use BitSet instead.
  likely near /home/vagrant/.julia/v0.7/MultivariatePolynomials/test/variable.jl:3
WARNING: Base.IntSet is deprecated, use BitSet instead.
  likely near /home/vagrant/.julia/v0.7/MultivariatePolynomials/test/variable.jl:3
┌ Warning: Constructors no longer fall back to `convert`. A constructor `DynamicPolynomials.Monomial{true}(::DynamicPolynomials.PolyVar{true})` should be defined instead.
│   caller = DynamicPolynomials.Term{true,T} where T(::DynamicPolynomials.PolyVar{true}) at term.jl:11
└ @ DynamicPolynomials term.jl:11
┌ Warning: Constructors no longer fall back to `convert`. A constructor `DynamicPolynomials.Term{true,Int64}(::DynamicPolynomials.Monomial{true})` should be defined instead.
│   caller = DynamicPolynomials.Term{true,T} where T(::DynamicPolynomials.Monomial{true}) at term.jl:10
└ @ DynamicPolynomials term.jl:10
WARNING: Base.IntSet is deprecated, use BitSet instead.
  likely near /home/vagrant/.julia/v0.7/MultivariatePolynomials/test/variable.jl:3
WARNING: Base.IntSet is deprecated, use BitSet instead.
  likely near /home/vagrant/.julia/v0.7/MultivariatePolynomials/test/variable.jl:3
WARNING: Base.IntSet is deprecated, use BitSet instead.
  likely near /home/vagrant/.julia/v0.7/MultivariatePolynomials/test/variable.jl:3
PolyVar: Error During Test at /home/vagrant/.julia/v0.7/MultivariatePolynomials/test/variable.jl:28
  Test threw an exception of type ErrorException
  Expression: #= /home/vagrant/.julia/v0.7/MultivariatePolynomials/test/variable.jl:28 =# @inferred(polynomial(x)) isa AbstractPolynomial{Int}
  return type DynamicPolynomials.Polynomial{true,Int64} does not match inferred return type Any
  Stacktrace:
   [1] error(::String) at ./error.jl:33
   [2] macro expansion at /home/vagrant/.julia/v0.7/MultivariatePolynomials/test/variable.jl:28 [inlined]
   [3] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:980 [inlined]
   [4] macro expansion at /home/vagrant/.julia/v0.7/MultivariatePolynomials/test/variable.jl:12 [inlined]
   [5] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:980 [inlined]
   [6] top-level scope at /home/vagrant/.julia/v0.7/MultivariatePolynomials/test/variable.jl:4
┌ Warning: Constructors no longer fall back to `convert`. A constructor `DynamicPolynomials.Polynomial{true,Float64}(::DynamicPolynomials.PolyVar{true})` should be defined instead.
│   caller = polynomial(::DynamicPolynomials.PolyVar{true}, ::Type{Float64}) at DynamicPolynomials.jl:30
└ @ DynamicPolynomials DynamicPolynomials.jl:30
┌ Warning: Constructors no longer fall back to `convert`. A constructor `DynamicPolynomials.Term{true,Float64}(::DynamicPolynomials.PolyVar{true})` should be defined instead.
│   caller = convert(::Type{DynamicPolynomials.Polynomial{true,Float64}}, ::DynamicPolynomials.PolyVar{true}) at poly.jl:51
└ @ DynamicPolynomials poly.jl:51
┌ Warning: Constructors no longer fall back to `convert`. A constructor `DynamicPolynomials.Monomial{true}(::DynamicPolynomials.PolyVar{true})` should be defined instead.
│   caller = convert(::Type{DynamicPolynomials.Term{true,Float64}}, ::DynamicPolynomials.PolyVar{true}) at term.jl:24
└ @ DynamicPolynomials term.jl:24
┌ Warning: Constructors no longer fall back to `convert`. A constructor `DynamicPolynomials.Term{true,Float64}(::DynamicPolynomials.Monomial{true})` should be defined instead.
│   caller = convert(::Type{DynamicPolynomials.Term{true,Float64}}, ::DynamicPolynomials.PolyVar{true}) at term.jl:24
└ @ DynamicPolynomials term.jl:24
PolyVar: Error During Test at /home/vagrant/.julia/v0.7/MultivariatePolynomials/test/variable.jl:29
  Test threw an exception of type ErrorException
  Expression: #= /home/vagrant/.julia/v0.7/MultivariatePolynomials/test/variable.jl:29 =# @inferred(polynomial(x, Float64)) isa AbstractPolynomial{Float64}
  return type DynamicPolynomials.Polynomial{true,Float64} does not match inferred return type Any
  Stacktrace:
   [1] error(::String) at ./error.jl:33
   [2] macro expansion at /home/vagrant/.julia/v0.7/MultivariatePolynomials/test/variable.jl:29 [inlined]
   [3] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:980 [inlined]
   [4] macro expansion at /home/vagrant/.julia/v0.7/MultivariatePolynomials/test/variable.jl:12 [inlined]
   [5] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:980 [inlined]
   [6] top-level scope at /home/vagrant/.julia/v0.7/MultivariatePolynomials/test/variable.jl:4
┌ Warning: Constructors no longer fall back to `convert`. A constructor `DynamicPolynomials.Monomial{true}(::DynamicPolynomials.PolyVar{true})` should be defined instead.
│   caller = Type at mono.jl:25 [inlined]
└ @ Core mono.jl:25
PolyVar: Error During Test at /home/vagrant/.julia/v0.7/MultivariatePolynomials/test/variable.jl:32
  Test threw an exception of type ErrorException
  Expression: #= /home/vagrant/.julia/v0.7/MultivariatePolynomials/test/variable.jl:32 =# @inferred(terms(x)) == [x]
  return type Array{DynamicPolynomials.Term{true,Int64},1} does not match inferred return type Array{_1,1} where _1
  Stacktrace:
   [1] error(::String) at ./error.jl:33
   [2] macro expansion at /home/vagrant/.julia/v0.7/MultivariatePolynomials/test/variable.jl:32 [inlined]
   [3] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:980 [inlined]
   [4] macro expansion at /home/vagrant/.julia/v0.7/MultivariatePolynomials/test/variable.jl:12 [inlined]
   [5] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:980 [inlined]
   [6] top-level scope at /home/vagrant/.julia/v0.7/MultivariatePolynomials/test/variable.jl:4
┌ Warning: Constructors no longer fall back to `convert`. A constructor `DynamicPolynomials.Term{true,Int64}(::DynamicPolynomials.Monomial{true})` should be defined instead.
│   caller = Type at term.jl:10 [inlined]
└ @ Core term.jl:10
Test Summary:             | Pass  Error  Total
Variable                  |   41      3     44
  polyvar macro index set |    3             3
  PolyVar                 |   33      3     36
  Create similar variable |    5             5
ERROR: LoadError: LoadError: LoadError: Some tests did not pass: 41 passed, 0 failed, 3 errored, 0 broken.
in expression starting at /home/vagrant/.julia/v0.7/MultivariatePolynomials/test/variable.jl:3
in expression starting at /home/vagrant/.julia/v0.7/MultivariatePolynomials/test/commutativetests.jl:2
in expression starting at /home/vagrant/.julia/v0.7/MultivariatePolynomials/test/runtests.jl:20
┌ Error: ------------------------------------------------------------
│ # Testing failed for MultivariatePolynomials
│   exception = ErrorException("failed process: Process(`/home/vagrant/julia/bin/julia -Cnative -J/home/vagrant/julia/lib/julia/sys.so --compile=yes --depwarn=yes --code-coverage=none --color=no --compiled-modules=yes --check-bounds=yes --warn-overwrite=yes --startup-file=yes /home/vagrant/.julia/v0.7/MultivariatePolynomials/test/runtests.jl`, ProcessExited(1)) [1]")
└ @ Base.Pkg.Entry entry.jl:739
[ Info: Removing BenchmarkTools v0.2.3 @ Base.Pkg.Entry entry.jl:546
[ Info: Removing DynamicPolynomials v0.0.2 @ Base.Pkg.Entry entry.jl:546
ERROR: MultivariatePolynomials had test errors

>>> End of log
