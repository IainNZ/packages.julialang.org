>>> 'Pkg.add("DynamicalBilliards")' log
INFO: Cloning cache of DynamicalBilliards from https://github.com/JuliaDynamics/DynamicalBilliards.jl.git
INFO: Installing DynamicalBilliards v1.6.3
INFO: Installing StaticArrays v0.6.6
INFO: Package database updated
INFO: METADATA is out-of-date — you may not have the latest version of DynamicalBilliards
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("DynamicalBilliards")' log
Julia Version 0.6.2
Commit d386e40c17 (2017-12-13 18:08 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-135-generic #184-Ubuntu SMP Wed Oct 18 11:55:51 UTC 2017 x86_64 x86_64
Memory: 2.93927001953125 GB (729.078125 MB free)
Uptime: 72477.0 sec
Load Avg:  1.044921875  1.00634765625  0.970703125
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3515 MHz    4644243 s         86 s     195493 s    1345794 s         59 s
#2  3515 MHz    1301747 s       7188 s     127524 s    5679107 s          2 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.6
2 required packages:
 - DynamicalBilliards            1.6.3
 - JSON                          0.16.4
3 additional packages:
 - Compat                        0.53.0
 - Nullables                     0.0.3
 - StaticArrays                  0.6.6
INFO: Testing DynamicalBilliards
DynamicalBilliards tests started at: 21:08:651

Test Summary:  | Pass  Total
Straight Sinai | 7500   7500
Results:
+ evolve!() works for Particle and has finite collision time.
+ billiard_sinai() and randominside() work.
+ relocate(), collisiontime(), resolvecollision() work for
  for Particle with InfiniteWall and Disk.
+ particle never leaks the billiard table.
+ Required time: 53.928 sec.

Test Summary:           | Pass  Total
Straight Periodic Sinai | 3000   3000
Results:
+ evolve!() works for Particle and has finite collision time.
+ billiard_sinai(setting="periodic") and randominside() work.
+ relocate(), collisiontime(), resolvecollision() work for
  for Particle with PeriodicWall and Disk.
+ collisiontime() ≤ min(x,y) - 2r.
+ Particle never invades the Disk.
+ Required time: 60.088 sec.

Test Summary:  |  Pass  Total
Magnetic Sinai | 12000  12000
Results:
+ evolve!() works for MagneticParticle.
+ randominside(ω) returns MagneticParticle.
+ relocate(), collisiontime(), resolvecollision() work for
  MagneticParticle with InfiniteWall and Disk.
+ particle never leaks the billiard table.
+ Required time: 20.69 sec.

Test Summary:           | Pass  Total
Magnetic Periodic Sinai | 6000   6000
Test Summary:              | Pass  Total
Magnetic Periodic BigFloat |    4      4
Results:
+ billiard_sinai(setting="periodic") and randominside() work.
+ relocate(), collisiontime(), resolvecollision() work for
  MagneticParticle with PeriodicWall.
+ collisiontime() ≤ min(x,y) - 2r.
+ Particle never invades the Disk.
+ Collision time is never Infinite (no pinned particles).
+ All the above also work for BigFloat.
+ Required time: 26.064 sec.

Test Summary:         | Pass  Total
Raysplitting Straight | 5002   5002
Results:
+ evolve!() works for Ray-splitting billiards & Particle.
+ relocate(), collisiontime(), resolvecollision() work for
  Particle & Ray-splitting with SplitterWall and Antidot.
+ particle never leaks the billiard table.
+ Required time: 54.263 sec.

Test Summary:         | Pass  Total
Raysplitting Magnetic | 5002   5002
Results:
+ evolve!() works for Ray-splitting billiards & MagneticParticle.
+ relocate(), collisiontime(), resolvecollision() work for
  MagneticParticle & Ray-splitting with SplitterWall and Antidot.
+ particle never leaks the billiard table + process terminates.
+ All the above also work for BigFloat.
+ Required time: 1.35 sec.

Test Summary:                | Pass  Total
Type Stability: Random Sinai |   72     72
Test Summary:           | Pass  Total
Type Stability: Hexagon |   88     88
Results:
+ billiard_sinai() and billiard_polygon() conserve types
+ randominside() returns correct types for ω=0 and ω=1
+ evolve!() conserves type for all the combinations of the above.
+ evolve!() works for Random sinai and Hexagonal periodic billiard.

Test Summary:                | Pass  Total
Lyapunov Spectrum (straight) |   60     60
Results:
+ lyapunovspectrum() call works on
  hexagonal lorentz and sinai billiard.
+ λ₁ + λ₄ ≈ 0.
+ λ₂ ≈ λ₃ ≈ 0.
+ Required time: 9.742 sec.

Test Summary:        | Pass  Total
Straight Escape Time |  501    501
Test Summary:        | Pass  Total
Magnetic Escape Time |  501    501
Results:
+ escapetime works for Particle and MagneticParticle
  and understands Doors.
+ The escape time is always finite.
+ randominside() works for billiard_mushroom()!
+ Required time: 2.828 sec.

DynamicalBilliards tests ended (successfully) at: 21:12:737
Total time required was:
248.614 seconds, or 4.144 minutes
INFO: DynamicalBilliards tests passed

>>> End of log
