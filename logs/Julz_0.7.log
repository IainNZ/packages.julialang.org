>>> 'Pkg.add("Julz")' log
[ Info: Cloning cache of EnglishText from https://github.com/TotalVerb/EnglishText.jl.git
[ Info: Cloning cache of Julz from https://github.com/djsegal/Julz.jl.git
[ Info: Cloning cache of PkgDev from https://github.com/JuliaLang/PkgDev.jl.git
[ Info: Cloning cache of Revise from https://github.com/timholy/Revise.jl.git
[ Info: Installing DataStructures v0.7.4
[ Info: Installing DeepDiffs v1.0.1
[ Info: Installing DocOpt v0.3.0
[ Info: Installing DocStringExtensions v0.4.3
[ Info: Installing Documenter v0.13.1
[ Info: Installing EnglishText v0.5.0
[ Info: Installing Julz v0.1.0
[ Info: Installing Mustache v0.3.0
[ Info: Installing PkgDev v0.1.6
[ Info: Installing Revise v0.2.0
[ Info: Installing TestSetExtensions v1.1.1
[ Info: Installing URIParser v0.3.0
[ Info: Package database updated
┌ Info: METADATA is out-of-date — you may not have the latest version of Julz
└ Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("Julz")' log
Julia Version 0.7.0-DEV.3563
Commit cf6303abe0 (2018-01-24 23:08 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
      Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-135-generic #184-Ubuntu SMP Wed Oct 18 11:55:51 UTC 2017 x86_64 x86_64
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
              speed         user         nice          sys         idle          irq
       #1  3500 MHz    2083072 s       7350 s     109917 s     571231 s         18 s
       #2  3500 MHz     439040 s         42 s      44058 s    2741071 s          0 s
       
  Memory: 2.93927001953125 GB (796.91796875 MB free)
  Uptime: 32679.0 sec
  Load Avg:  1.01806640625  1.0146484375  0.970703125
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant
Packages:
  Package Directory: /home/vagrant/.julia/v0.7
  Package Status:
2 required packages:
 - JSON                          0.16.4
 - Julz                          0.1.0
13 additional packages:
 - Compat                        0.49.0
 - DataStructures                0.7.4
 - DeepDiffs                     1.0.1
 - DocOpt                        0.3.0
 - DocStringExtensions           0.4.3
 - Documenter                    0.13.1
 - EnglishText                   0.5.0
 - Mustache                      0.3.0
 - Nullables                     0.0.3
 - PkgDev                        0.1.6
 - Revise                        0.2.0
 - TestSetExtensions             1.1.1
 - URIParser                     0.3.0
[ Info: Testing Julz
WARNING: importing deprecated binding Base.Void into Mustache.
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/Mustache/src/utils.jl:23
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = #parse#1(::Type{Dict{String,Any}}, ::Type{Int64}, ::Function, ::String) at Parser.jl:386
└ @ JSON.Parser Parser.jl:386
┌ Warning: `unsafe_copy!(dest, args...)` is deprecated, use `unsafe_copyto!(dest, args...)` instead.
│   caller = parse_string(::JSON.Parser.MemoryParserState) at specialized.jl:15
└ @ JSON.Parser specialized.jl:15
WARNING: Base.iteratorsize is deprecated, use IteratorSize instead.
  likely near /home/vagrant/.julia/v0.7/EnglishText/src/text.jl:30
ERROR: LoadError: LoadError: ArgumentError: Module Main not found in current path.
Run `Pkg.add("Main")` to install the Main package.
Stacktrace:
 [1] require(::Module, ::Symbol) at ./loading.jl:814
 [2] include at ./boot.jl:292 [inlined]
 [3] include_relative(::Module, ::String) at ./loading.jl:1012
 [4] include at ./sysimg.jl:26 [inlined]
 [5] include(::String) at /home/vagrant/.julia/v0.7/PkgDev/src/PkgDev.jl:3
 [6] top-level scope
 [7] include at ./boot.jl:292 [inlined]
 [8] include_relative(::Module, ::String) at ./loading.jl:1012
 [9] include(::Module, ::String) at ./sysimg.jl:26
 [10] top-level scope
 [11] eval at ./boot.jl:295 [inlined]
 [12] top-level scope at ./<missing>:3
in expression starting at /home/vagrant/.julia/v0.7/PkgDev/src/github.jl:3
in expression starting at /home/vagrant/.julia/v0.7/PkgDev/src/PkgDev.jl:11
ERROR: LoadError: LoadError: Failed to precompile PkgDev to /home/vagrant/.julia/lib/v0.7/PkgDev.ji.
Stacktrace:
 [1] error at ./error.jl:33 [inlined]
 [2] compilecache(::Base.PkgId) at ./loading.jl:1156
 [3] _require(::Base.PkgId) at ./loading.jl:949
 [4] require(::Module, ::Symbol) at ./loading.jl:820
 [5] include at ./boot.jl:292 [inlined]
 [6] include_relative(::Module, ::String) at ./loading.jl:1012
 [7] _require(::Base.PkgId) at ./loading.jl:939
 [8] require(::Module, ::Symbol) at ./loading.jl:820
 [9] include at ./boot.jl:292 [inlined]
 [10] include_relative(::Module, ::String) at ./loading.jl:1012
 [11] include(::Module, ::String) at ./sysimg.jl:26
 [12] process_options(::Base.JLOptions) at ./client.jl:334
 [13] _start() at ./client.jl:386
in expression starting at /home/vagrant/.julia/v0.7/Julz/src/Julz.jl:5
in expression starting at /home/vagrant/.julia/v0.7/Julz/test/runtests.jl:1
┌ Error: ------------------------------------------------------------
│ # Testing failed for Julz
│   exception =
│    failed process: Process(`/home/vagrant/julia/bin/julia -Cnative -J/home/vagrant/julia/lib/julia/sys.so --compile=yes --depwarn=yes --code-coverage=none --color=no --compiled-modules=yes --check-bounds=yes --warn-overwrite=yes --startup-file=yes /home/vagrant/.julia/v0.7/Julz/test/runtests.jl`, ProcessExited(1)) [1]
│    Stacktrace:
│     [1] error(::String, ::Base.Process, ::String, ::Int64, ::String) at ./error.jl:42
│     [2] pipeline_error(::Base.Process) at ./process.jl:698
│     [3] run(::Cmd) at ./process.jl:660
│     [4] (::getfield(Base.Pkg.Entry, Symbol("##89#92")){Bool,String,Array{AbstractString,1}})() at ./pkg/entry.jl:729
│     [5] cd(::getfield(Base.Pkg.Entry, Symbol("##89#92")){Bool,String,Array{AbstractString,1}}, ::String) at ./file.jl:70
│     [6] #test!#88(::Bool, ::Function, ::String, ::Array{AbstractString,1}, ::Array{AbstractString,1}, ::Array{AbstractString,1}) at ./pkg/entry.jl:717
│     [7] (::getfield(Base.Pkg.Entry, Symbol("#kw##test!")))(::NamedTuple{(:coverage,),Tuple{Bool}}, ::typeof(Base.Pkg.Entry.test!), ::String, ::Array{AbstractString,1}, ::Array{AbstractString,1}, ::Array{AbstractString,1}) at ./<missing>:0
│     [8] #test#96(::Bool, ::Function, ::Array{AbstractString,1}) at ./pkg/entry.jl:756
│     [9] (::getfield(Base.Pkg.Entry, Symbol("#kw##test")))(::NamedTuple{(:coverage,),Tuple{Bool}}, ::typeof(Base.Pkg.Entry.test), ::Array{AbstractString,1}) at ./<missing>:0
│     [10] (::getfield(Base.Pkg.Dir, Symbol("##4#7")){Base.Iterators.IndexValue{Symbol,Bool,Tuple{Symbol},NamedTuple{(:coverage,),Tuple{Bool}}},typeof(Base.Pkg.Entry.test),Tuple{Array{AbstractString,1}}})() at ./pkg/dir.jl:36
│     [11] cd(::getfield(Base.Pkg.Dir, Symbol("##4#7")){Base.Iterators.IndexValue{Symbol,Bool,Tuple{Symbol},NamedTuple{(:coverage,),Tuple{Bool}}},typeof(Base.Pkg.Entry.test),Tuple{Array{AbstractString,1}}}, ::String) at ./file.jl:70
│     [12] #cd#1(::Base.Iterators.IndexValue{Symbol,Bool,Tuple{Symbol},NamedTuple{(:coverage,),Tuple{Bool}}}, ::Function, ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N} where N) at ./pkg/dir.jl:36
│     [13] (::getfield(Base.Pkg.Dir, Symbol("#kw##cd")))(::NamedTuple{(:coverage,),Tuple{Bool}}, ::typeof(Base.Pkg.Dir.cd), ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N} where N) at ./<missing>:0
│     [14] #test#3(::Bool, ::Function, ::String, ::Vararg{String,N} where N) at ./pkg/pkg.jl:274
│     [15] test(::String, ::Vararg{String,N} where N) at ./pkg/pkg.jl:274
│     [16] top-level scope
│     [17] eval at ./boot.jl:295 [inlined]
│     [18] eval(::Module, ::Expr) at ./sysimg.jl:71
│     [19] process_options(::Base.JLOptions) at ./client.jl:311
│     [20] _start() at ./client.jl:386
└ @ Base.Pkg.Entry entry.jl:732
ERROR: Julz had test errors

>>> End of log
