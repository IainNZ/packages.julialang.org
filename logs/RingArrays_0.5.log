>>> 'Pkg.add("RingArrays")' log
INFO: Cloning cache of RingArrays from https://github.com/invenia/RingArrays.jl.git
INFO: Cloning cache of VirtualArrays from https://github.com/invenia/VirtualArrays.jl.git
INFO: Installing RingArrays v0.1.0
INFO: Installing VirtualArrays v0.1.1
INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of RingArrays
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("RingArrays")' log
Julia Version 0.5.0-dev+4330
Commit 493157e (2016-05-26 09:11 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.7.1 (ORCJIT, haswell)
INFO: Computing test dependencies for RingArrays...
INFO: Installing BaseTestNext v0.2.1
INFO: Installing FactCheck v0.4.3
INFO: Testing RingArrays
About creating RingArray
  > bad curly braces
  > without curly braces
  > passing a size
  > passing a block size
  > passing nothing
  > passing 0 for size
  > passing a negative for size
  > having a multi dimensional array
  > having a multi dimensional array and passing data size
  > creating a RingArray of dimension of the RingArray different form the block size
49 facts verified.
Getting values from RingArray
  > getting the first value
  > getting the first value without loading
  > getting a value in the first block
  > getting a value in the second block after getting a value in the first block
  > getting a value in the second block first
  > getting a value in the second block first while only loading the first block
  > getting a value in any block first
  > getting value from 2 d array
  > getting value from 2 d array like a 1 d array
  > getting value from 2 d array like a 1 d array after overflow
  > getting value from N d array like a 1 d array after overflow
  > getting the last value from N d array like a 1 d array after overflow
  > getting value from N d array
49 facts verified.
Getting values over the length (overflow) of the RingArray
  > getting the first value after overflowing
  > getting the first value after overflowing with only before overflow
  > getting any value after overflowing
  > getting any value after any number of overflows
  > getting value from 2 d array after overflowing
  > getting value from N d array after any number of overflows
23 facts verified.
Getting data views
  > looking at a small portion of the first block
  > trying to change a value in a view
  > looking at a small portion of the first block without loading
  > looking at a the whole portion of the first block
  > looking at a small portion of any block
  > looking at a small portion of two blocks
  > looking at a portion of two blocks at overflow
  > looking at a portion of two blocks at overflow of a 2d ring array
  > looking at a portion from one block from N d array after any number of overflows
31 facts verified.
Using checkbounds
  > checking bounds before overflow without overflowing
  > checking bounds after overflow without overflowing
  > checking bounds after overflow with overflowing
  > checking bounds before overflow with overflowing
  > checking unit range bounds before overflow without overflowing
  > checking unit range bounds after overflow without overflowing
  > checking unit range bounds after overflow with overflowing
  > checking unit range bounds before overflow with overflowing
  > checking unit range bounds that exceed the length of the ring
  > checking indexing of N d RingArray
  > checking out of bounds indexing of N d RingArray
  > checking out of bounds indexing not on the first dimension of N d RingArray
  > checking range indexing of N d RingArray
  > checking out of bounds range indexing of N d RingArray
36 facts verified.
Using display
  > trying display on a typical RingArray
AbstractArray{Int64,1}[#undef,#undef,#undef]1 fact verified.
Using views
  > having the RingArray overflow when no views in use
  > having the RingArray overflow when first block is in use
  > having the RingArray overflow to the first block when second block is in use
  > having a view that goes out of scope and run gc
  > having a view that goes out of scope don't run gc
  > having many views that goes out of scope don't run gc
  > having a view that stays and many views that goes out of scope don't run gc
  > having the RingArray overflow to the first block when second block is in use
Out of 77 total facts:
  Verified: 75
  Pending:  2
Loading blocks in RingArray
  > loading the first block
  > loading lots of blocks
  > loading a block of different size
  > loading a block of different dimensions
  > loading too many blocks
140 facts verified.
Testing custom errors
  > testing output of OverwriteError
  > testing output of RingArrayFullError
  > testing output of RingArrayBoundsError
3 facts verified.
Test Summary:   | Pass  Total
RingArray Tests |   32     32
INFO: RingArrays tests passed
INFO: Removing BaseTestNext v0.2.1
INFO: Removing FactCheck v0.4.3

>>> End of log
