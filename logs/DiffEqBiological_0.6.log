>>> 'Pkg.add("DiffEqBiological")' log
INFO: Installing DiffEqBase v1.20.0
INFO: Installing DiffEqBiological v0.2.0
INFO: Installing DiffEqJump v0.5.0
INFO: Installing Hiccup v0.1.1
INFO: Installing Juno v0.3.0
INFO: Installing LinearMaps v1.0.1
INFO: Installing MacroTools v0.3.7
INFO: Installing Media v0.3.0
INFO: Installing RecipesBase v0.2.1
INFO: Installing RecursiveArrayTools v0.11.2
INFO: Installing SimpleTraits v0.5.0
INFO: Installing StaticArrays v0.6.2
INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of DiffEqBiological
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("DiffEqBiological")' log
Julia Version 0.6.0
Commit 9036443 (2017-06-19 13:05 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-126-generic #175-Ubuntu SMP Thu Jul 20 17:33:56 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1742.9296875 MB free)
Uptime: 45503.0 sec
Load Avg:  0.9091796875  0.98388671875  1.10693359375
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz    2969798 s       7893 s     142083 s     781442 s         36 s
#2  3500 MHz     966378 s        730 s      81700 s    3410106 s          1 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.6
2 required packages:
 - DiffEqBiological              0.2.0
 - JSON                          0.13.0
12 additional packages:
 - Compat                        0.29.0
 - DiffEqBase                    1.20.0
 - DiffEqJump                    0.5.0
 - Hiccup                        0.1.1
 - Juno                          0.3.0
 - LinearMaps                    1.0.1
 - MacroTools                    0.3.7
 - Media                         0.3.0
 - RecipesBase                   0.2.1
 - RecursiveArrayTools           0.11.2
 - SimpleTraits                  0.5.0
 - StaticArrays                  0.6.2
INFO: Computing test dependencies for DiffEqBiological...
INFO: Installing Calculus v0.2.2
INFO: Installing CommonSubexpressions v0.0.1
INFO: Installing DataStructures v0.6.1
INFO: Installing DiffBase v0.2.0
INFO: Installing DiffEqNoiseProcess v0.3.2
INFO: Installing Distances v0.5.0
INFO: Installing ForwardDiff v0.5.0
INFO: Installing GenericSVD v0.1.0
INFO: Installing LineSearches v2.2.1
INFO: Installing MuladdMacro v0.0.2
INFO: Installing NLSolversBase v2.1.3
INFO: Installing NLsolve v0.11.0
INFO: Installing NaNMath v0.2.6
INFO: Installing OrdinaryDiffEq v2.14.0
INFO: Installing Parameters v0.7.2
INFO: Installing RandomNumbers v0.1.0
INFO: Installing RealInterface v0.0.3
INFO: Installing Reexport v0.0.3
INFO: Installing ResettableStacks v0.1.0
INFO: Installing Roots v0.4.0
INFO: Installing SpecialFunctions v0.3.0
INFO: Installing StochasticDiffEq v2.10.0
INFO: Building RandomNumbers
WARNING: AES-NI will not be compiled.
INFO: Testing DiffEqBiological
  1.023403 seconds (5.45 M allocations: 586.527 MiB, 7.70% gc time)
Test Summary:   | Pass  Total
Gillespie Tests |    1      1
 16.211594 seconds (20.34 M allocations: 2.113 GiB, 4.22% gc time)
Solve the Gillespie Problem
Variable Rate Reaction Tests: Error During Test
  Got an exception of type LoadError outside of a @test
  LoadError: UndefVarError: L not defined
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/DiffEqJump/src/extended_jump_array.jl:48 [inlined]
   [2] broadcast!(::Base.#muladd, ::DiffEqJump.ExtendedJumpArray{Array{Float64,1},Array{Float64,1}}, ::Float64, ::Array{Float64,1}, ::DiffEqJump.ExtendedJumpArray{Array{Float64,1},Array{Float64,1}}) at /home/vagrant/.julia/v0.6/DiffEqJump/src/extended_jump_array.jl:45
   [3] ode_determine_initdt(::DiffEqJump.ExtendedJumpArray{Array{Float64,1},Array{Float64,1}}, ::Float64, ::Float64, ::Float64, ::Float64, ::Float64, ::DiffEqBase.#ODE_DEFAULT_NORM, ::DiffEqBase.ODEProblem{DiffEqJump.ExtendedJumpArray{Array{Float64,1},Array{Float64,1}},Float64,true,DiffEqJump.##11#13{DiffEqBase.DiscreteProblem{Array{Float64,1},Float64,true,DiffEqBase.##140#141,Void},DiffEqJump.JumpSet{Tuple{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,2,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,2,2}},Void,Float64,Int64},DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},Void,Float64,Int64}},Tuple{}}},Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem}, ::Int64) at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/initdt.jl:28
   [4] #init#907(::Int64, ::Array{Float64,1}, ::Array{Float64,1}, ::Array{Float64,1}, ::Void, ::Bool, ::Void, ::Bool, ::Bool, ::Bool, ::Float64, ::Bool, ::Rational{Int64}, ::Void, ::Void, ::Int64, ::Rational{Int64}, ::Int64, ::Int64, ::Rational{Int64}, ::Bool, ::Rational{Int64}, ::Rational{Int64}, ::Int64, ::Float64, ::Float64, ::DiffEqBase.#ODE_DEFAULT_NORM, ::DiffEqBase.#ODE_DEFAULT_ISOUTOFDOMAIN, ::DiffEqBase.#ODE_DEFAULT_UNSTABLE_CHECK, ::Bool, ::Bool, ::Bool, ::Bool, ::Bool, ::Bool, ::Bool, ::Int64, ::String, ::DiffEqBase.#ODE_DEFAULT_PROG_MESSAGE, ::Void, ::DiffEqBase.CallbackSet{Tuple{DiffEqBase.ContinuousCallback{DiffEqJump.##27#29,DiffEqJump.##28#30{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,2,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,2,2}},Void,Float64,Int64}},DiffEqJump.##28#30{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,2,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,2,2}},Void,Float64,Int64}},DiffEqBase.#INITIALIZE_DEFAULT,Float64,Int64,Void},DiffEqBase.ContinuousCallback{DiffEqJump.##31#33,DiffEqJump.##32#34{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},Void,Float64,Int64}},DiffEqJump.##32#34{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},Void,Float64,Int64}},DiffEqBase.#INITIALIZE_DEFAULT,Float64,Int64,Void}},Tuple{}}, ::Bool, ::Bool, ::Array{Any,1}, ::DiffEqBase.#init, ::DiffEqBase.ODEProblem{DiffEqJump.ExtendedJumpArray{Array{Float64,1},Array{Float64,1}},Float64,true,DiffEqJump.##11#13{DiffEqBase.DiscreteProblem{Array{Float64,1},Float64,true,DiffEqBase.##140#141,Void},DiffEqJump.JumpSet{Tuple{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,2,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,2,2}},Void,Float64,Int64},DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},Void,Float64,Int64}},Tuple{}}},Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem}, ::OrdinaryDiffEq.Tsit5, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/solve.jl:127
   [5] (::DiffEqBase.#kw##init)(::Array{Any,1}, ::DiffEqBase.#init, ::DiffEqBase.ODEProblem{DiffEqJump.ExtendedJumpArray{Array{Float64,1},Array{Float64,1}},Float64,true,DiffEqJump.##11#13{DiffEqBase.DiscreteProblem{Array{Float64,1},Float64,true,DiffEqBase.##140#141,Void},DiffEqJump.JumpSet{Tuple{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,2,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,2,2}},Void,Float64,Int64},DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},Void,Float64,Int64}},Tuple{}}},Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem}, ::OrdinaryDiffEq.Tsit5, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at ./<missing>:0
   [6] #init#40(::Void, ::Tuple{Bool,Bool}, ::Array{Any,1}, ::Function, ::DiffEqJump.JumpProblem{DiffEqBase.ODEProblem{DiffEqJump.ExtendedJumpArray{Array{Float64,1},Array{Float64,1}},Float64,true,DiffEqJump.##11#13{DiffEqBase.DiscreteProblem{Array{Float64,1},Float64,true,DiffEqBase.##140#141,Void},DiffEqJump.JumpSet{Tuple{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,2,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,2,2}},Void,Float64,Int64},DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},Void,Float64,Int64}},Tuple{}}},Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},DiffEqJump.Direct,DiffEqBase.CallbackSet{Tuple{DiffEqBase.ContinuousCallback{DiffEqJump.##27#29,DiffEqJump.##28#30{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,2,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,2,2}},Void,Float64,Int64}},DiffEqJump.##28#30{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,2,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,2,2}},Void,Float64,Int64}},DiffEqBase.#INITIALIZE_DEFAULT,Float64,Int64,Void},DiffEqBase.ContinuousCallback{DiffEqJump.##31#33,DiffEqJump.##32#34{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},Void,Float64,Int64}},DiffEqJump.##32#34{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},Void,Float64,Int64}},DiffEqBase.#INITIALIZE_DEFAULT,Float64,Int64,Void}},Tuple{}},Void,Tuple{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,2,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,2,2}},Void,Float64,Int64},DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},Void,Float64,Int64}}}, ::OrdinaryDiffEq.Tsit5, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/DiffEqJump/src/solve.jl:18
   [7] init(::DiffEqJump.JumpProblem{DiffEqBase.ODEProblem{DiffEqJump.ExtendedJumpArray{Array{Float64,1},Array{Float64,1}},Float64,true,DiffEqJump.##11#13{DiffEqBase.DiscreteProblem{Array{Float64,1},Float64,true,DiffEqBase.##140#141,Void},DiffEqJump.JumpSet{Tuple{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,2,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,2,2}},Void,Float64,Int64},DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},Void,Float64,Int64}},Tuple{}}},Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},DiffEqJump.Direct,DiffEqBase.CallbackSet{Tuple{DiffEqBase.ContinuousCallback{DiffEqJump.##27#29,DiffEqJump.##28#30{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,2,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,2,2}},Void,Float64,Int64}},DiffEqJump.##28#30{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,2,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,2,2}},Void,Float64,Int64}},DiffEqBase.#INITIALIZE_DEFAULT,Float64,Int64,Void},DiffEqBase.ContinuousCallback{DiffEqJump.##31#33,DiffEqJump.##32#34{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},Void,Float64,Int64}},DiffEqJump.##32#34{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},Void,Float64,Int64}},DiffEqBase.#INITIALIZE_DEFAULT,Float64,Int64,Void}},Tuple{}},Void,Tuple{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,2,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,2,2}},Void,Float64,Int64},DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},Void,Float64,Int64}}}, ::OrdinaryDiffEq.Tsit5, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/DiffEqJump/src/solve.jl:18
   [8] #solve#39(::Array{Any,1}, ::Function, ::DiffEqJump.JumpProblem{DiffEqBase.ODEProblem{DiffEqJump.ExtendedJumpArray{Array{Float64,1},Array{Float64,1}},Float64,true,DiffEqJump.##11#13{DiffEqBase.DiscreteProblem{Array{Float64,1},Float64,true,DiffEqBase.##140#141,Void},DiffEqJump.JumpSet{Tuple{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,2,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,2,2}},Void,Float64,Int64},DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},Void,Float64,Int64}},Tuple{}}},Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},DiffEqJump.Direct,DiffEqBase.CallbackSet{Tuple{DiffEqBase.ContinuousCallback{DiffEqJump.##27#29,DiffEqJump.##28#30{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,2,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,2,2}},Void,Float64,Int64}},DiffEqJump.##28#30{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,2,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,2,2}},Void,Float64,Int64}},DiffEqBase.#INITIALIZE_DEFAULT,Float64,Int64,Void},DiffEqBase.ContinuousCallback{DiffEqJump.##31#33,DiffEqJump.##32#34{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},Void,Float64,Int64}},DiffEqJump.##32#34{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},Void,Float64,Int64}},DiffEqBase.#INITIALIZE_DEFAULT,Float64,Int64,Void}},Tuple{}},Void,Tuple{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,2,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,2,2}},Void,Float64,Int64},DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},Void,Float64,Int64}}}, ::OrdinaryDiffEq.Tsit5, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/DiffEqJump/src/solve.jl:6
   [9] solve(::DiffEqJump.JumpProblem{DiffEqBase.ODEProblem{DiffEqJump.ExtendedJumpArray{Array{Float64,1},Array{Float64,1}},Float64,true,DiffEqJump.##11#13{DiffEqBase.DiscreteProblem{Array{Float64,1},Float64,true,DiffEqBase.##140#141,Void},DiffEqJump.JumpSet{Tuple{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,2,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,2,2}},Void,Float64,Int64},DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},Void,Float64,Int64}},Tuple{}}},Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},DiffEqJump.Direct,DiffEqBase.CallbackSet{Tuple{DiffEqBase.ContinuousCallback{DiffEqJump.##27#29,DiffEqJump.##28#30{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,2,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,2,2}},Void,Float64,Int64}},DiffEqJump.##28#30{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,2,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,2,2}},Void,Float64,Int64}},DiffEqBase.#INITIALIZE_DEFAULT,Float64,Int64,Void},DiffEqBase.ContinuousCallback{DiffEqJump.##31#33,DiffEqJump.##32#34{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},Void,Float64,Int64}},DiffEqJump.##32#34{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},Void,Float64,Int64}},DiffEqBase.#INITIALIZE_DEFAULT,Float64,Int64,Void}},Tuple{}},Void,Tuple{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,2,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,2,2}},Void,Float64,Int64},DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},Void,Float64,Int64}}}, ::OrdinaryDiffEq.Tsit5) at /home/vagrant/.julia/v0.6/DiffEqJump/src/solve.jl:6
   [10] include_from_node1(::String) at ./loading.jl:569
   [11] include(::String) at ./sysimg.jl:14
   [12] macro expansion at /home/vagrant/.julia/v0.6/DiffEqBiological/test/runtests.jl:6 [inlined]
   [13] macro expansion at ./test.jl:860 [inlined]
   [14] macro expansion at ./util.jl:237 [inlined]
   [15] anonymous at ./<missing>:?
   [16] include_from_node1(::String) at ./loading.jl:569
   [17] include(::String) at ./sysimg.jl:14
   [18] process_options(::Base.JLOptions) at ./client.jl:305
   [19] _start() at ./client.jl:371
  while loading /home/vagrant/.julia/v0.6/DiffEqBiological/test/variable_rate_reactions.jl, in expression starting on line 15
Test Summary:                | Error  Total
Variable Rate Reaction Tests |     1      1
ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 1 errored, 0 broken.
while loading /home/vagrant/.julia/v0.6/DiffEqBiological/test/runtests.jl, in expression starting on line 6
==========================[ ERROR: DiffEqBiological ]===========================

failed process: Process(`/home/vagrant/julia/bin/julia -Cx86-64 -J/home/vagrant/julia/lib/julia/sys.so --compile=yes --depwarn=yes --check-bounds=yes --code-coverage=none --color=no --compilecache=yes /home/vagrant/.julia/v0.6/DiffEqBiological/test/runtests.jl`, ProcessExited(1)) [1]

================================================================================
INFO: Removing Calculus v0.2.2
INFO: Removing CommonSubexpressions v0.0.1
INFO: Removing DataStructures v0.6.1
INFO: Removing DiffBase v0.2.0
INFO: Removing DiffEqNoiseProcess v0.3.2
INFO: Removing Distances v0.5.0
INFO: Removing ForwardDiff v0.5.0
INFO: Removing GenericSVD v0.1.0
INFO: Removing LineSearches v2.2.1
INFO: Removing MuladdMacro v0.0.2
INFO: Removing NLSolversBase v2.1.3
INFO: Removing NLsolve v0.11.0
INFO: Removing NaNMath v0.2.6
INFO: Removing OrdinaryDiffEq v2.14.0
INFO: Removing Parameters v0.7.2
INFO: Removing RandomNumbers v0.1.0
INFO: Removing RealInterface v0.0.3
INFO: Removing Reexport v0.0.3
INFO: Removing ResettableStacks v0.1.0
INFO: Removing Roots v0.4.0
INFO: Removing SpecialFunctions v0.3.0
INFO: Removing StochasticDiffEq v2.10.0
ERROR: DiffEqBiological had test errors

>>> End of log
