>>> 'Pkg.add("NKLandscapes")' log
INFO: Cloning cache of NKLandscapes from https://github.com/glesica/NKLandscapes.jl.git
INFO: Installing BinDeps v0.5.0
INFO: Installing Calculus v0.2.2
INFO: Installing DataStructures v0.5.3
INFO: Installing Distributions v0.12.5
INFO: Installing FactCheck v0.4.3
INFO: Installing NKLandscapes v0.3.0
INFO: Installing PDMats v0.6.0
INFO: Installing QuadGK v0.1.2
INFO: Installing Rmath v0.1.6
INFO: Installing SHA v0.3.2
INFO: Installing SpecialFunctions v0.1.1
INFO: Installing StatsBase v0.14.1
INFO: Installing StatsFuns v0.5.0
INFO: Installing URIParser v0.1.8
INFO: Building Rmath
INFO: Package database updated

>>> 'Pkg.test("NKLandscapes")' log
Julia Version 0.5.2
Commit f4c6c9d (2017-05-06 16:34 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-117-generic #164-Ubuntu SMP Fri Apr 7 11:05:26 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (592.546875 MB free)
Uptime: 16393.0 sec
Load Avg:  0.93505859375  1.17578125  1.40869140625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3501 MHz     970868 s       4482 s      99823 s     359062 s         28 s
#2  3501 MHz     274963 s       2705 s      47769 s    1278363 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.7.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.5
2 required packages:
 - JSON                          0.11.0
 - NKLandscapes                  0.3.0
14 additional packages:
 - BinDeps                       0.5.0
 - Calculus                      0.2.2
 - Compat                        0.25.0
 - DataStructures                0.5.3
 - Distributions                 0.12.5
 - FactCheck                     0.4.3
 - PDMats                        0.6.0
 - QuadGK                        0.1.2
 - Rmath                         0.1.6
 - SHA                           0.3.2
 - SpecialFunctions              0.1.1
 - StatsBase                     0.14.1
 - StatsFuns                     0.5.0
 - URIParser                     0.1.8
INFO: Testing NKLandscapes
NKLandscapes
  > genotype.jl
    > NKLandscape(4, 1)
      > Genotype
      > fitness(...)
      > rand(::Type{Genotype}, ...)
      > zeros(::Type{Genotype}, ...)
    > NKqLandscape(4, 1, 2)
      > Genotype
      > fitness(...)
      > rand(::Type{Genotype}, ...)
      > zeros(::Type{Genotype}, ...)
    > NKpLandscape(4, 1, 0.9)
      > Genotype
      > fitness(...)
      > rand(::Type{Genotype}, ...)
      > zeros(::Type{Genotype}, ...)
  > landscape.jl
    > NKLandscape
      > when near=true
    > NKqLandscape
      > when near=true
    > NKpLandscape
      > when near=true
  > metapopulation.jl
    > NKLandscape(4, 1)
      > popsize(...)
      > popct(...)
      > popfits(...)
    > NKqLandscape(4, 1, 2)
      > popsize(...)
      > popct(...)
      > popfits(...)
    > NKpLandscape(4, 1, 0.9)
      > popsize(...)
      > popct(...)
      > popfits(...)
  > migration.jl
    > NKLandscape(96, 1)
      > migrate(...)
        > should respect migration probability
        > should respect migration count
      > linmigrate(...)
        > should respect migration probability
        > should respect migration count
        > should only migrate left and right
    > NKqLandscape(96, 1, 2)
      > migrate(...)
        > should respect migration probability
        > should respect migration count
      > linmigrate(...)
        > should respect migration probability
        > should respect migration count
        > should only migrate left and right
    > NKpLandscape(96, 1, 0.9)
      > migrate(...)
        > should respect migration probability
        > should respect migration count
      > linmigrate(...)
        > should respect migration probability
        > should respect migration count
        > should only migrate left and right
  > mutation.jl
    > NKLandscape(4, 1)
      > bwmutate(...)
      > bwmutate(::Genotype)
      > bsmutate(...)
      > bsmutate(::Genotype)
      > bsmutate!(::Genotype)
    > NKqLandscape(4, 1, 2)
      > bwmutate(...)
      > bwmutate(::Genotype)
      > bsmutate(...)
      > bsmutate(::Genotype)
      > bsmutate!(::Genotype)
    > NKpLandscape(4, 1, 0.9)
      > bwmutate(...)
      > bwmutate(::Genotype)
      > bsmutate(...)
      > bsmutate(::Genotype)
      > bsmutate!(::Genotype)
  > neighbors.jl
    > NKLandscape(4, 1)
      > number_neighbors(...)
      > all_neighbors(...)
      > random_neighbor(...)
      > neutral_neighbors(...)
      > fitter_neighbors(...)
      > fitness_range_neighbors(...)
      > fittest_neighbors(...)
      > fittest_neighbor(...)
    > NKqLandscape(4, 1, 2)
      > number_neighbors(...)
      > all_neighbors(...)
      > random_neighbor(...)
      > neutral_neighbors(...)
      > fitter_neighbors(...)
      > fitness_range_neighbors(...)
      > fittest_neighbors(...)
      > fittest_neighbor(...)
    > NKpLandscape(4, 1, 0.9)
      > number_neighbors(...)
      > all_neighbors(...)
      > random_neighbor(...)
      > neutral_neighbors(...)
      > fitter_neighbors(...)
      > fitness_range_neighbors(...)
      > fittest_neighbors(...)
      > fittest_neighbor(...)
  > population.jl
    > NKLandscape(4, 1)
      > popsize(...)
      > popfits(...)
    > NKqLandscape(4, 1, 2)
      > popsize(...)
      > popfits(...)
    > NKpLandscape(4, 1, 0.9)
      > popsize(...)
      > popfits(...)
  > walks.jl
    > NKLandscape(4, 1)
      > Adaptive walks
        > Random adaptive walk should terminate and move uphill
        > Greedy adaptive walk should terminate and move uphill
        > Reluctant adaptive walk should terminate and move uphill
      > Neutral walks
        > Neutral walk should terminate and move sideways
    > NKqLandscape(4, 1, 2)
      > Adaptive walks
        > Random adaptive walk should terminate and move uphill
        > Greedy adaptive walk should terminate and move uphill
        > Reluctant adaptive walk should terminate and move uphill
      > Neutral walks
        > Neutral walk should terminate and move sideways
    > NKpLandscape(4, 1, 0.9)
      > Adaptive walks
        > Random adaptive walk should terminate and move uphill
        > Greedy adaptive walk should terminate and move uphill
        > Reluctant adaptive walk should terminate and move uphill
      > Neutral walks
        > Neutral walk should terminate and move sideways
  > Fast functional tests
    > NK.fitness(...)
    > NK.popfits(...)
    > NK.propsel(...)
    > NK.tournsel(...)
    > NK.moransel(...)
    > NK.elitesel(...)
    > NK.bwmutate(...)
    > NK.bsmutate(...)
  > Fast neighbors, walks, and neutral net tests
    > NK.neighbors(...)
    > NK.walks(...)
    > NK.netcounts(...)
547 facts verified.
INFO: NKLandscapes tests passed

>>> End of log
