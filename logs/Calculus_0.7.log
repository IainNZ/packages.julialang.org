>>> 'Pkg.add("Calculus")' log
[ Info: Installing Calculus v0.2.2
[ Info: Package database updated

>>> 'Pkg.test("Calculus")' log
Julia Version 0.7.0-DEV.3519
Commit 5ecba29832 (2018-01-22 20:58 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
      Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-135-generic #184-Ubuntu SMP Wed Oct 18 11:55:51 UTC 2017 x86_64 x86_64
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
              speed         user         nice          sys         idle          irq
       #1  3500 MHz    1296326 s       5034 s      71645 s     448663 s         12 s
       #2  3500 MHz     288102 s       2786 s      30322 s    1771261 s          0 s
       
  Memory: 2.93927001953125 GB (306.48828125 MB free)
  Uptime: 21328.0 sec
  Load Avg:  1.24951171875  1.24755859375  0.96044921875
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant
Packages:
  Package Directory: /home/vagrant/.julia/v0.7
  Package Status:
2 required packages:
 - Calculus                      0.2.2
 - JSON                          0.16.4
2 additional packages:
 - Compat                        0.49.0
 - Nullables                     0.0.3
[ Info: Testing Calculus
┌ Warning: Deprecated syntax `parametric method syntax finite_difference{T <: Number}(f::Function, x::T, dtype::Symbol = :central)` around /home/vagrant/.julia/v0.7/Calculus/src/finite_difference.jl:48.
│ Use `finite_difference(f::Function, x::T, dtype::Symbol = :central) where T <: Number` instead.
└ @ nothing finite_difference.jl:48
┌ Warning: Deprecated syntax `parametric method syntax complex_differentiable_abs{T <: Complex}(z::T)` around /home/vagrant/.julia/v0.7/Calculus/src/finite_difference.jl:87.
│ Use `complex_differentiable_abs(z::T) where T <: Complex` instead.
└ @ nothing finite_difference.jl:87
┌ Warning: Deprecated syntax `parametric method syntax finite_difference!{S <: Number, T <: Number}(f::Function, x::Vector{S}, g::Vector{T}, dtype::Symbol)` around /home/vagrant/.julia/v0.7/Calculus/src/finite_difference.jl:105.
│ Use `finite_difference!(f::Function, x::Vector{S}, g::Vector{T}, dtype::Symbol) where {S <: Number, T <: Number}` instead.
└ @ nothing finite_difference.jl:105
┌ Warning: Deprecated syntax `parametric method syntax finite_difference{T <: Number}(f::Function, x::Vector{T}, dtype::Symbol = :central)` around /home/vagrant/.julia/v0.7/Calculus/src/finite_difference.jl:142.
│ Use `finite_difference(f::Function, x::Vector{T}, dtype::Symbol = :central) where T <: Number` instead.
└ @ nothing finite_difference.jl:142
┌ Warning: Deprecated syntax `parametric method syntax finite_difference_jacobian!{R <: Number, S <: Number, T <: Number}(f::Function, x::Vector{R}, f_x::Vector{S}, J::Array{T}, dtype::Symbol = :central)` around /home/vagrant/.julia/v0.7/Calculus/src/finite_difference.jl:165.
│ Use `finite_difference_jacobian!(f::Function, x::Vector{R}, f_x::Vector{S}, J::Array{T}, dtype::Symbol = :central) where {R <: Number, S <: Number, T <: Number}` instead.
└ @ nothing finite_difference.jl:165
┌ Warning: Deprecated syntax `parametric method syntax finite_difference_jacobian{T <: Number}(f::Function, x::Vector{T}, dtype::Symbol = :central)` around /home/vagrant/.julia/v0.7/Calculus/src/finite_difference.jl:197.
│ Use `finite_difference_jacobian(f::Function, x::Vector{T}, dtype::Symbol = :central) where T <: Number` instead.
└ @ nothing finite_difference.jl:197
┌ Warning: Deprecated syntax `parametric method syntax finite_difference_hessian{T <: Number}(f::Function, x::T)` around /home/vagrant/.julia/v0.7/Calculus/src/finite_difference.jl:217.
│ Use `finite_difference_hessian(f::Function, x::T) where T <: Number` instead.
└ @ nothing finite_difference.jl:217
┌ Warning: Deprecated syntax `parametric method syntax finite_difference_hessian!{S <: Number, T <: Number}(f::Function, x::Vector{S}, H::Array{T})` around /home/vagrant/.julia/v0.7/Calculus/src/finite_difference.jl:238.
│ Use `finite_difference_hessian!(f::Function, x::Vector{S}, H::Array{T}) where {S <: Number, T <: Number}` instead.
└ @ nothing finite_difference.jl:238
┌ Warning: Deprecated syntax `parametric method syntax finite_difference_hessian{T <: Number}(f::Function, x::Vector{T})` around /home/vagrant/.julia/v0.7/Calculus/src/finite_difference.jl:269.
│ Use `finite_difference_hessian(f::Function, x::Vector{T}) where T <: Number` instead.
└ @ nothing finite_difference.jl:269
┌ Warning: Deprecated syntax `parametric method syntax finite_difference_hessian{T <: Number}(f::Function, g::Function, x::Vector{T}, dtype::Symbol = :central)` around /home/vagrant/.julia/v0.7/Calculus/src/finite_difference.jl:284.
│ Use `finite_difference_hessian(f::Function, g::Function, x::Vector{T}, dtype::Symbol = :central) where T <: Number` instead.
└ @ nothing finite_difference.jl:284
┌ Warning: Deprecated syntax `parametric method syntax derivative{T <: Number}(f::Function, x::Union{T, Vector{T}}, dtype::Symbol = :central)` around /home/vagrant/.julia/v0.7/Calculus/src/derivative.jl:10.
│ Use `derivative(f::Function, x::Union{T, Vector{T}}, dtype::Symbol = :central) where T <: Number` instead.
└ @ nothing derivative.jl:10
┌ Warning: Deprecated syntax `parametric method syntax gradient{T <: Number}(f::Function, x::Union{T, Vector{T}}, dtype::Symbol = :central)` around /home/vagrant/.julia/v0.7/Calculus/src/derivative.jl:13.
│ Use `gradient(f::Function, x::Union{T, Vector{T}}, dtype::Symbol = :central) where T <: Number` instead.
└ @ nothing derivative.jl:13
┌ Warning: Deprecated syntax `parametric method syntax Base.gradient{T <: Number}(f::Function, x::Union{T, Vector{T}}, dtype::Symbol = :central)` around /home/vagrant/.julia/v0.7/Calculus/src/derivative.jl:17.
│ Use `Base.gradient(f::Function, x::Union{T, Vector{T}}, dtype::Symbol = :central) where T <: Number` instead.
└ @ nothing derivative.jl:17
┌ Warning: Deprecated syntax `parametric method syntax jacobian{T <: Number}(f::Function, x::Vector{T}, dtype::Symbol)` around /home/vagrant/.julia/v0.7/Calculus/src/derivative.jl:29.
│ Use `jacobian(f::Function, x::Vector{T}, dtype::Symbol) where T <: Number` instead.
└ @ nothing derivative.jl:29
┌ Warning: Deprecated syntax `parametric method syntax second_derivative{T <: Number}(f::Function, g::Function, x::Union{T, Vector{T}}, dtype::Symbol)` around /home/vagrant/.julia/v0.7/Calculus/src/derivative.jl:47.
│ Use `second_derivative(f::Function, g::Function, x::Union{T, Vector{T}}, dtype::Symbol) where T <: Number` instead.
└ @ nothing derivative.jl:47
┌ Warning: Deprecated syntax `parametric method syntax hessian{T <: Number}(f::Function, g::Function, x::Union{T, Vector{T}}, dtype::Symbol)` around /home/vagrant/.julia/v0.7/Calculus/src/derivative.jl:50.
│ Use `hessian(f::Function, g::Function, x::Union{T, Vector{T}}, dtype::Symbol) where T <: Number` instead.
└ @ nothing derivative.jl:50
┌ Warning: Deprecated syntax `parametric method syntax second_derivative{T <: Number}(f::Function, g::Function, x::Union{T, Vector{T}})` around /home/vagrant/.julia/v0.7/Calculus/src/derivative.jl:53.
│ Use `second_derivative(f::Function, g::Function, x::Union{T, Vector{T}}) where T <: Number` instead.
└ @ nothing derivative.jl:53
┌ Warning: Deprecated syntax `parametric method syntax hessian{T <: Number}(f::Function, g::Function, x::Union{T, Vector{T}})` around /home/vagrant/.julia/v0.7/Calculus/src/derivative.jl:56.
│ Use `hessian(f::Function, g::Function, x::Union{T, Vector{T}}) where T <: Number` instead.
└ @ nothing derivative.jl:56
┌ Warning: Deprecated syntax `parametric method syntax second_derivative{T <: Number}(f::Function, x::Vector{T}, dtype::Symbol)` around /home/vagrant/.julia/v0.7/Calculus/src/derivative.jl:65.
│ Use `second_derivative(f::Function, x::Vector{T}, dtype::Symbol) where T <: Number` instead.
└ @ nothing derivative.jl:65
┌ Warning: Deprecated syntax `parametric method syntax hessian{T <: Number}(f::Function, x::Vector{T}, dtype::Symbol)` around /home/vagrant/.julia/v0.7/Calculus/src/derivative.jl:68.
│ Use `hessian(f::Function, x::Vector{T}, dtype::Symbol) where T <: Number` instead.
└ @ nothing derivative.jl:68
┌ Warning: Deprecated syntax `parametric method syntax second_derivative{T <: Number}(f::Function, x::Vector{T})` around /home/vagrant/.julia/v0.7/Calculus/src/derivative.jl:77.
│ Use `second_derivative(f::Function, x::Vector{T}) where T <: Number` instead.
└ @ nothing derivative.jl:77
┌ Warning: Deprecated syntax `parametric method syntax hessian{T <: Number}(f::Function, x::Vector{T})` around /home/vagrant/.julia/v0.7/Calculus/src/derivative.jl:80.
│ Use `hessian(f::Function, x::Vector{T}) where T <: Number` instead.
└ @ nothing derivative.jl:80
┌ Warning: Deprecated syntax `parametric method syntax check_gradient{T <: Number}(f::Function, g::Function, x::Vector{T})` around /home/vagrant/.julia/v0.7/Calculus/src/check_derivative.jl:7.
│ Use `check_gradient(f::Function, g::Function, x::Vector{T}) where T <: Number` instead.
└ @ nothing check_derivative.jl:7
┌ Warning: Deprecated syntax `parametric method syntax check_hessian{T <: Number}(f::Function, h::Function, x::Vector{T})` around /home/vagrant/.julia/v0.7/Calculus/src/check_derivative.jl:17.
│ Use `check_hessian(f::Function, h::Function, x::Vector{T}) where T <: Number` instead.
└ @ nothing check_derivative.jl:17
┌ Warning: Deprecated syntax `type` at /home/vagrant/.julia/v0.7/Calculus/src/symbolic.jl:26.
│ Use `mutable struct` instead.
└ @ nothing symbolic.jl:26
┌ Warning: Deprecated syntax `type` at /home/vagrant/.julia/v0.7/Calculus/src/symbolic.jl:69.
│ Use `mutable struct` instead.
└ @ nothing symbolic.jl:69
┌ Warning: Deprecated syntax `parametric method syntax simplify{T}(x::SymbolParameter{T}, args)` around /home/vagrant/.julia/v0.7/Calculus/src/symbolic.jl:89.
│ Use `simplify(x::SymbolParameter{T}, args) where T` instead.
└ @ nothing symbolic.jl:89
┌ Warning: Deprecated syntax `parametric method syntax differentiate{T}(x::SymbolParameter{T}, args, wrt)` around /home/vagrant/.julia/v0.7/Calculus/src/differentiate.jl:22.
│ Use `differentiate(x::SymbolParameter{T}, args, wrt) where T` instead.
└ @ nothing differentiate.jl:22
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = top-level scope
└ @ Core :0
┌ Warning: Deprecated syntax `parametric method syntax differentiate{T <: Compat.AbstractString}(s::Compat.AbstractString, targets::Vector{T})` around /home/vagrant/.julia/v0.7/Calculus/src/differentiate.jl:283.
│ Use `differentiate(s::Compat.AbstractString, targets::Vector{T}) where T <: Compat.AbstractString` instead.
└ @ nothing differentiate.jl:283
WARNING: Base.Test is deprecated, run `using Test` instead.
  likely near /home/vagrant/.julia/v0.7/Calculus/test/runtests.jl:6
Running tests:
 * finite_difference
Error During Test at /home/vagrant/.julia/v0.7/Calculus/test/finite_difference.jl:5
  Test threw an exception of type ErrorException
  Expression: norm(Calculus.finite_difference((x->begin
                        x ^ 2
                    end), 1.0, :forward) - 2.0) < 0.001
  Base.norm has been moved to the standard library package LinearAlgebra.
  Restart Julia and then run `using LinearAlgebra` to load it.
  Stacktrace:
   [1] error(::Function, ::String, ::String, ::String, ::String, ::String, ::String) at ./error.jl:42
   [2] #norm#1015(::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::Float64, ::Vararg{Float64,N} where N) at ./deprecated.jl:138
   [3] norm(::Float64, ::Vararg{Float64,N} where N) at ./deprecated.jl:138
   [4] top-level scope
   [5] include at ./boot.jl:292 [inlined]
   [6] include_relative(::Module, ::String) at ./loading.jl:1011
   [7] include(::Module, ::String) at ./sysimg.jl:26
   [8] include(::String) at ./sysimg.jl:65
   [9] top-level scope at ./<missing>:18
   [10] include at ./boot.jl:292 [inlined]
   [11] include_relative(::Module, ::String) at ./loading.jl:1011
   [12] include(::Module, ::String) at ./sysimg.jl:26
   [13] process_options(::Base.JLOptions) at ./client.jl:334
   [14] _start() at ./client.jl:386
ERROR: LoadError: LoadError: There was an error during testing
in expression starting at /home/vagrant/.julia/v0.7/Calculus/test/finite_difference.jl:5
in expression starting at /home/vagrant/.julia/v0.7/Calculus/test/runtests.jl:16
┌ Error: ------------------------------------------------------------
│ # Testing failed for Calculus
│   exception =
│    failed process: Process(`/home/vagrant/julia/bin/julia -Cnative -J/home/vagrant/julia/lib/julia/sys.so --compile=yes --depwarn=yes --code-coverage=none --color=no --compiled-modules=yes --check-bounds=yes --warn-overwrite=yes --startup-file=yes /home/vagrant/.julia/v0.7/Calculus/test/runtests.jl`, ProcessExited(1)) [1]
│    Stacktrace:
│     [1] error(::String, ::Base.Process, ::String, ::Int64, ::String) at ./error.jl:42
│     [2] pipeline_error(::Base.Process) at ./process.jl:698
│     [3] run(::Cmd) at ./process.jl:660
│     [4] (::getfield(Base.Pkg.Entry, Symbol("##89#92")){Bool,String,Array{AbstractString,1}})() at ./pkg/entry.jl:729
│     [5] cd(::getfield(Base.Pkg.Entry, Symbol("##89#92")){Bool,String,Array{AbstractString,1}}, ::String) at ./file.jl:70
│     [6] #test!#88(::Bool, ::Function, ::String, ::Array{AbstractString,1}, ::Array{AbstractString,1}, ::Array{AbstractString,1}) at ./pkg/entry.jl:717
│     [7] (::getfield(Base.Pkg.Entry, Symbol("#kw##test!")))(::NamedTuple{(:coverage,),Tuple{Bool}}, ::typeof(Base.Pkg.Entry.test!), ::String, ::Array{AbstractString,1}, ::Array{AbstractString,1}, ::Array{AbstractString,1}) at ./<missing>:0
│     [8] #test#96(::Bool, ::Function, ::Array{AbstractString,1}) at ./pkg/entry.jl:756
│     [9] (::getfield(Base.Pkg.Entry, Symbol("#kw##test")))(::NamedTuple{(:coverage,),Tuple{Bool}}, ::typeof(Base.Pkg.Entry.test), ::Array{AbstractString,1}) at ./<missing>:0
│     [10] (::getfield(Base.Pkg.Dir, Symbol("##4#7")){Base.Iterators.IndexValue{Symbol,Bool,Tuple{Symbol},NamedTuple{(:coverage,),Tuple{Bool}}},typeof(Base.Pkg.Entry.test),Tuple{Array{AbstractString,1}}})() at ./pkg/dir.jl:36
│     [11] cd(::getfield(Base.Pkg.Dir, Symbol("##4#7")){Base.Iterators.IndexValue{Symbol,Bool,Tuple{Symbol},NamedTuple{(:coverage,),Tuple{Bool}}},typeof(Base.Pkg.Entry.test),Tuple{Array{AbstractString,1}}}, ::String) at ./file.jl:70
│     [12] #cd#1(::Base.Iterators.IndexValue{Symbol,Bool,Tuple{Symbol},NamedTuple{(:coverage,),Tuple{Bool}}}, ::Function, ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N} where N) at ./pkg/dir.jl:36
│     [13] (::getfield(Base.Pkg.Dir, Symbol("#kw##cd")))(::NamedTuple{(:coverage,),Tuple{Bool}}, ::typeof(Base.Pkg.Dir.cd), ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N} where N) at ./<missing>:0
│     [14] #test#3(::Bool, ::Function, ::String, ::Vararg{String,N} where N) at ./pkg/pkg.jl:274
│     [15] test(::String, ::Vararg{String,N} where N) at ./pkg/pkg.jl:274
│     [16] top-level scope
│     [17] eval at ./boot.jl:295 [inlined]
│     [18] eval(::Module, ::Expr) at ./sysimg.jl:71
│     [19] process_options(::Base.JLOptions) at ./client.jl:311
│     [20] _start() at ./client.jl:386
└ @ Base.Pkg.Entry entry.jl:732
ERROR: Calculus had test errors

>>> End of log
