>>> 'Pkg.add("Whippet")' log
INFO: Cloning cache of FMIndexes from https://github.com/BioJulia/FMIndexes.jl.git
INFO: Cloning cache of Humanize from https://github.com/IainNZ/Humanize.jl.git
INFO: Cloning cache of Whippet from https://github.com/timbitz/Whippet.jl.git
INFO: Installing ArgParse v0.5.0
INFO: Installing Automa v0.4.0
INFO: Installing BinDeps v0.8.6
INFO: Installing BioCore v1.2.1
INFO: Installing BioSequences v0.8.1
INFO: Installing BioSymbols v1.2.0
INFO: Installing BufferedStreams v0.3.3
INFO: Installing Calculus v0.2.2
INFO: Installing Codecs v0.4.0
INFO: Installing Combinatorics v0.5.0
INFO: Installing DataStructures v0.7.4
INFO: Installing Distributions v0.15.0
INFO: Installing FMIndexes v0.1.0
INFO: Installing Glob v1.1.1
INFO: Installing HttpCommon v0.4.0
INFO: Installing HttpParser v0.3.1
INFO: Installing Humanize v0.4.1
INFO: Installing IndexableBitVectors v0.1.2
INFO: Installing IntArrays v0.1.0
INFO: Installing IntervalTrees v0.4.1
INFO: Installing IterTools v0.2.1
INFO: Installing Libz v0.2.4
INFO: Installing MbedTLS v0.5.5
INFO: Installing PDMats v0.8.0
INFO: Installing Polynomials v0.2.1
INFO: Installing QuadGK v0.2.0
INFO: Installing Requests v0.5.1
INFO: Installing Rmath v0.3.2
INFO: Installing SHA v0.5.6
INFO: Installing SortingAlgorithms v0.2.0
INFO: Installing SpecialFunctions v0.3.8
INFO: Installing StatsBase v0.19.5
INFO: Installing StatsFuns v0.5.0
INFO: Installing SuffixArrays v0.1.0
INFO: Installing TextWrap v0.2.0
INFO: Installing Twiddle v0.4.0
INFO: Installing URIParser v0.3.0
INFO: Installing WaveletMatrices v0.2.0
INFO: Installing Whippet v0.10.0
INFO: Building SpecialFunctions
INFO: Building Rmath
INFO: Building HttpParser
INFO: Building MbedTLS
Using system libraries...
INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of Whippet
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("Whippet")' log
Julia Version 0.6.2
Commit d386e40c17 (2017-12-13 18:08 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-135-generic #184-Ubuntu SMP Wed Oct 18 11:55:51 UTC 2017 x86_64 x86_64
Memory: 2.93927001953125 GB (731.265625 MB free)
Uptime: 90779.0 sec
Load Avg:  0.8720703125  0.9111328125  0.9501953125
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3501 MHz    5592992 s       7079 s     318472 s    1742600 s         90 s
#2  3501 MHz    1385105 s         68 s     129162 s    7390749 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.6
2 required packages:
 - JSON                          0.16.4
 - Whippet                       0.10.0
40 additional packages:
 - ArgParse                      0.5.0
 - Automa                        0.4.0
 - BinDeps                       0.8.6
 - BioCore                       1.2.1
 - BioSequences                  0.8.1
 - BioSymbols                    1.2.0
 - BufferedStreams               0.3.3
 - Calculus                      0.2.2
 - Codecs                        0.4.0
 - Combinatorics                 0.5.0
 - Compat                        0.53.0
 - DataStructures                0.7.4
 - Distributions                 0.15.0
 - FMIndexes                     0.1.0
 - Glob                          1.1.1
 - HttpCommon                    0.4.0
 - HttpParser                    0.3.1
 - Humanize                      0.4.1
 - IndexableBitVectors           0.1.2
 - IntArrays                     0.1.0
 - IntervalTrees                 0.4.1
 - IterTools                     0.2.1
 - Libz                          0.2.4
 - MbedTLS                       0.5.5
 - Nullables                     0.0.3
 - PDMats                        0.8.0
 - Polynomials                   0.2.1
 - QuadGK                        0.2.0
 - Requests                      0.5.1
 - Rmath                         0.3.2
 - SHA                           0.5.6
 - SortingAlgorithms             0.2.0
 - SpecialFunctions              0.3.8
 - StatsBase                     0.19.5
 - StatsFuns                     0.5.0
 - SuffixArrays                  0.1.0
 - TextWrap                      0.2.0
 - Twiddle                       0.4.0
 - URIParser                     0.3.0
 - WaveletMatrices               0.2.0
INFO: Testing Whippet
WARNING: using DataStructures.complement in module Main conflicts with an existing identifier.
WARNING: using DataStructures.complement! in module Main conflicts with an existing identifier.
Test Summary:  | Pass  Total
SG Kmers & Seq |   38     38
Test Summary: | Pass  Total
Bias Models   | 1031   1031
kissing
one
single_rev
single
Saving test index...
GraphLib(UInt32[0x00000000, 0x00000014, 0x00000055, 0x0000005f], String["kissing", "one", "single_rev", "single"], GeneInfo[GeneInfo("kissing", "chr0", false), GeneInfo("one", "chr0", true), GeneInfo("single_rev", "chr0", false), GeneInfo("single", "chr0", true)], [20.0, 51.0, 10.0, 10.0], SpliceGraph[SpliceGraph{2}(UInt32[0x00000001, 0x0000000b, 0x0000000b], UInt32[0x00000015, 0x00000015, 0x0000000b], UInt32[0x0000000a, 0x00000000, 0x0000000a], EdgeType[EdgeType(0x00), EdgeType(0x05), EdgeType(0x06), EdgeType(0x03)], BioSequences.Kmer{BioSymbols.DNA,2}[AA, AA, AA, AA], BioSequences.Kmer{BioSymbols.DNA,2}[AA, AA, TG, AA], IntSet[IntSet([1, 2, 3]), IntSet([1, 2, 3])], String["def_kiss", "ret_kiss"], Array{Float16,1}[Float16[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], Float16[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]], AAAAAAAAAATGTAATCCGC), SpliceGraph{2}(UInt32[0x00000001, 0x00000010, 0x0000001a, 0x00000024, 0x00000027, 0x00000030, 0x00000033, 0x0000003d], UInt32[0x00000006, 0x00000015, 0x0000001f, 0x00000033, 0x00000036, 0x0000003f, 0x0000004c, 0x00000056], UInt32[0x0000000f, 0x0000000a, 0x0000000a, 0x00000003, 0x00000009, 0x00000003, 0x0000000a, 0x00000005], EdgeType[EdgeType(0x00), EdgeType(0x05), EdgeType(0x06), EdgeType(0x04), EdgeType(0x06), EdgeType(0x05), EdgeType(0x04), EdgeType(0x03), EdgeType(0x03)], BioSequences.Kmer{BioSymbols.DNA,2}[GA, CA, GA, AG, AA, AG, TC, AA, AA], BioSequences.Kmer{BioSymbols.DNA,2}[AA, AA, GC, CC, CT, AA, TT, AA, AA], IntSet[IntSet([1, 3, 5, 7]), IntSet([1, 2, 3, 4, 5, 7]), IntSet([1, 3, 5, 6, 7, 8])], String["def", "int1_alt3", "apa_alt5"], Array{Float16,1}[Float16[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], Float16[0.0, 0.0, 0.0, 0.0, 0.0, 0.125, 0.875, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], Float16[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]], TTATTGCGGATTACATTTTTTTTTTGCATTAGAAGCCTCTATGCTAGTTCTTAGACAAGAAATAA), SpliceGraph{2}(UInt32[0x00000001], UInt32[0x0000000b], UInt32[0x0000000a], EdgeType[EdgeType(0x00), EdgeType(0x03)], BioSequences.Kmer{BioSymbols.DNA,2}[AA, AA], BioSequences.Kmer{BioSymbols.DNA,2}[AA, AA], IntSet[IntSet([1])], String["single_rev"], Array{Float16,1}[Float16[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]], TGTAATCCGC), SpliceGraph{2}(UInt32[0x00000001], UInt32[0x0000000b], UInt32[0x0000000a], EdgeType[EdgeType(0x00), EdgeType(0x03)], BioSequences.Kmer{BioSymbols.DNA,2}[AA, AA], BioSequences.Kmer{BioSymbols.DNA,2}[AA, AA], IntSet[IntSet([1])], String["ex1_single"], Array{Float16,1}[Float16[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]], GCGGATTACA)], Edges{2}(Array{SGNode,1}[SGNode[SGNode(0x00000001, 0x00000002)], #undef, SGNode[SGNode(0x00000002, 0x00000004), SGNode(0x00000002, 0x00000006)], #undef, SGNode[SGNode(0x00000002, 0x00000002)], #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, SGNode[SGNode(0x00000002, 0x00000007)], #undef, #undef], Array{SGNode,1}[#undef, #undef, #undef, #undef, #undef, SGNode[SGNode(0x00000002, 0x00000004)], #undef, SGNode[SGNode(0x00000002, 0x00000005)], #undef, SGNode[SGNode(0x00000002, 0x00000003)], #undef, #undef, #undef, #undef, SGNode[SGNode(0x00000001, 0x00000003)], SGNode[SGNode(0x00000002, 0x00000007)]]), FMIndexes.FMIndex{2,UInt8}:
     length: 105
  data size: 305.0 B, true, 2)
  1.492727 seconds (398.05 k allocations: 21.248 MiB, 1.15% gc time)
Loading test index...
  0.242596 seconds (20.18 k allocations: 1.109 MiB)
GraphLib(UInt32[0x00000000, 0x00000014, 0x00000055, 0x0000005f], String["kissing", "one", "single_rev", "single"], GeneInfo[GeneInfo("kissing", "chr0", false), GeneInfo("one", "chr0", true), GeneInfo("single_rev", "chr0", false), GeneInfo("single", "chr0", true)], [20.0, 51.0, 10.0, 10.0], SpliceGraph[SpliceGraph{2}(UInt32[0x00000001, 0x0000000b, 0x0000000b], UInt32[0x00000015, 0x00000015, 0x0000000b], UInt32[0x0000000a, 0x00000000, 0x0000000a], EdgeType[EdgeType(0x00), EdgeType(0x05), EdgeType(0x06), EdgeType(0x03)], BioSequences.Kmer{BioSymbols.DNA,2}[AA, AA, AA, AA], BioSequences.Kmer{BioSymbols.DNA,2}[AA, AA, TG, AA], IntSet[IntSet([1, 2, 3]), IntSet([1, 2, 3])], String["def_kiss", "ret_kiss"], Array{Float16,1}[Float16[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], Float16[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]], AAAAAAAAAATGTAATCCGC), SpliceGraph{2}(UInt32[0x00000001, 0x00000010, 0x0000001a, 0x00000024, 0x00000027, 0x00000030, 0x00000033, 0x0000003d], UInt32[0x00000006, 0x00000015, 0x0000001f, 0x00000033, 0x00000036, 0x0000003f, 0x0000004c, 0x00000056], UInt32[0x0000000f, 0x0000000a, 0x0000000a, 0x00000003, 0x00000009, 0x00000003, 0x0000000a, 0x00000005], EdgeType[EdgeType(0x00), EdgeType(0x05), EdgeType(0x06), EdgeType(0x04), EdgeType(0x06), EdgeType(0x05), EdgeType(0x04), EdgeType(0x03), EdgeType(0x03)], BioSequences.Kmer{BioSymbols.DNA,2}[GA, CA, GA, AG, AA, AG, TC, AA, AA], BioSequences.Kmer{BioSymbols.DNA,2}[AA, AA, GC, CC, CT, AA, TT, AA, AA], IntSet[IntSet([1, 3, 5, 7]), IntSet([1, 2, 3, 4, 5, 7]), IntSet([1, 3, 5, 6, 7, 8])], String["def", "int1_alt3", "apa_alt5"], Array{Float16,1}[Float16[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], Float16[0.0, 0.0, 0.0, 0.0, 0.0, 0.125, 0.875, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], Float16[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]], TTATTGCGGATTACATTTTTTTTTTGCATTAGAAGCCTCTATGCTAGTTCTTAGACAAGAAATAA), SpliceGraph{2}(UInt32[0x00000001], UInt32[0x0000000b], UInt32[0x0000000a], EdgeType[EdgeType(0x00), EdgeType(0x03)], BioSequences.Kmer{BioSymbols.DNA,2}[AA, AA], BioSequences.Kmer{BioSymbols.DNA,2}[AA, AA], IntSet[IntSet([1])], String["single_rev"], Array{Float16,1}[Float16[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]], TGTAATCCGC), SpliceGraph{2}(UInt32[0x00000001], UInt32[0x0000000b], UInt32[0x0000000a], EdgeType[EdgeType(0x00), EdgeType(0x03)], BioSequences.Kmer{BioSymbols.DNA,2}[AA, AA], BioSequences.Kmer{BioSymbols.DNA,2}[AA, AA], IntSet[IntSet([1])], String["ex1_single"], Array{Float16,1}[Float16[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]], GCGGATTACA)], Edges{2}(Array{SGNode,1}[SGNode[SGNode(0x00000001, 0x00000002)], #undef, SGNode[SGNode(0x00000002, 0x00000004), SGNode(0x00000002, 0x00000006)], #undef, SGNode[SGNode(0x00000002, 0x00000002)], #undef, #undef, #undef, #undef, #undef, #undef, #undef, #undef, SGNode[SGNode(0x00000002, 0x00000007)], #undef, #undef], Array{SGNode,1}[#undef, #undef, #undef, #undef, #undef, SGNode[SGNode(0x00000002, 0x00000004)], #undef, SGNode[SGNode(0x00000002, 0x00000005)], #undef, SGNode[SGNode(0x00000002, 0x00000003)], #undef, #undef, #undef, #undef, SGNode[SGNode(0x00000001, 0x00000003)], SGNode[SGNode(0x00000002, 0x00000007)]]), FMIndexes.FMIndex{2,UInt8}:
     length: 105
  data size: 305.0 B, true, 2)
[2, 3, 1, 1]
FASTQRecord(11nt DNA Sequence:
CGCGGATTACA, UInt8[0x02, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21], BioSequences.FASTQ.Record:
   identifier: 1S10M%11,20%exon1
  description: <missing>
     sequence: CGCGGATTACA
      quality: UInt8[0x02, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21])
Nullable{Array{SGAlignment,1}}(SGAlignment[SGAlignment(0x00000001, 0x02, SGAlignNode[SGAlignNode(0x00000004, 0x00000001, SGAlignScore(0x0a, 0x00, 0.0))], true, true), SGAlignment(0x00000005, 0x01, SGAlignNode[SGAlignNode(0x00000002, 0x00000001, SGAlignScore(0x0a, 0x01, 0.369043))], true, true)])
FASTQRecord(10nt DNA Sequence:
CCTATGCTAG, UInt8[0x02, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21], BioSequences.FASTQ.Record:
   identifier: 1S9M%54,62%exon3def
  description: <missing>
     sequence: CCTATGCTAG
      quality: UInt8[0x02, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21])
Nullable{Array{SGAlignment,1}}(SGAlignment[SGAlignment(0x00000027, 0x02, SGAlignNode[SGAlignNode(0x00000002, 0x00000005, SGAlignScore(0x09, 0x00, 0.0))], true, true)])
FASTQRecord(16nt DNA Sequence:
CCCTCTATGCTAGTTC, UInt8[0x02, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21], BioSequences.FASTQ.Record:
   identifier: 1S15M%51,65%alt3-exon3-alt5
  description: <missing>
     sequence: CCCTCTATGCTAGTTC
      quality: UInt8[0x02, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21])
Nullable{Array{SGAlignment,1}}(SGAlignment[SGAlignment(0x00000024, 0x02, SGAlignNode[SGAlignNode(0x00000002, 0x00000004, SGAlignScore(0x03, 0x00, 0.0)), SGAlignNode(0x00000002, 0x00000005, SGAlignScore(0x09, 0x00, 0.0)), SGAlignNode(0x00000002, 0x00000006, SGAlignScore(0x03, 0x00, 0.0))], true, true)])
FASTQRecord(21nt DNA Sequence:
CGCGGATTACAGCATTAGAAG, UInt8[0x02, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21], BioSequences.FASTQ.Record:
   identifier: 11M10N10M%10,40%exon1-exon2
  description: <missing>
     sequence: CGCGGATTACAGCATTAGAAG
      quality: UInt8[0x02, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21])
Nullable{Array{SGAlignment,1}}(SGAlignment[SGAlignment(0x00000005, 0x01, SGAlignNode[SGAlignNode(0x00000002, 0x00000001, SGAlignScore(0x0a, 0x01, 0.369043)), SGAlignNode(0x00000002, 0x00000003, SGAlignScore(0x0a, 0x00, 0.0))], true, true)])
FASTQRecord(11nt DNA Sequence:
TTACAGCATTC, UInt8[0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x02], BioSequences.FASTQ.Record:
   identifier: 5M10N6M%16,36%exon1trunc-exon2trunc
  description: <missing>
     sequence: TTACAGCATTC
      quality: UInt8[0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x02])
Nullable{Array{SGAlignment,1}}(SGAlignment[SGAlignment(0x0000000b, 0x01, SGAlignNode[SGAlignNode(0x00000002, 0x00000001, SGAlignScore(0x05, 0x00, 0.0)), SGAlignNode(0x00000002, 0x00000003, SGAlignScore(0x05, 0x01, 0.369043))], true, true)])
FASTQRecord(20nt DNA Sequence:
GCGGATTACACTATGCTAGC, UInt8[0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x02], BioSequences.FASTQ.Record:
   identifier: 10M33N9M1S%11,62%exon1-exon3def
  description: <missing>
     sequence: GCGGATTACACTATGCTAGC
      quality: UInt8[0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x02])
Nullable{Array{SGAlignment,1}}(SGAlignment[SGAlignment(0x00000006, 0x01, SGAlignNode[SGAlignNode(0x00000002, 0x00000001, SGAlignScore(0x0a, 0x00, 0.0)), SGAlignNode(0x00000002, 0x00000005, SGAlignScore(0x09, 0x00, 0.0))], true, true)])
FASTQRecord(19nt DNA Sequence:
CTAGCATAGTGTAATCCGC, UInt8[0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21], BioSequences.FASTQ.Record:
   identifier: 10M33N9M%11,62%exon1-exon3def:rc
  description: <missing>
     sequence: CTAGCATAGTGTAATCCGC
      quality: UInt8[0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21])
Nullable{Array{SGAlignment,1}}(SGAlignment[SGAlignment(0x00000006, 0x01, SGAlignNode[SGAlignNode(0x00000002, 0x00000001, SGAlignScore(0x0a, 0x00, 0.0)), SGAlignNode(0x00000002, 0x00000005, SGAlignScore(0x09, 0x00, 0.0))], false, true)])
FASTQRecord(21nt DNA Sequence:
GCGGATTACATTAGACAAGAC, UInt8[0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x02], BioSequences.FASTQ.Record:
   identifier: 10M55N10M1S%11,85%exon1-exon4full
  description: <missing>
     sequence: GCGGATTACATTAGACAAGAC
      quality: UInt8[0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x02])
Nullable{Array{SGAlignment,1}}(SGAlignment[SGAlignment(0x00000006, 0x01, SGAlignNode[SGAlignNode(0x00000002, 0x00000001, SGAlignScore(0x0a, 0x00, 0.0)), SGAlignNode(0x00000002, 0x00000007, SGAlignScore(0x0a, 0x00, 0.0))], true, true)])
FASTQRecord(15nt DNA Sequence:
CGCGGATTACATTAG, UInt8[0x02, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28], BioSequences.FASTQ.Record:
   identifier: 11M55N4M%10,78%exon1-exon4_4bp
  description: <missing>
     sequence: CGCGGATTACATTAG
      quality: UInt8[0x02, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28])
Nullable{Array{SGAlignment,1}}(SGAlignment[SGAlignment(0x00000005, 0x01, SGAlignNode[SGAlignNode(0x00000002, 0x00000001, SGAlignScore(0x0a, 0x01, 0.369043)), SGAlignNode(0x00000002, 0x00000007, SGAlignScore(0x04, 0x00, 0.0))], true, true)])
FASTQRecord(12nt DNA Sequence:
TCTTGTCTAATG, UInt8[0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28], BioSequences.FASTQ.Record:
   identifier: 2M55N10M%19,85%exon1_2bp-exon4:rc
  description: <missing>
     sequence: TCTTGTCTAATG
      quality: UInt8[0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28])
Nullable{Array{SGAlignment,1}}(SGAlignment[SGAlignment(0x0000000e, 0x01, SGAlignNode[SGAlignNode(0x00000002, 0x00000001, SGAlignScore(0x02, 0x00, 0.0)), SGAlignNode(0x00000002, 0x00000007, SGAlignScore(0x0a, 0x00, 0.0))], false, true)])
in(first::Array{SGAlignNode,1}, last::Array{SGAlignNode,1}) in Main at /home/vagrant/.julia/v0.6/Whippet/test/../src/quant.jl:52
GraphLibQuant{SGAlignSingle,DefaultCounter}([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0], [20, 20, 44, 57, 52, 10, 10], [0, 2, 5, 6], [0.0, 0.0, 0.0, 0.0], SpliceGraphQuant{SGAlignSingle,DefaultCounter}[SpliceGraphQuant{SGAlignSingle,DefaultCounter}(DefaultCounter[DefaultCounter(0.0, true), DefaultCounter(0.0, true), DefaultCounter(0.0, true)], IntervalTrees.IntervalBTree{UInt16,IntervalTrees.IntervalValue{UInt16,DefaultCounter},64}, Dict{SGAlignSingle,DefaultCounter}(), Dict{Tuple{UInt16,UInt16},DefaultCounter}(), [0.0, 0.0, 0.0], 1.0), SpliceGraphQuant{SGAlignSingle,DefaultCounter}(DefaultCounter[DefaultCounter(0.0, true), DefaultCounter(0.0, true), DefaultCounter(0.0, true), DefaultCounter(0.0, true), DefaultCounter(1.0, true), DefaultCounter(0.0, true), DefaultCounter(0.0, true), DefaultCounter(0.0, true)], IntervalTrees.IntervalBTree{UInt16,IntervalTrees.IntervalValue{UInt16,DefaultCounter},64}
(1,3) => DefaultCounter(2.0, true)
(1,5) => DefaultCounter(2.0, true)
(1,7) => DefaultCounter(3.0, true)
(4,5) => DefaultCounter(1.0, true)
(5,6) => DefaultCounter(1.0, true), Dict(SGAlignSingle(SGAlignNode[SGAlignNode(0x00000002, 0x00000004, SGAlignScore(0x03, 0x00, 0.0)), SGAlignNode(0x00000002, 0x00000005, SGAlignScore(0x09, 0x00, 0.0)), SGAlignNode(0x00000002, 0x00000006, SGAlignScore(0x03, 0x00, 0.0))])=>DefaultCounter(1.0, true)), Dict{Tuple{UInt16,UInt16},DefaultCounter}(), [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 1.0), SpliceGraphQuant{SGAlignSingle,DefaultCounter}(DefaultCounter[DefaultCounter(0.0, true)], IntervalTrees.IntervalBTree{UInt16,IntervalTrees.IntervalValue{UInt16,DefaultCounter},64}, Dict{SGAlignSingle,DefaultCounter}(), Dict{Tuple{UInt16,UInt16},DefaultCounter}(), [0.0], 1.0), SpliceGraphQuant{SGAlignSingle,DefaultCounter}(DefaultCounter[DefaultCounter(1.0, true)], IntervalTrees.IntervalBTree{UInt16,IntervalTrees.IntervalValue{UInt16,DefaultCounter},64}, Dict{SGAlignSingle,DefaultCounter}(), Dict{Tuple{UInt16,UInt16},DefaultCounter}(), [0.0], 1.0)], IsoCompat[IsoCompat(Int32[3, 5], [0.5, 0.5], 1.0, 2.0, false), IsoCompat(Int32[3, 4, 5], [0.333333, 0.333333, 0.333333], 1.0, 1.0, false)])
IsoCompat[IsoCompat(Int32[3, 5], [0.5, 0.5], 1.0, 2.0, false), IsoCompat(Int32[3, 4, 5], [0.333333, 0.333333, 0.333333], 1.0, 1.0, false)]
Dict(SGAlignSingle[SGAlignSingle(SGAlignNode[SGAlignNode(0x00000002, 0x00000001, SGAlignScore(0x02, 0x00, 0.0)), SGAlignNode(0x00000002, 0x00000007, SGAlignScore(0x0a, 0x00, 0.0))]), SGAlignSingle(SGAlignNode[SGAlignNode(0x00000004, 0x00000001, SGAlignScore(0x02, 0x00, 0.0))])]=>MultiCompat{DefaultCounter}(Int32[], Float64[], 1.0, 1.0, true, true, DefaultCounter(1.0, true)))
Dict(SGAlignSingle[SGAlignSingle(SGAlignNode[SGAlignNode(0x00000002, 0x00000001, SGAlignScore(0x02, 0x00, 0.0)), SGAlignNode(0x00000002, 0x00000002, SGAlignScore(0x0a, 0x00, 0.0))]), SGAlignSingle(SGAlignNode[SGAlignNode(0x00000002, 0x00000001, SGAlignScore(0x02, 0x00, 0.0))])]=>MultiCompat{DefaultCounter}(Int32[3, 4, 5], [0.333333, 0.333333, 0.333333], 1.0, 1.0, false, false, DefaultCounter(1.0, true)))

(1,3) => DefaultCounter(2.0, true)
(1,5) => DefaultCounter(2.0, true)
(1,7) => DefaultCounter(3.0, true)
(4,5) => DefaultCounter(1.0, true)
(5,6) => DefaultCounter(1.0, true)prev_quant = SpliceGraphQuant{SGAlignSingle,DefaultCounter}(DefaultCounter[DefaultCounter(0.0, true), DefaultCounter(0.0, true), DefaultCounter(0.0, true), DefaultCounter(0.0, true), DefaultCounter(1.0, true), DefaultCounter(0.0, true), DefaultCounter(0.0, true), DefaultCounter(0.0, true)], IntervalTrees.IntervalBTree{UInt16,IntervalTrees.IntervalValue{UInt16,DefaultCounter},64}, Dict(SGAlignSingle(SGAlignNode[SGAlignNode(0x00000002, 0x00000004, SGAlignScore(0x03, 0x00, 0.0)), SGAlignNode(0x00000002, 0x00000005, SGAlignScore(0x09, 0x00, 0.0)), SGAlignNode(0x00000002, 0x00000006, SGAlignScore(0x03, 0x00, 0.0))])=>DefaultCounter(1.0, true)), Dict{Tuple{UInt16,UInt16},DefaultCounter}(), [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 1.0)
IntervalTrees.IntervalBTree{UInt16,IntervalTrees.IntervalValue{UInt16,DefaultCounter},64}
(1,3) => DefaultCounter(2.0, true)
(1,5) => DefaultCounter(2.0, true)
(1,7) => DefaultCounter(3.0, true)
(4,5) => DefaultCounter(1.0, true)
(5,6) => DefaultCounter(1.0, true)
IntervalTrees.IntervalBTree{UInt16,IntervalTrees.IntervalValue{UInt16,DefaultCounter},64}
(1,2) => DefaultCounter(2.5, true)
(1,3) => DefaultCounter(2.0, true)
(1,5) => DefaultCounter(2.0, true)
(1,7) => DefaultCounter(3.0, true)
(4,5) => DefaultCounter(1.0, true)
(5,6) => DefaultCounter(1.0, true)

(1,2) => DefaultCounter(2.5, true)
(1,3) => DefaultCounter(2.0, true)
(1,5) => DefaultCounter(2.0, true)
(1,7) => DefaultCounter(3.0, true)
(4,5) => DefaultCounter(1.0, true)
(5,6) => DefaultCounter(1.0, true)cur_quant = SpliceGraphQuant{SGAlignSingle,DefaultCounter}(DefaultCounter[DefaultCounter(7.5, true), DefaultCounter(0.0, true), DefaultCounter(0.0, true), DefaultCounter(0.0, true), DefaultCounter(1.0, true), DefaultCounter(0.0, true), DefaultCounter(0.0, true), DefaultCounter(0.0, true)], IntervalTrees.IntervalBTree{UInt16,IntervalTrees.IntervalValue{UInt16,DefaultCounter},64}, Dict(SGAlignSingle(SGAlignNode[SGAlignNode(0x00000002, 0x00000004, SGAlignScore(0x03, 0x00, 0.0)), SGAlignNode(0x00000002, 0x00000005, SGAlignScore(0x09, 0x00, 0.0)), SGAlignNode(0x00000002, 0x00000006, SGAlignScore(0x03, 0x00, 0.0))])=>DefaultCounter(1.0, true)), Dict{Tuple{UInt16,UInt16},DefaultCounter}(), [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 1.0)
Gene	Node	Coord	Strand	Type	Psi	CI_Width	CI_Lo,Hi	Total_Reads	Complexity	Entropy	Inc_Paths	Exc_Paths	Edges
kissing	1	chr0:21-30	-	NA	NA	NA	NA	NA	NA	NA	NA	NA	NA
kissing	3	chr0:11-20	-	NA	NA	NA	NA	NA	NA	NA	NA	NA	NA
one	1	chr0:6-20	+	NA	NA	NA	NA	NA	NA	NA	NA	NA	NA
one	2	chr0:21-30	+	RI	0.278	0.431	0.12,0.551	9.5	K2	1.9547	1-2:0.2778	1-3:0.2222,1-5-6:0.1667,1-7:0.3333	1-2:2.5,1-3:2.0,1-5:2.0,1-7:3.0,4-5:1.0,5-6:1.0
one	3	chr0:31-40	+	CE	0.308	0.495	0.123,0.618	7.0	K2	1.5263	1-3:0.3077	1-5-6:0.2308,1-7:0.4615	1-2:2.5,1-3:2.0,1-5:2.0,1-7:3.0,4-5:1.0,5-6:1.0
one	4	chr0:51-53	+	AA	0.133	0.4486	0.0414,0.49	6.0	K2	1.3383	4-5-6:0.1334	1-5-6:0.2666,1-7:0.6	1-2:2.5,1-3:2.0,1-5:2.0,1-7:3.0,4-5:1.0,5-6:1.0
one	5	chr0:54-62	+	CE	0.4	0.515	0.175,0.69	7.0	K2	1.3383	1-5-6:0.2666,4-5-6:0.1334	1-7:0.6	1-2:2.5,1-3:2.0,1-5:2.0,1-7:3.0,4-5:1.0,5-6:1.0
one	6	chr0:63-65	+	AD	0.4	0.615	0.139,0.754	4.0	K2	1.3383	1-5-6:0.2666,4-5-6:0.1334	1-7:0.6	1-2:2.5,1-3:2.0,1-5:2.0,1-7:3.0,4-5:1.0,5-6:1.0
one	7	chr0:76-85	+	NA	NA	NA	NA	NA	NA	NA	NA	NA	NA
one	7	chr0:76-85	+	TE	NA	NA	NA	NA	NA	NA	NA	NA	NA
one	8	chr0:86-90	+	TE	NA	NA	NA	NA	NA	NA	NA	NA	NA
Streaming fastq file from http://timbitz.github.io/data/SRR1199010.fastq.gz...
HTTP Response: ResponseStream(Request(https://timbitz.github.io/data/SRR1199010.fastq.gz, 3 headers, 0 bytes in body))
Test Summary: | Pass  Total
Splice Graphs |  246    246
INFO: Whippet tests passed
INFO: No packages to install, update or remove

>>> End of log
