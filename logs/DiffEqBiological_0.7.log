>>> 'Pkg.add("DiffEqBiological")' log
WARNING: Base.Pkg is deprecated, run `using Pkg` instead.
 in module Main
[ Info: Installing DataStructures v0.7.4
[ Info: Installing DiffEqBase v3.1.0
[ Info: Installing DiffEqBiological v1.0.0
[ Info: Installing DiffEqJump v1.0.0
[ Info: Installing FunctionWrappers v0.1.0
[ Info: Installing LinearMaps v1.0.4
[ Info: Installing MacroTools v0.4.0
[ Info: Installing RecipesBase v0.2.3
[ Info: Installing RecursiveArrayTools v0.14.5
[ Info: Installing Requires v0.4.3
[ Info: Installing SimpleTraits v0.5.1
[ Info: Installing StaticArrays v0.6.6
[ Info: Building DiffEqBase
┌ Warning: `info()` is deprecated, use `@info` instead.
│   caller = top-level scope
└ @ Core :0
INFO: ~~~ DifferentialEquations.jl *BREAKING* changes  ~~~

We have changed the front-end API on how
users may define equations of motion and 
problems, for all problem types that can
be used in the DifferentialEquations.jl.
These are *BREAKING* changes, and they
also have *NO WARNINGS*!

Please see our latest documentation here:
http://docs.juliadiffeq.org/latest/

or the blogpost that describes the changes:
http://juliadiffeq.org/2018/01/24/Parameters.html

In short, the mutated argument is the first argument,
and parameters are now directly passed
into the equations of motion function. For all
types now mutation goes first, then dependent variables, 
then parameters, then independent variables. 

`f(mutated, dependent variables, p/integrator, independent variables)`

For example, this means that the ODE syntax will be `f(u,p,t)` (for the
out-of-place) and `f(du,u,p,t)` (for the in-place). Notice
that this change also removes the need for ParameterizedFunctions
as now parameters are part of the equations of motion.

For more details please visit the above links!
[ Info: Package database updated
┌ Info: METADATA is out-of-date — you may not have the latest version of DiffEqBiological
└ Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("DiffEqBiological")' log
WARNING: Base.versioninfo is deprecated: it has been moved to the standard library package `InteractiveUtils`.
Add a `using InteractiveUtils` to your imports..
 in module Main
WARNING: Base.versioninfo is deprecated: it has been moved to the standard library package `InteractiveUtils`.
Add a `using InteractiveUtils` to your imports..
 in module Main
Julia Version 0.7.0-DEV.3664
Commit 9d5aebb07a (2018-01-30 22:46 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
      Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-135-generic #184-Ubuntu SMP Wed Oct 18 11:55:51 UTC 2017 x86_64 x86_64
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
              speed         user         nice          sys         idle          irq
       #1  3499 MHz    3489099 s       7076 s     177889 s    1168269 s         53 s
       #2  3499 MHz    1020539 s         41 s      79288 s    4428538 s          0 s
       
  Memory: 2.93927001953125 GB (1493.7109375 MB free)
  Uptime: 56476.0 sec
  Load Avg:  0.98828125  0.96240234375  0.95458984375
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant
Packages:
  Package Directory: /home/vagrant/.julia/v0.7
  Package Status:
2 required packages:
 - DiffEqBiological              1.0.0
 - JSON                          0.16.4
13 additional packages:
 - Compat                        0.49.0
 - DataStructures                0.7.4
 - DiffEqBase                    3.1.0
 - DiffEqJump                    1.0.0
 - FunctionWrappers              0.1.0
 - LinearMaps                    1.0.4
 - MacroTools                    0.4.0
 - Nullables                     0.0.3
 - RecipesBase                   0.2.3
 - RecursiveArrayTools           0.14.5
 - Requires                      0.4.3
 - SimpleTraits                  0.5.1
 - StaticArrays                  0.6.6
WARNING: Base.Pkg is deprecated, run `using Pkg` instead.
 in module Main
[ Info: Computing test dependencies for DiffEqBiological...
[ Info: Installing BinDeps v0.8.6
[ Info: Installing CommonSubexpressions v0.0.1
[ Info: Installing DiffBase v0.3.2
[ Info: Installing DiffEqDiffTools v0.3.0
[ Info: Installing DiffEqNoiseProcess v1.0.0
[ Info: Installing DiffResults v0.0.3
[ Info: Installing DiffRules v0.0.3
[ Info: Installing Distances v0.5.0
[ Info: Installing ForwardDiff v0.7.3
[ Info: Installing GenericSVD v0.1.0
[ Info: Installing Juno v0.4.0
[ Info: Installing LineSearches v3.2.5
[ Info: Installing Media v0.3.0
[ Info: Installing Missings v0.2.5
[ Info: Installing MuladdMacro v0.0.2
[ Info: Installing NLSolversBase v4.2.0
[ Info: Installing NLsolve v1.0.0
[ Info: Installing NaNMath v0.3.0
[ Info: Installing OrdinaryDiffEq v3.0.2
[ Info: Installing Parameters v0.8.1
[ Info: Installing RandomNumbers v0.1.0
[ Info: Installing Reexport v0.1.0
[ Info: Installing ResettableStacks v0.3.1
[ Info: Installing Roots v0.5.0
[ Info: Installing SHA v0.5.6
[ Info: Installing SpecialFunctions v0.3.8
[ Info: Installing StochasticDiffEq v3.0.0
[ Info: Installing URIParser v0.3.0
[ Info: Building DiffEqBase
┌ Warning: `info()` is deprecated, use `@info` instead.
│   caller = top-level scope
└ @ Core :0
INFO: ~~~ DifferentialEquations.jl *BREAKING* changes  ~~~

We have changed the front-end API on how
users may define equations of motion and 
problems, for all problem types that can
be used in the DifferentialEquations.jl.
These are *BREAKING* changes, and they
also have *NO WARNINGS*!

Please see our latest documentation here:
http://docs.juliadiffeq.org/latest/

or the blogpost that describes the changes:
http://juliadiffeq.org/2018/01/24/Parameters.html

In short, the mutated argument is the first argument,
and parameters are now directly passed
into the equations of motion function. For all
types now mutation goes first, then dependent variables, 
then parameters, then independent variables. 

`f(mutated, dependent variables, p/integrator, independent variables)`

For example, this means that the ODE syntax will be `f(u,p,t)` (for the
out-of-place) and `f(du,u,p,t)` (for the in-place). Notice
that this change also removes the need for ParameterizedFunctions
as now parameters are part of the equations of motion.

For more details please visit the above links!
[ Info: Building RandomNumbers
┌ Warning: `warn()` is deprecated, use `@warn` instead.
│   caller = #warn#868(::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::String, ::Vararg{String,N} where N) at deprecated.jl:1076
└ @ Base deprecated.jl:1076
WARNING: AES-NI will not be compiled.
[ Info: Building SpecialFunctions
┌ Warning: `isalnum(c::Char)` is deprecated, use `isalpha(c) || isnumeric(c)` instead.
│   caller = is_userinfo_char at parser.jl:4 [inlined]
└ @ Core parser.jl:4
┌ Warning: `isalnum(c::Char)` is deprecated, use `isalpha(c) || isnumeric(c)` instead.
│   caller = is_host_char at parser.jl:8 [inlined]
└ @ Core parser.jl:8
┌ Warning: `isalnum(c::Char)` is deprecated, use `isalpha(c) || isnumeric(c)` instead.
│   caller = is_host_char at parser.jl:8 [inlined]
└ @ Core parser.jl:8
WARNING: importing deprecated binding Base.Associative into BinDeps.
WARNING: Base.Associative is deprecated, use AbstractDict instead.
  likely near /home/vagrant/.julia/v0.7/SpecialFunctions/deps/binaries.jl:44
in @install at /home/vagrant/.julia/v0.7/BinDeps/src/dependencies.jl
[ Info: Testing DiffEqBiological
WARNING: Method definition __init__() in module Requires at /home/vagrant/.julia/v0.7/Requires/src/init.jl:9 overwritten in module RecursiveArrayTools at /home/vagrant/.julia/v0.7/Requires/src/init.jl:9.
WARNING: Method definition __init__() in module RecursiveArrayTools at /home/vagrant/.julia/v0.7/Requires/src/init.jl:9 overwritten in module DiffEqBase at /home/vagrant/.julia/v0.7/Requires/src/init.jl:9.
┌ Warning: Deprecated syntax `immutable` at /home/vagrant/.julia/v0.7/DiffEqJump/src/aggregators/aggregators.jl:1.
│ Use `struct` instead.
└ @ nothing aggregators.jl:1
┌ Warning: Deprecated syntax `type` at /home/vagrant/.julia/v0.7/DiffEqJump/src/aggregators/direct.jl:1.
│ Use `mutable struct` instead.
└ @ nothing direct.jl:1
┌ Warning: Deprecated syntax `((c.rate for c = constant_jumps)...)` at /home/vagrant/.julia/v0.7/DiffEqJump/src/aggregators/direct.jl:59.
│ Use `((c.rate for c = constant_jumps)...,)` instead.
└ @ nothing direct.jl:59
┌ Warning: Deprecated syntax `((c.affect! for c = constant_jumps)...)` at /home/vagrant/.julia/v0.7/DiffEqJump/src/aggregators/direct.jl:60.
│ Use `((c.affect! for c = constant_jumps)...,)` instead.
└ @ nothing direct.jl:60
┌ Warning: Deprecated syntax `immutable` at /home/vagrant/.julia/v0.7/DiffEqJump/src/jumps.jl:1.
│ Use `struct` instead.
└ @ nothing jumps.jl:1
┌ Warning: Deprecated syntax `immutable` at /home/vagrant/.julia/v0.7/DiffEqJump/src/jumps.jl:8.
│ Use `struct` instead.
└ @ nothing jumps.jl:8
┌ Warning: Deprecated syntax `immutable` at /home/vagrant/.julia/v0.7/DiffEqJump/src/jumps.jl:29.
│ Use `struct` instead.
└ @ nothing jumps.jl:29
WARNING: importing deprecated binding Base.Void into DiffEqJump.
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/DiffEqJump/src/jumps.jl:37
┌ Warning: Deprecated syntax `type` at /home/vagrant/.julia/v0.7/DiffEqJump/src/problem.jl:1.
│ Use `mutable struct` instead.
└ @ nothing problem.jl:1
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/DiffEqJump/src/problem.jl:1
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/DiffEqJump/src/problem.jl:1
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/DiffEqJump/src/problem.jl:1
┌ Warning: Deprecated syntax `parametric method syntax aggregator{P, A, C, J, J2}(jp::JumpProblem{P, A, C, J, J2})` around /home/vagrant/.julia/v0.7/DiffEqJump/src/problem.jl:117.
│ Use `aggregator(jp::JumpProblem{P, A, C, J, J2}) where {P, A, C, J, J2}` instead.
└ @ nothing problem.jl:117
┌ Warning: Deprecated syntax `parametric method syntax extend_tstops!{P, A, C, J, J2}(tstops, jp::JumpProblem{P, A, C, J, J2})` around /home/vagrant/.julia/v0.7/DiffEqJump/src/problem.jl:120.
│ Use `extend_tstops!(tstops, jp::JumpProblem{P, A, C, J, J2}) where {P, A, C, J, J2}` instead.
└ @ nothing problem.jl:120
┌ Warning: Deprecated syntax `type` at /home/vagrant/.julia/v0.7/DiffEqJump/src/callbacks.jl:1.
│ Use `mutable struct` instead.
└ @ nothing callbacks.jl:1
┌ Warning: Deprecated syntax `parametric method syntax solve{P, recompile_flag}(jump_prob::AbstractJumpProblem{P}, alg::DEAlgorithm, timeseries = [], ts = [], ks = [], recompile::Type{Val{recompile_flag}} = Val{true}; kwargs...)` around /home/vagrant/.julia/v0.7/DiffEqJump/src/solve.jl:6.
│ Use `solve(jump_prob::AbstractJumpProblem{P}, alg::DEAlgorithm, timeseries = [], ts = [], ks = [], recompile::Type{Val{recompile_flag}} = Val{true}; kwargs...) where {P, recompile_flag}` instead.
└ @ nothing solve.jl:6
┌ Warning: Deprecated syntax `parametric method syntax init{P, recompile_flag}(jump_prob::AbstractJumpProblem{P}, alg::DEAlgorithm, timeseries = [], ts = [], ks = [], recompile::Type{Val{recompile_flag}} = Val{true}; callback = nothing, save_positions = (if (<: P AbstractDiscreteProblem) (tuple false true) (tuple true true)), kwargs...)` around /home/vagrant/.julia/v0.7/DiffEqJump/src/solve.jl:18.
│ Use `init(jump_prob::AbstractJumpProblem{P}, alg::DEAlgorithm, timeseries = [], ts = [], ks = [], recompile::Type{Val{recompile_flag}} = Val{true}; callback = nothing, save_positions = (if (<: P AbstractDiscreteProblem) (tuple false true) (tuple true true)), kwargs...) where {P, recompile_flag}` instead.
└ @ nothing solve.jl:18
┌ Warning: Deprecated syntax `type` at /home/vagrant/.julia/v0.7/DiffEqJump/src/extended_jump_array.jl:1.
│ Use `mutable struct` instead.
└ @ nothing extended_jump_array.jl:1
┌ Warning: Deprecated syntax `((add_idxs1(B[i], :(B[$i])) for i = eachindex(B))...)` at /home/vagrant/.julia/v0.7/DiffEqJump/src/extended_jump_array.jl:42.
│ Use `((add_idxs1(B[i], :(B[$i])) for i = eachindex(B))...,)` instead.
└ @ nothing extended_jump_array.jl:42
┌ Warning: Deprecated syntax `((add_idxs2(B[i], :(B[$i])) for i = eachindex(B))...)` at /home/vagrant/.julia/v0.7/DiffEqJump/src/extended_jump_array.jl:43.
│ Use `((add_idxs2(B[i], :(B[$i])) for i = eachindex(B))...,)` instead.
└ @ nothing extended_jump_array.jl:43
┌ Warning: Deprecated syntax `parametric method syntax Base.similar{S}(A::ExtendedJumpArray, ::Type{S})` around /home/vagrant/.julia/v0.7/DiffEqJump/src/extended_jump_array.jl:25.
│ Use `Base.similar(A::ExtendedJumpArray, #unused#::Type{S}) where S` instead.
└ @ nothing extended_jump_array.jl:25
┌ Warning: Deprecated syntax `parametric method syntax recursivecopy!{T <: ExtendedJumpArray}(dest::T, src::T)` around /home/vagrant/.julia/v0.7/DiffEqJump/src/extended_jump_array.jl:28.
│ Use `recursivecopy!(dest::T, src::T) where T <: ExtendedJumpArray` instead.
└ @ nothing extended_jump_array.jl:28
┌ Warning: Deprecated syntax `parametric method syntax add_idxs1{T <: ExtendedJumpArray}(::Type{T}, expr)` around /home/vagrant/.julia/v0.7/DiffEqJump/src/extended_jump_array.jl:36.
│ Use `add_idxs1(#unused#::Type{T}, expr) where T <: ExtendedJumpArray` instead.
└ @ nothing extended_jump_array.jl:36
┌ Warning: Deprecated syntax `parametric method syntax add_idxs2{T <: ExtendedJumpArray}(::Type{T}, expr)` around /home/vagrant/.julia/v0.7/DiffEqJump/src/extended_jump_array.jl:39.
│ Use `add_idxs2(#unused#::Type{T}, expr) where T <: ExtendedJumpArray` instead.
└ @ nothing extended_jump_array.jl:39
WARNING: Broadcast.promote_containertype is deprecated, use BroadcastStyle instead.
  likely near /home/vagrant/.julia/v0.7/DiffEqJump/src/extended_jump_array.jl:50
WARNING: Broadcast.promote_containertype is deprecated, use BroadcastStyle instead.
  likely near /home/vagrant/.julia/v0.7/DiffEqJump/src/extended_jump_array.jl:51
WARNING: Broadcast.promote_containertype is deprecated, use BroadcastStyle instead.
  likely near /home/vagrant/.julia/v0.7/DiffEqJump/src/extended_jump_array.jl:52
WARNING: Broadcast.promote_containertype is deprecated, use BroadcastStyle instead.
  likely near /home/vagrant/.julia/v0.7/DiffEqJump/src/extended_jump_array.jl:53
WARNING: Broadcast.promote_containertype is deprecated, use BroadcastStyle instead.
  likely near /home/vagrant/.julia/v0.7/DiffEqJump/src/extended_jump_array.jl:54
WARNING: Broadcast.promote_containertype is deprecated, use BroadcastStyle instead.
  likely near /home/vagrant/.julia/v0.7/DiffEqJump/src/extended_jump_array.jl:55
WARNING: Broadcast.promote_containertype is deprecated, use BroadcastStyle instead.
  likely near /home/vagrant/.julia/v0.7/DiffEqJump/src/extended_jump_array.jl:56
WARNING: Broadcast._containertype is deprecated, use BroadcastStyle instead.
  likely near /home/vagrant/.julia/v0.7/DiffEqJump/src/extended_jump_array.jl:57
WARNING: Broadcast.broadcast_c is deprecated, `broadcast_c(f, ::Type{C}, As...)` should become `broadcast(f, C, nothing, nothing, As...))` (see the manual chapter Interfaces).
  likely near /home/vagrant/.julia/v0.7/DiffEqJump/src/extended_jump_array.jl:60
WARNING: Broadcast.broadcast_c is deprecated, `broadcast_c(f, ::Type{C}, As...)` should become `broadcast(f, C, nothing, nothing, As...))` (see the manual chapter Interfaces).
  likely near /home/vagrant/.julia/v0.7/DiffEqJump/src/extended_jump_array.jl:66
WARNING: Broadcast.broadcast_c is deprecated, `broadcast_c(f, ::Type{C}, As...)` should become `broadcast(f, C, nothing, nothing, As...))` (see the manual chapter Interfaces).
  likely near /home/vagrant/.julia/v0.7/DiffEqJump/src/extended_jump_array.jl:72
┌ Warning: Deprecated syntax `type` at /home/vagrant/.julia/v0.7/DiffEqJump/src/coupled_array.jl:1.
│ Use `mutable struct` instead.
└ @ nothing coupled_array.jl:1
┌ Warning: Deprecated syntax `((add_idxs1(B[i], :(B[$i])) for i = eachindex(B))...)` at /home/vagrant/.julia/v0.7/DiffEqJump/src/coupled_array.jl:49.
│ Use `((add_idxs1(B[i], :(B[$i])) for i = eachindex(B))...,)` instead.
└ @ nothing coupled_array.jl:49
┌ Warning: Deprecated syntax `((add_idxs2(B[i], :(B[$i])) for i = eachindex(B))...)` at /home/vagrant/.julia/v0.7/DiffEqJump/src/coupled_array.jl:50.
│ Use `((add_idxs2(B[i], :(B[$i])) for i = eachindex(B))...,)` instead.
└ @ nothing coupled_array.jl:50
┌ Warning: Deprecated syntax `parametric method syntax Base.similar{S}(A::CoupledArray, ::Type{S})` around /home/vagrant/.julia/v0.7/DiffEqJump/src/coupled_array.jl:37.
│ Use `Base.similar(A::CoupledArray, #unused#::Type{S}) where S` instead.
└ @ nothing coupled_array.jl:37
┌ Warning: Deprecated syntax `parametric method syntax recursivecopy!{T <: CoupledArray}(dest::T, src::T)` around /home/vagrant/.julia/v0.7/DiffEqJump/src/coupled_array.jl:41.
│ Use `recursivecopy!(dest::T, src::T) where T <: CoupledArray` instead.
└ @ nothing coupled_array.jl:41
┌ Warning: Deprecated syntax `parametric method syntax add_idxs1{T <: CoupledArray}(::Type{T}, expr)` around /home/vagrant/.julia/v0.7/DiffEqJump/src/coupled_array.jl:46.
│ Use `add_idxs1(#unused#::Type{T}, expr) where T <: CoupledArray` instead.
└ @ nothing coupled_array.jl:46
┌ Warning: Deprecated syntax `parametric method syntax add_idxs2{T <: CoupledArray}(::Type{T}, expr)` around /home/vagrant/.julia/v0.7/DiffEqJump/src/coupled_array.jl:47.
│ Use `add_idxs2(#unused#::Type{T}, expr) where T <: CoupledArray` instead.
└ @ nothing coupled_array.jl:47
┌ Warning: `current_module()` is deprecated, use `@__MODULE__` instead.
│   caller = @require(::LineNumberNode, ::Module, ::Any, ::Any) at require.jl:51
└ @ Requires require.jl:51
┌ Warning: `isdefined(:symbol)` is deprecated, use `@isdefined symbol` instead
│   caller = ip:0x0
└ @ Core :-1
WARNING: Method definition __init__() in module DiffEqBase at /home/vagrant/.julia/v0.7/Requires/src/init.jl:9 overwritten in module DiffEqJump at /home/vagrant/.julia/v0.7/Requires/src/init.jl:9.
WARNING: Method definition __init__() in module Requires at /home/vagrant/.julia/v0.7/Requires/src/init.jl:9 overwritten in module RecursiveArrayTools at /home/vagrant/.julia/v0.7/Requires/src/init.jl:9.
WARNING: Method definition __init__() in module RecursiveArrayTools at /home/vagrant/.julia/v0.7/Requires/src/init.jl:9 overwritten in module DiffEqBase at /home/vagrant/.julia/v0.7/Requires/src/init.jl:9.
WARNING: Method definition __init__() in module DiffEqBase at /home/vagrant/.julia/v0.7/Requires/src/init.jl:9 overwritten in module DiffEqJump at /home/vagrant/.julia/v0.7/Requires/src/init.jl:9.
WARNING: Method definition __init__() in module Requires at /home/vagrant/.julia/v0.7/Requires/src/init.jl:9 overwritten in module RecursiveArrayTools at /home/vagrant/.julia/v0.7/Requires/src/init.jl:9.
WARNING: Method definition __init__() in module RecursiveArrayTools at /home/vagrant/.julia/v0.7/Requires/src/init.jl:9 overwritten in module DiffEqBase at /home/vagrant/.julia/v0.7/Requires/src/init.jl:9.
WARNING: Method definition __init__() in module DiffEqBase at /home/vagrant/.julia/v0.7/Requires/src/init.jl:9 overwritten in module DiffEqJump at /home/vagrant/.julia/v0.7/Requires/src/init.jl:9.
WARNING: Base.Test is deprecated, run `using Test` instead.
  likely near /home/vagrant/.julia/v0.7/DiffEqBiological/test/runtests.jl:2
┌ Warning: `tic()` is deprecated, use `@time`, `@elapsed`, or calls to `time_ns()` instead.
│   caller = top-level scope
└ @ Core :0
WARNING: Method definition __init__() in module Requires at /home/vagrant/.julia/v0.7/Requires/src/init.jl:9 overwritten in module RecursiveArrayTools at /home/vagrant/.julia/v0.7/Requires/src/init.jl:9.
WARNING: Method definition __init__() in module RecursiveArrayTools at /home/vagrant/.julia/v0.7/Requires/src/init.jl:9 overwritten in module DiffEqBase at /home/vagrant/.julia/v0.7/Requires/src/init.jl:9.
┌ Warning: Deprecated syntax `immutable` at /home/vagrant/.julia/v0.7/OrdinaryDiffEq/src/misc_utils.jl:3.
│ Use `struct` instead.
└ @ nothing misc_utils.jl:3
┌ Warning: Deprecated syntax `parametric method syntax DiffCache{chunk_size}(T, size, ::Type{Val{chunk_size}})` around /home/vagrant/.julia/v0.7/OrdinaryDiffEq/src/misc_utils.jl:9.
│ Use `DiffCache(T, size, #unused#::Type{Val{chunk_size}}) where chunk_size` instead.
└ @ nothing misc_utils.jl:9
┌ Warning: Deprecated syntax `parametric method syntax DiffCache{CS}(u::AbstractArray, T::Type{Val{CS}})` around /home/vagrant/.julia/v0.7/OrdinaryDiffEq/src/misc_utils.jl:14.
│ Use `DiffCache(u::AbstractArray, T::Type{Val{CS}}) where CS` instead.
└ @ nothing misc_utils.jl:14
┌ Warning: Deprecated syntax `parametric method syntax get_du{T <: Dual}(dc::DiffCache, ::Type{T})` around /home/vagrant/.julia/v0.7/OrdinaryDiffEq/src/misc_utils.jl:16.
│ Use `get_du(dc::DiffCache, #unused#::Type{T}) where T <: Dual` instead.
└ @ nothing misc_utils.jl:16
┌ Warning: Deprecated syntax `parametric method syntax (p::NLSOLVEJL_SETUP{CS, AD}){CS, AD}(::Type{Val{:init}}, f, u0_prototype)` around /home/vagrant/.julia/v0.7/OrdinaryDiffEq/src/misc_utils.jl:34.
│ Use `(p::NLSOLVEJL_SETUP{CS, AD})(#unused#::Type{Val{:init}}, f, u0_prototype) where {CS, AD}` instead.
└ @ nothing misc_utils.jl:34
┌ Warning: Deprecated syntax `parametric method syntax get_chunksize{CS, AD}(x::NLSOLVEJL_SETUP{CS, AD})` around /home/vagrant/.julia/v0.7/OrdinaryDiffEq/src/misc_utils.jl:40.
│ Use `get_chunksize(x::NLSOLVEJL_SETUP{CS, AD}) where {CS, AD}` instead.
└ @ nothing misc_utils.jl:40
ERROR: LoadError: LoadError: syntax: invalid escape sequence
Stacktrace:
 [1] include at ./boot.jl:292 [inlined]
 [2] include_relative(::Module, ::String) at ./loading.jl:1012
 [3] include at ./sysimg.jl:26 [inlined]
 [4] include(::String) at /home/vagrant/.julia/v0.7/OrdinaryDiffEq/src/OrdinaryDiffEq.jl:3
 [5] top-level scope
 [6] include at ./boot.jl:292 [inlined]
 [7] include_relative(::Module, ::String) at ./loading.jl:1012
 [8] include(::Module, ::String) at ./sysimg.jl:26
 [9] top-level scope
 [10] eval at ./boot.jl:295 [inlined]
 [11] top-level scope at ./<missing>:3
in expression starting at /home/vagrant/.julia/v0.7/OrdinaryDiffEq/src/misc_utils.jl:50
in expression starting at /home/vagrant/.julia/v0.7/OrdinaryDiffEq/src/OrdinaryDiffEq.jl:45
Gillespie Tests: Error During Test at /home/vagrant/.julia/v0.7/DiffEqBiological/test/runtests.jl:5
  Got an exception of type LoadError outside of a @test
  LoadError: Failed to precompile OrdinaryDiffEq to /home/vagrant/.julia/lib/v0.7/OrdinaryDiffEq.ji.
  Stacktrace:
   [1] error at ./error.jl:33 [inlined]
   [2] compilecache(::Base.PkgId) at ./loading.jl:1157
   [3] _require(::Base.PkgId) at ./loading.jl:949
   [4] require(::Module, ::Symbol) at ./loading.jl:820
   [5] include at ./boot.jl:292 [inlined]
   [6] include_relative(::Module, ::String) at ./loading.jl:1012
   [7] include(::Module, ::String) at ./sysimg.jl:26
   [8] include(::String) at ./sysimg.jl:65
   [9] macro expansion at /home/vagrant/.julia/v0.7/DiffEqBiological/test/runtests.jl:5 [inlined]
   [10] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1008 [inlined]
   [11] macro expansion at /home/vagrant/.julia/v0.7/DiffEqBiological/test/runtests.jl:5 [inlined]
   [12] top-level scope at ./<missing>:169
   [13] include at ./boot.jl:292 [inlined]
   [14] include_relative(::Module, ::String) at ./loading.jl:1012
   [15] include(::Module, ::String) at ./sysimg.jl:26
   [16] exec_options(::Base.JLOptions) at ./client.jl:332
   [17] _start() at ./client.jl:447
  in expression starting at /home/vagrant/.julia/v0.7/DiffEqBiological/test/gillespie.jl:1
Test Summary:   | Error  Total
Gillespie Tests |     1      1
ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 1 errored, 0 broken.
in expression starting at /home/vagrant/.julia/v0.7/DiffEqBiological/test/runtests.jl:5
┌ Error: ------------------------------------------------------------
│ # Testing failed for DiffEqBiological
│   exception =
│    failed process: Process(`/home/vagrant/julia/bin/julia -Cnative -J/home/vagrant/julia/lib/julia/sys.so --compile=yes --depwarn=yes --code-coverage=none --color=no --compiled-modules=yes --check-bounds=yes --warn-overwrite=yes --startup-file=yes /home/vagrant/.julia/v0.7/DiffEqBiological/test/runtests.jl`, ProcessExited(1)) [1]
│    Stacktrace:
│     [1] error(::String, ::Base.Process, ::String, ::Int64, ::String) at ./error.jl:42
│     [2] pipeline_error(::Base.Process) at ./process.jl:698
│     [3] run(::Cmd) at ./process.jl:660
│     [4] (::getfield(Pkg.Entry, Symbol("##89#92")){Bool,String,Array{AbstractString,1}})() at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Pkg/src/entry.jl:731
│     [5] cd(::getfield(Pkg.Entry, Symbol("##89#92")){Bool,String,Array{AbstractString,1}}, ::String) at ./file.jl:70
│     [6] #test!#88(::Bool, ::Function, ::String, ::Array{AbstractString,1}, ::Array{AbstractString,1}, ::Array{AbstractString,1}) at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Pkg/src/entry.jl:719
│     [7] (::getfield(Pkg.Entry, Symbol("#kw##test!")))(::NamedTuple{(:coverage,),Tuple{Bool}}, ::typeof(Pkg.Entry.test!), ::String, ::Array{AbstractString,1}, ::Array{AbstractString,1}, ::Array{AbstractString,1}) at ./<missing>:0
│     [8] #test#96(::Bool, ::Function, ::Array{AbstractString,1}) at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Pkg/src/entry.jl:758
│     [9] (::getfield(Pkg.Entry, Symbol("#kw##test")))(::NamedTuple{(:coverage,),Tuple{Bool}}, ::typeof(Pkg.Entry.test), ::Array{AbstractString,1}) at ./<missing>:0
│     [10] (::getfield(Pkg.Dir, Symbol("##4#7")){Base.Iterators.IndexValue{Symbol,Bool,Tuple{Symbol},NamedTuple{(:coverage,),Tuple{Bool}}},typeof(Pkg.Entry.test),Tuple{Array{AbstractString,1}}})() at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Pkg/src/dir.jl:36
│     [11] cd(::getfield(Pkg.Dir, Symbol("##4#7")){Base.Iterators.IndexValue{Symbol,Bool,Tuple{Symbol},NamedTuple{(:coverage,),Tuple{Bool}}},typeof(Pkg.Entry.test),Tuple{Array{AbstractString,1}}}, ::String) at ./file.jl:70
│     [12] #cd#1(::Base.Iterators.IndexValue{Symbol,Bool,Tuple{Symbol},NamedTuple{(:coverage,),Tuple{Bool}}}, ::Function, ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N} where N) at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Pkg/src/dir.jl:36
│     [13] (::getfield(Pkg.Dir, Symbol("#kw##cd")))(::NamedTuple{(:coverage,),Tuple{Bool}}, ::typeof(Pkg.Dir.cd), ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N} where N) at ./<missing>:0
│     [14] #test#3(::Bool, ::Function, ::String, ::Vararg{String,N} where N) at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Pkg/src/Pkg.jl:275
│     [15] test(::String, ::Vararg{String,N} where N) at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Pkg/src/Pkg.jl:275
│     [16] top-level scope
│     [17] eval at ./boot.jl:295 [inlined]
│     [18] eval(::Module, ::Expr) at ./sysimg.jl:71
│     [19] exec_options(::Base.JLOptions) at ./client.jl:309
│     [20] _start() at ./client.jl:447
└ @ Pkg.Entry entry.jl:734
[ Info: Removing BinDeps v0.8.6
[ Info: Removing CommonSubexpressions v0.0.1
[ Info: Removing DiffBase v0.3.2
[ Info: Removing DiffEqDiffTools v0.3.0
[ Info: Removing DiffEqNoiseProcess v1.0.0
[ Info: Removing DiffResults v0.0.3
[ Info: Removing DiffRules v0.0.3
[ Info: Removing Distances v0.5.0
[ Info: Removing ForwardDiff v0.7.3
[ Info: Removing GenericSVD v0.1.0
[ Info: Removing Juno v0.4.0
[ Info: Removing LineSearches v3.2.5
[ Info: Removing Media v0.3.0
[ Info: Removing Missings v0.2.5
[ Info: Removing MuladdMacro v0.0.2
[ Info: Removing NLSolversBase v4.2.0
[ Info: Removing NLsolve v1.0.0
[ Info: Removing NaNMath v0.3.0
[ Info: Removing OrdinaryDiffEq v3.0.2
[ Info: Removing Parameters v0.8.1
[ Info: Removing RandomNumbers v0.1.0
[ Info: Removing Reexport v0.1.0
[ Info: Removing ResettableStacks v0.3.1
[ Info: Removing Roots v0.5.0
[ Info: Removing SHA v0.5.6
[ Info: Removing SpecialFunctions v0.3.8
[ Info: Removing StochasticDiffEq v3.0.0
[ Info: Removing URIParser v0.3.0
ERROR: DiffEqBiological had test errors

>>> End of log
