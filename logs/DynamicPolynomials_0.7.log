>>> 'Pkg.add("DynamicPolynomials")' log
[ Info: Cloning cache of DynamicPolynomials from https://github.com/JuliaAlgebra/DynamicPolynomials.jl.git @ Base.Pkg.Cache cache.jl:43
[ Info: Cloning cache of MultivariatePolynomials from https://github.com/JuliaAlgebra/MultivariatePolynomials.jl.git @ Base.Pkg.Cache cache.jl:43
[ Info: Installing DynamicPolynomials v0.0.2 @ Base.Pkg.Entry entry.jl:543
[ Info: Installing MultivariatePolynomials v0.1.1 @ Base.Pkg.Entry entry.jl:543
[ Info: Package database updated @ Base.Pkg.Entry entry.jl:32
┌ Info: METADATA is out-of-date — you may not have the latest version of DynamicPolynomials
│ Use `Pkg.update()` to get the latest versions of your packages
└ @ Base.Pkg.Entry entry.jl:74

>>> 'Pkg.test("DynamicPolynomials")' log
Julia Version 0.7.0-DEV.3299
Commit fb527308bb (2018-01-05 19:41 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
      Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-135-generic #184-Ubuntu SMP Wed Oct 18 11:55:51 UTC 2017 x86_64 x86_64
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
              speed         user         nice          sys         idle          irq
       #1  3503 MHz    3767958 s        104 s     186149 s     953037 s         30 s
       #2  3503 MHz     741625 s         82 s      75121 s    4892696 s          0 s
       
  Memory: 2.93927001953125 GB (996.98828125 MB free)
  Uptime: 58147.0 sec
  Load Avg:  1.14990234375  1.046875  0.99755859375
  WORD_SIZE: 64
  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant
Packages:
  Package Directory: /home/vagrant/.julia/v0.7
  Package Status:
2 required packages:
 - DynamicPolynomials            0.0.2
 - JSON                          0.16.3
3 additional packages:
 - Compat                        0.42.0
 - MultivariatePolynomials       0.1.1
 - Nullables                     0.0.2
[ Info: Testing DynamicPolynomials @ Base.Pkg.Entry entry.jl:723
WARNING: importing deprecated binding Base.Void into MultivariatePolynomials.
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MultivariatePolynomials/src/comparison.jl:10
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MultivariatePolynomials/src/comparison.jl:11
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MultivariatePolynomials/src/comparison.jl:14
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MultivariatePolynomials/src/comparison.jl:15
WARNING: Base.Test is deprecated, run `using Test` instead.
  likely near /home/vagrant/.julia/v0.7/DynamicPolynomials/test/runtests.jl:3
┌ Warning: Constructors no longer fall back to `convert`. A constructor `Monomial{true}(::PolyVar{true})` should be defined instead.
│   caller = ==(::PolyVar{true}, ::Monomial{true}) at comp.jl:69
└ @ DynamicPolynomials comp.jl:69
┌ Warning: Constructors no longer fall back to `convert`. A constructor `Monomial{true}(::PolyVar{true})` should be defined instead.
│   caller = convert(::Type{Term{true,Int64}}, ::PolyVar{true}) at term.jl:24
└ @ DynamicPolynomials term.jl:24
┌ Warning: Constructors no longer fall back to `convert`. A constructor `Term{true,Int64}(::Monomial{true})` should be defined instead.
│   caller = convert(::Type{Term{true,Int64}}, ::PolyVar{true}) at term.jl:24
└ @ DynamicPolynomials term.jl:24
WARNING: importing deprecated binding Base.IntSet into DynamicPolynomials.
WARNING: Base.IntSet is deprecated, use BitSet instead.
  likely near /home/vagrant/.julia/v0.7/DynamicPolynomials/test/mono.jl:1
WARNING: Base.IntSet is deprecated, use BitSet instead.
  likely near /home/vagrant/.julia/v0.7/DynamicPolynomials/test/mono.jl:1
WARNING: Base.IntSet is deprecated, use BitSet instead.
  likely near /home/vagrant/.julia/v0.7/DynamicPolynomials/test/mono.jl:1
WARNING: Base.IntSet is deprecated, use BitSet instead.
  likely near /home/vagrant/.julia/v0.7/DynamicPolynomials/test/mono.jl:1
WARNING: Base.IntSet is deprecated, use BitSet instead.
  likely near /home/vagrant/.julia/v0.7/DynamicPolynomials/test/mono.jl:1
WARNING: Base.IntSet is deprecated, use BitSet instead.
  likely near /home/vagrant/.julia/v0.7/DynamicPolynomials/test/mono.jl:1
WARNING: importing deprecated binding Base.Nullable into DynamicPolynomials.
WARNING: importing deprecated binding Base.isnull into DynamicPolynomials.
MonomialVector: Error During Test at /home/vagrant/.julia/v0.7/DynamicPolynomials/test/mono.jl:50
  Test threw an exception of type TypeError
  Expression: mergemonovec([X, X]) == X
  TypeError: in Type{...} expression, expected UnionAll, got typeof(Base.Nullable)
  Stacktrace:
   [1] mergemonovec(::Array{MonomialVector{true},1}) at /home/vagrant/.julia/v0.7/DynamicPolynomials/src/monovec.jl:221
   [2] macro expansion at /home/vagrant/.julia/v0.7/DynamicPolynomials/test/mono.jl:50 [inlined]
   [3] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:980 [inlined]
   [4] macro expansion at /home/vagrant/.julia/v0.7/DynamicPolynomials/test/mono.jl:36 [inlined]
   [5] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:980 [inlined]
   [6] top-level scope at /home/vagrant/.julia/v0.7/DynamicPolynomials/test/mono.jl:2
┌ Warning: `a::AbstractArray + b::Number` is deprecated, use `broadcast(+, a, b)` instead.
│   caller = insertvar(::Array{PolyVar{false},1}, ::PolyVar{false}, ::Int64) at mult.jl:14
└ @ DynamicPolynomials mult.jl:14
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = insertvar(::Array{PolyVar{false},1}, ::PolyVar{false}, ::Int64) at mult.jl:15
└ @ DynamicPolynomials mult.jl:15
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = (::getfield(DynamicPolynomials, Symbol("##43#44")){Int64,Int64,UnitRange{Int64},UnitRange{Int64},UnitRange{Int64}})(::Array{Int64,1}) at mult.jl:20
└ @ DynamicPolynomials mult.jl:20
Test Summary:              | Pass  Error  Total
PolyVar and Monomial tests |   47      1     48
  polyvar macro index set  |    6             6
  PolyVar                  |    6             6
  Monomial                 |    9             9
  MonomialVector           |   12      1     13
  Non-commutative          |    2             2
  NC PolyVar * Monomial    |    6             6
  NC Monomial * PolyVar    |    6             6
ERROR: LoadError: LoadError: Some tests did not pass: 47 passed, 0 failed, 1 errored, 0 broken.
in expression starting at /home/vagrant/.julia/v0.7/DynamicPolynomials/test/mono.jl:1
in expression starting at /home/vagrant/.julia/v0.7/DynamicPolynomials/test/runtests.jl:5
┌ Error: ------------------------------------------------------------
│ # Testing failed for DynamicPolynomials
│   exception = ErrorException("failed process: Process(`/home/vagrant/julia/bin/julia -Cnative -J/home/vagrant/julia/lib/julia/sys.so --compile=yes --depwarn=yes --code-coverage=none --color=no --compiled-modules=yes --check-bounds=yes --warn-overwrite=yes --startup-file=yes /home/vagrant/.julia/v0.7/DynamicPolynomials/test/runtests.jl`, ProcessExited(1)) [1]")
└ @ Base.Pkg.Entry entry.jl:739
ERROR: DynamicPolynomials had test errors

>>> End of log
