>>> 'Pkg.add("DynamicalBilliards")' log
INFO: Cloning cache of DynamicalBilliards from https://github.com/Datseris/DynamicalBilliards.jl.git
INFO: Installing DynamicalBilliards v1.2.1
INFO: Installing StaticArrays v0.3.1
INFO: Package database updated

>>> 'Pkg.test("DynamicalBilliards")' log
Julia Version 0.5.2
Commit f4c6c9d (2017-05-06 16:34 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-119-generic #166-Ubuntu SMP Wed May 3 12:18:55 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (742.40625 MB free)
Uptime: 32581.0 sec
Load Avg:  0.9228515625  0.9599609375  1.037109375
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz    2024446 s       4454 s     151216 s     674109 s         40 s
#2  3500 MHz     818136 s       3075 s      82812 s    2246724 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.7.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.5
2 required packages:
 - DynamicalBilliards            1.2.1
 - JSON                          0.12.0
2 additional packages:
 - Compat                        0.26.0
 - StaticArrays                  0.3.1
INFO: Testing DynamicalBilliards
DynamicalBilliards tests started at: 13:24:241

Currently testing: check_straight_sinai
--evolve!() works for Particle and has finite collision time
--billiard_sinai works, and randominside() works
--collisiontime for FiniteWall and Disk with `Particle` works
--resolvecollision for Particle with FiniteWall and Disk works
--back-propagation happens and particle is never outside of billiard
...for (r,x,y) = (0.15,1.0,1.0)
...for (r,x,y) = (0.3,1.5,1.0)
...for (r,x,y) = (0.4,1.4,2.2)

Currently testing: check_magnetic_sinai
--evolve!() works for MagneticParticle and has finite collision time
--billiard_sinai works, and randominside(bt, ω) works for given ω
--collisiontime for FiniteWall and Disk with MagneticParticle works
--resolvecollision for MagneticParticle with FiniteWall and Disk works
--back-propagation happens and particle is never outside of billiard
...for ω = -0.5 and for (r,x,y) = (0.4,1.0,1.0)
...for ω = -0.5 and for (r,x,y) = (0.3,1.5,1.0)
...for ω = 1.2 and for (r,x,y) = (0.4,1.0,1.0)
...for ω = 1.2 and for (r,x,y) = (0.3,1.5,1.0)

Currently testing: check_straight_sinai_periodic
--randominside() works for periodic billiards
--collisiontime for PeriodicWall works
--resolvecollision for Particle with PeriodicWall works
--evolve!() works and `pos` is always out of Disk
--minimum collision time is always >= 1-2r
...for (r,x,y) = (0.3,1.5,1.0)
...for (r,x,y) = (0.5,1.4,2.2)
...for (r,x,y) = (0.2,0.8,2.2)

Currently testing: check_magnetic_sinai_periodic
--randominside() works MagneticParticle in periodic billiards
--collisiontime for PeriodicWall with MagneticParticle works
--resolvecollision for MagneticParticle with PeriodicWall works
--evolve!() with MagneticParticle works and `pos` is always out of Disk
--minimum collision time is always >= 1-2r
...for (ω,r,x,y) = (0.1,0.4,1.5,1.0)
...for (ω,r,x,y) = (2.18,0.4,1.5,1.0)
...for (ω,r,x,y) = (0.1,0.25,1.0,1.0)
...for (ω,r,x,y) = (2.18,0.25,1.0,1.0)

Currently testing: check_magnetic_pinned
--there are not any pinned particles for very small ω
--(equivalent to Inf collision time in periodic Sinai)
...for (ω,r,x,y) = (0.02,0.4,1.0,1.0)
...for (ω,r,x,y) = (0.04,0.4,1.0,1.0)

Currently testing: check_previous_obstacle
--The previous collision obstacle is never the same as the
  current in a closed sinai billiard.
--The `distance` after propagation is not big.
...for ω=0.0
...for ω=0.002
...for ω=-0.8

Currently testing: check_raysplitting_omega
--ray-splitting with Antidot works
--for straight propagation
--for magnetic propagation
--when transmission NOT depending on ω
--Also checking `isphysical()`
...for ω = 0.0
...for ω = 1.0
...for ω = -0.5
...for ω = 0.02

Currently testing: check_raysplitting_periodic
--ray-splitting with Antidot works in periodic billiard
--for straight propagation
--for magnetic propagation
--when transmission does NOT depend on ω
--Also testing `isphysical()`
...for ω = 0.0
...for ω = 0.02
...for ω = -0.04

Currently testing if...
--ray-splitting with SplitterWall and Antidot works
--for both straight and magnetic propagation
...for ω = 0.0
...for ω = -0.04
...for ω = 0.5

Currently testing if...
--billiard_sinai works with setting = `random` 
--collisiontime for RandomWall and RandomDisk works
--resolvecollision for AbstractParticle with
  random obstacle works and reflects randomly
--evolve!() works and never there is infinite time
...for (r,x,y) = (0.25,1.0,1.0)
......and ω = 0.0
......and ω = 0.02
......and ω = 0.78596
...for (r,x,y) = (0.35,1.4,2.2)
......and ω = 0.0
......and ω = 0.02
......and ω = 0.78596

Currently testing: check_klein_magnetic
--ray-splitting with Antidot works in a periodic billiard
--For complicated, magnetic field dependent Tunneling
--Emulates klein tunneling in magnetic fields
...for ω = 0.0
...for ω = 0.16
...for ω = -0.5
...for ω = -1.0
DynamicalBilliards tests ended (successfully) at: 13:41:652
Total time required was:
1045.337 seconds, or 17.422 minutes
INFO: DynamicalBilliards tests passed

>>> End of log
