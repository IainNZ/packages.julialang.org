>>> 'Pkg.add("RobustShortestPath")' log
INFO: Cloning cache of RobustShortestPath from https://github.com/chkwon/RobustShortestPath.jl.git
INFO: Installing DataStructures v0.5.3
INFO: Installing GZip v0.3.0
INFO: Installing LightGraphs v0.9.0
INFO: Installing MacroTools v0.3.6
INFO: Installing RobustShortestPath v0.2.3
INFO: Installing SimpleTraits v0.5.0
INFO: Installing SpecialFunctions v0.1.1
INFO: Installing StatsBase v0.15.0
INFO: Package database updated

>>> 'Pkg.test("RobustShortestPath")' log
Julia Version 0.6.0-rc2.0
Commit 68e911b (2017-05-18 02:31 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-119-generic #166-Ubuntu SMP Wed May 3 12:18:55 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (644.15234375 MB free)
Uptime: 56288.0 sec
Load Avg:  0.98583984375  0.9404296875  0.87890625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz    3681131 s       6176 s     159452 s     874208 s         52 s
#2  3500 MHz     728328 s         92 s      73684 s    4708925 s          1 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.6
2 required packages:
 - JSON                          0.12.0
 - RobustShortestPath            0.2.3
8 additional packages:
 - Compat                        0.25.2
 - DataStructures                0.5.3
 - GZip                          0.3.0
 - LightGraphs                   0.9.0
 - MacroTools                    0.3.6
 - SimpleTraits                  0.5.0
 - SpecialFunctions              0.1.1
 - StatsBase                     0.15.0
INFO: Testing RobustShortestPath
Origin=1, Destination=15
----------------------------------------------------
Single Coefficient Case
WARNING: Array{T}(::Type{T}, m::Int) is deprecated, use Array{T}(m) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] Array(::Type{Int64}, ::Int64) at ./deprecated.jl:51
 [3] get_robust_path(::Array{Int64,1}, ::Array{Int64,1}, ::Array{Int64,1}, ::Array{Int64,1}, ::Int64, ::Int64, ::Int64) at /home/vagrant/.julia/v0.6/RobustShortestPath/src/one.jl:18
 [4] macro expansion at /home/vagrant/.julia/v0.6/RobustShortestPath/test/runtests.jl:67 [inlined]
 [5] anonymous at ./<missing>:?
 [6] include_from_node1(::String) at ./loading.jl:569
 [7] include(::String) at ./sysimg.jl:14
 [8] process_options(::Base.JLOptions) at ./client.jl:305
 [9] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/RobustShortestPath/test/runtests.jl, in expression starting on line 66
WARNING: max{T1 <: Real}(x::AbstractArray{T1}, y::Real) is deprecated, use max.(x, y) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] max(::Array{Int64,1}, ::Int64) at ./deprecated.jl:51
 [3] get_robust_path(::Array{Int64,1}, ::Array{Int64,1}, ::Array{Int64,1}, ::Array{Int64,1}, ::Int64, ::Int64, ::Int64) at /home/vagrant/.julia/v0.6/RobustShortestPath/src/one.jl:27
 [4] macro expansion at /home/vagrant/.julia/v0.6/RobustShortestPath/test/runtests.jl:67 [inlined]
 [5] anonymous at ./<missing>:?
 [6] include_from_node1(::String) at ./loading.jl:569
 [7] include(::String) at ./sysimg.jl:14
 [8] process_options(::Base.JLOptions) at ./client.jl:305
 [9] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/RobustShortestPath/test/runtests.jl, in expression starting on line 66
Gamma=0: Robust Path is [1 2 4 3 8 12 14 15] and the worst-case cost is 6060.0.
Gamma=1: Robust Path is [1 4 3 8 12 14 15] and the worst-case cost is 15024.0.
Gamma=2: Robust Path is [1 4 3 8 12 14 15] and the worst-case cost is 20864.0.
Gamma=3: Robust Path is [1 4 3 8 12 14 15] and the worst-case cost is 26604.0.
Gamma=4: Robust Path is [1 4 3 7 12 15] and the worst-case cost is 31293.0.
Gamma=5: Robust Path is [1 4 3 8 12 15] and the worst-case cost is 32291.0.
----------------------------------------------------
Two Coefficient Case
(Gamma_u,Gamma_v)=(1,1): Robust Path is [1 4 3 8 12 14 15] and the worst-case cost is 15024.0.
(Gamma_u,Gamma_v)=(1,2): Robust Path is [1 4 3 7 12 14 15] and the worst-case cost is 19474.0.
(Gamma_u,Gamma_v)=(1,3): Robust Path is [1 4 3 7 12 14 15] and the worst-case cost is 20650.0.
(Gamma_u,Gamma_v)=(1,4): Robust Path is [1 4 3 7 12 14 15] and the worst-case cost is 21590.0.
(Gamma_u,Gamma_v)=(1,5): Robust Path is [1 4 3 7 12 14 15] and the worst-case cost is 22020.0.
(Gamma_u,Gamma_v)=(2,1): Robust Path is [1 4 3 8 12 14 15] and the worst-case cost is 17070.0.
(Gamma_u,Gamma_v)=(2,2): Robust Path is [1 4 3 8 12 14 15] and the worst-case cost is 21822.0.
(Gamma_u,Gamma_v)=(2,3): Robust Path is [1 4 3 7 12 14 15] and the worst-case cost is 25314.0.
(Gamma_u,Gamma_v)=(2,4): Robust Path is [1 4 3 7 12 14 15] and the worst-case cost is 26490.0.
(Gamma_u,Gamma_v)=(2,5): Robust Path is [1 4 3 7 12 15] and the worst-case cost is 27067.0.
(Gamma_u,Gamma_v)=(3,1): Robust Path is [1 4 3 8 12 14 15] and the worst-case cost is 18870.0.
(Gamma_u,Gamma_v)=(3,2): Robust Path is [1 4 3 8 12 14 15] and the worst-case cost is 23622.0.
(Gamma_u,Gamma_v)=(3,3): Robust Path is [1 4 3 8 12 14 15] and the worst-case cost is 27662.0.
(Gamma_u,Gamma_v)=(3,4): Robust Path is [1 4 3 7 12 15] and the worst-case cost is 29013.0.
(Gamma_u,Gamma_v)=(3,5): Robust Path is [1 4 3 7 12 15] and the worst-case cost is 29953.0.
(Gamma_u,Gamma_v)=(4,1): Robust Path is [1 4 3 8 12 14 15] and the worst-case cost is 19554.0.
(Gamma_u,Gamma_v)=(4,2): Robust Path is [1 4 3 8 12 14 15] and the worst-case cost is 24610.0.
(Gamma_u,Gamma_v)=(4,3): Robust Path is [1 4 3 8 12 14 15] and the worst-case cost is 28650.0.
(Gamma_u,Gamma_v)=(4,4): Robust Path is [1 4 3 7 12 15] and the worst-case cost is 31293.0.
(Gamma_u,Gamma_v)=(4,5): Robust Path is [1 4 3 8 12 15] and the worst-case cost is 31619.0.
(Gamma_u,Gamma_v)=(5,1): Robust Path is [1 4 3 8 12 14 15] and the worst-case cost is 20162.0.
(Gamma_u,Gamma_v)=(5,2): Robust Path is [1 4 3 8 12 14 15] and the worst-case cost is 25294.0.
(Gamma_u,Gamma_v)=(5,3): Robust Path is [1 4 3 8 12 15] and the worst-case cost is 29315.0.
(Gamma_u,Gamma_v)=(5,4): Robust Path is [1 4 3 7 12 15] and the worst-case cost is 31965.0.
(Gamma_u,Gamma_v)=(5,5): Robust Path is [1 4 3 8 12 15] and the worst-case cost is 32291.0.
32291.0
INFO: RobustShortestPath tests passed

>>> End of log
