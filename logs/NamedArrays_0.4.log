>>> 'Pkg.add("NamedArrays")' log
INFO: Cloning cache of NamedArrays from git://github.com/davidavdav/NamedArrays.jl.git
INFO: Installing Combinatorics v0.2.1
INFO: Installing DataStructures v0.5.3
INFO: Installing Iterators v0.3.0
INFO: Installing NamedArrays v0.5.3
INFO: Installing Polynomials v0.1.5
INFO: Package database updated

>>> 'Pkg.test("NamedArrays")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-116-generic #163-Ubuntu SMP Fri Mar 31 14:13:22 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (806.78125 MB free)
Uptime: 12951.0 sec
Load Avg:  1.08984375  1.02392578125  1.0361328125
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz     616260 s       5058 s      54064 s     486061 s         32 s
#2  3500 MHz     417303 s       3223 s      47845 s     785843 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.9.1
 - NamedArrays                   0.5.3
5 additional packages:
 - Combinatorics                 0.2.1
 - Compat                        0.24.0
 - DataStructures                0.5.3
 - Iterators                     0.3.0
 - Polynomials                   0.1.5
INFO: Testing NamedArrays
Starting test, no assertions should fail... base, one	.7842361131532909	.8649316152043243	.8255023778685768	.6300682406098208
two	.32295288423658586	.05166520779415107	.5265209508344095	.18205346837416791
a	88
b	73
c	89
d	87
e	25
f	36
construction, 2x3 Named Array{Float64,2}
dim1 ╲ dim2 │        c         d         e
────────────┼─────────────────────────────
a           │ 0.845316  0.317114  0.861299
b           │ 0.664696  0.732232  0.696711 0.8453156528258143 0.8453156528258143
2x3 Named Array{Float64,2}
A ╲ B │        c         d         e
──────┼─────────────────────────────
a     │ 0.845316  0.317114  0.861299
b     │ 0.664696  0.732232  0.696711
2x3 Named Array{Float64,2}
dim1 ╲ dim2 │        c         d         e
────────────┼─────────────────────────────
a           │ 0.845316  0.317114  0.861299
b           │ 0.664696  0.732232  0.696711
2x3 Named Array{Float64,2}
A ╲ B │        c         d         e
──────┼─────────────────────────────
a     │ 0.845316  0.317114  0.861299
b     │ 0.664696  0.732232  0.696711
arithmetic, WARNING: Dropping mismatching names
WARNING: Dropping mismatching names
WARNING: Dropping mismatching names
WARNING: Dropping mismatching names
convert, WARNING: could not import Base.indices into Main
getindex, setindex, 2x4 Named Array{Float64,2}
magnificent ╲ 7 │        yi         er        san         si
────────────────┼───────────────────────────────────────────
yi              │  0.661177   0.755558   0.662135    0.64315
er              │ 0.0811995   0.886498   0.849517  0.0307583
hcat/vcat, copy, sum, conversions, changing names, multi-dimensional, dodgy indices, sort, broadcast, vectorized, re-arrange, eachindex, matrixops, show,
0-dimensional Named Array{Int64,0}
139732462954568
0-element Named Array{Any,1}

[0.04514389022636811 0.13259265362279793 0.9353669579018669 0.3102781463771529
 0.5749379645334391 0.9185343856967558 0.7136797664221366 0.7902150098201228]
2x4 Named Array{Float64,2}
A ╲ B │         a          b          c          d
──────┼───────────────────────────────────────────
one   │ 0.0451439   0.132593   0.935367   0.310278
two   │  0.574938   0.918534    0.71368   0.7902152x4 Named Array{Float64,2}
A ╲ B │         a          b          c          d
──────┼───────────────────────────────────────────
one   │ 0.0451439   0.132593   0.935367   0.310278
two   │  0.574938   0.918534    0.71368   0.7902152x1000 Named Array{Float64,2}
A ╲ B │            1             2  …           999          1000
──────┼──────────────────────────────────────────────────────────
1     │     -1.24617     -0.222864  …       1.07621     -0.300736
2     │      1.56207       1.58941  …      0.308775      0.4272651000x2 Named Array{Float64,2}
A ╲ B │         1          2
──────┼─────────────────────
1     │  -1.17542   0.416205
2     │   -1.2044   -1.29357
3     │ -0.140182  -0.955852
4     │  0.377696   -1.19278
5     │ -0.817758   0.499723
6     │ -0.694656   -1.25567
7     │  0.151744   -1.47519
8     │  0.657167   -1.32829
9     │   1.28144  -0.798826
⋮               ⋮          ⋮
992   │ -0.334599   -0.92826
993   │  -0.81798      -1.61
994   │  0.879871   -2.13111
995   │  0.529108  -0.289009
996   │ 0.0588112   0.467004
997   │ 0.0874066   0.398487
998   │  -1.21989   0.508372
999   │ -0.181123    1.11801
1000  │   1.27979   -0.570981000-element Named Array{Float64,1}
A    │ 
─────┼───────────
1    │   0.438758
2    │   -0.57926
3    │    0.34619
4    │      -1.24
5    │  -0.317532
6    │  -0.663326
7    │  0.0782629
8    │    1.04565
9    │  -0.870065
⋮               ⋮
992  │  -0.888353
993  │  -0.811315
994  │   -0.81517
995  │   0.902639
996  │    1.17129
997  │   0.557122
998  │ -0.0622906
999  │   0.364108
1000 │  -0.3285172x2x2 Named Array{Float64,3}

[:, :, indexing=0] =
base ╲ zero │        0         1
────────────┼───────────────────
0           │ 0.957072  0.436294
1           │ 0.309467  0.160528

[:, :, indexing=1] =
base ╲ zero │        0         1
────────────┼───────────────────
0           │ 0.384406  0.797354
1           │ 0.723106  0.267075
2-element Named Array{Float64,1}
A  │ 
───┼─────────
1  │ 0.755907
2  │ 0.724532
2x2 Named Array{Float64,2}
A ╲ B │         1          2
──────┼─────────────────────
1     │  0.396128  0.0113176
2     │  0.103045   0.338025
2x2x2 Named Array{Float64,3}

[:, :, C=1] =
A ╲ B │         1          2
──────┼─────────────────────
1     │   0.45702  0.0116919
2     │  0.175952   0.835698

[:, :, C=2] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.654309  0.766635
2     │ 0.243416  0.957963
2x2x2x2 Named Array{Float64,4}

[:, :, C=1, D=1] =
A ╲ B │         1          2
──────┼─────────────────────
1     │  0.423471  0.0335715
2     │  0.249349   0.555374

[:, :, C=2, D=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.684213  0.452171
2     │ 0.942123  0.513782

[:, :, C=1, D=2] =
A ╲ B │        1         2
──────┼───────────────────
1     │  0.94625  0.768662
2     │ 0.100806  0.918586

[:, :, C=2, D=2] =
A ╲ B │        1         2
──────┼───────────────────
1     │  0.34393   0.20169
2     │ 0.455926  0.062118
2x2x2x2x2 Named Array{Float64,5}

[:, :, C=1, D=1, E=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.191253  0.660122
2     │ 0.993338  0.568534

[:, :, C=2, D=1, E=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.196818  0.412134
2     │ 0.843003   0.22873

[:, :, C=1, D=2, E=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.189759  0.692391
2     │  0.47079  0.248675
⋮
1x2x2 Named Array{Float64,3}

[:, :, C=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.599312  0.441252

[:, :, C=2] =
A ╲ B │         1          2
──────┼─────────────────────
1     │ 0.0722873   0.156154
2x1x2 Named Array{Float64,3}

[:, :, C=1] =
A ╲ B │         1
──────┼──────────
1     │ 0.0646357
2     │  0.239061

[:, :, C=2] =
A ╲ B │        1
──────┼─────────
1     │ 0.305459
2     │ 0.100681
2x2x1 Named Array{Float64,3}

[:, :, C=1] =
A ╲ B │         1          2
──────┼─────────────────────
1     │  0.185682   0.959793
2     │ 0.0486624   0.870514
1000×1000 Named sparse matrix with 103 Float64 nonzero entries:
	[3014575823142358933 , 10106592262940987645]  =  0.22454260329986409
	[6081783302736743377 , 10361072080411987344]  =  0.10182189470981462
	[18332548282271391638, 10361072080411987344]  =  0.7518814058011651
	[14486665179875284614,  4394159825732135742]  =  0.3917434334605008
	[1028841819963316707 ,  8725235013359650451]  =  0.8223021759295208
	[18180706245899323906, 12876006501778729182]  =  0.7325443678407921
	[5607123224040969390 ,  3566943156706603705]  =  0.7858303223115615
	[7002923098712527685 ,  2807702713668942919]  =  0.4293573003367801
	                                              ⋮
	[11052831234341989908, 17401827539426951865]  =  0.8626587235856171
	[14319986367878219703,  2318046236442875673]  =  0.02897205654557844
	[11711005111088208244, 12554874066387155728]  =  0.9204078417705421
	[2344064818992981444 ,  4214085865611670439]  =  0.41297624480972095
	[11022261278769353274,  1523061068178304284]  =  0.7615698396634167
	[4223746066729127812 ,  1203336841330469213]  =  0.8668951119643351
	[12040144181694387482, 13970367575607681105]  =  0.5251571980999212
	[212886737595870541  ,  3733926995351842633]  =  0.04515634522581724
	[7026046704018437269 ,   427459847123490633]  =  0.9680331163336595Timing named index: 0.00081994, array index: 0.00072769, named key: 0.129819095
Timing sum large sparse array: 0.012093766, named: 0.033720149
done!
INFO: NamedArrays tests passed

>>> End of log
