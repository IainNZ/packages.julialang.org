>>> 'Pkg.add("NamedArrays")' log
INFO: Cloning cache of NamedArrays from git://github.com/davidavdav/NamedArrays.jl.git
INFO: Installing Combinatorics v0.2.1
INFO: Installing DataStructures v0.5.3
INFO: Installing Iterators v0.3.1
INFO: Installing NamedArrays v0.5.3
INFO: Installing Polynomials v0.1.5
INFO: Package database updated

>>> 'Pkg.test("NamedArrays")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-117-generic #164-Ubuntu SMP Fri Apr 7 11:05:26 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (824.77734375 MB free)
Uptime: 13672.0 sec
Load Avg:  1.1083984375  1.0546875  1.04931640625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz     650478 s        670 s      50929 s     521500 s         22 s
#2  3500 MHz     422899 s       6508 s      43598 s     851439 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.9.1
 - NamedArrays                   0.5.3
5 additional packages:
 - Combinatorics                 0.2.1
 - Compat                        0.24.0
 - DataStructures                0.5.3
 - Iterators                     0.3.1
 - Polynomials                   0.1.5
INFO: Testing NamedArrays
Starting test, no assertions should fail... base, one	.42967912434318234	.5404096724608627	.1493555876598991	.8782668340465205
two	.34439407880423123	.28187919288068986	.5841110015145885	.6596430270268372
a	80
b	11
c	73
d	14
e	13
f	48
construction, 2x3 Named Array{Float64,2}
dim1 ╲ dim2 │        c         d         e
────────────┼─────────────────────────────
a           │ 0.546755  0.904582  0.265194
b           │ 0.773604  0.635843  0.212979 0.5467549756858923 0.5467549756858923
2x3 Named Array{Float64,2}
A ╲ B │        c         d         e
──────┼─────────────────────────────
a     │ 0.546755  0.904582  0.265194
b     │ 0.773604  0.635843  0.212979
2x3 Named Array{Float64,2}
dim1 ╲ dim2 │        c         d         e
────────────┼─────────────────────────────
a           │ 0.546755  0.904582  0.265194
b           │ 0.773604  0.635843  0.212979
2x3 Named Array{Float64,2}
A ╲ B │        c         d         e
──────┼─────────────────────────────
a     │ 0.546755  0.904582  0.265194
b     │ 0.773604  0.635843  0.212979
arithmetic, WARNING: Dropping mismatching names
WARNING: Dropping mismatching names
WARNING: Dropping mismatching names
WARNING: Dropping mismatching names
convert, WARNING: could not import Base.indices into Main
getindex, setindex, 2x4 Named Array{Float64,2}
magnificent ╲ 7 │       yi        er       san        si
────────────────┼───────────────────────────────────────
yi              │ 0.205657  0.803758  0.224089  0.642753
er              │ 0.438894  0.788567  0.439026   0.12776
hcat/vcat, copy, sum, conversions, changing names, multi-dimensional, dodgy indices, sort, broadcast, vectorized, re-arrange, eachindex, matrixops, show,
0-dimensional Named Array{Int64,0}
139615055457072
0-element Named Array{Any,1}

[0.424098886668163 0.728274399928285 0.9365868134891691 0.765428421669242
 0.9185866971611838 0.7179869580946314 0.5560739620022481 0.7407352903828517]
2x4 Named Array{Float64,2}
A ╲ B │        a         b         c         d
──────┼───────────────────────────────────────
one   │ 0.424099  0.728274  0.936587  0.765428
two   │ 0.918587  0.717987  0.556074  0.7407352x4 Named Array{Float64,2}
A ╲ B │        a         b         c         d
──────┼───────────────────────────────────────
one   │ 0.424099  0.728274  0.936587  0.765428
two   │ 0.918587  0.717987  0.556074  0.7407352x1000 Named Array{Float64,2}
A ╲ B │            1             2  …           999          1000
──────┼──────────────────────────────────────────────────────────
1     │      1.56386       -1.3884  …      -1.60882       1.25891
2     │    -0.612527      -1.10496  …      0.248633      0.1642741000x2 Named Array{Float64,2}
A ╲ B │          1           2
──────┼───────────────────────
1     │   0.594614   -0.100542
2     │  -0.595024    -0.18428
3     │   0.289773    -1.04096
4     │   0.096743     1.84005
5     │ -0.0865479   0.0274068
6     │  -0.601239   -0.295357
7     │  0.0481783     2.41282
8     │    1.03815    0.697553
9     │  -0.138638    -2.23603
⋮                ⋮           ⋮
992   │   -2.16528    -1.65214
993   │  -0.210992   -0.832571
994   │  -0.281447   -0.989348
995   │    1.01771      0.9528
996   │  -0.264494    0.997057
997   │  -0.475139   -0.311276
998   │  0.0177651     1.31171
999   │    0.66728    0.415552
1000  │   0.383249    -1.216461000-element Named Array{Float64,1}
A    │ 
─────┼───────────
1    │   -1.88154
2    │  0.0729466
3    │    1.06457
4    │  -0.837883
5    │  -0.311043
6    │  -0.821681
7    │ 0.00132112
8    │   0.527868
9    │  0.0329759
⋮               ⋮
992  │  -0.658536
993  │  -0.414506
994  │  -0.623149
995  │  -0.968678
996  │  -0.100463
997  │  -0.752054
998  │   0.606891
999  │   -1.93573
1000 │  -0.4924052x2x2 Named Array{Float64,3}

[:, :, indexing=0] =
base ╲ zero │        0         1
────────────┼───────────────────
0           │ 0.892588  0.112066
1           │ 0.132092   0.61474

[:, :, indexing=1] =
base ╲ zero │         0          1
────────────┼─────────────────────
0           │  0.947931   0.549037
1           │ 0.0504718   0.122022
2-element Named Array{Float64,1}
A  │ 
───┼─────────
1  │ 0.173803
2  │ 0.194592
2x2 Named Array{Float64,2}
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.227375  0.822265
2     │ 0.830916  0.553667
2x2x2 Named Array{Float64,3}

[:, :, C=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.629514  0.788954
2     │ 0.719629  0.620258

[:, :, C=2] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.290382  0.381675
2     │  0.69052  0.336948
2x2x2x2 Named Array{Float64,4}

[:, :, C=1, D=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.942031  0.553473
2     │ 0.165844   0.29826

[:, :, C=2, D=1] =
A ╲ B │         1          2
──────┼─────────────────────
1     │ 0.0274826   0.871769
2     │  0.156088    0.34627

[:, :, C=1, D=2] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.937561  0.974315
2     │ 0.881559  0.357045

[:, :, C=2, D=2] =
A ╲ B │         1          2
──────┼─────────────────────
1     │ 0.0206312   0.150994
2     │  0.981576   0.299693
2x2x2x2x2 Named Array{Float64,5}

[:, :, C=1, D=1, E=1] =
A ╲ B │         1          2
──────┼─────────────────────
1     │  0.887105  0.0138839
2     │ 0.0395355   0.848763

[:, :, C=2, D=1, E=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.247407  0.359887
2     │ 0.183969   0.39163

[:, :, C=1, D=2, E=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.142915  0.925683
2     │ 0.163702  0.432967
⋮
1x2x2 Named Array{Float64,3}

[:, :, C=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.759283  0.699827

[:, :, C=2] =
A ╲ B │        1         2
──────┼───────────────────
1     │  0.23192  0.482655
2x1x2 Named Array{Float64,3}

[:, :, C=1] =
A ╲ B │         1
──────┼──────────
1     │ 0.0631878
2     │  0.565218

[:, :, C=2] =
A ╲ B │        1
──────┼─────────
1     │ 0.136627
2     │ 0.510247
2x2x1 Named Array{Float64,3}

[:, :, C=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.924057  0.663104
2     │ 0.185731  0.131629
1000×1000 Named sparse matrix with 82 Float64 nonzero entries:
	[6345398762637942383 ,   397394769374478572]  =  0.4782632290788096
	[4182991028086505933 ,  5312631360709731698]  =  0.2492644036592817
	[10698461782340713109,  5723128691850249417]  =  0.0669548332913974
	[6036984650697465167 ,   906960604709401733]  =  0.7569256692797519
	[8272770267567418222 , 10684064542878956755]  =  0.674550890664287
	[16752464052319560607, 15260609615288845879]  =  0.9879174326901718
	[13404584004200911263, 14956803718882296446]  =  0.3775229387679335
	[14477441409544525021,  3501065925215364276]  =  0.8487769177793338
	                                              ⋮
	[6880785002993049943 , 16077859356318100249]  =  0.20738906000354218
	[1203336841330469213 ,  2107242561845671563]  =  0.4571301081863415
	[18332460987873573245, 11382910810432795234]  =  0.4740022785045108
	[5237071378972726705 , 10361974346531339474]  =  0.1474659408740684
	[7369566324703660862 ,  2520040687452014961]  =  0.8162857834533856
	[17183594994741436276,  8090338657268802519]  =  0.37239026560632094
	[4214085865611670439 , 11711005111088208244]  =  0.23003978189666885
	[5490184849613505398 , 10024080200852233627]  =  0.3057992362522164
	[10685333727101695973,  1842419535934980543]  =  0.7321083428991912Timing named index: 0.000833381, array index: 0.000718069, named key: 0.132356224
Timing sum large sparse array: 0.010259866, named: 0.021029366
done!
INFO: NamedArrays tests passed

>>> End of log
