>>> 'Pkg.add("NamedArrays")' log
INFO: Cloning cache of NamedArrays from git://github.com/davidavdav/NamedArrays.jl.git
INFO: Installing Combinatorics v0.2.1
INFO: Installing DataStructures v0.5.3
INFO: Installing Iterators v0.3.1
INFO: Installing NamedArrays v0.5.3
INFO: Installing Polynomials v0.1.6
INFO: Package database updated

>>> 'Pkg.test("NamedArrays")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-128-generic #177-Ubuntu SMP Tue Aug 8 11:40:23 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (780.8203125 MB free)
Uptime: 13899.0 sec
Load Avg:  1.087890625  1.0068359375  1.0185546875
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz     639779 s       2328 s      53119 s     549615 s          8 s
#2  3500 MHz     412879 s       6283 s      43603 s     872709 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.9.1
 - NamedArrays                   0.5.3
5 additional packages:
 - Combinatorics                 0.2.1
 - Compat                        0.26.0
 - DataStructures                0.5.3
 - Iterators                     0.3.1
 - Polynomials                   0.1.6
INFO: Testing NamedArrays
Starting test, no assertions should fail... base, one	.6810571943602908	.3147215914699144	.1432687893252904	.785742273480504
two	.3760564822547503	.6440651203371375	.7712076288031033	.3034806464283488
a	82
b	27
c	94
d	52
e	59
f	37
construction, 2x3 Named Array{Float64,2}
dim1 ╲ dim2 │         c          d          e
────────────┼────────────────────────────────
a           │ 0.0876159   0.208667   0.531044
b           │  0.408308  0.0850159   0.965589 0.08761594230369685 0.08761594230369685
2x3 Named Array{Float64,2}
A ╲ B │         c          d          e
──────┼────────────────────────────────
a     │ 0.0876159   0.208667   0.531044
b     │  0.408308  0.0850159   0.965589
2x3 Named Array{Float64,2}
dim1 ╲ dim2 │         c          d          e
────────────┼────────────────────────────────
a           │ 0.0876159   0.208667   0.531044
b           │  0.408308  0.0850159   0.965589
2x3 Named Array{Float64,2}
A ╲ B │         c          d          e
──────┼────────────────────────────────
a     │ 0.0876159   0.208667   0.531044
b     │  0.408308  0.0850159   0.965589
arithmetic, WARNING: Dropping mismatching names
WARNING: Dropping mismatching names
WARNING: Dropping mismatching names
WARNING: Dropping mismatching names
convert, WARNING: could not import Base.indices into Main
getindex, setindex, 2x4 Named Array{Float64,2}
magnificent ╲ 7 │       yi        er       san        si
────────────────┼───────────────────────────────────────
yi              │ 0.969959   0.40904  0.911457  0.612787
er              │ 0.209773  0.790006  0.425618  0.317824
hcat/vcat, copy, sum, conversions, changing names, multi-dimensional, dodgy indices, sort, broadcast, vectorized, re-arrange, eachindex, matrixops, show,
0-dimensional Named Array{Int64,0}
140170676601472
0-element Named Array{Any,1}

[0.7196588022991934 0.8658289925064588 0.27840363549846003 0.8391945969901267
 0.1875720693091223 0.5022316335370238 0.5270205357800388 0.40743338594066514]
2x4 Named Array{Float64,2}
A ╲ B │        a         b         c         d
──────┼───────────────────────────────────────
one   │ 0.719659  0.865829  0.278404  0.839195
two   │ 0.187572  0.502232  0.527021  0.4074332x4 Named Array{Float64,2}
A ╲ B │        a         b         c         d
──────┼───────────────────────────────────────
one   │ 0.719659  0.865829  0.278404  0.839195
two   │ 0.187572  0.502232  0.527021  0.4074332x1000 Named Array{Float64,2}
A ╲ B │           1            2  …          999         1000
──────┼──────────────────────────────────────────────────────
1     │    0.361993    -0.257194  …     -1.05661      0.51074
2     │   -0.386647     0.352056  …     -0.68618     0.8176471000x2 Named Array{Float64,2}
A ╲ B │          1           2
──────┼───────────────────────
1     │    2.49709   -0.865141
2     │   0.216084   -0.738386
3     │  -0.365908    0.758134
4     │   -1.52422     1.97115
5     │   0.470504    -1.31276
6     │   -2.73326   -0.223911
7     │    0.95376    -1.13064
8     │  -0.343906   -0.474805
9     │ -0.0497761    0.275062
⋮                ⋮           ⋮
992   │  -0.365024   -0.869096
993   │    1.42821   -0.277358
994   │   0.382433    0.374975
995   │    1.05256  -0.0915042
996   │ -0.0571925     1.18757
997   │  -0.532741    0.273112
998   │   -1.42533    0.265062
999   │   0.382159    0.074869
1000  │    1.29647    0.2523221000-element Named Array{Float64,1}
A    │ 
─────┼───────────
1    │    0.47952
2    │   0.992692
3    │   -1.55732
4    │   0.562811
5    │   -0.92327
6    │ -0.0242053
7    │   -1.68046
8    │   0.214346
9    │   -1.13315
⋮               ⋮
992  │  -0.333539
993  │  -0.316423
994  │   -1.30367
995  │   -1.03981
996  │  -0.446538
997  │  -0.084391
998  │   -0.58746
999  │    1.62688
1000 │  0.04677622x2x2 Named Array{Float64,3}

[:, :, indexing=0] =
base ╲ zero │        0         1
────────────┼───────────────────
0           │ 0.220733  0.341735
1           │ 0.554207  0.890935

[:, :, indexing=1] =
base ╲ zero │        0         1
────────────┼───────────────────
0           │ 0.729468  0.706553
1           │ 0.767123  0.808746
2-element Named Array{Float64,1}
A  │ 
───┼─────────
1  │  0.12204
2  │ 0.918938
2x2 Named Array{Float64,2}
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.778525   0.43443
2     │ 0.670997  0.251001
2x2x2 Named Array{Float64,3}

[:, :, C=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.481602  0.684035
2     │  0.60788  0.571802

[:, :, C=2] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.685544  0.607855
2     │ 0.906877  0.784682
2x2x2x2 Named Array{Float64,4}

[:, :, C=1, D=1] =
A ╲ B │          1           2
──────┼───────────────────────
1     │   0.356594    0.673435
2     │ 0.00109249    0.208862

[:, :, C=2, D=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.975768  0.374329
2     │ 0.841106  0.799468

[:, :, C=1, D=2] =
A ╲ B │         1          2
──────┼─────────────────────
1     │  0.641327   0.610889
2     │ 0.0792373   0.253828

[:, :, C=2, D=2] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.378253  0.800741
2     │  0.36349   0.61681
2x2x2x2x2 Named Array{Float64,5}

[:, :, C=1, D=1, E=1] =
A ╲ B │         1          2
──────┼─────────────────────
1     │  0.531602   0.487351
2     │ 0.0297099   0.858058

[:, :, C=2, D=1, E=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.866114  0.902508
2     │ 0.529345   0.43313

[:, :, C=1, D=2, E=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.829989  0.680091
2     │ 0.740634   0.23088
⋮
1x2x2 Named Array{Float64,3}

[:, :, C=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.341745  0.503271

[:, :, C=2] =
A ╲ B │         1          2
──────┼─────────────────────
1     │ 0.0577414   0.495032
2x1x2 Named Array{Float64,3}

[:, :, C=1] =
A ╲ B │         1
──────┼──────────
1     │  0.817499
2     │ 0.0536264

[:, :, C=2] =
A ╲ B │        1
──────┼─────────
1     │ 0.847251
2     │ 0.786171
2x2x1 Named Array{Float64,3}

[:, :, C=1] =
A ╲ B │          1           2
──────┼───────────────────────
1     │    0.27884  0.00704013
2     │   0.403309    0.490845
1000×1000 Named sparse matrix with 102 Float64 nonzero entries:
	[14626872821461025492, 17095493447719212504]  =  0.31350230085024267
	[3701904739816180802 ,   113574861176001527]  =  0.8825807494628597
	[2792827719799450558 ,  2230070772219402886]  =  0.049273758564098546
	[13593351659750487469, 10361072080411987344]  =  0.23627527128205883
	[1692321568384860970 , 10601912832305821454]  =  0.5456182801761396
	[9060976978009627663 ,  8629498292780771804]  =  0.7260049086091325
	[6036984650697465167 ,  7425701996526302553]  =  0.5839321219434781
	[16083059188908835467,  8351221943604278133]  =  0.5215368821696571
	                                              ⋮
	[10224435857605525989, 14276971493366205365]  =  0.4201891648863785
	[12015402394709517138,  1082833487325258643]  =  0.07905786248097368
	[13408654435623669547,  2117445326293199079]  =  0.2528205667398593
	[15791483600865970897,  2520040687452014961]  =  0.36714285996353935
	[14951403058635497631, 15857670694969494589]  =  0.8014049406022286
	[5927176887743683346 ,   372001016642560619]  =  0.921282876609663
	[16428336034292508128, 16069635275006911712]  =  0.30208080162382545
	[14766805435251878341,  8779884342238752210]  =  0.2532536276252426
	[187013141495975231  , 11527542315164007414]  =  0.03478563430350046Timing named index: 0.000721452, array index: 0.000499182, named key: 0.071272733
Timing sum large sparse array: 0.004968715, named: 0.013383181
done!
INFO: NamedArrays tests passed

>>> End of log
