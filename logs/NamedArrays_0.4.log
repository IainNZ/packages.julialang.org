>>> 'Pkg.add("NamedArrays")' log
INFO: Cloning cache of NamedArrays from git://github.com/davidavdav/NamedArrays.jl.git
INFO: Installing Combinatorics v0.2.1
INFO: Installing DataStructures v0.5.3
INFO: Installing Iterators v0.3.0
INFO: Installing NamedArrays v0.5.3
INFO: Installing Polynomials v0.1.5
INFO: Package database updated

>>> 'Pkg.test("NamedArrays")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-116-generic #163-Ubuntu SMP Fri Mar 31 14:13:22 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (806.75 MB free)
Uptime: 8287.0 sec
Load Avg:  0.9765625  0.95947265625  1.0185546875
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz     381010 s         79 s      31467 s     332009 s         17 s
#2  3499 MHz     245738 s         64 s      28233 s     525794 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.8.3
 - NamedArrays                   0.5.3
5 additional packages:
 - Combinatorics                 0.2.1
 - Compat                        0.22.0
 - DataStructures                0.5.3
 - Iterators                     0.3.0
 - Polynomials                   0.1.5
INFO: Testing NamedArrays
Starting test, no assertions should fail... base, one	.8423713639502446	.5710724230506385	.7530161523259398	.7258319340600694
two	.23841263238223376	.5813117253646827	.8490808208887668	.7467727264780939
a	20
b	62
c	20
d	49
e	1
f	62
construction, 2x3 Named Array{Float64,2}
dim1 ╲ dim2 │        c         d         e
────────────┼─────────────────────────────
a           │ 0.307026  0.762566  0.817828
b           │ 0.401146  0.670321  0.333895 0.3070259156777162 0.3070259156777162
2x3 Named Array{Float64,2}
A ╲ B │        c         d         e
──────┼─────────────────────────────
a     │ 0.307026  0.762566  0.817828
b     │ 0.401146  0.670321  0.333895
2x3 Named Array{Float64,2}
dim1 ╲ dim2 │        c         d         e
────────────┼─────────────────────────────
a           │ 0.307026  0.762566  0.817828
b           │ 0.401146  0.670321  0.333895
2x3 Named Array{Float64,2}
A ╲ B │        c         d         e
──────┼─────────────────────────────
a     │ 0.307026  0.762566  0.817828
b     │ 0.401146  0.670321  0.333895
arithmetic, WARNING: Dropping mismatching names
WARNING: Dropping mismatching names
WARNING: Dropping mismatching names
WARNING: Dropping mismatching names
convert, WARNING: could not import Base.indices into Main
getindex, setindex, 2x4 Named Array{Float64,2}
magnificent ╲ 7 │       yi        er       san        si
────────────────┼───────────────────────────────────────
yi              │ 0.251775  0.621914  0.232568  0.569072
er              │ 0.630444   0.11735  0.936155  0.284409
hcat/vcat, copy, sum, conversions, changing names, multi-dimensional, dodgy indices, sort, broadcast, vectorized, re-arrange, eachindex, matrixops, show,
0-dimensional Named Array{Int64,0}
140199805380960
0-element Named Array{Any,1}

[0.3129692781871296 0.8850057419157868 0.20028272713677708 0.9151748694013546
 0.7160969866917046 0.9242035333394747 0.3337778194579557 0.5128184237200422]
2x4 Named Array{Float64,2}
A ╲ B │        a         b         c         d
──────┼───────────────────────────────────────
one   │ 0.312969  0.885006  0.200283  0.915175
two   │ 0.716097  0.924204  0.333778  0.5128182x4 Named Array{Float64,2}
A ╲ B │        a         b         c         d
──────┼───────────────────────────────────────
one   │ 0.312969  0.885006  0.200283  0.915175
two   │ 0.716097  0.924204  0.333778  0.5128182x1000 Named Array{Float64,2}
A ╲ B │            1             2  …           999          1000
──────┼──────────────────────────────────────────────────────────
1     │     -1.40711      0.529065  …      0.533167    -0.0554359
2     │     0.674377      0.247019  …     -0.508501      -1.155861000x2 Named Array{Float64,2}
A ╲ B │          1           2
──────┼───────────────────────
1     │   -1.94455   -0.672991
2     │  -0.936071   -0.752207
3     │  -0.694576   -0.965528
4     │    1.87574   -0.893244
5     │   -1.05402    -0.61011
6     │  -0.606068   -0.868504
7     │   -1.27912     1.55605
8     │   0.338192    0.820636
9     │  -0.359663    0.408571
⋮                ⋮           ⋮
992   │   0.399694   -0.251628
993   │  -0.931072    0.856941
994   │    1.52582   -0.101397
995   │    2.09943     1.43213
996   │  -0.783228   -0.634598
997   │  -0.119278   -0.351937
998   │    1.98115   -0.755072
999   │ -0.0885325    -1.15811
1000  │  -0.418434   -0.1070131000-element Named Array{Float64,1}
A    │ 
─────┼──────────
1    │  -1.61037
2    │  0.957452
3    │  0.291506
4    │  0.945934
5    │  -1.01684
6    │ -0.240577
7    │ -0.441793
8    │ -0.086066
9    │ -0.962479
⋮              ⋮
992  │   1.46707
993  │  0.289265
994  │ -0.205823
995  │ -0.291959
996  │  -0.54178
997  │ -0.190148
998  │   0.18623
999  │    1.3593
1000 │   1.648252x2x2 Named Array{Float64,3}

[:, :, indexing=0] =
base ╲ zero │        0         1
────────────┼───────────────────
0           │ 0.914695  0.237432
1           │ 0.455858   0.15054

[:, :, indexing=1] =
base ╲ zero │         0          1
────────────┼─────────────────────
0           │  0.283472  0.0754243
1           │  0.148832   0.456263
2-element Named Array{Float64,1}
A  │ 
───┼─────────
1  │ 0.300927
2  │ 0.592486
2x2 Named Array{Float64,2}
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.984732  0.435449
2     │ 0.383692  0.127645
2x2x2 Named Array{Float64,3}

[:, :, C=1] =
A ╲ B │          1           2
──────┼───────────────────────
1     │   0.573153    0.267795
2     │ 0.00987981    0.558834

[:, :, C=2] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.834313  0.367574
2     │ 0.952702  0.310807
2x2x2x2 Named Array{Float64,4}

[:, :, C=1, D=1] =
A ╲ B │         1          2
──────┼─────────────────────
1     │  0.309102  0.0581747
2     │  0.859951  0.0721156

[:, :, C=2, D=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.894804  0.417397
2     │ 0.283484  0.133634

[:, :, C=1, D=2] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.276892  0.886922
2     │ 0.611596  0.272167

[:, :, C=2, D=2] =
A ╲ B │        1         2
──────┼───────────────────
1     │  0.79683   0.34371
2     │ 0.859083  0.221571
2x2x2x2x2 Named Array{Float64,5}

[:, :, C=1, D=1, E=1] =
A ╲ B │         1          2
──────┼─────────────────────
1     │  0.784621  0.0386415
2     │  0.861811   0.657547

[:, :, C=2, D=1, E=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.296277  0.556851
2     │ 0.490099   0.38207

[:, :, C=1, D=2, E=1] =
A ╲ B │         1          2
──────┼─────────────────────
1     │  0.833911  0.0572006
2     │  0.447314   0.242011
⋮
1x2x2 Named Array{Float64,3}

[:, :, C=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.972454  0.558122

[:, :, C=2] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.142851  0.983666
2x1x2 Named Array{Float64,3}

[:, :, C=1] =
A ╲ B │       1
──────┼────────
1     │ 0.86951
2     │ 0.50433

[:, :, C=2] =
A ╲ B │          1
──────┼───────────
1     │ 0.00346857
2     │   0.605468
2x2x1 Named Array{Float64,3}

[:, :, C=1] =
A ╲ B │         1          2
──────┼─────────────────────
1     │  0.205431   0.675925
2     │  0.929724  0.0484778
1000×1000 Named sparse matrix with 93 Float64 nonzero entries:
	[9991688889456918816 , 15422846019410515149]  =  0.20579407300460395
	[172966917720799643  , 16462243977607957471]  =  0.7187207341258346
	[18365636711081267169, 17676219393380616284]  =  0.9059031057881743
	[13538132892370992970,  1166092285267503990]  =  0.8131167023320154
	[11727192159770649882,  4976045735032000325]  =  0.03137735153185628
	[10469764766191980213,  5839463014734961202]  =  0.9013929663432834
	[8185803203023614208 , 15987302811816728974]  =  0.015269403754809785
	[14774945750507892610, 15465980046630820984]  =  0.4196644430471306
	                                              ⋮
	[18168544338330653462, 12459420750016908814]  =  0.5251464706538438
	[3745600506804314987 , 11711005111088208244]  =  0.0008766762779386372
	[1082045492561856594 ,   372001016642560619]  =  0.9040875523776148
	[16462243977607957471,  8779884342238752210]  =  0.1869696873999136
	[172966917720799643  , 12624682912995533025]  =  0.9751262634084195
	[1348625733340586    ,  1861743268047760089]  =  0.4797274965682716
	[14475185020288943568,  1842419535934980543]  =  0.7872706619809471
	[15838569937311488483, 15240003619098155971]  =  0.171184326016381
	[15362413774630394309,   427459847123490633]  =  0.5618953843463177Timing named index: 0.001075651, array index: 0.000820961, named key: 0.138758897
Timing sum large sparse array: 0.012044158, named: 0.031282064
done!
INFO: NamedArrays tests passed

>>> End of log
