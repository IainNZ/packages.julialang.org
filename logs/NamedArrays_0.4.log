>>> 'Pkg.add("NamedArrays")' log
INFO: Cloning cache of NamedArrays from git://github.com/davidavdav/NamedArrays.jl.git
INFO: Installing Combinatorics v0.2.1
INFO: Installing DataStructures v0.5.3
INFO: Installing Iterators v0.3.1
INFO: Installing NamedArrays v0.5.3
INFO: Installing Polynomials v0.1.5
INFO: Package database updated

>>> 'Pkg.test("NamedArrays")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-125-generic #174-Ubuntu SMP Mon Jul 10 18:51:24 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (777.48828125 MB free)
Uptime: 14766.0 sec
Load Avg:  1.0830078125  0.9990234375  1.01318359375
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz     705405 s        313 s      56106 s     565905 s         28 s
#2  3500 MHz     460186 s       6188 s      46420 s     919598 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.9.1
 - NamedArrays                   0.5.3
5 additional packages:
 - Combinatorics                 0.2.1
 - Compat                        0.26.0
 - DataStructures                0.5.3
 - Iterators                     0.3.1
 - Polynomials                   0.1.5
INFO: Testing NamedArrays
Starting test, no assertions should fail... base, one	.8074984749183285	.8680776996788666	.8252366493308301	.8831787741443995
two	.24509379663364905	.056427232813792916	.055161610435336295	.030994458107515444
a	16
b	36
c	2
d	57
e	35
f	58
construction, 2x3 Named Array{Float64,2}
dim1 ╲ dim2 │        c         d         e
────────────┼─────────────────────────────
a           │ 0.115866  0.183763  0.944618
b           │ 0.938876  0.314945  0.632866 0.1158663231351873 0.1158663231351873
2x3 Named Array{Float64,2}
A ╲ B │        c         d         e
──────┼─────────────────────────────
a     │ 0.115866  0.183763  0.944618
b     │ 0.938876  0.314945  0.632866
2x3 Named Array{Float64,2}
dim1 ╲ dim2 │        c         d         e
────────────┼─────────────────────────────
a           │ 0.115866  0.183763  0.944618
b           │ 0.938876  0.314945  0.632866
2x3 Named Array{Float64,2}
A ╲ B │        c         d         e
──────┼─────────────────────────────
a     │ 0.115866  0.183763  0.944618
b     │ 0.938876  0.314945  0.632866
arithmetic, WARNING: Dropping mismatching names
WARNING: Dropping mismatching names
WARNING: Dropping mismatching names
WARNING: Dropping mismatching names
convert, WARNING: could not import Base.indices into Main
getindex, setindex, 2x4 Named Array{Float64,2}
magnificent ╲ 7 │       yi        er       san        si
────────────────┼───────────────────────────────────────
yi              │ 0.233824  0.586973  0.194413  0.845139
er              │ 0.276772  0.889222  0.510004  0.674815
hcat/vcat, copy, sum, conversions, changing names, multi-dimensional, dodgy indices, sort, broadcast, vectorized, re-arrange, eachindex, matrixops, show,
0-dimensional Named Array{Int64,0}
140443809283184
0-element Named Array{Any,1}

[0.2813752565382859 0.333558221417634 0.9845140722700059 0.683819348234624
 0.11336931919984194 0.35914643312824635 0.5780752154972357 0.786325075407428]
2x4 Named Array{Float64,2}
A ╲ B │        a         b         c         d
──────┼───────────────────────────────────────
one   │ 0.281375  0.333558  0.984514  0.683819
two   │ 0.113369  0.359146  0.578075  0.7863252x4 Named Array{Float64,2}
A ╲ B │        a         b         c         d
──────┼───────────────────────────────────────
one   │ 0.281375  0.333558  0.984514  0.683819
two   │ 0.113369  0.359146  0.578075  0.7863252x1000 Named Array{Float64,2}
A ╲ B │            1             2  …           999          1000
──────┼──────────────────────────────────────────────────────────
1     │    -0.126464       1.16162  …      0.688094     -0.335623
2     │    -0.543308     -0.381046  …     -0.123987    0.001207731000x2 Named Array{Float64,2}
A ╲ B │          1           2
──────┼───────────────────────
1     │   -1.75244    0.360624
2     │   -1.23794       0.108
3     │ -0.0898451   -0.571473
4     │    1.40104   -0.581982
5     │ -0.0772258    0.349159
6     │ -0.0996484   -0.541898
7     │  -0.772882   0.0020869
8     │     1.9178    0.539177
9     │    1.19429    0.127299
⋮                ⋮           ⋮
992   │   0.908764    0.504563
993   │  -0.709835    0.139565
994   │   0.804212     1.04811
995   │  0.0198729    -1.09696
996   │  -0.758309    0.212103
997   │   0.570849    -1.51222
998   │   0.375418   -0.792437
999   │   0.221617    0.284501
1000  │     1.3743   -0.1541181000-element Named Array{Float64,1}
A    │ 
─────┼───────────
1    │  -0.243503
2    │   -2.34458
3    │  -0.663903
4    │   0.933243
5    │   0.935159
6    │   0.443261
7    │   0.249512
8    │ -0.0394533
9    │  -0.582909
⋮               ⋮
992  │    -2.4069
993  │   0.571749
994  │  -0.754259
995  │   0.236218
996  │ -0.0733287
997  │   0.421531
998  │   -1.31092
999  │   -1.68292
1000 │   0.2917232x2x2 Named Array{Float64,3}

[:, :, indexing=0] =
base ╲ zero │        0         1
────────────┼───────────────────
0           │ 0.918761  0.130501
1           │ 0.942412  0.716734

[:, :, indexing=1] =
base ╲ zero │         0          1
────────────┼─────────────────────
0           │ 0.0784617   0.767677
1           │  0.551543  0.0861313
2-element Named Array{Float64,1}
A  │ 
───┼─────────
1  │   0.1018
2  │ 0.358893
2x2 Named Array{Float64,2}
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.696565  0.809986
2     │ 0.152715  0.162059
2x2x2 Named Array{Float64,3}

[:, :, C=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │  0.49187  0.515963
2     │ 0.209327  0.872635

[:, :, C=2] =
A ╲ B │         1          2
──────┼─────────────────────
1     │ 0.0084367   0.398734
2     │  0.321029   0.469741
2x2x2x2 Named Array{Float64,4}

[:, :, C=1, D=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │  0.84961  0.223735
2     │ 0.627605  0.656143

[:, :, C=2, D=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.754378  0.166748
2     │ 0.813699  0.813965

[:, :, C=1, D=2] =
A ╲ B │        1         2
──────┼───────────────────
1     │  0.34747   0.32241
2     │  0.14414  0.510998

[:, :, C=2, D=2] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.397249  0.411287
2     │ 0.718767  0.765445
2x2x2x2x2 Named Array{Float64,5}

[:, :, C=1, D=1, E=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.255893  0.683432
2     │ 0.583886  0.740119

[:, :, C=2, D=1, E=1] =
A ╲ B │          1           2
──────┼───────────────────────
1     │   0.499487  0.00932757
2     │    0.15779    0.848522

[:, :, C=1, D=2, E=1] =
A ╲ B │          1           2
──────┼───────────────────────
1     │    0.98865  0.00440189
2     │   0.108614     0.40763
⋮
1x2x2 Named Array{Float64,3}

[:, :, C=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.963048  0.330838

[:, :, C=2] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.182448  0.368098
2x1x2 Named Array{Float64,3}

[:, :, C=1] =
A ╲ B │        1
──────┼─────────
1     │  0.54507
2     │ 0.297443

[:, :, C=2] =
A ╲ B │        1
──────┼─────────
1     │ 0.336335
2     │ 0.227857
2x2x1 Named Array{Float64,3}

[:, :, C=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.977716  0.901912
2     │ 0.390709   0.55882
1000×1000 Named sparse matrix with 100 Float64 nonzero entries:
	[7135933997555694158 ,  8699333159457747740]  =  0.8165497731639761
	[11250402503384658013,  6046649976662626325]  =  0.7097229675481598
	[7401919267257527897 ,  9920432272297441209]  =  0.958640998854279
	[1241495296552961994 ,  7425701996526302553]  =  0.2333026171037904
	[18443816037252674910,  3039451196773527828]  =  0.46894192025859005
	[9815398096560962926 ,  3039451196773527828]  =  0.504843869368971
	[6081783302736743377 , 16621507366152005377]  =  0.3631976715358898
	[5887916164234050841 ,   906960604709401733]  =  0.6550837536375249
	                                              ⋮
	[9223427034658990711 ,  2117445326293199079]  =  0.27169842289721524
	[13711291875022394707,  2318046236442875673]  =  0.5745444449105186
	[15774366784000975931, 18148906667482527649]  =  0.7457306914895876
	[8161571390594682873 , 15857670694969494589]  =  0.9799450245899148
	[7400908290766144625 ,   372001016642560619]  =  0.9072325870160249
	[11565746237708632912, 16365943061271568709]  =  0.26848630890289527
	[12921543294441418094, 12624682912995533025]  =  0.7473755103817685
	[8725235013359650451 ,  1861743268047760089]  =  0.8064443185400694
	[10659699155492159423, 12020782256748308824]  =  0.14659020064515405Timing named index: 0.000624102, array index: 0.000453718, named key: 0.073679482
Timing sum large sparse array: 0.00706023, named: 0.014163978
done!
INFO: NamedArrays tests passed

>>> End of log
