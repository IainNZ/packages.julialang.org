>>> 'Pkg.add("NamedArrays")' log
INFO: Cloning cache of NamedArrays from git://github.com/davidavdav/NamedArrays.jl.git
INFO: Installing Combinatorics v0.2.1
INFO: Installing DataStructures v0.5.3
INFO: Installing Iterators v0.3.1
INFO: Installing NamedArrays v0.5.3
INFO: Installing Polynomials v0.1.6
INFO: Package database updated

>>> 'Pkg.test("NamedArrays")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-128-generic #177-Ubuntu SMP Tue Aug 8 11:40:23 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (842.86328125 MB free)
Uptime: 15477.0 sec
Load Avg:  0.96533203125  1.00048828125  1.02392578125
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz     704223 s       2133 s      58380 s     632230 s         27 s
#2  3500 MHz     488034 s       4643 s      50095 s     944502 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.9.1
 - NamedArrays                   0.5.3
5 additional packages:
 - Combinatorics                 0.2.1
 - Compat                        0.26.0
 - DataStructures                0.5.3
 - Iterators                     0.3.1
 - Polynomials                   0.1.6
INFO: Testing NamedArrays
Starting test, no assertions should fail... base, one	.2535127849702534	.22196629390973666	.1543532457397374	.8046564572842463
two	.37107273164961674	.37661021610151835	.4328690594314759	.6548409246419487
a	27
b	33
c	8
d	97
e	36
f	28
construction, 2x3 Named Array{Float64,2}
dim1 ╲ dim2 │        c         d         e
────────────┼─────────────────────────────
a           │ 0.867153  0.497168  0.796087
b           │  0.38247  0.509767  0.908769 0.8671528228350178 0.8671528228350178
2x3 Named Array{Float64,2}
A ╲ B │        c         d         e
──────┼─────────────────────────────
a     │ 0.867153  0.497168  0.796087
b     │  0.38247  0.509767  0.908769
2x3 Named Array{Float64,2}
dim1 ╲ dim2 │        c         d         e
────────────┼─────────────────────────────
a           │ 0.867153  0.497168  0.796087
b           │  0.38247  0.509767  0.908769
2x3 Named Array{Float64,2}
A ╲ B │        c         d         e
──────┼─────────────────────────────
a     │ 0.867153  0.497168  0.796087
b     │  0.38247  0.509767  0.908769
arithmetic, WARNING: Dropping mismatching names
WARNING: Dropping mismatching names
WARNING: Dropping mismatching names
WARNING: Dropping mismatching names
convert, WARNING: could not import Base.indices into Main
getindex, setindex, 2x4 Named Array{Float64,2}
magnificent ╲ 7 │        yi         er        san         si
────────────────┼───────────────────────────────────────────
yi              │  0.877636  0.0850719   0.146963   0.478764
er              │  0.327312   0.742222   0.793889    0.66633
hcat/vcat, copy, sum, conversions, changing names, multi-dimensional, dodgy indices, sort, broadcast, vectorized, re-arrange, eachindex, matrixops, show,
0-dimensional Named Array{Int64,0}
139823501825680
0-element Named Array{Any,1}

[0.6544052898046766 0.7623252435438912 0.9766474681360924 0.7438940859747674
 0.20595467379337906 0.19910417900097022 0.2826544551557195 0.46833337336558545]
2x4 Named Array{Float64,2}
A ╲ B │        a         b         c         d
──────┼───────────────────────────────────────
one   │ 0.654405  0.762325  0.976647  0.743894
two   │ 0.205955  0.199104  0.282654  0.4683332x4 Named Array{Float64,2}
A ╲ B │        a         b         c         d
──────┼───────────────────────────────────────
one   │ 0.654405  0.762325  0.976647  0.743894
two   │ 0.205955  0.199104  0.282654  0.4683332x1000 Named Array{Float64,2}
A ╲ B │           1            2  …          999         1000
──────┼──────────────────────────────────────────────────────
1     │    0.849606      1.66631  …     0.330793     -1.37294
2     │     1.83038    -0.002212  …    -0.583691   -0.09919341000x2 Named Array{Float64,2}
A ╲ B │          1           2
──────┼───────────────────────
1     │   -1.02811   -0.451102
2     │   0.112645    -1.70401
3     │   0.204753   -0.602579
4     │   0.285177    -1.29757
5     │   -1.37107     1.32111
6     │   0.315669   0.0502045
7     │   0.751295   -0.343812
8     │   0.356623    0.670251
9     │   0.195823    -1.43924
⋮                ⋮           ⋮
992   │  -0.750082    -1.23644
993   │  -0.610382    -1.88345
994   │  -0.775136   -0.162977
995   │   -1.41917   -0.474737
996   │ -0.0948788   -0.750462
997   │   -1.01816     -1.4444
998   │   -1.67623   -0.455178
999   │  -0.178392    0.276569
1000  │  -0.533219     1.706671000-element Named Array{Float64,1}
A    │ 
─────┼──────────
1    │  0.516874
2    │ -0.363208
3    │ -0.127332
4    │ -0.632233
5    │  0.102455
6    │   1.50871
7    │    2.3067
8    │ -0.536189
9    │  0.631853
⋮              ⋮
992  │  0.297933
993  │   1.13431
994  │ -0.408156
995  │  0.435833
996  │  -0.26553
997  │ -0.401294
998  │ -0.408423
999  │ -0.130656
1000 │ -0.2706442x2x2 Named Array{Float64,3}

[:, :, indexing=0] =
base ╲ zero │        0         1
────────────┼───────────────────
0           │ 0.482046  0.305866
1           │ 0.908906  0.786581

[:, :, indexing=1] =
base ╲ zero │         0          1
────────────┼─────────────────────
0           │ 0.0504542  0.0130121
1           │  0.331517   0.854939
2-element Named Array{Float64,1}
A  │ 
───┼─────────
1  │ 0.888803
2  │ 0.428764
2x2 Named Array{Float64,2}
A ╲ B │         1          2
──────┼─────────────────────
1     │  0.883182    0.89559
2     │  0.945255  0.0319894
2x2x2 Named Array{Float64,3}

[:, :, C=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.939086  0.358572
2     │  0.65893  0.622113

[:, :, C=2] =
A ╲ B │         1          2
──────┼─────────────────────
1     │ 0.0994012   0.619096
2     │  0.653593   0.826074
2x2x2x2 Named Array{Float64,4}

[:, :, C=1, D=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.945072  0.478635
2     │  0.82892   0.99018

[:, :, C=2, D=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.299577  0.946982
2     │ 0.322695  0.299374

[:, :, C=1, D=2] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.242232  0.538153
2     │  0.89605  0.423384

[:, :, C=2, D=2] =
A ╲ B │         1          2
──────┼─────────────────────
1     │  0.336795   0.218219
2     │ 0.0589916  0.0861818
2x2x2x2x2 Named Array{Float64,5}

[:, :, C=1, D=1, E=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.286084  0.854904
2     │ 0.682252  0.920192

[:, :, C=2, D=1, E=1] =
A ╲ B │         1          2
──────┼─────────────────────
1     │  0.897063  0.0460624
2     │   0.77479   0.644152

[:, :, C=1, D=2, E=1] =
A ╲ B │         1          2
──────┼─────────────────────
1     │  0.553715   0.423875
2     │ 0.0287957   0.807674
⋮
1x2x2 Named Array{Float64,3}

[:, :, C=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.414119  0.677653

[:, :, C=2] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.181217   0.34078
2x1x2 Named Array{Float64,3}

[:, :, C=1] =
A ╲ B │        1
──────┼─────────
1     │ 0.247833
2     │ 0.337897

[:, :, C=2] =
A ╲ B │        1
──────┼─────────
1     │ 0.346997
2     │ 0.940688
2x2x1 Named Array{Float64,3}

[:, :, C=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │   0.5117  0.900985
2     │ 0.185107  0.913758
1000×1000 Named sparse matrix with 101 Float64 nonzero entries:
	[3994484471421493834 ,   397394769374478572]  =  0.6460686862039406
	[310341593395597147  , 14066869468942639955]  =  0.40853815936117366
	[16544335554558850098, 10361072080411987344]  =  0.8868331709271182
	[8063487388436248612 , 10361072080411987344]  =  0.6486856179053797
	[12819963352506822510, 17676219393380616284]  =  0.6043907310088548
	[10596751188013898940,  5723128691850249417]  =  0.9919241649416224
	[13068922020419317632, 15493082059768908559]  =  0.02908894225544345
	[10361974346531339474, 15263238418481705881]  =  0.9268354271048149
	                                              ⋮
	[149971711461182784  ,  8471876845144429043]  =  0.2832882696057619
	[13342932250377702532, 12459420750016908814]  =  0.5575880154894748
	[4904571324367112161 ,  2117445326293199079]  =  0.5641664796615298
	[10924666096879366607, 15857670694969494589]  =  0.636253049234984
	[2876475700534992100 ,  1526691723863411160]  =  0.8649721344376908
	[427459847123490633  ,  8779884342238752210]  =  0.05854620901563434
	[1861743268047760089 ,  1203336841330469213]  =  0.336690403134686
	[5071406905266041170 , 13970367575607681105]  =  0.6559062489744865
	[7467562274097903724 , 12020782256748308824]  =  0.11275966925767333Timing named index: 0.001060717, array index: 0.000692085, named key: 0.128338956
Timing sum large sparse array: 0.012322238, named: 0.008605742
done!
INFO: NamedArrays tests passed

>>> End of log
