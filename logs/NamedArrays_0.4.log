>>> 'Pkg.add("NamedArrays")' log
INFO: Cloning cache of NamedArrays from git://github.com/davidavdav/NamedArrays.jl.git
INFO: Installing Combinatorics v0.2.1
INFO: Installing DataStructures v0.5.3
INFO: Installing Iterators v0.3.1
INFO: Installing NamedArrays v0.5.3
INFO: Installing Polynomials v0.1.5
INFO: Package database updated

>>> 'Pkg.test("NamedArrays")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-119-generic #166-Ubuntu SMP Wed May 3 12:18:55 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (856.27734375 MB free)
Uptime: 13741.0 sec
Load Avg:  0.90380859375  0.96923828125  1.02392578125
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz     690574 s       5464 s      50491 s     491241 s         22 s
#2  3500 MHz     427168 s       1893 s      43241 s     850130 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.9.1
 - NamedArrays                   0.5.3
5 additional packages:
 - Combinatorics                 0.2.1
 - Compat                        0.26.0
 - DataStructures                0.5.3
 - Iterators                     0.3.1
 - Polynomials                   0.1.5
INFO: Testing NamedArrays
Starting test, no assertions should fail... base, one	.4824000016321037	.8418757261080783	.6116797824521074	.31096254649458643
two	.15197947596864103	.3962373118286793	.08062055419142888	.4989414063330162
a	62
b	96
c	29
d	29
e	82
f	81
construction, 2x3 Named Array{Float64,2}
dim1 ╲ dim2 │        c         d         e
────────────┼─────────────────────────────
a           │ 0.121317  0.734285   0.73785
b           │ 0.140555  0.361165  0.415595 0.1213172846621624 0.1213172846621624
2x3 Named Array{Float64,2}
A ╲ B │        c         d         e
──────┼─────────────────────────────
a     │ 0.121317  0.734285   0.73785
b     │ 0.140555  0.361165  0.415595
2x3 Named Array{Float64,2}
dim1 ╲ dim2 │        c         d         e
────────────┼─────────────────────────────
a           │ 0.121317  0.734285   0.73785
b           │ 0.140555  0.361165  0.415595
2x3 Named Array{Float64,2}
A ╲ B │        c         d         e
──────┼─────────────────────────────
a     │ 0.121317  0.734285   0.73785
b     │ 0.140555  0.361165  0.415595
arithmetic, WARNING: Dropping mismatching names
WARNING: Dropping mismatching names
WARNING: Dropping mismatching names
WARNING: Dropping mismatching names
convert, WARNING: could not import Base.indices into Main
getindex, setindex, 2x4 Named Array{Float64,2}
magnificent ╲ 7 │        yi         er        san         si
────────────────┼───────────────────────────────────────────
yi              │  0.398903  0.0594197   0.595911   0.791364
er              │  0.463196   0.623775   0.747416   0.222827
hcat/vcat, copy, sum, conversions, changing names, multi-dimensional, dodgy indices, sort, broadcast, vectorized, re-arrange, eachindex, matrixops, show,
0-dimensional Named Array{Int64,0}
140499076504464
0-element Named Array{Any,1}

[0.2082533224453098 0.10744795902567006 0.8684884474435852 0.2467794266640453
 0.4387983931435926 0.247336602584582 0.6755614586717464 0.06731513655617705]
2x4 Named Array{Float64,2}
A ╲ B │         a          b          c          d
──────┼───────────────────────────────────────────
one   │  0.208253   0.107448   0.868488   0.246779
two   │  0.438798   0.247337   0.675561  0.06731512x4 Named Array{Float64,2}
A ╲ B │         a          b          c          d
──────┼───────────────────────────────────────────
one   │  0.208253   0.107448   0.868488   0.246779
two   │  0.438798   0.247337   0.675561  0.06731512x1000 Named Array{Float64,2}
A ╲ B │           1            2  …          999         1000
──────┼──────────────────────────────────────────────────────
1     │    0.806144    -0.963404  …    0.0324203     -1.17115
2     │   -0.182989      0.89094  …    -0.370911    -0.1058441000x2 Named Array{Float64,2}
A ╲ B │          1           2
──────┼───────────────────────
1     │    1.35363   -0.656687
2     │    1.06288   -0.164518
3     │   0.172844    -1.78824
4     │  -0.341559     2.63125
5     │  -0.563352   -0.373969
6     │   -1.97146   -0.507425
7     │    0.65038     0.94555
8     │  -0.638948  -0.0832688
9     │  -0.189622    0.672959
⋮                ⋮           ⋮
992   │  -0.703395    0.712361
993   │   0.173365   0.0390399
994   │  0.0876908    0.141964
995   │    -1.2777     0.19385
996   │  -0.480075   -0.972581
997   │   0.391225   -0.834803
998   │   0.264963     1.28102
999   │  -0.594169     1.27403
1000  │   0.472986   0.09401971000-element Named Array{Float64,1}
A    │ 
─────┼──────────
1    │  0.472084
2    │ -0.172081
3    │ -0.396965
4    │   1.47623
5    │ -0.338355
6    │   1.78262
7    │  0.468452
8    │  0.187222
9    │   1.58313
⋮              ⋮
992  │   2.83363
993  │  0.018591
994  │  -1.14797
995  │   1.32808
996  │  -1.31256
997  │  0.319811
998  │  0.819691
999  │  -1.98661
1000 │ -0.2699772x2x2 Named Array{Float64,3}

[:, :, indexing=0] =
base ╲ zero │        0         1
────────────┼───────────────────
0           │ 0.829342  0.489236
1           │ 0.378848  0.879614

[:, :, indexing=1] =
base ╲ zero │        0         1
────────────┼───────────────────
0           │ 0.123877  0.382168
1           │ 0.113203  0.590867
2-element Named Array{Float64,1}
A  │ 
───┼─────────
1  │ 0.766332
2  │ 0.373103
2x2 Named Array{Float64,2}
A ╲ B │        1         2
──────┼───────────────────
1     │  0.95141  0.996097
2     │ 0.903137  0.332396
2x2x2 Named Array{Float64,3}

[:, :, C=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.201114  0.359409
2     │ 0.819843  0.258195

[:, :, C=2] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.642882  0.833027
2     │ 0.282829  0.911589
2x2x2x2 Named Array{Float64,4}

[:, :, C=1, D=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.475712  0.579846
2     │ 0.647752  0.353325

[:, :, C=2, D=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │  0.19495  0.649327
2     │  0.72469  0.420425

[:, :, C=1, D=2] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.845603  0.325406
2     │ 0.197708  0.267102

[:, :, C=2, D=2] =
A ╲ B │        1         2
──────┼───────────────────
1     │  0.64012  0.320101
2     │ 0.753198  0.175128
2x2x2x2x2 Named Array{Float64,5}

[:, :, C=1, D=1, E=1] =
A ╲ B │         1          2
──────┼─────────────────────
1     │ 0.0909747   0.785163
2     │  0.188633   0.674445

[:, :, C=2, D=1, E=1] =
A ╲ B │         1          2
──────┼─────────────────────
1     │  0.148621  0.0664715
2     │  0.295132    0.14927

[:, :, C=1, D=2, E=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.247868   0.64782
2     │ 0.169435  0.855127
⋮
1x2x2 Named Array{Float64,3}

[:, :, C=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.591299  0.852708

[:, :, C=2] =
A ╲ B │         1          2
──────┼─────────────────────
1     │   0.48258  0.0899191
2x1x2 Named Array{Float64,3}

[:, :, C=1] =
A ╲ B │        1
──────┼─────────
1     │ 0.318925
2     │ 0.155952

[:, :, C=2] =
A ╲ B │        1
──────┼─────────
1     │ 0.430461
2     │ 0.742629
2x2x1 Named Array{Float64,3}

[:, :, C=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.273118  0.175835
2     │  0.19155  0.288573
1000×1000 Named sparse matrix with 105 Float64 nonzero entries:
	[9833052444289127168 , 14304565767364922256]  =  0.08249987630520006
	[13867334145892551164, 17095493447719212504]  =  0.9138442571691041
	[17466052388280872253,  9283096199793891681]  =  0.9699994299633865
	[3590338872863214714 , 14995138918287078531]  =  0.1695659509603249
	[15589056775630200950,  4981387750669837953]  =  0.8738190336577281
	[2876475700534992100 ,   273396578563598247]  =  0.3657723052053179
	[5362270516586366302 ,  8265524791738013937]  =  0.7995670739791454
	[53689838181604040   ,  4329451781928897369]  =  0.7767995331251933
	                                              ⋮
	[8272770267567418222 ,  3014575823142358933]  =  0.27524460791970573
	[12459420750016908814,  3014575823142358933]  =  0.9198334381506375
	[10626898038408744182,  4214085865611670439]  =  0.8702182800941771
	[15436097664388839821,  1526691723863411160]  =  0.6232284522098999
	[13789993170142104254, 16365943061271568709]  =  0.44016356960079195
	[14296059709790261690, 16031689834122954645]  =  0.6928814998017596
	[2725232909516991235 ,  2758171916068192631]  =  0.6730652786172859
	[8600174387665261856 ,  2758171916068192631]  =  0.5398685595049888
	[10725201418295586676,  7519919299137062942]  =  0.855652241945311Timing named index: 5.1617e-5, array index: 0.00046497, named key: 0.0982128
Timing sum large sparse array: 0.007439096, named: 0.017769977
done!
INFO: NamedArrays tests passed

>>> End of log
