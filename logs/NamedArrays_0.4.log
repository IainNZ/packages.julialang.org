>>> 'Pkg.add("NamedArrays")' log
INFO: Cloning cache of NamedArrays from git://github.com/davidavdav/NamedArrays.jl.git
INFO: Installing Combinatorics v0.2.1
INFO: Installing DataStructures v0.5.3
INFO: Installing Iterators v0.3.1
INFO: Installing NamedArrays v0.5.3
INFO: Installing Polynomials v0.1.5
INFO: Package database updated

>>> 'Pkg.test("NamedArrays")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-121-generic #170-Ubuntu SMP Wed Jun 14 09:04:33 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (791.73828125 MB free)
Uptime: 14299.0 sec
Load Avg:  1.123046875  1.0615234375  1.046875
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz     672830 s       4959 s      61366 s     550173 s         18 s
#2  3499 MHz     456674 s       1468 s      53869 s     864038 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.9.1
 - NamedArrays                   0.5.3
5 additional packages:
 - Combinatorics                 0.2.1
 - Compat                        0.26.0
 - DataStructures                0.5.3
 - Iterators                     0.3.1
 - Polynomials                   0.1.5
INFO: Testing NamedArrays
Starting test, no assertions should fail... base, one	.840808948458881	.013730892408823747	.49675966377174996	.91345775311869
two	.004124271856520201	.5365111364486768	.7771743510938875	.6950526096525218
a	100
b	63
c	9
d	98
e	38
f	42
construction, 2x3 Named Array{Float64,2}
dim1 ╲ dim2 │         c          d          e
────────────┼────────────────────────────────
a           │  0.941529  0.0796305   0.826512
b           │  0.556383   0.537857   0.566404 0.9415285600670886 0.9415285600670886
2x3 Named Array{Float64,2}
A ╲ B │         c          d          e
──────┼────────────────────────────────
a     │  0.941529  0.0796305   0.826512
b     │  0.556383   0.537857   0.566404
2x3 Named Array{Float64,2}
dim1 ╲ dim2 │         c          d          e
────────────┼────────────────────────────────
a           │  0.941529  0.0796305   0.826512
b           │  0.556383   0.537857   0.566404
2x3 Named Array{Float64,2}
A ╲ B │         c          d          e
──────┼────────────────────────────────
a     │  0.941529  0.0796305   0.826512
b     │  0.556383   0.537857   0.566404
arithmetic, WARNING: Dropping mismatching names
WARNING: Dropping mismatching names
WARNING: Dropping mismatching names
WARNING: Dropping mismatching names
convert, WARNING: could not import Base.indices into Main
getindex, setindex, 2x4 Named Array{Float64,2}
magnificent ╲ 7 │       yi        er       san        si
────────────────┼───────────────────────────────────────
yi              │ 0.589221  0.740908  0.970514  0.290537
er              │ 0.538341  0.277617  0.494015    0.8577
hcat/vcat, copy, sum, conversions, changing names, multi-dimensional, dodgy indices, sort, broadcast, vectorized, re-arrange, eachindex, matrixops, show,
0-dimensional Named Array{Int64,0}
140554682428680
0-element Named Array{Any,1}

[0.6225788676130557 0.6586569168807739 0.7586990612041049 0.4660887212949023
 0.5770652566660075 0.22661202715308382 0.11963779843650024 0.887509082109821]
2x4 Named Array{Float64,2}
A ╲ B │        a         b         c         d
──────┼───────────────────────────────────────
one   │ 0.622579  0.658657  0.758699  0.466089
two   │ 0.577065  0.226612  0.119638  0.8875092x4 Named Array{Float64,2}
A ╲ B │        a         b         c         d
──────┼───────────────────────────────────────
one   │ 0.622579  0.658657  0.758699  0.466089
two   │ 0.577065  0.226612  0.119638  0.8875092x1000 Named Array{Float64,2}
A ╲ B │            1             2  …           999          1000
──────┼──────────────────────────────────────────────────────────
1     │    -0.763194      -1.66019  …      0.574836      0.880053
2     │     0.113517       1.01099  …     -0.626343     0.05269631000x2 Named Array{Float64,2}
A ╲ B │         1          2
──────┼─────────────────────
1     │   1.14929  0.0797723
2     │ -0.224024   0.579467
3     │  -2.27536   0.473253
4     │  0.176093   -1.57615
5     │   1.65797  -0.158003
6     │  0.587492  -0.208773
7     │  0.391587    3.46639
8     │  -1.34171   0.293117
9     │   -0.4766  -0.266618
⋮               ⋮          ⋮
992   │ 0.0316337   0.240206
993   │  0.371405  -0.241913
994   │  0.294939   -1.01498
995   │ -0.823632    2.22402
996   │  0.741931  -0.108089
997   │   1.31252  0.0693555
998   │   1.56877   -1.18719
999   │  -1.34592    1.61461
1000  │   1.06134   0.2098171000-element Named Array{Float64,1}
A    │ 
─────┼───────────
1    │  -0.295368
2    │  -0.992206
3    │  0.0962099
4    │   0.795144
5    │  -0.522463
6    │ -0.0999403
7    │  0.0407232
8    │   0.932465
9    │  -0.757329
⋮               ⋮
992  │   0.303839
993  │    1.01827
994  │  0.0496813
995  │   -1.42192
996  │  -0.431938
997  │    1.56171
998  │   0.405844
999  │  -0.669251
1000 │   -1.364152x2x2 Named Array{Float64,3}

[:, :, indexing=0] =
base ╲ zero │        0         1
────────────┼───────────────────
0           │ 0.420522  0.671614
1           │ 0.896221  0.382023

[:, :, indexing=1] =
base ╲ zero │         0          1
────────────┼─────────────────────
0           │  0.996677   0.444513
1           │ 0.0685801   0.207665
2-element Named Array{Float64,1}
A  │ 
───┼──────────
1  │ 0.0341521
2  │  0.557114
2x2 Named Array{Float64,2}
A ╲ B │         1          2
──────┼─────────────────────
1     │  0.883585   0.545924
2     │ 0.0403183   0.732453
2x2x2 Named Array{Float64,3}

[:, :, C=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │  0.53504  0.711696
2     │ 0.131175  0.384066

[:, :, C=2] =
A ╲ B │         1          2
──────┼─────────────────────
1     │  0.338035   0.326524
2     │  0.489383  0.0524446
2x2x2x2 Named Array{Float64,4}

[:, :, C=1, D=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │  0.66979  0.958065
2     │ 0.656196  0.537235

[:, :, C=2, D=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │  0.98536  0.739455
2     │ 0.768916  0.493358

[:, :, C=1, D=2] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.950946  0.858178
2     │  0.47587  0.131425

[:, :, C=2, D=2] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.989883  0.373763
2     │ 0.979585  0.638992
2x2x2x2x2 Named Array{Float64,5}

[:, :, C=1, D=1, E=1] =
A ╲ B │         1          2
──────┼─────────────────────
1     │ 0.0393744    0.21422
2     │  0.038596   0.329348

[:, :, C=2, D=1, E=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.807496  0.043281
2     │ 0.723562  0.861927

[:, :, C=1, D=2, E=1] =
A ╲ B │         1          2
──────┼─────────────────────
1     │  0.928854  0.0901566
2     │  0.868891   0.168408
⋮
1x2x2 Named Array{Float64,3}

[:, :, C=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.429364  0.527374

[:, :, C=2] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.362764  0.200508
2x1x2 Named Array{Float64,3}

[:, :, C=1] =
A ╲ B │        1
──────┼─────────
1     │ 0.848777
2     │   0.9346

[:, :, C=2] =
A ╲ B │        1
──────┼─────────
1     │ 0.347812
2     │  0.64872
2x2x1 Named Array{Float64,3}

[:, :, C=1] =
A ╲ B │         1          2
──────┼─────────────────────
1     │  0.882135  0.0605384
2     │  0.225468  0.0503486
1000×1000 Named sparse matrix with 98 Float64 nonzero entries:
	[3010300210541878305 , 14304565767364922256]  =  0.7236946894515632
	[4063711519745150262 ,  5004131969199419793]  =  0.23721313538912825
	[9307608947950104313 ,  6134978669850253296]  =  0.21384431315381058
	[1359987701312007394 , 10601912832305821454]  =  0.49883425302575213
	[1692321568384860970 ,  4786699431706339713]  =  0.5977777088643617
	[17434638896193218915,  5839463014734961202]  =  0.4879382898126472
	[2792827719799450558 ,  8351221943604278133]  =  0.16983695928192555
	[13440552775821083551,  2001767177420584454]  =  0.9246900457791121
	                                              ⋮
	[8794079702498558299 ,  6332455606016291123]  =  0.8258076610809608
	[11907679469289587679, 11711005111088208244]  =  0.19279133277955451
	[9690422262975321697 , 12169815624147734794]  =  0.5816500404928064
	[5312631360709731698 , 10663619072362037589]  =  0.8790642593264062
	[1626948139473082608 , 10655964431342481635]  =  0.42305500361221915
	[16077859356318100249, 14835807873575694564]  =  0.21383253466250762
	[5723128691850249417 , 16840404209865735426]  =  0.5009638613442602
	[16320645429046908531,  6565262192402102057]  =  0.7197572268937735
	[16406121832856650968,  2588469222286953884]  =  0.23130032335727546Timing named index: 0.000338724, array index: 0.000973432, named key: 0.134921595
Timing sum large sparse array: 0.010965306, named: 0.023218562
done!
INFO: NamedArrays tests passed

>>> End of log
