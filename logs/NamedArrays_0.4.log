>>> 'Pkg.add("NamedArrays")' log
INFO: Cloning cache of NamedArrays from git://github.com/davidavdav/NamedArrays.jl.git
INFO: Installing Combinatorics v0.2.1
INFO: Installing DataStructures v0.5.3
INFO: Installing Iterators v0.3.0
INFO: Installing NamedArrays v0.5.3
INFO: Installing Polynomials v0.1.5
INFO: Package database updated

>>> 'Pkg.test("NamedArrays")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-116-generic #163-Ubuntu SMP Fri Mar 31 14:13:22 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (803.30078125 MB free)
Uptime: 13232.0 sec
Load Avg:  0.9609375  0.94970703125  1.0078125
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz     612073 s       5552 s      58653 s     518013 s         26 s
#2  3500 MHz     430474 s       2640 s      53384 s     782873 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.9.0
 - NamedArrays                   0.5.3
5 additional packages:
 - Combinatorics                 0.2.1
 - Compat                        0.23.0
 - DataStructures                0.5.3
 - Iterators                     0.3.0
 - Polynomials                   0.1.5
INFO: Testing NamedArrays
Starting test, no assertions should fail... base, one	.39815703485297527	.7742744598693565	.7197730504329427	.4722665008364699
two	.2198463427034385	.8646469341271397	.013831960046833736	.008518544634838143
a	56
b	89
c	66
d	23
e	10
f	16
construction, 2x3 Named Array{Float64,2}
dim1 ╲ dim2 │        c         d         e
────────────┼─────────────────────────────
a           │ 0.542997   0.70291  0.824527
b           │ 0.291098   0.64028  0.702743 0.5429973556490895 0.5429973556490895
2x3 Named Array{Float64,2}
A ╲ B │        c         d         e
──────┼─────────────────────────────
a     │ 0.542997   0.70291  0.824527
b     │ 0.291098   0.64028  0.702743
2x3 Named Array{Float64,2}
dim1 ╲ dim2 │        c         d         e
────────────┼─────────────────────────────
a           │ 0.542997   0.70291  0.824527
b           │ 0.291098   0.64028  0.702743
2x3 Named Array{Float64,2}
A ╲ B │        c         d         e
──────┼─────────────────────────────
a     │ 0.542997   0.70291  0.824527
b     │ 0.291098   0.64028  0.702743
arithmetic, WARNING: Dropping mismatching names
WARNING: Dropping mismatching names
WARNING: Dropping mismatching names
WARNING: Dropping mismatching names
convert, WARNING: could not import Base.indices into Main
getindex, setindex, 2x4 Named Array{Float64,2}
magnificent ╲ 7 │        yi         er        san         si
────────────────┼───────────────────────────────────────────
yi              │ 0.0806768   0.977147   0.252009   0.559892
er              │  0.627525   0.980044   0.498441   0.242669
hcat/vcat, copy, sum, conversions, changing names, multi-dimensional, dodgy indices, sort, broadcast, vectorized, re-arrange, eachindex, matrixops, show,
0-dimensional Named Array{Int64,0}
139856596920672
0-element Named Array{Any,1}

[0.1464575795908234 0.3794295961136076 0.7558929109628718 0.553437892867719
 0.2542906345755316 0.8780661332556983 0.6423802599587378 0.3553265087032975]
2x4 Named Array{Float64,2}
A ╲ B │        a         b         c         d
──────┼───────────────────────────────────────
one   │ 0.146458   0.37943  0.755893  0.553438
two   │ 0.254291  0.878066   0.64238  0.3553272x4 Named Array{Float64,2}
A ╲ B │        a         b         c         d
──────┼───────────────────────────────────────
one   │ 0.146458   0.37943  0.755893  0.553438
two   │ 0.254291  0.878066   0.64238  0.3553272x1000 Named Array{Float64,2}
A ╲ B │            1             2  …           999          1000
──────┼──────────────────────────────────────────────────────────
1     │    -0.150493      -1.46039  …    -0.0721944    -0.0308943
2     │      1.09468      -1.17709  …      0.931725     -0.1409041000x2 Named Array{Float64,2}
A ╲ B │          1           2
──────┼───────────────────────
1     │   0.307713    0.695159
2     │  0.0904242    0.501718
3     │   0.696883   -0.527905
4     │   -1.12573   -0.886998
5     │   0.353374     3.87306
6     │   -1.54052    0.947509
7     │   0.112906    -1.68004
8     │  -0.499471  -0.0333888
9     │  0.0768015   -0.187024
⋮                ⋮           ⋮
992   │  -0.527414    0.277045
993   │   -1.00888    0.708961
994   │  -0.237195    -2.52623
995   │ -0.0277438   -0.671749
996   │    1.94808     1.42079
997   │   0.300003    0.748665
998   │   -2.18971   -0.785181
999   │    1.14528     1.14962
1000  │   -1.93813    -1.506651000-element Named Array{Float64,1}
A    │ 
─────┼──────────
1    │     1.536
2    │ -0.644923
3    │  0.614036
4    │  -1.22817
5    │  0.165077
6    │ 0.0181249
7    │  0.527162
8    │  0.181688
9    │  -1.34793
⋮              ⋮
992  │  -1.02982
993  │  0.114037
994  │   1.68594
995  │  -2.09776
996  │  0.535245
997  │   1.08765
998  │   1.53593
999  │ -0.103051
1000 │  -1.203692x2x2 Named Array{Float64,3}

[:, :, indexing=0] =
base ╲ zero │        0         1
────────────┼───────────────────
0           │ 0.592069  0.383719
1           │ 0.493669  0.107547

[:, :, indexing=1] =
base ╲ zero │        0         1
────────────┼───────────────────
0           │ 0.116243  0.487996
1           │ 0.832654  0.431672
2-element Named Array{Float64,1}
A  │ 
───┼─────────
1  │ 0.159965
2  │ 0.104036
2x2 Named Array{Float64,2}
A ╲ B │         1          2
──────┼─────────────────────
1     │ 0.0135401   0.583405
2     │  0.544008   0.374637
2x2x2 Named Array{Float64,3}

[:, :, C=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.582861  0.479742
2     │ 0.953894  0.257379

[:, :, C=2] =
A ╲ B │         1          2
──────┼─────────────────────
1     │ 0.0511681   0.328598
2     │  0.830724  0.0762819
2x2x2x2 Named Array{Float64,4}

[:, :, C=1, D=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.593321  0.685839
2     │ 0.349475  0.770638

[:, :, C=2, D=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.720604  0.223504
2     │ 0.148511  0.160403

[:, :, C=1, D=2] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.209655   0.51325
2     │ 0.325872  0.406732

[:, :, C=2, D=2] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.490304  0.703891
2     │  0.83496  0.995576
2x2x2x2x2 Named Array{Float64,5}

[:, :, C=1, D=1, E=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.328606  0.101335
2     │ 0.433259  0.640044

[:, :, C=2, D=1, E=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │  0.62248  0.824128
2     │ 0.558195  0.300391

[:, :, C=1, D=2, E=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.520601   0.54907
2     │ 0.264804   0.37436
⋮
1x2x2 Named Array{Float64,3}

[:, :, C=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │  0.71451  0.184534

[:, :, C=2] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.606287  0.902284
2x1x2 Named Array{Float64,3}

[:, :, C=1] =
A ╲ B │        1
──────┼─────────
1     │ 0.887889
2     │ 0.696685

[:, :, C=2] =
A ╲ B │        1
──────┼─────────
1     │ 0.929741
2     │ 0.878172
2x2x1 Named Array{Float64,3}

[:, :, C=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.207121  0.366561
2     │ 0.629618  0.668109
1000×1000 Named sparse matrix with 95 Float64 nonzero entries:
	[18332460987873573245, 16462243977607957471]  =  0.11572721623264748
	[8538437388973856756 , 16462243977607957471]  =  0.9186538969909643
	[9870978712100122380 , 16462243977607957471]  =  0.6437113899896729
	[9690422262975321697 ,   592365234179887848]  =  0.1464515920402658
	[212886737595870541  ,   592365234179887848]  =  0.4451634903468584
	[16252401167029097910,  5723128691850249417]  =  0.42791839387035724
	[7608520278977511969 , 16621507366152005377]  =  0.8950219674782038
	[14026963558639697815,  7242692203416363180]  =  0.6006912731504981
	                                              ⋮
	[11470862121108514714, 17401827539426951865]  =  0.443732410224416
	[4843503160950653737 , 16655780295490676025]  =  0.7407904601417798
	[10685333727101695973, 11641483179283066996]  =  0.8649399532945579
	[11024660093340930346,   372001016642560619]  =  0.7363169871389454
	[4194711704772932182 , 10024080200852233627]  =  0.304459374032402
	[11581033251142794164,  1523061068178304284]  =  0.3226688575934131
	[10469764766191980213,  1842419535934980543]  =  0.9875245192954258
	[5629102263838832842 , 16202651256804923129]  =  0.9350053853220839
	[1359987701312007394 , 16202651256804923129]  =  0.7129657973929973Timing named index: 0.000736632, array index: 0.000493952, named key: 0.072895726
Timing sum large sparse array: 0.009578763, named: 0.021241384
done!
INFO: NamedArrays tests passed

>>> End of log
