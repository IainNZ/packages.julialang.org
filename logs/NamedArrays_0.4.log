>>> 'Pkg.add("NamedArrays")' log
INFO: Cloning cache of NamedArrays from git://github.com/davidavdav/NamedArrays.jl.git
INFO: Installing Combinatorics v0.2.1
INFO: Installing DataStructures v0.5.3
INFO: Installing Iterators v0.3.1
INFO: Installing NamedArrays v0.5.3
INFO: Installing Polynomials v0.1.5
INFO: Package database updated

>>> 'Pkg.test("NamedArrays")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-119-generic #166-Ubuntu SMP Wed May 3 12:18:55 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (854.1640625 MB free)
Uptime: 13953.0 sec
Load Avg:  0.98974609375  0.9609375  0.974609375
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz     654348 s       1653 s      54358 s     541774 s         23 s
#2  3500 MHz     466221 s       4444 s      46452 s     832695 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.9.1
 - NamedArrays                   0.5.3
5 additional packages:
 - Combinatorics                 0.2.1
 - Compat                        0.26.0
 - DataStructures                0.5.3
 - Iterators                     0.3.1
 - Polynomials                   0.1.5
INFO: Testing NamedArrays
Starting test, no assertions should fail... base, one	.9448687180337847	.3492511455225431	.17119192328824484	.4435115385539201
two	.37589641819624764	.15446499828306903	.11101369849385834	.888304109780752
a	2
b	68
c	19
d	24
e	38
f	98
construction, 2x3 Named Array{Float64,2}
dim1 ╲ dim2 │        c         d         e
────────────┼─────────────────────────────
a           │  0.44308  0.557828  0.772619
b           │ 0.724344  0.673664  0.517246 0.44307997890280815 0.44307997890280815
2x3 Named Array{Float64,2}
A ╲ B │        c         d         e
──────┼─────────────────────────────
a     │  0.44308  0.557828  0.772619
b     │ 0.724344  0.673664  0.517246
2x3 Named Array{Float64,2}
dim1 ╲ dim2 │        c         d         e
────────────┼─────────────────────────────
a           │  0.44308  0.557828  0.772619
b           │ 0.724344  0.673664  0.517246
2x3 Named Array{Float64,2}
A ╲ B │        c         d         e
──────┼─────────────────────────────
a     │  0.44308  0.557828  0.772619
b     │ 0.724344  0.673664  0.517246
arithmetic, WARNING: Dropping mismatching names
WARNING: Dropping mismatching names
WARNING: Dropping mismatching names
WARNING: Dropping mismatching names
convert, WARNING: could not import Base.indices into Main
getindex, setindex, 2x4 Named Array{Float64,2}
magnificent ╲ 7 │        yi         er        san         si
────────────────┼───────────────────────────────────────────
yi              │  0.844689   0.109617   0.304624   0.144613
er              │  0.893568   0.177397   0.783897  0.0776576
hcat/vcat, copy, sum, conversions, changing names, multi-dimensional, dodgy indices, sort, broadcast, vectorized, re-arrange, eachindex, matrixops, show,
0-dimensional Named Array{Int64,0}
140650812552736
0-element Named Array{Any,1}

[0.19246485242929912 0.023257606564360378 0.05652337590121759 0.8272425315253431
 0.2897558248420433 0.7670829264275094 0.8060101010070668 0.701513445156926]
2x4 Named Array{Float64,2}
A ╲ B │         a          b          c          d
──────┼───────────────────────────────────────────
one   │  0.192465  0.0232576  0.0565234   0.827243
two   │  0.289756   0.767083    0.80601   0.7015132x4 Named Array{Float64,2}
A ╲ B │         a          b          c          d
──────┼───────────────────────────────────────────
one   │  0.192465  0.0232576  0.0565234   0.827243
two   │  0.289756   0.767083    0.80601   0.7015132x1000 Named Array{Float64,2}
A ╲ B │            1             2  …           999          1000
──────┼──────────────────────────────────────────────────────────
1     │     -1.79182       1.06347  …      0.298175      0.787313
2     │     -2.23155       1.72106  …      -1.47286      0.4310481000x2 Named Array{Float64,2}
A ╲ B │         1          2
──────┼─────────────────────
1     │  0.208717   -1.64807
2     │  -1.40532  -0.635396
3     │ -0.537799  -0.334876
4     │   1.06262    2.06979
5     │    1.3586    1.10582
6     │   1.23196  -0.844016
7     │  -2.26771   -1.53986
8     │   1.15907    1.10376
9     │  0.121748  -0.792707
⋮               ⋮          ⋮
992   │  -2.38663   -1.53197
993   │ -0.718993  -0.858508
994   │  0.579307  -0.282338
995   │ -0.535443   -0.46543
996   │   1.15531   0.477084
997   │  -1.40956   -1.13761
998   │ -0.233176   0.122203
999   │  0.597076    1.47145
1000  │  -1.09219   0.3454931000-element Named Array{Float64,1}
A    │ 
─────┼───────────
1    │   0.410805
2    │     2.1913
3    │    1.61314
4    │   0.147377
5    │    1.84549
6    │  -0.301027
7    │   0.516344
8    │    0.85004
9    │    1.04544
⋮               ⋮
992  │   -0.17094
993  │   0.421254
994  │   -1.09825
995  │   0.565094
996  │ 0.00356985
997  │  -0.144496
998  │   -1.07225
999  │  -0.706263
1000 │   0.9269032x2x2 Named Array{Float64,3}

[:, :, indexing=0] =
base ╲ zero │        0         1
────────────┼───────────────────
0           │ 0.444763  0.906501
1           │ 0.253021  0.652547

[:, :, indexing=1] =
base ╲ zero │         0          1
────────────┼─────────────────────
0           │  0.750616  0.0107051
1           │  0.469439   0.829612
2-element Named Array{Float64,1}
A  │ 
───┼─────────
1  │ 0.585197
2  │ 0.692806
2x2 Named Array{Float64,2}
A ╲ B │         1          2
──────┼─────────────────────
1     │ 0.0871941    0.79664
2     │   0.35628   0.842852
2x2x2 Named Array{Float64,3}

[:, :, C=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.661874  0.515255
2     │ 0.184823  0.887645

[:, :, C=2] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.942409  0.804866
2     │ 0.164597  0.397129
2x2x2x2 Named Array{Float64,4}

[:, :, C=1, D=1] =
A ╲ B │         1          2
──────┼─────────────────────
1     │  0.460874  0.0721624
2     │   0.61002  0.0637712

[:, :, C=2, D=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.617555  0.908476
2     │ 0.562528   0.54268

[:, :, C=1, D=2] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.252263  0.860078
2     │ 0.416331  0.771555

[:, :, C=2, D=2] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.215295   0.20258
2     │ 0.759315  0.535926
2x2x2x2x2 Named Array{Float64,5}

[:, :, C=1, D=1, E=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.632936  0.969521
2     │ 0.266048  0.307366

[:, :, C=2, D=1, E=1] =
A ╲ B │         1          2
──────┼─────────────────────
1     │ 0.0267874   0.951064
2     │  0.245561   0.294728

[:, :, C=1, D=2, E=1] =
A ╲ B │         1          2
──────┼─────────────────────
1     │  0.558186   0.752526
2     │  0.668192  0.0228838
⋮
1x2x2 Named Array{Float64,3}

[:, :, C=1] =
A ╲ B │         1          2
──────┼─────────────────────
1     │ 0.0891828   0.477631

[:, :, C=2] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.640988  0.741006
2x1x2 Named Array{Float64,3}

[:, :, C=1] =
A ╲ B │        1
──────┼─────────
1     │ 0.957142
2     │ 0.194718

[:, :, C=2] =
A ╲ B │        1
──────┼─────────
1     │ 0.757805
2     │ 0.607413
2x2x1 Named Array{Float64,3}

[:, :, C=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.327612  0.912854
2     │ 0.201181  0.676288
1000×1000 Named sparse matrix with 86 Float64 nonzero entries:
	[5887916164234050841 ,  8699333159457747740]  =  0.2947458622761403
	[3065944537250428989 , 16462243977607957471]  =  0.6030758410578363
	[4682100877033407764 ,  8069307267129313135]  =  0.7201653751870201
	[13864621993906192564, 12295598998729798629]  =  0.29585534142812175
	[4721490707364992361 ,  5723128691850249417]  =  0.7292220405023226
	[8340722336334766600 ,  8265524791738013937]  =  0.3907284710930301
	[17742935406460696265,   281356413667926651]  =  0.3021576652933664
	[615289593087278592  ,   281356413667926651]  =  0.5430397642460429
	                                              ⋮
	[17153933318764010614, 16077859356318100249]  =  0.26360024566116147
	[187013141495975231  , 11641483179283066996]  =  0.5590701648150729
	[7011600752848376140 , 17718833055079784125]  =  0.35545342763963106
	[15624079346807366426, 14057278280866812536]  =  0.1292528153428545
	[11250402503384658013,  9223427034658990711]  =  0.8898307572433528
	[7199089960335318010 , 14835807873575694564]  =  0.8006456483491355
	[11594286046942303904, 12020782256748308824]  =  0.39560783395910826
	[970153514192176690  ,  3010300210541878305]  =  0.30658169038181105
	[18108419761126805734, 13950575499123628905]  =  0.8871946158231214Timing named index: 0.000750043, array index: 0.000500316, named key: 0.116317774
Timing sum large sparse array: 0.007121772, named: 0.01481483
done!
INFO: NamedArrays tests passed

>>> End of log
