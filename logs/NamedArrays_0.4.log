>>> 'Pkg.add("NamedArrays")' log
INFO: Cloning cache of NamedArrays from git://github.com/davidavdav/NamedArrays.jl.git
INFO: Installing Combinatorics v0.2.1
INFO: Installing DataStructures v0.5.3
INFO: Installing Iterators v0.3.1
INFO: Installing NamedArrays v0.5.3
INFO: Installing Polynomials v0.1.5
INFO: Package database updated

>>> 'Pkg.test("NamedArrays")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-117-generic #164-Ubuntu SMP Fri Apr 7 11:05:26 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (747.40234375 MB free)
Uptime: 13575.0 sec
Load Avg:  0.986328125  0.974609375  1.01904296875
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3495 MHz     621496 s       5669 s      50908 s     547917 s         19 s
#2  3495 MHz     429756 s       1162 s      43473 s     839874 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.9.1
 - NamedArrays                   0.5.3
5 additional packages:
 - Combinatorics                 0.2.1
 - Compat                        0.24.0
 - DataStructures                0.5.3
 - Iterators                     0.3.1
 - Polynomials                   0.1.5
INFO: Testing NamedArrays
Starting test, no assertions should fail... base, one	.31294175231455945	.5018195755334285	.44133760239740916	.49289988567892484
two	.5827322219696265	.2614588870040291	.05460998469062717	.57146533185109
a	23
b	32
c	30
d	54
e	66
f	20
construction, 2x3 Named Array{Float64,2}
dim1 ╲ dim2 │        c         d         e
────────────┼─────────────────────────────
a           │  0.43872  0.493464  0.257004
b           │ 0.127955  0.898848  0.572536 0.4387198085977244 0.4387198085977244
2x3 Named Array{Float64,2}
A ╲ B │        c         d         e
──────┼─────────────────────────────
a     │  0.43872  0.493464  0.257004
b     │ 0.127955  0.898848  0.572536
2x3 Named Array{Float64,2}
dim1 ╲ dim2 │        c         d         e
────────────┼─────────────────────────────
a           │  0.43872  0.493464  0.257004
b           │ 0.127955  0.898848  0.572536
2x3 Named Array{Float64,2}
A ╲ B │        c         d         e
──────┼─────────────────────────────
a     │  0.43872  0.493464  0.257004
b     │ 0.127955  0.898848  0.572536
arithmetic, WARNING: Dropping mismatching names
WARNING: Dropping mismatching names
WARNING: Dropping mismatching names
WARNING: Dropping mismatching names
convert, WARNING: could not import Base.indices into Main
getindex, setindex, 2x4 Named Array{Float64,2}
magnificent ╲ 7 │        yi         er        san         si
────────────────┼───────────────────────────────────────────
yi              │  0.769094   0.404437   0.383374    0.63505
er              │  0.624691   0.632909   0.675331  0.0434454
hcat/vcat, copy, sum, conversions, changing names, multi-dimensional, dodgy indices, sort, broadcast, vectorized, re-arrange, eachindex, matrixops, show,
0-dimensional Named Array{Int64,0}
140165893581544
0-element Named Array{Any,1}

[0.6499360941914338 0.770340010840336 0.23614500824185303 0.3223494995243228
 0.7768903647833503 0.6357889736789484 0.3135505262570095 0.7568386812390768]
2x4 Named Array{Float64,2}
A ╲ B │        a         b         c         d
──────┼───────────────────────────────────────
one   │ 0.649936   0.77034  0.236145  0.322349
two   │  0.77689  0.635789  0.313551  0.7568392x4 Named Array{Float64,2}
A ╲ B │        a         b         c         d
──────┼───────────────────────────────────────
one   │ 0.649936   0.77034  0.236145  0.322349
two   │  0.77689  0.635789  0.313551  0.7568392x1000 Named Array{Float64,2}
A ╲ B │           1            2  …          999         1000
──────┼──────────────────────────────────────────────────────
1     │    0.516374    -0.623055  …      1.13357     0.428436
2     │    0.293395    -0.270917  …     0.366106      -1.80541000x2 Named Array{Float64,2}
A ╲ B │           1            2
──────┼─────────────────────────
1     │    0.280674      1.51138
2     │   -0.624047     -1.88424
3     │     1.30145  -0.00764032
4     │   -0.419602     -1.54387
5     │    0.559192    -0.117654
6     │   -0.077472     -1.37075
7     │    -0.49529    -0.770279
8     │     1.11388     0.113528
9     │   -0.246054     0.173782
⋮                 ⋮            ⋮
992   │    -0.56797     -2.43259
993   │     1.75946    -0.297603
994   │    -1.61461     -1.34507
995   │     1.76222      1.73914
996   │    0.410671     -0.87916
997   │     1.03862      2.19443
998   │    -1.95105     -2.09882
999   │    -1.18181    -0.823149
1000  │   -0.606028    -0.5356271000-element Named Array{Float64,1}
A    │ 
─────┼──────────
1    │ 0.0790648
2    │ -0.541896
3    │  0.194596
4    │ -0.465408
5    │ -0.269503
6    │   1.05533
7    │   -1.3759
8    │   1.41907
9    │  -1.69822
⋮              ⋮
992  │ -0.737186
993  │  -1.63131
994  │  0.283919
995  │   -2.0307
996  │ -0.842138
997  │   0.87139
998  │  0.892289
999  │  0.649125
1000 │ -0.9667592x2x2 Named Array{Float64,3}

[:, :, indexing=0] =
base ╲ zero │        0         1
────────────┼───────────────────
0           │ 0.280416  0.556659
1           │ 0.475743   0.10166

[:, :, indexing=1] =
base ╲ zero │        0         1
────────────┼───────────────────
0           │ 0.637452  0.801459
1           │ 0.995789  0.104551
2-element Named Array{Float64,1}
A  │ 
───┼─────────
1  │ 0.874421
2  │ 0.576523
2x2 Named Array{Float64,2}
A ╲ B │         1          2
──────┼─────────────────────
1     │  0.212524    0.39546
2     │  0.990512  0.0244799
2x2x2 Named Array{Float64,3}

[:, :, C=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.296831  0.393538
2     │ 0.013864  0.824778

[:, :, C=2] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.914475  0.969398
2     │ 0.269304   0.29262
2x2x2x2 Named Array{Float64,4}

[:, :, C=1, D=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.673266  0.587155
2     │ 0.557167  0.761501

[:, :, C=2, D=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.255926  0.360768
2     │  0.21569  0.301452

[:, :, C=1, D=2] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.751214  0.391204
2     │ 0.626263  0.392914

[:, :, C=2, D=2] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.471791  0.976288
2     │ 0.355247  0.381726
2x2x2x2x2 Named Array{Float64,5}

[:, :, C=1, D=1, E=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.586126  0.579825
2     │  0.18139   0.88147

[:, :, C=2, D=1, E=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.258552  0.690981
2     │ 0.919475  0.507608

[:, :, C=1, D=2, E=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.546331  0.461522
2     │ 0.453668  0.528506
⋮
1x2x2 Named Array{Float64,3}

[:, :, C=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.916997  0.227901

[:, :, C=2] =
A ╲ B │         1          2
──────┼─────────────────────
1     │ 0.0178774   0.494403
2x1x2 Named Array{Float64,3}

[:, :, C=1] =
A ╲ B │        1
──────┼─────────
1     │ 0.622923
2     │ 0.329144

[:, :, C=2] =
A ╲ B │        1
──────┼─────────
1     │ 0.656065
2     │ 0.645404
2x2x1 Named Array{Float64,3}

[:, :, C=1] =
A ╲ B │          1           2
──────┼───────────────────────
1     │ 0.00251483   0.0821646
2     │   0.576697   0.0857543
1000×1000 Named sparse matrix with 115 Float64 nonzero entries:
	[17737936919457265947,   592365234179887848]  =  0.12957307398451068
	[6468689935112619700 , 14066869468942639955]  =  0.275898753744946
	[16909640532418341430,  9283096199793891681]  =  0.8062181011410781
	[10981095045923005722,  2849690884155085581]  =  0.94213404314138
	[11544136240443520407, 10601912832305821454]  =  0.5919338457685139
	[12459814376862134316, 16246598853062742192]  =  0.19876495217262025
	[13465652674533777795, 16408863325498676967]  =  0.40494744234515445
	[12816414689028723218,   906960604709401733]  =  0.7001206167138483
	                                              ⋮
	[10647878191897777347, 10725201418295586676]  =  0.7686659440682182
	[4099991848953537601 ,  3014575823142358933]  =  0.8800063599853314
	[16149616971335246819, 12459420750016908814]  =  0.6744497317619638
	[12023328037222515112, 15717097331822026300]  =  0.12715755616406055
	[12261945819890682800,  7608520278977511969]  =  0.9020702730890509
	[14340416566338039723,  2117445326293199079]  =  0.5002477310531914
	[1526691723863411160 ,  4214085865611670439]  =  0.517730424400358
	[16583690740438463922, 14057278280866812536]  =  0.5094518269028308
	[849947749456312673  ,  6565262192402102057]  =  0.6791050520456388Timing named index: 0.000616887, array index: 0.000416153, named key: 0.071006151
Timing sum large sparse array: 0.006122109, named: 0.012613202
done!
INFO: NamedArrays tests passed

>>> End of log
