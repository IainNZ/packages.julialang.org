>>> 'Pkg.add("NamedArrays")' log
INFO: Cloning cache of NamedArrays from git://github.com/davidavdav/NamedArrays.jl.git
INFO: Installing Combinatorics v0.2.1
INFO: Installing DataStructures v0.5.3
INFO: Installing Iterators v0.3.1
INFO: Installing NamedArrays v0.5.3
INFO: Installing Polynomials v0.1.5
INFO: Package database updated

>>> 'Pkg.test("NamedArrays")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-121-generic #170-Ubuntu SMP Wed Jun 14 09:04:33 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (854.5625 MB free)
Uptime: 13933.0 sec
Load Avg:  0.9541015625  0.95068359375  0.99853515625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz     665952 s       4262 s      55798 s     517819 s         28 s
#2  3500 MHz     455575 s       2623 s      46760 s     835178 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.9.1
 - NamedArrays                   0.5.3
5 additional packages:
 - Combinatorics                 0.2.1
 - Compat                        0.26.0
 - DataStructures                0.5.3
 - Iterators                     0.3.1
 - Polynomials                   0.1.5
INFO: Testing NamedArrays
Starting test, no assertions should fail... base, one	.7712459434386725	.3331198103048185	.5398517700553072	.1733723199053232
two	.9365154819491617	.29298753318732373	.5476979233455008	.5757027381290696
a	10
b	6
c	46
d	13
e	20
f	35
construction, 2x3 Named Array{Float64,2}
dim1 ╲ dim2 │         c          d          e
────────────┼────────────────────────────────
a           │  0.994319   0.139879   0.513821
b           │  0.660731   0.768802  0.0820595 0.9943190594155071 0.9943190594155071
2x3 Named Array{Float64,2}
A ╲ B │         c          d          e
──────┼────────────────────────────────
a     │  0.994319   0.139879   0.513821
b     │  0.660731   0.768802  0.0820595
2x3 Named Array{Float64,2}
dim1 ╲ dim2 │         c          d          e
────────────┼────────────────────────────────
a           │  0.994319   0.139879   0.513821
b           │  0.660731   0.768802  0.0820595
2x3 Named Array{Float64,2}
A ╲ B │         c          d          e
──────┼────────────────────────────────
a     │  0.994319   0.139879   0.513821
b     │  0.660731   0.768802  0.0820595
arithmetic, WARNING: Dropping mismatching names
WARNING: Dropping mismatching names
WARNING: Dropping mismatching names
WARNING: Dropping mismatching names
convert, WARNING: could not import Base.indices into Main
getindex, setindex, 2x4 Named Array{Float64,2}
magnificent ╲ 7 │       yi        er       san        si
────────────────┼───────────────────────────────────────
yi              │ 0.995521  0.817803  0.575142  0.438743
er              │ 0.653703  0.902561  0.635203  0.674771
hcat/vcat, copy, sum, conversions, changing names, multi-dimensional, dodgy indices, sort, broadcast, vectorized, re-arrange, eachindex, matrixops, show,
0-dimensional Named Array{Int64,0}
139796558542752
0-element Named Array{Any,1}

[0.13458962034089472 0.12225963977321408 0.9244957895043786 0.7689252395738384
 0.8262589100919027 0.37430830839008444 0.6583845716107457 0.19006981586286775]
2x4 Named Array{Float64,2}
A ╲ B │        a         b         c         d
──────┼───────────────────────────────────────
one   │  0.13459   0.12226  0.924496  0.768925
two   │ 0.826259  0.374308  0.658385   0.190072x4 Named Array{Float64,2}
A ╲ B │        a         b         c         d
──────┼───────────────────────────────────────
one   │  0.13459   0.12226  0.924496  0.768925
two   │ 0.826259  0.374308  0.658385   0.190072x1000 Named Array{Float64,2}
A ╲ B │            1             2  …           999          1000
──────┼──────────────────────────────────────────────────────────
1     │     -1.36748      0.165427  …       -1.5388      0.835591
2     │     0.585776     -0.313431  …      0.464865     -0.9451751000x2 Named Array{Float64,2}
A ╲ B │          1           2
──────┼───────────────────────
1     │    1.58394     1.29599
2     │   0.558485   -0.658022
3     │ -0.0890919    -1.77945
4     │   0.437451     0.33662
5     │   0.253539   -0.818621
6     │   -1.60467     1.70246
7     │  -0.706161      1.7706
8     │   0.502346    0.413231
9     │  -0.457451    -1.02967
⋮                ⋮           ⋮
992   │   -1.48757    0.962937
993   │     0.4646     0.88447
994   │    -1.1543    0.451421
995   │  -0.968699    -1.39285
996   │   0.200747     0.31662
997   │    -1.1553     0.27861
998   │   0.723308    -2.06457
999   │    1.54613   -0.346955
1000  │   0.332217    0.6292261000-element Named Array{Float64,1}
A    │ 
─────┼──────────
1    │ -0.695897
2    │  -1.08879
3    │   1.22654
4    │   2.28019
5    │  0.868915
6    │  -1.08586
7    │ -0.271058
8    │   2.32313
9    │   -1.5288
⋮              ⋮
992  │  0.281391
993  │  -0.68448
994  │    1.1008
995  │ -0.363835
996  │  0.863573
997  │ -0.367396
998  │ -0.843028
999  │   -1.1349
1000 │  0.9716172x2x2 Named Array{Float64,3}

[:, :, indexing=0] =
base ╲ zero │        0         1
────────────┼───────────────────
0           │ 0.292078  0.224433
1           │ 0.551431   0.92956

[:, :, indexing=1] =
base ╲ zero │         0          1
────────────┼─────────────────────
0           │  0.682995  0.0996766
1           │  0.779886   0.372768
2-element Named Array{Float64,1}
A  │ 
───┼─────────
1  │  0.82144
2  │ 0.912456
2x2 Named Array{Float64,2}
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.947268  0.925729
2     │ 0.943882  0.881091
2x2x2 Named Array{Float64,3}

[:, :, C=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │  0.95107   0.12201
2     │ 0.715326  0.696747

[:, :, C=2] =
A ╲ B │         1          2
──────┼─────────────────────
1     │ 0.0482543   0.685502
2     │  0.831471   0.290775
2x2x2x2 Named Array{Float64,4}

[:, :, C=1, D=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.494873  0.654704
2     │ 0.221624  0.434785

[:, :, C=2, D=1] =
A ╲ B │         1          2
──────┼─────────────────────
1     │ 0.0146442  0.0272455
2     │  0.396989   0.297519

[:, :, C=1, D=2] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.867695  0.293964
2     │ 0.681136  0.888537

[:, :, C=2, D=2] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.775131  0.521732
2     │  0.76178  0.543586
2x2x2x2x2 Named Array{Float64,5}

[:, :, C=1, D=1, E=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.643056  0.813441
2     │ 0.485005  0.840906

[:, :, C=2, D=1, E=1] =
A ╲ B │         1          2
──────┼─────────────────────
1     │  0.875209   0.490804
2     │  0.918619  0.0017547

[:, :, C=1, D=2, E=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │  0.22181  0.150154
2     │ 0.144044  0.668876
⋮
1x2x2 Named Array{Float64,3}

[:, :, C=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.220712  0.714797

[:, :, C=2] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.982628  0.717621
2x1x2 Named Array{Float64,3}

[:, :, C=1] =
A ╲ B │        1
──────┼─────────
1     │  0.33857
2     │ 0.457106

[:, :, C=2] =
A ╲ B │        1
──────┼─────────
1     │ 0.139973
2     │ 0.245048
2x2x1 Named Array{Float64,3}

[:, :, C=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.795022  0.622382
2     │ 0.674238  0.386689
1000×1000 Named sparse matrix with 113 Float64 nonzero entries:
	[17418510937611012500,  9690422262975321697]  =  0.8494175841948146
	[3745600506804314987 ,  6564272639106249010]  =  0.7392513613680076
	[8069307267129313135 , 12419957900638875901]  =  0.5398734531259513
	[12624682912995533025,  5927176887743683346]  =  0.30656639126711127
	[2971581029604614559 ,   592365234179887848]  =  0.2637935074292681
	[14027562189529080231,  4247719799217886270]  =  0.6166565286696599
	[4553087567028739273 , 14066869468942639955]  =  0.1478708527174062
	[1177457170591155921 , 10361072080411987344]  =  0.09806550028797756
	                                              ⋮
	[11355399569336610079, 11732026533134275955]  =  0.10642894116161106
	[10370911177498520402,  3014575823142358933]  =  0.6406048670399704
	[17928760137377702946, 15717097331822026300]  =  0.887433422563338
	[11568453395938084092, 15436097664388839821]  =  0.6294821708526812
	[16077031779703164343, 18148906667482527649]  =  0.3478163337869902
	[3726791872555742705 ,  9526342322394325946]  =  0.9254044770348726
	[4843503160950653737 , 13970367575607681105]  =  0.07635383294379117
	[4083684169156455281 ,  7957587899775749890]  =  0.6672805886209277
	[4494612503536197367 , 13690505415342562739]  =  0.8556269730339399Timing named index: 0.000802247, array index: 0.000759016, named key: 0.132319899
Timing sum large sparse array: 0.011771795, named: 0.026739825
done!
INFO: NamedArrays tests passed

>>> End of log
