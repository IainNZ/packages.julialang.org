>>> 'Pkg.add("NamedArrays")' log
INFO: Cloning cache of NamedArrays from git://github.com/davidavdav/NamedArrays.jl.git
INFO: Installing Combinatorics v0.2.1
INFO: Installing DataStructures v0.5.3
INFO: Installing Iterators v0.3.0
INFO: Installing NamedArrays v0.5.3
INFO: Installing Polynomials v0.1.5
INFO: Package database updated

>>> 'Pkg.test("NamedArrays")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-116-generic #163-Ubuntu SMP Fri Mar 31 14:13:22 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (809.6015625 MB free)
Uptime: 13491.0 sec
Load Avg:  1.021484375  0.99365234375  1.0185546875
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz     647668 s       1153 s      59759 s     502647 s         28 s
#2  3500 MHz     393856 s       5414 s      53776 s     849235 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.9.0
 - NamedArrays                   0.5.3
5 additional packages:
 - Combinatorics                 0.2.1
 - Compat                        0.24.0
 - DataStructures                0.5.3
 - Iterators                     0.3.0
 - Polynomials                   0.1.5
INFO: Testing NamedArrays
Starting test, no assertions should fail... base, one	.683570997257704	.36149226865230966	.6644475397194443	.7414963593308179
two	.8162930179325665	.2907693545928016	.6584767421289786	.7033954975185399
a	99
b	17
c	46
d	47
e	81
f	31
construction, 2x3 Named Array{Float64,2}
dim1 ╲ dim2 │        c         d         e
────────────┼─────────────────────────────
a           │ 0.853123  0.836638  0.298374
b           │ 0.632302   0.65669  0.904627 0.8531229273979741 0.8531229273979741
2x3 Named Array{Float64,2}
A ╲ B │        c         d         e
──────┼─────────────────────────────
a     │ 0.853123  0.836638  0.298374
b     │ 0.632302   0.65669  0.904627
2x3 Named Array{Float64,2}
dim1 ╲ dim2 │        c         d         e
────────────┼─────────────────────────────
a           │ 0.853123  0.836638  0.298374
b           │ 0.632302   0.65669  0.904627
2x3 Named Array{Float64,2}
A ╲ B │        c         d         e
──────┼─────────────────────────────
a     │ 0.853123  0.836638  0.298374
b     │ 0.632302   0.65669  0.904627
arithmetic, WARNING: Dropping mismatching names
WARNING: Dropping mismatching names
WARNING: Dropping mismatching names
WARNING: Dropping mismatching names
convert, WARNING: could not import Base.indices into Main
getindex, setindex, 2x4 Named Array{Float64,2}
magnificent ╲ 7 │        yi         er        san         si
────────────────┼───────────────────────────────────────────
yi              │  0.023543   0.668957   0.317836   0.320301
er              │  0.878498   0.916375  0.0591754   0.780676
hcat/vcat, copy, sum, conversions, changing names, multi-dimensional, dodgy indices, sort, broadcast, vectorized, re-arrange, eachindex, matrixops, show,
0-dimensional Named Array{Int64,0}
140199294720208
0-element Named Array{Any,1}

[0.7506632725670097 0.27236607200305984 0.7626075462289061 0.566912165507697
 0.3831185601641567 0.8175932722707955 0.3922153014315697 0.23821372386700124]
2x4 Named Array{Float64,2}
A ╲ B │        a         b         c         d
──────┼───────────────────────────────────────
one   │ 0.750663  0.272366  0.762608  0.566912
two   │ 0.383119  0.817593  0.392215  0.2382142x4 Named Array{Float64,2}
A ╲ B │        a         b         c         d
──────┼───────────────────────────────────────
one   │ 0.750663  0.272366  0.762608  0.566912
two   │ 0.383119  0.817593  0.392215  0.2382142x1000 Named Array{Float64,2}
A ╲ B │           1            2  …          999         1000
──────┼──────────────────────────────────────────────────────
1     │    0.538934      1.97356  …     0.224724    -0.279572
2     │   -0.651533    -0.743799  …    -0.413344     0.6923291000x2 Named Array{Float64,2}
A ╲ B │         1          2
──────┼─────────────────────
1     │   0.47631   -1.50021
2     │   1.34604   0.412789
3     │  -1.76999   0.343373
4     │  0.780342  -0.100922
5     │  0.087196  -0.815676
6     │  0.226156   -3.19014
7     │  0.545783   -1.37523
8     │   0.27079    -0.1258
9     │  0.582972   -2.57755
⋮               ⋮          ⋮
992   │  0.706064  -0.981862
993   │  0.814022  -0.157508
994   │   -0.9502  -0.797019
995   │ -0.129304     1.2261
996   │  -1.19538  -0.166725
997   │    1.6894   0.767012
998   │  -1.28445   0.321009
999   │ -0.611578   -1.02068
1000  │ -0.560906   0.5202191000-element Named Array{Float64,1}
A    │ 
─────┼──────────
1    │  0.950806
2    │   1.28868
3    │   1.80005
4    │ -0.350601
5    │ -0.856956
6    │  -0.10889
7    │  0.799477
8    │  0.487383
9    │ -0.618512
⋮              ⋮
992  │  0.364368
993  │  0.145195
994  │  -1.51101
995  │ -0.514843
996  │   0.48788
997  │  -2.07525
998  │  -1.14632
999  │ -0.520451
1000 │ -0.9868192x2x2 Named Array{Float64,3}

[:, :, indexing=0] =
base ╲ zero │         0          1
────────────┼─────────────────────
0           │  0.228877   0.173627
1           │ 0.0876682   0.248304

[:, :, indexing=1] =
base ╲ zero │        0         1
────────────┼───────────────────
0           │ 0.992863  0.213721
1           │ 0.450118  0.722565
2-element Named Array{Float64,1}
A  │ 
───┼─────────
1  │ 0.893532
2  │ 0.551269
2x2 Named Array{Float64,2}
A ╲ B │        1         2
──────┼───────────────────
1     │  0.88349  0.700896
2     │ 0.686969  0.167722
2x2x2 Named Array{Float64,3}

[:, :, C=1] =
A ╲ B │         1          2
──────┼─────────────────────
1     │  0.453863  0.0452231
2     │  0.116804   0.537046

[:, :, C=2] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.938908  0.556868
2     │ 0.433057  0.755655
2x2x2x2 Named Array{Float64,4}

[:, :, C=1, D=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │  0.27449  0.836402
2     │ 0.223329  0.392383

[:, :, C=2, D=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.638805  0.804845
2     │ 0.530944  0.884771

[:, :, C=1, D=2] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.425609  0.640533
2     │ 0.355356  0.470758

[:, :, C=2, D=2] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.568317  0.384309
2     │ 0.805777  0.540139
2x2x2x2x2 Named Array{Float64,5}

[:, :, C=1, D=1, E=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.251872  0.842617
2     │ 0.724219  0.982361

[:, :, C=2, D=1, E=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.236554  0.688543
2     │ 0.605311  0.848017

[:, :, C=1, D=2, E=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.157908  0.330089
2     │ 0.213252  0.485519
⋮
1x2x2 Named Array{Float64,3}

[:, :, C=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.654721  0.906127

[:, :, C=2] =
A ╲ B │          1           2
──────┼───────────────────────
1     │   0.937866  0.00129442
2x1x2 Named Array{Float64,3}

[:, :, C=1] =
A ╲ B │        1
──────┼─────────
1     │ 0.328431
2     │ 0.100358

[:, :, C=2] =
A ╲ B │        1
──────┼─────────
1     │ 0.803405
2     │ 0.765125
2x2x1 Named Array{Float64,3}

[:, :, C=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.575699  0.672775
2     │ 0.946425  0.213531
1000×1000 Named sparse matrix with 105 Float64 nonzero entries:
	[5983786778458205040 ,  6526988131186142725]  =  0.2692602216144546
	[1602213502834622003 ,  6564272639106249010]  =  0.17995971716258552
	[13975069277216705747,  9920432272297441209]  =  0.01136800658482584
	[7592977768811028340 ,  4786699431706339713]  =  0.8149855304074292
	[13068922020419317632, 17676219393380616284]  =  0.7887594767617443
	[2792827719799450558 , 17676219393380616284]  =  0.9784231687079781
	[919672847296486462  , 14995138918287078531]  =  0.6581623846917901
	[6468689935112619700 ,  4394159825732135742]  =  0.9903075304384299
	                                              ⋮
	[16752464052319560607,  3014575823142358933]  =  0.7989758459368062
	[5122894113285174381 ,  4788923618671962983]  =  0.6444486824901898
	[4063711519745150262 , 18148906667482527649]  =  0.28551919580024987
	[1628675476083889103 , 15857670694969494589]  =  0.23154991551059778
	[15493082059768908559,  8090338657268802519]  =  0.19497735837479824
	[4127473732802427797 , 11711005111088208244]  =  0.5222025032546989
	[11798934497353053232, 12169815624147734794]  =  0.36386528574237587
	[13517292640990875502, 12624682912995533025]  =  0.5664116908080568
	[18238638934550427920,  2588469222286953884]  =  0.06378474185586547Timing named index: 0.001275148, array index: 0.000817897, named key: 0.127186758
Timing sum large sparse array: 0.010689749, named: 0.02249149
done!
INFO: NamedArrays tests passed

>>> End of log
