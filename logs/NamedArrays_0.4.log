>>> 'Pkg.add("NamedArrays")' log
INFO: Cloning cache of NamedArrays from git://github.com/davidavdav/NamedArrays.jl.git
INFO: Installing Combinatorics v0.2.1
INFO: Installing DataStructures v0.5.3
INFO: Installing Iterators v0.3.1
INFO: Installing NamedArrays v0.5.3
INFO: Installing Polynomials v0.1.5
INFO: Package database updated

>>> 'Pkg.test("NamedArrays")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-119-generic #166-Ubuntu SMP Wed May 3 12:18:55 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (818.5390625 MB free)
Uptime: 14312.0 sec
Load Avg:  1.1015625  1.001953125  1.03125
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3503 MHz     648752 s         57 s      57719 s     581054 s         21 s
#2  3503 MHz     430802 s       5968 s      50530 s     894749 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.9.1
 - NamedArrays                   0.5.3
5 additional packages:
 - Combinatorics                 0.2.1
 - Compat                        0.25.2
 - DataStructures                0.5.3
 - Iterators                     0.3.1
 - Polynomials                   0.1.5
INFO: Testing NamedArrays
Starting test, no assertions should fail... base, one	.2090540429049239	.9579128138564028	.058790310400772317	.5526950203777015
two	.3774755286062983	.46216657699832986	.7423865421221203	.4729524376119869
a	94
b	90
c	6
d	69
e	94
f	61
construction, 2x3 Named Array{Float64,2}
dim1 ╲ dim2 │        c         d         e
────────────┼─────────────────────────────
a           │ 0.601304   0.16742  0.471585
b           │ 0.671752  0.234345  0.834485 0.6013043558844979 0.6013043558844979
2x3 Named Array{Float64,2}
A ╲ B │        c         d         e
──────┼─────────────────────────────
a     │ 0.601304   0.16742  0.471585
b     │ 0.671752  0.234345  0.834485
2x3 Named Array{Float64,2}
dim1 ╲ dim2 │        c         d         e
────────────┼─────────────────────────────
a           │ 0.601304   0.16742  0.471585
b           │ 0.671752  0.234345  0.834485
2x3 Named Array{Float64,2}
A ╲ B │        c         d         e
──────┼─────────────────────────────
a     │ 0.601304   0.16742  0.471585
b     │ 0.671752  0.234345  0.834485
arithmetic, WARNING: Dropping mismatching names
WARNING: Dropping mismatching names
WARNING: Dropping mismatching names
WARNING: Dropping mismatching names
convert, WARNING: could not import Base.indices into Main
getindex, setindex, 2x4 Named Array{Float64,2}
magnificent ╲ 7 │        yi         er        san         si
────────────────┼───────────────────────────────────────────
yi              │  0.993038  0.0817823   0.445373   0.392091
er              │  0.256187   0.455876   0.737163    0.42005
hcat/vcat, copy, sum, conversions, changing names, multi-dimensional, dodgy indices, sort, broadcast, vectorized, re-arrange, eachindex, matrixops, show,
0-dimensional Named Array{Int64,0}
139901038027024
0-element Named Array{Any,1}

[0.17687694272602994 0.24772830722663408 0.03211379052663865 0.814685247247886
 0.04622398775201009 0.5456242337108674 0.6204209740647966 0.0022593777347053035]
2x4 Named Array{Float64,2}
A ╲ B │          a           b           c           d
──────┼───────────────────────────────────────────────
one   │   0.176877    0.247728   0.0321138    0.814685
two   │   0.046224    0.545624    0.620421  0.002259382x4 Named Array{Float64,2}
A ╲ B │          a           b           c           d
──────┼───────────────────────────────────────────────
one   │   0.176877    0.247728   0.0321138    0.814685
two   │   0.046224    0.545624    0.620421  0.002259382x1000 Named Array{Float64,2}
A ╲ B │           1            2  …          999         1000
──────┼──────────────────────────────────────────────────────
1     │    -1.84172     -0.96492  …      1.18584     0.333369
2     │    0.158501     0.933783  …     0.155753   -0.05799271000x2 Named Array{Float64,2}
A ╲ B │          1           2
──────┼───────────────────────
1     │   0.243392    0.465674
2     │  -0.560903    -1.25201
3     │   0.687306     1.78284
4     │   -1.55918   0.0261898
5     │  -0.537864    0.569913
6     │   -1.31525   -0.544668
7     │   0.642094  -0.0168789
8     │    1.64009     2.67204
9     │  -0.168568    0.577285
⋮                ⋮           ⋮
992   │    0.91817    0.341167
993   │    1.58462   -0.379074
994   │  -0.721899   -0.547812
995   │    -2.2914   -0.807132
996   │  -0.652497     1.25686
997   │   0.251471   0.0767914
998   │    0.92047   -0.680808
999   │   0.193204    0.589311
1000  │   0.437981    0.3591541000-element Named Array{Float64,1}
A    │ 
─────┼──────────
1    │  0.132333
2    │  0.186652
3    │ -0.192211
4    │ -0.541956
5    │  0.102923
6    │  -1.82234
7    │  0.505055
8    │  0.199444
9    │ -0.335896
⋮              ⋮
992  │  0.121151
993  │ -0.903616
994  │  0.686508
995  │  0.707185
996  │   1.07936
997  │ -0.463353
998  │  0.687852
999  │  -1.10785
1000 │  0.5116512x2x2 Named Array{Float64,3}

[:, :, indexing=0] =
base ╲ zero │          0           1
────────────┼───────────────────────
0           │   0.540043    0.527003
1           │   0.866931  0.00398191

[:, :, indexing=1] =
base ╲ zero │        0         1
────────────┼───────────────────
0           │ 0.170848  0.616083
1           │ 0.841412  0.661884
2-element Named Array{Float64,1}
A  │ 
───┼─────────
1  │ 0.143037
2  │ 0.760749
2x2 Named Array{Float64,2}
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.416918  0.508639
2     │ 0.977969  0.497086
2x2x2 Named Array{Float64,3}

[:, :, C=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.519504  0.690002
2     │ 0.553213  0.667113

[:, :, C=2] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.996712  0.302981
2     │ 0.582583  0.108335
2x2x2x2 Named Array{Float64,4}

[:, :, C=1, D=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.190207  0.456247
2     │ 0.831942  0.170276

[:, :, C=2, D=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.837279   0.96909
2     │ 0.607654  0.632433

[:, :, C=1, D=2] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.728717  0.664287
2     │ 0.446578  0.140817

[:, :, C=2, D=2] =
A ╲ B │         1          2
──────┼─────────────────────
1     │ 0.0159514   0.476366
2     │  0.987146   0.856397
2x2x2x2x2 Named Array{Float64,5}

[:, :, C=1, D=1, E=1] =
A ╲ B │           1            2
──────┼─────────────────────────
1     │    0.980374     0.796776
2     │ 0.000426496     0.405544

[:, :, C=2, D=1, E=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.847984  0.152581
2     │ 0.375231   0.51244

[:, :, C=1, D=2, E=1] =
A ╲ B │         1          2
──────┼─────────────────────
1     │  0.859817   0.580576
2     │  0.989003  0.0634751
⋮
1x2x2 Named Array{Float64,3}

[:, :, C=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.889128  0.202554

[:, :, C=2] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.118239  0.872928
2x1x2 Named Array{Float64,3}

[:, :, C=1] =
A ╲ B │        1
──────┼─────────
1     │ 0.740759
2     │ 0.209964

[:, :, C=2] =
A ╲ B │        1
──────┼─────────
1     │ 0.775722
2     │  0.78955
2x2x1 Named Array{Float64,3}

[:, :, C=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.517884  0.154344
2     │ 0.690255  0.537822
1000×1000 Named sparse matrix with 127 Float64 nonzero entries:
	[14071609933964289859,   397394769374478572]  =  0.8428598204429503
	[15240003619098155971,   397394769374478572]  =  0.8324530289064012
	[493461921061351564  , 14304565767364922256]  =  0.6702277330200674
	[11568453395938084092, 14304565767364922256]  =  0.05171228942878581
	[15673988649286256572, 12295598998729798629]  =  0.2577612008909913
	[16501174925917855829,  7425701996526302553]  =  0.7286464757686173
	[7946303620992373940 ,  1166092285267503990]  =  0.6224660431425513
	[16462243977607957471,  4976045735032000325]  =  0.4084386373473836
	                                              ⋮
	[10655964431342481635, 14774945750507892610]  =  0.5815733194298909
	[4620553278458169351 ,  8090338657268802519]  =  0.48557085886449247
	[970153514192176690  ,  8090338657268802519]  =  0.1429882350050098
	[5078555050773131864 ,  8090338657268802519]  =  0.7262148555022421
	[13593351659750487469, 12169815624147734794]  =  0.7533130096456164
	[12921543294441418094, 12169815624147734794]  =  0.7619112296147215
	[2267379803219259174 ,   372001016642560619]  =  0.8606300310596098
	[9656355012847532739 , 16069635275006911712]  =  0.3327007771131616
	[3761119224343897378 ,   427459847123490633]  =  0.5819902030931432Timing named index: 0.000776438, array index: 0.000711632, named key: 0.122140846
Timing sum large sparse array: 0.010482812, named: 0.024681002
done!
INFO: NamedArrays tests passed

>>> End of log
