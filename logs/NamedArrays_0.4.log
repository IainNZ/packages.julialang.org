>>> 'Pkg.add("NamedArrays")' log
INFO: Cloning cache of NamedArrays from git://github.com/davidavdav/NamedArrays.jl.git
INFO: Installing Combinatorics v0.2.1
INFO: Installing DataStructures v0.5.3
INFO: Installing Iterators v0.3.1
INFO: Installing NamedArrays v0.5.3
INFO: Installing Polynomials v0.1.5
INFO: Package database updated

>>> 'Pkg.test("NamedArrays")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-119-generic #166-Ubuntu SMP Wed May 3 12:18:55 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (802.0078125 MB free)
Uptime: 13599.0 sec
Load Avg:  0.90966796875  0.97119140625  1.01953125
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz     586153 s       3550 s      44248 s     598060 s         12 s
#2  3500 MHz     416941 s       3600 s      37192 s     863477 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.9.1
 - NamedArrays                   0.5.3
5 additional packages:
 - Combinatorics                 0.2.1
 - Compat                        0.25.2
 - DataStructures                0.5.3
 - Iterators                     0.3.1
 - Polynomials                   0.1.5
INFO: Testing NamedArrays
Starting test, no assertions should fail... base, one	.5792218201491401	.6506009348956758	.09900939902078898	.7761124409806957
two	.6044254736605015	.08703492912848909	.20099374081331156	.09411279106506654
a	99
b	66
c	85
d	5
e	49
f	14
construction, 2x3 Named Array{Float64,2}
dim1 ╲ dim2 │        c         d         e
────────────┼─────────────────────────────
a           │ 0.387035   0.72631  0.675829
b           │  0.64666  0.237055  0.634427 0.3870351085971746 0.3870351085971746
2x3 Named Array{Float64,2}
A ╲ B │        c         d         e
──────┼─────────────────────────────
a     │ 0.387035   0.72631  0.675829
b     │  0.64666  0.237055  0.634427
2x3 Named Array{Float64,2}
dim1 ╲ dim2 │        c         d         e
────────────┼─────────────────────────────
a           │ 0.387035   0.72631  0.675829
b           │  0.64666  0.237055  0.634427
2x3 Named Array{Float64,2}
A ╲ B │        c         d         e
──────┼─────────────────────────────
a     │ 0.387035   0.72631  0.675829
b     │  0.64666  0.237055  0.634427
arithmetic, WARNING: Dropping mismatching names
WARNING: Dropping mismatching names
WARNING: Dropping mismatching names
WARNING: Dropping mismatching names
convert, WARNING: could not import Base.indices into Main
getindex, setindex, 2x4 Named Array{Float64,2}
magnificent ╲ 7 │       yi        er       san        si
────────────────┼───────────────────────────────────────
yi              │ 0.120424  0.494304  0.316685   0.71156
er              │ 0.766012  0.671051  0.512547  0.508062
hcat/vcat, copy, sum, conversions, changing names, multi-dimensional, dodgy indices, sort, broadcast, vectorized, re-arrange, eachindex, matrixops, show,
0-dimensional Named Array{Int64,0}
139862254777968
0-element Named Array{Any,1}

[0.13960980337329576 0.6403875485411452 0.01626990521408933 0.31006129735776233
 0.3207090304780986 0.19857194728948824 0.23002426247073826 0.7687971410712988]
2x4 Named Array{Float64,2}
A ╲ B │         a          b          c          d
──────┼───────────────────────────────────────────
one   │   0.13961   0.640388  0.0162699   0.310061
two   │  0.320709   0.198572   0.230024   0.7687972x4 Named Array{Float64,2}
A ╲ B │         a          b          c          d
──────┼───────────────────────────────────────────
one   │   0.13961   0.640388  0.0162699   0.310061
two   │  0.320709   0.198572   0.230024   0.7687972x1000 Named Array{Float64,2}
A ╲ B │           1            2  …          999         1000
──────┼──────────────────────────────────────────────────────
1     │    0.673833    -0.469188  …      2.26328    -0.550582
2     │    0.464204      1.20939  …     0.370339    -0.4137991000x2 Named Array{Float64,2}
A ╲ B │          1           2
──────┼───────────────────────
1     │  -0.849283     1.08092
2     │  0.0513245      1.6442
3     │   0.174687    0.773662
4     │   0.962194   -0.348286
5     │   0.909973    -0.78995
6     │    0.43303   -0.424324
7     │  -0.838389   -0.901772
8     │  -0.902672   -0.351275
9     │   -2.89368   -0.480447
⋮                ⋮           ⋮
992   │    1.05198    0.614464
993   │ -0.0322482    0.907872
994   │  -0.821991   -0.757287
995   │   0.986368     -1.0217
996   │   0.131905    0.107958
997   │   0.616363    0.447143
998   │  -0.272989    0.185019
999   │   -1.81835   -0.536012
1000  │    1.44984   -0.3095681000-element Named Array{Float64,1}
A    │ 
─────┼──────────
1    │   -1.3579
2    │ -0.854552
3    │  -0.77131
4    │   1.04112
5    │ -0.597585
6    │ -0.812849
7    │ -0.757211
8    │  0.066976
9    │    1.0555
⋮              ⋮
992  │  0.830119
993  │ -0.769989
994  │   1.74778
995  │ -0.939769
996  │  0.698209
997  │ -0.597105
998  │   1.17154
999  │  -1.72841
1000 │ -0.7344642x2x2 Named Array{Float64,3}

[:, :, indexing=0] =
base ╲ zero │         0          1
────────────┼─────────────────────
0           │  0.317528    0.97663
1           │ 0.0230089   0.037496

[:, :, indexing=1] =
base ╲ zero │         0          1
────────────┼─────────────────────
0           │  0.196964   0.786039
1           │ 0.0263196   0.531266
2-element Named Array{Float64,1}
A  │ 
───┼─────────
1  │ 0.461104
2  │ 0.643877
2x2 Named Array{Float64,2}
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.756674  0.251061
2     │ 0.676465   0.60872
2x2x2 Named Array{Float64,3}

[:, :, C=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.587445  0.342227
2     │ 0.351259  0.782797

[:, :, C=2] =
A ╲ B │         1          2
──────┼─────────────────────
1     │  0.160507   0.233856
2     │ 0.0777826   0.782625
2x2x2x2 Named Array{Float64,4}

[:, :, C=1, D=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.241332   0.23854
2     │ 0.383583  0.602724

[:, :, C=2, D=1] =
A ╲ B │         1          2
──────┼─────────────────────
1     │ 0.0496577   0.600125
2     │  0.353286   0.788834

[:, :, C=1, D=2] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.587944  0.513181
2     │ 0.486422  0.396285

[:, :, C=2, D=2] =
A ╲ B │        1         2
──────┼───────────────────
1     │  0.89057  0.319763
2     │ 0.598341  0.582062
2x2x2x2x2 Named Array{Float64,5}

[:, :, C=1, D=1, E=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.223762  0.923764
2     │ 0.815876  0.337991

[:, :, C=2, D=1, E=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.598525  0.326685
2     │ 0.884214  0.289702

[:, :, C=1, D=2, E=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.434177  0.292315
2     │  0.63611  0.723729
⋮
1x2x2 Named Array{Float64,3}

[:, :, C=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.471484  0.262104

[:, :, C=2] =
A ╲ B │         1          2
──────┼─────────────────────
1     │  0.240944  0.0955594
2x1x2 Named Array{Float64,3}

[:, :, C=1] =
A ╲ B │        1
──────┼─────────
1     │ 0.162971
2     │ 0.474922

[:, :, C=2] =
A ╲ B │        1
──────┼─────────
1     │ 0.321223
2     │ 0.117958
2x2x1 Named Array{Float64,3}

[:, :, C=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │  0.49904  0.800909
2     │ 0.466026  0.885614
1000×1000 Named sparse matrix with 93 Float64 nonzero entries:
	[10109836606734241243,  8699333159457747740]  =  0.9177606828151472
	[12815275876572971981,  4786699431706339713]  =  0.9353195208162326
	[14757494119953341947, 14995138918287078531]  =  0.6435014345522811
	[7176931096052980683 ,  8629498292780771804]  =  0.338080599530284
	[12020782256748308824,  7242692203416363180]  =  0.26434470798595466
	[16069635275006911712,   906960604709401733]  =  0.7843390007802149
	[10642981429583964626,  2836200141957565154]  =  0.3919582522291303
	[12921543294441418094,  1603870711594358861]  =  0.9042878439368232
	                                              ⋮
	[1017812379485287515 ,  4285843451033309381]  =  0.3423735457190338
	[11088256593380071097, 10924666096879366607]  =  0.38345595154152146
	[444710347873990685  , 10725201418295586676]  =  0.6627265915697758
	[1030988749247038162 , 14027562189529080231]  =  0.728099732406039
	[6880785002993049943 ,  9815398096560962926]  =  0.5659271334107578
	[14580339014010232292, 12554874066387155728]  =  0.6628859745836408
	[13459572381615104428, 12169815624147734794]  =  0.041254943881744
	[397394769374478572  , 11314283927973801071]  =  0.9282530481251505
	[16077031779703164343,  2588469222286953884]  =  0.08289738408597436Timing named index: 0.000837956, array index: 0.000624218, named key: 0.126360839
Timing sum large sparse array: 0.010494813, named: 0.023328644
done!
INFO: NamedArrays tests passed

>>> End of log
