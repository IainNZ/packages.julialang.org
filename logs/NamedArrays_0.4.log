>>> 'Pkg.add("NamedArrays")' log
INFO: Cloning cache of NamedArrays from git://github.com/davidavdav/NamedArrays.jl.git
INFO: Installing Combinatorics v0.2.1
INFO: Installing DataStructures v0.5.3
INFO: Installing Iterators v0.3.1
INFO: Installing NamedArrays v0.5.3
INFO: Installing Polynomials v0.1.5
INFO: Package database updated

>>> 'Pkg.test("NamedArrays")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-121-generic #170-Ubuntu SMP Wed Jun 14 09:04:33 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (844.890625 MB free)
Uptime: 14902.0 sec
Load Avg:  0.93115234375  0.93505859375  0.97119140625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3497 MHz     698434 s       2982 s      61700 s     579378 s         23 s
#2  3497 MHz     447073 s       3413 s      52146 s     933408 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.9.1
 - NamedArrays                   0.5.3
5 additional packages:
 - Combinatorics                 0.2.1
 - Compat                        0.26.0
 - DataStructures                0.5.3
 - Iterators                     0.3.1
 - Polynomials                   0.1.5
INFO: Testing NamedArrays
Starting test, no assertions should fail... base, one	.2586334026042596	.26608025327767915	.18755848180062906	.24844215551480175
two	.8171209285551977	.4673499337812743	.4269960262401309	.6416742870927772
a	58
b	42
c	27
d	7
e	19
f	19
construction, 2x3 Named Array{Float64,2}
dim1 ╲ dim2 │        c         d         e
────────────┼─────────────────────────────
a           │ 0.109131   0.13694  0.789347
b           │ 0.874897  0.470695  0.548229 0.1091306669864478 0.1091306669864478
2x3 Named Array{Float64,2}
A ╲ B │        c         d         e
──────┼─────────────────────────────
a     │ 0.109131   0.13694  0.789347
b     │ 0.874897  0.470695  0.548229
2x3 Named Array{Float64,2}
dim1 ╲ dim2 │        c         d         e
────────────┼─────────────────────────────
a           │ 0.109131   0.13694  0.789347
b           │ 0.874897  0.470695  0.548229
2x3 Named Array{Float64,2}
A ╲ B │        c         d         e
──────┼─────────────────────────────
a     │ 0.109131   0.13694  0.789347
b     │ 0.874897  0.470695  0.548229
arithmetic, WARNING: Dropping mismatching names
WARNING: Dropping mismatching names
WARNING: Dropping mismatching names
WARNING: Dropping mismatching names
convert, WARNING: could not import Base.indices into Main
getindex, setindex, 2x4 Named Array{Float64,2}
magnificent ╲ 7 │        yi         er        san         si
────────────────┼───────────────────────────────────────────
yi              │  0.997432   0.490565   0.503477   0.217215
er              │ 0.0944999   0.814858   0.687347   0.811611
hcat/vcat, copy, sum, conversions, changing names, multi-dimensional, dodgy indices, sort, broadcast, vectorized, re-arrange, eachindex, matrixops, show,
0-dimensional Named Array{Int64,0}
140098630719536
0-element Named Array{Any,1}

[0.8106001122857527 0.44274427387043724 0.6172453585375526 0.8484484713778635
 0.9103363408562128 0.3914866419918175 0.46500336318266666 0.7011536028781011]
2x4 Named Array{Float64,2}
A ╲ B │        a         b         c         d
──────┼───────────────────────────────────────
one   │   0.8106  0.442744  0.617245  0.848448
two   │ 0.910336  0.391487  0.465003  0.7011542x4 Named Array{Float64,2}
A ╲ B │        a         b         c         d
──────┼───────────────────────────────────────
one   │   0.8106  0.442744  0.617245  0.848448
two   │ 0.910336  0.391487  0.465003  0.7011542x1000 Named Array{Float64,2}
A ╲ B │            1             2  …           999          1000
──────┼──────────────────────────────────────────────────────────
1     │    -0.427017     -0.229706  …     -0.703896    -0.0995855
2     │     -1.99444      -1.40557  …         1.173      0.1173451000x2 Named Array{Float64,2}
A ╲ B │         1          2
──────┼─────────────────────
1     │   2.82702  -0.011502
2     │  0.256514  0.0736622
3     │  0.516973   0.604489
4     │  -1.39068  -0.481701
5     │   1.78006  -0.587067
6     │ -0.482512  -0.526842
7     │ -0.746801    0.61418
8     │  0.888612   0.988208
9     │  -0.15258   0.525419
⋮               ⋮          ⋮
992   │   2.32458    1.67401
993   │ -0.935046  -0.231566
994   │ -0.207283  -0.104214
995   │   0.72567   0.583309
996   │  0.113508  -0.656634
997   │   1.65481   0.294302
998   │   1.47018   0.425066
999   │   1.05726   0.133704
1000  │  0.601488   0.1448031000-element Named Array{Float64,1}
A    │ 
─────┼──────────
1    │  -1.64442
2    │   1.12653
3    │  0.454689
4    │  0.298499
5    │ -0.700774
6    │ -0.374656
7    │ -0.922243
8    │ -0.402987
9    │  0.786721
⋮              ⋮
992  │  0.189684
993  │   1.68026
994  │ -0.542973
995  │   1.36174
996  │  -1.02846
997  │   2.19168
998  │ -0.778189
999  │ -0.259684
1000 │   2.035552x2x2 Named Array{Float64,3}

[:, :, indexing=0] =
base ╲ zero │        0         1
────────────┼───────────────────
0           │ 0.909453  0.423679
1           │ 0.716557  0.391143

[:, :, indexing=1] =
base ╲ zero │         0          1
────────────┼─────────────────────
0           │  0.129717  0.0815713
1           │  0.842377   0.476073
2-element Named Array{Float64,1}
A  │ 
───┼─────────
1  │ 0.696968
2  │ 0.549857
2x2 Named Array{Float64,2}
A ╲ B │         1          2
──────┼─────────────────────
1     │ 0.0758157   0.166825
2     │   0.67339   0.617112
2x2x2 Named Array{Float64,3}

[:, :, C=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │  0.58669  0.138398
2     │ 0.881541  0.634773

[:, :, C=2] =
A ╲ B │         1          2
──────┼─────────────────────
1     │  0.580949  0.0633181
2     │  0.933935   0.257755
2x2x2x2 Named Array{Float64,4}

[:, :, C=1, D=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.915544  0.632051
2     │ 0.956174  0.259401

[:, :, C=2, D=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.356979  0.832145
2     │ 0.719509  0.568513

[:, :, C=1, D=2] =
A ╲ B │         1          2
──────┼─────────────────────
1     │  0.209883   0.631684
2     │  0.316421  0.0892417

[:, :, C=2, D=2] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.765044  0.973756
2     │ 0.617102  0.634243
2x2x2x2x2 Named Array{Float64,5}

[:, :, C=1, D=1, E=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.213755  0.589363
2     │   0.8821   0.17792

[:, :, C=2, D=1, E=1] =
A ╲ B │         1          2
──────┼─────────────────────
1     │  0.950965   0.208366
2     │  0.264542  0.0483359

[:, :, C=1, D=2, E=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.868579  0.396097
2     │ 0.390504  0.189513
⋮
1x2x2 Named Array{Float64,3}

[:, :, C=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.722848  0.376499

[:, :, C=2] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.623152  0.854449
2x1x2 Named Array{Float64,3}

[:, :, C=1] =
A ╲ B │         1
──────┼──────────
1     │ 0.0903329
2     │  0.305251

[:, :, C=2] =
A ╲ B │        1
──────┼─────────
1     │ 0.212633
2     │ 0.115361
2x2x1 Named Array{Float64,3}

[:, :, C=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.360912  0.625427
2     │ 0.680539  0.908413
1000×1000 Named sparse matrix with 100 Float64 nonzero entries:
	[6330913940894778354 ,  8699333159457747740]  =  0.9685397197877548
	[9396421306174063237 ,  5647414292592918739]  =  0.7543754262311442
	[13427473630495641040,  6134978669850253296]  =  0.9276964763316575
	[4346281677867421151 , 11080872162023102847]  =  0.5186517381834566
	[17212324651030760382, 14517667374310463124]  =  0.6627382447759524
	[11332520718132086690, 14066869468942639955]  =  0.9130461880250718
	[8425210698882380606 ,  2849690884155085581]  =  0.45260326399820383
	[11314283927973801071, 11496001657944805140]  =  0.317033359745134
	                                              ⋮
	[306017613260083765  , 15078133678202242611]  =  0.750798450223169
	[8090338657268802519 , 11732026533134275955]  =  0.2879751157040913
	[9896174471843564741 , 14169799449801373117]  =  0.9137541126664588
	[3428368603158593878 , 14944477062144183931]  =  0.39041042574737905
	[4681672859498425805 , 16243515418520287792]  =  0.1371702462324249
	[18343873927949696366, 17401827539426951865]  =  0.8433953072286624
	[1082045492561856594 ,  8471876845144429043]  =  0.22579906407762307
	[17207488849817960156, 17329041886349039120]  =  0.39971411154781933
	[4500327340515608799 ,  6468689935112619700]  =  0.13636065764356586Timing named index: 0.000870531, array index: 0.000895119, named key: 0.118685567
Timing sum large sparse array: 0.012130955, named: 0.026262541
done!
INFO: NamedArrays tests passed

>>> End of log
