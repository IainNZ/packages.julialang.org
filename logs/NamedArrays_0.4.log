>>> 'Pkg.add("NamedArrays")' log
INFO: Cloning cache of NamedArrays from git://github.com/davidavdav/NamedArrays.jl.git
INFO: Installing Combinatorics v0.2.1
INFO: Installing DataStructures v0.5.3
INFO: Installing Iterators v0.3.0
INFO: Installing NamedArrays v0.5.3
INFO: Installing Polynomials v0.1.5
INFO: Package database updated

>>> 'Pkg.test("NamedArrays")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-116-generic #163-Ubuntu SMP Fri Mar 31 14:13:22 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (805.05859375 MB free)
Uptime: 13636.0 sec
Load Avg:  0.986328125  0.970703125  1.01318359375
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz     636973 s       1235 s      55269 s     525219 s         31 s
#2  3500 MHz     408973 s       5991 s      48236 s     848217 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.9.0
 - NamedArrays                   0.5.3
5 additional packages:
 - Combinatorics                 0.2.1
 - Compat                        0.23.0
 - DataStructures                0.5.3
 - Iterators                     0.3.0
 - Polynomials                   0.1.5
INFO: Testing NamedArrays
Starting test, no assertions should fail... base, one	.7367412602551693	.20084882521059733	.09268087094751487	.9438955335672143
two	.5055378370496908	.901937423321088	.640457724708823	.3604894517985049
a	8
b	42
c	73
d	99
e	18
f	40
construction, 2x3 Named Array{Float64,2}
dim1 ╲ dim2 │        c         d         e
────────────┼─────────────────────────────
a           │ 0.388498  0.673094  0.911943
b           │ 0.909317  0.783669  0.641332 0.3884976874760375 0.3884976874760375
2x3 Named Array{Float64,2}
A ╲ B │        c         d         e
──────┼─────────────────────────────
a     │ 0.388498  0.673094  0.911943
b     │ 0.909317  0.783669  0.641332
2x3 Named Array{Float64,2}
dim1 ╲ dim2 │        c         d         e
────────────┼─────────────────────────────
a           │ 0.388498  0.673094  0.911943
b           │ 0.909317  0.783669  0.641332
2x3 Named Array{Float64,2}
A ╲ B │        c         d         e
──────┼─────────────────────────────
a     │ 0.388498  0.673094  0.911943
b     │ 0.909317  0.783669  0.641332
arithmetic, WARNING: Dropping mismatching names
WARNING: Dropping mismatching names
WARNING: Dropping mismatching names
WARNING: Dropping mismatching names
convert, WARNING: could not import Base.indices into Main
getindex, setindex, 2x4 Named Array{Float64,2}
magnificent ╲ 7 │        yi         er        san         si
────────────────┼───────────────────────────────────────────
yi              │  0.256863   0.453931  0.0402445   0.858942
er              │  0.775142   0.259625   0.797478   0.206005
hcat/vcat, copy, sum, conversions, changing names, multi-dimensional, dodgy indices, sort, broadcast, vectorized, re-arrange, eachindex, matrixops, show,
0-dimensional Named Array{Int64,0}
140043536238864
0-element Named Array{Any,1}

[0.7591212326108521 0.1883123815292298 0.779509745609954 0.6388426474217404
 0.22651774463869812 0.8764241187255586 0.9137071334509157 0.09271990635442595]
2x4 Named Array{Float64,2}
A ╲ B │         a          b          c          d
──────┼───────────────────────────────────────────
one   │  0.759121   0.188312    0.77951   0.638843
two   │  0.226518   0.876424   0.913707  0.09271992x4 Named Array{Float64,2}
A ╲ B │         a          b          c          d
──────┼───────────────────────────────────────────
one   │  0.759121   0.188312    0.77951   0.638843
two   │  0.226518   0.876424   0.913707  0.09271992x1000 Named Array{Float64,2}
A ╲ B │           1            2  …          999         1000
──────┼──────────────────────────────────────────────────────
1     │   -0.700387    -0.211254  …    -0.233499     0.564233
2     │    0.870032     -1.93941  …    -0.226077     0.9977511000x2 Named Array{Float64,2}
A ╲ B │          1           2
──────┼───────────────────────
1     │  -0.374011    -0.36904
2     │  -0.957895    0.706779
3     │   0.246597    0.175662
4     │  -0.418224     1.10699
5     │ 0.00369385  -0.0551986
6     │  -0.786085     1.36353
7     │   0.799794   -0.565932
8     │  -0.149911    0.164852
9     │  -0.314779    0.366446
⋮                ⋮           ⋮
992   │  -0.411808      1.6554
993   │  0.0551188    0.572496
994   │  -0.148678    -2.30728
995   │    0.24613    -1.34972
996   │  -0.417892    -1.67804
997   │   -1.45211    0.450843
998   │   -1.60359    0.562771
999   │   0.610089   -0.969117
1000  │  -0.339601    0.7835221000-element Named Array{Float64,1}
A    │ 
─────┼──────────
1    │ -0.956236
2    │ -0.758574
3    │  0.890176
4    │   2.57548
5    │  -1.23817
6    │  -1.43813
7    │   1.05809
8    │  0.798372
9    │   0.26814
⋮              ⋮
992  │  -1.94605
993  │ -0.161463
994  │  0.621194
995  │ -0.297271
996  │  -1.63465
997  │   1.01901
998  │ -0.151907
999  │ -0.260649
1000 │  -1.114192x2x2 Named Array{Float64,3}

[:, :, indexing=0] =
base ╲ zero │         0          1
────────────┼─────────────────────
0           │   0.45743   0.904102
1           │  0.749104  0.0745233

[:, :, indexing=1] =
base ╲ zero │        0         1
────────────┼───────────────────
0           │ 0.893435  0.789112
1           │ 0.223032  0.390572
2-element Named Array{Float64,1}
A  │ 
───┼─────────
1  │  0.85482
2  │ 0.886299
2x2 Named Array{Float64,2}
A ╲ B │         1          2
──────┼─────────────────────
1     │  0.866332   0.972502
2     │  0.706068  0.0719058
2x2x2 Named Array{Float64,3}

[:, :, C=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.910447  0.749231
2     │ 0.111445  0.572417

[:, :, C=2] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.193296  0.760075
2     │ 0.916377  0.326208
2x2x2x2 Named Array{Float64,4}

[:, :, C=1, D=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.374002  0.837987
2     │ 0.997849  0.428771

[:, :, C=2, D=1] =
A ╲ B │         1          2
──────┼─────────────────────
1     │ 0.0371181     0.8396
2     │ 0.0369355   0.993734

[:, :, C=1, D=2] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.113039  0.500507
2     │ 0.313907   0.89544

[:, :, C=2, D=2] =
A ╲ B │        1         2
──────┼───────────────────
1     │  0.98032  0.997192
2     │ 0.485512  0.343736
2x2x2x2x2 Named Array{Float64,5}

[:, :, C=1, D=1, E=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.527305  0.905946
2     │ 0.814085  0.362927

[:, :, C=2, D=1, E=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │  0.35185   0.48346
2     │ 0.466424  0.667151

[:, :, C=1, D=2, E=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.601399  0.371364
2     │ 0.781727  0.978803
⋮
1x2x2 Named Array{Float64,3}

[:, :, C=1] =
A ╲ B │         1          2
──────┼─────────────────────
1     │ 0.0648375   0.321053

[:, :, C=2] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.869165  0.954992
2x1x2 Named Array{Float64,3}

[:, :, C=1] =
A ╲ B │         1
──────┼──────────
1     │  0.654714
2     │ 0.0554555

[:, :, C=2] =
A ╲ B │        1
──────┼─────────
1     │ 0.439286
2     │ 0.528499
2x2x1 Named Array{Float64,3}

[:, :, C=1] =
A ╲ B │         1          2
──────┼─────────────────────
1     │  0.991312   0.971429
2     │ 0.0602336  0.0615794
1000×1000 Named sparse matrix with 101 Float64 nonzero entries:
	[4100222305550378373 , 13789993170142104254]  =  0.43357145647497886
	[13769040811181486455, 13888991764943741743]  =  0.7701993748692908
	[13700233674872906346,  6134978669850253296]  =  0.039274302182497056
	[17466052388280872253,  6806539949965918083]  =  0.7225491650543481
	[7799201424495593660 , 14517667374310463124]  =  0.9638843965321686
	[12275651637820548197, 14995138918287078531]  =  0.44993945960063164
	[8693402622351373804 ,  8629498292780771804]  =  0.5179390226133722
	[12288543705408635880,  8097707444526576530]  =  0.5134366227630554
	                                              ⋮
	[10642981429583964626, 10080555958650725266]  =  0.11060354601927136
	[14024883472771630530,  4494612503536197367]  =  0.9084318145012973
	[3253468397832770835 , 10924666096879366607]  =  0.4031827369531895
	[281356413667926651  , 10924666096879366607]  =  0.3738113341714131
	[2348334269037542278 , 17853331136360781895]  =  0.16175821755794306
	[12532053171191892965, 17718833055079784125]  =  0.7542967253175124
	[17467549359930456931, 12624682912995533025]  =  0.8283618445982355
	[7388874443385012746 ,  2758171916068192631]  =  0.8746708509641894
	[1987182164192973075 , 14599810768241287016]  =  0.09535593276842702Timing named index: 0.000597799, array index: 0.000677285, named key: 0.130690911
Timing sum large sparse array: 0.009649843, named: 0.02279853
done!
INFO: NamedArrays tests passed

>>> End of log
