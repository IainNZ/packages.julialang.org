>>> 'Pkg.add("NamedArrays")' log
INFO: Cloning cache of NamedArrays from git://github.com/davidavdav/NamedArrays.jl.git
INFO: Installing Combinatorics v0.2.1
INFO: Installing DataStructures v0.5.3
INFO: Installing Iterators v0.3.1
INFO: Installing NamedArrays v0.5.3
INFO: Installing Polynomials v0.1.6
INFO: Package database updated

>>> 'Pkg.test("NamedArrays")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-128-generic #177-Ubuntu SMP Tue Aug 8 11:40:23 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (835.1640625 MB free)
Uptime: 15407.0 sec
Load Avg:  0.9130859375  0.71435546875  0.771484375
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz     703446 s        111 s      61261 s     627419 s         20 s
#2  3499 MHz     473018 s       6371 s      52513 s     956241 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.9.1
 - NamedArrays                   0.5.3
5 additional packages:
 - Combinatorics                 0.2.1
 - Compat                        0.26.0
 - DataStructures                0.5.3
 - Iterators                     0.3.1
 - Polynomials                   0.1.6
INFO: Testing NamedArrays
Starting test, no assertions should fail... base, one	.02926675366493714	.2683760273901896	.7372297331633859	.7165913120449616
two	.6818614391536342	.9917503896927768	.46915818513331176	.7149483999520312
a	12
b	53
c	71
d	76
e	53
f	28
construction, 2x3 Named Array{Float64,2}
dim1 ╲ dim2 │        c         d         e
────────────┼─────────────────────────────
a           │ 0.552069  0.498339  0.222981
b           │ 0.191602  0.191065  0.947022 0.5520691168282992 0.5520691168282992
2x3 Named Array{Float64,2}
A ╲ B │        c         d         e
──────┼─────────────────────────────
a     │ 0.552069  0.498339  0.222981
b     │ 0.191602  0.191065  0.947022
2x3 Named Array{Float64,2}
dim1 ╲ dim2 │        c         d         e
────────────┼─────────────────────────────
a           │ 0.552069  0.498339  0.222981
b           │ 0.191602  0.191065  0.947022
2x3 Named Array{Float64,2}
A ╲ B │        c         d         e
──────┼─────────────────────────────
a     │ 0.552069  0.498339  0.222981
b     │ 0.191602  0.191065  0.947022
arithmetic, WARNING: Dropping mismatching names
WARNING: Dropping mismatching names
WARNING: Dropping mismatching names
WARNING: Dropping mismatching names
convert, WARNING: could not import Base.indices into Main
getindex, setindex, 2x4 Named Array{Float64,2}
magnificent ╲ 7 │        yi         er        san         si
────────────────┼───────────────────────────────────────────
yi              │  0.933648   0.224366   0.715723   0.636491
er              │ 0.0452724  0.0525442   0.719954   0.100025
hcat/vcat, copy, sum, conversions, changing names, multi-dimensional, dodgy indices, sort, broadcast, vectorized, re-arrange, eachindex, matrixops, show,
0-dimensional Named Array{Int64,0}
140696585580688
0-element Named Array{Any,1}

[0.9257630529015997 0.7642767850244887 0.8521663091728306 0.26937207792731144
 0.3870230960499459 0.6680107237814117 0.9716206175414359 0.3750147462672555]
2x4 Named Array{Float64,2}
A ╲ B │        a         b         c         d
──────┼───────────────────────────────────────
one   │ 0.925763  0.764277  0.852166  0.269372
two   │ 0.387023  0.668011  0.971621  0.3750152x4 Named Array{Float64,2}
A ╲ B │        a         b         c         d
──────┼───────────────────────────────────────
one   │ 0.925763  0.764277  0.852166  0.269372
two   │ 0.387023  0.668011  0.971621  0.3750152x1000 Named Array{Float64,2}
A ╲ B │            1             2  …           999          1000
──────┼──────────────────────────────────────────────────────────
1     │     0.379953     -0.677282  …        1.3047       1.24343
2     │      1.69972     -0.803277  …     -0.148041     -0.1520951000x2 Named Array{Float64,2}
A ╲ B │         1          2
──────┼─────────────────────
1     │  0.834027    1.98455
2     │   1.05245  -0.029667
3     │  0.543294    1.05099
4     │  -1.79772  -0.842759
5     │ -0.883653   -0.64575
6     │  0.462069   0.305565
7     │   0.60181    1.92121
8     │ -0.488409   0.289163
9     │  0.580499    2.39309
⋮               ⋮          ⋮
992   │  -1.02698  -0.387805
993   │ -0.528968   0.855836
994   │   1.45933   0.578902
995   │ -0.700413  -0.650122
996   │  0.615604  -0.355506
997   │  0.818973  -0.361717
998   │ -0.273097   0.930978
999   │ -0.141452  -0.208302
1000  │ -0.340929   0.9392721000-element Named Array{Float64,1}
A    │ 
─────┼──────────
1    │  -1.04138
2    │  0.497365
3    │  0.103551
4    │  -1.63957
5    │  -1.14016
6    │  -1.59816
7    │ -0.506662
8    │ -0.691411
9    │  0.358532
⋮              ⋮
992  │ 0.0817805
993  │ 0.0778555
994  │  -0.52791
995  │  0.310021
996  │  0.993495
997  │  -1.37129
998  │   2.19499
999  │ -0.604019
1000 │ -0.6615782x2x2 Named Array{Float64,3}

[:, :, indexing=0] =
base ╲ zero │        0         1
────────────┼───────────────────
0           │ 0.899687  0.988201
1           │ 0.893576  0.398042

[:, :, indexing=1] =
base ╲ zero │        0         1
────────────┼───────────────────
0           │  0.75309  0.517211
1           │ 0.601142  0.817268
2-element Named Array{Float64,1}
A  │ 
───┼──────────
1  │ 0.0998143
2  │  0.968264
2x2 Named Array{Float64,2}
A ╲ B │        1         2
──────┼───────────────────
1     │  0.39898  0.273391
2     │ 0.980856  0.959709
2x2x2 Named Array{Float64,3}

[:, :, C=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.114768  0.147185
2     │ 0.190757  0.348277

[:, :, C=2] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.817275  0.921897
2     │ 0.225934  0.492444
2x2x2x2 Named Array{Float64,4}

[:, :, C=1, D=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.552802  0.365262
2     │  0.11042   0.64638

[:, :, C=2, D=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.173887   0.35243
2     │ 0.830962  0.222551

[:, :, C=1, D=2] =
A ╲ B │         1          2
──────┼─────────────────────
1     │  0.826366   0.604595
2     │  0.917388  0.0280824

[:, :, C=2, D=2] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.375507  0.544084
2     │ 0.937854  0.807655
2x2x2x2x2 Named Array{Float64,5}

[:, :, C=1, D=1, E=1] =
A ╲ B │         1          2
──────┼─────────────────────
1     │  0.246739  0.0171019
2     │  0.959136    0.32629

[:, :, C=2, D=1, E=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.701624  0.263084
2     │ 0.167692  0.944155

[:, :, C=1, D=2, E=1] =
A ╲ B │         1          2
──────┼─────────────────────
1     │ 0.0448037   0.384563
2     │  0.989144   0.360152
⋮
1x2x2 Named Array{Float64,3}

[:, :, C=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.709708  0.622912

[:, :, C=2] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.965336  0.126207
2x1x2 Named Array{Float64,3}

[:, :, C=1] =
A ╲ B │        1
──────┼─────────
1     │ 0.603793
2     │  0.33036

[:, :, C=2] =
A ╲ B │        1
──────┼─────────
1     │ 0.914262
2     │ 0.651671
2x2x1 Named Array{Float64,3}

[:, :, C=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.457089  0.683762
2     │ 0.342897  0.661724
1000×1000 Named sparse matrix with 118 Float64 nonzero entries:
	[12789875089453902010,   144428425607543167]  =  0.753976363368188
	[16300844420296039097,  8058121953372963805]  =  0.6378170326573771
	[10923390679270416228,  9283096199793891681]  =  0.41938323866279603
	[1800328568888766379 ,  2849690884155085581]  =  0.9819965969866586
	[2963278688299848341 , 11496001657944805140]  =  0.5091789910712567
	[11177662065610013630,  8720304024814141479]  =  0.889446805734476
	[14626872821461025492,  8351221943604278133]  =  0.4571039709429401
	[4939577501977753992 , 15263238418481705881]  =  0.5901542060542919
	                                              ⋮
	[6065204439534692180 ,  8090338657268802519]  =  0.414326126954339
	[16946861163327142185, 11711005111088208244]  =  0.625078672893566
	[4806950860481619679 ,  7989582431359101293]  =  0.7050762329684734
	[1389137670392774052 ,  8779884342238752210]  =  0.06746059776070168
	[17153933318764010614,  1861743268047760089]  =  0.7767826408591199
	[2792481481398066916 ,  1861743268047760089]  =  0.11331890682448043
	[17212324651030760382,  7957587899775749890]  =  0.8090406322430432
	[6566196097100363524 ,  3733926995351842633]  =  0.11204666420196885
	[14110845009009629080,  6565262192402102057]  =  0.592111488537902Timing named index: 0.000754895, array index: 0.000709517, named key: 0.129425606
Timing sum large sparse array: 0.009269158, named: 0.025101747
done!
INFO: NamedArrays tests passed

>>> End of log
