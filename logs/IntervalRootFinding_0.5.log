>>> 'Pkg.add("IntervalRootFinding")' log
INFO: Installing AdjacentFloats v0.0.6
INFO: Installing CRlibm v0.5.0
INFO: Installing Calculus v0.2.2
INFO: Installing DiffBase v0.1.0
INFO: Installing ErrorfreeArithmetic v0.0.3
INFO: Installing FastRounding v0.0.4
INFO: Installing ForwardDiff v0.4.2
INFO: Installing IntervalArithmetic v0.10.0
INFO: Installing IntervalRootFinding v0.1.1
INFO: Installing NaNMath v0.2.5
INFO: Installing RecipesBase v0.1.0
INFO: Installing SpecialFunctions v0.1.1
INFO: Installing StaticArrays v0.3.1
INFO: Building CRlibm
Working in /home/vagrant/.julia/v0.5/CRlibm/deps/src/crlibm-1.0beta4
Working in /home/vagrant/.julia/v0.5/CRlibm/deps/src/crlibm-1.0beta4
Making all in scs_lib
Making all in .
Making all in tests
INFO: Package database updated
INFO: METADATA is out-of-date — you may not have the latest version of IntervalRootFinding
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("IntervalRootFinding")' log
Julia Version 0.5.2
Commit f4c6c9d (2017-05-06 16:34 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-121-generic #170-Ubuntu SMP Wed Jun 14 09:04:33 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1921.890625 MB free)
Uptime: 53409.0 sec
Load Avg:  1.05419921875  1.0087890625  1.029296875
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz    3070473 s       1652 s     238882 s    1443055 s        111 s
#2  3500 MHz    1365731 s       4917 s     132819 s    3683414 s          7 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.7.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.5
2 required packages:
 - IntervalRootFinding           0.1.1
 - JSON                          0.13.0
13 additional packages:
 - AdjacentFloats                0.0.6
 - CRlibm                        0.5.0
 - Calculus                      0.2.2
 - Compat                        0.26.0
 - DiffBase                      0.1.0
 - ErrorfreeArithmetic           0.0.3
 - FastRounding                  0.0.4
 - ForwardDiff                   0.4.2
 - IntervalArithmetic            0.10.0
 - NaNMath                       0.2.5
 - RecipesBase                   0.1.0
 - SpecialFunctions              0.1.1
 - StaticArrays                  0.3.1
INFO: Computing test dependencies for IntervalRootFinding...
INFO: Installing Polynomials v0.1.5
INFO: Testing IntervalRootFinding
`bisect` function: Test Failed
  Expression: bisect(X) == (0 .. 0.5,0.5 .. 1)
   Evaluated: ([0, 0.5],[0.5, 1]) == ([0, 0.500001],[0.499999, 1])
 in record(::Base.Test.DefaultTestSet, ::Base.Test.Fail) at ./test.jl:431
 in do_test(::Base.Test.Returned, ::Expr) at ./test.jl:281
 in macro expansion; at /home/vagrant/.julia/v0.5/IntervalRootFinding/test/bisect.jl:7 [inlined]
 in macro expansion; at ./test.jl:674 [inlined]
 in anonymous at ./<missing>:?
 in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
 in process_options(::Base.JLOptions) at ./client.jl:265
 in _start() at ./client.jl:321
`bisect` function: Test Failed
  Expression: bisect(X,0.25) == (0 .. 0.25,0.25 .. 1)
   Evaluated: ([0, 0.25],[0.25, 1]) == ([0, 0.250001],[0.249999, 1])
 in record(::Base.Test.DefaultTestSet, ::Base.Test.Fail) at ./test.jl:431
 in do_test(::Base.Test.Returned, ::Expr) at ./test.jl:281
 in macro expansion; at /home/vagrant/.julia/v0.5/IntervalRootFinding/test/bisect.jl:8 [inlined]
 in macro expansion; at ./test.jl:674 [inlined]
 in anonymous at ./<missing>:?
 in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
 in process_options(::Base.JLOptions) at ./client.jl:265
 in _start() at ./client.jl:321
`bisect` function: Test Failed
  Expression: bisect(X,0.25) == ((0 .. 1) × (0 .. 0.5),(0 .. 1) × (0.5 .. 2))
   Evaluated: ([0, 1] × [0, 0.5],[0, 1] × [0.5, 2]) == ([0, 1] × [0, 0.500001],[0, 1] × [0.499999, 2])
 in record(::Base.Test.DefaultTestSet, ::Base.Test.Fail) at ./test.jl:431
 in do_test(::Base.Test.Returned, ::Expr) at ./test.jl:281
 in macro expansion; at /home/vagrant/.julia/v0.5/IntervalRootFinding/test/bisect.jl:19 [inlined]
 in macro expansion; at ./test.jl:674 [inlined]
 in anonymous at ./<missing>:?
 in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
 in process_options(::Base.JLOptions) at ./client.jl:265
 in _start() at ./client.jl:321
`bisect` function: Test Failed
  Expression: bisect(X,1,0.5) == ((0 .. 0.5) × (0 .. 2),(0.5 .. 1) × (0 .. 2))
   Evaluated: ([0, 0.5] × [0, 2],[0.5, 1] × [0, 2]) == ([0, 0.500001] × [0, 2],[0.499999, 1] × [0, 2])
 in record(::Base.Test.DefaultTestSet, ::Base.Test.Fail) at ./test.jl:431
 in do_test(::Base.Test.Returned, ::Expr) at ./test.jl:281
 in macro expansion; at /home/vagrant/.julia/v0.5/IntervalRootFinding/test/bisect.jl:20 [inlined]
 in macro expansion; at ./test.jl:674 [inlined]
 in anonymous at ./<missing>:?
 in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
 in process_options(::Base.JLOptions) at ./client.jl:265
 in _start() at ./client.jl:321
`bisect` function: Test Failed
  Expression: bisect(X,1,0.25) == ((0 .. 0.25) × (0 .. 2),(0.25 .. 1) × (0 .. 2))
   Evaluated: ([0, 0.25] × [0, 2],[0.25, 1] × [0, 2]) == ([0, 0.250001] × [0, 2],[0.249999, 1] × [0, 2])
 in record(::Base.Test.DefaultTestSet, ::Base.Test.Fail) at ./test.jl:431
 in do_test(::Base.Test.Returned, ::Expr) at ./test.jl:281
 in macro expansion; at /home/vagrant/.julia/v0.5/IntervalRootFinding/test/bisect.jl:21 [inlined]
 in macro expansion; at ./test.jl:674 [inlined]
 in anonymous at ./<missing>:?
 in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
 in process_options(::Base.JLOptions) at ./client.jl:265
 in _start() at ./client.jl:321
Test Summary:     | Pass  Fail  Total
  `bisect` function |    5     5     10
ERROR: LoadError: LoadError: Some tests did not pass: 5 passed, 5 failed, 0 errored, 0 broken.
 in finish(::Base.Test.DefaultTestSet) at ./test.jl:498
 in macro expansion; at ./test.jl:681 [inlined]
 in anonymous at ./<missing>:?
 in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
 in process_options(::Base.JLOptions) at ./client.jl:265
 in _start() at ./client.jl:321
while loading /home/vagrant/.julia/v0.5/IntervalRootFinding/test/bisect.jl, in expression starting on line 5
while loading /home/vagrant/.julia/v0.5/IntervalRootFinding/test/runtests.jl, in expression starting on line 4
=========================[ ERROR: IntervalRootFinding ]=========================

failed process: Process(`/home/vagrant/julia/bin/julia -Cx86-64 -J/home/vagrant/julia/lib/julia/sys.so --compile=yes --depwarn=yes --check-bounds=yes --code-coverage=none --color=no --compilecache=yes /home/vagrant/.julia/v0.5/IntervalRootFinding/test/runtests.jl`, ProcessExited(1)) [1]

================================================================================
INFO: Removing Polynomials v0.1.5
ERROR: IntervalRootFinding had test errors
 in #test#61(::Bool, ::Function, ::Array{AbstractString,1}) at ./pkg/entry.jl:748
 in (::Base.Pkg.Entry.#kw##test)(::Array{Any,1}, ::Base.Pkg.Entry.#test, ::Array{AbstractString,1}) at ./<missing>:0
 in (::Base.Pkg.Dir.##2#3{Array{Any,1},Base.Pkg.Entry.#test,Tuple{Array{AbstractString,1}}})() at ./pkg/dir.jl:31
 in cd(::Base.Pkg.Dir.##2#3{Array{Any,1},Base.Pkg.Entry.#test,Tuple{Array{AbstractString,1}}}, ::String) at ./file.jl:59
 in #cd#1(::Array{Any,1}, ::Function, ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N}) at ./pkg/dir.jl:31
 in (::Base.Pkg.Dir.#kw##cd)(::Array{Any,1}, ::Base.Pkg.Dir.#cd, ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N}) at ./<missing>:0
 in #test#3(::Bool, ::Function, ::String, ::Vararg{String,N}) at ./pkg/pkg.jl:258
 in test(::String, ::Vararg{String,N}) at ./pkg/pkg.jl:258
 in eval(::Module, ::Any) at ./boot.jl:234
 in process_options(::Base.JLOptions) at ./client.jl:242
 in _start() at ./client.jl:321

>>> End of log
