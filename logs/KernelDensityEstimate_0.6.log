>>> 'Pkg.add("KernelDensityEstimate")' log
INFO: Installing BinDeps v0.8.8
INFO: Installing BinaryProvider v0.3.3
INFO: Installing Calculus v0.4.0
INFO: Installing DataStructures v0.8.4
INFO: Installing Distributions v0.15.0
INFO: Installing KernelDensityEstimate v0.3.1
INFO: Installing Missings v0.2.10
INFO: Installing PDMats v0.8.0
INFO: Installing QuadGK v0.3.0
INFO: Installing Rmath v0.4.0
INFO: Installing SHA v0.5.7
INFO: Installing SortingAlgorithms v0.2.1
INFO: Installing SpecialFunctions v0.6.0
INFO: Installing StatsBase v0.23.1
INFO: Installing StatsFuns v0.6.1
INFO: Installing URIParser v0.3.1
INFO: Building SpecialFunctions
INFO: Building Rmath
INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of KernelDensityEstimate
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("KernelDensityEstimate")' log
Julia Version 0.6.4
Commit 9d11f62bcb (2018-07-09 19:09 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-143-generic #192-Ubuntu SMP Tue Feb 27 10:45:36 UTC 2018 x86_64 x86_64
Memory: 2.939197540283203 GB (1462.35546875 MB free)
Uptime: 39429.0 sec
Load Avg:  1.0029296875  1.017578125  1.04541015625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz    2276038 s         67 s     180720 s     929100 s         25 s
#2  3500 MHz     466264 s       4832 s      65372 s    3340956 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem MAX_THREADS=16)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.6
2 required packages:
 - JSON                          0.17.2
 - KernelDensityEstimate         0.3.1
17 additional packages:
 - BinDeps                       0.8.8
 - BinaryProvider                0.3.3
 - Calculus                      0.4.0
 - Compat                        0.70.0
 - DataStructures                0.8.4
 - Distributions                 0.15.0
 - Missings                      0.2.10
 - Nullables                     0.0.6
 - PDMats                        0.8.0
 - QuadGK                        0.3.0
 - Rmath                         0.4.0
 - SHA                           0.5.7
 - SortingAlgorithms             0.2.1
 - SpecialFunctions              0.6.0
 - StatsBase                     0.23.1
 - StatsFuns                     0.6.1
 - URIParser                     0.3.1
INFO: Testing KernelDensityEstimate
WARNING: Method definition getType(KernelDensityEstimate.BallTreeDensity) in module KernelDensityEstimate at /home/vagrant/.julia/v0.6/KernelDensityEstimate/src/BallTreeDensity01.jl:28 overwritten at /home/vagrant/.julia/v0.6/KernelDensityEstimate/src/KDE01.jl:43.
Running UnitTest1D01...Success
Running UnitTest1Dlcv01...Success
Running UnitTest2D01...Success
Running UnitTest2Dvar01...Success
v = [testProds(D=D, M=M, N=N, n=n, dev=dev, MCMC=MCMC) for i = 1:10] = Bool[true, false, true, true, true, true, true, true, true, true]
passt = passt && rangeTestProds(D=2, M=2) = true
v = [testProds(D=D, M=M, N=N, n=n, dev=dev, MCMC=MCMC) for i = 1:10] = Bool[true, true, true, true, true, true, true, true, true, true]
passt = passt && rangeTestProds(D=2, M=4) = true
v = [testProds(D=D, M=M, N=N, n=n, dev=dev, MCMC=MCMC) for i = 1:10] = Bool[true, true, true, true, true, true, true, true, true, true]
passt = passt && rangeTestProds(D=2, M=6) = true
v = [testProds(D=D, M=M, N=N, n=n, dev=dev, MCMC=MCMC) for i = 1:10] = Bool[true, true, true, false, false, true, false, true, true, true]
passt = passt && rangeTestProds(D=3, M=6, MCMC=10) = true
v = [testProds(D=D, M=M, N=N, n=n, dev=dev, MCMC=MCMC) for i = 1:10] = Bool[true, true, true, true, false, false, true, true, true, true]
passt = passt && rangeTestProds(D=4, M=6, n=200, MCMC=10) = true
v = [testProds(D=D, M=M, N=N, n=n, dev=dev, MCMC=MCMC) for i = 1:10] = Bool[true, true, true, true, true, true, true, true, false, true]
passt = passt && rangeTestProds(D=3, M=5, N=300) = true
v = [testProds(D=D, M=M, N=N, n=n, dev=dev, MCMC=MCMC) for i = 1:10] = Bool[true, true, true, true, true, true, true, true, true, true]
passt = passt && rangeTestProds(D=2, M=7, n=300) = true
v = [testProds(D=D, M=M, N=N, n=n, dev=dev, MCMC=MCMC) for i = 1:10] = Bool[true, true, true, true, true, true, true, true, true, true]
passt = passt && rangeTestProds(D=3, M=2, MCMC=100) = true
WARNING: evaluateDualTree vector evaluation API is changing for single point evaluation across multiple dimensions rather than assuming multiple points on a univariate kde.
WARNING: evaluateDualTree vector evaluation API is changing for single point evaluation across multiple dimensions rather than assuming multiple points on a univariate kde.
a = intgAppxGaussianOffs(offs=0.0, dim=1) = 0.248460803867541
testflag = testflag && 0.2 < a < 0.35 = true
WARNING: evaluateDualTree vector evaluation API is changing for single point evaluation across multiple dimensions rather than assuming multiple points on a univariate kde.
WARNING: evaluateDualTree vector evaluation API is changing for single point evaluation across multiple dimensions rather than assuming multiple points on a univariate kde.
a = intgAppxGaussianOffs(offs=1.0, dim=1, N=1000) = 0.20793900447477257
testflag = testflag && 0.1 < a < 0.3 = true
WARNING: evaluateDualTree vector evaluation API is changing for single point evaluation across multiple dimensions rather than assuming multiple points on a univariate kde.
WARNING: evaluateDualTree vector evaluation API is changing for single point evaluation across multiple dimensions rather than assuming multiple points on a univariate kde.
a = intgAppxGaussianOffs(offs=-2.0, dim=1, N=1000) = 0.11059649796163562
testflag = testflag && 0.01 < a < 0.15 = true
a = intgAppxGaussianOffs(offs=0.0, dim=2) = 0.06632470368984386
testflag = testflag && 0.05 < a < 0.12 = true
testing rand functionality
Test Summary:                   | Pass  Total
test string and back conversion |    2      2
INFO: KernelDensityEstimate tests passed

>>> End of log
