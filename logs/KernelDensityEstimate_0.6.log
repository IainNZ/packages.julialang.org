>>> 'Pkg.add("KernelDensityEstimate")' log
INFO: Installing Calculus v0.3.1
INFO: Installing DataStructures v0.8.2
INFO: Installing Distributions v0.15.0
INFO: Installing KernelDensityEstimate v0.3.0
INFO: Installing Missings v0.2.9
INFO: Installing PDMats v0.8.0
INFO: Installing QuadGK v0.2.1
INFO: Installing Rmath v0.3.2
INFO: Installing SortingAlgorithms v0.2.1
INFO: Installing SpecialFunctions v0.4.0
INFO: Installing StatsBase v0.22.0
INFO: Installing StatsFuns v0.6.0
INFO: Building SpecialFunctions
INFO: Building Rmath
INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of KernelDensityEstimate
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("KernelDensityEstimate")' log
Julia Version 0.6.2
Commit d386e40c17 (2017-12-13 18:08 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-143-generic #192-Ubuntu SMP Tue Feb 27 10:45:36 UTC 2018 x86_64 x86_64
Memory: 2.939197540283203 GB (1466.7734375 MB free)
Uptime: 45921.0 sec
Load Avg:  0.984375  0.9794921875  1.037109375
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3514 MHz    2759138 s         78 s     197149 s     983655 s         27 s
#2  3514 MHz     613610 s       6203 s      78734 s    3805805 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.6
2 required packages:
 - JSON                          0.17.2
 - KernelDensityEstimate         0.3.0
28 additional packages:
 - BinDeps                       0.8.8
 - Cairo                         0.5.1
 - Calculus                      0.3.1
 - ColorTypes                    0.6.7
 - Colors                        0.8.2
 - Compat                        0.64.0
 - DataStructures                0.8.2
 - Distributions                 0.15.0
 - FixedPointNumbers             0.4.6
 - Graphics                      0.3.0
 - Gtk                           0.13.1
 - Missings                      0.2.9
 - NaNMath                       0.3.1
 - NodeJS                        0.4.0
 - Nullables                     0.0.5
 - PDMats                        0.8.0
 - QuadGK                        0.2.1
 - Reexport                      0.1.0
 - Requires                      0.4.3
 - Rmath                         0.3.2
 - Rsvg                          0.2.0
 - SHA                           0.5.7
 - SortingAlgorithms             0.2.1
 - SpecialFunctions              0.4.0
 - StatsBase                     0.22.0
 - StatsFuns                     0.6.0
 - URIParser                     0.3.1
 - VegaLite                      0.1.0              ecb31725 (dirty)
INFO: Testing KernelDensityEstimate
Running UnitTest1D01...Success
Running UnitTest1Dlcv01...Success
Running UnitTest2D01...Success
Running UnitTest2Dvar01...Success
v = [testProds(D=D, M=M, N=N, n=n, dev=dev, MCMC=MCMC) for i = 1:10] = Bool[true, true, true, true, true, true, true, true, true, true]
passt = passt && rangeTestProds(D=2, M=2) = true
v = [testProds(D=D, M=M, N=N, n=n, dev=dev, MCMC=MCMC) for i = 1:10] = Bool[true, true, true, true, true, true, true, true, true, true]
passt = passt && rangeTestProds(D=2, M=4) = true
v = [testProds(D=D, M=M, N=N, n=n, dev=dev, MCMC=MCMC) for i = 1:10] = Bool[true, true, true, true, true, true, true, true, true, true]
passt = passt && rangeTestProds(D=2, M=6) = true
v = [testProds(D=D, M=M, N=N, n=n, dev=dev, MCMC=MCMC) for i = 1:10] = Bool[true, false, false, true, true, true, true, true, true, true]
passt = passt && rangeTestProds(D=3, M=6, MCMC=10) = true
v = [testProds(D=D, M=M, N=N, n=n, dev=dev, MCMC=MCMC) for i = 1:10] = Bool[true, true, true, true, true, true, true, true, false, true]
passt = passt && rangeTestProds(D=4, M=6, n=200, MCMC=10) = true
v = [testProds(D=D, M=M, N=N, n=n, dev=dev, MCMC=MCMC) for i = 1:10] = Bool[true, true, true, true, true, true, true, true, true, true]
passt = passt && rangeTestProds(D=3, M=5, N=300) = true
v = [testProds(D=D, M=M, N=N, n=n, dev=dev, MCMC=MCMC) for i = 1:10] = Bool[true, true, true, true, true, true, true, true, true, true]
passt = passt && rangeTestProds(D=2, M=7, n=300) = true
v = [testProds(D=D, M=M, N=N, n=n, dev=dev, MCMC=MCMC) for i = 1:10] = Bool[true, true, true, true, true, true, true, true, true, true]
passt = passt && rangeTestProds(D=3, M=2, MCMC=100) = true
a = intgAppxGaussianOffs(offs=0.0, dim=1) = 0.27030397765003816
testflag = testflag && 0.2 < a < 0.35 = true
a = intgAppxGaussianOffs(offs=1.0, dim=1, N=1000) = 0.20200141347496972
testflag = testflag && 0.1 < a < 0.3 = true
a = intgAppxGaussianOffs(offs=-2.0, dim=1, N=1000) = 0.11880260537242322
testflag = testflag && 0.01 < a < 0.15 = true
a = intgAppxGaussianOffs(offs=0.0, dim=2) = 0.06650191870159063
testflag = testflag && 0.05 < a < 0.12 = true
testing rand functionality
INFO: KernelDensityEstimate tests passed

>>> End of log
