>>> 'Pkg.add("KrylovMethods")' log
INFO: Cloning cache of KrylovMethods from git://github.com/lruthotto/KrylovMethods.jl.git
INFO: Installing KrylovMethods v0.2.1
INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of KrylovMethods
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("KrylovMethods")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-121-generic #170-Ubuntu SMP Wed Jun 14 09:04:33 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1418.72265625 MB free)
Uptime: 49254.0 sec
Load Avg:  1.0029296875  0.9951171875  0.986328125
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz    2367858 s       5352 s     183330 s    1859965 s        129 s
#2  3500 MHz    1685119 s       2076 s     152935 s    2898512 s          5 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.9.1
 - KrylovMethods                 0.2.1
1 additional packages:
 - Compat                        0.26.0
INFO: Computing test dependencies for KrylovMethods...
INFO: Cloning cache of LinearOperators from git://github.com/JuliaSmoothOptimizers/LinearOperators.jl.git
INFO: Cloning cache of MatrixDepot from git://github.com/weijianzhang/MatrixDepot.jl.git
INFO: Installing GZip v0.2.20
INFO: Installing LinearOperators v0.3.0
INFO: Installing MatrixDepot v0.5.6
INFO: Testing KrylovMethods
=== Testing bicgstb for real matrix === 
=== bicgstb ===
iter	 relres
  1	8.80e-02
  2	1.10e-02
  3	8.23e-04
bicgstb iterated maxIter (=3) times but reached only residual norm 1.10e-02 instead of tol=1.00e-06.
bcgstb achieved desired tolerance at iteration 6.5. Residual norm is 8.52e-07.
Testing bicgstb for complex matrix
=== BICGSTB: All tests passed ===
=== Testing blockBiCGSTB for real matrix === 
=== block bicgstb ===
iter	 relres
  1	9.92e-02
  2	1.57e+00
  3	1.28e-03
blockBiCGSTB iterated maxIter (=3) times but reached only residual norm 1.57e+00 instead of tol=1.00e-06.
blockBiCGSTB achieved desired tolerance at iteration 7. Residual norm is 7.40e-07.
Testing BlockBiCGSTAB for complex matrix
=== BlockBiCGSTAB: All tests passed ===
WARNING: could not import Base.issymmetric into LinearOperators
=== Testing CG ===
=== cg ===
iter	 relres
  1	0.00e+00
cg achieved desired tolerance at iteration 1. Residual norm is 0.00e+00.
=== cg ===
iter	 relres
  1	2.56e-01
cg iterated maxIter (=1) times but reached only residual norm 2.56e-01 instead of tol=1.00e-15.
Matrix A in cg has to be positive definite.
cg achieved desired tolerance at iteration 24. Residual norm is 9.67e-06.
=== CG : All tests passed. ====
=== Testing blockCG ===
=== blockcg ===
iter	max(relres)
  1	4.62e-16
blockCG achieved desired tolerance at iteration 1. Residual norm is 4.62e-16.
=== blockcg ===
iter	max(relres)
  1	1.03e-15
blockCG iterated maxIter (=1) times but reached only residual norm 1.03e-15 instead of tol=1.00e-30.
=== blockcg ===
iter	max(relres)
  1	4.32e-01
  2	2.36e-01
  3	1.68e-01
  4	1.13e-01
  5	7.64e-02
  6	5.48e-02
  7	3.69e-02
  8	2.06e-02
  9	9.94e-03
 10	4.66e-03
 11	2.15e-03
 12	1.02e-03
 13	4.83e-04
blockCG achieved desired tolerance at iteration 13. Residual norm is 4.83e-04.
=== blockcg ===
iter	max(relres)
  1	4.32e-01
  2	2.36e-01
  3	1.68e-01
  4	1.13e-01
  5	7.64e-02
  6	5.48e-02
  7	3.69e-02
  8	2.06e-02
  9	9.94e-03
 10	4.66e-03
 11	2.15e-03
 12	1.02e-03
 13	4.83e-04
blockCG achieved desired tolerance at iteration 13. Residual norm is 4.83e-04.
=== Testing CLGS ===
=== cgls ===
iter	   |A'r|	 norm(r)	 norm(x)
  1	1.96e+01	5.92e-01	9.69e+00
  2	1.05e+00	7.42e-01	9.64e+00
cgls iterated maxIter (=2) times witout reaching tolerance. Returned result has residual norm  1.05e+00.
cgls relative gradient norm below desired tolerance at iteration 10. Returned result has residual norm  1.80e-08.
=== CGLS: All tests passed. ===
=== Testing GS ===
=== GS: All tests passed. ===
=== Testing gmres for real matrix === 
=== gmres ===
iter	 relres

  1	2.5e-01 7.9e-02 2.5e-02 	 2.5e-02
  2	8.1e-03 2.3e-03 6.9e-04 	 6.9e-04
  3	1.7e-04 4.7e-05 1.2e-05 	 1.2e-05
gmres iterated maxIter (=3) times without achieving the desired tolerance.
gmres achieved desired tolerance at iteration 3. Residual norm is 8.83e-07.
=== Testing gmres for complex matrix === 
=== GMRES: All tests passed. ===
=== Testing Lanczos helpers ===
Givens rotation for v=[0.0,0.4843710206622051]
Givens rotation for v=[-0.41660590912768564,0.0]
Givens rotation for v=[-1.6788544170821,-1.4898253119276752]
=== Testing Lanczos Bidiagonalization ===
=== Testing Lanczos Tridiagonalization ===
=== Lanczos: All tests passed. ===
=== Testing SSOR for real matrix ===
ssor achieved desired tolerance at iteration 30. Residual norm is 9.99e-03.
ssor achieved desired tolerance at iteration 45. Residual norm is 9.97e-03.
=== Testing SSOR as Preconditioner ===
cg achieved desired tolerance at iteration 54. Residual norm is 5.94e-13.
=== Testing SSOR for complex matrix ===
=== sor ===
iter	 relres

  1	1.44e-01
  2	6.43e-02
  3	3.98e-02
ssor iterated maxIter (=3) times but reached only residual norm 3.98e-02 instead of tol=1.00e-02.
ssor achieved desired tolerance at iteration 16. Residual norm is 9.23e-03.
ssor achieved desired tolerance at iteration 23. Residual norm is 9.78e-03.
=== SSOR : All tests passed. ====
=== Testing LSQR ===
iter	|r_k|		|A'*r_k|	|A|		cond(A)		STOP
001	4.629e-01	4.792e-01	1.673e+00	1.000e+00	[0,0,0]
002	2.979e-16	4.965e-16	2.000e+00	2.309e+00	[1,0,0]
lsqr achieved desired tolerance at iteration 2. The system should be compatible. Residual norm is 2.98e-16.
lsqr achieved desired tolerance at iteration 2. The system should be incompatible. Gradient norm is 4.91e-01.
lsqr achieved desired tolerance at iteration 10. The system should be incompatible. Gradient norm is 9.70e+00.
=== LSQR: All tests passed. ===
=== Testing MINRES ===
minres iterated maxIter (=1) times but reached only residual norm 3.55e-01 instead of tol=1.00e-12.
=== minres ===
iter	|r_k|		|A*r_k|		|A|			cond(A)
1	3.55e-01	3.42e+00	7.71e+00		1.19e+00
2	2.24e-02	3.12e-02	7.71e+00		1.37e+00
3	6.50e-04	3.55e-04	7.71e+00		1.71e+00
4	1.48e-05	5.98e-06	7.71e+00		1.82e+00
5	5.82e-07	4.09e-07	7.71e+00		1.82e+00
6	4.19e-17	5.33e-26	7.71e+00		1.83e+00
minres converged at iteration 6. |A r_k|=5.33e-26 and |r_k|=4.19e-17.
=== minres ===
iter	|r_k|		|A*r_k|		|A|			cond(A)
1	1.27e-01	1.08e+00	5.81e+00		1.03e+00
2	7.78e-03	1.19e-02	7.90e+00		1.41e+00
3	2.51e-04	1.54e-04	7.90e+00		1.74e+00
4	5.69e-06	2.30e-06	7.90e+00		1.86e+00
5	2.27e-07	1.61e-07	7.90e+00		1.86e+00
6	4.63e-17	1.68e-25	7.90e+00		1.87e+00
minres converged at iteration 6. |A r_k|=1.68e-25 and |r_k|=4.63e-17.
test stop by condlim
The estimated condition number (=2.08e+02) in minres is bigger than the tolerance (=2.00e+02) at iteration 10.
test stop by beta
minres stopped because beta (=7.70e-14) became smaller than the tolerance (btol=1.00e-10) at iteration 5.
test if anything is done for zero right hand side
=== MINRES : All tests passed. ====
Tests for symmetric and positive definite A
hilb	n=[5,5]	gmres iterated maxIter (=250) times without achieving the desired tolerance.
 gmres is OK cg is OK
cauchy	n=[4,4]	gmres iterated maxIter (=200) times without achieving the desired tolerance.
 gmres is OK cg is OK
invhilb	n=[4,4]	gmres iterated maxIter (=200) times without achieving the desired tolerance.
 gmres is OK cg is OK
moler	n=[7,7]	 gmres is OK cg is OK
pascal	n=[6,6]	 gmres is OK cg is OK
pei	n=[100,100]	 gmres is OK cg is OK
tridiag	n=[100,100]	gmres iterated maxIter (=5000) times without achieving the desired tolerance.
 gmres is OK cg is OK
lehmer	n=[100,100]	gmres iterated maxIter (=5000) times without achieving the desired tolerance.
 gmres is OK cg is OK
poisson	n=[144,144]	 gmres is OK cg is OK
wathen	n=[341,341]	 gmres is OK cg is OK
INFO: KrylovMethods tests passed
INFO: Removing GZip v0.2.20
INFO: Removing LinearOperators v0.3.0
INFO: Removing MatrixDepot v0.5.6

>>> End of log
