>>> 'Pkg.add("DiffEqApproxFun")' log
INFO: Cloning cache of DiffEqApproxFun from https://github.com/JuliaDiffEq/DiffEqApproxFun.jl.git
INFO: Installing AbstractFFTs v0.3.2
INFO: Installing ApproxFun v0.8.1
INFO: Installing BandedMatrices v0.5.0
INFO: Installing BinDeps v0.8.8
INFO: Installing BinaryProvider v0.3.3
INFO: Installing BlockArrays v0.4.0
INFO: Installing BlockBandedMatrices v0.1.0
INFO: Installing Calculus v0.4.0
INFO: Installing DataStructures v0.8.4
INFO: Installing DiffEqApproxFun v0.1.0
INFO: Installing DiffEqBase v3.13.3
INFO: Installing DualNumbers v0.4.0
INFO: Installing FFTW v0.0.4
INFO: Installing FastGaussQuadrature v0.3.0
INFO: Installing FastTransforms v0.3.2
INFO: Installing FillArrays v0.1.0
INFO: Installing FunctionWrappers v0.1.0
INFO: Installing HierarchicalMatrices v0.1.2
INFO: Installing IntervalSets v0.2.0
INFO: Installing IteratorInterfaceExtensions v0.0.2
INFO: Installing LinearMaps v1.0.4
INFO: Installing LowRankApprox v0.1.3
INFO: Installing MacroTools v0.4.2
INFO: Installing Missings v0.2.10
INFO: Installing NaNMath v0.3.1
INFO: Installing NamedTuples v4.0.2
INFO: Installing ProgressMeter v0.5.6
INFO: Installing RecipesBase v0.3.1
INFO: Installing RecursiveArrayTools v0.15.0
INFO: Installing Reexport v0.1.0
INFO: Installing Requires v0.4.4
INFO: Installing SHA v0.5.7
INFO: Installing SimpleTraits v0.6.0
INFO: Installing SortingAlgorithms v0.2.1
INFO: Installing SpecialFunctions v0.6.0
INFO: Installing StaticArrays v0.7.2
INFO: Installing StatsBase v0.23.1
INFO: Installing TableTraits v0.2.0
INFO: Installing ToeplitzMatrices v0.3.0
INFO: Installing URIParser v0.3.1
INFO: Building SpecialFunctions
INFO: Building FFTW
INFO: Building DiffEqBase
INFO: ~~~ DifferentialEquations.jl *BREAKING* changes  ~~~

We have changed the front-end API on how
users may define equations of motion and 
problems, for all problem types that can
be used in the DifferentialEquations.jl.
These are *BREAKING* changes, and they
also have *NO WARNINGS*!

Please see our latest documentation here:
http://docs.juliadiffeq.org/latest/

or the blogpost that describes the changes:
http://juliadiffeq.org/2018/01/24/Parameters.html

In short, the mutated argument is the first argument,
and parameters are now directly passed
into the equations of motion function. For all
types now mutation goes first, then dependent variables, 
then parameters, then independent variables. 

`f(mutated, dependent variables, p/integrator, independent variables)`

For example, this means that the ODE syntax will be `f(u,p,t)` (for the
out-of-place) and `f(du,u,p,t)` (for the in-place). Notice
that this change also removes the need for ParameterizedFunctions
as now parameters are part of the equations of motion.

For more details please visit the above links!
INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of DiffEqApproxFun
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("DiffEqApproxFun")' log
Julia Version 0.6.4
Commit 9d11f62bcb (2018-07-09 19:09 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-143-generic #192-Ubuntu SMP Tue Feb 27 10:45:36 UTC 2018 x86_64 x86_64
Memory: 2.939197540283203 GB (1463.3359375 MB free)
Uptime: 60032.0 sec
Load Avg:  0.9970703125  1.0146484375  1.1142578125
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz    3699342 s         63 s     271830 s    1139330 s         10 s
#2  3500 MHz     998152 s       4477 s     132169 s    4746148 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem MAX_THREADS=16)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.6
2 required packages:
 - DiffEqApproxFun               0.1.0
 - JSON                          0.17.2
41 additional packages:
 - AbstractFFTs                  0.3.2
 - ApproxFun                     0.8.1
 - BandedMatrices                0.5.0
 - BinDeps                       0.8.8
 - BinaryProvider                0.3.3
 - BlockArrays                   0.4.0
 - BlockBandedMatrices           0.1.0
 - Calculus                      0.4.0
 - Compat                        1.0.0
 - DataStructures                0.8.4
 - DiffEqBase                    3.13.3
 - DualNumbers                   0.4.0
 - FFTW                          0.0.4
 - FastGaussQuadrature           0.3.0
 - FastTransforms                0.3.2
 - FillArrays                    0.1.0
 - FunctionWrappers              0.1.0
 - HierarchicalMatrices          0.1.2
 - IntervalSets                  0.2.0
 - IteratorInterfaceExtensions   0.0.2
 - LinearMaps                    1.0.4
 - LowRankApprox                 0.1.3
 - MacroTools                    0.4.2
 - Missings                      0.2.10
 - NaNMath                       0.3.1
 - NamedTuples                   4.0.2
 - Nullables                     0.0.6
 - ProgressMeter                 0.5.6
 - RecipesBase                   0.3.1
 - RecursiveArrayTools           0.15.0
 - Reexport                      0.1.0
 - Requires                      0.4.4
 - SHA                           0.5.7
 - SimpleTraits                  0.6.0
 - SortingAlgorithms             0.2.1
 - SpecialFunctions              0.6.0
 - StaticArrays                  0.7.2
 - StatsBase                     0.23.1
 - TableTraits                   0.2.0
 - ToeplitzMatrices              0.3.0
 - URIParser                     0.3.1
INFO: Computing test dependencies for DiffEqApproxFun...
INFO: Cloning cache of ODE from https://github.com/JuliaDiffEq/ODE.jl.git
INFO: Installing CommonSubexpressions v0.1.0
INFO: Installing DiffBase v0.3.2
INFO: Installing DiffEqDiffTools v0.4.1
INFO: Installing DiffEqOperators v1.3.0
INFO: Installing DiffResults v0.0.3
INFO: Installing DiffRules v0.0.6
INFO: Installing Distances v0.6.0
INFO: Installing ForwardDiff v0.7.5
INFO: Installing GenericSVD v0.1.0
INFO: Installing Juno v0.4.1
INFO: Installing LineSearches v4.0.0
INFO: Installing Media v0.3.0
INFO: Installing MuladdMacro v0.0.2
INFO: Installing NLSolversBase v4.4.1
INFO: Installing NLsolve v1.1.1
INFO: Installing ODE v1.0.0
INFO: Installing OrdinaryDiffEq v3.21.0
INFO: Installing Parameters v0.9.1
INFO: Installing Polynomials v0.4.0
INFO: Installing Roots v0.6.0
INFO: Installing Sundials v1.6.0
INFO: Building DiffEqBase
INFO: ~~~ DifferentialEquations.jl *BREAKING* changes  ~~~

We have changed the front-end API on how
users may define equations of motion and 
problems, for all problem types that can
be used in the DifferentialEquations.jl.
These are *BREAKING* changes, and they
also have *NO WARNINGS*!

Please see our latest documentation here:
http://docs.juliadiffeq.org/latest/

or the blogpost that describes the changes:
http://juliadiffeq.org/2018/01/24/Parameters.html

In short, the mutated argument is the first argument,
and parameters are now directly passed
into the equations of motion function. For all
types now mutation goes first, then dependent variables, 
then parameters, then independent variables. 

`f(mutated, dependent variables, p/integrator, independent variables)`

For example, this means that the ODE syntax will be `f(u,p,t)` (for the
out-of-place) and `f(du,u,p,t)` (for the in-place). Notice
that this change also removes the need for ParameterizedFunctions
as now parameters are part of the equations of motion.

For more details please visit the above links!
INFO: Building SpecialFunctions
INFO: Building Sundials
INFO: Testing DiffEqApproxFun
 72.905836 seconds (203.93 M allocations: 8.070 GiB, 3.77% gc time)
  9.385786 seconds (19.33 M allocations: 833.148 MiB, 3.01% gc time)
Test Summary:         |
Direct ApproxFun Test | No tests
 93.701684 seconds (229.87 M allocations: 9.232 GiB, 3.58% gc time)
Indirect ApproxFun Test: Error During Test
  Got an exception of type LoadError outside of a @test
  LoadError: MethodError: no method matching (::##7#8)(::Float64, ::ApproxFun.Fun{ApproxFun.SumSpace{Tuple{ApproxFun.CosSpace{ApproxFun.PeriodicInterval{Float64},Float64},ApproxFun.SinSpace{ApproxFun.PeriodicInterval{Float64},Float64}},ApproxFun.PeriodicInterval{Float64},Float64},Float64,Array{Float64,1}})
  Closest candidates are:
    #7(::Any, ::Any, !Matched::Any) at /home/vagrant/.julia/v0.6/DiffEqApproxFun/test/indirect_approxfun.jl:9
  Stacktrace:
   [1] initialize!(::OrdinaryDiffEq.ODEIntegrator{OrdinaryDiffEq.Euler,Array{Float64,1},Float64,Void,Float64,Float64,Float64,Array{Array{Float64,1},1},DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,false,Void,DiffEqApproxFun.##2#3{Int64,DiffEqBase.ODEProblem{ApproxFun.Fun{ApproxFun.SumSpace{Tuple{ApproxFun.CosSpace{ApproxFun.PeriodicInterval{Float64},Float64},ApproxFun.SinSpace{ApproxFun.PeriodicInterval{Float64},Float64}},ApproxFun.PeriodicInterval{Float64},Float64},Float64,Array{Float64,1}},Float64,false,Void,##7#8,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},ApproxFun.SumSpace{Tuple{ApproxFun.CosSpace{ApproxFun.PeriodicInterval{Float64},Float64},ApproxFun.SinSpace{ApproxFun.PeriodicInterval{Float64},Float64}},ApproxFun.PeriodicInterval{Float64},Float64}},Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Euler,OrdinaryDiffEq.InterpolationData{DiffEqApproxFun.##2#3{Int64,DiffEqBase.ODEProblem{ApproxFun.Fun{ApproxFun.SumSpace{Tuple{ApproxFun.CosSpace{ApproxFun.PeriodicInterval{Float64},Float64},ApproxFun.SinSpace{ApproxFun.PeriodicInterval{Float64},Float64}},ApproxFun.PeriodicInterval{Float64},Float64},Float64,Array{Float64,1}},Float64,false,Void,##7#8,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},ApproxFun.SumSpace{Tuple{ApproxFun.CosSpace{ApproxFun.PeriodicInterval{Float64},Float64},ApproxFun.SinSpace{ApproxFun.PeriodicInterval{Float64},Float64}},ApproxFun.PeriodicInterval{Float64},Float64}},Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.EulerConstantCache}},DiffEqApproxFun.##2#3{Int64,DiffEqBase.ODEProblem{ApproxFun.Fun{ApproxFun.SumSpace{Tuple{ApproxFun.CosSpace{ApproxFun.PeriodicInterval{Float64},Float64},ApproxFun.SinSpace{ApproxFun.PeriodicInterval{Float64},Float64}},ApproxFun.PeriodicInterval{Float64},Float64},Float64,Array{Float64,1}},Float64,false,Void,##7#8,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},ApproxFun.SumSpace{Tuple{ApproxFun.CosSpace{ApproxFun.PeriodicInterval{Float64},Float64},ApproxFun.SinSpace{ApproxFun.PeriodicInterval{Float64},Float64}},ApproxFun.PeriodicInterval{Float64},Float64}},Void,OrdinaryDiffEq.EulerConstantCache,OrdinaryDiffEq.DEOptions{Float64,Float64,Float64,Float64,DiffEqBase.#ODE_DEFAULT_NORM,DiffEqBase.CallbackSet{Tuple{},Tuple{}},DiffEqBase.#ODE_DEFAULT_ISOUTOFDOMAIN,DiffEqBase.#ODE_DEFAULT_PROG_MESSAGE,DiffEqBase.#ODE_DEFAULT_UNSTABLE_CHECK,DataStructures.BinaryHeap{Float64,DataStructures.LessThan},DataStructures.BinaryHeap{Float64,DataStructures.LessThan},Void,Void,Int64,Array{Float64,1},Array{Float64,1},Array{Float64,1}},Array{Float64,1}}, ::OrdinaryDiffEq.EulerConstantCache) at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/perform_step/fixed_timestep_perform_step.jl:40
   [2] #init#1470(::Int64, ::Array{Float64,1}, ::Array{Float64,1}, ::Array{Float64,1}, ::Void, ::Bool, ::Void, ::Bool, ::Bool, ::Void, ::Bool, ::Bool, ::Float64, ::Bool, ::Rational{Int64}, ::Void, ::Void, ::Int64, ::Rational{Int64}, ::Int64, ::Int64, ::Rational{Int64}, ::Bool, ::Int64, ::Void, ::Void, ::Int64, ::Float64, ::Float64, ::DiffEqBase.#ODE_DEFAULT_NORM, ::DiffEqBase.#ODE_DEFAULT_ISOUTOFDOMAIN, ::DiffEqBase.#ODE_DEFAULT_UNSTABLE_CHECK, ::Bool, ::Bool, ::Bool, ::Bool, ::Bool, ::Bool, ::Bool, ::Bool, ::Int64, ::String, ::DiffEqBase.#ODE_DEFAULT_PROG_MESSAGE, ::Void, ::Bool, ::Bool, ::Array{Any,1}, ::DiffEqBase.#init, ::DiffEqBase.ODEProblem{Array{Float64,1},Float64,false,Void,DiffEqApproxFun.##2#3{Int64,DiffEqBase.ODEProblem{ApproxFun.Fun{ApproxFun.SumSpace{Tuple{ApproxFun.CosSpace{ApproxFun.PeriodicInterval{Float64},Float64},ApproxFun.SinSpace{ApproxFun.PeriodicInterval{Float64},Float64}},ApproxFun.PeriodicInterval{Float64},Float64},Float64,Array{Float64,1}},Float64,false,Void,##7#8,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},ApproxFun.SumSpace{Tuple{ApproxFun.CosSpace{ApproxFun.PeriodicInterval{Float64},Float64},ApproxFun.SinSpace{ApproxFun.PeriodicInterval{Float64},Float64}},ApproxFun.PeriodicInterval{Float64},Float64}},Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem}, ::OrdinaryDiffEq.Euler, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/solve.jl:315
   [3] (::DiffEqBase.#kw##init)(::Array{Any,1}, ::DiffEqBase.#init, ::DiffEqBase.ODEProblem{Array{Float64,1},Float64,false,Void,DiffEqApproxFun.##2#3{Int64,DiffEqBase.ODEProblem{ApproxFun.Fun{ApproxFun.SumSpace{Tuple{ApproxFun.CosSpace{ApproxFun.PeriodicInterval{Float64},Float64},ApproxFun.SinSpace{ApproxFun.PeriodicInterval{Float64},Float64}},ApproxFun.PeriodicInterval{Float64},Float64},Float64,Array{Float64,1}},Float64,false,Void,##7#8,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},ApproxFun.SumSpace{Tuple{ApproxFun.CosSpace{ApproxFun.PeriodicInterval{Float64},Float64},ApproxFun.SinSpace{ApproxFun.PeriodicInterval{Float64},Float64}},ApproxFun.PeriodicInterval{Float64},Float64}},Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem}, ::OrdinaryDiffEq.Euler, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at ./<missing>:0
   [4] #solve#1469(::Array{Any,1}, ::Function, ::DiffEqBase.ODEProblem{Array{Float64,1},Float64,false,Void,DiffEqApproxFun.##2#3{Int64,DiffEqBase.ODEProblem{ApproxFun.Fun{ApproxFun.SumSpace{Tuple{ApproxFun.CosSpace{ApproxFun.PeriodicInterval{Float64},Float64},ApproxFun.SinSpace{ApproxFun.PeriodicInterval{Float64},Float64}},ApproxFun.PeriodicInterval{Float64},Float64},Float64,Array{Float64,1}},Float64,false,Void,##7#8,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},ApproxFun.SumSpace{Tuple{ApproxFun.CosSpace{ApproxFun.PeriodicInterval{Float64},Float64},ApproxFun.SinSpace{ApproxFun.PeriodicInterval{Float64},Float64}},ApproxFun.PeriodicInterval{Float64},Float64}},Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem}, ::OrdinaryDiffEq.Euler, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/solve.jl:6
   [5] (::DiffEqBase.#kw##solve)(::Array{Any,1}, ::DiffEqBase.#solve, ::DiffEqBase.ODEProblem{Array{Float64,1},Float64,false,Void,DiffEqApproxFun.##2#3{Int64,DiffEqBase.ODEProblem{ApproxFun.Fun{ApproxFun.SumSpace{Tuple{ApproxFun.CosSpace{ApproxFun.PeriodicInterval{Float64},Float64},ApproxFun.SinSpace{ApproxFun.PeriodicInterval{Float64},Float64}},ApproxFun.PeriodicInterval{Float64},Float64},Float64,Array{Float64,1}},Float64,false,Void,##7#8,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},ApproxFun.SumSpace{Tuple{ApproxFun.CosSpace{ApproxFun.PeriodicInterval{Float64},Float64},ApproxFun.SinSpace{ApproxFun.PeriodicInterval{Float64},Float64}},ApproxFun.PeriodicInterval{Float64},Float64}},Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem}, ::OrdinaryDiffEq.Euler, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at ./<missing>:0
   [6] #solve#5(::Array{Any,1}, ::Function, ::DiffEqApproxFun.ApproxFunProblem{DiffEqBase.ODEProblem{Array{Float64,1},Float64,false,Void,DiffEqApproxFun.##2#3{Int64,DiffEqBase.ODEProblem{ApproxFun.Fun{ApproxFun.SumSpace{Tuple{ApproxFun.CosSpace{ApproxFun.PeriodicInterval{Float64},Float64},ApproxFun.SinSpace{ApproxFun.PeriodicInterval{Float64},Float64}},ApproxFun.PeriodicInterval{Float64},Float64},Float64,Array{Float64,1}},Float64,false,Void,##7#8,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},ApproxFun.SumSpace{Tuple{ApproxFun.CosSpace{ApproxFun.PeriodicInterval{Float64},Float64},ApproxFun.SinSpace{ApproxFun.PeriodicInterval{Float64},Float64}},ApproxFun.PeriodicInterval{Float64},Float64}},Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},ApproxFun.SumSpace{Tuple{ApproxFun.CosSpace{ApproxFun.PeriodicInterval{Float64},Float64},ApproxFun.SinSpace{ApproxFun.PeriodicInterval{Float64},Float64}},ApproxFun.PeriodicInterval{Float64},Float64}}, ::OrdinaryDiffEq.Euler) at /home/vagrant/.julia/v0.6/DiffEqApproxFun/src/problem_solution_types.jl:36
   [7] (::DiffEqBase.#kw##solve)(::Array{Any,1}, ::DiffEqBase.#solve, ::DiffEqApproxFun.ApproxFunProblem{DiffEqBase.ODEProblem{Array{Float64,1},Float64,false,Void,DiffEqApproxFun.##2#3{Int64,DiffEqBase.ODEProblem{ApproxFun.Fun{ApproxFun.SumSpace{Tuple{ApproxFun.CosSpace{ApproxFun.PeriodicInterval{Float64},Float64},ApproxFun.SinSpace{ApproxFun.PeriodicInterval{Float64},Float64}},ApproxFun.PeriodicInterval{Float64},Float64},Float64,Array{Float64,1}},Float64,false,Void,##7#8,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},ApproxFun.SumSpace{Tuple{ApproxFun.CosSpace{ApproxFun.PeriodicInterval{Float64},Float64},ApproxFun.SinSpace{ApproxFun.PeriodicInterval{Float64},Float64}},ApproxFun.PeriodicInterval{Float64},Float64}},Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},ApproxFun.SumSpace{Tuple{ApproxFun.CosSpace{ApproxFun.PeriodicInterval{Float64},Float64},ApproxFun.SinSpace{ApproxFun.PeriodicInterval{Float64},Float64}},ApproxFun.PeriodicInterval{Float64},Float64}}, ::OrdinaryDiffEq.Euler) at ./<missing>:0
   [8] include_from_node1(::String) at ./loading.jl:576
   [9] include(::String) at ./sysimg.jl:14
   [10] macro expansion at /home/vagrant/.julia/v0.6/DiffEqApproxFun/test/runtests.jl:5 [inlined]
   [11] macro expansion at ./test.jl:860 [inlined]
   [12] macro expansion at ./util.jl:237 [inlined]
   [13] anonymous at ./<missing>:?
   [14] include_from_node1(::String) at ./loading.jl:576
   [15] include(::String) at ./sysimg.jl:14
   [16] process_options(::Base.JLOptions) at ./client.jl:305
   [17] _start() at ./client.jl:371
  while loading /home/vagrant/.julia/v0.6/DiffEqApproxFun/test/indirect_approxfun.jl, in expression starting on line 237
Test Summary:           | Error  Total
Indirect ApproxFun Test |     1      1
ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 1 errored, 0 broken.
while loading /home/vagrant/.julia/v0.6/DiffEqApproxFun/test/runtests.jl, in expression starting on line 5
===========================[ ERROR: DiffEqApproxFun ]===========================

failed process: Process(`/home/vagrant/julia/bin/julia -Cgeneric -J/home/vagrant/julia/lib/julia/sys.so --compile=yes --depwarn=yes --check-bounds=yes --code-coverage=none --color=no --compilecache=yes /home/vagrant/.julia/v0.6/DiffEqApproxFun/test/runtests.jl`, ProcessExited(1)) [1]

================================================================================
INFO: Removing CommonSubexpressions v0.1.0
INFO: Removing DiffBase v0.3.2
INFO: Removing DiffEqDiffTools v0.4.1
INFO: Removing DiffEqOperators v1.3.0
INFO: Removing DiffResults v0.0.3
INFO: Removing DiffRules v0.0.6
INFO: Removing Distances v0.6.0
INFO: Removing ForwardDiff v0.7.5
INFO: Removing GenericSVD v0.1.0
INFO: Removing Juno v0.4.1
INFO: Removing LineSearches v4.0.0
INFO: Removing Media v0.3.0
INFO: Removing MuladdMacro v0.0.2
INFO: Removing NLSolversBase v4.4.1
INFO: Removing NLsolve v1.1.1
INFO: Removing ODE v1.0.0
INFO: Removing OrdinaryDiffEq v3.21.0
INFO: Removing Parameters v0.9.1
INFO: Removing Polynomials v0.4.0
INFO: Removing Roots v0.6.0
INFO: Removing Sundials v1.6.0
ERROR: DiffEqApproxFun had test errors

>>> End of log
