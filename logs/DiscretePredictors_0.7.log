>>> 'Pkg.add("DiscretePredictors")' log
WARNING: Base.Pkg is deprecated, run `using Pkg` instead
 in module Main
[ Info: Cloning cache of DiscretePredictors from https://github.com/v-i-s-h/DiscretePredictors.jl.git
[ Info: Installing DiscretePredictors v0.1.0
[ Info: Package database updated

>>> 'Pkg.test("DiscretePredictors")' log
WARNING: Base.versioninfo is deprecated: it has been moved to the standard library package `InteractiveUtils`.
Add `using InteractiveUtils` to your imports.
 in module Main
WARNING: Base.versioninfo is deprecated: it has been moved to the standard library package `InteractiveUtils`.
Add `using InteractiveUtils` to your imports.
 in module Main
Julia Version 0.7.0-DEV.4925
Commit 55d4808a62 (2018-04-21 19:20 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
      Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-143-generic #192-Ubuntu SMP Tue Feb 27 10:45:36 UTC 2018 x86_64 x86_64
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
              speed         user         nice          sys         idle          irq
       #1  3499 MHz    4061003 s         60 s     318650 s    1237591 s         55 s
       #2  3499 MHz    1020758 s       7503 s     121310 s    5248209 s          2 s
       
  Memory: 2.939197540283203 GB (1353.51953125 MB free)
  Uptime: 65467.0 sec
  Load Avg:  1.01123046875  1.02294921875  0.97607421875
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant
Packages:
  Package Directory: /home/vagrant/.julia/v0.7
  Package Status:
2 required packages:
 - DiscretePredictors            0.1.0
 - JSON                          0.17.2
2 additional packages:
 - Compat                        0.64.0
 - Nullables                     0.0.5
WARNING: Base.Pkg is deprecated, run `using Pkg` instead
 in module Main
[ Info: Testing DiscretePredictors
┌ Warning: Deprecated syntax `type` at /home/vagrant/.julia/v0.7/DiscretePredictors/src/Trie.jl:17.
│ Use `mutable struct` instead.
└ @ nothing Trie.jl:17
┌ Warning: Deprecated syntax `parametric method syntax (::Type{Trie{T1, T2}}){T1, T2}()` around /home/vagrant/.julia/v0.7/DiscretePredictors/src/Trie.jl:23.
│ Use `(::Type{Trie{T1, T2}})() where {T1, T2}` instead.
└ @ nothing Trie.jl:23
┌ Warning: Deprecated syntax `parametric method syntax (::Type{Trie{T1, T2}}){T1, T2}(ks, vs)` around /home/vagrant/.julia/v0.7/DiscretePredictors/src/Trie.jl:31.
│ Use `(::Type{Trie{T1, T2}})(ks, vs) where {T1, T2}` instead.
└ @ nothing Trie.jl:31
┌ Warning: Deprecated syntax `parametric method syntax (::Type{Trie{T1, T2}}){T1, T2}(kv)` around /home/vagrant/.julia/v0.7/DiscretePredictors/src/Trie.jl:39.
│ Use `(::Type{Trie{T1, T2}})(kv) where {T1, T2}` instead.
└ @ nothing Trie.jl:39
┌ Warning: Deprecated syntax `parametric method syntax setindex!{T1, T2}(t::Trie{T1, T2}, val::T2, key::Vector{T1})` around /home/vagrant/.julia/v0.7/DiscretePredictors/src/Trie.jl:54.
│ Use `setindex!(t::Trie{T1, T2}, val::T2, key::Vector{T1}) where {T1, T2}` instead.
└ @ nothing Trie.jl:54
┌ Warning: Deprecated syntax `parametric method syntax getindex{T1, T2}(t::Trie{T1, T2}, key::Vector{T1})` around /home/vagrant/.julia/v0.7/DiscretePredictors/src/Trie.jl:66.
│ Use `getindex(t::Trie{T1, T2}, key::Vector{T1}) where {T1, T2}` instead.
└ @ nothing Trie.jl:66
┌ Warning: Deprecated syntax `parametric method syntax subtrie{T1, T2}(t::Trie{T1, T2}, prefix::Vector{T1})` around /home/vagrant/.julia/v0.7/DiscretePredictors/src/Trie.jl:77.
│ Use `subtrie(t::Trie{T1, T2}, prefix::Vector{T1}) where {T1, T2}` instead.
└ @ nothing Trie.jl:77
┌ Warning: Deprecated syntax `parametric method syntax haskey{T1, T2}(t::Trie{T1, T2}, key::Vector{T1})` around /home/vagrant/.julia/v0.7/DiscretePredictors/src/Trie.jl:89.
│ Use `haskey(t::Trie{T1, T2}, key::Vector{T1}) where {T1, T2}` instead.
└ @ nothing Trie.jl:89
┌ Warning: Deprecated syntax `parametric method syntax get{T1, T2}(t::Trie{T1, T2}, key::Vector{T1}, notfound)` around /home/vagrant/.julia/v0.7/DiscretePredictors/src/Trie.jl:94.
│ Use `get(t::Trie{T1, T2}, key::Vector{T1}, notfound) where {T1, T2}` instead.
└ @ nothing Trie.jl:94
┌ Warning: Deprecated syntax `parametric method syntax keys{T1, T2}(t::Trie{T1, T2}, prefix::Vector{T1} = Array{T1, 1}(), found = Array{Array{T1, 1}, 1}())` around /home/vagrant/.julia/v0.7/DiscretePredictors/src/Trie.jl:106.
│ Use `keys(t::Trie{T1, T2}, prefix::Vector{T1} = Array{T1, 1}(), found = Array{Array{T1, 1}, 1}()) where {T1, T2}` instead.
└ @ nothing Trie.jl:106
┌ Warning: Deprecated syntax `parametric method syntax keys_with_prefix{T1, T2}(t::Trie{T1, T2}, prefix::Vector{T1})` around /home/vagrant/.julia/v0.7/DiscretePredictors/src/Trie.jl:116.
│ Use `keys_with_prefix(t::Trie{T1, T2}, prefix::Vector{T1}) where {T1, T2}` instead.
└ @ nothing Trie.jl:116
┌ Warning: Deprecated syntax `parametric method syntax children{T1, T2}(t::Trie{T1, T2}, prefix::Vector{T1})` around /home/vagrant/.julia/v0.7/DiscretePredictors/src/Trie.jl:121.
│ Use `children(t::Trie{T1, T2}, prefix::Vector{T1}) where {T1, T2}` instead.
└ @ nothing Trie.jl:121
┌ Warning: Deprecated syntax `parametric method syntax show{T1, T2}(io::IO, t::Trie{T1, T2})` around /home/vagrant/.julia/v0.7/DiscretePredictors/src/Trie.jl:127.
│ Use `show(io::IO, t::Trie{T1, T2}) where {T1, T2}` instead.
└ @ nothing Trie.jl:127
WARNING: importing deprecated binding Base.@sprintf into DiscretePredictors.
WARNING: Base.@sprintf is deprecated: it has been moved to the standard library package `Printf`.
Add `using Printf` to your imports.
  likely near /home/vagrant/.julia/v0.7/DiscretePredictors/src/Trie.jl:131
┌ Warning: Deprecated syntax `parametric method syntax node_string{T1, T2}(t::Trie{T1, T2}, level::Int = 0)` around /home/vagrant/.julia/v0.7/DiscretePredictors/src/Trie.jl:132.
│ Use `node_string(t::Trie{T1, T2}, level::Int = 0) where {T1, T2}` instead.
└ @ nothing Trie.jl:132
┌ Warning: Deprecated syntax `multiple line breaks between doc string and object` at /home/vagrant/.julia/v0.7/DiscretePredictors/src/BasePredictor.jl:107.
│ Use `at most one line break` instead.
└ @ nothing BasePredictor.jl:107
┌ Warning: Deprecated syntax `parametric method syntax add!{T}(p::BasePredictor{T}, sym::T)` around /home/vagrant/.julia/v0.7/DiscretePredictors/src/BasePredictor.jl:22.
│ Use `add!(p::BasePredictor{T}, sym::T) where T` instead.
└ @ nothing BasePredictor.jl:22
┌ Warning: Deprecated syntax `parametric method syntax predict{T}(p::BasePredictor{T})` around /home/vagrant/.julia/v0.7/DiscretePredictors/src/BasePredictor.jl:47.
│ Use `predict(p::BasePredictor{T}) where T` instead.
└ @ nothing BasePredictor.jl:47
WARNING: Base.@sprintf is deprecated: it has been moved to the standard library package `Printf`.
Add `using Printf` to your imports.
  likely near /home/vagrant/.julia/v0.7/DiscretePredictors/src/BasePredictor.jl:50
┌ Warning: Deprecated syntax `parametric method syntax info_string{T}(p::BasePredictor{T})` around /home/vagrant/.julia/v0.7/DiscretePredictors/src/BasePredictor.jl:66.
│ Use `info_string(p::BasePredictor{T}) where T` instead.
└ @ nothing BasePredictor.jl:66
WARNING: Base.@sprintf is deprecated: it has been moved to the standard library package `Printf`.
Add `using Printf` to your imports.
  likely near /home/vagrant/.julia/v0.7/DiscretePredictors/src/BasePredictor.jl:69
┌ Warning: Deprecated syntax `parametric method syntax unique_string{T}(p::BasePredictor{T})` around /home/vagrant/.julia/v0.7/DiscretePredictors/src/BasePredictor.jl:85.
│ Use `unique_string(p::BasePredictor{T}) where T` instead.
└ @ nothing BasePredictor.jl:85
┌ Warning: Deprecated syntax `parametric method syntax get_best_symbol{T}(p::BasePredictor{T}, default_sym = nothing)` around /home/vagrant/.julia/v0.7/DiscretePredictors/src/BasePredictor.jl:108.
│ Use `get_best_symbol(p::BasePredictor{T}, default_sym = nothing) where T` instead.
└ @ nothing BasePredictor.jl:108
┌ Warning: Deprecated syntax `parametric method syntax get_best_symbol{T}(symbols::Dict{T, Float64}, default_sym = nothing)` around /home/vagrant/.julia/v0.7/DiscretePredictors/src/BasePredictor.jl:113.
│ Use `get_best_symbol(symbols::Dict{T, Float64}, default_sym = nothing) where T` instead.
└ @ nothing BasePredictor.jl:113
┌ Warning: Deprecated syntax `parametric method syntax size{T}(p::BasePredictor{T})` around /home/vagrant/.julia/v0.7/DiscretePredictors/src/BasePredictor.jl:157.
│ Use `size(p::BasePredictor{T}) where T` instead.
└ @ nothing BasePredictor.jl:157
┌ Warning: Deprecated syntax `multiple line breaks between doc string and object` at /home/vagrant/.julia/v0.7/DiscretePredictors/src/ALZ.jl:23.
│ Use `at most one line break` instead.
└ @ nothing ALZ.jl:23
┌ Warning: Deprecated syntax `type` at /home/vagrant/.julia/v0.7/DiscretePredictors/src/ALZ.jl:23.
│ Use `mutable struct` instead.
└ @ nothing ALZ.jl:23
┌ Warning: Deprecated syntax `(l > p.max_lz_length)?` at /home/vagrant/.julia/v0.7/DiscretePredictors/src/ALZ.jl:43.
│ Use `(l > p.max_lz_length) ?` instead.
└ @ nothing ALZ.jl:43
┌ Warning: Deprecated syntax `(l > p.max_lz_length) ?l` at /home/vagrant/.julia/v0.7/DiscretePredictors/src/ALZ.jl:43.
│ Use `(l > p.max_lz_length) ? l` instead.
└ @ nothing ALZ.jl:43
┌ Warning: Deprecated syntax `(l > p.max_lz_length) ? l:` at /home/vagrant/.julia/v0.7/DiscretePredictors/src/ALZ.jl:43.
│ Use `(l > p.max_lz_length) ? l :` instead.
└ @ nothing ALZ.jl:43
┌ Warning: Deprecated syntax `(l > p.max_lz_length) ? l :p` at /home/vagrant/.julia/v0.7/DiscretePredictors/src/ALZ.jl:43.
│ Use `(l > p.max_lz_length) ? l : p` instead.
└ @ nothing ALZ.jl:43
┌ Warning: Deprecated syntax `isempty(list_of_children)?` at /home/vagrant/.julia/v0.7/DiscretePredictors/src/ALZ.jl:74.
│ Use `isempty(list_of_children) ?` instead.
└ @ nothing ALZ.jl:74
┌ Warning: Deprecated syntax `isempty(list_of_children) ? 0:` at /home/vagrant/.julia/v0.7/DiscretePredictors/src/ALZ.jl:75.
│ Use `isempty(list_of_children) ? 0 :` instead.
└ @ nothing ALZ.jl:75
┌ Warning: Deprecated syntax `parametric method syntax add!{T}(p::ALZ{T}, sym::T)` around /home/vagrant/.julia/v0.7/DiscretePredictors/src/ALZ.jl:36.
│ Use `add!(p::ALZ{T}, sym::T) where T` instead.
└ @ nothing ALZ.jl:36
┌ Warning: Deprecated syntax `parametric method syntax predict{T}(p::ALZ{T})` around /home/vagrant/.julia/v0.7/DiscretePredictors/src/ALZ.jl:67.
│ Use `predict(p::ALZ{T}) where T` instead.
└ @ nothing ALZ.jl:67
WARNING: Base.@sprintf is deprecated: it has been moved to the standard library package `Printf`.
Add `using Printf` to your imports.
  likely near /home/vagrant/.julia/v0.7/DiscretePredictors/src/ALZ.jl:92
┌ Warning: Deprecated syntax `parametric method syntax info_string{T}(p::ALZ{T})` around /home/vagrant/.julia/v0.7/DiscretePredictors/src/ALZ.jl:93.
│ Use `info_string(p::ALZ{T}) where T` instead.
└ @ nothing ALZ.jl:93
WARNING: Base.@sprintf is deprecated: it has been moved to the standard library package `Printf`.
Add `using Printf` to your imports.
  likely near /home/vagrant/.julia/v0.7/DiscretePredictors/src/ALZ.jl:96
┌ Warning: Deprecated syntax `parametric method syntax unique_string{T}(p::ALZ{T})` around /home/vagrant/.julia/v0.7/DiscretePredictors/src/ALZ.jl:97.
│ Use `unique_string(p::ALZ{T}) where T` instead.
└ @ nothing ALZ.jl:97
┌ Warning: Deprecated syntax `multiple line breaks between doc string and object` at /home/vagrant/.julia/v0.7/DiscretePredictors/src/DG.jl:24.
│ Use `at most one line break` instead.
└ @ nothing DG.jl:24
┌ Warning: Deprecated syntax `type` at /home/vagrant/.julia/v0.7/DiscretePredictors/src/DG.jl:24.
│ Use `mutable struct` instead.
└ @ nothing DG.jl:24
┌ Warning: Deprecated syntax `parametric method syntax add!{T}(p::DG{T}, sym::T)` around /home/vagrant/.julia/v0.7/DiscretePredictors/src/DG.jl:34.
│ Use `add!(p::DG{T}, sym::T) where T` instead.
└ @ nothing DG.jl:34
┌ Warning: Deprecated syntax `parametric method syntax predict{T}(p::DG{T})` around /home/vagrant/.julia/v0.7/DiscretePredictors/src/DG.jl:60.
│ Use `predict(p::DG{T}) where T` instead.
└ @ nothing DG.jl:60
WARNING: Base.@sprintf is deprecated: it has been moved to the standard library package `Printf`.
Add `using Printf` to your imports.
  likely near /home/vagrant/.julia/v0.7/DiscretePredictors/src/DG.jl:82
┌ Warning: Deprecated syntax `parametric method syntax info_string{T}(p::DG{T})` around /home/vagrant/.julia/v0.7/DiscretePredictors/src/DG.jl:83.
│ Use `info_string(p::DG{T}) where T` instead.
└ @ nothing DG.jl:83
WARNING: Base.@sprintf is deprecated: it has been moved to the standard library package `Printf`.
Add `using Printf` to your imports.
  likely near /home/vagrant/.julia/v0.7/DiscretePredictors/src/DG.jl:86
┌ Warning: Deprecated syntax `parametric method syntax unique_string{T}(p::DG{T})` around /home/vagrant/.julia/v0.7/DiscretePredictors/src/DG.jl:87.
│ Use `unique_string(p::DG{T}) where T` instead.
└ @ nothing DG.jl:87
┌ Warning: Deprecated syntax `multiple line breaks between doc string and object` at /home/vagrant/.julia/v0.7/DiscretePredictors/src/KOM.jl:28.
│ Use `at most one line break` instead.
└ @ nothing KOM.jl:28
┌ Warning: Deprecated syntax `type` at /home/vagrant/.julia/v0.7/DiscretePredictors/src/KOM.jl:29.
│ Use `mutable struct` instead.
└ @ nothing KOM.jl:29
┌ Warning: Deprecated syntax `haskey(p.model, buffer)?` at /home/vagrant/.julia/v0.7/DiscretePredictors/src/KOM.jl:45.
│ Use `haskey(p.model, buffer) ?` instead.
└ @ nothing KOM.jl:45
┌ Warning: Deprecated syntax `haskey(p.model, buffer) ? (p.model[buffer] + 1):` at /home/vagrant/.julia/v0.7/DiscretePredictors/src/KOM.jl:45.
│ Use `haskey(p.model, buffer) ? (p.model[buffer] + 1) :` instead.
└ @ nothing KOM.jl:45
┌ Warning: Deprecated syntax `parametric method syntax add!{T}(p::KOM{T}, sym::T)` around /home/vagrant/.julia/v0.7/DiscretePredictors/src/KOM.jl:39.
│ Use `add!(p::KOM{T}, sym::T) where T` instead.
└ @ nothing KOM.jl:39
┌ Warning: Deprecated syntax `parametric method syntax predict{T}(p::KOM{T})` around /home/vagrant/.julia/v0.7/DiscretePredictors/src/KOM.jl:58.
│ Use `predict(p::KOM{T}) where T` instead.
└ @ nothing KOM.jl:58
WARNING: Base.@sprintf is deprecated: it has been moved to the standard library package `Printf`.
Add `using Printf` to your imports.
  likely near /home/vagrant/.julia/v0.7/DiscretePredictors/src/KOM.jl:80
┌ Warning: Deprecated syntax `parametric method syntax info_string{T}(p::KOM{T})` around /home/vagrant/.julia/v0.7/DiscretePredictors/src/KOM.jl:81.
│ Use `info_string(p::KOM{T}) where T` instead.
└ @ nothing KOM.jl:81
WARNING: Base.@sprintf is deprecated: it has been moved to the standard library package `Printf`.
Add `using Printf` to your imports.
  likely near /home/vagrant/.julia/v0.7/DiscretePredictors/src/KOM.jl:84
┌ Warning: Deprecated syntax `parametric method syntax unique_string{T}(p::KOM{T})` around /home/vagrant/.julia/v0.7/DiscretePredictors/src/KOM.jl:85.
│ Use `unique_string(p::KOM{T}) where T` instead.
└ @ nothing KOM.jl:85
┌ Warning: Deprecated syntax `multiple line breaks between doc string and object` at /home/vagrant/.julia/v0.7/DiscretePredictors/src/LeZiUpdate.jl:28.
│ Use `at most one line break` instead.
└ @ nothing LeZiUpdate.jl:28
┌ Warning: Deprecated syntax `type` at /home/vagrant/.julia/v0.7/DiscretePredictors/src/LeZiUpdate.jl:28.
│ Use `mutable struct` instead.
└ @ nothing LeZiUpdate.jl:28
┌ Warning: Deprecated syntax `isempty(list_of_children)?` at /home/vagrant/.julia/v0.7/DiscretePredictors/src/LeZiUpdate.jl:77.
│ Use `isempty(list_of_children) ?` instead.
└ @ nothing LeZiUpdate.jl:77
┌ Warning: Deprecated syntax `isempty(list_of_children) ? 0:` at /home/vagrant/.julia/v0.7/DiscretePredictors/src/LeZiUpdate.jl:78.
│ Use `isempty(list_of_children) ? 0 :` instead.
└ @ nothing LeZiUpdate.jl:78
┌ Warning: Deprecated syntax `parametric method syntax add!{T}(p::LeZiUpdate{T}, sym::T)` around /home/vagrant/.julia/v0.7/DiscretePredictors/src/LeZiUpdate.jl:39.
│ Use `add!(p::LeZiUpdate{T}, sym::T) where T` instead.
└ @ nothing LeZiUpdate.jl:39
┌ Warning: Deprecated syntax `parametric method syntax predict{T}(p::LeZiUpdate{T})` around /home/vagrant/.julia/v0.7/DiscretePredictors/src/LeZiUpdate.jl:69.
│ Use `predict(p::LeZiUpdate{T}) where T` instead.
└ @ nothing LeZiUpdate.jl:69
WARNING: Base.@sprintf is deprecated: it has been moved to the standard library package `Printf`.
Add `using Printf` to your imports.
  likely near /home/vagrant/.julia/v0.7/DiscretePredictors/src/LeZiUpdate.jl:95
┌ Warning: Deprecated syntax `parametric method syntax info_string{T}(p::LeZiUpdate{T})` around /home/vagrant/.julia/v0.7/DiscretePredictors/src/LeZiUpdate.jl:96.
│ Use `info_string(p::LeZiUpdate{T}) where T` instead.
└ @ nothing LeZiUpdate.jl:96
WARNING: Base.@sprintf is deprecated: it has been moved to the standard library package `Printf`.
Add `using Printf` to your imports.
  likely near /home/vagrant/.julia/v0.7/DiscretePredictors/src/LeZiUpdate.jl:99
┌ Warning: Deprecated syntax `parametric method syntax unique_string{T}(p::LeZiUpdate{T})` around /home/vagrant/.julia/v0.7/DiscretePredictors/src/LeZiUpdate.jl:100.
│ Use `unique_string(p::LeZiUpdate{T}) where T` instead.
└ @ nothing LeZiUpdate.jl:100
┌ Warning: Deprecated syntax `multiple line breaks between doc string and object` at /home/vagrant/.julia/v0.7/DiscretePredictors/src/LZ78.jl:28.
│ Use `at most one line break` instead.
└ @ nothing LZ78.jl:28
┌ Warning: Deprecated syntax `type` at /home/vagrant/.julia/v0.7/DiscretePredictors/src/LZ78.jl:28.
│ Use `mutable struct` instead.
└ @ nothing LZ78.jl:28
┌ Warning: Deprecated syntax `isempty(list_of_children)?` at /home/vagrant/.julia/v0.7/DiscretePredictors/src/LZ78.jl:79.
│ Use `isempty(list_of_children) ?` instead.
└ @ nothing LZ78.jl:79
┌ Warning: Deprecated syntax `isempty(list_of_children) ? 0:` at /home/vagrant/.julia/v0.7/DiscretePredictors/src/LZ78.jl:80.
│ Use `isempty(list_of_children) ? 0 :` instead.
└ @ nothing LZ78.jl:80
┌ Warning: Deprecated syntax `parametric method syntax add!{T}(p::LZ78{T}, sym::T)` around /home/vagrant/.julia/v0.7/DiscretePredictors/src/LZ78.jl:39.
│ Use `add!(p::LZ78{T}, sym::T) where T` instead.
└ @ nothing LZ78.jl:39
┌ Warning: Deprecated syntax `parametric method syntax predict{T}(p::LZ78{T})` around /home/vagrant/.julia/v0.7/DiscretePredictors/src/LZ78.jl:66.
│ Use `predict(p::LZ78{T}) where T` instead.
└ @ nothing LZ78.jl:66
WARNING: Base.@sprintf is deprecated: it has been moved to the standard library package `Printf`.
Add `using Printf` to your imports.
  likely near /home/vagrant/.julia/v0.7/DiscretePredictors/src/LZ78.jl:106
┌ Warning: Deprecated syntax `parametric method syntax info_string{T}(p::LZ78{T})` around /home/vagrant/.julia/v0.7/DiscretePredictors/src/LZ78.jl:107.
│ Use `info_string(p::LZ78{T}) where T` instead.
└ @ nothing LZ78.jl:107
WARNING: Base.@sprintf is deprecated: it has been moved to the standard library package `Printf`.
Add `using Printf` to your imports.
  likely near /home/vagrant/.julia/v0.7/DiscretePredictors/src/LZ78.jl:110
┌ Warning: Deprecated syntax `parametric method syntax unique_string{T}(p::LZ78{T})` around /home/vagrant/.julia/v0.7/DiscretePredictors/src/LZ78.jl:111.
│ Use `unique_string(p::LZ78{T}) where T` instead.
└ @ nothing LZ78.jl:111
┌ Warning: Deprecated syntax `multiple line breaks between doc string and object` at /home/vagrant/.julia/v0.7/DiscretePredictors/src/dHedgePPM.jl:28.
│ Use `at most one line break` instead.
└ @ nothing dHedgePPM.jl:28
┌ Warning: Deprecated syntax `type` at /home/vagrant/.julia/v0.7/DiscretePredictors/src/dHedgePPM.jl:28.
│ Use `mutable struct` instead.
└ @ nothing dHedgePPM.jl:28
┌ Warning: Deprecated syntax `(expert_best_symbol == sym)?` at /home/vagrant/.julia/v0.7/DiscretePredictors/src/dHedgePPM.jl:48.
│ Use `(expert_best_symbol == sym) ?` instead.
└ @ nothing dHedgePPM.jl:48
┌ Warning: Deprecated syntax `(expert_best_symbol == sym) ?0` at /home/vagrant/.julia/v0.7/DiscretePredictors/src/dHedgePPM.jl:48.
│ Use `(expert_best_symbol == sym) ? 0` instead.
└ @ nothing dHedgePPM.jl:48
┌ Warning: Deprecated syntax `(expert_best_symbol == sym) ? 0:` at /home/vagrant/.julia/v0.7/DiscretePredictors/src/dHedgePPM.jl:48.
│ Use `(expert_best_symbol == sym) ? 0 :` instead.
└ @ nothing dHedgePPM.jl:48
┌ Warning: Deprecated syntax `(expert_best_symbol == sym) ? 0 :1` at /home/vagrant/.julia/v0.7/DiscretePredictors/src/dHedgePPM.jl:48.
│ Use `(expert_best_symbol == sym) ? 0 : 1` instead.
└ @ nothing dHedgePPM.jl:48
┌ Warning: Deprecated syntax `haskey(p.model, buffer)?` at /home/vagrant/.julia/v0.7/DiscretePredictors/src/dHedgePPM.jl:56.
│ Use `haskey(p.model, buffer) ?` instead.
└ @ nothing dHedgePPM.jl:56
┌ Warning: Deprecated syntax `haskey(p.model, buffer) ? (p.model[buffer] + 1):` at /home/vagrant/.julia/v0.7/DiscretePredictors/src/dHedgePPM.jl:56.
│ Use `haskey(p.model, buffer) ? (p.model[buffer] + 1) :` instead.
└ @ nothing dHedgePPM.jl:56
┌ Warning: Deprecated syntax `parametric method syntax add!{T}(p::dHedgePPM{T}, sym::T)` around /home/vagrant/.julia/v0.7/DiscretePredictors/src/dHedgePPM.jl:43.
│ Use `add!(p::dHedgePPM{T}, sym::T) where T` instead.
└ @ nothing dHedgePPM.jl:43
┌ Warning: Deprecated syntax `parametric method syntax predict{T}(p::dHedgePPM{T})` around /home/vagrant/.julia/v0.7/DiscretePredictors/src/dHedgePPM.jl:70.
│ Use `predict(p::dHedgePPM{T}) where T` instead.
└ @ nothing dHedgePPM.jl:70
WARNING: Base.@sprintf is deprecated: it has been moved to the standard library package `Printf`.
Add `using Printf` to your imports.
  likely near /home/vagrant/.julia/v0.7/DiscretePredictors/src/dHedgePPM.jl:110
┌ Warning: Deprecated syntax `parametric method syntax info_string{T}(p::dHedgePPM{T})` around /home/vagrant/.julia/v0.7/DiscretePredictors/src/dHedgePPM.jl:111.
│ Use `info_string(p::dHedgePPM{T}) where T` instead.
└ @ nothing dHedgePPM.jl:111
WARNING: Base.@sprintf is deprecated: it has been moved to the standard library package `Printf`.
Add `using Printf` to your imports.
  likely near /home/vagrant/.julia/v0.7/DiscretePredictors/src/dHedgePPM.jl:115
┌ Warning: Deprecated syntax `parametric method syntax unique_string{T}(p::dHedgePPM{T})` around /home/vagrant/.julia/v0.7/DiscretePredictors/src/dHedgePPM.jl:116.
│ Use `unique_string(p::dHedgePPM{T}) where T` instead.
└ @ nothing dHedgePPM.jl:116
┌ Warning: Deprecated syntax `parametric method syntax predict_from_subcontext{T}(p::dHedgePPM{T}, sub_cxt::Vector{T})` around /home/vagrant/.julia/v0.7/DiscretePredictors/src/dHedgePPM.jl:122.
│ Use `predict_from_subcontext(p::dHedgePPM{T}, sub_cxt::Vector{T}) where T` instead.
└ @ nothing dHedgePPM.jl:122
┌ Warning: Deprecated syntax `type` at /home/vagrant/.julia/v0.7/DiscretePredictors/src/dHedgePPM_1.jl:4.
│ Use `mutable struct` instead.
└ @ nothing dHedgePPM_1.jl:4
┌ Warning: Deprecated syntax `haskey(p.model, buffer)?` at /home/vagrant/.julia/v0.7/DiscretePredictors/src/dHedgePPM_1.jl:37.
│ Use `haskey(p.model, buffer) ?` instead.
└ @ nothing dHedgePPM_1.jl:37
┌ Warning: Deprecated syntax `haskey(p.model, buffer) ? (p.model[buffer] + 1):` at /home/vagrant/.julia/v0.7/DiscretePredictors/src/dHedgePPM_1.jl:37.
│ Use `haskey(p.model, buffer) ? (p.model[buffer] + 1) :` instead.
└ @ nothing dHedgePPM_1.jl:37
┌ Warning: Deprecated syntax `parametric method syntax add{T}(p::dHedgePPM_1{T}, sym::T)` around /home/vagrant/.julia/v0.7/DiscretePredictors/src/dHedgePPM_1.jl:19.
│ Use `add(p::dHedgePPM_1{T}, sym::T) where T` instead.
└ @ nothing dHedgePPM_1.jl:19
┌ Warning: Deprecated syntax `parametric method syntax predict{T}(p::dHedgePPM_1{T})` around /home/vagrant/.julia/v0.7/DiscretePredictors/src/dHedgePPM_1.jl:49.
│ Use `predict(p::dHedgePPM_1{T}) where T` instead.
└ @ nothing dHedgePPM_1.jl:49
WARNING: Base.@sprintf is deprecated: it has been moved to the standard library package `Printf`.
Add `using Printf` to your imports.
  likely near /home/vagrant/.julia/v0.7/DiscretePredictors/src/dHedgePPM_1.jl:89
┌ Warning: Deprecated syntax `parametric method syntax info_string{T}(p::dHedgePPM_1{T})` around /home/vagrant/.julia/v0.7/DiscretePredictors/src/dHedgePPM_1.jl:90.
│ Use `info_string(p::dHedgePPM_1{T}) where T` instead.
└ @ nothing dHedgePPM_1.jl:90
WARNING: Base.@sprintf is deprecated: it has been moved to the standard library package `Printf`.
Add `using Printf` to your imports.
  likely near /home/vagrant/.julia/v0.7/DiscretePredictors/src/dHedgePPM_1.jl:94
┌ Warning: Deprecated syntax `parametric method syntax unique_string{T}(p::dHedgePPM_1{T})` around /home/vagrant/.julia/v0.7/DiscretePredictors/src/dHedgePPM_1.jl:95.
│ Use `unique_string(p::dHedgePPM_1{T}) where T` instead.
└ @ nothing dHedgePPM_1.jl:95
┌ Warning: Deprecated syntax `parametric method syntax predict_from_subcontext{T}(p::dHedgePPM_1{T}, sub_cxt::Vector{T})` around /home/vagrant/.julia/v0.7/DiscretePredictors/src/dHedgePPM_1.jl:101.
│ Use `predict_from_subcontext(p::dHedgePPM_1{T}, sub_cxt::Vector{T}) where T` instead.
└ @ nothing dHedgePPM_1.jl:101
┌ Warning: Deprecated syntax `multiple line breaks between doc string and object` at /home/vagrant/.julia/v0.7/DiscretePredictors/src/AdaptiveMPP.jl:24.
│ Use `at most one line break` instead.
└ @ nothing AdaptiveMPP.jl:24
┌ Warning: Deprecated syntax `type` at /home/vagrant/.julia/v0.7/DiscretePredictors/src/AdaptiveMPP.jl:24.
│ Use `mutable struct` instead.
└ @ nothing AdaptiveMPP.jl:24
┌ Warning: Deprecated syntax `(expert_best_symbol == sym)?` at /home/vagrant/.julia/v0.7/DiscretePredictors/src/AdaptiveMPP.jl:46.
│ Use `(expert_best_symbol == sym) ?` instead.
└ @ nothing AdaptiveMPP.jl:46
┌ Warning: Deprecated syntax `(expert_best_symbol == sym) ?0` at /home/vagrant/.julia/v0.7/DiscretePredictors/src/AdaptiveMPP.jl:46.
│ Use `(expert_best_symbol == sym) ? 0` instead.
└ @ nothing AdaptiveMPP.jl:46
┌ Warning: Deprecated syntax `(expert_best_symbol == sym) ? 0:` at /home/vagrant/.julia/v0.7/DiscretePredictors/src/AdaptiveMPP.jl:46.
│ Use `(expert_best_symbol == sym) ? 0 :` instead.
└ @ nothing AdaptiveMPP.jl:46
┌ Warning: Deprecated syntax `(expert_best_symbol == sym) ? 0 :1` at /home/vagrant/.julia/v0.7/DiscretePredictors/src/AdaptiveMPP.jl:46.
│ Use `(expert_best_symbol == sym) ? 0 : 1` instead.
└ @ nothing AdaptiveMPP.jl:46
┌ Warning: Deprecated syntax `isnan(w)?` at /home/vagrant/.julia/v0.7/DiscretePredictors/src/AdaptiveMPP.jl:53.
│ Use `isnan(w) ?` instead.
└ @ nothing AdaptiveMPP.jl:53
┌ Warning: Deprecated syntax `isnan(w) ?1` at /home/vagrant/.julia/v0.7/DiscretePredictors/src/AdaptiveMPP.jl:53.
│ Use `isnan(w) ? 1` instead.
└ @ nothing AdaptiveMPP.jl:53
┌ Warning: Deprecated syntax `isnan(w) ? (1 / (p.cxt_length + 1)):` at /home/vagrant/.julia/v0.7/DiscretePredictors/src/AdaptiveMPP.jl:53.
│ Use `isnan(w) ? (1 / (p.cxt_length + 1)) :` instead.
└ @ nothing AdaptiveMPP.jl:53
┌ Warning: Deprecated syntax `isnan(w) ? (1 / (p.cxt_length + 1)) :w` at /home/vagrant/.julia/v0.7/DiscretePredictors/src/AdaptiveMPP.jl:53.
│ Use `isnan(w) ? (1 / (p.cxt_length + 1)) : w` instead.
└ @ nothing AdaptiveMPP.jl:53
┌ Warning: Deprecated syntax `haskey(p.model, buffer)?` at /home/vagrant/.julia/v0.7/DiscretePredictors/src/AdaptiveMPP.jl:70.
│ Use `haskey(p.model, buffer) ?` instead.
└ @ nothing AdaptiveMPP.jl:70
┌ Warning: Deprecated syntax `haskey(p.model, buffer) ? (p.model[buffer] + 1):` at /home/vagrant/.julia/v0.7/DiscretePredictors/src/AdaptiveMPP.jl:70.
│ Use `haskey(p.model, buffer) ? (p.model[buffer] + 1) :` instead.
└ @ nothing AdaptiveMPP.jl:70
┌ Warning: Deprecated syntax `parametric method syntax add!{T}(p::AdaptiveMPP{T}, sym::T)` around /home/vagrant/.julia/v0.7/DiscretePredictors/src/AdaptiveMPP.jl:40.
│ Use `add!(p::AdaptiveMPP{T}, sym::T) where T` instead.
└ @ nothing AdaptiveMPP.jl:40
┌ Warning: Deprecated syntax `parametric method syntax predict{T}(p::AdaptiveMPP{T})` around /home/vagrant/.julia/v0.7/DiscretePredictors/src/AdaptiveMPP.jl:84.
│ Use `predict(p::AdaptiveMPP{T}) where T` instead.
└ @ nothing AdaptiveMPP.jl:84
WARNING: Base.@sprintf is deprecated: it has been moved to the standard library package `Printf`.
Add `using Printf` to your imports.
  likely near /home/vagrant/.julia/v0.7/DiscretePredictors/src/AdaptiveMPP.jl:124
┌ Warning: Deprecated syntax `parametric method syntax info_string{T}(p::AdaptiveMPP{T})` around /home/vagrant/.julia/v0.7/DiscretePredictors/src/AdaptiveMPP.jl:125.
│ Use `info_string(p::AdaptiveMPP{T}) where T` instead.
└ @ nothing AdaptiveMPP.jl:125
WARNING: Base.@sprintf is deprecated: it has been moved to the standard library package `Printf`.
Add `using Printf` to your imports.
  likely near /home/vagrant/.julia/v0.7/DiscretePredictors/src/AdaptiveMPP.jl:128
┌ Warning: Deprecated syntax `parametric method syntax unique_string{T}(p::AdaptiveMPP{T})` around /home/vagrant/.julia/v0.7/DiscretePredictors/src/AdaptiveMPP.jl:129.
│ Use `unique_string(p::AdaptiveMPP{T}) where T` instead.
└ @ nothing AdaptiveMPP.jl:129
┌ Warning: Deprecated syntax `parametric method syntax predict_from_subcontext{T}(p::AdaptiveMPP{T}, sub_cxt::Vector{T})` around /home/vagrant/.julia/v0.7/DiscretePredictors/src/AdaptiveMPP.jl:134.
│ Use `predict_from_subcontext(p::AdaptiveMPP{T}, sub_cxt::Vector{T}) where T` instead.
└ @ nothing AdaptiveMPP.jl:134
┌ Warning: Deprecated syntax `multiple line breaks between doc string and object` at /home/vagrant/.julia/v0.7/DiscretePredictors/src/ewPPM.jl:23.
│ Use `at most one line break` instead.
└ @ nothing ewPPM.jl:23
┌ Warning: Deprecated syntax `type` at /home/vagrant/.julia/v0.7/DiscretePredictors/src/ewPPM.jl:23.
│ Use `mutable struct` instead.
└ @ nothing ewPPM.jl:23
┌ Warning: Deprecated syntax `(get_best_symbol(p.last_prediction[expert_idx]) == sym)?` at /home/vagrant/.julia/v0.7/DiscretePredictors/src/ewPPM.jl:42.
│ Use `(get_best_symbol(p.last_prediction[expert_idx]) == sym) ?` instead.
└ @ nothing ewPPM.jl:42
┌ Warning: Deprecated syntax `(get_best_symbol(p.last_prediction[expert_idx]) == sym) ?0.0` at /home/vagrant/.julia/v0.7/DiscretePredictors/src/ewPPM.jl:42.
│ Use `(get_best_symbol(p.last_prediction[expert_idx]) == sym) ? 0.0` instead.
└ @ nothing ewPPM.jl:42
┌ Warning: Deprecated syntax `(get_best_symbol(p.last_prediction[expert_idx]) == sym) ? 0.0:` at /home/vagrant/.julia/v0.7/DiscretePredictors/src/ewPPM.jl:42.
│ Use `(get_best_symbol(p.last_prediction[expert_idx]) == sym) ? 0.0 :` instead.
└ @ nothing ewPPM.jl:42
┌ Warning: Deprecated syntax `(get_best_symbol(p.last_prediction[expert_idx]) == sym) ? 0.0 :1.0` at /home/vagrant/.julia/v0.7/DiscretePredictors/src/ewPPM.jl:42.
│ Use `(get_best_symbol(p.last_prediction[expert_idx]) == sym) ? 0.0 : 1.0` instead.
└ @ nothing ewPPM.jl:42
┌ Warning: Deprecated syntax `haskey(p.model, buffer)?` at /home/vagrant/.julia/v0.7/DiscretePredictors/src/ewPPM.jl:53.
│ Use `haskey(p.model, buffer) ?` instead.
└ @ nothing ewPPM.jl:53
┌ Warning: Deprecated syntax `haskey(p.model, buffer) ? (p.model[buffer] + 1):` at /home/vagrant/.julia/v0.7/DiscretePredictors/src/ewPPM.jl:53.
│ Use `haskey(p.model, buffer) ? (p.model[buffer] + 1) :` instead.
└ @ nothing ewPPM.jl:53
┌ Warning: Deprecated syntax `parametric method syntax add!{T}(p::ewPPM{T}, sym::T)` around /home/vagrant/.julia/v0.7/DiscretePredictors/src/ewPPM.jl:37.
│ Use `add!(p::ewPPM{T}, sym::T) where T` instead.
└ @ nothing ewPPM.jl:37
┌ Warning: Deprecated syntax `parametric method syntax predict{T}(p::ewPPM{T})` around /home/vagrant/.julia/v0.7/DiscretePredictors/src/ewPPM.jl:67.
│ Use `predict(p::ewPPM{T}) where T` instead.
└ @ nothing ewPPM.jl:67
WARNING: Base.@sprintf is deprecated: it has been moved to the standard library package `Printf`.
Add `using Printf` to your imports.
  likely near /home/vagrant/.julia/v0.7/DiscretePredictors/src/ewPPM.jl:103
┌ Warning: Deprecated syntax `parametric method syntax info_string{T}(p::ewPPM{T})` around /home/vagrant/.julia/v0.7/DiscretePredictors/src/ewPPM.jl:104.
│ Use `info_string(p::ewPPM{T}) where T` instead.
└ @ nothing ewPPM.jl:104
WARNING: Base.@sprintf is deprecated: it has been moved to the standard library package `Printf`.
Add `using Printf` to your imports.
  likely near /home/vagrant/.julia/v0.7/DiscretePredictors/src/ewPPM.jl:107
┌ Warning: Deprecated syntax `parametric method syntax unique_string{T}(p::ewPPM{T})` around /home/vagrant/.julia/v0.7/DiscretePredictors/src/ewPPM.jl:108.
│ Use `unique_string(p::ewPPM{T}) where T` instead.
└ @ nothing ewPPM.jl:108
┌ Warning: Deprecated syntax `parametric method syntax predict_from_subcontext{T}(p::ewPPM{T}, sub_cxt::Vector{T})` around /home/vagrant/.julia/v0.7/DiscretePredictors/src/ewPPM.jl:113.
│ Use `predict_from_subcontext(p::ewPPM{T}, sub_cxt::Vector{T}) where T` instead.
└ @ nothing ewPPM.jl:113
WARNING: Base.Test is deprecated, run `using Test` instead
  likely near /home/vagrant/.julia/v0.7/DiscretePredictors/test/runtests.jl:2
Testing : AdaptiveMPP
┌ Warning: `a::Number + b::AbstractArray` is deprecated, use `broadcast(+, a, b)` instead.
│   caller = add!(::AdaptiveMPP{Char}, ::Char) at AdaptiveMPP.jl:58
└ @ DiscretePredictors AdaptiveMPP.jl:58
┌ Warning: `shift!` is deprecated, use `popfirst!` instead.
│   caller = add!(::AdaptiveMPP{Char}, ::Char) at AdaptiveMPP.jl:71
└ @ DiscretePredictors AdaptiveMPP.jl:71
┌ Warning: `unshift!` is deprecated, use `pushfirst!` instead.
│   caller = predict_from_subcontext(::AdaptiveMPP{Char}, ::Array{Char,1}) at AdaptiveMPP.jl:138
└ @ DiscretePredictors AdaptiveMPP.jl:138
┌ Warning: `shift!` is deprecated, use `popfirst!` instead.
│   caller = add!(::AdaptiveMPP{Char}, ::Char) at AdaptiveMPP.jl:75
└ @ DiscretePredictors AdaptiveMPP.jl:75
┌ Warning: `a::Number + b::AbstractArray` is deprecated, use `broadcast(+, a, b)` instead.
│   caller = add!(::AdaptiveMPP{Int64}, ::Int64) at AdaptiveMPP.jl:58
└ @ DiscretePredictors AdaptiveMPP.jl:58
┌ Warning: `shift!` is deprecated, use `popfirst!` instead.
│   caller = add!(::AdaptiveMPP{Int64}, ::Int64) at AdaptiveMPP.jl:71
└ @ DiscretePredictors AdaptiveMPP.jl:71
┌ Warning: `unshift!` is deprecated, use `pushfirst!` instead.
│   caller = predict_from_subcontext(::AdaptiveMPP{Int64}, ::Array{Int64,1}) at AdaptiveMPP.jl:138
└ @ DiscretePredictors AdaptiveMPP.jl:138
┌ Warning: `shift!` is deprecated, use `popfirst!` instead.
│   caller = add!(::AdaptiveMPP{Int64}, ::Int64) at AdaptiveMPP.jl:75
└ @ DiscretePredictors AdaptiveMPP.jl:75
Test Summary: | Pass  Total
AdaptiveMPP   |   69     69
Testing : ALZ
┌ Warning: `shift!` is deprecated, use `popfirst!` instead.
│   caller = add!(::ALZ{Char}, ::Char) at ALZ.jl:59
└ @ DiscretePredictors ALZ.jl:59
┌ Warning: `shift!` is deprecated, use `popfirst!` instead.
│   caller = add!(::ALZ{Char}, ::Char) at ALZ.jl:49
└ @ DiscretePredictors ALZ.jl:49
┌ Warning: `unshift!` is deprecated, use `pushfirst!` instead.
│   caller = predict(::ALZ{Char}) at ALZ.jl:71
└ @ DiscretePredictors ALZ.jl:71
┌ Warning: `shift!` is deprecated, use `popfirst!` instead.
│   caller = add!(::ALZ{Int64}, ::Int64) at ALZ.jl:59
└ @ DiscretePredictors ALZ.jl:59
┌ Warning: `shift!` is deprecated, use `popfirst!` instead.
│   caller = add!(::ALZ{Int64}, ::Int64) at ALZ.jl:49
└ @ DiscretePredictors ALZ.jl:49
┌ Warning: `unshift!` is deprecated, use `pushfirst!` instead.
│   caller = predict(::ALZ{Int64}) at ALZ.jl:71
└ @ DiscretePredictors ALZ.jl:71
Test Summary: | Pass  Total
ALZ           |   95     95
Testing : DG
┌ Warning: `shift!` is deprecated, use `popfirst!` instead.
│   caller = add!(::DG{Char}, ::Char) at DG.jl:52
└ @ DiscretePredictors DG.jl:52
┌ Warning: `shift!` is deprecated, use `popfirst!` instead.
│   caller = add!(::DG{Int64}, ::Int64) at DG.jl:52
└ @ DiscretePredictors DG.jl:52
Test Summary: | Pass  Total
DG            |   63     63
Testing : dHedgePPM
┌ Warning: `shift!` is deprecated, use `popfirst!` instead.
│   caller = add!(::dHedgePPM{Char}, ::Char) at dHedgePPM.jl:57
└ @ DiscretePredictors dHedgePPM.jl:57
┌ Warning: `unshift!` is deprecated, use `pushfirst!` instead.
│   caller = predict_from_subcontext(::dHedgePPM{Char}, ::Array{Char,1}) at dHedgePPM.jl:126
└ @ DiscretePredictors dHedgePPM.jl:126
┌ Warning: `shift!` is deprecated, use `popfirst!` instead.
│   caller = add!(::dHedgePPM{Char}, ::Char) at dHedgePPM.jl:61
└ @ DiscretePredictors dHedgePPM.jl:61
┌ Warning: `shift!` is deprecated, use `popfirst!` instead.
│   caller = add!(::dHedgePPM{Int64}, ::Int64) at dHedgePPM.jl:57
└ @ DiscretePredictors dHedgePPM.jl:57
┌ Warning: `unshift!` is deprecated, use `pushfirst!` instead.
│   caller = predict_from_subcontext(::dHedgePPM{Int64}, ::Array{Int64,1}) at dHedgePPM.jl:126
└ @ DiscretePredictors dHedgePPM.jl:126
┌ Warning: `shift!` is deprecated, use `popfirst!` instead.
│   caller = add!(::dHedgePPM{Int64}, ::Int64) at dHedgePPM.jl:61
└ @ DiscretePredictors dHedgePPM.jl:61
Test Summary: | Pass  Total
dHedgePPM     |   71     71
Testing : ewPPM
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(undef, m)` instead.
│   caller = add!(::ewPPM{Char}, ::Char) at ewPPM.jl:40
└ @ DiscretePredictors ewPPM.jl:40
┌ Warning: `a::AbstractArray - b::Number` is deprecated, use `broadcast(-, a, b)` instead.
│   caller = add!(::ewPPM{Char}, ::Char) at ewPPM.jl:44
└ @ DiscretePredictors ewPPM.jl:44
┌ Warning: `shift!` is deprecated, use `popfirst!` instead.
│   caller = add!(::ewPPM{Char}, ::Char) at ewPPM.jl:54
└ @ DiscretePredictors ewPPM.jl:54
┌ Warning: `unshift!` is deprecated, use `pushfirst!` instead.
│   caller = predict_from_subcontext(::ewPPM{Char}, ::Array{Char,1}) at ewPPM.jl:117
└ @ DiscretePredictors ewPPM.jl:117
┌ Warning: `shift!` is deprecated, use `popfirst!` instead.
│   caller = add!(::ewPPM{Char}, ::Char) at ewPPM.jl:58
└ @ DiscretePredictors ewPPM.jl:58
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(undef, m)` instead.
│   caller = add!(::ewPPM{Int64}, ::Int64) at ewPPM.jl:40
└ @ DiscretePredictors ewPPM.jl:40
┌ Warning: `a::AbstractArray - b::Number` is deprecated, use `broadcast(-, a, b)` instead.
│   caller = add!(::ewPPM{Int64}, ::Int64) at ewPPM.jl:44
└ @ DiscretePredictors ewPPM.jl:44
┌ Warning: `shift!` is deprecated, use `popfirst!` instead.
│   caller = add!(::ewPPM{Int64}, ::Int64) at ewPPM.jl:54
└ @ DiscretePredictors ewPPM.jl:54
┌ Warning: `unshift!` is deprecated, use `pushfirst!` instead.
│   caller = predict_from_subcontext(::ewPPM{Int64}, ::Array{Int64,1}) at ewPPM.jl:117
└ @ DiscretePredictors ewPPM.jl:117
┌ Warning: `shift!` is deprecated, use `popfirst!` instead.
│   caller = add!(::ewPPM{Int64}, ::Int64) at ewPPM.jl:58
└ @ DiscretePredictors ewPPM.jl:58
Test Summary: | Pass  Total
ewPPM         |   72     72
Testing : KOM
┌ Warning: `shift!` is deprecated, use `popfirst!` instead.
│   caller = add!(::KOM{Char}, ::Char) at KOM.jl:46
└ @ DiscretePredictors KOM.jl:46
┌ Warning: `unshift!` is deprecated, use `pushfirst!` instead.
│   caller = predict(::KOM{Char}) at KOM.jl:62
└ @ DiscretePredictors KOM.jl:62
┌ Warning: `shift!` is deprecated, use `popfirst!` instead.
│   caller = add!(::KOM{Char}, ::Char) at KOM.jl:50
└ @ DiscretePredictors KOM.jl:50
┌ Warning: `shift!` is deprecated, use `popfirst!` instead.
│   caller = add!(::KOM{Int64}, ::Int64) at KOM.jl:46
└ @ DiscretePredictors KOM.jl:46
┌ Warning: `unshift!` is deprecated, use `pushfirst!` instead.
│   caller = predict(::KOM{Int64}) at KOM.jl:62
└ @ DiscretePredictors KOM.jl:62
┌ Warning: `shift!` is deprecated, use `popfirst!` instead.
│   caller = add!(::KOM{Int64}, ::Int64) at KOM.jl:50
└ @ DiscretePredictors KOM.jl:50
Test Summary: | Pass  Total
KOM           |   77     77
Testing : LeZiUpdate
┌ Warning: `shift!` is deprecated, use `popfirst!` instead.
│   caller = add!(::LeZiUpdate{Char}, ::Char) at LeZiUpdate.jl:54
└ @ DiscretePredictors LeZiUpdate.jl:54
┌ Warning: `unshift!` is deprecated, use `pushfirst!` instead.
│   caller = predict(::LeZiUpdate{Char}) at LeZiUpdate.jl:73
└ @ DiscretePredictors LeZiUpdate.jl:73
┌ Warning: `shift!` is deprecated, use `popfirst!` instead.
│   caller = add!(::LeZiUpdate{Int64}, ::Int64) at LeZiUpdate.jl:54
└ @ DiscretePredictors LeZiUpdate.jl:54
┌ Warning: `unshift!` is deprecated, use `pushfirst!` instead.
│   caller = predict(::LeZiUpdate{Int64}) at LeZiUpdate.jl:73
└ @ DiscretePredictors LeZiUpdate.jl:73
Test Summary: | Pass  Total
LeZiUpdate    |   71     71
Testing : LZ78
┌ Warning: `unshift!` is deprecated, use `pushfirst!` instead.
│   caller = predict(::LZ78{Char}) at LZ78.jl:76
└ @ DiscretePredictors LZ78.jl:76
┌ Warning: `unshift!` is deprecated, use `pushfirst!` instead.
│   caller = predict(::LZ78{Int64}) at LZ78.jl:76
└ @ DiscretePredictors LZ78.jl:76
Test Summary: | Pass  Total
LZ78          |   69     69
[ Info: DiscretePredictors tests passed

>>> End of log
