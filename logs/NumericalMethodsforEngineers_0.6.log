>>> 'Pkg.add("NumericalMethodsforEngineers")' log
INFO: Cloning cache of NumericalMethodsforEngineers from https://github.com/PtFEM/NumericalMethodsforEngineers.jl.git
INFO: Cloning cache of Symata from https://github.com/jlapeyre/Symata.jl.git
INFO: Installing BandedMatrices v0.5.0
INFO: Installing BinDeps v0.8.8
INFO: Installing BinaryProvider v0.3.3
INFO: Installing Calculus v0.4.0
INFO: Installing CategoricalArrays v0.3.11
INFO: Installing CodecZlib v0.4.3
INFO: Installing ColorTypes v0.6.7
INFO: Installing Colors v0.8.2
INFO: Installing Combinatorics v0.6.0
INFO: Installing CommonSubexpressions v0.1.0
INFO: Installing Conda v0.8.1
INFO: Installing Contour v0.4.0
INFO: Installing DataFrames v0.11.7
INFO: Installing DataStreams v0.3.6
INFO: Installing DataStructures v0.8.4
INFO: Installing DiffResults v0.0.3
INFO: Installing DiffRules v0.0.6
INFO: Installing DocStringExtensions v0.4.5
INFO: Installing Documenter v0.19.1
INFO: Installing FillArrays v0.1.0
INFO: Installing FixedPointNumbers v0.4.6
INFO: Installing ForwardDiff v0.7.5
INFO: Installing GR v0.31.0
INFO: Installing IterTools v0.2.1
INFO: Installing IterativeSolvers v0.6.0
INFO: Installing MacroTools v0.4.2
INFO: Installing Measures v0.2.0
INFO: Installing Memoize v0.2.0
INFO: Installing Missings v0.2.10
INFO: Installing NaNMath v0.3.1
INFO: Installing NamedTuples v4.0.2
INFO: Installing NumericalMethodsforEngineers v0.0.5
INFO: Installing PlotThemes v0.2.0
INFO: Installing PlotUtils v0.4.4
INFO: Installing Plots v0.17.3
INFO: Installing Polynomials v0.4.0
INFO: Installing Primes v0.3.0
INFO: Installing PyCall v1.17.1
INFO: Installing QuadGK v0.3.0
INFO: Installing RecipesBase v0.3.1
INFO: Installing Reexport v0.1.0
INFO: Installing Requires v0.4.4
INFO: Installing Roots v0.6.0
INFO: Installing SHA v0.5.7
INFO: Installing Showoff v0.2.0
INFO: Installing SortingAlgorithms v0.2.1
INFO: Installing SpecialFunctions v0.6.0
INFO: Installing StaticArrays v0.7.2
INFO: Installing StatsBase v0.23.1
INFO: Installing Symata v0.3.0
INFO: Installing TranscodingStreams v0.5.3
INFO: Installing URIParser v0.3.1
INFO: Installing VersionParsing v1.1.1
INFO: Installing WeakRefStrings v0.4.7
INFO: Building CodecZlib
INFO: Building Conda
INFO: Building SpecialFunctions
INFO: Building GR
INFO: Downloading pre-compiled GR 0.31.0 Ubuntu binary
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0  0 38.8M    0 65536    0     0  65228      0  0:10:23  0:00:01  0:10:22 65274  1 38.8M    1  688k    0     0   349k      0  0:01:53  0:00:01  0:01:52  349k  7 38.8M    7 2816k    0     0   958k      0  0:00:41  0:00:02  0:00:39  958k 22 38.8M   22 9136k    0     0  2334k      0  0:00:17  0:00:03  0:00:14 2334k 61 38.8M   61 23.7M    0     0  4946k      0  0:00:08  0:00:04  0:00:04 4945k100 38.8M  100 38.8M    0     0  7177k      0  0:00:05  0:00:05 --:--:-- 8755k
INFO: Building PyCall
Info: Using the Python distribution in the Conda package by default.
To use a different Python version, set ENV["PYTHON"]="pythoncommand" and re-run Pkg.build("PyCall").
Solving environment: ...working... done

# All requested packages already installed.

Info: PyCall is using /home/vagrant/.julia/v0.6/Conda/deps/usr/bin/python (Python 2.7.14) at /home/vagrant/.julia/v0.6/Conda/deps/usr/bin/python, libpython = /home/vagrant/.julia/v0.6/Conda/deps/usr/lib/libpython2.7
Info: /home/vagrant/.julia/v0.6/PyCall/deps/deps.jl has not changed
Info: /home/vagrant/.julia/v0.6/PyCall/deps/PYTHON has not changed
INFO: Building Plots
INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of NumericalMethodsforEngineers
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("NumericalMethodsforEngineers")' log
Julia Version 0.6.4
Commit 9d11f62bcb (2018-07-09 19:09 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-143-generic #192-Ubuntu SMP Tue Feb 27 10:45:36 UTC 2018 x86_64 x86_64
Memory: 2.939197540283203 GB (1023.20703125 MB free)
Uptime: 84335.0 sec
Load Avg:  0.8359375  0.96533203125  1.1630859375
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz    5487372 s         62 s     395201 s    1225493 s          4 s
#2  3500 MHz     942730 s       4592 s     138387 s    7220340 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem MAX_THREADS=16)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.6
2 required packages:
 - JSON                          0.17.2
 - NumericalMethodsforEngineers  0.0.5
55 additional packages:
 - BandedMatrices                0.5.0
 - BinDeps                       0.8.8
 - BinaryProvider                0.3.3
 - Calculus                      0.4.0
 - CategoricalArrays             0.3.11
 - CodecZlib                     0.4.3
 - ColorTypes                    0.6.7
 - Colors                        0.8.2
 - Combinatorics                 0.6.0
 - CommonSubexpressions          0.1.0
 - Compat                        1.0.0
 - Conda                         0.8.1
 - Contour                       0.4.0
 - DataFrames                    0.11.7
 - DataStreams                   0.3.6
 - DataStructures                0.8.4
 - DiffResults                   0.0.3
 - DiffRules                     0.0.6
 - DocStringExtensions           0.4.5
 - Documenter                    0.19.1
 - FillArrays                    0.1.0
 - FixedPointNumbers             0.4.6
 - ForwardDiff                   0.7.5
 - GR                            0.31.0
 - IterTools                     0.2.1
 - IterativeSolvers              0.6.0
 - MacroTools                    0.4.2
 - Measures                      0.2.0
 - Memoize                       0.2.0
 - Missings                      0.2.10
 - NaNMath                       0.3.1
 - NamedTuples                   4.0.2
 - Nullables                     0.0.6
 - PlotThemes                    0.2.0
 - PlotUtils                     0.4.4
 - Plots                         0.17.3
 - Polynomials                   0.4.0
 - Primes                        0.3.0
 - PyCall                        1.17.1
 - QuadGK                        0.3.0
 - RecipesBase                   0.3.1
 - Reexport                      0.1.0
 - Requires                      0.4.4
 - Roots                         0.6.0
 - SHA                           0.5.7
 - Showoff                       0.2.0
 - SortingAlgorithms             0.2.1
 - SpecialFunctions              0.6.0
 - StaticArrays                  0.7.2
 - StatsBase                     0.23.1
 - Symata                        0.3.0
 - TranscodingStreams            0.5.3
 - URIParser                     0.3.1
 - VersionParsing                1.1.1
 - WeakRefStrings                0.4.7
INFO: Testing NumericalMethodsforEngineers
Info: Installing sympy via the Conda sympy package...
Solving environment: ...working... done
sympy-1.2            |  9.0 MB |            |   0% sympy-1.2            |  9.0 MB |            |   0% sympy-1.2            |  9.0 MB | 3          |   4% sympy-1.2            |  9.0 MB | #3         |  14% sympy-1.2            |  9.0 MB | ##5        |  25% sympy-1.2            |  9.0 MB | ###6       |  37% sympy-1.2            |  9.0 MB | ####7      |  48% sympy-1.2            |  9.0 MB | #####9     |  59% sympy-1.2            |  9.0 MB | #######    |  70% sympy-1.2            |  9.0 MB | ########   |  80% sympy-1.2            |  9.0 MB | ########7  |  88% sympy-1.2            |  9.0 MB | #########3 |  93% sympy-1.2            |  9.0 MB | #########7 |  98% sympy-1.2            |  9.0 MB | ########## | 100% 
mpmath-1.0.0         |  429 KB |            |   0% mpmath-1.0.0         |  429 KB | 2          |   3% mpmath-1.0.0         |  429 KB | ########## | 100% 
fastcache-1.0.2      |   47 KB |            |   0% fastcache-1.0.2      |   47 KB | ##5        |  26% fastcache-1.0.2      |   47 KB | ########## | 100% 
gmpy2-2.0.8          |  601 KB |            |   0% gmpy2-2.0.8          |  601 KB | 1          |   2% gmpy2-2.0.8          |  601 KB | ########## | 100% 

## Package Plan ##

  environment location: /home/vagrant/.julia/v0.6/Conda/deps/usr

  added / updated specs: 
    - sympy


The following packages will be downloaded:

    package                    |            build
    ---------------------------|-----------------
    sympy-1.2                  |           py27_0         9.0 MB  conda-forge
    mpmath-1.0.0               |             py_0         429 KB  conda-forge
    fastcache-1.0.2            |           py27_0          47 KB  conda-forge
    gmpy2-2.0.8                |           py27_0         601 KB  conda-forge
    ------------------------------------------------------------
                                           Total:        10.1 MB

The following NEW packages will be INSTALLED:

    fastcache: 1.0.2-py27_0                          conda-forge
    gmpy2:     2.0.8-py27_0                          conda-forge
    mpmath:    1.0.0-py_0                            conda-forge
    sympy:     1.2-py27_0                            conda-forge

The following packages will be DOWNGRADED:

    blas:      1.1-openblas                          conda-forge --> 1.0-mkl              
    numpy:     1.14.5-py27_blas_openblashd3ea46f_201 conda-forge [blas_openblas] --> 1.14.3-py27hcd700cb_2


Downloading and Extracting Packages
Preparing transaction: ...working... done
Verifying transaction: ...working... done
Executing transaction: ...working... done
Running tests:

  * ch01_nmex.jl *

  * ch02_lufac.jl *

  * ch02_ldlt.jl *

  * ch02_SymmetricBandedMatrix.jl *

  * ch02_SkylineMatrix.jl *

  * ch02_gaussian.jl *

  * ch02_penalized.jl *

  * ch02_jacobi.jl *

  * ch02_bicgstab.jl *

  * ch06_p6.2.jl *

  * ch07_ivp_ex7.3.jl *

  * ch07_bvp_ex7.4a.jl *

  * ch07_bvp_ex7.4b.jl *

  * ch07_wrm.jl *

	  * Ex.7.13.jl *



Example 7.13: y'' = 3x + 4y, y(0)=0, y(1)=1
Residual for Weighted Residual Method using 1 point Lagragian Polynomial

Y(x) = x*(-1.0 + 2.0*x + (-4.0)*a*(-1 + x))

R(x) = 4.0 + 2.0*C1 - 3x - 4x*(-1.0 + 2.0*x + C1*(-1 + x))

( Example 7.13 gives: R = -4x^2*(2 + C1) + x*(1 + 4C1) + 2*(2 + C1) )


	  * Ex.7.14.jl *



Example 7.14: y'' = 3x + 4y, y(0)=0, y(1)=1
Residual for Weighted Residual Method using 2 point Lagragian Polynomial

Y(x): x + 9.0*a*x + (-4.5)*b*x + (-4.5)*x^2 + 18.0*b*x^2 + (-22.5)*a*x^2 + 4.5*x^3 + 13.5*a*x^3 + (-13.5)*b*x^3

( Example 7.14 gives: ytilde = 1/2*x^3*(27a-27b+9)-x^2*(45a-36b+9)+x*(18a-9b+2) )

R(x) = -9.0 + (-45.0)*a + 36.0*b + 20.0*x + 45.0*a*x + (-63.0)*b*x + 18.0*x^2 + 90.0*a*x^2 + (-72.0)*b*x^2 + (-18.0)*x^3 + 54.0*b*x^3 + (-54.0)*a*x^3


	  * Ex.7.15.jl *



Example 7.15: y'' = 3x + 4y, y(0)=0, y(1)=1
by 1-point collocation Weighted Residual Method

Y(x) = x*(-1.0 + 2.0*x + (-4.0)*a*(-1 + x))

R(x) = 4.0 + (-8.0)*a - 3x + 4x*(1.0 + (-2.0)*x + 4.0*a*(-1 + x))

C1 = -0.8333333333333334

ytilde_1pt_collocation(x) = x*(-0.16666666666666663 + 1.1666666666666665*x)

( Example 7.15 gives: ytilde_collocation = 1/6 * x * (7x - 1) )



	  * Ex.7.15b.jl *



Example 7.15b: y'' = 3x + 4y, y(0)=0, y(1)=1
by 2-point collocation Weighted Residual Method

Y(x): x*(0.5*(-2 + 3x)*(-1 + 3x) + 4.5*a*(-2 + 3x)*(-1 + x) + (-4.5)*b*(-1 + x)*(-1 + 3x))

R(x) = -9.0 + (-45.0)*a + 36.0*b + 20.0*x + 45.0*a*x + (-63.0)*b*x + 18.0*x^2 + 90.0*a*x^2 + (-72.0)*b*x^2 + (-18.0)*x^3 + 54.0*b*x^3 + (-54.0)*a*x^3

(a, b) = [0.10173697270471464, 0.3598014888337469]

ytilde_2pt_collocation(x) = x*(0.2965260545905706 + (-0.3126550868486353)*x + 1.016129032258065*x^2)



	  * Ex.7.16.jl *



Example 7.16: y'' = 3x + 4y, y(0)=0, y(1)=1
by 1-point subdomain Weighted Residual Method

Y(x) = x*(-1.0 + 2.0*x + (-4.0)*a*(-1 + x))

R(x) = 4.0 + (-8.0)*a - 3x + 4x*(1.0 + (-2.0)*x + 4.0*a*(-1 + x))

C1 = -0.6875

ytilde_1pt_subdomain(x) = x*(-0.3125 + 1.3125*x)

( Example 7.16 gives: ytilde = 1/16*x*(21x - 5) )


	  * Ex.7.16b.jl *



Example 7.16b: y'' = 3x + 4y, y(0)=0, y(1)=1
by 2-point subdomain Weighted Residual Method

Y(x): x*(0.5*(-2 + 3x)*(-1 + 3x) + 4.5*a*(-2 + 3x)*(-1 + x) + (-4.5)*b*(-1 + x)*(-1 + 3x))

R(x) = -9.0 + (-45.0)*a + 36.0*b + 20.0*x + 45.0*a*x + (-63.0)*b*x + 18.0*x^2 + 90.0*a*x^2 + (-72.0)*b*x^2 + (-18.0)*x^3 + 54.0*b*x^3 + (-54.0)*a*x^3

(a, b) = [0.08155270655270655, 0.3351139601139601]

ytilde_2pt_subdomain(x) = x*(0.22596153846153857 + (-0.30288461538461586)*x + 1.0769230769230769*x^2)



	  * Ex.7.17.jl *



Example 7.17: y'' = 3x + 4y, y(0)=0, y(1)=1
by 1-point least squares Weighted Residual Method

Y(x) = x*(-1.0 + 2.0*x + (-4.0)*a*(-1 + x))
Y(x) = x*(-1.0 - C1 + 2.0*x + C1*x)
R(x) = 4.0 + 2.0*C1 + x + 4.0*C1*x + (-8.0)*x^2 + (-4.0)*C1*x^2

C1 = -0.7037037037037037



	  * Ex.7.17b.jl *



Example 7.17b: y'' = 3x + 4y, y(0)=0, y(1)=1
by 2-point least squares Weighted Residual Method

Y(x) = x*(1 + 9.0*a + (-4.5)*b + (-4.5)*x + 18.0*b*x + (-22.5)*a*x + 4.5*x^2 + 13.5*a*x^2 + (-13.5)*b*x^2)

R(x) = -9.0 + 18.0*x + (9.0 + 27.0*a + (-27.0)*b)*x + 9.0*a*(-2 + 3x) + 27.0*a*(-1 + x) + (-9.0)*b*(-1 + 3x) + (-27.0)*b*(-1 + x) - 3x - 4x*(0.5*(-2 + 3x)*(-1 + 3x) + 4.5*a*(-2 + 3x)*(-1 + x) + (-4.5)*b*(-1 + x)*(-1 + 3x))

(a,b) = (0.08570904547382219, 0.3381592672833756)

C1 = -3.4080779944289707

C2 = 0.7503352935107904




	  * Ex.7.18.jl *



Example 7.18: y''=3x + 4y, y(0)=0, y(1)=1
using 1-point Galerkin Weighted Residual Method

Y(x) = x*(-1.0 + 2.0*x + (-4.0)*a*(-1 + x))

Y(x) = x*(-1.0 - C1 + 2.0*x + C1*x)

R(x) = 4.0 + 2.0*C1 + x + 4.0*C1*x + (-8.0)*x^2 + (-4.0)*C1*x^2

C1 = -0.75

ytilde_1pt_galerkin(x) = x*(-0.25 + 1.25*x)

( Example 7.18 gives: ytilde = 1/4*x*(5x - 1) )



	  * Ex.7.18b.jl *



Example 7.18b: y''=3x + 4y, y(0)=0, y(1)=1
using 2-point Galerkin Weighted Residual Method

Y(x) = x*(1 + 9.0*a + (-4.5)*b + (-4.5)*x + 18.0*b*x + (-22.5)*a*x + 4.5*x^2 + 13.5*a*x^2 + (-13.5)*b*x^2)

R(x) = -9.0 + (-45.0)*a + 36.0*b + 20.0*x + 45.0*a*x + (-63.0)*b*x + 18.0*x^2 + 90.0*a*x^2 + (-72.0)*b*x^2 + (-18.0)*x^3 + 54.0*b*x^3 + (-54.0)*a*x^3

(a,b) = (0.09500805152979094, 0.3494363929146535)

C1 = -3.434782608695645

C2 = 0.7173913043478223



INFO: NumericalMethodsforEngineers tests passed

>>> End of log
