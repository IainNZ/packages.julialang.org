>>> 'Pkg.add("RandomNumbers")' log
[ Info: Cloning cache of RandomNumbers from https://github.com/sunoru/RandomNumbers.jl.git
[ Info: Installing RandomNumbers v0.1.0
[ Info: Building RandomNumbers
┌ Warning: `warn()` is deprecated, use `@warn` instead.
│   caller = #warn#912(::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::String, ::Vararg{String,N} where N) at deprecated.jl:2530
└ @ Base deprecated.jl:2530
WARNING: AES-NI will not be compiled.
[ Info: Package database updated

>>> 'Pkg.test("RandomNumbers")' log
Julia Version 0.7.0-DEV.3421
Commit 2042dcfc2e (2018-01-16 23:39 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
      Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-135-generic #184-Ubuntu SMP Wed Oct 18 11:55:51 UTC 2017 x86_64 x86_64
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
              speed         user         nice          sys         idle          irq
       #1  3499 MHz    1481642 s        764 s      81141 s     450113 s         13 s
       #2  3499 MHz     323441 s       5822 s      32056 s    1960187 s          0 s
       
  Memory: 2.93927001953125 GB (958.19921875 MB free)
  Uptime: 23576.0 sec
  Load Avg:  1.0498046875  1.01513671875  1.02197265625
  WORD_SIZE: 64
  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant
Packages:
  Package Directory: /home/vagrant/.julia/v0.7
  Package Status:
2 required packages:
 - JSON                          0.16.4
 - RandomNumbers                 0.1.0
2 additional packages:
 - Compat                        0.46.0
 - Nullables                     0.0.3
[ Info: Testing RandomNumbers
WARNING: Base.Random is deprecated, run `using Random` instead.
  likely near /home/vagrant/.julia/v0.7/RandomNumbers/src/common.jl:1
WARNING: could not import Random.rand_ui52 into RandomNumbers
WARNING: could not import Random.rand_ui52_raw into RandomNumbers
WARNING: Base.Random is deprecated, run `using Random` instead.
  likely near /home/vagrant/.julia/v0.7/RandomNumbers/src/common.jl:3
┌ Warning: Deprecated syntax `parametric method syntax rand{T <: Union{UInt64, UInt128}}(rng::AbstractRNG{T}, ::Type{Float64} = Float64)` around /home/vagrant/.julia/v0.7/RandomNumbers/src/common.jl:22.
│ Use `rand(rng::AbstractRNG{T}, #s1::Type{Float64} = Float64) where T <: Union{UInt64, UInt128}` instead.
└ @ nothing common.jl:22
┌ Warning: Deprecated syntax `parametric method syntax rand{T <: Union{UInt8, UInt16, UInt32}}(rng::AbstractRNG{T}, ::Type{Float64} = Float64)` around /home/vagrant/.julia/v0.7/RandomNumbers/src/common.jl:25.
│ Use `rand(rng::AbstractRNG{T}, #s1::Type{Float64} = Float64) where T <: Union{UInt8, UInt16, UInt32}` instead.
└ @ nothing common.jl:25
┌ Warning: Deprecated syntax `parametric method syntax rand{T1 <: BitTypes, T2 <: BitTypes}(rng::AbstractRNG{T1}, ::Type{T2})` around /home/vagrant/.julia/v0.7/RandomNumbers/src/common.jl:29.
│ Use `rand(rng::AbstractRNG{T1}, #unused#::Type{T2}) where {T1 <: BitTypes, T2 <: BitTypes}` instead.
└ @ nothing common.jl:29
┌ Warning: Deprecated syntax `parametric method syntax gen_seed{T <: Number}(::Type{T})` around /home/vagrant/.julia/v0.7/RandomNumbers/src/utils.jl:21.
│ Use `gen_seed(#unused#::Type{T}) where T <: Number` instead.
└ @ nothing utils.jl:21
┌ Warning: Deprecated syntax `parametric method syntax gen_seed{T <: Number}(::Type{T}, n)` around /home/vagrant/.julia/v0.7/RandomNumbers/src/utils.jl:22.
│ Use `gen_seed(#unused#::Type{T}, n) where T <: Number` instead.
└ @ nothing utils.jl:22
┌ Warning: Deprecated syntax `parametric method syntax output_type{T}(::AbstractRNG{T})` around /home/vagrant/.julia/v0.7/RandomNumbers/src/utils.jl:25.
│ Use `output_type(#unused#::AbstractRNG{T}) where T` instead.
└ @ nothing utils.jl:25
┌ Warning: Deprecated syntax `parametric method syntax unsafe_copy!{R, T}(r1::R, r2::R, ::Type{T}, len)` around /home/vagrant/.julia/v0.7/RandomNumbers/src/utils.jl:37.
│ Use `unsafe_copy!(r1::R, r2::R, #unused#::Type{T}, len) where {R, T}` instead.
└ @ nothing utils.jl:37
┌ Warning: Deprecated syntax `parametric method syntax unsafe_compare{R, T}(r1::R, r2::R, ::Type{T}, len)` around /home/vagrant/.julia/v0.7/RandomNumbers/src/utils.jl:46.
│ Use `unsafe_compare(r1::R, r2::R, #unused#::Type{T}, len) where {R, T}` instead.
└ @ nothing utils.jl:46
┌ Warning: Deprecated syntax `parametric method syntax WrappedRNG{T1 <: BitTypes, T2 <: BitTypes}(base_rng::AbstractRNG{T1}, ::Type{T2})` around /home/vagrant/.julia/v0.7/RandomNumbers/src/wrapped_rng.jl:44.
│ Use `WrappedRNG(base_rng::AbstractRNG{T1}, #unused#::Type{T2}) where {T1 <: BitTypes, T2 <: BitTypes}` instead.
└ @ nothing wrapped_rng.jl:44
┌ Warning: Deprecated syntax `parametric method syntax WrappedRNG{R <: AbstractRNG, T2 <: BitTypes}(::Type{R}, ::Type{T2}, args...)` around /home/vagrant/.julia/v0.7/RandomNumbers/src/wrapped_rng.jl:54.
│ Use `WrappedRNG(#unused#::Type{R}, #unused#::Type{T2}, args...) where {R <: AbstractRNG, T2 <: BitTypes}` instead.
└ @ nothing wrapped_rng.jl:54
┌ Warning: Deprecated syntax `parametric method syntax WrappedRNG{R <: AbstractRNG, T1 <: BitTypes, T2 <: BitTypes, T3 <: BitTypes}(base_rng::WrappedRNG{R, T1, T2}, ::Type{T3})` around /home/vagrant/.julia/v0.7/RandomNumbers/src/wrapped_rng.jl:59.
│ Use `WrappedRNG(base_rng::WrappedRNG{R, T1, T2}, #unused#::Type{T3}) where {R <: AbstractRNG, T1 <: BitTypes, T2 <: BitTypes, T3 <: BitTypes}` instead.
└ @ nothing wrapped_rng.jl:59
┌ Warning: Deprecated syntax `parametric method syntax seed_type{R, T1, T2}(::Type{WrappedRNG{R, T1, T2}})` around /home/vagrant/.julia/v0.7/RandomNumbers/src/wrapped_rng.jl:61.
│ Use `seed_type(#unused#::Type{WrappedRNG{R, T1, T2}}) where {R, T1, T2}` instead.
└ @ nothing wrapped_rng.jl:61
┌ Warning: Deprecated syntax `parametric method syntax copy!{R <: WrappedRNG}(dest::R, src::R)` around /home/vagrant/.julia/v0.7/RandomNumbers/src/wrapped_rng.jl:64.
│ Use `copy!(dest::R, src::R) where R <: WrappedRNG` instead.
└ @ nothing wrapped_rng.jl:64
┌ Warning: Deprecated syntax `parametric method syntax copy{R <: WrappedRNG}(src::R)` around /home/vagrant/.julia/v0.7/RandomNumbers/src/wrapped_rng.jl:71.
│ Use `copy(src::R) where R <: WrappedRNG` instead.
└ @ nothing wrapped_rng.jl:71
┌ Warning: Deprecated syntax `parametric method syntax =={R <: WrappedRNG}(r1::R, r2::R)` around /home/vagrant/.julia/v0.7/RandomNumbers/src/wrapped_rng.jl:78.
│ Use `==(r1::R, r2::R) where R <: WrappedRNG` instead.
└ @ nothing wrapped_rng.jl:78
┌ Warning: Deprecated syntax `parametric method syntax rand{R <: AbstractRNG, T1 <: BitTypes, T2 <: BitTypes}(rng::WrappedRNG{R, T1, T2}, ::Type{T2})` around /home/vagrant/.julia/v0.7/RandomNumbers/src/wrapped_rng.jl:90.
│ Use `rand(rng::WrappedRNG{R, T1, T2}, #unused#::Type{T2}) where {R <: AbstractRNG, T1 <: BitTypes, T2 <: BitTypes}` instead.
└ @ nothing wrapped_rng.jl:90
┌ Warning: Deprecated syntax `parametric method syntax pcg_rotr{T <: PCGUInt}(value::T, rot::T)` around /home/vagrant/.julia/v0.7/RandomNumbers/src/PCG/bases.jl:48.
│ Use `pcg_rotr(value::T, rot::T) where T <: PCGUInt` instead.
└ @ nothing bases.jl:48
┌ Warning: Deprecated syntax `parametric method syntax pcg_advance_lcg{T <: PCGUInt}(state::T, delta::T, cur_mult::T, cur_plus::T)` around /home/vagrant/.julia/v0.7/RandomNumbers/src/PCG/bases.jl:55.
│ Use `pcg_advance_lcg(state::T, delta::T, cur_mult::T, cur_plus::T) where T <: PCGUInt` instead.
└ @ nothing bases.jl:55
┌ Warning: Deprecated syntax `parametric method syntax pcg_output{T <: Union{pcg_uints[2:end]...}}(state::T, ::Type{PCG_XSH_RS})` around /home/vagrant/.julia/v0.7/RandomNumbers/src/PCG/bases.jl:74.
│ Use `pcg_output(state::T, #unused#::Type{PCG_XSH_RS}) where T <: Union{pcg_uints[2:end]...}` instead.
└ @ nothing bases.jl:74
┌ Warning: Deprecated syntax `parametric method syntax pcg_output{T <: Union{pcg_uints[2:end]...}}(state::T, ::Type{PCG_XSH_RR})` around /home/vagrant/.julia/v0.7/RandomNumbers/src/PCG/bases.jl:93.
│ Use `pcg_output(state::T, #unused#::Type{PCG_XSH_RR}) where T <: Union{pcg_uints[2:end]...}` instead.
└ @ nothing bases.jl:93
┌ Warning: Deprecated syntax `parametric method syntax pcg_output{T <: PCGUInt}(state::T, ::Type{PCG_RXS_M_XS})` around /home/vagrant/.julia/v0.7/RandomNumbers/src/PCG/bases.jl:113.
│ Use `pcg_output(state::T, #unused#::Type{PCG_RXS_M_XS}) where T <: PCGUInt` instead.
└ @ nothing bases.jl:113
┌ Warning: Deprecated syntax `parametric method syntax pcg_output{T <: Union{UInt64, UInt128}}(state::T, ::Type{PCG_XSL_RR})` around /home/vagrant/.julia/v0.7/RandomNumbers/src/PCG/bases.jl:129.
│ Use `pcg_output(state::T, #unused#::Type{PCG_XSL_RR}) where T <: Union{UInt64, UInt128}` instead.
└ @ nothing bases.jl:129
┌ Warning: Deprecated syntax `parametric method syntax pcg_output{T <: Union{UInt64, UInt128}}(state::T, ::Type{PCG_XSL_RR_RR})` around /home/vagrant/.julia/v0.7/RandomNumbers/src/PCG/bases.jl:147.
│ Use `pcg_output(state::T, #unused#::Type{PCG_XSL_RR_RR}) where T <: Union{UInt64, UInt128}` instead.
└ @ nothing bases.jl:147
┌ Warning: Deprecated syntax `parametric method syntax pcg_srand{T <: PCGUInt}(s::PCGStateOneseq{T}, init_state::T)` around /home/vagrant/.julia/v0.7/RandomNumbers/src/PCG/bases.jl:187.
│ Use `pcg_srand(s::PCGStateOneseq{T}, init_state::T) where T <: PCGUInt` instead.
└ @ nothing bases.jl:187
┌ Warning: Deprecated syntax `parametric method syntax pcg_step!{T <: PCGUInt}(s::PCGStateOneseq{T})` around /home/vagrant/.julia/v0.7/RandomNumbers/src/PCG/bases.jl:197.
│ Use `pcg_step!(s::PCGStateOneseq{T}) where T <: PCGUInt` instead.
└ @ nothing bases.jl:197
┌ Warning: Deprecated syntax `parametric method syntax pcg_advance!{T <: PCGUInt}(s::PCGStateOneseq{T}, delta::T)` around /home/vagrant/.julia/v0.7/RandomNumbers/src/PCG/bases.jl:203.
│ Use `pcg_advance!(s::PCGStateOneseq{T}, delta::T) where T <: PCGUInt` instead.
└ @ nothing bases.jl:203
┌ Warning: Deprecated syntax `parametric method syntax pcg_srand{T <: PCGUInt}(s::PCGStateMCG{T}, init_state::T)` around /home/vagrant/.julia/v0.7/RandomNumbers/src/PCG/bases.jl:216.
│ Use `pcg_srand(s::PCGStateMCG{T}, init_state::T) where T <: PCGUInt` instead.
└ @ nothing bases.jl:216
┌ Warning: Deprecated syntax `parametric method syntax pcg_step!{T <: PCGUInt}(s::PCGStateMCG{T})` around /home/vagrant/.julia/v0.7/RandomNumbers/src/PCG/bases.jl:223.
│ Use `pcg_step!(s::PCGStateMCG{T}) where T <: PCGUInt` instead.
└ @ nothing bases.jl:223
┌ Warning: Deprecated syntax `parametric method syntax pcg_advance!{T <: PCGUInt}(s::PCGStateMCG{T}, delta::T)` around /home/vagrant/.julia/v0.7/RandomNumbers/src/PCG/bases.jl:229.
│ Use `pcg_advance!(s::PCGStateMCG{T}, delta::T) where T <: PCGUInt` instead.
└ @ nothing bases.jl:229
┌ Warning: Deprecated syntax `parametric method syntax pcg_srand{T <: PCGUInt}(s::PCGStateUnique{T}, init_state::T)` around /home/vagrant/.julia/v0.7/RandomNumbers/src/PCG/bases.jl:242.
│ Use `pcg_srand(s::PCGStateUnique{T}, init_state::T) where T <: PCGUInt` instead.
└ @ nothing bases.jl:242
┌ Warning: Deprecated syntax `parametric method syntax pcg_step!{T <: PCGUInt}(s::PCGStateUnique{T})` around /home/vagrant/.julia/v0.7/RandomNumbers/src/PCG/bases.jl:252.
│ Use `pcg_step!(s::PCGStateUnique{T}) where T <: PCGUInt` instead.
└ @ nothing bases.jl:252
┌ Warning: Deprecated syntax `parametric method syntax pcg_advance!{T <: PCGUInt}(s::PCGStateUnique{T}, delta::T)` around /home/vagrant/.julia/v0.7/RandomNumbers/src/PCG/bases.jl:258.
│ Use `pcg_advance!(s::PCGStateUnique{T}, delta::T) where T <: PCGUInt` instead.
└ @ nothing bases.jl:258
┌ Warning: Deprecated syntax `parametric method syntax pcg_srand{T <: PCGUInt}(s::PCGStateSetseq{T}, init_state::T, init_seq::T)` around /home/vagrant/.julia/v0.7/RandomNumbers/src/PCG/bases.jl:273.
│ Use `pcg_srand(s::PCGStateSetseq{T}, init_state::T, init_seq::T) where T <: PCGUInt` instead.
└ @ nothing bases.jl:273
┌ Warning: Deprecated syntax `parametric method syntax pcg_step!{T <: PCGUInt}(s::PCGStateSetseq{T})` around /home/vagrant/.julia/v0.7/RandomNumbers/src/PCG/bases.jl:284.
│ Use `pcg_step!(s::PCGStateSetseq{T}) where T <: PCGUInt` instead.
└ @ nothing bases.jl:284
┌ Warning: Deprecated syntax `parametric method syntax pcg_advance!{T <: PCGUInt}(s::PCGStateSetseq{T}, delta::T)` around /home/vagrant/.julia/v0.7/RandomNumbers/src/PCG/bases.jl:290.
│ Use `pcg_advance!(s::PCGStateSetseq{T}, delta::T) where T <: PCGUInt` instead.
└ @ nothing bases.jl:290
WARNING: Base.Random is deprecated, run `using Random` instead.
  likely near /home/vagrant/.julia/v0.7/RandomNumbers/src/PCG/main.jl:2
┌ Warning: Deprecated syntax `parametric method syntax srand{StateType <: PCGUInt}(r::AbstractPCG{StateType}, seed::Integer = gen_seed(StateType))` around /home/vagrant/.julia/v0.7/RandomNumbers/src/PCG/main.jl:8.
│ Use `srand(r::AbstractPCG{StateType}, seed::Integer = gen_seed(StateType)) where StateType <: PCGUInt` instead.
└ @ nothing main.jl:8
┌ Warning: Deprecated syntax `parametric method syntax srand{StateType <: PCGUInt}(r::PCGStateSetseq{StateType}, seed::NTuple{2, Integer} = gen_seed(StateType, 2))` around /home/vagrant/.julia/v0.7/RandomNumbers/src/PCG/main.jl:10.
│ Use `srand(r::PCGStateSetseq{StateType}, seed::NTuple{2, Integer} = gen_seed(StateType, 2)) where StateType <: PCGUInt` instead.
└ @ nothing main.jl:10
┌ Warning: Deprecated syntax `parametric method syntax seed_type{T, T1, T2}(::Type{PCGStateOneseq{T, T1, T2}})` around /home/vagrant/.julia/v0.7/RandomNumbers/src/PCG/main.jl:12.
│ Use `seed_type(#unused#::Type{PCGStateOneseq{T, T1, T2}}) where {T, T1, T2}` instead.
└ @ nothing main.jl:12
┌ Warning: Deprecated syntax `parametric method syntax seed_type{T, T1, T2}(::Type{PCGStateMCG{T, T1, T2}})` around /home/vagrant/.julia/v0.7/RandomNumbers/src/PCG/main.jl:13.
│ Use `seed_type(#unused#::Type{PCGStateMCG{T, T1, T2}}) where {T, T1, T2}` instead.
└ @ nothing main.jl:13
┌ Warning: Deprecated syntax `parametric method syntax seed_type{T, T1, T2}(::Type{PCGStateUnique{T, T1, T2}})` around /home/vagrant/.julia/v0.7/RandomNumbers/src/PCG/main.jl:14.
│ Use `seed_type(#unused#::Type{PCGStateUnique{T, T1, T2}}) where {T, T1, T2}` instead.
└ @ nothing main.jl:14
┌ Warning: Deprecated syntax `parametric method syntax seed_type{T, T1, T2}(::Type{PCGStateSetseq{T, T1, T2}})` around /home/vagrant/.julia/v0.7/RandomNumbers/src/PCG/main.jl:15.
│ Use `seed_type(#unused#::Type{PCGStateSetseq{T, T1, T2}}) where {T, T1, T2}` instead.
└ @ nothing main.jl:15
┌ Warning: Deprecated syntax `parametric method syntax copy!{T <: AbstractPCG}(dest::T, src::T)` around /home/vagrant/.julia/v0.7/RandomNumbers/src/PCG/main.jl:18.
│ Use `copy!(dest::T, src::T) where T <: AbstractPCG` instead.
└ @ nothing main.jl:18
┌ Warning: Deprecated syntax `parametric method syntax copy!{T <: PCGStateSetseq}(dest::T, src::T)` around /home/vagrant/.julia/v0.7/RandomNumbers/src/PCG/main.jl:22.
│ Use `copy!(dest::T, src::T) where T <: PCGStateSetseq` instead.
└ @ nothing main.jl:22
┌ Warning: Deprecated syntax `parametric method syntax copy{T <: AbstractPCG}(src::T)` around /home/vagrant/.julia/v0.7/RandomNumbers/src/PCG/main.jl:27.
│ Use `copy(src::T) where T <: AbstractPCG` instead.
└ @ nothing main.jl:27
┌ Warning: Deprecated syntax `parametric method syntax =={T <: AbstractPCG}(r1::T, r2::T)` around /home/vagrant/.julia/v0.7/RandomNumbers/src/PCG/main.jl:29.
│ Use `==(r1::T, r2::T) where T <: AbstractPCG` instead.
└ @ nothing main.jl:29
┌ Warning: Deprecated syntax `parametric method syntax =={T <: PCGStateSetseq}(r1::T, r2::T)` around /home/vagrant/.julia/v0.7/RandomNumbers/src/PCG/main.jl:30.
│ Use `==(r1::T, r2::T) where T <: PCGStateSetseq` instead.
└ @ nothing main.jl:30
┌ Warning: Deprecated syntax `parametric method syntax rand{StateType <: Union{pcg_uints[1:-(end, 1)]...}, MethodType <: PCGMethod, OutputType <: PCGUInt}(r::AbstractPCG{StateType, MethodType, OutputType}, ::Type{OutputType})` around /home/vagrant/.julia/v0.7/RandomNumbers/src/PCG/main.jl:35.
│ Use `rand(r::AbstractPCG{StateType, MethodType, OutputType}, #unused#::Type{OutputType}) where {StateType <: Union{pcg_uints[1:-(end, 1)]...}, MethodType <: PCGMethod, OutputType <: PCGUInt}` instead.
└ @ nothing main.jl:35
┌ Warning: Deprecated syntax `parametric method syntax rand{MethodType <: PCGMethod, OutputType <: PCGUInt}(r::AbstractPCG{UInt128, MethodType, OutputType}, ::Type{OutputType})` around /home/vagrant/.julia/v0.7/RandomNumbers/src/PCG/main.jl:42.
│ Use `rand(r::AbstractPCG{UInt128, MethodType, OutputType}, #unused#::Type{OutputType}) where {MethodType <: PCGMethod, OutputType <: PCGUInt}` instead.
└ @ nothing main.jl:42
┌ Warning: Deprecated syntax `parametric method syntax bounded_rand{StateType <: PCGUInt, MethodType <: PCGMethod, OutputType <: PCGUInt}(s::AbstractPCG{StateType, MethodType, OutputType}, bound::OutputType)` around /home/vagrant/.julia/v0.7/RandomNumbers/src/PCG/main.jl:55.
│ Use `bounded_rand(s::AbstractPCG{StateType, MethodType, OutputType}, bound::OutputType) where {StateType <: PCGUInt, MethodType <: PCGMethod, OutputType <: PCGUInt}` instead.
└ @ nothing main.jl:55
┌ Warning: Deprecated syntax `parametric method syntax advance!{StateType <: PCGUInt}(r::AbstractPCG{StateType}, Δ::Integer)` around /home/vagrant/.julia/v0.7/RandomNumbers/src/PCG/main.jl:97.
│ Use `advance!(r::AbstractPCG{StateType}, Δ::Integer) where StateType <: PCGUInt` instead.
└ @ nothing main.jl:97
┌ Warning: Deprecated syntax `parametric method syntax PCGStateOneseq{T <: PCGUInt}(::Type{T}, seed::Integer = gen_seed(UInt128))` around /home/vagrant/.julia/v0.7/RandomNumbers/src/PCG/main.jl:145.
│ Use `PCGStateOneseq(#s10::Type{T}, seed::Integer = gen_seed(UInt128)) where T <: PCGUInt` instead.
└ @ nothing main.jl:145
┌ Warning: Deprecated syntax `parametric method syntax PCGStateOneseq{T <: PCGMethod}(::Type{T}, seed::Integer = gen_seed(UInt128))` around /home/vagrant/.julia/v0.7/RandomNumbers/src/PCG/main.jl:147.
│ Use `PCGStateOneseq(#s10::Type{T}, seed::Integer = gen_seed(UInt128)) where T <: PCGMethod` instead.
└ @ nothing main.jl:147
┌ Warning: Deprecated syntax `parametric method syntax PCGStateMCG{T <: PCGUInt}(::Type{T}, seed::Integer = gen_seed(UInt128))` around /home/vagrant/.julia/v0.7/RandomNumbers/src/PCG/main.jl:171.
│ Use `PCGStateMCG(#s10::Type{T}, seed::Integer = gen_seed(UInt128)) where T <: PCGUInt` instead.
└ @ nothing main.jl:171
┌ Warning: Deprecated syntax `parametric method syntax PCGStateMCG{T <: PCGMethod}(::Type{T}, seed::Integer = gen_seed(UInt128))` around /home/vagrant/.julia/v0.7/RandomNumbers/src/PCG/main.jl:173.
│ Use `PCGStateMCG(#s10::Type{T}, seed::Integer = gen_seed(UInt128)) where T <: PCGMethod` instead.
└ @ nothing main.jl:173
┌ Warning: Deprecated syntax `parametric method syntax PCGStateSetseq{T <: PCGUInt}(::Type{T}, seed::NTuple{2, Integer} = gen_seed(UInt128, 2))` around /home/vagrant/.julia/v0.7/RandomNumbers/src/PCG/main.jl:198.
│ Use `PCGStateSetseq(#s10::Type{T}, seed::NTuple{2, Integer} = gen_seed(UInt128, 2)) where T <: PCGUInt` instead.
└ @ nothing main.jl:198
┌ Warning: Deprecated syntax `parametric method syntax PCGStateSetseq{T <: PCGMethod}(::Type{T}, seed::NTuple{2, Integer} = gen_seed(UInt128, 2))` around /home/vagrant/.julia/v0.7/RandomNumbers/src/PCG/main.jl:200.
│ Use `PCGStateSetseq(#s10::Type{T}, seed::NTuple{2, Integer} = gen_seed(UInt128, 2)) where T <: PCGMethod` instead.
└ @ nothing main.jl:200
┌ Warning: Deprecated syntax `parametric method syntax PCGStateUnique{T <: PCGUInt}(::Type{T}, seed::Integer = gen_seed(UInt128))` around /home/vagrant/.julia/v0.7/RandomNumbers/src/PCG/main.jl:225.
│ Use `PCGStateUnique(#s10::Type{T}, seed::Integer = gen_seed(UInt128)) where T <: PCGUInt` instead.
└ @ nothing main.jl:225
┌ Warning: Deprecated syntax `parametric method syntax PCGStateUnique{T <: PCGMethod}(::Type{T}, seed::Integer = gen_seed(UInt128))` around /home/vagrant/.julia/v0.7/RandomNumbers/src/PCG/main.jl:227.
│ Use `PCGStateUnique(#s10::Type{T}, seed::Integer = gen_seed(UInt128)) where T <: PCGMethod` instead.
└ @ nothing main.jl:227
WARNING: Base.Random is deprecated, run `using Random` instead.
  likely near /home/vagrant/.julia/v0.7/RandomNumbers/src/MersenneTwisters/main.jl:2
WARNING: Base.Random is deprecated, run `using Random` instead.
  likely near /home/vagrant/.julia/v0.7/RandomNumbers/src/Random123/common.jl:1
ERROR: LoadError: LoadError: LoadError: UndefVarError: Libdl not defined
Stacktrace:
 [1] top-level scope
 [2] include at ./boot.jl:292 [inlined]
 [3] include_relative(::Module, ::String) at ./loading.jl:521
 [4] include at ./sysimg.jl:26 [inlined]
 [5] include(::String) at /home/vagrant/.julia/v0.7/RandomNumbers/src/Random123/Random123.jl:17
 [6] top-level scope
 [7] include at ./boot.jl:292 [inlined]
 [8] include_relative(::Module, ::String) at ./loading.jl:521
 [9] include at ./sysimg.jl:26 [inlined]
 [10] include(::String) at /home/vagrant/.julia/v0.7/RandomNumbers/src/RandomNumbers.jl:16
 [11] top-level scope
 [12] include at ./boot.jl:292 [inlined]
 [13] include_relative(::Module, ::String) at ./loading.jl:521
 [14] include(::Module, ::String) at ./sysimg.jl:26
 [15] top-level scope
 [16] eval at ./boot.jl:295 [inlined]
 [17] top-level scope at ./<missing>:2
in expression starting at /home/vagrant/.julia/v0.7/RandomNumbers/src/Random123/common.jl:4
in expression starting at /home/vagrant/.julia/v0.7/RandomNumbers/src/Random123/Random123.jl:20
in expression starting at /home/vagrant/.julia/v0.7/RandomNumbers/src/RandomNumbers.jl:30
ERROR: LoadError: LoadError: Failed to precompile RandomNumbers to /home/vagrant/.julia/lib/v0.7/RandomNumbers.ji.
Stacktrace:
 [1] error at ./error.jl:33 [inlined]
 [2] compilecache(::String) at ./loading.jl:648
 [3] compilecache at ./loading.jl:605 [inlined]
 [4] _require(::Symbol) at ./loading.jl:460
 [5] require(::Symbol) at ./loading.jl:333
 [6] include at ./boot.jl:292 [inlined]
 [7] include_relative(::Module, ::String) at ./loading.jl:521
 [8] include(::Module, ::String) at ./sysimg.jl:26
 [9] include(::String) at ./sysimg.jl:65
 [10] top-level scope
 [11] include at ./boot.jl:292 [inlined]
 [12] include_relative(::Module, ::String) at ./loading.jl:521
 [13] include(::Module, ::String) at ./sysimg.jl:26
 [14] process_options(::Base.JLOptions) at ./client.jl:324
 [15] _start() at ./client.jl:375
in expression starting at /home/vagrant/.julia/v0.7/RandomNumbers/test/common.jl:1
in expression starting at /home/vagrant/.julia/v0.7/RandomNumbers/test/runtests.jl:1
┌ Error: ------------------------------------------------------------
│ # Testing failed for RandomNumbers
│   exception =
│    failed process: Process(`/home/vagrant/julia/bin/julia -Cnative -J/home/vagrant/julia/lib/julia/sys.so --compile=yes --depwarn=yes --code-coverage=none --color=no --compiled-modules=yes --check-bounds=yes --warn-overwrite=yes --startup-file=yes /home/vagrant/.julia/v0.7/RandomNumbers/test/runtests.jl`, ProcessExited(1)) [1]
│    Stacktrace:
│     [1] error(::String, ::Base.Process, ::String, ::Int64, ::String) at ./error.jl:42
│     [2] pipeline_error(::Base.Process) at ./process.jl:707
│     [3] run(::Cmd) at ./process.jl:669
│     [4] (::getfield(Base.Pkg.Entry, Symbol("##91#94")){Bool,String,Array{AbstractString,1}})() at ./pkg/entry.jl:730
│     [5] cd(::getfield(Base.Pkg.Entry, Symbol("##91#94")){Bool,String,Array{AbstractString,1}}, ::String) at ./file.jl:70
│     [6] #test!#90(::Bool, ::Function, ::String, ::Array{AbstractString,1}, ::Array{AbstractString,1}, ::Array{AbstractString,1}) at ./pkg/entry.jl:718
│     [7] (::getfield(Base.Pkg.Entry, Symbol("#kw##test!")))(::NamedTuple{(:coverage,),Tuple{Bool}}, ::typeof(Base.Pkg.Entry.test!), ::String, ::Array{AbstractString,1}, ::Array{AbstractString,1}, ::Array{AbstractString,1}) at ./<missing>:0
│     [8] #test#98(::Bool, ::Function, ::Array{AbstractString,1}) at ./pkg/entry.jl:757
│     [9] (::getfield(Base.Pkg.Entry, Symbol("#kw##test")))(::NamedTuple{(:coverage,),Tuple{Bool}}, ::typeof(Base.Pkg.Entry.test), ::Array{AbstractString,1}) at ./<missing>:0
│     [10] (::getfield(Base.Pkg.Dir, Symbol("##4#7")){Base.Iterators.IndexValue{Symbol,Bool,Tuple{Symbol},NamedTuple{(:coverage,),Tuple{Bool}}},typeof(Base.Pkg.Entry.test),Tuple{Array{AbstractString,1}}})() at ./pkg/dir.jl:36
│     [11] cd(::getfield(Base.Pkg.Dir, Symbol("##4#7")){Base.Iterators.IndexValue{Symbol,Bool,Tuple{Symbol},NamedTuple{(:coverage,),Tuple{Bool}}},typeof(Base.Pkg.Entry.test),Tuple{Array{AbstractString,1}}}, ::String) at ./file.jl:70
│     [12] #cd#1(::Base.Iterators.IndexValue{Symbol,Bool,Tuple{Symbol},NamedTuple{(:coverage,),Tuple{Bool}}}, ::Function, ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N} where N) at ./pkg/dir.jl:36
│     [13] (::getfield(Base.Pkg.Dir, Symbol("#kw##cd")))(::NamedTuple{(:coverage,),Tuple{Bool}}, ::typeof(Base.Pkg.Dir.cd), ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N} where N) at ./<missing>:0
│     [14] #test#3(::Bool, ::Function, ::String, ::Vararg{String,N} where N) at ./pkg/pkg.jl:274
│     [15] test(::String, ::Vararg{String,N} where N) at ./pkg/pkg.jl:274
│     [16] top-level scope
│     [17] eval at ./boot.jl:295 [inlined]
│     [18] eval(::Module, ::Expr) at ./sysimg.jl:71
│     [19] process_options(::Base.JLOptions) at ./client.jl:301
│     [20] _start() at ./client.jl:375
└ @ Base.Pkg.Entry entry.jl:733
ERROR: RandomNumbers had test errors

>>> End of log
