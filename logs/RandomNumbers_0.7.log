>>> 'Pkg.add("RandomNumbers")' log
WARNING: Base.Pkg is deprecated, run `using Pkg` instead
 in module Main
[ Info: Installing RandomNumbers v0.1.0
[ Info: Building RandomNumbers
┌ Warning: `warn()` is deprecated, use `@warn` instead.
│   caller = #warn#872(::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::String, ::Vararg{String,N} where N) at deprecated.jl:1010
└ @ Base deprecated.jl:1010
WARNING: AES-NI will not be compiled.
[ Info: Package database updated

>>> 'Pkg.test("RandomNumbers")' log
WARNING: Base.versioninfo is deprecated: it has been moved to the standard library package `InteractiveUtils`.
Add `using InteractiveUtils` to your imports.
 in module Main
WARNING: Base.versioninfo is deprecated: it has been moved to the standard library package `InteractiveUtils`.
Add `using InteractiveUtils` to your imports.
 in module Main
Julia Version 0.7.0-DEV.4449
Commit d1f26785f2 (2018-03-02 17:11 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
      Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-135-generic #184-Ubuntu SMP Wed Oct 18 11:55:51 UTC 2017 x86_64 x86_64
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
              speed         user         nice          sys         idle          irq
       #1  3508 MHz    1425862 s       7687 s      86785 s     418887 s         19 s
       #2  3508 MHz     310438 s         42 s      34333 s    1865577 s          0 s
       
  Memory: 2.93927001953125 GB (776.29296875 MB free)
  Uptime: 22454.0 sec
  Load Avg:  1.0087890625  0.9873046875  0.97021484375
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant
Packages:
  Package Directory: /home/vagrant/.julia/v0.7
  Package Status:
2 required packages:
 - JSON                          0.17.1
 - RandomNumbers                 0.1.0
2 additional packages:
 - Compat                        0.56.0
 - Nullables                     0.0.3
WARNING: Base.Pkg is deprecated, run `using Pkg` instead
 in module Main
[ Info: Testing RandomNumbers
WARNING: Base.Random is deprecated, run `using Random` instead
  likely near /home/vagrant/.julia/v0.7/RandomNumbers/src/common.jl:1
WARNING: could not import Random.rand_ui52 into RandomNumbers
WARNING: could not import Random.rand_ui52_raw into RandomNumbers
WARNING: Base.Random is deprecated, run `using Random` instead
  likely near /home/vagrant/.julia/v0.7/RandomNumbers/src/common.jl:3
┌ Warning: Deprecated syntax `parametric method syntax rand{T <: Union{UInt64, UInt128}}(rng::AbstractRNG{T}, ::Type{Float64} = Float64)` around /home/vagrant/.julia/v0.7/RandomNumbers/src/common.jl:22.
│ Use `rand(rng::AbstractRNG{T}, #s1::Type{Float64} = Float64) where T <: Union{UInt64, UInt128}` instead.
└ @ nothing common.jl:22
┌ Warning: Deprecated syntax `parametric method syntax rand{T <: Union{UInt8, UInt16, UInt32}}(rng::AbstractRNG{T}, ::Type{Float64} = Float64)` around /home/vagrant/.julia/v0.7/RandomNumbers/src/common.jl:25.
│ Use `rand(rng::AbstractRNG{T}, #s1::Type{Float64} = Float64) where T <: Union{UInt8, UInt16, UInt32}` instead.
└ @ nothing common.jl:25
┌ Warning: Deprecated syntax `parametric method syntax rand{T1 <: BitTypes, T2 <: BitTypes}(rng::AbstractRNG{T1}, ::Type{T2})` around /home/vagrant/.julia/v0.7/RandomNumbers/src/common.jl:29.
│ Use `rand(rng::AbstractRNG{T1}, #unused#::Type{T2}) where {T1 <: BitTypes, T2 <: BitTypes}` instead.
└ @ nothing common.jl:29
┌ Warning: Deprecated syntax `parametric method syntax gen_seed{T <: Number}(::Type{T})` around /home/vagrant/.julia/v0.7/RandomNumbers/src/utils.jl:21.
│ Use `gen_seed(#unused#::Type{T}) where T <: Number` instead.
└ @ nothing utils.jl:21
┌ Warning: Deprecated syntax `parametric method syntax gen_seed{T <: Number}(::Type{T}, n)` around /home/vagrant/.julia/v0.7/RandomNumbers/src/utils.jl:22.
│ Use `gen_seed(#unused#::Type{T}, n) where T <: Number` instead.
└ @ nothing utils.jl:22
┌ Warning: Deprecated syntax `parametric method syntax output_type{T}(::AbstractRNG{T})` around /home/vagrant/.julia/v0.7/RandomNumbers/src/utils.jl:25.
│ Use `output_type(#unused#::AbstractRNG{T}) where T` instead.
└ @ nothing utils.jl:25
┌ Warning: Deprecated syntax `parametric method syntax unsafe_copy!{R, T}(r1::R, r2::R, ::Type{T}, len)` around /home/vagrant/.julia/v0.7/RandomNumbers/src/utils.jl:37.
│ Use `unsafe_copy!(r1::R, r2::R, #unused#::Type{T}, len) where {R, T}` instead.
└ @ nothing utils.jl:37
┌ Warning: Deprecated syntax `parametric method syntax unsafe_compare{R, T}(r1::R, r2::R, ::Type{T}, len)` around /home/vagrant/.julia/v0.7/RandomNumbers/src/utils.jl:46.
│ Use `unsafe_compare(r1::R, r2::R, #unused#::Type{T}, len) where {R, T}` instead.
└ @ nothing utils.jl:46
┌ Warning: Deprecated syntax `parametric method syntax WrappedRNG{T1 <: BitTypes, T2 <: BitTypes}(base_rng::AbstractRNG{T1}, ::Type{T2})` around /home/vagrant/.julia/v0.7/RandomNumbers/src/wrapped_rng.jl:44.
│ Use `WrappedRNG(base_rng::AbstractRNG{T1}, #unused#::Type{T2}) where {T1 <: BitTypes, T2 <: BitTypes}` instead.
└ @ nothing wrapped_rng.jl:44
┌ Warning: Deprecated syntax `parametric method syntax WrappedRNG{R <: AbstractRNG, T2 <: BitTypes}(::Type{R}, ::Type{T2}, args...)` around /home/vagrant/.julia/v0.7/RandomNumbers/src/wrapped_rng.jl:54.
│ Use `WrappedRNG(#unused#::Type{R}, #unused#::Type{T2}, args...) where {R <: AbstractRNG, T2 <: BitTypes}` instead.
└ @ nothing wrapped_rng.jl:54
┌ Warning: Deprecated syntax `parametric method syntax WrappedRNG{R <: AbstractRNG, T1 <: BitTypes, T2 <: BitTypes, T3 <: BitTypes}(base_rng::WrappedRNG{R, T1, T2}, ::Type{T3})` around /home/vagrant/.julia/v0.7/RandomNumbers/src/wrapped_rng.jl:59.
│ Use `WrappedRNG(base_rng::WrappedRNG{R, T1, T2}, #unused#::Type{T3}) where {R <: AbstractRNG, T1 <: BitTypes, T2 <: BitTypes, T3 <: BitTypes}` instead.
└ @ nothing wrapped_rng.jl:59
┌ Warning: Deprecated syntax `parametric method syntax seed_type{R, T1, T2}(::Type{WrappedRNG{R, T1, T2}})` around /home/vagrant/.julia/v0.7/RandomNumbers/src/wrapped_rng.jl:61.
│ Use `seed_type(#unused#::Type{WrappedRNG{R, T1, T2}}) where {R, T1, T2}` instead.
└ @ nothing wrapped_rng.jl:61
┌ Warning: Deprecated syntax `parametric method syntax copy!{R <: WrappedRNG}(dest::R, src::R)` around /home/vagrant/.julia/v0.7/RandomNumbers/src/wrapped_rng.jl:64.
│ Use `copy!(dest::R, src::R) where R <: WrappedRNG` instead.
└ @ nothing wrapped_rng.jl:64
┌ Warning: Deprecated syntax `parametric method syntax copy{R <: WrappedRNG}(src::R)` around /home/vagrant/.julia/v0.7/RandomNumbers/src/wrapped_rng.jl:71.
│ Use `copy(src::R) where R <: WrappedRNG` instead.
└ @ nothing wrapped_rng.jl:71
┌ Warning: Deprecated syntax `parametric method syntax =={R <: WrappedRNG}(r1::R, r2::R)` around /home/vagrant/.julia/v0.7/RandomNumbers/src/wrapped_rng.jl:78.
│ Use `(r1::R == r2::R) where R <: WrappedRNG` instead.
└ @ nothing wrapped_rng.jl:78
┌ Warning: Deprecated syntax `parametric method syntax rand{R <: AbstractRNG, T1 <: BitTypes, T2 <: BitTypes}(rng::WrappedRNG{R, T1, T2}, ::Type{T2})` around /home/vagrant/.julia/v0.7/RandomNumbers/src/wrapped_rng.jl:90.
│ Use `rand(rng::WrappedRNG{R, T1, T2}, #unused#::Type{T2}) where {R <: AbstractRNG, T1 <: BitTypes, T2 <: BitTypes}` instead.
└ @ nothing wrapped_rng.jl:90
┌ Warning: Deprecated syntax `parametric method syntax pcg_rotr{T <: PCGUInt}(value::T, rot::T)` around /home/vagrant/.julia/v0.7/RandomNumbers/src/PCG/bases.jl:48.
│ Use `pcg_rotr(value::T, rot::T) where T <: PCGUInt` instead.
└ @ nothing bases.jl:48
┌ Warning: Deprecated syntax `parametric method syntax pcg_advance_lcg{T <: PCGUInt}(state::T, delta::T, cur_mult::T, cur_plus::T)` around /home/vagrant/.julia/v0.7/RandomNumbers/src/PCG/bases.jl:55.
│ Use `pcg_advance_lcg(state::T, delta::T, cur_mult::T, cur_plus::T) where T <: PCGUInt` instead.
└ @ nothing bases.jl:55
┌ Warning: Deprecated syntax `parametric method syntax pcg_output{T <: Union{pcg_uints[2:end]...}}(state::T, ::Type{PCG_XSH_RS})` around /home/vagrant/.julia/v0.7/RandomNumbers/src/PCG/bases.jl:74.
│ Use `pcg_output(state::T, #unused#::Type{PCG_XSH_RS}) where T <: Union{pcg_uints[2:end]...}` instead.
└ @ nothing bases.jl:74
┌ Warning: Deprecated syntax `parametric method syntax pcg_output{T <: Union{pcg_uints[2:end]...}}(state::T, ::Type{PCG_XSH_RR})` around /home/vagrant/.julia/v0.7/RandomNumbers/src/PCG/bases.jl:93.
│ Use `pcg_output(state::T, #unused#::Type{PCG_XSH_RR}) where T <: Union{pcg_uints[2:end]...}` instead.
└ @ nothing bases.jl:93
┌ Warning: Deprecated syntax `parametric method syntax pcg_output{T <: PCGUInt}(state::T, ::Type{PCG_RXS_M_XS})` around /home/vagrant/.julia/v0.7/RandomNumbers/src/PCG/bases.jl:113.
│ Use `pcg_output(state::T, #unused#::Type{PCG_RXS_M_XS}) where T <: PCGUInt` instead.
└ @ nothing bases.jl:113
┌ Warning: Deprecated syntax `parametric method syntax pcg_output{T <: Union{UInt64, UInt128}}(state::T, ::Type{PCG_XSL_RR})` around /home/vagrant/.julia/v0.7/RandomNumbers/src/PCG/bases.jl:129.
│ Use `pcg_output(state::T, #unused#::Type{PCG_XSL_RR}) where T <: Union{UInt64, UInt128}` instead.
└ @ nothing bases.jl:129
┌ Warning: Deprecated syntax `parametric method syntax pcg_output{T <: Union{UInt64, UInt128}}(state::T, ::Type{PCG_XSL_RR_RR})` around /home/vagrant/.julia/v0.7/RandomNumbers/src/PCG/bases.jl:147.
│ Use `pcg_output(state::T, #unused#::Type{PCG_XSL_RR_RR}) where T <: Union{UInt64, UInt128}` instead.
└ @ nothing bases.jl:147
┌ Warning: Deprecated syntax `parametric method syntax pcg_srand{T <: PCGUInt}(s::PCGStateOneseq{T}, init_state::T)` around /home/vagrant/.julia/v0.7/RandomNumbers/src/PCG/bases.jl:187.
│ Use `pcg_srand(s::PCGStateOneseq{T}, init_state::T) where T <: PCGUInt` instead.
└ @ nothing bases.jl:187
┌ Warning: Deprecated syntax `parametric method syntax pcg_step!{T <: PCGUInt}(s::PCGStateOneseq{T})` around /home/vagrant/.julia/v0.7/RandomNumbers/src/PCG/bases.jl:197.
│ Use `pcg_step!(s::PCGStateOneseq{T}) where T <: PCGUInt` instead.
└ @ nothing bases.jl:197
┌ Warning: Deprecated syntax `parametric method syntax pcg_advance!{T <: PCGUInt}(s::PCGStateOneseq{T}, delta::T)` around /home/vagrant/.julia/v0.7/RandomNumbers/src/PCG/bases.jl:203.
│ Use `pcg_advance!(s::PCGStateOneseq{T}, delta::T) where T <: PCGUInt` instead.
└ @ nothing bases.jl:203
┌ Warning: Deprecated syntax `parametric method syntax pcg_srand{T <: PCGUInt}(s::PCGStateMCG{T}, init_state::T)` around /home/vagrant/.julia/v0.7/RandomNumbers/src/PCG/bases.jl:216.
│ Use `pcg_srand(s::PCGStateMCG{T}, init_state::T) where T <: PCGUInt` instead.
└ @ nothing bases.jl:216
┌ Warning: Deprecated syntax `parametric method syntax pcg_step!{T <: PCGUInt}(s::PCGStateMCG{T})` around /home/vagrant/.julia/v0.7/RandomNumbers/src/PCG/bases.jl:223.
│ Use `pcg_step!(s::PCGStateMCG{T}) where T <: PCGUInt` instead.
└ @ nothing bases.jl:223
┌ Warning: Deprecated syntax `parametric method syntax pcg_advance!{T <: PCGUInt}(s::PCGStateMCG{T}, delta::T)` around /home/vagrant/.julia/v0.7/RandomNumbers/src/PCG/bases.jl:229.
│ Use `pcg_advance!(s::PCGStateMCG{T}, delta::T) where T <: PCGUInt` instead.
└ @ nothing bases.jl:229
┌ Warning: Deprecated syntax `parametric method syntax pcg_srand{T <: PCGUInt}(s::PCGStateUnique{T}, init_state::T)` around /home/vagrant/.julia/v0.7/RandomNumbers/src/PCG/bases.jl:242.
│ Use `pcg_srand(s::PCGStateUnique{T}, init_state::T) where T <: PCGUInt` instead.
└ @ nothing bases.jl:242
┌ Warning: Deprecated syntax `parametric method syntax pcg_step!{T <: PCGUInt}(s::PCGStateUnique{T})` around /home/vagrant/.julia/v0.7/RandomNumbers/src/PCG/bases.jl:252.
│ Use `pcg_step!(s::PCGStateUnique{T}) where T <: PCGUInt` instead.
└ @ nothing bases.jl:252
┌ Warning: Deprecated syntax `parametric method syntax pcg_advance!{T <: PCGUInt}(s::PCGStateUnique{T}, delta::T)` around /home/vagrant/.julia/v0.7/RandomNumbers/src/PCG/bases.jl:258.
│ Use `pcg_advance!(s::PCGStateUnique{T}, delta::T) where T <: PCGUInt` instead.
└ @ nothing bases.jl:258
┌ Warning: Deprecated syntax `parametric method syntax pcg_srand{T <: PCGUInt}(s::PCGStateSetseq{T}, init_state::T, init_seq::T)` around /home/vagrant/.julia/v0.7/RandomNumbers/src/PCG/bases.jl:273.
│ Use `pcg_srand(s::PCGStateSetseq{T}, init_state::T, init_seq::T) where T <: PCGUInt` instead.
└ @ nothing bases.jl:273
┌ Warning: Deprecated syntax `parametric method syntax pcg_step!{T <: PCGUInt}(s::PCGStateSetseq{T})` around /home/vagrant/.julia/v0.7/RandomNumbers/src/PCG/bases.jl:284.
│ Use `pcg_step!(s::PCGStateSetseq{T}) where T <: PCGUInt` instead.
└ @ nothing bases.jl:284
┌ Warning: Deprecated syntax `parametric method syntax pcg_advance!{T <: PCGUInt}(s::PCGStateSetseq{T}, delta::T)` around /home/vagrant/.julia/v0.7/RandomNumbers/src/PCG/bases.jl:290.
│ Use `pcg_advance!(s::PCGStateSetseq{T}, delta::T) where T <: PCGUInt` instead.
└ @ nothing bases.jl:290
WARNING: Base.Random is deprecated, run `using Random` instead
  likely near /home/vagrant/.julia/v0.7/RandomNumbers/src/PCG/main.jl:2
┌ Warning: Deprecated syntax `parametric method syntax srand{StateType <: PCGUInt}(r::AbstractPCG{StateType}, seed::Integer = gen_seed(StateType))` around /home/vagrant/.julia/v0.7/RandomNumbers/src/PCG/main.jl:8.
│ Use `srand(r::AbstractPCG{StateType}, seed::Integer = gen_seed(StateType)) where StateType <: PCGUInt` instead.
└ @ nothing main.jl:8
┌ Warning: Deprecated syntax `parametric method syntax srand{StateType <: PCGUInt}(r::PCGStateSetseq{StateType}, seed::NTuple{2, Integer} = gen_seed(StateType, 2))` around /home/vagrant/.julia/v0.7/RandomNumbers/src/PCG/main.jl:10.
│ Use `srand(r::PCGStateSetseq{StateType}, seed::NTuple{2, Integer} = gen_seed(StateType, 2)) where StateType <: PCGUInt` instead.
└ @ nothing main.jl:10
┌ Warning: Deprecated syntax `parametric method syntax seed_type{T, T1, T2}(::Type{PCGStateOneseq{T, T1, T2}})` around /home/vagrant/.julia/v0.7/RandomNumbers/src/PCG/main.jl:12.
│ Use `seed_type(#unused#::Type{PCGStateOneseq{T, T1, T2}}) where {T, T1, T2}` instead.
└ @ nothing main.jl:12
┌ Warning: Deprecated syntax `parametric method syntax seed_type{T, T1, T2}(::Type{PCGStateMCG{T, T1, T2}})` around /home/vagrant/.julia/v0.7/RandomNumbers/src/PCG/main.jl:13.
│ Use `seed_type(#unused#::Type{PCGStateMCG{T, T1, T2}}) where {T, T1, T2}` instead.
└ @ nothing main.jl:13
┌ Warning: Deprecated syntax `parametric method syntax seed_type{T, T1, T2}(::Type{PCGStateUnique{T, T1, T2}})` around /home/vagrant/.julia/v0.7/RandomNumbers/src/PCG/main.jl:14.
│ Use `seed_type(#unused#::Type{PCGStateUnique{T, T1, T2}}) where {T, T1, T2}` instead.
└ @ nothing main.jl:14
┌ Warning: Deprecated syntax `parametric method syntax seed_type{T, T1, T2}(::Type{PCGStateSetseq{T, T1, T2}})` around /home/vagrant/.julia/v0.7/RandomNumbers/src/PCG/main.jl:15.
│ Use `seed_type(#unused#::Type{PCGStateSetseq{T, T1, T2}}) where {T, T1, T2}` instead.
└ @ nothing main.jl:15
┌ Warning: Deprecated syntax `parametric method syntax copy!{T <: AbstractPCG}(dest::T, src::T)` around /home/vagrant/.julia/v0.7/RandomNumbers/src/PCG/main.jl:18.
│ Use `copy!(dest::T, src::T) where T <: AbstractPCG` instead.
└ @ nothing main.jl:18
┌ Warning: Deprecated syntax `parametric method syntax copy!{T <: PCGStateSetseq}(dest::T, src::T)` around /home/vagrant/.julia/v0.7/RandomNumbers/src/PCG/main.jl:22.
│ Use `copy!(dest::T, src::T) where T <: PCGStateSetseq` instead.
└ @ nothing main.jl:22
┌ Warning: Deprecated syntax `parametric method syntax copy{T <: AbstractPCG}(src::T)` around /home/vagrant/.julia/v0.7/RandomNumbers/src/PCG/main.jl:27.
│ Use `copy(src::T) where T <: AbstractPCG` instead.
└ @ nothing main.jl:27
┌ Warning: Deprecated syntax `parametric method syntax =={T <: AbstractPCG}(r1::T, r2::T)` around /home/vagrant/.julia/v0.7/RandomNumbers/src/PCG/main.jl:29.
│ Use `(r1::T == r2::T) where T <: AbstractPCG` instead.
└ @ nothing main.jl:29
┌ Warning: Deprecated syntax `parametric method syntax =={T <: PCGStateSetseq}(r1::T, r2::T)` around /home/vagrant/.julia/v0.7/RandomNumbers/src/PCG/main.jl:30.
│ Use `(r1::T == r2::T) where T <: PCGStateSetseq` instead.
└ @ nothing main.jl:30
┌ Warning: Deprecated syntax `parametric method syntax rand{StateType <: Union{pcg_uints[1:(end - 1)]...}, MethodType <: PCGMethod, OutputType <: PCGUInt}(r::AbstractPCG{StateType, MethodType, OutputType}, ::Type{OutputType})` around /home/vagrant/.julia/v0.7/RandomNumbers/src/PCG/main.jl:35.
│ Use `rand(r::AbstractPCG{StateType, MethodType, OutputType}, #unused#::Type{OutputType}) where {StateType <: Union{pcg_uints[1:(end - 1)]...}, MethodType <: PCGMethod, OutputType <: PCGUInt}` instead.
└ @ nothing main.jl:35
┌ Warning: Deprecated syntax `parametric method syntax rand{MethodType <: PCGMethod, OutputType <: PCGUInt}(r::AbstractPCG{UInt128, MethodType, OutputType}, ::Type{OutputType})` around /home/vagrant/.julia/v0.7/RandomNumbers/src/PCG/main.jl:42.
│ Use `rand(r::AbstractPCG{UInt128, MethodType, OutputType}, #unused#::Type{OutputType}) where {MethodType <: PCGMethod, OutputType <: PCGUInt}` instead.
└ @ nothing main.jl:42
┌ Warning: Deprecated syntax `parametric method syntax bounded_rand{StateType <: PCGUInt, MethodType <: PCGMethod, OutputType <: PCGUInt}(s::AbstractPCG{StateType, MethodType, OutputType}, bound::OutputType)` around /home/vagrant/.julia/v0.7/RandomNumbers/src/PCG/main.jl:55.
│ Use `bounded_rand(s::AbstractPCG{StateType, MethodType, OutputType}, bound::OutputType) where {StateType <: PCGUInt, MethodType <: PCGMethod, OutputType <: PCGUInt}` instead.
└ @ nothing main.jl:55
┌ Warning: Deprecated syntax `parametric method syntax advance!{StateType <: PCGUInt}(r::AbstractPCG{StateType}, Δ::Integer)` around /home/vagrant/.julia/v0.7/RandomNumbers/src/PCG/main.jl:97.
│ Use `advance!(r::AbstractPCG{StateType}, Δ::Integer) where StateType <: PCGUInt` instead.
└ @ nothing main.jl:97
┌ Warning: Deprecated syntax `parametric method syntax PCGStateOneseq{T <: PCGUInt}(::Type{T}, seed::Integer = gen_seed(UInt128))` around /home/vagrant/.julia/v0.7/RandomNumbers/src/PCG/main.jl:145.
│ Use `PCGStateOneseq(#s10::Type{T}, seed::Integer = gen_seed(UInt128)) where T <: PCGUInt` instead.
└ @ nothing main.jl:145
┌ Warning: Deprecated syntax `parametric method syntax PCGStateOneseq{T <: PCGMethod}(::Type{T}, seed::Integer = gen_seed(UInt128))` around /home/vagrant/.julia/v0.7/RandomNumbers/src/PCG/main.jl:147.
│ Use `PCGStateOneseq(#s10::Type{T}, seed::Integer = gen_seed(UInt128)) where T <: PCGMethod` instead.
└ @ nothing main.jl:147
┌ Warning: Deprecated syntax `parametric method syntax PCGStateMCG{T <: PCGUInt}(::Type{T}, seed::Integer = gen_seed(UInt128))` around /home/vagrant/.julia/v0.7/RandomNumbers/src/PCG/main.jl:171.
│ Use `PCGStateMCG(#s10::Type{T}, seed::Integer = gen_seed(UInt128)) where T <: PCGUInt` instead.
└ @ nothing main.jl:171
┌ Warning: Deprecated syntax `parametric method syntax PCGStateMCG{T <: PCGMethod}(::Type{T}, seed::Integer = gen_seed(UInt128))` around /home/vagrant/.julia/v0.7/RandomNumbers/src/PCG/main.jl:173.
│ Use `PCGStateMCG(#s10::Type{T}, seed::Integer = gen_seed(UInt128)) where T <: PCGMethod` instead.
└ @ nothing main.jl:173
┌ Warning: Deprecated syntax `parametric method syntax PCGStateSetseq{T <: PCGUInt}(::Type{T}, seed::NTuple{2, Integer} = gen_seed(UInt128, 2))` around /home/vagrant/.julia/v0.7/RandomNumbers/src/PCG/main.jl:198.
│ Use `PCGStateSetseq(#s10::Type{T}, seed::NTuple{2, Integer} = gen_seed(UInt128, 2)) where T <: PCGUInt` instead.
└ @ nothing main.jl:198
┌ Warning: Deprecated syntax `parametric method syntax PCGStateSetseq{T <: PCGMethod}(::Type{T}, seed::NTuple{2, Integer} = gen_seed(UInt128, 2))` around /home/vagrant/.julia/v0.7/RandomNumbers/src/PCG/main.jl:200.
│ Use `PCGStateSetseq(#s10::Type{T}, seed::NTuple{2, Integer} = gen_seed(UInt128, 2)) where T <: PCGMethod` instead.
└ @ nothing main.jl:200
┌ Warning: Deprecated syntax `parametric method syntax PCGStateUnique{T <: PCGUInt}(::Type{T}, seed::Integer = gen_seed(UInt128))` around /home/vagrant/.julia/v0.7/RandomNumbers/src/PCG/main.jl:225.
│ Use `PCGStateUnique(#s10::Type{T}, seed::Integer = gen_seed(UInt128)) where T <: PCGUInt` instead.
└ @ nothing main.jl:225
┌ Warning: Deprecated syntax `parametric method syntax PCGStateUnique{T <: PCGMethod}(::Type{T}, seed::Integer = gen_seed(UInt128))` around /home/vagrant/.julia/v0.7/RandomNumbers/src/PCG/main.jl:227.
│ Use `PCGStateUnique(#s10::Type{T}, seed::Integer = gen_seed(UInt128)) where T <: PCGMethod` instead.
└ @ nothing main.jl:227
WARNING: Base.Random is deprecated, run `using Random` instead
  likely near /home/vagrant/.julia/v0.7/RandomNumbers/src/MersenneTwisters/main.jl:2
WARNING: Base.Random is deprecated, run `using Random` instead
  likely near /home/vagrant/.julia/v0.7/RandomNumbers/src/Random123/common.jl:1
WARNING: importing deprecated binding Base.Libdl into Random123.
WARNING: Base.Libdl is deprecated, run `using Libdl` instead
  likely near /home/vagrant/.julia/v0.7/RandomNumbers/src/Random123/common.jl:4
┌ Warning: Deprecated syntax `parametric method syntax set_counter!{T <: UInt128}(r::R123Generator1x{T}, ctr::Integer)` around /home/vagrant/.julia/v0.7/RandomNumbers/src/Random123/common.jl:26.
│ Use `set_counter!(r::R123Generator1x{T}, ctr::Integer) where T <: UInt128` instead.
└ @ nothing common.jl:26
┌ Warning: Deprecated syntax `parametric method syntax set_counter!{T <: Union{UInt32, UInt64}}(r::AbstractR123{T}, ctr::Integer)` around /home/vagrant/.julia/v0.7/RandomNumbers/src/Random123/common.jl:32.
│ Use `set_counter!(r::AbstractR123{T}, ctr::Integer) where T <: Union{UInt32, UInt64}` instead.
└ @ nothing common.jl:32
┌ Warning: Deprecated syntax `parametric method syntax rand{T <: UInt128}(r::R123Generator1x{T}, ::Type{T})` around /home/vagrant/.julia/v0.7/RandomNumbers/src/Random123/common.jl:39.
│ Use `rand(r::R123Generator1x{T}, #unused#::Type{T}) where T <: UInt128` instead.
└ @ nothing common.jl:39
┌ Warning: Deprecated syntax `parametric method syntax rand{T <: Union{UInt32, UInt64}}(r::R123Generator2x{T}, ::Type{T})` around /home/vagrant/.julia/v0.7/RandomNumbers/src/Random123/common.jl:45.
│ Use `rand(r::R123Generator2x{T}, #unused#::Type{T}) where T <: Union{UInt32, UInt64}` instead.
└ @ nothing common.jl:45
┌ Warning: Deprecated syntax `parametric method syntax rand{T <: Union{UInt32, UInt64}}(r::R123Generator4x{T}, ::Type{T})` around /home/vagrant/.julia/v0.7/RandomNumbers/src/Random123/common.jl:56.
│ Use `rand(r::R123Generator4x{T}, #unused#::Type{T}) where T <: Union{UInt32, UInt64}` instead.
└ @ nothing common.jl:56
┌ Warning: Deprecated syntax `parametric method syntax rand{T <: UInt128}(r::R123Generator1x{T}, ::Type{R123Array1x{T}})` around /home/vagrant/.julia/v0.7/RandomNumbers/src/Random123/common.jl:66.
│ Use `rand(r::R123Generator1x{T}, #unused#::Type{R123Array1x{T}}) where T <: UInt128` instead.
└ @ nothing common.jl:66
┌ Warning: Deprecated syntax `parametric method syntax rand{T <: Union{UInt32, UInt64}}(r::R123Generator2x{T}, ::Type{R123Array2x{T}})` around /home/vagrant/.julia/v0.7/RandomNumbers/src/Random123/common.jl:71.
│ Use `rand(r::R123Generator2x{T}, #unused#::Type{R123Array2x{T}}) where T <: Union{UInt32, UInt64}` instead.
└ @ nothing common.jl:71
┌ Warning: Deprecated syntax `parametric method syntax rand{T <: Union{UInt32, UInt64}}(r::R123Generator4x{T}, ::Type{R123Array4x{T}})` around /home/vagrant/.julia/v0.7/RandomNumbers/src/Random123/common.jl:80.
│ Use `rand(r::R123Generator4x{T}, #unused#::Type{R123Array4x{T}}) where T <: Union{UInt32, UInt64}` instead.
└ @ nothing common.jl:80
WARNING: Base.Random is deprecated, run `using Random` instead
  likely near /home/vagrant/.julia/v0.7/RandomNumbers/src/Random123/threefry.jl:2
┌ Warning: Deprecated syntax `parametric method syntax Threefry2x{T <: Union{UInt32, UInt64}}(::Type{T} = UInt64, seed::NTuple{2, Integer} = gen_seed(T, 2), R::Integer = 20)` around /home/vagrant/.julia/v0.7/RandomNumbers/src/Random123/threefry.jl:91.
│ Use `Threefry2x(#s10::Type{T} = UInt64, seed::NTuple{2, Integer} = gen_seed(T, 2), R::Integer = 20) where T <: Union{UInt32, UInt64}` instead.
└ @ nothing threefry.jl:91
┌ Warning: Deprecated syntax `parametric method syntax srand{T <: Union{UInt32, UInt64}}(r::Threefry2x{T}, seed::NTuple{2, Integer} = gen_seed(T, 2))` around /home/vagrant/.julia/v0.7/RandomNumbers/src/Random123/threefry.jl:98.
│ Use `srand(r::Threefry2x{T}, seed::NTuple{2, Integer} = gen_seed(T, 2)) where T <: Union{UInt32, UInt64}` instead.
└ @ nothing threefry.jl:98
┌ Warning: Deprecated syntax `parametric method syntax seed_type{T, R}(::Type{Threefry2x{T, R}})` around /home/vagrant/.julia/v0.7/RandomNumbers/src/Random123/threefry.jl:106.
│ Use `seed_type(#unused#::Type{Threefry2x{T, R}}) where {T, R}` instead.
└ @ nothing threefry.jl:106
┌ Warning: Deprecated syntax `parametric method syntax copy!{T, R}(dest::Threefry2x{T, R}, src::Threefry2x{T, R})` around /home/vagrant/.julia/v0.7/RandomNumbers/src/Random123/threefry.jl:109.
│ Use `copy!(dest::Threefry2x{T, R}, src::Threefry2x{T, R}) where {T, R}` instead.
└ @ nothing threefry.jl:109
┌ Warning: Deprecated syntax `parametric method syntax copy{T, R}(src::Threefry2x{T, R})` around /home/vagrant/.julia/v0.7/RandomNumbers/src/Random123/threefry.jl:114.
│ Use `copy(src::Threefry2x{T, R}) where {T, R}` instead.
└ @ nothing threefry.jl:114
┌ Warning: Deprecated syntax `parametric method syntax =={T, R}(r1::Threefry2x{T, R}, r2::Threefry2x{T, R})` around /home/vagrant/.julia/v0.7/RandomNumbers/src/Random123/threefry.jl:117.
│ Use `(r1::Threefry2x{T, R} == r2::Threefry2x{T, R}) where {T, R}` instead.
└ @ nothing threefry.jl:117
┌ Warning: Deprecated syntax `parametric method syntax random123_r{T <: Union{UInt32, UInt64}, R}(r::Threefry2x{T, R})` around /home/vagrant/.julia/v0.7/RandomNumbers/src/Random123/threefry.jl:120.
│ Use `random123_r(r::Threefry2x{T, R}) where {T <: Union{UInt32, UInt64}, R}` instead.
└ @ nothing threefry.jl:120
┌ Warning: Deprecated syntax `parametric method syntax Threefry4x{T <: Union{UInt32, UInt64}}(::Type{T} = UInt64, seed::NTuple{4, Integer} = gen_seed(T, 4), R::Integer = 20)` around /home/vagrant/.julia/v0.7/RandomNumbers/src/Random123/threefry.jl:232.
│ Use `Threefry4x(#s10::Type{T} = UInt64, seed::NTuple{4, Integer} = gen_seed(T, 4), R::Integer = 20) where T <: Union{UInt32, UInt64}` instead.
└ @ nothing threefry.jl:232
┌ Warning: Deprecated syntax `parametric method syntax srand{T <: Union{UInt32, UInt64}}(r::Threefry4x{T}, seed::NTuple{4, Integer} = gen_seed(T, 4))` around /home/vagrant/.julia/v0.7/RandomNumbers/src/Random123/threefry.jl:240.
│ Use `srand(r::Threefry4x{T}, seed::NTuple{4, Integer} = gen_seed(T, 4)) where T <: Union{UInt32, UInt64}` instead.
└ @ nothing threefry.jl:240
┌ Warning: Deprecated syntax `parametric method syntax seed_type{T, R}(::Type{Threefry4x{T, R}})` around /home/vagrant/.julia/v0.7/RandomNumbers/src/Random123/threefry.jl:247.
│ Use `seed_type(#unused#::Type{Threefry4x{T, R}}) where {T, R}` instead.
└ @ nothing threefry.jl:247
┌ Warning: Deprecated syntax `parametric method syntax copy!{T, R}(dest::Threefry4x{T, R}, src::Threefry4x{T, R})` around /home/vagrant/.julia/v0.7/RandomNumbers/src/Random123/threefry.jl:250.
│ Use `copy!(dest::Threefry4x{T, R}, src::Threefry4x{T, R}) where {T, R}` instead.
└ @ nothing threefry.jl:250
┌ Warning: Deprecated syntax `parametric method syntax copy{T, R}(src::Threefry4x{T, R})` around /home/vagrant/.julia/v0.7/RandomNumbers/src/Random123/threefry.jl:255.
│ Use `copy(src::Threefry4x{T, R}) where {T, R}` instead.
└ @ nothing threefry.jl:255
┌ Warning: Deprecated syntax `parametric method syntax =={T, R}(r1::Threefry4x{T, R}, r2::Threefry4x{T, R})` around /home/vagrant/.julia/v0.7/RandomNumbers/src/Random123/threefry.jl:259.
│ Use `(r1::Threefry4x{T, R} == r2::Threefry4x{T, R}) where {T, R}` instead.
└ @ nothing threefry.jl:259
┌ Warning: Deprecated syntax `parametric method syntax random123_r{T <: Union{UInt32, UInt64}, R}(r::Threefry4x{T, R})` around /home/vagrant/.julia/v0.7/RandomNumbers/src/Random123/threefry.jl:262.
│ Use `random123_r(r::Threefry4x{T, R}) where {T <: Union{UInt32, UInt64}, R}` instead.
└ @ nothing threefry.jl:262
WARNING: Base.Random is deprecated, run `using Random` instead
  likely near /home/vagrant/.julia/v0.7/RandomNumbers/src/Random123/philox.jl:2
┌ Warning: Deprecated syntax `parametric method syntax Philox2x{T <: Union{UInt32, UInt64}}(::Type{T} = UInt64, seed::Integer = gen_seed(T), R::Integer = 10)` around /home/vagrant/.julia/v0.7/RandomNumbers/src/Random123/philox.jl:56.
│ Use `Philox2x(#s25::Type{T} = UInt64, seed::Integer = gen_seed(T), R::Integer = 10) where T <: Union{UInt32, UInt64}` instead.
└ @ nothing philox.jl:56
┌ Warning: Deprecated syntax `parametric method syntax srand{T <: Union{UInt32, UInt64}}(r::Philox2x{T}, seed::Integer = gen_seed(T))` around /home/vagrant/.julia/v0.7/RandomNumbers/src/Random123/philox.jl:63.
│ Use `srand(r::Philox2x{T}, seed::Integer = gen_seed(T)) where T <: Union{UInt32, UInt64}` instead.
└ @ nothing philox.jl:63
┌ Warning: Deprecated syntax `parametric method syntax seed_type{T, R}(::Type{Philox2x{T, R}})` around /home/vagrant/.julia/v0.7/RandomNumbers/src/Random123/philox.jl:71.
│ Use `seed_type(#unused#::Type{Philox2x{T, R}}) where {T, R}` instead.
└ @ nothing philox.jl:71
┌ Warning: Deprecated syntax `parametric method syntax copy!{T, R}(dest::Philox2x{T, R}, src::Philox2x{T, R})` around /home/vagrant/.julia/v0.7/RandomNumbers/src/Random123/philox.jl:74.
│ Use `copy!(dest::Philox2x{T, R}, src::Philox2x{T, R}) where {T, R}` instead.
└ @ nothing philox.jl:74
┌ Warning: Deprecated syntax `parametric method syntax copy{T, R}(src::Philox2x{T, R})` around /home/vagrant/.julia/v0.7/RandomNumbers/src/Random123/philox.jl:79.
│ Use `copy(src::Philox2x{T, R}) where {T, R}` instead.
└ @ nothing philox.jl:79
┌ Warning: Deprecated syntax `parametric method syntax =={T, R}(r1::Philox2x{T, R}, r2::Philox2x{T, R})` around /home/vagrant/.julia/v0.7/RandomNumbers/src/Random123/philox.jl:81.
│ Use `(r1::Philox2x{T, R} == r2::Philox2x{T, R}) where {T, R}` instead.
└ @ nothing philox.jl:81
┌ Warning: Deprecated syntax `parametric method syntax philox2x_round{T <: Union{UInt32, UInt64}}(ctr1::T, ctr2::T, key::T)` around /home/vagrant/.julia/v0.7/RandomNumbers/src/Random123/philox.jl:84.
│ Use `philox2x_round(ctr1::T, ctr2::T, key::T) where T <: Union{UInt32, UInt64}` instead.
└ @ nothing philox.jl:84
┌ Warning: Deprecated syntax `parametric method syntax philox2x_bumpkey{T <: Union{UInt32, UInt64}}(key::T)` around /home/vagrant/.julia/v0.7/RandomNumbers/src/Random123/philox.jl:89.
│ Use `philox2x_bumpkey(key::T) where T <: Union{UInt32, UInt64}` instead.
└ @ nothing philox.jl:89
┌ Warning: Deprecated syntax `parametric method syntax random123_r{T <: Union{UInt32, UInt64}, R}(r::Philox2x{T, R})` around /home/vagrant/.julia/v0.7/RandomNumbers/src/Random123/philox.jl:93.
│ Use `random123_r(r::Philox2x{T, R}) where {T <: Union{UInt32, UInt64}, R}` instead.
└ @ nothing philox.jl:93
┌ Warning: Deprecated syntax `parametric method syntax Philox4x{T <: Union{UInt32, UInt64}}(::Type{T} = UInt64, seed::NTuple{2, Integer} = gen_seed(T, 2), R::Integer = 10)` around /home/vagrant/.julia/v0.7/RandomNumbers/src/Random123/philox.jl:146.
│ Use `Philox4x(#s31::Type{T} = UInt64, seed::NTuple{2, Integer} = gen_seed(T, 2), R::Integer = 10) where T <: Union{UInt32, UInt64}` instead.
└ @ nothing philox.jl:146
┌ Warning: Deprecated syntax `parametric method syntax srand{T <: Union{UInt32, UInt64}}(r::Philox4x{T}, seed::NTuple{2, Integer} = gen_seed(T, 2))` around /home/vagrant/.julia/v0.7/RandomNumbers/src/Random123/philox.jl:153.
│ Use `srand(r::Philox4x{T}, seed::NTuple{2, Integer} = gen_seed(T, 2)) where T <: Union{UInt32, UInt64}` instead.
└ @ nothing philox.jl:153
┌ Warning: Deprecated syntax `parametric method syntax seed_type{T, R}(::Type{Philox4x{T, R}})` around /home/vagrant/.julia/v0.7/RandomNumbers/src/Random123/philox.jl:162.
│ Use `seed_type(#unused#::Type{Philox4x{T, R}}) where {T, R}` instead.
└ @ nothing philox.jl:162
┌ Warning: Deprecated syntax `parametric method syntax copy!{T, R}(dest::Philox4x{T, R}, src::Philox4x{T, R})` around /home/vagrant/.julia/v0.7/RandomNumbers/src/Random123/philox.jl:165.
│ Use `copy!(dest::Philox4x{T, R}, src::Philox4x{T, R}) where {T, R}` instead.
└ @ nothing philox.jl:165
┌ Warning: Deprecated syntax `parametric method syntax copy{T, R}(src::Philox4x{T, R})` around /home/vagrant/.julia/v0.7/RandomNumbers/src/Random123/philox.jl:170.
│ Use `copy(src::Philox4x{T, R}) where {T, R}` instead.
└ @ nothing philox.jl:170
┌ Warning: Deprecated syntax `parametric method syntax =={T, R}(r1::Philox4x{T, R}, r2::Philox4x{T, R})` around /home/vagrant/.julia/v0.7/RandomNumbers/src/Random123/philox.jl:173.
│ Use `(r1::Philox4x{T, R} == r2::Philox4x{T, R}) where {T, R}` instead.
└ @ nothing philox.jl:173
┌ Warning: Deprecated syntax `parametric method syntax philox4x_round{T <: Union{UInt32, UInt64}}(ctr1::T, ctr2::T, ctr3::T, ctr4::T, key1::T, key2::T)` around /home/vagrant/.julia/v0.7/RandomNumbers/src/Random123/philox.jl:177.
│ Use `philox4x_round(ctr1::T, ctr2::T, ctr3::T, ctr4::T, key1::T, key2::T) where T <: Union{UInt32, UInt64}` instead.
└ @ nothing philox.jl:177
┌ Warning: Deprecated syntax `parametric method syntax philox4x_bumpkey{T <: Union{UInt32, UInt64}}(key1::T, key2::T)` around /home/vagrant/.julia/v0.7/RandomNumbers/src/Random123/philox.jl:183.
│ Use `philox4x_bumpkey(key1::T, key2::T) where T <: Union{UInt32, UInt64}` instead.
└ @ nothing philox.jl:183
┌ Warning: Deprecated syntax `parametric method syntax random123_r{T <: Union{UInt32, UInt64}, R}(r::Philox4x{T, R})` around /home/vagrant/.julia/v0.7/RandomNumbers/src/Random123/philox.jl:187.
│ Use `random123_r(r::Philox4x{T, R}) where {T <: Union{UInt32, UInt64}, R}` instead.
└ @ nothing philox.jl:187
WARNING: Base.Random is deprecated, run `using Random` instead
  likely near /home/vagrant/.julia/v0.7/RandomNumbers/src/Xorshifts/xorshift64.jl:2
┌ Warning: Deprecated syntax `parametric method syntax seed_type{T <: AbstractXorshift64}(::Type{T})` around /home/vagrant/.julia/v0.7/RandomNumbers/src/Xorshifts/xorshift64.jl:37.
│ Use `seed_type(#unused#::Type{T}) where T <: AbstractXorshift64` instead.
└ @ nothing xorshift64.jl:37
┌ Warning: Deprecated syntax `parametric method syntax copy!{T <: AbstractXorshift64}(dest::T, src::T)` around /home/vagrant/.julia/v0.7/RandomNumbers/src/Xorshifts/xorshift64.jl:40.
│ Use `copy!(dest::T, src::T) where T <: AbstractXorshift64` instead.
└ @ nothing xorshift64.jl:40
┌ Warning: Deprecated syntax `parametric method syntax copy{T <: AbstractXorshift64}(src::T)` around /home/vagrant/.julia/v0.7/RandomNumbers/src/Xorshifts/xorshift64.jl:44.
│ Use `copy(src::T) where T <: AbstractXorshift64` instead.
└ @ nothing xorshift64.jl:44
┌ Warning: Deprecated syntax `parametric method syntax =={T <: AbstractXorshift64}(r1::T, r2::T)` around /home/vagrant/.julia/v0.7/RandomNumbers/src/Xorshifts/xorshift64.jl:46.
│ Use `(r1::T == r2::T) where T <: AbstractXorshift64` instead.
└ @ nothing xorshift64.jl:46
┌ Warning: Deprecated syntax `plus ? "Plus" :"` at /home/vagrant/.julia/v0.7/RandomNumbers/src/Xorshifts/xorshift128.jl:19.
│ Use `plus ? "Plus" : "` instead.
└ @ nothing xorshift128.jl:19
WARNING: Base.Random is deprecated, run `using Random` instead
  likely near /home/vagrant/.julia/v0.7/RandomNumbers/src/Xorshifts/xorshift128.jl:2
┌ Warning: Deprecated syntax `parametric method syntax seed_type{T <: AbstractXorshift128}(::Type{T})` around /home/vagrant/.julia/v0.7/RandomNumbers/src/Xorshifts/xorshift128.jl:43.
│ Use `seed_type(#unused#::Type{T}) where T <: AbstractXorshift128` instead.
└ @ nothing xorshift128.jl:43
┌ Warning: Deprecated syntax `parametric method syntax copy!{T <: AbstractXorshift128}(dest::T, src::T)` around /home/vagrant/.julia/v0.7/RandomNumbers/src/Xorshifts/xorshift128.jl:46.
│ Use `copy!(dest::T, src::T) where T <: AbstractXorshift128` instead.
└ @ nothing xorshift128.jl:46
┌ Warning: Deprecated syntax `parametric method syntax copy{T <: AbstractXorshift128}(src::T)` around /home/vagrant/.julia/v0.7/RandomNumbers/src/Xorshifts/xorshift128.jl:51.
│ Use `copy(src::T) where T <: AbstractXorshift128` instead.
└ @ nothing xorshift128.jl:51
┌ Warning: Deprecated syntax `parametric method syntax =={T <: AbstractXorshift128}(r1::T, r2::T)` around /home/vagrant/.julia/v0.7/RandomNumbers/src/Xorshifts/xorshift128.jl:53.
│ Use `(r1::T == r2::T) where T <: AbstractXorshift128` instead.
└ @ nothing xorshift128.jl:53
┌ Warning: Deprecated syntax `plus ? "Plus" :"` at /home/vagrant/.julia/v0.7/RandomNumbers/src/Xorshifts/xorshift1024.jl:19.
│ Use `plus ? "Plus" : "` instead.
└ @ nothing xorshift1024.jl:19
WARNING: Base.Random is deprecated, run `using Random` instead
  likely near /home/vagrant/.julia/v0.7/RandomNumbers/src/Xorshifts/xorshift1024.jl:2
┌ Warning: Deprecated syntax `parametric method syntax seed_type{T <: AbstractXorshift1024}(::Type{T})` around /home/vagrant/.julia/v0.7/RandomNumbers/src/Xorshifts/xorshift1024.jl:73.
│ Use `seed_type(#unused#::Type{T}) where T <: AbstractXorshift1024` instead.
└ @ nothing xorshift1024.jl:73
┌ Warning: Deprecated syntax `parametric method syntax copy!{T <: AbstractXorshift1024}(dest::T, src::T)` around /home/vagrant/.julia/v0.7/RandomNumbers/src/Xorshifts/xorshift1024.jl:76.
│ Use `copy!(dest::T, src::T) where T <: AbstractXorshift1024` instead.
└ @ nothing xorshift1024.jl:76
┌ Warning: Deprecated syntax `parametric method syntax copy{T <: AbstractXorshift1024}(src::T)` around /home/vagrant/.julia/v0.7/RandomNumbers/src/Xorshifts/xorshift1024.jl:81.
│ Use `copy(src::T) where T <: AbstractXorshift1024` instead.
└ @ nothing xorshift1024.jl:81
┌ Warning: Deprecated syntax `parametric method syntax =={T <: AbstractXorshift1024}(r1::T, r2::T)` around /home/vagrant/.julia/v0.7/RandomNumbers/src/Xorshifts/xorshift1024.jl:83.
│ Use `(r1::T == r2::T) where T <: AbstractXorshift1024` instead.
└ @ nothing xorshift1024.jl:83
┌ Warning: Deprecated syntax `plus ? "Plus" :"` at /home/vagrant/.julia/v0.7/RandomNumbers/src/Xorshifts/xoroshiro128.jl:21.
│ Use `plus ? "Plus" : "` instead.
└ @ nothing xoroshiro128.jl:21
WARNING: Base.Random is deprecated, run `using Random` instead
  likely near /home/vagrant/.julia/v0.7/RandomNumbers/src/Xorshifts/xoroshiro128.jl:2
┌ Warning: Deprecated syntax `parametric method syntax seed_type{T <: AbstractXoroshiro128}(::Type{T})` around /home/vagrant/.julia/v0.7/RandomNumbers/src/Xorshifts/xoroshiro128.jl:46.
│ Use `seed_type(#unused#::Type{T}) where T <: AbstractXoroshiro128` instead.
└ @ nothing xoroshiro128.jl:46
┌ Warning: Deprecated syntax `parametric method syntax copy!{T <: AbstractXoroshiro128}(dest::T, src::T)` around /home/vagrant/.julia/v0.7/RandomNumbers/src/Xorshifts/xoroshiro128.jl:49.
│ Use `copy!(dest::T, src::T) where T <: AbstractXoroshiro128` instead.
└ @ nothing xoroshiro128.jl:49
┌ Warning: Deprecated syntax `parametric method syntax copy{T <: AbstractXoroshiro128}(src::T)` around /home/vagrant/.julia/v0.7/RandomNumbers/src/Xorshifts/xoroshiro128.jl:54.
│ Use `copy(src::T) where T <: AbstractXoroshiro128` instead.
└ @ nothing xoroshiro128.jl:54
┌ Warning: Deprecated syntax `parametric method syntax =={T <: AbstractXoroshiro128}(r1::T, r2::T)` around /home/vagrant/.julia/v0.7/RandomNumbers/src/Xorshifts/xoroshiro128.jl:56.
│ Use `(r1::T == r2::T) where T <: AbstractXoroshiro128` instead.
└ @ nothing xoroshiro128.jl:56
WARNING: Base.Test is deprecated, run `using Test` instead
  likely near /home/vagrant/.julia/v0.7/RandomNumbers/test/common.jl:2
Error During Test at /home/vagrant/.julia/v0.7/RandomNumbers/test/generic.jl:2
  Test threw exception MethodError(Random.rng_native_52, (RandomNumbers.PCG.PCGStateOneseq{UInt128,Val{:XSH_RS},UInt64}(0x4803a03fdd9171e51d71df74fffd98c1),), 0x0000000000006987)
  Expression: randn(r) == -0.4957408739873887
  MethodError: no method matching rng_native_52(::RandomNumbers.PCG.PCGStateOneseq{UInt128,Val{:XSH_RS},UInt64})
  Closest candidates are:
    rng_native_52(!Matched::Random.MersenneTwister) at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Random/src/RNGs.jl:292
    rng_native_52(!Matched::Random.RandomDevice) at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Random/src/RNGs.jl:56
  Stacktrace:
   [1] rand(::RandomNumbers.PCG.PCGStateOneseq{UInt128,Val{:XSH_RS},UInt64}, ::Random.SamplerTrivial{Random.UInt52Raw{UInt64},Any}) at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Random/src/generation.jl:108
   [2] rand at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Random/src/Random.jl:201 [inlined]
   [3] rand at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Random/src/generation.jl:119 [inlined]
   [4] rand at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Random/src/Random.jl:201 [inlined]
   [5] randn(::RandomNumbers.PCG.PCGStateOneseq{UInt128,Val{:XSH_RS},UInt64}) at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Random/src/normal.jl:38
   [6] top-level scope
   [7] include at ./boot.jl:305 [inlined]
   [8] include_relative(::Module, ::String) at ./loading.jl:1072
   [9] include(::Module, ::String) at ./sysimg.jl:29
   [10] include(::String) at ./sysimg.jl:68
   [11] top-level scope
   [12] include at ./boot.jl:305 [inlined]
   [13] include_relative(::Module, ::String) at ./loading.jl:1072
   [14] include(::Module, ::String) at ./sysimg.jl:29
   [15] exec_options(::Base.JLOptions) at ./client.jl:332
   [16] _start() at ./client.jl:448
ERROR: LoadError: LoadError: There was an error during testing
in expression starting at /home/vagrant/.julia/v0.7/RandomNumbers/test/generic.jl:2
in expression starting at /home/vagrant/.julia/v0.7/RandomNumbers/test/runtests.jl:2
┌ Error: ------------------------------------------------------------
│ # Testing failed for RandomNumbers
│   exception =
│    failed process: Process(`/home/vagrant/julia/bin/julia -Cnative -J/home/vagrant/julia/lib/julia/sys.so --compile=yes --depwarn=yes --code-coverage=none --color=no --compiled-modules=yes --check-bounds=yes --warn-overwrite=yes --startup-file=yes /home/vagrant/.julia/v0.7/RandomNumbers/test/runtests.jl`, ProcessExited(1)) [1]
│    Stacktrace:
│     [1] error(::String, ::Base.Process, ::String, ::Int64, ::String) at ./error.jl:42
│     [2] pipeline_error(::Base.Process) at ./process.jl:712
│     [3] #run#534(::Bool, ::Function, ::Cmd) at ./process.jl:670
│     [4] run at ./process.jl:668 [inlined]
│     [5] (::getfield(Pkg.Entry, Symbol("##56#57")){Bool,String,Array{AbstractString,1}})() at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Pkg/src/entry.jl:729
│     [6] cd(::getfield(Pkg.Entry, Symbol("##56#57")){Bool,String,Array{AbstractString,1}}, ::String) at ./file.jl:72
│     [7] #test!#55(::Bool, ::Function, ::String, ::Array{AbstractString,1}, ::Array{AbstractString,1}, ::Array{AbstractString,1}) at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Pkg/src/entry.jl:717
│     [8] (::getfield(Pkg.Entry, Symbol("#kw##test!")))(::NamedTuple{(:coverage,),Tuple{Bool}}, ::typeof(Pkg.Entry.test!), ::String, ::Array{AbstractString,1}, ::Array{AbstractString,1}, ::Array{AbstractString,1}) at ./<missing>:0
│     [9] #test#59(::Bool, ::Function, ::Array{AbstractString,1}) at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Pkg/src/entry.jl:756
│     [10] #test at ./<missing>:0 [inlined]
│     [11] #4 at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Pkg/src/dir.jl:36 [inlined]
│     [12] cd(::getfield(Pkg.Dir, Symbol("##4#7")){Base.Iterators.Pairs{Symbol,Bool,Tuple{Symbol},NamedTuple{(:coverage,),Tuple{Bool}}},typeof(Pkg.Entry.test),Tuple{Array{AbstractString,1}}}, ::String) at ./file.jl:72
│     [13] #cd#1(::Base.Iterators.Pairs{Symbol,Bool,Tuple{Symbol},NamedTuple{(:coverage,),Tuple{Bool}}}, ::Function, ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N} where N) at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Pkg/src/dir.jl:36
│     [14] (::getfield(Pkg.Dir, Symbol("#kw##cd")))(::NamedTuple{(:coverage,),Tuple{Bool}}, ::typeof(Pkg.Dir.cd), ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N} where N) at ./<missing>:0
│     [15] #test#3(::Bool, ::Function, ::String, ::Vararg{String,N} where N) at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Pkg/src/Pkg.jl:276
│     [16] test(::String, ::Vararg{String,N} where N) at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Pkg/src/Pkg.jl:276
│     [17] top-level scope
│     [18] eval at ./boot.jl:308 [inlined]
│     [19] eval(::Module, ::Expr) at ./sysimg.jl:74
│     [20] exec_options(::Base.JLOptions) at ./client.jl:309
│     [21] _start() at ./client.jl:448
└ @ Pkg.Entry entry.jl:732
ERROR: RandomNumbers had test errors

>>> End of log
