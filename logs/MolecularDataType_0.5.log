>>> 'Pkg.add("MolecularDataType")' log
INFO: Cloning cache of MolecularDataType from https://github.com/UMOL/MolecularDataType.jl.git
INFO: Installing MolecularDataType v0.0.2
INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of MolecularDataType
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("MolecularDataType")' log
Julia Version 0.5.2
Commit f4c6c9d (2017-05-06 16:34 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-126-generic #175-Ubuntu SMP Thu Jul 20 17:33:56 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (782.12890625 MB free)
Uptime: 12150.0 sec
Load Avg:  0.9111328125  0.97119140625  0.99169921875
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz     723854 s       5730 s      70443 s     269487 s         22 s
#2  3500 MHz     211481 s       1423 s      32526 s     935235 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.7.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.5
2 required packages:
 - JSON                          0.13.0
 - MolecularDataType             0.0.2
1 additional packages:
 - Compat                        0.29.0
INFO: Testing MolecularDataType
----------------------------------------
Test constructor_2 for type MolecularSystem


VERIFIED! constructor_2 for type MolecularSystem
----------------------------------------


-----------------------------------------
Test clone(obj; :fn_residue_id=...) for AbstractMolecularContainer

test single clone

VERIFIED! clone(obj; :fn_residue_id=...) for AbstractMolecularContainer

-----------------------------------------
-----------------------------------------
Test clone(obj; :fn_residue_id=...) for AbstractMolecularContainer

test batch clone

VERIFIED! clone(obj; :fn_residue_id=...) for AbstractMolecularContainer

-----------------------------------------
---------------------------------
Test fuse() for MolecularSystem

merge 2 molecular systems

VERIFIED! fuse() for MolecularSystem

---------------------------------
--------------------------------------------------
Test mutate!(obj::MolecularDataType.MolecularSystem, :coordinate, ...)

VERIFIED! mutate!(obj::MolecularDataType.MolecularSystem, :coordinate, ...)

--------------------------------------------------
INFO: MolecularDataType tests passed

>>> End of log
