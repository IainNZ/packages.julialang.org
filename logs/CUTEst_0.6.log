>>> 'Pkg.add("CUTEst")' log
INFO: Cloning cache of CUTEst from https://github.com/JuliaSmoothOptimizers/CUTEst.jl.git
INFO: Installing BinDeps v0.8.8
INFO: Installing CUTEst v0.3.3
INFO: Installing LinearOperators v0.4.1
INFO: Installing NLPModels v0.4.2
INFO: Installing SHA v0.5.7
INFO: Installing URIParser v0.3.1
INFO: Building CUTEst
INFO: Installing CUTEst
2018-07-23 13:04:15 URL:https://raw.githubusercontent.com/abelsiqueira/linux-cutest/v0.4.0/install.sh [6559/6559] -> "install.sh" [1]
linux-cutest 0.4.0 Copyright (C) 2016-2017  Abel Soares Siqueira
This program comes with ABSOLUTELY NO WARRANTY;
This is free software, and you are welcome to redistribute it
under certain conditions; see LICENSE.md for details.

2018-07-23 13:04:15 URL:https://codeload.github.com/ralna/ARCHDefs/tar.gz/v2.0.0 [15318] -> "ARCHDefs.tar.gz" [1]
2018-07-23 13:04:16 URL:https://codeload.github.com/ralna/CUTEst/tar.gz/v2.0.0 [1616168] -> "CUTEst.tar.gz" [1]
2018-07-23 13:05:07 URL:https://bitbucket.org/optrove/sif/get/v0.4.tar.gz [188622786] -> "sif.tar.gz" [1]
2018-07-23 13:05:22 URL:https://codeload.github.com/ralna/SIFDecode/tar.gz/v2.0.0 [639531] -> "SIFDecode.tar.gz" [1]
 Select platform

   (1) Compaq (DEC) alpha
   (2) Cray
   (3) HP workstation
   (4) IBM PowerPC
   (5) PC
   (6) PC with generic 64-bit processor
   (7) PC with 64-bit Itanium processor
   (8) PC with 64-bit Opteron processor
   (9) PC with 64-bit Athlon processor
  (10) SGI workstation
  (11) SUN workstation
  (12) MAC OS/X
  (13) 64-bit MAC OS/X
 Select operating system

   (1) Windows 2000/XP with MinGW/Msys
   (2) Linux
 Select compiler

        (1) GNU g95 compiler
        (2) GNU gfortran 5 compiler
        (3) GNU gfortran 6 compiler
        (4) GNU gfortran compiler
        (5) GNU gfortran 4 compiler with OMP 4.0 support
        (6) Intel ifort compiler
        (7) Lahey lf95 compiler
        (8) NAG nagfor compiler for 64-bit PCs under Linux
        (9) Nvidia nvcc/GNU gfortran cross compiler (N.B. check CUDA arch and code)
        (10) Portland Group pgfortran compiler
        (11) Pathscale fortran compiler
        (12) Sun Studio f90/f95 compiler
        (13) IBM xlf95 compiler under 64-bit linux




Installing the double precision version
 Compiling sifdecode      		[ OK ]
 Compiling sifdecode_main 		[ OK ]
 sifdecode: tools packages (double precision version) compiled successfully
 Compiling random         		[ OK ]
 Compiling check_derivs   		[ OK ]
 Compiling check_derivs_main		[ OK ]
 sifdecode: check packages (double precision version) compiled successfully
 Compiling slct           		[ OK ]
 Compiling clsf           		[ OK ]
 select: packages (double precision version) compiled successfully
[1m
 SUCCESS: SIFdecode successfully installed.

[m
 Remember to set the environment variable
  SIFDECODE to /home/vagrant/.julia/v0.6/CUTEst/deps/files/sifdecode
 In addition, please update your MANPATH to include
    /home/vagrant/.julia/v0.6/CUTEst/deps/files/sifdecode/man
 and your PATH to include
    /home/vagrant/.julia/v0.6/CUTEst/deps/files/sifdecode/bin

 (see /home/vagrant/.julia/v0.6/CUTEst/deps/files/sifdecode/doc/README.bashrc
  for an example on how to do that).

 Select platform

   (1) Compaq (DEC) alpha
   (2) Cray
   (3) HP workstation
   (4) IBM PowerPC
   (5) PC
   (6) PC with generic 64-bit processor
   (7) PC with 64-bit Itanium processor
   (8) PC with 64-bit Opteron processor
   (9) PC with 64-bit Athlon processor
  (10) SGI workstation
  (11) SUN workstation
  (12) MAC OS/X
  (13) 64-bit MAC OS/X
 Select operating system

   (1) Windows 2000/XP with MinGW/Msys
   (2) Linux
 Select compiler

        (1) GNU g95 compiler
        (2) GNU gfortran 5 compiler
        (3) GNU gfortran 6 compiler
        (4) GNU gfortran compiler
        (5) GNU gfortran 4 compiler with OMP 4.0 support
        (6) Intel ifort compiler
        (7) Lahey lf95 compiler
        (8) NAG nagfor compiler for 64-bit PCs under Linux
        (9) Nvidia nvcc/GNU gfortran cross compiler (N.B. check CUDA arch and code)
        (10) Portland Group pgfortran compiler
        (11) Pathscale fortran compiler
        (12) Sun Studio f90/f95 compiler
        (13) IBM xlf95 compiler under 64-bit linux
 Select subset of CUTEST packages to be installed
 (the chosen subset will optionally be installed below)

     (1) Everything
     (2) Everything except Matlab support
     (3) Unconstrained tools without Matlab support
     (4) Constrained tools without Matlab support
     (5) Everything for Matlab
        (1) generic CC
        (2) generic GCC
        (3) generic GCC with OMP 4.0 support
        (4) GCC for use with g95
        (5) GCC 5
        (6) GCC 6
        (7) GCC
        (8) ICC for 64-bit
        (9) Portland PGCC
        (10) Pathscale C/C++
        (11) Sun Studio cc compiler
        (12) XL C/C++




 The package subset may be installed in (S)ingle or (D)ouble precision

Installing the double precision version
 Compiling cutest         		[ OK ]
 Compiling pname          		[ OK ]
 Compiling probname       		[ OK ]
 Compiling varnames       		[ OK ]
 Compiling newthread      		[ OK ]
 Compiling problem        		[ OK ]
 Compiling fortran_ops    		[ OK ]
 Compiling interface      		[ OK ]
 Compiling ccutest        		[ OK ]
 Compiling timings        		[ OK ]
 Compiling usetup         		[ OK ]
 Compiling udimen         		[ OK ]
 Compiling udimse         		[ OK ]
 Compiling udimsh         		[ OK ]
 Compiling unames         		[ OK ]
 Compiling uvartype       		[ OK ]
 Compiling ufn            		[ OK ]
 Compiling ugr            		[ OK ]
 Compiling uofg           		[ OK ]
 Compiling udh            		[ OK ]
 Compiling ugrdh          		[ OK ]
 Compiling ush            		[ OK ]
 Compiling ushp           		[ OK ]
 Compiling ueh            		[ OK ]
 Compiling ugreh          		[ OK ]
 Compiling ugrsh          		[ OK ]
 Compiling uhprod         		[ OK ]
 Compiling ushprod        		[ OK ]
 Compiling ubandh         		[ OK ]
 Compiling ureport        		[ OK ]
 Compiling uterminate     		[ OK ]
 Compiling csetup         		[ OK ]
 Compiling cdimen         		[ OK ]
 Compiling cdimse         		[ OK ]
 Compiling cdimsh         		[ OK ]
 Compiling cdimsj         		[ OK ]
 Compiling cdimchp        		[ OK ]
 Compiling cnames         		[ OK ]
 Compiling cvartype       		[ OK ]
 Compiling cfn            		[ OK ]
 Compiling cgr            		[ OK ]
 Compiling cofg           		[ OK ]
 Compiling cofsg          		[ OK ]
 Compiling ccfg           		[ OK ]
 Compiling clfg           		[ OK ]
 Compiling ccfsg          		[ OK ]
 Compiling ccifg          		[ OK ]
 Compiling ccifsg         		[ OK ]
 Compiling cdh            		[ OK ]
 Compiling cdhc           		[ OK ]
 Compiling ceh            		[ OK ]
 Compiling cgrdh          		[ OK ]
 Compiling cifn           		[ OK ]
 Compiling cigr           		[ OK ]
 Compiling cisgr          		[ OK ]
 Compiling cidh           		[ OK ]
 Compiling csh            		[ OK ]
 Compiling cshc           		[ OK ]
 Compiling cshp           		[ OK ]
 Compiling cish           		[ OK ]
 Compiling cjprod         		[ OK ]
 Compiling cstats         		[ OK ]
 Compiling csgr           		[ OK ]
 Compiling csgreh         		[ OK ]
 Compiling csgrsh         		[ OK ]
 Compiling csjprod        		[ OK ]
 Compiling chprod         		[ OK ]
 Compiling chcprod        		[ OK ]
 Compiling cshprod        		[ OK ]
 Compiling cshcprod       		[ OK ]
 Compiling cchprods       		[ OK ]
 Compiling csjp           		[ OK ]
 Compiling csgrp          		[ OK ]
 Compiling csgrshp        		[ OK ]
 Compiling cchprodsp      		[ OK ]
 Compiling creport        		[ OK ]
 Compiling connames       		[ OK ]
 Compiling cterminate     		[ OK ]
 Compiling lqp            		[ OK ]
 Compiling cconst         		[ OK ]
 CUTEST: tools (double precision version) compiled successfully
 Compiling algencan_main  		[ OK ]
 CUTEst: algencan (double precision version) compiled successfully
 Compiling bobyqa_main    		[ OK ]
 CUTEst: bobyqa (double precision version) compiled successfully
 Compiling cg_descent_main		[ OK ]
 CUTEst: cg_descent (double precision version) compiled successfully
 Compiling cgplus_main    		[ OK ]
 CUTEst: cgplus (double precision version) compiled successfully
 Compiling cobyla_main    		[ OK ]
 CUTEst: cobyla (double precision version) compiled successfully
 Compiling derchk_main    		[ OK ]
 CUTEst: derchk (double precision version) compiled successfully
 Compiling dfo_main       		[ OK ]
 CUTEst: dfo (double precision version) compiled successfully
 Compiling directsearch_main		[ OK ]
 CUTEst: directsearch (double precision version) compiled successfully
 Compiling filtersd_main  		[ OK ]
 CUTEst: filtersd (double precision version) compiled successfully
 Compiling filtersqp_main 		[ OK ]
 CUTEst: filtersqp (double precision version) compiled successfully
 Compiling gen77          		[ OK ]
 Compiling gen77_main     		[ OK ]
 CUTEst: gen77 (double precision version) compiled successfully
 Compiling gen90          		[ OK ]
 Compiling gen90_main     		[ OK ]
 CUTEst: gen90 (double precision version) compiled successfully
 Compiling genc           		[ OK ]
 Compiling genc_main      		[ OK ]
 CUTEst: genc (double precision version) compiled successfully
 Compiling hrb_main       		[ OK ]
 CUTEst: hrb (double precision version) compiled successfully
 Compiling ipopt_main     		[ OK ]
 CUTEst: ipopt (double precision version) compiled successfully
 Compiling knitro_main    		[ OK ]
 CUTEst: knitro (double precision version) compiled successfully
 Compiling la04_main      		[ OK ]
 CUTEst: la04 (double precision version) compiled successfully
 Compiling lbfgs_main     		[ OK ]
 CUTEst: lbfgs (double precision version) compiled successfully
 Compiling lbfgsb_main    		[ OK ]
 CUTEst: lbfgsb (double precision version) compiled successfully
 Compiling lincoa_main    		[ OK ]
 CUTEst: lincoa (double precision version) compiled successfully
 Compiling loqo_main      		loqo_main.c: In function â€˜rd_specsâ€™:
loqo_main.c:964:7: warning: ignoring return value of â€˜fgetsâ€™, declared with attribute warn_unused_result [-Wunused-result]
  fgets(specline, 80, specfile);
       ^
loqo_main.c:1004:8: warning: ignoring return value of â€˜fgetsâ€™, declared with attribute warn_unused_result [-Wunused-result]
   fgets(specline, 80, specfile);
        ^
[ OK ]
 CUTEst: loqo (double precision version) compiled successfully
 Compiling minos_main     		[ OK ]
 CUTEst: minos (double precision version) compiled successfully
 Compiling newuoa_main    		[ OK ]
 CUTEst: newuoa (double precision version) compiled successfully
 Compiling nitsol_main    		[ OK ]
 CUTEst: nitsol (double precision version) compiled successfully
 Compiling nlpqlp_main    		[ OK ]
 CUTEst: nlpqlp (double precision version) compiled successfully
 Compiling npsol_main     		[ OK ]
 CUTEst: npsol (double precision version) compiled successfully
 Compiling osqp_main      		[ OK ]
 CUTEst: osqp (double precision version) compiled successfully
 Compiling pds_main       		[ OK ]
 CUTEst: pds (double precision version) compiled successfully
 Compiling pennlp_main    		[ OK ]
 CUTEst: pennlp (double precision version) compiled successfully
 Compiling praxis_main    		[ OK ]
 CUTEst: praxis (double precision version) compiled successfully
 Compiling ql_main        		[ OK ]
 CUTEst: ql (double precision version) compiled successfully
 Compiling qplib_main     		[ OK ]
 CUTEst: qplib (double precision version) compiled successfully
 Compiling snopt_main     		[ OK ]
 CUTEst: snopt (double precision version) compiled successfully
 Compiling spg_main       		[ OK ]
 CUTEst: spg (double precision version) compiled successfully
 Compiling stats_main     		[ OK ]
 CUTEst: stats (double precision version) compiled successfully
 Compiling stenmin_main   		[ OK ]
 CUTEst: stenmin (double precision version) compiled successfully
 Compiling tenmin_main    		[ OK ]
 CUTEst: tenmin (double precision version) compiled successfully
 Compiling test_main      		[ OK ]
 CUTEst: test (double precision version) compiled successfully
 Compiling tron_main      		[ OK ]
 CUTEst: tron (double precision version) compiled successfully
 Compiling uncmin_main    		[ OK ]
 CUTEst: uncmin (double precision version) compiled successfully
 Compiling vf13_main      		[ OK ]
 CUTEst: vf13 (double precision version) compiled successfully
 Compiling worhp_main     		[ OK ]
 CUTEst: worhp (double precision version) compiled successfully


 Remember to set the environment variable
  CUTEST to /home/vagrant/.julia/v0.6/CUTEst/deps/files/cutest
 In addition, please update your MANPATH to include
    /home/vagrant/.julia/v0.6/CUTEst/deps/files/cutest/man
 and your PATH to include
    /home/vagrant/.julia/v0.6/CUTEst/deps/files/cutest/bin

 (see /home/vagrant/.julia/v0.6/CUTEst/deps/files/cutest/doc/README.bashrc
  for an example on how to do that).

 If you wish the version you have just installed to become your
 default CUTEst version, additionally set
  MYARCH to pc64.lnx.gfo
ls: cannot access sifdecode/objects/pc64.lnx.gfo/double/*.so: No such file or directory
ls: cannot access sifdecode/man/man3/*.3: No such file or directory
---
CUTEst installed
To use globally, issue the command
  cat cutest_env.bashrc >> $HOME/.bashrc
---
INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of CUTEst
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("CUTEst")' log
Julia Version 0.6.4
Commit 9d11f62bcb (2018-07-09 19:09 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-143-generic #192-Ubuntu SMP Tue Feb 27 10:45:36 UTC 2018 x86_64 x86_64
Memory: 2.939197540283203 GB (488.66015625 MB free)
Uptime: 47135.0 sec
Load Avg:  0.6826171875  0.86328125  1.134765625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3510 MHz    2885352 s       4804 s     218828 s     883533 s          6 s
#2  3510 MHz     650808 s        100 s      86773 s    3874384 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem MAX_THREADS=16)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.6
2 required packages:
 - CUTEst                        0.3.3
 - JSON                          0.17.2
7 additional packages:
 - BinDeps                       0.8.8
 - Compat                        1.0.0
 - LinearOperators               0.4.1
 - NLPModels                     0.4.2
 - Nullables                     0.0.6
 - SHA                           0.5.7
 - URIParser                     0.3.1
INFO: Computing test dependencies for CUTEst...
INFO: Installing BinaryProvider v0.3.3
INFO: Installing Calculus v0.4.0
INFO: Installing Combinatorics v0.6.0
INFO: Installing CommonSubexpressions v0.1.0
INFO: Installing DataStructures v0.8.4
INFO: Installing DiffResults v0.0.3
INFO: Installing DiffRules v0.0.6
INFO: Installing ForwardDiff v0.7.5
INFO: Installing Ipopt v0.4.0
INFO: Installing IterTools v0.2.1
INFO: Installing JuMP v0.18.2
INFO: Installing MathOptInterface v0.4.1
INFO: Installing MathProgBase v0.7.1
INFO: Installing NaNMath v0.3.1
INFO: Installing Polynomials v0.4.0
INFO: Installing ReverseDiffSparse v0.8.1
INFO: Installing SpecialFunctions v0.6.0
INFO: Installing StaticArrays v0.7.2
INFO: Building SpecialFunctions
INFO: Building Ipopt
WARNING: imported binding for srcdir overwritten in module __anon__
INFO: Testing CUTEst
WARNING: using DataStructures.reset! in module CUTEst conflicts with an existing identifier.
WARNING: using DataStructures.cons in module CUTEst conflicts with an existing identifier.
Testing interfaces on problem brownden
Julia interface stress test... Passed
Test Summary:   | Pass  Total
Julia interface |   14     14
Core interface stress test... passed
Test Summary:  | Pass  Total
Core interface |   11     11
Finalizing
Testing interfaces on problem hs5
Julia interface stress test... Passed
Test Summary:   | Pass  Total
Julia interface |   14     14
Core interface stress test... passed
Test Summary:  | Pass  Total
Core interface |   11     11
Finalizing
Testing interfaces on problem hs6
Julia interface stress test... Passed
Test Summary:   | Pass  Total
Julia interface |   35     35
Core interface stress test... passed
Test Summary:  | Pass  Total
Core interface |   63     63
Finalizing
Testing interfaces on problem hs11
Julia interface stress test... Passed
Test Summary:   | Pass  Total
Julia interface |   35     35
Core interface stress test... passed
Test Summary:  | Pass  Total
Core interface |   63     63
Finalizing
Testing interfaces on problem hs14
Julia interface stress test... Passed
Test Summary:   | Pass  Total
Julia interface |   35     35
Core interface stress test... passed
Test Summary:  | Pass  Total
Core interface |   68     68
Finalizing
Checking problem brownden                   	âœ“               âœ“                  âœ“            -
Checking problem hs5                        	âœ“               âœ“                  âœ“            -
Checking problem hs6                        	âœ“               âœ“                  âœ“            -
Checking problem hs11                       	âœ“               âœ“                  âœ“            âœ“
Checking problem hs14                       	âœ“               âœ“                  âœ“            âœ“
Minimization problem HS6
nvar = 2, ncon = 1 (0 linear)
Minimization problem HS6
nvar = 2, ncon = 1 (0 linear)
lvar = -Inf   -Inf
uvar = Inf   Inf
lcon = 0.0
ucon = 0.0
x0 = -1.2   1.0
y0 = 0.0
nnzh = 1
nnzj = 2
nonlinear constraints: 1

******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit http://projects.coin-or.org/Ipopt
******************************************************************************

This is Ipopt version 3.12.8, running with linear solver mumps.
NOTE: Other linear solvers might be more efficient (see Ipopt documentation).

Number of nonzeros in equality constraint Jacobian...:        2
Number of nonzeros in inequality constraint Jacobian.:        0
Number of nonzeros in Lagrangian Hessian.............:        1

Total number of variables............................:        2
                     variables with only lower bounds:        0
                variables with lower and upper bounds:        0
                     variables with only upper bounds:        0
Total number of equality constraints.................:        1
Total number of inequality constraints...............:        0
        inequality constraints with only lower bounds:        0
   inequality constraints with lower and upper bounds:        0
        inequality constraints with only upper bounds:        0

iter    objective    inf_pr   inf_du lg(mu)  ||d||  lg(rg) alpha_du alpha_pr  ls
   0  4.8400000e+00 4.40e+00 1.56e+00  -1.0 0.00e+00    -  0.00e+00 0.00e+00   0
   1  1.5175599e+00 9.37e+00 1.88e+00  -1.0 1.88e+00   0.0 1.00e+00 1.00e+00f  1
   2  1.5057311e+00 6.05e+01 5.42e-01  -1.0 2.46e+00   0.4 1.00e+00 1.00e+00f  1
   3  2.1067038e+00 4.75e-14 2.90e+00  -1.0 5.88e+00    -  1.00e+00 1.00e+00H  1
   4  4.9303807e-32 2.11e+01 4.44e-16  -1.0 1.45e+00    -  1.00e+00 1.00e+00f  1
   5  0.0000000e+00 2.22e-15 0.00e+00  -1.0 2.11e+00    -  1.00e+00 1.00e+00h  1

Number of Iterations....: 5

                                   (scaled)                 (unscaled)
Objective...............:   0.0000000000000000e+00    0.0000000000000000e+00
Dual infeasibility......:   0.0000000000000000e+00    0.0000000000000000e+00
Constraint violation....:   2.2204460492503131e-15    2.2204460492503131e-15
Complementarity.........:   0.0000000000000000e+00    0.0000000000000000e+00
Overall NLP error.......:   2.2204460492503131e-15    2.2204460492503131e-15


Number of objective function evaluations             = 7
Number of objective gradient evaluations             = 6
Number of equality constraint evaluations            = 7
Number of inequality constraint evaluations          = 0
Number of equality constraint Jacobian evaluations   = 6
Number of inequality constraint Jacobian evaluations = 0
Number of Lagrangian Hessian evaluations             = 5
Total CPU secs in IPOPT (w/o function evaluations)   =      0.052
Total CPU secs in NLP function evaluations           =      0.003

EXIT: Optimal Solution Found.
Mastsif says U but are not unc free
String["FBRAINLS", "FBRAIN2LS", "DECONVU"]
Are unc and free but Mastsif is not U
String["BROWNDENE", "PALMER5D", "GAUSS3LS", "DMN15102LS", "BA-L1SPLS", "GAUSSIAN"]
Mastsif says X but aren't
String[]
Unconstrained with some fixed variables, no bounds but not X
String["DECONVU"]
Mastsif says U, X or B, but are not unconstrained
String["ANTWERP"]
Unconstrained problems, but not U, X or B
String["WALL50", "BROWNDENE", "GAUSS3LS", "DMN15102LS", "BA-L1SPLS", "SANTALS", "WALL100", "GAUSSIAN", "WALL10", "WALL20"]
Mastsif says L, but decoding gives otherwise
String["WALL50", "RDW2D52U", "WALL100", "RDW2D52F", "RDW2D52B", "RDW2D51U", "WALL10", "RDW2D51F", "WALL20"]
Decoding gives linear, but Mastsif disagrees
String["STEENBRA", "DALLASM", "GRIDNETC", "GRIDNETH", "GRIDNETG", "STEENBRD", "BIGBANK", "ANTWERP", "GRIDNETI", "LINSPANH", "STEENBRE", "SPANHYD", "GRIDNETE", "RES", "GRIDNETF", "STEENBRF", "GRIDNETD", "SMBANK", "LSNNODOC", "DALLASS", "SYNPOP24", "GRIDNETA", "STEENBRG", "GRIDNETB", "STEENBRC", "DALLASL", "WATER", "STEENBRB"]
Test Summary:         | Pass  Total
CUTEst selection tool | 1395   1395
ZECEVIC3: julia interface: f(xâ‚€) = 294.09999999999997
ZECEVIC3: core interface: f(xâ‚€) = 294.09999999999997
HIMMELBB: julia interface: f(xâ‚€) = 26656.13345574368
HIMMELBB: core interface: f(xâ‚€) = 26656.13345574368
MISRA1ALS: julia interface: f(xâ‚€) = 10780.190163909727
MISRA1ALS: core interface: f(xâ‚€) = 10780.190163909727
EXTRASIM: julia interface: f(xâ‚€) = 1.0
EXTRASIM: core interface: f(xâ‚€) = 1.0
POWELLBS: julia interface: f(xâ‚€) = 0.0
POWELLBS: core interface: f(xâ‚€) = 0.0
HS88: julia interface: f(xâ‚€) = 0.5
HS88: core interface: f(xâ‚€) = 0.5
HYPCIR: julia interface: f(xâ‚€) = 0.0
HYPCIR: core interface: f(xâ‚€) = 0.0
INFO: CUTEst tests passed
INFO: Removing BinaryProvider v0.3.3
INFO: Removing Calculus v0.4.0
INFO: Removing Combinatorics v0.6.0
INFO: Removing CommonSubexpressions v0.1.0
INFO: Removing DataStructures v0.8.4
INFO: Removing DiffResults v0.0.3
INFO: Removing DiffRules v0.0.6
INFO: Removing ForwardDiff v0.7.5
INFO: Removing Ipopt v0.4.0
INFO: Removing IterTools v0.2.1
INFO: Removing JuMP v0.18.2
INFO: Removing MathOptInterface v0.4.1
INFO: Removing MathProgBase v0.7.1
INFO: Removing NaNMath v0.3.1
INFO: Removing Polynomials v0.4.0
INFO: Removing ReverseDiffSparse v0.8.1
INFO: Removing SpecialFunctions v0.6.0
INFO: Removing StaticArrays v0.7.2

>>> End of log
