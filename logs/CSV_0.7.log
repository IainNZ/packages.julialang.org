>>> 'Pkg.add("CSV")' log
WARNING: Base.Pkg is deprecated, run `using Pkg` instead
 in module Main
[ Info: Installing BinaryProvider v0.3.0
[ Info: Installing CSV v0.2.4
[ Info: Installing CategoricalArrays v0.3.9
[ Info: Installing CodecZlib v0.4.3
[ Info: Installing DataFrames v0.11.6
[ Info: Installing DataStreams v0.3.4
[ Info: Installing DataStructures v0.8.2
[ Info: Installing Missings v0.2.9
[ Info: Installing NamedTuples v4.0.2
[ Info: Installing Reexport v0.1.0
[ Info: Installing SHA v0.5.7
[ Info: Installing SortingAlgorithms v0.2.1
[ Info: Installing StatsBase v0.22.0
[ Info: Installing TranscodingStreams v0.5.2
[ Info: Installing WeakRefStrings v0.4.6
[ Info: Building CodecZlib
┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `occursin(r, s)` instead.
│   caller = valid_dl_path(::String, ::BinaryProvider.Linux) at PlatformNames.jl:376
└ @ BinaryProvider PlatformNames.jl:376
WARNING: importing deprecated binding Base.Libdl into Sys.
WARNING: Base.Libdl is deprecated, run `using Libdl` instead
  likely near /home/vagrant/.julia/v0.7/CodecZlib/deps/build.jl:98
[ Info: Package database updated
┌ Info: METADATA is out-of-date — you may not have the latest version of CSV
└ Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("CSV")' log
WARNING: Base.versioninfo is deprecated: it has been moved to the standard library package `InteractiveUtils`.
Add `using InteractiveUtils` to your imports.
 in module Main
WARNING: Base.versioninfo is deprecated: it has been moved to the standard library package `InteractiveUtils`.
Add `using InteractiveUtils` to your imports.
 in module Main
Julia Version 0.7.0-DEV.5095
Commit 2a21849b10 (2018-05-12 22:13 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
      Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-143-generic #192-Ubuntu SMP Tue Feb 27 10:45:36 UTC 2018 x86_64 x86_64
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
              speed         user         nice          sys         idle          irq
       #1  3500 MHz    3217360 s       6572 s     238151 s    1149235 s         35 s
       #2  3500 MHz     791251 s       3004 s      98344 s    4371830 s          0 s
       
  Memory: 2.939197540283203 GB (803.75390625 MB free)
  Uptime: 53870.0 sec
  Load Avg:  1.2607421875  1.04638671875  1.0029296875
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-6.0.0 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant
Packages:
  Package Directory: /home/vagrant/.julia/v0.7
  Package Status:
2 required packages:
 - CSV                           0.2.4
 - JSON                          0.17.2
16 additional packages:
 - BinaryProvider                0.3.0
 - CategoricalArrays             0.3.9
 - CodecZlib                     0.4.3
 - Compat                        0.64.0
 - DataFrames                    0.11.6
 - DataStreams                   0.3.4
 - DataStructures                0.8.2
 - Missings                      0.2.9
 - NamedTuples                   4.0.2
 - Nullables                     0.0.5
 - Reexport                      0.1.0
 - SHA                           0.5.7
 - SortingAlgorithms             0.2.1
 - StatsBase                     0.22.0
 - TranscodingStreams            0.5.2
 - WeakRefStrings                0.4.6
WARNING: Base.Pkg is deprecated, run `using Pkg` instead
 in module Main
[ Info: Computing test dependencies for CSV...
[ Info: Installing DecFP v0.4.3
[ Info: Building DecFP
┌ Warning: `rsearch(s::AbstractString, c::Char)` is deprecated, use `coalesce(findlast(isequal(c), s), 0)` instead.
│   caller = extract_platform_key(::String) at Prefix.jl:223
└ @ BinaryProvider Prefix.jl:223
[ Info: Downloading https://github.com/quinnj/DecFPBuilder/releases/download/v0.4/DecFP.x86_64-linux-gnu.tar.gz to /home/vagrant/.julia/v0.7/DecFP/deps/usr/downloads/DecFP.x86_64-linux-gnu.tar.gz...
┌ Warning: `wait(t::Task)` is deprecated, use `fetch(t)` instead.
│   caller = macro expansion at OutputCollector.jl:62 [inlined]
└ @ Core OutputCollector.jl:62
[15:00:54] [15:00:54] ######################################################################## 100.0%[15:00:54] ######################################################################## 100.0%[15:00:54] ###                                                                        5.2%[15:00:55] ###############                                                           21.2%[15:00:55] ############################                                              39.5%[15:00:55] ###########################################                               60.2%[15:00:55] ##########################################################                81.2%[15:00:55] ######################################################################## 100.0%
┌ Warning: `wait(t::Task)` is deprecated, use `fetch(t)` instead.
│   caller = wait(::BinaryProvider.OutputCollector) at OutputCollector.jl:158
└ @ BinaryProvider OutputCollector.jl:158
┌ Warning: `wait(t::Task)` is deprecated, use `fetch(t)` instead.
│   caller = wait(::BinaryProvider.OutputCollector) at OutputCollector.jl:159
└ @ BinaryProvider OutputCollector.jl:159
┌ Warning: `wait(t::Task)` is deprecated, use `fetch(t)` instead.
│   caller = wait(::BinaryProvider.OutputCollector) at OutputCollector.jl:163
└ @ BinaryProvider OutputCollector.jl:163
WARNING: importing deprecated binding Base.Libdl into Sys.
WARNING: Base.Libdl is deprecated, run `using Libdl` instead
  likely near /home/vagrant/.julia/v0.7/DecFP/deps/build.jl:37
┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `occursin(r, s)` instead.
│   caller = valid_dl_path(::String, ::BinaryProvider.Linux) at PlatformNames.jl:376
└ @ BinaryProvider PlatformNames.jl:376
WARNING: Base.Libdl is deprecated, run `using Libdl` instead
  likely near /home/vagrant/.julia/v0.7/DecFP/deps/build.jl:37
in #131 at /home/vagrant/.julia/v0.7/BinaryProvider/src/Products.jl
[ Info: Testing CSV
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(undef, m)` instead.
│   caller = top-level scope
└ @ Core :0
testing Int
testing Int Custom IO
testing Float64 Custom IO
testing Float64
testing DecFP custom IO
testing DecFP
testing WeakRefString
testing String Custom IO
testing Date
testing Date Custom IO
testing DateTime
testing DateTime Custom IO
testing Char
testing Bool
testing All types
┌ Warning: `nb_available` is deprecated, use `bytesavailable` instead.
│   caller = #Source#24(::Base.GenericIOBuffer{Array{UInt8,1}}, ::CSV.Options{Nothing}, ::Array{String,1}, ::Int64, ::Array{Type,1}, ::Symbol, ::Nothing, ::Bool, ::Bool, ::Int64, ::Int64, ::Int64, ::Bool, ::Type) at Source.jl:72
└ @ CSV Source.jl:72
┌ Warning: `datatype_module(t::DataType)` is deprecated, use `parentmodule(t)` instead.
│   caller = datatype at DataStreams.jl:464 [inlined]
└ @ Core DataStreams.jl:464
┌ Warning: `datatype_name(t::DataType)` is deprecated, use `nameof(t)` instead.
│   caller = datatype at DataStreams.jl:464 [inlined]
└ @ Core DataStreams.jl:464
┌ Warning: `datatype_module(t::DataType)` is deprecated, use `parentmodule(t)` instead.
│   caller = datatype at DataStreams.jl:464 [inlined]
└ @ Core DataStreams.jl:464
┌ Warning: `datatype_name(t::DataType)` is deprecated, use `nameof(t)` instead.
│   caller = datatype at DataStreams.jl:464 [inlined]
└ @ Core DataStreams.jl:464
Basic CSV.Source: Error During Test at /home/vagrant/.julia/v0.7/CSV/test/source.jl:1
  Got exception UndefVarError(:Inference) outside of a @test
  UndefVarError: Inference not defined
  Stacktrace:
   [1] getproperty at ./sysimg.jl:13 [inlined]
   [2] (::getfield(DataStreams.Data, Symbol("##8#11")){Tuple{DataType,DataType,DataType},Tuple{typeof(identity),typeof(identity),typeof(identity)}})(::Int64) at ./<missing>:0
   [3] next at ./generator.jl:47 [inlined]
   [4] append_any(::Base.Generator{UnitRange{Int64},getfield(DataStreams.Data, Symbol("##8#11")){Tuple{DataType,DataType,DataType},Tuple{typeof(identity),typeof(identity),typeof(identity)}}}, ::Vararg{Base.Generator{UnitRange{Int64},getfield(DataStreams.Data, Symbol("##8#11")){Tuple{DataType,DataType,DataType},Tuple{typeof(identity),typeof(identity),typeof(identity)}}},N} where N) at ./essentials.jl:388
   [5] transform(::DataStreams.Data.Schema{true,Tuple{Float64,Float64,Float64}}, ::Dict{Int64,Function}, ::Bool) at /home/vagrant/.julia/v0.7/DataStreams/src/DataStreams.jl:94
   [6] #stream!#17(::Bool, ::Dict{Int64,Function}, ::Function, ::Array{Any,1}, ::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::CSV.Source{Base.GenericIOBuffer{Array{UInt8,1}},Nothing}, ::Type{DataFrame}) at /home/vagrant/.julia/v0.7/DataStreams/src/DataStreams.jl:481
   [7] #stream! at ./<missing>:0 [inlined]
   [8] #read#46(::Bool, ::Dict{Int64,Function}, ::Function, ::CSV.Source{Base.GenericIOBuffer{Array{UInt8,1}},Nothing}, ::Type{DataFrame}) at /home/vagrant/.julia/v0.7/CSV/src/Source.jl:350
   [9] read at /home/vagrant/.julia/v0.7/CSV/src/Source.jl:350 [inlined]
   [10] read(::CSV.Source{Base.GenericIOBuffer{Array{UInt8,1}},Nothing}) at /home/vagrant/.julia/v0.7/CSV/src/Source.jl:349
   [11] macro expansion at /home/vagrant/.julia/v0.7/CSV/test/source.jl:20 [inlined]
   [12] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v0.7/Test/src/Test.jl:1079 [inlined]
   [13] top-level scope at /home/vagrant/.julia/v0.7/CSV/test/source.jl:4
   [14] include at ./boot.jl:314 [inlined]
   [15] include_relative(::Module, ::String) at ./loading.jl:1067
   [16] include(::Module, ::String) at ./sysimg.jl:29
   [17] include(::String) at ./sysimg.jl:68
   [18] macro expansion at /home/vagrant/.julia/v0.7/CSV/test/runtests.jl:24 [inlined]
   [19] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v0.7/Test/src/Test.jl:1079 [inlined]
   [20] top-level scope at /home/vagrant/.julia/v0.7/CSV/test/runtests.jl:21
   [21] include at ./boot.jl:314 [inlined]
   [22] include_relative(::Module, ::String) at ./loading.jl:1067
   [23] include(::Module, ::String) at ./sysimg.jl:29
   [24] exec_options(::Base.JLOptions) at ./client.jl:327
   [25] _start() at ./client.jl:457
┌ Warning: `datatype_module(t::DataType)` is deprecated, use `parentmodule(t)` instead.
│   caller = datatype at DataStreams.jl:464 [inlined]
└ @ Core DataStreams.jl:464
┌ Warning: `datatype_name(t::DataType)` is deprecated, use `nameof(t)` instead.
│   caller = datatype at DataStreams.jl:464 [inlined]
└ @ Core DataStreams.jl:464
┌ Warning: `datatype_module(t::DataType)` is deprecated, use `parentmodule(t)` instead.
│   caller = datatype at DataStreams.jl:464 [inlined]
└ @ Core DataStreams.jl:464
┌ Warning: `datatype_name(t::DataType)` is deprecated, use `nameof(t)` instead.
│   caller = datatype at DataStreams.jl:464 [inlined]
└ @ Core DataStreams.jl:464
CSV.Source keyword arguments: Error During Test at /home/vagrant/.julia/v0.7/CSV/test/source.jl:115
  Got exception UndefVarError(:Inference) outside of a @test
  UndefVarError: Inference not defined
  Stacktrace:
   [1] getproperty at ./sysimg.jl:13 [inlined]
   [2] (::getfield(DataStreams.Data, Symbol("##8#11")){Tuple{DataType},Tuple{typeof(identity)}})(::Int64) at ./<missing>:0
   [3] next at ./generator.jl:47 [inlined]
   [4] append_any(::Base.Generator{UnitRange{Int64},getfield(DataStreams.Data, Symbol("##8#11")){Tuple{DataType},Tuple{typeof(identity)}}}, ::Vararg{Base.Generator{UnitRange{Int64},getfield(DataStreams.Data, Symbol("##8#11")){Tuple{DataType},Tuple{typeof(identity)}}},N} where N) at ./essentials.jl:388
   [5] transform(::DataStreams.Data.Schema{true,Tuple{Date}}, ::Dict{Int64,Function}, ::Bool) at /home/vagrant/.julia/v0.7/DataStreams/src/DataStreams.jl:94
   [6] #stream!#17(::Bool, ::Dict{Int64,Function}, ::Function, ::Array{Any,1}, ::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::CSV.Source{Base.GenericIOBuffer{Array{UInt8,1}},DateFormat{Symbol("yyyy-mm-dd"),Tuple{Dates.DatePart{'y'},Dates.Delim{Char,1},Dates.DatePart{'m'},Dates.Delim{Char,1},Dates.DatePart{'d'}}}}, ::Type{DataFrame}) at /home/vagrant/.julia/v0.7/DataStreams/src/DataStreams.jl:481
   [7] #stream! at ./<missing>:0 [inlined]
   [8] #read#46(::Bool, ::Dict{Int64,Function}, ::Function, ::CSV.Source{Base.GenericIOBuffer{Array{UInt8,1}},DateFormat{Symbol("yyyy-mm-dd"),Tuple{Dates.DatePart{'y'},Dates.Delim{Char,1},Dates.DatePart{'m'},Dates.Delim{Char,1},Dates.DatePart{'d'}}}}, ::Type{DataFrame}) at /home/vagrant/.julia/v0.7/CSV/src/Source.jl:350
   [9] read at /home/vagrant/.julia/v0.7/CSV/src/Source.jl:350 [inlined]
   [10] read(::CSV.Source{Base.GenericIOBuffer{Array{UInt8,1}},DateFormat{Symbol("yyyy-mm-dd"),Tuple{Dates.DatePart{'y'},Dates.Delim{Char,1},Dates.DatePart{'m'},Dates.Delim{Char,1},Dates.DatePart{'d'}}}}) at /home/vagrant/.julia/v0.7/CSV/src/Source.jl:349
   [11] macro expansion at /home/vagrant/.julia/v0.7/CSV/test/source.jl:134 [inlined]
   [12] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v0.7/Test/src/Test.jl:1079 [inlined]
   [13] top-level scope at /home/vagrant/.julia/v0.7/CSV/test/source.jl:118
   [14] include at ./boot.jl:314 [inlined]
   [15] include_relative(::Module, ::String) at ./loading.jl:1067
   [16] include(::Module, ::String) at ./sysimg.jl:29
   [17] include(::String) at ./sysimg.jl:68
   [18] macro expansion at /home/vagrant/.julia/v0.7/CSV/test/runtests.jl:24 [inlined]
   [19] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v0.7/Test/src/Test.jl:1079 [inlined]
   [20] top-level scope at /home/vagrant/.julia/v0.7/CSV/test/runtests.jl:21
   [21] include at ./boot.jl:314 [inlined]
   [22] include_relative(::Module, ::String) at ./loading.jl:1067
   [23] include(::Module, ::String) at ./sysimg.jl:29
   [24] exec_options(::Base.JLOptions) at ./client.jl:327
   [25] _start() at ./client.jl:457
CSV.Source various files: Error During Test at /home/vagrant/.julia/v0.7/CSV/test/source.jl:372
  Got exception UndefVarError(:Inference) outside of a @test
  UndefVarError: Inference not defined
  Stacktrace:
   [1] getproperty at ./sysimg.jl:13 [inlined]
   [2] (::getfield(DataStreams.Data, Symbol("##8#11")){NTuple{15,Union},NTuple{15,typeof(identity)}})(::Int64) at ./<missing>:0
   [3] next at ./generator.jl:47 [inlined]
   [4] append_any(::Base.Generator{UnitRange{Int64},getfield(DataStreams.Data, Symbol("##8#11")){NTuple{15,Union},NTuple{15,typeof(identity)}}}, ::Vararg{Base.Generator{UnitRange{Int64},getfield(DataStreams.Data, Symbol("##8#11")){NTuple{15,Union},NTuple{15,typeof(identity)}}},N} where N) at ./essentials.jl:388
   [5] transform(::DataStreams.Data.Schema{true,Tuple{Union{Missing, Int64},Union{Missing, Int64},Union{Missing, Int64},Union{Missing, CategoricalString{UInt32}},Union{Missing, CategoricalString{UInt32}},Union{Missing, WeakRefString{UInt8}},Union{Missing, Int64},Union{Missing, Int64},Union{Missing, Float64},Union{Missing, Int64},Union{Missing, Float64},Union{Missing, Int64},Union{Missing, Int64},Union{Missing, Float64},Union{Missing, CategoricalString{UInt32}}}}, ::Dict{Int64,Function}, ::Bool) at /home/vagrant/.julia/v0.7/DataStreams/src/DataStreams.jl:94
   [6] #stream!#17(::Bool, ::Dict{Int64,Function}, ::Function, ::Array{Any,1}, ::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::CSV.Source{Base.GenericIOBuffer{Array{UInt8,1}},Nothing}, ::Type{DataFrame}) at /home/vagrant/.julia/v0.7/DataStreams/src/DataStreams.jl:481
   [7] #stream! at ./<missing>:0 [inlined]
   [8] #read#46(::Bool, ::Dict{Int64,Function}, ::Function, ::CSV.Source{Base.GenericIOBuffer{Array{UInt8,1}},Nothing}, ::Type{DataFrame}) at /home/vagrant/.julia/v0.7/CSV/src/Source.jl:350
   [9] read at /home/vagrant/.julia/v0.7/CSV/src/Source.jl:350 [inlined]
   [10] read(::CSV.Source{Base.GenericIOBuffer{Array{UInt8,1}},Nothing}) at /home/vagrant/.julia/v0.7/CSV/src/Source.jl:349
   [11] macro expansion at /home/vagrant/.julia/v0.7/CSV/test/source.jl:380 [inlined]
   [12] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v0.7/Test/src/Test.jl:1079 [inlined]
   [13] top-level scope at /home/vagrant/.julia/v0.7/CSV/test/source.jl:375
   [14] include at ./boot.jl:314 [inlined]
   [15] include_relative(::Module, ::String) at ./loading.jl:1067
   [16] include(::Module, ::String) at ./sysimg.jl:29
   [17] include(::String) at ./sysimg.jl:68
   [18] macro expansion at /home/vagrant/.julia/v0.7/CSV/test/runtests.jl:24 [inlined]
   [19] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v0.7/Test/src/Test.jl:1079 [inlined]
   [20] top-level scope at /home/vagrant/.julia/v0.7/CSV/test/runtests.jl:21
   [21] include at ./boot.jl:314 [inlined]
   [22] include_relative(::Module, ::String) at ./loading.jl:1067
   [23] include(::Module, ::String) at ./sysimg.jl:29
   [24] exec_options(::Base.JLOptions) at ./client.jl:327
   [25] _start() at ./client.jl:457
WARNING: importing deprecated binding Base.uninitialized into CSV.
WARNING: Base.uninitialized is deprecated, use undef instead.
  likely near /home/vagrant/.julia/v0.7/CSV/test/source.jl:454
WARNING: Base.uninitialized is deprecated, use undef instead.
  likely near /home/vagrant/.julia/v0.7/CSV/test/source.jl:454
WARNING: Base.uninitialized is deprecated, use undef instead.
  likely near /home/vagrant/.julia/v0.7/CSV/test/source.jl:454
WARNING: Base.uninitialized is deprecated, use undef instead.
  likely near /home/vagrant/.julia/v0.7/CSV/test/source.jl:454
WARNING: Base.uninitialized is deprecated, use undef instead.
  likely near /home/vagrant/.julia/v0.7/CSV/test/source.jl:454
WARNING: Base.uninitialized is deprecated, use undef instead.
  likely near /home/vagrant/.julia/v0.7/CSV/test/source.jl:454
WARNING: Base.uninitialized is deprecated, use undef instead.
  likely near /home/vagrant/.julia/v0.7/CSV/test/source.jl:454
WARNING: Base.uninitialized is deprecated, use undef instead.
  likely near /home/vagrant/.julia/v0.7/CSV/test/source.jl:454
WARNING: Base.uninitialized is deprecated, use undef instead.
  likely near /home/vagrant/.julia/v0.7/CSV/test/source.jl:454
┌ Warning: `datatype_module(t::DataType)` is deprecated, use `parentmodule(t)` instead.
│   caller = datatype at DataStreams.jl:464 [inlined]
└ @ Core DataStreams.jl:464
┌ Warning: `datatype_name(t::DataType)` is deprecated, use `nameof(t)` instead.
│   caller = datatype at DataStreams.jl:464 [inlined]
└ @ Core DataStreams.jl:464
┌ Warning: `datatype_module(t::DataType)` is deprecated, use `parentmodule(t)` instead.
│   caller = datatype at DataStreams.jl:464 [inlined]
└ @ Core DataStreams.jl:464
┌ Warning: `datatype_name(t::DataType)` is deprecated, use `nameof(t)` instead.
│   caller = datatype at DataStreams.jl:464 [inlined]
└ @ Core DataStreams.jl:464
CSV.TransposedSource: Error During Test at /home/vagrant/.julia/v0.7/CSV/test/source.jl:454
  Got exception UndefVarError(:Inference) outside of a @test
  UndefVarError: Inference not defined
  Stacktrace:
   [1] getproperty at ./sysimg.jl:13 [inlined]
   [2] (::getfield(DataStreams.Data, Symbol("##8#11")){Tuple{Union,Union,Union},Tuple{typeof(identity),typeof(identity),typeof(identity)}})(::Int64) at ./<missing>:0
   [3] next at ./generator.jl:47 [inlined]
   [4] append_any(::Base.Generator{UnitRange{Int64},getfield(DataStreams.Data, Symbol("##8#11")){Tuple{Union,Union,Union},Tuple{typeof(identity),typeof(identity),typeof(identity)}}}, ::Vararg{Base.Generator{UnitRange{Int64},getfield(DataStreams.Data, Symbol("##8#11")){Tuple{Union,Union,Union},Tuple{typeof(identity),typeof(identity),typeof(identity)}}},N} where N) at ./essentials.jl:388
   [5] transform(::DataStreams.Data.Schema{true,Tuple{Union{Missing, Int64},Union{Missing, Int64},Union{Missing, Int64}}}, ::Dict{Int64,Function}, ::Bool) at /home/vagrant/.julia/v0.7/DataStreams/src/DataStreams.jl:94
   [6] #stream!#17(::Bool, ::Dict{Int64,Function}, ::Function, ::Array{Any,1}, ::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::CSV.TransposedSource{Base.GenericIOBuffer{Array{UInt8,1}},Missing}, ::Type{DataFrame}) at /home/vagrant/.julia/v0.7/DataStreams/src/DataStreams.jl:481
   [7] (::getfield(DataStreams.Data, Symbol("#kw##stream!")))(::NamedTuple{(:append, :transforms),Tuple{Bool,Dict{Int64,Function}}}, ::typeof(DataStreams.Data.stream!), ::CSV.TransposedSource{Base.GenericIOBuffer{Array{UInt8,1}},Missing}, ::Type{DataFrame}) at ./<missing>:0
   [8] #read#43(::Bool, ::Dict{Int64,Function}, ::Bool, ::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::String, ::Type) at /home/vagrant/.julia/v0.7/CSV/src/Source.jl:339
   [9] #read at ./<missing>:0 [inlined] (repeats 2 times)
   [10] macro expansion at /home/vagrant/.julia/v0.7/CSV/test/source.jl:457 [inlined]
   [11] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v0.7/Test/src/Test.jl:1079 [inlined]
   [12] top-level scope at /home/vagrant/.julia/v0.7/CSV/test/source.jl:457
   [13] include at ./boot.jl:314 [inlined]
   [14] include_relative(::Module, ::String) at ./loading.jl:1067
   [15] include(::Module, ::String) at ./sysimg.jl:29
   [16] include(::String) at ./sysimg.jl:68
   [17] macro expansion at /home/vagrant/.julia/v0.7/CSV/test/runtests.jl:24 [inlined]
   [18] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v0.7/Test/src/Test.jl:1079 [inlined]
   [19] top-level scope at /home/vagrant/.julia/v0.7/CSV/test/runtests.jl:21
   [20] include at ./boot.jl:314 [inlined]
   [21] include_relative(::Module, ::String) at ./loading.jl:1067
   [22] include(::Module, ::String) at ./sysimg.jl:29
   [23] exec_options(::Base.JLOptions) at ./client.jl:327
   [24] _start() at ./client.jl:457
┌ Warning: Deprecated syntax `implicit assignment to global variable `io``.
│ Use `global io` instead.
└ @ nothing none:0
┌ Warning: `nb_available` is deprecated, use `bytesavailable` instead.
│   caller = #Source#24(::Base.GenericIOBuffer{SubArray{UInt8,1,Array{UInt8,1},Tuple{UnitRange{Int64}},true}}, ::CSV.Options{Nothing}, ::Int64, ::Int64, ::Array{Type,1}, ::Symbol, ::Nothing, ::Bool, ::Bool, ::Int64, ::Int64, ::Int64, ::Bool, ::Type) at Source.jl:76
└ @ CSV Source.jl:76
Write to IOBuffer: Error During Test at /home/vagrant/.julia/v0.7/CSV/test/sink.jl:1
  Got exception UndefVarError(:Inference) outside of a @test
  UndefVarError: Inference not defined
  Stacktrace:
   [1] getproperty at ./sysimg.jl:13 [inlined]
   [2] (::getfield(DataStreams.Data, Symbol("##8#11")){Tuple{Union,Union,Union},Tuple{typeof(identity),typeof(identity),typeof(identity)}})(::Int64) at ./<missing>:0
   [3] next at ./generator.jl:47 [inlined]
   [4] append_any(::Base.Generator{UnitRange{Int64},getfield(DataStreams.Data, Symbol("##8#11")){Tuple{Union,Union,Union},Tuple{typeof(identity),typeof(identity),typeof(identity)}}}, ::Vararg{Base.Generator{UnitRange{Int64},getfield(DataStreams.Data, Symbol("##8#11")){Tuple{Union,Union,Union},Tuple{typeof(identity),typeof(identity),typeof(identity)}}},N} where N) at ./essentials.jl:388
   [5] transform(::DataStreams.Data.Schema{true,Tuple{Union{Missing, Int64},Union{Missing, Int64},Union{Missing, Int64}}}, ::Dict{Int64,Function}, ::Bool) at /home/vagrant/.julia/v0.7/DataStreams/src/DataStreams.jl:94
   [6] #stream!#17(::Bool, ::Dict{Int64,Function}, ::Function, ::Array{Any,1}, ::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::CSV.Source{Base.GenericIOBuffer{Array{UInt8,1}},Nothing}, ::Type{DataFrame}) at /home/vagrant/.julia/v0.7/DataStreams/src/DataStreams.jl:481
   [7] (::getfield(DataStreams.Data, Symbol("#kw##stream!")))(::NamedTuple{(:append, :transforms),Tuple{Bool,Dict{Int64,Function}}}, ::typeof(DataStreams.Data.stream!), ::CSV.Source{Base.GenericIOBuffer{Array{UInt8,1}},Nothing}, ::Type{DataFrame}) at ./<missing>:0
   [8] #read#43(::Bool, ::Dict{Int64,Function}, ::Bool, ::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::Base.GenericIOBuffer{SubArray{UInt8,1,Array{UInt8,1},Tuple{UnitRange{Int64}},true}}, ::Type) at /home/vagrant/.julia/v0.7/CSV/src/Source.jl:339
   [9] read at /home/vagrant/.julia/v0.7/CSV/src/Source.jl:338 [inlined] (repeats 2 times)
   [10] macro expansion at /home/vagrant/.julia/v0.7/CSV/test/sink.jl:3 [inlined]
   [11] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v0.7/Test/src/Test.jl:1079 [inlined]
   [12] top-level scope at /home/vagrant/.julia/v0.7/CSV/test/sink.jl:2
   [13] include at ./boot.jl:314 [inlined]
   [14] include_relative(::Module, ::String) at ./loading.jl:1067
   [15] include(::Module, ::String) at ./sysimg.jl:29
   [16] include(::String) at ./sysimg.jl:68
   [17] macro expansion at /home/vagrant/.julia/v0.7/CSV/test/runtests.jl:25 [inlined]
   [18] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v0.7/Test/src/Test.jl:1079 [inlined]
   [19] top-level scope at /home/vagrant/.julia/v0.7/CSV/test/runtests.jl:21
   [20] include at ./boot.jl:314 [inlined]
   [21] include_relative(::Module, ::String) at ./loading.jl:1067
   [22] include(::Module, ::String) at ./sysimg.jl:29
   [23] exec_options(::Base.JLOptions) at ./client.jl:327
   [24] _start() at ./client.jl:457
┌ Warning: `nb_available` is deprecated, use `bytesavailable` instead.
│   caller = nb_available(::MultiStream{Base.GenericIOBuffer{Array{UInt8,1}}}) at multistream.jl:40
└ @ Main multistream.jl:40
WARNING: Base.uninitialized is deprecated, use undef instead.
  likely near /home/vagrant/.julia/v0.7/CSV/test/multistream.jl:48
WARNING: Base.uninitialized is deprecated, use undef instead.
  likely near /home/vagrant/.julia/v0.7/CSV/test/multistream.jl:48
WARNING: Base.uninitialized is deprecated, use undef instead.
  likely near /home/vagrant/.julia/v0.7/CSV/test/multistream.jl:48
┌ Warning: `nb_available` is deprecated, use `bytesavailable` instead.
│   caller = #Source#24(::MultiStream{Base.GenericIOBuffer{Array{UInt8,1}}}, ::CSV.Options{Nothing}, ::Int64, ::Int64, ::Array{Type,1}, ::Symbol, ::Nothing, ::Bool, ::Bool, ::Int64, ::Int64, ::Int64, ::Bool, ::Type) at Source.jl:76
└ @ CSV Source.jl:76
CSV: Error During Test at /home/vagrant/.julia/v0.7/CSV/test/multistream.jl:48
  Test threw exception UndefVarError(:Inference)
  Expression: CSV.read(stream) == CSV.read(IOBuffer("a,b,c\n1,2,3\n4,5,6"))
  UndefVarError: Inference not defined
  Stacktrace:
   [1] getproperty at ./sysimg.jl:13 [inlined]
   [2] (::getfield(DataStreams.Data, Symbol("##8#11")){Tuple{Union,Union,Union},Tuple{typeof(identity),typeof(identity),typeof(identity)}})(::Int64) at ./<missing>:0
   [3] next at ./generator.jl:47 [inlined]
   [4] append_any(::Base.Generator{UnitRange{Int64},getfield(DataStreams.Data, Symbol("##8#11")){Tuple{Union,Union,Union},Tuple{typeof(identity),typeof(identity),typeof(identity)}}}, ::Vararg{Base.Generator{UnitRange{Int64},getfield(DataStreams.Data, Symbol("##8#11")){Tuple{Union,Union,Union},Tuple{typeof(identity),typeof(identity),typeof(identity)}}},N} where N) at ./essentials.jl:388
   [5] transform(::DataStreams.Data.Schema{true,Tuple{Union{Missing, Int64},Union{Missing, Int64},Union{Missing, Int64}}}, ::Dict{Int64,Function}, ::Bool) at /home/vagrant/.julia/v0.7/DataStreams/src/DataStreams.jl:94
   [6] #stream!#17(::Bool, ::Dict{Int64,Function}, ::Function, ::Array{Any,1}, ::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::CSV.Source{Base.GenericIOBuffer{Array{UInt8,1}},Nothing}, ::Type{DataFrame}) at /home/vagrant/.julia/v0.7/DataStreams/src/DataStreams.jl:481
   [7] (::getfield(DataStreams.Data, Symbol("#kw##stream!")))(::NamedTuple{(:append, :transforms),Tuple{Bool,Dict{Int64,Function}}}, ::typeof(DataStreams.Data.stream!), ::CSV.Source{Base.GenericIOBuffer{Array{UInt8,1}},Nothing}, ::Type{DataFrame}) at ./<missing>:0
   [8] #read#43(::Bool, ::Dict{Int64,Function}, ::Bool, ::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::MultiStream{Base.GenericIOBuffer{Array{UInt8,1}}}, ::Type) at /home/vagrant/.julia/v0.7/CSV/src/Source.jl:339
   [9] read at /home/vagrant/.julia/v0.7/CSV/src/Source.jl:338 [inlined] (repeats 2 times)
   [10] top-level scope
   [11] include at ./boot.jl:314 [inlined]
   [12] include_relative(::Module, ::String) at ./loading.jl:1067
   [13] include(::Module, ::String) at ./sysimg.jl:29
   [14] include(::String) at ./sysimg.jl:68
   [15] macro expansion at /home/vagrant/.julia/v0.7/CSV/test/runtests.jl:26 [inlined]
   [16] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v0.7/Test/src/Test.jl:1079 [inlined]
   [17] top-level scope at /home/vagrant/.julia/v0.7/CSV/test/runtests.jl:21
┌ Warning: `nb_available` is deprecated, use `bytesavailable` instead.
│   caller = #Source#24(::Base.GenericIOBuffer{Array{UInt8,1}}, ::CSV.Options{Nothing}, ::Int64, ::Int64, ::Array{Type,1}, ::Symbol, ::Nothing, ::Bool, ::Bool, ::Int64, ::Int64, ::Int64, ::Bool, ::Type) at Source.jl:72
└ @ CSV Source.jl:72
Test Summary:                  | Pass  Error  Total
CSV                            |  486      6    492
  Int                          |   30            30
  Int Custom IO                |   26            26
  Float64 Custom IO            |   43            43
  Float64                      |   57            57
  DecFP Custom IO              |   43            43
  DecFP                        |   40            40
  WeakRefString                |   29            29
  String Custom IO             |   30            30
  Date                         |   19            19
  Date Custom IO               |   17            17
  DateTime                     |   18            18
  DateTime Custom IO           |   18            18
  Char                         |   27            27
  Bool                         |   23            23
  All types                    |   19            19
  empty fields                 |    1             1
  misformatted CSV lines       |    4             4
  Basic CSV.Source             |    8      1      9
  CSV.Source keyword arguments |   11      1     12
  CSV.Source various files     |    4      1      5
  CSV.TransposedSource         |           1      1
  Write to IOBuffer            |           1      1
ERROR: LoadError: Some tests did not pass: 486 passed, 0 failed, 6 errored, 0 broken.
in expression starting at /home/vagrant/.julia/v0.7/CSV/test/runtests.jl:19
┌ Error: ------------------------------------------------------------
│ # Testing failed for CSV
│   exception =
│    failed process: Process(`/home/vagrant/julia/bin/julia -Cnative -J/home/vagrant/julia/lib/julia/sys.so --compile=yes --depwarn=yes --code-coverage=none --color=no --compiled-modules=yes --check-bounds=yes --warn-overwrite=yes --startup-file=yes /home/vagrant/.julia/v0.7/CSV/test/runtests.jl`, ProcessExited(1)) [1]
│    Stacktrace:
│     [1] error(::String, ::Base.Process, ::String, ::Int64, ::String) at ./error.jl:42
│     [2] pipeline_error(::Base.Process) at ./process.jl:712
│     [3] #run#539(::Bool, ::Function, ::Cmd) at ./process.jl:670
│     [4] run at ./process.jl:668 [inlined]
│     [5] (::getfield(Pkg.Entry, Symbol("##56#57")){Bool,String,Array{AbstractString,1}})() at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v0.7/Pkg/src/entry.jl:729
│     [6] cd(::getfield(Pkg.Entry, Symbol("##56#57")){Bool,String,Array{AbstractString,1}}, ::String) at ./file.jl:72
│     [7] #test!#55(::Bool, ::Function, ::String, ::Array{AbstractString,1}, ::Array{AbstractString,1}, ::Array{AbstractString,1}) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v0.7/Pkg/src/entry.jl:717
│     [8] (::getfield(Pkg.Entry, Symbol("#kw##test!")))(::NamedTuple{(:coverage,),Tuple{Bool}}, ::typeof(Pkg.Entry.test!), ::String, ::Array{AbstractString,1}, ::Array{AbstractString,1}, ::Array{AbstractString,1}) at ./<missing>:0
│     [9] #test#59(::Bool, ::Function, ::Array{AbstractString,1}) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v0.7/Pkg/src/entry.jl:756
│     [10] #test at ./<missing>:0 [inlined]
│     [11] #4 at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v0.7/Pkg/src/dir.jl:36 [inlined]
│     [12] cd(::getfield(Pkg.Dir, Symbol("##4#7")){Base.Iterators.Pairs{Symbol,Bool,Tuple{Symbol},NamedTuple{(:coverage,),Tuple{Bool}}},typeof(Pkg.Entry.test),Tuple{Array{AbstractString,1}}}, ::String) at ./file.jl:72
│     [13] #cd#1(::Base.Iterators.Pairs{Symbol,Bool,Tuple{Symbol},NamedTuple{(:coverage,),Tuple{Bool}}}, ::Function, ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N} where N) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v0.7/Pkg/src/dir.jl:36
│     [14] (::getfield(Pkg.Dir, Symbol("#kw##cd")))(::NamedTuple{(:coverage,),Tuple{Bool}}, ::typeof(Pkg.Dir.cd), ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N} where N) at ./<missing>:0
│     [15] #test#3(::Bool, ::Function, ::String, ::Vararg{String,N} where N) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v0.7/Pkg/src/Pkg.jl:278
│     [16] test(::String, ::Vararg{String,N} where N) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v0.7/Pkg/src/Pkg.jl:278
│     [17] top-level scope
│     [18] eval at ./boot.jl:317 [inlined]
│     [19] eval(::Module, ::Expr) at ./sysimg.jl:74
│     [20] exec_options(::Base.JLOptions) at ./client.jl:304
│     [21] _start() at ./client.jl:457
└ @ Pkg.Entry entry.jl:732
[ Info: Removing DecFP v0.4.3
ERROR: CSV had test errors

>>> End of log
