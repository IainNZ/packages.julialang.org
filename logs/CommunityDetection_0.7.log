>>> 'Pkg.add("CommunityDetection")' log
WARNING: Base.Pkg is deprecated, run `using Pkg` instead.
 in module Main
[ Info: Cloning cache of CommunityDetection from https://github.com/JuliaGraphs/CommunityDetection.jl.git
[ Info: Installing BinDeps v0.8.6
[ Info: Installing Clustering v0.9.1
[ Info: Installing CodecZlib v0.4.2
[ Info: Installing CommunityDetection v0.0.1
[ Info: Installing DataStructures v0.7.4
[ Info: Installing Distances v0.5.0
[ Info: Installing LightGraphs v0.11.1
[ Info: Installing MacroTools v0.4.0
[ Info: Installing NearestNeighbors v0.3.0
[ Info: Installing SHA v0.5.6
[ Info: Installing SimpleTraits v0.5.1
[ Info: Installing SortingAlgorithms v0.2.0
[ Info: Installing SpecialFunctions v0.3.8
[ Info: Installing StaticArrays v0.6.6
[ Info: Installing StatsBase v0.19.5
[ Info: Installing TranscodingStreams v0.4.1
[ Info: Installing URIParser v0.3.0
[ Info: Building SpecialFunctions
┌ Warning: `isalnum(c::Char)` is deprecated, use `isalpha(c) || isnumeric(c)` instead.
│   caller = is_userinfo_char at parser.jl:4 [inlined]
└ @ Core parser.jl:4
┌ Warning: `isalnum(c::Char)` is deprecated, use `isalpha(c) || isnumeric(c)` instead.
│   caller = is_host_char at parser.jl:8 [inlined]
└ @ Core parser.jl:8
┌ Warning: `isalnum(c::Char)` is deprecated, use `isalpha(c) || isnumeric(c)` instead.
│   caller = is_host_char at parser.jl:8 [inlined]
└ @ Core parser.jl:8
WARNING: importing deprecated binding Base.Associative into BinDeps.
WARNING: Base.Associative is deprecated, use AbstractDict instead.
  likely near /home/vagrant/.julia/v0.7/SpecialFunctions/deps/binaries.jl:44
in @install at /home/vagrant/.julia/v0.7/BinDeps/src/dependencies.jl
[ Info: Package database updated
┌ Info: METADATA is out-of-date — you may not have the latest version of CommunityDetection
└ Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("CommunityDetection")' log
WARNING: Base.versioninfo is deprecated: it has been moved to the standard library package `InteractiveUtils`.
Add a `using InteractiveUtils` to your imports..
 in module Main
WARNING: Base.versioninfo is deprecated: it has been moved to the standard library package `InteractiveUtils`.
Add a `using InteractiveUtils` to your imports..
 in module Main
Julia Version 0.7.0-DEV.3664
Commit 9d5aebb07a (2018-01-30 22:46 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
      Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-135-generic #184-Ubuntu SMP Wed Oct 18 11:55:51 UTC 2017 x86_64 x86_64
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
              speed         user         nice          sys         idle          irq
       #1  3499 MHz    2196272 s       7073 s     117771 s     803976 s         28 s
       #2  3499 MHz     688958 s         41 s      54844 s    2825983 s          0 s
       
  Memory: 2.93927001953125 GB (851.87890625 MB free)
  Uptime: 36495.0 sec
  Load Avg:  1.01953125  1.0146484375  1.0078125
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant
Packages:
  Package Directory: /home/vagrant/.julia/v0.7
  Package Status:
2 required packages:
 - CommunityDetection            0.0.1
 - JSON                          0.16.4
18 additional packages:
 - BinDeps                       0.8.6
 - Clustering                    0.9.1
 - CodecZlib                     0.4.2
 - Compat                        0.49.0
 - DataStructures                0.7.4
 - Distances                     0.5.0
 - LightGraphs                   0.11.1
 - MacroTools                    0.4.0
 - NearestNeighbors              0.3.0
 - Nullables                     0.0.3
 - SHA                           0.5.6
 - SimpleTraits                  0.5.1
 - SortingAlgorithms             0.2.0
 - SpecialFunctions              0.3.8
 - StaticArrays                  0.6.6
 - StatsBase                     0.19.5
 - TranscodingStreams            0.4.1
 - URIParser                     0.3.0
WARNING: Base.Pkg is deprecated, run `using Pkg` instead.
 in module Main
[ Info: Testing CommunityDetection
WARNING: Base.Test is deprecated, run `using Test` instead.
  likely near /home/vagrant/.julia/v0.7/CommunityDetection/test/runtests.jl:3
WARNING: importing deprecated binding Base.eigs into CommunityDetection.
WARNING: Base.eigs is deprecated: it has been moved to the standard library package `IterativeEigensolvers`.
Add a `using IterativeEigensolvers` to your imports..
  likely near /home/vagrant/.julia/v0.7/CommunityDetection/test/runtests.jl:35
WARNING: Base.eigs is deprecated: it has been moved to the standard library package `IterativeEigensolvers`.
Add a `using IterativeEigensolvers` to your imports..
  likely near /home/vagrant/.julia/v0.7/CommunityDetection/test/runtests.jl:35
WARNING: importing deprecated binding Base.Complex64 into CommunityDetection.
WARNING: Base.Complex64 is deprecated, use ComplexF32 instead.
  likely near /home/vagrant/.julia/v0.7/CommunityDetection/test/runtests.jl:35
WARNING: Base.eigs is deprecated: it has been moved to the standard library package `IterativeEigensolvers`.
Add a `using IterativeEigensolvers` to your imports..
  likely near /home/vagrant/.julia/v0.7/CommunityDetection/test/runtests.jl:35
WARNING: Base.eigs is deprecated: it has been moved to the standard library package `IterativeEigensolvers`.
Add a `using IterativeEigensolvers` to your imports..
  likely near /home/vagrant/.julia/v0.7/CommunityDetection/test/runtests.jl:35
WARNING: Base.eigs is deprecated: it has been moved to the standard library package `IterativeEigensolvers`.
Add a `using IterativeEigensolvers` to your imports..
  likely near /home/vagrant/.julia/v0.7/CommunityDetection/test/runtests.jl:35
WARNING: Base.Complex64 is deprecated, use ComplexF32 instead.
  likely near /home/vagrant/.julia/v0.7/CommunityDetection/test/runtests.jl:35
WARNING: Base.Complex64 is deprecated, use ComplexF32 instead.
  likely near /home/vagrant/.julia/v0.7/CommunityDetection/test/runtests.jl:35
WARNING: Base.eigs is deprecated: it has been moved to the standard library package `IterativeEigensolvers`.
Add a `using IterativeEigensolvers` to your imports..
  likely near /home/vagrant/.julia/v0.7/CommunityDetection/test/runtests.jl:35
in nonbacktrack_embedding at /home/vagrant/.julia/v0.7/CommunityDetection/src/CommunityDetection.jl
ERROR: LoadError: MethodError: no method matching mul!(::SubArray{Float64,1,Array{Float64,1},Tuple{UnitRange{Int64}},true}, ::Nonbacktracking{LightGraphs.SimpleGraphs.SimpleGraph{Int64}}, ::SubArray{Float64,1,Array{Float64,1},Tuple{UnitRange{Int64}},true})
Closest candidates are:
  mul!(::AbstractArray, !Matched::Number, ::AbstractArray) at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/LinearAlgebra/src/generic.jl:42
  mul!(::Union{DenseArray{T<:Union{Complex{Float32}, Complex{Float64}, Float32, Float64},1}, Base.ReinterpretArray{T<:Union{Complex{Float32}, Complex{Float64}, Float32, Float64},1,S,A} where S, Base.ReshapedArray{T<:Union{Complex{Float32}, Complex{Float64}, Float32, Float64},1,A,MI} where MI<:Tuple{Vararg{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},N} where N} where A<:Union{SubArray{T,N,P,I,true} where I<:Tuple{Union{Base.Slice, UnitRange},Vararg{Any,N} where N} where P where N where T, DenseArray}, SubArray{T<:Union{Complex{Float32}, Complex{Float64}, Float32, Float64},1,A,I,L} where L} where I<:Tuple{Vararg{Union{Int64, AbstractRange{Int64}, Base.AbstractCartesianIndex},N} where N} where A<:Union{Base.ReshapedArray{T,N,A,MI} where MI<:Tuple{Vararg{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},N} where N} where A<:Union{SubArray{T,N,P,I,true} where I<:Tuple{Union{Base.Slice, UnitRange},Vararg{Any,N} where N} where P where N where T, DenseArray} where N where T, DenseArray}, !Matched::Union{Union{DenseArray{T<:Union{Complex{Float32}, Complex{Float64}, Float32, Float64},1}, Base.ReinterpretArray{T<:Union{Complex{Float32}, Complex{Float64}, Float32, Float64},1,S,A} where S, Base.ReshapedArray{T<:Union{Complex{Float32}, Complex{Float64}, Float32, Float64},1,A,MI} where MI<:Tuple{Vararg{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},N} where N} where A<:Union{SubArray{T,N,P,I,true} where I<:Tuple{Union{Base.Slice, UnitRange},Vararg{Any,N} where N} where P where N where T, DenseArray}, SubArray{T<:Union{Complex{Float32}, Complex{Float64}, Float32, Float64},1,A,I,L} where L} where I<:Tuple{Vararg{Union{Int64, AbstractRange{Int64}, Base.AbstractCartesianIndex},N} where N} where A<:Union{Base.ReshapedArray{T,N,A,MI} where MI<:Tuple{Vararg{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},N} where N} where A<:Union{SubArray{T,N,P,I,true} where I<:Tuple{Union{Base.Slice, UnitRange},Vararg{Any,N} where N} where P where N where T, DenseArray} where N where T, DenseArray}, Union{DenseArray{T<:Union{Complex{Float32}, Complex{Float64}, Float32, Float64},2}, Base.ReinterpretArray{T<:Union{Complex{Float32}, Complex{Float64}, Float32, Float64},2,S,A} where S, Base.ReshapedArray{T<:Union{Complex{Float32}, Complex{Float64}, Float32, Float64},2,A,MI} where MI<:Tuple{Vararg{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},N} where N} where A<:Union{SubArray{T,N,P,I,true} where I<:Tuple{Union{Base.Slice, UnitRange},Vararg{Any,N} where N} where P where N where T, DenseArray}, SubArray{T<:Union{Complex{Float32}, Complex{Float64}, Float32, Float64},2,A,I,L} where L} where I<:Tuple{Vararg{Union{Int64, AbstractRange{Int64}, Base.AbstractCartesianIndex},N} where N} where A<:Union{Base.ReshapedArray{T,N,A,MI} where MI<:Tuple{Vararg{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},N} where N} where A<:Union{SubArray{T,N,P,I,true} where I<:Tuple{Union{Base.Slice, UnitRange},Vararg{Any,N} where N} where P where N where T, DenseArray} where N where T, DenseArray}}, ::Union{DenseArray{T<:Union{Complex{Float32}, Complex{Float64}, Float32, Float64},1}, Base.ReinterpretArray{T<:Union{Complex{Float32}, Complex{Float64}, Float32, Float64},1,S,A} where S, Base.ReshapedArray{T<:Union{Complex{Float32}, Complex{Float64}, Float32, Float64},1,A,MI} where MI<:Tuple{Vararg{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},N} where N} where A<:Union{SubArray{T,N,P,I,true} where I<:Tuple{Union{Base.Slice, UnitRange},Vararg{Any,N} where N} where P where N where T, DenseArray}, SubArray{T<:Union{Complex{Float32}, Complex{Float64}, Float32, Float64},1,A,I,L} where L} where I<:Tuple{Vararg{Union{Int64, AbstractRange{Int64}, Base.AbstractCartesianIndex},N} where N} where A<:Union{Base.ReshapedArray{T,N,A,MI} where MI<:Tuple{Vararg{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},N} where N} where A<:Union{SubArray{T,N,P,I,true} where I<:Tuple{Union{Base.Slice, UnitRange},Vararg{Any,N} where N} where P where N where T, DenseArray} where N where T, DenseArray}) where T<:Union{Complex{Float32}, Complex{Float64}, Float32, Float64} at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/LinearAlgebra/src/matmul.jl:62
  mul!(::Union{DenseArray{T<:Union{Complex{Float32}, Complex{Float64}, Float32, Float64},1}, Base.ReinterpretArray{T<:Union{Complex{Float32}, Complex{Float64}, Float32, Float64},1,S,A} where S, Base.ReshapedArray{T<:Union{Complex{Float32}, Complex{Float64}, Float32, Float64},1,A,MI} where MI<:Tuple{Vararg{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},N} where N} where A<:Union{SubArray{T,N,P,I,true} where I<:Tuple{Union{Base.Slice, UnitRange},Vararg{Any,N} where N} where P where N where T, DenseArray}, SubArray{T<:Union{Complex{Float32}, Complex{Float64}, Float32, Float64},1,A,I,L} where L} where I<:Tuple{Vararg{Union{Int64, AbstractRange{Int64}, Base.AbstractCartesianIndex},N} where N} where A<:Union{Base.ReshapedArray{T,N,A,MI} where MI<:Tuple{Vararg{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},N} where N} where A<:Union{SubArray{T,N,P,I,true} where I<:Tuple{Union{Base.Slice, UnitRange},Vararg{Any,N} where N} where P where N where T, DenseArray} where N where T, DenseArray}, !Matched::LinearAlgebra.Transpose{#s548,#s547} where #s547<:Union{Union{DenseArray{T<:Union{Complex{Float32}, Complex{Float64}, Float32, Float64},1}, Base.ReinterpretArray{T<:Union{Complex{Float32}, Complex{Float64}, Float32, Float64},1,S,A} where S, Base.ReshapedArray{T<:Union{Complex{Float32}, Complex{Float64}, Float32, Float64},1,A,MI} where MI<:Tuple{Vararg{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},N} where N} where A<:Union{SubArray{T,N,P,I,true} where I<:Tuple{Union{Base.Slice, UnitRange},Vararg{Any,N} where N} where P where N where T, DenseArray}, SubArray{T<:Union{Complex{Float32}, Complex{Float64}, Float32, Float64},1,A,I,L} where L} where I<:Tuple{Vararg{Union{Int64, AbstractRange{Int64}, Base.AbstractCartesianIndex},N} where N} where A<:Union{Base.ReshapedArray{T,N,A,MI} where MI<:Tuple{Vararg{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},N} where N} where A<:Union{SubArray{T,N,P,I,true} where I<:Tuple{Union{Base.Slice, UnitRange},Vararg{Any,N} where N} where P where N where T, DenseArray} where N where T, DenseArray}, Union{DenseArray{T<:Union{Complex{Float32}, Complex{Float64}, Float32, Float64},2}, Base.ReinterpretArray{T<:Union{Complex{Float32}, Complex{Float64}, Float32, Float64},2,S,A} where S, Base.ReshapedArray{T<:Union{Complex{Float32}, Complex{Float64}, Float32, Float64},2,A,MI} where MI<:Tuple{Vararg{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},N} where N} where A<:Union{SubArray{T,N,P,I,true} where I<:Tuple{Union{Base.Slice, UnitRange},Vararg{Any,N} where N} where P where N where T, DenseArray}, SubArray{T<:Union{Complex{Float32}, Complex{Float64}, Float32, Float64},2,A,I,L} where L} where I<:Tuple{Vararg{Union{Int64, AbstractRange{Int64}, Base.AbstractCartesianIndex},N} where N} where A<:Union{Base.ReshapedArray{T,N,A,MI} where MI<:Tuple{Vararg{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},N} where N} where A<:Union{SubArray{T,N,P,I,true} where I<:Tuple{Union{Base.Slice, UnitRange},Vararg{Any,N} where N} where P where N where T, DenseArray} where N where T, DenseArray}} where #s548, ::Union{DenseArray{T<:Union{Complex{Float32}, Complex{Float64}, Float32, Float64},1}, Base.ReinterpretArray{T<:Union{Complex{Float32}, Complex{Float64}, Float32, Float64},1,S,A} where S, Base.ReshapedArray{T<:Union{Complex{Float32}, Complex{Float64}, Float32, Float64},1,A,MI} where MI<:Tuple{Vararg{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},N} where N} where A<:Union{SubArray{T,N,P,I,true} where I<:Tuple{Union{Base.Slice, UnitRange},Vararg{Any,N} where N} where P where N where T, DenseArray}, SubArray{T<:Union{Complex{Float32}, Complex{Float64}, Float32, Float64},1,A,I,L} where L} where I<:Tuple{Vararg{Union{Int64, AbstractRange{Int64}, Base.AbstractCartesianIndex},N} where N} where A<:Union{Base.ReshapedArray{T,N,A,MI} where MI<:Tuple{Vararg{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},N} where N} where A<:Union{SubArray{T,N,P,I,true} where I<:Tuple{Union{Base.Slice, UnitRange},Vararg{Any,N} where N} where P where N where T, DenseArray} where N where T, DenseArray}) where T<:Union{Complex{Float32}, Complex{Float64}, Float32, Float64} at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/LinearAlgebra/src/matmul.jl:85
  ...
Stacktrace:
 [1] (::getfield(IterativeEigensolvers, Symbol("#matvecA!#20")){Nonbacktracking{LightGraphs.SimpleGraphs.SimpleGraph{Int64}}})(::SubArray{Float64,1,Array{Float64,1},Tuple{UnitRange{Int64}},true}, ::SubArray{Float64,1,Array{Float64,1},Tuple{UnitRange{Int64}},true}) at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/IterativeEigensolvers/src/IterativeEigensolvers.jl:158
 [2] aupd_wrapper(::Type, ::getfield(IterativeEigensolvers, Symbol("#matvecA!#20")){Nonbacktracking{LightGraphs.SimpleGraphs.SimpleGraph{Int64}}}, ::getfield(IterativeEigensolvers, Symbol("##10#21")), ::getfield(IterativeEigensolvers, Symbol("##11#22")), ::Int64, ::Bool, ::Bool, ::String, ::Int64, ::Int64, ::String, ::Float64, ::Int64, ::Int64, ::Array{Float64,1}) at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/IterativeEigensolvers/src/arpack.jl:58
 [3] #_eigs#9(::Int64, ::Int64, ::Symbol, ::Float64, ::Int64, ::Nothing, ::Array{Float64,1}, ::Bool, ::typeof(IterativeEigensolvers._eigs), ::Nonbacktracking{LightGraphs.SimpleGraphs.SimpleGraph{Int64}}, ::LinearAlgebra.UniformScaling{Bool}) at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/IterativeEigensolvers/src/IterativeEigensolvers.jl:183
 [4] (::getfield(IterativeEigensolvers, Symbol("#kw##_eigs")))(::NamedTuple{(:nev, :v0),Tuple{Int64,Array{Float64,1}}}, ::typeof(IterativeEigensolvers._eigs), ::Nonbacktracking{LightGraphs.SimpleGraphs.SimpleGraph{Int64}}, ::LinearAlgebra.UniformScaling{Bool}) at ./<missing>:0
 [5] #eigs#8(::Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:nev, :v0),Tuple{Int64,Array{Float64,1}}}}, ::Function, ::Nonbacktracking{LightGraphs.SimpleGraphs.SimpleGraph{Int64}}, ::LinearAlgebra.UniformScaling{Bool}) at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/IterativeEigensolvers/src/IterativeEigensolvers.jl:68
 [6] (::getfield(IterativeEigensolvers, Symbol("#kw##eigs")))(::NamedTuple{(:nev, :v0),Tuple{Int64,Array{Float64,1}}}, ::typeof(IterativeEigensolvers.eigs), ::Nonbacktracking{LightGraphs.SimpleGraphs.SimpleGraph{Int64}}, ::LinearAlgebra.UniformScaling{Bool}) at ./<missing>:0
 [7] #eigs#1(::Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:nev, :v0),Tuple{Int64,Array{Float64,1}}}}, ::Function, ::Nonbacktracking{LightGraphs.SimpleGraphs.SimpleGraph{Int64}}) at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/IterativeEigensolvers/src/IterativeEigensolvers.jl:47
 [8] #eigs at ./<missing>:0 [inlined]
 [9] nonbacktrack_embedding(::LightGraphs.SimpleGraphs.SimpleGraph{Int64}, ::Int64) at /home/vagrant/.julia/v0.7/CommunityDetection/src/CommunityDetection.jl:57
 [10] top-level scope
 [11] include at ./boot.jl:292 [inlined]
 [12] include_relative(::Module, ::String) at ./loading.jl:1012
 [13] include(::Module, ::String) at ./sysimg.jl:26
 [14] exec_options(::Base.JLOptions) at ./client.jl:332
 [15] _start() at ./client.jl:447
in expression starting at /home/vagrant/.julia/v0.7/CommunityDetection/test/runtests.jl:35
┌ Error: ------------------------------------------------------------
│ # Testing failed for CommunityDetection
│   exception =
│    failed process: Process(`/home/vagrant/julia/bin/julia -Cnative -J/home/vagrant/julia/lib/julia/sys.so --compile=yes --depwarn=yes --code-coverage=none --color=no --compiled-modules=yes --check-bounds=yes --warn-overwrite=yes --startup-file=yes /home/vagrant/.julia/v0.7/CommunityDetection/test/runtests.jl`, ProcessExited(1)) [1]
│    Stacktrace:
│     [1] error(::String, ::Base.Process, ::String, ::Int64, ::String) at ./error.jl:42
│     [2] pipeline_error(::Base.Process) at ./process.jl:698
│     [3] run(::Cmd) at ./process.jl:660
│     [4] (::getfield(Pkg.Entry, Symbol("##89#92")){Bool,String,Array{AbstractString,1}})() at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Pkg/src/entry.jl:731
│     [5] cd(::getfield(Pkg.Entry, Symbol("##89#92")){Bool,String,Array{AbstractString,1}}, ::String) at ./file.jl:70
│     [6] #test!#88(::Bool, ::Function, ::String, ::Array{AbstractString,1}, ::Array{AbstractString,1}, ::Array{AbstractString,1}) at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Pkg/src/entry.jl:719
│     [7] (::getfield(Pkg.Entry, Symbol("#kw##test!")))(::NamedTuple{(:coverage,),Tuple{Bool}}, ::typeof(Pkg.Entry.test!), ::String, ::Array{AbstractString,1}, ::Array{AbstractString,1}, ::Array{AbstractString,1}) at ./<missing>:0
│     [8] #test#96(::Bool, ::Function, ::Array{AbstractString,1}) at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Pkg/src/entry.jl:758
│     [9] (::getfield(Pkg.Entry, Symbol("#kw##test")))(::NamedTuple{(:coverage,),Tuple{Bool}}, ::typeof(Pkg.Entry.test), ::Array{AbstractString,1}) at ./<missing>:0
│     [10] (::getfield(Pkg.Dir, Symbol("##4#7")){Base.Iterators.IndexValue{Symbol,Bool,Tuple{Symbol},NamedTuple{(:coverage,),Tuple{Bool}}},typeof(Pkg.Entry.test),Tuple{Array{AbstractString,1}}})() at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Pkg/src/dir.jl:36
│     [11] cd(::getfield(Pkg.Dir, Symbol("##4#7")){Base.Iterators.IndexValue{Symbol,Bool,Tuple{Symbol},NamedTuple{(:coverage,),Tuple{Bool}}},typeof(Pkg.Entry.test),Tuple{Array{AbstractString,1}}}, ::String) at ./file.jl:70
│     [12] #cd#1(::Base.Iterators.IndexValue{Symbol,Bool,Tuple{Symbol},NamedTuple{(:coverage,),Tuple{Bool}}}, ::Function, ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N} where N) at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Pkg/src/dir.jl:36
│     [13] (::getfield(Pkg.Dir, Symbol("#kw##cd")))(::NamedTuple{(:coverage,),Tuple{Bool}}, ::typeof(Pkg.Dir.cd), ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N} where N) at ./<missing>:0
│     [14] #test#3(::Bool, ::Function, ::String, ::Vararg{String,N} where N) at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Pkg/src/Pkg.jl:275
│     [15] test(::String, ::Vararg{String,N} where N) at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Pkg/src/Pkg.jl:275
│     [16] top-level scope
│     [17] eval at ./boot.jl:295 [inlined]
│     [18] eval(::Module, ::Expr) at ./sysimg.jl:71
│     [19] exec_options(::Base.JLOptions) at ./client.jl:309
│     [20] _start() at ./client.jl:447
└ @ Pkg.Entry entry.jl:734
ERROR: CommunityDetection had test errors

>>> End of log
