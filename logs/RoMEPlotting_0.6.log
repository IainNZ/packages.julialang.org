>>> 'Pkg.add("RoMEPlotting")' log
INFO: Cloning cache of Fontconfig from https://github.com/JuliaGraphics/Fontconfig.jl.git
INFO: Cloning cache of KernelDensityEstimatePlotting from https://github.com/dehann/KernelDensityEstimatePlotting.jl.git
INFO: Cloning cache of RoMEPlotting from https://github.com/dehann/RoMEPlotting.jl.git
INFO: Installing AxisAlgorithms v0.2.0
INFO: Installing BinDeps v0.8.6
INFO: Installing Blosc v0.3.0
INFO: Installing Cairo v0.4.0
INFO: Installing Calculus v0.2.2
INFO: Installing ColorTypes v0.6.7
INFO: Installing Colors v0.8.2
INFO: Installing CommonSubexpressions v0.0.1
INFO: Installing Compose v0.5.4
INFO: Installing Contour v0.4.0
INFO: Installing CoordinateTransformations v0.4.1
INFO: Installing CoupledFields v0.0.1
INFO: Installing DataArrays v0.6.2
INFO: Installing DataFrames v0.10.1
INFO: Installing DataStructures v0.7.4
INFO: Installing DiffBase v0.3.2
INFO: Installing DiffResults v0.0.3
INFO: Installing DiffRules v0.0.3
INFO: Installing Distances v0.5.0
INFO: Installing Distributions v0.15.0
INFO: Installing DualNumbers v0.3.0
INFO: Installing FileIO v0.7.0
INFO: Installing FixedPointNumbers v0.4.6
INFO: Installing Fontconfig v0.1.1
INFO: Installing ForwardDiff v0.7.3
INFO: Installing GZip v0.3.0
INFO: Installing Gadfly v0.6.4
INFO: Installing Graphics v0.2.0
INFO: Installing Graphs v0.9.0
INFO: Installing HDF5 v0.8.8
INFO: Installing Hexagons v0.1.0
INFO: Installing IncrementalInference v0.3.0
INFO: Installing Interpolations v0.7.3
INFO: Installing IterTools v0.2.1
INFO: Installing JLD v0.8.3
INFO: Installing Juno v0.4.0
INFO: Installing KernelDensity v0.4.1
INFO: Installing KernelDensityEstimate v0.3.0
INFO: Installing KernelDensityEstimatePlotting v0.0.1
INFO: Installing LegacyStrings v0.3.0
INFO: Installing LineSearches v3.2.5
INFO: Installing Loess v0.3.0
INFO: Installing MacroTools v0.4.0
INFO: Installing Measures v0.1.0
INFO: Installing Media v0.3.0
INFO: Installing NLSolversBase v3.1.0
INFO: Installing NLsolve v0.13.0
INFO: Installing NaNMath v0.3.1
INFO: Installing Optim v0.11.0
INFO: Installing PDMats v0.8.0
INFO: Installing Parameters v0.8.1
INFO: Installing PositiveFactorizations v0.1.0
INFO: Installing ProgressMeter v0.5.4
INFO: Installing QuadGK v0.2.0
INFO: Installing Ratios v0.2.0
INFO: Installing Reexport v0.1.0
INFO: Installing Rmath v0.3.2
INFO: Installing RoME v0.1.0
INFO: Installing RoMEPlotting v0.0.1
INFO: Installing Rotations v0.6.1
INFO: Installing SHA v0.5.6
INFO: Installing ShowItLikeYouBuildIt v0.2.0
INFO: Installing Showoff v0.1.1
INFO: Installing SortingAlgorithms v0.2.0
INFO: Installing SpecialFunctions v0.3.8
INFO: Installing StaticArrays v0.6.6
INFO: Installing StatsBase v0.19.5
INFO: Installing StatsFuns v0.5.0
INFO: Installing TransformUtils v0.1.0
INFO: Installing URIParser v0.3.0
INFO: Installing WoodburyMatrices v0.2.2
INFO: Building Blosc
INFO: Building Cairo
INFO: Building SpecialFunctions
INFO: Building Rmath
INFO: Building Fontconfig
INFO: Building HDF5
INFO: Package database updated

>>> 'Pkg.test("RoMEPlotting")' log
Julia Version 0.6.2
Commit d386e40c17 (2017-12-13 18:08 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-135-generic #184-Ubuntu SMP Wed Oct 18 11:55:51 UTC 2017 x86_64 x86_64
Memory: 2.93927001953125 GB (979.72265625 MB free)
Uptime: 39016.0 sec
Load Avg:  1.0234375  1.05078125  0.998046875
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz    2371647 s       1127 s     110939 s     843898 s         21 s
#2  3499 MHz     488243 s       6646 s      49776 s    3280719 s          1 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.6
2 required packages:
 - JSON                          0.16.4
 - RoMEPlotting                  0.0.1
72 additional packages:
 - AxisAlgorithms                0.2.0
 - BinDeps                       0.8.6
 - Blosc                         0.3.0
 - Cairo                         0.4.0
 - Calculus                      0.2.2
 - ColorTypes                    0.6.7
 - Colors                        0.8.2
 - CommonSubexpressions          0.0.1
 - Compat                        0.53.0
 - Compose                       0.5.4
 - Contour                       0.4.0
 - CoordinateTransformations     0.4.1
 - CoupledFields                 0.0.1
 - DataArrays                    0.6.2
 - DataFrames                    0.10.1
 - DataStructures                0.7.4
 - DiffBase                      0.3.2
 - DiffResults                   0.0.3
 - DiffRules                     0.0.3
 - Distances                     0.5.0
 - Distributions                 0.15.0
 - DualNumbers                   0.3.0
 - FileIO                        0.7.0
 - FixedPointNumbers             0.4.6
 - Fontconfig                    0.1.1
 - ForwardDiff                   0.7.3
 - GZip                          0.3.0
 - Gadfly                        0.6.4
 - Graphics                      0.2.0
 - Graphs                        0.9.0
 - HDF5                          0.8.8
 - Hexagons                      0.1.0
 - IncrementalInference          0.3.0
 - Interpolations                0.7.3
 - IterTools                     0.2.1
 - JLD                           0.8.3
 - Juno                          0.4.0
 - KernelDensity                 0.4.1
 - KernelDensityEstimate         0.3.0
 - KernelDensityEstimatePlotting 0.0.1
 - LegacyStrings                 0.3.0
 - LineSearches                  3.2.5
 - Loess                         0.3.0
 - MacroTools                    0.4.0
 - Measures                      0.1.0
 - Media                         0.3.0
 - NLSolversBase                 3.1.0
 - NLsolve                       0.13.0
 - NaNMath                       0.3.1
 - Nullables                     0.0.3
 - Optim                         0.11.0
 - PDMats                        0.8.0
 - Parameters                    0.8.1
 - PositiveFactorizations        0.1.0
 - ProgressMeter                 0.5.4
 - QuadGK                        0.2.0
 - Ratios                        0.2.0
 - Reexport                      0.1.0
 - Rmath                         0.3.2
 - RoME                          0.1.0
 - Rotations                     0.6.1
 - SHA                           0.5.6
 - ShowItLikeYouBuildIt          0.2.0
 - Showoff                       0.1.1
 - SortingAlgorithms             0.2.0
 - SpecialFunctions              0.3.8
 - StaticArrays                  0.6.6
 - StatsBase                     0.19.5
 - StatsFuns                     0.5.0
 - TransformUtils                0.1.0
 - URIParser                     0.3.0
 - WoodburyMatrices              0.2.2
INFO: Testing RoMEPlotting
WARNING: could not import Juno.Hiccup into Gadfly
WARNING: special characters "#{}()[]<>|&*?~;" should now be quoted in commands
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] warn_shell_special(::String) at ./shell.jl:8
 [3] #shell_parse#236(::String, ::Function, ::String, ::Bool) at ./shell.jl:103
 [4] (::Base.#kw##shell_parse)(::Array{Any,1}, ::Base.#shell_parse, ::String, ::Bool) at ./<missing>:0 (repeats 2 times)
 [5] @cmd(::ANY) at ./process.jl:796
 [6] include_from_node1(::String) at ./loading.jl:576
 [7] include(::String) at ./sysimg.jl:14
 [8] include_from_node1(::String) at ./loading.jl:576
 [9] eval(::Module, ::Any) at ./boot.jl:235
 [10] _require(::Symbol) at ./loading.jl:490
 [11] require(::Symbol) at ./loading.jl:405
 [12] include_from_node1(::String) at ./loading.jl:576
 [13] include(::String) at ./sysimg.jl:14
 [14] process_options(::Base.JLOptions) at ./client.jl:305
 [15] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/RoMEPlotting/src/SolverVisualization.jl, in expression starting on line 187
WARNING: special characters "#{}()[]<>|&*?~;" should now be quoted in commands
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] warn_shell_special(::String) at ./shell.jl:8
 [3] #shell_parse#236(::String, ::Function, ::String, ::Bool) at ./shell.jl:103
 [4] (::Base.#kw##shell_parse)(::Array{Any,1}, ::Base.#shell_parse, ::String, ::Bool) at ./<missing>:0 (repeats 2 times)
 [5] @cmd(::ANY) at ./process.jl:796
 [6] include_from_node1(::String) at ./loading.jl:576
 [7] include(::String) at ./sysimg.jl:14
 [8] include_from_node1(::String) at ./loading.jl:576
 [9] eval(::Module, ::Any) at ./boot.jl:235
 [10] _require(::Symbol) at ./loading.jl:490
 [11] require(::Symbol) at ./loading.jl:405
 [12] include_from_node1(::String) at ./loading.jl:576
 [13] include(::String) at ./sysimg.jl:14
 [14] process_options(::Base.JLOptions) at ./client.jl:305
 [15] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/RoMEPlotting/src/SolverVisualization.jl, in expression starting on line 665
[TEST] with local Graphs.jl dictionary and arrays only (multicore)...
WARNING: setDefaultNodeData! -- deprecated use of stdev.

Building Bayes net...
(vert.label, getData(vert).BayesNetVertID) = ("x3", 0)
(vert.label, getData(vert).BayesNetVertID) = ("x4", 0)
(vert.label, getData(vert).BayesNetVertID) = ("x0", 0)
(vert.label, getData(vert).BayesNetVertID) = ("x6", 0)
(vert.label, getData(vert).BayesNetVertID) = ("l1", 0)
(vert.label, getData(vert).BayesNetVertID) = ("x7", 0)
(vert.label, getData(vert).BayesNetVertID) = ("x2", 0)
(vert.label, getData(vert).BayesNetVertID) = ("x5", 0)

Eliminating 5
===============

adding marginal to
x.index = 3
x.index = 8
x.index = 10

Eliminating 8
===============

adding marginal to
x.index = 10
x.index = 13
x.index = 3

Eliminating 1
===============

adding marginal to
x.index = 3

Eliminating 15
===============

adding marginal to
x.index = 13
x.index = 17

Eliminating 10
===============

adding marginal to
x.index = 13
x.index = 3

Eliminating 17
===============

adding marginal to
x.index = 13

Eliminating 3
===============

adding marginal to
x.index = 13

Eliminating 13
===============

adding marginal to
Bayes Net
Bayes Tree
Find potential functions for each clique
Get potentials x7,x6,: x5,
Get potentials x0,: x2,
Get potentials x3,: x2,x4,l1,
Get potentials x5,x2,l1,x4,: 
(xx, ll) = ls(fg) = (Symbol[:x0, :x2, :x3, :x4, :x5, :x6, :x7], Symbol[:l1])
Do recursive inference over tree
Start Clique x5,x2,l1,x4,:  =============================
upMsgRec -- calling new recursive on x7,x6,: x5,
Start Clique x7,x6,: x5, =============================
====================== Clique x7,x6,: x5, =============================
up w 0 msgs---------- successive fnc approx ------------x7,x6,: x5,
#1	 -- 
fmcmc! -- finished on x7,x6,: x5,
---------- successive fnc approx ------------x7,x6,: x5,
#1	 -- [2x0p,d1,N100], [2x0p,d1,N100], [drct] 
#2	 -- [2x0p,d1,N100], [2x0p,d1,N100], [drct] 
#3	 -- [2x0p,d1,N100], [2x0p,d1,N100], [drct] 
fmcmc! -- finished on x7,x6,: x5,
Outgoing msg density on: updateFGBT! up -- finished updating x7,x6,: x5,
End Clique x7,x6,: x5, =============================
upMsgRec -- finished with x7,x6,: x5,, w [13])
upMsgRec -- calling new recursive on x0,: x2,
Start Clique x0,: x2, =============================
====================== Clique x0,: x2, =============================
up w 0 msgs---------- successive fnc approx ------------x0,: x2,
#1	 -- 
fmcmc! -- finished on x0,: x2,
---------- successive fnc approx ------------x0,: x2,
#1	 -- [2x0p,d1,N100], [drct] 
#2	 -- [2x0p,d1,N100], [drct] 
#3	 -- [2x0p,d1,N100], [drct] 
fmcmc! -- finished on x0,: x2,
Outgoing msg density on: updateFGBT! up -- finished updating x0,: x2,
End Clique x0,: x2, =============================
upMsgRec -- finished with x0,: x2,, w [3])
upMsgRec -- calling new recursive on x3,: x2,x4,l1,
Start Clique x3,: x2,x4,l1, =============================
====================== Clique x3,: x2,x4,l1, =============================
up w 0 msgs---------- successive fnc approx ------------x3,: x2,x4,l1,
#1	 -- 
fmcmc! -- finished on x3,: x2,x4,l1,
---------- successive fnc approx ------------x3,: x2,x4,l1,
#1	 -- [4x0p,d1,N100], [drct] [drct] [drct] 
#2	 -- [4x0p,d1,N100], [drct] [drct] [drct] 
#3	 -- [4x0p,d1,N100], [drct] [drct] [drct] 
fmcmc! -- finished on x3,: x2,x4,l1,
Outgoing msg density on: updateFGBT! up -- finished updating x3,: x2,x4,l1,
End Clique x3,: x2,x4,l1, =============================
upMsgRec -- finished with x3,: x2,x4,l1,, w [10, 3, 8])
====================== Clique x5,x2,l1,x4,:  =============================
up w 3 msgs---------- successive fnc approx ------------x5,x2,l1,x4,: 
#1	 -- 
fmcmc! -- finished on x5,x2,l1,x4,: 
---------- successive fnc approx ------------x5,x2,l1,x4,: 
#1	 -- [2x0p,d1,N100], [2x0p,d1,N100], [3x0p,d1,N100], 
#2	 -- [2x0p,d1,N100], [2x0p,d1,N100], [3x0p,d1,N100], 
#3	 -- [2x0p,d1,N100], [2x0p,d1,N100], [3x0p,d1,N100], 
fmcmc! -- finished on x5,x2,l1,x4,: 
---------- successive fnc approx ------------x5,x2,l1,x4,: 
#1	 -- [2x0p,d1,N100], 
fmcmc! -- finished on x5,x2,l1,x4,: 
Outgoing msg density on: updateFGBT! up -- finished updating x5,x2,l1,x4,: 
End Clique x5,x2,l1,x4,:  =============================
====================== Clique x5,x2,l1,x4,:  =============================
dwn---------- successive fnc approx ------------x5,x2,l1,x4,: 
fmcmc! -- finished on x5,x2,l1,x4,: 
Outgoing msg density on: ====================== Clique x7,x6,: x5, =============================
dwn---------- successive fnc approx ------------x7,x6,: x5,
#1	 -- [2x0p,d1,N100], [2x0p,d1,N100], 
#2	 -- [2x0p,d1,N100], [2x0p,d1,N100], 
#3	 -- [2x0p,d1,N100], [2x0p,d1,N100], 
fmcmc! -- finished on x7,x6,: x5,
Dwn msg keys [13, 10, 3, 8]
Outgoing msg density on: 
====================== Clique x0,: x2, =============================
dwn---------- successive fnc approx ------------x0,: x2,
#1	 -- [2x0p,d1,N100], 
fmcmc! -- finished on x0,: x2,
Dwn msg keys [13, 10, 3, 8]
Outgoing msg density on: 
====================== Clique x3,: x2,x4,l1, =============================
dwn---------- successive fnc approx ------------x3,: x2,x4,l1,
#1	 -- [4x0p,d1,N100], 
fmcmc! -- finished on x3,: x2,x4,l1,
Dwn msg keys [13, 10, 3, 8]
Outgoing msg density on: 


Do multi-process inference over tree
child.attributes["label"] = "x5,x2,l1,x4,: "
child.attributes["label"] = "x3,: x2,x4,l1,"
child.attributes["label"] = "x0,: x2,"
child.attributes["label"] = "x7,x6,: x5,"
Start Clique x7,x6,: x5, =============================
====================== Clique x7,x6,: x5, =============================
End Clique x7,x6,: x5, =============================up w 0 msgs
Start Clique x0,: x2, =============================
====================== Clique x0,: x2, =============================
End Clique x0,: x2, =============================up w 0 msgs
Start Clique x3,: x2,x4,l1, =============================
====================== Clique x3,: x2,x4,l1, =============================
End Clique x3,: x2,x4,l1, =============================up w 0 msgs
Start Clique x5,x2,l1,x4,:  =============================
asyncProcessPostStacks -- 1, cliq=x5,x2,l1,x4,: , start on child x7,x6,: x5, haskey=false
---------- successive fnc approx ------------x7,x6,: x5,
#1	 -- ---------- successive fnc approx ------------x0,: x2,
#1	 -- ---------- successive fnc approx ------------x3,: x2,x4,l1,
#1	 -- 
fmcmc! -- finished on x7,x6,: x5,
---------- successive fnc approx ------------x7,x6,: x5,
#1	 -- [2x0p,d1,N200],
 fmcmc! -- finished on x0,: x2,[2x0p,d1,N200],
 ---------- successive fnc approx ------------x0,: x2,[drct]
 #1	 -- [2x0p,d1,N200],
 #2	 -- [drct][2x0p,d1,N200], 
 fmcmc! -- finished on x3,: x2,x4,l1,[2x0p,d1,N200],
 ---------- successive fnc approx ------------x3,: x2,x4,l1,[drct]
 #1	 -- [4x0p,d1,N200],
 #3	 -- [drct][2x0p,d1,N200], 
 [drct]#2	 -- [2x0p,d1,N200], [2x0p,d1,N200], [drct] [drct] [drct]  
#2	 -- [4x0p,d1,N200],
 fmcmc! -- finished on x7,x6,: x5,[drct]
 Outgoing msg density on: [drct] 
[drct]#3	 --  updateFGBT! up -- finished updating x7,x6,: x5,[2x0p,d1,N200],
 asyncProcessPostStacks -- 1, cliq=x5,x2,l1,x4,: , start on child x0,: x2, haskey=false[drct]
 
fmcmc! -- finished on x0,: x2,
Outgoing msg density on: 
#3	 -- updateFGBT! up -- finished updating x0,: x2,[4x0p,d1,N200],
 asyncProcessPostStacks -- 1, cliq=x5,x2,l1,x4,: , start on child x3,: x2,x4,l1, haskey=false[drct]
 [drct] [drct] 
fmcmc! -- finished on x3,: x2,x4,l1,
Outgoing msg density on: updateFGBT! up -- finished updating x3,: x2,x4,l1,
====================== Clique x5,x2,l1,x4,:  =============================
End Clique x5,x2,l1,x4,:  =============================up w 3 msgs
---------- successive fnc approx ------------x5,x2,l1,x4,: 
#1	 -- processPostOrderStacks! -- THIS ONLY HAPPENS AFTER SYNC

fmcmc! -- finished on x5,x2,l1,x4,: 
---------- successive fnc approx ------------x5,x2,l1,x4,: 
#1	 -- [2x0p,d1,N200], [2x0p,d1,N200], [3x0p,d1,N200], 
#2	 -- [2x0p,d1,N200], [2x0p,d1,N200], [3x0p,d1,N200], 
#3	 -- [2x0p,d1,N200], [2x0p,d1,N200], [3x0p,d1,N200], 
fmcmc! -- finished on x5,x2,l1,x4,: 
---------- successive fnc approx ------------x5,x2,l1,x4,: 
#1	 -- [2x0p,d1,N200], 
fmcmc! -- finished on x5,x2,l1,x4,: 
Outgoing msg density on: upward leftovers, Int64[]
updateFGBT! up -- finished updating x5,x2,l1,x4,: 
=================== Iter Clique x5,x2,l1,x4,:  ===========================
dwn---------- successive fnc approx ------------x5,x2,l1,x4,: 
fmcmc! -- finished on x5,x2,l1,x4,: 
Outgoing msg density on: =================== Iter Clique x7,x6,: x5, ===========================
dwn=================== Iter Clique x0,: x2, ===========================
dwn=================== Iter Clique x3,: x2,x4,l1, ===========================
dwn---------- successive fnc approx ------------x7,x6,: x5,
#1	 -- ---------- successive fnc approx ------------x0,: x2,[2x0p,d1,N200],
 #1	 -- [2x0p,d1,N200],---------- successive fnc approx ------------x3,: x2,x4,l1,[2x0p,d1,N200], 
 #1	 -- [4x0p,d1,N200],
 fmcmc! -- finished on x0,: x2,
Dwn msg keys [13, 10, 3, 8]
Outgoing msg density on: 
fmcmc! -- finished on x3,: x2,x4,l1,
Dwn msg keys [13, 10, 3, 8]
Outgoing msg density on: 
#2	 -- [2x0p,d1,N200],
 [2x0p,d1,N200], 



#3	 -- [2x0p,d1,N200], [2x0p,d1,N200], 
fmcmc! -- finished on x7,x6,: x5,
Dwn msg keys [13, 10, 3, 8]
Outgoing msg density on: 
dwnward leftovers, Int64[]
Success
[TEST] plot functions...
Success
INFO: RoMEPlotting tests passed

>>> End of log
