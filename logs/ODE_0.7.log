>>> 'Pkg.add("ODE")' log
[ Info: Cloning cache of ODE from https://github.com/JuliaDiffEq/ODE.jl.git @ Base.Pkg.Cache cache.jl:43
[ Info: Installing DiffEqBase v2.9.0 @ Base.Pkg.Entry entry.jl:543
[ Info: Installing FunctionWrappers v0.1.0 @ Base.Pkg.Entry entry.jl:543
[ Info: Installing LinearMaps v1.0.4 @ Base.Pkg.Entry entry.jl:543
[ Info: Installing MacroTools v0.4.0 @ Base.Pkg.Entry entry.jl:543
[ Info: Installing ODE v0.7.0 @ Base.Pkg.Entry entry.jl:543
[ Info: Installing Polynomials v0.2.0 @ Base.Pkg.Entry entry.jl:543
[ Info: Installing RecipesBase v0.2.3 @ Base.Pkg.Entry entry.jl:543
[ Info: Installing RecursiveArrayTools v0.14.3 @ Base.Pkg.Entry entry.jl:543
[ Info: Installing Reexport v0.1.0 @ Base.Pkg.Entry entry.jl:543
[ Info: Installing Requires v0.4.3 @ Base.Pkg.Entry entry.jl:543
[ Info: Installing SimpleTraits v0.5.1 @ Base.Pkg.Entry entry.jl:543
[ Info: Installing StaticArrays v0.6.6 @ Base.Pkg.Entry entry.jl:543
[ Info: Package database updated @ Base.Pkg.Entry entry.jl:32
┌ Info: METADATA is out-of-date — you may not have the latest version of ODE
│ Use `Pkg.update()` to get the latest versions of your packages
└ @ Base.Pkg.Entry entry.jl:74

>>> 'Pkg.test("ODE")' log
Julia Version 0.7.0-DEV.3309
Commit b96097b66f (2018-01-07 00:26 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
      Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-135-generic #184-Ubuntu SMP Wed Oct 18 11:55:51 UTC 2017 x86_64 x86_64
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
              speed         user         nice          sys         idle          irq
       #1  3500 MHz    4735305 s        114 s     229860 s     995636 s         31 s
       #2  3500 MHz    1008423 s         83 s      88263 s    5844067 s          1 s
       
  Memory: 2.93927001953125 GB (762.8125 MB free)
  Uptime: 70540.0 sec
  Load Avg:  1.0029296875  1.0146484375  1.0400390625
  WORD_SIZE: 64
  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant
Packages:
  Package Directory: /home/vagrant/.julia/v0.7
  Package Status:
2 required packages:
 - JSON                          0.16.3
 - ODE                           0.7.0
13 additional packages:
 - Compat                        0.43.0
 - DiffEqBase                    2.9.0
 - FunctionWrappers              0.1.0
 - LinearMaps                    1.0.4
 - MacroTools                    0.4.0
 - Nullables                     0.0.2
 - Polynomials                   0.2.0
 - RecipesBase                   0.2.3
 - RecursiveArrayTools           0.14.3
 - Reexport                      0.1.0
 - Requires                      0.4.3
 - SimpleTraits                  0.5.1
 - StaticArrays                  0.6.6
[ Info: Computing test dependencies for ODE... @ Base.Pkg.Entry entry.jl:713
[ Info: Installing BinDeps v0.8.2 @ Base.Pkg.Entry entry.jl:543
[ Info: Installing Calculus v0.2.2 @ Base.Pkg.Entry entry.jl:543
[ Info: Installing ChunkedArrays v0.1.1 @ Base.Pkg.Entry entry.jl:543
[ Info: Installing Conda v0.7.1 @ Base.Pkg.Entry entry.jl:543
[ Info: Installing DataStructures v0.7.4 @ Base.Pkg.Entry entry.jl:543
[ Info: Installing DiffEqPDEBase v0.3.5 @ Base.Pkg.Entry entry.jl:543
[ Info: Installing DiffEqProblemLibrary v0.11.0 @ Base.Pkg.Entry entry.jl:543
[ Info: Installing Distributions v0.15.0 @ Base.Pkg.Entry entry.jl:543
[ Info: Installing EllipsisNotation v0.3.0 @ Base.Pkg.Entry entry.jl:543
[ Info: Installing PDMats v0.8.0 @ Base.Pkg.Entry entry.jl:543
[ Info: Installing ParameterizedFunctions v2.3.1 @ Base.Pkg.Entry entry.jl:543
[ Info: Installing QuadGK v0.2.0 @ Base.Pkg.Entry entry.jl:543
[ Info: Installing Rmath v0.3.1 @ Base.Pkg.Entry entry.jl:543
[ Info: Installing SHA v0.5.2 @ Base.Pkg.Entry entry.jl:543
[ Info: Installing SortingAlgorithms v0.2.0 @ Base.Pkg.Entry entry.jl:543
[ Info: Installing SpecialFunctions v0.3.7 @ Base.Pkg.Entry entry.jl:543
[ Info: Installing StatsBase v0.19.5 @ Base.Pkg.Entry entry.jl:543
[ Info: Installing StatsFuns v0.5.0 @ Base.Pkg.Entry entry.jl:543
[ Info: Installing SymEngine v0.3.0 @ Base.Pkg.Entry entry.jl:543
[ Info: Installing URIParser v0.3.0 @ Base.Pkg.Entry entry.jl:543
[ Info: Installing VectorizedRoutines v0.0.2 @ Base.Pkg.Entry entry.jl:543
[ Info: Building Conda @ Main none:10
┌ Warning: `isdefined(:symbol)` is deprecated, use `@isdefined symbol` instead
│   caller = ip:0x0
└ @ Core :-1
┌ Warning: `readstring(filename::AbstractString)` is deprecated, use `read(filename, String)` instead.
│   caller = top-level scope
└ @ Core :0
[ Info: Building SpecialFunctions @ Main none:10
WARNING: importing deprecated binding Base.Associative into BinDeps.
WARNING: Base.Associative is deprecated, use AbstractDict instead.
  likely near /home/vagrant/.julia/v0.7/SpecialFunctions/deps/binaries.jl:44
in @install at /home/vagrant/.julia/v0.7/BinDeps/src/dependencies.jl
┌ Warning: `unshift!` is deprecated, use `pushfirst!` instead.
│   caller = #_find_library#48(::Type, ::Function, ::BinDeps.LibraryDependency) at dependencies.jl:652
└ @ BinDeps dependencies.jl:652
┌ Warning: `unshift!` is deprecated, use `pushfirst!` instead.
│   caller = #_find_library#48(::DataType, ::Function, ::BinDeps.LibraryDependency) at dependencies.jl:652
└ @ BinDeps dependencies.jl:652
[ Info: Building Rmath @ Main none:10
WARNING: importing deprecated binding Base.Associative into BinDeps.
WARNING: Base.Associative is deprecated, use AbstractDict instead.
  likely near /home/vagrant/.julia/v0.7/Rmath/deps/build.jl:47
in @install at /home/vagrant/.julia/v0.7/BinDeps/src/dependencies.jl
[ Info: Building SymEngine @ Main none:10
┌ Warning: `is_windows` is deprecated, use `Sys.iswindows` instead.
│   caller = top-level scope
└ @ Core :0
┌ Warning: `is_apple` is deprecated, use `Sys.isapple` instead.
│   caller = top-level scope at build.jl:14
└ @ Core build.jl:14
┌ Warning: `is_windows` is deprecated, use `Sys.iswindows` instead.
│   caller = top-level scope
└ @ Core :0
WARNING: importing deprecated binding Base.Associative into BinDeps.
WARNING: Base.Associative is deprecated, use AbstractDict instead.
  likely near /home/vagrant/.julia/v0.7/SymEngine/deps/build.jl:50
in @install at /home/vagrant/.julia/v0.7/BinDeps/src/dependencies.jl
[ Info: Testing ODE @ Base.Pkg.Entry entry.jl:723
WARNING: Method definition __init__() in module Requires at /home/vagrant/.julia/v0.7/Requires/src/init.jl:9 overwritten in module RecursiveArrayTools at /home/vagrant/.julia/v0.7/Requires/src/init.jl:9.
[ Warning: Replacing module `StaticArrays` @ Base loading.jl:350
[ Warning: Replacing module `Requires` @ Base loading.jl:350
[ Warning: Replacing module `RecipesBase` @ Base loading.jl:350
WARNING: Method definition __init__() in module Requires at /home/vagrant/.julia/v0.7/Requires/src/init.jl:9 overwritten in module DiffEqBase at /home/vagrant/.julia/v0.7/Requires/src/init.jl:9.
┌ Warning: Deprecated syntax `immutable` at /home/vagrant/.julia/v0.7/ODE/src/algorithm_types.jl:4.
│ Use `struct` instead.
└ @ nothing algorithm_types.jl:4
┌ Warning: Deprecated syntax `immutable` at /home/vagrant/.julia/v0.7/ODE/src/algorithm_types.jl:5.
│ Use `struct` instead.
└ @ nothing algorithm_types.jl:5
┌ Warning: Deprecated syntax `immutable` at /home/vagrant/.julia/v0.7/ODE/src/algorithm_types.jl:6.
│ Use `struct` instead.
└ @ nothing algorithm_types.jl:6
┌ Warning: Deprecated syntax `immutable` at /home/vagrant/.julia/v0.7/ODE/src/algorithm_types.jl:7.
│ Use `struct` instead.
└ @ nothing algorithm_types.jl:7
┌ Warning: Deprecated syntax `immutable` at /home/vagrant/.julia/v0.7/ODE/src/algorithm_types.jl:8.
│ Use `struct` instead.
└ @ nothing algorithm_types.jl:8
┌ Warning: Deprecated syntax `immutable` at /home/vagrant/.julia/v0.7/ODE/src/algorithm_types.jl:9.
│ Use `struct` instead.
└ @ nothing algorithm_types.jl:9
┌ Warning: Deprecated syntax `immutable` at /home/vagrant/.julia/v0.7/ODE/src/algorithm_types.jl:10.
│ Use `struct` instead.
└ @ nothing algorithm_types.jl:10
┌ Warning: Deprecated syntax `parametric method syntax Base.eltype{N, S, T}(b::Tableau{N, S, T})` around /home/vagrant/.julia/v0.7/ODE/src/ODE.jl:71.
│ Use `Base.eltype(b::Tableau{N, S, T}) where {N, S, T}` instead.
└ @ nothing ODE.jl:71
┌ Warning: Deprecated syntax `parametric method syntax Base.convert{Tnew <: Real}(::Type{Tnew}, tab::Tableau)` around /home/vagrant/.julia/v0.7/ODE/src/ODE.jl:75.
│ Use `Base.convert(#unused#::Type{Tnew}, tab::Tableau) where Tnew <: Real` instead.
└ @ nothing ODE.jl:75
┌ Warning: Deprecated syntax `parametric method syntax hinit{T}(F, x0, t0::T, tend, p, reltol, abstol)` around /home/vagrant/.julia/v0.7/ODE/src/ODE.jl:86.
│ Use `hinit(F, x0, t0::T, tend, p, reltol, abstol) where T` instead.
└ @ nothing ODE.jl:86
┌ Warning: Deprecated syntax `immutable` at /home/vagrant/.julia/v0.7/ODE/src/runge_kutta.jl:9.
│ Use `struct` instead.
└ @ nothing runge_kutta.jl:9
┌ Warning: Deprecated syntax `parametric method syntax (::Type{TableauRKExplicit{Name, S, T}}){Name, S, T}(order, a, b, c)` around /home/vagrant/.julia/v0.7/ODE/src/runge_kutta.jl:17.
│ Use `(::Type{TableauRKExplicit{Name, S, T}})(order, a, b, c) where {Name, S, T}` instead.
└ @ nothing runge_kutta.jl:17
┌ Warning: Deprecated syntax `parametric method syntax TableauRKExplicit{T}(name::Symbol, order::Tuple{Vararg{Int}}, a::Matrix{T}, b::Matrix{T}, c::Vector{T})` around /home/vagrant/.julia/v0.7/ODE/src/runge_kutta.jl:34.
│ Use `TableauRKExplicit(name::Symbol, order::Tuple{Vararg{Int}}, a::Matrix{T}, b::Matrix{T}, c::Vector{T}) where T` instead.
└ @ nothing runge_kutta.jl:34
┌ Warning: Deprecated syntax `parametric method syntax conv_field{T, N}(D, a::Array{T, N})` around /home/vagrant/.julia/v0.7/ODE/src/runge_kutta.jl:41.
│ Use `conv_field(D, a::Array{T, N}) where {T, N}` instead.
└ @ nothing runge_kutta.jl:41
┌ Warning: Deprecated syntax `parametric method syntax Base.convert{Tnew <: Real, Name, S, T}(::Type{Tnew}, tab::TableauRKExplicit{Name, S, T})` around /home/vagrant/.julia/v0.7/ODE/src/runge_kutta.jl:44.
│ Use `Base.convert(#unused#::Type{Tnew}, tab::TableauRKExplicit{Name, S, T}) where {Tnew <: Real, Name, S, T}` instead.
└ @ nothing runge_kutta.jl:44
┌ Warning: Deprecated syntax `parametric method syntax oderk_fixed{N, S}(fn, y0::AbstractVector, tspan, btab_::TableauRKExplicit{N, S})` around /home/vagrant/.julia/v0.7/ODE/src/runge_kutta.jl:185.
│ Use `oderk_fixed(fn, y0::AbstractVector, tspan, btab_::TableauRKExplicit{N, S}) where {N, S}` instead.
└ @ nothing runge_kutta.jl:185
┌ Warning: Deprecated syntax `parametric method syntax oderk_adapt{N, S}(fn, y0::AbstractVector, tspan, btab_::TableauRKExplicit{N, S}; reltol = 1e-05, abstol = 1e-08, norm = Base.norm, minstep = /(abs(-(tspan[end], tspan[1])), 1e+18), maxstep = /(abs(-(tspan[end], tspan[1])), 2.5), initstep = 0, points = :all)` around /home/vagrant/.julia/v0.7/ODE/src/runge_kutta.jl:244.
│ Use `oderk_adapt(fn, y0::AbstractVector, tspan, btab_::TableauRKExplicit{N, S}; reltol = 1e-05, abstol = 1e-08, norm = Base.norm, minstep = /(abs(-(tspan[end], tspan[1])), 1e+18), maxstep = /(abs(-(tspan[end], tspan[1])), 2.5), initstep = 0, points = :all) where {N, S}` instead.
└ @ nothing runge_kutta.jl:244
┌ Warning: Deprecated syntax `parametric method syntax rk_embedded_step!{N, S}(ytrial, yerr, ks, ytmp, y, fn, t, dt, dof, btab::TableauRKExplicit{N, S})` around /home/vagrant/.julia/v0.7/ODE/src/runge_kutta.jl:374.
│ Use `rk_embedded_step!(ytrial, yerr, ks, ytmp, y, fn, t, dt, dof, btab::TableauRKExplicit{N, S}) where {N, S}` instead.
└ @ nothing runge_kutta.jl:374
┌ Warning: Deprecated syntax `parametric method syntax stepsize_hw92!{T}(dt::T, tdir, x0, xtrial, xerr, order, timeout, dof, abstol, reltol, maxstep, norm)` around /home/vagrant/.julia/v0.7/ODE/src/runge_kutta.jl:413.
│ Use `stepsize_hw92!(dt::T, tdir, x0, xtrial, xerr, order, timeout, dof, abstol, reltol, maxstep, norm) where T` instead.
└ @ nothing runge_kutta.jl:413
┌ Warning: Deprecated syntax `parametric method syntax calc_next_k!{Ty}(ks::Vector, ytmp::Ty, y, s, fn, t, dt, dof, btab)` around /home/vagrant/.julia/v0.7/ODE/src/runge_kutta.jl:444.
│ Use `calc_next_k!(ks::Vector, ytmp::Ty, y, s, fn, t, dt, dof, btab) where Ty` instead.
└ @ nothing runge_kutta.jl:444
┌ Warning: Deprecated syntax `parametric method syntax allocate!{T}(vec::Vector{T}, y0, dof)` around /home/vagrant/.julia/v0.7/ODE/src/runge_kutta.jl:456.
│ Use `allocate!(vec::Vector{T}, y0, dof) where T` instead.
└ @ nothing runge_kutta.jl:456
[ Warning: Deprecated syntax ``const` declaration on local variable` around /home/vagrant/.julia/v0.7/ODE/src/ODE.jl:269. @ nothing ODE.jl:269
[ Warning: Deprecated syntax ``const` declaration on local variable` around /home/vagrant/.julia/v0.7/ODE/src/ODE.jl:270. @ nothing ODE.jl:270
┌ Warning: Deprecated syntax `parametric method syntax solve{uType, tType, isinplace, AlgType <: ODEjlAlgorithm}(prob::AbstractODEProblem{uType, tType, isinplace}, alg::AlgType, timeseries = [], ts = [], ks = []; verbose = true, save_timeseries = nothing, saveat = tType[], reltol = 1e-05, abstol = 1e-08, save_everystep = isempty(saveat), dense = save_everystep, save_start = true, callback = nothing, dtmin = /(abs(-(prob.tspan[2], prob.tspan[1])), 1e-09), dtmax = /(abs(-(prob.tspan[2], prob.tspan[1])), 2.5), timeseries_errors = true, dense_errors = false, dt = 0.0, norm = Base.vecnorm, kwargs...)` around /home/vagrant/.julia/v0.7/ODE/src/common.jl:17.
│ Use `solve(prob::AbstractODEProblem{uType, tType, isinplace}, alg::AlgType, timeseries = [], ts = [], ks = []; verbose = true, save_timeseries = nothing, saveat = tType[], reltol = 1e-05, abstol = 1e-08, save_everystep = isempty(saveat), dense = save_everystep, save_start = true, callback = nothing, dtmin = /(abs(-(prob.tspan[2], prob.tspan[1])), 1e-09), dtmax = /(abs(-(prob.tspan[2], prob.tspan[1])), 2.5), timeseries_errors = true, dense_errors = false, dt = 0.0, norm = Base.vecnorm, kwargs...) where {uType, tType, isinplace, AlgType <: ODEjlAlgorithm}` instead.
└ @ nothing common.jl:17
WARNING: Method definition __init__() in module Requires at /home/vagrant/.julia/v0.7/Requires/src/init.jl:9 overwritten in module RecursiveArrayTools at /home/vagrant/.julia/v0.7/Requires/src/init.jl:9.
WARNING: Method definition __init__() in module RecursiveArrayTools at /home/vagrant/.julia/v0.7/Requires/src/init.jl:9 overwritten in module DiffEqBase at /home/vagrant/.julia/v0.7/Requires/src/init.jl:9.
WARNING: Base.Test is deprecated, run `using Test` instead.
  likely near /home/vagrant/.julia/v0.7/ODE/test/runtests.jl:2
[ Warning: The syntax `.'` for transposition is deprecated, and the special lowering of `.'` in multiplication (`*`), left-division (`\`), and right-division (`/`) operations, for example `A.'*B` lowering to `At_mul_B(A, B)`, `A\B.'` lowering to `A_ldiv_Bt(A, B)`, and `A.'/B.'` lowering to `At_rdiv_Bt(A, B)`, has been removed in favor of a lazy `Transpose` wrapper type and dispatch on that type. Two rewrites for `A.'` for matrix `A` exist: eager or materializing `transpose(A)`, which constructs a freshly allocated matrix of `A`'s type and containing the transpose of `A`, and lazy `Transpose(A)`, which wraps `A` in a `Transpose` view type. Which rewrite is appropriate depends on context: If `A.'` appears in a multiplication, left-division, or right-division operation that was formerly specially lowered to an `A_mul_B`-like call, then the lazy `Tranpose(A)` is the correct replacement and will result in dispatch to a method equivalent to the former `A_mul_B`-like call. For example, `A.'*B`, formerly yielding `At_mul_B(A, B)`, should be rewritten `Transpose(A)*B`, which will dispatch to a method equivalent to the former `At_mul_B(A, B)` method. If `A.'` appears outside such an operation, then `transpose(A)` is the correct rewrite. For vector `A`, `A.'` already transposed lazily to a `RowVector`, so `Transpose(A)`. which now yields a `Transpose`-wrapped vector behaviorally equivalent to the former `RowVector` is always the correct rewrite for vectors. For more information, see issue #5332 on Julia's issue tracker on GitHub. @ nothing none:0
using ODE.ode1
┌ Warning: `Array{T}(d::NTuple{N, Int}) where {T, N}` is deprecated, use `Array{T}(uninitialized, d)` instead.
│   caller = #s168#222(::Type, ::Type, ::Type{T} where T<:Tuple, ::Tuple{DataType}) at broadcast.jl:80
└ @ StaticArrays broadcast.jl:80
┌ Warning: `isleaftype` is deprecated, use `isconcrete` instead.
│   caller = make_consistent_types at ODE.jl:159 [inlined]
└ @ Core ODE.jl:159
┌ Warning: `isleaftype` is deprecated, use `isconcrete` instead.
│   caller = make_consistent_types at ODE.jl:160 [inlined]
└ @ Core ODE.jl:160
┌ Warning: `fieldnames(v)` is deprecated, use `fieldnames(typeof(v))` instead.
│   caller = convert(::Type{Float32}, ::ODE.TableauRKExplicit{:feuler,1,Rational{Int64}}) at runge_kutta.jl:45
└ @ ODE runge_kutta.jl:45
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = oderk_fixed(::Function, ::Array{Float32,1}, ::Array{Float32,1}, ::ODE.TableauRKExplicit{:feuler,1,Rational{Int64}}) at runge_kutta.jl:188
└ @ ODE runge_kutta.jl:188
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = oderk_fixed(::Function, ::Array{Float32,1}, ::Array{Float32,1}, ::ODE.TableauRKExplicit{:feuler,1,Rational{Int64}}) at runge_kutta.jl:194
└ @ ODE runge_kutta.jl:194
WARNING: Base.e is deprecated, use ℯ (\euler) or `Base.MathConstants.e`.
  likely near /home/vagrant/.julia/v0.7/ODE/test/runtests.jl:63
┌ Warning: `a::AbstractArray - b::Number` is deprecated, use `broadcast(-, a, b)` instead.
│   caller = top-level scope at runtests.jl:67
└ @ Core runtests.jl:67
WARNING: Base.e is deprecated, use ℯ (\euler) or `Base.MathConstants.e`.
  likely near /home/vagrant/.julia/v0.7/ODE/test/runtests.jl:67
┌ Warning: `isleaftype` is deprecated, use `isconcrete` instead.
│   caller = make_consistent_types at ODE.jl:159 [inlined]
└ @ Core ODE.jl:159
┌ Warning: `isleaftype` is deprecated, use `isconcrete` instead.
│   caller = make_consistent_types at ODE.jl:160 [inlined]
└ @ Core ODE.jl:160
┌ Warning: `fieldnames(v)` is deprecated, use `fieldnames(typeof(v))` instead.
│   caller = convert(::Type{Float64}, ::ODE.TableauRKExplicit{:feuler,1,Rational{Int64}}) at runge_kutta.jl:45
└ @ ODE runge_kutta.jl:45
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = oderk_fixed(::Function, ::Array{Float64,1}, ::Array{Float64,1}, ::ODE.TableauRKExplicit{:feuler,1,Rational{Int64}}) at runge_kutta.jl:188
└ @ ODE runge_kutta.jl:188
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = oderk_fixed(::Function, ::Array{Float64,1}, ::Array{Float64,1}, ::ODE.TableauRKExplicit{:feuler,1,Rational{Int64}}) at runge_kutta.jl:194
└ @ ODE runge_kutta.jl:194
WARNING: Base.e is deprecated, use ℯ (\euler) or `Base.MathConstants.e`.
  likely near /home/vagrant/.julia/v0.7/ODE/test/runtests.jl:63
WARNING: Base.e is deprecated, use ℯ (\euler) or `Base.MathConstants.e`.
  likely near /home/vagrant/.julia/v0.7/ODE/test/runtests.jl:67
┌ Warning: `isleaftype` is deprecated, use `isconcrete` instead.
│   caller = make_consistent_types at ODE.jl:159 [inlined]
└ @ Core ODE.jl:159
┌ Warning: `isleaftype` is deprecated, use `isconcrete` instead.
│   caller = make_consistent_types at ODE.jl:160 [inlined]
└ @ Core ODE.jl:160
┌ Warning: `fieldnames(v)` is deprecated, use `fieldnames(typeof(v))` instead.
│   caller = convert(::Type{BigFloat}, ::ODE.TableauRKExplicit{:feuler,1,Rational{Int64}}) at runge_kutta.jl:45
└ @ ODE runge_kutta.jl:45
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = oderk_fixed(::Function, ::Array{BigFloat,1}, ::Array{BigFloat,1}, ::ODE.TableauRKExplicit{:feuler,1,Rational{Int64}}) at runge_kutta.jl:188
└ @ ODE runge_kutta.jl:188
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = oderk_fixed(::Function, ::Array{BigFloat,1}, ::Array{BigFloat,1}, ::ODE.TableauRKExplicit{:feuler,1,Rational{Int64}}) at runge_kutta.jl:194
└ @ ODE runge_kutta.jl:194
WARNING: Base.e is deprecated, use ℯ (\euler) or `Base.MathConstants.e`.
  likely near /home/vagrant/.julia/v0.7/ODE/test/runtests.jl:63
WARNING: Base.e is deprecated, use ℯ (\euler) or `Base.MathConstants.e`.
  likely near /home/vagrant/.julia/v0.7/ODE/test/runtests.jl:67
using ODE.ode2_midpoint
┌ Warning: `isleaftype` is deprecated, use `isconcrete` instead.
│   caller = make_consistent_types at ODE.jl:159 [inlined]
└ @ Core ODE.jl:159
┌ Warning: `isleaftype` is deprecated, use `isconcrete` instead.
│   caller = make_consistent_types at ODE.jl:160 [inlined]
└ @ Core ODE.jl:160
┌ Warning: `fieldnames(v)` is deprecated, use `fieldnames(typeof(v))` instead.
│   caller = convert(::Type{Float32}, ::ODE.TableauRKExplicit{:midpoint,2,Rational{Int64}}) at runge_kutta.jl:45
└ @ ODE runge_kutta.jl:45
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = oderk_fixed(::Function, ::Array{Float32,1}, ::Array{Float32,1}, ::ODE.TableauRKExplicit{:midpoint,2,Rational{Int64}}) at runge_kutta.jl:188
└ @ ODE runge_kutta.jl:188
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = oderk_fixed(::Function, ::Array{Float32,1}, ::Array{Float32,1}, ::ODE.TableauRKExplicit{:midpoint,2,Rational{Int64}}) at runge_kutta.jl:194
└ @ ODE runge_kutta.jl:194
WARNING: Base.e is deprecated, use ℯ (\euler) or `Base.MathConstants.e`.
  likely near /home/vagrant/.julia/v0.7/ODE/test/runtests.jl:63
WARNING: Base.e is deprecated, use ℯ (\euler) or `Base.MathConstants.e`.
  likely near /home/vagrant/.julia/v0.7/ODE/test/runtests.jl:67
┌ Warning: `isleaftype` is deprecated, use `isconcrete` instead.
│   caller = make_consistent_types at ODE.jl:159 [inlined]
└ @ Core ODE.jl:159
┌ Warning: `isleaftype` is deprecated, use `isconcrete` instead.
│   caller = make_consistent_types at ODE.jl:160 [inlined]
└ @ Core ODE.jl:160
┌ Warning: `fieldnames(v)` is deprecated, use `fieldnames(typeof(v))` instead.
│   caller = convert(::Type{Float64}, ::ODE.TableauRKExplicit{:midpoint,2,Rational{Int64}}) at runge_kutta.jl:45
└ @ ODE runge_kutta.jl:45
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = oderk_fixed(::Function, ::Array{Float64,1}, ::Array{Float64,1}, ::ODE.TableauRKExplicit{:midpoint,2,Rational{Int64}}) at runge_kutta.jl:188
└ @ ODE runge_kutta.jl:188
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = oderk_fixed(::Function, ::Array{Float64,1}, ::Array{Float64,1}, ::ODE.TableauRKExplicit{:midpoint,2,Rational{Int64}}) at runge_kutta.jl:194
└ @ ODE runge_kutta.jl:194
WARNING: Base.e is deprecated, use ℯ (\euler) or `Base.MathConstants.e`.
  likely near /home/vagrant/.julia/v0.7/ODE/test/runtests.jl:63
WARNING: Base.e is deprecated, use ℯ (\euler) or `Base.MathConstants.e`.
  likely near /home/vagrant/.julia/v0.7/ODE/test/runtests.jl:67
┌ Warning: `isleaftype` is deprecated, use `isconcrete` instead.
│   caller = make_consistent_types at ODE.jl:159 [inlined]
└ @ Core ODE.jl:159
┌ Warning: `isleaftype` is deprecated, use `isconcrete` instead.
│   caller = make_consistent_types at ODE.jl:160 [inlined]
└ @ Core ODE.jl:160
┌ Warning: `fieldnames(v)` is deprecated, use `fieldnames(typeof(v))` instead.
│   caller = convert(::Type{BigFloat}, ::ODE.TableauRKExplicit{:midpoint,2,Rational{Int64}}) at runge_kutta.jl:45
└ @ ODE runge_kutta.jl:45
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = oderk_fixed(::Function, ::Array{BigFloat,1}, ::Array{BigFloat,1}, ::ODE.TableauRKExplicit{:midpoint,2,Rational{Int64}}) at runge_kutta.jl:188
└ @ ODE runge_kutta.jl:188
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = oderk_fixed(::Function, ::Array{BigFloat,1}, ::Array{BigFloat,1}, ::ODE.TableauRKExplicit{:midpoint,2,Rational{Int64}}) at runge_kutta.jl:194
└ @ ODE runge_kutta.jl:194
WARNING: Base.e is deprecated, use ℯ (\euler) or `Base.MathConstants.e`.
  likely near /home/vagrant/.julia/v0.7/ODE/test/runtests.jl:63
WARNING: Base.e is deprecated, use ℯ (\euler) or `Base.MathConstants.e`.
  likely near /home/vagrant/.julia/v0.7/ODE/test/runtests.jl:67
using ODE.ode2_heun
┌ Warning: `isleaftype` is deprecated, use `isconcrete` instead.
│   caller = make_consistent_types at ODE.jl:159 [inlined]
└ @ Core ODE.jl:159
┌ Warning: `isleaftype` is deprecated, use `isconcrete` instead.
│   caller = make_consistent_types at ODE.jl:160 [inlined]
└ @ Core ODE.jl:160
┌ Warning: `fieldnames(v)` is deprecated, use `fieldnames(typeof(v))` instead.
│   caller = convert(::Type{Float32}, ::ODE.TableauRKExplicit{:heun,2,Rational{Int64}}) at runge_kutta.jl:45
└ @ ODE runge_kutta.jl:45
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = oderk_fixed(::Function, ::Array{Float32,1}, ::Array{Float32,1}, ::ODE.TableauRKExplicit{:heun,2,Rational{Int64}}) at runge_kutta.jl:188
└ @ ODE runge_kutta.jl:188
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = oderk_fixed(::Function, ::Array{Float32,1}, ::Array{Float32,1}, ::ODE.TableauRKExplicit{:heun,2,Rational{Int64}}) at runge_kutta.jl:194
└ @ ODE runge_kutta.jl:194
WARNING: Base.e is deprecated, use ℯ (\euler) or `Base.MathConstants.e`.
  likely near /home/vagrant/.julia/v0.7/ODE/test/runtests.jl:63
WARNING: Base.e is deprecated, use ℯ (\euler) or `Base.MathConstants.e`.
  likely near /home/vagrant/.julia/v0.7/ODE/test/runtests.jl:67
┌ Warning: `isleaftype` is deprecated, use `isconcrete` instead.
│   caller = make_consistent_types at ODE.jl:159 [inlined]
└ @ Core ODE.jl:159
┌ Warning: `isleaftype` is deprecated, use `isconcrete` instead.
│   caller = make_consistent_types at ODE.jl:160 [inlined]
└ @ Core ODE.jl:160
┌ Warning: `fieldnames(v)` is deprecated, use `fieldnames(typeof(v))` instead.
│   caller = convert(::Type{Float64}, ::ODE.TableauRKExplicit{:heun,2,Rational{Int64}}) at runge_kutta.jl:45
└ @ ODE runge_kutta.jl:45
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = oderk_fixed(::Function, ::Array{Float64,1}, ::Array{Float64,1}, ::ODE.TableauRKExplicit{:heun,2,Rational{Int64}}) at runge_kutta.jl:188
└ @ ODE runge_kutta.jl:188
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = oderk_fixed(::Function, ::Array{Float64,1}, ::Array{Float64,1}, ::ODE.TableauRKExplicit{:heun,2,Rational{Int64}}) at runge_kutta.jl:194
└ @ ODE runge_kutta.jl:194
WARNING: Base.e is deprecated, use ℯ (\euler) or `Base.MathConstants.e`.
  likely near /home/vagrant/.julia/v0.7/ODE/test/runtests.jl:63
WARNING: Base.e is deprecated, use ℯ (\euler) or `Base.MathConstants.e`.
  likely near /home/vagrant/.julia/v0.7/ODE/test/runtests.jl:67
┌ Warning: `isleaftype` is deprecated, use `isconcrete` instead.
│   caller = make_consistent_types at ODE.jl:159 [inlined]
└ @ Core ODE.jl:159
┌ Warning: `isleaftype` is deprecated, use `isconcrete` instead.
│   caller = make_consistent_types at ODE.jl:160 [inlined]
└ @ Core ODE.jl:160
┌ Warning: `fieldnames(v)` is deprecated, use `fieldnames(typeof(v))` instead.
│   caller = convert(::Type{BigFloat}, ::ODE.TableauRKExplicit{:heun,2,Rational{Int64}}) at runge_kutta.jl:45
└ @ ODE runge_kutta.jl:45
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = oderk_fixed(::Function, ::Array{BigFloat,1}, ::Array{BigFloat,1}, ::ODE.TableauRKExplicit{:heun,2,Rational{Int64}}) at runge_kutta.jl:188
└ @ ODE runge_kutta.jl:188
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = oderk_fixed(::Function, ::Array{BigFloat,1}, ::Array{BigFloat,1}, ::ODE.TableauRKExplicit{:heun,2,Rational{Int64}}) at runge_kutta.jl:194
└ @ ODE runge_kutta.jl:194
WARNING: Base.e is deprecated, use ℯ (\euler) or `Base.MathConstants.e`.
  likely near /home/vagrant/.julia/v0.7/ODE/test/runtests.jl:63
WARNING: Base.e is deprecated, use ℯ (\euler) or `Base.MathConstants.e`.
  likely near /home/vagrant/.julia/v0.7/ODE/test/runtests.jl:67
using ode4
┌ Warning: `isleaftype` is deprecated, use `isconcrete` instead.
│   caller = make_consistent_types at ODE.jl:159 [inlined]
└ @ Core ODE.jl:159
┌ Warning: `isleaftype` is deprecated, use `isconcrete` instead.
│   caller = make_consistent_types at ODE.jl:160 [inlined]
└ @ Core ODE.jl:160
┌ Warning: `fieldnames(v)` is deprecated, use `fieldnames(typeof(v))` instead.
│   caller = convert(::Type{Float32}, ::ODE.TableauRKExplicit{:rk4,4,Rational{Int64}}) at runge_kutta.jl:45
└ @ ODE runge_kutta.jl:45
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = oderk_fixed(::Function, ::Array{Float32,1}, ::Array{Float32,1}, ::ODE.TableauRKExplicit{:rk4,4,Rational{Int64}}) at runge_kutta.jl:188
└ @ ODE runge_kutta.jl:188
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = oderk_fixed(::Function, ::Array{Float32,1}, ::Array{Float32,1}, ::ODE.TableauRKExplicit{:rk4,4,Rational{Int64}}) at runge_kutta.jl:194
└ @ ODE runge_kutta.jl:194
WARNING: Base.e is deprecated, use ℯ (\euler) or `Base.MathConstants.e`.
  likely near /home/vagrant/.julia/v0.7/ODE/test/runtests.jl:63
WARNING: Base.e is deprecated, use ℯ (\euler) or `Base.MathConstants.e`.
  likely near /home/vagrant/.julia/v0.7/ODE/test/runtests.jl:67
┌ Warning: `isleaftype` is deprecated, use `isconcrete` instead.
│   caller = make_consistent_types at ODE.jl:159 [inlined]
└ @ Core ODE.jl:159
┌ Warning: `isleaftype` is deprecated, use `isconcrete` instead.
│   caller = make_consistent_types at ODE.jl:160 [inlined]
└ @ Core ODE.jl:160
┌ Warning: `fieldnames(v)` is deprecated, use `fieldnames(typeof(v))` instead.
│   caller = convert(::Type{Float64}, ::ODE.TableauRKExplicit{:rk4,4,Rational{Int64}}) at runge_kutta.jl:45
└ @ ODE runge_kutta.jl:45
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = oderk_fixed(::Function, ::Array{Float64,1}, ::Array{Float64,1}, ::ODE.TableauRKExplicit{:rk4,4,Rational{Int64}}) at runge_kutta.jl:188
└ @ ODE runge_kutta.jl:188
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = oderk_fixed(::Function, ::Array{Float64,1}, ::Array{Float64,1}, ::ODE.TableauRKExplicit{:rk4,4,Rational{Int64}}) at runge_kutta.jl:194
└ @ ODE runge_kutta.jl:194
WARNING: Base.e is deprecated, use ℯ (\euler) or `Base.MathConstants.e`.
  likely near /home/vagrant/.julia/v0.7/ODE/test/runtests.jl:63
WARNING: Base.e is deprecated, use ℯ (\euler) or `Base.MathConstants.e`.
  likely near /home/vagrant/.julia/v0.7/ODE/test/runtests.jl:67
┌ Warning: `isleaftype` is deprecated, use `isconcrete` instead.
│   caller = make_consistent_types at ODE.jl:159 [inlined]
└ @ Core ODE.jl:159
┌ Warning: `isleaftype` is deprecated, use `isconcrete` instead.
│   caller = make_consistent_types at ODE.jl:160 [inlined]
└ @ Core ODE.jl:160
┌ Warning: `fieldnames(v)` is deprecated, use `fieldnames(typeof(v))` instead.
│   caller = convert(::Type{BigFloat}, ::ODE.TableauRKExplicit{:rk4,4,Rational{Int64}}) at runge_kutta.jl:45
└ @ ODE runge_kutta.jl:45
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = oderk_fixed(::Function, ::Array{BigFloat,1}, ::Array{BigFloat,1}, ::ODE.TableauRKExplicit{:rk4,4,Rational{Int64}}) at runge_kutta.jl:188
└ @ ODE runge_kutta.jl:188
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = oderk_fixed(::Function, ::Array{BigFloat,1}, ::Array{BigFloat,1}, ::ODE.TableauRKExplicit{:rk4,4,Rational{Int64}}) at runge_kutta.jl:194
└ @ ODE runge_kutta.jl:194
WARNING: Base.e is deprecated, use ℯ (\euler) or `Base.MathConstants.e`.
  likely near /home/vagrant/.julia/v0.7/ODE/test/runtests.jl:63
WARNING: Base.e is deprecated, use ℯ (\euler) or `Base.MathConstants.e`.
  likely near /home/vagrant/.julia/v0.7/ODE/test/runtests.jl:67
using ode4ms
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #ode_ms#16(::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::getfield(, Symbol("##1#7")), ::Float32, ::Array{Float32,1}, ::Int64) at ODE.jl:176
└ @ ODE ODE.jl:176
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #ode_ms#16(::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::getfield(, Symbol("##2#8")), ::Float32, ::Array{Float32,1}, ::Int64) at ODE.jl:176
└ @ ODE ODE.jl:176
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #ode_ms#16(::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::getfield(, Symbol("##4#10")), ::Float32, ::Array{Float32,1}, ::Int64) at ODE.jl:176
└ @ ODE ODE.jl:176
WARNING: Base.e is deprecated, use ℯ (\euler) or `Base.MathConstants.e`.
  likely near /home/vagrant/.julia/v0.7/ODE/test/runtests.jl:63
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #ode_ms#16(::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::getfield(, Symbol("##5#11")), ::Float32, ::Array{Float32,1}, ::Int64) at ODE.jl:176
└ @ ODE ODE.jl:176
WARNING: Base.e is deprecated, use ℯ (\euler) or `Base.MathConstants.e`.
  likely near /home/vagrant/.julia/v0.7/ODE/test/runtests.jl:67
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #ode_ms#16(::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::getfield(, Symbol("##6#12")), ::Array{Float32,1}, ::Array{Float32,1}, ::Int64) at ODE.jl:176
└ @ ODE ODE.jl:176
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #ode_ms#16(::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::getfield(, Symbol("##1#7")), ::Float64, ::Array{Float64,1}, ::Int64) at ODE.jl:176
└ @ ODE ODE.jl:176
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #ode_ms#16(::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::getfield(, Symbol("##2#8")), ::Float64, ::Array{Float64,1}, ::Int64) at ODE.jl:176
└ @ ODE ODE.jl:176
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #ode_ms#16(::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::getfield(, Symbol("##4#10")), ::Float64, ::Array{Float64,1}, ::Int64) at ODE.jl:176
└ @ ODE ODE.jl:176
WARNING: Base.e is deprecated, use ℯ (\euler) or `Base.MathConstants.e`.
  likely near /home/vagrant/.julia/v0.7/ODE/test/runtests.jl:63
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #ode_ms#16(::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::getfield(, Symbol("##5#11")), ::Float64, ::Array{Float64,1}, ::Int64) at ODE.jl:176
└ @ ODE ODE.jl:176
WARNING: Base.e is deprecated, use ℯ (\euler) or `Base.MathConstants.e`.
  likely near /home/vagrant/.julia/v0.7/ODE/test/runtests.jl:67
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #ode_ms#16(::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::getfield(, Symbol("##6#12")), ::Array{Float64,1}, ::Array{Float64,1}, ::Int64) at ODE.jl:176
└ @ ODE ODE.jl:176
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #ode_ms#16(::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::getfield(, Symbol("##1#7")), ::BigFloat, ::Array{BigFloat,1}, ::Int64) at ODE.jl:176
└ @ ODE ODE.jl:176
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #ode_ms#16(::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::getfield(, Symbol("##2#8")), ::BigFloat, ::Array{BigFloat,1}, ::Int64) at ODE.jl:176
└ @ ODE ODE.jl:176
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #ode_ms#16(::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::getfield(, Symbol("##4#10")), ::BigFloat, ::Array{BigFloat,1}, ::Int64) at ODE.jl:176
└ @ ODE ODE.jl:176
WARNING: Base.e is deprecated, use ℯ (\euler) or `Base.MathConstants.e`.
  likely near /home/vagrant/.julia/v0.7/ODE/test/runtests.jl:63
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #ode_ms#16(::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::getfield(, Symbol("##5#11")), ::BigFloat, ::Array{BigFloat,1}, ::Int64) at ODE.jl:176
└ @ ODE ODE.jl:176
WARNING: Base.e is deprecated, use ℯ (\euler) or `Base.MathConstants.e`.
  likely near /home/vagrant/.julia/v0.7/ODE/test/runtests.jl:67
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #ode_ms#16(::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::getfield(, Symbol("##6#12")), ::Array{BigFloat,1}, ::Array{BigFloat,1}, ::Int64) at ODE.jl:176
└ @ ODE ODE.jl:176
using ODE.ode5ms
┌ Warning: `diagm(v::AbstractVector)` is deprecated, use `diagm(0 => v)` or `Matrix(Diagonal(v))` instead.
│   caller = #ode_ms#16(::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::getfield(, Symbol("##1#7")), ::Float32, ::Array{Float32,1}, ::Int64) at ODE.jl:188
└ @ ODE ODE.jl:188
┌ Warning: `diagm(v::AbstractVector)` is deprecated, use `diagm(0 => v)` or `Matrix(Diagonal(v))` instead.
│   caller = #ode_ms#16(::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::getfield(, Symbol("##2#8")), ::Float32, ::Array{Float32,1}, ::Int64) at ODE.jl:188
└ @ ODE ODE.jl:188
┌ Warning: `diagm(v::AbstractVector)` is deprecated, use `diagm(0 => v)` or `Matrix(Diagonal(v))` instead.
│   caller = #ode_ms#16(::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::getfield(, Symbol("##4#10")), ::Float32, ::Array{Float32,1}, ::Int64) at ODE.jl:188
└ @ ODE ODE.jl:188
WARNING: Base.e is deprecated, use ℯ (\euler) or `Base.MathConstants.e`.
  likely near /home/vagrant/.julia/v0.7/ODE/test/runtests.jl:63
┌ Warning: `diagm(v::AbstractVector)` is deprecated, use `diagm(0 => v)` or `Matrix(Diagonal(v))` instead.
│   caller = #ode_ms#16(::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::getfield(, Symbol("##5#11")), ::Float32, ::Array{Float32,1}, ::Int64) at ODE.jl:188
└ @ ODE ODE.jl:188
WARNING: Base.e is deprecated, use ℯ (\euler) or `Base.MathConstants.e`.
  likely near /home/vagrant/.julia/v0.7/ODE/test/runtests.jl:67
┌ Warning: `diagm(v::AbstractVector)` is deprecated, use `diagm(0 => v)` or `Matrix(Diagonal(v))` instead.
│   caller = #ode_ms#16(::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::getfield(, Symbol("##6#12")), ::Array{Float32,1}, ::Array{Float32,1}, ::Int64) at ODE.jl:188
└ @ ODE ODE.jl:188
┌ Warning: `diagm(v::AbstractVector)` is deprecated, use `diagm(0 => v)` or `Matrix(Diagonal(v))` instead.
│   caller = #ode_ms#16(::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::getfield(, Symbol("##1#7")), ::Float64, ::Array{Float64,1}, ::Int64) at ODE.jl:188
└ @ ODE ODE.jl:188
┌ Warning: `diagm(v::AbstractVector)` is deprecated, use `diagm(0 => v)` or `Matrix(Diagonal(v))` instead.
│   caller = #ode_ms#16(::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::getfield(, Symbol("##2#8")), ::Float64, ::Array{Float64,1}, ::Int64) at ODE.jl:188
└ @ ODE ODE.jl:188
┌ Warning: `diagm(v::AbstractVector)` is deprecated, use `diagm(0 => v)` or `Matrix(Diagonal(v))` instead.
│   caller = #ode_ms#16(::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::getfield(, Symbol("##4#10")), ::Float64, ::Array{Float64,1}, ::Int64) at ODE.jl:188
└ @ ODE ODE.jl:188
WARNING: Base.e is deprecated, use ℯ (\euler) or `Base.MathConstants.e`.
  likely near /home/vagrant/.julia/v0.7/ODE/test/runtests.jl:63
┌ Warning: `diagm(v::AbstractVector)` is deprecated, use `diagm(0 => v)` or `Matrix(Diagonal(v))` instead.
│   caller = #ode_ms#16(::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::getfield(, Symbol("##5#11")), ::Float64, ::Array{Float64,1}, ::Int64) at ODE.jl:188
└ @ ODE ODE.jl:188
WARNING: Base.e is deprecated, use ℯ (\euler) or `Base.MathConstants.e`.
  likely near /home/vagrant/.julia/v0.7/ODE/test/runtests.jl:67
┌ Warning: `diagm(v::AbstractVector)` is deprecated, use `diagm(0 => v)` or `Matrix(Diagonal(v))` instead.
│   caller = #ode_ms#16(::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::getfield(, Symbol("##6#12")), ::Array{Float64,1}, ::Array{Float64,1}, ::Int64) at ODE.jl:188
└ @ ODE ODE.jl:188
┌ Warning: `diagm(v::AbstractVector)` is deprecated, use `diagm(0 => v)` or `Matrix(Diagonal(v))` instead.
│   caller = #ode_ms#16(::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::getfield(, Symbol("##1#7")), ::BigFloat, ::Array{BigFloat,1}, ::Int64) at ODE.jl:188
└ @ ODE ODE.jl:188
┌ Warning: `diagm(v::AbstractVector)` is deprecated, use `diagm(0 => v)` or `Matrix(Diagonal(v))` instead.
│   caller = #ode_ms#16(::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::getfield(, Symbol("##2#8")), ::BigFloat, ::Array{BigFloat,1}, ::Int64) at ODE.jl:188
└ @ ODE ODE.jl:188
┌ Warning: `diagm(v::AbstractVector)` is deprecated, use `diagm(0 => v)` or `Matrix(Diagonal(v))` instead.
│   caller = #ode_ms#16(::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::getfield(, Symbol("##4#10")), ::BigFloat, ::Array{BigFloat,1}, ::Int64) at ODE.jl:188
└ @ ODE ODE.jl:188
WARNING: Base.e is deprecated, use ℯ (\euler) or `Base.MathConstants.e`.
  likely near /home/vagrant/.julia/v0.7/ODE/test/runtests.jl:63
┌ Warning: `diagm(v::AbstractVector)` is deprecated, use `diagm(0 => v)` or `Matrix(Diagonal(v))` instead.
│   caller = #ode_ms#16(::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::getfield(, Symbol("##5#11")), ::BigFloat, ::Array{BigFloat,1}, ::Int64) at ODE.jl:188
└ @ ODE ODE.jl:188
WARNING: Base.e is deprecated, use ℯ (\euler) or `Base.MathConstants.e`.
  likely near /home/vagrant/.julia/v0.7/ODE/test/runtests.jl:67
┌ Warning: `diagm(v::AbstractVector)` is deprecated, use `diagm(0 => v)` or `Matrix(Diagonal(v))` instead.
│   caller = #ode_ms#16(::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::getfield(, Symbol("##6#12")), ::Array{BigFloat,1}, ::Array{BigFloat,1}, ::Int64) at ODE.jl:188
└ @ ODE ODE.jl:188
using ode23
┌ Warning: `isleaftype` is deprecated, use `isconcrete` instead.
│   caller = make_consistent_types(::Function, ::Array{Float32,1}, ::Array{Float32,1}, ::ODE.TableauRKExplicit{:bogacki_shampine,4,Rational{Int64}}) at ODE.jl:159
└ @ ODE ODE.jl:159
┌ Warning: `isleaftype` is deprecated, use `isconcrete` instead.
│   caller = make_consistent_types(::Function, ::Array{Float32,1}, ::Array{Float32,1}, ::ODE.TableauRKExplicit{:bogacki_shampine,4,Rational{Int64}}) at ODE.jl:160
└ @ ODE ODE.jl:160
┌ Warning: `fieldnames(v)` is deprecated, use `fieldnames(typeof(v))` instead.
│   caller = convert(::Type{Float32}, ::ODE.TableauRKExplicit{:bogacki_shampine,4,Rational{Int64}}) at runge_kutta.jl:45
└ @ ODE runge_kutta.jl:45
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #oderk_adapt#13(::Float64, ::Float64, ::Function, ::Float64, ::Any, ::Int64, ::Symbol, ::Function, ::getfield(ODE, Symbol("##11#12")){getfield(, Symbol("##1#7"))}, ::Array{Float32,1}, ::Any, ::ODE.TableauRKExplicit{:bogacki_shampine,4,Rational{Int64}}) at runge_kutta.jl:264
└ @ ODE runge_kutta.jl:264
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #oderk_adapt#13(::Float64, ::Float64, ::Function, ::Float64, ::Any, ::Int64, ::Symbol, ::Function, ::getfield(ODE, Symbol("##11#12")){getfield(, Symbol("##1#7"))}, ::Array{Float32,1}, ::Any, ::ODE.TableauRKExplicit{:bogacki_shampine,4,Rational{Int64}}) at runge_kutta.jl:270
└ @ ODE runge_kutta.jl:270
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #oderk_adapt#13(::Float64, ::Float64, ::Function, ::Float64, ::Any, ::Int64, ::Symbol, ::Function, ::getfield(ODE, Symbol("##11#12")){getfield(, Symbol("##2#8"))}, ::Array{Float32,1}, ::Any, ::ODE.TableauRKExplicit{:bogacki_shampine,4,Rational{Int64}}) at runge_kutta.jl:264
└ @ ODE runge_kutta.jl:264
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #oderk_adapt#13(::Float64, ::Float64, ::Function, ::Float64, ::Any, ::Int64, ::Symbol, ::Function, ::getfield(ODE, Symbol("##11#12")){getfield(, Symbol("##2#8"))}, ::Array{Float32,1}, ::Any, ::ODE.TableauRKExplicit{:bogacki_shampine,4,Rational{Int64}}) at runge_kutta.jl:270
└ @ ODE runge_kutta.jl:270
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #oderk_adapt#13(::Float64, ::Float64, ::Function, ::Float64, ::Any, ::Int64, ::Symbol, ::Function, ::getfield(ODE, Symbol("##11#12")){getfield(, Symbol("##4#10"))}, ::Array{Float32,1}, ::Any, ::ODE.TableauRKExplicit{:bogacki_shampine,4,Rational{Int64}}) at runge_kutta.jl:264
└ @ ODE runge_kutta.jl:264
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #oderk_adapt#13(::Float64, ::Float64, ::Function, ::Float64, ::Any, ::Int64, ::Symbol, ::Function, ::getfield(ODE, Symbol("##11#12")){getfield(, Symbol("##4#10"))}, ::Array{Float32,1}, ::Any, ::ODE.TableauRKExplicit{:bogacki_shampine,4,Rational{Int64}}) at runge_kutta.jl:270
└ @ ODE runge_kutta.jl:270
WARNING: Base.e is deprecated, use ℯ (\euler) or `Base.MathConstants.e`.
  likely near /home/vagrant/.julia/v0.7/ODE/test/runtests.jl:63
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #oderk_adapt#13(::Float64, ::Float64, ::Function, ::Float64, ::Any, ::Int64, ::Symbol, ::Function, ::getfield(ODE, Symbol("##11#12")){getfield(, Symbol("##5#11"))}, ::Array{Float32,1}, ::Any, ::ODE.TableauRKExplicit{:bogacki_shampine,4,Rational{Int64}}) at runge_kutta.jl:264
└ @ ODE runge_kutta.jl:264
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #oderk_adapt#13(::Float64, ::Float64, ::Function, ::Float64, ::Any, ::Int64, ::Symbol, ::Function, ::getfield(ODE, Symbol("##11#12")){getfield(, Symbol("##5#11"))}, ::Array{Float32,1}, ::Any, ::ODE.TableauRKExplicit{:bogacki_shampine,4,Rational{Int64}}) at runge_kutta.jl:270
└ @ ODE runge_kutta.jl:270
WARNING: Base.e is deprecated, use ℯ (\euler) or `Base.MathConstants.e`.
  likely near /home/vagrant/.julia/v0.7/ODE/test/runtests.jl:67
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #oderk_adapt#13(::Float64, ::Float64, ::Function, ::Float64, ::Any, ::Int64, ::Symbol, ::Function, ::getfield(, Symbol("##6#12")), ::Array{Float32,1}, ::Any, ::ODE.TableauRKExplicit{:bogacki_shampine,4,Rational{Int64}}) at runge_kutta.jl:264
└ @ ODE runge_kutta.jl:264
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #oderk_adapt#13(::Float64, ::Float64, ::Function, ::Float64, ::Any, ::Int64, ::Symbol, ::Function, ::getfield(, Symbol("##6#12")), ::Array{Float32,1}, ::Any, ::ODE.TableauRKExplicit{:bogacki_shampine,4,Rational{Int64}}) at runge_kutta.jl:270
└ @ ODE runge_kutta.jl:270
┌ Warning: `isleaftype` is deprecated, use `isconcrete` instead.
│   caller = make_consistent_types(::Function, ::Array{Float64,1}, ::Array{Float64,1}, ::ODE.TableauRKExplicit{:bogacki_shampine,4,Rational{Int64}}) at ODE.jl:159
└ @ ODE ODE.jl:159
┌ Warning: `isleaftype` is deprecated, use `isconcrete` instead.
│   caller = make_consistent_types(::Function, ::Array{Float64,1}, ::Array{Float64,1}, ::ODE.TableauRKExplicit{:bogacki_shampine,4,Rational{Int64}}) at ODE.jl:160
└ @ ODE ODE.jl:160
┌ Warning: `fieldnames(v)` is deprecated, use `fieldnames(typeof(v))` instead.
│   caller = convert(::Type{Float64}, ::ODE.TableauRKExplicit{:bogacki_shampine,4,Rational{Int64}}) at runge_kutta.jl:45
└ @ ODE runge_kutta.jl:45
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #oderk_adapt#13(::Float64, ::Float64, ::Function, ::Float64, ::Any, ::Int64, ::Symbol, ::Function, ::getfield(ODE, Symbol("##11#12")){getfield(, Symbol("##1#7"))}, ::Array{Float64,1}, ::Any, ::ODE.TableauRKExplicit{:bogacki_shampine,4,Rational{Int64}}) at runge_kutta.jl:264
└ @ ODE runge_kutta.jl:264
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #oderk_adapt#13(::Float64, ::Float64, ::Function, ::Float64, ::Any, ::Int64, ::Symbol, ::Function, ::getfield(ODE, Symbol("##11#12")){getfield(, Symbol("##1#7"))}, ::Array{Float64,1}, ::Any, ::ODE.TableauRKExplicit{:bogacki_shampine,4,Rational{Int64}}) at runge_kutta.jl:270
└ @ ODE runge_kutta.jl:270
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #oderk_adapt#13(::Float64, ::Float64, ::Function, ::Float64, ::Any, ::Int64, ::Symbol, ::Function, ::getfield(ODE, Symbol("##11#12")){getfield(, Symbol("##2#8"))}, ::Array{Float64,1}, ::Any, ::ODE.TableauRKExplicit{:bogacki_shampine,4,Rational{Int64}}) at runge_kutta.jl:264
└ @ ODE runge_kutta.jl:264
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #oderk_adapt#13(::Float64, ::Float64, ::Function, ::Float64, ::Any, ::Int64, ::Symbol, ::Function, ::getfield(ODE, Symbol("##11#12")){getfield(, Symbol("##2#8"))}, ::Array{Float64,1}, ::Any, ::ODE.TableauRKExplicit{:bogacki_shampine,4,Rational{Int64}}) at runge_kutta.jl:270
└ @ ODE runge_kutta.jl:270
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #oderk_adapt#13(::Float64, ::Float64, ::Function, ::Float64, ::Any, ::Int64, ::Symbol, ::Function, ::getfield(ODE, Symbol("##11#12")){getfield(, Symbol("##4#10"))}, ::Array{Float64,1}, ::Any, ::ODE.TableauRKExplicit{:bogacki_shampine,4,Rational{Int64}}) at runge_kutta.jl:264
└ @ ODE runge_kutta.jl:264
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #oderk_adapt#13(::Float64, ::Float64, ::Function, ::Float64, ::Any, ::Int64, ::Symbol, ::Function, ::getfield(ODE, Symbol("##11#12")){getfield(, Symbol("##4#10"))}, ::Array{Float64,1}, ::Any, ::ODE.TableauRKExplicit{:bogacki_shampine,4,Rational{Int64}}) at runge_kutta.jl:270
└ @ ODE runge_kutta.jl:270
WARNING: Base.e is deprecated, use ℯ (\euler) or `Base.MathConstants.e`.
  likely near /home/vagrant/.julia/v0.7/ODE/test/runtests.jl:63
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #oderk_adapt#13(::Float64, ::Float64, ::Function, ::Float64, ::Any, ::Int64, ::Symbol, ::Function, ::getfield(ODE, Symbol("##11#12")){getfield(, Symbol("##5#11"))}, ::Array{Float64,1}, ::Any, ::ODE.TableauRKExplicit{:bogacki_shampine,4,Rational{Int64}}) at runge_kutta.jl:264
└ @ ODE runge_kutta.jl:264
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #oderk_adapt#13(::Float64, ::Float64, ::Function, ::Float64, ::Any, ::Int64, ::Symbol, ::Function, ::getfield(ODE, Symbol("##11#12")){getfield(, Symbol("##5#11"))}, ::Array{Float64,1}, ::Any, ::ODE.TableauRKExplicit{:bogacki_shampine,4,Rational{Int64}}) at runge_kutta.jl:270
└ @ ODE runge_kutta.jl:270
WARNING: Base.e is deprecated, use ℯ (\euler) or `Base.MathConstants.e`.
  likely near /home/vagrant/.julia/v0.7/ODE/test/runtests.jl:67
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #oderk_adapt#13(::Float64, ::Float64, ::Function, ::Float64, ::Any, ::Int64, ::Symbol, ::Function, ::getfield(, Symbol("##6#12")), ::Array{Float64,1}, ::Any, ::ODE.TableauRKExplicit{:bogacki_shampine,4,Rational{Int64}}) at runge_kutta.jl:264
└ @ ODE runge_kutta.jl:264
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #oderk_adapt#13(::Float64, ::Float64, ::Function, ::Float64, ::Any, ::Int64, ::Symbol, ::Function, ::getfield(, Symbol("##6#12")), ::Array{Float64,1}, ::Any, ::ODE.TableauRKExplicit{:bogacki_shampine,4,Rational{Int64}}) at runge_kutta.jl:270
└ @ ODE runge_kutta.jl:270
┌ Warning: `isleaftype` is deprecated, use `isconcrete` instead.
│   caller = make_consistent_types(::Function, ::Array{BigFloat,1}, ::Array{BigFloat,1}, ::ODE.TableauRKExplicit{:bogacki_shampine,4,Rational{Int64}}) at ODE.jl:159
└ @ ODE ODE.jl:159
┌ Warning: `isleaftype` is deprecated, use `isconcrete` instead.
│   caller = make_consistent_types(::Function, ::Array{BigFloat,1}, ::Array{BigFloat,1}, ::ODE.TableauRKExplicit{:bogacki_shampine,4,Rational{Int64}}) at ODE.jl:160
└ @ ODE ODE.jl:160
┌ Warning: `fieldnames(v)` is deprecated, use `fieldnames(typeof(v))` instead.
│   caller = convert(::Type{BigFloat}, ::ODE.TableauRKExplicit{:bogacki_shampine,4,Rational{Int64}}) at runge_kutta.jl:45
└ @ ODE runge_kutta.jl:45
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #oderk_adapt#13(::Float64, ::Float64, ::Function, ::BigFloat, ::Any, ::Int64, ::Symbol, ::Function, ::getfield(ODE, Symbol("##11#12")){getfield(, Symbol("##1#7"))}, ::Array{BigFloat,1}, ::Any, ::ODE.TableauRKExplicit{:bogacki_shampine,4,Rational{Int64}}) at runge_kutta.jl:264
└ @ ODE runge_kutta.jl:264
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #oderk_adapt#13(::Float64, ::Float64, ::Function, ::BigFloat, ::Any, ::Int64, ::Symbol, ::Function, ::getfield(ODE, Symbol("##11#12")){getfield(, Symbol("##1#7"))}, ::Array{BigFloat,1}, ::Any, ::ODE.TableauRKExplicit{:bogacki_shampine,4,Rational{Int64}}) at runge_kutta.jl:270
└ @ ODE runge_kutta.jl:270
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #oderk_adapt#13(::Float64, ::Float64, ::Function, ::BigFloat, ::Any, ::Int64, ::Symbol, ::Function, ::getfield(ODE, Symbol("##11#12")){getfield(, Symbol("##2#8"))}, ::Array{BigFloat,1}, ::Any, ::ODE.TableauRKExplicit{:bogacki_shampine,4,Rational{Int64}}) at runge_kutta.jl:264
└ @ ODE runge_kutta.jl:264
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #oderk_adapt#13(::Float64, ::Float64, ::Function, ::BigFloat, ::Any, ::Int64, ::Symbol, ::Function, ::getfield(ODE, Symbol("##11#12")){getfield(, Symbol("##2#8"))}, ::Array{BigFloat,1}, ::Any, ::ODE.TableauRKExplicit{:bogacki_shampine,4,Rational{Int64}}) at runge_kutta.jl:270
└ @ ODE runge_kutta.jl:270
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #oderk_adapt#13(::Float64, ::Float64, ::Function, ::BigFloat, ::Any, ::Int64, ::Symbol, ::Function, ::getfield(ODE, Symbol("##11#12")){getfield(, Symbol("##4#10"))}, ::Array{BigFloat,1}, ::Any, ::ODE.TableauRKExplicit{:bogacki_shampine,4,Rational{Int64}}) at runge_kutta.jl:264
└ @ ODE runge_kutta.jl:264
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #oderk_adapt#13(::Float64, ::Float64, ::Function, ::BigFloat, ::Any, ::Int64, ::Symbol, ::Function, ::getfield(ODE, Symbol("##11#12")){getfield(, Symbol("##4#10"))}, ::Array{BigFloat,1}, ::Any, ::ODE.TableauRKExplicit{:bogacki_shampine,4,Rational{Int64}}) at runge_kutta.jl:270
└ @ ODE runge_kutta.jl:270
WARNING: Base.e is deprecated, use ℯ (\euler) or `Base.MathConstants.e`.
  likely near /home/vagrant/.julia/v0.7/ODE/test/runtests.jl:63
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #oderk_adapt#13(::Float64, ::Float64, ::Function, ::BigFloat, ::Any, ::Int64, ::Symbol, ::Function, ::getfield(ODE, Symbol("##11#12")){getfield(, Symbol("##5#11"))}, ::Array{BigFloat,1}, ::Any, ::ODE.TableauRKExplicit{:bogacki_shampine,4,Rational{Int64}}) at runge_kutta.jl:264
└ @ ODE runge_kutta.jl:264
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #oderk_adapt#13(::Float64, ::Float64, ::Function, ::BigFloat, ::Any, ::Int64, ::Symbol, ::Function, ::getfield(ODE, Symbol("##11#12")){getfield(, Symbol("##5#11"))}, ::Array{BigFloat,1}, ::Any, ::ODE.TableauRKExplicit{:bogacki_shampine,4,Rational{Int64}}) at runge_kutta.jl:270
└ @ ODE runge_kutta.jl:270
WARNING: Base.e is deprecated, use ℯ (\euler) or `Base.MathConstants.e`.
  likely near /home/vagrant/.julia/v0.7/ODE/test/runtests.jl:67
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #oderk_adapt#13(::Float64, ::Float64, ::Function, ::BigFloat, ::Any, ::Int64, ::Symbol, ::Function, ::getfield(, Symbol("##6#12")), ::Array{BigFloat,1}, ::Any, ::ODE.TableauRKExplicit{:bogacki_shampine,4,Rational{Int64}}) at runge_kutta.jl:264
└ @ ODE runge_kutta.jl:264
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #oderk_adapt#13(::Float64, ::Float64, ::Function, ::BigFloat, ::Any, ::Int64, ::Symbol, ::Function, ::getfield(, Symbol("##6#12")), ::Array{BigFloat,1}, ::Any, ::ODE.TableauRKExplicit{:bogacki_shampine,4,Rational{Int64}}) at runge_kutta.jl:270
└ @ ODE runge_kutta.jl:270
using ODE.ode45_dp
┌ Warning: `isleaftype` is deprecated, use `isconcrete` instead.
│   caller = make_consistent_types(::Function, ::Array{Float32,1}, ::Array{Float32,1}, ::ODE.TableauRKExplicit{:dopri,7,Rational{Int64}}) at ODE.jl:159
└ @ ODE ODE.jl:159
┌ Warning: `isleaftype` is deprecated, use `isconcrete` instead.
│   caller = make_consistent_types(::Function, ::Array{Float32,1}, ::Array{Float32,1}, ::ODE.TableauRKExplicit{:dopri,7,Rational{Int64}}) at ODE.jl:160
└ @ ODE ODE.jl:160
┌ Warning: `fieldnames(v)` is deprecated, use `fieldnames(typeof(v))` instead.
│   caller = convert(::Type{Float32}, ::ODE.TableauRKExplicit{:dopri,7,Rational{Int64}}) at runge_kutta.jl:45
└ @ ODE runge_kutta.jl:45
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #oderk_adapt#13(::Float64, ::Float64, ::Function, ::Float64, ::Any, ::Int64, ::Symbol, ::Function, ::getfield(ODE, Symbol("##11#12")){getfield(, Symbol("##1#7"))}, ::Array{Float32,1}, ::Any, ::ODE.TableauRKExplicit{:dopri,7,Rational{Int64}}) at runge_kutta.jl:264
└ @ ODE runge_kutta.jl:264
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #oderk_adapt#13(::Float64, ::Float64, ::Function, ::Float64, ::Any, ::Int64, ::Symbol, ::Function, ::getfield(ODE, Symbol("##11#12")){getfield(, Symbol("##1#7"))}, ::Array{Float32,1}, ::Any, ::ODE.TableauRKExplicit{:dopri,7,Rational{Int64}}) at runge_kutta.jl:270
└ @ ODE runge_kutta.jl:270
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #oderk_adapt#13(::Float64, ::Float64, ::Function, ::Float64, ::Any, ::Int64, ::Symbol, ::Function, ::getfield(ODE, Symbol("##11#12")){getfield(, Symbol("##2#8"))}, ::Array{Float32,1}, ::Any, ::ODE.TableauRKExplicit{:dopri,7,Rational{Int64}}) at runge_kutta.jl:264
└ @ ODE runge_kutta.jl:264
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #oderk_adapt#13(::Float64, ::Float64, ::Function, ::Float64, ::Any, ::Int64, ::Symbol, ::Function, ::getfield(ODE, Symbol("##11#12")){getfield(, Symbol("##2#8"))}, ::Array{Float32,1}, ::Any, ::ODE.TableauRKExplicit{:dopri,7,Rational{Int64}}) at runge_kutta.jl:270
└ @ ODE runge_kutta.jl:270
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #oderk_adapt#13(::Float64, ::Float64, ::Function, ::Float64, ::Any, ::Int64, ::Symbol, ::Function, ::getfield(ODE, Symbol("##11#12")){getfield(, Symbol("##4#10"))}, ::Array{Float32,1}, ::Any, ::ODE.TableauRKExplicit{:dopri,7,Rational{Int64}}) at runge_kutta.jl:264
└ @ ODE runge_kutta.jl:264
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #oderk_adapt#13(::Float64, ::Float64, ::Function, ::Float64, ::Any, ::Int64, ::Symbol, ::Function, ::getfield(ODE, Symbol("##11#12")){getfield(, Symbol("##4#10"))}, ::Array{Float32,1}, ::Any, ::ODE.TableauRKExplicit{:dopri,7,Rational{Int64}}) at runge_kutta.jl:270
└ @ ODE runge_kutta.jl:270
WARNING: Base.e is deprecated, use ℯ (\euler) or `Base.MathConstants.e`.
  likely near /home/vagrant/.julia/v0.7/ODE/test/runtests.jl:63
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #oderk_adapt#13(::Float64, ::Float64, ::Function, ::Float64, ::Any, ::Int64, ::Symbol, ::Function, ::getfield(ODE, Symbol("##11#12")){getfield(, Symbol("##5#11"))}, ::Array{Float32,1}, ::Any, ::ODE.TableauRKExplicit{:dopri,7,Rational{Int64}}) at runge_kutta.jl:264
└ @ ODE runge_kutta.jl:264
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #oderk_adapt#13(::Float64, ::Float64, ::Function, ::Float64, ::Any, ::Int64, ::Symbol, ::Function, ::getfield(ODE, Symbol("##11#12")){getfield(, Symbol("##5#11"))}, ::Array{Float32,1}, ::Any, ::ODE.TableauRKExplicit{:dopri,7,Rational{Int64}}) at runge_kutta.jl:270
└ @ ODE runge_kutta.jl:270
WARNING: Base.e is deprecated, use ℯ (\euler) or `Base.MathConstants.e`.
  likely near /home/vagrant/.julia/v0.7/ODE/test/runtests.jl:67
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #oderk_adapt#13(::Float64, ::Float64, ::Function, ::Float64, ::Any, ::Int64, ::Symbol, ::Function, ::getfield(, Symbol("##6#12")), ::Array{Float32,1}, ::Any, ::ODE.TableauRKExplicit{:dopri,7,Rational{Int64}}) at runge_kutta.jl:264
└ @ ODE runge_kutta.jl:264
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #oderk_adapt#13(::Float64, ::Float64, ::Function, ::Float64, ::Any, ::Int64, ::Symbol, ::Function, ::getfield(, Symbol("##6#12")), ::Array{Float32,1}, ::Any, ::ODE.TableauRKExplicit{:dopri,7,Rational{Int64}}) at runge_kutta.jl:270
└ @ ODE runge_kutta.jl:270
┌ Warning: `isleaftype` is deprecated, use `isconcrete` instead.
│   caller = make_consistent_types(::Function, ::Array{Float64,1}, ::Array{Float64,1}, ::ODE.TableauRKExplicit{:dopri,7,Rational{Int64}}) at ODE.jl:159
└ @ ODE ODE.jl:159
┌ Warning: `isleaftype` is deprecated, use `isconcrete` instead.
│   caller = make_consistent_types(::Function, ::Array{Float64,1}, ::Array{Float64,1}, ::ODE.TableauRKExplicit{:dopri,7,Rational{Int64}}) at ODE.jl:160
└ @ ODE ODE.jl:160
┌ Warning: `fieldnames(v)` is deprecated, use `fieldnames(typeof(v))` instead.
│   caller = convert(::Type{Float64}, ::ODE.TableauRKExplicit{:dopri,7,Rational{Int64}}) at runge_kutta.jl:45
└ @ ODE runge_kutta.jl:45
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #oderk_adapt#13(::Float64, ::Float64, ::Function, ::Float64, ::Any, ::Int64, ::Symbol, ::Function, ::getfield(ODE, Symbol("##11#12")){getfield(, Symbol("##1#7"))}, ::Array{Float64,1}, ::Any, ::ODE.TableauRKExplicit{:dopri,7,Rational{Int64}}) at runge_kutta.jl:264
└ @ ODE runge_kutta.jl:264
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #oderk_adapt#13(::Float64, ::Float64, ::Function, ::Float64, ::Any, ::Int64, ::Symbol, ::Function, ::getfield(ODE, Symbol("##11#12")){getfield(, Symbol("##1#7"))}, ::Array{Float64,1}, ::Any, ::ODE.TableauRKExplicit{:dopri,7,Rational{Int64}}) at runge_kutta.jl:270
└ @ ODE runge_kutta.jl:270
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #oderk_adapt#13(::Float64, ::Float64, ::Function, ::Float64, ::Any, ::Int64, ::Symbol, ::Function, ::getfield(ODE, Symbol("##11#12")){getfield(, Symbol("##2#8"))}, ::Array{Float64,1}, ::Any, ::ODE.TableauRKExplicit{:dopri,7,Rational{Int64}}) at runge_kutta.jl:264
└ @ ODE runge_kutta.jl:264
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #oderk_adapt#13(::Float64, ::Float64, ::Function, ::Float64, ::Any, ::Int64, ::Symbol, ::Function, ::getfield(ODE, Symbol("##11#12")){getfield(, Symbol("##2#8"))}, ::Array{Float64,1}, ::Any, ::ODE.TableauRKExplicit{:dopri,7,Rational{Int64}}) at runge_kutta.jl:270
└ @ ODE runge_kutta.jl:270
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #oderk_adapt#13(::Float64, ::Float64, ::Function, ::Float64, ::Any, ::Int64, ::Symbol, ::Function, ::getfield(ODE, Symbol("##11#12")){getfield(, Symbol("##4#10"))}, ::Array{Float64,1}, ::Any, ::ODE.TableauRKExplicit{:dopri,7,Rational{Int64}}) at runge_kutta.jl:264
└ @ ODE runge_kutta.jl:264
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #oderk_adapt#13(::Float64, ::Float64, ::Function, ::Float64, ::Any, ::Int64, ::Symbol, ::Function, ::getfield(ODE, Symbol("##11#12")){getfield(, Symbol("##4#10"))}, ::Array{Float64,1}, ::Any, ::ODE.TableauRKExplicit{:dopri,7,Rational{Int64}}) at runge_kutta.jl:270
└ @ ODE runge_kutta.jl:270
WARNING: Base.e is deprecated, use ℯ (\euler) or `Base.MathConstants.e`.
  likely near /home/vagrant/.julia/v0.7/ODE/test/runtests.jl:63
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #oderk_adapt#13(::Float64, ::Float64, ::Function, ::Float64, ::Any, ::Int64, ::Symbol, ::Function, ::getfield(ODE, Symbol("##11#12")){getfield(, Symbol("##5#11"))}, ::Array{Float64,1}, ::Any, ::ODE.TableauRKExplicit{:dopri,7,Rational{Int64}}) at runge_kutta.jl:264
└ @ ODE runge_kutta.jl:264
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #oderk_adapt#13(::Float64, ::Float64, ::Function, ::Float64, ::Any, ::Int64, ::Symbol, ::Function, ::getfield(ODE, Symbol("##11#12")){getfield(, Symbol("##5#11"))}, ::Array{Float64,1}, ::Any, ::ODE.TableauRKExplicit{:dopri,7,Rational{Int64}}) at runge_kutta.jl:270
└ @ ODE runge_kutta.jl:270
WARNING: Base.e is deprecated, use ℯ (\euler) or `Base.MathConstants.e`.
  likely near /home/vagrant/.julia/v0.7/ODE/test/runtests.jl:67
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #oderk_adapt#13(::Float64, ::Float64, ::Function, ::Float64, ::Any, ::Int64, ::Symbol, ::Function, ::getfield(, Symbol("##6#12")), ::Array{Float64,1}, ::Any, ::ODE.TableauRKExplicit{:dopri,7,Rational{Int64}}) at runge_kutta.jl:264
└ @ ODE runge_kutta.jl:264
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #oderk_adapt#13(::Float64, ::Float64, ::Function, ::Float64, ::Any, ::Int64, ::Symbol, ::Function, ::getfield(, Symbol("##6#12")), ::Array{Float64,1}, ::Any, ::ODE.TableauRKExplicit{:dopri,7,Rational{Int64}}) at runge_kutta.jl:270
└ @ ODE runge_kutta.jl:270
┌ Warning: `isleaftype` is deprecated, use `isconcrete` instead.
│   caller = make_consistent_types(::Function, ::Array{BigFloat,1}, ::Array{BigFloat,1}, ::ODE.TableauRKExplicit{:dopri,7,Rational{Int64}}) at ODE.jl:159
└ @ ODE ODE.jl:159
┌ Warning: `isleaftype` is deprecated, use `isconcrete` instead.
│   caller = make_consistent_types(::Function, ::Array{BigFloat,1}, ::Array{BigFloat,1}, ::ODE.TableauRKExplicit{:dopri,7,Rational{Int64}}) at ODE.jl:160
└ @ ODE ODE.jl:160
┌ Warning: `fieldnames(v)` is deprecated, use `fieldnames(typeof(v))` instead.
│   caller = convert(::Type{BigFloat}, ::ODE.TableauRKExplicit{:dopri,7,Rational{Int64}}) at runge_kutta.jl:45
└ @ ODE runge_kutta.jl:45
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #oderk_adapt#13(::Float64, ::Float64, ::Function, ::BigFloat, ::Any, ::Int64, ::Symbol, ::Function, ::getfield(ODE, Symbol("##11#12")){getfield(, Symbol("##1#7"))}, ::Array{BigFloat,1}, ::Any, ::ODE.TableauRKExplicit{:dopri,7,Rational{Int64}}) at runge_kutta.jl:264
└ @ ODE runge_kutta.jl:264
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #oderk_adapt#13(::Float64, ::Float64, ::Function, ::BigFloat, ::Any, ::Int64, ::Symbol, ::Function, ::getfield(ODE, Symbol("##11#12")){getfield(, Symbol("##1#7"))}, ::Array{BigFloat,1}, ::Any, ::ODE.TableauRKExplicit{:dopri,7,Rational{Int64}}) at runge_kutta.jl:270
└ @ ODE runge_kutta.jl:270
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #oderk_adapt#13(::Float64, ::Float64, ::Function, ::BigFloat, ::Any, ::Int64, ::Symbol, ::Function, ::getfield(ODE, Symbol("##11#12")){getfield(, Symbol("##2#8"))}, ::Array{BigFloat,1}, ::Any, ::ODE.TableauRKExplicit{:dopri,7,Rational{Int64}}) at runge_kutta.jl:264
└ @ ODE runge_kutta.jl:264
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #oderk_adapt#13(::Float64, ::Float64, ::Function, ::BigFloat, ::Any, ::Int64, ::Symbol, ::Function, ::getfield(ODE, Symbol("##11#12")){getfield(, Symbol("##2#8"))}, ::Array{BigFloat,1}, ::Any, ::ODE.TableauRKExplicit{:dopri,7,Rational{Int64}}) at runge_kutta.jl:270
└ @ ODE runge_kutta.jl:270
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #oderk_adapt#13(::Float64, ::Float64, ::Function, ::BigFloat, ::Any, ::Int64, ::Symbol, ::Function, ::getfield(ODE, Symbol("##11#12")){getfield(, Symbol("##4#10"))}, ::Array{BigFloat,1}, ::Any, ::ODE.TableauRKExplicit{:dopri,7,Rational{Int64}}) at runge_kutta.jl:264
└ @ ODE runge_kutta.jl:264
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #oderk_adapt#13(::Float64, ::Float64, ::Function, ::BigFloat, ::Any, ::Int64, ::Symbol, ::Function, ::getfield(ODE, Symbol("##11#12")){getfield(, Symbol("##4#10"))}, ::Array{BigFloat,1}, ::Any, ::ODE.TableauRKExplicit{:dopri,7,Rational{Int64}}) at runge_kutta.jl:270
└ @ ODE runge_kutta.jl:270
WARNING: Base.e is deprecated, use ℯ (\euler) or `Base.MathConstants.e`.
  likely near /home/vagrant/.julia/v0.7/ODE/test/runtests.jl:63
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #oderk_adapt#13(::Float64, ::Float64, ::Function, ::BigFloat, ::Any, ::Int64, ::Symbol, ::Function, ::getfield(ODE, Symbol("##11#12")){getfield(, Symbol("##5#11"))}, ::Array{BigFloat,1}, ::Any, ::ODE.TableauRKExplicit{:dopri,7,Rational{Int64}}) at runge_kutta.jl:264
└ @ ODE runge_kutta.jl:264
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #oderk_adapt#13(::Float64, ::Float64, ::Function, ::BigFloat, ::Any, ::Int64, ::Symbol, ::Function, ::getfield(ODE, Symbol("##11#12")){getfield(, Symbol("##5#11"))}, ::Array{BigFloat,1}, ::Any, ::ODE.TableauRKExplicit{:dopri,7,Rational{Int64}}) at runge_kutta.jl:270
└ @ ODE runge_kutta.jl:270
WARNING: Base.e is deprecated, use ℯ (\euler) or `Base.MathConstants.e`.
  likely near /home/vagrant/.julia/v0.7/ODE/test/runtests.jl:67
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #oderk_adapt#13(::Float64, ::Float64, ::Function, ::BigFloat, ::Any, ::Int64, ::Symbol, ::Function, ::getfield(, Symbol("##6#12")), ::Array{BigFloat,1}, ::Any, ::ODE.TableauRKExplicit{:dopri,7,Rational{Int64}}) at runge_kutta.jl:264
└ @ ODE runge_kutta.jl:264
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #oderk_adapt#13(::Float64, ::Float64, ::Function, ::BigFloat, ::Any, ::Int64, ::Symbol, ::Function, ::getfield(, Symbol("##6#12")), ::Array{BigFloat,1}, ::Any, ::ODE.TableauRKExplicit{:dopri,7,Rational{Int64}}) at runge_kutta.jl:270
└ @ ODE runge_kutta.jl:270
using ODE.ode45_fe
┌ Warning: `isleaftype` is deprecated, use `isconcrete` instead.
│   caller = make_consistent_types(::Function, ::Array{Float64,1}, ::Array{Float64,1}, ::ODE.TableauRKExplicit{:fehlberg,6,Rational{Int64}}) at ODE.jl:159
└ @ ODE ODE.jl:159
┌ Warning: `isleaftype` is deprecated, use `isconcrete` instead.
│   caller = make_consistent_types(::Function, ::Array{Float64,1}, ::Array{Float64,1}, ::ODE.TableauRKExplicit{:fehlberg,6,Rational{Int64}}) at ODE.jl:160
└ @ ODE ODE.jl:160
┌ Warning: `fieldnames(v)` is deprecated, use `fieldnames(typeof(v))` instead.
│   caller = convert(::Type{Float64}, ::ODE.TableauRKExplicit{:fehlberg,6,Rational{Int64}}) at runge_kutta.jl:45
└ @ ODE runge_kutta.jl:45
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #oderk_adapt#13(::Float64, ::Float64, ::Function, ::Float64, ::Any, ::Int64, ::Symbol, ::Function, ::getfield(ODE, Symbol("##11#12")){getfield(, Symbol("##1#7"))}, ::Array{Float64,1}, ::Any, ::ODE.TableauRKExplicit{:fehlberg,6,Rational{Int64}}) at runge_kutta.jl:264
└ @ ODE runge_kutta.jl:264
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #oderk_adapt#13(::Float64, ::Float64, ::Function, ::Float64, ::Any, ::Int64, ::Symbol, ::Function, ::getfield(ODE, Symbol("##11#12")){getfield(, Symbol("##1#7"))}, ::Array{Float64,1}, ::Any, ::ODE.TableauRKExplicit{:fehlberg,6,Rational{Int64}}) at runge_kutta.jl:270
└ @ ODE runge_kutta.jl:270
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #oderk_adapt#13(::Float64, ::Float64, ::Function, ::Float64, ::Any, ::Int64, ::Symbol, ::Function, ::getfield(ODE, Symbol("##11#12")){getfield(, Symbol("##2#8"))}, ::Array{Float64,1}, ::Any, ::ODE.TableauRKExplicit{:fehlberg,6,Rational{Int64}}) at runge_kutta.jl:264
└ @ ODE runge_kutta.jl:264
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #oderk_adapt#13(::Float64, ::Float64, ::Function, ::Float64, ::Any, ::Int64, ::Symbol, ::Function, ::getfield(ODE, Symbol("##11#12")){getfield(, Symbol("##2#8"))}, ::Array{Float64,1}, ::Any, ::ODE.TableauRKExplicit{:fehlberg,6,Rational{Int64}}) at runge_kutta.jl:270
└ @ ODE runge_kutta.jl:270
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #oderk_adapt#13(::Float64, ::Float64, ::Function, ::Float64, ::Any, ::Int64, ::Symbol, ::Function, ::getfield(ODE, Symbol("##11#12")){getfield(, Symbol("##4#10"))}, ::Array{Float64,1}, ::Any, ::ODE.TableauRKExplicit{:fehlberg,6,Rational{Int64}}) at runge_kutta.jl:264
└ @ ODE runge_kutta.jl:264
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #oderk_adapt#13(::Float64, ::Float64, ::Function, ::Float64, ::Any, ::Int64, ::Symbol, ::Function, ::getfield(ODE, Symbol("##11#12")){getfield(, Symbol("##4#10"))}, ::Array{Float64,1}, ::Any, ::ODE.TableauRKExplicit{:fehlberg,6,Rational{Int64}}) at runge_kutta.jl:270
└ @ ODE runge_kutta.jl:270
WARNING: Base.e is deprecated, use ℯ (\euler) or `Base.MathConstants.e`.
  likely near /home/vagrant/.julia/v0.7/ODE/test/runtests.jl:63
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #oderk_adapt#13(::Float64, ::Float64, ::Function, ::Float64, ::Any, ::Int64, ::Symbol, ::Function, ::getfield(ODE, Symbol("##11#12")){getfield(, Symbol("##5#11"))}, ::Array{Float64,1}, ::Any, ::ODE.TableauRKExplicit{:fehlberg,6,Rational{Int64}}) at runge_kutta.jl:264
└ @ ODE runge_kutta.jl:264
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #oderk_adapt#13(::Float64, ::Float64, ::Function, ::Float64, ::Any, ::Int64, ::Symbol, ::Function, ::getfield(ODE, Symbol("##11#12")){getfield(, Symbol("##5#11"))}, ::Array{Float64,1}, ::Any, ::ODE.TableauRKExplicit{:fehlberg,6,Rational{Int64}}) at runge_kutta.jl:270
└ @ ODE runge_kutta.jl:270
WARNING: Base.e is deprecated, use ℯ (\euler) or `Base.MathConstants.e`.
  likely near /home/vagrant/.julia/v0.7/ODE/test/runtests.jl:67
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #oderk_adapt#13(::Float64, ::Float64, ::Function, ::Float64, ::Any, ::Int64, ::Symbol, ::Function, ::getfield(, Symbol("##6#12")), ::Array{Float64,1}, ::Any, ::ODE.TableauRKExplicit{:fehlberg,6,Rational{Int64}}) at runge_kutta.jl:264
└ @ ODE runge_kutta.jl:264
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #oderk_adapt#13(::Float64, ::Float64, ::Function, ::Float64, ::Any, ::Int64, ::Symbol, ::Function, ::getfield(, Symbol("##6#12")), ::Array{Float64,1}, ::Any, ::ODE.TableauRKExplicit{:fehlberg,6,Rational{Int64}}) at runge_kutta.jl:270
└ @ ODE runge_kutta.jl:270
┌ Warning: `isleaftype` is deprecated, use `isconcrete` instead.
│   caller = make_consistent_types(::Function, ::Array{BigFloat,1}, ::Array{BigFloat,1}, ::ODE.TableauRKExplicit{:fehlberg,6,Rational{Int64}}) at ODE.jl:159
└ @ ODE ODE.jl:159
┌ Warning: `isleaftype` is deprecated, use `isconcrete` instead.
│   caller = make_consistent_types(::Function, ::Array{BigFloat,1}, ::Array{BigFloat,1}, ::ODE.TableauRKExplicit{:fehlberg,6,Rational{Int64}}) at ODE.jl:160
└ @ ODE ODE.jl:160
┌ Warning: `fieldnames(v)` is deprecated, use `fieldnames(typeof(v))` instead.
│   caller = convert(::Type{BigFloat}, ::ODE.TableauRKExplicit{:fehlberg,6,Rational{Int64}}) at runge_kutta.jl:45
└ @ ODE runge_kutta.jl:45
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #oderk_adapt#13(::Float64, ::Float64, ::Function, ::BigFloat, ::Any, ::Int64, ::Symbol, ::Function, ::getfield(ODE, Symbol("##11#12")){getfield(, Symbol("##1#7"))}, ::Array{BigFloat,1}, ::Any, ::ODE.TableauRKExplicit{:fehlberg,6,Rational{Int64}}) at runge_kutta.jl:264
└ @ ODE runge_kutta.jl:264
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #oderk_adapt#13(::Float64, ::Float64, ::Function, ::BigFloat, ::Any, ::Int64, ::Symbol, ::Function, ::getfield(ODE, Symbol("##11#12")){getfield(, Symbol("##1#7"))}, ::Array{BigFloat,1}, ::Any, ::ODE.TableauRKExplicit{:fehlberg,6,Rational{Int64}}) at runge_kutta.jl:270
└ @ ODE runge_kutta.jl:270
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #oderk_adapt#13(::Float64, ::Float64, ::Function, ::BigFloat, ::Any, ::Int64, ::Symbol, ::Function, ::getfield(ODE, Symbol("##11#12")){getfield(, Symbol("##2#8"))}, ::Array{BigFloat,1}, ::Any, ::ODE.TableauRKExplicit{:fehlberg,6,Rational{Int64}}) at runge_kutta.jl:264
└ @ ODE runge_kutta.jl:264
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #oderk_adapt#13(::Float64, ::Float64, ::Function, ::BigFloat, ::Any, ::Int64, ::Symbol, ::Function, ::getfield(ODE, Symbol("##11#12")){getfield(, Symbol("##2#8"))}, ::Array{BigFloat,1}, ::Any, ::ODE.TableauRKExplicit{:fehlberg,6,Rational{Int64}}) at runge_kutta.jl:270
└ @ ODE runge_kutta.jl:270
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #oderk_adapt#13(::Float64, ::Float64, ::Function, ::BigFloat, ::Any, ::Int64, ::Symbol, ::Function, ::getfield(ODE, Symbol("##11#12")){getfield(, Symbol("##4#10"))}, ::Array{BigFloat,1}, ::Any, ::ODE.TableauRKExplicit{:fehlberg,6,Rational{Int64}}) at runge_kutta.jl:264
└ @ ODE runge_kutta.jl:264
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #oderk_adapt#13(::Float64, ::Float64, ::Function, ::BigFloat, ::Any, ::Int64, ::Symbol, ::Function, ::getfield(ODE, Symbol("##11#12")){getfield(, Symbol("##4#10"))}, ::Array{BigFloat,1}, ::Any, ::ODE.TableauRKExplicit{:fehlberg,6,Rational{Int64}}) at runge_kutta.jl:270
└ @ ODE runge_kutta.jl:270
WARNING: Base.e is deprecated, use ℯ (\euler) or `Base.MathConstants.e`.
  likely near /home/vagrant/.julia/v0.7/ODE/test/runtests.jl:63
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #oderk_adapt#13(::Float64, ::Float64, ::Function, ::BigFloat, ::Any, ::Int64, ::Symbol, ::Function, ::getfield(ODE, Symbol("##11#12")){getfield(, Symbol("##5#11"))}, ::Array{BigFloat,1}, ::Any, ::ODE.TableauRKExplicit{:fehlberg,6,Rational{Int64}}) at runge_kutta.jl:264
└ @ ODE runge_kutta.jl:264
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #oderk_adapt#13(::Float64, ::Float64, ::Function, ::BigFloat, ::Any, ::Int64, ::Symbol, ::Function, ::getfield(ODE, Symbol("##11#12")){getfield(, Symbol("##5#11"))}, ::Array{BigFloat,1}, ::Any, ::ODE.TableauRKExplicit{:fehlberg,6,Rational{Int64}}) at runge_kutta.jl:270
└ @ ODE runge_kutta.jl:270
WARNING: Base.e is deprecated, use ℯ (\euler) or `Base.MathConstants.e`.
  likely near /home/vagrant/.julia/v0.7/ODE/test/runtests.jl:67
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #oderk_adapt#13(::Float64, ::Float64, ::Function, ::BigFloat, ::Any, ::Int64, ::Symbol, ::Function, ::getfield(, Symbol("##6#12")), ::Array{BigFloat,1}, ::Any, ::ODE.TableauRKExplicit{:fehlberg,6,Rational{Int64}}) at runge_kutta.jl:264
└ @ ODE runge_kutta.jl:264
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #oderk_adapt#13(::Float64, ::Float64, ::Function, ::BigFloat, ::Any, ::Int64, ::Symbol, ::Function, ::getfield(, Symbol("##6#12")), ::Array{BigFloat,1}, ::Any, ::ODE.TableauRKExplicit{:fehlberg,6,Rational{Int64}}) at runge_kutta.jl:270
└ @ ODE runge_kutta.jl:270
using ode78
┌ Warning: `isleaftype` is deprecated, use `isconcrete` instead.
│   caller = make_consistent_types(::Function, ::Array{Float32,1}, ::Array{Float32,1}, ::ODE.TableauRKExplicit{:feh78,13,Rational{Int64}}) at ODE.jl:159
└ @ ODE ODE.jl:159
┌ Warning: `isleaftype` is deprecated, use `isconcrete` instead.
│   caller = make_consistent_types(::Function, ::Array{Float32,1}, ::Array{Float32,1}, ::ODE.TableauRKExplicit{:feh78,13,Rational{Int64}}) at ODE.jl:160
└ @ ODE ODE.jl:160
┌ Warning: `fieldnames(v)` is deprecated, use `fieldnames(typeof(v))` instead.
│   caller = convert(::Type{Float32}, ::ODE.TableauRKExplicit{:feh78,13,Rational{Int64}}) at runge_kutta.jl:45
└ @ ODE runge_kutta.jl:45
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #oderk_adapt#13(::Float64, ::Float64, ::Function, ::Float64, ::Any, ::Int64, ::Symbol, ::Function, ::getfield(ODE, Symbol("##11#12")){getfield(, Symbol("##1#7"))}, ::Array{Float32,1}, ::Any, ::ODE.TableauRKExplicit{:feh78,13,Rational{Int64}}) at runge_kutta.jl:264
└ @ ODE runge_kutta.jl:264
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #oderk_adapt#13(::Float64, ::Float64, ::Function, ::Float64, ::Any, ::Int64, ::Symbol, ::Function, ::getfield(ODE, Symbol("##11#12")){getfield(, Symbol("##1#7"))}, ::Array{Float32,1}, ::Any, ::ODE.TableauRKExplicit{:feh78,13,Rational{Int64}}) at runge_kutta.jl:270
└ @ ODE runge_kutta.jl:270
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #oderk_adapt#13(::Float64, ::Float64, ::Function, ::Float64, ::Any, ::Int64, ::Symbol, ::Function, ::getfield(ODE, Symbol("##11#12")){getfield(, Symbol("##2#8"))}, ::Array{Float32,1}, ::Any, ::ODE.TableauRKExplicit{:feh78,13,Rational{Int64}}) at runge_kutta.jl:264
└ @ ODE runge_kutta.jl:264
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #oderk_adapt#13(::Float64, ::Float64, ::Function, ::Float64, ::Any, ::Int64, ::Symbol, ::Function, ::getfield(ODE, Symbol("##11#12")){getfield(, Symbol("##2#8"))}, ::Array{Float32,1}, ::Any, ::ODE.TableauRKExplicit{:feh78,13,Rational{Int64}}) at runge_kutta.jl:270
└ @ ODE runge_kutta.jl:270
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #oderk_adapt#13(::Float64, ::Float64, ::Function, ::Float64, ::Any, ::Int64, ::Symbol, ::Function, ::getfield(ODE, Symbol("##11#12")){getfield(, Symbol("##4#10"))}, ::Array{Float32,1}, ::Any, ::ODE.TableauRKExplicit{:feh78,13,Rational{Int64}}) at runge_kutta.jl:264
└ @ ODE runge_kutta.jl:264
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #oderk_adapt#13(::Float64, ::Float64, ::Function, ::Float64, ::Any, ::Int64, ::Symbol, ::Function, ::getfield(ODE, Symbol("##11#12")){getfield(, Symbol("##4#10"))}, ::Array{Float32,1}, ::Any, ::ODE.TableauRKExplicit{:feh78,13,Rational{Int64}}) at runge_kutta.jl:270
└ @ ODE runge_kutta.jl:270
WARNING: Base.e is deprecated, use ℯ (\euler) or `Base.MathConstants.e`.
  likely near /home/vagrant/.julia/v0.7/ODE/test/runtests.jl:63
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #oderk_adapt#13(::Float64, ::Float64, ::Function, ::Float64, ::Any, ::Int64, ::Symbol, ::Function, ::getfield(ODE, Symbol("##11#12")){getfield(, Symbol("##5#11"))}, ::Array{Float32,1}, ::Any, ::ODE.TableauRKExplicit{:feh78,13,Rational{Int64}}) at runge_kutta.jl:264
└ @ ODE runge_kutta.jl:264
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #oderk_adapt#13(::Float64, ::Float64, ::Function, ::Float64, ::Any, ::Int64, ::Symbol, ::Function, ::getfield(ODE, Symbol("##11#12")){getfield(, Symbol("##5#11"))}, ::Array{Float32,1}, ::Any, ::ODE.TableauRKExplicit{:feh78,13,Rational{Int64}}) at runge_kutta.jl:270
└ @ ODE runge_kutta.jl:270
WARNING: Base.e is deprecated, use ℯ (\euler) or `Base.MathConstants.e`.
  likely near /home/vagrant/.julia/v0.7/ODE/test/runtests.jl:67
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #oderk_adapt#13(::Float64, ::Float64, ::Function, ::Float64, ::Any, ::Int64, ::Symbol, ::Function, ::getfield(, Symbol("##6#12")), ::Array{Float32,1}, ::Any, ::ODE.TableauRKExplicit{:feh78,13,Rational{Int64}}) at runge_kutta.jl:264
└ @ ODE runge_kutta.jl:264
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #oderk_adapt#13(::Float64, ::Float64, ::Function, ::Float64, ::Any, ::Int64, ::Symbol, ::Function, ::getfield(, Symbol("##6#12")), ::Array{Float32,1}, ::Any, ::ODE.TableauRKExplicit{:feh78,13,Rational{Int64}}) at runge_kutta.jl:270
└ @ ODE runge_kutta.jl:270
┌ Warning: `isleaftype` is deprecated, use `isconcrete` instead.
│   caller = make_consistent_types(::Function, ::Array{Float64,1}, ::Array{Float64,1}, ::ODE.TableauRKExplicit{:feh78,13,Rational{Int64}}) at ODE.jl:159
└ @ ODE ODE.jl:159
┌ Warning: `isleaftype` is deprecated, use `isconcrete` instead.
│   caller = make_consistent_types(::Function, ::Array{Float64,1}, ::Array{Float64,1}, ::ODE.TableauRKExplicit{:feh78,13,Rational{Int64}}) at ODE.jl:160
└ @ ODE ODE.jl:160
┌ Warning: `fieldnames(v)` is deprecated, use `fieldnames(typeof(v))` instead.
│   caller = convert(::Type{Float64}, ::ODE.TableauRKExplicit{:feh78,13,Rational{Int64}}) at runge_kutta.jl:45
└ @ ODE runge_kutta.jl:45
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #oderk_adapt#13(::Float64, ::Float64, ::Function, ::Float64, ::Any, ::Int64, ::Symbol, ::Function, ::getfield(ODE, Symbol("##11#12")){getfield(, Symbol("##1#7"))}, ::Array{Float64,1}, ::Any, ::ODE.TableauRKExplicit{:feh78,13,Rational{Int64}}) at runge_kutta.jl:264
└ @ ODE runge_kutta.jl:264
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #oderk_adapt#13(::Float64, ::Float64, ::Function, ::Float64, ::Any, ::Int64, ::Symbol, ::Function, ::getfield(ODE, Symbol("##11#12")){getfield(, Symbol("##1#7"))}, ::Array{Float64,1}, ::Any, ::ODE.TableauRKExplicit{:feh78,13,Rational{Int64}}) at runge_kutta.jl:270
└ @ ODE runge_kutta.jl:270
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #oderk_adapt#13(::Float64, ::Float64, ::Function, ::Float64, ::Any, ::Int64, ::Symbol, ::Function, ::getfield(ODE, Symbol("##11#12")){getfield(, Symbol("##2#8"))}, ::Array{Float64,1}, ::Any, ::ODE.TableauRKExplicit{:feh78,13,Rational{Int64}}) at runge_kutta.jl:264
└ @ ODE runge_kutta.jl:264
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #oderk_adapt#13(::Float64, ::Float64, ::Function, ::Float64, ::Any, ::Int64, ::Symbol, ::Function, ::getfield(ODE, Symbol("##11#12")){getfield(, Symbol("##2#8"))}, ::Array{Float64,1}, ::Any, ::ODE.TableauRKExplicit{:feh78,13,Rational{Int64}}) at runge_kutta.jl:270
└ @ ODE runge_kutta.jl:270
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #oderk_adapt#13(::Float64, ::Float64, ::Function, ::Float64, ::Any, ::Int64, ::Symbol, ::Function, ::getfield(ODE, Symbol("##11#12")){getfield(, Symbol("##4#10"))}, ::Array{Float64,1}, ::Any, ::ODE.TableauRKExplicit{:feh78,13,Rational{Int64}}) at runge_kutta.jl:264
└ @ ODE runge_kutta.jl:264
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #oderk_adapt#13(::Float64, ::Float64, ::Function, ::Float64, ::Any, ::Int64, ::Symbol, ::Function, ::getfield(ODE, Symbol("##11#12")){getfield(, Symbol("##4#10"))}, ::Array{Float64,1}, ::Any, ::ODE.TableauRKExplicit{:feh78,13,Rational{Int64}}) at runge_kutta.jl:270
└ @ ODE runge_kutta.jl:270
WARNING: Base.e is deprecated, use ℯ (\euler) or `Base.MathConstants.e`.
  likely near /home/vagrant/.julia/v0.7/ODE/test/runtests.jl:63
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #oderk_adapt#13(::Float64, ::Float64, ::Function, ::Float64, ::Any, ::Int64, ::Symbol, ::Function, ::getfield(ODE, Symbol("##11#12")){getfield(, Symbol("##5#11"))}, ::Array{Float64,1}, ::Any, ::ODE.TableauRKExplicit{:feh78,13,Rational{Int64}}) at runge_kutta.jl:264
└ @ ODE runge_kutta.jl:264
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #oderk_adapt#13(::Float64, ::Float64, ::Function, ::Float64, ::Any, ::Int64, ::Symbol, ::Function, ::getfield(ODE, Symbol("##11#12")){getfield(, Symbol("##5#11"))}, ::Array{Float64,1}, ::Any, ::ODE.TableauRKExplicit{:feh78,13,Rational{Int64}}) at runge_kutta.jl:270
└ @ ODE runge_kutta.jl:270
WARNING: Base.e is deprecated, use ℯ (\euler) or `Base.MathConstants.e`.
  likely near /home/vagrant/.julia/v0.7/ODE/test/runtests.jl:67
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #oderk_adapt#13(::Float64, ::Float64, ::Function, ::Float64, ::Any, ::Int64, ::Symbol, ::Function, ::getfield(, Symbol("##6#12")), ::Array{Float64,1}, ::Any, ::ODE.TableauRKExplicit{:feh78,13,Rational{Int64}}) at runge_kutta.jl:264
└ @ ODE runge_kutta.jl:264
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #oderk_adapt#13(::Float64, ::Float64, ::Function, ::Float64, ::Any, ::Int64, ::Symbol, ::Function, ::getfield(, Symbol("##6#12")), ::Array{Float64,1}, ::Any, ::ODE.TableauRKExplicit{:feh78,13,Rational{Int64}}) at runge_kutta.jl:270
└ @ ODE runge_kutta.jl:270
┌ Warning: `isleaftype` is deprecated, use `isconcrete` instead.
│   caller = make_consistent_types(::Function, ::Array{BigFloat,1}, ::Array{BigFloat,1}, ::ODE.TableauRKExplicit{:feh78,13,Rational{Int64}}) at ODE.jl:159
└ @ ODE ODE.jl:159
┌ Warning: `isleaftype` is deprecated, use `isconcrete` instead.
│   caller = make_consistent_types(::Function, ::Array{BigFloat,1}, ::Array{BigFloat,1}, ::ODE.TableauRKExplicit{:feh78,13,Rational{Int64}}) at ODE.jl:160
└ @ ODE ODE.jl:160
┌ Warning: `fieldnames(v)` is deprecated, use `fieldnames(typeof(v))` instead.
│   caller = convert(::Type{BigFloat}, ::ODE.TableauRKExplicit{:feh78,13,Rational{Int64}}) at runge_kutta.jl:45
└ @ ODE runge_kutta.jl:45
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #oderk_adapt#13(::Float64, ::Float64, ::Function, ::BigFloat, ::Any, ::Int64, ::Symbol, ::Function, ::getfield(ODE, Symbol("##11#12")){getfield(, Symbol("##1#7"))}, ::Array{BigFloat,1}, ::Any, ::ODE.TableauRKExplicit{:feh78,13,Rational{Int64}}) at runge_kutta.jl:264
└ @ ODE runge_kutta.jl:264
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #oderk_adapt#13(::Float64, ::Float64, ::Function, ::BigFloat, ::Any, ::Int64, ::Symbol, ::Function, ::getfield(ODE, Symbol("##11#12")){getfield(, Symbol("##1#7"))}, ::Array{BigFloat,1}, ::Any, ::ODE.TableauRKExplicit{:feh78,13,Rational{Int64}}) at runge_kutta.jl:270
└ @ ODE runge_kutta.jl:270
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #oderk_adapt#13(::Float64, ::Float64, ::Function, ::BigFloat, ::Any, ::Int64, ::Symbol, ::Function, ::getfield(ODE, Symbol("##11#12")){getfield(, Symbol("##2#8"))}, ::Array{BigFloat,1}, ::Any, ::ODE.TableauRKExplicit{:feh78,13,Rational{Int64}}) at runge_kutta.jl:264
└ @ ODE runge_kutta.jl:264
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #oderk_adapt#13(::Float64, ::Float64, ::Function, ::BigFloat, ::Any, ::Int64, ::Symbol, ::Function, ::getfield(ODE, Symbol("##11#12")){getfield(, Symbol("##2#8"))}, ::Array{BigFloat,1}, ::Any, ::ODE.TableauRKExplicit{:feh78,13,Rational{Int64}}) at runge_kutta.jl:270
└ @ ODE runge_kutta.jl:270
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #oderk_adapt#13(::Float64, ::Float64, ::Function, ::BigFloat, ::Any, ::Int64, ::Symbol, ::Function, ::getfield(ODE, Symbol("##11#12")){getfield(, Symbol("##4#10"))}, ::Array{BigFloat,1}, ::Any, ::ODE.TableauRKExplicit{:feh78,13,Rational{Int64}}) at runge_kutta.jl:264
└ @ ODE runge_kutta.jl:264
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #oderk_adapt#13(::Float64, ::Float64, ::Function, ::BigFloat, ::Any, ::Int64, ::Symbol, ::Function, ::getfield(ODE, Symbol("##11#12")){getfield(, Symbol("##4#10"))}, ::Array{BigFloat,1}, ::Any, ::ODE.TableauRKExplicit{:feh78,13,Rational{Int64}}) at runge_kutta.jl:270
└ @ ODE runge_kutta.jl:270
WARNING: Base.e is deprecated, use ℯ (\euler) or `Base.MathConstants.e`.
  likely near /home/vagrant/.julia/v0.7/ODE/test/runtests.jl:63
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #oderk_adapt#13(::Float64, ::Float64, ::Function, ::BigFloat, ::Any, ::Int64, ::Symbol, ::Function, ::getfield(ODE, Symbol("##11#12")){getfield(, Symbol("##5#11"))}, ::Array{BigFloat,1}, ::Any, ::ODE.TableauRKExplicit{:feh78,13,Rational{Int64}}) at runge_kutta.jl:264
└ @ ODE runge_kutta.jl:264
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #oderk_adapt#13(::Float64, ::Float64, ::Function, ::BigFloat, ::Any, ::Int64, ::Symbol, ::Function, ::getfield(ODE, Symbol("##11#12")){getfield(, Symbol("##5#11"))}, ::Array{BigFloat,1}, ::Any, ::ODE.TableauRKExplicit{:feh78,13,Rational{Int64}}) at runge_kutta.jl:270
└ @ ODE runge_kutta.jl:270
WARNING: Base.e is deprecated, use ℯ (\euler) or `Base.MathConstants.e`.
  likely near /home/vagrant/.julia/v0.7/ODE/test/runtests.jl:67
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #oderk_adapt#13(::Float64, ::Float64, ::Function, ::BigFloat, ::Any, ::Int64, ::Symbol, ::Function, ::getfield(, Symbol("##6#12")), ::Array{BigFloat,1}, ::Any, ::ODE.TableauRKExplicit{:feh78,13,Rational{Int64}}) at runge_kutta.jl:264
└ @ ODE runge_kutta.jl:264
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #oderk_adapt#13(::Float64, ::Float64, ::Function, ::BigFloat, ::Any, ::Int64, ::Symbol, ::Function, ::getfield(, Symbol("##6#12")), ::Array{BigFloat,1}, ::Any, ::ODE.TableauRKExplicit{:feh78,13,Rational{Int64}}) at runge_kutta.jl:270
└ @ ODE runge_kutta.jl:270
using ODE.ode4s_s
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #oderosenbrock#28(::Nothing, ::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::getfield(, Symbol("##1#7")), ::Float32, ::Array{Float32,1}, ::Float64, ::Array{Float64,2}, ::Array{Float64,2}, ::Array{Float64,2}) at ODE.jl:376
└ @ ODE ODE.jl:376
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #oderosenbrock#28(::Nothing, ::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::getfield(, Symbol("##1#7")), ::Float32, ::Array{Float32,1}, ::Float64, ::Array{Float64,2}, ::Array{Float64,2}, ::Array{Float64,2}) at ODE.jl:388
└ @ ODE ODE.jl:388
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #oderosenbrock#28(::Nothing, ::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::getfield(, Symbol("##2#8")), ::Float32, ::Array{Float32,1}, ::Float64, ::Array{Float64,2}, ::Array{Float64,2}, ::Array{Float64,2}) at ODE.jl:376
└ @ ODE ODE.jl:376
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #oderosenbrock#28(::Nothing, ::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::getfield(, Symbol("##2#8")), ::Float32, ::Array{Float32,1}, ::Float64, ::Array{Float64,2}, ::Array{Float64,2}, ::Array{Float64,2}) at ODE.jl:388
└ @ ODE ODE.jl:388
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #oderosenbrock#28(::Nothing, ::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::getfield(, Symbol("##4#10")), ::Float32, ::Array{Float32,1}, ::Float64, ::Array{Float64,2}, ::Array{Float64,2}, ::Array{Float64,2}) at ODE.jl:376
└ @ ODE ODE.jl:376
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #oderosenbrock#28(::Nothing, ::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::getfield(, Symbol("##4#10")), ::Float32, ::Array{Float32,1}, ::Float64, ::Array{Float64,2}, ::Array{Float64,2}, ::Array{Float64,2}) at ODE.jl:388
└ @ ODE ODE.jl:388
WARNING: Base.e is deprecated, use ℯ (\euler) or `Base.MathConstants.e`.
  likely near /home/vagrant/.julia/v0.7/ODE/test/runtests.jl:63
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #oderosenbrock#28(::Nothing, ::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::getfield(, Symbol("##5#11")), ::Float32, ::Array{Float32,1}, ::Float64, ::Array{Float64,2}, ::Array{Float64,2}, ::Array{Float64,2}) at ODE.jl:376
└ @ ODE ODE.jl:376
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #oderosenbrock#28(::Nothing, ::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::getfield(, Symbol("##5#11")), ::Float32, ::Array{Float32,1}, ::Float64, ::Array{Float64,2}, ::Array{Float64,2}, ::Array{Float64,2}) at ODE.jl:388
└ @ ODE ODE.jl:388
WARNING: Base.e is deprecated, use ℯ (\euler) or `Base.MathConstants.e`.
  likely near /home/vagrant/.julia/v0.7/ODE/test/runtests.jl:67
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #oderosenbrock#28(::Nothing, ::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::getfield(, Symbol("##6#12")), ::Array{Float32,1}, ::Array{Float32,1}, ::Float64, ::Array{Float64,2}, ::Array{Float64,2}, ::Array{Float64,2}) at ODE.jl:376
└ @ ODE ODE.jl:376
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #oderosenbrock#28(::Nothing, ::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::getfield(, Symbol("##6#12")), ::Array{Float32,1}, ::Array{Float32,1}, ::Float64, ::Array{Float64,2}, ::Array{Float64,2}, ::Array{Float64,2}) at ODE.jl:388
└ @ ODE ODE.jl:388
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #oderosenbrock#28(::Nothing, ::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::getfield(, Symbol("##1#7")), ::Float64, ::Array{Float64,1}, ::Float64, ::Array{Float64,2}, ::Array{Float64,2}, ::Array{Float64,2}) at ODE.jl:376
└ @ ODE ODE.jl:376
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #oderosenbrock#28(::Nothing, ::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::getfield(, Symbol("##1#7")), ::Float64, ::Array{Float64,1}, ::Float64, ::Array{Float64,2}, ::Array{Float64,2}, ::Array{Float64,2}) at ODE.jl:388
└ @ ODE ODE.jl:388
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #oderosenbrock#28(::Nothing, ::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::getfield(, Symbol("##2#8")), ::Float64, ::Array{Float64,1}, ::Float64, ::Array{Float64,2}, ::Array{Float64,2}, ::Array{Float64,2}) at ODE.jl:376
└ @ ODE ODE.jl:376
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #oderosenbrock#28(::Nothing, ::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::getfield(, Symbol("##2#8")), ::Float64, ::Array{Float64,1}, ::Float64, ::Array{Float64,2}, ::Array{Float64,2}, ::Array{Float64,2}) at ODE.jl:388
└ @ ODE ODE.jl:388
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #oderosenbrock#28(::Nothing, ::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::getfield(, Symbol("##4#10")), ::Float64, ::Array{Float64,1}, ::Float64, ::Array{Float64,2}, ::Array{Float64,2}, ::Array{Float64,2}) at ODE.jl:376
└ @ ODE ODE.jl:376
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #oderosenbrock#28(::Nothing, ::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::getfield(, Symbol("##4#10")), ::Float64, ::Array{Float64,1}, ::Float64, ::Array{Float64,2}, ::Array{Float64,2}, ::Array{Float64,2}) at ODE.jl:388
└ @ ODE ODE.jl:388
WARNING: Base.e is deprecated, use ℯ (\euler) or `Base.MathConstants.e`.
  likely near /home/vagrant/.julia/v0.7/ODE/test/runtests.jl:63
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #oderosenbrock#28(::Nothing, ::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::getfield(, Symbol("##5#11")), ::Float64, ::Array{Float64,1}, ::Float64, ::Array{Float64,2}, ::Array{Float64,2}, ::Array{Float64,2}) at ODE.jl:376
└ @ ODE ODE.jl:376
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #oderosenbrock#28(::Nothing, ::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::getfield(, Symbol("##5#11")), ::Float64, ::Array{Float64,1}, ::Float64, ::Array{Float64,2}, ::Array{Float64,2}, ::Array{Float64,2}) at ODE.jl:388
└ @ ODE ODE.jl:388
WARNING: Base.e is deprecated, use ℯ (\euler) or `Base.MathConstants.e`.
  likely near /home/vagrant/.julia/v0.7/ODE/test/runtests.jl:67
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #oderosenbrock#28(::Nothing, ::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::getfield(, Symbol("##6#12")), ::Array{Float64,1}, ::Array{Float64,1}, ::Float64, ::Array{Float64,2}, ::Array{Float64,2}, ::Array{Float64,2}) at ODE.jl:376
└ @ ODE ODE.jl:376
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #oderosenbrock#28(::Nothing, ::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::getfield(, Symbol("##6#12")), ::Array{Float64,1}, ::Array{Float64,1}, ::Float64, ::Array{Float64,2}, ::Array{Float64,2}, ::Array{Float64,2}) at ODE.jl:388
└ @ ODE ODE.jl:388
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #oderosenbrock#28(::Nothing, ::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::getfield(, Symbol("##1#7")), ::BigFloat, ::Array{BigFloat,1}, ::Float64, ::Array{Float64,2}, ::Array{Float64,2}, ::Array{Float64,2}) at ODE.jl:376
└ @ ODE ODE.jl:376
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #oderosenbrock#28(::Nothing, ::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::getfield(, Symbol("##1#7")), ::BigFloat, ::Array{BigFloat,1}, ::Float64, ::Array{Float64,2}, ::Array{Float64,2}, ::Array{Float64,2}) at ODE.jl:388
└ @ ODE ODE.jl:388
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #oderosenbrock#28(::Nothing, ::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::getfield(, Symbol("##2#8")), ::BigFloat, ::Array{BigFloat,1}, ::Float64, ::Array{Float64,2}, ::Array{Float64,2}, ::Array{Float64,2}) at ODE.jl:376
└ @ ODE ODE.jl:376
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #oderosenbrock#28(::Nothing, ::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::getfield(, Symbol("##2#8")), ::BigFloat, ::Array{BigFloat,1}, ::Float64, ::Array{Float64,2}, ::Array{Float64,2}, ::Array{Float64,2}) at ODE.jl:388
└ @ ODE ODE.jl:388
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #oderosenbrock#28(::Nothing, ::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::getfield(, Symbol("##4#10")), ::BigFloat, ::Array{BigFloat,1}, ::Float64, ::Array{Float64,2}, ::Array{Float64,2}, ::Array{Float64,2}) at ODE.jl:376
└ @ ODE ODE.jl:376
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #oderosenbrock#28(::Nothing, ::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::getfield(, Symbol("##4#10")), ::BigFloat, ::Array{BigFloat,1}, ::Float64, ::Array{Float64,2}, ::Array{Float64,2}, ::Array{Float64,2}) at ODE.jl:388
└ @ ODE ODE.jl:388
WARNING: Base.e is deprecated, use ℯ (\euler) or `Base.MathConstants.e`.
  likely near /home/vagrant/.julia/v0.7/ODE/test/runtests.jl:63
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #oderosenbrock#28(::Nothing, ::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::getfield(, Symbol("##5#11")), ::BigFloat, ::Array{BigFloat,1}, ::Float64, ::Array{Float64,2}, ::Array{Float64,2}, ::Array{Float64,2}) at ODE.jl:376
└ @ ODE ODE.jl:376
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #oderosenbrock#28(::Nothing, ::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::getfield(, Symbol("##5#11")), ::BigFloat, ::Array{BigFloat,1}, ::Float64, ::Array{Float64,2}, ::Array{Float64,2}, ::Array{Float64,2}) at ODE.jl:388
└ @ ODE ODE.jl:388
WARNING: Base.e is deprecated, use ℯ (\euler) or `Base.MathConstants.e`.
  likely near /home/vagrant/.julia/v0.7/ODE/test/runtests.jl:67
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #oderosenbrock#28(::Nothing, ::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::getfield(, Symbol("##6#12")), ::Array{BigFloat,1}, ::Array{BigFloat,1}, ::Float64, ::Array{Float64,2}, ::Array{Float64,2}, ::Array{Float64,2}) at ODE.jl:376
└ @ ODE ODE.jl:376
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #oderosenbrock#28(::Nothing, ::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::getfield(, Symbol("##6#12")), ::Array{BigFloat,1}, ::Array{BigFloat,1}, ::Float64, ::Array{Float64,2}, ::Array{Float64,2}, ::Array{Float64,2}) at ODE.jl:388
└ @ ODE ODE.jl:388
using ODE.ode4s_kr
WARNING: Base.e is deprecated, use ℯ (\euler) or `Base.MathConstants.e`.
  likely near /home/vagrant/.julia/v0.7/ODE/test/runtests.jl:63
WARNING: Base.e is deprecated, use ℯ (\euler) or `Base.MathConstants.e`.
  likely near /home/vagrant/.julia/v0.7/ODE/test/runtests.jl:67
WARNING: Base.e is deprecated, use ℯ (\euler) or `Base.MathConstants.e`.
  likely near /home/vagrant/.julia/v0.7/ODE/test/runtests.jl:63
WARNING: Base.e is deprecated, use ℯ (\euler) or `Base.MathConstants.e`.
  likely near /home/vagrant/.julia/v0.7/ODE/test/runtests.jl:67
WARNING: Base.e is deprecated, use ℯ (\euler) or `Base.MathConstants.e`.
  likely near /home/vagrant/.julia/v0.7/ODE/test/runtests.jl:63
WARNING: Base.e is deprecated, use ℯ (\euler) or `Base.MathConstants.e`.
  likely near /home/vagrant/.julia/v0.7/ODE/test/runtests.jl:67
using ode23s
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #ode23s#23(::Float64, ::Float64, ::Nothing, ::Symbol, ::typeof(norm), ::Float64, ::Float64, ::Float64, ::Type, ::getfield(, Symbol("##1#7")), ::Float32, ::Array{Float32,1}) at ODE.jl:289
└ @ ODE ODE.jl:289
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #ode23s#23(::Float64, ::Float64, ::Nothing, ::Symbol, ::typeof(norm), ::Float64, ::Float64, ::Float64, ::Type, ::getfield(, Symbol("##1#7")), ::Float32, ::Array{Float32,1}) at ODE.jl:291
└ @ ODE ODE.jl:291
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #ode23s#23(::Float64, ::Float64, ::Nothing, ::Symbol, ::typeof(norm), ::Float64, ::Float64, ::Float64, ::Type, ::getfield(, Symbol("##2#8")), ::Float32, ::Array{Float32,1}) at ODE.jl:289
└ @ ODE ODE.jl:289
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #ode23s#23(::Float64, ::Float64, ::Nothing, ::Symbol, ::typeof(norm), ::Float64, ::Float64, ::Float64, ::Type, ::getfield(, Symbol("##2#8")), ::Float32, ::Array{Float32,1}) at ODE.jl:291
└ @ ODE ODE.jl:291
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #ode23s#23(::Float64, ::Float64, ::Nothing, ::Symbol, ::typeof(norm), ::Float64, ::Float64, ::Float64, ::Type, ::getfield(, Symbol("##4#10")), ::Float32, ::Array{Float32,1}) at ODE.jl:289
└ @ ODE ODE.jl:289
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #ode23s#23(::Float64, ::Float64, ::Nothing, ::Symbol, ::typeof(norm), ::Float64, ::Float64, ::Float64, ::Type, ::getfield(, Symbol("##4#10")), ::Float32, ::Array{Float32,1}) at ODE.jl:291
└ @ ODE ODE.jl:291
WARNING: Base.e is deprecated, use ℯ (\euler) or `Base.MathConstants.e`.
  likely near /home/vagrant/.julia/v0.7/ODE/test/runtests.jl:63
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #ode23s#23(::Float64, ::Float64, ::Nothing, ::Symbol, ::typeof(norm), ::Float64, ::Float64, ::Float64, ::Type, ::getfield(, Symbol("##5#11")), ::Float32, ::Array{Float32,1}) at ODE.jl:289
└ @ ODE ODE.jl:289
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #ode23s#23(::Float64, ::Float64, ::Nothing, ::Symbol, ::typeof(norm), ::Float64, ::Float64, ::Float64, ::Type, ::getfield(, Symbol("##5#11")), ::Float32, ::Array{Float32,1}) at ODE.jl:291
└ @ ODE ODE.jl:291
WARNING: Base.e is deprecated, use ℯ (\euler) or `Base.MathConstants.e`.
  likely near /home/vagrant/.julia/v0.7/ODE/test/runtests.jl:67
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #ode23s#23(::Float64, ::Float64, ::Nothing, ::Symbol, ::typeof(norm), ::Float64, ::Float64, ::Float64, ::Type, ::getfield(, Symbol("##6#12")), ::Array{Float32,1}, ::Array{Float32,1}) at ODE.jl:289
└ @ ODE ODE.jl:289
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #ode23s#23(::Float64, ::Float64, ::Nothing, ::Symbol, ::typeof(norm), ::Float64, ::Float64, ::Float64, ::Type, ::getfield(, Symbol("##6#12")), ::Array{Float32,1}, ::Array{Float32,1}) at ODE.jl:291
└ @ ODE ODE.jl:291
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #ode23s#23(::Float64, ::Float64, ::Nothing, ::Symbol, ::typeof(norm), ::Float64, ::Float64, ::Float64, ::Type, ::getfield(, Symbol("##1#7")), ::Float64, ::Array{Float64,1}) at ODE.jl:289
└ @ ODE ODE.jl:289
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #ode23s#23(::Float64, ::Float64, ::Nothing, ::Symbol, ::typeof(norm), ::Float64, ::Float64, ::Float64, ::Type, ::getfield(, Symbol("##1#7")), ::Float64, ::Array{Float64,1}) at ODE.jl:291
└ @ ODE ODE.jl:291
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #ode23s#23(::Float64, ::Float64, ::Nothing, ::Symbol, ::typeof(norm), ::Float64, ::Float64, ::Float64, ::Type, ::getfield(, Symbol("##2#8")), ::Float64, ::Array{Float64,1}) at ODE.jl:289
└ @ ODE ODE.jl:289
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #ode23s#23(::Float64, ::Float64, ::Nothing, ::Symbol, ::typeof(norm), ::Float64, ::Float64, ::Float64, ::Type, ::getfield(, Symbol("##2#8")), ::Float64, ::Array{Float64,1}) at ODE.jl:291
└ @ ODE ODE.jl:291
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #ode23s#23(::Float64, ::Float64, ::Nothing, ::Symbol, ::typeof(norm), ::Float64, ::Float64, ::Float64, ::Type, ::getfield(, Symbol("##4#10")), ::Float64, ::Array{Float64,1}) at ODE.jl:289
└ @ ODE ODE.jl:289
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #ode23s#23(::Float64, ::Float64, ::Nothing, ::Symbol, ::typeof(norm), ::Float64, ::Float64, ::Float64, ::Type, ::getfield(, Symbol("##4#10")), ::Float64, ::Array{Float64,1}) at ODE.jl:291
└ @ ODE ODE.jl:291
WARNING: Base.e is deprecated, use ℯ (\euler) or `Base.MathConstants.e`.
  likely near /home/vagrant/.julia/v0.7/ODE/test/runtests.jl:63
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #ode23s#23(::Float64, ::Float64, ::Nothing, ::Symbol, ::typeof(norm), ::Float64, ::Float64, ::Float64, ::Type, ::getfield(, Symbol("##5#11")), ::Float64, ::Array{Float64,1}) at ODE.jl:289
└ @ ODE ODE.jl:289
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #ode23s#23(::Float64, ::Float64, ::Nothing, ::Symbol, ::typeof(norm), ::Float64, ::Float64, ::Float64, ::Type, ::getfield(, Symbol("##5#11")), ::Float64, ::Array{Float64,1}) at ODE.jl:291
└ @ ODE ODE.jl:291
WARNING: Base.e is deprecated, use ℯ (\euler) or `Base.MathConstants.e`.
  likely near /home/vagrant/.julia/v0.7/ODE/test/runtests.jl:67
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #ode23s#23(::Float64, ::Float64, ::Nothing, ::Symbol, ::typeof(norm), ::Float64, ::Float64, ::Float64, ::Type, ::getfield(, Symbol("##6#12")), ::Array{Float64,1}, ::Array{Float64,1}) at ODE.jl:289
└ @ ODE ODE.jl:289
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #ode23s#23(::Float64, ::Float64, ::Nothing, ::Symbol, ::typeof(norm), ::Float64, ::Float64, ::Float64, ::Type, ::getfield(, Symbol("##6#12")), ::Array{Float64,1}, ::Array{Float64,1}) at ODE.jl:291
└ @ ODE ODE.jl:291
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #ode23s#23(::Float64, ::Float64, ::Nothing, ::Symbol, ::typeof(norm), ::BigFloat, ::BigFloat, ::Float64, ::Type, ::getfield(, Symbol("##1#7")), ::BigFloat, ::Array{BigFloat,1}) at ODE.jl:289
└ @ ODE ODE.jl:289
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #ode23s#23(::Float64, ::Float64, ::Nothing, ::Symbol, ::typeof(norm), ::BigFloat, ::BigFloat, ::Float64, ::Type, ::getfield(, Symbol("##1#7")), ::BigFloat, ::Array{BigFloat,1}) at ODE.jl:291
└ @ ODE ODE.jl:291
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #ode23s#23(::Float64, ::Float64, ::Nothing, ::Symbol, ::typeof(norm), ::BigFloat, ::BigFloat, ::Float64, ::Type, ::getfield(, Symbol("##2#8")), ::BigFloat, ::Array{BigFloat,1}) at ODE.jl:289
└ @ ODE ODE.jl:289
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #ode23s#23(::Float64, ::Float64, ::Nothing, ::Symbol, ::typeof(norm), ::BigFloat, ::BigFloat, ::Float64, ::Type, ::getfield(, Symbol("##2#8")), ::BigFloat, ::Array{BigFloat,1}) at ODE.jl:291
└ @ ODE ODE.jl:291
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #ode23s#23(::Float64, ::Float64, ::Nothing, ::Symbol, ::typeof(norm), ::BigFloat, ::BigFloat, ::Float64, ::Type, ::getfield(, Symbol("##4#10")), ::BigFloat, ::Array{BigFloat,1}) at ODE.jl:289
└ @ ODE ODE.jl:289
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #ode23s#23(::Float64, ::Float64, ::Nothing, ::Symbol, ::typeof(norm), ::BigFloat, ::BigFloat, ::Float64, ::Type, ::getfield(, Symbol("##4#10")), ::BigFloat, ::Array{BigFloat,1}) at ODE.jl:291
└ @ ODE ODE.jl:291
WARNING: Base.e is deprecated, use ℯ (\euler) or `Base.MathConstants.e`.
  likely near /home/vagrant/.julia/v0.7/ODE/test/runtests.jl:63
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #ode23s#23(::Float64, ::Float64, ::Nothing, ::Symbol, ::typeof(norm), ::BigFloat, ::BigFloat, ::Float64, ::Type, ::getfield(, Symbol("##5#11")), ::BigFloat, ::Array{BigFloat,1}) at ODE.jl:289
└ @ ODE ODE.jl:289
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #ode23s#23(::Float64, ::Float64, ::Nothing, ::Symbol, ::typeof(norm), ::BigFloat, ::BigFloat, ::Float64, ::Type, ::getfield(, Symbol("##5#11")), ::BigFloat, ::Array{BigFloat,1}) at ODE.jl:291
└ @ ODE ODE.jl:291
WARNING: Base.e is deprecated, use ℯ (\euler) or `Base.MathConstants.e`.
  likely near /home/vagrant/.julia/v0.7/ODE/test/runtests.jl:67
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #ode23s#23(::Float64, ::Float64, ::Nothing, ::Symbol, ::typeof(norm), ::BigFloat, ::BigFloat, ::Float64, ::Type, ::getfield(, Symbol("##6#12")), ::Array{BigFloat,1}, ::Array{BigFloat,1}) at ODE.jl:289
└ @ ODE ODE.jl:289
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #ode23s#23(::Float64, ::Float64, ::Nothing, ::Symbol, ::typeof(norm), ::BigFloat, ::BigFloat, ::Float64, ::Type, ::getfield(, Symbol("##6#12")), ::Array{BigFloat,1}, ::Array{BigFloat,1}) at ODE.jl:291
└ @ ODE ODE.jl:291
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #ode23s#23(::Float64, ::Float64, ::Nothing, ::Symbol, ::typeof(norm), ::Float64, ::Float64, ::Float64, ::Type, ::getfield(, Symbol("##13#14")), ::Array{Float64,1}, ::Array{Float64,1}) at ODE.jl:289
└ @ ODE ODE.jl:289
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #ode23s#23(::Float64, ::Float64, ::Nothing, ::Symbol, ::typeof(norm), ::Float64, ::Float64, ::Float64, ::Type, ::getfield(, Symbol("##13#14")), ::Array{Float64,1}, ::Array{Float64,1}) at ODE.jl:291
└ @ ODE ODE.jl:291
ROBER test case
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #ode23s#23(::Float64, ::Float64, ::Nothing, ::Symbol, ::typeof(norm), ::Float64, ::Float64, ::Float64, ::Type, ::getfield(, Symbol("#f#15")), ::Array{Float64,1}, ::Array{Float64,1}) at ODE.jl:289
└ @ ODE ODE.jl:289
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #ode23s#23(::Float64, ::Float64, ::Nothing, ::Symbol, ::typeof(norm), ::Float64, ::Float64, ::Float64, ::Type, ::getfield(, Symbol("#f#15")), ::Array{Float64,1}, ::Array{Float64,1}) at ODE.jl:291
└ @ ODE ODE.jl:291
┌ Warning: Deprecated syntax `immutable` at /home/vagrant/.julia/v0.7/ODE/test/interface-tests.jl:14.
│ Use `struct` instead.
└ @ nothing interface-tests.jl:14
WARNING: Base.Complex128 is deprecated, use ComplexF64 instead.
  likely near /home/vagrant/.julia/v0.7/ODE/test/interface-tests.jl:14
┌ Warning: Deprecated syntax `function .+(...)`.
│ Use `function Base.broadcast(::typeof(+), ...)` instead.
└ @ nothing none:0
┌ Warning: Deprecated syntax `function .-(...)`.
│ Use `function Base.broadcast(::typeof(-), ...)` instead.
└ @ nothing none:0
┌ Warning: Deprecated syntax `function .*(...)`.
│ Use `function Base.broadcast(::typeof(*), ...)` instead.
└ @ nothing none:0
┌ Warning: Deprecated syntax `function .*(...)`.
│ Use `function Base.broadcast(::typeof(*), ...)` instead.
└ @ nothing none:0
┌ Warning: Deprecated syntax `function ./(...)`.
│ Use `function Base.broadcast(::typeof(/), ...)` instead.
└ @ nothing none:0
WARNING: Base.Complex128 is deprecated, use ComplexF64 instead.
  likely near /home/vagrant/.julia/v0.7/ODE/test/interface-tests.jl:64
WARNING: Base.Complex128 is deprecated, use ComplexF64 instead.
  likely near /home/vagrant/.julia/v0.7/ODE/test/interface-tests.jl:64
WARNING: Base.Complex128 is deprecated, use ComplexF64 instead.
  likely near /home/vagrant/.julia/v0.7/ODE/test/interface-tests.jl:69
WARNING: Base.Complex128 is deprecated, use ComplexF64 instead.
  likely near /home/vagrant/.julia/v0.7/ODE/test/interface-tests.jl:69
WARNING: Base.Complex128 is deprecated, use ComplexF64 instead.
  likely near /home/vagrant/.julia/v0.7/ODE/test/interface-tests.jl:69
WARNING: Base.Complex128 is deprecated, use ComplexF64 instead.
  likely near /home/vagrant/.julia/v0.7/ODE/test/interface-tests.jl:69
┌ Warning: `isleaftype` is deprecated, use `isconcrete` instead.
│   caller = make_consistent_types(::Function, ::Array{CompSol,1}, ::Array{Float64,1}, ::ODE.TableauRKExplicit{:dopri,7,Rational{Int64}}) at ODE.jl:159
└ @ ODE ODE.jl:159
┌ Warning: `isleaftype` is deprecated, use `isconcrete` instead.
│   caller = make_consistent_types(::Function, ::Array{CompSol,1}, ::Array{Float64,1}, ::ODE.TableauRKExplicit{:dopri,7,Rational{Int64}}) at ODE.jl:160
└ @ ODE ODE.jl:160
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #oderk_adapt#13(::Float64, ::Float64, ::Function, ::Float64, ::Any, ::Int64, ::Symbol, ::Function, ::getfield(ODE, Symbol("##11#12")){getfield(, Symbol("##16#17"))}, ::Array{CompSol,1}, ::Any, ::ODE.TableauRKExplicit{:dopri,7,Rational{Int64}}) at runge_kutta.jl:264
└ @ ODE runge_kutta.jl:264
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #oderk_adapt#13(::Float64, ::Float64, ::Function, ::Float64, ::Any, ::Int64, ::Symbol, ::Function, ::getfield(ODE, Symbol("##11#12")){getfield(, Symbol("##16#17"))}, ::Array{CompSol,1}, ::Any, ::ODE.TableauRKExplicit{:dopri,7,Rational{Int64}}) at runge_kutta.jl:270
└ @ ODE runge_kutta.jl:270
Testing interface for scalar-like state... ┌ Warning: Deprecated syntax `implicit assignment to global variable `t``.
│ Use `global t` instead.
└ @ nothing none:0
┌ Warning: `isleaftype` is deprecated, use `isconcrete` instead.
│   caller = make_consistent_types at ODE.jl:159 [inlined]
└ @ Core ODE.jl:159
┌ Warning: `isleaftype` is deprecated, use `isconcrete` instead.
│   caller = make_consistent_types at ODE.jl:160 [inlined]
└ @ Core ODE.jl:160
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = oderk_fixed(::Function, ::Array{CompSol,1}, ::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}, ::ODE.TableauRKExplicit{:feuler,1,Rational{Int64}}) at runge_kutta.jl:188
└ @ ODE runge_kutta.jl:188
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = oderk_fixed(::Function, ::Array{CompSol,1}, ::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}, ::ODE.TableauRKExplicit{:feuler,1,Rational{Int64}}) at runge_kutta.jl:194
└ @ ODE runge_kutta.jl:194
┌ Warning: `isleaftype` is deprecated, use `isconcrete` instead.
│   caller = make_consistent_types at ODE.jl:159 [inlined]
└ @ Core ODE.jl:159
┌ Warning: `isleaftype` is deprecated, use `isconcrete` instead.
│   caller = make_consistent_types at ODE.jl:160 [inlined]
└ @ Core ODE.jl:160
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = oderk_fixed(::Function, ::Array{CompSol,1}, ::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}, ::ODE.TableauRKExplicit{:midpoint,2,Rational{Int64}}) at runge_kutta.jl:188
└ @ ODE runge_kutta.jl:188
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = oderk_fixed(::Function, ::Array{CompSol,1}, ::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}, ::ODE.TableauRKExplicit{:midpoint,2,Rational{Int64}}) at runge_kutta.jl:194
└ @ ODE runge_kutta.jl:194
┌ Warning: `isleaftype` is deprecated, use `isconcrete` instead.
│   caller = make_consistent_types at ODE.jl:159 [inlined]
└ @ Core ODE.jl:159
┌ Warning: `isleaftype` is deprecated, use `isconcrete` instead.
│   caller = make_consistent_types at ODE.jl:160 [inlined]
└ @ Core ODE.jl:160
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = oderk_fixed(::Function, ::Array{CompSol,1}, ::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}, ::ODE.TableauRKExplicit{:heun,2,Rational{Int64}}) at runge_kutta.jl:188
└ @ ODE runge_kutta.jl:188
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = oderk_fixed(::Function, ::Array{CompSol,1}, ::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}, ::ODE.TableauRKExplicit{:heun,2,Rational{Int64}}) at runge_kutta.jl:194
└ @ ODE runge_kutta.jl:194
┌ Warning: `isleaftype` is deprecated, use `isconcrete` instead.
│   caller = make_consistent_types at ODE.jl:159 [inlined]
└ @ Core ODE.jl:159
┌ Warning: `isleaftype` is deprecated, use `isconcrete` instead.
│   caller = make_consistent_types at ODE.jl:160 [inlined]
└ @ Core ODE.jl:160
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = oderk_fixed(::Function, ::Array{CompSol,1}, ::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}, ::ODE.TableauRKExplicit{:rk4,4,Rational{Int64}}) at runge_kutta.jl:188
└ @ ODE runge_kutta.jl:188
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = oderk_fixed(::Function, ::Array{CompSol,1}, ::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}, ::ODE.TableauRKExplicit{:rk4,4,Rational{Int64}}) at runge_kutta.jl:194
└ @ ODE runge_kutta.jl:194
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #ode_ms#16(::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::getfield(, Symbol("##18#19")), ::CompSol, ::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}, ::Int64) at ODE.jl:176
└ @ ODE ODE.jl:176
┌ Warning: `diagm(v::AbstractVector)` is deprecated, use `diagm(0 => v)` or `Matrix(Diagonal(v))` instead.
│   caller = #ode_ms#16(::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::getfield(, Symbol("##18#19")), ::CompSol, ::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}, ::Int64) at ODE.jl:188
└ @ ODE ODE.jl:188
┌ Warning: `isleaftype` is deprecated, use `isconcrete` instead.
│   caller = make_consistent_types(::Function, ::Array{CompSol,1}, ::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}, ::ODE.TableauRKExplicit{:bogacki_shampine,4,Rational{Int64}}) at ODE.jl:159
└ @ ODE ODE.jl:159
┌ Warning: `isleaftype` is deprecated, use `isconcrete` instead.
│   caller = make_consistent_types(::Function, ::Array{CompSol,1}, ::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}, ::ODE.TableauRKExplicit{:bogacki_shampine,4,Rational{Int64}}) at ODE.jl:160
└ @ ODE ODE.jl:160
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #oderk_adapt#13(::Float64, ::Float64, ::Function, ::Float64, ::Any, ::Int64, ::Symbol, ::Function, ::getfield(ODE, Symbol("##11#12")){getfield(, Symbol("##18#19"))}, ::Array{CompSol,1}, ::Any, ::ODE.TableauRKExplicit{:bogacki_shampine,4,Rational{Int64}}) at runge_kutta.jl:264
└ @ ODE runge_kutta.jl:264
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #oderk_adapt#13(::Float64, ::Float64, ::Function, ::Float64, ::Any, ::Int64, ::Symbol, ::Function, ::getfield(ODE, Symbol("##11#12")){getfield(, Symbol("##18#19"))}, ::Array{CompSol,1}, ::Any, ::ODE.TableauRKExplicit{:bogacki_shampine,4,Rational{Int64}}) at runge_kutta.jl:270
└ @ ODE runge_kutta.jl:270
┌ Warning: `isleaftype` is deprecated, use `isconcrete` instead.
│   caller = make_consistent_types(::Function, ::Array{CompSol,1}, ::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}, ::ODE.TableauRKExplicit{:dopri,7,Rational{Int64}}) at ODE.jl:159
└ @ ODE ODE.jl:159
┌ Warning: `isleaftype` is deprecated, use `isconcrete` instead.
│   caller = make_consistent_types(::Function, ::Array{CompSol,1}, ::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}, ::ODE.TableauRKExplicit{:dopri,7,Rational{Int64}}) at ODE.jl:160
└ @ ODE ODE.jl:160
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #oderk_adapt#13(::Float64, ::Float64, ::Function, ::Float64, ::Any, ::Int64, ::Symbol, ::Function, ::getfield(ODE, Symbol("##11#12")){getfield(, Symbol("##18#19"))}, ::Array{CompSol,1}, ::Any, ::ODE.TableauRKExplicit{:dopri,7,Rational{Int64}}) at runge_kutta.jl:264
└ @ ODE runge_kutta.jl:264
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #oderk_adapt#13(::Float64, ::Float64, ::Function, ::Float64, ::Any, ::Int64, ::Symbol, ::Function, ::getfield(ODE, Symbol("##11#12")){getfield(, Symbol("##18#19"))}, ::Array{CompSol,1}, ::Any, ::ODE.TableauRKExplicit{:dopri,7,Rational{Int64}}) at runge_kutta.jl:270
└ @ ODE runge_kutta.jl:270
┌ Warning: `isleaftype` is deprecated, use `isconcrete` instead.
│   caller = make_consistent_types(::Function, ::Array{CompSol,1}, ::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}, ::ODE.TableauRKExplicit{:fehlberg,6,Rational{Int64}}) at ODE.jl:159
└ @ ODE ODE.jl:159
┌ Warning: `isleaftype` is deprecated, use `isconcrete` instead.
│   caller = make_consistent_types(::Function, ::Array{CompSol,1}, ::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}, ::ODE.TableauRKExplicit{:fehlberg,6,Rational{Int64}}) at ODE.jl:160
└ @ ODE ODE.jl:160
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #oderk_adapt#13(::Float64, ::Float64, ::Function, ::Float64, ::Any, ::Int64, ::Symbol, ::Function, ::getfield(ODE, Symbol("##11#12")){getfield(, Symbol("##18#19"))}, ::Array{CompSol,1}, ::Any, ::ODE.TableauRKExplicit{:fehlberg,6,Rational{Int64}}) at runge_kutta.jl:264
└ @ ODE runge_kutta.jl:264
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #oderk_adapt#13(::Float64, ::Float64, ::Function, ::Float64, ::Any, ::Int64, ::Symbol, ::Function, ::getfield(ODE, Symbol("##11#12")){getfield(, Symbol("##18#19"))}, ::Array{CompSol,1}, ::Any, ::ODE.TableauRKExplicit{:fehlberg,6,Rational{Int64}}) at runge_kutta.jl:270
└ @ ODE runge_kutta.jl:270
┌ Warning: `isleaftype` is deprecated, use `isconcrete` instead.
│   caller = make_consistent_types(::Function, ::Array{CompSol,1}, ::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}, ::ODE.TableauRKExplicit{:feh78,13,Rational{Int64}}) at ODE.jl:159
└ @ ODE ODE.jl:159
┌ Warning: `isleaftype` is deprecated, use `isconcrete` instead.
│   caller = make_consistent_types(::Function, ::Array{CompSol,1}, ::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}, ::ODE.TableauRKExplicit{:feh78,13,Rational{Int64}}) at ODE.jl:160
└ @ ODE ODE.jl:160
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #oderk_adapt#13(::Float64, ::Float64, ::Function, ::Float64, ::Any, ::Int64, ::Symbol, ::Function, ::getfield(ODE, Symbol("##11#12")){getfield(, Symbol("##18#19"))}, ::Array{CompSol,1}, ::Any, ::ODE.TableauRKExplicit{:feh78,13,Rational{Int64}}) at runge_kutta.jl:264
└ @ ODE runge_kutta.jl:264
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #oderk_adapt#13(::Float64, ::Float64, ::Function, ::Float64, ::Any, ::Int64, ::Symbol, ::Function, ::getfield(ODE, Symbol("##11#12")){getfield(, Symbol("##18#19"))}, ::Array{CompSol,1}, ::Any, ::ODE.TableauRKExplicit{:feh78,13,Rational{Int64}}) at runge_kutta.jl:270
└ @ ODE runge_kutta.jl:270
ok.
WARNING: Method definition __init__() in module Requires at /home/vagrant/.julia/v0.7/Requires/src/init.jl:9 overwritten in module RecursiveArrayTools at /home/vagrant/.julia/v0.7/Requires/src/init.jl:9.
[ Warning: Replacing module `StaticArrays` @ Base loading.jl:350
[ Warning: Replacing module `Requires` @ Base loading.jl:350
[ Warning: Replacing module `Compat` @ Base loading.jl:350
[ Warning: Replacing module `RecipesBase` @ Base loading.jl:350
WARNING: Method definition __init__() in module Requires at /home/vagrant/.julia/v0.7/Requires/src/init.jl:9 overwritten in module DiffEqBase at /home/vagrant/.julia/v0.7/Requires/src/init.jl:9.

signal (11): Segmentation fault
in expression starting at /home/vagrant/.julia/v0.7/ParameterizedFunctions/src/ParameterizedFunctions.jl:11
_ZN4llvm5Value16DoPHITranslationEPKNS_10BasicBlockES3_ at /home/vagrant/julia/bin/../lib/julia/libLLVM-3.9.so (unknown line)
Allocations: 815002 (Pool: 814571; Big: 431); GC: 1
ERROR: LoadError: Failed to precompile ParameterizedFunctions to /home/vagrant/.julia/lib/v0.7/ParameterizedFunctions.ji.
Stacktrace:
 [1] error at ./error.jl:33 [inlined]
 [2] compilecache(::String) at ./loading.jl:648
 [3] compilecache at ./loading.jl:605 [inlined]
 [4] _require(::Symbol) at ./loading.jl:440
 [5] require(::Symbol) at ./loading.jl:333
 [6] include at ./boot.jl:295 [inlined]
 [7] include_relative(::Module, ::String) at ./loading.jl:521
 [8] include(::Module, ::String) at ./sysimg.jl:26
 [9] top-level scope
 [10] eval at ./boot.jl:298 [inlined]
 [11] top-level scope at ./<missing>:2
in expression starting at /home/vagrant/.julia/v0.7/DiffEqProblemLibrary/src/DiffEqProblemLibrary.jl:5
ERROR: LoadError: LoadError: Failed to precompile DiffEqProblemLibrary to /home/vagrant/.julia/lib/v0.7/DiffEqProblemLibrary.ji.
Stacktrace:
 [1] error at ./error.jl:33 [inlined]
 [2] compilecache(::String) at ./loading.jl:648
 [3] compilecache at ./loading.jl:605 [inlined]
 [4] _require(::Symbol) at ./loading.jl:460
 [5] require(::Symbol) at ./loading.jl:333
 [6] include at ./boot.jl:295 [inlined]
 [7] include_relative(::Module, ::String) at ./loading.jl:521
 [8] include(::Module, ::String) at ./sysimg.jl:26
 [9] include(::String) at ./sysimg.jl:65
 [10] top-level scope
 [11] include at ./boot.jl:295 [inlined]
 [12] include_relative(::Module, ::String) at ./loading.jl:521
 [13] include(::Module, ::String) at ./sysimg.jl:26
 [14] process_options(::Base.JLOptions) at ./client.jl:324
 [15] _start() at ./client.jl:375
in expression starting at /home/vagrant/.julia/v0.7/ODE/test/common.jl:1
in expression starting at /home/vagrant/.julia/v0.7/ODE/test/runtests.jl:106
┌ Error: ------------------------------------------------------------
│ # Testing failed for ODE
│   exception = ErrorException("failed process: Process(`/home/vagrant/julia/bin/julia -Cnative -J/home/vagrant/julia/lib/julia/sys.so --compile=yes --depwarn=yes --code-coverage=none --color=no --compiled-modules=yes --check-bounds=yes --warn-overwrite=yes --startup-file=yes /home/vagrant/.julia/v0.7/ODE/test/runtests.jl`, ProcessExited(1)) [1]")
└ @ Base.Pkg.Entry entry.jl:739
[ Info: Removing BinDeps v0.8.2 @ Base.Pkg.Entry entry.jl:546
[ Info: Removing Calculus v0.2.2 @ Base.Pkg.Entry entry.jl:546
[ Info: Removing ChunkedArrays v0.1.1 @ Base.Pkg.Entry entry.jl:546
[ Info: Removing Conda v0.7.1 @ Base.Pkg.Entry entry.jl:546
[ Info: Removing DataStructures v0.7.4 @ Base.Pkg.Entry entry.jl:546
[ Info: Removing DiffEqPDEBase v0.3.5 @ Base.Pkg.Entry entry.jl:546
[ Info: Removing DiffEqProblemLibrary v0.11.0 @ Base.Pkg.Entry entry.jl:546
[ Info: Removing Distributions v0.15.0 @ Base.Pkg.Entry entry.jl:546
[ Info: Removing EllipsisNotation v0.3.0 @ Base.Pkg.Entry entry.jl:546
[ Info: Removing PDMats v0.8.0 @ Base.Pkg.Entry entry.jl:546
[ Info: Removing ParameterizedFunctions v2.3.1 @ Base.Pkg.Entry entry.jl:546
[ Info: Removing QuadGK v0.2.0 @ Base.Pkg.Entry entry.jl:546
[ Info: Removing Rmath v0.3.1 @ Base.Pkg.Entry entry.jl:546
[ Info: Removing SHA v0.5.2 @ Base.Pkg.Entry entry.jl:546
[ Info: Removing SortingAlgorithms v0.2.0 @ Base.Pkg.Entry entry.jl:546
[ Info: Removing SpecialFunctions v0.3.7 @ Base.Pkg.Entry entry.jl:546
[ Info: Removing StatsBase v0.19.5 @ Base.Pkg.Entry entry.jl:546
[ Info: Removing StatsFuns v0.5.0 @ Base.Pkg.Entry entry.jl:546
[ Info: Removing SymEngine v0.3.0 @ Base.Pkg.Entry entry.jl:546
[ Info: Removing URIParser v0.3.0 @ Base.Pkg.Entry entry.jl:546
[ Info: Removing VectorizedRoutines v0.0.2 @ Base.Pkg.Entry entry.jl:546
ERROR: ODE had test errors

>>> End of log
