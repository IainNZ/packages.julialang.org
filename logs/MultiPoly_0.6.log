>>> 'Pkg.add("MultiPoly")' log
INFO: Installing Combinatorics v0.5.0
INFO: Installing DataStructures v0.7.2
INFO: Installing IterTools v0.1.0
INFO: Installing MultiPoly v0.1.0
INFO: Installing Polynomials v0.1.6
INFO: Package database updated

>>> 'Pkg.test("MultiPoly")' log
Julia Version 0.6.1
Commit 0d7248e2ff (2017-10-24 22:15 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-135-generic #184-Ubuntu SMP Wed Oct 18 11:55:51 UTC 2017 x86_64 x86_64
Memory: 2.93927001953125 GB (782.0078125 MB free)
Uptime: 27623.0 sec
Load Avg:  0.978515625  0.9453125  0.98095703125
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz    1816098 s         55 s      84822 s     426045 s         23 s
#2  3499 MHz     315466 s       6482 s      41502 s    2359631 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.6
2 required packages:
 - JSON                          0.16.1
 - MultiPoly                     0.1.0
5 additional packages:
 - Combinatorics                 0.5.0
 - Compat                        0.37.0
 - DataStructures                0.7.2
 - IterTools                     0.1.0
 - Polynomials                   0.1.6
INFO: Testing MultiPoly
WARNING: Array(::Type{T}, m::Int, n::Int) where T is deprecated, use Array{T}(m, n) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] Array(::Type{Int64}, ::Int64, ::Int64) at ./deprecated.jl:57
 [3] MultiPoly.PolyUnion(::Array{MultiPoly.MPoly{Float64},1}) at /home/vagrant/.julia/v0.6/MultiPoly/src/polyunion.jl:9
 [4] *(::MultiPoly.MPoly{Float64}, ::MultiPoly.MPoly{Float64}) at /home/vagrant/.julia/v0.6/MultiPoly/src/mpolyarithmetic.jl:63
 [5] ^(::MultiPoly.MPoly{Float64}, ::Int64) at /home/vagrant/.julia/v0.6/MultiPoly/src/mpolyarithmetic.jl:92 (repeats 2 times)
 [6] literal_pow(::Base.#^, ::MultiPoly.MPoly{Float64}, ::Type{Val{3}}) at ./intfuncs.jl:208
 [7] include_from_node1(::String) at ./loading.jl:576
 [8] include(::String) at ./sysimg.jl:14
 [9] include_from_node1(::String) at ./loading.jl:576
 [10] include(::String) at ./sysimg.jl:14
 [11] process_options(::Base.JLOptions) at ./client.jl:305
 [12] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/MultiPoly/test/mpolycalculus.jl, in expression starting on line 3
WARNING: Array(::Type{T}, m::Int, n::Int) where T is deprecated, use Array{T}(m, n) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] Array(::Type{Int64}, ::Int64, ::Int64) at ./deprecated.jl:57
 [3] MultiPoly.PolyUnion(::Array{MultiPoly.MPoly{Float64},1}) at /home/vagrant/.julia/v0.6/MultiPoly/src/polyunion.jl:9
 [4] *(::MultiPoly.MPoly{Float64}, ::MultiPoly.MPoly{Float64}) at /home/vagrant/.julia/v0.6/MultiPoly/src/mpolyarithmetic.jl:63
 [5] ^(::MultiPoly.MPoly{Float64}, ::Int64) at /home/vagrant/.julia/v0.6/MultiPoly/src/mpolyarithmetic.jl:92
 [6] literal_pow(::Base.#^, ::MultiPoly.MPoly{Float64}, ::Type{Val{2}}) at ./intfuncs.jl:208
 [7] include_from_node1(::String) at ./loading.jl:576
 [8] include(::String) at ./sysimg.jl:14
 [9] include_from_node1(::String) at ./loading.jl:576
 [10] include(::String) at ./sysimg.jl:14
 [11] process_options(::Base.JLOptions) at ./client.jl:305
 [12] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/MultiPoly/test/mpolycalculus.jl, in expression starting on line 4
WARNING: Array(::Type{T}, m::Int, n::Int) where T is deprecated, use Array{T}(m, n) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] Array(::Type{Int64}, ::Int64, ::Int64) at ./deprecated.jl:57
 [3] MultiPoly.PolyUnion(::Array{MultiPoly.MPoly{Float64},1}) at /home/vagrant/.julia/v0.6/MultiPoly/src/polyunion.jl:9
 [4] *(::MultiPoly.MPoly{Float64}, ::MultiPoly.MPoly{Float64}) at /home/vagrant/.julia/v0.6/MultiPoly/src/mpolyarithmetic.jl:63
 [5] include_from_node1(::String) at ./loading.jl:576
 [6] include(::String) at ./sysimg.jl:14
 [7] include_from_node1(::String) at ./loading.jl:576
 [8] include(::String) at ./sysimg.jl:14
 [9] process_options(::Base.JLOptions) at ./client.jl:305
 [10] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/MultiPoly/test/mpolycalculus.jl, in expression starting on line 7
WARNING: Array(::Type{T}, m::Int, n::Int) where T is deprecated, use Array{T}(m, n) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] Array(::Type{Int64}, ::Int64, ::Int64) at ./deprecated.jl:57
 [3] MultiPoly.PolyUnion(::Array{MultiPoly.MPoly{Float64},1}) at /home/vagrant/.julia/v0.6/MultiPoly/src/polyunion.jl:9
 [4] *(::MultiPoly.MPoly{Float64}, ::MultiPoly.MPoly{Float64}) at /home/vagrant/.julia/v0.6/MultiPoly/src/mpolyarithmetic.jl:63
 [5] ^(::MultiPoly.MPoly{Float64}, ::Int64) at /home/vagrant/.julia/v0.6/MultiPoly/src/mpolyarithmetic.jl:92 (repeats 2 times)
 [6] literal_pow(::Base.#^, ::MultiPoly.MPoly{Float64}, ::Type{Val{3}}) at ./intfuncs.jl:208
 [7] include_from_node1(::String) at ./loading.jl:576
 [8] include(::String) at ./sysimg.jl:14
 [9] include_from_node1(::String) at ./loading.jl:576
 [10] include(::String) at ./sysimg.jl:14
 [11] process_options(::Base.JLOptions) at ./client.jl:305
 [12] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/MultiPoly/test/mpolycalculus.jl, in expression starting on line 9
WARNING: Array(::Type{T}, m::Int, n::Int) where T is deprecated, use Array{T}(m, n) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] Array(::Type{Int64}, ::Int64, ::Int64) at ./deprecated.jl:57
 [3] MultiPoly.PolyUnion(::Array{MultiPoly.MPoly{Float64},1}) at /home/vagrant/.julia/v0.6/MultiPoly/src/polyunion.jl:9
 [4] *(::MultiPoly.MPoly{Float64}, ::MultiPoly.MPoly{Float64}) at /home/vagrant/.julia/v0.6/MultiPoly/src/mpolyarithmetic.jl:63
 [5] ^(::MultiPoly.MPoly{Float64}, ::Int64) at /home/vagrant/.julia/v0.6/MultiPoly/src/mpolyarithmetic.jl:92
 [6] literal_pow(::Base.#^, ::MultiPoly.MPoly{Float64}, ::Type{Val{2}}) at ./intfuncs.jl:208
 [7] include_from_node1(::String) at ./loading.jl:576
 [8] include(::String) at ./sysimg.jl:14
 [9] include_from_node1(::String) at ./loading.jl:576
 [10] include(::String) at ./sysimg.jl:14
 [11] process_options(::Base.JLOptions) at ./client.jl:305
 [12] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/MultiPoly/test/mpolycalculus.jl, in expression starting on line 16
WARNING: Array(::Type{T}, m::Int, n::Int) where T is deprecated, use Array{T}(m, n) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] Array(::Type{Int64}, ::Int64, ::Int64) at ./deprecated.jl:57
 [3] MultiPoly.PolyUnion(::Array{MultiPoly.MPoly{Float64},1}) at /home/vagrant/.julia/v0.6/MultiPoly/src/polyunion.jl:9
 [4] *(::MultiPoly.MPoly{Float64}, ::MultiPoly.MPoly{Float64}) at /home/vagrant/.julia/v0.6/MultiPoly/src/mpolyarithmetic.jl:63
 [5] ^(::MultiPoly.MPoly{Float64}, ::Int64) at /home/vagrant/.julia/v0.6/MultiPoly/src/mpolyarithmetic.jl:92
 [6] literal_pow(::Base.#^, ::MultiPoly.MPoly{Float64}, ::Type{Val{2}}) at ./intfuncs.jl:208
 [7] include_from_node1(::String) at ./loading.jl:576
 [8] include(::String) at ./sysimg.jl:14
 [9] include_from_node1(::String) at ./loading.jl:576
 [10] include(::String) at ./sysimg.jl:14
 [11] process_options(::Base.JLOptions) at ./client.jl:305
 [12] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/MultiPoly/test/mpolycalculus.jl, in expression starting on line 17
WARNING: Array(::Type{T}, m::Int, n::Int) where T is deprecated, use Array{T}(m, n) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] Array(::Type{Int64}, ::Int64, ::Int64) at ./deprecated.jl:57
 [3] MultiPoly.PolyUnion(::Array{MultiPoly.MPoly{Float64},1}) at /home/vagrant/.julia/v0.6/MultiPoly/src/polyunion.jl:9
 [4] *(::MultiPoly.MPoly{Float64}, ::MultiPoly.MPoly{Float64}) at /home/vagrant/.julia/v0.6/MultiPoly/src/mpolyarithmetic.jl:63
 [5] ^(::MultiPoly.MPoly{Float64}, ::Int64) at /home/vagrant/.julia/v0.6/MultiPoly/src/mpolyarithmetic.jl:92
 [6] literal_pow(::Base.#^, ::MultiPoly.MPoly{Float64}, ::Type{Val{2}}) at ./intfuncs.jl:208
 [7] include_from_node1(::String) at ./loading.jl:576
 [8] include(::String) at ./sysimg.jl:14
 [9] include_from_node1(::String) at ./loading.jl:576
 [10] include(::String) at ./sysimg.jl:14
 [11] process_options(::Base.JLOptions) at ./client.jl:305
 [12] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/MultiPoly/test/mpolycalculus.jl, in expression starting on line 18
ERROR: LoadError: LoadError: MethodError: Cannot `convert` an object of type Symbol to an object of type MultiPoly.MPoly{Float64}
This may have arisen from a call to the constructor MultiPoly.MPoly{Float64}(...),
since type constructors fall back to convert methods.
Stacktrace:
 [1] MultiPoly.MPoly{Float64}(::Symbol) at ./sysimg.jl:77
 [2] include_from_node1(::String) at ./loading.jl:576
 [3] include(::String) at ./sysimg.jl:14
 [4] include_from_node1(::String) at ./loading.jl:576
 [5] include(::String) at ./sysimg.jl:14
 [6] process_options(::Base.JLOptions) at ./client.jl:305
 [7] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/MultiPoly/test/mpolycalculus.jl, in expression starting on line 19
while loading /home/vagrant/.julia/v0.6/MultiPoly/test/runtests.jl, in expression starting on line 4
==============================[ ERROR: MultiPoly ]==============================

failed process: Process(`/home/vagrant/julia/bin/julia -Cx86-64 -J/home/vagrant/julia/lib/julia/sys.so --compile=yes --depwarn=yes --check-bounds=yes --code-coverage=none --color=no --compilecache=yes /home/vagrant/.julia/v0.6/MultiPoly/test/runtests.jl`, ProcessExited(1)) [1]

================================================================================
ERROR: MultiPoly had test errors

>>> End of log
