>>> 'Pkg.add("FlatBuffers")' log
[ Info: Installing FlatBuffers v0.3.1
[ Info: Package database updated
┌ Info: METADATA is out-of-date — you may not have the latest version of FlatBuffers
└ Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("FlatBuffers")' log
Julia Version 0.7.0-DEV.3487
Commit 808e828bcb (2018-01-20 20:33 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
      Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-135-generic #184-Ubuntu SMP Wed Oct 18 11:55:51 UTC 2017 x86_64 x86_64
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
              speed         user         nice          sys         idle          irq
       #1  3499 MHz    4297339 s        100 s     217803 s     860646 s         42 s
       #2  3499 MHz     730378 s       8060 s      69032 s    5482193 s          0 s
       
  Memory: 2.93927001953125 GB (989.3671875 MB free)
  Uptime: 63761.0 sec
  Load Avg:  0.9697265625  0.974609375  0.9814453125
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant
Packages:
  Package Directory: /home/vagrant/.julia/v0.7
  Package Status:
2 required packages:
 - FlatBuffers                   0.3.1
 - JSON                          0.16.4
2 additional packages:
 - Compat                        0.48.0
 - Nullables                     0.0.3
[ Info: Testing FlatBuffers
WARNING: importing deprecated binding Base.Void into FlatBuffers.
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/FlatBuffers/src/FlatBuffers.jl:123
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/FlatBuffers/src/FlatBuffers.jl:256
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/FlatBuffers/src/FlatBuffers.jl:313
WARNING: Base.Test is deprecated, run `using Test` instead.
  likely near /home/vagrant/.julia/v0.7/FlatBuffers/test/runtests.jl:2
WARNING: Base.Test is deprecated, run `using Test` instead.
  likely near /home/vagrant/.julia/v0.7/FlatBuffers/test/internals.jl:1
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = createstring(::FlatBuffers.Builder{Any}, ::String) at internals.jl:199
└ @ FlatBuffers internals.jl:199
┌ Warning: `copy!(dest::Union{AbstractArray, IndexStyle}, args...)` is deprecated, use `copyto!(dest, args...)` instead.
│   caller = createstring(::FlatBuffers.Builder{Any}, ::String) at internals.jl:207
└ @ FlatBuffers internals.jl:207
┌ Warning: `copy!(dest::Union{AbstractArray, IndexStyle}, args...)` is deprecated, use `copyto!(dest, args...)` instead.
│   caller = createbytevector(::FlatBuffers.Builder{Any}, ::UnitRange{UInt8}) at internals.jl:224
└ @ FlatBuffers internals.jl:224
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = checkFuzz(::Int64, ::Int64, ::Bool) at internals.jl:707
└ @ Main internals.jl:707
fuzz	fields: 100 	objects: 100 	bool: 910
fuzz	fields: 100 	objects: 100 	float32: 890
fuzz	fields: 100 	objects: 100 	float64: 932
fuzz	fields: 100 	objects: 100 	int16: 909
fuzz	fields: 100 	objects: 100 	int32: 882
fuzz	fields: 100 	objects: 100 	int64: 920
fuzz	fields: 100 	objects: 100 	int8: 897
fuzz	fields: 100 	objects: 100 	uint16: 919
fuzz	fields: 100 	objects: 100 	uint32: 908
fuzz	fields: 100 	objects: 100 	uint64: 943
fuzz	fields: 100 	objects: 100 	uint8: 890
ERROR: LoadError: UndefVarError: isconcrete not defined
Stacktrace:
 [1] isstruct at /home/vagrant/.julia/v0.7/FlatBuffers/src/FlatBuffers.jl:23 [inlined]
 [2] getoffset(::FlatBuffers.Builder{Main.Example.Monster}, ::Main.Example.Vec3) at /home/vagrant/.julia/v0.7/FlatBuffers/src/FlatBuffers.jl:320
 [3] (::getfield(FlatBuffers, Symbol("##34#36")){FlatBuffers.Builder{Main.Example.Monster},Main.Example.Monster})(::Int64) at ./<missing>:0
 [4] next at ./generator.jl:47 [inlined]
 [5] collect(::Base.Generator{UnitRange{Int64},getfield(FlatBuffers, Symbol("##34#36")){FlatBuffers.Builder{Main.Example.Monster},Main.Example.Monster}}) at ./array.jl:541
 [6] buildbuffer!(::FlatBuffers.Builder{Main.Example.Monster}, ::Main.Example.Monster) at /home/vagrant/.julia/v0.7/FlatBuffers/src/FlatBuffers.jl:362
 [7] build! at /home/vagrant/.julia/v0.7/FlatBuffers/src/FlatBuffers.jl:373 [inlined]
 [8] build!(::Main.Example.Monster) at /home/vagrant/.julia/v0.7/FlatBuffers/src/FlatBuffers.jl:378
 [9] top-level scope
 [10] include at ./boot.jl:292 [inlined]
 [11] include_relative(::Module, ::String) at ./loading.jl:1011
 [12] include(::Module, ::String) at ./sysimg.jl:26
 [13] process_options(::Base.JLOptions) at ./client.jl:324
 [14] _start() at ./client.jl:375
in expression starting at /home/vagrant/.julia/v0.7/FlatBuffers/test/runtests.jl:26
┌ Error: ------------------------------------------------------------
│ # Testing failed for FlatBuffers
│   exception =
│    failed process: Process(`/home/vagrant/julia/bin/julia -Cnative -J/home/vagrant/julia/lib/julia/sys.so --compile=yes --depwarn=yes --code-coverage=none --color=no --compiled-modules=yes --check-bounds=yes --warn-overwrite=yes --startup-file=yes /home/vagrant/.julia/v0.7/FlatBuffers/test/runtests.jl`, ProcessExited(1)) [1]
│    Stacktrace:
│     [1] error(::String, ::Base.Process, ::String, ::Int64, ::String) at ./error.jl:42
│     [2] pipeline_error(::Base.Process) at ./process.jl:694
│     [3] run(::Cmd) at ./process.jl:656
│     [4] (::getfield(Base.Pkg.Entry, Symbol("##91#94")){Bool,String,Array{AbstractString,1}})() at ./pkg/entry.jl:728
│     [5] cd(::getfield(Base.Pkg.Entry, Symbol("##91#94")){Bool,String,Array{AbstractString,1}}, ::String) at ./file.jl:70
│     [6] #test!#90(::Bool, ::Function, ::String, ::Array{AbstractString,1}, ::Array{AbstractString,1}, ::Array{AbstractString,1}) at ./pkg/entry.jl:716
│     [7] (::getfield(Base.Pkg.Entry, Symbol("#kw##test!")))(::NamedTuple{(:coverage,),Tuple{Bool}}, ::typeof(Base.Pkg.Entry.test!), ::String, ::Array{AbstractString,1}, ::Array{AbstractString,1}, ::Array{AbstractString,1}) at ./<missing>:0
│     [8] #test#98(::Bool, ::Function, ::Array{AbstractString,1}) at ./pkg/entry.jl:755
│     [9] (::getfield(Base.Pkg.Entry, Symbol("#kw##test")))(::NamedTuple{(:coverage,),Tuple{Bool}}, ::typeof(Base.Pkg.Entry.test), ::Array{AbstractString,1}) at ./<missing>:0
│     [10] (::getfield(Base.Pkg.Dir, Symbol("##4#7")){Base.Iterators.IndexValue{Symbol,Bool,Tuple{Symbol},NamedTuple{(:coverage,),Tuple{Bool}}},typeof(Base.Pkg.Entry.test),Tuple{Array{AbstractString,1}}})() at ./pkg/dir.jl:36
│     [11] cd(::getfield(Base.Pkg.Dir, Symbol("##4#7")){Base.Iterators.IndexValue{Symbol,Bool,Tuple{Symbol},NamedTuple{(:coverage,),Tuple{Bool}}},typeof(Base.Pkg.Entry.test),Tuple{Array{AbstractString,1}}}, ::String) at ./file.jl:70
│     [12] #cd#1(::Base.Iterators.IndexValue{Symbol,Bool,Tuple{Symbol},NamedTuple{(:coverage,),Tuple{Bool}}}, ::Function, ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N} where N) at ./pkg/dir.jl:36
│     [13] (::getfield(Base.Pkg.Dir, Symbol("#kw##cd")))(::NamedTuple{(:coverage,),Tuple{Bool}}, ::typeof(Base.Pkg.Dir.cd), ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N} where N) at ./<missing>:0
│     [14] #test#3(::Bool, ::Function, ::String, ::Vararg{String,N} where N) at ./pkg/pkg.jl:274
│     [15] test(::String, ::Vararg{String,N} where N) at ./pkg/pkg.jl:274
│     [16] top-level scope
│     [17] eval at ./boot.jl:295 [inlined]
│     [18] eval(::Module, ::Expr) at ./sysimg.jl:71
│     [19] process_options(::Base.JLOptions) at ./client.jl:301
│     [20] _start() at ./client.jl:375
└ @ Base.Pkg.Entry entry.jl:731
ERROR: FlatBuffers had test errors

>>> End of log
