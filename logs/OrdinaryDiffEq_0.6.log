>>> 'Pkg.add("OrdinaryDiffEq")' log
INFO: Installing Calculus v0.2.2
INFO: Installing Combinatorics v0.4.0
INFO: Installing DataStructures v0.5.3
INFO: Installing DiffBase v0.2.0
INFO: Installing DiffEqBase v1.6.1
INFO: Installing Distances v0.4.1
INFO: Installing ForwardDiff v0.4.2
INFO: Installing GenericSVD v0.0.2
INFO: Installing Hiccup v0.1.1
INFO: Installing Iterators v0.3.1
INFO: Installing Juno v0.2.7
INFO: Installing LineSearches v0.1.5
INFO: Installing MacroTools v0.3.6
INFO: Installing Media v0.2.7
INFO: Installing NLsolve v0.9.1
INFO: Installing NaNMath v0.2.4
INFO: Installing Optim v0.7.8
INFO: Installing OrdinaryDiffEq v2.3.2
INFO: Installing Parameters v0.7.2
INFO: Installing PolynomialFactors v0.0.5
INFO: Installing Polynomials v0.1.5
INFO: Installing PositiveFactorizations v0.0.4
INFO: Installing Primes v0.1.3
INFO: Installing Ranges v0.0.1
INFO: Installing RecipesBase v0.1.0
INFO: Installing RecursiveArrayTools v0.7.1
INFO: Installing Roots v0.3.1
INFO: Installing SimpleTraits v0.5.0
INFO: Installing SpecialFunctions v0.1.1
INFO: Installing StaticArrays v0.5.0
INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of OrdinaryDiffEq
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("OrdinaryDiffEq")' log
Julia Version 0.6.0-rc1.0
Commit 6bdb395 (2017-05-07 00:00 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-117-generic #164-Ubuntu SMP Fri Apr 7 11:05:26 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (458.94921875 MB free)
Uptime: 33564.0 sec
Load Avg:  0.9970703125  0.99072265625  0.986328125
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3498 MHz    2108506 s       3916 s      91002 s     615448 s         28 s
#2  3498 MHz     506330 s       2474 s      49951 s    2718707 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.6
2 required packages:
 - JSON                          0.12.0
 - OrdinaryDiffEq                2.3.2
30 additional packages:
 - Calculus                      0.2.2
 - Combinatorics                 0.4.0
 - Compat                        0.25.1
 - DataStructures                0.5.3
 - DiffBase                      0.2.0
 - DiffEqBase                    1.6.1
 - Distances                     0.4.1
 - ForwardDiff                   0.4.2
 - GenericSVD                    0.0.2
 - Hiccup                        0.1.1
 - Iterators                     0.3.1
 - Juno                          0.2.7
 - LineSearches                  0.1.5
 - MacroTools                    0.3.6
 - Media                         0.2.7
 - NLsolve                       0.9.1
 - NaNMath                       0.2.4
 - Optim                         0.7.8
 - Parameters                    0.7.2
 - PolynomialFactors             0.0.5
 - Polynomials                   0.1.5
 - PositiveFactorizations        0.0.4
 - Primes                        0.1.3
 - Ranges                        0.0.1
 - RecipesBase                   0.1.0
 - RecursiveArrayTools           0.7.1
 - Roots                         0.3.1
 - SimpleTraits                  0.5.0
 - SpecialFunctions              0.1.1
 - StaticArrays                  0.5.0
INFO: Computing test dependencies for OrdinaryDiffEq...
INFO: Cloning cache of DiffEqDevTools from https://github.com/JuliaDiffEq/DiffEqDevTools.jl.git
INFO: Cloning cache of SpecialMatrices from https://github.com/jiahao/SpecialMatrices.jl.git
INFO: Installing BinDeps v0.5.0
INFO: Installing Blosc v0.2.1
INFO: Installing ChunkedArrays v0.1.1
INFO: Installing Conda v0.5.3
INFO: Installing DiffEqDevTools v0.8.1
INFO: Installing DiffEqPDEBase v0.3.2
INFO: Installing DiffEqProblemLibrary v0.7.0
INFO: Installing Distributions v0.12.5
INFO: Installing EllipsisNotation v0.1.0
INFO: Installing FileIO v0.3.1
INFO: Installing HDF5 v0.8.1
INFO: Installing JLD v0.6.10
INFO: Installing LegacyStrings v0.2.1
INFO: Installing ODEInterface v0.1.2
INFO: Installing ODEInterfaceDiffEq v0.4.1
INFO: Installing PDMats v0.6.0
INFO: Installing ParameterizedFunctions v2.0.0
INFO: Installing QuadGK v0.1.2
INFO: Installing Rmath v0.1.6
INFO: Installing SHA v0.3.2
INFO: Installing SpecialMatrices v0.1.3
INFO: Installing StatsBase v0.14.1
INFO: Installing StatsFuns v0.5.0
INFO: Installing SymEngine v0.2.0
INFO: Installing URIParser v0.1.8
INFO: Installing Unitful v0.2.3
INFO: Installing VectorizedRoutines v0.0.2
INFO: Building Blosc
INFO: Building Conda
INFO: Building Rmath
INFO: Building SymEngine
INFO: Building HDF5
INFO: Building ODEInterface
/home/vagrant/.julia/v0.6/ODEInterface/src/bvpsol.f:4678.37:

      CALL BLDFSC ('INITIAL ', Y, N, DUMMY, YWGT, YMAX, TOL, ONE)       
                                     1
Warning: Rank mismatch in argument 'yold' at (1) (rank-1 and scalar)
/home/vagrant/.julia/v0.6/ODEInterface/src/bvpsol.f:4853.40:

         CALL BLDFSC ('ACCEPTED', Y, N, DUMMY, YWGT, YMAX, TOL, ONE)    
                                        1
Warning: Rank mismatch in argument 'yold' at (1) (rank-1 and scalar)
/home/vagrant/.julia/v0.6/ODEInterface/src/bvpsol.f:4678.37:

      CALL BLDFSC ('INITIAL ', Y, N, DUMMY, YWGT, YMAX, TOL, ONE)       
                                     1
Warning: Rank mismatch in argument 'yold' at (1) (rank-1 and scalar)
/home/vagrant/.julia/v0.6/ODEInterface/src/bvpsol.f:4853.40:

         CALL BLDFSC ('ACCEPTED', Y, N, DUMMY, YWGT, YMAX, TOL, ONE)    
                                        1
Warning: Rank mismatch in argument 'yold' at (1) (rank-1 and scalar)
INFO: Testing OrdinaryDiffEq
Test Summary:  | Pass  Total
Discrete Tests |    9      9
 19.428361 seconds (9.65 M allocations: 1.321 GiB, 1.91% gc time)
Test Summary: |
Linear Tests  | No tests
  7.382185 seconds (2.65 M allocations: 507.376 MiB, 1.58% gc time)
Convergence Test on Linear
Special RKs
Convergence Test on Stiff
WARNING: Array{T}(::Type{T}, m::Int, n::Int) is deprecated, use Array{T}(m, n) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] Array(::Type{Float64}, ::Int64, ::Int64) at ./deprecated.jl:51
 [3] trust_region_(::NLsolve.DifferentiableMultivariateFunction, ::Array{Float64,1}, ::Float64, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::Float64, ::Bool) at /home/vagrant/.julia/v0.6/NLsolve/src/trust_region.jl:82
 [4] #nlsolve#17(::Symbol, ::Float64, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::Function, ::Float64, ::Bool, ::NLsolve.#nlsolve, ::NLsolve.DifferentiableMultivariateFunction, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/NLsolve/src/nlsolve_func_defs.jl:24
 [5] NLSOLVEJL_SETUP at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/misc_utils.jl:51 [inlined]
 [6] perform_step! at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/integrators/implicit_integrators.jl:28 [inlined]
 [7] perform_step! at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/integrators/implicit_integrators.jl:20 [inlined]
 [8] solve!(::OrdinaryDiffEq.ODEIntegrator{OrdinaryDiffEq.ImplicitEuler{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}},Float64,Float64,Float64,Float64,Array{Float64,1},DiffEqBase.ODESolution{Float64,1,Array{Float64,1},Array{Float64,1},Dict{Symbol,Float64},Array{Float64,1},Array{Array{Float64,1},1},DiffEqBase.ODEProblem{Float64,Float64,false,DiffEqProblemLibrary.##1#2,Void,UniformScaling{Int64}},OrdinaryDiffEq.ImplicitEuler{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}},OrdinaryDiffEq.InterpolationData{DiffEqProblemLibrary.##1#2,Array{Float64,1},Array{Float64,1},Array{Array{Float64,1},1},OrdinaryDiffEq.ImplicitEulerConstantCache{Array{Float64,1},OrdinaryDiffEq.RHS_IE_Scalar{DiffEqProblemLibrary.##1#2,Array{Float64,1},Float64},NLsolve.DifferentiableMultivariateFunction}}},Float64,DiffEqProblemLibrary.##1#2,Void,OrdinaryDiffEq.ImplicitEulerConstantCache{Array{Float64,1},OrdinaryDiffEq.RHS_IE_Scalar{DiffEqProblemLibrary.##1#2,Array{Float64,1},Float64},NLsolve.DifferentiableMultivariateFunction},OrdinaryDiffEq.DEOptions{Float64,Float64,Float64,Float64,DiffEqBase.#ODE_DEFAULT_NORM,DiffEqBase.CallbackSet{Tuple{},Tuple{}},DiffEqBase.#ODE_DEFAULT_ISOUTOFDOMAIN,DiffEqBase.#ODE_DEFAULT_PROG_MESSAGE,DiffEqBase.#ODE_DEFAULT_UNSTABLE_CHECK,DataStructures.BinaryHeap{Float64,DataStructures.LessThan},Void,Void},Float64}) at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/solve.jl:308
 [9] #solve#87(::Array{Any,1}, ::Function, ::DiffEqBase.ODEProblem{Float64,Float64,false,DiffEqProblemLibrary.##1#2,Void,UniformScaling{Int64}}, ::OrdinaryDiffEq.ImplicitEuler{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/solve.jl:7
 [10] (::DiffEqBase.#kw##solve)(::Array{Any,1}, ::DiffEqBase.#solve, ::DiffEqBase.ODEProblem{Float64,Float64,false,DiffEqProblemLibrary.##1#2,Void,UniformScaling{Int64}}, ::OrdinaryDiffEq.ImplicitEuler{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at ./<missing>:0
 [11] (::DiffEqDevTools.##36#37{Bool,Bool,Array{Any,1},Array{Rational{Int64},1},DiffEqBase.ODEProblem{Float64,Float64,false,DiffEqProblemLibrary.##1#2,Void,UniformScaling{Int64}},OrdinaryDiffEq.ImplicitEuler{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}}})(::Int64) at ./<missing>:0
 [12] collect(::Base.Generator{UnitRange{Int64},DiffEqDevTools.##36#37{Bool,Bool,Array{Any,1},Array{Rational{Int64},1},DiffEqBase.ODEProblem{Float64,Float64,false,DiffEqProblemLibrary.##1#2,Void,UniformScaling{Int64}},OrdinaryDiffEq.ImplicitEuler{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}}}}) at ./array.jl:429
 [13] #test_convergence#35(::Bool, ::Bool, ::Array{Any,1}, ::Function, ::Array{Rational{Int64},1}, ::DiffEqBase.ODEProblem{Float64,Float64,false,DiffEqProblemLibrary.##1#2,Void,UniformScaling{Int64}}, ::OrdinaryDiffEq.ImplicitEuler{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}}) at /home/vagrant/.julia/v0.6/DiffEqDevTools/src/convergence.jl:67
 [14] test_convergence(::Array{Rational{Int64},1}, ::DiffEqBase.ODEProblem{Float64,Float64,false,DiffEqProblemLibrary.##1#2,Void,UniformScaling{Int64}}, ::OrdinaryDiffEq.ImplicitEuler{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}}) at /home/vagrant/.julia/v0.6/DiffEqDevTools/src/convergence.jl:66
 [15] macro expansion at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/test/ode/ode_convergence_tests.jl:30 [inlined]
 [16] anonymous at ./<missing>:?
 [17] include_from_node1(::String) at ./loading.jl:552
 [18] include(::String) at ./sysimg.jl:14
 [19] macro expansion at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/test/runtests.jl:18 [inlined]
 [20] macro expansion at ./test.jl:856 [inlined]
 [21] macro expansion at ./util.jl:237 [inlined]
 [22] anonymous at ./<missing>:?
 [23] include_from_node1(::String) at ./loading.jl:552
 [24] include(::String) at ./sysimg.jl:14
 [25] process_options(::Base.JLOptions) at ./client.jl:305
 [26] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/OrdinaryDiffEq/test/ode/ode_convergence_tests.jl, in expression starting on line 13
WARNING: !(B::BitArray) is deprecated, use .!(B) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] !(::BitArray{1}) at ./deprecated.jl:51
 [3] check_isfinite(::Array{Float64,1}) at /home/vagrant/.julia/v0.6/NLsolve/src/utils.jl:32
 [4] trust_region_(::NLsolve.DifferentiableMultivariateFunction, ::Array{Float64,1}, ::Float64, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::Float64, ::Bool) at /home/vagrant/.julia/v0.6/NLsolve/src/trust_region.jl:91
 [5] #nlsolve#17(::Symbol, ::Float64, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::Function, ::Float64, ::Bool, ::NLsolve.#nlsolve, ::NLsolve.DifferentiableMultivariateFunction, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/NLsolve/src/nlsolve_func_defs.jl:24
 [6] NLSOLVEJL_SETUP at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/misc_utils.jl:51 [inlined]
 [7] perform_step! at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/integrators/implicit_integrators.jl:28 [inlined]
 [8] perform_step! at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/integrators/implicit_integrators.jl:20 [inlined]
 [9] solve!(::OrdinaryDiffEq.ODEIntegrator{OrdinaryDiffEq.ImplicitEuler{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}},Float64,Float64,Float64,Float64,Array{Float64,1},DiffEqBase.ODESolution{Float64,1,Array{Float64,1},Array{Float64,1},Dict{Symbol,Float64},Array{Float64,1},Array{Array{Float64,1},1},DiffEqBase.ODEProblem{Float64,Float64,false,DiffEqProblemLibrary.##1#2,Void,UniformScaling{Int64}},OrdinaryDiffEq.ImplicitEuler{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}},OrdinaryDiffEq.InterpolationData{DiffEqProblemLibrary.##1#2,Array{Float64,1},Array{Float64,1},Array{Array{Float64,1},1},OrdinaryDiffEq.ImplicitEulerConstantCache{Array{Float64,1},OrdinaryDiffEq.RHS_IE_Scalar{DiffEqProblemLibrary.##1#2,Array{Float64,1},Float64},NLsolve.DifferentiableMultivariateFunction}}},Float64,DiffEqProblemLibrary.##1#2,Void,OrdinaryDiffEq.ImplicitEulerConstantCache{Array{Float64,1},OrdinaryDiffEq.RHS_IE_Scalar{DiffEqProblemLibrary.##1#2,Array{Float64,1},Float64},NLsolve.DifferentiableMultivariateFunction},OrdinaryDiffEq.DEOptions{Float64,Float64,Float64,Float64,DiffEqBase.#ODE_DEFAULT_NORM,DiffEqBase.CallbackSet{Tuple{},Tuple{}},DiffEqBase.#ODE_DEFAULT_ISOUTOFDOMAIN,DiffEqBase.#ODE_DEFAULT_PROG_MESSAGE,DiffEqBase.#ODE_DEFAULT_UNSTABLE_CHECK,DataStructures.BinaryHeap{Float64,DataStructures.LessThan},Void,Void},Float64}) at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/solve.jl:308
 [10] #solve#87(::Array{Any,1}, ::Function, ::DiffEqBase.ODEProblem{Float64,Float64,false,DiffEqProblemLibrary.##1#2,Void,UniformScaling{Int64}}, ::OrdinaryDiffEq.ImplicitEuler{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/solve.jl:7
 [11] (::DiffEqBase.#kw##solve)(::Array{Any,1}, ::DiffEqBase.#solve, ::DiffEqBase.ODEProblem{Float64,Float64,false,DiffEqProblemLibrary.##1#2,Void,UniformScaling{Int64}}, ::OrdinaryDiffEq.ImplicitEuler{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at ./<missing>:0
 [12] (::DiffEqDevTools.##36#37{Bool,Bool,Array{Any,1},Array{Rational{Int64},1},DiffEqBase.ODEProblem{Float64,Float64,false,DiffEqProblemLibrary.##1#2,Void,UniformScaling{Int64}},OrdinaryDiffEq.ImplicitEuler{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}}})(::Int64) at ./<missing>:0
 [13] collect(::Base.Generator{UnitRange{Int64},DiffEqDevTools.##36#37{Bool,Bool,Array{Any,1},Array{Rational{Int64},1},DiffEqBase.ODEProblem{Float64,Float64,false,DiffEqProblemLibrary.##1#2,Void,UniformScaling{Int64}},OrdinaryDiffEq.ImplicitEuler{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}}}}) at ./array.jl:429
 [14] #test_convergence#35(::Bool, ::Bool, ::Array{Any,1}, ::Function, ::Array{Rational{Int64},1}, ::DiffEqBase.ODEProblem{Float64,Float64,false,DiffEqProblemLibrary.##1#2,Void,UniformScaling{Int64}}, ::OrdinaryDiffEq.ImplicitEuler{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}}) at /home/vagrant/.julia/v0.6/DiffEqDevTools/src/convergence.jl:67
 [15] test_convergence(::Array{Rational{Int64},1}, ::DiffEqBase.ODEProblem{Float64,Float64,false,DiffEqProblemLibrary.##1#2,Void,UniformScaling{Int64}}, ::OrdinaryDiffEq.ImplicitEuler{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}}) at /home/vagrant/.julia/v0.6/DiffEqDevTools/src/convergence.jl:66
 [16] macro expansion at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/test/ode/ode_convergence_tests.jl:30 [inlined]
 [17] anonymous at ./<missing>:?
 [18] include_from_node1(::String) at ./loading.jl:552
 [19] include(::String) at ./sysimg.jl:14
 [20] macro expansion at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/test/runtests.jl:18 [inlined]
 [21] macro expansion at ./test.jl:856 [inlined]
 [22] macro expansion at ./util.jl:237 [inlined]
 [23] anonymous at ./<missing>:?
 [24] include_from_node1(::String) at ./loading.jl:552
 [25] include(::String) at ./sysimg.jl:14
 [26] process_options(::Base.JLOptions) at ./client.jl:305
 [27] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/OrdinaryDiffEq/test/ode/ode_convergence_tests.jl, in expression starting on line 13
WARNING: Array{T}(::Type{T}, m::Int) is deprecated, use Array{T}(m) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] Array(::Type{NLsolve.SolverState}, ::Int64) at ./deprecated.jl:51
 [3] Type at /home/vagrant/.julia/v0.6/NLsolve/src/solver_state_results.jl:20 [inlined]
 [4] trust_region_(::NLsolve.DifferentiableMultivariateFunction, ::Array{Float64,1}, ::Float64, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::Float64, ::Bool) at /home/vagrant/.julia/v0.6/NLsolve/src/trust_region.jl:99
 [5] #nlsolve#17(::Symbol, ::Float64, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::Function, ::Float64, ::Bool, ::NLsolve.#nlsolve, ::NLsolve.DifferentiableMultivariateFunction, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/NLsolve/src/nlsolve_func_defs.jl:24
 [6] NLSOLVEJL_SETUP at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/misc_utils.jl:51 [inlined]
 [7] perform_step! at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/integrators/implicit_integrators.jl:28 [inlined]
 [8] perform_step! at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/integrators/implicit_integrators.jl:20 [inlined]
 [9] solve!(::OrdinaryDiffEq.ODEIntegrator{OrdinaryDiffEq.ImplicitEuler{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}},Float64,Float64,Float64,Float64,Array{Float64,1},DiffEqBase.ODESolution{Float64,1,Array{Float64,1},Array{Float64,1},Dict{Symbol,Float64},Array{Float64,1},Array{Array{Float64,1},1},DiffEqBase.ODEProblem{Float64,Float64,false,DiffEqProblemLibrary.##1#2,Void,UniformScaling{Int64}},OrdinaryDiffEq.ImplicitEuler{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}},OrdinaryDiffEq.InterpolationData{DiffEqProblemLibrary.##1#2,Array{Float64,1},Array{Float64,1},Array{Array{Float64,1},1},OrdinaryDiffEq.ImplicitEulerConstantCache{Array{Float64,1},OrdinaryDiffEq.RHS_IE_Scalar{DiffEqProblemLibrary.##1#2,Array{Float64,1},Float64},NLsolve.DifferentiableMultivariateFunction}}},Float64,DiffEqProblemLibrary.##1#2,Void,OrdinaryDiffEq.ImplicitEulerConstantCache{Array{Float64,1},OrdinaryDiffEq.RHS_IE_Scalar{DiffEqProblemLibrary.##1#2,Array{Float64,1},Float64},NLsolve.DifferentiableMultivariateFunction},OrdinaryDiffEq.DEOptions{Float64,Float64,Float64,Float64,DiffEqBase.#ODE_DEFAULT_NORM,DiffEqBase.CallbackSet{Tuple{},Tuple{}},DiffEqBase.#ODE_DEFAULT_ISOUTOFDOMAIN,DiffEqBase.#ODE_DEFAULT_PROG_MESSAGE,DiffEqBase.#ODE_DEFAULT_UNSTABLE_CHECK,DataStructures.BinaryHeap{Float64,DataStructures.LessThan},Void,Void},Float64}) at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/solve.jl:308
 [10] #solve#87(::Array{Any,1}, ::Function, ::DiffEqBase.ODEProblem{Float64,Float64,false,DiffEqProblemLibrary.##1#2,Void,UniformScaling{Int64}}, ::OrdinaryDiffEq.ImplicitEuler{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/solve.jl:7
 [11] (::DiffEqBase.#kw##solve)(::Array{Any,1}, ::DiffEqBase.#solve, ::DiffEqBase.ODEProblem{Float64,Float64,false,DiffEqProblemLibrary.##1#2,Void,UniformScaling{Int64}}, ::OrdinaryDiffEq.ImplicitEuler{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at ./<missing>:0
 [12] (::DiffEqDevTools.##36#37{Bool,Bool,Array{Any,1},Array{Rational{Int64},1},DiffEqBase.ODEProblem{Float64,Float64,false,DiffEqProblemLibrary.##1#2,Void,UniformScaling{Int64}},OrdinaryDiffEq.ImplicitEuler{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}}})(::Int64) at ./<missing>:0
 [13] collect(::Base.Generator{UnitRange{Int64},DiffEqDevTools.##36#37{Bool,Bool,Array{Any,1},Array{Rational{Int64},1},DiffEqBase.ODEProblem{Float64,Float64,false,DiffEqProblemLibrary.##1#2,Void,UniformScaling{Int64}},OrdinaryDiffEq.ImplicitEuler{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}}}}) at ./array.jl:429
 [14] #test_convergence#35(::Bool, ::Bool, ::Array{Any,1}, ::Function, ::Array{Rational{Int64},1}, ::DiffEqBase.ODEProblem{Float64,Float64,false,DiffEqProblemLibrary.##1#2,Void,UniformScaling{Int64}}, ::OrdinaryDiffEq.ImplicitEuler{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}}) at /home/vagrant/.julia/v0.6/DiffEqDevTools/src/convergence.jl:67
 [15] test_convergence(::Array{Rational{Int64},1}, ::DiffEqBase.ODEProblem{Float64,Float64,false,DiffEqProblemLibrary.##1#2,Void,UniformScaling{Int64}}, ::OrdinaryDiffEq.ImplicitEuler{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}}) at /home/vagrant/.julia/v0.6/DiffEqDevTools/src/convergence.jl:66
 [16] macro expansion at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/test/ode/ode_convergence_tests.jl:30 [inlined]
 [17] anonymous at ./<missing>:?
 [18] include_from_node1(::String) at ./loading.jl:552
 [19] include(::String) at ./sysimg.jl:14
 [20] macro expansion at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/test/runtests.jl:18 [inlined]
 [21] macro expansion at ./test.jl:856 [inlined]
 [22] macro expansion at ./util.jl:237 [inlined]
 [23] anonymous at ./<missing>:?
 [24] include_from_node1(::String) at ./loading.jl:552
 [25] include(::String) at ./sysimg.jl:14
 [26] process_options(::Base.JLOptions) at ./client.jl:305
 [27] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/OrdinaryDiffEq/test/ode/ode_convergence_tests.jl, in expression starting on line 13
Special RKs
Convergence Test on Stiff
Test Summary:     | Pass  Total
Convergence Tests |   16     16
 38.916508 seconds (14.00 M allocations: 1.784 GiB, 2.31% gc time)
Test Summary:  | Pass  Total
Adaptive Tests |    2      2
  5.564907 seconds (2.92 M allocations: 476.323 MiB, 2.41% gc time)
Test Summary: | Pass  Total
Tstops Tests  |    6      6
  4.783868 seconds (2.50 M allocations: 501.014 MiB, 2.95% gc time)
Test Summary:   | Pass  Total
Backwards Tests |    4      4
  9.099815 seconds (3.23 M allocations: 317.647 MiB, 1.82% gc time)
Solve and Plot
Solve and Plot
Test Summary:    | Pass  Total
Initial Dt Tests |    7      7
  8.912418 seconds (3.54 M allocations: 550.791 MiB, 2.17% gc time)
Test Summary:    | Pass  Total
Rosenbrock Tests |   12     12
 19.857145 seconds (11.53 M allocations: 1.640 GiB, 3.30% gc time)
Test Summary:               | Pass  Total
Differentiation Trait Tests |    7      7
 12.250857 seconds (5.12 M allocations: 938.927 MiB, 4.22% gc time)
Test Summary:             | Pass  Total
Partitioned Methods Tests |    2      2
  8.215455 seconds (3.04 M allocations: 370.537 MiB, 2.06% gc time)
Test Summary:       | Pass  Total
Split Methods Tests |    4      4
  7.079868 seconds (2.68 M allocations: 430.731 MiB, 2.04% gc time)
Test Summary: | Pass  Total
SSPRK Tests   |   21     21
 43.643085 seconds (16.47 M allocations: 2.351 GiB, 2.62% gc time)
WARNING: redefining constant linear_bigÎ±
WARNING: Array{T}(::Type{T}, m::Int, n::Int) is deprecated, use Array{T}(m, n) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] Array(::Type{Float64}, ::Int64, ::Int64) at ./deprecated.jl:51
 [3] trust_region_(::NLsolve.DifferentiableMultivariateFunction, ::Array{Float64,1}, ::Float64, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::Float64, ::Bool) at /home/vagrant/.julia/v0.6/NLsolve/src/trust_region.jl:82
 [4] #nlsolve#17(::Symbol, ::Float64, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::Function, ::Float64, ::Bool, ::NLsolve.#nlsolve, ::NLsolve.DifferentiableMultivariateFunction, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/NLsolve/src/nlsolve_func_defs.jl:24
 [5] NLSOLVEJL_SETUP at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/misc_utils.jl:51 [inlined]
 [6] perform_step! at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/integrators/implicit_integrators.jl:28 [inlined]
 [7] perform_step! at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/integrators/implicit_integrators.jl:20 [inlined]
 [8] solve!(::OrdinaryDiffEq.ODEIntegrator{OrdinaryDiffEq.ImplicitEuler{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}},Float64,Float64,Float64,Float64,Array{Float64,1},DiffEqBase.ODESolution{Float64,1,Array{Float64,1},Array{Float64,1},Dict{Symbol,Float64},Array{Float64,1},Array{Array{Float64,1},1},DiffEqBase.ODEProblem{Float64,Float64,false,DiffEqProblemLibrary.##1#2,Void,UniformScaling{Int64}},OrdinaryDiffEq.ImplicitEuler{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}},OrdinaryDiffEq.InterpolationData{DiffEqProblemLibrary.##1#2,Array{Float64,1},Array{Float64,1},Array{Array{Float64,1},1},OrdinaryDiffEq.ImplicitEulerConstantCache{Array{Float64,1},OrdinaryDiffEq.RHS_IE_Scalar{DiffEqProblemLibrary.##1#2,Array{Float64,1},Float64},NLsolve.DifferentiableMultivariateFunction}}},Float64,DiffEqProblemLibrary.##1#2,Void,OrdinaryDiffEq.ImplicitEulerConstantCache{Array{Float64,1},OrdinaryDiffEq.RHS_IE_Scalar{DiffEqProblemLibrary.##1#2,Array{Float64,1},Float64},NLsolve.DifferentiableMultivariateFunction},OrdinaryDiffEq.DEOptions{Float64,Float64,Float64,Float64,DiffEqBase.#ODE_DEFAULT_NORM,DiffEqBase.CallbackSet{Tuple{},Tuple{}},DiffEqBase.#ODE_DEFAULT_ISOUTOFDOMAIN,DiffEqBase.#ODE_DEFAULT_PROG_MESSAGE,DiffEqBase.#ODE_DEFAULT_UNSTABLE_CHECK,DataStructures.BinaryHeap{Float64,DataStructures.LessThan},Void,Void},Float64}) at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/solve.jl:308
 [9] #solve#87(::Array{Any,1}, ::Function, ::DiffEqBase.ODEProblem{Float64,Float64,false,DiffEqProblemLibrary.##1#2,Void,UniformScaling{Int64}}, ::OrdinaryDiffEq.ImplicitEuler{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/solve.jl:7
 [10] (::DiffEqBase.#kw##solve)(::Array{Any,1}, ::DiffEqBase.#solve, ::DiffEqBase.ODEProblem{Float64,Float64,false,DiffEqProblemLibrary.##1#2,Void,UniformScaling{Int64}}, ::OrdinaryDiffEq.ImplicitEuler{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at ./<missing>:0 (repeats 2 times)
 [11] include_from_node1(::String) at ./loading.jl:552
 [12] include(::String) at ./sysimg.jl:14
 [13] macro expansion at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/test/runtests.jl:29 [inlined]
 [14] macro expansion at ./test.jl:856 [inlined]
 [15] macro expansion at ./util.jl:237 [inlined]
 [16] anonymous at ./<missing>:?
 [17] include_from_node1(::String) at ./loading.jl:552
 [18] include(::String) at ./sysimg.jl:14
 [19] process_options(::Base.JLOptions) at ./client.jl:305
 [20] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/OrdinaryDiffEq/test/ode/ode_dense_tests.jl, in expression starting on line 440
WARNING: !(B::BitArray) is deprecated, use .!(B) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] !(::BitArray{1}) at ./deprecated.jl:51
 [3] check_isfinite(::Array{Float64,1}) at /home/vagrant/.julia/v0.6/NLsolve/src/utils.jl:32
 [4] trust_region_(::NLsolve.DifferentiableMultivariateFunction, ::Array{Float64,1}, ::Float64, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::Float64, ::Bool) at /home/vagrant/.julia/v0.6/NLsolve/src/trust_region.jl:91
 [5] #nlsolve#17(::Symbol, ::Float64, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::Function, ::Float64, ::Bool, ::NLsolve.#nlsolve, ::NLsolve.DifferentiableMultivariateFunction, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/NLsolve/src/nlsolve_func_defs.jl:24
 [6] NLSOLVEJL_SETUP at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/misc_utils.jl:51 [inlined]
 [7] perform_step! at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/integrators/implicit_integrators.jl:28 [inlined]
 [8] perform_step! at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/integrators/implicit_integrators.jl:20 [inlined]
 [9] solve!(::OrdinaryDiffEq.ODEIntegrator{OrdinaryDiffEq.ImplicitEuler{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}},Float64,Float64,Float64,Float64,Array{Float64,1},DiffEqBase.ODESolution{Float64,1,Array{Float64,1},Array{Float64,1},Dict{Symbol,Float64},Array{Float64,1},Array{Array{Float64,1},1},DiffEqBase.ODEProblem{Float64,Float64,false,DiffEqProblemLibrary.##1#2,Void,UniformScaling{Int64}},OrdinaryDiffEq.ImplicitEuler{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}},OrdinaryDiffEq.InterpolationData{DiffEqProblemLibrary.##1#2,Array{Float64,1},Array{Float64,1},Array{Array{Float64,1},1},OrdinaryDiffEq.ImplicitEulerConstantCache{Array{Float64,1},OrdinaryDiffEq.RHS_IE_Scalar{DiffEqProblemLibrary.##1#2,Array{Float64,1},Float64},NLsolve.DifferentiableMultivariateFunction}}},Float64,DiffEqProblemLibrary.##1#2,Void,OrdinaryDiffEq.ImplicitEulerConstantCache{Array{Float64,1},OrdinaryDiffEq.RHS_IE_Scalar{DiffEqProblemLibrary.##1#2,Array{Float64,1},Float64},NLsolve.DifferentiableMultivariateFunction},OrdinaryDiffEq.DEOptions{Float64,Float64,Float64,Float64,DiffEqBase.#ODE_DEFAULT_NORM,DiffEqBase.CallbackSet{Tuple{},Tuple{}},DiffEqBase.#ODE_DEFAULT_ISOUTOFDOMAIN,DiffEqBase.#ODE_DEFAULT_PROG_MESSAGE,DiffEqBase.#ODE_DEFAULT_UNSTABLE_CHECK,DataStructures.BinaryHeap{Float64,DataStructures.LessThan},Void,Void},Float64}) at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/solve.jl:308
 [10] #solve#87(::Array{Any,1}, ::Function, ::DiffEqBase.ODEProblem{Float64,Float64,false,DiffEqProblemLibrary.##1#2,Void,UniformScaling{Int64}}, ::OrdinaryDiffEq.ImplicitEuler{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/solve.jl:7
 [11] (::DiffEqBase.#kw##solve)(::Array{Any,1}, ::DiffEqBase.#solve, ::DiffEqBase.ODEProblem{Float64,Float64,false,DiffEqProblemLibrary.##1#2,Void,UniformScaling{Int64}}, ::OrdinaryDiffEq.ImplicitEuler{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at ./<missing>:0 (repeats 2 times)
 [12] include_from_node1(::String) at ./loading.jl:552
 [13] include(::String) at ./sysimg.jl:14
 [14] macro expansion at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/test/runtests.jl:29 [inlined]
 [15] macro expansion at ./test.jl:856 [inlined]
 [16] macro expansion at ./util.jl:237 [inlined]
 [17] anonymous at ./<missing>:?
 [18] include_from_node1(::String) at ./loading.jl:552
 [19] include(::String) at ./sysimg.jl:14
 [20] process_options(::Base.JLOptions) at ./client.jl:305
 [21] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/OrdinaryDiffEq/test/ode/ode_dense_tests.jl, in expression starting on line 440
WARNING: Array{T}(::Type{T}, m::Int) is deprecated, use Array{T}(m) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] Array(::Type{NLsolve.SolverState}, ::Int64) at ./deprecated.jl:51
 [3] Type at /home/vagrant/.julia/v0.6/NLsolve/src/solver_state_results.jl:20 [inlined]
 [4] trust_region_(::NLsolve.DifferentiableMultivariateFunction, ::Array{Float64,1}, ::Float64, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::Float64, ::Bool) at /home/vagrant/.julia/v0.6/NLsolve/src/trust_region.jl:99
 [5] #nlsolve#17(::Symbol, ::Float64, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::Function, ::Float64, ::Bool, ::NLsolve.#nlsolve, ::NLsolve.DifferentiableMultivariateFunction, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/NLsolve/src/nlsolve_func_defs.jl:24
 [6] NLSOLVEJL_SETUP at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/misc_utils.jl:51 [inlined]
 [7] perform_step! at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/integrators/implicit_integrators.jl:28 [inlined]
 [8] perform_step! at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/integrators/implicit_integrators.jl:20 [inlined]
 [9] solve!(::OrdinaryDiffEq.ODEIntegrator{OrdinaryDiffEq.ImplicitEuler{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}},Float64,Float64,Float64,Float64,Array{Float64,1},DiffEqBase.ODESolution{Float64,1,Array{Float64,1},Array{Float64,1},Dict{Symbol,Float64},Array{Float64,1},Array{Array{Float64,1},1},DiffEqBase.ODEProblem{Float64,Float64,false,DiffEqProblemLibrary.##1#2,Void,UniformScaling{Int64}},OrdinaryDiffEq.ImplicitEuler{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}},OrdinaryDiffEq.InterpolationData{DiffEqProblemLibrary.##1#2,Array{Float64,1},Array{Float64,1},Array{Array{Float64,1},1},OrdinaryDiffEq.ImplicitEulerConstantCache{Array{Float64,1},OrdinaryDiffEq.RHS_IE_Scalar{DiffEqProblemLibrary.##1#2,Array{Float64,1},Float64},NLsolve.DifferentiableMultivariateFunction}}},Float64,DiffEqProblemLibrary.##1#2,Void,OrdinaryDiffEq.ImplicitEulerConstantCache{Array{Float64,1},OrdinaryDiffEq.RHS_IE_Scalar{DiffEqProblemLibrary.##1#2,Array{Float64,1},Float64},NLsolve.DifferentiableMultivariateFunction},OrdinaryDiffEq.DEOptions{Float64,Float64,Float64,Float64,DiffEqBase.#ODE_DEFAULT_NORM,DiffEqBase.CallbackSet{Tuple{},Tuple{}},DiffEqBase.#ODE_DEFAULT_ISOUTOFDOMAIN,DiffEqBase.#ODE_DEFAULT_PROG_MESSAGE,DiffEqBase.#ODE_DEFAULT_UNSTABLE_CHECK,DataStructures.BinaryHeap{Float64,DataStructures.LessThan},Void,Void},Float64}) at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/solve.jl:308
 [10] #solve#87(::Array{Any,1}, ::Function, ::DiffEqBase.ODEProblem{Float64,Float64,false,DiffEqProblemLibrary.##1#2,Void,UniformScaling{Int64}}, ::OrdinaryDiffEq.ImplicitEuler{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/solve.jl:7
 [11] (::DiffEqBase.#kw##solve)(::Array{Any,1}, ::DiffEqBase.#solve, ::DiffEqBase.ODEProblem{Float64,Float64,false,DiffEqProblemLibrary.##1#2,Void,UniformScaling{Int64}}, ::OrdinaryDiffEq.ImplicitEuler{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at ./<missing>:0 (repeats 2 times)
 [12] include_from_node1(::String) at ./loading.jl:552
 [13] include(::String) at ./sysimg.jl:14
 [14] macro expansion at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/test/runtests.jl:29 [inlined]
 [15] macro expansion at ./test.jl:856 [inlined]
 [16] macro expansion at ./util.jl:237 [inlined]
 [17] anonymous at ./<missing>:?
 [18] include_from_node1(::String) at ./loading.jl:552
 [19] include(::String) at ./sysimg.jl:14
 [20] process_options(::Base.JLOptions) at ./client.jl:305
 [21] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/OrdinaryDiffEq/test/ode/ode_dense_tests.jl, in expression starting on line 440
WARNING: Array{T}(::Type{T}, m::Int, n::Int) is deprecated, use Array{T}(m, n) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] Array(::Type{Float64}, ::Int64, ::Int64) at ./deprecated.jl:51
 [3] trust_region_(::NLsolve.DifferentiableMultivariateFunction, ::Array{Float64,1}, ::Float64, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::Float64, ::Bool) at /home/vagrant/.julia/v0.6/NLsolve/src/trust_region.jl:82
 [4] #nlsolve#17(::Symbol, ::Float64, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::Function, ::Float64, ::Bool, ::NLsolve.#nlsolve, ::NLsolve.DifferentiableMultivariateFunction, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/NLsolve/src/nlsolve_func_defs.jl:24
 [5] NLSOLVEJL_SETUP at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/misc_utils.jl:51 [inlined]
 [6] perform_step! at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/integrators/implicit_integrators.jl:28 [inlined]
 [7] perform_step! at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/integrators/implicit_integrators.jl:20 [inlined]
 [8] solve!(::OrdinaryDiffEq.ODEIntegrator{OrdinaryDiffEq.ImplicitEuler{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}},Float64,Float64,Float64,Float64,Array{Float64,1},DiffEqBase.ODESolution{Float64,1,Array{Float64,1},Array{Float64,1},Dict{Symbol,Float64},Array{Float64,1},Array{Array{Float64,1},1},DiffEqBase.ODEProblem{Float64,Float64,false,DiffEqProblemLibrary.##1#2,Void,UniformScaling{Int64}},OrdinaryDiffEq.ImplicitEuler{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}},OrdinaryDiffEq.InterpolationData{DiffEqProblemLibrary.##1#2,Array{Float64,1},Array{Float64,1},Array{Array{Float64,1},1},OrdinaryDiffEq.ImplicitEulerConstantCache{Array{Float64,1},OrdinaryDiffEq.RHS_IE_Scalar{DiffEqProblemLibrary.##1#2,Array{Float64,1},Float64},NLsolve.DifferentiableMultivariateFunction}}},Float64,DiffEqProblemLibrary.##1#2,Void,OrdinaryDiffEq.ImplicitEulerConstantCache{Array{Float64,1},OrdinaryDiffEq.RHS_IE_Scalar{DiffEqProblemLibrary.##1#2,Array{Float64,1},Float64},NLsolve.DifferentiableMultivariateFunction},OrdinaryDiffEq.DEOptions{Float64,Float64,Float64,Float64,DiffEqBase.#ODE_DEFAULT_NORM,DiffEqBase.CallbackSet{Tuple{},Tuple{}},DiffEqBase.#ODE_DEFAULT_ISOUTOFDOMAIN,DiffEqBase.#ODE_DEFAULT_PROG_MESSAGE,DiffEqBase.#ODE_DEFAULT_UNSTABLE_CHECK,DataStructures.BinaryHeap{Float64,DataStructures.LessThan},Void,Void},Float64}) at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/solve.jl:308
 [9] #solve#87(::Array{Any,1}, ::Function, ::DiffEqBase.ODEProblem{Float64,Float64,false,DiffEqProblemLibrary.##1#2,Void,UniformScaling{Int64}}, ::OrdinaryDiffEq.ImplicitEuler{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/solve.jl:7
 [10] (::DiffEqBase.#kw##solve)(::Array{Any,1}, ::DiffEqBase.#solve, ::DiffEqBase.ODEProblem{Float64,Float64,false,DiffEqProblemLibrary.##1#2,Void,UniformScaling{Int64}}, ::OrdinaryDiffEq.ImplicitEuler{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at ./<missing>:0 (repeats 2 times)
 [11] include_from_node1(::String) at ./loading.jl:552
 [12] include(::String) at ./sysimg.jl:14
 [13] macro expansion at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/test/runtests.jl:29 [inlined]
 [14] macro expansion at ./test.jl:856 [inlined]
 [15] macro expansion at ./util.jl:237 [inlined]
 [16] anonymous at ./<missing>:?
 [17] include_from_node1(::String) at ./loading.jl:552
 [18] include(::String) at ./sysimg.jl:14
 [19] process_options(::Base.JLOptions) at ./client.jl:305
 [20] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/OrdinaryDiffEq/test/ode/ode_dense_tests.jl, in expression starting on line 444
WARNING: !(B::BitArray) is deprecated, use .!(B) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] !(::BitArray{1}) at ./deprecated.jl:51
 [3] check_isfinite(::Array{Float64,1}) at /home/vagrant/.julia/v0.6/NLsolve/src/utils.jl:32
 [4] trust_region_(::NLsolve.DifferentiableMultivariateFunction, ::Array{Float64,1}, ::Float64, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::Float64, ::Bool) at /home/vagrant/.julia/v0.6/NLsolve/src/trust_region.jl:91
 [5] #nlsolve#17(::Symbol, ::Float64, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::Function, ::Float64, ::Bool, ::NLsolve.#nlsolve, ::NLsolve.DifferentiableMultivariateFunction, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/NLsolve/src/nlsolve_func_defs.jl:24
 [6] NLSOLVEJL_SETUP at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/misc_utils.jl:51 [inlined]
 [7] perform_step! at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/integrators/implicit_integrators.jl:28 [inlined]
 [8] perform_step! at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/integrators/implicit_integrators.jl:20 [inlined]
 [9] solve!(::OrdinaryDiffEq.ODEIntegrator{OrdinaryDiffEq.ImplicitEuler{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}},Float64,Float64,Float64,Float64,Array{Float64,1},DiffEqBase.ODESolution{Float64,1,Array{Float64,1},Array{Float64,1},Dict{Symbol,Float64},Array{Float64,1},Array{Array{Float64,1},1},DiffEqBase.ODEProblem{Float64,Float64,false,DiffEqProblemLibrary.##1#2,Void,UniformScaling{Int64}},OrdinaryDiffEq.ImplicitEuler{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}},OrdinaryDiffEq.InterpolationData{DiffEqProblemLibrary.##1#2,Array{Float64,1},Array{Float64,1},Array{Array{Float64,1},1},OrdinaryDiffEq.ImplicitEulerConstantCache{Array{Float64,1},OrdinaryDiffEq.RHS_IE_Scalar{DiffEqProblemLibrary.##1#2,Array{Float64,1},Float64},NLsolve.DifferentiableMultivariateFunction}}},Float64,DiffEqProblemLibrary.##1#2,Void,OrdinaryDiffEq.ImplicitEulerConstantCache{Array{Float64,1},OrdinaryDiffEq.RHS_IE_Scalar{DiffEqProblemLibrary.##1#2,Array{Float64,1},Float64},NLsolve.DifferentiableMultivariateFunction},OrdinaryDiffEq.DEOptions{Float64,Float64,Float64,Float64,DiffEqBase.#ODE_DEFAULT_NORM,DiffEqBase.CallbackSet{Tuple{},Tuple{}},DiffEqBase.#ODE_DEFAULT_ISOUTOFDOMAIN,DiffEqBase.#ODE_DEFAULT_PROG_MESSAGE,DiffEqBase.#ODE_DEFAULT_UNSTABLE_CHECK,DataStructures.BinaryHeap{Float64,DataStructures.LessThan},Void,Void},Float64}) at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/solve.jl:308
 [10] #solve#87(::Array{Any,1}, ::Function, ::DiffEqBase.ODEProblem{Float64,Float64,false,DiffEqProblemLibrary.##1#2,Void,UniformScaling{Int64}}, ::OrdinaryDiffEq.ImplicitEuler{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/solve.jl:7
 [11] (::DiffEqBase.#kw##solve)(::Array{Any,1}, ::DiffEqBase.#solve, ::DiffEqBase.ODEProblem{Float64,Float64,false,DiffEqProblemLibrary.##1#2,Void,UniformScaling{Int64}}, ::OrdinaryDiffEq.ImplicitEuler{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at ./<missing>:0 (repeats 2 times)
 [12] include_from_node1(::String) at ./loading.jl:552
 [13] include(::String) at ./sysimg.jl:14
 [14] macro expansion at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/test/runtests.jl:29 [inlined]
 [15] macro expansion at ./test.jl:856 [inlined]
 [16] macro expansion at ./util.jl:237 [inlined]
 [17] anonymous at ./<missing>:?
 [18] include_from_node1(::String) at ./loading.jl:552
 [19] include(::String) at ./sysimg.jl:14
 [20] process_options(::Base.JLOptions) at ./client.jl:305
 [21] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/OrdinaryDiffEq/test/ode/ode_dense_tests.jl, in expression starting on line 444
WARNING: Array{T}(::Type{T}, m::Int) is deprecated, use Array{T}(m) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] Array(::Type{NLsolve.SolverState}, ::Int64) at ./deprecated.jl:51
 [3] Type at /home/vagrant/.julia/v0.6/NLsolve/src/solver_state_results.jl:20 [inlined]
 [4] trust_region_(::NLsolve.DifferentiableMultivariateFunction, ::Array{Float64,1}, ::Float64, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::Float64, ::Bool) at /home/vagrant/.julia/v0.6/NLsolve/src/trust_region.jl:99
 [5] #nlsolve#17(::Symbol, ::Float64, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::Function, ::Float64, ::Bool, ::NLsolve.#nlsolve, ::NLsolve.DifferentiableMultivariateFunction, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/NLsolve/src/nlsolve_func_defs.jl:24
 [6] NLSOLVEJL_SETUP at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/misc_utils.jl:51 [inlined]
 [7] perform_step! at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/integrators/implicit_integrators.jl:28 [inlined]
 [8] perform_step! at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/integrators/implicit_integrators.jl:20 [inlined]
 [9] solve!(::OrdinaryDiffEq.ODEIntegrator{OrdinaryDiffEq.ImplicitEuler{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}},Float64,Float64,Float64,Float64,Array{Float64,1},DiffEqBase.ODESolution{Float64,1,Array{Float64,1},Array{Float64,1},Dict{Symbol,Float64},Array{Float64,1},Array{Array{Float64,1},1},DiffEqBase.ODEProblem{Float64,Float64,false,DiffEqProblemLibrary.##1#2,Void,UniformScaling{Int64}},OrdinaryDiffEq.ImplicitEuler{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}},OrdinaryDiffEq.InterpolationData{DiffEqProblemLibrary.##1#2,Array{Float64,1},Array{Float64,1},Array{Array{Float64,1},1},OrdinaryDiffEq.ImplicitEulerConstantCache{Array{Float64,1},OrdinaryDiffEq.RHS_IE_Scalar{DiffEqProblemLibrary.##1#2,Array{Float64,1},Float64},NLsolve.DifferentiableMultivariateFunction}}},Float64,DiffEqProblemLibrary.##1#2,Void,OrdinaryDiffEq.ImplicitEulerConstantCache{Array{Float64,1},OrdinaryDiffEq.RHS_IE_Scalar{DiffEqProblemLibrary.##1#2,Array{Float64,1},Float64},NLsolve.DifferentiableMultivariateFunction},OrdinaryDiffEq.DEOptions{Float64,Float64,Float64,Float64,DiffEqBase.#ODE_DEFAULT_NORM,DiffEqBase.CallbackSet{Tuple{},Tuple{}},DiffEqBase.#ODE_DEFAULT_ISOUTOFDOMAIN,DiffEqBase.#ODE_DEFAULT_PROG_MESSAGE,DiffEqBase.#ODE_DEFAULT_UNSTABLE_CHECK,DataStructures.BinaryHeap{Float64,DataStructures.LessThan},Void,Void},Float64}) at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/solve.jl:308
 [10] #solve#87(::Array{Any,1}, ::Function, ::DiffEqBase.ODEProblem{Float64,Float64,false,DiffEqProblemLibrary.##1#2,Void,UniformScaling{Int64}}, ::OrdinaryDiffEq.ImplicitEuler{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/solve.jl:7
 [11] (::DiffEqBase.#kw##solve)(::Array{Any,1}, ::DiffEqBase.#solve, ::DiffEqBase.ODEProblem{Float64,Float64,false,DiffEqProblemLibrary.##1#2,Void,UniformScaling{Int64}}, ::OrdinaryDiffEq.ImplicitEuler{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at ./<missing>:0 (repeats 2 times)
 [12] include_from_node1(::String) at ./loading.jl:552
 [13] include(::String) at ./sysimg.jl:14
 [14] macro expansion at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/test/runtests.jl:29 [inlined]
 [15] macro expansion at ./test.jl:856 [inlined]
 [16] macro expansion at ./util.jl:237 [inlined]
 [17] anonymous at ./<missing>:?
 [18] include_from_node1(::String) at ./loading.jl:552
 [19] include(::String) at ./sysimg.jl:14
 [20] process_options(::Base.JLOptions) at ./client.jl:305
 [21] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/OrdinaryDiffEq/test/ode/ode_dense_tests.jl, in expression starting on line 444
WARNING: Array{T}(::Type{T}, m::Int, n::Int) is deprecated, use Array{T}(m, n) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] Array(::Type{Float64}, ::Int64, ::Int64) at ./deprecated.jl:51
 [3] trust_region_(::NLsolve.DifferentiableMultivariateFunction, ::Array{Float64,1}, ::Float64, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::Float64, ::Bool) at /home/vagrant/.julia/v0.6/NLsolve/src/trust_region.jl:82
 [4] #nlsolve#17(::Symbol, ::Float64, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::Function, ::Float64, ::Bool, ::NLsolve.#nlsolve, ::NLsolve.DifferentiableMultivariateFunction, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/NLsolve/src/nlsolve_func_defs.jl:24
 [5] NLSOLVEJL_SETUP at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/misc_utils.jl:51 [inlined]
 [6] perform_step! at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/integrators/implicit_integrators.jl:77 [inlined]
 [7] perform_step! at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/integrators/implicit_integrators.jl:66 [inlined]
 [8] solve!(::OrdinaryDiffEq.ODEIntegrator{OrdinaryDiffEq.ImplicitEuler{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}},Array{Float64,2},Float64,Float64,Float64,Array{Array{Float64,2},1},DiffEqBase.ODESolution{Float64,3,Array{Array{Float64,2},1},Array{Array{Float64,2},1},Dict{Symbol,Float64},Array{Float64,1},Array{Array{Array{Float64,2},1},1},DiffEqBase.ODEProblem{Array{Float64,2},Float64,true,DiffEqProblemLibrary.##5#6,Void,UniformScaling{Int64}},OrdinaryDiffEq.ImplicitEuler{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}},OrdinaryDiffEq.InterpolationData{DiffEqProblemLibrary.##5#6,Array{Array{Float64,2},1},Array{Float64,1},Array{Array{Array{Float64,2},1},1},OrdinaryDiffEq.ImplicitEulerCache{Array{Float64,2},Array{Float64,2},Array{Float64,1},OrdinaryDiffEq.DiffCache{Float64,ForwardDiff.Dual{8,Float64}},Array{Float64,2},OrdinaryDiffEq.RHS_IE{DiffEqProblemLibrary.##5#6,Array{Float64,2},Float64,OrdinaryDiffEq.DiffCache{Float64,ForwardDiff.Dual{8,Float64}},Tuple{Int64,Int64},Base.OneTo{Int64}},NLsolve.DifferentiableMultivariateFunction}}},Array{Float64,2},DiffEqProblemLibrary.##5#6,Void,OrdinaryDiffEq.ImplicitEulerCache{Array{Float64,2},Array{Float64,2},Array{Float64,1},OrdinaryDiffEq.DiffCache{Float64,ForwardDiff.Dual{8,Float64}},Array{Float64,2},OrdinaryDiffEq.RHS_IE{DiffEqProblemLibrary.##5#6,Array{Float64,2},Float64,OrdinaryDiffEq.DiffCache{Float64,ForwardDiff.Dual{8,Float64}},Tuple{Int64,Int64},Base.OneTo{Int64}},NLsolve.DifferentiableMultivariateFunction},OrdinaryDiffEq.DEOptions{Float64,Float64,Float64,Float64,DiffEqBase.#ODE_DEFAULT_NORM,DiffEqBase.CallbackSet{Tuple{},Tuple{}},DiffEqBase.#ODE_DEFAULT_ISOUTOFDOMAIN,DiffEqBase.#ODE_DEFAULT_PROG_MESSAGE,DiffEqBase.#ODE_DEFAULT_UNSTABLE_CHECK,DataStructures.BinaryHeap{Float64,DataStructures.LessThan},Void,Void},Array{Float64,2}}) at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/solve.jl:308
 [9] #solve#87(::Array{Any,1}, ::Function, ::DiffEqBase.ODEProblem{Array{Float64,2},Float64,true,DiffEqProblemLibrary.##5#6,Void,UniformScaling{Int64}}, ::OrdinaryDiffEq.ImplicitEuler{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/solve.jl:7
 [10] (::DiffEqBase.#kw##solve)(::Array{Any,1}, ::DiffEqBase.#solve, ::DiffEqBase.ODEProblem{Array{Float64,2},Float64,true,DiffEqProblemLibrary.##5#6,Void,UniformScaling{Int64}}, ::OrdinaryDiffEq.ImplicitEuler{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at ./<missing>:0 (repeats 2 times)
 [11] include_from_node1(::String) at ./loading.jl:552
 [12] include(::String) at ./sysimg.jl:14
 [13] macro expansion at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/test/runtests.jl:29 [inlined]
 [14] macro expansion at ./test.jl:856 [inlined]
 [15] macro expansion at ./util.jl:237 [inlined]
 [16] anonymous at ./<missing>:?
 [17] include_from_node1(::String) at ./loading.jl:552
 [18] include(::String) at ./sysimg.jl:14
 [19] process_options(::Base.JLOptions) at ./client.jl:305
 [20] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/OrdinaryDiffEq/test/ode/ode_dense_tests.jl, in expression starting on line 452
WARNING: !(B::BitArray) is deprecated, use .!(B) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] !(::BitArray{1}) at ./deprecated.jl:51
 [3] check_isfinite(::Array{Float64,1}) at /home/vagrant/.julia/v0.6/NLsolve/src/utils.jl:32
 [4] trust_region_(::NLsolve.DifferentiableMultivariateFunction, ::Array{Float64,1}, ::Float64, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::Float64, ::Bool) at /home/vagrant/.julia/v0.6/NLsolve/src/trust_region.jl:91
 [5] #nlsolve#17(::Symbol, ::Float64, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::Function, ::Float64, ::Bool, ::NLsolve.#nlsolve, ::NLsolve.DifferentiableMultivariateFunction, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/NLsolve/src/nlsolve_func_defs.jl:24
 [6] NLSOLVEJL_SETUP at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/misc_utils.jl:51 [inlined]
 [7] perform_step! at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/integrators/implicit_integrators.jl:77 [inlined]
 [8] perform_step! at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/integrators/implicit_integrators.jl:66 [inlined]
 [9] solve!(::OrdinaryDiffEq.ODEIntegrator{OrdinaryDiffEq.ImplicitEuler{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}},Array{Float64,2},Float64,Float64,Float64,Array{Array{Float64,2},1},DiffEqBase.ODESolution{Float64,3,Array{Array{Float64,2},1},Array{Array{Float64,2},1},Dict{Symbol,Float64},Array{Float64,1},Array{Array{Array{Float64,2},1},1},DiffEqBase.ODEProblem{Array{Float64,2},Float64,true,DiffEqProblemLibrary.##5#6,Void,UniformScaling{Int64}},OrdinaryDiffEq.ImplicitEuler{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}},OrdinaryDiffEq.InterpolationData{DiffEqProblemLibrary.##5#6,Array{Array{Float64,2},1},Array{Float64,1},Array{Array{Array{Float64,2},1},1},OrdinaryDiffEq.ImplicitEulerCache{Array{Float64,2},Array{Float64,2},Array{Float64,1},OrdinaryDiffEq.DiffCache{Float64,ForwardDiff.Dual{8,Float64}},Array{Float64,2},OrdinaryDiffEq.RHS_IE{DiffEqProblemLibrary.##5#6,Array{Float64,2},Float64,OrdinaryDiffEq.DiffCache{Float64,ForwardDiff.Dual{8,Float64}},Tuple{Int64,Int64},Base.OneTo{Int64}},NLsolve.DifferentiableMultivariateFunction}}},Array{Float64,2},DiffEqProblemLibrary.##5#6,Void,OrdinaryDiffEq.ImplicitEulerCache{Array{Float64,2},Array{Float64,2},Array{Float64,1},OrdinaryDiffEq.DiffCache{Float64,ForwardDiff.Dual{8,Float64}},Array{Float64,2},OrdinaryDiffEq.RHS_IE{DiffEqProblemLibrary.##5#6,Array{Float64,2},Float64,OrdinaryDiffEq.DiffCache{Float64,ForwardDiff.Dual{8,Float64}},Tuple{Int64,Int64},Base.OneTo{Int64}},NLsolve.DifferentiableMultivariateFunction},OrdinaryDiffEq.DEOptions{Float64,Float64,Float64,Float64,DiffEqBase.#ODE_DEFAULT_NORM,DiffEqBase.CallbackSet{Tuple{},Tuple{}},DiffEqBase.#ODE_DEFAULT_ISOUTOFDOMAIN,DiffEqBase.#ODE_DEFAULT_PROG_MESSAGE,DiffEqBase.#ODE_DEFAULT_UNSTABLE_CHECK,DataStructures.BinaryHeap{Float64,DataStructures.LessThan},Void,Void},Array{Float64,2}}) at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/solve.jl:308
 [10] #solve#87(::Array{Any,1}, ::Function, ::DiffEqBase.ODEProblem{Array{Float64,2},Float64,true,DiffEqProblemLibrary.##5#6,Void,UniformScaling{Int64}}, ::OrdinaryDiffEq.ImplicitEuler{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/solve.jl:7
 [11] (::DiffEqBase.#kw##solve)(::Array{Any,1}, ::DiffEqBase.#solve, ::DiffEqBase.ODEProblem{Array{Float64,2},Float64,true,DiffEqProblemLibrary.##5#6,Void,UniformScaling{Int64}}, ::OrdinaryDiffEq.ImplicitEuler{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at ./<missing>:0 (repeats 2 times)
 [12] include_from_node1(::String) at ./loading.jl:552
 [13] include(::String) at ./sysimg.jl:14
 [14] macro expansion at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/test/runtests.jl:29 [inlined]
 [15] macro expansion at ./test.jl:856 [inlined]
 [16] macro expansion at ./util.jl:237 [inlined]
 [17] anonymous at ./<missing>:?
 [18] include_from_node1(::String) at ./loading.jl:552
 [19] include(::String) at ./sysimg.jl:14
 [20] process_options(::Base.JLOptions) at ./client.jl:305
 [21] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/OrdinaryDiffEq/test/ode/ode_dense_tests.jl, in expression starting on line 452
WARNING: Array{T}(::Type{T}, m::Int) is deprecated, use Array{T}(m) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] Array(::Type{NLsolve.SolverState}, ::Int64) at ./deprecated.jl:51
 [3] Type at /home/vagrant/.julia/v0.6/NLsolve/src/solver_state_results.jl:20 [inlined]
 [4] trust_region_(::NLsolve.DifferentiableMultivariateFunction, ::Array{Float64,1}, ::Float64, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::Float64, ::Bool) at /home/vagrant/.julia/v0.6/NLsolve/src/trust_region.jl:99
 [5] #nlsolve#17(::Symbol, ::Float64, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::Function, ::Float64, ::Bool, ::NLsolve.#nlsolve, ::NLsolve.DifferentiableMultivariateFunction, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/NLsolve/src/nlsolve_func_defs.jl:24
 [6] NLSOLVEJL_SETUP at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/misc_utils.jl:51 [inlined]
 [7] perform_step! at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/integrators/implicit_integrators.jl:77 [inlined]
 [8] perform_step! at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/integrators/implicit_integrators.jl:66 [inlined]
 [9] solve!(::OrdinaryDiffEq.ODEIntegrator{OrdinaryDiffEq.ImplicitEuler{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}},Array{Float64,2},Float64,Float64,Float64,Array{Array{Float64,2},1},DiffEqBase.ODESolution{Float64,3,Array{Array{Float64,2},1},Array{Array{Float64,2},1},Dict{Symbol,Float64},Array{Float64,1},Array{Array{Array{Float64,2},1},1},DiffEqBase.ODEProblem{Array{Float64,2},Float64,true,DiffEqProblemLibrary.##5#6,Void,UniformScaling{Int64}},OrdinaryDiffEq.ImplicitEuler{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}},OrdinaryDiffEq.InterpolationData{DiffEqProblemLibrary.##5#6,Array{Array{Float64,2},1},Array{Float64,1},Array{Array{Array{Float64,2},1},1},OrdinaryDiffEq.ImplicitEulerCache{Array{Float64,2},Array{Float64,2},Array{Float64,1},OrdinaryDiffEq.DiffCache{Float64,ForwardDiff.Dual{8,Float64}},Array{Float64,2},OrdinaryDiffEq.RHS_IE{DiffEqProblemLibrary.##5#6,Array{Float64,2},Float64,OrdinaryDiffEq.DiffCache{Float64,ForwardDiff.Dual{8,Float64}},Tuple{Int64,Int64},Base.OneTo{Int64}},NLsolve.DifferentiableMultivariateFunction}}},Array{Float64,2},DiffEqProblemLibrary.##5#6,Void,OrdinaryDiffEq.ImplicitEulerCache{Array{Float64,2},Array{Float64,2},Array{Float64,1},OrdinaryDiffEq.DiffCache{Float64,ForwardDiff.Dual{8,Float64}},Array{Float64,2},OrdinaryDiffEq.RHS_IE{DiffEqProblemLibrary.##5#6,Array{Float64,2},Float64,OrdinaryDiffEq.DiffCache{Float64,ForwardDiff.Dual{8,Float64}},Tuple{Int64,Int64},Base.OneTo{Int64}},NLsolve.DifferentiableMultivariateFunction},OrdinaryDiffEq.DEOptions{Float64,Float64,Float64,Float64,DiffEqBase.#ODE_DEFAULT_NORM,DiffEqBase.CallbackSet{Tuple{},Tuple{}},DiffEqBase.#ODE_DEFAULT_ISOUTOFDOMAIN,DiffEqBase.#ODE_DEFAULT_PROG_MESSAGE,DiffEqBase.#ODE_DEFAULT_UNSTABLE_CHECK,DataStructures.BinaryHeap{Float64,DataStructures.LessThan},Void,Void},Array{Float64,2}}) at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/solve.jl:308
 [10] #solve#87(::Array{Any,1}, ::Function, ::DiffEqBase.ODEProblem{Array{Float64,2},Float64,true,DiffEqProblemLibrary.##5#6,Void,UniformScaling{Int64}}, ::OrdinaryDiffEq.ImplicitEuler{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/solve.jl:7
 [11] (::DiffEqBase.#kw##solve)(::Array{Any,1}, ::DiffEqBase.#solve, ::DiffEqBase.ODEProblem{Array{Float64,2},Float64,true,DiffEqProblemLibrary.##5#6,Void,UniformScaling{Int64}}, ::OrdinaryDiffEq.ImplicitEuler{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at ./<missing>:0 (repeats 2 times)
 [12] include_from_node1(::String) at ./loading.jl:552
 [13] include(::String) at ./sysimg.jl:14
 [14] macro expansion at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/test/runtests.jl:29 [inlined]
 [15] macro expansion at ./test.jl:856 [inlined]
 [16] macro expansion at ./util.jl:237 [inlined]
 [17] anonymous at ./<missing>:?
 [18] include_from_node1(::String) at ./loading.jl:552
 [19] include(::String) at ./sysimg.jl:14
 [20] process_options(::Base.JLOptions) at ./client.jl:305
 [21] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/OrdinaryDiffEq/test/ode/ode_dense_tests.jl, in expression starting on line 452
WARNING: Array{T}(::Type{T}, m::Int, n::Int) is deprecated, use Array{T}(m, n) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] Array(::Type{Float64}, ::Int64, ::Int64) at ./deprecated.jl:51
 [3] trust_region_(::NLsolve.DifferentiableMultivariateFunction, ::Array{Float64,1}, ::Float64, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::Float64, ::Bool) at /home/vagrant/.julia/v0.6/NLsolve/src/trust_region.jl:82
 [4] #nlsolve#17(::Symbol, ::Float64, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::Function, ::Float64, ::Bool, ::NLsolve.#nlsolve, ::NLsolve.DifferentiableMultivariateFunction, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/NLsolve/src/nlsolve_func_defs.jl:24
 [5] NLSOLVEJL_SETUP at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/misc_utils.jl:51 [inlined]
 [6] perform_step! at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/integrators/implicit_integrators.jl:77 [inlined]
 [7] perform_step! at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/integrators/implicit_integrators.jl:66 [inlined]
 [8] solve!(::OrdinaryDiffEq.ODEIntegrator{OrdinaryDiffEq.ImplicitEuler{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}},Array{Float64,2},Float64,Float64,Float64,Array{Array{Float64,2},1},DiffEqBase.ODESolution{Float64,3,Array{Array{Float64,2},1},Array{Array{Float64,2},1},Dict{Symbol,Float64},Array{Float64,1},Array{Array{Array{Float64,2},1},1},DiffEqBase.ODEProblem{Array{Float64,2},Float64,true,DiffEqProblemLibrary.##5#6,Void,UniformScaling{Int64}},OrdinaryDiffEq.ImplicitEuler{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}},OrdinaryDiffEq.InterpolationData{DiffEqProblemLibrary.##5#6,Array{Array{Float64,2},1},Array{Float64,1},Array{Array{Array{Float64,2},1},1},OrdinaryDiffEq.ImplicitEulerCache{Array{Float64,2},Array{Float64,2},Array{Float64,1},OrdinaryDiffEq.DiffCache{Float64,ForwardDiff.Dual{8,Float64}},Array{Float64,2},OrdinaryDiffEq.RHS_IE{DiffEqProblemLibrary.##5#6,Array{Float64,2},Float64,OrdinaryDiffEq.DiffCache{Float64,ForwardDiff.Dual{8,Float64}},Tuple{Int64,Int64},Base.OneTo{Int64}},NLsolve.DifferentiableMultivariateFunction}}},Array{Float64,2},DiffEqProblemLibrary.##5#6,Void,OrdinaryDiffEq.ImplicitEulerCache{Array{Float64,2},Array{Float64,2},Array{Float64,1},OrdinaryDiffEq.DiffCache{Float64,ForwardDiff.Dual{8,Float64}},Array{Float64,2},OrdinaryDiffEq.RHS_IE{DiffEqProblemLibrary.##5#6,Array{Float64,2},Float64,OrdinaryDiffEq.DiffCache{Float64,ForwardDiff.Dual{8,Float64}},Tuple{Int64,Int64},Base.OneTo{Int64}},NLsolve.DifferentiableMultivariateFunction},OrdinaryDiffEq.DEOptions{Float64,Float64,Float64,Float64,DiffEqBase.#ODE_DEFAULT_NORM,DiffEqBase.CallbackSet{Tuple{},Tuple{}},DiffEqBase.#ODE_DEFAULT_ISOUTOFDOMAIN,DiffEqBase.#ODE_DEFAULT_PROG_MESSAGE,DiffEqBase.#ODE_DEFAULT_UNSTABLE_CHECK,DataStructures.BinaryHeap{Float64,DataStructures.LessThan},Void,Void},Array{Float64,2}}) at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/solve.jl:308
 [9] #solve#87(::Array{Any,1}, ::Function, ::DiffEqBase.ODEProblem{Array{Float64,2},Float64,true,DiffEqProblemLibrary.##5#6,Void,UniformScaling{Int64}}, ::OrdinaryDiffEq.ImplicitEuler{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/solve.jl:7
 [10] (::DiffEqBase.#kw##solve)(::Array{Any,1}, ::DiffEqBase.#solve, ::DiffEqBase.ODEProblem{Array{Float64,2},Float64,true,DiffEqProblemLibrary.##5#6,Void,UniformScaling{Int64}}, ::OrdinaryDiffEq.ImplicitEuler{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at ./<missing>:0 (repeats 2 times)
 [11] include_from_node1(::String) at ./loading.jl:552
 [12] include(::String) at ./sysimg.jl:14
 [13] macro expansion at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/test/runtests.jl:29 [inlined]
 [14] macro expansion at ./test.jl:856 [inlined]
 [15] macro expansion at ./util.jl:237 [inlined]
 [16] anonymous at ./<missing>:?
 [17] include_from_node1(::String) at ./loading.jl:552
 [18] include(::String) at ./sysimg.jl:14
 [19] process_options(::Base.JLOptions) at ./client.jl:305
 [20] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/OrdinaryDiffEq/test/ode/ode_dense_tests.jl, in expression starting on line 456
WARNING: !(B::BitArray) is deprecated, use .!(B) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] !(::BitArray{1}) at ./deprecated.jl:51
 [3] check_isfinite(::Array{Float64,1}) at /home/vagrant/.julia/v0.6/NLsolve/src/utils.jl:32
 [4] trust_region_(::NLsolve.DifferentiableMultivariateFunction, ::Array{Float64,1}, ::Float64, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::Float64, ::Bool) at /home/vagrant/.julia/v0.6/NLsolve/src/trust_region.jl:91
 [5] #nlsolve#17(::Symbol, ::Float64, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::Function, ::Float64, ::Bool, ::NLsolve.#nlsolve, ::NLsolve.DifferentiableMultivariateFunction, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/NLsolve/src/nlsolve_func_defs.jl:24
 [6] NLSOLVEJL_SETUP at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/misc_utils.jl:51 [inlined]
 [7] perform_step! at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/integrators/implicit_integrators.jl:77 [inlined]
 [8] perform_step! at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/integrators/implicit_integrators.jl:66 [inlined]
 [9] solve!(::OrdinaryDiffEq.ODEIntegrator{OrdinaryDiffEq.ImplicitEuler{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}},Array{Float64,2},Float64,Float64,Float64,Array{Array{Float64,2},1},DiffEqBase.ODESolution{Float64,3,Array{Array{Float64,2},1},Array{Array{Float64,2},1},Dict{Symbol,Float64},Array{Float64,1},Array{Array{Array{Float64,2},1},1},DiffEqBase.ODEProblem{Array{Float64,2},Float64,true,DiffEqProblemLibrary.##5#6,Void,UniformScaling{Int64}},OrdinaryDiffEq.ImplicitEuler{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}},OrdinaryDiffEq.InterpolationData{DiffEqProblemLibrary.##5#6,Array{Array{Float64,2},1},Array{Float64,1},Array{Array{Array{Float64,2},1},1},OrdinaryDiffEq.ImplicitEulerCache{Array{Float64,2},Array{Float64,2},Array{Float64,1},OrdinaryDiffEq.DiffCache{Float64,ForwardDiff.Dual{8,Float64}},Array{Float64,2},OrdinaryDiffEq.RHS_IE{DiffEqProblemLibrary.##5#6,Array{Float64,2},Float64,OrdinaryDiffEq.DiffCache{Float64,ForwardDiff.Dual{8,Float64}},Tuple{Int64,Int64},Base.OneTo{Int64}},NLsolve.DifferentiableMultivariateFunction}}},Array{Float64,2},DiffEqProblemLibrary.##5#6,Void,OrdinaryDiffEq.ImplicitEulerCache{Array{Float64,2},Array{Float64,2},Array{Float64,1},OrdinaryDiffEq.DiffCache{Float64,ForwardDiff.Dual{8,Float64}},Array{Float64,2},OrdinaryDiffEq.RHS_IE{DiffEqProblemLibrary.##5#6,Array{Float64,2},Float64,OrdinaryDiffEq.DiffCache{Float64,ForwardDiff.Dual{8,Float64}},Tuple{Int64,Int64},Base.OneTo{Int64}},NLsolve.DifferentiableMultivariateFunction},OrdinaryDiffEq.DEOptions{Float64,Float64,Float64,Float64,DiffEqBase.#ODE_DEFAULT_NORM,DiffEqBase.CallbackSet{Tuple{},Tuple{}},DiffEqBase.#ODE_DEFAULT_ISOUTOFDOMAIN,DiffEqBase.#ODE_DEFAULT_PROG_MESSAGE,DiffEqBase.#ODE_DEFAULT_UNSTABLE_CHECK,DataStructures.BinaryHeap{Float64,DataStructures.LessThan},Void,Void},Array{Float64,2}}) at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/solve.jl:308
 [10] #solve#87(::Array{Any,1}, ::Function, ::DiffEqBase.ODEProblem{Array{Float64,2},Float64,true,DiffEqProblemLibrary.##5#6,Void,UniformScaling{Int64}}, ::OrdinaryDiffEq.ImplicitEuler{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/solve.jl:7
 [11] (::DiffEqBase.#kw##solve)(::Array{Any,1}, ::DiffEqBase.#solve, ::DiffEqBase.ODEProblem{Array{Float64,2},Float64,true,DiffEqProblemLibrary.##5#6,Void,UniformScaling{Int64}}, ::OrdinaryDiffEq.ImplicitEuler{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at ./<missing>:0 (repeats 2 times)
 [12] include_from_node1(::String) at ./loading.jl:552
 [13] include(::String) at ./sysimg.jl:14
 [14] macro expansion at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/test/runtests.jl:29 [inlined]
 [15] macro expansion at ./test.jl:856 [inlined]
 [16] macro expansion at ./util.jl:237 [inlined]
 [17] anonymous at ./<missing>:?
 [18] include_from_node1(::String) at ./loading.jl:552
 [19] include(::String) at ./sysimg.jl:14
 [20] process_options(::Base.JLOptions) at ./client.jl:305
 [21] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/OrdinaryDiffEq/test/ode/ode_dense_tests.jl, in expression starting on line 456
WARNING: Array{T}(::Type{T}, m::Int) is deprecated, use Array{T}(m) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] Array(::Type{NLsolve.SolverState}, ::Int64) at ./deprecated.jl:51
 [3] Type at /home/vagrant/.julia/v0.6/NLsolve/src/solver_state_results.jl:20 [inlined]
 [4] trust_region_(::NLsolve.DifferentiableMultivariateFunction, ::Array{Float64,1}, ::Float64, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::Float64, ::Bool) at /home/vagrant/.julia/v0.6/NLsolve/src/trust_region.jl:99
 [5] #nlsolve#17(::Symbol, ::Float64, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::Function, ::Float64, ::Bool, ::NLsolve.#nlsolve, ::NLsolve.DifferentiableMultivariateFunction, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/NLsolve/src/nlsolve_func_defs.jl:24
 [6] NLSOLVEJL_SETUP at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/misc_utils.jl:51 [inlined]
 [7] perform_step! at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/integrators/implicit_integrators.jl:77 [inlined]
 [8] perform_step! at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/integrators/implicit_integrators.jl:66 [inlined]
 [9] solve!(::OrdinaryDiffEq.ODEIntegrator{OrdinaryDiffEq.ImplicitEuler{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}},Array{Float64,2},Float64,Float64,Float64,Array{Array{Float64,2},1},DiffEqBase.ODESolution{Float64,3,Array{Array{Float64,2},1},Array{Array{Float64,2},1},Dict{Symbol,Float64},Array{Float64,1},Array{Array{Array{Float64,2},1},1},DiffEqBase.ODEProblem{Array{Float64,2},Float64,true,DiffEqProblemLibrary.##5#6,Void,UniformScaling{Int64}},OrdinaryDiffEq.ImplicitEuler{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}},OrdinaryDiffEq.InterpolationData{DiffEqProblemLibrary.##5#6,Array{Array{Float64,2},1},Array{Float64,1},Array{Array{Array{Float64,2},1},1},OrdinaryDiffEq.ImplicitEulerCache{Array{Float64,2},Array{Float64,2},Array{Float64,1},OrdinaryDiffEq.DiffCache{Float64,ForwardDiff.Dual{8,Float64}},Array{Float64,2},OrdinaryDiffEq.RHS_IE{DiffEqProblemLibrary.##5#6,Array{Float64,2},Float64,OrdinaryDiffEq.DiffCache{Float64,ForwardDiff.Dual{8,Float64}},Tuple{Int64,Int64},Base.OneTo{Int64}},NLsolve.DifferentiableMultivariateFunction}}},Array{Float64,2},DiffEqProblemLibrary.##5#6,Void,OrdinaryDiffEq.ImplicitEulerCache{Array{Float64,2},Array{Float64,2},Array{Float64,1},OrdinaryDiffEq.DiffCache{Float64,ForwardDiff.Dual{8,Float64}},Array{Float64,2},OrdinaryDiffEq.RHS_IE{DiffEqProblemLibrary.##5#6,Array{Float64,2},Float64,OrdinaryDiffEq.DiffCache{Float64,ForwardDiff.Dual{8,Float64}},Tuple{Int64,Int64},Base.OneTo{Int64}},NLsolve.DifferentiableMultivariateFunction},OrdinaryDiffEq.DEOptions{Float64,Float64,Float64,Float64,DiffEqBase.#ODE_DEFAULT_NORM,DiffEqBase.CallbackSet{Tuple{},Tuple{}},DiffEqBase.#ODE_DEFAULT_ISOUTOFDOMAIN,DiffEqBase.#ODE_DEFAULT_PROG_MESSAGE,DiffEqBase.#ODE_DEFAULT_UNSTABLE_CHECK,DataStructures.BinaryHeap{Float64,DataStructures.LessThan},Void,Void},Array{Float64,2}}) at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/solve.jl:308
 [10] #solve#87(::Array{Any,1}, ::Function, ::DiffEqBase.ODEProblem{Array{Float64,2},Float64,true,DiffEqProblemLibrary.##5#6,Void,UniformScaling{Int64}}, ::OrdinaryDiffEq.ImplicitEuler{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/solve.jl:7
 [11] (::DiffEqBase.#kw##solve)(::Array{Any,1}, ::DiffEqBase.#solve, ::DiffEqBase.ODEProblem{Array{Float64,2},Float64,true,DiffEqProblemLibrary.##5#6,Void,UniformScaling{Int64}}, ::OrdinaryDiffEq.ImplicitEuler{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at ./<missing>:0 (repeats 2 times)
 [12] include_from_node1(::String) at ./loading.jl:552
 [13] include(::String) at ./sysimg.jl:14
 [14] macro expansion at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/test/runtests.jl:29 [inlined]
 [15] macro expansion at ./test.jl:856 [inlined]
 [16] macro expansion at ./util.jl:237 [inlined]
 [17] anonymous at ./<missing>:?
 [18] include_from_node1(::String) at ./loading.jl:552
 [19] include(::String) at ./sysimg.jl:14
 [20] process_options(::Base.JLOptions) at ./client.jl:305
 [21] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/OrdinaryDiffEq/test/ode/ode_dense_tests.jl, in expression starting on line 456
WARNING: Array{T}(::Type{T}, m::Int, n::Int) is deprecated, use Array{T}(m, n) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] Array(::Type{Float64}, ::Int64, ::Int64) at ./deprecated.jl:51
 [3] trust_region_(::NLsolve.DifferentiableMultivariateFunction, ::Array{Float64,1}, ::Float64, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::Float64, ::Bool) at /home/vagrant/.julia/v0.6/NLsolve/src/trust_region.jl:82
 [4] #nlsolve#17(::Symbol, ::Float64, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::Function, ::Float64, ::Bool, ::NLsolve.#nlsolve, ::NLsolve.DifferentiableMultivariateFunction, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/NLsolve/src/nlsolve_func_defs.jl:24
 [5] NLSOLVEJL_SETUP at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/misc_utils.jl:51 [inlined]
 [6] perform_step! at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/integrators/implicit_integrators.jl:161 [inlined]
 [7] perform_step! at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/integrators/implicit_integrators.jl:152 [inlined]
 [8] solve!(::OrdinaryDiffEq.ODEIntegrator{OrdinaryDiffEq.Trapezoid{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}},Float64,Float64,Float64,Float64,Array{Float64,1},DiffEqBase.ODESolution{Float64,1,Array{Float64,1},Array{Float64,1},Dict{Symbol,Float64},Array{Float64,1},Array{Array{Float64,1},1},DiffEqBase.ODEProblem{Float64,Float64,false,DiffEqProblemLibrary.##1#2,Void,UniformScaling{Int64}},OrdinaryDiffEq.Trapezoid{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}},OrdinaryDiffEq.InterpolationData{DiffEqProblemLibrary.##1#2,Array{Float64,1},Array{Float64,1},Array{Array{Float64,1},1},OrdinaryDiffEq.TrapezoidConstantCache{Array{Float64,1},OrdinaryDiffEq.RHS_Trap_Scalar{DiffEqProblemLibrary.##1#2,Array{Float64,1},Float64,Float64},NLsolve.DifferentiableMultivariateFunction}}},Float64,DiffEqProblemLibrary.##1#2,Void,OrdinaryDiffEq.TrapezoidConstantCache{Array{Float64,1},OrdinaryDiffEq.RHS_Trap_Scalar{DiffEqProblemLibrary.##1#2,Array{Float64,1},Float64,Float64},NLsolve.DifferentiableMultivariateFunction},OrdinaryDiffEq.DEOptions{Float64,Float64,Float64,Float64,DiffEqBase.#ODE_DEFAULT_NORM,DiffEqBase.CallbackSet{Tuple{},Tuple{}},DiffEqBase.#ODE_DEFAULT_ISOUTOFDOMAIN,DiffEqBase.#ODE_DEFAULT_PROG_MESSAGE,DiffEqBase.#ODE_DEFAULT_UNSTABLE_CHECK,DataStructures.BinaryHeap{Float64,DataStructures.LessThan},Void,Void},Float64}) at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/solve.jl:308
 [9] #solve#87(::Array{Any,1}, ::Function, ::DiffEqBase.ODEProblem{Float64,Float64,false,DiffEqProblemLibrary.##1#2,Void,UniformScaling{Int64}}, ::OrdinaryDiffEq.Trapezoid{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/solve.jl:7
 [10] (::DiffEqBase.#kw##solve)(::Array{Any,1}, ::DiffEqBase.#solve, ::DiffEqBase.ODEProblem{Float64,Float64,false,DiffEqProblemLibrary.##1#2,Void,UniformScaling{Int64}}, ::OrdinaryDiffEq.Trapezoid{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at ./<missing>:0 (repeats 2 times)
 [11] include_from_node1(::String) at ./loading.jl:552
 [12] include(::String) at ./sysimg.jl:14
 [13] macro expansion at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/test/runtests.jl:29 [inlined]
 [14] macro expansion at ./test.jl:856 [inlined]
 [15] macro expansion at ./util.jl:237 [inlined]
 [16] anonymous at ./<missing>:?
 [17] include_from_node1(::String) at ./loading.jl:552
 [18] include(::String) at ./sysimg.jl:14
 [19] process_options(::Base.JLOptions) at ./client.jl:305
 [20] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/OrdinaryDiffEq/test/ode/ode_dense_tests.jl, in expression starting on line 464
WARNING: !(B::BitArray) is deprecated, use .!(B) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] !(::BitArray{1}) at ./deprecated.jl:51
 [3] check_isfinite(::Array{Float64,1}) at /home/vagrant/.julia/v0.6/NLsolve/src/utils.jl:32
 [4] trust_region_(::NLsolve.DifferentiableMultivariateFunction, ::Array{Float64,1}, ::Float64, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::Float64, ::Bool) at /home/vagrant/.julia/v0.6/NLsolve/src/trust_region.jl:91
 [5] #nlsolve#17(::Symbol, ::Float64, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::Function, ::Float64, ::Bool, ::NLsolve.#nlsolve, ::NLsolve.DifferentiableMultivariateFunction, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/NLsolve/src/nlsolve_func_defs.jl:24
 [6] NLSOLVEJL_SETUP at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/misc_utils.jl:51 [inlined]
 [7] perform_step! at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/integrators/implicit_integrators.jl:161 [inlined]
 [8] perform_step! at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/integrators/implicit_integrators.jl:152 [inlined]
 [9] solve!(::OrdinaryDiffEq.ODEIntegrator{OrdinaryDiffEq.Trapezoid{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}},Float64,Float64,Float64,Float64,Array{Float64,1},DiffEqBase.ODESolution{Float64,1,Array{Float64,1},Array{Float64,1},Dict{Symbol,Float64},Array{Float64,1},Array{Array{Float64,1},1},DiffEqBase.ODEProblem{Float64,Float64,false,DiffEqProblemLibrary.##1#2,Void,UniformScaling{Int64}},OrdinaryDiffEq.Trapezoid{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}},OrdinaryDiffEq.InterpolationData{DiffEqProblemLibrary.##1#2,Array{Float64,1},Array{Float64,1},Array{Array{Float64,1},1},OrdinaryDiffEq.TrapezoidConstantCache{Array{Float64,1},OrdinaryDiffEq.RHS_Trap_Scalar{DiffEqProblemLibrary.##1#2,Array{Float64,1},Float64,Float64},NLsolve.DifferentiableMultivariateFunction}}},Float64,DiffEqProblemLibrary.##1#2,Void,OrdinaryDiffEq.TrapezoidConstantCache{Array{Float64,1},OrdinaryDiffEq.RHS_Trap_Scalar{DiffEqProblemLibrary.##1#2,Array{Float64,1},Float64,Float64},NLsolve.DifferentiableMultivariateFunction},OrdinaryDiffEq.DEOptions{Float64,Float64,Float64,Float64,DiffEqBase.#ODE_DEFAULT_NORM,DiffEqBase.CallbackSet{Tuple{},Tuple{}},DiffEqBase.#ODE_DEFAULT_ISOUTOFDOMAIN,DiffEqBase.#ODE_DEFAULT_PROG_MESSAGE,DiffEqBase.#ODE_DEFAULT_UNSTABLE_CHECK,DataStructures.BinaryHeap{Float64,DataStructures.LessThan},Void,Void},Float64}) at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/solve.jl:308
 [10] #solve#87(::Array{Any,1}, ::Function, ::DiffEqBase.ODEProblem{Float64,Float64,false,DiffEqProblemLibrary.##1#2,Void,UniformScaling{Int64}}, ::OrdinaryDiffEq.Trapezoid{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/solve.jl:7
 [11] (::DiffEqBase.#kw##solve)(::Array{Any,1}, ::DiffEqBase.#solve, ::DiffEqBase.ODEProblem{Float64,Float64,false,DiffEqProblemLibrary.##1#2,Void,UniformScaling{Int64}}, ::OrdinaryDiffEq.Trapezoid{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at ./<missing>:0 (repeats 2 times)
 [12] include_from_node1(::String) at ./loading.jl:552
 [13] include(::String) at ./sysimg.jl:14
 [14] macro expansion at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/test/runtests.jl:29 [inlined]
 [15] macro expansion at ./test.jl:856 [inlined]
 [16] macro expansion at ./util.jl:237 [inlined]
 [17] anonymous at ./<missing>:?
 [18] include_from_node1(::String) at ./loading.jl:552
 [19] include(::String) at ./sysimg.jl:14
 [20] process_options(::Base.JLOptions) at ./client.jl:305
 [21] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/OrdinaryDiffEq/test/ode/ode_dense_tests.jl, in expression starting on line 464
WARNING: Array{T}(::Type{T}, m::Int) is deprecated, use Array{T}(m) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] Array(::Type{NLsolve.SolverState}, ::Int64) at ./deprecated.jl:51
 [3] Type at /home/vagrant/.julia/v0.6/NLsolve/src/solver_state_results.jl:20 [inlined]
 [4] trust_region_(::NLsolve.DifferentiableMultivariateFunction, ::Array{Float64,1}, ::Float64, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::Float64, ::Bool) at /home/vagrant/.julia/v0.6/NLsolve/src/trust_region.jl:99
 [5] #nlsolve#17(::Symbol, ::Float64, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::Function, ::Float64, ::Bool, ::NLsolve.#nlsolve, ::NLsolve.DifferentiableMultivariateFunction, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/NLsolve/src/nlsolve_func_defs.jl:24
 [6] NLSOLVEJL_SETUP at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/misc_utils.jl:51 [inlined]
 [7] perform_step! at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/integrators/implicit_integrators.jl:161 [inlined]
 [8] perform_step! at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/integrators/implicit_integrators.jl:152 [inlined]
 [9] solve!(::OrdinaryDiffEq.ODEIntegrator{OrdinaryDiffEq.Trapezoid{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}},Float64,Float64,Float64,Float64,Array{Float64,1},DiffEqBase.ODESolution{Float64,1,Array{Float64,1},Array{Float64,1},Dict{Symbol,Float64},Array{Float64,1},Array{Array{Float64,1},1},DiffEqBase.ODEProblem{Float64,Float64,false,DiffEqProblemLibrary.##1#2,Void,UniformScaling{Int64}},OrdinaryDiffEq.Trapezoid{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}},OrdinaryDiffEq.InterpolationData{DiffEqProblemLibrary.##1#2,Array{Float64,1},Array{Float64,1},Array{Array{Float64,1},1},OrdinaryDiffEq.TrapezoidConstantCache{Array{Float64,1},OrdinaryDiffEq.RHS_Trap_Scalar{DiffEqProblemLibrary.##1#2,Array{Float64,1},Float64,Float64},NLsolve.DifferentiableMultivariateFunction}}},Float64,DiffEqProblemLibrary.##1#2,Void,OrdinaryDiffEq.TrapezoidConstantCache{Array{Float64,1},OrdinaryDiffEq.RHS_Trap_Scalar{DiffEqProblemLibrary.##1#2,Array{Float64,1},Float64,Float64},NLsolve.DifferentiableMultivariateFunction},OrdinaryDiffEq.DEOptions{Float64,Float64,Float64,Float64,DiffEqBase.#ODE_DEFAULT_NORM,DiffEqBase.CallbackSet{Tuple{},Tuple{}},DiffEqBase.#ODE_DEFAULT_ISOUTOFDOMAIN,DiffEqBase.#ODE_DEFAULT_PROG_MESSAGE,DiffEqBase.#ODE_DEFAULT_UNSTABLE_CHECK,DataStructures.BinaryHeap{Float64,DataStructures.LessThan},Void,Void},Float64}) at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/solve.jl:308
 [10] #solve#87(::Array{Any,1}, ::Function, ::DiffEqBase.ODEProblem{Float64,Float64,false,DiffEqProblemLibrary.##1#2,Void,UniformScaling{Int64}}, ::OrdinaryDiffEq.Trapezoid{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/solve.jl:7
 [11] (::DiffEqBase.#kw##solve)(::Array{Any,1}, ::DiffEqBase.#solve, ::DiffEqBase.ODEProblem{Float64,Float64,false,DiffEqProblemLibrary.##1#2,Void,UniformScaling{Int64}}, ::OrdinaryDiffEq.Trapezoid{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at ./<missing>:0 (repeats 2 times)
 [12] include_from_node1(::String) at ./loading.jl:552
 [13] include(::String) at ./sysimg.jl:14
 [14] macro expansion at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/test/runtests.jl:29 [inlined]
 [15] macro expansion at ./test.jl:856 [inlined]
 [16] macro expansion at ./util.jl:237 [inlined]
 [17] anonymous at ./<missing>:?
 [18] include_from_node1(::String) at ./loading.jl:552
 [19] include(::String) at ./sysimg.jl:14
 [20] process_options(::Base.JLOptions) at ./client.jl:305
 [21] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/OrdinaryDiffEq/test/ode/ode_dense_tests.jl, in expression starting on line 464
WARNING: Array{T}(::Type{T}, m::Int, n::Int) is deprecated, use Array{T}(m, n) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] Array(::Type{Float64}, ::Int64, ::Int64) at ./deprecated.jl:51
 [3] trust_region_(::NLsolve.DifferentiableMultivariateFunction, ::Array{Float64,1}, ::Float64, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::Float64, ::Bool) at /home/vagrant/.julia/v0.6/NLsolve/src/trust_region.jl:82
 [4] #nlsolve#17(::Symbol, ::Float64, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::Function, ::Float64, ::Bool, ::NLsolve.#nlsolve, ::NLsolve.DifferentiableMultivariateFunction, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/NLsolve/src/nlsolve_func_defs.jl:24
 [5] NLSOLVEJL_SETUP at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/misc_utils.jl:51 [inlined]
 [6] perform_step! at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/integrators/implicit_integrators.jl:161 [inlined]
 [7] perform_step! at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/integrators/implicit_integrators.jl:152 [inlined]
 [8] solve!(::OrdinaryDiffEq.ODEIntegrator{OrdinaryDiffEq.Trapezoid{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}},Float64,Float64,Float64,Float64,Array{Float64,1},DiffEqBase.ODESolution{Float64,1,Array{Float64,1},Array{Float64,1},Dict{Symbol,Float64},Array{Float64,1},Array{Array{Float64,1},1},DiffEqBase.ODEProblem{Float64,Float64,false,DiffEqProblemLibrary.##1#2,Void,UniformScaling{Int64}},OrdinaryDiffEq.Trapezoid{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}},OrdinaryDiffEq.InterpolationData{DiffEqProblemLibrary.##1#2,Array{Float64,1},Array{Float64,1},Array{Array{Float64,1},1},OrdinaryDiffEq.TrapezoidConstantCache{Array{Float64,1},OrdinaryDiffEq.RHS_Trap_Scalar{DiffEqProblemLibrary.##1#2,Array{Float64,1},Float64,Float64},NLsolve.DifferentiableMultivariateFunction}}},Float64,DiffEqProblemLibrary.##1#2,Void,OrdinaryDiffEq.TrapezoidConstantCache{Array{Float64,1},OrdinaryDiffEq.RHS_Trap_Scalar{DiffEqProblemLibrary.##1#2,Array{Float64,1},Float64,Float64},NLsolve.DifferentiableMultivariateFunction},OrdinaryDiffEq.DEOptions{Float64,Float64,Float64,Float64,DiffEqBase.#ODE_DEFAULT_NORM,DiffEqBase.CallbackSet{Tuple{},Tuple{}},DiffEqBase.#ODE_DEFAULT_ISOUTOFDOMAIN,DiffEqBase.#ODE_DEFAULT_PROG_MESSAGE,DiffEqBase.#ODE_DEFAULT_UNSTABLE_CHECK,DataStructures.BinaryHeap{Float64,DataStructures.LessThan},Void,Void},Float64}) at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/solve.jl:308
 [9] #solve#87(::Array{Any,1}, ::Function, ::DiffEqBase.ODEProblem{Float64,Float64,false,DiffEqProblemLibrary.##1#2,Void,UniformScaling{Int64}}, ::OrdinaryDiffEq.Trapezoid{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/solve.jl:7
 [10] (::DiffEqBase.#kw##solve)(::Array{Any,1}, ::DiffEqBase.#solve, ::DiffEqBase.ODEProblem{Float64,Float64,false,DiffEqProblemLibrary.##1#2,Void,UniformScaling{Int64}}, ::OrdinaryDiffEq.Trapezoid{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at ./<missing>:0 (repeats 2 times)
 [11] include_from_node1(::String) at ./loading.jl:552
 [12] include(::String) at ./sysimg.jl:14
 [13] macro expansion at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/test/runtests.jl:29 [inlined]
 [14] macro expansion at ./test.jl:856 [inlined]
 [15] macro expansion at ./util.jl:237 [inlined]
 [16] anonymous at ./<missing>:?
 [17] include_from_node1(::String) at ./loading.jl:552
 [18] include(::String) at ./sysimg.jl:14
 [19] process_options(::Base.JLOptions) at ./client.jl:305
 [20] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/OrdinaryDiffEq/test/ode/ode_dense_tests.jl, in expression starting on line 468
WARNING: !(B::BitArray) is deprecated, use .!(B) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] !(::BitArray{1}) at ./deprecated.jl:51
 [3] check_isfinite(::Array{Float64,1}) at /home/vagrant/.julia/v0.6/NLsolve/src/utils.jl:32
 [4] trust_region_(::NLsolve.DifferentiableMultivariateFunction, ::Array{Float64,1}, ::Float64, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::Float64, ::Bool) at /home/vagrant/.julia/v0.6/NLsolve/src/trust_region.jl:91
 [5] #nlsolve#17(::Symbol, ::Float64, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::Function, ::Float64, ::Bool, ::NLsolve.#nlsolve, ::NLsolve.DifferentiableMultivariateFunction, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/NLsolve/src/nlsolve_func_defs.jl:24
 [6] NLSOLVEJL_SETUP at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/misc_utils.jl:51 [inlined]
 [7] perform_step! at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/integrators/implicit_integrators.jl:161 [inlined]
 [8] perform_step! at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/integrators/implicit_integrators.jl:152 [inlined]
 [9] solve!(::OrdinaryDiffEq.ODEIntegrator{OrdinaryDiffEq.Trapezoid{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}},Float64,Float64,Float64,Float64,Array{Float64,1},DiffEqBase.ODESolution{Float64,1,Array{Float64,1},Array{Float64,1},Dict{Symbol,Float64},Array{Float64,1},Array{Array{Float64,1},1},DiffEqBase.ODEProblem{Float64,Float64,false,DiffEqProblemLibrary.##1#2,Void,UniformScaling{Int64}},OrdinaryDiffEq.Trapezoid{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}},OrdinaryDiffEq.InterpolationData{DiffEqProblemLibrary.##1#2,Array{Float64,1},Array{Float64,1},Array{Array{Float64,1},1},OrdinaryDiffEq.TrapezoidConstantCache{Array{Float64,1},OrdinaryDiffEq.RHS_Trap_Scalar{DiffEqProblemLibrary.##1#2,Array{Float64,1},Float64,Float64},NLsolve.DifferentiableMultivariateFunction}}},Float64,DiffEqProblemLibrary.##1#2,Void,OrdinaryDiffEq.TrapezoidConstantCache{Array{Float64,1},OrdinaryDiffEq.RHS_Trap_Scalar{DiffEqProblemLibrary.##1#2,Array{Float64,1},Float64,Float64},NLsolve.DifferentiableMultivariateFunction},OrdinaryDiffEq.DEOptions{Float64,Float64,Float64,Float64,DiffEqBase.#ODE_DEFAULT_NORM,DiffEqBase.CallbackSet{Tuple{},Tuple{}},DiffEqBase.#ODE_DEFAULT_ISOUTOFDOMAIN,DiffEqBase.#ODE_DEFAULT_PROG_MESSAGE,DiffEqBase.#ODE_DEFAULT_UNSTABLE_CHECK,DataStructures.BinaryHeap{Float64,DataStructures.LessThan},Void,Void},Float64}) at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/solve.jl:308
 [10] #solve#87(::Array{Any,1}, ::Function, ::DiffEqBase.ODEProblem{Float64,Float64,false,DiffEqProblemLibrary.##1#2,Void,UniformScaling{Int64}}, ::OrdinaryDiffEq.Trapezoid{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/solve.jl:7
 [11] (::DiffEqBase.#kw##solve)(::Array{Any,1}, ::DiffEqBase.#solve, ::DiffEqBase.ODEProblem{Float64,Float64,false,DiffEqProblemLibrary.##1#2,Void,UniformScaling{Int64}}, ::OrdinaryDiffEq.Trapezoid{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at ./<missing>:0 (repeats 2 times)
 [12] include_from_node1(::String) at ./loading.jl:552
 [13] include(::String) at ./sysimg.jl:14
 [14] macro expansion at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/test/runtests.jl:29 [inlined]
 [15] macro expansion at ./test.jl:856 [inlined]
 [16] macro expansion at ./util.jl:237 [inlined]
 [17] anonymous at ./<missing>:?
 [18] include_from_node1(::String) at ./loading.jl:552
 [19] include(::String) at ./sysimg.jl:14
 [20] process_options(::Base.JLOptions) at ./client.jl:305
 [21] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/OrdinaryDiffEq/test/ode/ode_dense_tests.jl, in expression starting on line 468
WARNING: Array{T}(::Type{T}, m::Int) is deprecated, use Array{T}(m) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] Array(::Type{NLsolve.SolverState}, ::Int64) at ./deprecated.jl:51
 [3] Type at /home/vagrant/.julia/v0.6/NLsolve/src/solver_state_results.jl:20 [inlined]
 [4] trust_region_(::NLsolve.DifferentiableMultivariateFunction, ::Array{Float64,1}, ::Float64, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::Float64, ::Bool) at /home/vagrant/.julia/v0.6/NLsolve/src/trust_region.jl:99
 [5] #nlsolve#17(::Symbol, ::Float64, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::Function, ::Float64, ::Bool, ::NLsolve.#nlsolve, ::NLsolve.DifferentiableMultivariateFunction, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/NLsolve/src/nlsolve_func_defs.jl:24
 [6] NLSOLVEJL_SETUP at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/misc_utils.jl:51 [inlined]
 [7] perform_step! at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/integrators/implicit_integrators.jl:161 [inlined]
 [8] perform_step! at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/integrators/implicit_integrators.jl:152 [inlined]
 [9] solve!(::OrdinaryDiffEq.ODEIntegrator{OrdinaryDiffEq.Trapezoid{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}},Float64,Float64,Float64,Float64,Array{Float64,1},DiffEqBase.ODESolution{Float64,1,Array{Float64,1},Array{Float64,1},Dict{Symbol,Float64},Array{Float64,1},Array{Array{Float64,1},1},DiffEqBase.ODEProblem{Float64,Float64,false,DiffEqProblemLibrary.##1#2,Void,UniformScaling{Int64}},OrdinaryDiffEq.Trapezoid{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}},OrdinaryDiffEq.InterpolationData{DiffEqProblemLibrary.##1#2,Array{Float64,1},Array{Float64,1},Array{Array{Float64,1},1},OrdinaryDiffEq.TrapezoidConstantCache{Array{Float64,1},OrdinaryDiffEq.RHS_Trap_Scalar{DiffEqProblemLibrary.##1#2,Array{Float64,1},Float64,Float64},NLsolve.DifferentiableMultivariateFunction}}},Float64,DiffEqProblemLibrary.##1#2,Void,OrdinaryDiffEq.TrapezoidConstantCache{Array{Float64,1},OrdinaryDiffEq.RHS_Trap_Scalar{DiffEqProblemLibrary.##1#2,Array{Float64,1},Float64,Float64},NLsolve.DifferentiableMultivariateFunction},OrdinaryDiffEq.DEOptions{Float64,Float64,Float64,Float64,DiffEqBase.#ODE_DEFAULT_NORM,DiffEqBase.CallbackSet{Tuple{},Tuple{}},DiffEqBase.#ODE_DEFAULT_ISOUTOFDOMAIN,DiffEqBase.#ODE_DEFAULT_PROG_MESSAGE,DiffEqBase.#ODE_DEFAULT_UNSTABLE_CHECK,DataStructures.BinaryHeap{Float64,DataStructures.LessThan},Void,Void},Float64}) at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/solve.jl:308
 [10] #solve#87(::Array{Any,1}, ::Function, ::DiffEqBase.ODEProblem{Float64,Float64,false,DiffEqProblemLibrary.##1#2,Void,UniformScaling{Int64}}, ::OrdinaryDiffEq.Trapezoid{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/solve.jl:7
 [11] (::DiffEqBase.#kw##solve)(::Array{Any,1}, ::DiffEqBase.#solve, ::DiffEqBase.ODEProblem{Float64,Float64,false,DiffEqProblemLibrary.##1#2,Void,UniformScaling{Int64}}, ::OrdinaryDiffEq.Trapezoid{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at ./<missing>:0 (repeats 2 times)
 [12] include_from_node1(::String) at ./loading.jl:552
 [13] include(::String) at ./sysimg.jl:14
 [14] macro expansion at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/test/runtests.jl:29 [inlined]
 [15] macro expansion at ./test.jl:856 [inlined]
 [16] macro expansion at ./util.jl:237 [inlined]
 [17] anonymous at ./<missing>:?
 [18] include_from_node1(::String) at ./loading.jl:552
 [19] include(::String) at ./sysimg.jl:14
 [20] process_options(::Base.JLOptions) at ./client.jl:305
 [21] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/OrdinaryDiffEq/test/ode/ode_dense_tests.jl, in expression starting on line 468
WARNING: Array{T}(::Type{T}, m::Int, n::Int) is deprecated, use Array{T}(m, n) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] Array(::Type{Float64}, ::Int64, ::Int64) at ./deprecated.jl:51
 [3] trust_region_(::NLsolve.DifferentiableMultivariateFunction, ::Array{Float64,1}, ::Float64, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::Float64, ::Bool) at /home/vagrant/.julia/v0.6/NLsolve/src/trust_region.jl:82
 [4] #nlsolve#17(::Symbol, ::Float64, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::Function, ::Float64, ::Bool, ::NLsolve.#nlsolve, ::NLsolve.DifferentiableMultivariateFunction, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/NLsolve/src/nlsolve_func_defs.jl:24
 [5] NLSOLVEJL_SETUP at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/misc_utils.jl:51 [inlined]
 [6] perform_step! at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/integrators/implicit_integrators.jl:126 [inlined]
 [7] perform_step! at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/integrators/implicit_integrators.jl:114 [inlined]
 [8] solve!(::OrdinaryDiffEq.ODEIntegrator{OrdinaryDiffEq.Trapezoid{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}},Array{Float64,2},Float64,Float64,Float64,Array{Array{Float64,2},1},DiffEqBase.ODESolution{Float64,3,Array{Array{Float64,2},1},Array{Array{Float64,2},1},Dict{Symbol,Float64},Array{Float64,1},Array{Array{Array{Float64,2},1},1},DiffEqBase.ODEProblem{Array{Float64,2},Float64,true,DiffEqProblemLibrary.##5#6,Void,UniformScaling{Int64}},OrdinaryDiffEq.Trapezoid{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}},OrdinaryDiffEq.InterpolationData{DiffEqProblemLibrary.##5#6,Array{Array{Float64,2},1},Array{Float64,1},Array{Array{Array{Float64,2},1},1},OrdinaryDiffEq.TrapezoidCache{Array{Float64,2},Array{Float64,2},Array{Float64,1},OrdinaryDiffEq.DiffCache{Float64,ForwardDiff.Dual{8,Float64}},Array{Float64,2},OrdinaryDiffEq.RHS_Trap{DiffEqProblemLibrary.##5#6,Array{Float64,2},Array{Float64,2},Float64,Tuple{Int64,Int64},OrdinaryDiffEq.DiffCache{Float64,ForwardDiff.Dual{8,Float64}},Base.OneTo{Int64}},NLsolve.DifferentiableMultivariateFunction}}},Array{Float64,2},DiffEqProblemLibrary.##5#6,Void,OrdinaryDiffEq.TrapezoidCache{Array{Float64,2},Array{Float64,2},Array{Float64,1},OrdinaryDiffEq.DiffCache{Float64,ForwardDiff.Dual{8,Float64}},Array{Float64,2},OrdinaryDiffEq.RHS_Trap{DiffEqProblemLibrary.##5#6,Array{Float64,2},Array{Float64,2},Float64,Tuple{Int64,Int64},OrdinaryDiffEq.DiffCache{Float64,ForwardDiff.Dual{8,Float64}},Base.OneTo{Int64}},NLsolve.DifferentiableMultivariateFunction},OrdinaryDiffEq.DEOptions{Float64,Float64,Float64,Float64,DiffEqBase.#ODE_DEFAULT_NORM,DiffEqBase.CallbackSet{Tuple{},Tuple{}},DiffEqBase.#ODE_DEFAULT_ISOUTOFDOMAIN,DiffEqBase.#ODE_DEFAULT_PROG_MESSAGE,DiffEqBase.#ODE_DEFAULT_UNSTABLE_CHECK,DataStructures.BinaryHeap{Float64,DataStructures.LessThan},Void,Void},Array{Float64,2}}) at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/solve.jl:308
 [9] #solve#87(::Array{Any,1}, ::Function, ::DiffEqBase.ODEProblem{Array{Float64,2},Float64,true,DiffEqProblemLibrary.##5#6,Void,UniformScaling{Int64}}, ::OrdinaryDiffEq.Trapezoid{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/solve.jl:7
 [10] (::DiffEqBase.#kw##solve)(::Array{Any,1}, ::DiffEqBase.#solve, ::DiffEqBase.ODEProblem{Array{Float64,2},Float64,true,DiffEqProblemLibrary.##5#6,Void,UniformScaling{Int64}}, ::OrdinaryDiffEq.Trapezoid{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at ./<missing>:0 (repeats 2 times)
 [11] include_from_node1(::String) at ./loading.jl:552
 [12] include(::String) at ./sysimg.jl:14
 [13] macro expansion at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/test/runtests.jl:29 [inlined]
 [14] macro expansion at ./test.jl:856 [inlined]
 [15] macro expansion at ./util.jl:237 [inlined]
 [16] anonymous at ./<missing>:?
 [17] include_from_node1(::String) at ./loading.jl:552
 [18] include(::String) at ./sysimg.jl:14
 [19] process_options(::Base.JLOptions) at ./client.jl:305
 [20] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/OrdinaryDiffEq/test/ode/ode_dense_tests.jl, in expression starting on line 476
WARNING: !(B::BitArray) is deprecated, use .!(B) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] !(::BitArray{1}) at ./deprecated.jl:51
 [3] check_isfinite(::Array{Float64,1}) at /home/vagrant/.julia/v0.6/NLsolve/src/utils.jl:32
 [4] trust_region_(::NLsolve.DifferentiableMultivariateFunction, ::Array{Float64,1}, ::Float64, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::Float64, ::Bool) at /home/vagrant/.julia/v0.6/NLsolve/src/trust_region.jl:91
 [5] #nlsolve#17(::Symbol, ::Float64, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::Function, ::Float64, ::Bool, ::NLsolve.#nlsolve, ::NLsolve.DifferentiableMultivariateFunction, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/NLsolve/src/nlsolve_func_defs.jl:24
 [6] NLSOLVEJL_SETUP at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/misc_utils.jl:51 [inlined]
 [7] perform_step! at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/integrators/implicit_integrators.jl:126 [inlined]
 [8] perform_step! at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/integrators/implicit_integrators.jl:114 [inlined]
 [9] solve!(::OrdinaryDiffEq.ODEIntegrator{OrdinaryDiffEq.Trapezoid{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}},Array{Float64,2},Float64,Float64,Float64,Array{Array{Float64,2},1},DiffEqBase.ODESolution{Float64,3,Array{Array{Float64,2},1},Array{Array{Float64,2},1},Dict{Symbol,Float64},Array{Float64,1},Array{Array{Array{Float64,2},1},1},DiffEqBase.ODEProblem{Array{Float64,2},Float64,true,DiffEqProblemLibrary.##5#6,Void,UniformScaling{Int64}},OrdinaryDiffEq.Trapezoid{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}},OrdinaryDiffEq.InterpolationData{DiffEqProblemLibrary.##5#6,Array{Array{Float64,2},1},Array{Float64,1},Array{Array{Array{Float64,2},1},1},OrdinaryDiffEq.TrapezoidCache{Array{Float64,2},Array{Float64,2},Array{Float64,1},OrdinaryDiffEq.DiffCache{Float64,ForwardDiff.Dual{8,Float64}},Array{Float64,2},OrdinaryDiffEq.RHS_Trap{DiffEqProblemLibrary.##5#6,Array{Float64,2},Array{Float64,2},Float64,Tuple{Int64,Int64},OrdinaryDiffEq.DiffCache{Float64,ForwardDiff.Dual{8,Float64}},Base.OneTo{Int64}},NLsolve.DifferentiableMultivariateFunction}}},Array{Float64,2},DiffEqProblemLibrary.##5#6,Void,OrdinaryDiffEq.TrapezoidCache{Array{Float64,2},Array{Float64,2},Array{Float64,1},OrdinaryDiffEq.DiffCache{Float64,ForwardDiff.Dual{8,Float64}},Array{Float64,2},OrdinaryDiffEq.RHS_Trap{DiffEqProblemLibrary.##5#6,Array{Float64,2},Array{Float64,2},Float64,Tuple{Int64,Int64},OrdinaryDiffEq.DiffCache{Float64,ForwardDiff.Dual{8,Float64}},Base.OneTo{Int64}},NLsolve.DifferentiableMultivariateFunction},OrdinaryDiffEq.DEOptions{Float64,Float64,Float64,Float64,DiffEqBase.#ODE_DEFAULT_NORM,DiffEqBase.CallbackSet{Tuple{},Tuple{}},DiffEqBase.#ODE_DEFAULT_ISOUTOFDOMAIN,DiffEqBase.#ODE_DEFAULT_PROG_MESSAGE,DiffEqBase.#ODE_DEFAULT_UNSTABLE_CHECK,DataStructures.BinaryHeap{Float64,DataStructures.LessThan},Void,Void},Array{Float64,2}}) at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/solve.jl:308
 [10] #solve#87(::Array{Any,1}, ::Function, ::DiffEqBase.ODEProblem{Array{Float64,2},Float64,true,DiffEqProblemLibrary.##5#6,Void,UniformScaling{Int64}}, ::OrdinaryDiffEq.Trapezoid{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/solve.jl:7
 [11] (::DiffEqBase.#kw##solve)(::Array{Any,1}, ::DiffEqBase.#solve, ::DiffEqBase.ODEProblem{Array{Float64,2},Float64,true,DiffEqProblemLibrary.##5#6,Void,UniformScaling{Int64}}, ::OrdinaryDiffEq.Trapezoid{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at ./<missing>:0 (repeats 2 times)
 [12] include_from_node1(::String) at ./loading.jl:552
 [13] include(::String) at ./sysimg.jl:14
 [14] macro expansion at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/test/runtests.jl:29 [inlined]
 [15] macro expansion at ./test.jl:856 [inlined]
 [16] macro expansion at ./util.jl:237 [inlined]
 [17] anonymous at ./<missing>:?
 [18] include_from_node1(::String) at ./loading.jl:552
 [19] include(::String) at ./sysimg.jl:14
 [20] process_options(::Base.JLOptions) at ./client.jl:305
 [21] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/OrdinaryDiffEq/test/ode/ode_dense_tests.jl, in expression starting on line 476
WARNING: Array{T}(::Type{T}, m::Int) is deprecated, use Array{T}(m) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] Array(::Type{NLsolve.SolverState}, ::Int64) at ./deprecated.jl:51
 [3] Type at /home/vagrant/.julia/v0.6/NLsolve/src/solver_state_results.jl:20 [inlined]
 [4] trust_region_(::NLsolve.DifferentiableMultivariateFunction, ::Array{Float64,1}, ::Float64, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::Float64, ::Bool) at /home/vagrant/.julia/v0.6/NLsolve/src/trust_region.jl:99
 [5] #nlsolve#17(::Symbol, ::Float64, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::Function, ::Float64, ::Bool, ::NLsolve.#nlsolve, ::NLsolve.DifferentiableMultivariateFunction, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/NLsolve/src/nlsolve_func_defs.jl:24
 [6] NLSOLVEJL_SETUP at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/misc_utils.jl:51 [inlined]
 [7] perform_step! at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/integrators/implicit_integrators.jl:126 [inlined]
 [8] perform_step! at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/integrators/implicit_integrators.jl:114 [inlined]
 [9] solve!(::OrdinaryDiffEq.ODEIntegrator{OrdinaryDiffEq.Trapezoid{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}},Array{Float64,2},Float64,Float64,Float64,Array{Array{Float64,2},1},DiffEqBase.ODESolution{Float64,3,Array{Array{Float64,2},1},Array{Array{Float64,2},1},Dict{Symbol,Float64},Array{Float64,1},Array{Array{Array{Float64,2},1},1},DiffEqBase.ODEProblem{Array{Float64,2},Float64,true,DiffEqProblemLibrary.##5#6,Void,UniformScaling{Int64}},OrdinaryDiffEq.Trapezoid{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}},OrdinaryDiffEq.InterpolationData{DiffEqProblemLibrary.##5#6,Array{Array{Float64,2},1},Array{Float64,1},Array{Array{Array{Float64,2},1},1},OrdinaryDiffEq.TrapezoidCache{Array{Float64,2},Array{Float64,2},Array{Float64,1},OrdinaryDiffEq.DiffCache{Float64,ForwardDiff.Dual{8,Float64}},Array{Float64,2},OrdinaryDiffEq.RHS_Trap{DiffEqProblemLibrary.##5#6,Array{Float64,2},Array{Float64,2},Float64,Tuple{Int64,Int64},OrdinaryDiffEq.DiffCache{Float64,ForwardDiff.Dual{8,Float64}},Base.OneTo{Int64}},NLsolve.DifferentiableMultivariateFunction}}},Array{Float64,2},DiffEqProblemLibrary.##5#6,Void,OrdinaryDiffEq.TrapezoidCache{Array{Float64,2},Array{Float64,2},Array{Float64,1},OrdinaryDiffEq.DiffCache{Float64,ForwardDiff.Dual{8,Float64}},Array{Float64,2},OrdinaryDiffEq.RHS_Trap{DiffEqProblemLibrary.##5#6,Array{Float64,2},Array{Float64,2},Float64,Tuple{Int64,Int64},OrdinaryDiffEq.DiffCache{Float64,ForwardDiff.Dual{8,Float64}},Base.OneTo{Int64}},NLsolve.DifferentiableMultivariateFunction},OrdinaryDiffEq.DEOptions{Float64,Float64,Float64,Float64,DiffEqBase.#ODE_DEFAULT_NORM,DiffEqBase.CallbackSet{Tuple{},Tuple{}},DiffEqBase.#ODE_DEFAULT_ISOUTOFDOMAIN,DiffEqBase.#ODE_DEFAULT_PROG_MESSAGE,DiffEqBase.#ODE_DEFAULT_UNSTABLE_CHECK,DataStructures.BinaryHeap{Float64,DataStructures.LessThan},Void,Void},Array{Float64,2}}) at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/solve.jl:308
 [10] #solve#87(::Array{Any,1}, ::Function, ::DiffEqBase.ODEProblem{Array{Float64,2},Float64,true,DiffEqProblemLibrary.##5#6,Void,UniformScaling{Int64}}, ::OrdinaryDiffEq.Trapezoid{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/solve.jl:7
 [11] (::DiffEqBase.#kw##solve)(::Array{Any,1}, ::DiffEqBase.#solve, ::DiffEqBase.ODEProblem{Array{Float64,2},Float64,true,DiffEqProblemLibrary.##5#6,Void,UniformScaling{Int64}}, ::OrdinaryDiffEq.Trapezoid{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at ./<missing>:0 (repeats 2 times)
 [12] include_from_node1(::String) at ./loading.jl:552
 [13] include(::String) at ./sysimg.jl:14
 [14] macro expansion at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/test/runtests.jl:29 [inlined]
 [15] macro expansion at ./test.jl:856 [inlined]
 [16] macro expansion at ./util.jl:237 [inlined]
 [17] anonymous at ./<missing>:?
 [18] include_from_node1(::String) at ./loading.jl:552
 [19] include(::String) at ./sysimg.jl:14
 [20] process_options(::Base.JLOptions) at ./client.jl:305
 [21] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/OrdinaryDiffEq/test/ode/ode_dense_tests.jl, in expression starting on line 476
WARNING: Array{T}(::Type{T}, m::Int, n::Int) is deprecated, use Array{T}(m, n) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] Array(::Type{Float64}, ::Int64, ::Int64) at ./deprecated.jl:51
 [3] trust_region_(::NLsolve.DifferentiableMultivariateFunction, ::Array{Float64,1}, ::Float64, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::Float64, ::Bool) at /home/vagrant/.julia/v0.6/NLsolve/src/trust_region.jl:82
 [4] #nlsolve#17(::Symbol, ::Float64, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::Function, ::Float64, ::Bool, ::NLsolve.#nlsolve, ::NLsolve.DifferentiableMultivariateFunction, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/NLsolve/src/nlsolve_func_defs.jl:24
 [5] NLSOLVEJL_SETUP at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/misc_utils.jl:51 [inlined]
 [6] perform_step! at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/integrators/implicit_integrators.jl:126 [inlined]
 [7] perform_step! at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/integrators/implicit_integrators.jl:114 [inlined]
 [8] solve!(::OrdinaryDiffEq.ODEIntegrator{OrdinaryDiffEq.Trapezoid{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}},Array{Float64,2},Float64,Float64,Float64,Array{Array{Float64,2},1},DiffEqBase.ODESolution{Float64,3,Array{Array{Float64,2},1},Array{Array{Float64,2},1},Dict{Symbol,Float64},Array{Float64,1},Array{Array{Array{Float64,2},1},1},DiffEqBase.ODEProblem{Array{Float64,2},Float64,true,DiffEqProblemLibrary.##5#6,Void,UniformScaling{Int64}},OrdinaryDiffEq.Trapezoid{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}},OrdinaryDiffEq.InterpolationData{DiffEqProblemLibrary.##5#6,Array{Array{Float64,2},1},Array{Float64,1},Array{Array{Array{Float64,2},1},1},OrdinaryDiffEq.TrapezoidCache{Array{Float64,2},Array{Float64,2},Array{Float64,1},OrdinaryDiffEq.DiffCache{Float64,ForwardDiff.Dual{8,Float64}},Array{Float64,2},OrdinaryDiffEq.RHS_Trap{DiffEqProblemLibrary.##5#6,Array{Float64,2},Array{Float64,2},Float64,Tuple{Int64,Int64},OrdinaryDiffEq.DiffCache{Float64,ForwardDiff.Dual{8,Float64}},Base.OneTo{Int64}},NLsolve.DifferentiableMultivariateFunction}}},Array{Float64,2},DiffEqProblemLibrary.##5#6,Void,OrdinaryDiffEq.TrapezoidCache{Array{Float64,2},Array{Float64,2},Array{Float64,1},OrdinaryDiffEq.DiffCache{Float64,ForwardDiff.Dual{8,Float64}},Array{Float64,2},OrdinaryDiffEq.RHS_Trap{DiffEqProblemLibrary.##5#6,Array{Float64,2},Array{Float64,2},Float64,Tuple{Int64,Int64},OrdinaryDiffEq.DiffCache{Float64,ForwardDiff.Dual{8,Float64}},Base.OneTo{Int64}},NLsolve.DifferentiableMultivariateFunction},OrdinaryDiffEq.DEOptions{Float64,Float64,Float64,Float64,DiffEqBase.#ODE_DEFAULT_NORM,DiffEqBase.CallbackSet{Tuple{},Tuple{}},DiffEqBase.#ODE_DEFAULT_ISOUTOFDOMAIN,DiffEqBase.#ODE_DEFAULT_PROG_MESSAGE,DiffEqBase.#ODE_DEFAULT_UNSTABLE_CHECK,DataStructures.BinaryHeap{Float64,DataStructures.LessThan},Void,Void},Array{Float64,2}}) at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/solve.jl:308
 [9] #solve#87(::Array{Any,1}, ::Function, ::DiffEqBase.ODEProblem{Array{Float64,2},Float64,true,DiffEqProblemLibrary.##5#6,Void,UniformScaling{Int64}}, ::OrdinaryDiffEq.Trapezoid{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/solve.jl:7
 [10] (::DiffEqBase.#kw##solve)(::Array{Any,1}, ::DiffEqBase.#solve, ::DiffEqBase.ODEProblem{Array{Float64,2},Float64,true,DiffEqProblemLibrary.##5#6,Void,UniformScaling{Int64}}, ::OrdinaryDiffEq.Trapezoid{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at ./<missing>:0 (repeats 2 times)
 [11] include_from_node1(::String) at ./loading.jl:552
 [12] include(::String) at ./sysimg.jl:14
 [13] macro expansion at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/test/runtests.jl:29 [inlined]
 [14] macro expansion at ./test.jl:856 [inlined]
 [15] macro expansion at ./util.jl:237 [inlined]
 [16] anonymous at ./<missing>:?
 [17] include_from_node1(::String) at ./loading.jl:552
 [18] include(::String) at ./sysimg.jl:14
 [19] process_options(::Base.JLOptions) at ./client.jl:305
 [20] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/OrdinaryDiffEq/test/ode/ode_dense_tests.jl, in expression starting on line 480
WARNING: !(B::BitArray) is deprecated, use .!(B) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] !(::BitArray{1}) at ./deprecated.jl:51
 [3] check_isfinite(::Array{Float64,1}) at /home/vagrant/.julia/v0.6/NLsolve/src/utils.jl:32
 [4] trust_region_(::NLsolve.DifferentiableMultivariateFunction, ::Array{Float64,1}, ::Float64, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::Float64, ::Bool) at /home/vagrant/.julia/v0.6/NLsolve/src/trust_region.jl:91
 [5] #nlsolve#17(::Symbol, ::Float64, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::Function, ::Float64, ::Bool, ::NLsolve.#nlsolve, ::NLsolve.DifferentiableMultivariateFunction, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/NLsolve/src/nlsolve_func_defs.jl:24
 [6] NLSOLVEJL_SETUP at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/misc_utils.jl:51 [inlined]
 [7] perform_step! at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/integrators/implicit_integrators.jl:126 [inlined]
 [8] perform_step! at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/integrators/implicit_integrators.jl:114 [inlined]
 [9] solve!(::OrdinaryDiffEq.ODEIntegrator{OrdinaryDiffEq.Trapezoid{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}},Array{Float64,2},Float64,Float64,Float64,Array{Array{Float64,2},1},DiffEqBase.ODESolution{Float64,3,Array{Array{Float64,2},1},Array{Array{Float64,2},1},Dict{Symbol,Float64},Array{Float64,1},Array{Array{Array{Float64,2},1},1},DiffEqBase.ODEProblem{Array{Float64,2},Float64,true,DiffEqProblemLibrary.##5#6,Void,UniformScaling{Int64}},OrdinaryDiffEq.Trapezoid{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}},OrdinaryDiffEq.InterpolationData{DiffEqProblemLibrary.##5#6,Array{Array{Float64,2},1},Array{Float64,1},Array{Array{Array{Float64,2},1},1},OrdinaryDiffEq.TrapezoidCache{Array{Float64,2},Array{Float64,2},Array{Float64,1},OrdinaryDiffEq.DiffCache{Float64,ForwardDiff.Dual{8,Float64}},Array{Float64,2},OrdinaryDiffEq.RHS_Trap{DiffEqProblemLibrary.##5#6,Array{Float64,2},Array{Float64,2},Float64,Tuple{Int64,Int64},OrdinaryDiffEq.DiffCache{Float64,ForwardDiff.Dual{8,Float64}},Base.OneTo{Int64}},NLsolve.DifferentiableMultivariateFunction}}},Array{Float64,2},DiffEqProblemLibrary.##5#6,Void,OrdinaryDiffEq.TrapezoidCache{Array{Float64,2},Array{Float64,2},Array{Float64,1},OrdinaryDiffEq.DiffCache{Float64,ForwardDiff.Dual{8,Float64}},Array{Float64,2},OrdinaryDiffEq.RHS_Trap{DiffEqProblemLibrary.##5#6,Array{Float64,2},Array{Float64,2},Float64,Tuple{Int64,Int64},OrdinaryDiffEq.DiffCache{Float64,ForwardDiff.Dual{8,Float64}},Base.OneTo{Int64}},NLsolve.DifferentiableMultivariateFunction},OrdinaryDiffEq.DEOptions{Float64,Float64,Float64,Float64,DiffEqBase.#ODE_DEFAULT_NORM,DiffEqBase.CallbackSet{Tuple{},Tuple{}},DiffEqBase.#ODE_DEFAULT_ISOUTOFDOMAIN,DiffEqBase.#ODE_DEFAULT_PROG_MESSAGE,DiffEqBase.#ODE_DEFAULT_UNSTABLE_CHECK,DataStructures.BinaryHeap{Float64,DataStructures.LessThan},Void,Void},Array{Float64,2}}) at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/solve.jl:308
 [10] #solve#87(::Array{Any,1}, ::Function, ::DiffEqBase.ODEProblem{Array{Float64,2},Float64,true,DiffEqProblemLibrary.##5#6,Void,UniformScaling{Int64}}, ::OrdinaryDiffEq.Trapezoid{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/solve.jl:7
 [11] (::DiffEqBase.#kw##solve)(::Array{Any,1}, ::DiffEqBase.#solve, ::DiffEqBase.ODEProblem{Array{Float64,2},Float64,true,DiffEqProblemLibrary.##5#6,Void,UniformScaling{Int64}}, ::OrdinaryDiffEq.Trapezoid{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at ./<missing>:0 (repeats 2 times)
 [12] include_from_node1(::String) at ./loading.jl:552
 [13] include(::String) at ./sysimg.jl:14
 [14] macro expansion at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/test/runtests.jl:29 [inlined]
 [15] macro expansion at ./test.jl:856 [inlined]
 [16] macro expansion at ./util.jl:237 [inlined]
 [17] anonymous at ./<missing>:?
 [18] include_from_node1(::String) at ./loading.jl:552
 [19] include(::String) at ./sysimg.jl:14
 [20] process_options(::Base.JLOptions) at ./client.jl:305
 [21] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/OrdinaryDiffEq/test/ode/ode_dense_tests.jl, in expression starting on line 480
WARNING: Array{T}(::Type{T}, m::Int) is deprecated, use Array{T}(m) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] Array(::Type{NLsolve.SolverState}, ::Int64) at ./deprecated.jl:51
 [3] Type at /home/vagrant/.julia/v0.6/NLsolve/src/solver_state_results.jl:20 [inlined]
 [4] trust_region_(::NLsolve.DifferentiableMultivariateFunction, ::Array{Float64,1}, ::Float64, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::Float64, ::Bool) at /home/vagrant/.julia/v0.6/NLsolve/src/trust_region.jl:99
 [5] #nlsolve#17(::Symbol, ::Float64, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::Function, ::Float64, ::Bool, ::NLsolve.#nlsolve, ::NLsolve.DifferentiableMultivariateFunction, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/NLsolve/src/nlsolve_func_defs.jl:24
 [6] NLSOLVEJL_SETUP at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/misc_utils.jl:51 [inlined]
 [7] perform_step! at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/integrators/implicit_integrators.jl:126 [inlined]
 [8] perform_step! at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/integrators/implicit_integrators.jl:114 [inlined]
 [9] solve!(::OrdinaryDiffEq.ODEIntegrator{OrdinaryDiffEq.Trapezoid{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}},Array{Float64,2},Float64,Float64,Float64,Array{Array{Float64,2},1},DiffEqBase.ODESolution{Float64,3,Array{Array{Float64,2},1},Array{Array{Float64,2},1},Dict{Symbol,Float64},Array{Float64,1},Array{Array{Array{Float64,2},1},1},DiffEqBase.ODEProblem{Array{Float64,2},Float64,true,DiffEqProblemLibrary.##5#6,Void,UniformScaling{Int64}},OrdinaryDiffEq.Trapezoid{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}},OrdinaryDiffEq.InterpolationData{DiffEqProblemLibrary.##5#6,Array{Array{Float64,2},1},Array{Float64,1},Array{Array{Array{Float64,2},1},1},OrdinaryDiffEq.TrapezoidCache{Array{Float64,2},Array{Float64,2},Array{Float64,1},OrdinaryDiffEq.DiffCache{Float64,ForwardDiff.Dual{8,Float64}},Array{Float64,2},OrdinaryDiffEq.RHS_Trap{DiffEqProblemLibrary.##5#6,Array{Float64,2},Array{Float64,2},Float64,Tuple{Int64,Int64},OrdinaryDiffEq.DiffCache{Float64,ForwardDiff.Dual{8,Float64}},Base.OneTo{Int64}},NLsolve.DifferentiableMultivariateFunction}}},Array{Float64,2},DiffEqProblemLibrary.##5#6,Void,OrdinaryDiffEq.TrapezoidCache{Array{Float64,2},Array{Float64,2},Array{Float64,1},OrdinaryDiffEq.DiffCache{Float64,ForwardDiff.Dual{8,Float64}},Array{Float64,2},OrdinaryDiffEq.RHS_Trap{DiffEqProblemLibrary.##5#6,Array{Float64,2},Array{Float64,2},Float64,Tuple{Int64,Int64},OrdinaryDiffEq.DiffCache{Float64,ForwardDiff.Dual{8,Float64}},Base.OneTo{Int64}},NLsolve.DifferentiableMultivariateFunction},OrdinaryDiffEq.DEOptions{Float64,Float64,Float64,Float64,DiffEqBase.#ODE_DEFAULT_NORM,DiffEqBase.CallbackSet{Tuple{},Tuple{}},DiffEqBase.#ODE_DEFAULT_ISOUTOFDOMAIN,DiffEqBase.#ODE_DEFAULT_PROG_MESSAGE,DiffEqBase.#ODE_DEFAULT_UNSTABLE_CHECK,DataStructures.BinaryHeap{Float64,DataStructures.LessThan},Void,Void},Array{Float64,2}}) at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/solve.jl:308
 [10] #solve#87(::Array{Any,1}, ::Function, ::DiffEqBase.ODEProblem{Array{Float64,2},Float64,true,DiffEqProblemLibrary.##5#6,Void,UniformScaling{Int64}}, ::OrdinaryDiffEq.Trapezoid{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/solve.jl:7
 [11] (::DiffEqBase.#kw##solve)(::Array{Any,1}, ::DiffEqBase.#solve, ::DiffEqBase.ODEProblem{Array{Float64,2},Float64,true,DiffEqProblemLibrary.##5#6,Void,UniformScaling{Int64}}, ::OrdinaryDiffEq.Trapezoid{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at ./<missing>:0 (repeats 2 times)
 [12] include_from_node1(::String) at ./loading.jl:552
 [13] include(::String) at ./sysimg.jl:14
 [14] macro expansion at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/test/runtests.jl:29 [inlined]
 [15] macro expansion at ./test.jl:856 [inlined]
 [16] macro expansion at ./util.jl:237 [inlined]
 [17] anonymous at ./<missing>:?
 [18] include_from_node1(::String) at ./loading.jl:552
 [19] include(::String) at ./sysimg.jl:14
 [20] process_options(::Base.JLOptions) at ./client.jl:305
 [21] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/OrdinaryDiffEq/test/ode/ode_dense_tests.jl, in expression starting on line 480
Test Summary: | Pass  Total
Dense Tests   |   60     60
119.341418 seconds (29.87 M allocations: 3.030 GiB, 1.66% gc time)
  0.000518 seconds (539 allocations: 50.234 KiB)
  0.000393 seconds (338 allocations: 22.719 KiB)
Test Summary:  | Pass  Total
In-Place Tests |    2      2
  9.654139 seconds (2.49 M allocations: 1.153 GiB, 16.55% gc time)
WARNING: Array{T}(::Type{T}, m::Int, n::Int) is deprecated, use Array{T}(m, n) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] Array(::Type{Float64}, ::Int64, ::Int64) at ./deprecated.jl:51
 [3] trust_region_(::NLsolve.DifferentiableMultivariateFunction, ::Array{Float64,1}, ::Float64, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::Float64, ::Bool) at /home/vagrant/.julia/v0.6/NLsolve/src/trust_region.jl:82
 [4] #nlsolve#17(::Symbol, ::Float64, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::Function, ::Float64, ::Bool, ::NLsolve.#nlsolve, ::NLsolve.DifferentiableMultivariateFunction, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/NLsolve/src/nlsolve_func_defs.jl:24
 [5] NLSOLVEJL_SETUP at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/misc_utils.jl:51 [inlined]
 [6] perform_step! at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/integrators/implicit_integrators.jl:77 [inlined]
 [7] perform_step! at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/integrators/implicit_integrators.jl:66 [inlined]
 [8] solve!(::OrdinaryDiffEq.ODEIntegrator{OrdinaryDiffEq.ImplicitEuler{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}},Array{Float64,1},Float64,Float64,Float64,Array{Array{Float64,1},1},DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Array{Array{Float64,1},1},Dict{Symbol,Float64},Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,#time_derivative,Void,UniformScaling{Int64}},OrdinaryDiffEq.ImplicitEuler{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}},OrdinaryDiffEq.InterpolationData{#time_derivative,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.ImplicitEulerCache{Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.DiffCache{Float64,ForwardDiff.Dual{1,Float64}},Array{Float64,1},OrdinaryDiffEq.RHS_IE{#time_derivative,Array{Float64,1},Float64,OrdinaryDiffEq.DiffCache{Float64,ForwardDiff.Dual{1,Float64}},Tuple{Int64},Base.OneTo{Int64}},NLsolve.DifferentiableMultivariateFunction}}},Array{Float64,1},#time_derivative,Void,OrdinaryDiffEq.ImplicitEulerCache{Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.DiffCache{Float64,ForwardDiff.Dual{1,Float64}},Array{Float64,1},OrdinaryDiffEq.RHS_IE{#time_derivative,Array{Float64,1},Float64,OrdinaryDiffEq.DiffCache{Float64,ForwardDiff.Dual{1,Float64}},Tuple{Int64},Base.OneTo{Int64}},NLsolve.DifferentiableMultivariateFunction},OrdinaryDiffEq.DEOptions{Float64,Float64,Float64,Float64,DiffEqBase.#ODE_DEFAULT_NORM,DiffEqBase.CallbackSet{Tuple{},Tuple{}},DiffEqBase.#ODE_DEFAULT_ISOUTOFDOMAIN,DiffEqBase.#ODE_DEFAULT_PROG_MESSAGE,DiffEqBase.#ODE_DEFAULT_UNSTABLE_CHECK,DataStructures.BinaryHeap{Float64,DataStructures.LessThan},Void,Void},Array{Float64,1}}) at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/solve.jl:308
 [9] #solve#87(::Array{Any,1}, ::Function, ::DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,#time_derivative,Void,UniformScaling{Int64}}, ::OrdinaryDiffEq.ImplicitEuler{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/solve.jl:7
 [10] (::DiffEqBase.#kw##solve)(::Array{Any,1}, ::DiffEqBase.#solve, ::DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,#time_derivative,Void,UniformScaling{Int64}}, ::OrdinaryDiffEq.ImplicitEuler{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at ./<missing>:0 (repeats 2 times)
 [11] include_from_node1(::String) at ./loading.jl:552
 [12] include(::String) at ./sysimg.jl:14
 [13] macro expansion at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/test/runtests.jl:31 [inlined]
 [14] macro expansion at ./test.jl:856 [inlined]
 [15] macro expansion at ./util.jl:237 [inlined]
 [16] anonymous at ./<missing>:?
 [17] include_from_node1(::String) at ./loading.jl:552
 [18] include(::String) at ./sysimg.jl:14
 [19] process_options(::Base.JLOptions) at ./client.jl:305
 [20] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/OrdinaryDiffEq/test/time_derivative_test.jl, in expression starting on line 17
WARNING: !(B::BitArray) is deprecated, use .!(B) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] !(::BitArray{1}) at ./deprecated.jl:51
 [3] check_isfinite(::Array{Float64,1}) at /home/vagrant/.julia/v0.6/NLsolve/src/utils.jl:32
 [4] trust_region_(::NLsolve.DifferentiableMultivariateFunction, ::Array{Float64,1}, ::Float64, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::Float64, ::Bool) at /home/vagrant/.julia/v0.6/NLsolve/src/trust_region.jl:91
 [5] #nlsolve#17(::Symbol, ::Float64, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::Function, ::Float64, ::Bool, ::NLsolve.#nlsolve, ::NLsolve.DifferentiableMultivariateFunction, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/NLsolve/src/nlsolve_func_defs.jl:24
 [6] NLSOLVEJL_SETUP at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/misc_utils.jl:51 [inlined]
 [7] perform_step! at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/integrators/implicit_integrators.jl:77 [inlined]
 [8] perform_step! at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/integrators/implicit_integrators.jl:66 [inlined]
 [9] solve!(::OrdinaryDiffEq.ODEIntegrator{OrdinaryDiffEq.ImplicitEuler{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}},Array{Float64,1},Float64,Float64,Float64,Array{Array{Float64,1},1},DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Array{Array{Float64,1},1},Dict{Symbol,Float64},Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,#time_derivative,Void,UniformScaling{Int64}},OrdinaryDiffEq.ImplicitEuler{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}},OrdinaryDiffEq.InterpolationData{#time_derivative,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.ImplicitEulerCache{Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.DiffCache{Float64,ForwardDiff.Dual{1,Float64}},Array{Float64,1},OrdinaryDiffEq.RHS_IE{#time_derivative,Array{Float64,1},Float64,OrdinaryDiffEq.DiffCache{Float64,ForwardDiff.Dual{1,Float64}},Tuple{Int64},Base.OneTo{Int64}},NLsolve.DifferentiableMultivariateFunction}}},Array{Float64,1},#time_derivative,Void,OrdinaryDiffEq.ImplicitEulerCache{Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.DiffCache{Float64,ForwardDiff.Dual{1,Float64}},Array{Float64,1},OrdinaryDiffEq.RHS_IE{#time_derivative,Array{Float64,1},Float64,OrdinaryDiffEq.DiffCache{Float64,ForwardDiff.Dual{1,Float64}},Tuple{Int64},Base.OneTo{Int64}},NLsolve.DifferentiableMultivariateFunction},OrdinaryDiffEq.DEOptions{Float64,Float64,Float64,Float64,DiffEqBase.#ODE_DEFAULT_NORM,DiffEqBase.CallbackSet{Tuple{},Tuple{}},DiffEqBase.#ODE_DEFAULT_ISOUTOFDOMAIN,DiffEqBase.#ODE_DEFAULT_PROG_MESSAGE,DiffEqBase.#ODE_DEFAULT_UNSTABLE_CHECK,DataStructures.BinaryHeap{Float64,DataStructures.LessThan},Void,Void},Array{Float64,1}}) at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/solve.jl:308
 [10] #solve#87(::Array{Any,1}, ::Function, ::DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,#time_derivative,Void,UniformScaling{Int64}}, ::OrdinaryDiffEq.ImplicitEuler{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/solve.jl:7
 [11] (::DiffEqBase.#kw##solve)(::Array{Any,1}, ::DiffEqBase.#solve, ::DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,#time_derivative,Void,UniformScaling{Int64}}, ::OrdinaryDiffEq.ImplicitEuler{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at ./<missing>:0 (repeats 2 times)
 [12] include_from_node1(::String) at ./loading.jl:552
 [13] include(::String) at ./sysimg.jl:14
 [14] macro expansion at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/test/runtests.jl:31 [inlined]
 [15] macro expansion at ./test.jl:856 [inlined]
 [16] macro expansion at ./util.jl:237 [inlined]
 [17] anonymous at ./<missing>:?
 [18] include_from_node1(::String) at ./loading.jl:552
 [19] include(::String) at ./sysimg.jl:14
 [20] process_options(::Base.JLOptions) at ./client.jl:305
 [21] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/OrdinaryDiffEq/test/time_derivative_test.jl, in expression starting on line 17
WARNING: Array{T}(::Type{T}, m::Int) is deprecated, use Array{T}(m) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] Array(::Type{NLsolve.SolverState}, ::Int64) at ./deprecated.jl:51
 [3] Type at /home/vagrant/.julia/v0.6/NLsolve/src/solver_state_results.jl:20 [inlined]
 [4] trust_region_(::NLsolve.DifferentiableMultivariateFunction, ::Array{Float64,1}, ::Float64, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::Float64, ::Bool) at /home/vagrant/.julia/v0.6/NLsolve/src/trust_region.jl:99
 [5] #nlsolve#17(::Symbol, ::Float64, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::Function, ::Float64, ::Bool, ::NLsolve.#nlsolve, ::NLsolve.DifferentiableMultivariateFunction, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/NLsolve/src/nlsolve_func_defs.jl:24
 [6] NLSOLVEJL_SETUP at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/misc_utils.jl:51 [inlined]
 [7] perform_step! at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/integrators/implicit_integrators.jl:77 [inlined]
 [8] perform_step! at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/integrators/implicit_integrators.jl:66 [inlined]
 [9] solve!(::OrdinaryDiffEq.ODEIntegrator{OrdinaryDiffEq.ImplicitEuler{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}},Array{Float64,1},Float64,Float64,Float64,Array{Array{Float64,1},1},DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Array{Array{Float64,1},1},Dict{Symbol,Float64},Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,#time_derivative,Void,UniformScaling{Int64}},OrdinaryDiffEq.ImplicitEuler{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}},OrdinaryDiffEq.InterpolationData{#time_derivative,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.ImplicitEulerCache{Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.DiffCache{Float64,ForwardDiff.Dual{1,Float64}},Array{Float64,1},OrdinaryDiffEq.RHS_IE{#time_derivative,Array{Float64,1},Float64,OrdinaryDiffEq.DiffCache{Float64,ForwardDiff.Dual{1,Float64}},Tuple{Int64},Base.OneTo{Int64}},NLsolve.DifferentiableMultivariateFunction}}},Array{Float64,1},#time_derivative,Void,OrdinaryDiffEq.ImplicitEulerCache{Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.DiffCache{Float64,ForwardDiff.Dual{1,Float64}},Array{Float64,1},OrdinaryDiffEq.RHS_IE{#time_derivative,Array{Float64,1},Float64,OrdinaryDiffEq.DiffCache{Float64,ForwardDiff.Dual{1,Float64}},Tuple{Int64},Base.OneTo{Int64}},NLsolve.DifferentiableMultivariateFunction},OrdinaryDiffEq.DEOptions{Float64,Float64,Float64,Float64,DiffEqBase.#ODE_DEFAULT_NORM,DiffEqBase.CallbackSet{Tuple{},Tuple{}},DiffEqBase.#ODE_DEFAULT_ISOUTOFDOMAIN,DiffEqBase.#ODE_DEFAULT_PROG_MESSAGE,DiffEqBase.#ODE_DEFAULT_UNSTABLE_CHECK,DataStructures.BinaryHeap{Float64,DataStructures.LessThan},Void,Void},Array{Float64,1}}) at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/solve.jl:308
 [10] #solve#87(::Array{Any,1}, ::Function, ::DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,#time_derivative,Void,UniformScaling{Int64}}, ::OrdinaryDiffEq.ImplicitEuler{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/solve.jl:7
 [11] (::DiffEqBase.#kw##solve)(::Array{Any,1}, ::DiffEqBase.#solve, ::DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,#time_derivative,Void,UniformScaling{Int64}}, ::OrdinaryDiffEq.ImplicitEuler{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at ./<missing>:0 (repeats 2 times)
 [12] include_from_node1(::String) at ./loading.jl:552
 [13] include(::String) at ./sysimg.jl:14
 [14] macro expansion at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/test/runtests.jl:31 [inlined]
 [15] macro expansion at ./test.jl:856 [inlined]
 [16] macro expansion at ./util.jl:237 [inlined]
 [17] anonymous at ./<missing>:?
 [18] include_from_node1(::String) at ./loading.jl:552
 [19] include(::String) at ./sysimg.jl:14
 [20] process_options(::Base.JLOptions) at ./client.jl:305
 [21] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/OrdinaryDiffEq/test/time_derivative_test.jl, in expression starting on line 17
WARNING: Array{T}(::Type{T}, m::Int, n::Int) is deprecated, use Array{T}(m, n) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] Array(::Type{Float64}, ::Int64, ::Int64) at ./deprecated.jl:51
 [3] trust_region_(::NLsolve.DifferentiableMultivariateFunction, ::Array{Float64,1}, ::Float64, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::Float64, ::Bool) at /home/vagrant/.julia/v0.6/NLsolve/src/trust_region.jl:82
 [4] #nlsolve#17(::Symbol, ::Float64, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::Function, ::Float64, ::Bool, ::NLsolve.#nlsolve, ::NLsolve.DifferentiableMultivariateFunction, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/NLsolve/src/nlsolve_func_defs.jl:24
 [5] NLSOLVEJL_SETUP at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/misc_utils.jl:51 [inlined]
 [6] perform_step! at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/integrators/implicit_integrators.jl:126 [inlined]
 [7] perform_step! at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/integrators/implicit_integrators.jl:114 [inlined]
 [8] solve!(::OrdinaryDiffEq.ODEIntegrator{OrdinaryDiffEq.Trapezoid{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}},Array{Float64,1},Float64,Float64,Float64,Array{Array{Float64,1},1},DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Array{Array{Float64,1},1},Dict{Symbol,Float64},Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,#time_derivative,Void,UniformScaling{Int64}},OrdinaryDiffEq.Trapezoid{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}},OrdinaryDiffEq.InterpolationData{#time_derivative,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.TrapezoidCache{Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.DiffCache{Float64,ForwardDiff.Dual{1,Float64}},Array{Float64,1},OrdinaryDiffEq.RHS_Trap{#time_derivative,Array{Float64,1},Array{Float64,1},Float64,Tuple{Int64},OrdinaryDiffEq.DiffCache{Float64,ForwardDiff.Dual{1,Float64}},Base.OneTo{Int64}},NLsolve.DifferentiableMultivariateFunction}}},Array{Float64,1},#time_derivative,Void,OrdinaryDiffEq.TrapezoidCache{Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.DiffCache{Float64,ForwardDiff.Dual{1,Float64}},Array{Float64,1},OrdinaryDiffEq.RHS_Trap{#time_derivative,Array{Float64,1},Array{Float64,1},Float64,Tuple{Int64},OrdinaryDiffEq.DiffCache{Float64,ForwardDiff.Dual{1,Float64}},Base.OneTo{Int64}},NLsolve.DifferentiableMultivariateFunction},OrdinaryDiffEq.DEOptions{Float64,Float64,Float64,Float64,DiffEqBase.#ODE_DEFAULT_NORM,DiffEqBase.CallbackSet{Tuple{},Tuple{}},DiffEqBase.#ODE_DEFAULT_ISOUTOFDOMAIN,DiffEqBase.#ODE_DEFAULT_PROG_MESSAGE,DiffEqBase.#ODE_DEFAULT_UNSTABLE_CHECK,DataStructures.BinaryHeap{Float64,DataStructures.LessThan},Void,Void},Array{Float64,1}}) at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/solve.jl:308
 [9] #solve#87(::Array{Any,1}, ::Function, ::DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,#time_derivative,Void,UniformScaling{Int64}}, ::OrdinaryDiffEq.Trapezoid{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/solve.jl:7
 [10] (::DiffEqBase.#kw##solve)(::Array{Any,1}, ::DiffEqBase.#solve, ::DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,#time_derivative,Void,UniformScaling{Int64}}, ::OrdinaryDiffEq.Trapezoid{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at ./<missing>:0 (repeats 2 times)
 [11] include_from_node1(::String) at ./loading.jl:552
 [12] include(::String) at ./sysimg.jl:14
 [13] macro expansion at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/test/runtests.jl:31 [inlined]
 [14] macro expansion at ./test.jl:856 [inlined]
 [15] macro expansion at ./util.jl:237 [inlined]
 [16] anonymous at ./<missing>:?
 [17] include_from_node1(::String) at ./loading.jl:552
 [18] include(::String) at ./sysimg.jl:14
 [19] process_options(::Base.JLOptions) at ./client.jl:305
 [20] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/OrdinaryDiffEq/test/time_derivative_test.jl, in expression starting on line 19
WARNING: !(B::BitArray) is deprecated, use .!(B) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] !(::BitArray{1}) at ./deprecated.jl:51
 [3] check_isfinite(::Array{Float64,1}) at /home/vagrant/.julia/v0.6/NLsolve/src/utils.jl:32
 [4] trust_region_(::NLsolve.DifferentiableMultivariateFunction, ::Array{Float64,1}, ::Float64, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::Float64, ::Bool) at /home/vagrant/.julia/v0.6/NLsolve/src/trust_region.jl:91
 [5] #nlsolve#17(::Symbol, ::Float64, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::Function, ::Float64, ::Bool, ::NLsolve.#nlsolve, ::NLsolve.DifferentiableMultivariateFunction, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/NLsolve/src/nlsolve_func_defs.jl:24
 [6] NLSOLVEJL_SETUP at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/misc_utils.jl:51 [inlined]
 [7] perform_step! at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/integrators/implicit_integrators.jl:126 [inlined]
 [8] perform_step! at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/integrators/implicit_integrators.jl:114 [inlined]
 [9] solve!(::OrdinaryDiffEq.ODEIntegrator{OrdinaryDiffEq.Trapezoid{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}},Array{Float64,1},Float64,Float64,Float64,Array{Array{Float64,1},1},DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Array{Array{Float64,1},1},Dict{Symbol,Float64},Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,#time_derivative,Void,UniformScaling{Int64}},OrdinaryDiffEq.Trapezoid{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}},OrdinaryDiffEq.InterpolationData{#time_derivative,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.TrapezoidCache{Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.DiffCache{Float64,ForwardDiff.Dual{1,Float64}},Array{Float64,1},OrdinaryDiffEq.RHS_Trap{#time_derivative,Array{Float64,1},Array{Float64,1},Float64,Tuple{Int64},OrdinaryDiffEq.DiffCache{Float64,ForwardDiff.Dual{1,Float64}},Base.OneTo{Int64}},NLsolve.DifferentiableMultivariateFunction}}},Array{Float64,1},#time_derivative,Void,OrdinaryDiffEq.TrapezoidCache{Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.DiffCache{Float64,ForwardDiff.Dual{1,Float64}},Array{Float64,1},OrdinaryDiffEq.RHS_Trap{#time_derivative,Array{Float64,1},Array{Float64,1},Float64,Tuple{Int64},OrdinaryDiffEq.DiffCache{Float64,ForwardDiff.Dual{1,Float64}},Base.OneTo{Int64}},NLsolve.DifferentiableMultivariateFunction},OrdinaryDiffEq.DEOptions{Float64,Float64,Float64,Float64,DiffEqBase.#ODE_DEFAULT_NORM,DiffEqBase.CallbackSet{Tuple{},Tuple{}},DiffEqBase.#ODE_DEFAULT_ISOUTOFDOMAIN,DiffEqBase.#ODE_DEFAULT_PROG_MESSAGE,DiffEqBase.#ODE_DEFAULT_UNSTABLE_CHECK,DataStructures.BinaryHeap{Float64,DataStructures.LessThan},Void,Void},Array{Float64,1}}) at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/solve.jl:308
 [10] #solve#87(::Array{Any,1}, ::Function, ::DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,#time_derivative,Void,UniformScaling{Int64}}, ::OrdinaryDiffEq.Trapezoid{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/solve.jl:7
 [11] (::DiffEqBase.#kw##solve)(::Array{Any,1}, ::DiffEqBase.#solve, ::DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,#time_derivative,Void,UniformScaling{Int64}}, ::OrdinaryDiffEq.Trapezoid{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at ./<missing>:0 (repeats 2 times)
 [12] include_from_node1(::String) at ./loading.jl:552
 [13] include(::String) at ./sysimg.jl:14
 [14] macro expansion at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/test/runtests.jl:31 [inlined]
 [15] macro expansion at ./test.jl:856 [inlined]
 [16] macro expansion at ./util.jl:237 [inlined]
 [17] anonymous at ./<missing>:?
 [18] include_from_node1(::String) at ./loading.jl:552
 [19] include(::String) at ./sysimg.jl:14
 [20] process_options(::Base.JLOptions) at ./client.jl:305
 [21] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/OrdinaryDiffEq/test/time_derivative_test.jl, in expression starting on line 19
WARNING: Array{T}(::Type{T}, m::Int) is deprecated, use Array{T}(m) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] Array(::Type{NLsolve.SolverState}, ::Int64) at ./deprecated.jl:51
 [3] Type at /home/vagrant/.julia/v0.6/NLsolve/src/solver_state_results.jl:20 [inlined]
 [4] trust_region_(::NLsolve.DifferentiableMultivariateFunction, ::Array{Float64,1}, ::Float64, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::Float64, ::Bool) at /home/vagrant/.julia/v0.6/NLsolve/src/trust_region.jl:99
 [5] #nlsolve#17(::Symbol, ::Float64, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::Function, ::Float64, ::Bool, ::NLsolve.#nlsolve, ::NLsolve.DifferentiableMultivariateFunction, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/NLsolve/src/nlsolve_func_defs.jl:24
 [6] NLSOLVEJL_SETUP at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/misc_utils.jl:51 [inlined]
 [7] perform_step! at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/integrators/implicit_integrators.jl:126 [inlined]
 [8] perform_step! at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/integrators/implicit_integrators.jl:114 [inlined]
 [9] solve!(::OrdinaryDiffEq.ODEIntegrator{OrdinaryDiffEq.Trapezoid{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}},Array{Float64,1},Float64,Float64,Float64,Array{Array{Float64,1},1},DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Array{Array{Float64,1},1},Dict{Symbol,Float64},Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,#time_derivative,Void,UniformScaling{Int64}},OrdinaryDiffEq.Trapezoid{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}},OrdinaryDiffEq.InterpolationData{#time_derivative,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.TrapezoidCache{Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.DiffCache{Float64,ForwardDiff.Dual{1,Float64}},Array{Float64,1},OrdinaryDiffEq.RHS_Trap{#time_derivative,Array{Float64,1},Array{Float64,1},Float64,Tuple{Int64},OrdinaryDiffEq.DiffCache{Float64,ForwardDiff.Dual{1,Float64}},Base.OneTo{Int64}},NLsolve.DifferentiableMultivariateFunction}}},Array{Float64,1},#time_derivative,Void,OrdinaryDiffEq.TrapezoidCache{Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.DiffCache{Float64,ForwardDiff.Dual{1,Float64}},Array{Float64,1},OrdinaryDiffEq.RHS_Trap{#time_derivative,Array{Float64,1},Array{Float64,1},Float64,Tuple{Int64},OrdinaryDiffEq.DiffCache{Float64,ForwardDiff.Dual{1,Float64}},Base.OneTo{Int64}},NLsolve.DifferentiableMultivariateFunction},OrdinaryDiffEq.DEOptions{Float64,Float64,Float64,Float64,DiffEqBase.#ODE_DEFAULT_NORM,DiffEqBase.CallbackSet{Tuple{},Tuple{}},DiffEqBase.#ODE_DEFAULT_ISOUTOFDOMAIN,DiffEqBase.#ODE_DEFAULT_PROG_MESSAGE,DiffEqBase.#ODE_DEFAULT_UNSTABLE_CHECK,DataStructures.BinaryHeap{Float64,DataStructures.LessThan},Void,Void},Array{Float64,1}}) at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/solve.jl:308
 [10] #solve#87(::Array{Any,1}, ::Function, ::DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,#time_derivative,Void,UniformScaling{Int64}}, ::OrdinaryDiffEq.Trapezoid{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/solve.jl:7
 [11] (::DiffEqBase.#kw##solve)(::Array{Any,1}, ::DiffEqBase.#solve, ::DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,#time_derivative,Void,UniformScaling{Int64}}, ::OrdinaryDiffEq.Trapezoid{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at ./<missing>:0 (repeats 2 times)
 [12] include_from_node1(::String) at ./loading.jl:552
 [13] include(::String) at ./sysimg.jl:14
 [14] macro expansion at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/test/runtests.jl:31 [inlined]
 [15] macro expansion at ./test.jl:856 [inlined]
 [16] macro expansion at ./util.jl:237 [inlined]
 [17] anonymous at ./<missing>:?
 [18] include_from_node1(::String) at ./loading.jl:552
 [19] include(::String) at ./sysimg.jl:14
 [20] process_options(::Base.JLOptions) at ./client.jl:305
 [21] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/OrdinaryDiffEq/test/time_derivative_test.jl, in expression starting on line 19
Test Summary:         | Pass  Total
Time Derivative Tests |   25     25
 79.439948 seconds (23.42 M allocations: 3.139 GiB, 2.38% gc time)
Test Summary: | Pass  Total
Events Tests  |    9      9
 45.860712 seconds (15.66 M allocations: 1.742 GiB, 2.73% gc time)
WARNING: Array{T}(::Type{T}, m::Int, n::Int) is deprecated, use Array{T}(m, n) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] Array(::Type{Float64}, ::Int64, ::Int64) at ./deprecated.jl:51
 [3] trust_region_(::NLsolve.DifferentiableMultivariateFunction, ::Array{Float64,1}, ::Float64, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::Float64, ::Bool) at /home/vagrant/.julia/v0.6/NLsolve/src/trust_region.jl:82
 [4] #nlsolve#17(::Symbol, ::Float64, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::Function, ::Float64, ::Bool, ::NLsolve.#nlsolve, ::NLsolve.DifferentiableMultivariateFunction, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/NLsolve/src/nlsolve_func_defs.jl:24
 [5] NLSOLVEJL_SETUP at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/misc_utils.jl:51 [inlined]
 [6] perform_step! at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/integrators/implicit_integrators.jl:77 [inlined]
 [7] perform_step! at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/integrators/implicit_integrators.jl:66 [inlined]
 [8] solve!(::OrdinaryDiffEq.ODEIntegrator{OrdinaryDiffEq.ImplicitEuler{OrdinaryDiffEq.NLSOLVEJL_SETUP{1,true}},Array{Float64,1},Float64,Float64,Float64,Array{Array{Float64,1},1},DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,##187#188,Void,UniformScaling{Int64}},OrdinaryDiffEq.ImplicitEuler{OrdinaryDiffEq.NLSOLVEJL_SETUP{1,true}},OrdinaryDiffEq.InterpolationData{##187#188,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.ImplicitEulerCache{Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.DiffCache{Float64,ForwardDiff.Dual{1,Float64}},Array{Float64,1},OrdinaryDiffEq.RHS_IE{##187#188,Array{Float64,1},Float64,OrdinaryDiffEq.DiffCache{Float64,ForwardDiff.Dual{1,Float64}},Tuple{Int64},Base.OneTo{Int64}},NLsolve.DifferentiableMultivariateFunction}}},Array{Float64,1},##187#188,Void,OrdinaryDiffEq.ImplicitEulerCache{Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.DiffCache{Float64,ForwardDiff.Dual{1,Float64}},Array{Float64,1},OrdinaryDiffEq.RHS_IE{##187#188,Array{Float64,1},Float64,OrdinaryDiffEq.DiffCache{Float64,ForwardDiff.Dual{1,Float64}},Tuple{Int64},Base.OneTo{Int64}},NLsolve.DifferentiableMultivariateFunction},OrdinaryDiffEq.DEOptions{Float64,Float64,Float64,Float64,DiffEqBase.#ODE_DEFAULT_NORM,DiffEqBase.CallbackSet{Tuple{DiffEqBase.ContinuousCallback{##189#190,##191#192,##191#192,DiffEqBase.#INITIALIZE_DEFAULT,Float64,Int64,Void}},Tuple{}},DiffEqBase.#ODE_DEFAULT_ISOUTOFDOMAIN,DiffEqBase.#ODE_DEFAULT_PROG_MESSAGE,DiffEqBase.#ODE_DEFAULT_UNSTABLE_CHECK,DataStructures.BinaryHeap{Float64,DataStructures.LessThan},Void,Void},Array{Float64,1}}) at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/solve.jl:308
 [9] #solve#87(::Array{Any,1}, ::Function, ::DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,##187#188,Void,UniformScaling{Int64}}, ::OrdinaryDiffEq.ImplicitEuler{OrdinaryDiffEq.NLSOLVEJL_SETUP{1,true}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/solve.jl:7
 [10] (::DiffEqBase.#kw##solve)(::Array{Any,1}, ::DiffEqBase.#solve, ::DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,##187#188,Void,UniformScaling{Int64}}, ::OrdinaryDiffEq.ImplicitEuler{OrdinaryDiffEq.NLSOLVEJL_SETUP{1,true}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at ./<missing>:0 (repeats 2 times)
 [11] include_from_node1(::String) at ./loading.jl:552
 [12] include(::String) at ./sysimg.jl:14
 [13] macro expansion at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/test/runtests.jl:33 [inlined]
 [14] macro expansion at ./test.jl:856 [inlined]
 [15] macro expansion at ./util.jl:237 [inlined]
 [16] anonymous at ./<missing>:?
 [17] include_from_node1(::String) at ./loading.jl:552
 [18] include(::String) at ./sysimg.jl:14
 [19] process_options(::Base.JLOptions) at ./client.jl:305
 [20] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/OrdinaryDiffEq/test/ode/ode_cache_tests.jl, in expression starting on line 35
WARNING: !(B::BitArray) is deprecated, use .!(B) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] !(::BitArray{1}) at ./deprecated.jl:51
 [3] check_isfinite(::Array{Float64,1}) at /home/vagrant/.julia/v0.6/NLsolve/src/utils.jl:32
 [4] trust_region_(::NLsolve.DifferentiableMultivariateFunction, ::Array{Float64,1}, ::Float64, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::Float64, ::Bool) at /home/vagrant/.julia/v0.6/NLsolve/src/trust_region.jl:91
 [5] #nlsolve#17(::Symbol, ::Float64, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::Function, ::Float64, ::Bool, ::NLsolve.#nlsolve, ::NLsolve.DifferentiableMultivariateFunction, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/NLsolve/src/nlsolve_func_defs.jl:24
 [6] NLSOLVEJL_SETUP at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/misc_utils.jl:51 [inlined]
 [7] perform_step! at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/integrators/implicit_integrators.jl:77 [inlined]
 [8] perform_step! at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/integrators/implicit_integrators.jl:66 [inlined]
 [9] solve!(::OrdinaryDiffEq.ODEIntegrator{OrdinaryDiffEq.ImplicitEuler{OrdinaryDiffEq.NLSOLVEJL_SETUP{1,true}},Array{Float64,1},Float64,Float64,Float64,Array{Array{Float64,1},1},DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,##187#188,Void,UniformScaling{Int64}},OrdinaryDiffEq.ImplicitEuler{OrdinaryDiffEq.NLSOLVEJL_SETUP{1,true}},OrdinaryDiffEq.InterpolationData{##187#188,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.ImplicitEulerCache{Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.DiffCache{Float64,ForwardDiff.Dual{1,Float64}},Array{Float64,1},OrdinaryDiffEq.RHS_IE{##187#188,Array{Float64,1},Float64,OrdinaryDiffEq.DiffCache{Float64,ForwardDiff.Dual{1,Float64}},Tuple{Int64},Base.OneTo{Int64}},NLsolve.DifferentiableMultivariateFunction}}},Array{Float64,1},##187#188,Void,OrdinaryDiffEq.ImplicitEulerCache{Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.DiffCache{Float64,ForwardDiff.Dual{1,Float64}},Array{Float64,1},OrdinaryDiffEq.RHS_IE{##187#188,Array{Float64,1},Float64,OrdinaryDiffEq.DiffCache{Float64,ForwardDiff.Dual{1,Float64}},Tuple{Int64},Base.OneTo{Int64}},NLsolve.DifferentiableMultivariateFunction},OrdinaryDiffEq.DEOptions{Float64,Float64,Float64,Float64,DiffEqBase.#ODE_DEFAULT_NORM,DiffEqBase.CallbackSet{Tuple{DiffEqBase.ContinuousCallback{##189#190,##191#192,##191#192,DiffEqBase.#INITIALIZE_DEFAULT,Float64,Int64,Void}},Tuple{}},DiffEqBase.#ODE_DEFAULT_ISOUTOFDOMAIN,DiffEqBase.#ODE_DEFAULT_PROG_MESSAGE,DiffEqBase.#ODE_DEFAULT_UNSTABLE_CHECK,DataStructures.BinaryHeap{Float64,DataStructures.LessThan},Void,Void},Array{Float64,1}}) at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/solve.jl:308
 [10] #solve#87(::Array{Any,1}, ::Function, ::DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,##187#188,Void,UniformScaling{Int64}}, ::OrdinaryDiffEq.ImplicitEuler{OrdinaryDiffEq.NLSOLVEJL_SETUP{1,true}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/solve.jl:7
 [11] (::DiffEqBase.#kw##solve)(::Array{Any,1}, ::DiffEqBase.#solve, ::DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,##187#188,Void,UniformScaling{Int64}}, ::OrdinaryDiffEq.ImplicitEuler{OrdinaryDiffEq.NLSOLVEJL_SETUP{1,true}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at ./<missing>:0 (repeats 2 times)
 [12] include_from_node1(::String) at ./loading.jl:552
 [13] include(::String) at ./sysimg.jl:14
 [14] macro expansion at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/test/runtests.jl:33 [inlined]
 [15] macro expansion at ./test.jl:856 [inlined]
 [16] macro expansion at ./util.jl:237 [inlined]
 [17] anonymous at ./<missing>:?
 [18] include_from_node1(::String) at ./loading.jl:552
 [19] include(::String) at ./sysimg.jl:14
 [20] process_options(::Base.JLOptions) at ./client.jl:305
 [21] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/OrdinaryDiffEq/test/ode/ode_cache_tests.jl, in expression starting on line 35
WARNING: Array{T}(::Type{T}, m::Int) is deprecated, use Array{T}(m) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] Array(::Type{NLsolve.SolverState}, ::Int64) at ./deprecated.jl:51
 [3] Type at /home/vagrant/.julia/v0.6/NLsolve/src/solver_state_results.jl:20 [inlined]
 [4] trust_region_(::NLsolve.DifferentiableMultivariateFunction, ::Array{Float64,1}, ::Float64, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::Float64, ::Bool) at /home/vagrant/.julia/v0.6/NLsolve/src/trust_region.jl:99
 [5] #nlsolve#17(::Symbol, ::Float64, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::Function, ::Float64, ::Bool, ::NLsolve.#nlsolve, ::NLsolve.DifferentiableMultivariateFunction, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/NLsolve/src/nlsolve_func_defs.jl:24
 [6] NLSOLVEJL_SETUP at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/misc_utils.jl:51 [inlined]
 [7] perform_step! at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/integrators/implicit_integrators.jl:77 [inlined]
 [8] perform_step! at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/integrators/implicit_integrators.jl:66 [inlined]
 [9] solve!(::OrdinaryDiffEq.ODEIntegrator{OrdinaryDiffEq.ImplicitEuler{OrdinaryDiffEq.NLSOLVEJL_SETUP{1,true}},Array{Float64,1},Float64,Float64,Float64,Array{Array{Float64,1},1},DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,##187#188,Void,UniformScaling{Int64}},OrdinaryDiffEq.ImplicitEuler{OrdinaryDiffEq.NLSOLVEJL_SETUP{1,true}},OrdinaryDiffEq.InterpolationData{##187#188,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.ImplicitEulerCache{Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.DiffCache{Float64,ForwardDiff.Dual{1,Float64}},Array{Float64,1},OrdinaryDiffEq.RHS_IE{##187#188,Array{Float64,1},Float64,OrdinaryDiffEq.DiffCache{Float64,ForwardDiff.Dual{1,Float64}},Tuple{Int64},Base.OneTo{Int64}},NLsolve.DifferentiableMultivariateFunction}}},Array{Float64,1},##187#188,Void,OrdinaryDiffEq.ImplicitEulerCache{Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.DiffCache{Float64,ForwardDiff.Dual{1,Float64}},Array{Float64,1},OrdinaryDiffEq.RHS_IE{##187#188,Array{Float64,1},Float64,OrdinaryDiffEq.DiffCache{Float64,ForwardDiff.Dual{1,Float64}},Tuple{Int64},Base.OneTo{Int64}},NLsolve.DifferentiableMultivariateFunction},OrdinaryDiffEq.DEOptions{Float64,Float64,Float64,Float64,DiffEqBase.#ODE_DEFAULT_NORM,DiffEqBase.CallbackSet{Tuple{DiffEqBase.ContinuousCallback{##189#190,##191#192,##191#192,DiffEqBase.#INITIALIZE_DEFAULT,Float64,Int64,Void}},Tuple{}},DiffEqBase.#ODE_DEFAULT_ISOUTOFDOMAIN,DiffEqBase.#ODE_DEFAULT_PROG_MESSAGE,DiffEqBase.#ODE_DEFAULT_UNSTABLE_CHECK,DataStructures.BinaryHeap{Float64,DataStructures.LessThan},Void,Void},Array{Float64,1}}) at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/solve.jl:308
 [10] #solve#87(::Array{Any,1}, ::Function, ::DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,##187#188,Void,UniformScaling{Int64}}, ::OrdinaryDiffEq.ImplicitEuler{OrdinaryDiffEq.NLSOLVEJL_SETUP{1,true}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/solve.jl:7
 [11] (::DiffEqBase.#kw##solve)(::Array{Any,1}, ::DiffEqBase.#solve, ::DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,##187#188,Void,UniformScaling{Int64}}, ::OrdinaryDiffEq.ImplicitEuler{OrdinaryDiffEq.NLSOLVEJL_SETUP{1,true}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at ./<missing>:0 (repeats 2 times)
 [12] include_from_node1(::String) at ./loading.jl:552
 [13] include(::String) at ./sysimg.jl:14
 [14] macro expansion at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/test/runtests.jl:33 [inlined]
 [15] macro expansion at ./test.jl:856 [inlined]
 [16] macro expansion at ./util.jl:237 [inlined]
 [17] anonymous at ./<missing>:?
 [18] include_from_node1(::String) at ./loading.jl:552
 [19] include(::String) at ./sysimg.jl:14
 [20] process_options(::Base.JLOptions) at ./client.jl:305
 [21] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/OrdinaryDiffEq/test/ode/ode_cache_tests.jl, in expression starting on line 35
WARNING: Array{T}(::Type{T}, m::Int, n::Int) is deprecated, use Array{T}(m, n) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] Array(::Type{Float64}, ::Int64, ::Int64) at ./deprecated.jl:51
 [3] trust_region_(::NLsolve.DifferentiableMultivariateFunction, ::Array{Float64,1}, ::Float64, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::Float64, ::Bool) at /home/vagrant/.julia/v0.6/NLsolve/src/trust_region.jl:82
 [4] #nlsolve#17(::Symbol, ::Float64, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::Function, ::Float64, ::Bool, ::NLsolve.#nlsolve, ::NLsolve.DifferentiableMultivariateFunction, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/NLsolve/src/nlsolve_func_defs.jl:24
 [5] NLSOLVEJL_SETUP at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/misc_utils.jl:51 [inlined]
 [6] perform_step! at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/integrators/implicit_integrators.jl:126 [inlined]
 [7] perform_step! at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/integrators/implicit_integrators.jl:114 [inlined]
 [8] solve!(::OrdinaryDiffEq.ODEIntegrator{OrdinaryDiffEq.Trapezoid{OrdinaryDiffEq.NLSOLVEJL_SETUP{1,true}},Array{Float64,1},Float64,Float64,Float64,Array{Array{Float64,1},1},DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,##187#188,Void,UniformScaling{Int64}},OrdinaryDiffEq.Trapezoid{OrdinaryDiffEq.NLSOLVEJL_SETUP{1,true}},OrdinaryDiffEq.InterpolationData{##187#188,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.TrapezoidCache{Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.DiffCache{Float64,ForwardDiff.Dual{1,Float64}},Array{Float64,1},OrdinaryDiffEq.RHS_Trap{##187#188,Array{Float64,1},Array{Float64,1},Float64,Tuple{Int64},OrdinaryDiffEq.DiffCache{Float64,ForwardDiff.Dual{1,Float64}},Base.OneTo{Int64}},NLsolve.DifferentiableMultivariateFunction}}},Array{Float64,1},##187#188,Void,OrdinaryDiffEq.TrapezoidCache{Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.DiffCache{Float64,ForwardDiff.Dual{1,Float64}},Array{Float64,1},OrdinaryDiffEq.RHS_Trap{##187#188,Array{Float64,1},Array{Float64,1},Float64,Tuple{Int64},OrdinaryDiffEq.DiffCache{Float64,ForwardDiff.Dual{1,Float64}},Base.OneTo{Int64}},NLsolve.DifferentiableMultivariateFunction},OrdinaryDiffEq.DEOptions{Float64,Float64,Float64,Float64,DiffEqBase.#ODE_DEFAULT_NORM,DiffEqBase.CallbackSet{Tuple{DiffEqBase.ContinuousCallback{##189#190,##191#192,##191#192,DiffEqBase.#INITIALIZE_DEFAULT,Float64,Int64,Void}},Tuple{}},DiffEqBase.#ODE_DEFAULT_ISOUTOFDOMAIN,DiffEqBase.#ODE_DEFAULT_PROG_MESSAGE,DiffEqBase.#ODE_DEFAULT_UNSTABLE_CHECK,DataStructures.BinaryHeap{Float64,DataStructures.LessThan},Void,Void},Array{Float64,1}}) at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/solve.jl:308
 [9] #solve#87(::Array{Any,1}, ::Function, ::DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,##187#188,Void,UniformScaling{Int64}}, ::OrdinaryDiffEq.Trapezoid{OrdinaryDiffEq.NLSOLVEJL_SETUP{1,true}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/solve.jl:7
 [10] (::DiffEqBase.#kw##solve)(::Array{Any,1}, ::DiffEqBase.#solve, ::DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,##187#188,Void,UniformScaling{Int64}}, ::OrdinaryDiffEq.Trapezoid{OrdinaryDiffEq.NLSOLVEJL_SETUP{1,true}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at ./<missing>:0 (repeats 2 times)
 [11] include_from_node1(::String) at ./loading.jl:552
 [12] include(::String) at ./sysimg.jl:14
 [13] macro expansion at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/test/runtests.jl:33 [inlined]
 [14] macro expansion at ./test.jl:856 [inlined]
 [15] macro expansion at ./util.jl:237 [inlined]
 [16] anonymous at ./<missing>:?
 [17] include_from_node1(::String) at ./loading.jl:552
 [18] include(::String) at ./sysimg.jl:14
 [19] process_options(::Base.JLOptions) at ./client.jl:305
 [20] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/OrdinaryDiffEq/test/ode/ode_cache_tests.jl, in expression starting on line 37
WARNING: !(B::BitArray) is deprecated, use .!(B) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] !(::BitArray{1}) at ./deprecated.jl:51
 [3] check_isfinite(::Array{Float64,1}) at /home/vagrant/.julia/v0.6/NLsolve/src/utils.jl:32
 [4] trust_region_(::NLsolve.DifferentiableMultivariateFunction, ::Array{Float64,1}, ::Float64, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::Float64, ::Bool) at /home/vagrant/.julia/v0.6/NLsolve/src/trust_region.jl:91
 [5] #nlsolve#17(::Symbol, ::Float64, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::Function, ::Float64, ::Bool, ::NLsolve.#nlsolve, ::NLsolve.DifferentiableMultivariateFunction, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/NLsolve/src/nlsolve_func_defs.jl:24
 [6] NLSOLVEJL_SETUP at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/misc_utils.jl:51 [inlined]
 [7] perform_step! at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/integrators/implicit_integrators.jl:126 [inlined]
 [8] perform_step! at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/integrators/implicit_integrators.jl:114 [inlined]
 [9] solve!(::OrdinaryDiffEq.ODEIntegrator{OrdinaryDiffEq.Trapezoid{OrdinaryDiffEq.NLSOLVEJL_SETUP{1,true}},Array{Float64,1},Float64,Float64,Float64,Array{Array{Float64,1},1},DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,##187#188,Void,UniformScaling{Int64}},OrdinaryDiffEq.Trapezoid{OrdinaryDiffEq.NLSOLVEJL_SETUP{1,true}},OrdinaryDiffEq.InterpolationData{##187#188,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.TrapezoidCache{Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.DiffCache{Float64,ForwardDiff.Dual{1,Float64}},Array{Float64,1},OrdinaryDiffEq.RHS_Trap{##187#188,Array{Float64,1},Array{Float64,1},Float64,Tuple{Int64},OrdinaryDiffEq.DiffCache{Float64,ForwardDiff.Dual{1,Float64}},Base.OneTo{Int64}},NLsolve.DifferentiableMultivariateFunction}}},Array{Float64,1},##187#188,Void,OrdinaryDiffEq.TrapezoidCache{Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.DiffCache{Float64,ForwardDiff.Dual{1,Float64}},Array{Float64,1},OrdinaryDiffEq.RHS_Trap{##187#188,Array{Float64,1},Array{Float64,1},Float64,Tuple{Int64},OrdinaryDiffEq.DiffCache{Float64,ForwardDiff.Dual{1,Float64}},Base.OneTo{Int64}},NLsolve.DifferentiableMultivariateFunction},OrdinaryDiffEq.DEOptions{Float64,Float64,Float64,Float64,DiffEqBase.#ODE_DEFAULT_NORM,DiffEqBase.CallbackSet{Tuple{DiffEqBase.ContinuousCallback{##189#190,##191#192,##191#192,DiffEqBase.#INITIALIZE_DEFAULT,Float64,Int64,Void}},Tuple{}},DiffEqBase.#ODE_DEFAULT_ISOUTOFDOMAIN,DiffEqBase.#ODE_DEFAULT_PROG_MESSAGE,DiffEqBase.#ODE_DEFAULT_UNSTABLE_CHECK,DataStructures.BinaryHeap{Float64,DataStructures.LessThan},Void,Void},Array{Float64,1}}) at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/solve.jl:308
 [10] #solve#87(::Array{Any,1}, ::Function, ::DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,##187#188,Void,UniformScaling{Int64}}, ::OrdinaryDiffEq.Trapezoid{OrdinaryDiffEq.NLSOLVEJL_SETUP{1,true}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/solve.jl:7
 [11] (::DiffEqBase.#kw##solve)(::Array{Any,1}, ::DiffEqBase.#solve, ::DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,##187#188,Void,UniformScaling{Int64}}, ::OrdinaryDiffEq.Trapezoid{OrdinaryDiffEq.NLSOLVEJL_SETUP{1,true}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at ./<missing>:0 (repeats 2 times)
 [12] include_from_node1(::String) at ./loading.jl:552
 [13] include(::String) at ./sysimg.jl:14
 [14] macro expansion at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/test/runtests.jl:33 [inlined]
 [15] macro expansion at ./test.jl:856 [inlined]
 [16] macro expansion at ./util.jl:237 [inlined]
 [17] anonymous at ./<missing>:?
 [18] include_from_node1(::String) at ./loading.jl:552
 [19] include(::String) at ./sysimg.jl:14
 [20] process_options(::Base.JLOptions) at ./client.jl:305
 [21] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/OrdinaryDiffEq/test/ode/ode_cache_tests.jl, in expression starting on line 37
WARNING: Array{T}(::Type{T}, m::Int) is deprecated, use Array{T}(m) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] Array(::Type{NLsolve.SolverState}, ::Int64) at ./deprecated.jl:51
 [3] Type at /home/vagrant/.julia/v0.6/NLsolve/src/solver_state_results.jl:20 [inlined]
 [4] trust_region_(::NLsolve.DifferentiableMultivariateFunction, ::Array{Float64,1}, ::Float64, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::Float64, ::Bool) at /home/vagrant/.julia/v0.6/NLsolve/src/trust_region.jl:99
 [5] #nlsolve#17(::Symbol, ::Float64, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::Function, ::Float64, ::Bool, ::NLsolve.#nlsolve, ::NLsolve.DifferentiableMultivariateFunction, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/NLsolve/src/nlsolve_func_defs.jl:24
 [6] NLSOLVEJL_SETUP at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/misc_utils.jl:51 [inlined]
 [7] perform_step! at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/integrators/implicit_integrators.jl:126 [inlined]
 [8] perform_step! at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/integrators/implicit_integrators.jl:114 [inlined]
 [9] solve!(::OrdinaryDiffEq.ODEIntegrator{OrdinaryDiffEq.Trapezoid{OrdinaryDiffEq.NLSOLVEJL_SETUP{1,true}},Array{Float64,1},Float64,Float64,Float64,Array{Array{Float64,1},1},DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,##187#188,Void,UniformScaling{Int64}},OrdinaryDiffEq.Trapezoid{OrdinaryDiffEq.NLSOLVEJL_SETUP{1,true}},OrdinaryDiffEq.InterpolationData{##187#188,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.TrapezoidCache{Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.DiffCache{Float64,ForwardDiff.Dual{1,Float64}},Array{Float64,1},OrdinaryDiffEq.RHS_Trap{##187#188,Array{Float64,1},Array{Float64,1},Float64,Tuple{Int64},OrdinaryDiffEq.DiffCache{Float64,ForwardDiff.Dual{1,Float64}},Base.OneTo{Int64}},NLsolve.DifferentiableMultivariateFunction}}},Array{Float64,1},##187#188,Void,OrdinaryDiffEq.TrapezoidCache{Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.DiffCache{Float64,ForwardDiff.Dual{1,Float64}},Array{Float64,1},OrdinaryDiffEq.RHS_Trap{##187#188,Array{Float64,1},Array{Float64,1},Float64,Tuple{Int64},OrdinaryDiffEq.DiffCache{Float64,ForwardDiff.Dual{1,Float64}},Base.OneTo{Int64}},NLsolve.DifferentiableMultivariateFunction},OrdinaryDiffEq.DEOptions{Float64,Float64,Float64,Float64,DiffEqBase.#ODE_DEFAULT_NORM,DiffEqBase.CallbackSet{Tuple{DiffEqBase.ContinuousCallback{##189#190,##191#192,##191#192,DiffEqBase.#INITIALIZE_DEFAULT,Float64,Int64,Void}},Tuple{}},DiffEqBase.#ODE_DEFAULT_ISOUTOFDOMAIN,DiffEqBase.#ODE_DEFAULT_PROG_MESSAGE,DiffEqBase.#ODE_DEFAULT_UNSTABLE_CHECK,DataStructures.BinaryHeap{Float64,DataStructures.LessThan},Void,Void},Array{Float64,1}}) at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/solve.jl:308
 [10] #solve#87(::Array{Any,1}, ::Function, ::DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,##187#188,Void,UniformScaling{Int64}}, ::OrdinaryDiffEq.Trapezoid{OrdinaryDiffEq.NLSOLVEJL_SETUP{1,true}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/solve.jl:7
 [11] (::DiffEqBase.#kw##solve)(::Array{Any,1}, ::DiffEqBase.#solve, ::DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,##187#188,Void,UniformScaling{Int64}}, ::OrdinaryDiffEq.Trapezoid{OrdinaryDiffEq.NLSOLVEJL_SETUP{1,true}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at ./<missing>:0 (repeats 2 times)
 [12] include_from_node1(::String) at ./loading.jl:552
 [13] include(::String) at ./sysimg.jl:14
 [14] macro expansion at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/test/runtests.jl:33 [inlined]
 [15] macro expansion at ./test.jl:856 [inlined]
 [16] macro expansion at ./util.jl:237 [inlined]
 [17] anonymous at ./<missing>:?
 [18] include_from_node1(::String) at ./loading.jl:552
 [19] include(::String) at ./sysimg.jl:14
 [20] process_options(::Base.JLOptions) at ./client.jl:305
 [21] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/OrdinaryDiffEq/test/ode/ode_cache_tests.jl, in expression starting on line 37
OrdinaryDiffEq.Euler()
OrdinaryDiffEq.Midpoint()
OrdinaryDiffEq.RK4()
OrdinaryDiffEq.SSPRK104()
OrdinaryDiffEq.SSPRK22()
OrdinaryDiffEq.SSPRK33()
OrdinaryDiffEq.BS3()
OrdinaryDiffEq.BS5()
OrdinaryDiffEq.DP5()
OrdinaryDiffEq.DP5Threaded()
OrdinaryDiffEq.DP8()
OrdinaryDiffEq.Feagin10()
OrdinaryDiffEq.Feagin12()
OrdinaryDiffEq.Feagin14()
OrdinaryDiffEq.TanYam7()
OrdinaryDiffEq.Tsit5()
OrdinaryDiffEq.TsitPap8()
OrdinaryDiffEq.Vern6()
OrdinaryDiffEq.Vern7()
OrdinaryDiffEq.Vern8()
OrdinaryDiffEq.Vern9()
Test Summary: |
Cache Tests   | No tests
 93.247959 seconds (41.68 M allocations: 3.626 GiB, 2.82% gc time)
WARNING: Array{T}(::Type{T}, m::Int, n::Int) is deprecated, use Array{T}(m, n) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] Array(::Type{Float64}, ::Int64, ::Int64) at ./deprecated.jl:51
 [3] trust_region_(::NLsolve.DifferentiableMultivariateFunction, ::Array{Float64,1}, ::Float64, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::Float64, ::Bool) at /home/vagrant/.julia/v0.6/NLsolve/src/trust_region.jl:82
 [4] #nlsolve#17(::Symbol, ::Float64, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::Function, ::Float64, ::Bool, ::NLsolve.#nlsolve, ::NLsolve.DifferentiableMultivariateFunction, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/NLsolve/src/nlsolve_func_defs.jl:24
 [5] NLSOLVEJL_SETUP at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/misc_utils.jl:51 [inlined]
 [6] perform_step! at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/integrators/implicit_integrators.jl:161 [inlined]
 [7] perform_step! at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/integrators/implicit_integrators.jl:152 [inlined]
 [8] solve!(::OrdinaryDiffEq.ODEIntegrator{OrdinaryDiffEq.Trapezoid{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}},Float64,Float64,Float64,Float64,Array{Float64,1},DiffEqBase.ODESolution{Float64,1,Array{Float64,1},Array{Float64,1},Dict{Symbol,Float64},Array{Float64,1},Array{Array{Float64,1},1},DiffEqBase.ODEProblem{Float64,Float64,false,DiffEqProblemLibrary.##1#2,Void,UniformScaling{Int64}},OrdinaryDiffEq.Trapezoid{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}},OrdinaryDiffEq.InterpolationData{DiffEqProblemLibrary.##1#2,Array{Float64,1},Array{Float64,1},Array{Array{Float64,1},1},OrdinaryDiffEq.TrapezoidConstantCache{Array{Float64,1},OrdinaryDiffEq.RHS_Trap_Scalar{DiffEqProblemLibrary.##1#2,Array{Float64,1},Float64,Float64},NLsolve.DifferentiableMultivariateFunction}}},Float64,DiffEqProblemLibrary.##1#2,Void,OrdinaryDiffEq.TrapezoidConstantCache{Array{Float64,1},OrdinaryDiffEq.RHS_Trap_Scalar{DiffEqProblemLibrary.##1#2,Array{Float64,1},Float64,Float64},NLsolve.DifferentiableMultivariateFunction},OrdinaryDiffEq.DEOptions{Float64,Float64,Float64,Float64,DiffEqBase.#ODE_DEFAULT_NORM,DiffEqBase.CallbackSet{Tuple{},Tuple{}},DiffEqBase.#ODE_DEFAULT_ISOUTOFDOMAIN,DiffEqBase.#ODE_DEFAULT_PROG_MESSAGE,DiffEqBase.#ODE_DEFAULT_UNSTABLE_CHECK,DataStructures.BinaryHeap{Float64,DataStructures.LessThan},Void,Void},Float64}) at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/solve.jl:308
 [9] #solve#87(::Array{Any,1}, ::Function, ::DiffEqBase.ODEProblem{Float64,Float64,false,DiffEqProblemLibrary.##1#2,Void,UniformScaling{Int64}}, ::OrdinaryDiffEq.Trapezoid{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/solve.jl:7
 [10] (::DiffEqBase.#kw##solve)(::Array{Any,1}, ::DiffEqBase.#solve, ::DiffEqBase.ODEProblem{Float64,Float64,false,DiffEqProblemLibrary.##1#2,Void,UniformScaling{Int64}}, ::OrdinaryDiffEq.Trapezoid{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at ./<missing>:0 (repeats 2 times)
 [11] include_from_node1(::String) at ./loading.jl:552
 [12] include(::String) at ./sysimg.jl:14
 [13] macro expansion at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/test/runtests.jl:34 [inlined]
 [14] macro expansion at ./test.jl:856 [inlined]
 [15] macro expansion at ./util.jl:237 [inlined]
 [16] anonymous at ./<missing>:?
 [17] include_from_node1(::String) at ./loading.jl:552
 [18] include(::String) at ./sysimg.jl:14
 [19] process_options(::Base.JLOptions) at ./client.jl:305
 [20] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/OrdinaryDiffEq/test/ode/ode_saveat_tests.jl, in expression starting on line 47
WARNING: !(B::BitArray) is deprecated, use .!(B) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] !(::BitArray{1}) at ./deprecated.jl:51
 [3] check_isfinite(::Array{Float64,1}) at /home/vagrant/.julia/v0.6/NLsolve/src/utils.jl:32
 [4] trust_region_(::NLsolve.DifferentiableMultivariateFunction, ::Array{Float64,1}, ::Float64, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::Float64, ::Bool) at /home/vagrant/.julia/v0.6/NLsolve/src/trust_region.jl:91
 [5] #nlsolve#17(::Symbol, ::Float64, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::Function, ::Float64, ::Bool, ::NLsolve.#nlsolve, ::NLsolve.DifferentiableMultivariateFunction, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/NLsolve/src/nlsolve_func_defs.jl:24
 [6] NLSOLVEJL_SETUP at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/misc_utils.jl:51 [inlined]
 [7] perform_step! at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/integrators/implicit_integrators.jl:161 [inlined]
 [8] perform_step! at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/integrators/implicit_integrators.jl:152 [inlined]
 [9] solve!(::OrdinaryDiffEq.ODEIntegrator{OrdinaryDiffEq.Trapezoid{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}},Float64,Float64,Float64,Float64,Array{Float64,1},DiffEqBase.ODESolution{Float64,1,Array{Float64,1},Array{Float64,1},Dict{Symbol,Float64},Array{Float64,1},Array{Array{Float64,1},1},DiffEqBase.ODEProblem{Float64,Float64,false,DiffEqProblemLibrary.##1#2,Void,UniformScaling{Int64}},OrdinaryDiffEq.Trapezoid{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}},OrdinaryDiffEq.InterpolationData{DiffEqProblemLibrary.##1#2,Array{Float64,1},Array{Float64,1},Array{Array{Float64,1},1},OrdinaryDiffEq.TrapezoidConstantCache{Array{Float64,1},OrdinaryDiffEq.RHS_Trap_Scalar{DiffEqProblemLibrary.##1#2,Array{Float64,1},Float64,Float64},NLsolve.DifferentiableMultivariateFunction}}},Float64,DiffEqProblemLibrary.##1#2,Void,OrdinaryDiffEq.TrapezoidConstantCache{Array{Float64,1},OrdinaryDiffEq.RHS_Trap_Scalar{DiffEqProblemLibrary.##1#2,Array{Float64,1},Float64,Float64},NLsolve.DifferentiableMultivariateFunction},OrdinaryDiffEq.DEOptions{Float64,Float64,Float64,Float64,DiffEqBase.#ODE_DEFAULT_NORM,DiffEqBase.CallbackSet{Tuple{},Tuple{}},DiffEqBase.#ODE_DEFAULT_ISOUTOFDOMAIN,DiffEqBase.#ODE_DEFAULT_PROG_MESSAGE,DiffEqBase.#ODE_DEFAULT_UNSTABLE_CHECK,DataStructures.BinaryHeap{Float64,DataStructures.LessThan},Void,Void},Float64}) at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/solve.jl:308
 [10] #solve#87(::Array{Any,1}, ::Function, ::DiffEqBase.ODEProblem{Float64,Float64,false,DiffEqProblemLibrary.##1#2,Void,UniformScaling{Int64}}, ::OrdinaryDiffEq.Trapezoid{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/solve.jl:7
 [11] (::DiffEqBase.#kw##solve)(::Array{Any,1}, ::DiffEqBase.#solve, ::DiffEqBase.ODEProblem{Float64,Float64,false,DiffEqProblemLibrary.##1#2,Void,UniformScaling{Int64}}, ::OrdinaryDiffEq.Trapezoid{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at ./<missing>:0 (repeats 2 times)
 [12] include_from_node1(::String) at ./loading.jl:552
 [13] include(::String) at ./sysimg.jl:14
 [14] macro expansion at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/test/runtests.jl:34 [inlined]
 [15] macro expansion at ./test.jl:856 [inlined]
 [16] macro expansion at ./util.jl:237 [inlined]
 [17] anonymous at ./<missing>:?
 [18] include_from_node1(::String) at ./loading.jl:552
 [19] include(::String) at ./sysimg.jl:14
 [20] process_options(::Base.JLOptions) at ./client.jl:305
 [21] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/OrdinaryDiffEq/test/ode/ode_saveat_tests.jl, in expression starting on line 47
WARNING: Array{T}(::Type{T}, m::Int) is deprecated, use Array{T}(m) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] Array(::Type{NLsolve.SolverState}, ::Int64) at ./deprecated.jl:51
 [3] Type at /home/vagrant/.julia/v0.6/NLsolve/src/solver_state_results.jl:20 [inlined]
 [4] trust_region_(::NLsolve.DifferentiableMultivariateFunction, ::Array{Float64,1}, ::Float64, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::Float64, ::Bool) at /home/vagrant/.julia/v0.6/NLsolve/src/trust_region.jl:99
 [5] #nlsolve#17(::Symbol, ::Float64, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::Function, ::Float64, ::Bool, ::NLsolve.#nlsolve, ::NLsolve.DifferentiableMultivariateFunction, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/NLsolve/src/nlsolve_func_defs.jl:24
 [6] NLSOLVEJL_SETUP at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/misc_utils.jl:51 [inlined]
 [7] perform_step! at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/integrators/implicit_integrators.jl:161 [inlined]
 [8] perform_step! at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/integrators/implicit_integrators.jl:152 [inlined]
 [9] solve!(::OrdinaryDiffEq.ODEIntegrator{OrdinaryDiffEq.Trapezoid{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}},Float64,Float64,Float64,Float64,Array{Float64,1},DiffEqBase.ODESolution{Float64,1,Array{Float64,1},Array{Float64,1},Dict{Symbol,Float64},Array{Float64,1},Array{Array{Float64,1},1},DiffEqBase.ODEProblem{Float64,Float64,false,DiffEqProblemLibrary.##1#2,Void,UniformScaling{Int64}},OrdinaryDiffEq.Trapezoid{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}},OrdinaryDiffEq.InterpolationData{DiffEqProblemLibrary.##1#2,Array{Float64,1},Array{Float64,1},Array{Array{Float64,1},1},OrdinaryDiffEq.TrapezoidConstantCache{Array{Float64,1},OrdinaryDiffEq.RHS_Trap_Scalar{DiffEqProblemLibrary.##1#2,Array{Float64,1},Float64,Float64},NLsolve.DifferentiableMultivariateFunction}}},Float64,DiffEqProblemLibrary.##1#2,Void,OrdinaryDiffEq.TrapezoidConstantCache{Array{Float64,1},OrdinaryDiffEq.RHS_Trap_Scalar{DiffEqProblemLibrary.##1#2,Array{Float64,1},Float64,Float64},NLsolve.DifferentiableMultivariateFunction},OrdinaryDiffEq.DEOptions{Float64,Float64,Float64,Float64,DiffEqBase.#ODE_DEFAULT_NORM,DiffEqBase.CallbackSet{Tuple{},Tuple{}},DiffEqBase.#ODE_DEFAULT_ISOUTOFDOMAIN,DiffEqBase.#ODE_DEFAULT_PROG_MESSAGE,DiffEqBase.#ODE_DEFAULT_UNSTABLE_CHECK,DataStructures.BinaryHeap{Float64,DataStructures.LessThan},Void,Void},Float64}) at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/solve.jl:308
 [10] #solve#87(::Array{Any,1}, ::Function, ::DiffEqBase.ODEProblem{Float64,Float64,false,DiffEqProblemLibrary.##1#2,Void,UniformScaling{Int64}}, ::OrdinaryDiffEq.Trapezoid{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/solve.jl:7
 [11] (::DiffEqBase.#kw##solve)(::Array{Any,1}, ::DiffEqBase.#solve, ::DiffEqBase.ODEProblem{Float64,Float64,false,DiffEqProblemLibrary.##1#2,Void,UniformScaling{Int64}}, ::OrdinaryDiffEq.Trapezoid{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at ./<missing>:0 (repeats 2 times)
 [12] include_from_node1(::String) at ./loading.jl:552
 [13] include(::String) at ./sysimg.jl:14
 [14] macro expansion at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/test/runtests.jl:34 [inlined]
 [15] macro expansion at ./test.jl:856 [inlined]
 [16] macro expansion at ./util.jl:237 [inlined]
 [17] anonymous at ./<missing>:?
 [18] include_from_node1(::String) at ./loading.jl:552
 [19] include(::String) at ./sysimg.jl:14
 [20] process_options(::Base.JLOptions) at ./client.jl:305
 [21] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/OrdinaryDiffEq/test/ode/ode_saveat_tests.jl, in expression starting on line 47
WARNING: Array{T}(::Type{T}, m::Int, n::Int) is deprecated, use Array{T}(m, n) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] Array(::Type{Float64}, ::Int64, ::Int64) at ./deprecated.jl:51
 [3] trust_region_(::NLsolve.DifferentiableMultivariateFunction, ::Array{Float64,1}, ::Float64, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::Float64, ::Bool) at /home/vagrant/.julia/v0.6/NLsolve/src/trust_region.jl:82
 [4] #nlsolve#17(::Symbol, ::Float64, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::Function, ::Float64, ::Bool, ::NLsolve.#nlsolve, ::NLsolve.DifferentiableMultivariateFunction, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/NLsolve/src/nlsolve_func_defs.jl:24
 [5] NLSOLVEJL_SETUP at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/misc_utils.jl:51 [inlined]
 [6] perform_step! at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/integrators/implicit_integrators.jl:161 [inlined]
 [7] perform_step! at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/integrators/implicit_integrators.jl:152 [inlined]
 [8] solve!(::OrdinaryDiffEq.ODEIntegrator{OrdinaryDiffEq.Trapezoid{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}},Float64,Float64,Float64,Float64,Array{Float64,1},DiffEqBase.ODESolution{Float64,1,Array{Float64,1},Array{Float64,1},Dict{Symbol,Float64},Array{Float64,1},Array{Array{Float64,1},1},DiffEqBase.ODEProblem{Float64,Float64,false,DiffEqProblemLibrary.##1#2,Void,UniformScaling{Int64}},OrdinaryDiffEq.Trapezoid{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}},OrdinaryDiffEq.InterpolationData{DiffEqProblemLibrary.##1#2,Array{Float64,1},Array{Float64,1},Array{Array{Float64,1},1},OrdinaryDiffEq.TrapezoidConstantCache{Array{Float64,1},OrdinaryDiffEq.RHS_Trap_Scalar{DiffEqProblemLibrary.##1#2,Array{Float64,1},Float64,Float64},NLsolve.DifferentiableMultivariateFunction}}},Float64,DiffEqProblemLibrary.##1#2,Void,OrdinaryDiffEq.TrapezoidConstantCache{Array{Float64,1},OrdinaryDiffEq.RHS_Trap_Scalar{DiffEqProblemLibrary.##1#2,Array{Float64,1},Float64,Float64},NLsolve.DifferentiableMultivariateFunction},OrdinaryDiffEq.DEOptions{Float64,Float64,Float64,Float64,DiffEqBase.#ODE_DEFAULT_NORM,DiffEqBase.CallbackSet{Tuple{},Tuple{}},DiffEqBase.#ODE_DEFAULT_ISOUTOFDOMAIN,DiffEqBase.#ODE_DEFAULT_PROG_MESSAGE,DiffEqBase.#ODE_DEFAULT_UNSTABLE_CHECK,DataStructures.BinaryHeap{Float64,DataStructures.LessThan},Void,Void},Float64}) at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/solve.jl:308
 [9] #solve#87(::Array{Any,1}, ::Function, ::DiffEqBase.ODEProblem{Float64,Float64,false,DiffEqProblemLibrary.##1#2,Void,UniformScaling{Int64}}, ::OrdinaryDiffEq.Trapezoid{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/solve.jl:7
 [10] (::DiffEqBase.#kw##solve)(::Array{Any,1}, ::DiffEqBase.#solve, ::DiffEqBase.ODEProblem{Float64,Float64,false,DiffEqProblemLibrary.##1#2,Void,UniformScaling{Int64}}, ::OrdinaryDiffEq.Trapezoid{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at ./<missing>:0 (repeats 2 times)
 [11] include_from_node1(::String) at ./loading.jl:552
 [12] include(::String) at ./sysimg.jl:14
 [13] macro expansion at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/test/runtests.jl:34 [inlined]
 [14] macro expansion at ./test.jl:856 [inlined]
 [15] macro expansion at ./util.jl:237 [inlined]
 [16] anonymous at ./<missing>:?
 [17] include_from_node1(::String) at ./loading.jl:552
 [18] include(::String) at ./sysimg.jl:14
 [19] process_options(::Base.JLOptions) at ./client.jl:305
 [20] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/OrdinaryDiffEq/test/ode/ode_saveat_tests.jl, in expression starting on line 48
WARNING: !(B::BitArray) is deprecated, use .!(B) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] !(::BitArray{1}) at ./deprecated.jl:51
 [3] check_isfinite(::Array{Float64,1}) at /home/vagrant/.julia/v0.6/NLsolve/src/utils.jl:32
 [4] trust_region_(::NLsolve.DifferentiableMultivariateFunction, ::Array{Float64,1}, ::Float64, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::Float64, ::Bool) at /home/vagrant/.julia/v0.6/NLsolve/src/trust_region.jl:91
 [5] #nlsolve#17(::Symbol, ::Float64, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::Function, ::Float64, ::Bool, ::NLsolve.#nlsolve, ::NLsolve.DifferentiableMultivariateFunction, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/NLsolve/src/nlsolve_func_defs.jl:24
 [6] NLSOLVEJL_SETUP at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/misc_utils.jl:51 [inlined]
 [7] perform_step! at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/integrators/implicit_integrators.jl:161 [inlined]
 [8] perform_step! at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/integrators/implicit_integrators.jl:152 [inlined]
 [9] solve!(::OrdinaryDiffEq.ODEIntegrator{OrdinaryDiffEq.Trapezoid{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}},Float64,Float64,Float64,Float64,Array{Float64,1},DiffEqBase.ODESolution{Float64,1,Array{Float64,1},Array{Float64,1},Dict{Symbol,Float64},Array{Float64,1},Array{Array{Float64,1},1},DiffEqBase.ODEProblem{Float64,Float64,false,DiffEqProblemLibrary.##1#2,Void,UniformScaling{Int64}},OrdinaryDiffEq.Trapezoid{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}},OrdinaryDiffEq.InterpolationData{DiffEqProblemLibrary.##1#2,Array{Float64,1},Array{Float64,1},Array{Array{Float64,1},1},OrdinaryDiffEq.TrapezoidConstantCache{Array{Float64,1},OrdinaryDiffEq.RHS_Trap_Scalar{DiffEqProblemLibrary.##1#2,Array{Float64,1},Float64,Float64},NLsolve.DifferentiableMultivariateFunction}}},Float64,DiffEqProblemLibrary.##1#2,Void,OrdinaryDiffEq.TrapezoidConstantCache{Array{Float64,1},OrdinaryDiffEq.RHS_Trap_Scalar{DiffEqProblemLibrary.##1#2,Array{Float64,1},Float64,Float64},NLsolve.DifferentiableMultivariateFunction},OrdinaryDiffEq.DEOptions{Float64,Float64,Float64,Float64,DiffEqBase.#ODE_DEFAULT_NORM,DiffEqBase.CallbackSet{Tuple{},Tuple{}},DiffEqBase.#ODE_DEFAULT_ISOUTOFDOMAIN,DiffEqBase.#ODE_DEFAULT_PROG_MESSAGE,DiffEqBase.#ODE_DEFAULT_UNSTABLE_CHECK,DataStructures.BinaryHeap{Float64,DataStructures.LessThan},Void,Void},Float64}) at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/solve.jl:308
 [10] #solve#87(::Array{Any,1}, ::Function, ::DiffEqBase.ODEProblem{Float64,Float64,false,DiffEqProblemLibrary.##1#2,Void,UniformScaling{Int64}}, ::OrdinaryDiffEq.Trapezoid{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/solve.jl:7
 [11] (::DiffEqBase.#kw##solve)(::Array{Any,1}, ::DiffEqBase.#solve, ::DiffEqBase.ODEProblem{Float64,Float64,false,DiffEqProblemLibrary.##1#2,Void,UniformScaling{Int64}}, ::OrdinaryDiffEq.Trapezoid{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at ./<missing>:0 (repeats 2 times)
 [12] include_from_node1(::String) at ./loading.jl:552
 [13] include(::String) at ./sysimg.jl:14
 [14] macro expansion at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/test/runtests.jl:34 [inlined]
 [15] macro expansion at ./test.jl:856 [inlined]
 [16] macro expansion at ./util.jl:237 [inlined]
 [17] anonymous at ./<missing>:?
 [18] include_from_node1(::String) at ./loading.jl:552
 [19] include(::String) at ./sysimg.jl:14
 [20] process_options(::Base.JLOptions) at ./client.jl:305
 [21] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/OrdinaryDiffEq/test/ode/ode_saveat_tests.jl, in expression starting on line 48
WARNING: Array{T}(::Type{T}, m::Int) is deprecated, use Array{T}(m) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] Array(::Type{NLsolve.SolverState}, ::Int64) at ./deprecated.jl:51
 [3] Type at /home/vagrant/.julia/v0.6/NLsolve/src/solver_state_results.jl:20 [inlined]
 [4] trust_region_(::NLsolve.DifferentiableMultivariateFunction, ::Array{Float64,1}, ::Float64, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::Float64, ::Bool) at /home/vagrant/.julia/v0.6/NLsolve/src/trust_region.jl:99
 [5] #nlsolve#17(::Symbol, ::Float64, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::Function, ::Float64, ::Bool, ::NLsolve.#nlsolve, ::NLsolve.DifferentiableMultivariateFunction, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/NLsolve/src/nlsolve_func_defs.jl:24
 [6] NLSOLVEJL_SETUP at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/misc_utils.jl:51 [inlined]
 [7] perform_step! at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/integrators/implicit_integrators.jl:161 [inlined]
 [8] perform_step! at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/integrators/implicit_integrators.jl:152 [inlined]
 [9] solve!(::OrdinaryDiffEq.ODEIntegrator{OrdinaryDiffEq.Trapezoid{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}},Float64,Float64,Float64,Float64,Array{Float64,1},DiffEqBase.ODESolution{Float64,1,Array{Float64,1},Array{Float64,1},Dict{Symbol,Float64},Array{Float64,1},Array{Array{Float64,1},1},DiffEqBase.ODEProblem{Float64,Float64,false,DiffEqProblemLibrary.##1#2,Void,UniformScaling{Int64}},OrdinaryDiffEq.Trapezoid{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}},OrdinaryDiffEq.InterpolationData{DiffEqProblemLibrary.##1#2,Array{Float64,1},Array{Float64,1},Array{Array{Float64,1},1},OrdinaryDiffEq.TrapezoidConstantCache{Array{Float64,1},OrdinaryDiffEq.RHS_Trap_Scalar{DiffEqProblemLibrary.##1#2,Array{Float64,1},Float64,Float64},NLsolve.DifferentiableMultivariateFunction}}},Float64,DiffEqProblemLibrary.##1#2,Void,OrdinaryDiffEq.TrapezoidConstantCache{Array{Float64,1},OrdinaryDiffEq.RHS_Trap_Scalar{DiffEqProblemLibrary.##1#2,Array{Float64,1},Float64,Float64},NLsolve.DifferentiableMultivariateFunction},OrdinaryDiffEq.DEOptions{Float64,Float64,Float64,Float64,DiffEqBase.#ODE_DEFAULT_NORM,DiffEqBase.CallbackSet{Tuple{},Tuple{}},DiffEqBase.#ODE_DEFAULT_ISOUTOFDOMAIN,DiffEqBase.#ODE_DEFAULT_PROG_MESSAGE,DiffEqBase.#ODE_DEFAULT_UNSTABLE_CHECK,DataStructures.BinaryHeap{Float64,DataStructures.LessThan},Void,Void},Float64}) at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/solve.jl:308
 [10] #solve#87(::Array{Any,1}, ::Function, ::DiffEqBase.ODEProblem{Float64,Float64,false,DiffEqProblemLibrary.##1#2,Void,UniformScaling{Int64}}, ::OrdinaryDiffEq.Trapezoid{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/solve.jl:7
 [11] (::DiffEqBase.#kw##solve)(::Array{Any,1}, ::DiffEqBase.#solve, ::DiffEqBase.ODEProblem{Float64,Float64,false,DiffEqProblemLibrary.##1#2,Void,UniformScaling{Int64}}, ::OrdinaryDiffEq.Trapezoid{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at ./<missing>:0 (repeats 2 times)
 [12] include_from_node1(::String) at ./loading.jl:552
 [13] include(::String) at ./sysimg.jl:14
 [14] macro expansion at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/test/runtests.jl:34 [inlined]
 [15] macro expansion at ./test.jl:856 [inlined]
 [16] macro expansion at ./util.jl:237 [inlined]
 [17] anonymous at ./<missing>:?
 [18] include_from_node1(::String) at ./loading.jl:552
 [19] include(::String) at ./sysimg.jl:14
 [20] process_options(::Base.JLOptions) at ./client.jl:305
 [21] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/OrdinaryDiffEq/test/ode/ode_saveat_tests.jl, in expression starting on line 48
WARNING: Array{T}(::Type{T}, m::Int, n::Int) is deprecated, use Array{T}(m, n) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] Array(::Type{Float64}, ::Int64, ::Int64) at ./deprecated.jl:51
 [3] trust_region_(::NLsolve.DifferentiableMultivariateFunction, ::Array{Float64,1}, ::Float64, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::Float64, ::Bool) at /home/vagrant/.julia/v0.6/NLsolve/src/trust_region.jl:82
 [4] #nlsolve#17(::Symbol, ::Float64, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::Function, ::Float64, ::Bool, ::NLsolve.#nlsolve, ::NLsolve.DifferentiableMultivariateFunction, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/NLsolve/src/nlsolve_func_defs.jl:24
 [5] NLSOLVEJL_SETUP at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/misc_utils.jl:51 [inlined]
 [6] perform_step! at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/integrators/implicit_integrators.jl:126 [inlined]
 [7] perform_step! at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/integrators/implicit_integrators.jl:114 [inlined]
 [8] solve!(::OrdinaryDiffEq.ODEIntegrator{OrdinaryDiffEq.Trapezoid{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}},Array{Float64,2},Float64,Float64,Float64,Array{Array{Float64,2},1},DiffEqBase.ODESolution{Float64,3,Array{Array{Float64,2},1},Array{Array{Float64,2},1},Dict{Symbol,Float64},Array{Float64,1},Array{Array{Array{Float64,2},1},1},DiffEqBase.ODEProblem{Array{Float64,2},Float64,true,DiffEqProblemLibrary.##5#6,Void,UniformScaling{Int64}},OrdinaryDiffEq.Trapezoid{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}},OrdinaryDiffEq.InterpolationData{DiffEqProblemLibrary.##5#6,Array{Array{Float64,2},1},Array{Float64,1},Array{Array{Array{Float64,2},1},1},OrdinaryDiffEq.TrapezoidCache{Array{Float64,2},Array{Float64,2},Array{Float64,1},OrdinaryDiffEq.DiffCache{Float64,ForwardDiff.Dual{8,Float64}},Array{Float64,2},OrdinaryDiffEq.RHS_Trap{DiffEqProblemLibrary.##5#6,Array{Float64,2},Array{Float64,2},Float64,Tuple{Int64,Int64},OrdinaryDiffEq.DiffCache{Float64,ForwardDiff.Dual{8,Float64}},Base.OneTo{Int64}},NLsolve.DifferentiableMultivariateFunction}}},Array{Float64,2},DiffEqProblemLibrary.##5#6,Void,OrdinaryDiffEq.TrapezoidCache{Array{Float64,2},Array{Float64,2},Array{Float64,1},OrdinaryDiffEq.DiffCache{Float64,ForwardDiff.Dual{8,Float64}},Array{Float64,2},OrdinaryDiffEq.RHS_Trap{DiffEqProblemLibrary.##5#6,Array{Float64,2},Array{Float64,2},Float64,Tuple{Int64,Int64},OrdinaryDiffEq.DiffCache{Float64,ForwardDiff.Dual{8,Float64}},Base.OneTo{Int64}},NLsolve.DifferentiableMultivariateFunction},OrdinaryDiffEq.DEOptions{Float64,Float64,Float64,Float64,DiffEqBase.#ODE_DEFAULT_NORM,DiffEqBase.CallbackSet{Tuple{},Tuple{}},DiffEqBase.#ODE_DEFAULT_ISOUTOFDOMAIN,DiffEqBase.#ODE_DEFAULT_PROG_MESSAGE,DiffEqBase.#ODE_DEFAULT_UNSTABLE_CHECK,DataStructures.BinaryHeap{Float64,DataStructures.LessThan},Void,Void},Array{Float64,2}}) at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/solve.jl:308
 [9] #solve#87(::Array{Any,1}, ::Function, ::DiffEqBase.ODEProblem{Array{Float64,2},Float64,true,DiffEqProblemLibrary.##5#6,Void,UniformScaling{Int64}}, ::OrdinaryDiffEq.Trapezoid{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/solve.jl:7
 [10] (::DiffEqBase.#kw##solve)(::Array{Any,1}, ::DiffEqBase.#solve, ::DiffEqBase.ODEProblem{Array{Float64,2},Float64,true,DiffEqProblemLibrary.##5#6,Void,UniformScaling{Int64}}, ::OrdinaryDiffEq.Trapezoid{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at ./<missing>:0 (repeats 2 times)
 [11] include_from_node1(::String) at ./loading.jl:552
 [12] include(::String) at ./sysimg.jl:14
 [13] macro expansion at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/test/runtests.jl:34 [inlined]
 [14] macro expansion at ./test.jl:856 [inlined]
 [15] macro expansion at ./util.jl:237 [inlined]
 [16] anonymous at ./<missing>:?
 [17] include_from_node1(::String) at ./loading.jl:552
 [18] include(::String) at ./sysimg.jl:14
 [19] process_options(::Base.JLOptions) at ./client.jl:305
 [20] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/OrdinaryDiffEq/test/ode/ode_saveat_tests.jl, in expression starting on line 74
WARNING: !(B::BitArray) is deprecated, use .!(B) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] !(::BitArray{1}) at ./deprecated.jl:51
 [3] check_isfinite(::Array{Float64,1}) at /home/vagrant/.julia/v0.6/NLsolve/src/utils.jl:32
 [4] trust_region_(::NLsolve.DifferentiableMultivariateFunction, ::Array{Float64,1}, ::Float64, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::Float64, ::Bool) at /home/vagrant/.julia/v0.6/NLsolve/src/trust_region.jl:91
 [5] #nlsolve#17(::Symbol, ::Float64, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::Function, ::Float64, ::Bool, ::NLsolve.#nlsolve, ::NLsolve.DifferentiableMultivariateFunction, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/NLsolve/src/nlsolve_func_defs.jl:24
 [6] NLSOLVEJL_SETUP at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/misc_utils.jl:51 [inlined]
 [7] perform_step! at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/integrators/implicit_integrators.jl:126 [inlined]
 [8] perform_step! at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/integrators/implicit_integrators.jl:114 [inlined]
 [9] solve!(::OrdinaryDiffEq.ODEIntegrator{OrdinaryDiffEq.Trapezoid{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}},Array{Float64,2},Float64,Float64,Float64,Array{Array{Float64,2},1},DiffEqBase.ODESolution{Float64,3,Array{Array{Float64,2},1},Array{Array{Float64,2},1},Dict{Symbol,Float64},Array{Float64,1},Array{Array{Array{Float64,2},1},1},DiffEqBase.ODEProblem{Array{Float64,2},Float64,true,DiffEqProblemLibrary.##5#6,Void,UniformScaling{Int64}},OrdinaryDiffEq.Trapezoid{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}},OrdinaryDiffEq.InterpolationData{DiffEqProblemLibrary.##5#6,Array{Array{Float64,2},1},Array{Float64,1},Array{Array{Array{Float64,2},1},1},OrdinaryDiffEq.TrapezoidCache{Array{Float64,2},Array{Float64,2},Array{Float64,1},OrdinaryDiffEq.DiffCache{Float64,ForwardDiff.Dual{8,Float64}},Array{Float64,2},OrdinaryDiffEq.RHS_Trap{DiffEqProblemLibrary.##5#6,Array{Float64,2},Array{Float64,2},Float64,Tuple{Int64,Int64},OrdinaryDiffEq.DiffCache{Float64,ForwardDiff.Dual{8,Float64}},Base.OneTo{Int64}},NLsolve.DifferentiableMultivariateFunction}}},Array{Float64,2},DiffEqProblemLibrary.##5#6,Void,OrdinaryDiffEq.TrapezoidCache{Array{Float64,2},Array{Float64,2},Array{Float64,1},OrdinaryDiffEq.DiffCache{Float64,ForwardDiff.Dual{8,Float64}},Array{Float64,2},OrdinaryDiffEq.RHS_Trap{DiffEqProblemLibrary.##5#6,Array{Float64,2},Array{Float64,2},Float64,Tuple{Int64,Int64},OrdinaryDiffEq.DiffCache{Float64,ForwardDiff.Dual{8,Float64}},Base.OneTo{Int64}},NLsolve.DifferentiableMultivariateFunction},OrdinaryDiffEq.DEOptions{Float64,Float64,Float64,Float64,DiffEqBase.#ODE_DEFAULT_NORM,DiffEqBase.CallbackSet{Tuple{},Tuple{}},DiffEqBase.#ODE_DEFAULT_ISOUTOFDOMAIN,DiffEqBase.#ODE_DEFAULT_PROG_MESSAGE,DiffEqBase.#ODE_DEFAULT_UNSTABLE_CHECK,DataStructures.BinaryHeap{Float64,DataStructures.LessThan},Void,Void},Array{Float64,2}}) at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/solve.jl:308
 [10] #solve#87(::Array{Any,1}, ::Function, ::DiffEqBase.ODEProblem{Array{Float64,2},Float64,true,DiffEqProblemLibrary.##5#6,Void,UniformScaling{Int64}}, ::OrdinaryDiffEq.Trapezoid{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/solve.jl:7
 [11] (::DiffEqBase.#kw##solve)(::Array{Any,1}, ::DiffEqBase.#solve, ::DiffEqBase.ODEProblem{Array{Float64,2},Float64,true,DiffEqProblemLibrary.##5#6,Void,UniformScaling{Int64}}, ::OrdinaryDiffEq.Trapezoid{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at ./<missing>:0 (repeats 2 times)
 [12] include_from_node1(::String) at ./loading.jl:552
 [13] include(::String) at ./sysimg.jl:14
 [14] macro expansion at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/test/runtests.jl:34 [inlined]
 [15] macro expansion at ./test.jl:856 [inlined]
 [16] macro expansion at ./util.jl:237 [inlined]
 [17] anonymous at ./<missing>:?
 [18] include_from_node1(::String) at ./loading.jl:552
 [19] include(::String) at ./sysimg.jl:14
 [20] process_options(::Base.JLOptions) at ./client.jl:305
 [21] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/OrdinaryDiffEq/test/ode/ode_saveat_tests.jl, in expression starting on line 74
WARNING: Array{T}(::Type{T}, m::Int) is deprecated, use Array{T}(m) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] Array(::Type{NLsolve.SolverState}, ::Int64) at ./deprecated.jl:51
 [3] Type at /home/vagrant/.julia/v0.6/NLsolve/src/solver_state_results.jl:20 [inlined]
 [4] trust_region_(::NLsolve.DifferentiableMultivariateFunction, ::Array{Float64,1}, ::Float64, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::Float64, ::Bool) at /home/vagrant/.julia/v0.6/NLsolve/src/trust_region.jl:99
 [5] #nlsolve#17(::Symbol, ::Float64, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::Function, ::Float64, ::Bool, ::NLsolve.#nlsolve, ::NLsolve.DifferentiableMultivariateFunction, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/NLsolve/src/nlsolve_func_defs.jl:24
 [6] NLSOLVEJL_SETUP at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/misc_utils.jl:51 [inlined]
 [7] perform_step! at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/integrators/implicit_integrators.jl:126 [inlined]
 [8] perform_step! at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/integrators/implicit_integrators.jl:114 [inlined]
 [9] solve!(::OrdinaryDiffEq.ODEIntegrator{OrdinaryDiffEq.Trapezoid{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}},Array{Float64,2},Float64,Float64,Float64,Array{Array{Float64,2},1},DiffEqBase.ODESolution{Float64,3,Array{Array{Float64,2},1},Array{Array{Float64,2},1},Dict{Symbol,Float64},Array{Float64,1},Array{Array{Array{Float64,2},1},1},DiffEqBase.ODEProblem{Array{Float64,2},Float64,true,DiffEqProblemLibrary.##5#6,Void,UniformScaling{Int64}},OrdinaryDiffEq.Trapezoid{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}},OrdinaryDiffEq.InterpolationData{DiffEqProblemLibrary.##5#6,Array{Array{Float64,2},1},Array{Float64,1},Array{Array{Array{Float64,2},1},1},OrdinaryDiffEq.TrapezoidCache{Array{Float64,2},Array{Float64,2},Array{Float64,1},OrdinaryDiffEq.DiffCache{Float64,ForwardDiff.Dual{8,Float64}},Array{Float64,2},OrdinaryDiffEq.RHS_Trap{DiffEqProblemLibrary.##5#6,Array{Float64,2},Array{Float64,2},Float64,Tuple{Int64,Int64},OrdinaryDiffEq.DiffCache{Float64,ForwardDiff.Dual{8,Float64}},Base.OneTo{Int64}},NLsolve.DifferentiableMultivariateFunction}}},Array{Float64,2},DiffEqProblemLibrary.##5#6,Void,OrdinaryDiffEq.TrapezoidCache{Array{Float64,2},Array{Float64,2},Array{Float64,1},OrdinaryDiffEq.DiffCache{Float64,ForwardDiff.Dual{8,Float64}},Array{Float64,2},OrdinaryDiffEq.RHS_Trap{DiffEqProblemLibrary.##5#6,Array{Float64,2},Array{Float64,2},Float64,Tuple{Int64,Int64},OrdinaryDiffEq.DiffCache{Float64,ForwardDiff.Dual{8,Float64}},Base.OneTo{Int64}},NLsolve.DifferentiableMultivariateFunction},OrdinaryDiffEq.DEOptions{Float64,Float64,Float64,Float64,DiffEqBase.#ODE_DEFAULT_NORM,DiffEqBase.CallbackSet{Tuple{},Tuple{}},DiffEqBase.#ODE_DEFAULT_ISOUTOFDOMAIN,DiffEqBase.#ODE_DEFAULT_PROG_MESSAGE,DiffEqBase.#ODE_DEFAULT_UNSTABLE_CHECK,DataStructures.BinaryHeap{Float64,DataStructures.LessThan},Void,Void},Array{Float64,2}}) at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/solve.jl:308
 [10] #solve#87(::Array{Any,1}, ::Function, ::DiffEqBase.ODEProblem{Array{Float64,2},Float64,true,DiffEqProblemLibrary.##5#6,Void,UniformScaling{Int64}}, ::OrdinaryDiffEq.Trapezoid{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/solve.jl:7
 [11] (::DiffEqBase.#kw##solve)(::Array{Any,1}, ::DiffEqBase.#solve, ::DiffEqBase.ODEProblem{Array{Float64,2},Float64,true,DiffEqProblemLibrary.##5#6,Void,UniformScaling{Int64}}, ::OrdinaryDiffEq.Trapezoid{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at ./<missing>:0 (repeats 2 times)
 [12] include_from_node1(::String) at ./loading.jl:552
 [13] include(::String) at ./sysimg.jl:14
 [14] macro expansion at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/test/runtests.jl:34 [inlined]
 [15] macro expansion at ./test.jl:856 [inlined]
 [16] macro expansion at ./util.jl:237 [inlined]
 [17] anonymous at ./<missing>:?
 [18] include_from_node1(::String) at ./loading.jl:552
 [19] include(::String) at ./sysimg.jl:14
 [20] process_options(::Base.JLOptions) at ./client.jl:305
 [21] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/OrdinaryDiffEq/test/ode/ode_saveat_tests.jl, in expression starting on line 74
WARNING: Array{T}(::Type{T}, m::Int, n::Int) is deprecated, use Array{T}(m, n) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] Array(::Type{Float64}, ::Int64, ::Int64) at ./deprecated.jl:51
 [3] trust_region_(::NLsolve.DifferentiableMultivariateFunction, ::Array{Float64,1}, ::Float64, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::Float64, ::Bool) at /home/vagrant/.julia/v0.6/NLsolve/src/trust_region.jl:82
 [4] #nlsolve#17(::Symbol, ::Float64, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::Function, ::Float64, ::Bool, ::NLsolve.#nlsolve, ::NLsolve.DifferentiableMultivariateFunction, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/NLsolve/src/nlsolve_func_defs.jl:24
 [5] NLSOLVEJL_SETUP at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/misc_utils.jl:51 [inlined]
 [6] perform_step! at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/integrators/implicit_integrators.jl:126 [inlined]
 [7] perform_step! at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/integrators/implicit_integrators.jl:114 [inlined]
 [8] solve!(::OrdinaryDiffEq.ODEIntegrator{OrdinaryDiffEq.Trapezoid{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}},Array{Float64,2},Float64,Float64,Float64,Array{Array{Float64,2},1},DiffEqBase.ODESolution{Float64,3,Array{Array{Float64,2},1},Array{Array{Float64,2},1},Dict{Symbol,Float64},Array{Float64,1},Array{Array{Array{Float64,2},1},1},DiffEqBase.ODEProblem{Array{Float64,2},Float64,true,DiffEqProblemLibrary.##5#6,Void,UniformScaling{Int64}},OrdinaryDiffEq.Trapezoid{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}},OrdinaryDiffEq.InterpolationData{DiffEqProblemLibrary.##5#6,Array{Array{Float64,2},1},Array{Float64,1},Array{Array{Array{Float64,2},1},1},OrdinaryDiffEq.TrapezoidCache{Array{Float64,2},Array{Float64,2},Array{Float64,1},OrdinaryDiffEq.DiffCache{Float64,ForwardDiff.Dual{8,Float64}},Array{Float64,2},OrdinaryDiffEq.RHS_Trap{DiffEqProblemLibrary.##5#6,Array{Float64,2},Array{Float64,2},Float64,Tuple{Int64,Int64},OrdinaryDiffEq.DiffCache{Float64,ForwardDiff.Dual{8,Float64}},Base.OneTo{Int64}},NLsolve.DifferentiableMultivariateFunction}}},Array{Float64,2},DiffEqProblemLibrary.##5#6,Void,OrdinaryDiffEq.TrapezoidCache{Array{Float64,2},Array{Float64,2},Array{Float64,1},OrdinaryDiffEq.DiffCache{Float64,ForwardDiff.Dual{8,Float64}},Array{Float64,2},OrdinaryDiffEq.RHS_Trap{DiffEqProblemLibrary.##5#6,Array{Float64,2},Array{Float64,2},Float64,Tuple{Int64,Int64},OrdinaryDiffEq.DiffCache{Float64,ForwardDiff.Dual{8,Float64}},Base.OneTo{Int64}},NLsolve.DifferentiableMultivariateFunction},OrdinaryDiffEq.DEOptions{Float64,Float64,Float64,Float64,DiffEqBase.#ODE_DEFAULT_NORM,DiffEqBase.CallbackSet{Tuple{},Tuple{}},DiffEqBase.#ODE_DEFAULT_ISOUTOFDOMAIN,DiffEqBase.#ODE_DEFAULT_PROG_MESSAGE,DiffEqBase.#ODE_DEFAULT_UNSTABLE_CHECK,DataStructures.BinaryHeap{Float64,DataStructures.LessThan},Void,Void},Array{Float64,2}}) at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/solve.jl:308
 [9] #solve#87(::Array{Any,1}, ::Function, ::DiffEqBase.ODEProblem{Array{Float64,2},Float64,true,DiffEqProblemLibrary.##5#6,Void,UniformScaling{Int64}}, ::OrdinaryDiffEq.Trapezoid{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/solve.jl:7
 [10] (::DiffEqBase.#kw##solve)(::Array{Any,1}, ::DiffEqBase.#solve, ::DiffEqBase.ODEProblem{Array{Float64,2},Float64,true,DiffEqProblemLibrary.##5#6,Void,UniformScaling{Int64}}, ::OrdinaryDiffEq.Trapezoid{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at ./<missing>:0 (repeats 2 times)
 [11] include_from_node1(::String) at ./loading.jl:552
 [12] include(::String) at ./sysimg.jl:14
 [13] macro expansion at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/test/runtests.jl:34 [inlined]
 [14] macro expansion at ./test.jl:856 [inlined]
 [15] macro expansion at ./util.jl:237 [inlined]
 [16] anonymous at ./<missing>:?
 [17] include_from_node1(::String) at ./loading.jl:552
 [18] include(::String) at ./sysimg.jl:14
 [19] process_options(::Base.JLOptions) at ./client.jl:305
 [20] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/OrdinaryDiffEq/test/ode/ode_saveat_tests.jl, in expression starting on line 75
WARNING: !(B::BitArray) is deprecated, use .!(B) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] !(::BitArray{1}) at ./deprecated.jl:51
 [3] check_isfinite(::Array{Float64,1}) at /home/vagrant/.julia/v0.6/NLsolve/src/utils.jl:32
 [4] trust_region_(::NLsolve.DifferentiableMultivariateFunction, ::Array{Float64,1}, ::Float64, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::Float64, ::Bool) at /home/vagrant/.julia/v0.6/NLsolve/src/trust_region.jl:91
 [5] #nlsolve#17(::Symbol, ::Float64, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::Function, ::Float64, ::Bool, ::NLsolve.#nlsolve, ::NLsolve.DifferentiableMultivariateFunction, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/NLsolve/src/nlsolve_func_defs.jl:24
 [6] NLSOLVEJL_SETUP at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/misc_utils.jl:51 [inlined]
 [7] perform_step! at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/integrators/implicit_integrators.jl:126 [inlined]
 [8] perform_step! at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/integrators/implicit_integrators.jl:114 [inlined]
 [9] solve!(::OrdinaryDiffEq.ODEIntegrator{OrdinaryDiffEq.Trapezoid{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}},Array{Float64,2},Float64,Float64,Float64,Array{Array{Float64,2},1},DiffEqBase.ODESolution{Float64,3,Array{Array{Float64,2},1},Array{Array{Float64,2},1},Dict{Symbol,Float64},Array{Float64,1},Array{Array{Array{Float64,2},1},1},DiffEqBase.ODEProblem{Array{Float64,2},Float64,true,DiffEqProblemLibrary.##5#6,Void,UniformScaling{Int64}},OrdinaryDiffEq.Trapezoid{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}},OrdinaryDiffEq.InterpolationData{DiffEqProblemLibrary.##5#6,Array{Array{Float64,2},1},Array{Float64,1},Array{Array{Array{Float64,2},1},1},OrdinaryDiffEq.TrapezoidCache{Array{Float64,2},Array{Float64,2},Array{Float64,1},OrdinaryDiffEq.DiffCache{Float64,ForwardDiff.Dual{8,Float64}},Array{Float64,2},OrdinaryDiffEq.RHS_Trap{DiffEqProblemLibrary.##5#6,Array{Float64,2},Array{Float64,2},Float64,Tuple{Int64,Int64},OrdinaryDiffEq.DiffCache{Float64,ForwardDiff.Dual{8,Float64}},Base.OneTo{Int64}},NLsolve.DifferentiableMultivariateFunction}}},Array{Float64,2},DiffEqProblemLibrary.##5#6,Void,OrdinaryDiffEq.TrapezoidCache{Array{Float64,2},Array{Float64,2},Array{Float64,1},OrdinaryDiffEq.DiffCache{Float64,ForwardDiff.Dual{8,Float64}},Array{Float64,2},OrdinaryDiffEq.RHS_Trap{DiffEqProblemLibrary.##5#6,Array{Float64,2},Array{Float64,2},Float64,Tuple{Int64,Int64},OrdinaryDiffEq.DiffCache{Float64,ForwardDiff.Dual{8,Float64}},Base.OneTo{Int64}},NLsolve.DifferentiableMultivariateFunction},OrdinaryDiffEq.DEOptions{Float64,Float64,Float64,Float64,DiffEqBase.#ODE_DEFAULT_NORM,DiffEqBase.CallbackSet{Tuple{},Tuple{}},DiffEqBase.#ODE_DEFAULT_ISOUTOFDOMAIN,DiffEqBase.#ODE_DEFAULT_PROG_MESSAGE,DiffEqBase.#ODE_DEFAULT_UNSTABLE_CHECK,DataStructures.BinaryHeap{Float64,DataStructures.LessThan},Void,Void},Array{Float64,2}}) at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/solve.jl:308
 [10] #solve#87(::Array{Any,1}, ::Function, ::DiffEqBase.ODEProblem{Array{Float64,2},Float64,true,DiffEqProblemLibrary.##5#6,Void,UniformScaling{Int64}}, ::OrdinaryDiffEq.Trapezoid{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/solve.jl:7
 [11] (::DiffEqBase.#kw##solve)(::Array{Any,1}, ::DiffEqBase.#solve, ::DiffEqBase.ODEProblem{Array{Float64,2},Float64,true,DiffEqProblemLibrary.##5#6,Void,UniformScaling{Int64}}, ::OrdinaryDiffEq.Trapezoid{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at ./<missing>:0 (repeats 2 times)
 [12] include_from_node1(::String) at ./loading.jl:552
 [13] include(::String) at ./sysimg.jl:14
 [14] macro expansion at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/test/runtests.jl:34 [inlined]
 [15] macro expansion at ./test.jl:856 [inlined]
 [16] macro expansion at ./util.jl:237 [inlined]
 [17] anonymous at ./<missing>:?
 [18] include_from_node1(::String) at ./loading.jl:552
 [19] include(::String) at ./sysimg.jl:14
 [20] process_options(::Base.JLOptions) at ./client.jl:305
 [21] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/OrdinaryDiffEq/test/ode/ode_saveat_tests.jl, in expression starting on line 75
WARNING: Array{T}(::Type{T}, m::Int) is deprecated, use Array{T}(m) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] Array(::Type{NLsolve.SolverState}, ::Int64) at ./deprecated.jl:51
 [3] Type at /home/vagrant/.julia/v0.6/NLsolve/src/solver_state_results.jl:20 [inlined]
 [4] trust_region_(::NLsolve.DifferentiableMultivariateFunction, ::Array{Float64,1}, ::Float64, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::Float64, ::Bool) at /home/vagrant/.julia/v0.6/NLsolve/src/trust_region.jl:99
 [5] #nlsolve#17(::Symbol, ::Float64, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::Function, ::Float64, ::Bool, ::NLsolve.#nlsolve, ::NLsolve.DifferentiableMultivariateFunction, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/NLsolve/src/nlsolve_func_defs.jl:24
 [6] NLSOLVEJL_SETUP at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/misc_utils.jl:51 [inlined]
 [7] perform_step! at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/integrators/implicit_integrators.jl:126 [inlined]
 [8] perform_step! at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/integrators/implicit_integrators.jl:114 [inlined]
 [9] solve!(::OrdinaryDiffEq.ODEIntegrator{OrdinaryDiffEq.Trapezoid{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}},Array{Float64,2},Float64,Float64,Float64,Array{Array{Float64,2},1},DiffEqBase.ODESolution{Float64,3,Array{Array{Float64,2},1},Array{Array{Float64,2},1},Dict{Symbol,Float64},Array{Float64,1},Array{Array{Array{Float64,2},1},1},DiffEqBase.ODEProblem{Array{Float64,2},Float64,true,DiffEqProblemLibrary.##5#6,Void,UniformScaling{Int64}},OrdinaryDiffEq.Trapezoid{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}},OrdinaryDiffEq.InterpolationData{DiffEqProblemLibrary.##5#6,Array{Array{Float64,2},1},Array{Float64,1},Array{Array{Array{Float64,2},1},1},OrdinaryDiffEq.TrapezoidCache{Array{Float64,2},Array{Float64,2},Array{Float64,1},OrdinaryDiffEq.DiffCache{Float64,ForwardDiff.Dual{8,Float64}},Array{Float64,2},OrdinaryDiffEq.RHS_Trap{DiffEqProblemLibrary.##5#6,Array{Float64,2},Array{Float64,2},Float64,Tuple{Int64,Int64},OrdinaryDiffEq.DiffCache{Float64,ForwardDiff.Dual{8,Float64}},Base.OneTo{Int64}},NLsolve.DifferentiableMultivariateFunction}}},Array{Float64,2},DiffEqProblemLibrary.##5#6,Void,OrdinaryDiffEq.TrapezoidCache{Array{Float64,2},Array{Float64,2},Array{Float64,1},OrdinaryDiffEq.DiffCache{Float64,ForwardDiff.Dual{8,Float64}},Array{Float64,2},OrdinaryDiffEq.RHS_Trap{DiffEqProblemLibrary.##5#6,Array{Float64,2},Array{Float64,2},Float64,Tuple{Int64,Int64},OrdinaryDiffEq.DiffCache{Float64,ForwardDiff.Dual{8,Float64}},Base.OneTo{Int64}},NLsolve.DifferentiableMultivariateFunction},OrdinaryDiffEq.DEOptions{Float64,Float64,Float64,Float64,DiffEqBase.#ODE_DEFAULT_NORM,DiffEqBase.CallbackSet{Tuple{},Tuple{}},DiffEqBase.#ODE_DEFAULT_ISOUTOFDOMAIN,DiffEqBase.#ODE_DEFAULT_PROG_MESSAGE,DiffEqBase.#ODE_DEFAULT_UNSTABLE_CHECK,DataStructures.BinaryHeap{Float64,DataStructures.LessThan},Void,Void},Array{Float64,2}}) at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/solve.jl:308
 [10] #solve#87(::Array{Any,1}, ::Function, ::DiffEqBase.ODEProblem{Array{Float64,2},Float64,true,DiffEqProblemLibrary.##5#6,Void,UniformScaling{Int64}}, ::OrdinaryDiffEq.Trapezoid{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/solve.jl:7
 [11] (::DiffEqBase.#kw##solve)(::Array{Any,1}, ::DiffEqBase.#solve, ::DiffEqBase.ODEProblem{Array{Float64,2},Float64,true,DiffEqProblemLibrary.##5#6,Void,UniformScaling{Int64}}, ::OrdinaryDiffEq.Trapezoid{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at ./<missing>:0 (repeats 2 times)
 [12] include_from_node1(::String) at ./loading.jl:552
 [13] include(::String) at ./sysimg.jl:14
 [14] macro expansion at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/test/runtests.jl:34 [inlined]
 [15] macro expansion at ./test.jl:856 [inlined]
 [16] macro expansion at ./util.jl:237 [inlined]
 [17] anonymous at ./<missing>:?
 [18] include_from_node1(::String) at ./loading.jl:552
 [19] include(::String) at ./sysimg.jl:14
 [20] process_options(::Base.JLOptions) at ./client.jl:305
 [21] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/OrdinaryDiffEq/test/ode/ode_saveat_tests.jl, in expression starting on line 75
WARNING: Array{T}(::Type{T}, m::Int, n::Int) is deprecated, use Array{T}(m, n) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] Array(::Type{Float64}, ::Int64, ::Int64) at ./deprecated.jl:51
 [3] trust_region_(::NLsolve.DifferentiableMultivariateFunction, ::Array{Float64,1}, ::Float64, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::Float64, ::Bool) at /home/vagrant/.julia/v0.6/NLsolve/src/trust_region.jl:82
 [4] #nlsolve#17(::Symbol, ::Float64, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::Function, ::Float64, ::Bool, ::NLsolve.#nlsolve, ::NLsolve.DifferentiableMultivariateFunction, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/NLsolve/src/nlsolve_func_defs.jl:24
 [5] NLSOLVEJL_SETUP at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/misc_utils.jl:51 [inlined]
 [6] perform_step! at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/integrators/implicit_integrators.jl:126 [inlined]
 [7] perform_step! at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/integrators/implicit_integrators.jl:114 [inlined]
 [8] solve!(::OrdinaryDiffEq.ODEIntegrator{OrdinaryDiffEq.Trapezoid{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}},Array{Float64,2},Float64,Float64,Float64,Array{Array{Float64,2},1},DiffEqBase.ODESolution{Float64,3,Array{Array{Float64,2},1},Array{Array{Float64,2},1},Dict{Symbol,Float64},Array{Float64,1},Array{Array{Array{Float64,2},1},1},DiffEqBase.ODEProblem{Array{Float64,2},Float64,true,DiffEqProblemLibrary.##5#6,Void,UniformScaling{Int64}},OrdinaryDiffEq.Trapezoid{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}},OrdinaryDiffEq.InterpolationData{DiffEqProblemLibrary.##5#6,Array{Array{Float64,2},1},Array{Float64,1},Array{Array{Array{Float64,2},1},1},OrdinaryDiffEq.TrapezoidCache{Array{Float64,2},Array{Float64,2},Array{Float64,1},OrdinaryDiffEq.DiffCache{Float64,ForwardDiff.Dual{8,Float64}},Array{Float64,2},OrdinaryDiffEq.RHS_Trap{DiffEqProblemLibrary.##5#6,Array{Float64,2},Array{Float64,2},Float64,Tuple{Int64,Int64},OrdinaryDiffEq.DiffCache{Float64,ForwardDiff.Dual{8,Float64}},Base.OneTo{Int64}},NLsolve.DifferentiableMultivariateFunction}}},Array{Float64,2},DiffEqProblemLibrary.##5#6,Void,OrdinaryDiffEq.TrapezoidCache{Array{Float64,2},Array{Float64,2},Array{Float64,1},OrdinaryDiffEq.DiffCache{Float64,ForwardDiff.Dual{8,Float64}},Array{Float64,2},OrdinaryDiffEq.RHS_Trap{DiffEqProblemLibrary.##5#6,Array{Float64,2},Array{Float64,2},Float64,Tuple{Int64,Int64},OrdinaryDiffEq.DiffCache{Float64,ForwardDiff.Dual{8,Float64}},Base.OneTo{Int64}},NLsolve.DifferentiableMultivariateFunction},OrdinaryDiffEq.DEOptions{Float64,Float64,Float64,Float64,DiffEqBase.#ODE_DEFAULT_NORM,DiffEqBase.CallbackSet{Tuple{},Tuple{}},DiffEqBase.#ODE_DEFAULT_ISOUTOFDOMAIN,DiffEqBase.#ODE_DEFAULT_PROG_MESSAGE,DiffEqBase.#ODE_DEFAULT_UNSTABLE_CHECK,DataStructures.BinaryHeap{Float64,DataStructures.LessThan},Void,Void},Array{Float64,2}}) at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/solve.jl:308
 [9] #solve#87(::Array{Any,1}, ::Function, ::DiffEqBase.ODEProblem{Array{Float64,2},Float64,true,DiffEqProblemLibrary.##5#6,Void,UniformScaling{Int64}}, ::OrdinaryDiffEq.Trapezoid{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/solve.jl:7
 [10] (::DiffEqBase.#kw##solve)(::Array{Any,1}, ::DiffEqBase.#solve, ::DiffEqBase.ODEProblem{Array{Float64,2},Float64,true,DiffEqProblemLibrary.##5#6,Void,UniformScaling{Int64}}, ::OrdinaryDiffEq.Trapezoid{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at ./<missing>:0 (repeats 2 times)
 [11] include_from_node1(::String) at ./loading.jl:552
 [12] include(::String) at ./sysimg.jl:14
 [13] macro expansion at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/test/runtests.jl:34 [inlined]
 [14] macro expansion at ./test.jl:856 [inlined]
 [15] macro expansion at ./util.jl:237 [inlined]
 [16] anonymous at ./<missing>:?
 [17] include_from_node1(::String) at ./loading.jl:552
 [18] include(::String) at ./sysimg.jl:14
 [19] process_options(::Base.JLOptions) at ./client.jl:305
 [20] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/OrdinaryDiffEq/test/ode/ode_saveat_tests.jl, in expression starting on line 79
WARNING: !(B::BitArray) is deprecated, use .!(B) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] !(::BitArray{1}) at ./deprecated.jl:51
 [3] check_isfinite(::Array{Float64,1}) at /home/vagrant/.julia/v0.6/NLsolve/src/utils.jl:32
 [4] trust_region_(::NLsolve.DifferentiableMultivariateFunction, ::Array{Float64,1}, ::Float64, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::Float64, ::Bool) at /home/vagrant/.julia/v0.6/NLsolve/src/trust_region.jl:91
 [5] #nlsolve#17(::Symbol, ::Float64, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::Function, ::Float64, ::Bool, ::NLsolve.#nlsolve, ::NLsolve.DifferentiableMultivariateFunction, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/NLsolve/src/nlsolve_func_defs.jl:24
 [6] NLSOLVEJL_SETUP at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/misc_utils.jl:51 [inlined]
 [7] perform_step! at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/integrators/implicit_integrators.jl:126 [inlined]
 [8] perform_step! at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/integrators/implicit_integrators.jl:114 [inlined]
 [9] solve!(::OrdinaryDiffEq.ODEIntegrator{OrdinaryDiffEq.Trapezoid{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}},Array{Float64,2},Float64,Float64,Float64,Array{Array{Float64,2},1},DiffEqBase.ODESolution{Float64,3,Array{Array{Float64,2},1},Array{Array{Float64,2},1},Dict{Symbol,Float64},Array{Float64,1},Array{Array{Array{Float64,2},1},1},DiffEqBase.ODEProblem{Array{Float64,2},Float64,true,DiffEqProblemLibrary.##5#6,Void,UniformScaling{Int64}},OrdinaryDiffEq.Trapezoid{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}},OrdinaryDiffEq.InterpolationData{DiffEqProblemLibrary.##5#6,Array{Array{Float64,2},1},Array{Float64,1},Array{Array{Array{Float64,2},1},1},OrdinaryDiffEq.TrapezoidCache{Array{Float64,2},Array{Float64,2},Array{Float64,1},OrdinaryDiffEq.DiffCache{Float64,ForwardDiff.Dual{8,Float64}},Array{Float64,2},OrdinaryDiffEq.RHS_Trap{DiffEqProblemLibrary.##5#6,Array{Float64,2},Array{Float64,2},Float64,Tuple{Int64,Int64},OrdinaryDiffEq.DiffCache{Float64,ForwardDiff.Dual{8,Float64}},Base.OneTo{Int64}},NLsolve.DifferentiableMultivariateFunction}}},Array{Float64,2},DiffEqProblemLibrary.##5#6,Void,OrdinaryDiffEq.TrapezoidCache{Array{Float64,2},Array{Float64,2},Array{Float64,1},OrdinaryDiffEq.DiffCache{Float64,ForwardDiff.Dual{8,Float64}},Array{Float64,2},OrdinaryDiffEq.RHS_Trap{DiffEqProblemLibrary.##5#6,Array{Float64,2},Array{Float64,2},Float64,Tuple{Int64,Int64},OrdinaryDiffEq.DiffCache{Float64,ForwardDiff.Dual{8,Float64}},Base.OneTo{Int64}},NLsolve.DifferentiableMultivariateFunction},OrdinaryDiffEq.DEOptions{Float64,Float64,Float64,Float64,DiffEqBase.#ODE_DEFAULT_NORM,DiffEqBase.CallbackSet{Tuple{},Tuple{}},DiffEqBase.#ODE_DEFAULT_ISOUTOFDOMAIN,DiffEqBase.#ODE_DEFAULT_PROG_MESSAGE,DiffEqBase.#ODE_DEFAULT_UNSTABLE_CHECK,DataStructures.BinaryHeap{Float64,DataStructures.LessThan},Void,Void},Array{Float64,2}}) at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/solve.jl:308
 [10] #solve#87(::Array{Any,1}, ::Function, ::DiffEqBase.ODEProblem{Array{Float64,2},Float64,true,DiffEqProblemLibrary.##5#6,Void,UniformScaling{Int64}}, ::OrdinaryDiffEq.Trapezoid{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/solve.jl:7
 [11] (::DiffEqBase.#kw##solve)(::Array{Any,1}, ::DiffEqBase.#solve, ::DiffEqBase.ODEProblem{Array{Float64,2},Float64,true,DiffEqProblemLibrary.##5#6,Void,UniformScaling{Int64}}, ::OrdinaryDiffEq.Trapezoid{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at ./<missing>:0 (repeats 2 times)
 [12] include_from_node1(::String) at ./loading.jl:552
 [13] include(::String) at ./sysimg.jl:14
 [14] macro expansion at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/test/runtests.jl:34 [inlined]
 [15] macro expansion at ./test.jl:856 [inlined]
 [16] macro expansion at ./util.jl:237 [inlined]
 [17] anonymous at ./<missing>:?
 [18] include_from_node1(::String) at ./loading.jl:552
 [19] include(::String) at ./sysimg.jl:14
 [20] process_options(::Base.JLOptions) at ./client.jl:305
 [21] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/OrdinaryDiffEq/test/ode/ode_saveat_tests.jl, in expression starting on line 79
WARNING: Array{T}(::Type{T}, m::Int) is deprecated, use Array{T}(m) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] Array(::Type{NLsolve.SolverState}, ::Int64) at ./deprecated.jl:51
 [3] Type at /home/vagrant/.julia/v0.6/NLsolve/src/solver_state_results.jl:20 [inlined]
 [4] trust_region_(::NLsolve.DifferentiableMultivariateFunction, ::Array{Float64,1}, ::Float64, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::Float64, ::Bool) at /home/vagrant/.julia/v0.6/NLsolve/src/trust_region.jl:99
 [5] #nlsolve#17(::Symbol, ::Float64, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::Function, ::Float64, ::Bool, ::NLsolve.#nlsolve, ::NLsolve.DifferentiableMultivariateFunction, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/NLsolve/src/nlsolve_func_defs.jl:24
 [6] NLSOLVEJL_SETUP at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/misc_utils.jl:51 [inlined]
 [7] perform_step! at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/integrators/implicit_integrators.jl:126 [inlined]
 [8] perform_step! at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/integrators/implicit_integrators.jl:114 [inlined]
 [9] solve!(::OrdinaryDiffEq.ODEIntegrator{OrdinaryDiffEq.Trapezoid{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}},Array{Float64,2},Float64,Float64,Float64,Array{Array{Float64,2},1},DiffEqBase.ODESolution{Float64,3,Array{Array{Float64,2},1},Array{Array{Float64,2},1},Dict{Symbol,Float64},Array{Float64,1},Array{Array{Array{Float64,2},1},1},DiffEqBase.ODEProblem{Array{Float64,2},Float64,true,DiffEqProblemLibrary.##5#6,Void,UniformScaling{Int64}},OrdinaryDiffEq.Trapezoid{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}},OrdinaryDiffEq.InterpolationData{DiffEqProblemLibrary.##5#6,Array{Array{Float64,2},1},Array{Float64,1},Array{Array{Array{Float64,2},1},1},OrdinaryDiffEq.TrapezoidCache{Array{Float64,2},Array{Float64,2},Array{Float64,1},OrdinaryDiffEq.DiffCache{Float64,ForwardDiff.Dual{8,Float64}},Array{Float64,2},OrdinaryDiffEq.RHS_Trap{DiffEqProblemLibrary.##5#6,Array{Float64,2},Array{Float64,2},Float64,Tuple{Int64,Int64},OrdinaryDiffEq.DiffCache{Float64,ForwardDiff.Dual{8,Float64}},Base.OneTo{Int64}},NLsolve.DifferentiableMultivariateFunction}}},Array{Float64,2},DiffEqProblemLibrary.##5#6,Void,OrdinaryDiffEq.TrapezoidCache{Array{Float64,2},Array{Float64,2},Array{Float64,1},OrdinaryDiffEq.DiffCache{Float64,ForwardDiff.Dual{8,Float64}},Array{Float64,2},OrdinaryDiffEq.RHS_Trap{DiffEqProblemLibrary.##5#6,Array{Float64,2},Array{Float64,2},Float64,Tuple{Int64,Int64},OrdinaryDiffEq.DiffCache{Float64,ForwardDiff.Dual{8,Float64}},Base.OneTo{Int64}},NLsolve.DifferentiableMultivariateFunction},OrdinaryDiffEq.DEOptions{Float64,Float64,Float64,Float64,DiffEqBase.#ODE_DEFAULT_NORM,DiffEqBase.CallbackSet{Tuple{},Tuple{}},DiffEqBase.#ODE_DEFAULT_ISOUTOFDOMAIN,DiffEqBase.#ODE_DEFAULT_PROG_MESSAGE,DiffEqBase.#ODE_DEFAULT_UNSTABLE_CHECK,DataStructures.BinaryHeap{Float64,DataStructures.LessThan},Void,Void},Array{Float64,2}}) at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/solve.jl:308
 [10] #solve#87(::Array{Any,1}, ::Function, ::DiffEqBase.ODEProblem{Array{Float64,2},Float64,true,DiffEqProblemLibrary.##5#6,Void,UniformScaling{Int64}}, ::OrdinaryDiffEq.Trapezoid{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/solve.jl:7
 [11] (::DiffEqBase.#kw##solve)(::Array{Any,1}, ::DiffEqBase.#solve, ::DiffEqBase.ODEProblem{Array{Float64,2},Float64,true,DiffEqProblemLibrary.##5#6,Void,UniformScaling{Int64}}, ::OrdinaryDiffEq.Trapezoid{OrdinaryDiffEq.NLSOLVEJL_SETUP{0,true}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at ./<missing>:0 (repeats 2 times)
 [12] include_from_node1(::String) at ./loading.jl:552
 [13] include(::String) at ./sysimg.jl:14
 [14] macro expansion at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/test/runtests.jl:34 [inlined]
 [15] macro expansion at ./test.jl:856 [inlined]
 [16] macro expansion at ./util.jl:237 [inlined]
 [17] anonymous at ./<missing>:?
 [18] include_from_node1(::String) at ./loading.jl:552
 [19] include(::String) at ./sysimg.jl:14
 [20] process_options(::Base.JLOptions) at ./client.jl:305
 [21] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/OrdinaryDiffEq/test/ode/ode_saveat_tests.jl, in expression starting on line 79
Test Summary: | Pass  Total
saveat Tests  |   31     31
 10.109060 seconds (3.98 M allocations: 834.142 MiB, 4.14% gc time)
Test Summary:     | Pass  Total
Number Type Tests |    5      5
 15.042186 seconds (5.24 M allocations: 974.565 MiB, 3.74% gc time)
Test Summary:      |
Static Array Tests | No tests
 11.711523 seconds (3.75 M allocations: 495.622 MiB, 3.32% gc time)
Test Summary:    | Pass  Total
Data Array Tests |   10     10
 17.474315 seconds (5.52 M allocations: 792.853 MiB, 3.22% gc time)
Test Summary:      | Pass  Total
Ndim Complex Tests |    1      1
  8.985365 seconds (3.67 M allocations: 399.194 MiB, 6.11% gc time)
(tprev, t) = (0.0, 0.0625)
(tprev, t) = (0.0625, 0.2749005911245672)
(tprev, t) = (0.2749005911245672, 0.5)
(tprev, t) = (0.5, 0.8314901263174446)
(tprev, t) = (0.8314901263174446, 1.0)
Test Summary:  | Pass  Total
Iterator Tests |   14     14
 10.259893 seconds (2.96 M allocations: 431.736 MiB, 2.36% gc time)
  1.462931 seconds (696.12 k allocations: 109.643 MiB, 4.29% gc time)
  0.288950 seconds (320.21 k allocations: 91.034 MiB, 14.20% gc time)
Test Summary:             | Pass  Total
Composite Algorithm Tests |    3      3
  8.918265 seconds (3.69 M allocations: 556.541 MiB, 3.56% gc time)
elapsed time: 616.887315823 seconds
INFO: OrdinaryDiffEq tests passed
INFO: Removing BinDeps v0.5.0
INFO: Removing Blosc v0.2.1
INFO: Removing ChunkedArrays v0.1.1
INFO: Removing Conda v0.5.3
INFO: Removing DiffEqDevTools v0.8.1
INFO: Removing DiffEqPDEBase v0.3.2
INFO: Removing DiffEqProblemLibrary v0.7.0
INFO: Removing Distributions v0.12.5
INFO: Removing EllipsisNotation v0.1.0
INFO: Removing FileIO v0.3.1
INFO: Removing HDF5 v0.8.1
INFO: Removing JLD v0.6.10
INFO: Removing LegacyStrings v0.2.1
INFO: Removing ODEInterface v0.1.2
INFO: Removing ODEInterfaceDiffEq v0.4.1
INFO: Removing PDMats v0.6.0
INFO: Removing ParameterizedFunctions v2.0.0
INFO: Removing QuadGK v0.1.2
INFO: Removing Rmath v0.1.6
INFO: Removing SHA v0.3.2
INFO: Removing SpecialMatrices v0.1.3
INFO: Removing StatsBase v0.14.1
INFO: Removing StatsFuns v0.5.0
INFO: Removing SymEngine v0.2.0
INFO: Removing URIParser v0.1.8
INFO: Removing Unitful v0.2.3
INFO: Removing VectorizedRoutines v0.0.2

>>> End of log
