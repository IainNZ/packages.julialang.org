>>> 'Pkg.add("OrdinaryDiffEq")' log
INFO: Installing CommonSubexpressions v0.0.1
INFO: Installing DataStructures v0.7.4
INFO: Installing DiffBase v0.3.2
INFO: Installing DiffEqBase v3.6.0
INFO: Installing DiffEqDiffTools v0.4.0
INFO: Installing DiffResults v0.0.3
INFO: Installing DiffRules v0.0.3
INFO: Installing Distances v0.5.0
INFO: Installing ForwardDiff v0.7.3
INFO: Installing FunctionWrappers v0.1.0
INFO: Installing GenericSVD v0.1.0
INFO: Installing IteratorInterfaceExtensions v0.0.2
INFO: Installing Juno v0.4.0
INFO: Installing LineSearches v3.2.5
INFO: Installing LinearMaps v1.0.4
INFO: Installing MacroTools v0.4.0
INFO: Installing Media v0.3.0
INFO: Installing Missings v0.2.6
INFO: Installing MuladdMacro v0.0.2
INFO: Installing NLSolversBase v4.2.1
INFO: Installing NLsolve v1.0.0
INFO: Installing NamedTuples v4.0.0
INFO: Installing OrdinaryDiffEq v3.1.1
INFO: Installing Parameters v0.8.1
INFO: Installing RecipesBase v0.2.3
INFO: Installing RecursiveArrayTools v0.14.6
INFO: Installing Roots v0.5.0
INFO: Installing SimpleTraits v0.5.1
INFO: Installing SpecialFunctions v0.3.8
INFO: Installing StaticArrays v0.6.6
INFO: Installing TableTraits v0.1.0
INFO: Building DiffEqBase
INFO: ~~~ DifferentialEquations.jl *BREAKING* changes  ~~~

We have changed the front-end API on how
users may define equations of motion and 
problems, for all problem types that can
be used in the DifferentialEquations.jl.
These are *BREAKING* changes, and they
also have *NO WARNINGS*!

Please see our latest documentation here:
http://docs.juliadiffeq.org/latest/

or the blogpost that describes the changes:
http://juliadiffeq.org/2018/01/24/Parameters.html

In short, the mutated argument is the first argument,
and parameters are now directly passed
into the equations of motion function. For all
types now mutation goes first, then dependent variables, 
then parameters, then independent variables. 

`f(mutated, dependent variables, p/integrator, independent variables)`

For example, this means that the ODE syntax will be `f(u,p,t)` (for the
out-of-place) and `f(du,u,p,t)` (for the in-place). Notice
that this change also removes the need for ParameterizedFunctions
as now parameters are part of the equations of motion.

For more details please visit the above links!
INFO: Building SpecialFunctions
INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of OrdinaryDiffEq
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("OrdinaryDiffEq")' log
Julia Version 0.6.2
Commit d386e40c17 (2017-12-13 18:08 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-135-generic #184-Ubuntu SMP Wed Oct 18 11:55:51 UTC 2017 x86_64 x86_64
Memory: 2.93927001953125 GB (780.46484375 MB free)
Uptime: 90786.0 sec
Load Avg:  1.00830078125  1.03564453125  1.04541015625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz    5830272 s       7661 s     288682 s    1593374 s         86 s
#2  3499 MHz    1463934 s        350 s     124347 s    7361335 s          1 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.6
2 required packages:
 - JSON                          0.16.4
 - OrdinaryDiffEq                3.1.1
47 additional packages:
 - BinDeps                       0.8.6
 - Cairo                         0.5.0
 - ColorTypes                    0.6.7
 - Colors                        0.8.2
 - CommonSubexpressions          0.0.1
 - Compat                        0.54.0
 - DataStructures                0.7.4
 - DiffBase                      0.3.2
 - DiffEqBase                    3.6.0
 - DiffEqDiffTools               0.4.0
 - DiffResults                   0.0.3
 - DiffRules                     0.0.3
 - Distances                     0.5.0
 - FixedPointNumbers             0.4.6
 - ForwardDiff                   0.7.3
 - FunctionWrappers              0.1.0
 - GenericSVD                    0.1.0
 - Graphics                      0.2.0
 - Gtk                           0.13.1
 - IteratorInterfaceExtensions   0.0.2
 - Juno                          0.4.0
 - LineSearches                  3.2.5
 - LinearMaps                    1.0.4
 - MacroTools                    0.4.0
 - Media                         0.3.0
 - Missings                      0.2.6
 - MuladdMacro                   0.0.2
 - NLSolversBase                 4.2.1
 - NLsolve                       1.0.0
 - NaNMath                       0.3.1
 - NamedTuples                   4.0.0
 - NodeJS                        0.2.0
 - Nullables                     0.0.3
 - Parameters                    0.8.1
 - RecipesBase                   0.2.3
 - RecursiveArrayTools           0.14.6
 - Reexport                      0.1.0
 - Requires                      0.4.3
 - Roots                         0.5.0
 - Rsvg                          0.2.0
 - SHA                           0.5.6
 - SimpleTraits                  0.5.1
 - SpecialFunctions              0.3.8
 - StaticArrays                  0.6.6
 - TableTraits                   0.1.0
 - URIParser                     0.3.0
 - VegaLite                      0.1.0              ecb31725 (dirty)
INFO: Computing test dependencies for OrdinaryDiffEq...
INFO: Cloning cache of DiffEqOperators from https://github.com/JuliaDiffEq/DiffEqOperators.jl.git
INFO: Cloning cache of SpecialMatrices from https://github.com/jiahao/SpecialMatrices.jl.git
INFO: Installing Calculus v0.2.2
INFO: Installing ChunkedArrays v0.1.1
INFO: Installing Conda v0.7.1
INFO: Installing DiffEqCallbacks v1.0.0
INFO: Installing DiffEqDevTools v1.0.0
INFO: Installing DiffEqMonteCarlo v0.10.0
INFO: Installing DiffEqNoiseProcess v1.0.0
INFO: Installing DiffEqOperators v1.0.0
INFO: Installing DiffEqPDEBase v0.4.0
INFO: Installing DiffEqProblemLibrary v1.0.0
INFO: Installing DistributedArrays v0.4.0
INFO: Installing Distributions v0.15.0
INFO: Installing EllipsisNotation v0.3.0
INFO: Installing PDMats v0.8.0
INFO: Installing ParameterizedFunctions v3.0.0
INFO: Installing Primes v0.2.0
INFO: Installing QuadGK v0.2.0
INFO: Installing RandomNumbers v0.1.1
INFO: Installing ResettableStacks v0.3.1
INFO: Installing Rmath v0.3.2
INFO: Installing SortingAlgorithms v0.2.0
INFO: Installing SpecialMatrices v0.1.3
INFO: Installing StatsBase v0.20.0
INFO: Installing StatsFuns v0.5.0
INFO: Installing SymEngine v0.3.0
INFO: Installing VectorizedRoutines v0.0.2
INFO: Building Conda
INFO: Building SpecialFunctions
INFO: Building DiffEqBase
INFO: ~~~ DifferentialEquations.jl *BREAKING* changes  ~~~

We have changed the front-end API on how
users may define equations of motion and 
problems, for all problem types that can
be used in the DifferentialEquations.jl.
These are *BREAKING* changes, and they
also have *NO WARNINGS*!

Please see our latest documentation here:
http://docs.juliadiffeq.org/latest/

or the blogpost that describes the changes:
http://juliadiffeq.org/2018/01/24/Parameters.html

In short, the mutated argument is the first argument,
and parameters are now directly passed
into the equations of motion function. For all
types now mutation goes first, then dependent variables, 
then parameters, then independent variables. 

`f(mutated, dependent variables, p/integrator, independent variables)`

For example, this means that the ODE syntax will be `f(u,p,t)` (for the
out-of-place) and `f(du,u,p,t)` (for the in-place). Notice
that this change also removes the need for ParameterizedFunctions
as now parameters are part of the equations of motion.

For more details please visit the above links!
INFO: Building RandomNumbers
WARNING: AES-NI will not be compiled.
INFO: Building Rmath
INFO: Building SymEngine
INFO: Testing OrdinaryDiffEq
Test Summary:  | Pass  Total
Discrete Tests |    9      9
 14.786552 seconds (16.95 M allocations: 766.657 MiB, 1.29% gc time)
Test Summary: |
Linear Tests  | No tests
  3.910999 seconds (2.48 M allocations: 129.780 MiB, 1.02% gc time)
Test Summary:     | Pass  Total
Convergence Tests |   52     52
118.639531 seconds (97.03 M allocations: 4.130 GiB, 1.58% gc time)
Test Summary:  | Pass  Total
Adaptive Tests |    2      2
  4.323124 seconds (3.13 M allocations: 317.675 MiB, 2.57% gc time)
Test Summary: | Pass  Total
Tstops Tests  |   23     23
  5.417990 seconds (5.26 M allocations: 255.572 MiB, 2.61% gc time)
Test Summary:   | Pass  Total
Backwards Tests |    3      3
  2.499294 seconds (1.60 M allocations: 83.529 MiB, 1.35% gc time)
Test Summary: | Pass  Total
Reinit Tests  |    8      8
  7.482238 seconds (1.25 M allocations: 58.326 MiB, 0.47% gc time)
Test Summary:    | Pass  Total
Initial Dt Tests |    3      3
  1.257964 seconds (952.47 k allocations: 135.144 MiB, 3.33% gc time)
Test Summary:  | Pass  Total
OwrenZen Tests |   18     18
 11.989844 seconds (8.08 M allocations: 387.405 MiB, 1.63% gc time)
Rosenbrock Tests: Error During Test
  Got an exception of type LoadError outside of a @test
  LoadError: UndefVarError: finite_difference! not defined
  Stacktrace:
   [1] derivative!(::Array{Float64,2}, ::Function, ::Float64, ::Array{Float64,2}, ::OrdinaryDiffEq.ODEIntegrator{OrdinaryDiffEq.Rodas4{0,false,DiffEqBase.LinSolveFactorize{Base.LinAlg.#lufact!},DataType},Array{Float64,2},Float64,Void,Float64,Float64,Array{Array{Float64,2},1},DiffEqBase.ODESolution{Float64,3,Array{Array{Float64,2},1},Array{Array{Float64,2},1},Dict{Symbol,Float64},Array{Float64,1},Array{Array{Array{Float64,2},1},1},DiffEqBase.ODEProblem{Array{Float64,2},Float64,true,Void,DiffEqProblemLibrary.##5#6,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Rodas4{0,false,DiffEqBase.LinSolveFactorize{Base.LinAlg.#lufact!},DataType},OrdinaryDiffEq.InterpolationData{DiffEqProblemLibrary.##5#6,Array{Array{Float64,2},1},Array{Float64,1},Array{Array{Array{Float64,2},1},1},OrdinaryDiffEq.Rodas4Cache{Array{Float64,2},Array{Float64,2},Array{Float64,2},Array{Float64,2},Array{Float64,2},Array{Float64,1},Array{Float64,2},OrdinaryDiffEq.RodasConstantCache{Float64,Float64},DiffEqDiffTools.TimeGradientWrapper{DiffEqProblemLibrary.##5#6,Array{Float64,2},Void},DiffEqDiffTools.UJacobianWrapper{DiffEqProblemLibrary.##5#6,Float64,Void},DiffEqBase.LinSolveFactorize{Base.LinAlg.#lufact!},DiffEqDiffTools.JacobianCache{Array{Float64,2},Array{Float64,2},Array{Float64,2},Val{:central},Float64,Val{true}}}}},DiffEqProblemLibrary.##5#6,Void,OrdinaryDiffEq.Rodas4Cache{Array{Float64,2},Array{Float64,2},Array{Float64,2},Array{Float64,2},Array{Float64,2},Array{Float64,1},Array{Float64,2},OrdinaryDiffEq.RodasConstantCache{Float64,Float64},DiffEqDiffTools.TimeGradientWrapper{DiffEqProblemLibrary.##5#6,Array{Float64,2},Void},DiffEqDiffTools.UJacobianWrapper{DiffEqProblemLibrary.##5#6,Float64,Void},DiffEqBase.LinSolveFactorize{Base.LinAlg.#lufact!},DiffEqDiffTools.JacobianCache{Array{Float64,2},Array{Float64,2},Array{Float64,2},Val{:central},Float64,Val{true}}},OrdinaryDiffEq.DEOptions{Float64,Float64,Float64,Float64,DiffEqBase.#ODE_DEFAULT_NORM,DiffEqBase.CallbackSet{Tuple{},Tuple{}},DiffEqBase.#ODE_DEFAULT_ISOUTOFDOMAIN,DiffEqBase.#ODE_DEFAULT_PROG_MESSAGE,DiffEqBase.#ODE_DEFAULT_UNSTABLE_CHECK,DataStructures.BinaryHeap{Float64,DataStructures.LessThan},DataStructures.BinaryHeap{Float64,DataStructures.LessThan},Void,Void,Int64,Array{Float64,1},Array{Float64,1},Array{Float64,1}},Array{Float64,2}}) at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/derivative_wrappers.jl:6
   [2] perform_step!(::OrdinaryDiffEq.ODEIntegrator{OrdinaryDiffEq.Rodas4{0,false,DiffEqBase.LinSolveFactorize{Base.LinAlg.#lufact!},DataType},Array{Float64,2},Float64,Void,Float64,Float64,Array{Array{Float64,2},1},DiffEqBase.ODESolution{Float64,3,Array{Array{Float64,2},1},Array{Array{Float64,2},1},Dict{Symbol,Float64},Array{Float64,1},Array{Array{Array{Float64,2},1},1},DiffEqBase.ODEProblem{Array{Float64,2},Float64,true,Void,DiffEqProblemLibrary.##5#6,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Rodas4{0,false,DiffEqBase.LinSolveFactorize{Base.LinAlg.#lufact!},DataType},OrdinaryDiffEq.InterpolationData{DiffEqProblemLibrary.##5#6,Array{Array{Float64,2},1},Array{Float64,1},Array{Array{Array{Float64,2},1},1},OrdinaryDiffEq.Rodas4Cache{Array{Float64,2},Array{Float64,2},Array{Float64,2},Array{Float64,2},Array{Float64,2},Array{Float64,1},Array{Float64,2},OrdinaryDiffEq.RodasConstantCache{Float64,Float64},DiffEqDiffTools.TimeGradientWrapper{DiffEqProblemLibrary.##5#6,Array{Float64,2},Void},DiffEqDiffTools.UJacobianWrapper{DiffEqProblemLibrary.##5#6,Float64,Void},DiffEqBase.LinSolveFactorize{Base.LinAlg.#lufact!},DiffEqDiffTools.JacobianCache{Array{Float64,2},Array{Float64,2},Array{Float64,2},Val{:central},Float64,Val{true}}}}},DiffEqProblemLibrary.##5#6,Void,OrdinaryDiffEq.Rodas4Cache{Array{Float64,2},Array{Float64,2},Array{Float64,2},Array{Float64,2},Array{Float64,2},Array{Float64,1},Array{Float64,2},OrdinaryDiffEq.RodasConstantCache{Float64,Float64},DiffEqDiffTools.TimeGradientWrapper{DiffEqProblemLibrary.##5#6,Array{Float64,2},Void},DiffEqDiffTools.UJacobianWrapper{DiffEqProblemLibrary.##5#6,Float64,Void},DiffEqBase.LinSolveFactorize{Base.LinAlg.#lufact!},DiffEqDiffTools.JacobianCache{Array{Float64,2},Array{Float64,2},Array{Float64,2},Val{:central},Float64,Val{true}}},OrdinaryDiffEq.DEOptions{Float64,Float64,Float64,Float64,DiffEqBase.#ODE_DEFAULT_NORM,DiffEqBase.CallbackSet{Tuple{},Tuple{}},DiffEqBase.#ODE_DEFAULT_ISOUTOFDOMAIN,DiffEqBase.#ODE_DEFAULT_PROG_MESSAGE,DiffEqBase.#ODE_DEFAULT_UNSTABLE_CHECK,DataStructures.BinaryHeap{Float64,DataStructures.LessThan},DataStructures.BinaryHeap{Float64,DataStructures.LessThan},Void,Void,Int64,Array{Float64,1},Array{Float64,1},Array{Float64,1}},Array{Float64,2}}, ::OrdinaryDiffEq.Rodas4Cache{Array{Float64,2},Array{Float64,2},Array{Float64,2},Array{Float64,2},Array{Float64,2},Array{Float64,1},Array{Float64,2},OrdinaryDiffEq.RodasConstantCache{Float64,Float64},DiffEqDiffTools.TimeGradientWrapper{DiffEqProblemLibrary.##5#6,Array{Float64,2},Void},DiffEqDiffTools.UJacobianWrapper{DiffEqProblemLibrary.##5#6,Float64,Void},DiffEqBase.LinSolveFactorize{Base.LinAlg.#lufact!},DiffEqDiffTools.JacobianCache{Array{Float64,2},Array{Float64,2},Array{Float64,2},Val{:central},Float64,Val{true}}}, ::Bool) at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/perform_step/rosenbrock_perform_step.jl:1108
   [3] solve!(::OrdinaryDiffEq.ODEIntegrator{OrdinaryDiffEq.Rodas4{0,false,DiffEqBase.LinSolveFactorize{Base.LinAlg.#lufact!},DataType},Array{Float64,2},Float64,Void,Float64,Float64,Array{Array{Float64,2},1},DiffEqBase.ODESolution{Float64,3,Array{Array{Float64,2},1},Array{Array{Float64,2},1},Dict{Symbol,Float64},Array{Float64,1},Array{Array{Array{Float64,2},1},1},DiffEqBase.ODEProblem{Array{Float64,2},Float64,true,Void,DiffEqProblemLibrary.##5#6,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Rodas4{0,false,DiffEqBase.LinSolveFactorize{Base.LinAlg.#lufact!},DataType},OrdinaryDiffEq.InterpolationData{DiffEqProblemLibrary.##5#6,Array{Array{Float64,2},1},Array{Float64,1},Array{Array{Array{Float64,2},1},1},OrdinaryDiffEq.Rodas4Cache{Array{Float64,2},Array{Float64,2},Array{Float64,2},Array{Float64,2},Array{Float64,2},Array{Float64,1},Array{Float64,2},OrdinaryDiffEq.RodasConstantCache{Float64,Float64},DiffEqDiffTools.TimeGradientWrapper{DiffEqProblemLibrary.##5#6,Array{Float64,2},Void},DiffEqDiffTools.UJacobianWrapper{DiffEqProblemLibrary.##5#6,Float64,Void},DiffEqBase.LinSolveFactorize{Base.LinAlg.#lufact!},DiffEqDiffTools.JacobianCache{Array{Float64,2},Array{Float64,2},Array{Float64,2},Val{:central},Float64,Val{true}}}}},DiffEqProblemLibrary.##5#6,Void,OrdinaryDiffEq.Rodas4Cache{Array{Float64,2},Array{Float64,2},Array{Float64,2},Array{Float64,2},Array{Float64,2},Array{Float64,1},Array{Float64,2},OrdinaryDiffEq.RodasConstantCache{Float64,Float64},DiffEqDiffTools.TimeGradientWrapper{DiffEqProblemLibrary.##5#6,Array{Float64,2},Void},DiffEqDiffTools.UJacobianWrapper{DiffEqProblemLibrary.##5#6,Float64,Void},DiffEqBase.LinSolveFactorize{Base.LinAlg.#lufact!},DiffEqDiffTools.JacobianCache{Array{Float64,2},Array{Float64,2},Array{Float64,2},Val{:central},Float64,Val{true}}},OrdinaryDiffEq.DEOptions{Float64,Float64,Float64,Float64,DiffEqBase.#ODE_DEFAULT_NORM,DiffEqBase.CallbackSet{Tuple{},Tuple{}},DiffEqBase.#ODE_DEFAULT_ISOUTOFDOMAIN,DiffEqBase.#ODE_DEFAULT_PROG_MESSAGE,DiffEqBase.#ODE_DEFAULT_UNSTABLE_CHECK,DataStructures.BinaryHeap{Float64,DataStructures.LessThan},DataStructures.BinaryHeap{Float64,DataStructures.LessThan},Void,Void,Int64,Array{Float64,1},Array{Float64,1},Array{Float64,1}},Array{Float64,2}}) at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/solve.jl:335
   [4] #solve#1330(::Array{Any,1}, ::Function, ::DiffEqBase.ODEProblem{Array{Float64,2},Float64,true,Void,DiffEqProblemLibrary.##5#6,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem}, ::OrdinaryDiffEq.Rodas4{0,false,DiffEqBase.LinSolveFactorize{Base.LinAlg.#lufact!},DataType}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/solve.jl:7
   [5] (::DiffEqBase.#kw##solve)(::Array{Any,1}, ::DiffEqBase.#solve, ::DiffEqBase.ODEProblem{Array{Float64,2},Float64,true,Void,DiffEqProblemLibrary.##5#6,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem}, ::OrdinaryDiffEq.Rodas4{0,false,DiffEqBase.LinSolveFactorize{Base.LinAlg.#lufact!},DataType}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at ./<missing>:0
   [6] (::DiffEqDevTools.##73#74{Bool,Bool,Array{Any,1},Array{Rational{Int64},1},DiffEqBase.ODEProblem{Array{Float64,2},Float64,true,Void,DiffEqProblemLibrary.##5#6,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Rodas4{0,false,DiffEqBase.LinSolveFactorize{Base.LinAlg.#lufact!},DataType}})(::Int64) at ./<missing>:0
   [7] collect(::Base.Generator{UnitRange{Int64},DiffEqDevTools.##73#74{Bool,Bool,Array{Any,1},Array{Rational{Int64},1},DiffEqBase.ODEProblem{Array{Float64,2},Float64,true,Void,DiffEqProblemLibrary.##5#6,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Rodas4{0,false,DiffEqBase.LinSolveFactorize{Base.LinAlg.#lufact!},DataType}}}) at ./array.jl:475
   [8] #test_convergence#72(::Bool, ::Bool, ::Array{Any,1}, ::Function, ::Array{Rational{Int64},1}, ::DiffEqBase.ODEProblem{Array{Float64,2},Float64,true,Void,DiffEqProblemLibrary.##5#6,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem}, ::OrdinaryDiffEq.Rodas4{0,false,DiffEqBase.LinSolveFactorize{Base.LinAlg.#lufact!},DataType}) at /home/vagrant/.julia/v0.6/DiffEqDevTools/src/convergence.jl:94
   [9] (::DiffEqDevTools.#kw##test_convergence)(::Array{Any,1}, ::DiffEqDevTools.#test_convergence, ::Array{Rational{Int64},1}, ::DiffEqBase.ODEProblem{Array{Float64,2},Float64,true,Void,DiffEqProblemLibrary.##5#6,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem}, ::OrdinaryDiffEq.Rodas4{0,false,DiffEqBase.LinSolveFactorize{Base.LinAlg.#lufact!},DataType}) at ./<missing>:0
   [10] include_from_node1(::String) at ./loading.jl:576
   [11] include(::String) at ./sysimg.jl:14
   [12] macro expansion at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/test/runtests.jl:24 [inlined]
   [13] macro expansion at ./test.jl:860 [inlined]
   [14] macro expansion at ./util.jl:237 [inlined]
   [15] anonymous at ./<missing>:?
   [16] include_from_node1(::String) at ./loading.jl:576
   [17] include(::String) at ./sysimg.jl:14
   [18] process_options(::Base.JLOptions) at ./client.jl:305
   [19] _start() at ./client.jl:371
  while loading /home/vagrant/.julia/v0.6/OrdinaryDiffEq/test/ode/ode_rosenbrock_tests.jl, in expression starting on line 249
Test Summary:    | Pass  Error  Total
Rosenbrock Tests |   57      1     58
ERROR: LoadError: Some tests did not pass: 57 passed, 0 failed, 1 errored, 0 broken.
while loading /home/vagrant/.julia/v0.6/OrdinaryDiffEq/test/runtests.jl, in expression starting on line 24
===========================[ ERROR: OrdinaryDiffEq ]============================

failed process: Process(`/home/vagrant/julia/bin/julia -Cx86-64 -J/home/vagrant/julia/lib/julia/sys.so --compile=yes --depwarn=yes --check-bounds=yes --code-coverage=none --color=no --compilecache=yes /home/vagrant/.julia/v0.6/OrdinaryDiffEq/test/runtests.jl`, ProcessExited(1)) [1]

================================================================================
INFO: Removing Calculus v0.2.2
INFO: Removing ChunkedArrays v0.1.1
INFO: Removing Conda v0.7.1
INFO: Removing DiffEqCallbacks v1.0.0
INFO: Removing DiffEqDevTools v1.0.0
INFO: Removing DiffEqMonteCarlo v0.10.0
INFO: Removing DiffEqNoiseProcess v1.0.0
INFO: Removing DiffEqOperators v1.0.0
INFO: Removing DiffEqPDEBase v0.4.0
INFO: Removing DiffEqProblemLibrary v1.0.0
INFO: Removing DistributedArrays v0.4.0
INFO: Removing Distributions v0.15.0
INFO: Removing EllipsisNotation v0.3.0
INFO: Removing PDMats v0.8.0
INFO: Removing ParameterizedFunctions v3.0.0
INFO: Removing Primes v0.2.0
INFO: Removing QuadGK v0.2.0
INFO: Removing RandomNumbers v0.1.1
INFO: Removing ResettableStacks v0.3.1
INFO: Removing Rmath v0.3.2
INFO: Removing SortingAlgorithms v0.2.0
INFO: Removing SpecialMatrices v0.1.3
INFO: Removing StatsBase v0.20.0
INFO: Removing StatsFuns v0.5.0
INFO: Removing SymEngine v0.3.0
INFO: Removing VectorizedRoutines v0.0.2
ERROR: OrdinaryDiffEq had test errors

>>> End of log
