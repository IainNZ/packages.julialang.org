>>> 'Pkg.add("CVXOPT")' log
INFO: Cloning cache of CVXOPT from https://github.com/cvxopt/CVXOPT.jl.git
INFO: Installing BinDeps v0.6.0
INFO: Installing CVXOPT v0.1.0
INFO: Installing Conda v0.7.0
INFO: Installing MacroTools v0.3.7
INFO: Installing PyCall v1.14.0
INFO: Installing SHA v0.5.1
INFO: Installing URIParser v0.2.0
INFO: Building Conda
INFO: Building PyCall
INFO: Using the Python distribution in the Conda package by default.
To use a different Python version, set ENV["PYTHON"]="pythoncommand" and re-run Pkg.build("PyCall").
INFO: PyCall is using /home/vagrant/.julia/v0.6/Conda/deps/usr/bin/python (Python 2.7.13) at /home/vagrant/.julia/v0.6/Conda/deps/usr/bin/python, libpython = /home/vagrant/.julia/v0.6/Conda/deps/usr/lib/libpython2.7
INFO: /home/vagrant/.julia/v0.6/PyCall/deps/deps.jl has not changed
INFO: /home/vagrant/.julia/v0.6/PyCall/deps/PYTHON has not changed
INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of CVXOPT
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("CVXOPT")' log
Julia Version 0.6.0
Commit 9036443 (2017-06-19 13:05 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-128-generic #177-Ubuntu SMP Tue Aug 8 11:40:23 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (727.76171875 MB free)
Uptime: 35611.0 sec
Load Avg:  0.90478515625  0.89990234375  1.13525390625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3513 MHz    2280098 s       1320 s     116413 s     568113 s         11 s
#2  3513 MHz     505702 s       5430 s      56908 s    2922018 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.6
2 required packages:
 - CVXOPT                        0.1.0
 - JSON                          0.13.0
7 additional packages:
 - BinDeps                       0.6.0
 - Compat                        0.31.0
 - Conda                         0.7.0
 - MacroTools                    0.3.7
 - PyCall                        1.14.0
 - SHA                           0.5.1
 - URIParser                     0.2.0
INFO: Testing CVXOPT
INFO: Installing cvxopt via the Conda cvxopt package...
Warning: 'conda-forge' already in 'channels' list, moving to the top
Fetching package metadata ...........
Solving package specifications: .

Package plan for installation in environment /home/vagrant/.julia/v0.6/Conda/deps/usr:

The following NEW packages will be INSTALLED:

    cvxopt:      1.1.9-py27_blas_openblas_200 conda-forge [blas_openblas]
    fftw:        3.3.6-3                      conda-forge
    glpk:        4.61-0                       conda-forge
    gmp:         6.1.2-0                      conda-forge
    gsl:         2.2.1-blas_openblas_2        conda-forge [blas_openblas]
    metis:       5.1.0-3                      conda-forge
    suitesparse: 4.5.4-blas_openblas_200      conda-forge [blas_openblas]
    tbb:         2017_20170604-1              conda-forge

fftw-3.3.6-3.t   0% |                              | ETA:  --:--:--   0.00  B/sfftw-3.3.6-3.t   1% |                               | ETA:  0:00:03   1.24 MB/sfftw-3.3.6-3.t   2% |                               | ETA:  0:00:02   1.84 MB/sfftw-3.3.6-3.t   3% |#                              | ETA:  0:00:02   1.85 MB/sfftw-3.3.6-3.t   4% |#                              | ETA:  0:00:01   2.11 MB/sfftw-3.3.6-3.t   6% |#                              | ETA:  0:00:01   2.31 MB/sfftw-3.3.6-3.t   7% |##                             | ETA:  0:00:01   2.73 MB/sfftw-3.3.6-3.t   8% |##                             | ETA:  0:00:01   2.85 MB/sfftw-3.3.6-3.t   9% |###                            | ETA:  0:00:01   2.94 MB/sfftw-3.3.6-3.t  11% |###                            | ETA:  0:00:01   3.28 MB/sfftw-3.3.6-3.t  12% |###                            | ETA:  0:00:01   3.32 MB/sfftw-3.3.6-3.t  13% |####                           | ETA:  0:00:00   3.63 MB/sfftw-3.3.6-3.t  14% |####                           | ETA:  0:00:00   3.66 MB/sfftw-3.3.6-3.t  16% |#####                          | ETA:  0:00:00   3.93 MB/sfftw-3.3.6-3.t  17% |#####                          | ETA:  0:00:00   3.97 MB/sfftw-3.3.6-3.t  18% |#####                          | ETA:  0:00:00   4.20 MB/sfftw-3.3.6-3.t  19% |######                         | ETA:  0:00:00   4.46 MB/sfftw-3.3.6-3.t  21% |######                         | ETA:  0:00:00   4.45 MB/sfftw-3.3.6-3.t  22% |######                         | ETA:  0:00:00   4.68 MB/sfftw-3.3.6-3.t  23% |#######                        | ETA:  0:00:00   4.92 MB/sfftw-3.3.6-3.t  24% |#######                        | ETA:  0:00:00   4.89 MB/sfftw-3.3.6-3.t  26% |########                       | ETA:  0:00:00   5.11 MB/sfftw-3.3.6-3.t  27% |########                       | ETA:  0:00:00   5.31 MB/sfftw-3.3.6-3.t  28% |########                       | ETA:  0:00:00   5.53 MB/sfftw-3.3.6-3.t  29% |#########                      | ETA:  0:00:00   5.50 MB/sfftw-3.3.6-3.t  31% |#########                      | ETA:  0:00:00   5.70 MB/sfftw-3.3.6-3.t  32% |##########                     | ETA:  0:00:00   5.90 MB/sfftw-3.3.6-3.t  33% |##########                     | ETA:  0:00:00   6.10 MB/sfftw-3.3.6-3.t  34% |##########                     | ETA:  0:00:00   6.03 MB/sfftw-3.3.6-3.t  36% |###########                    | ETA:  0:00:00   6.23 MB/sfftw-3.3.6-3.t  37% |###########                    | ETA:  0:00:00   6.40 MB/sfftw-3.3.6-3.t  38% |###########                    | ETA:  0:00:00   6.59 MB/sfftw-3.3.6-3.t  39% |############                   | ETA:  0:00:00   6.55 MB/sfftw-3.3.6-3.t  40% |############                   | ETA:  0:00:00   6.70 MB/sfftw-3.3.6-3.t  42% |#############                  | ETA:  0:00:00   6.86 MB/sfftw-3.3.6-3.t  43% |#############                  | ETA:  0:00:00   7.03 MB/sfftw-3.3.6-3.t  44% |#############                  | ETA:  0:00:00   7.21 MB/sfftw-3.3.6-3.t  45% |##############                 | ETA:  0:00:00   7.39 MB/sfftw-3.3.6-3.t  47% |##############                 | ETA:  0:00:00   7.31 MB/sfftw-3.3.6-3.t  48% |###############                | ETA:  0:00:00   7.47 MB/sfftw-3.3.6-3.t  49% |###############                | ETA:  0:00:00   7.62 MB/sfftw-3.3.6-3.t  50% |###############                | ETA:  0:00:00   7.79 MB/sfftw-3.3.6-3.t  52% |################               | ETA:  0:00:00   7.96 MB/sfftw-3.3.6-3.t  53% |################               | ETA:  0:00:00   8.13 MB/sfftw-3.3.6-3.t  54% |################               | ETA:  0:00:00   8.05 MB/sfftw-3.3.6-3.t  55% |#################              | ETA:  0:00:00   8.17 MB/sfftw-3.3.6-3.t  57% |#################              | ETA:  0:00:00   8.32 MB/sfftw-3.3.6-3.t  58% |##################             | ETA:  0:00:00   8.48 MB/sfftw-3.3.6-3.t  59% |##################             | ETA:  0:00:00   8.63 MB/sfftw-3.3.6-3.t  60% |##################             | ETA:  0:00:00   8.79 MB/sfftw-3.3.6-3.t  62% |###################            | ETA:  0:00:00   8.74 MB/sfftw-3.3.6-3.t  63% |###################            | ETA:  0:00:00   8.84 MB/sfftw-3.3.6-3.t  64% |####################           | ETA:  0:00:00   8.97 MB/sfftw-3.3.6-3.t  65% |####################           | ETA:  0:00:00   9.12 MB/sfftw-3.3.6-3.t  67% |####################           | ETA:  0:00:00   9.27 MB/sfftw-3.3.6-3.t  68% |#####################          | ETA:  0:00:00   9.42 MB/sfftw-3.3.6-3.t  69% |#####################          | ETA:  0:00:00   9.56 MB/sfftw-3.3.6-3.t  70% |#####################          | ETA:  0:00:00   9.72 MB/sfftw-3.3.6-3.t  72% |######################         | ETA:  0:00:00   9.63 MB/sfftw-3.3.6-3.t  73% |######################         | ETA:  0:00:00   9.72 MB/sfftw-3.3.6-3.t  74% |#######################        | ETA:  0:00:00   9.86 MB/sfftw-3.3.6-3.t  75% |#######################        | ETA:  0:00:00  10.00 MB/sfftw-3.3.6-3.t  76% |#######################        | ETA:  0:00:00  10.14 MB/sfftw-3.3.6-3.t  78% |########################       | ETA:  0:00:00  10.28 MB/sfftw-3.3.6-3.t  79% |########################       | ETA:  0:00:00  10.42 MB/sfftw-3.3.6-3.t  80% |#########################      | ETA:  0:00:00  10.56 MB/sfftw-3.3.6-3.t  81% |#########################      | ETA:  0:00:00  10.53 MB/sfftw-3.3.6-3.t  83% |#########################      | ETA:  0:00:00  10.60 MB/sfftw-3.3.6-3.t  84% |##########################     | ETA:  0:00:00  10.70 MB/sfftw-3.3.6-3.t  85% |##########################     | ETA:  0:00:00  10.84 MB/sfftw-3.3.6-3.t  86% |##########################     | ETA:  0:00:00  10.97 MB/sfftw-3.3.6-3.t  88% |###########################    | ETA:  0:00:00  11.11 MB/sfftw-3.3.6-3.t  89% |###########################    | ETA:  0:00:00  11.24 MB/sfftw-3.3.6-3.t  90% |############################   | ETA:  0:00:00  11.38 MB/sfftw-3.3.6-3.t  91% |############################   | ETA:  0:00:00  11.51 MB/sfftw-3.3.6-3.t  93% |############################   | ETA:  0:00:00  11.44 MB/sfftw-3.3.6-3.t  94% |#############################  | ETA:  0:00:00  11.52 MB/sfftw-3.3.6-3.t  95% |#############################  | ETA:  0:00:00  11.65 MB/sfftw-3.3.6-3.t  96% |############################## | ETA:  0:00:00  11.78 MB/sfftw-3.3.6-3.t  98% |############################## | ETA:  0:00:00  11.91 MB/sfftw-3.3.6-3.t  99% |############################## | ETA:  0:00:00  12.03 MB/sfftw-3.3.6-3.t 100% |###############################| Time: 0:00:00  12.09 MB/s
metis-5.1.0-3.   0% |                              | ETA:  --:--:--   0.00  B/smetis-5.1.0-3.   6% |##                             | Time: 0:00:00  15.52 MB/smetis-5.1.0-3.  13% |####                           | Time: 0:00:00  20.66 MB/smetis-5.1.0-3.  19% |######                         | Time: 0:00:00  26.64 MB/smetis-5.1.0-3.  26% |########                       | Time: 0:00:00  31.26 MB/smetis-5.1.0-3.  32% |##########                     | Time: 0:00:00  34.93 MB/smetis-5.1.0-3.  39% |############                   | Time: 0:00:00  38.00 MB/smetis-5.1.0-3.  45% |##############                 | Time: 0:00:00  40.55 MB/smetis-5.1.0-3.  52% |################               | Time: 0:00:00  42.13 MB/smetis-5.1.0-3.  58% |##################             | Time: 0:00:00  43.71 MB/smetis-5.1.0-3.  65% |####################           | Time: 0:00:00  45.13 MB/smetis-5.1.0-3.  72% |######################         | Time: 0:00:00  46.50 MB/smetis-5.1.0-3.  78% |########################       | Time: 0:00:00  47.78 MB/smetis-5.1.0-3.  85% |##########################     | Time: 0:00:00  18.31 MB/smetis-5.1.0-3.  91% |############################   | Time: 0:00:00  19.17 MB/smetis-5.1.0-3.  98% |############################## | Time: 0:00:00  20.18 MB/smetis-5.1.0-3. 100% |###############################| Time: 0:00:00  20.27 MB/smetis-5.1.0-3. 100% |###############################| Time: 0:00:00  20.04 MB/s
tbb-2017_20170   0% |                              | ETA:  --:--:--   0.00  B/stbb-2017_20170   1% |                               | Time: 0:00:00  34.41 MB/stbb-2017_20170   2% |                               | Time: 0:00:00  44.16 MB/stbb-2017_20170   3% |#                              | Time: 0:00:00  48.81 MB/stbb-2017_20170   5% |#                              | Time: 0:00:00  48.33 MB/stbb-2017_20170   6% |#                              | Time: 0:00:00  50.69 MB/stbb-2017_20170   7% |##                             | Time: 0:00:00  52.96 MB/stbb-2017_20170   8% |##                             | Time: 0:00:00   7.41 MB/stbb-2017_20170  10% |###                            | Time: 0:00:00   8.25 MB/stbb-2017_20170  11% |###                            | Time: 0:00:00   9.07 MB/stbb-2017_20170  12% |###                            | Time: 0:00:00   9.91 MB/stbb-2017_20170  13% |####                           | Time: 0:00:00  10.74 MB/stbb-2017_20170  15% |####                           | Time: 0:00:00  11.59 MB/stbb-2017_20170  16% |#####                          | Time: 0:00:00  12.37 MB/stbb-2017_20170  17% |#####                          | Time: 0:00:00  13.14 MB/stbb-2017_20170  18% |#####                          | Time: 0:00:00  13.89 MB/stbb-2017_20170  20% |######                         | Time: 0:00:00  10.19 MB/stbb-2017_20170  21% |######                         | Time: 0:00:00  10.69 MB/stbb-2017_20170  22% |#######                        | Time: 0:00:00  11.11 MB/stbb-2017_20170  23% |#######                        | Time: 0:00:00  10.72 MB/stbb-2017_20170  25% |#######                        | Time: 0:00:00  11.12 MB/stbb-2017_20170  26% |########                       | Time: 0:00:00  11.56 MB/stbb-2017_20170  27% |########                       | Time: 0:00:00  12.01 MB/stbb-2017_20170  29% |########                       | Time: 0:00:00  12.45 MB/stbb-2017_20170  30% |#########                      | Time: 0:00:00  12.90 MB/stbb-2017_20170  31% |#########                      | Time: 0:00:00  10.42 MB/stbb-2017_20170  32% |##########                     | Time: 0:00:00  10.72 MB/stbb-2017_20170  34% |##########                     | Time: 0:00:00  11.06 MB/stbb-2017_20170  35% |##########                     | Time: 0:00:00  11.37 MB/stbb-2017_20170  36% |###########                    | Time: 0:00:00  11.20 MB/stbb-2017_20170  37% |###########                    | Time: 0:00:00  11.50 MB/stbb-2017_20170  39% |############                   | Time: 0:00:00  11.81 MB/stbb-2017_20170  40% |############                   | Time: 0:00:00  12.12 MB/stbb-2017_20170  41% |############                   | Time: 0:00:00  12.42 MB/stbb-2017_20170  42% |#############                  | Time: 0:00:00  12.73 MB/stbb-2017_20170  44% |#############                  | Time: 0:00:00  10.37 MB/stbb-2017_20170  45% |##############                 | Time: 0:00:00  10.60 MB/stbb-2017_20170  46% |##############                 | Time: 0:00:00  10.85 MB/stbb-2017_20170  47% |##############                 | Time: 0:00:00  11.09 MB/stbb-2017_20170  49% |###############                | Time: 0:00:00  11.32 MB/stbb-2017_20170  50% |###############                | Time: 0:00:00  11.46 MB/stbb-2017_20170  51% |################               | Time: 0:00:00  11.58 MB/stbb-2017_20170  53% |################               | Time: 0:00:00  11.74 MB/stbb-2017_20170  54% |################               | Time: 0:00:00  11.93 MB/stbb-2017_20170  55% |#################              | Time: 0:00:00  12.15 MB/stbb-2017_20170  56% |#################              | Time: 0:00:00  12.36 MB/stbb-2017_20170  58% |#################              | Time: 0:00:00  12.55 MB/stbb-2017_20170  59% |##################             | Time: 0:00:00  11.48 MB/stbb-2017_20170  60% |##################             | Time: 0:00:00  11.59 MB/stbb-2017_20170  61% |###################            | Time: 0:00:00  11.73 MB/stbb-2017_20170  63% |###################            | Time: 0:00:00  11.90 MB/stbb-2017_20170  64% |###################            | Time: 0:00:00  12.09 MB/stbb-2017_20170  65% |####################           | Time: 0:00:00  11.87 MB/stbb-2017_20170  66% |####################           | Time: 0:00:00  11.98 MB/stbb-2017_20170  68% |#####################          | Time: 0:00:00  12.14 MB/stbb-2017_20170  69% |#####################          | Time: 0:00:00  12.30 MB/stbb-2017_20170  70% |#####################          | Time: 0:00:00  12.45 MB/stbb-2017_20170  71% |######################         | Time: 0:00:00  12.61 MB/stbb-2017_20170  73% |######################         | Time: 0:00:00  11.92 MB/stbb-2017_20170  74% |#######################        | Time: 0:00:00  12.02 MB/stbb-2017_20170  75% |#######################        | Time: 0:00:00  12.09 MB/stbb-2017_20170  76% |#######################        | Time: 0:00:00  12.19 MB/stbb-2017_20170  78% |########################       | Time: 0:00:00  12.34 MB/stbb-2017_20170  79% |########################       | Time: 0:00:00  12.49 MB/stbb-2017_20170  80% |#########################      | Time: 0:00:00  12.62 MB/stbb-2017_20170  82% |#########################      | Time: 0:00:00  12.65 MB/stbb-2017_20170  83% |#########################      | Time: 0:00:00  12.78 MB/stbb-2017_20170  84% |##########################     | Time: 0:00:00  12.28 MB/stbb-2017_20170  85% |##########################     | Time: 0:00:00  12.39 MB/stbb-2017_20170  87% |##########################     | Time: 0:00:00  12.52 MB/stbb-2017_20170  88% |###########################    | Time: 0:00:00  12.64 MB/stbb-2017_20170  89% |###########################    | Time: 0:00:00  12.76 MB/stbb-2017_20170  90% |############################   | Time: 0:00:00  12.67 MB/stbb-2017_20170  92% |############################   | Time: 0:00:00  12.76 MB/stbb-2017_20170  93% |############################   | Time: 0:00:00  12.82 MB/stbb-2017_20170  94% |#############################  | Time: 0:00:00  12.88 MB/stbb-2017_20170  95% |#############################  | Time: 0:00:00  12.99 MB/stbb-2017_20170  97% |############################## | Time: 0:00:00  13.09 MB/stbb-2017_20170  98% |############################## | Time: 0:00:00  13.19 MB/stbb-2017_20170  99% |############################## | Time: 0:00:00  13.32 MB/stbb-2017_20170 100% |###############################| Time: 0:00:00  13.31 MB/stbb-2017_20170 100% |###############################| Time: 0:00:00  13.27 MB/s
glpk-4.61-0.ta   0% |                              | ETA:  --:--:--   0.00  B/sglpk-4.61-0.ta   1% |                               | Time: 0:00:00  11.95 MB/sglpk-4.61-0.ta   2% |                               | Time: 0:00:00  17.54 MB/sglpk-4.61-0.ta   4% |#                              | Time: 0:00:00  21.71 MB/sglpk-4.61-0.ta   5% |#                              | Time: 0:00:00  25.33 MB/sglpk-4.61-0.ta   7% |##                             | Time: 0:00:00  27.55 MB/sglpk-4.61-0.ta   8% |##                             | Time: 0:00:00  29.90 MB/sglpk-4.61-0.ta  10% |###                            | Time: 0:00:00  31.87 MB/sglpk-4.61-0.ta  11% |###                            | Time: 0:00:00  33.62 MB/sglpk-4.61-0.ta  13% |####                           | Time: 0:00:00  35.14 MB/sglpk-4.61-0.ta  14% |####                           | Time: 0:00:00  36.34 MB/sglpk-4.61-0.ta  16% |#####                          | Time: 0:00:00  37.31 MB/sglpk-4.61-0.ta  17% |#####                          | Time: 0:00:00  38.17 MB/sglpk-4.61-0.ta  19% |#####                          | Time: 0:00:00  38.98 MB/sglpk-4.61-0.ta  20% |######                         | Time: 0:00:00  18.17 MB/sglpk-4.61-0.ta  22% |######                         | Time: 0:00:00  17.83 MB/sglpk-4.61-0.ta  23% |#######                        | Time: 0:00:00  17.24 MB/sglpk-4.61-0.ta  25% |#######                        | Time: 0:00:00  17.61 MB/sglpk-4.61-0.ta  26% |########                       | Time: 0:00:00  18.26 MB/sglpk-4.61-0.ta  28% |########                       | Time: 0:00:00  18.84 MB/sglpk-4.61-0.ta  29% |#########                      | Time: 0:00:00  19.50 MB/sglpk-4.61-0.ta  31% |#########                      | Time: 0:00:00  20.03 MB/sglpk-4.61-0.ta  32% |##########                     | Time: 0:00:00  20.57 MB/sglpk-4.61-0.ta  34% |##########                     | Time: 0:00:00  21.13 MB/sglpk-4.61-0.ta  35% |###########                    | Time: 0:00:00  21.78 MB/sglpk-4.61-0.ta  37% |###########                    | Time: 0:00:00  22.25 MB/sglpk-4.61-0.ta  38% |###########                    | Time: 0:00:00  22.70 MB/sglpk-4.61-0.ta  40% |############                   | Time: 0:00:00  23.19 MB/sglpk-4.61-0.ta  41% |############                   | Time: 0:00:00  23.65 MB/sglpk-4.61-0.ta  43% |#############                  | Time: 0:00:00  24.22 MB/sglpk-4.61-0.ta  44% |#############                  | Time: 0:00:00  18.77 MB/sglpk-4.61-0.ta  46% |##############                 | Time: 0:00:00  18.41 MB/sglpk-4.61-0.ta  47% |##############                 | Time: 0:00:00  17.96 MB/sglpk-4.61-0.ta  48% |###############                | Time: 0:00:00  18.26 MB/sglpk-4.61-0.ta  50% |###############                | Time: 0:00:00  18.61 MB/sglpk-4.61-0.ta  51% |################               | Time: 0:00:00  18.96 MB/sglpk-4.61-0.ta  53% |################               | Time: 0:00:00  19.29 MB/sglpk-4.61-0.ta  54% |#################              | Time: 0:00:00  19.60 MB/sglpk-4.61-0.ta  56% |#################              | Time: 0:00:00  19.93 MB/sglpk-4.61-0.ta  57% |#################              | Time: 0:00:00  20.25 MB/sglpk-4.61-0.ta  59% |##################             | Time: 0:00:00  20.57 MB/sglpk-4.61-0.ta  60% |##################             | Time: 0:00:00  20.89 MB/sglpk-4.61-0.ta  62% |###################            | Time: 0:00:00  21.25 MB/sglpk-4.61-0.ta  63% |###################            | Time: 0:00:00  21.56 MB/sglpk-4.61-0.ta  65% |####################           | Time: 0:00:00  21.85 MB/sglpk-4.61-0.ta  66% |####################           | Time: 0:00:00  22.02 MB/sglpk-4.61-0.ta  68% |#####################          | Time: 0:00:00  22.31 MB/sglpk-4.61-0.ta  69% |#####################          | Time: 0:00:00  19.44 MB/sglpk-4.61-0.ta  71% |######################         | Time: 0:00:00  19.20 MB/sglpk-4.61-0.ta  72% |######################         | Time: 0:00:00  18.87 MB/sglpk-4.61-0.ta  74% |#######################        | Time: 0:00:00  18.98 MB/sglpk-4.61-0.ta  75% |#######################        | Time: 0:00:00  19.23 MB/sglpk-4.61-0.ta  77% |#######################        | Time: 0:00:00  19.48 MB/sglpk-4.61-0.ta  78% |########################       | Time: 0:00:00  19.71 MB/sglpk-4.61-0.ta  80% |########################       | Time: 0:00:00  19.95 MB/sglpk-4.61-0.ta  81% |#########################      | Time: 0:00:00  20.18 MB/sglpk-4.61-0.ta  83% |#########################      | Time: 0:00:00  20.40 MB/sglpk-4.61-0.ta  84% |##########################     | Time: 0:00:00  20.54 MB/sglpk-4.61-0.ta  86% |##########################     | Time: 0:00:00  20.75 MB/sglpk-4.61-0.ta  87% |###########################    | Time: 0:00:00  20.97 MB/sglpk-4.61-0.ta  89% |###########################    | Time: 0:00:00  21.18 MB/sglpk-4.61-0.ta  90% |############################   | Time: 0:00:00  21.23 MB/sglpk-4.61-0.ta  92% |############################   | Time: 0:00:00  21.43 MB/sglpk-4.61-0.ta  93% |############################   | Time: 0:00:00  21.63 MB/sglpk-4.61-0.ta  95% |#############################  | Time: 0:00:00  21.84 MB/sglpk-4.61-0.ta  96% |#############################  | Time: 0:00:00  20.24 MB/sglpk-4.61-0.ta  97% |############################## | Time: 0:00:00  20.40 MB/sglpk-4.61-0.ta  99% |############################## | Time: 0:00:00  20.54 MB/sglpk-4.61-0.ta 100% |###############################| Time: 0:00:00  20.52 MB/sglpk-4.61-0.ta 100% |###############################| Time: 0:00:00  20.45 MB/s
gsl-2.2.1-blas   0% |                              | ETA:  --:--:--   0.00  B/sgsl-2.2.1-blas   0% |                               | Time: 0:00:00  27.26 MB/sgsl-2.2.1-blas   0% |                               | Time: 0:00:00  29.41 MB/sgsl-2.2.1-blas   0% |                               | Time: 0:00:00  32.02 MB/sgsl-2.2.1-blas   0% |                               | Time: 0:00:00  33.47 MB/sgsl-2.2.1-blas   1% |                               | Time: 0:00:00  34.46 MB/sgsl-2.2.1-blas   1% |                               | Time: 0:00:00  35.50 MB/sgsl-2.2.1-blas   1% |                               | Time: 0:00:00  36.22 MB/sgsl-2.2.1-blas   1% |                               | Time: 0:00:00  36.20 MB/sgsl-2.2.1-blas   1% |                               | Time: 0:00:00  12.29 MB/sgsl-2.2.1-blas   2% |                               | Time: 0:00:00  13.11 MB/sgsl-2.2.1-blas   2% |                               | Time: 0:00:00  14.01 MB/sgsl-2.2.1-blas   2% |                               | Time: 0:00:00  14.78 MB/sgsl-2.2.1-blas   2% |                               | Time: 0:00:00  15.46 MB/sgsl-2.2.1-blas   3% |                               | Time: 0:00:00  14.35 MB/sgsl-2.2.1-blas   3% |#                              | Time: 0:00:01 161.85 kB/sgsl-2.2.1-blas   3% |#                              | Time: 0:00:01 172.60 kB/sgsl-2.2.1-blas   3% |#                              | Time: 0:00:01 183.33 kB/sgsl-2.2.1-blas   3% |#                              | Time: 0:00:01 194.08 kB/sgsl-2.2.1-blas   4% |#                              | Time: 0:00:01 184.18 kB/sgsl-2.2.1-blas   4% |#                              | Time: 0:00:01 193.82 kB/sgsl-2.2.1-blas   4% |#                              | Time: 0:00:03 107.63 kB/sgsl-2.2.1-blas   4% |#                              | Time: 0:00:03 112.65 kB/sgsl-2.2.1-blas   4% |#                              | Time: 0:00:03 117.54 kB/sgsl-2.2.1-blas   5% |#                              | Time: 0:00:03 122.62 kB/sgsl-2.2.1-blas   5% |#                              | Time: 0:00:03 127.69 kB/sgsl-2.2.1-blas   5% |#                              | Time: 0:00:03 132.70 kB/sgsl-2.2.1-blas   5% |#                              | Time: 0:00:03 137.62 kB/sgsl-2.2.1-blas   6% |#                              | Time: 0:00:03 142.56 kB/sgsl-2.2.1-blas   6% |#                              | Time: 0:00:03 147.62 kB/sgsl-2.2.1-blas   6% |##                             | Time: 0:00:03 152.66 kB/sgsl-2.2.1-blas   6% |##                             | Time: 0:00:03 157.72 kB/sgsl-2.2.1-blas   6% |##                             | Time: 0:00:03 162.78 kB/sgsl-2.2.1-blas   7% |##                             | Time: 0:00:03 167.82 kB/sgsl-2.2.1-blas   7% |##                             | Time: 0:00:03 172.88 kB/sgsl-2.2.1-blas   7% |##                             | Time: 0:00:03 177.89 kB/sgsl-2.2.1-blas   7% |##                             | Time: 0:00:03 182.95 kB/sgsl-2.2.1-blas   8% |##                             | Time: 0:00:03 187.96 kB/sgsl-2.2.1-blas   8% |##                             | Time: 0:00:03 193.02 kB/sgsl-2.2.1-blas   8% |##                             | Time: 0:00:03 198.07 kB/sgsl-2.2.1-blas   8% |##                             | Time: 0:00:03 203.12 kB/sgsl-2.2.1-blas   8% |##                             | Time: 0:00:03 208.16 kB/sgsl-2.2.1-blas   9% |##                             | Time: 0:00:03 213.18 kB/sgsl-2.2.1-blas   9% |##                             | Time: 0:00:03 218.22 kB/sgsl-2.2.1-blas   9% |##                             | Time: 0:00:03 223.23 kB/sgsl-2.2.1-blas   9% |###                            | Time: 0:00:03 228.28 kB/sgsl-2.2.1-blas   9% |###                            | Time: 0:00:03 233.32 kB/sgsl-2.2.1-blas  10% |###                            | Time: 0:00:03 238.31 kB/sgsl-2.2.1-blas  10% |###                            | Time: 0:00:03 243.34 kB/sgsl-2.2.1-blas  10% |###                            | Time: 0:00:03 248.33 kB/sgsl-2.2.1-blas  10% |###                            | Time: 0:00:03 253.31 kB/sgsl-2.2.1-blas  11% |###                            | Time: 0:00:03 258.34 kB/sgsl-2.2.1-blas  11% |###                            | Time: 0:00:03 263.35 kB/sgsl-2.2.1-blas  11% |###                            | Time: 0:00:03 268.39 kB/sgsl-2.2.1-blas  11% |###                            | Time: 0:00:03 273.43 kB/sgsl-2.2.1-blas  11% |###                            | Time: 0:00:03 278.47 kB/sgsl-2.2.1-blas  12% |###                            | Time: 0:00:03 283.51 kB/sgsl-2.2.1-blas  12% |###                            | Time: 0:00:03 287.95 kB/sgsl-2.2.1-blas  12% |###                            | Time: 0:00:03 292.95 kB/sgsl-2.2.1-blas  12% |###                            | Time: 0:00:03 297.95 kB/sgsl-2.2.1-blas  13% |####                           | Time: 0:00:03 302.96 kB/sgsl-2.2.1-blas  13% |####                           | Time: 0:00:03 270.54 kB/sgsl-2.2.1-blas  13% |####                           | Time: 0:00:03 274.93 kB/sgsl-2.2.1-blas  13% |####                           | Time: 0:00:03 279.32 kB/sgsl-2.2.1-blas  13% |####                           | Time: 0:00:03 283.72 kB/sgsl-2.2.1-blas  14% |####                           | Time: 0:00:03 288.11 kB/sgsl-2.2.1-blas  14% |####                           | Time: 0:00:03 292.50 kB/sgsl-2.2.1-blas  14% |####                           | Time: 0:00:03 296.89 kB/sgsl-2.2.1-blas  14% |####                           | Time: 0:00:03 301.28 kB/sgsl-2.2.1-blas  14% |####                           | Time: 0:00:03 305.68 kB/sgsl-2.2.1-blas  15% |####                           | Time: 0:00:03 310.07 kB/sgsl-2.2.1-blas  15% |####                           | Time: 0:00:03 314.46 kB/sgsl-2.2.1-blas  15% |####                           | Time: 0:00:03 318.85 kB/sgsl-2.2.1-blas  15% |####                           | Time: 0:00:03 323.23 kB/sgsl-2.2.1-blas  16% |####                           | Time: 0:00:03 327.62 kB/sgsl-2.2.1-blas  16% |#####                          | Time: 0:00:03 332.02 kB/sgsl-2.2.1-blas  16% |#####                          | Time: 0:00:03 336.42 kB/sgsl-2.2.1-blas  16% |#####                          | Time: 0:00:03 340.80 kB/sgsl-2.2.1-blas  16% |#####                          | Time: 0:00:03 345.19 kB/sgsl-2.2.1-blas  17% |#####                          | Time: 0:00:03 349.57 kB/sgsl-2.2.1-blas  17% |#####                          | Time: 0:00:03 353.93 kB/sgsl-2.2.1-blas  17% |#####                          | Time: 0:00:03 358.31 kB/sgsl-2.2.1-blas  17% |#####                          | Time: 0:00:03 362.69 kB/sgsl-2.2.1-blas  18% |#####                          | Time: 0:00:03 367.07 kB/sgsl-2.2.1-blas  18% |#####                          | Time: 0:00:03 371.44 kB/sgsl-2.2.1-blas  18% |#####                          | Time: 0:00:03 375.81 kB/sgsl-2.2.1-blas  18% |#####                          | Time: 0:00:03 380.18 kB/sgsl-2.2.1-blas  18% |#####                          | Time: 0:00:03 384.55 kB/sgsl-2.2.1-blas  19% |#####                          | Time: 0:00:03 388.92 kB/sgsl-2.2.1-blas  19% |#####                          | Time: 0:00:03 393.29 kB/sgsl-2.2.1-blas  19% |######                         | Time: 0:00:03 397.66 kB/sgsl-2.2.1-blas  19% |######                         | Time: 0:00:03 402.02 kB/sgsl-2.2.1-blas  19% |######                         | Time: 0:00:03 406.40 kB/sgsl-2.2.1-blas  20% |######                         | Time: 0:00:03 410.78 kB/sgsl-2.2.1-blas  20% |######                         | Time: 0:00:03 415.15 kB/sgsl-2.2.1-blas  20% |######                         | Time: 0:00:03 419.51 kB/sgsl-2.2.1-blas  20% |######                         | Time: 0:00:03 423.88 kB/sgsl-2.2.1-blas  21% |######                         | Time: 0:00:03 428.24 kB/sgsl-2.2.1-blas  21% |######                         | Time: 0:00:03 432.60 kB/sgsl-2.2.1-blas  21% |######                         | Time: 0:00:03 436.96 kB/sgsl-2.2.1-blas  21% |######                         | Time: 0:00:03 441.31 kB/sgsl-2.2.1-blas  21% |######                         | Time: 0:00:03 445.67 kB/sgsl-2.2.1-blas  22% |######                         | Time: 0:00:03 450.01 kB/sgsl-2.2.1-blas  22% |######                         | Time: 0:00:03 454.37 kB/sgsl-2.2.1-blas  22% |#######                        | Time: 0:00:03 458.72 kB/sgsl-2.2.1-blas  22% |#######                        | Time: 0:00:03 463.04 kB/sgsl-2.2.1-blas  23% |#######                        | Time: 0:00:03 467.40 kB/sgsl-2.2.1-blas  23% |#######                        | Time: 0:00:03 471.75 kB/sgsl-2.2.1-blas  23% |#######                        | Time: 0:00:03 476.10 kB/sgsl-2.2.1-blas  23% |#######                        | Time: 0:00:03 480.44 kB/sgsl-2.2.1-blas  23% |#######                        | Time: 0:00:03 484.80 kB/sgsl-2.2.1-blas  24% |#######                        | Time: 0:00:03 489.14 kB/sgsl-2.2.1-blas  24% |#######                        | Time: 0:00:03 493.48 kB/sgsl-2.2.1-blas  24% |#######                        | Time: 0:00:03 497.83 kB/sgsl-2.2.1-blas  24% |#######                        | Time: 0:00:03 502.16 kB/sgsl-2.2.1-blas  24% |#######                        | Time: 0:00:03 506.51 kB/sgsl-2.2.1-blas  25% |#######                        | Time: 0:00:03 510.85 kB/sgsl-2.2.1-blas  25% |#######                        | Time: 0:00:03 515.18 kB/sgsl-2.2.1-blas  25% |#######                        | Time: 0:00:03 519.52 kB/sgsl-2.2.1-blas  25% |########                       | Time: 0:00:03 523.85 kB/sgsl-2.2.1-blas  26% |########                       | Time: 0:00:03 528.19 kB/sgsl-2.2.1-blas  26% |########                       | Time: 0:00:03 532.52 kB/sgsl-2.2.1-blas  26% |########                       | Time: 0:00:03 536.85 kB/sgsl-2.2.1-blas  26% |########                       | Time: 0:00:03 541.18 kB/sgsl-2.2.1-blas  26% |########                       | Time: 0:00:03 545.51 kB/sgsl-2.2.1-blas  27% |########                       | Time: 0:00:03 549.84 kB/sgsl-2.2.1-blas  27% |########                       | Time: 0:00:03 554.18 kB/sgsl-2.2.1-blas  27% |########                       | Time: 0:00:03 558.51 kB/sgsl-2.2.1-blas  27% |########                       | Time: 0:00:03 562.84 kB/sgsl-2.2.1-blas  28% |########                       | Time: 0:00:03 567.17 kB/sgsl-2.2.1-blas  28% |########                       | Time: 0:00:03 571.46 kB/sgsl-2.2.1-blas  28% |########                       | Time: 0:00:03 575.78 kB/sgsl-2.2.1-blas  28% |########                       | Time: 0:00:03 580.10 kB/sgsl-2.2.1-blas  28% |########                       | Time: 0:00:03 584.43 kB/sgsl-2.2.1-blas  29% |#########                      | Time: 0:00:03 588.74 kB/sgsl-2.2.1-blas  29% |#########                      | Time: 0:00:03 593.06 kB/sgsl-2.2.1-blas  29% |#########                      | Time: 0:00:03 597.38 kB/sgsl-2.2.1-blas  29% |#########                      | Time: 0:00:03 601.69 kB/sgsl-2.2.1-blas  29% |#########                      | Time: 0:00:03 606.01 kB/sgsl-2.2.1-blas  30% |#########                      | Time: 0:00:03 610.32 kB/sgsl-2.2.1-blas  30% |#########                      | Time: 0:00:03 614.63 kB/sgsl-2.2.1-blas  30% |#########                      | Time: 0:00:03 618.94 kB/sgsl-2.2.1-blas  30% |#########                      | Time: 0:00:03 623.25 kB/sgsl-2.2.1-blas  31% |#########                      | Time: 0:00:03 627.58 kB/sgsl-2.2.1-blas  31% |#########                      | Time: 0:00:03 631.89 kB/sgsl-2.2.1-blas  31% |#########                      | Time: 0:00:03 636.20 kB/sgsl-2.2.1-blas  31% |#########                      | Time: 0:00:03 640.51 kB/sgsl-2.2.1-blas  31% |#########                      | Time: 0:00:03 644.81 kB/sgsl-2.2.1-blas  32% |#########                      | Time: 0:00:03 649.12 kB/sgsl-2.2.1-blas  32% |##########                     | Time: 0:00:03 653.43 kB/sgsl-2.2.1-blas  32% |##########                     | Time: 0:00:03 657.73 kB/sgsl-2.2.1-blas  32% |##########                     | Time: 0:00:03 662.01 kB/sgsl-2.2.1-blas  33% |##########                     | Time: 0:00:03 666.31 kB/sgsl-2.2.1-blas  33% |##########                     | Time: 0:00:03 670.61 kB/sgsl-2.2.1-blas  33% |##########                     | Time: 0:00:03 674.91 kB/sgsl-2.2.1-blas  33% |##########                     | Time: 0:00:03 679.22 kB/sgsl-2.2.1-blas  33% |##########                     | Time: 0:00:03 683.48 kB/sgsl-2.2.1-blas  34% |##########                     | Time: 0:00:03 687.78 kB/sgsl-2.2.1-blas  34% |##########                     | Time: 0:00:03 692.07 kB/sgsl-2.2.1-blas  34% |##########                     | Time: 0:00:03 696.34 kB/sgsl-2.2.1-blas  34% |##########                     | Time: 0:00:03 700.65 kB/sgsl-2.2.1-blas  34% |##########                     | Time: 0:00:03 704.93 kB/sgsl-2.2.1-blas  35% |##########                     | Time: 0:00:03 709.22 kB/sgsl-2.2.1-blas  35% |##########                     | Time: 0:00:03 713.51 kB/sgsl-2.2.1-blas  35% |###########                    | Time: 0:00:03 717.80 kB/sgsl-2.2.1-blas  35% |###########                    | Time: 0:00:03 722.08 kB/sgsl-2.2.1-blas  36% |###########                    | Time: 0:00:03 726.37 kB/sgsl-2.2.1-blas  36% |###########                    | Time: 0:00:03 730.66 kB/sgsl-2.2.1-blas  36% |###########                    | Time: 0:00:03 734.94 kB/sgsl-2.2.1-blas  36% |###########                    | Time: 0:00:03 739.22 kB/sgsl-2.2.1-blas  36% |###########                    | Time: 0:00:03 743.50 kB/sgsl-2.2.1-blas  37% |###########                    | Time: 0:00:03 747.78 kB/sgsl-2.2.1-blas  37% |###########                    | Time: 0:00:03 752.06 kB/sgsl-2.2.1-blas  37% |###########                    | Time: 0:00:03 756.34 kB/sgsl-2.2.1-blas  37% |###########                    | Time: 0:00:03 760.62 kB/sgsl-2.2.1-blas  38% |###########                    | Time: 0:00:03 764.90 kB/sgsl-2.2.1-blas  38% |###########                    | Time: 0:00:03 769.18 kB/sgsl-2.2.1-blas  38% |###########                    | Time: 0:00:03 773.48 kB/sgsl-2.2.1-blas  38% |###########                    | Time: 0:00:03 777.76 kB/sgsl-2.2.1-blas  38% |############                   | Time: 0:00:03 782.03 kB/sgsl-2.2.1-blas  39% |############                   | Time: 0:00:03 786.30 kB/sgsl-2.2.1-blas  39% |############                   | Time: 0:00:03 790.54 kB/sgsl-2.2.1-blas  39% |############                   | Time: 0:00:03 794.82 kB/sgsl-2.2.1-blas  39% |############                   | Time: 0:00:03 799.10 kB/sgsl-2.2.1-blas  39% |############                   | Time: 0:00:03 803.38 kB/sgsl-2.2.1-blas  40% |############                   | Time: 0:00:03 807.66 kB/sgsl-2.2.1-blas  40% |############                   | Time: 0:00:03 811.97 kB/sgsl-2.2.1-blas  40% |############                   | Time: 0:00:03 816.25 kB/sgsl-2.2.1-blas  40% |############                   | Time: 0:00:03 820.50 kB/sgsl-2.2.1-blas  41% |############                   | Time: 0:00:03 824.76 kB/sgsl-2.2.1-blas  41% |############                   | Time: 0:00:03 829.02 kB/sgsl-2.2.1-blas  41% |############                   | Time: 0:00:03 833.28 kB/sgsl-2.2.1-blas  41% |############                   | Time: 0:00:03 837.54 kB/sgsl-2.2.1-blas  41% |############                   | Time: 0:00:03 841.79 kB/sgsl-2.2.1-blas  42% |#############                  | Time: 0:00:03 846.08 kB/sgsl-2.2.1-blas  42% |#############                  | Time: 0:00:03 850.34 kB/sgsl-2.2.1-blas  42% |#############                  | Time: 0:00:03 854.60 kB/sgsl-2.2.1-blas  42% |#############                  | Time: 0:00:03 858.85 kB/sgsl-2.2.1-blas  43% |#############                  | Time: 0:00:03 863.11 kB/sgsl-2.2.1-blas  43% |#############                  | Time: 0:00:03 867.35 kB/sgsl-2.2.1-blas  43% |#############                  | Time: 0:00:03 871.61 kB/sgsl-2.2.1-blas  43% |#############                  | Time: 0:00:03 875.85 kB/sgsl-2.2.1-blas  43% |#############                  | Time: 0:00:03 880.11 kB/sgsl-2.2.1-blas  44% |#############                  | Time: 0:00:03 884.37 kB/sgsl-2.2.1-blas  44% |#############                  | Time: 0:00:03 888.44 kB/sgsl-2.2.1-blas  44% |#############                  | Time: 0:00:03 892.69 kB/sgsl-2.2.1-blas  44% |#############                  | Time: 0:00:03 896.95 kB/sgsl-2.2.1-blas  44% |#############                  | Time: 0:00:03 901.19 kB/sgsl-2.2.1-blas  45% |##############                 | Time: 0:00:03 905.39 kB/sgsl-2.2.1-blas  45% |##############                 | Time: 0:00:03 909.64 kB/sgsl-2.2.1-blas  45% |##############                 | Time: 0:00:03 913.89 kB/sgsl-2.2.1-blas  45% |##############                 | Time: 0:00:03 918.18 kB/sgsl-2.2.1-blas  46% |##############                 | Time: 0:00:03 922.44 kB/sgsl-2.2.1-blas  46% |##############                 | Time: 0:00:03 926.69 kB/sgsl-2.2.1-blas  46% |##############                 | Time: 0:00:03 930.94 kB/sgsl-2.2.1-blas  46% |##############                 | Time: 0:00:03 935.19 kB/sgsl-2.2.1-blas  46% |##############                 | Time: 0:00:03 939.44 kB/sgsl-2.2.1-blas  47% |##############                 | Time: 0:00:03 943.69 kB/sgsl-2.2.1-blas  47% |##############                 | Time: 0:00:03 947.94 kB/sgsl-2.2.1-blas  47% |##############                 | Time: 0:00:03 952.19 kB/sgsl-2.2.1-blas  47% |##############                 | Time: 0:00:03 956.45 kB/sgsl-2.2.1-blas  47% |##############                 | Time: 0:00:03 960.71 kB/sgsl-2.2.1-blas  48% |##############                 | Time: 0:00:03 965.02 kB/sgsl-2.2.1-blas  48% |###############                | Time: 0:00:03 969.26 kB/sgsl-2.2.1-blas  48% |###############                | Time: 0:00:03 973.51 kB/sgsl-2.2.1-blas  48% |###############                | Time: 0:00:03 977.76 kB/sgsl-2.2.1-blas  49% |###############                | Time: 0:00:03 982.01 kB/sgsl-2.2.1-blas  49% |###############                | Time: 0:00:03 986.26 kB/sgsl-2.2.1-blas  49% |###############                | Time: 0:00:03 990.53 kB/sgsl-2.2.1-blas  49% |###############                | Time: 0:00:03 994.77 kB/sgsl-2.2.1-blas  49% |###############                | Time: 0:00:03 999.00 kB/sgsl-2.2.1-blas  50% |###############                | Time: 0:00:03   1.00 MB/sgsl-2.2.1-blas  50% |###############                | Time: 0:00:03   1.01 MB/sgsl-2.2.1-blas  50% |###############                | Time: 0:00:03   1.01 MB/sgsl-2.2.1-blas  50% |###############                | Time: 0:00:03   1.02 MB/sgsl-2.2.1-blas  51% |###############                | Time: 0:00:03   1.02 MB/sgsl-2.2.1-blas  51% |###############                | Time: 0:00:03   1.02 MB/sgsl-2.2.1-blas  51% |###############                | Time: 0:00:03   1.03 MB/sgsl-2.2.1-blas  51% |################               | Time: 0:00:03   1.03 MB/sgsl-2.2.1-blas  51% |################               | Time: 0:00:03   1.04 MB/sgsl-2.2.1-blas  52% |################               | Time: 0:00:03   1.04 MB/sgsl-2.2.1-blas  52% |################               | Time: 0:00:03   1.05 MB/sgsl-2.2.1-blas  52% |################               | Time: 0:00:03   1.05 MB/sgsl-2.2.1-blas  52% |################               | Time: 0:00:03   1.05 MB/sgsl-2.2.1-blas  52% |################               | Time: 0:00:03   1.06 MB/sgsl-2.2.1-blas  53% |################               | Time: 0:00:03   1.06 MB/sgsl-2.2.1-blas  53% |################               | Time: 0:00:03   1.07 MB/sgsl-2.2.1-blas  53% |################               | Time: 0:00:03   1.07 MB/sgsl-2.2.1-blas  53% |################               | Time: 0:00:03   1.08 MB/sgsl-2.2.1-blas  54% |################               | Time: 0:00:03   1.08 MB/sgsl-2.2.1-blas  54% |################               | Time: 0:00:03   1.08 MB/sgsl-2.2.1-blas  54% |################               | Time: 0:00:03   1.09 MB/sgsl-2.2.1-blas  54% |################               | Time: 0:00:03   1.09 MB/sgsl-2.2.1-blas  54% |#################              | Time: 0:00:03   1.10 MB/sgsl-2.2.1-blas  55% |#################              | Time: 0:00:03   1.10 MB/sgsl-2.2.1-blas  55% |#################              | Time: 0:00:03   1.10 MB/sgsl-2.2.1-blas  55% |#################              | Time: 0:00:03   1.11 MB/sgsl-2.2.1-blas  55% |#################              | Time: 0:00:03   1.11 MB/sgsl-2.2.1-blas  56% |#################              | Time: 0:00:03   1.12 MB/sgsl-2.2.1-blas  56% |#################              | Time: 0:00:03   1.12 MB/sgsl-2.2.1-blas  56% |#################              | Time: 0:00:03   1.13 MB/sgsl-2.2.1-blas  56% |#################              | Time: 0:00:03   1.13 MB/sgsl-2.2.1-blas  56% |#################              | Time: 0:00:03   1.13 MB/sgsl-2.2.1-blas  57% |#################              | Time: 0:00:03   1.14 MB/sgsl-2.2.1-blas  57% |#################              | Time: 0:00:03   1.14 MB/sgsl-2.2.1-blas  57% |#################              | Time: 0:00:03   1.15 MB/sgsl-2.2.1-blas  57% |#################              | Time: 0:00:03   1.15 MB/sgsl-2.2.1-blas  57% |#################              | Time: 0:00:03   1.15 MB/sgsl-2.2.1-blas  58% |##################             | Time: 0:00:03   1.16 MB/sgsl-2.2.1-blas  58% |##################             | Time: 0:00:03   1.16 MB/sgsl-2.2.1-blas  58% |##################             | Time: 0:00:03   1.17 MB/sgsl-2.2.1-blas  58% |##################             | Time: 0:00:03   1.17 MB/sgsl-2.2.1-blas  59% |##################             | Time: 0:00:03   1.18 MB/sgsl-2.2.1-blas  59% |##################             | Time: 0:00:03   1.18 MB/sgsl-2.2.1-blas  59% |##################             | Time: 0:00:03   1.18 MB/sgsl-2.2.1-blas  59% |##################             | Time: 0:00:03   1.19 MB/sgsl-2.2.1-blas  59% |##################             | Time: 0:00:03   1.19 MB/sgsl-2.2.1-blas  60% |##################             | Time: 0:00:03   1.20 MB/sgsl-2.2.1-blas  60% |##################             | Time: 0:00:03   1.20 MB/sgsl-2.2.1-blas  60% |##################             | Time: 0:00:03   1.21 MB/sgsl-2.2.1-blas  60% |##################             | Time: 0:00:03   1.21 MB/sgsl-2.2.1-blas  61% |##################             | Time: 0:00:03   1.21 MB/sgsl-2.2.1-blas  61% |##################             | Time: 0:00:03   1.22 MB/sgsl-2.2.1-blas  61% |###################            | Time: 0:00:03   1.22 MB/sgsl-2.2.1-blas  61% |###################            | Time: 0:00:03   1.23 MB/sgsl-2.2.1-blas  61% |###################            | Time: 0:00:03   1.23 MB/sgsl-2.2.1-blas  62% |###################            | Time: 0:00:03   1.23 MB/sgsl-2.2.1-blas  62% |###################            | Time: 0:00:03   1.24 MB/sgsl-2.2.1-blas  62% |###################            | Time: 0:00:03   1.24 MB/sgsl-2.2.1-blas  62% |###################            | Time: 0:00:03   1.25 MB/sgsl-2.2.1-blas  62% |###################            | Time: 0:00:03   1.25 MB/sgsl-2.2.1-blas  63% |###################            | Time: 0:00:03   1.26 MB/sgsl-2.2.1-blas  63% |###################            | Time: 0:00:03   1.26 MB/sgsl-2.2.1-blas  63% |###################            | Time: 0:00:03   1.26 MB/sgsl-2.2.1-blas  63% |###################            | Time: 0:00:03   1.27 MB/sgsl-2.2.1-blas  64% |###################            | Time: 0:00:03   1.27 MB/sgsl-2.2.1-blas  64% |###################            | Time: 0:00:03   1.28 MB/sgsl-2.2.1-blas  64% |###################            | Time: 0:00:03   1.28 MB/sgsl-2.2.1-blas  64% |####################           | Time: 0:00:03   1.28 MB/sgsl-2.2.1-blas  64% |####################           | Time: 0:00:03   1.29 MB/sgsl-2.2.1-blas  65% |####################           | Time: 0:00:03   1.29 MB/sgsl-2.2.1-blas  65% |####################           | Time: 0:00:03   1.30 MB/sgsl-2.2.1-blas  65% |####################           | Time: 0:00:03   1.30 MB/sgsl-2.2.1-blas  65% |####################           | Time: 0:00:03   1.31 MB/sgsl-2.2.1-blas  66% |####################           | Time: 0:00:03   1.31 MB/sgsl-2.2.1-blas  66% |####################           | Time: 0:00:03   1.31 MB/sgsl-2.2.1-blas  66% |####################           | Time: 0:00:03   1.32 MB/sgsl-2.2.1-blas  66% |####################           | Time: 0:00:03   1.32 MB/sgsl-2.2.1-blas  66% |####################           | Time: 0:00:03   1.33 MB/sgsl-2.2.1-blas  67% |####################           | Time: 0:00:03   1.33 MB/sgsl-2.2.1-blas  67% |####################           | Time: 0:00:03   1.33 MB/sgsl-2.2.1-blas  67% |####################           | Time: 0:00:03   1.34 MB/sgsl-2.2.1-blas  67% |#####################          | Time: 0:00:03   1.34 MB/sgsl-2.2.1-blas  67% |#####################          | Time: 0:00:03   1.35 MB/sgsl-2.2.1-blas  68% |#####################          | Time: 0:00:03   1.35 MB/sgsl-2.2.1-blas  68% |#####################          | Time: 0:00:03   1.36 MB/sgsl-2.2.1-blas  68% |#####################          | Time: 0:00:03   1.36 MB/sgsl-2.2.1-blas  68% |#####################          | Time: 0:00:03   1.36 MB/sgsl-2.2.1-blas  69% |#####################          | Time: 0:00:03   1.37 MB/sgsl-2.2.1-blas  69% |#####################          | Time: 0:00:03   1.37 MB/sgsl-2.2.1-blas  69% |#####################          | Time: 0:00:03   1.38 MB/sgsl-2.2.1-blas  69% |#####################          | Time: 0:00:03   1.38 MB/sgsl-2.2.1-blas  69% |#####################          | Time: 0:00:03   1.38 MB/sgsl-2.2.1-blas  70% |#####################          | Time: 0:00:03   1.39 MB/sgsl-2.2.1-blas  70% |#####################          | Time: 0:00:03   1.39 MB/sgsl-2.2.1-blas  70% |#####################          | Time: 0:00:03   1.40 MB/sgsl-2.2.1-blas  70% |#####################          | Time: 0:00:03   1.40 MB/sgsl-2.2.1-blas  71% |######################         | Time: 0:00:03   1.41 MB/sgsl-2.2.1-blas  71% |######################         | Time: 0:00:03   1.41 MB/sgsl-2.2.1-blas  71% |######################         | Time: 0:00:03   1.41 MB/sgsl-2.2.1-blas  71% |######################         | Time: 0:00:03   1.42 MB/sgsl-2.2.1-blas  71% |######################         | Time: 0:00:03   1.42 MB/sgsl-2.2.1-blas  72% |######################         | Time: 0:00:03   1.43 MB/sgsl-2.2.1-blas  72% |######################         | Time: 0:00:03   1.43 MB/sgsl-2.2.1-blas  72% |######################         | Time: 0:00:03   1.43 MB/sgsl-2.2.1-blas  72% |######################         | Time: 0:00:03   1.44 MB/sgsl-2.2.1-blas  72% |######################         | Time: 0:00:03   1.44 MB/sgsl-2.2.1-blas  73% |######################         | Time: 0:00:03   1.45 MB/sgsl-2.2.1-blas  73% |######################         | Time: 0:00:03   1.45 MB/sgsl-2.2.1-blas  73% |######################         | Time: 0:00:03   1.45 MB/sgsl-2.2.1-blas  73% |######################         | Time: 0:00:03   1.46 MB/sgsl-2.2.1-blas  74% |######################         | Time: 0:00:03   1.46 MB/sgsl-2.2.1-blas  74% |#######################        | Time: 0:00:03   1.47 MB/sgsl-2.2.1-blas  74% |#######################        | Time: 0:00:03   1.47 MB/sgsl-2.2.1-blas  74% |#######################        | Time: 0:00:03   1.48 MB/sgsl-2.2.1-blas  74% |#######################        | Time: 0:00:03   1.48 MB/sgsl-2.2.1-blas  75% |#######################        | Time: 0:00:03   1.48 MB/sgsl-2.2.1-blas  75% |#######################        | Time: 0:00:03   1.49 MB/sgsl-2.2.1-blas  75% |#######################        | Time: 0:00:03   1.49 MB/sgsl-2.2.1-blas  75% |#######################        | Time: 0:00:03   1.50 MB/sgsl-2.2.1-blas  76% |#######################        | Time: 0:00:03   1.50 MB/sgsl-2.2.1-blas  76% |#######################        | Time: 0:00:03   1.50 MB/sgsl-2.2.1-blas  76% |#######################        | Time: 0:00:03   1.51 MB/sgsl-2.2.1-blas  76% |#######################        | Time: 0:00:03   1.51 MB/sgsl-2.2.1-blas  76% |#######################        | Time: 0:00:03   1.52 MB/sgsl-2.2.1-blas  77% |#######################        | Time: 0:00:03   1.52 MB/sgsl-2.2.1-blas  77% |#######################        | Time: 0:00:03   1.53 MB/sgsl-2.2.1-blas  77% |########################       | Time: 0:00:03   1.53 MB/sgsl-2.2.1-blas  77% |########################       | Time: 0:00:03   1.53 MB/sgsl-2.2.1-blas  77% |########################       | Time: 0:00:03   1.54 MB/sgsl-2.2.1-blas  78% |########################       | Time: 0:00:03   1.54 MB/sgsl-2.2.1-blas  78% |########################       | Time: 0:00:03   1.55 MB/sgsl-2.2.1-blas  78% |########################       | Time: 0:00:03   1.55 MB/sgsl-2.2.1-blas  78% |########################       | Time: 0:00:03   1.55 MB/sgsl-2.2.1-blas  79% |########################       | Time: 0:00:03   1.56 MB/sgsl-2.2.1-blas  79% |########################       | Time: 0:00:03   1.56 MB/sgsl-2.2.1-blas  79% |########################       | Time: 0:00:03   1.57 MB/sgsl-2.2.1-blas  79% |########################       | Time: 0:00:03   1.57 MB/sgsl-2.2.1-blas  79% |########################       | Time: 0:00:03   1.57 MB/sgsl-2.2.1-blas  80% |########################       | Time: 0:00:03   1.58 MB/sgsl-2.2.1-blas  80% |########################       | Time: 0:00:03   1.58 MB/sgsl-2.2.1-blas  80% |########################       | Time: 0:00:03   1.59 MB/sgsl-2.2.1-blas  80% |#########################      | Time: 0:00:03   1.59 MB/sgsl-2.2.1-blas  81% |#########################      | Time: 0:00:03   1.60 MB/sgsl-2.2.1-blas  81% |#########################      | Time: 0:00:03   1.60 MB/sgsl-2.2.1-blas  81% |#########################      | Time: 0:00:03   1.60 MB/sgsl-2.2.1-blas  81% |#########################      | Time: 0:00:03   1.61 MB/sgsl-2.2.1-blas  81% |#########################      | Time: 0:00:03   1.61 MB/sgsl-2.2.1-blas  82% |#########################      | Time: 0:00:03   1.62 MB/sgsl-2.2.1-blas  82% |#########################      | Time: 0:00:03   1.62 MB/sgsl-2.2.1-blas  82% |#########################      | Time: 0:00:03   1.62 MB/sgsl-2.2.1-blas  82% |#########################      | Time: 0:00:03   1.63 MB/sgsl-2.2.1-blas  82% |#########################      | Time: 0:00:03   1.63 MB/sgsl-2.2.1-blas  83% |#########################      | Time: 0:00:03   1.64 MB/sgsl-2.2.1-blas  83% |#########################      | Time: 0:00:03   1.64 MB/sgsl-2.2.1-blas  83% |#########################      | Time: 0:00:03   1.65 MB/sgsl-2.2.1-blas  83% |#########################      | Time: 0:00:03   1.65 MB/sgsl-2.2.1-blas  84% |##########################     | Time: 0:00:03   1.65 MB/sgsl-2.2.1-blas  84% |##########################     | Time: 0:00:03   1.66 MB/sgsl-2.2.1-blas  84% |##########################     | Time: 0:00:03   1.66 MB/sgsl-2.2.1-blas  84% |##########################     | Time: 0:00:03   1.67 MB/sgsl-2.2.1-blas  84% |##########################     | Time: 0:00:03   1.67 MB/sgsl-2.2.1-blas  85% |##########################     | Time: 0:00:03   1.67 MB/sgsl-2.2.1-blas  85% |##########################     | Time: 0:00:03   1.68 MB/sgsl-2.2.1-blas  85% |##########################     | Time: 0:00:03   1.68 MB/sgsl-2.2.1-blas  85% |##########################     | Time: 0:00:03   1.69 MB/sgsl-2.2.1-blas  86% |##########################     | Time: 0:00:03   1.69 MB/sgsl-2.2.1-blas  86% |##########################     | Time: 0:00:03   1.69 MB/sgsl-2.2.1-blas  86% |##########################     | Time: 0:00:03   1.70 MB/sgsl-2.2.1-blas  86% |##########################     | Time: 0:00:03   1.70 MB/sgsl-2.2.1-blas  86% |##########################     | Time: 0:00:03   1.71 MB/sgsl-2.2.1-blas  87% |##########################     | Time: 0:00:03   1.71 MB/sgsl-2.2.1-blas  87% |###########################    | Time: 0:00:03   1.71 MB/sgsl-2.2.1-blas  87% |###########################    | Time: 0:00:03   1.72 MB/sgsl-2.2.1-blas  87% |###########################    | Time: 0:00:03   1.72 MB/sgsl-2.2.1-blas  87% |###########################    | Time: 0:00:03   1.72 MB/sgsl-2.2.1-blas  88% |###########################    | Time: 0:00:03   1.73 MB/sgsl-2.2.1-blas  88% |###########################    | Time: 0:00:03   1.73 MB/sgsl-2.2.1-blas  88% |###########################    | Time: 0:00:03   1.74 MB/sgsl-2.2.1-blas  88% |###########################    | Time: 0:00:03   1.74 MB/sgsl-2.2.1-blas  89% |###########################    | Time: 0:00:03   1.74 MB/sgsl-2.2.1-blas  89% |###########################    | Time: 0:00:03   1.74 MB/sgsl-2.2.1-blas  89% |###########################    | Time: 0:00:03   1.75 MB/sgsl-2.2.1-blas  89% |###########################    | Time: 0:00:03   1.75 MB/sgsl-2.2.1-blas  89% |###########################    | Time: 0:00:03   1.76 MB/sgsl-2.2.1-blas  90% |###########################    | Time: 0:00:03   1.76 MB/sgsl-2.2.1-blas  90% |############################   | Time: 0:00:03   1.76 MB/sgsl-2.2.1-blas  90% |############################   | Time: 0:00:03   1.77 MB/sgsl-2.2.1-blas  90% |############################   | Time: 0:00:03   1.77 MB/sgsl-2.2.1-blas  91% |############################   | Time: 0:00:03   1.78 MB/sgsl-2.2.1-blas  91% |############################   | Time: 0:00:03   1.78 MB/sgsl-2.2.1-blas  91% |############################   | Time: 0:00:03   1.78 MB/sgsl-2.2.1-blas  91% |############################   | Time: 0:00:03   1.78 MB/sgsl-2.2.1-blas  91% |############################   | Time: 0:00:03   1.79 MB/sgsl-2.2.1-blas  92% |############################   | Time: 0:00:03   1.79 MB/sgsl-2.2.1-blas  92% |############################   | Time: 0:00:03   1.80 MB/sgsl-2.2.1-blas  92% |############################   | Time: 0:00:03   1.80 MB/sgsl-2.2.1-blas  92% |############################   | Time: 0:00:03   1.80 MB/sgsl-2.2.1-blas  92% |############################   | Time: 0:00:03   1.81 MB/sgsl-2.2.1-blas  93% |############################   | Time: 0:00:03   1.81 MB/sgsl-2.2.1-blas  93% |############################   | Time: 0:00:03   1.82 MB/sgsl-2.2.1-blas  93% |#############################  | Time: 0:00:03   1.82 MB/sgsl-2.2.1-blas  93% |#############################  | Time: 0:00:03   1.82 MB/sgsl-2.2.1-blas  94% |#############################  | Time: 0:00:03   1.83 MB/sgsl-2.2.1-blas  94% |#############################  | Time: 0:00:03   1.83 MB/sgsl-2.2.1-blas  94% |#############################  | Time: 0:00:03   1.83 MB/sgsl-2.2.1-blas  94% |#############################  | Time: 0:00:03   1.84 MB/sgsl-2.2.1-blas  94% |#############################  | Time: 0:00:03   1.84 MB/sgsl-2.2.1-blas  95% |#############################  | Time: 0:00:03   1.84 MB/sgsl-2.2.1-blas  95% |#############################  | Time: 0:00:03   1.85 MB/sgsl-2.2.1-blas  95% |#############################  | Time: 0:00:03   1.85 MB/sgsl-2.2.1-blas  95% |#############################  | Time: 0:00:03   1.86 MB/sgsl-2.2.1-blas  95% |#############################  | Time: 0:00:03   1.86 MB/sgsl-2.2.1-blas  96% |#############################  | Time: 0:00:03   1.86 MB/sgsl-2.2.1-blas  96% |#############################  | Time: 0:00:03   1.87 MB/sgsl-2.2.1-blas  96% |#############################  | Time: 0:00:03   1.87 MB/sgsl-2.2.1-blas  96% |############################## | Time: 0:00:03   1.87 MB/sgsl-2.2.1-blas  97% |############################## | Time: 0:00:05   1.35 MB/sgsl-2.2.1-blas  97% |############################## | Time: 0:00:05   1.36 MB/sgsl-2.2.1-blas  97% |############################## | Time: 0:00:05   1.36 MB/sgsl-2.2.1-blas  97% |############################## | Time: 0:00:05   1.36 MB/sgsl-2.2.1-blas  97% |############################## | Time: 0:00:05   1.37 MB/sgsl-2.2.1-blas  98% |############################## | Time: 0:00:05   1.37 MB/sgsl-2.2.1-blas  98% |############################## | Time: 0:00:05   1.37 MB/sgsl-2.2.1-blas  98% |############################## | Time: 0:00:05   1.38 MB/sgsl-2.2.1-blas  98% |############################## | Time: 0:00:05   1.38 MB/sgsl-2.2.1-blas  99% |############################## | Time: 0:00:05   1.38 MB/sgsl-2.2.1-blas  99% |############################## | Time: 0:00:05   1.38 MB/sgsl-2.2.1-blas  99% |############################## | Time: 0:00:05   1.39 MB/sgsl-2.2.1-blas  99% |############################## | Time: 0:00:05   1.39 MB/sgsl-2.2.1-blas  99% |############################## | Time: 0:00:05   1.39 MB/sgsl-2.2.1-blas 100% |###############################| Time: 0:00:05   1.39 MB/sgsl-2.2.1-blas 100% |###############################| Time: 0:00:05   1.39 MB/s
suitesparse-4.   0% |                              | ETA:  --:--:--   0.00  B/ssuitesparse-4.   0% |                               | Time: 0:00:00   1.25 MB/ssuitesparse-4.   1% |                               | Time: 0:00:00   1.24 MB/ssuitesparse-4.   2% |                               | Time: 0:00:00   1.82 MB/ssuitesparse-4.   2% |                               | Time: 0:00:00   1.65 MB/ssuitesparse-4.   3% |#                              | Time: 0:00:00   1.54 MB/ssuitesparse-4.   4% |#                              | Time: 0:00:00   1.82 MB/ssuitesparse-4.   5% |#                              | Time: 0:00:00   1.73 MB/ssuitesparse-4.   5% |#                              | Time: 0:00:00   1.96 MB/ssuitesparse-4.   6% |##                             | Time: 0:00:00   1.85 MB/ssuitesparse-4.   7% |##                             | Time: 0:00:00   2.04 MB/ssuitesparse-4.   8% |##                             | Time: 0:00:00   2.23 MB/ssuitesparse-4.   8% |##                             | Time: 0:00:00   2.41 MB/ssuitesparse-4.   9% |##                             | Time: 0:00:00   2.27 MB/ssuitesparse-4.  10% |###                            | Time: 0:00:00   2.43 MB/ssuitesparse-4.  11% |###                            | Time: 0:00:00   2.59 MB/ssuitesparse-4.  11% |###                            | Time: 0:00:00   2.45 MB/ssuitesparse-4.  12% |###                            | Time: 0:00:00   2.58 MB/ssuitesparse-4.  13% |####                           | Time: 0:00:00   2.71 MB/ssuitesparse-4.  13% |####                           | Time: 0:00:00   2.85 MB/ssuitesparse-4.  14% |####                           | Time: 0:00:00   2.72 MB/ssuitesparse-4.  15% |####                           | Time: 0:00:00   2.83 MB/ssuitesparse-4.  16% |#####                          | Time: 0:00:00   2.94 MB/ssuitesparse-4.  16% |#####                          | Time: 0:00:00   3.06 MB/ssuitesparse-4.  17% |#####                          | Time: 0:00:00   3.18 MB/ssuitesparse-4.  18% |#####                          | Time: 0:00:00   3.00 MB/ssuitesparse-4.  19% |#####                          | Time: 0:00:00   3.10 MB/ssuitesparse-4.  19% |######                         | Time: 0:00:00   3.20 MB/ssuitesparse-4.  20% |######                         | Time: 0:00:00   3.30 MB/ssuitesparse-4.  21% |######                         | Time: 0:00:00   3.41 MB/ssuitesparse-4.  22% |######                         | Time: 0:00:00   3.51 MB/ssuitesparse-4.  22% |#######                        | Time: 0:00:00   3.46 MB/ssuitesparse-4.  23% |#######                        | Time: 0:00:00   3.55 MB/ssuitesparse-4.  24% |#######                        | Time: 0:00:00   3.63 MB/ssuitesparse-4.  24% |#######                        | Time: 0:00:00   3.72 MB/ssuitesparse-4.  25% |#######                        | Time: 0:00:01 347.42 kB/ssuitesparse-4.  26% |########                       | Time: 0:00:01 357.09 kB/ssuitesparse-4.  27% |########                       | Time: 0:00:01 366.65 kB/ssuitesparse-4.  27% |########                       | Time: 0:00:01 376.08 kB/ssuitesparse-4.  28% |########                       | Time: 0:00:01 385.35 kB/ssuitesparse-4.  29% |#########                      | Time: 0:00:01 394.92 kB/ssuitesparse-4.  30% |#########                      | Time: 0:00:01 404.52 kB/ssuitesparse-4.  30% |#########                      | Time: 0:00:01 414.10 kB/ssuitesparse-4.  31% |#########                      | Time: 0:00:01 423.68 kB/ssuitesparse-4.  32% |##########                     | Time: 0:00:01 433.16 kB/ssuitesparse-4.  33% |##########                     | Time: 0:00:01 442.72 kB/ssuitesparse-4.  33% |##########                     | Time: 0:00:01 452.42 kB/ssuitesparse-4.  34% |##########                     | Time: 0:00:01 462.16 kB/ssuitesparse-4.  35% |##########                     | Time: 0:00:01 471.87 kB/ssuitesparse-4.  36% |###########                    | Time: 0:00:01 481.43 kB/ssuitesparse-4.  36% |###########                    | Time: 0:00:01 490.86 kB/ssuitesparse-4.  37% |###########                    | Time: 0:00:01 500.29 kB/ssuitesparse-4.  38% |###########                    | Time: 0:00:01 509.69 kB/ssuitesparse-4.  38% |############                   | Time: 0:00:01 519.09 kB/ssuitesparse-4.  39% |############                   | Time: 0:00:01 528.43 kB/ssuitesparse-4.  40% |############                   | Time: 0:00:01 537.78 kB/ssuitesparse-4.  41% |############                   | Time: 0:00:01 547.05 kB/ssuitesparse-4.  41% |############                   | Time: 0:00:01 556.38 kB/ssuitesparse-4.  42% |#############                  | Time: 0:00:01 565.73 kB/ssuitesparse-4.  43% |#############                  | Time: 0:00:01 575.07 kB/ssuitesparse-4.  44% |#############                  | Time: 0:00:01 584.42 kB/ssuitesparse-4.  44% |#############                  | Time: 0:00:01 593.71 kB/ssuitesparse-4.  45% |##############                 | Time: 0:00:01 603.01 kB/ssuitesparse-4.  46% |##############                 | Time: 0:00:01 612.55 kB/ssuitesparse-4.  47% |##############                 | Time: 0:00:01 622.18 kB/ssuitesparse-4.  47% |##############                 | Time: 0:00:01 631.85 kB/ssuitesparse-4.  48% |###############                | Time: 0:00:01 641.43 kB/ssuitesparse-4.  49% |###############                | Time: 0:00:01 651.01 kB/ssuitesparse-4.  49% |###############                | Time: 0:00:01 660.58 kB/ssuitesparse-4.  50% |###############                | Time: 0:00:01 670.15 kB/ssuitesparse-4.  51% |###############                | Time: 0:00:01 679.72 kB/ssuitesparse-4.  52% |################               | Time: 0:00:01 689.21 kB/ssuitesparse-4.  52% |################               | Time: 0:00:01 698.76 kB/ssuitesparse-4.  53% |################               | Time: 0:00:01 708.30 kB/ssuitesparse-4.  54% |################               | Time: 0:00:01 717.83 kB/ssuitesparse-4.  55% |#################              | Time: 0:00:01 727.37 kB/ssuitesparse-4.  55% |#################              | Time: 0:00:01 736.67 kB/ssuitesparse-4.  56% |#################              | Time: 0:00:01 746.19 kB/ssuitesparse-4.  57% |#################              | Time: 0:00:01 755.69 kB/ssuitesparse-4.  58% |##################             | Time: 0:00:01 765.20 kB/ssuitesparse-4.  58% |##################             | Time: 0:00:01 774.69 kB/ssuitesparse-4.  59% |##################             | Time: 0:00:01 784.23 kB/ssuitesparse-4.  60% |##################             | Time: 0:00:01 793.74 kB/ssuitesparse-4.  61% |##################             | Time: 0:00:01 803.26 kB/ssuitesparse-4.  61% |###################            | Time: 0:00:01 812.75 kB/ssuitesparse-4.  62% |###################            | Time: 0:00:01 822.36 kB/ssuitesparse-4.  63% |###################            | Time: 0:00:01 831.84 kB/ssuitesparse-4.  63% |###################            | Time: 0:00:01 841.30 kB/ssuitesparse-4.  64% |####################           | Time: 0:00:01 850.78 kB/ssuitesparse-4.  65% |####################           | Time: 0:00:01 860.27 kB/ssuitesparse-4.  66% |####################           | Time: 0:00:01 869.75 kB/ssuitesparse-4.  66% |####################           | Time: 0:00:01 879.20 kB/ssuitesparse-4.  67% |####################           | Time: 0:00:01 888.64 kB/ssuitesparse-4.  68% |#####################          | Time: 0:00:01 898.08 kB/ssuitesparse-4.  69% |#####################          | Time: 0:00:01 907.52 kB/ssuitesparse-4.  69% |#####################          | Time: 0:00:01 916.95 kB/ssuitesparse-4.  70% |#####################          | Time: 0:00:01 926.38 kB/ssuitesparse-4.  71% |######################         | Time: 0:00:01 935.74 kB/ssuitesparse-4.  72% |######################         | Time: 0:00:01 945.15 kB/ssuitesparse-4.  72% |######################         | Time: 0:00:01 954.49 kB/ssuitesparse-4.  73% |######################         | Time: 0:00:01 963.76 kB/ssuitesparse-4.  74% |#######################        | Time: 0:00:01 973.16 kB/ssuitesparse-4.  74% |#######################        | Time: 0:00:01 982.55 kB/ssuitesparse-4.  75% |#######################        | Time: 0:00:01 991.92 kB/ssuitesparse-4.  76% |#######################        | Time: 0:00:01   1.00 MB/ssuitesparse-4.  77% |#######################        | Time: 0:00:01   1.01 MB/ssuitesparse-4.  77% |########################       | Time: 0:00:01   1.02 MB/ssuitesparse-4.  78% |########################       | Time: 0:00:01   1.03 MB/ssuitesparse-4.  79% |########################       | Time: 0:00:01   1.04 MB/ssuitesparse-4.  80% |########################       | Time: 0:00:01   1.05 MB/ssuitesparse-4.  80% |#########################      | Time: 0:00:01   1.06 MB/ssuitesparse-4.  81% |#########################      | Time: 0:00:01   1.07 MB/ssuitesparse-4.  82% |#########################      | Time: 0:00:01   1.08 MB/ssuitesparse-4.  83% |#########################      | Time: 0:00:01   1.09 MB/ssuitesparse-4.  83% |#########################      | Time: 0:00:01   1.10 MB/ssuitesparse-4.  84% |##########################     | Time: 0:00:01   1.10 MB/ssuitesparse-4.  85% |##########################     | Time: 0:00:01   1.11 MB/ssuitesparse-4.  86% |##########################     | Time: 0:00:01   1.12 MB/ssuitesparse-4.  86% |##########################     | Time: 0:00:01   1.13 MB/ssuitesparse-4.  87% |###########################    | Time: 0:00:01   1.14 MB/ssuitesparse-4.  88% |###########################    | Time: 0:00:01   1.15 MB/ssuitesparse-4.  88% |###########################    | Time: 0:00:01   1.16 MB/ssuitesparse-4.  89% |###########################    | Time: 0:00:01   1.17 MB/ssuitesparse-4.  90% |############################   | Time: 0:00:01   1.18 MB/ssuitesparse-4.  91% |############################   | Time: 0:00:01   1.19 MB/ssuitesparse-4.  91% |############################   | Time: 0:00:01   1.20 MB/ssuitesparse-4.  92% |############################   | Time: 0:00:01   1.21 MB/ssuitesparse-4.  93% |############################   | Time: 0:00:01   1.22 MB/ssuitesparse-4.  94% |#############################  | Time: 0:00:01   1.23 MB/ssuitesparse-4.  94% |#############################  | Time: 0:00:01   1.23 MB/ssuitesparse-4.  95% |#############################  | Time: 0:00:01   1.24 MB/ssuitesparse-4.  96% |#############################  | Time: 0:00:01   1.25 MB/ssuitesparse-4.  97% |############################## | Time: 0:00:01   1.26 MB/ssuitesparse-4.  97% |############################## | Time: 0:00:01   1.27 MB/ssuitesparse-4.  98% |############################## | Time: 0:00:01   1.28 MB/ssuitesparse-4.  99% |############################## | Time: 0:00:01   1.29 MB/ssuitesparse-4.  99% |############################## | Time: 0:00:01   1.30 MB/ssuitesparse-4. 100% |###############################| Time: 0:00:01   1.30 MB/ssuitesparse-4. 100% |###############################| Time: 0:00:01   1.30 MB/s
cvxopt-1.1.9-p   0% |                              | ETA:  --:--:--   0.00  B/scvxopt-1.1.9-p   2% |                               | Time: 0:00:00   1.32 MB/scvxopt-1.1.9-p   4% |#                              | Time: 0:00:00   1.28 MB/scvxopt-1.1.9-p   6% |##                             | Time: 0:00:00   1.87 MB/scvxopt-1.1.9-p   9% |##                             | Time: 0:00:00   1.67 MB/scvxopt-1.1.9-p  11% |###                            | Time: 0:00:00   1.56 MB/scvxopt-1.1.9-p  13% |####                           | Time: 0:00:00   1.84 MB/scvxopt-1.1.9-p  16% |#####                          | Time: 0:00:00   1.75 MB/scvxopt-1.1.9-p  18% |#####                          | Time: 0:00:00   1.98 MB/scvxopt-1.1.9-p  20% |######                         | Time: 0:00:00   2.20 MB/scvxopt-1.1.9-p  23% |#######                        | Time: 0:00:00   2.07 MB/scvxopt-1.1.9-p  25% |#######                        | Time: 0:00:00   2.25 MB/scvxopt-1.1.9-p  27% |########                       | Time: 0:00:00   2.12 MB/scvxopt-1.1.9-p  30% |#########                      | Time: 0:00:00   2.27 MB/scvxopt-1.1.9-p  32% |##########                     | Time: 0:00:00   2.43 MB/scvxopt-1.1.9-p  34% |##########                     | Time: 0:00:00   2.32 MB/scvxopt-1.1.9-p  37% |###########                    | Time: 0:00:00   2.46 MB/scvxopt-1.1.9-p  39% |############                   | Time: 0:00:00   2.61 MB/scvxopt-1.1.9-p  41% |#############                  | Time: 0:00:00   2.75 MB/scvxopt-1.1.9-p  44% |#############                  | Time: 0:00:00   2.60 MB/scvxopt-1.1.9-p  46% |##############                 | Time: 0:00:00   2.72 MB/scvxopt-1.1.9-p  48% |###############                | Time: 0:00:00   2.85 MB/scvxopt-1.1.9-p  51% |###############                | Time: 0:00:00   2.70 MB/scvxopt-1.1.9-p  53% |################               | Time: 0:00:00   2.81 MB/scvxopt-1.1.9-p  55% |#################              | Time: 0:00:00   2.92 MB/scvxopt-1.1.9-p  58% |##################             | Time: 0:00:00   3.04 MB/scvxopt-1.1.9-p  60% |##################             | Time: 0:00:00   3.15 MB/scvxopt-1.1.9-p  62% |###################            | Time: 0:00:00   2.99 MB/scvxopt-1.1.9-p  65% |####################           | Time: 0:00:00   3.08 MB/scvxopt-1.1.9-p  67% |####################           | Time: 0:00:00   3.17 MB/scvxopt-1.1.9-p  69% |#####################          | Time: 0:00:00   3.27 MB/scvxopt-1.1.9-p  72% |######################         | Time: 0:00:00   3.36 MB/scvxopt-1.1.9-p  74% |#######################        | Time: 0:00:00   3.27 MB/scvxopt-1.1.9-p  76% |#######################        | Time: 0:00:00   3.35 MB/scvxopt-1.1.9-p  79% |########################       | Time: 0:00:00   3.44 MB/scvxopt-1.1.9-p  81% |#########################      | Time: 0:00:00   3.52 MB/scvxopt-1.1.9-p  83% |##########################     | Time: 0:00:00   3.61 MB/scvxopt-1.1.9-p  86% |##########################     | Time: 0:00:00   3.50 MB/scvxopt-1.1.9-p  88% |###########################    | Time: 0:00:00   3.57 MB/scvxopt-1.1.9-p  90% |############################   | Time: 0:00:00   3.66 MB/scvxopt-1.1.9-p  93% |############################   | Time: 0:00:00   3.74 MB/scvxopt-1.1.9-p  95% |#############################  | Time: 0:00:00   3.83 MB/scvxopt-1.1.9-p  97% |############################## | Time: 0:00:00   3.91 MB/scvxopt-1.1.9-p 100% |###############################| Time: 0:00:00   3.98 MB/scvxopt-1.1.9-p 100% |###############################| Time: 0:00:00   3.98 MB/s
WARNING: pyeval is deprecated.  Use py"{'l':l,'q':list(q),'s':list(s)}" instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.6/PyCall/src/pyeval.jl:58
 [3] (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 [4] #conelp#1(::Array{Any,1}, ::Array{Any,1}, ::Dict{Any,Any}, ::Function, ::Array{Float64,2}, ::SparseMatrixCSC{Float64,Int64}, ::Array{Float64,2}, ::Dict{String,Any}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:25
 [5] conelp(::Array{Float64,2}, ::SparseMatrixCSC{Float64,Int64}, ::Array{Float64,2}, ::Dict{String,Any}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:18
 [6] include_from_node1(::String) at ./loading.jl:569
 [7] include(::String) at ./sysimg.jl:14
 [8] include_from_node1(::String) at ./loading.jl:569
 [9] include(::String) at ./sysimg.jl:14
 [10] process_options(::Base.JLOptions) at ./client.jl:305
 [11] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/CVXOPT/test/test1.jl, in expression starting on line 13
WARNING: pyeval is deprecated.  Use py"x.size" instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.6/PyCall/src/pyeval.jl:58
 [3] (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 [4] cvxopt_to_julia(::PyCall.PyObject) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:227
 [5] #conelp#1(::Array{Any,1}, ::Array{Any,1}, ::Dict{Any,Any}, ::Function, ::Array{Float64,2}, ::SparseMatrixCSC{Float64,Int64}, ::Array{Float64,2}, ::Dict{String,Any}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:32
 [6] conelp(::Array{Float64,2}, ::SparseMatrixCSC{Float64,Int64}, ::Array{Float64,2}, ::Dict{String,Any}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:18
 [7] include_from_node1(::String) at ./loading.jl:569
 [8] include(::String) at ./sysimg.jl:14
 [9] include_from_node1(::String) at ./loading.jl:569
 [10] include(::String) at ./sysimg.jl:14
 [11] process_options(::Base.JLOptions) at ./client.jl:305
 [12] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/CVXOPT/test/test1.jl, in expression starting on line 13
WARNING: pyeval is deprecated.  Use py"list(x[:])" instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.6/PyCall/src/pyeval.jl:58
 [3] (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 [4] cvxopt_to_julia(::PyCall.PyObject) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:228
 [5] #conelp#1(::Array{Any,1}, ::Array{Any,1}, ::Dict{Any,Any}, ::Function, ::Array{Float64,2}, ::SparseMatrixCSC{Float64,Int64}, ::Array{Float64,2}, ::Dict{String,Any}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:32
 [6] conelp(::Array{Float64,2}, ::SparseMatrixCSC{Float64,Int64}, ::Array{Float64,2}, ::Dict{String,Any}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:18
 [7] include_from_node1(::String) at ./loading.jl:569
 [8] include(::String) at ./sysimg.jl:14
 [9] include_from_node1(::String) at ./loading.jl:569
 [10] include(::String) at ./sysimg.jl:14
 [11] process_options(::Base.JLOptions) at ./client.jl:305
 [12] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/CVXOPT/test/test1.jl, in expression starting on line 13
WARNING: pyeval is deprecated.  Use py"x.size" instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.6/PyCall/src/pyeval.jl:58
 [3] (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 [4] cvxopt_to_julia(::PyCall.PyObject) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:227
 [5] #conelp#1(::Array{Any,1}, ::Array{Any,1}, ::Dict{Any,Any}, ::Function, ::Array{Float64,2}, ::SparseMatrixCSC{Float64,Int64}, ::Array{Float64,2}, ::Dict{String,Any}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:33
 [6] conelp(::Array{Float64,2}, ::SparseMatrixCSC{Float64,Int64}, ::Array{Float64,2}, ::Dict{String,Any}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:18
 [7] include_from_node1(::String) at ./loading.jl:569
 [8] include(::String) at ./sysimg.jl:14
 [9] include_from_node1(::String) at ./loading.jl:569
 [10] include(::String) at ./sysimg.jl:14
 [11] process_options(::Base.JLOptions) at ./client.jl:305
 [12] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/CVXOPT/test/test1.jl, in expression starting on line 13
WARNING: pyeval is deprecated.  Use py"list(x[:])" instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.6/PyCall/src/pyeval.jl:58
 [3] (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 [4] cvxopt_to_julia(::PyCall.PyObject) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:228
 [5] #conelp#1(::Array{Any,1}, ::Array{Any,1}, ::Dict{Any,Any}, ::Function, ::Array{Float64,2}, ::SparseMatrixCSC{Float64,Int64}, ::Array{Float64,2}, ::Dict{String,Any}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:33
 [6] conelp(::Array{Float64,2}, ::SparseMatrixCSC{Float64,Int64}, ::Array{Float64,2}, ::Dict{String,Any}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:18
 [7] include_from_node1(::String) at ./loading.jl:569
 [8] include(::String) at ./sysimg.jl:14
 [9] include_from_node1(::String) at ./loading.jl:569
 [10] include(::String) at ./sysimg.jl:14
 [11] process_options(::Base.JLOptions) at ./client.jl:305
 [12] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/CVXOPT/test/test1.jl, in expression starting on line 13
WARNING: pyeval is deprecated.  Use py"x.size" instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.6/PyCall/src/pyeval.jl:58
 [3] (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 [4] cvxopt_to_julia(::PyCall.PyObject) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:227
 [5] #conelp#1(::Array{Any,1}, ::Array{Any,1}, ::Dict{Any,Any}, ::Function, ::Array{Float64,2}, ::SparseMatrixCSC{Float64,Int64}, ::Array{Float64,2}, ::Dict{String,Any}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:34
 [6] conelp(::Array{Float64,2}, ::SparseMatrixCSC{Float64,Int64}, ::Array{Float64,2}, ::Dict{String,Any}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:18
 [7] include_from_node1(::String) at ./loading.jl:569
 [8] include(::String) at ./sysimg.jl:14
 [9] include_from_node1(::String) at ./loading.jl:569
 [10] include(::String) at ./sysimg.jl:14
 [11] process_options(::Base.JLOptions) at ./client.jl:305
 [12] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/CVXOPT/test/test1.jl, in expression starting on line 13
WARNING: pyeval is deprecated.  Use py"list(x[:])" instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.6/PyCall/src/pyeval.jl:58
 [3] (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 [4] cvxopt_to_julia(::PyCall.PyObject) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:228
 [5] #conelp#1(::Array{Any,1}, ::Array{Any,1}, ::Dict{Any,Any}, ::Function, ::Array{Float64,2}, ::SparseMatrixCSC{Float64,Int64}, ::Array{Float64,2}, ::Dict{String,Any}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:34
 [6] conelp(::Array{Float64,2}, ::SparseMatrixCSC{Float64,Int64}, ::Array{Float64,2}, ::Dict{String,Any}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:18
 [7] include_from_node1(::String) at ./loading.jl:569
 [8] include(::String) at ./sysimg.jl:14
 [9] include_from_node1(::String) at ./loading.jl:569
 [10] include(::String) at ./sysimg.jl:14
 [11] process_options(::Base.JLOptions) at ./client.jl:305
 [12] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/CVXOPT/test/test1.jl, in expression starting on line 13
WARNING: pyeval is deprecated.  Use py"x.size" instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.6/PyCall/src/pyeval.jl:58
 [3] (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 [4] cvxopt_to_julia(::PyCall.PyObject) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:227
 [5] #conelp#1(::Array{Any,1}, ::Array{Any,1}, ::Dict{Any,Any}, ::Function, ::Array{Float64,2}, ::SparseMatrixCSC{Float64,Int64}, ::Array{Float64,2}, ::Dict{String,Any}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:35
 [6] conelp(::Array{Float64,2}, ::SparseMatrixCSC{Float64,Int64}, ::Array{Float64,2}, ::Dict{String,Any}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:18
 [7] include_from_node1(::String) at ./loading.jl:569
 [8] include(::String) at ./sysimg.jl:14
 [9] include_from_node1(::String) at ./loading.jl:569
 [10] include(::String) at ./sysimg.jl:14
 [11] process_options(::Base.JLOptions) at ./client.jl:305
 [12] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/CVXOPT/test/test1.jl, in expression starting on line 13
WARNING: pyeval is deprecated.  Use py"list(x[:])" instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.6/PyCall/src/pyeval.jl:58
 [3] (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 [4] cvxopt_to_julia(::PyCall.PyObject) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:228
 [5] #conelp#1(::Array{Any,1}, ::Array{Any,1}, ::Dict{Any,Any}, ::Function, ::Array{Float64,2}, ::SparseMatrixCSC{Float64,Int64}, ::Array{Float64,2}, ::Dict{String,Any}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:35
 [6] conelp(::Array{Float64,2}, ::SparseMatrixCSC{Float64,Int64}, ::Array{Float64,2}, ::Dict{String,Any}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:18
 [7] include_from_node1(::String) at ./loading.jl:569
 [8] include(::String) at ./sysimg.jl:14
 [9] include_from_node1(::String) at ./loading.jl:569
 [10] include(::String) at ./sysimg.jl:14
 [11] process_options(::Base.JLOptions) at ./client.jl:305
 [12] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/CVXOPT/test/test1.jl, in expression starting on line 13
WARNING: pyeval is deprecated.  Use py"{'l':l,'q':list(q),'s':list(s)}" instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.6/PyCall/src/pyeval.jl:58
 [3] (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 [4] #coneqp#2(::Array{Any,1}, ::Array{Any,1}, ::Dict{Any,Any}, ::Function, ::Array{Float64,2}, ::Array{Float64,1}, ::SparseMatrixCSC{Float64,Int64}, ::Array{Float64,2}, ::Dict{String,Any}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:54
 [5] coneqp(::Array{Float64,2}, ::Array{Float64,1}, ::SparseMatrixCSC{Float64,Int64}, ::Array{Float64,2}, ::Dict{String,Any}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:46
 [6] include_from_node1(::String) at ./loading.jl:569
 [7] include(::String) at ./sysimg.jl:14
 [8] include_from_node1(::String) at ./loading.jl:569
 [9] include(::String) at ./sysimg.jl:14
 [10] process_options(::Base.JLOptions) at ./client.jl:305
 [11] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/CVXOPT/test/test2.jl, in expression starting on line 15
WARNING: pyeval is deprecated.  Use py"x.size" instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.6/PyCall/src/pyeval.jl:58
 [3] (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 [4] cvxopt_to_julia(::PyCall.PyObject) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:227
 [5] #coneqp#2(::Array{Any,1}, ::Array{Any,1}, ::Dict{Any,Any}, ::Function, ::Array{Float64,2}, ::Array{Float64,1}, ::SparseMatrixCSC{Float64,Int64}, ::Array{Float64,2}, ::Dict{String,Any}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:61
 [6] coneqp(::Array{Float64,2}, ::Array{Float64,1}, ::SparseMatrixCSC{Float64,Int64}, ::Array{Float64,2}, ::Dict{String,Any}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:46
 [7] include_from_node1(::String) at ./loading.jl:569
 [8] include(::String) at ./sysimg.jl:14
 [9] include_from_node1(::String) at ./loading.jl:569
 [10] include(::String) at ./sysimg.jl:14
 [11] process_options(::Base.JLOptions) at ./client.jl:305
 [12] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/CVXOPT/test/test2.jl, in expression starting on line 15
WARNING: pyeval is deprecated.  Use py"list(x[:])" instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.6/PyCall/src/pyeval.jl:58
 [3] (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 [4] cvxopt_to_julia(::PyCall.PyObject) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:228
 [5] #coneqp#2(::Array{Any,1}, ::Array{Any,1}, ::Dict{Any,Any}, ::Function, ::Array{Float64,2}, ::Array{Float64,1}, ::SparseMatrixCSC{Float64,Int64}, ::Array{Float64,2}, ::Dict{String,Any}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:61
 [6] coneqp(::Array{Float64,2}, ::Array{Float64,1}, ::SparseMatrixCSC{Float64,Int64}, ::Array{Float64,2}, ::Dict{String,Any}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:46
 [7] include_from_node1(::String) at ./loading.jl:569
 [8] include(::String) at ./sysimg.jl:14
 [9] include_from_node1(::String) at ./loading.jl:569
 [10] include(::String) at ./sysimg.jl:14
 [11] process_options(::Base.JLOptions) at ./client.jl:305
 [12] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/CVXOPT/test/test2.jl, in expression starting on line 15
WARNING: pyeval is deprecated.  Use py"x.size" instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.6/PyCall/src/pyeval.jl:58
 [3] (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 [4] cvxopt_to_julia(::PyCall.PyObject) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:227
 [5] #coneqp#2(::Array{Any,1}, ::Array{Any,1}, ::Dict{Any,Any}, ::Function, ::Array{Float64,2}, ::Array{Float64,1}, ::SparseMatrixCSC{Float64,Int64}, ::Array{Float64,2}, ::Dict{String,Any}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:62
 [6] coneqp(::Array{Float64,2}, ::Array{Float64,1}, ::SparseMatrixCSC{Float64,Int64}, ::Array{Float64,2}, ::Dict{String,Any}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:46
 [7] include_from_node1(::String) at ./loading.jl:569
 [8] include(::String) at ./sysimg.jl:14
 [9] include_from_node1(::String) at ./loading.jl:569
 [10] include(::String) at ./sysimg.jl:14
 [11] process_options(::Base.JLOptions) at ./client.jl:305
 [12] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/CVXOPT/test/test2.jl, in expression starting on line 15
WARNING: pyeval is deprecated.  Use py"list(x[:])" instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.6/PyCall/src/pyeval.jl:58
 [3] (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 [4] cvxopt_to_julia(::PyCall.PyObject) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:228
 [5] #coneqp#2(::Array{Any,1}, ::Array{Any,1}, ::Dict{Any,Any}, ::Function, ::Array{Float64,2}, ::Array{Float64,1}, ::SparseMatrixCSC{Float64,Int64}, ::Array{Float64,2}, ::Dict{String,Any}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:62
 [6] coneqp(::Array{Float64,2}, ::Array{Float64,1}, ::SparseMatrixCSC{Float64,Int64}, ::Array{Float64,2}, ::Dict{String,Any}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:46
 [7] include_from_node1(::String) at ./loading.jl:569
 [8] include(::String) at ./sysimg.jl:14
 [9] include_from_node1(::String) at ./loading.jl:569
 [10] include(::String) at ./sysimg.jl:14
 [11] process_options(::Base.JLOptions) at ./client.jl:305
 [12] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/CVXOPT/test/test2.jl, in expression starting on line 15
WARNING: pyeval is deprecated.  Use py"x.size" instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.6/PyCall/src/pyeval.jl:58
 [3] (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 [4] cvxopt_to_julia(::PyCall.PyObject) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:227
 [5] #coneqp#2(::Array{Any,1}, ::Array{Any,1}, ::Dict{Any,Any}, ::Function, ::Array{Float64,2}, ::Array{Float64,1}, ::SparseMatrixCSC{Float64,Int64}, ::Array{Float64,2}, ::Dict{String,Any}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:63
 [6] coneqp(::Array{Float64,2}, ::Array{Float64,1}, ::SparseMatrixCSC{Float64,Int64}, ::Array{Float64,2}, ::Dict{String,Any}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:46
 [7] include_from_node1(::String) at ./loading.jl:569
 [8] include(::String) at ./sysimg.jl:14
 [9] include_from_node1(::String) at ./loading.jl:569
 [10] include(::String) at ./sysimg.jl:14
 [11] process_options(::Base.JLOptions) at ./client.jl:305
 [12] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/CVXOPT/test/test2.jl, in expression starting on line 15
WARNING: pyeval is deprecated.  Use py"list(x[:])" instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.6/PyCall/src/pyeval.jl:58
 [3] (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 [4] cvxopt_to_julia(::PyCall.PyObject) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:228
 [5] #coneqp#2(::Array{Any,1}, ::Array{Any,1}, ::Dict{Any,Any}, ::Function, ::Array{Float64,2}, ::Array{Float64,1}, ::SparseMatrixCSC{Float64,Int64}, ::Array{Float64,2}, ::Dict{String,Any}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:63
 [6] coneqp(::Array{Float64,2}, ::Array{Float64,1}, ::SparseMatrixCSC{Float64,Int64}, ::Array{Float64,2}, ::Dict{String,Any}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:46
 [7] include_from_node1(::String) at ./loading.jl:569
 [8] include(::String) at ./sysimg.jl:14
 [9] include_from_node1(::String) at ./loading.jl:569
 [10] include(::String) at ./sysimg.jl:14
 [11] process_options(::Base.JLOptions) at ./client.jl:305
 [12] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/CVXOPT/test/test2.jl, in expression starting on line 15
WARNING: pyeval is deprecated.  Use py"x.size" instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.6/PyCall/src/pyeval.jl:58
 [3] (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 [4] cvxopt_to_julia(::PyCall.PyObject) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:227
 [5] #coneqp#2(::Array{Any,1}, ::Array{Any,1}, ::Dict{Any,Any}, ::Function, ::Array{Float64,2}, ::Array{Float64,1}, ::SparseMatrixCSC{Float64,Int64}, ::Array{Float64,2}, ::Dict{String,Any}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:64
 [6] coneqp(::Array{Float64,2}, ::Array{Float64,1}, ::SparseMatrixCSC{Float64,Int64}, ::Array{Float64,2}, ::Dict{String,Any}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:46
 [7] include_from_node1(::String) at ./loading.jl:569
 [8] include(::String) at ./sysimg.jl:14
 [9] include_from_node1(::String) at ./loading.jl:569
 [10] include(::String) at ./sysimg.jl:14
 [11] process_options(::Base.JLOptions) at ./client.jl:305
 [12] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/CVXOPT/test/test2.jl, in expression starting on line 15
WARNING: pyeval is deprecated.  Use py"list(x[:])" instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.6/PyCall/src/pyeval.jl:58
 [3] (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 [4] cvxopt_to_julia(::PyCall.PyObject) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:228
 [5] #coneqp#2(::Array{Any,1}, ::Array{Any,1}, ::Dict{Any,Any}, ::Function, ::Array{Float64,2}, ::Array{Float64,1}, ::SparseMatrixCSC{Float64,Int64}, ::Array{Float64,2}, ::Dict{String,Any}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:64
 [6] coneqp(::Array{Float64,2}, ::Array{Float64,1}, ::SparseMatrixCSC{Float64,Int64}, ::Array{Float64,2}, ::Dict{String,Any}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:46
 [7] include_from_node1(::String) at ./loading.jl:569
 [8] include(::String) at ./sysimg.jl:14
 [9] include_from_node1(::String) at ./loading.jl:569
 [10] include(::String) at ./sysimg.jl:14
 [11] process_options(::Base.JLOptions) at ./client.jl:305
 [12] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/CVXOPT/test/test2.jl, in expression starting on line 15
WARNING: pyeval is deprecated.  Use py"x.size" instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.6/PyCall/src/pyeval.jl:58
 [3] (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 [4] cvxopt_to_julia(::PyCall.PyObject) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:227
 [5] #lp#3(::Array{Any,1}, ::Array{Any,1}, ::Dict{Any,Any}, ::Function, ::Array{Float64,1}, ::Array{Float64,2}, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:88
 [6] lp(::Array{Float64,1}, ::Array{Float64,2}, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:75
 [7] include_from_node1(::String) at ./loading.jl:569
 [8] include(::String) at ./sysimg.jl:14
 [9] include_from_node1(::String) at ./loading.jl:569
 [10] include(::String) at ./sysimg.jl:14
 [11] process_options(::Base.JLOptions) at ./client.jl:305
 [12] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/CVXOPT/test/test3.jl, in expression starting on line 5
WARNING: pyeval is deprecated.  Use py"list(x[:])" instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.6/PyCall/src/pyeval.jl:58
 [3] (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 [4] cvxopt_to_julia(::PyCall.PyObject) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:228
 [5] #lp#3(::Array{Any,1}, ::Array{Any,1}, ::Dict{Any,Any}, ::Function, ::Array{Float64,1}, ::Array{Float64,2}, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:88
 [6] lp(::Array{Float64,1}, ::Array{Float64,2}, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:75
 [7] include_from_node1(::String) at ./loading.jl:569
 [8] include(::String) at ./sysimg.jl:14
 [9] include_from_node1(::String) at ./loading.jl:569
 [10] include(::String) at ./sysimg.jl:14
 [11] process_options(::Base.JLOptions) at ./client.jl:305
 [12] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/CVXOPT/test/test3.jl, in expression starting on line 5
WARNING: pyeval is deprecated.  Use py"x.size" instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.6/PyCall/src/pyeval.jl:58
 [3] (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 [4] cvxopt_to_julia(::PyCall.PyObject) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:227
 [5] #lp#3(::Array{Any,1}, ::Array{Any,1}, ::Dict{Any,Any}, ::Function, ::Array{Float64,1}, ::Array{Float64,2}, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:89
 [6] lp(::Array{Float64,1}, ::Array{Float64,2}, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:75
 [7] include_from_node1(::String) at ./loading.jl:569
 [8] include(::String) at ./sysimg.jl:14
 [9] include_from_node1(::String) at ./loading.jl:569
 [10] include(::String) at ./sysimg.jl:14
 [11] process_options(::Base.JLOptions) at ./client.jl:305
 [12] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/CVXOPT/test/test3.jl, in expression starting on line 5
WARNING: pyeval is deprecated.  Use py"list(x[:])" instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.6/PyCall/src/pyeval.jl:58
 [3] (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 [4] cvxopt_to_julia(::PyCall.PyObject) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:228
 [5] #lp#3(::Array{Any,1}, ::Array{Any,1}, ::Dict{Any,Any}, ::Function, ::Array{Float64,1}, ::Array{Float64,2}, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:89
 [6] lp(::Array{Float64,1}, ::Array{Float64,2}, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:75
 [7] include_from_node1(::String) at ./loading.jl:569
 [8] include(::String) at ./sysimg.jl:14
 [9] include_from_node1(::String) at ./loading.jl:569
 [10] include(::String) at ./sysimg.jl:14
 [11] process_options(::Base.JLOptions) at ./client.jl:305
 [12] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/CVXOPT/test/test3.jl, in expression starting on line 5
WARNING: pyeval is deprecated.  Use py"x.size" instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.6/PyCall/src/pyeval.jl:58
 [3] (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 [4] cvxopt_to_julia(::PyCall.PyObject) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:227
 [5] #lp#3(::Array{Any,1}, ::Array{Any,1}, ::Dict{Any,Any}, ::Function, ::Array{Float64,1}, ::Array{Float64,2}, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:90
 [6] lp(::Array{Float64,1}, ::Array{Float64,2}, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:75
 [7] include_from_node1(::String) at ./loading.jl:569
 [8] include(::String) at ./sysimg.jl:14
 [9] include_from_node1(::String) at ./loading.jl:569
 [10] include(::String) at ./sysimg.jl:14
 [11] process_options(::Base.JLOptions) at ./client.jl:305
 [12] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/CVXOPT/test/test3.jl, in expression starting on line 5
WARNING: pyeval is deprecated.  Use py"list(x[:])" instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.6/PyCall/src/pyeval.jl:58
 [3] (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 [4] cvxopt_to_julia(::PyCall.PyObject) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:228
 [5] #lp#3(::Array{Any,1}, ::Array{Any,1}, ::Dict{Any,Any}, ::Function, ::Array{Float64,1}, ::Array{Float64,2}, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:90
 [6] lp(::Array{Float64,1}, ::Array{Float64,2}, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:75
 [7] include_from_node1(::String) at ./loading.jl:569
 [8] include(::String) at ./sysimg.jl:14
 [9] include_from_node1(::String) at ./loading.jl:569
 [10] include(::String) at ./sysimg.jl:14
 [11] process_options(::Base.JLOptions) at ./client.jl:305
 [12] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/CVXOPT/test/test3.jl, in expression starting on line 5
WARNING: pyeval is deprecated.  Use py"x.size" instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.6/PyCall/src/pyeval.jl:58
 [3] (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 [4] cvxopt_to_julia(::PyCall.PyObject) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:227
 [5] #lp#3(::Array{Any,1}, ::Array{Any,1}, ::Dict{Any,Any}, ::Function, ::Array{Float64,1}, ::Array{Float64,2}, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:91
 [6] lp(::Array{Float64,1}, ::Array{Float64,2}, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:75
 [7] include_from_node1(::String) at ./loading.jl:569
 [8] include(::String) at ./sysimg.jl:14
 [9] include_from_node1(::String) at ./loading.jl:569
 [10] include(::String) at ./sysimg.jl:14
 [11] process_options(::Base.JLOptions) at ./client.jl:305
 [12] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/CVXOPT/test/test3.jl, in expression starting on line 5
WARNING: pyeval is deprecated.  Use py"list(x[:])" instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.6/PyCall/src/pyeval.jl:58
 [3] (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 [4] cvxopt_to_julia(::PyCall.PyObject) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:228
 [5] #lp#3(::Array{Any,1}, ::Array{Any,1}, ::Dict{Any,Any}, ::Function, ::Array{Float64,1}, ::Array{Float64,2}, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:91
 [6] lp(::Array{Float64,1}, ::Array{Float64,2}, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:75
 [7] include_from_node1(::String) at ./loading.jl:569
 [8] include(::String) at ./sysimg.jl:14
 [9] include_from_node1(::String) at ./loading.jl:569
 [10] include(::String) at ./sysimg.jl:14
 [11] process_options(::Base.JLOptions) at ./client.jl:305
 [12] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/CVXOPT/test/test3.jl, in expression starting on line 5
WARNING: pyeval is deprecated.  Use py"x.size" instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.6/PyCall/src/pyeval.jl:58
 [3] (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 [4] cvxopt_to_julia(::PyCall.PyObject) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:227
 [5] #socp#5(::Array{Any,1}, ::Array{Any,1}, ::Dict{Any,Any}, ::Function, ::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,1},Array{Float64,1}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:152
 [6] socp(::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,1},Array{Float64,1}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:130
 [7] include_from_node1(::String) at ./loading.jl:569
 [8] include(::String) at ./sysimg.jl:14
 [9] include_from_node1(::String) at ./loading.jl:569
 [10] include(::String) at ./sysimg.jl:14
 [11] process_options(::Base.JLOptions) at ./client.jl:305
 [12] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/CVXOPT/test/test4.jl, in expression starting on line 7
WARNING: pyeval is deprecated.  Use py"list(x[:])" instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.6/PyCall/src/pyeval.jl:58
 [3] (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 [4] cvxopt_to_julia(::PyCall.PyObject) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:228
 [5] #socp#5(::Array{Any,1}, ::Array{Any,1}, ::Dict{Any,Any}, ::Function, ::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,1},Array{Float64,1}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:152
 [6] socp(::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,1},Array{Float64,1}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:130
 [7] include_from_node1(::String) at ./loading.jl:569
 [8] include(::String) at ./sysimg.jl:14
 [9] include_from_node1(::String) at ./loading.jl:569
 [10] include(::String) at ./sysimg.jl:14
 [11] process_options(::Base.JLOptions) at ./client.jl:305
 [12] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/CVXOPT/test/test4.jl, in expression starting on line 7
WARNING: pyeval is deprecated.  Use py"x.size" instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.6/PyCall/src/pyeval.jl:58
 [3] (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 [4] cvxopt_to_julia(::PyCall.PyObject) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:227
 [5] #socp#5(::Array{Any,1}, ::Array{Any,1}, ::Dict{Any,Any}, ::Function, ::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,1},Array{Float64,1}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:153
 [6] socp(::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,1},Array{Float64,1}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:130
 [7] include_from_node1(::String) at ./loading.jl:569
 [8] include(::String) at ./sysimg.jl:14
 [9] include_from_node1(::String) at ./loading.jl:569
 [10] include(::String) at ./sysimg.jl:14
 [11] process_options(::Base.JLOptions) at ./client.jl:305
 [12] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/CVXOPT/test/test4.jl, in expression starting on line 7
WARNING: pyeval is deprecated.  Use py"list(x[:])" instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.6/PyCall/src/pyeval.jl:58
 [3] (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 [4] cvxopt_to_julia(::PyCall.PyObject) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:228
 [5] #socp#5(::Array{Any,1}, ::Array{Any,1}, ::Dict{Any,Any}, ::Function, ::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,1},Array{Float64,1}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:153
 [6] socp(::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,1},Array{Float64,1}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:130
 [7] include_from_node1(::String) at ./loading.jl:569
 [8] include(::String) at ./sysimg.jl:14
 [9] include_from_node1(::String) at ./loading.jl:569
 [10] include(::String) at ./sysimg.jl:14
 [11] process_options(::Base.JLOptions) at ./client.jl:305
 [12] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/CVXOPT/test/test4.jl, in expression starting on line 7
WARNING: pyeval is deprecated.  Use py"x.size" instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.6/PyCall/src/pyeval.jl:58
 [3] (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 [4] cvxopt_to_julia(::PyCall.PyObject) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:227
 [5] #socp#5(::Array{Any,1}, ::Array{Any,1}, ::Dict{Any,Any}, ::Function, ::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,1},Array{Float64,1}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:154
 [6] socp(::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,1},Array{Float64,1}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:130
 [7] include_from_node1(::String) at ./loading.jl:569
 [8] include(::String) at ./sysimg.jl:14
 [9] include_from_node1(::String) at ./loading.jl:569
 [10] include(::String) at ./sysimg.jl:14
 [11] process_options(::Base.JLOptions) at ./client.jl:305
 [12] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/CVXOPT/test/test4.jl, in expression starting on line 7
WARNING: pyeval is deprecated.  Use py"list(x[:])" instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.6/PyCall/src/pyeval.jl:58
 [3] (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 [4] cvxopt_to_julia(::PyCall.PyObject) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:228
 [5] #socp#5(::Array{Any,1}, ::Array{Any,1}, ::Dict{Any,Any}, ::Function, ::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,1},Array{Float64,1}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:154
 [6] socp(::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,1},Array{Float64,1}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:130
 [7] include_from_node1(::String) at ./loading.jl:569
 [8] include(::String) at ./sysimg.jl:14
 [9] include_from_node1(::String) at ./loading.jl:569
 [10] include(::String) at ./sysimg.jl:14
 [11] process_options(::Base.JLOptions) at ./client.jl:305
 [12] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/CVXOPT/test/test4.jl, in expression starting on line 7
WARNING: pyeval is deprecated.  Use py"x.size" instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.6/PyCall/src/pyeval.jl:58
 [3] (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 [4] cvxopt_to_julia(::PyCall.PyObject) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:227
 [5] #socp#5(::Array{Any,1}, ::Array{Any,1}, ::Dict{Any,Any}, ::Function, ::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,1},Array{Float64,1}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:155
 [6] socp(::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,1},Array{Float64,1}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:130
 [7] include_from_node1(::String) at ./loading.jl:569
 [8] include(::String) at ./sysimg.jl:14
 [9] include_from_node1(::String) at ./loading.jl:569
 [10] include(::String) at ./sysimg.jl:14
 [11] process_options(::Base.JLOptions) at ./client.jl:305
 [12] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/CVXOPT/test/test4.jl, in expression starting on line 7
WARNING: pyeval is deprecated.  Use py"list(x[:])" instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.6/PyCall/src/pyeval.jl:58
 [3] (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 [4] cvxopt_to_julia(::PyCall.PyObject) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:228
 [5] #socp#5(::Array{Any,1}, ::Array{Any,1}, ::Dict{Any,Any}, ::Function, ::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,1},Array{Float64,1}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:155
 [6] socp(::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,1},Array{Float64,1}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:130
 [7] include_from_node1(::String) at ./loading.jl:569
 [8] include(::String) at ./sysimg.jl:14
 [9] include_from_node1(::String) at ./loading.jl:569
 [10] include(::String) at ./sysimg.jl:14
 [11] process_options(::Base.JLOptions) at ./client.jl:305
 [12] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/CVXOPT/test/test4.jl, in expression starting on line 7
WARNING: pyeval is deprecated.  Use py"x.size" instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.6/PyCall/src/pyeval.jl:58
 [3] (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 [4] cvxopt_to_julia(::PyCall.PyObject) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:227
 [5] #socp#5(::Array{Any,1}, ::Array{Any,1}, ::Dict{Any,Any}, ::Function, ::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,1},Array{Float64,1}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:157
 [6] socp(::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,1},Array{Float64,1}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:130
 [7] include_from_node1(::String) at ./loading.jl:569
 [8] include(::String) at ./sysimg.jl:14
 [9] include_from_node1(::String) at ./loading.jl:569
 [10] include(::String) at ./sysimg.jl:14
 [11] process_options(::Base.JLOptions) at ./client.jl:305
 [12] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/CVXOPT/test/test4.jl, in expression starting on line 7
WARNING: pyeval is deprecated.  Use py"list(x[:])" instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.6/PyCall/src/pyeval.jl:58
 [3] (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 [4] cvxopt_to_julia(::PyCall.PyObject) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:228
 [5] #socp#5(::Array{Any,1}, ::Array{Any,1}, ::Dict{Any,Any}, ::Function, ::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,1},Array{Float64,1}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:157
 [6] socp(::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,1},Array{Float64,1}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:130
 [7] include_from_node1(::String) at ./loading.jl:569
 [8] include(::String) at ./sysimg.jl:14
 [9] include_from_node1(::String) at ./loading.jl:569
 [10] include(::String) at ./sysimg.jl:14
 [11] process_options(::Base.JLOptions) at ./client.jl:305
 [12] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/CVXOPT/test/test4.jl, in expression starting on line 7
WARNING: pyeval is deprecated.  Use py"x.size" instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.6/PyCall/src/pyeval.jl:58
 [3] (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 [4] cvxopt_to_julia(::PyCall.PyObject) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:227
 [5] #socp#5(::Array{Any,1}, ::Array{Any,1}, ::Dict{Any,Any}, ::Function, ::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,1},Array{Float64,1}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:158
 [6] socp(::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,1},Array{Float64,1}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:130
 [7] include_from_node1(::String) at ./loading.jl:569
 [8] include(::String) at ./sysimg.jl:14
 [9] include_from_node1(::String) at ./loading.jl:569
 [10] include(::String) at ./sysimg.jl:14
 [11] process_options(::Base.JLOptions) at ./client.jl:305
 [12] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/CVXOPT/test/test4.jl, in expression starting on line 7
WARNING: pyeval is deprecated.  Use py"list(x[:])" instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.6/PyCall/src/pyeval.jl:58
 [3] (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 [4] cvxopt_to_julia(::PyCall.PyObject) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:228
 [5] #socp#5(::Array{Any,1}, ::Array{Any,1}, ::Dict{Any,Any}, ::Function, ::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,1},Array{Float64,1}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:158
 [6] socp(::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,1},Array{Float64,1}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:130
 [7] include_from_node1(::String) at ./loading.jl:569
 [8] include(::String) at ./sysimg.jl:14
 [9] include_from_node1(::String) at ./loading.jl:569
 [10] include(::String) at ./sysimg.jl:14
 [11] process_options(::Base.JLOptions) at ./client.jl:305
 [12] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/CVXOPT/test/test4.jl, in expression starting on line 7
WARNING: pyeval is deprecated.  Use py"x.size" instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.6/PyCall/src/pyeval.jl:58
 [3] (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 [4] cvxopt_to_julia(::PyCall.PyObject) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:227
 [5] #socp#5(::Array{Any,1}, ::Array{Any,1}, ::Dict{Any,Any}, ::Function, ::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,1},Array{Float64,1}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:157
 [6] socp(::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,1},Array{Float64,1}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:130
 [7] include_from_node1(::String) at ./loading.jl:569
 [8] include(::String) at ./sysimg.jl:14
 [9] include_from_node1(::String) at ./loading.jl:569
 [10] include(::String) at ./sysimg.jl:14
 [11] process_options(::Base.JLOptions) at ./client.jl:305
 [12] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/CVXOPT/test/test4.jl, in expression starting on line 7
WARNING: pyeval is deprecated.  Use py"list(x[:])" instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.6/PyCall/src/pyeval.jl:58
 [3] (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 [4] cvxopt_to_julia(::PyCall.PyObject) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:228
 [5] #socp#5(::Array{Any,1}, ::Array{Any,1}, ::Dict{Any,Any}, ::Function, ::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,1},Array{Float64,1}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:157
 [6] socp(::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,1},Array{Float64,1}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:130
 [7] include_from_node1(::String) at ./loading.jl:569
 [8] include(::String) at ./sysimg.jl:14
 [9] include_from_node1(::String) at ./loading.jl:569
 [10] include(::String) at ./sysimg.jl:14
 [11] process_options(::Base.JLOptions) at ./client.jl:305
 [12] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/CVXOPT/test/test4.jl, in expression starting on line 7
WARNING: pyeval is deprecated.  Use py"x.size" instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.6/PyCall/src/pyeval.jl:58
 [3] (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 [4] cvxopt_to_julia(::PyCall.PyObject) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:227
 [5] #socp#5(::Array{Any,1}, ::Array{Any,1}, ::Dict{Any,Any}, ::Function, ::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,1},Array{Float64,1}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:158
 [6] socp(::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,1},Array{Float64,1}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:130
 [7] include_from_node1(::String) at ./loading.jl:569
 [8] include(::String) at ./sysimg.jl:14
 [9] include_from_node1(::String) at ./loading.jl:569
 [10] include(::String) at ./sysimg.jl:14
 [11] process_options(::Base.JLOptions) at ./client.jl:305
 [12] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/CVXOPT/test/test4.jl, in expression starting on line 7
WARNING: pyeval is deprecated.  Use py"list(x[:])" instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.6/PyCall/src/pyeval.jl:58
 [3] (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 [4] cvxopt_to_julia(::PyCall.PyObject) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:228
 [5] #socp#5(::Array{Any,1}, ::Array{Any,1}, ::Dict{Any,Any}, ::Function, ::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,1},Array{Float64,1}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:158
 [6] socp(::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,1},Array{Float64,1}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:130
 [7] include_from_node1(::String) at ./loading.jl:569
 [8] include(::String) at ./sysimg.jl:14
 [9] include_from_node1(::String) at ./loading.jl:569
 [10] include(::String) at ./sysimg.jl:14
 [11] process_options(::Base.JLOptions) at ./client.jl:305
 [12] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/CVXOPT/test/test4.jl, in expression starting on line 7
WARNING: pyeval is deprecated.  Use py"x.size" instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.6/PyCall/src/pyeval.jl:58
 [3] (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 [4] cvxopt_to_julia(::PyCall.PyObject) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:227
 [5] #sdp#6(::Array{Any,1}, ::Array{Any,1}, ::Dict{Any,Any}, ::Function, ::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,2},Array{Float64,2}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:193
 [6] sdp(::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,2},Array{Float64,2}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:171
 [7] include_from_node1(::String) at ./loading.jl:569
 [8] include(::String) at ./sysimg.jl:14
 [9] include_from_node1(::String) at ./loading.jl:569
 [10] include(::String) at ./sysimg.jl:14
 [11] process_options(::Base.JLOptions) at ./client.jl:305
 [12] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/CVXOPT/test/test5.jl, in expression starting on line 11
WARNING: pyeval is deprecated.  Use py"list(x[:])" instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.6/PyCall/src/pyeval.jl:58
 [3] (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 [4] cvxopt_to_julia(::PyCall.PyObject) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:228
 [5] #sdp#6(::Array{Any,1}, ::Array{Any,1}, ::Dict{Any,Any}, ::Function, ::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,2},Array{Float64,2}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:193
 [6] sdp(::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,2},Array{Float64,2}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:171
 [7] include_from_node1(::String) at ./loading.jl:569
 [8] include(::String) at ./sysimg.jl:14
 [9] include_from_node1(::String) at ./loading.jl:569
 [10] include(::String) at ./sysimg.jl:14
 [11] process_options(::Base.JLOptions) at ./client.jl:305
 [12] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/CVXOPT/test/test5.jl, in expression starting on line 11
WARNING: pyeval is deprecated.  Use py"x.size" instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.6/PyCall/src/pyeval.jl:58
 [3] (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 [4] cvxopt_to_julia(::PyCall.PyObject) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:227
 [5] #sdp#6(::Array{Any,1}, ::Array{Any,1}, ::Dict{Any,Any}, ::Function, ::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,2},Array{Float64,2}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:194
 [6] sdp(::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,2},Array{Float64,2}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:171
 [7] include_from_node1(::String) at ./loading.jl:569
 [8] include(::String) at ./sysimg.jl:14
 [9] include_from_node1(::String) at ./loading.jl:569
 [10] include(::String) at ./sysimg.jl:14
 [11] process_options(::Base.JLOptions) at ./client.jl:305
 [12] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/CVXOPT/test/test5.jl, in expression starting on line 11
WARNING: pyeval is deprecated.  Use py"list(x[:])" instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.6/PyCall/src/pyeval.jl:58
 [3] (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 [4] cvxopt_to_julia(::PyCall.PyObject) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:228
 [5] #sdp#6(::Array{Any,1}, ::Array{Any,1}, ::Dict{Any,Any}, ::Function, ::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,2},Array{Float64,2}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:194
 [6] sdp(::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,2},Array{Float64,2}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:171
 [7] include_from_node1(::String) at ./loading.jl:569
 [8] include(::String) at ./sysimg.jl:14
 [9] include_from_node1(::String) at ./loading.jl:569
 [10] include(::String) at ./sysimg.jl:14
 [11] process_options(::Base.JLOptions) at ./client.jl:305
 [12] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/CVXOPT/test/test5.jl, in expression starting on line 11
WARNING: pyeval is deprecated.  Use py"x.size" instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.6/PyCall/src/pyeval.jl:58
 [3] (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 [4] cvxopt_to_julia(::PyCall.PyObject) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:227
 [5] #sdp#6(::Array{Any,1}, ::Array{Any,1}, ::Dict{Any,Any}, ::Function, ::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,2},Array{Float64,2}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:195
 [6] sdp(::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,2},Array{Float64,2}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:171
 [7] include_from_node1(::String) at ./loading.jl:569
 [8] include(::String) at ./sysimg.jl:14
 [9] include_from_node1(::String) at ./loading.jl:569
 [10] include(::String) at ./sysimg.jl:14
 [11] process_options(::Base.JLOptions) at ./client.jl:305
 [12] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/CVXOPT/test/test5.jl, in expression starting on line 11
WARNING: pyeval is deprecated.  Use py"list(x[:])" instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.6/PyCall/src/pyeval.jl:58
 [3] (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 [4] cvxopt_to_julia(::PyCall.PyObject) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:228
 [5] #sdp#6(::Array{Any,1}, ::Array{Any,1}, ::Dict{Any,Any}, ::Function, ::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,2},Array{Float64,2}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:195
 [6] sdp(::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,2},Array{Float64,2}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:171
 [7] include_from_node1(::String) at ./loading.jl:569
 [8] include(::String) at ./sysimg.jl:14
 [9] include_from_node1(::String) at ./loading.jl:569
 [10] include(::String) at ./sysimg.jl:14
 [11] process_options(::Base.JLOptions) at ./client.jl:305
 [12] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/CVXOPT/test/test5.jl, in expression starting on line 11
WARNING: pyeval is deprecated.  Use py"x.size" instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.6/PyCall/src/pyeval.jl:58
 [3] (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 [4] cvxopt_to_julia(::PyCall.PyObject) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:227
 [5] #sdp#6(::Array{Any,1}, ::Array{Any,1}, ::Dict{Any,Any}, ::Function, ::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,2},Array{Float64,2}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:196
 [6] sdp(::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,2},Array{Float64,2}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:171
 [7] include_from_node1(::String) at ./loading.jl:569
 [8] include(::String) at ./sysimg.jl:14
 [9] include_from_node1(::String) at ./loading.jl:569
 [10] include(::String) at ./sysimg.jl:14
 [11] process_options(::Base.JLOptions) at ./client.jl:305
 [12] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/CVXOPT/test/test5.jl, in expression starting on line 11
WARNING: pyeval is deprecated.  Use py"list(x[:])" instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.6/PyCall/src/pyeval.jl:58
 [3] (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 [4] cvxopt_to_julia(::PyCall.PyObject) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:228
 [5] #sdp#6(::Array{Any,1}, ::Array{Any,1}, ::Dict{Any,Any}, ::Function, ::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,2},Array{Float64,2}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:196
 [6] sdp(::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,2},Array{Float64,2}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:171
 [7] include_from_node1(::String) at ./loading.jl:569
 [8] include(::String) at ./sysimg.jl:14
 [9] include_from_node1(::String) at ./loading.jl:569
 [10] include(::String) at ./sysimg.jl:14
 [11] process_options(::Base.JLOptions) at ./client.jl:305
 [12] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/CVXOPT/test/test5.jl, in expression starting on line 11
WARNING: pyeval is deprecated.  Use py"x.size" instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.6/PyCall/src/pyeval.jl:58
 [3] (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 [4] cvxopt_to_julia(::PyCall.PyObject) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:227
 [5] #sdp#6(::Array{Any,1}, ::Array{Any,1}, ::Dict{Any,Any}, ::Function, ::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,2},Array{Float64,2}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:198
 [6] sdp(::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,2},Array{Float64,2}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:171
 [7] include_from_node1(::String) at ./loading.jl:569
 [8] include(::String) at ./sysimg.jl:14
 [9] include_from_node1(::String) at ./loading.jl:569
 [10] include(::String) at ./sysimg.jl:14
 [11] process_options(::Base.JLOptions) at ./client.jl:305
 [12] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/CVXOPT/test/test5.jl, in expression starting on line 11
WARNING: pyeval is deprecated.  Use py"list(x[:])" instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.6/PyCall/src/pyeval.jl:58
 [3] (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 [4] cvxopt_to_julia(::PyCall.PyObject) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:228
 [5] #sdp#6(::Array{Any,1}, ::Array{Any,1}, ::Dict{Any,Any}, ::Function, ::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,2},Array{Float64,2}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:198
 [6] sdp(::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,2},Array{Float64,2}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:171
 [7] include_from_node1(::String) at ./loading.jl:569
 [8] include(::String) at ./sysimg.jl:14
 [9] include_from_node1(::String) at ./loading.jl:569
 [10] include(::String) at ./sysimg.jl:14
 [11] process_options(::Base.JLOptions) at ./client.jl:305
 [12] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/CVXOPT/test/test5.jl, in expression starting on line 11
WARNING: pyeval is deprecated.  Use py"x.size" instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.6/PyCall/src/pyeval.jl:58
 [3] (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 [4] cvxopt_to_julia(::PyCall.PyObject) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:227
 [5] #sdp#6(::Array{Any,1}, ::Array{Any,1}, ::Dict{Any,Any}, ::Function, ::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,2},Array{Float64,2}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:199
 [6] sdp(::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,2},Array{Float64,2}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:171
 [7] include_from_node1(::String) at ./loading.jl:569
 [8] include(::String) at ./sysimg.jl:14
 [9] include_from_node1(::String) at ./loading.jl:569
 [10] include(::String) at ./sysimg.jl:14
 [11] process_options(::Base.JLOptions) at ./client.jl:305
 [12] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/CVXOPT/test/test5.jl, in expression starting on line 11
WARNING: pyeval is deprecated.  Use py"list(x[:])" instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.6/PyCall/src/pyeval.jl:58
 [3] (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 [4] cvxopt_to_julia(::PyCall.PyObject) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:228
 [5] #sdp#6(::Array{Any,1}, ::Array{Any,1}, ::Dict{Any,Any}, ::Function, ::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,2},Array{Float64,2}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:199
 [6] sdp(::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,2},Array{Float64,2}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:171
 [7] include_from_node1(::String) at ./loading.jl:569
 [8] include(::String) at ./sysimg.jl:14
 [9] include_from_node1(::String) at ./loading.jl:569
 [10] include(::String) at ./sysimg.jl:14
 [11] process_options(::Base.JLOptions) at ./client.jl:305
 [12] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/CVXOPT/test/test5.jl, in expression starting on line 11
WARNING: pyeval is deprecated.  Use py"x.size" instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.6/PyCall/src/pyeval.jl:58
 [3] (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 [4] cvxopt_to_julia(::PyCall.PyObject) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:227
 [5] #sdp#6(::Array{Any,1}, ::Array{Any,1}, ::Dict{Any,Any}, ::Function, ::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,2},Array{Float64,2}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:198
 [6] sdp(::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,2},Array{Float64,2}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:171
 [7] include_from_node1(::String) at ./loading.jl:569
 [8] include(::String) at ./sysimg.jl:14
 [9] include_from_node1(::String) at ./loading.jl:569
 [10] include(::String) at ./sysimg.jl:14
 [11] process_options(::Base.JLOptions) at ./client.jl:305
 [12] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/CVXOPT/test/test5.jl, in expression starting on line 11
WARNING: pyeval is deprecated.  Use py"list(x[:])" instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.6/PyCall/src/pyeval.jl:58
 [3] (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 [4] cvxopt_to_julia(::PyCall.PyObject) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:228
 [5] #sdp#6(::Array{Any,1}, ::Array{Any,1}, ::Dict{Any,Any}, ::Function, ::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,2},Array{Float64,2}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:198
 [6] sdp(::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,2},Array{Float64,2}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:171
 [7] include_from_node1(::String) at ./loading.jl:569
 [8] include(::String) at ./sysimg.jl:14
 [9] include_from_node1(::String) at ./loading.jl:569
 [10] include(::String) at ./sysimg.jl:14
 [11] process_options(::Base.JLOptions) at ./client.jl:305
 [12] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/CVXOPT/test/test5.jl, in expression starting on line 11
WARNING: pyeval is deprecated.  Use py"x.size" instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.6/PyCall/src/pyeval.jl:58
 [3] (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 [4] cvxopt_to_julia(::PyCall.PyObject) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:227
 [5] #sdp#6(::Array{Any,1}, ::Array{Any,1}, ::Dict{Any,Any}, ::Function, ::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,2},Array{Float64,2}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:199
 [6] sdp(::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,2},Array{Float64,2}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:171
 [7] include_from_node1(::String) at ./loading.jl:569
 [8] include(::String) at ./sysimg.jl:14
 [9] include_from_node1(::String) at ./loading.jl:569
 [10] include(::String) at ./sysimg.jl:14
 [11] process_options(::Base.JLOptions) at ./client.jl:305
 [12] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/CVXOPT/test/test5.jl, in expression starting on line 11
WARNING: pyeval is deprecated.  Use py"list(x[:])" instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.6/PyCall/src/pyeval.jl:58
 [3] (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 [4] cvxopt_to_julia(::PyCall.PyObject) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:228
 [5] #sdp#6(::Array{Any,1}, ::Array{Any,1}, ::Dict{Any,Any}, ::Function, ::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,2},Array{Float64,2}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:199
 [6] sdp(::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,2},Array{Float64,2}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:171
 [7] include_from_node1(::String) at ./loading.jl:569
 [8] include(::String) at ./sysimg.jl:14
 [9] include_from_node1(::String) at ./loading.jl:569
 [10] include(::String) at ./sysimg.jl:14
 [11] process_options(::Base.JLOptions) at ./client.jl:305
 [12] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/CVXOPT/test/test5.jl, in expression starting on line 11
     pcost       dcost       gap    pres   dres   k/t
 0:  1.1431e+00 -2.3216e+02  5e+02  7e-01  8e+00  1e+00
 1:  3.2291e+00 -7.6284e+01  1e+02  2e-01  3e+00  2e+00
 2: -5.4057e+00 -7.5497e+01  1e+02  2e-01  2e+00  6e+00
 3: -8.2526e+00 -5.0576e+01  7e+01  1e-01  1e+00  4e+00
 4:  3.6383e+00 -4.2856e+01  9e+01  1e-01  2e+00  6e+00
 5: -5.8339e+00 -2.2605e+01  4e+01  6e-02  7e-01  4e+00
 6: -3.0169e+00 -1.5737e+01  2e+01  4e-02  5e-01  2e+00
 7: -9.4177e+00 -1.6446e+01  1e+01  2e-02  3e-01  1e+00
 8: -1.0564e+01 -1.1543e+01  2e+00  3e-03  4e-02  2e-01
 9: -1.0930e+01 -1.1021e+01  2e-01  3e-04  4e-03  2e-02
10: -1.0948e+01 -1.0952e+01  8e-03  1e-05  2e-04  8e-04
11: -1.0949e+01 -1.0949e+01  1e-04  2e-07  3e-06  1e-05
12: -1.0949e+01 -1.0949e+01  1e-06  3e-09  3e-08  2e-07
Optimal solution found.
     pcost       dcost       gap    pres   dres
 0: -1.0721e+00 -4.3040e+00  3e+00  0e+00  2e+00
 1: -1.2240e+00 -1.5212e+00  3e-01  2e-15  2e-01
 2: -1.4283e+00 -1.5409e+00  1e-01  3e-16  5e-02
 3: -1.4300e+00 -1.4312e+00  1e-03  3e-15  5e-04
 4: -1.4300e+00 -1.4300e+00  1e-05  6e-15  5e-06
 5: -1.4300e+00 -1.4300e+00  1e-07  1e-13  5e-08
Optimal solution found.
     pcost       dcost       gap    pres   dres   k/t
 0: -8.1000e+00 -1.8300e+01  4e+00  0e+00  8e-01  1e+00
 1: -8.8055e+00 -9.4357e+00  2e-01  4e-16  4e-02  3e-02
 2: -8.9981e+00 -9.0049e+00  2e-03  2e-16  5e-04  4e-04
 3: -9.0000e+00 -9.0000e+00  2e-05  6e-16  5e-06  4e-06
 4: -9.0000e+00 -9.0000e+00  2e-07  1e-16  5e-08  4e-08
Optimal solution found.
     pcost       dcost       gap    pres   dres   k/t
 0:  4.9969e+00 -1.7285e+01  6e+01  3e-01  4e+00  1e+00
 1: -1.6732e+00 -7.0431e+00  1e+01  7e-02  1e+00  6e-01
 2: -1.6221e+01 -3.5417e+01  2e+02  3e-01  5e+00  7e+00
 3: -2.1832e+01 -2.2849e+01  3e+01  4e-02  6e-01  2e+00
 4: -3.5265e+01 -3.5594e+01  1e+01  1e-02  2e-01  9e-01
 5: -3.8303e+01 -3.8314e+01  3e-01  4e-04  6e-03  2e-02
 6: -3.8342e+01 -3.8342e+01  1e-02  1e-05  2e-04  7e-04
 7: -3.8346e+01 -3.8346e+01  9e-04  1e-06  2e-05  7e-05
 8: -3.8346e+01 -3.8346e+01  4e-05  6e-08  9e-07  4e-06
 9: -3.8346e+01 -3.8346e+01  2e-06  3e-09  4e-08  2e-07
Optimal solution found.
     pcost       dcost       gap    pres   dres   k/t
 0: -1.2037e+00 -1.8539e+02  2e+02  2e-16  8e+00  1e+00
 1: -1.2937e+00 -6.8551e+00  5e+00  5e-16  3e-01  3e-02
 2: -2.8964e+00 -3.7331e+00  7e-01  9e-16  4e-02  5e-02
 3: -3.0150e+00 -3.2556e+00  2e-01  7e-16  1e-02  2e-02
 4: -3.1389e+00 -3.1932e+00  5e-02  4e-16  3e-03  5e-03
 5: -3.1533e+00 -3.1547e+00  1e-03  2e-15  7e-05  1e-04
 6: -3.1535e+00 -3.1536e+00  5e-05  8e-16  3e-06  6e-06
 7: -3.1535e+00 -3.1535e+00  1e-06  6e-16  7e-08  2e-07
Optimal solution found.
INFO: CVXOPT tests passed

>>> End of log
