>>> 'Pkg.add("CVXOPT")' log
INFO: Cloning cache of CVXOPT from https://github.com/cvxopt/CVXOPT.jl.git
INFO: Installing BinDeps v0.6.0
INFO: Installing CVXOPT v0.1.0
INFO: Installing Conda v0.7.0
INFO: Installing MacroTools v0.3.7
INFO: Installing PyCall v1.14.0
INFO: Installing SHA v0.5.1
INFO: Installing URIParser v0.2.0
INFO: Building Conda
INFO: Building PyCall
INFO: Using the Python distribution in the Conda package by default.
To use a different Python version, set ENV["PYTHON"]="pythoncommand" and re-run Pkg.build("PyCall").
INFO: PyCall is using /home/vagrant/.julia/v0.6/Conda/deps/usr/bin/python (Python 2.7.13) at /home/vagrant/.julia/v0.6/Conda/deps/usr/bin/python, libpython = /home/vagrant/.julia/v0.6/Conda/deps/usr/lib/libpython2.7
INFO: /home/vagrant/.julia/v0.6/PyCall/deps/deps.jl has not changed
INFO: /home/vagrant/.julia/v0.6/PyCall/deps/PYTHON has not changed
INFO: Package database updated

>>> 'Pkg.test("CVXOPT")' log
Julia Version 0.6.0
Commit 9036443 (2017-06-19 13:05 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-128-generic #177-Ubuntu SMP Tue Aug 8 11:40:23 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (746.22265625 MB free)
Uptime: 40491.0 sec
Load Avg:  0.88134765625  0.9072265625  1.10546875
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3501 MHz    2479174 s       6359 s     124522 s     861254 s         49 s
#2  3501 MHz     660114 s         94 s      64398 s    3232451 s          2 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.6
2 required packages:
 - CVXOPT                        0.1.0
 - JSON                          0.13.0
7 additional packages:
 - BinDeps                       0.6.0
 - Compat                        0.30.0
 - Conda                         0.7.0
 - MacroTools                    0.3.7
 - PyCall                        1.14.0
 - SHA                           0.5.1
 - URIParser                     0.2.0
INFO: Testing CVXOPT
INFO: Installing cvxopt via the Conda cvxopt package...
Warning: 'conda-forge' already in 'channels' list, moving to the top
Fetching package metadata ...........
Solving package specifications: .

Package plan for installation in environment /home/vagrant/.julia/v0.6/Conda/deps/usr:

The following NEW packages will be INSTALLED:

    cvxopt:      1.1.9-py27_blas_openblas_200 conda-forge [blas_openblas]
    fftw:        3.3.6-3                      conda-forge
    glpk:        4.61-0                       conda-forge
    gmp:         6.1.2-0                      conda-forge
    gsl:         2.2.1-blas_openblas_2        conda-forge [blas_openblas]
    metis:       5.1.0-3                      conda-forge
    suitesparse: 4.5.4-blas_openblas_200      conda-forge [blas_openblas]
    tbb:         2017_20170604-1              conda-forge

fftw-3.3.6-3.t   0% |                              | ETA:  --:--:--   0.00  B/sfftw-3.3.6-3.t   1% |                               | ETA:  0:00:03   1.30 MB/sfftw-3.3.6-3.t   2% |                               | ETA:  0:00:02   1.52 MB/sfftw-3.3.6-3.t   3% |#                              | ETA:  0:00:02   1.87 MB/sfftw-3.3.6-3.t   4% |#                              | ETA:  0:00:01   2.12 MB/sfftw-3.3.6-3.t   6% |#                              | ETA:  0:00:01   2.32 MB/sfftw-3.3.6-3.t   7% |##                             | ETA:  0:00:01   2.47 MB/sfftw-3.3.6-3.t   8% |##                             | ETA:  0:00:01   2.57 MB/sfftw-3.3.6-3.t   9% |###                            | ETA:  0:00:01   2.91 MB/sfftw-3.3.6-3.t  11% |###                            | ETA:  0:00:01   3.03 MB/sfftw-3.3.6-3.t  12% |###                            | ETA:  0:00:01   3.34 MB/sfftw-3.3.6-3.t  13% |####                           | ETA:  0:00:01   3.40 MB/sfftw-3.3.6-3.t  14% |####                           | ETA:  0:00:00   3.69 MB/sfftw-3.3.6-3.t  16% |#####                          | ETA:  0:00:00   3.96 MB/sfftw-3.3.6-3.t  17% |#####                          | ETA:  0:00:00   3.98 MB/sfftw-3.3.6-3.t  18% |#####                          | ETA:  0:00:00   4.24 MB/sfftw-3.3.6-3.t  19% |######                         | ETA:  0:00:00   4.22 MB/sfftw-3.3.6-3.t  21% |######                         | ETA:  0:00:00   4.46 MB/sfftw-3.3.6-3.t  22% |######                         | ETA:  0:00:00   4.70 MB/sfftw-3.3.6-3.t  23% |#######                        | ETA:  0:00:00   4.70 MB/sfftw-3.3.6-3.t  24% |#######                        | ETA:  0:00:00   4.91 MB/sfftw-3.3.6-3.t  26% |########                       | ETA:  0:00:00   5.13 MB/sfftw-3.3.6-3.t  27% |########                       | ETA:  0:00:00   5.34 MB/sfftw-3.3.6-3.t  28% |########                       | ETA:  0:00:00   5.34 MB/sfftw-3.3.6-3.t  29% |#########                      | ETA:  0:00:00   5.53 MB/sfftw-3.3.6-3.t  31% |#########                      | ETA:  0:00:00   5.73 MB/sfftw-3.3.6-3.t  32% |##########                     | ETA:  0:00:00   5.93 MB/sfftw-3.3.6-3.t  33% |##########                     | ETA:  0:00:00   5.89 MB/sfftw-3.3.6-3.t  34% |##########                     | ETA:  0:00:00   6.06 MB/sfftw-3.3.6-3.t  36% |###########                    | ETA:  0:00:00   6.25 MB/sfftw-3.3.6-3.t  37% |###########                    | ETA:  0:00:00   6.44 MB/sfftw-3.3.6-3.t  38% |###########                    | ETA:  0:00:00   6.62 MB/sfftw-3.3.6-3.t  39% |############                   | ETA:  0:00:00   6.57 MB/sfftw-3.3.6-3.t  40% |############                   | ETA:  0:00:00   6.73 MB/sfftw-3.3.6-3.t  42% |#############                  | ETA:  0:00:00   6.91 MB/sfftw-3.3.6-3.t  43% |#############                  | ETA:  0:00:00   7.08 MB/sfftw-3.3.6-3.t  44% |#############                  | ETA:  0:00:00   7.26 MB/sfftw-3.3.6-3.t  45% |##############                 | ETA:  0:00:00   7.18 MB/sfftw-3.3.6-3.t  47% |##############                 | ETA:  0:00:00   7.34 MB/sfftw-3.3.6-3.t  48% |###############                | ETA:  0:00:00   7.50 MB/sfftw-3.3.6-3.t  49% |###############                | ETA:  0:00:00   7.67 MB/sfftw-3.3.6-3.t  50% |###############                | ETA:  0:00:00   7.82 MB/sfftw-3.3.6-3.t  52% |################               | ETA:  0:00:00   7.80 MB/sfftw-3.3.6-3.t  53% |################               | ETA:  0:00:00   7.91 MB/sfftw-3.3.6-3.t  54% |################               | ETA:  0:00:00   8.05 MB/sfftw-3.3.6-3.t  55% |#################              | ETA:  0:00:00   8.19 MB/sfftw-3.3.6-3.t  57% |#################              | ETA:  0:00:00   8.34 MB/sfftw-3.3.6-3.t  58% |##################             | ETA:  0:00:00   8.48 MB/sfftw-3.3.6-3.t  59% |##################             | ETA:  0:00:00   8.63 MB/sfftw-3.3.6-3.t  60% |##################             | ETA:  0:00:00   8.62 MB/sfftw-3.3.6-3.t  62% |###################            | ETA:  0:00:00   8.76 MB/sfftw-3.3.6-3.t  63% |###################            | ETA:  0:00:00   8.86 MB/sfftw-3.3.6-3.t  64% |####################           | ETA:  0:00:00   9.00 MB/sfftw-3.3.6-3.t  65% |####################           | ETA:  0:00:00   9.13 MB/sfftw-3.3.6-3.t  67% |####################           | ETA:  0:00:00   9.26 MB/sfftw-3.3.6-3.t  68% |#####################          | ETA:  0:00:00   9.25 MB/sfftw-3.3.6-3.t  69% |#####################          | ETA:  0:00:00   9.32 MB/sfftw-3.3.6-3.t  70% |#####################          | ETA:  0:00:00   9.45 MB/sfftw-3.3.6-3.t  72% |######################         | ETA:  0:00:00   9.59 MB/sfftw-3.3.6-3.t  73% |######################         | ETA:  0:00:00   9.72 MB/sfftw-3.3.6-3.t  74% |#######################        | ETA:  0:00:00   9.85 MB/sfftw-3.3.6-3.t  75% |#######################        | ETA:  0:00:00   9.98 MB/sfftw-3.3.6-3.t  76% |#######################        | ETA:  0:00:00  10.10 MB/sfftw-3.3.6-3.t  78% |########################       | ETA:  0:00:00  10.09 MB/sfftw-3.3.6-3.t  79% |########################       | ETA:  0:00:00  10.17 MB/sfftw-3.3.6-3.t  80% |#########################      | ETA:  0:00:00  10.29 MB/sfftw-3.3.6-3.t  81% |#########################      | ETA:  0:00:00  10.42 MB/sfftw-3.3.6-3.t  83% |#########################      | ETA:  0:00:00  10.54 MB/sfftw-3.3.6-3.t  84% |##########################     | ETA:  0:00:00  10.67 MB/sfftw-3.3.6-3.t  85% |##########################     | ETA:  0:00:00  10.79 MB/sfftw-3.3.6-3.t  86% |##########################     | ETA:  0:00:00  10.92 MB/sfftw-3.3.6-3.t  88% |###########################    | ETA:  0:00:00  10.91 MB/sfftw-3.3.6-3.t  89% |###########################    | ETA:  0:00:00  10.97 MB/sfftw-3.3.6-3.t  90% |############################   | ETA:  0:00:00  11.08 MB/sfftw-3.3.6-3.t  91% |############################   | ETA:  0:00:00  11.20 MB/sfftw-3.3.6-3.t  93% |############################   | ETA:  0:00:00  11.31 MB/sfftw-3.3.6-3.t  94% |#############################  | ETA:  0:00:00  11.42 MB/sfftw-3.3.6-3.t  95% |#############################  | ETA:  0:00:00  11.53 MB/sfftw-3.3.6-3.t  96% |############################## | ETA:  0:00:00  11.64 MB/sfftw-3.3.6-3.t  98% |############################## | ETA:  0:00:00  11.70 MB/sfftw-3.3.6-3.t  99% |############################## | ETA:  0:00:00  11.82 MB/sfftw-3.3.6-3.t 100% |###############################| Time: 0:00:00  11.86 MB/s
metis-5.1.0-3.   0% |                              | ETA:  --:--:--   0.00  B/smetis-5.1.0-3.   6% |##                             | Time: 0:00:00  15.28 MB/smetis-5.1.0-3.  13% |####                           | Time: 0:00:00  20.66 MB/smetis-5.1.0-3.  19% |######                         | Time: 0:00:00  25.40 MB/smetis-5.1.0-3.  26% |########                       | Time: 0:00:00  28.53 MB/smetis-5.1.0-3.  32% |##########                     | Time: 0:00:00  30.50 MB/smetis-5.1.0-3.  39% |############                   | Time: 0:00:00  32.10 MB/smetis-5.1.0-3.  45% |##############                 | Time: 0:00:00  33.41 MB/smetis-5.1.0-3.  52% |################               | Time: 0:00:00  34.73 MB/smetis-5.1.0-3.  58% |##################             | Time: 0:00:00  34.05 MB/smetis-5.1.0-3.  65% |####################           | Time: 0:00:00  35.46 MB/smetis-5.1.0-3.  72% |######################         | Time: 0:00:00  36.18 MB/smetis-5.1.0-3.  78% |########################       | Time: 0:00:00  16.43 MB/smetis-5.1.0-3.  85% |##########################     | Time: 0:00:00  16.71 MB/smetis-5.1.0-3.  91% |############################   | Time: 0:00:00  17.23 MB/smetis-5.1.0-3.  98% |############################## | Time: 0:00:00  17.89 MB/smetis-5.1.0-3. 100% |###############################| Time: 0:00:00  17.86 MB/smetis-5.1.0-3. 100% |###############################| Time: 0:00:00  17.51 MB/s
tbb-2017_20170   0% |                              | ETA:  --:--:--   0.00  B/stbb-2017_20170   1% |                               | Time: 0:00:00  15.19 MB/stbb-2017_20170   2% |                               | Time: 0:00:00  21.72 MB/stbb-2017_20170   3% |#                              | Time: 0:00:00  25.56 MB/stbb-2017_20170   5% |#                              | Time: 0:00:00  28.36 MB/stbb-2017_20170   6% |#                              | Time: 0:00:00  30.30 MB/stbb-2017_20170   7% |##                             | Time: 0:00:00  31.80 MB/stbb-2017_20170   8% |##                             | Time: 0:00:00  32.95 MB/stbb-2017_20170  10% |###                            | Time: 0:00:00  33.76 MB/stbb-2017_20170  11% |###                            | Time: 0:00:00  34.44 MB/stbb-2017_20170  12% |###                            | Time: 0:00:00  34.31 MB/stbb-2017_20170  13% |####                           | Time: 0:00:00  34.79 MB/stbb-2017_20170  15% |####                           | Time: 0:00:00  35.28 MB/stbb-2017_20170  16% |#####                          | Time: 0:00:00  17.51 MB/stbb-2017_20170  17% |#####                          | Time: 0:00:00  17.07 MB/stbb-2017_20170  18% |#####                          | Time: 0:00:00  17.22 MB/stbb-2017_20170  20% |######                         | Time: 0:00:00  17.81 MB/stbb-2017_20170  21% |######                         | Time: 0:00:00  18.46 MB/stbb-2017_20170  22% |#######                        | Time: 0:00:00  19.06 MB/stbb-2017_20170  23% |#######                        | Time: 0:00:00  19.63 MB/stbb-2017_20170  25% |#######                        | Time: 0:00:00  20.21 MB/stbb-2017_20170  26% |########                       | Time: 0:00:00  20.63 MB/stbb-2017_20170  27% |########                       | Time: 0:00:00  21.28 MB/stbb-2017_20170  29% |########                       | Time: 0:00:00  21.79 MB/stbb-2017_20170  30% |#########                      | Time: 0:00:00  22.28 MB/stbb-2017_20170  31% |#########                      | Time: 0:00:00  22.76 MB/stbb-2017_20170  32% |##########                     | Time: 0:00:00  23.20 MB/stbb-2017_20170  34% |##########                     | Time: 0:00:00  17.12 MB/stbb-2017_20170  35% |##########                     | Time: 0:00:00  16.95 MB/stbb-2017_20170  36% |###########                    | Time: 0:00:00  16.95 MB/stbb-2017_20170  37% |###########                    | Time: 0:00:00  17.20 MB/stbb-2017_20170  39% |############                   | Time: 0:00:00  17.52 MB/stbb-2017_20170  40% |############                   | Time: 0:00:00  17.84 MB/stbb-2017_20170  41% |############                   | Time: 0:00:00  18.16 MB/stbb-2017_20170  42% |#############                  | Time: 0:00:00  18.45 MB/stbb-2017_20170  44% |#############                  | Time: 0:00:00  18.75 MB/stbb-2017_20170  45% |##############                 | Time: 0:00:00  19.05 MB/stbb-2017_20170  46% |##############                 | Time: 0:00:00  19.33 MB/stbb-2017_20170  47% |##############                 | Time: 0:00:00  19.60 MB/stbb-2017_20170  49% |###############                | Time: 0:00:00  19.86 MB/stbb-2017_20170  50% |###############                | Time: 0:00:00  20.10 MB/stbb-2017_20170  51% |################               | Time: 0:00:00  20.35 MB/stbb-2017_20170  53% |################               | Time: 0:00:00  20.60 MB/stbb-2017_20170  54% |################               | Time: 0:00:00  18.14 MB/stbb-2017_20170  55% |#################              | Time: 0:00:00  17.94 MB/stbb-2017_20170  56% |#################              | Time: 0:00:00  17.73 MB/stbb-2017_20170  58% |#################              | Time: 0:00:00  17.82 MB/stbb-2017_20170  59% |##################             | Time: 0:00:00  18.02 MB/stbb-2017_20170  60% |##################             | Time: 0:00:00  18.23 MB/stbb-2017_20170  61% |###################            | Time: 0:00:00  18.46 MB/stbb-2017_20170  63% |###################            | Time: 0:00:00  18.66 MB/stbb-2017_20170  64% |###################            | Time: 0:00:00  18.91 MB/stbb-2017_20170  65% |####################           | Time: 0:00:00  19.11 MB/stbb-2017_20170  66% |####################           | Time: 0:00:00  19.30 MB/stbb-2017_20170  68% |#####################          | Time: 0:00:00  19.49 MB/stbb-2017_20170  69% |#####################          | Time: 0:00:00  19.68 MB/stbb-2017_20170  70% |#####################          | Time: 0:00:00  19.83 MB/stbb-2017_20170  71% |######################         | Time: 0:00:00  20.02 MB/stbb-2017_20170  73% |######################         | Time: 0:00:00  20.20 MB/stbb-2017_20170  74% |#######################        | Time: 0:00:00  20.39 MB/stbb-2017_20170  75% |#######################        | Time: 0:00:00  18.81 MB/stbb-2017_20170  76% |#######################        | Time: 0:00:00  18.55 MB/stbb-2017_20170  78% |########################       | Time: 0:00:00  18.64 MB/stbb-2017_20170  79% |########################       | Time: 0:00:00  18.80 MB/stbb-2017_20170  80% |#########################      | Time: 0:00:00  18.95 MB/stbb-2017_20170  82% |#########################      | Time: 0:00:00  19.10 MB/stbb-2017_20170  83% |#########################      | Time: 0:00:00  19.26 MB/stbb-2017_20170  84% |##########################     | Time: 0:00:00  19.41 MB/stbb-2017_20170  85% |##########################     | Time: 0:00:00  19.60 MB/stbb-2017_20170  87% |##########################     | Time: 0:00:00  19.76 MB/stbb-2017_20170  88% |###########################    | Time: 0:00:00  19.90 MB/stbb-2017_20170  89% |###########################    | Time: 0:00:00  20.04 MB/stbb-2017_20170  90% |############################   | Time: 0:00:00  14.63 MB/stbb-2017_20170  92% |############################   | Time: 0:00:00  14.68 MB/stbb-2017_20170  93% |############################   | Time: 0:00:00  14.78 MB/stbb-2017_20170  94% |#############################  | Time: 0:00:00  14.87 MB/stbb-2017_20170  95% |#############################  | Time: 0:00:00  14.98 MB/stbb-2017_20170  97% |############################## | Time: 0:00:00  15.05 MB/stbb-2017_20170  98% |############################## | Time: 0:00:00  15.16 MB/stbb-2017_20170  99% |############################## | Time: 0:00:00  15.13 MB/stbb-2017_20170 100% |###############################| Time: 0:00:00  15.13 MB/stbb-2017_20170 100% |###############################| Time: 0:00:00  15.07 MB/s
glpk-4.61-0.ta   0% |                              | ETA:  --:--:--   0.00  B/sglpk-4.61-0.ta   1% |                               | Time: 0:00:00  10.35 MB/sglpk-4.61-0.ta   2% |                               | Time: 0:00:00  14.94 MB/sglpk-4.61-0.ta   4% |#                              | Time: 0:00:00  18.39 MB/sglpk-4.61-0.ta   5% |#                              | Time: 0:00:00  20.08 MB/sglpk-4.61-0.ta   7% |##                             | Time: 0:00:00  20.91 MB/sglpk-4.61-0.ta   8% |##                             | Time: 0:00:00  22.58 MB/sglpk-4.61-0.ta  10% |###                            | Time: 0:00:00  24.49 MB/sglpk-4.61-0.ta  11% |###                            | Time: 0:00:00  25.36 MB/sglpk-4.61-0.ta  13% |####                           | Time: 0:00:00  26.34 MB/sglpk-4.61-0.ta  14% |####                           | Time: 0:00:00  27.17 MB/sglpk-4.61-0.ta  16% |#####                          | Time: 0:00:00  27.92 MB/sglpk-4.61-0.ta  17% |#####                          | Time: 0:00:00  28.53 MB/sglpk-4.61-0.ta  19% |#####                          | Time: 0:00:00  28.19 MB/sglpk-4.61-0.ta  20% |######                         | Time: 0:00:00  29.19 MB/sglpk-4.61-0.ta  22% |######                         | Time: 0:00:00  29.31 MB/sglpk-4.61-0.ta  23% |#######                        | Time: 0:00:00  29.51 MB/sglpk-4.61-0.ta  25% |#######                        | Time: 0:00:00  29.97 MB/sglpk-4.61-0.ta  26% |########                       | Time: 0:00:00  23.68 MB/sglpk-4.61-0.ta  28% |########                       | Time: 0:00:00  21.58 MB/sglpk-4.61-0.ta  29% |#########                      | Time: 0:00:00  21.24 MB/sglpk-4.61-0.ta  31% |#########                      | Time: 0:00:00  21.10 MB/sglpk-4.61-0.ta  32% |##########                     | Time: 0:00:00  21.45 MB/sglpk-4.61-0.ta  34% |##########                     | Time: 0:00:00  21.84 MB/sglpk-4.61-0.ta  35% |###########                    | Time: 0:00:00  22.21 MB/sglpk-4.61-0.ta  37% |###########                    | Time: 0:00:00  22.57 MB/sglpk-4.61-0.ta  38% |###########                    | Time: 0:00:00  23.06 MB/sglpk-4.61-0.ta  40% |############                   | Time: 0:00:00  23.43 MB/sglpk-4.61-0.ta  41% |############                   | Time: 0:00:00  23.38 MB/sglpk-4.61-0.ta  43% |#############                  | Time: 0:00:00  23.93 MB/sglpk-4.61-0.ta  44% |#############                  | Time: 0:00:00  24.27 MB/sglpk-4.61-0.ta  46% |##############                 | Time: 0:00:00  24.59 MB/sglpk-4.61-0.ta  47% |##############                 | Time: 0:00:00  24.89 MB/sglpk-4.61-0.ta  48% |###############                | Time: 0:00:00  25.05 MB/sglpk-4.61-0.ta  50% |###############                | Time: 0:00:00  25.33 MB/sglpk-4.61-0.ta  51% |################               | Time: 0:00:00  25.75 MB/sglpk-4.61-0.ta  53% |################               | Time: 0:00:00  26.05 MB/sglpk-4.61-0.ta  54% |#################              | Time: 0:00:00  26.29 MB/sglpk-4.61-0.ta  56% |#################              | Time: 0:00:00  24.85 MB/sglpk-4.61-0.ta  57% |#################              | Time: 0:00:00  24.43 MB/sglpk-4.61-0.ta  59% |##################             | Time: 0:00:00  23.98 MB/sglpk-4.61-0.ta  60% |##################             | Time: 0:00:00  23.16 MB/sglpk-4.61-0.ta  62% |###################            | Time: 0:00:00  23.10 MB/sglpk-4.61-0.ta  63% |###################            | Time: 0:00:00  23.25 MB/sglpk-4.61-0.ta  65% |####################           | Time: 0:00:00  23.39 MB/sglpk-4.61-0.ta  66% |####################           | Time: 0:00:00  23.44 MB/sglpk-4.61-0.ta  68% |#####################          | Time: 0:00:00  23.65 MB/sglpk-4.61-0.ta  69% |#####################          | Time: 0:00:00  23.82 MB/sglpk-4.61-0.ta  71% |######################         | Time: 0:00:00  24.02 MB/sglpk-4.61-0.ta  72% |######################         | Time: 0:00:00  24.12 MB/sglpk-4.61-0.ta  74% |#######################        | Time: 0:00:00  24.28 MB/sglpk-4.61-0.ta  75% |#######################        | Time: 0:00:00  24.45 MB/sglpk-4.61-0.ta  77% |#######################        | Time: 0:00:00  24.70 MB/sglpk-4.61-0.ta  78% |########################       | Time: 0:00:00  24.89 MB/sglpk-4.61-0.ta  80% |########################       | Time: 0:00:00  25.04 MB/sglpk-4.61-0.ta  81% |#########################      | Time: 0:00:00  25.13 MB/sglpk-4.61-0.ta  83% |#########################      | Time: 0:00:00  25.29 MB/sglpk-4.61-0.ta  84% |##########################     | Time: 0:00:00  25.45 MB/sglpk-4.61-0.ta  86% |##########################     | Time: 0:00:00  24.99 MB/sglpk-4.61-0.ta  87% |###########################    | Time: 0:00:00  24.86 MB/sglpk-4.61-0.ta  89% |###########################    | Time: 0:00:00  24.81 MB/sglpk-4.61-0.ta  90% |############################   | Time: 0:00:00  25.07 MB/sglpk-4.61-0.ta  92% |############################   | Time: 0:00:00  25.20 MB/sglpk-4.61-0.ta  93% |############################   | Time: 0:00:00  25.32 MB/sglpk-4.61-0.ta  95% |#############################  | Time: 0:00:00  25.45 MB/sglpk-4.61-0.ta  96% |#############################  | Time: 0:00:00  25.57 MB/sglpk-4.61-0.ta  97% |############################## | Time: 0:00:00  25.59 MB/sglpk-4.61-0.ta  99% |############################## | Time: 0:00:00  25.70 MB/sglpk-4.61-0.ta 100% |###############################| Time: 0:00:00  25.43 MB/sglpk-4.61-0.ta 100% |###############################| Time: 0:00:00  22.97 MB/s
gsl-2.2.1-blas   0% |                              | ETA:  --:--:--   0.00  B/sgsl-2.2.1-blas   0% |                               | Time: 0:00:00  25.88 MB/sgsl-2.2.1-blas   0% |                               | Time: 0:00:00  32.13 MB/sgsl-2.2.1-blas   0% |                               | Time: 0:00:00  34.76 MB/sgsl-2.2.1-blas   0% |                               | Time: 0:00:00  36.51 MB/sgsl-2.2.1-blas   1% |                               | Time: 0:00:00  38.34 MB/sgsl-2.2.1-blas   1% |                               | Time: 0:00:00  39.77 MB/sgsl-2.2.1-blas   1% |                               | Time: 0:00:00  37.28 MB/sgsl-2.2.1-blas   1% |                               | Time: 0:00:00  26.58 MB/sgsl-2.2.1-blas   1% |                               | Time: 0:00:00  25.35 MB/sgsl-2.2.1-blas   2% |                               | Time: 0:00:00  25.44 MB/sgsl-2.2.1-blas   2% |                               | Time: 0:00:00  26.51 MB/sgsl-2.2.1-blas   2% |                               | Time: 0:00:00  21.96 MB/sgsl-2.2.1-blas   2% |                               | Time: 0:00:00  22.73 MB/sgsl-2.2.1-blas   3% |                               | Time: 0:00:00  23.77 MB/sgsl-2.2.1-blas   3% |#                              | Time: 0:00:00  24.54 MB/sgsl-2.2.1-blas   3% |#                              | Time: 0:00:00  25.23 MB/sgsl-2.2.1-blas   3% |#                              | Time: 0:00:00  24.84 MB/sgsl-2.2.1-blas   3% |#                              | Time: 0:00:00  24.02 MB/sgsl-2.2.1-blas   4% |#                              | Time: 0:00:00  23.87 MB/sgsl-2.2.1-blas   4% |#                              | Time: 0:00:00  24.37 MB/sgsl-2.2.1-blas   4% |#                              | Time: 0:00:00  24.90 MB/sgsl-2.2.1-blas   4% |#                              | Time: 0:00:00  25.34 MB/sgsl-2.2.1-blas   4% |#                              | Time: 0:00:00  25.75 MB/sgsl-2.2.1-blas   5% |#                              | Time: 0:00:00  25.78 MB/sgsl-2.2.1-blas   5% |#                              | Time: 0:00:00  26.28 MB/sgsl-2.2.1-blas   5% |#                              | Time: 0:00:00  26.64 MB/sgsl-2.2.1-blas   5% |#                              | Time: 0:00:00  26.96 MB/sgsl-2.2.1-blas   6% |#                              | Time: 0:00:00  26.36 MB/sgsl-2.2.1-blas   6% |#                              | Time: 0:00:00  25.43 MB/sgsl-2.2.1-blas   6% |##                             | Time: 0:00:00  24.76 MB/sgsl-2.2.1-blas   6% |##                             | Time: 0:00:00  25.03 MB/sgsl-2.2.1-blas   6% |##                             | Time: 0:00:00  25.31 MB/sgsl-2.2.1-blas   7% |##                             | Time: 0:00:00  25.74 MB/sgsl-2.2.1-blas   7% |##                             | Time: 0:00:00  26.03 MB/sgsl-2.2.1-blas   7% |##                             | Time: 0:00:00  26.31 MB/sgsl-2.2.1-blas   7% |##                             | Time: 0:00:00  26.57 MB/sgsl-2.2.1-blas   8% |##                             | Time: 0:00:00  26.83 MB/sgsl-2.2.1-blas   8% |##                             | Time: 0:00:00  27.07 MB/sgsl-2.2.1-blas   8% |##                             | Time: 0:00:00  27.31 MB/sgsl-2.2.1-blas   8% |##                             | Time: 0:00:00  27.78 MB/sgsl-2.2.1-blas   8% |##                             | Time: 0:00:00  27.51 MB/sgsl-2.2.1-blas   9% |##                             | Time: 0:00:00  26.52 MB/sgsl-2.2.1-blas   9% |##                             | Time: 0:00:00  26.31 MB/sgsl-2.2.1-blas   9% |##                             | Time: 0:00:00  26.50 MB/sgsl-2.2.1-blas   9% |###                            | Time: 0:00:00  26.72 MB/sgsl-2.2.1-blas   9% |###                            | Time: 0:00:00  26.93 MB/sgsl-2.2.1-blas  10% |###                            | Time: 0:00:00  27.15 MB/sgsl-2.2.1-blas  10% |###                            | Time: 0:00:00  27.22 MB/sgsl-2.2.1-blas  10% |###                            | Time: 0:00:00  27.41 MB/sgsl-2.2.1-blas  10% |###                            | Time: 0:00:00  27.54 MB/sgsl-2.2.1-blas  11% |###                            | Time: 0:00:00  27.78 MB/sgsl-2.2.1-blas  11% |###                            | Time: 0:00:00  28.01 MB/sgsl-2.2.1-blas  11% |###                            | Time: 0:00:00  26.96 MB/sgsl-2.2.1-blas  11% |###                            | Time: 0:00:00  26.82 MB/sgsl-2.2.1-blas  11% |###                            | Time: 0:00:00  26.83 MB/sgsl-2.2.1-blas  12% |###                            | Time: 0:00:00  26.96 MB/sgsl-2.2.1-blas  12% |###                            | Time: 0:00:00  27.16 MB/sgsl-2.2.1-blas  12% |###                            | Time: 0:00:00  27.33 MB/sgsl-2.2.1-blas  12% |###                            | Time: 0:00:00  27.53 MB/sgsl-2.2.1-blas  13% |####                           | Time: 0:00:00  27.62 MB/sgsl-2.2.1-blas  13% |####                           | Time: 0:00:00  27.80 MB/sgsl-2.2.1-blas  13% |####                           | Time: 0:00:00  27.98 MB/sgsl-2.2.1-blas  13% |####                           | Time: 0:00:00  28.16 MB/sgsl-2.2.1-blas  13% |####                           | Time: 0:00:00  28.17 MB/sgsl-2.2.1-blas  14% |####                           | Time: 0:00:00  27.72 MB/sgsl-2.2.1-blas  14% |####                           | Time: 0:00:00  27.28 MB/sgsl-2.2.1-blas  14% |####                           | Time: 0:00:00  27.38 MB/sgsl-2.2.1-blas  14% |####                           | Time: 0:00:00  27.54 MB/sgsl-2.2.1-blas  14% |####                           | Time: 0:00:00  27.70 MB/sgsl-2.2.1-blas  15% |####                           | Time: 0:00:00  27.87 MB/sgsl-2.2.1-blas  15% |####                           | Time: 0:00:00  28.11 MB/sgsl-2.2.1-blas  15% |####                           | Time: 0:00:00  28.28 MB/sgsl-2.2.1-blas  15% |####                           | Time: 0:00:00  28.41 MB/sgsl-2.2.1-blas  16% |####                           | Time: 0:00:00  28.53 MB/sgsl-2.2.1-blas  16% |#####                          | Time: 0:00:00  28.65 MB/sgsl-2.2.1-blas  16% |#####                          | Time: 0:00:00  28.77 MB/sgsl-2.2.1-blas  16% |#####                          | Time: 0:00:00  28.38 MB/sgsl-2.2.1-blas  16% |#####                          | Time: 0:00:00  28.22 MB/sgsl-2.2.1-blas  17% |#####                          | Time: 0:00:00  27.82 MB/sgsl-2.2.1-blas  17% |#####                          | Time: 0:00:00  27.54 MB/sgsl-2.2.1-blas  17% |#####                          | Time: 0:00:00  27.64 MB/sgsl-2.2.1-blas  17% |#####                          | Time: 0:00:00  27.76 MB/sgsl-2.2.1-blas  18% |#####                          | Time: 0:00:00  27.89 MB/sgsl-2.2.1-blas  18% |#####                          | Time: 0:00:00  28.01 MB/sgsl-2.2.1-blas  18% |#####                          | Time: 0:00:00  28.15 MB/sgsl-2.2.1-blas  18% |#####                          | Time: 0:00:00  28.27 MB/sgsl-2.2.1-blas  18% |#####                          | Time: 0:00:00  28.41 MB/sgsl-2.2.1-blas  19% |#####                          | Time: 0:00:00  28.58 MB/sgsl-2.2.1-blas  19% |#####                          | Time: 0:00:00  28.42 MB/sgsl-2.2.1-blas  19% |######                         | Time: 0:00:00  28.16 MB/sgsl-2.2.1-blas  19% |######                         | Time: 0:00:00  27.80 MB/sgsl-2.2.1-blas  19% |######                         | Time: 0:00:00  27.91 MB/sgsl-2.2.1-blas  20% |######                         | Time: 0:00:00  28.02 MB/sgsl-2.2.1-blas  20% |######                         | Time: 0:00:00  28.13 MB/sgsl-2.2.1-blas  20% |######                         | Time: 0:00:00  28.24 MB/sgsl-2.2.1-blas  20% |######                         | Time: 0:00:00  28.35 MB/sgsl-2.2.1-blas  21% |######                         | Time: 0:00:00  28.59 MB/sgsl-2.2.1-blas  21% |######                         | Time: 0:00:00  28.70 MB/sgsl-2.2.1-blas  21% |######                         | Time: 0:00:00  28.76 MB/sgsl-2.2.1-blas  21% |######                         | Time: 0:00:00  28.84 MB/sgsl-2.2.1-blas  21% |######                         | Time: 0:00:00  28.90 MB/sgsl-2.2.1-blas  22% |######                         | Time: 0:00:00  28.98 MB/sgsl-2.2.1-blas  22% |######                         | Time: 0:00:00  29.07 MB/sgsl-2.2.1-blas  22% |#######                        | Time: 0:00:00  29.18 MB/sgsl-2.2.1-blas  22% |#######                        | Time: 0:00:00  29.31 MB/sgsl-2.2.1-blas  23% |#######                        | Time: 0:00:00  28.92 MB/sgsl-2.2.1-blas  23% |#######                        | Time: 0:00:00  28.77 MB/sgsl-2.2.1-blas  23% |#######                        | Time: 0:00:00  28.65 MB/sgsl-2.2.1-blas  23% |#######                        | Time: 0:00:00  28.75 MB/sgsl-2.2.1-blas  23% |#######                        | Time: 0:00:00  28.84 MB/sgsl-2.2.1-blas  24% |#######                        | Time: 0:00:00  28.83 MB/sgsl-2.2.1-blas  24% |#######                        | Time: 0:00:00  28.91 MB/sgsl-2.2.1-blas  24% |#######                        | Time: 0:00:00  28.80 MB/sgsl-2.2.1-blas  24% |#######                        | Time: 0:00:00  28.52 MB/sgsl-2.2.1-blas  24% |#######                        | Time: 0:00:00  28.18 MB/sgsl-2.2.1-blas  25% |#######                        | Time: 0:00:00  28.24 MB/sgsl-2.2.1-blas  25% |#######                        | Time: 0:00:00  28.25 MB/sgsl-2.2.1-blas  25% |#######                        | Time: 0:00:00  28.32 MB/sgsl-2.2.1-blas  25% |########                       | Time: 0:00:00  28.40 MB/sgsl-2.2.1-blas  26% |########                       | Time: 0:00:00  28.48 MB/sgsl-2.2.1-blas  26% |########                       | Time: 0:00:00  28.55 MB/sgsl-2.2.1-blas  26% |########                       | Time: 0:00:00  28.67 MB/sgsl-2.2.1-blas  26% |########                       | Time: 0:00:00  28.75 MB/sgsl-2.2.1-blas  26% |########                       | Time: 0:00:00  28.82 MB/sgsl-2.2.1-blas  27% |########                       | Time: 0:00:00  28.78 MB/sgsl-2.2.1-blas  27% |########                       | Time: 0:00:00  28.80 MB/sgsl-2.2.1-blas  27% |########                       | Time: 0:00:00  28.67 MB/sgsl-2.2.1-blas  27% |########                       | Time: 0:00:00  28.48 MB/sgsl-2.2.1-blas  28% |########                       | Time: 0:00:00  28.12 MB/sgsl-2.2.1-blas  28% |########                       | Time: 0:00:00  28.08 MB/sgsl-2.2.1-blas  28% |########                       | Time: 0:00:00  28.15 MB/sgsl-2.2.1-blas  28% |########                       | Time: 0:00:00  28.23 MB/sgsl-2.2.1-blas  28% |########                       | Time: 0:00:00  28.22 MB/sgsl-2.2.1-blas  29% |#########                      | Time: 0:00:00  28.05 MB/sgsl-2.2.1-blas  29% |#########                      | Time: 0:00:00  27.79 MB/sgsl-2.2.1-blas  29% |#########                      | Time: 0:00:00  27.66 MB/sgsl-2.2.1-blas  29% |#########                      | Time: 0:00:00  27.73 MB/sgsl-2.2.1-blas  29% |#########                      | Time: 0:00:00  27.79 MB/sgsl-2.2.1-blas  30% |#########                      | Time: 0:00:00  27.90 MB/sgsl-2.2.1-blas  30% |#########                      | Time: 0:00:00  27.97 MB/sgsl-2.2.1-blas  30% |#########                      | Time: 0:00:00  28.04 MB/sgsl-2.2.1-blas  30% |#########                      | Time: 0:00:00  28.12 MB/sgsl-2.2.1-blas  31% |#########                      | Time: 0:00:00  28.19 MB/sgsl-2.2.1-blas  31% |#########                      | Time: 0:00:00  28.26 MB/sgsl-2.2.1-blas  31% |#########                      | Time: 0:00:00  28.02 MB/sgsl-2.2.1-blas  31% |#########                      | Time: 0:00:00  28.05 MB/sgsl-2.2.1-blas  31% |#########                      | Time: 0:00:00  28.12 MB/sgsl-2.2.1-blas  32% |#########                      | Time: 0:00:00  28.02 MB/sgsl-2.2.1-blas  32% |##########                     | Time: 0:00:00  27.56 MB/sgsl-2.2.1-blas  32% |##########                     | Time: 0:00:00  27.45 MB/sgsl-2.2.1-blas  32% |##########                     | Time: 0:00:00  27.35 MB/sgsl-2.2.1-blas  33% |##########                     | Time: 0:00:00  27.35 MB/sgsl-2.2.1-blas  33% |##########                     | Time: 0:00:00  27.10 MB/sgsl-2.2.1-blas  33% |##########                     | Time: 0:00:00  26.91 MB/sgsl-2.2.1-blas  33% |##########                     | Time: 0:00:00  26.77 MB/sgsl-2.2.1-blas  33% |##########                     | Time: 0:00:00  26.86 MB/sgsl-2.2.1-blas  34% |##########                     | Time: 0:00:00  26.92 MB/sgsl-2.2.1-blas  34% |##########                     | Time: 0:00:00  26.99 MB/sgsl-2.2.1-blas  34% |##########                     | Time: 0:00:00  27.05 MB/sgsl-2.2.1-blas  34% |##########                     | Time: 0:00:00  27.13 MB/sgsl-2.2.1-blas  34% |##########                     | Time: 0:00:00  27.20 MB/sgsl-2.2.1-blas  35% |##########                     | Time: 0:00:00  27.26 MB/sgsl-2.2.1-blas  35% |##########                     | Time: 0:00:00  27.27 MB/sgsl-2.2.1-blas  35% |###########                    | Time: 0:00:00  27.28 MB/sgsl-2.2.1-blas  35% |###########                    | Time: 0:00:00  27.35 MB/sgsl-2.2.1-blas  36% |###########                    | Time: 0:00:00  27.29 MB/sgsl-2.2.1-blas  36% |###########                    | Time: 0:00:00  27.07 MB/sgsl-2.2.1-blas  36% |###########                    | Time: 0:00:00  26.95 MB/sgsl-2.2.1-blas  36% |###########                    | Time: 0:00:00  26.76 MB/sgsl-2.2.1-blas  36% |###########                    | Time: 0:00:00  26.79 MB/sgsl-2.2.1-blas  37% |###########                    | Time: 0:00:00  26.57 MB/sgsl-2.2.1-blas  37% |###########                    | Time: 0:00:00  26.47 MB/sgsl-2.2.1-blas  37% |###########                    | Time: 0:00:00  26.47 MB/sgsl-2.2.1-blas  37% |###########                    | Time: 0:00:00  26.43 MB/sgsl-2.2.1-blas  38% |###########                    | Time: 0:00:00  26.41 MB/sgsl-2.2.1-blas  38% |###########                    | Time: 0:00:00  26.47 MB/sgsl-2.2.1-blas  38% |###########                    | Time: 0:00:00  26.54 MB/sgsl-2.2.1-blas  38% |###########                    | Time: 0:00:00  26.60 MB/sgsl-2.2.1-blas  38% |############                   | Time: 0:00:00  26.66 MB/sgsl-2.2.1-blas  39% |############                   | Time: 0:00:00  26.72 MB/sgsl-2.2.1-blas  39% |############                   | Time: 0:00:00  26.69 MB/sgsl-2.2.1-blas  39% |############                   | Time: 0:00:00  26.72 MB/sgsl-2.2.1-blas  39% |############                   | Time: 0:00:00  26.78 MB/sgsl-2.2.1-blas  39% |############                   | Time: 0:00:00  26.76 MB/sgsl-2.2.1-blas  40% |############                   | Time: 0:00:00  26.63 MB/sgsl-2.2.1-blas  40% |############                   | Time: 0:00:00  26.46 MB/sgsl-2.2.1-blas  40% |############                   | Time: 0:00:00  26.28 MB/sgsl-2.2.1-blas  40% |############                   | Time: 0:00:00  26.18 MB/sgsl-2.2.1-blas  41% |############                   | Time: 0:00:00  26.01 MB/sgsl-2.2.1-blas  41% |############                   | Time: 0:00:00  25.97 MB/sgsl-2.2.1-blas  41% |############                   | Time: 0:00:00  25.93 MB/sgsl-2.2.1-blas  41% |############                   | Time: 0:00:00  25.83 MB/sgsl-2.2.1-blas  41% |############                   | Time: 0:00:00  25.87 MB/sgsl-2.2.1-blas  42% |#############                  | Time: 0:00:00  25.92 MB/sgsl-2.2.1-blas  42% |#############                  | Time: 0:00:00  25.92 MB/sgsl-2.2.1-blas  42% |#############                  | Time: 0:00:00  25.98 MB/sgsl-2.2.1-blas  42% |#############                  | Time: 0:00:00  25.98 MB/sgsl-2.2.1-blas  43% |#############                  | Time: 0:00:00  26.02 MB/sgsl-2.2.1-blas  43% |#############                  | Time: 0:00:00  26.07 MB/sgsl-2.2.1-blas  43% |#############                  | Time: 0:00:00  26.02 MB/sgsl-2.2.1-blas  43% |#############                  | Time: 0:00:00  25.92 MB/sgsl-2.2.1-blas  43% |#############                  | Time: 0:00:00  25.77 MB/sgsl-2.2.1-blas  44% |#############                  | Time: 0:00:00  25.68 MB/sgsl-2.2.1-blas  44% |#############                  | Time: 0:00:00  25.59 MB/sgsl-2.2.1-blas  44% |#############                  | Time: 0:00:00  25.52 MB/sgsl-2.2.1-blas  44% |#############                  | Time: 0:00:00  25.47 MB/sgsl-2.2.1-blas  44% |#############                  | Time: 0:00:00  25.46 MB/sgsl-2.2.1-blas  45% |##############                 | Time: 0:00:00  25.43 MB/sgsl-2.2.1-blas  45% |##############                 | Time: 0:00:00  25.21 MB/sgsl-2.2.1-blas  45% |##############                 | Time: 0:00:00  25.21 MB/sgsl-2.2.1-blas  45% |##############                 | Time: 0:00:00  25.26 MB/sgsl-2.2.1-blas  46% |##############                 | Time: 0:00:00  25.26 MB/sgsl-2.2.1-blas  46% |##############                 | Time: 0:00:00  25.31 MB/sgsl-2.2.1-blas  46% |##############                 | Time: 0:00:00  25.37 MB/sgsl-2.2.1-blas  46% |##############                 | Time: 0:00:00  25.37 MB/sgsl-2.2.1-blas  46% |##############                 | Time: 0:00:00  25.29 MB/sgsl-2.2.1-blas  47% |##############                 | Time: 0:00:00  25.18 MB/sgsl-2.2.1-blas  47% |##############                 | Time: 0:00:00  25.06 MB/sgsl-2.2.1-blas  47% |##############                 | Time: 0:00:00  24.94 MB/sgsl-2.2.1-blas  47% |##############                 | Time: 0:00:00  24.81 MB/sgsl-2.2.1-blas  47% |##############                 | Time: 0:00:00  24.42 MB/sgsl-2.2.1-blas  48% |##############                 | Time: 0:00:00  24.33 MB/sgsl-2.2.1-blas  48% |###############                | Time: 0:00:00  24.32 MB/sgsl-2.2.1-blas  48% |###############                | Time: 0:00:00  24.38 MB/sgsl-2.2.1-blas  48% |###############                | Time: 0:00:00  24.41 MB/sgsl-2.2.1-blas  49% |###############                | Time: 0:00:00  24.43 MB/sgsl-2.2.1-blas  49% |###############                | Time: 0:00:00  24.47 MB/sgsl-2.2.1-blas  49% |###############                | Time: 0:00:00  24.52 MB/sgsl-2.2.1-blas  49% |###############                | Time: 0:00:00  24.45 MB/sgsl-2.2.1-blas  49% |###############                | Time: 0:00:00  24.38 MB/sgsl-2.2.1-blas  50% |###############                | Time: 0:00:00  24.26 MB/sgsl-2.2.1-blas  50% |###############                | Time: 0:00:00  24.15 MB/sgsl-2.2.1-blas  50% |###############                | Time: 0:00:00  24.03 MB/sgsl-2.2.1-blas  50% |###############                | Time: 0:00:00  23.92 MB/sgsl-2.2.1-blas  51% |###############                | Time: 0:00:00  23.83 MB/sgsl-2.2.1-blas  51% |###############                | Time: 0:00:00  23.77 MB/sgsl-2.2.1-blas  51% |###############                | Time: 0:00:00  23.75 MB/sgsl-2.2.1-blas  51% |################               | Time: 0:00:00  23.76 MB/sgsl-2.2.1-blas  51% |################               | Time: 0:00:00  23.78 MB/sgsl-2.2.1-blas  52% |################               | Time: 0:00:00  23.76 MB/sgsl-2.2.1-blas  52% |################               | Time: 0:00:00  23.79 MB/sgsl-2.2.1-blas  52% |################               | Time: 0:00:00  23.80 MB/sgsl-2.2.1-blas  52% |################               | Time: 0:00:00  23.81 MB/sgsl-2.2.1-blas  52% |################               | Time: 0:00:00  23.78 MB/sgsl-2.2.1-blas  53% |################               | Time: 0:00:00  23.78 MB/sgsl-2.2.1-blas  53% |################               | Time: 0:00:00  23.80 MB/sgsl-2.2.1-blas  53% |################               | Time: 0:00:00  23.85 MB/sgsl-2.2.1-blas  53% |################               | Time: 0:00:00  23.86 MB/sgsl-2.2.1-blas  54% |################               | Time: 0:00:00  23.83 MB/sgsl-2.2.1-blas  54% |################               | Time: 0:00:00  23.83 MB/sgsl-2.2.1-blas  54% |################               | Time: 0:00:00  23.85 MB/sgsl-2.2.1-blas  54% |################               | Time: 0:00:00  23.84 MB/sgsl-2.2.1-blas  54% |#################              | Time: 0:00:00  23.84 MB/sgsl-2.2.1-blas  55% |#################              | Time: 0:00:00  23.85 MB/sgsl-2.2.1-blas  55% |#################              | Time: 0:00:00  23.85 MB/sgsl-2.2.1-blas  55% |#################              | Time: 0:00:00  23.88 MB/sgsl-2.2.1-blas  55% |#################              | Time: 0:00:00  23.89 MB/sgsl-2.2.1-blas  56% |#################              | Time: 0:00:00  23.92 MB/sgsl-2.2.1-blas  56% |#################              | Time: 0:00:00  23.95 MB/sgsl-2.2.1-blas  56% |#################              | Time: 0:00:00  23.97 MB/sgsl-2.2.1-blas  56% |#################              | Time: 0:00:00  23.98 MB/sgsl-2.2.1-blas  56% |#################              | Time: 0:00:00  23.97 MB/sgsl-2.2.1-blas  57% |#################              | Time: 0:00:00  23.99 MB/sgsl-2.2.1-blas  57% |#################              | Time: 0:00:00  23.99 MB/sgsl-2.2.1-blas  57% |#################              | Time: 0:00:00  23.99 MB/sgsl-2.2.1-blas  57% |#################              | Time: 0:00:00  23.99 MB/sgsl-2.2.1-blas  57% |#################              | Time: 0:00:00  24.02 MB/sgsl-2.2.1-blas  58% |##################             | Time: 0:00:00  23.98 MB/sgsl-2.2.1-blas  58% |##################             | Time: 0:00:00  23.98 MB/sgsl-2.2.1-blas  58% |##################             | Time: 0:00:00  24.00 MB/sgsl-2.2.1-blas  58% |##################             | Time: 0:00:00  23.98 MB/sgsl-2.2.1-blas  59% |##################             | Time: 0:00:00  24.00 MB/sgsl-2.2.1-blas  59% |##################             | Time: 0:00:00  24.04 MB/sgsl-2.2.1-blas  59% |##################             | Time: 0:00:00  24.04 MB/sgsl-2.2.1-blas  59% |##################             | Time: 0:00:00  24.05 MB/sgsl-2.2.1-blas  59% |##################             | Time: 0:00:00  24.08 MB/sgsl-2.2.1-blas  60% |##################             | Time: 0:00:00  24.08 MB/sgsl-2.2.1-blas  60% |##################             | Time: 0:00:00  24.07 MB/sgsl-2.2.1-blas  60% |##################             | Time: 0:00:00  24.09 MB/sgsl-2.2.1-blas  60% |##################             | Time: 0:00:00  24.12 MB/sgsl-2.2.1-blas  61% |##################             | Time: 0:00:00  24.10 MB/sgsl-2.2.1-blas  61% |##################             | Time: 0:00:00  24.08 MB/sgsl-2.2.1-blas  61% |###################            | Time: 0:00:00  24.08 MB/sgsl-2.2.1-blas  61% |###################            | Time: 0:00:00  24.09 MB/sgsl-2.2.1-blas  61% |###################            | Time: 0:00:00  24.12 MB/sgsl-2.2.1-blas  62% |###################            | Time: 0:00:00  24.16 MB/sgsl-2.2.1-blas  62% |###################            | Time: 0:00:00  24.18 MB/sgsl-2.2.1-blas  62% |###################            | Time: 0:00:00  24.19 MB/sgsl-2.2.1-blas  62% |###################            | Time: 0:00:00  24.21 MB/sgsl-2.2.1-blas  62% |###################            | Time: 0:00:00  24.24 MB/sgsl-2.2.1-blas  63% |###################            | Time: 0:00:00  24.28 MB/sgsl-2.2.1-blas  63% |###################            | Time: 0:00:00  24.32 MB/sgsl-2.2.1-blas  63% |###################            | Time: 0:00:00  24.36 MB/sgsl-2.2.1-blas  63% |###################            | Time: 0:00:00  24.40 MB/sgsl-2.2.1-blas  64% |###################            | Time: 0:00:00  24.42 MB/sgsl-2.2.1-blas  64% |###################            | Time: 0:00:00  24.45 MB/sgsl-2.2.1-blas  64% |###################            | Time: 0:00:00  24.48 MB/sgsl-2.2.1-blas  64% |####################           | Time: 0:00:00  24.52 MB/sgsl-2.2.1-blas  64% |####################           | Time: 0:00:00  24.54 MB/sgsl-2.2.1-blas  65% |####################           | Time: 0:00:00  24.57 MB/sgsl-2.2.1-blas  65% |####################           | Time: 0:00:00  24.61 MB/sgsl-2.2.1-blas  65% |####################           | Time: 0:00:00  24.64 MB/sgsl-2.2.1-blas  65% |####################           | Time: 0:00:00  24.68 MB/sgsl-2.2.1-blas  66% |####################           | Time: 0:00:00  24.70 MB/sgsl-2.2.1-blas  66% |####################           | Time: 0:00:00  24.70 MB/sgsl-2.2.1-blas  66% |####################           | Time: 0:00:00  24.73 MB/sgsl-2.2.1-blas  66% |####################           | Time: 0:00:00  24.76 MB/sgsl-2.2.1-blas  66% |####################           | Time: 0:00:00  24.79 MB/sgsl-2.2.1-blas  67% |####################           | Time: 0:00:00  24.83 MB/sgsl-2.2.1-blas  67% |####################           | Time: 0:00:00  24.87 MB/sgsl-2.2.1-blas  67% |####################           | Time: 0:00:00  24.91 MB/sgsl-2.2.1-blas  67% |#####################          | Time: 0:00:00  24.95 MB/sgsl-2.2.1-blas  67% |#####################          | Time: 0:00:00  24.99 MB/sgsl-2.2.1-blas  68% |#####################          | Time: 0:00:00  25.02 MB/sgsl-2.2.1-blas  68% |#####################          | Time: 0:00:00  25.06 MB/sgsl-2.2.1-blas  68% |#####################          | Time: 0:00:00  25.10 MB/sgsl-2.2.1-blas  68% |#####################          | Time: 0:00:00  25.11 MB/sgsl-2.2.1-blas  69% |#####################          | Time: 0:00:00  25.15 MB/sgsl-2.2.1-blas  69% |#####################          | Time: 0:00:00  25.18 MB/sgsl-2.2.1-blas  69% |#####################          | Time: 0:00:00  25.22 MB/sgsl-2.2.1-blas  69% |#####################          | Time: 0:00:00  25.26 MB/sgsl-2.2.1-blas  69% |#####################          | Time: 0:00:00  25.30 MB/sgsl-2.2.1-blas  70% |#####################          | Time: 0:00:00  25.34 MB/sgsl-2.2.1-blas  70% |#####################          | Time: 0:00:00  25.37 MB/sgsl-2.2.1-blas  70% |#####################          | Time: 0:00:00  25.41 MB/sgsl-2.2.1-blas  70% |#####################          | Time: 0:00:00  25.45 MB/sgsl-2.2.1-blas  71% |######################         | Time: 0:00:00  25.48 MB/sgsl-2.2.1-blas  71% |######################         | Time: 0:00:00  25.52 MB/sgsl-2.2.1-blas  71% |######################         | Time: 0:00:00  25.56 MB/sgsl-2.2.1-blas  71% |######################         | Time: 0:00:00  25.58 MB/sgsl-2.2.1-blas  71% |######################         | Time: 0:00:00  25.53 MB/sgsl-2.2.1-blas  72% |######################         | Time: 0:00:00  25.57 MB/sgsl-2.2.1-blas  72% |######################         | Time: 0:00:00  25.60 MB/sgsl-2.2.1-blas  72% |######################         | Time: 0:00:00  25.64 MB/sgsl-2.2.1-blas  72% |######################         | Time: 0:00:00  25.67 MB/sgsl-2.2.1-blas  72% |######################         | Time: 0:00:00  25.71 MB/sgsl-2.2.1-blas  73% |######################         | Time: 0:00:00  25.74 MB/sgsl-2.2.1-blas  73% |######################         | Time: 0:00:00  25.78 MB/sgsl-2.2.1-blas  73% |######################         | Time: 0:00:00  25.81 MB/sgsl-2.2.1-blas  73% |######################         | Time: 0:00:00  25.84 MB/sgsl-2.2.1-blas  74% |######################         | Time: 0:00:00  25.88 MB/sgsl-2.2.1-blas  74% |#######################        | Time: 0:00:00  25.91 MB/sgsl-2.2.1-blas  74% |#######################        | Time: 0:00:00  25.95 MB/sgsl-2.2.1-blas  74% |#######################        | Time: 0:00:00  25.99 MB/sgsl-2.2.1-blas  74% |#######################        | Time: 0:00:00  26.02 MB/sgsl-2.2.1-blas  75% |#######################        | Time: 0:00:00  26.05 MB/sgsl-2.2.1-blas  75% |#######################        | Time: 0:00:00  26.08 MB/sgsl-2.2.1-blas  75% |#######################        | Time: 0:00:00  26.12 MB/sgsl-2.2.1-blas  75% |#######################        | Time: 0:00:00  26.15 MB/sgsl-2.2.1-blas  76% |#######################        | Time: 0:00:00  26.15 MB/sgsl-2.2.1-blas  76% |#######################        | Time: 0:00:00  26.19 MB/sgsl-2.2.1-blas  76% |#######################        | Time: 0:00:00  26.22 MB/sgsl-2.2.1-blas  76% |#######################        | Time: 0:00:00  26.25 MB/sgsl-2.2.1-blas  76% |#######################        | Time: 0:00:00  26.28 MB/sgsl-2.2.1-blas  77% |#######################        | Time: 0:00:00  26.29 MB/sgsl-2.2.1-blas  77% |#######################        | Time: 0:00:00  26.30 MB/sgsl-2.2.1-blas  77% |########################       | Time: 0:00:00  26.33 MB/sgsl-2.2.1-blas  77% |########################       | Time: 0:00:00  26.36 MB/sgsl-2.2.1-blas  77% |########################       | Time: 0:00:00  26.39 MB/sgsl-2.2.1-blas  78% |########################       | Time: 0:00:00  26.41 MB/sgsl-2.2.1-blas  78% |########################       | Time: 0:00:00  26.44 MB/sgsl-2.2.1-blas  78% |########################       | Time: 0:00:00  26.47 MB/sgsl-2.2.1-blas  78% |########################       | Time: 0:00:00  26.50 MB/sgsl-2.2.1-blas  79% |########################       | Time: 0:00:00  26.53 MB/sgsl-2.2.1-blas  79% |########################       | Time: 0:00:00  26.56 MB/sgsl-2.2.1-blas  79% |########################       | Time: 0:00:00  26.59 MB/sgsl-2.2.1-blas  79% |########################       | Time: 0:00:00  26.62 MB/sgsl-2.2.1-blas  79% |########################       | Time: 0:00:00  26.66 MB/sgsl-2.2.1-blas  80% |########################       | Time: 0:00:00  26.68 MB/sgsl-2.2.1-blas  80% |########################       | Time: 0:00:00  26.71 MB/sgsl-2.2.1-blas  80% |########################       | Time: 0:00:00  26.74 MB/sgsl-2.2.1-blas  80% |#########################      | Time: 0:00:00  26.78 MB/sgsl-2.2.1-blas  81% |#########################      | Time: 0:00:00  26.81 MB/sgsl-2.2.1-blas  81% |#########################      | Time: 0:00:00  26.84 MB/sgsl-2.2.1-blas  81% |#########################      | Time: 0:00:00  26.87 MB/sgsl-2.2.1-blas  81% |#########################      | Time: 0:00:00  26.90 MB/sgsl-2.2.1-blas  81% |#########################      | Time: 0:00:00  26.92 MB/sgsl-2.2.1-blas  82% |#########################      | Time: 0:00:00  26.94 MB/sgsl-2.2.1-blas  82% |#########################      | Time: 0:00:00  26.98 MB/sgsl-2.2.1-blas  82% |#########################      | Time: 0:00:00  27.00 MB/sgsl-2.2.1-blas  82% |#########################      | Time: 0:00:00  27.01 MB/sgsl-2.2.1-blas  82% |#########################      | Time: 0:00:00  27.03 MB/sgsl-2.2.1-blas  83% |#########################      | Time: 0:00:00  27.05 MB/sgsl-2.2.1-blas  83% |#########################      | Time: 0:00:00  27.08 MB/sgsl-2.2.1-blas  83% |#########################      | Time: 0:00:00  27.11 MB/sgsl-2.2.1-blas  83% |#########################      | Time: 0:00:00  27.13 MB/sgsl-2.2.1-blas  84% |##########################     | Time: 0:00:00  27.16 MB/sgsl-2.2.1-blas  84% |##########################     | Time: 0:00:00  27.18 MB/sgsl-2.2.1-blas  84% |##########################     | Time: 0:00:00  27.21 MB/sgsl-2.2.1-blas  84% |##########################     | Time: 0:00:00  27.23 MB/sgsl-2.2.1-blas  84% |##########################     | Time: 0:00:00  27.26 MB/sgsl-2.2.1-blas  85% |##########################     | Time: 0:00:00  27.29 MB/sgsl-2.2.1-blas  85% |##########################     | Time: 0:00:00  27.33 MB/sgsl-2.2.1-blas  85% |##########################     | Time: 0:00:00  27.36 MB/sgsl-2.2.1-blas  85% |##########################     | Time: 0:00:00  27.38 MB/sgsl-2.2.1-blas  86% |##########################     | Time: 0:00:00  27.41 MB/sgsl-2.2.1-blas  86% |##########################     | Time: 0:00:00  27.44 MB/sgsl-2.2.1-blas  86% |##########################     | Time: 0:00:00  27.46 MB/sgsl-2.2.1-blas  86% |##########################     | Time: 0:00:00  27.48 MB/sgsl-2.2.1-blas  86% |##########################     | Time: 0:00:00  27.51 MB/sgsl-2.2.1-blas  87% |##########################     | Time: 0:00:00  27.53 MB/sgsl-2.2.1-blas  87% |###########################    | Time: 0:00:00  27.56 MB/sgsl-2.2.1-blas  87% |###########################    | Time: 0:00:00  27.58 MB/sgsl-2.2.1-blas  87% |###########################    | Time: 0:00:00  27.54 MB/sgsl-2.2.1-blas  87% |###########################    | Time: 0:00:00  27.56 MB/sgsl-2.2.1-blas  88% |###########################    | Time: 0:00:00  27.58 MB/sgsl-2.2.1-blas  88% |###########################    | Time: 0:00:00  27.59 MB/sgsl-2.2.1-blas  88% |###########################    | Time: 0:00:00  27.62 MB/sgsl-2.2.1-blas  88% |###########################    | Time: 0:00:00  27.65 MB/sgsl-2.2.1-blas  89% |###########################    | Time: 0:00:00  27.67 MB/sgsl-2.2.1-blas  89% |###########################    | Time: 0:00:00  27.68 MB/sgsl-2.2.1-blas  89% |###########################    | Time: 0:00:00  27.71 MB/sgsl-2.2.1-blas  89% |###########################    | Time: 0:00:00  27.74 MB/sgsl-2.2.1-blas  89% |###########################    | Time: 0:00:00  27.77 MB/sgsl-2.2.1-blas  90% |###########################    | Time: 0:00:00  27.80 MB/sgsl-2.2.1-blas  90% |############################   | Time: 0:00:00  27.82 MB/sgsl-2.2.1-blas  90% |############################   | Time: 0:00:00  27.85 MB/sgsl-2.2.1-blas  90% |############################   | Time: 0:00:00  27.88 MB/sgsl-2.2.1-blas  91% |############################   | Time: 0:00:00  27.90 MB/sgsl-2.2.1-blas  91% |############################   | Time: 0:00:00  27.93 MB/sgsl-2.2.1-blas  91% |############################   | Time: 0:00:00  27.96 MB/sgsl-2.2.1-blas  91% |############################   | Time: 0:00:00  27.99 MB/sgsl-2.2.1-blas  91% |############################   | Time: 0:00:00  28.02 MB/sgsl-2.2.1-blas  92% |############################   | Time: 0:00:00  28.06 MB/sgsl-2.2.1-blas  92% |############################   | Time: 0:00:00  28.08 MB/sgsl-2.2.1-blas  92% |############################   | Time: 0:00:00  28.11 MB/sgsl-2.2.1-blas  92% |############################   | Time: 0:00:00  28.14 MB/sgsl-2.2.1-blas  92% |############################   | Time: 0:00:00  28.16 MB/sgsl-2.2.1-blas  93% |############################   | Time: 0:00:00  28.19 MB/sgsl-2.2.1-blas  93% |############################   | Time: 0:00:00  28.22 MB/sgsl-2.2.1-blas  93% |#############################  | Time: 0:00:00  28.24 MB/sgsl-2.2.1-blas  93% |#############################  | Time: 0:00:00  28.27 MB/sgsl-2.2.1-blas  94% |#############################  | Time: 0:00:00  28.30 MB/sgsl-2.2.1-blas  94% |#############################  | Time: 0:00:00  28.32 MB/sgsl-2.2.1-blas  94% |#############################  | Time: 0:00:00  28.35 MB/sgsl-2.2.1-blas  94% |#############################  | Time: 0:00:00  28.39 MB/sgsl-2.2.1-blas  94% |#############################  | Time: 0:00:00  28.42 MB/sgsl-2.2.1-blas  95% |#############################  | Time: 0:00:00  28.44 MB/sgsl-2.2.1-blas  95% |#############################  | Time: 0:00:00  28.47 MB/sgsl-2.2.1-blas  95% |#############################  | Time: 0:00:00  28.50 MB/sgsl-2.2.1-blas  95% |#############################  | Time: 0:00:00  28.52 MB/sgsl-2.2.1-blas  95% |#############################  | Time: 0:00:00  28.55 MB/sgsl-2.2.1-blas  96% |#############################  | Time: 0:00:00  28.58 MB/sgsl-2.2.1-blas  96% |#############################  | Time: 0:00:00  28.60 MB/sgsl-2.2.1-blas  96% |#############################  | Time: 0:00:00  28.60 MB/sgsl-2.2.1-blas  96% |############################## | Time: 0:00:00  28.63 MB/sgsl-2.2.1-blas  97% |############################## | Time: 0:00:00  28.65 MB/sgsl-2.2.1-blas  97% |############################## | Time: 0:00:00  28.67 MB/sgsl-2.2.1-blas  97% |############################## | Time: 0:00:00  28.70 MB/sgsl-2.2.1-blas  97% |############################## | Time: 0:00:00  28.72 MB/sgsl-2.2.1-blas  97% |############################## | Time: 0:00:00  28.74 MB/sgsl-2.2.1-blas  98% |############################## | Time: 0:00:00  28.77 MB/sgsl-2.2.1-blas  98% |############################## | Time: 0:00:00  28.79 MB/sgsl-2.2.1-blas  98% |############################## | Time: 0:00:00  28.81 MB/sgsl-2.2.1-blas  98% |############################## | Time: 0:00:00  28.84 MB/sgsl-2.2.1-blas  99% |############################## | Time: 0:00:00  28.86 MB/sgsl-2.2.1-blas  99% |############################## | Time: 0:00:00  28.87 MB/sgsl-2.2.1-blas  99% |############################## | Time: 0:00:00  28.86 MB/sgsl-2.2.1-blas  99% |############################## | Time: 0:00:00  28.86 MB/sgsl-2.2.1-blas  99% |############################## | Time: 0:00:00  28.88 MB/sgsl-2.2.1-blas 100% |###############################| Time: 0:00:00  28.87 MB/sgsl-2.2.1-blas 100% |###############################| Time: 0:00:00  28.83 MB/s
suitesparse-4.   0% |                              | ETA:  --:--:--   0.00  B/ssuitesparse-4.   0% |                               | Time: 0:00:00  15.53 MB/ssuitesparse-4.   1% |                               | Time: 0:00:00  21.90 MB/ssuitesparse-4.   2% |                               | Time: 0:00:00  25.79 MB/ssuitesparse-4.   2% |                               | Time: 0:00:00  28.31 MB/ssuitesparse-4.   3% |#                              | Time: 0:00:00  27.80 MB/ssuitesparse-4.   4% |#                              | Time: 0:00:00  30.38 MB/ssuitesparse-4.   5% |#                              | Time: 0:00:00  31.55 MB/ssuitesparse-4.   5% |#                              | Time: 0:00:00  32.06 MB/ssuitesparse-4.   6% |##                             | Time: 0:00:00  32.83 MB/ssuitesparse-4.   7% |##                             | Time: 0:00:00  33.35 MB/ssuitesparse-4.   8% |##                             | Time: 0:00:00  33.85 MB/ssuitesparse-4.   8% |##                             | Time: 0:00:00  16.29 MB/ssuitesparse-4.   9% |##                             | Time: 0:00:00  16.30 MB/ssuitesparse-4.  10% |###                            | Time: 0:00:00  17.13 MB/ssuitesparse-4.  11% |###                            | Time: 0:00:00  17.35 MB/ssuitesparse-4.  11% |###                            | Time: 0:00:00  17.67 MB/ssuitesparse-4.  12% |###                            | Time: 0:00:00  18.36 MB/ssuitesparse-4.  13% |####                           | Time: 0:00:00  18.94 MB/ssuitesparse-4.  13% |####                           | Time: 0:00:00  19.54 MB/ssuitesparse-4.  14% |####                           | Time: 0:00:00  20.01 MB/ssuitesparse-4.  15% |####                           | Time: 0:00:00  20.58 MB/ssuitesparse-4.  16% |#####                          | Time: 0:00:00  21.09 MB/ssuitesparse-4.  16% |#####                          | Time: 0:00:00  21.53 MB/ssuitesparse-4.  17% |#####                          | Time: 0:00:00  22.01 MB/ssuitesparse-4.  18% |#####                          | Time: 0:00:00  22.43 MB/ssuitesparse-4.  19% |#####                          | Time: 0:00:00  22.80 MB/ssuitesparse-4.  19% |######                         | Time: 0:00:00  17.47 MB/ssuitesparse-4.  20% |######                         | Time: 0:00:00  17.12 MB/ssuitesparse-4.  21% |######                         | Time: 0:00:00  17.11 MB/ssuitesparse-4.  22% |######                         | Time: 0:00:00  17.46 MB/ssuitesparse-4.  22% |#######                        | Time: 0:00:00  17.79 MB/ssuitesparse-4.  23% |#######                        | Time: 0:00:00  18.13 MB/ssuitesparse-4.  24% |#######                        | Time: 0:00:00  18.45 MB/ssuitesparse-4.  24% |#######                        | Time: 0:00:00  18.78 MB/ssuitesparse-4.  25% |#######                        | Time: 0:00:00  19.09 MB/ssuitesparse-4.  26% |########                       | Time: 0:00:00  19.39 MB/ssuitesparse-4.  27% |########                       | Time: 0:00:00  19.70 MB/ssuitesparse-4.  27% |########                       | Time: 0:00:00  19.96 MB/ssuitesparse-4.  28% |########                       | Time: 0:00:00  20.25 MB/ssuitesparse-4.  29% |#########                      | Time: 0:00:00  20.45 MB/ssuitesparse-4.  30% |#########                      | Time: 0:00:00  20.72 MB/ssuitesparse-4.  30% |#########                      | Time: 0:00:00  17.80 MB/ssuitesparse-4.  31% |#########                      | Time: 0:00:00  17.58 MB/ssuitesparse-4.  32% |##########                     | Time: 0:00:00  17.49 MB/ssuitesparse-4.  33% |##########                     | Time: 0:00:00  17.57 MB/ssuitesparse-4.  33% |##########                     | Time: 0:00:00  17.79 MB/ssuitesparse-4.  34% |##########                     | Time: 0:00:00  18.00 MB/ssuitesparse-4.  35% |##########                     | Time: 0:00:00  18.22 MB/ssuitesparse-4.  36% |###########                    | Time: 0:00:00  18.44 MB/ssuitesparse-4.  36% |###########                    | Time: 0:00:00  18.60 MB/ssuitesparse-4.  37% |###########                    | Time: 0:00:00  18.79 MB/ssuitesparse-4.  38% |###########                    | Time: 0:00:00  18.97 MB/ssuitesparse-4.  38% |############                   | Time: 0:00:00  19.14 MB/ssuitesparse-4.  39% |############                   | Time: 0:00:00  19.33 MB/ssuitesparse-4.  40% |############                   | Time: 0:00:00  19.52 MB/ssuitesparse-4.  41% |############                   | Time: 0:00:00  19.66 MB/ssuitesparse-4.  41% |############                   | Time: 0:00:00  19.80 MB/ssuitesparse-4.  42% |#############                  | Time: 0:00:00  19.97 MB/ssuitesparse-4.  43% |#############                  | Time: 0:00:00  18.72 MB/ssuitesparse-4.  44% |#############                  | Time: 0:00:00  18.50 MB/ssuitesparse-4.  44% |#############                  | Time: 0:00:00  18.39 MB/ssuitesparse-4.  45% |##############                 | Time: 0:00:00  18.46 MB/ssuitesparse-4.  46% |##############                 | Time: 0:00:00  18.62 MB/ssuitesparse-4.  47% |##############                 | Time: 0:00:00  18.79 MB/ssuitesparse-4.  47% |##############                 | Time: 0:00:00  19.00 MB/ssuitesparse-4.  48% |###############                | Time: 0:00:00  19.18 MB/ssuitesparse-4.  49% |###############                | Time: 0:00:00  19.35 MB/ssuitesparse-4.  49% |###############                | Time: 0:00:00  19.52 MB/ssuitesparse-4.  50% |###############                | Time: 0:00:00  19.68 MB/ssuitesparse-4.  51% |###############                | Time: 0:00:00  19.85 MB/ssuitesparse-4.  52% |################               | Time: 0:00:00  20.01 MB/ssuitesparse-4.  52% |################               | Time: 0:00:00  20.17 MB/ssuitesparse-4.  53% |################               | Time: 0:00:00  20.32 MB/ssuitesparse-4.  54% |################               | Time: 0:00:00  20.53 MB/ssuitesparse-4.  55% |#################              | Time: 0:00:00  20.68 MB/ssuitesparse-4.  55% |#################              | Time: 0:00:00  20.83 MB/ssuitesparse-4.  56% |#################              | Time: 0:00:00  19.51 MB/ssuitesparse-4.  57% |#################              | Time: 0:00:00  19.45 MB/ssuitesparse-4.  58% |##################             | Time: 0:00:00  19.27 MB/ssuitesparse-4.  58% |##################             | Time: 0:00:00  19.15 MB/ssuitesparse-4.  59% |##################             | Time: 0:00:00  19.24 MB/ssuitesparse-4.  60% |##################             | Time: 0:00:00  19.37 MB/ssuitesparse-4.  61% |##################             | Time: 0:00:00  19.49 MB/ssuitesparse-4.  61% |###################            | Time: 0:00:00  19.64 MB/ssuitesparse-4.  62% |###################            | Time: 0:00:00  19.77 MB/ssuitesparse-4.  63% |###################            | Time: 0:00:00  19.89 MB/ssuitesparse-4.  63% |###################            | Time: 0:00:00  19.97 MB/ssuitesparse-4.  64% |####################           | Time: 0:00:00  20.09 MB/ssuitesparse-4.  65% |####################           | Time: 0:00:00  20.21 MB/ssuitesparse-4.  66% |####################           | Time: 0:00:00  20.32 MB/ssuitesparse-4.  66% |####################           | Time: 0:00:00  20.43 MB/ssuitesparse-4.  67% |####################           | Time: 0:00:00  20.55 MB/ssuitesparse-4.  68% |#####################          | Time: 0:00:00  20.66 MB/ssuitesparse-4.  69% |#####################          | Time: 0:00:00  20.71 MB/ssuitesparse-4.  69% |#####################          | Time: 0:00:00  20.82 MB/ssuitesparse-4.  70% |#####################          | Time: 0:00:00  20.92 MB/ssuitesparse-4.  71% |######################         | Time: 0:00:00  19.90 MB/ssuitesparse-4.  72% |######################         | Time: 0:00:00  19.84 MB/ssuitesparse-4.  72% |######################         | Time: 0:00:00  19.80 MB/ssuitesparse-4.  73% |######################         | Time: 0:00:00  19.73 MB/ssuitesparse-4.  74% |#######################        | Time: 0:00:00  19.81 MB/ssuitesparse-4.  74% |#######################        | Time: 0:00:00  19.91 MB/ssuitesparse-4.  75% |#######################        | Time: 0:00:00  20.01 MB/ssuitesparse-4.  76% |#######################        | Time: 0:00:00  20.11 MB/ssuitesparse-4.  77% |#######################        | Time: 0:00:00  20.21 MB/ssuitesparse-4.  77% |########################       | Time: 0:00:00  20.31 MB/ssuitesparse-4.  78% |########################       | Time: 0:00:00  20.41 MB/ssuitesparse-4.  79% |########################       | Time: 0:00:00  20.44 MB/ssuitesparse-4.  80% |########################       | Time: 0:00:00  20.53 MB/ssuitesparse-4.  80% |#########################      | Time: 0:00:00  20.62 MB/ssuitesparse-4.  81% |#########################      | Time: 0:00:00  20.71 MB/ssuitesparse-4.  82% |#########################      | Time: 0:00:00  20.81 MB/ssuitesparse-4.  83% |#########################      | Time: 0:00:00  20.91 MB/ssuitesparse-4.  83% |#########################      | Time: 0:00:00  21.01 MB/ssuitesparse-4.  84% |##########################     | Time: 0:00:00  21.11 MB/ssuitesparse-4.  85% |##########################     | Time: 0:00:00  21.20 MB/ssuitesparse-4.  86% |##########################     | Time: 0:00:00  21.29 MB/ssuitesparse-4.  86% |##########################     | Time: 0:00:00  21.33 MB/ssuitesparse-4.  87% |###########################    | Time: 0:00:00  21.40 MB/ssuitesparse-4.  88% |###########################    | Time: 0:00:00  21.06 MB/ssuitesparse-4.  88% |###########################    | Time: 0:00:00  20.90 MB/ssuitesparse-4.  89% |###########################    | Time: 0:00:00  20.88 MB/ssuitesparse-4.  90% |############################   | Time: 0:00:00  20.97 MB/ssuitesparse-4.  91% |############################   | Time: 0:00:00  21.05 MB/ssuitesparse-4.  91% |############################   | Time: 0:00:00  21.14 MB/ssuitesparse-4.  92% |############################   | Time: 0:00:00  21.24 MB/ssuitesparse-4.  93% |############################   | Time: 0:00:00  21.33 MB/ssuitesparse-4.  94% |#############################  | Time: 0:00:00  21.41 MB/ssuitesparse-4.  94% |#############################  | Time: 0:00:00  21.45 MB/ssuitesparse-4.  95% |#############################  | Time: 0:00:00  21.53 MB/ssuitesparse-4.  96% |#############################  | Time: 0:00:00  21.63 MB/ssuitesparse-4.  97% |############################## | Time: 0:00:00  21.72 MB/ssuitesparse-4.  97% |############################## | Time: 0:00:00  21.80 MB/ssuitesparse-4.  98% |############################## | Time: 0:00:00  21.88 MB/ssuitesparse-4.  99% |############################## | Time: 0:00:00  21.99 MB/ssuitesparse-4.  99% |############################## | Time: 0:00:00  22.07 MB/ssuitesparse-4. 100% |###############################| Time: 0:00:00  22.02 MB/ssuitesparse-4. 100% |###############################| Time: 0:00:00  21.97 MB/s
cvxopt-1.1.9-p   0% |                              | ETA:  --:--:--   0.00  B/scvxopt-1.1.9-p   2% |                               | Time: 0:00:00  11.05 MB/scvxopt-1.1.9-p   4% |#                              | Time: 0:00:00  14.65 MB/scvxopt-1.1.9-p   6% |##                             | Time: 0:00:00  16.64 MB/scvxopt-1.1.9-p   9% |##                             | Time: 0:00:00  19.46 MB/scvxopt-1.1.9-p  11% |###                            | Time: 0:00:00  22.29 MB/scvxopt-1.1.9-p  13% |####                           | Time: 0:00:00  24.10 MB/scvxopt-1.1.9-p  16% |#####                          | Time: 0:00:00  25.68 MB/scvxopt-1.1.9-p  18% |#####                          | Time: 0:00:00  27.28 MB/scvxopt-1.1.9-p  20% |######                         | Time: 0:00:00  27.97 MB/scvxopt-1.1.9-p  23% |#######                        | Time: 0:00:00  28.92 MB/scvxopt-1.1.9-p  25% |#######                        | Time: 0:00:00  29.89 MB/scvxopt-1.1.9-p  27% |########                       | Time: 0:00:00  30.71 MB/scvxopt-1.1.9-p  30% |#########                      | Time: 0:00:00  31.34 MB/scvxopt-1.1.9-p  32% |##########                     | Time: 0:00:00  31.84 MB/scvxopt-1.1.9-p  34% |##########                     | Time: 0:00:00  32.76 MB/scvxopt-1.1.9-p  37% |###########                    | Time: 0:00:00  33.09 MB/scvxopt-1.1.9-p  39% |############                   | Time: 0:00:00  32.59 MB/scvxopt-1.1.9-p  41% |#############                  | Time: 0:00:00  33.01 MB/scvxopt-1.1.9-p  44% |#############                  | Time: 0:00:00  33.57 MB/scvxopt-1.1.9-p  46% |##############                 | Time: 0:00:00  27.76 MB/scvxopt-1.1.9-p  48% |###############                | Time: 0:00:00  27.15 MB/scvxopt-1.1.9-p  51% |###############                | Time: 0:00:00  27.07 MB/scvxopt-1.1.9-p  53% |################               | Time: 0:00:00  26.61 MB/scvxopt-1.1.9-p  55% |#################              | Time: 0:00:00  25.74 MB/scvxopt-1.1.9-p  58% |##################             | Time: 0:00:00  25.35 MB/scvxopt-1.1.9-p  60% |##################             | Time: 0:00:00  25.73 MB/scvxopt-1.1.9-p  62% |###################            | Time: 0:00:00  26.17 MB/scvxopt-1.1.9-p  65% |####################           | Time: 0:00:00  26.53 MB/scvxopt-1.1.9-p  67% |####################           | Time: 0:00:00  26.91 MB/scvxopt-1.1.9-p  69% |#####################          | Time: 0:00:00  27.29 MB/scvxopt-1.1.9-p  72% |######################         | Time: 0:00:00  27.67 MB/scvxopt-1.1.9-p  74% |#######################        | Time: 0:00:00  27.99 MB/scvxopt-1.1.9-p  76% |#######################        | Time: 0:00:00  28.33 MB/scvxopt-1.1.9-p  79% |########################       | Time: 0:00:00  28.50 MB/scvxopt-1.1.9-p  81% |#########################      | Time: 0:00:00  28.83 MB/scvxopt-1.1.9-p  83% |##########################     | Time: 0:00:00  29.13 MB/scvxopt-1.1.9-p  86% |##########################     | Time: 0:00:00  29.39 MB/scvxopt-1.1.9-p  88% |###########################    | Time: 0:00:00  29.63 MB/scvxopt-1.1.9-p  90% |############################   | Time: 0:00:00  29.87 MB/scvxopt-1.1.9-p  93% |############################   | Time: 0:00:00  30.09 MB/scvxopt-1.1.9-p  95% |#############################  | Time: 0:00:00  30.33 MB/scvxopt-1.1.9-p  97% |############################## | Time: 0:00:00  30.64 MB/scvxopt-1.1.9-p 100% |###############################| Time: 0:00:00  30.80 MB/scvxopt-1.1.9-p 100% |###############################| Time: 0:00:00  30.48 MB/s
WARNING: pyeval is deprecated.  Use py"{'l':l,'q':list(q),'s':list(s)}" instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.6/PyCall/src/pyeval.jl:58
 [3] (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 [4] #conelp#1(::Array{Any,1}, ::Array{Any,1}, ::Dict{Any,Any}, ::Function, ::Array{Float64,2}, ::SparseMatrixCSC{Float64,Int64}, ::Array{Float64,2}, ::Dict{String,Any}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:25
 [5] conelp(::Array{Float64,2}, ::SparseMatrixCSC{Float64,Int64}, ::Array{Float64,2}, ::Dict{String,Any}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:18
 [6] include_from_node1(::String) at ./loading.jl:569
 [7] include(::String) at ./sysimg.jl:14
 [8] include_from_node1(::String) at ./loading.jl:569
 [9] include(::String) at ./sysimg.jl:14
 [10] process_options(::Base.JLOptions) at ./client.jl:305
 [11] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/CVXOPT/test/test1.jl, in expression starting on line 13
WARNING: pyeval is deprecated.  Use py"x.size" instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.6/PyCall/src/pyeval.jl:58
 [3] (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 [4] cvxopt_to_julia(::PyCall.PyObject) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:227
 [5] #conelp#1(::Array{Any,1}, ::Array{Any,1}, ::Dict{Any,Any}, ::Function, ::Array{Float64,2}, ::SparseMatrixCSC{Float64,Int64}, ::Array{Float64,2}, ::Dict{String,Any}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:32
 [6] conelp(::Array{Float64,2}, ::SparseMatrixCSC{Float64,Int64}, ::Array{Float64,2}, ::Dict{String,Any}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:18
 [7] include_from_node1(::String) at ./loading.jl:569
 [8] include(::String) at ./sysimg.jl:14
 [9] include_from_node1(::String) at ./loading.jl:569
 [10] include(::String) at ./sysimg.jl:14
 [11] process_options(::Base.JLOptions) at ./client.jl:305
 [12] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/CVXOPT/test/test1.jl, in expression starting on line 13
WARNING: pyeval is deprecated.  Use py"list(x[:])" instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.6/PyCall/src/pyeval.jl:58
 [3] (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 [4] cvxopt_to_julia(::PyCall.PyObject) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:228
 [5] #conelp#1(::Array{Any,1}, ::Array{Any,1}, ::Dict{Any,Any}, ::Function, ::Array{Float64,2}, ::SparseMatrixCSC{Float64,Int64}, ::Array{Float64,2}, ::Dict{String,Any}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:32
 [6] conelp(::Array{Float64,2}, ::SparseMatrixCSC{Float64,Int64}, ::Array{Float64,2}, ::Dict{String,Any}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:18
 [7] include_from_node1(::String) at ./loading.jl:569
 [8] include(::String) at ./sysimg.jl:14
 [9] include_from_node1(::String) at ./loading.jl:569
 [10] include(::String) at ./sysimg.jl:14
 [11] process_options(::Base.JLOptions) at ./client.jl:305
 [12] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/CVXOPT/test/test1.jl, in expression starting on line 13
WARNING: pyeval is deprecated.  Use py"x.size" instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.6/PyCall/src/pyeval.jl:58
 [3] (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 [4] cvxopt_to_julia(::PyCall.PyObject) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:227
 [5] #conelp#1(::Array{Any,1}, ::Array{Any,1}, ::Dict{Any,Any}, ::Function, ::Array{Float64,2}, ::SparseMatrixCSC{Float64,Int64}, ::Array{Float64,2}, ::Dict{String,Any}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:33
 [6] conelp(::Array{Float64,2}, ::SparseMatrixCSC{Float64,Int64}, ::Array{Float64,2}, ::Dict{String,Any}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:18
 [7] include_from_node1(::String) at ./loading.jl:569
 [8] include(::String) at ./sysimg.jl:14
 [9] include_from_node1(::String) at ./loading.jl:569
 [10] include(::String) at ./sysimg.jl:14
 [11] process_options(::Base.JLOptions) at ./client.jl:305
 [12] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/CVXOPT/test/test1.jl, in expression starting on line 13
WARNING: pyeval is deprecated.  Use py"list(x[:])" instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.6/PyCall/src/pyeval.jl:58
 [3] (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 [4] cvxopt_to_julia(::PyCall.PyObject) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:228
 [5] #conelp#1(::Array{Any,1}, ::Array{Any,1}, ::Dict{Any,Any}, ::Function, ::Array{Float64,2}, ::SparseMatrixCSC{Float64,Int64}, ::Array{Float64,2}, ::Dict{String,Any}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:33
 [6] conelp(::Array{Float64,2}, ::SparseMatrixCSC{Float64,Int64}, ::Array{Float64,2}, ::Dict{String,Any}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:18
 [7] include_from_node1(::String) at ./loading.jl:569
 [8] include(::String) at ./sysimg.jl:14
 [9] include_from_node1(::String) at ./loading.jl:569
 [10] include(::String) at ./sysimg.jl:14
 [11] process_options(::Base.JLOptions) at ./client.jl:305
 [12] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/CVXOPT/test/test1.jl, in expression starting on line 13
WARNING: pyeval is deprecated.  Use py"x.size" instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.6/PyCall/src/pyeval.jl:58
 [3] (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 [4] cvxopt_to_julia(::PyCall.PyObject) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:227
 [5] #conelp#1(::Array{Any,1}, ::Array{Any,1}, ::Dict{Any,Any}, ::Function, ::Array{Float64,2}, ::SparseMatrixCSC{Float64,Int64}, ::Array{Float64,2}, ::Dict{String,Any}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:34
 [6] conelp(::Array{Float64,2}, ::SparseMatrixCSC{Float64,Int64}, ::Array{Float64,2}, ::Dict{String,Any}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:18
 [7] include_from_node1(::String) at ./loading.jl:569
 [8] include(::String) at ./sysimg.jl:14
 [9] include_from_node1(::String) at ./loading.jl:569
 [10] include(::String) at ./sysimg.jl:14
 [11] process_options(::Base.JLOptions) at ./client.jl:305
 [12] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/CVXOPT/test/test1.jl, in expression starting on line 13
WARNING: pyeval is deprecated.  Use py"list(x[:])" instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.6/PyCall/src/pyeval.jl:58
 [3] (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 [4] cvxopt_to_julia(::PyCall.PyObject) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:228
 [5] #conelp#1(::Array{Any,1}, ::Array{Any,1}, ::Dict{Any,Any}, ::Function, ::Array{Float64,2}, ::SparseMatrixCSC{Float64,Int64}, ::Array{Float64,2}, ::Dict{String,Any}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:34
 [6] conelp(::Array{Float64,2}, ::SparseMatrixCSC{Float64,Int64}, ::Array{Float64,2}, ::Dict{String,Any}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:18
 [7] include_from_node1(::String) at ./loading.jl:569
 [8] include(::String) at ./sysimg.jl:14
 [9] include_from_node1(::String) at ./loading.jl:569
 [10] include(::String) at ./sysimg.jl:14
 [11] process_options(::Base.JLOptions) at ./client.jl:305
 [12] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/CVXOPT/test/test1.jl, in expression starting on line 13
WARNING: pyeval is deprecated.  Use py"x.size" instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.6/PyCall/src/pyeval.jl:58
 [3] (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 [4] cvxopt_to_julia(::PyCall.PyObject) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:227
 [5] #conelp#1(::Array{Any,1}, ::Array{Any,1}, ::Dict{Any,Any}, ::Function, ::Array{Float64,2}, ::SparseMatrixCSC{Float64,Int64}, ::Array{Float64,2}, ::Dict{String,Any}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:35
 [6] conelp(::Array{Float64,2}, ::SparseMatrixCSC{Float64,Int64}, ::Array{Float64,2}, ::Dict{String,Any}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:18
 [7] include_from_node1(::String) at ./loading.jl:569
 [8] include(::String) at ./sysimg.jl:14
 [9] include_from_node1(::String) at ./loading.jl:569
 [10] include(::String) at ./sysimg.jl:14
 [11] process_options(::Base.JLOptions) at ./client.jl:305
 [12] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/CVXOPT/test/test1.jl, in expression starting on line 13
WARNING: pyeval is deprecated.  Use py"list(x[:])" instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.6/PyCall/src/pyeval.jl:58
 [3] (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 [4] cvxopt_to_julia(::PyCall.PyObject) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:228
 [5] #conelp#1(::Array{Any,1}, ::Array{Any,1}, ::Dict{Any,Any}, ::Function, ::Array{Float64,2}, ::SparseMatrixCSC{Float64,Int64}, ::Array{Float64,2}, ::Dict{String,Any}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:35
 [6] conelp(::Array{Float64,2}, ::SparseMatrixCSC{Float64,Int64}, ::Array{Float64,2}, ::Dict{String,Any}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:18
 [7] include_from_node1(::String) at ./loading.jl:569
 [8] include(::String) at ./sysimg.jl:14
 [9] include_from_node1(::String) at ./loading.jl:569
 [10] include(::String) at ./sysimg.jl:14
 [11] process_options(::Base.JLOptions) at ./client.jl:305
 [12] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/CVXOPT/test/test1.jl, in expression starting on line 13
WARNING: pyeval is deprecated.  Use py"{'l':l,'q':list(q),'s':list(s)}" instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.6/PyCall/src/pyeval.jl:58
 [3] (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 [4] #coneqp#2(::Array{Any,1}, ::Array{Any,1}, ::Dict{Any,Any}, ::Function, ::Array{Float64,2}, ::Array{Float64,1}, ::SparseMatrixCSC{Float64,Int64}, ::Array{Float64,2}, ::Dict{String,Any}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:54
 [5] coneqp(::Array{Float64,2}, ::Array{Float64,1}, ::SparseMatrixCSC{Float64,Int64}, ::Array{Float64,2}, ::Dict{String,Any}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:46
 [6] include_from_node1(::String) at ./loading.jl:569
 [7] include(::String) at ./sysimg.jl:14
 [8] include_from_node1(::String) at ./loading.jl:569
 [9] include(::String) at ./sysimg.jl:14
 [10] process_options(::Base.JLOptions) at ./client.jl:305
 [11] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/CVXOPT/test/test2.jl, in expression starting on line 15
WARNING: pyeval is deprecated.  Use py"x.size" instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.6/PyCall/src/pyeval.jl:58
 [3] (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 [4] cvxopt_to_julia(::PyCall.PyObject) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:227
 [5] #coneqp#2(::Array{Any,1}, ::Array{Any,1}, ::Dict{Any,Any}, ::Function, ::Array{Float64,2}, ::Array{Float64,1}, ::SparseMatrixCSC{Float64,Int64}, ::Array{Float64,2}, ::Dict{String,Any}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:61
 [6] coneqp(::Array{Float64,2}, ::Array{Float64,1}, ::SparseMatrixCSC{Float64,Int64}, ::Array{Float64,2}, ::Dict{String,Any}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:46
 [7] include_from_node1(::String) at ./loading.jl:569
 [8] include(::String) at ./sysimg.jl:14
 [9] include_from_node1(::String) at ./loading.jl:569
 [10] include(::String) at ./sysimg.jl:14
 [11] process_options(::Base.JLOptions) at ./client.jl:305
 [12] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/CVXOPT/test/test2.jl, in expression starting on line 15
WARNING: pyeval is deprecated.  Use py"list(x[:])" instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.6/PyCall/src/pyeval.jl:58
 [3] (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 [4] cvxopt_to_julia(::PyCall.PyObject) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:228
 [5] #coneqp#2(::Array{Any,1}, ::Array{Any,1}, ::Dict{Any,Any}, ::Function, ::Array{Float64,2}, ::Array{Float64,1}, ::SparseMatrixCSC{Float64,Int64}, ::Array{Float64,2}, ::Dict{String,Any}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:61
 [6] coneqp(::Array{Float64,2}, ::Array{Float64,1}, ::SparseMatrixCSC{Float64,Int64}, ::Array{Float64,2}, ::Dict{String,Any}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:46
 [7] include_from_node1(::String) at ./loading.jl:569
 [8] include(::String) at ./sysimg.jl:14
 [9] include_from_node1(::String) at ./loading.jl:569
 [10] include(::String) at ./sysimg.jl:14
 [11] process_options(::Base.JLOptions) at ./client.jl:305
 [12] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/CVXOPT/test/test2.jl, in expression starting on line 15
WARNING: pyeval is deprecated.  Use py"x.size" instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.6/PyCall/src/pyeval.jl:58
 [3] (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 [4] cvxopt_to_julia(::PyCall.PyObject) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:227
 [5] #coneqp#2(::Array{Any,1}, ::Array{Any,1}, ::Dict{Any,Any}, ::Function, ::Array{Float64,2}, ::Array{Float64,1}, ::SparseMatrixCSC{Float64,Int64}, ::Array{Float64,2}, ::Dict{String,Any}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:62
 [6] coneqp(::Array{Float64,2}, ::Array{Float64,1}, ::SparseMatrixCSC{Float64,Int64}, ::Array{Float64,2}, ::Dict{String,Any}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:46
 [7] include_from_node1(::String) at ./loading.jl:569
 [8] include(::String) at ./sysimg.jl:14
 [9] include_from_node1(::String) at ./loading.jl:569
 [10] include(::String) at ./sysimg.jl:14
 [11] process_options(::Base.JLOptions) at ./client.jl:305
 [12] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/CVXOPT/test/test2.jl, in expression starting on line 15
WARNING: pyeval is deprecated.  Use py"list(x[:])" instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.6/PyCall/src/pyeval.jl:58
 [3] (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 [4] cvxopt_to_julia(::PyCall.PyObject) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:228
 [5] #coneqp#2(::Array{Any,1}, ::Array{Any,1}, ::Dict{Any,Any}, ::Function, ::Array{Float64,2}, ::Array{Float64,1}, ::SparseMatrixCSC{Float64,Int64}, ::Array{Float64,2}, ::Dict{String,Any}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:62
 [6] coneqp(::Array{Float64,2}, ::Array{Float64,1}, ::SparseMatrixCSC{Float64,Int64}, ::Array{Float64,2}, ::Dict{String,Any}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:46
 [7] include_from_node1(::String) at ./loading.jl:569
 [8] include(::String) at ./sysimg.jl:14
 [9] include_from_node1(::String) at ./loading.jl:569
 [10] include(::String) at ./sysimg.jl:14
 [11] process_options(::Base.JLOptions) at ./client.jl:305
 [12] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/CVXOPT/test/test2.jl, in expression starting on line 15
WARNING: pyeval is deprecated.  Use py"x.size" instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.6/PyCall/src/pyeval.jl:58
 [3] (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 [4] cvxopt_to_julia(::PyCall.PyObject) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:227
 [5] #coneqp#2(::Array{Any,1}, ::Array{Any,1}, ::Dict{Any,Any}, ::Function, ::Array{Float64,2}, ::Array{Float64,1}, ::SparseMatrixCSC{Float64,Int64}, ::Array{Float64,2}, ::Dict{String,Any}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:63
 [6] coneqp(::Array{Float64,2}, ::Array{Float64,1}, ::SparseMatrixCSC{Float64,Int64}, ::Array{Float64,2}, ::Dict{String,Any}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:46
 [7] include_from_node1(::String) at ./loading.jl:569
 [8] include(::String) at ./sysimg.jl:14
 [9] include_from_node1(::String) at ./loading.jl:569
 [10] include(::String) at ./sysimg.jl:14
 [11] process_options(::Base.JLOptions) at ./client.jl:305
 [12] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/CVXOPT/test/test2.jl, in expression starting on line 15
WARNING: pyeval is deprecated.  Use py"list(x[:])" instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.6/PyCall/src/pyeval.jl:58
 [3] (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 [4] cvxopt_to_julia(::PyCall.PyObject) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:228
 [5] #coneqp#2(::Array{Any,1}, ::Array{Any,1}, ::Dict{Any,Any}, ::Function, ::Array{Float64,2}, ::Array{Float64,1}, ::SparseMatrixCSC{Float64,Int64}, ::Array{Float64,2}, ::Dict{String,Any}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:63
 [6] coneqp(::Array{Float64,2}, ::Array{Float64,1}, ::SparseMatrixCSC{Float64,Int64}, ::Array{Float64,2}, ::Dict{String,Any}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:46
 [7] include_from_node1(::String) at ./loading.jl:569
 [8] include(::String) at ./sysimg.jl:14
 [9] include_from_node1(::String) at ./loading.jl:569
 [10] include(::String) at ./sysimg.jl:14
 [11] process_options(::Base.JLOptions) at ./client.jl:305
 [12] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/CVXOPT/test/test2.jl, in expression starting on line 15
WARNING: pyeval is deprecated.  Use py"x.size" instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.6/PyCall/src/pyeval.jl:58
 [3] (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 [4] cvxopt_to_julia(::PyCall.PyObject) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:227
 [5] #coneqp#2(::Array{Any,1}, ::Array{Any,1}, ::Dict{Any,Any}, ::Function, ::Array{Float64,2}, ::Array{Float64,1}, ::SparseMatrixCSC{Float64,Int64}, ::Array{Float64,2}, ::Dict{String,Any}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:64
 [6] coneqp(::Array{Float64,2}, ::Array{Float64,1}, ::SparseMatrixCSC{Float64,Int64}, ::Array{Float64,2}, ::Dict{String,Any}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:46
 [7] include_from_node1(::String) at ./loading.jl:569
 [8] include(::String) at ./sysimg.jl:14
 [9] include_from_node1(::String) at ./loading.jl:569
 [10] include(::String) at ./sysimg.jl:14
 [11] process_options(::Base.JLOptions) at ./client.jl:305
 [12] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/CVXOPT/test/test2.jl, in expression starting on line 15
WARNING: pyeval is deprecated.  Use py"list(x[:])" instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.6/PyCall/src/pyeval.jl:58
 [3] (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 [4] cvxopt_to_julia(::PyCall.PyObject) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:228
 [5] #coneqp#2(::Array{Any,1}, ::Array{Any,1}, ::Dict{Any,Any}, ::Function, ::Array{Float64,2}, ::Array{Float64,1}, ::SparseMatrixCSC{Float64,Int64}, ::Array{Float64,2}, ::Dict{String,Any}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:64
 [6] coneqp(::Array{Float64,2}, ::Array{Float64,1}, ::SparseMatrixCSC{Float64,Int64}, ::Array{Float64,2}, ::Dict{String,Any}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:46
 [7] include_from_node1(::String) at ./loading.jl:569
 [8] include(::String) at ./sysimg.jl:14
 [9] include_from_node1(::String) at ./loading.jl:569
 [10] include(::String) at ./sysimg.jl:14
 [11] process_options(::Base.JLOptions) at ./client.jl:305
 [12] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/CVXOPT/test/test2.jl, in expression starting on line 15
WARNING: pyeval is deprecated.  Use py"x.size" instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.6/PyCall/src/pyeval.jl:58
 [3] (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 [4] cvxopt_to_julia(::PyCall.PyObject) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:227
 [5] #lp#3(::Array{Any,1}, ::Array{Any,1}, ::Dict{Any,Any}, ::Function, ::Array{Float64,1}, ::Array{Float64,2}, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:88
 [6] lp(::Array{Float64,1}, ::Array{Float64,2}, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:75
 [7] include_from_node1(::String) at ./loading.jl:569
 [8] include(::String) at ./sysimg.jl:14
 [9] include_from_node1(::String) at ./loading.jl:569
 [10] include(::String) at ./sysimg.jl:14
 [11] process_options(::Base.JLOptions) at ./client.jl:305
 [12] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/CVXOPT/test/test3.jl, in expression starting on line 5
WARNING: pyeval is deprecated.  Use py"list(x[:])" instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.6/PyCall/src/pyeval.jl:58
 [3] (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 [4] cvxopt_to_julia(::PyCall.PyObject) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:228
 [5] #lp#3(::Array{Any,1}, ::Array{Any,1}, ::Dict{Any,Any}, ::Function, ::Array{Float64,1}, ::Array{Float64,2}, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:88
 [6] lp(::Array{Float64,1}, ::Array{Float64,2}, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:75
 [7] include_from_node1(::String) at ./loading.jl:569
 [8] include(::String) at ./sysimg.jl:14
 [9] include_from_node1(::String) at ./loading.jl:569
 [10] include(::String) at ./sysimg.jl:14
 [11] process_options(::Base.JLOptions) at ./client.jl:305
 [12] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/CVXOPT/test/test3.jl, in expression starting on line 5
WARNING: pyeval is deprecated.  Use py"x.size" instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.6/PyCall/src/pyeval.jl:58
 [3] (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 [4] cvxopt_to_julia(::PyCall.PyObject) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:227
 [5] #lp#3(::Array{Any,1}, ::Array{Any,1}, ::Dict{Any,Any}, ::Function, ::Array{Float64,1}, ::Array{Float64,2}, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:89
 [6] lp(::Array{Float64,1}, ::Array{Float64,2}, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:75
 [7] include_from_node1(::String) at ./loading.jl:569
 [8] include(::String) at ./sysimg.jl:14
 [9] include_from_node1(::String) at ./loading.jl:569
 [10] include(::String) at ./sysimg.jl:14
 [11] process_options(::Base.JLOptions) at ./client.jl:305
 [12] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/CVXOPT/test/test3.jl, in expression starting on line 5
WARNING: pyeval is deprecated.  Use py"list(x[:])" instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.6/PyCall/src/pyeval.jl:58
 [3] (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 [4] cvxopt_to_julia(::PyCall.PyObject) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:228
 [5] #lp#3(::Array{Any,1}, ::Array{Any,1}, ::Dict{Any,Any}, ::Function, ::Array{Float64,1}, ::Array{Float64,2}, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:89
 [6] lp(::Array{Float64,1}, ::Array{Float64,2}, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:75
 [7] include_from_node1(::String) at ./loading.jl:569
 [8] include(::String) at ./sysimg.jl:14
 [9] include_from_node1(::String) at ./loading.jl:569
 [10] include(::String) at ./sysimg.jl:14
 [11] process_options(::Base.JLOptions) at ./client.jl:305
 [12] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/CVXOPT/test/test3.jl, in expression starting on line 5
WARNING: pyeval is deprecated.  Use py"x.size" instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.6/PyCall/src/pyeval.jl:58
 [3] (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 [4] cvxopt_to_julia(::PyCall.PyObject) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:227
 [5] #lp#3(::Array{Any,1}, ::Array{Any,1}, ::Dict{Any,Any}, ::Function, ::Array{Float64,1}, ::Array{Float64,2}, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:90
 [6] lp(::Array{Float64,1}, ::Array{Float64,2}, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:75
 [7] include_from_node1(::String) at ./loading.jl:569
 [8] include(::String) at ./sysimg.jl:14
 [9] include_from_node1(::String) at ./loading.jl:569
 [10] include(::String) at ./sysimg.jl:14
 [11] process_options(::Base.JLOptions) at ./client.jl:305
 [12] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/CVXOPT/test/test3.jl, in expression starting on line 5
WARNING: pyeval is deprecated.  Use py"list(x[:])" instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.6/PyCall/src/pyeval.jl:58
 [3] (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 [4] cvxopt_to_julia(::PyCall.PyObject) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:228
 [5] #lp#3(::Array{Any,1}, ::Array{Any,1}, ::Dict{Any,Any}, ::Function, ::Array{Float64,1}, ::Array{Float64,2}, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:90
 [6] lp(::Array{Float64,1}, ::Array{Float64,2}, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:75
 [7] include_from_node1(::String) at ./loading.jl:569
 [8] include(::String) at ./sysimg.jl:14
 [9] include_from_node1(::String) at ./loading.jl:569
 [10] include(::String) at ./sysimg.jl:14
 [11] process_options(::Base.JLOptions) at ./client.jl:305
 [12] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/CVXOPT/test/test3.jl, in expression starting on line 5
WARNING: pyeval is deprecated.  Use py"x.size" instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.6/PyCall/src/pyeval.jl:58
 [3] (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 [4] cvxopt_to_julia(::PyCall.PyObject) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:227
 [5] #lp#3(::Array{Any,1}, ::Array{Any,1}, ::Dict{Any,Any}, ::Function, ::Array{Float64,1}, ::Array{Float64,2}, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:91
 [6] lp(::Array{Float64,1}, ::Array{Float64,2}, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:75
 [7] include_from_node1(::String) at ./loading.jl:569
 [8] include(::String) at ./sysimg.jl:14
 [9] include_from_node1(::String) at ./loading.jl:569
 [10] include(::String) at ./sysimg.jl:14
 [11] process_options(::Base.JLOptions) at ./client.jl:305
 [12] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/CVXOPT/test/test3.jl, in expression starting on line 5
WARNING: pyeval is deprecated.  Use py"list(x[:])" instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.6/PyCall/src/pyeval.jl:58
 [3] (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 [4] cvxopt_to_julia(::PyCall.PyObject) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:228
 [5] #lp#3(::Array{Any,1}, ::Array{Any,1}, ::Dict{Any,Any}, ::Function, ::Array{Float64,1}, ::Array{Float64,2}, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:91
 [6] lp(::Array{Float64,1}, ::Array{Float64,2}, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:75
 [7] include_from_node1(::String) at ./loading.jl:569
 [8] include(::String) at ./sysimg.jl:14
 [9] include_from_node1(::String) at ./loading.jl:569
 [10] include(::String) at ./sysimg.jl:14
 [11] process_options(::Base.JLOptions) at ./client.jl:305
 [12] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/CVXOPT/test/test3.jl, in expression starting on line 5
WARNING: pyeval is deprecated.  Use py"x.size" instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.6/PyCall/src/pyeval.jl:58
 [3] (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 [4] cvxopt_to_julia(::PyCall.PyObject) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:227
 [5] #socp#5(::Array{Any,1}, ::Array{Any,1}, ::Dict{Any,Any}, ::Function, ::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,1},Array{Float64,1}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:152
 [6] socp(::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,1},Array{Float64,1}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:130
 [7] include_from_node1(::String) at ./loading.jl:569
 [8] include(::String) at ./sysimg.jl:14
 [9] include_from_node1(::String) at ./loading.jl:569
 [10] include(::String) at ./sysimg.jl:14
 [11] process_options(::Base.JLOptions) at ./client.jl:305
 [12] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/CVXOPT/test/test4.jl, in expression starting on line 7
WARNING: pyeval is deprecated.  Use py"list(x[:])" instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.6/PyCall/src/pyeval.jl:58
 [3] (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 [4] cvxopt_to_julia(::PyCall.PyObject) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:228
 [5] #socp#5(::Array{Any,1}, ::Array{Any,1}, ::Dict{Any,Any}, ::Function, ::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,1},Array{Float64,1}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:152
 [6] socp(::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,1},Array{Float64,1}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:130
 [7] include_from_node1(::String) at ./loading.jl:569
 [8] include(::String) at ./sysimg.jl:14
 [9] include_from_node1(::String) at ./loading.jl:569
 [10] include(::String) at ./sysimg.jl:14
 [11] process_options(::Base.JLOptions) at ./client.jl:305
 [12] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/CVXOPT/test/test4.jl, in expression starting on line 7
WARNING: pyeval is deprecated.  Use py"x.size" instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.6/PyCall/src/pyeval.jl:58
 [3] (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 [4] cvxopt_to_julia(::PyCall.PyObject) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:227
 [5] #socp#5(::Array{Any,1}, ::Array{Any,1}, ::Dict{Any,Any}, ::Function, ::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,1},Array{Float64,1}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:153
 [6] socp(::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,1},Array{Float64,1}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:130
 [7] include_from_node1(::String) at ./loading.jl:569
 [8] include(::String) at ./sysimg.jl:14
 [9] include_from_node1(::String) at ./loading.jl:569
 [10] include(::String) at ./sysimg.jl:14
 [11] process_options(::Base.JLOptions) at ./client.jl:305
 [12] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/CVXOPT/test/test4.jl, in expression starting on line 7
WARNING: pyeval is deprecated.  Use py"list(x[:])" instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.6/PyCall/src/pyeval.jl:58
 [3] (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 [4] cvxopt_to_julia(::PyCall.PyObject) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:228
 [5] #socp#5(::Array{Any,1}, ::Array{Any,1}, ::Dict{Any,Any}, ::Function, ::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,1},Array{Float64,1}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:153
 [6] socp(::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,1},Array{Float64,1}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:130
 [7] include_from_node1(::String) at ./loading.jl:569
 [8] include(::String) at ./sysimg.jl:14
 [9] include_from_node1(::String) at ./loading.jl:569
 [10] include(::String) at ./sysimg.jl:14
 [11] process_options(::Base.JLOptions) at ./client.jl:305
 [12] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/CVXOPT/test/test4.jl, in expression starting on line 7
WARNING: pyeval is deprecated.  Use py"x.size" instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.6/PyCall/src/pyeval.jl:58
 [3] (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 [4] cvxopt_to_julia(::PyCall.PyObject) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:227
 [5] #socp#5(::Array{Any,1}, ::Array{Any,1}, ::Dict{Any,Any}, ::Function, ::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,1},Array{Float64,1}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:154
 [6] socp(::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,1},Array{Float64,1}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:130
 [7] include_from_node1(::String) at ./loading.jl:569
 [8] include(::String) at ./sysimg.jl:14
 [9] include_from_node1(::String) at ./loading.jl:569
 [10] include(::String) at ./sysimg.jl:14
 [11] process_options(::Base.JLOptions) at ./client.jl:305
 [12] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/CVXOPT/test/test4.jl, in expression starting on line 7
WARNING: pyeval is deprecated.  Use py"list(x[:])" instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.6/PyCall/src/pyeval.jl:58
 [3] (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 [4] cvxopt_to_julia(::PyCall.PyObject) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:228
 [5] #socp#5(::Array{Any,1}, ::Array{Any,1}, ::Dict{Any,Any}, ::Function, ::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,1},Array{Float64,1}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:154
 [6] socp(::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,1},Array{Float64,1}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:130
 [7] include_from_node1(::String) at ./loading.jl:569
 [8] include(::String) at ./sysimg.jl:14
 [9] include_from_node1(::String) at ./loading.jl:569
 [10] include(::String) at ./sysimg.jl:14
 [11] process_options(::Base.JLOptions) at ./client.jl:305
 [12] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/CVXOPT/test/test4.jl, in expression starting on line 7
WARNING: pyeval is deprecated.  Use py"x.size" instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.6/PyCall/src/pyeval.jl:58
 [3] (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 [4] cvxopt_to_julia(::PyCall.PyObject) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:227
 [5] #socp#5(::Array{Any,1}, ::Array{Any,1}, ::Dict{Any,Any}, ::Function, ::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,1},Array{Float64,1}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:155
 [6] socp(::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,1},Array{Float64,1}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:130
 [7] include_from_node1(::String) at ./loading.jl:569
 [8] include(::String) at ./sysimg.jl:14
 [9] include_from_node1(::String) at ./loading.jl:569
 [10] include(::String) at ./sysimg.jl:14
 [11] process_options(::Base.JLOptions) at ./client.jl:305
 [12] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/CVXOPT/test/test4.jl, in expression starting on line 7
WARNING: pyeval is deprecated.  Use py"list(x[:])" instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.6/PyCall/src/pyeval.jl:58
 [3] (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 [4] cvxopt_to_julia(::PyCall.PyObject) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:228
 [5] #socp#5(::Array{Any,1}, ::Array{Any,1}, ::Dict{Any,Any}, ::Function, ::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,1},Array{Float64,1}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:155
 [6] socp(::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,1},Array{Float64,1}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:130
 [7] include_from_node1(::String) at ./loading.jl:569
 [8] include(::String) at ./sysimg.jl:14
 [9] include_from_node1(::String) at ./loading.jl:569
 [10] include(::String) at ./sysimg.jl:14
 [11] process_options(::Base.JLOptions) at ./client.jl:305
 [12] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/CVXOPT/test/test4.jl, in expression starting on line 7
WARNING: pyeval is deprecated.  Use py"x.size" instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.6/PyCall/src/pyeval.jl:58
 [3] (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 [4] cvxopt_to_julia(::PyCall.PyObject) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:227
 [5] #socp#5(::Array{Any,1}, ::Array{Any,1}, ::Dict{Any,Any}, ::Function, ::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,1},Array{Float64,1}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:157
 [6] socp(::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,1},Array{Float64,1}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:130
 [7] include_from_node1(::String) at ./loading.jl:569
 [8] include(::String) at ./sysimg.jl:14
 [9] include_from_node1(::String) at ./loading.jl:569
 [10] include(::String) at ./sysimg.jl:14
 [11] process_options(::Base.JLOptions) at ./client.jl:305
 [12] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/CVXOPT/test/test4.jl, in expression starting on line 7
WARNING: pyeval is deprecated.  Use py"list(x[:])" instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.6/PyCall/src/pyeval.jl:58
 [3] (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 [4] cvxopt_to_julia(::PyCall.PyObject) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:228
 [5] #socp#5(::Array{Any,1}, ::Array{Any,1}, ::Dict{Any,Any}, ::Function, ::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,1},Array{Float64,1}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:157
 [6] socp(::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,1},Array{Float64,1}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:130
 [7] include_from_node1(::String) at ./loading.jl:569
 [8] include(::String) at ./sysimg.jl:14
 [9] include_from_node1(::String) at ./loading.jl:569
 [10] include(::String) at ./sysimg.jl:14
 [11] process_options(::Base.JLOptions) at ./client.jl:305
 [12] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/CVXOPT/test/test4.jl, in expression starting on line 7
WARNING: pyeval is deprecated.  Use py"x.size" instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.6/PyCall/src/pyeval.jl:58
 [3] (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 [4] cvxopt_to_julia(::PyCall.PyObject) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:227
 [5] #socp#5(::Array{Any,1}, ::Array{Any,1}, ::Dict{Any,Any}, ::Function, ::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,1},Array{Float64,1}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:158
 [6] socp(::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,1},Array{Float64,1}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:130
 [7] include_from_node1(::String) at ./loading.jl:569
 [8] include(::String) at ./sysimg.jl:14
 [9] include_from_node1(::String) at ./loading.jl:569
 [10] include(::String) at ./sysimg.jl:14
 [11] process_options(::Base.JLOptions) at ./client.jl:305
 [12] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/CVXOPT/test/test4.jl, in expression starting on line 7
WARNING: pyeval is deprecated.  Use py"list(x[:])" instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.6/PyCall/src/pyeval.jl:58
 [3] (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 [4] cvxopt_to_julia(::PyCall.PyObject) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:228
 [5] #socp#5(::Array{Any,1}, ::Array{Any,1}, ::Dict{Any,Any}, ::Function, ::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,1},Array{Float64,1}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:158
 [6] socp(::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,1},Array{Float64,1}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:130
 [7] include_from_node1(::String) at ./loading.jl:569
 [8] include(::String) at ./sysimg.jl:14
 [9] include_from_node1(::String) at ./loading.jl:569
 [10] include(::String) at ./sysimg.jl:14
 [11] process_options(::Base.JLOptions) at ./client.jl:305
 [12] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/CVXOPT/test/test4.jl, in expression starting on line 7
WARNING: pyeval is deprecated.  Use py"x.size" instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.6/PyCall/src/pyeval.jl:58
 [3] (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 [4] cvxopt_to_julia(::PyCall.PyObject) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:227
 [5] #socp#5(::Array{Any,1}, ::Array{Any,1}, ::Dict{Any,Any}, ::Function, ::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,1},Array{Float64,1}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:157
 [6] socp(::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,1},Array{Float64,1}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:130
 [7] include_from_node1(::String) at ./loading.jl:569
 [8] include(::String) at ./sysimg.jl:14
 [9] include_from_node1(::String) at ./loading.jl:569
 [10] include(::String) at ./sysimg.jl:14
 [11] process_options(::Base.JLOptions) at ./client.jl:305
 [12] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/CVXOPT/test/test4.jl, in expression starting on line 7
WARNING: pyeval is deprecated.  Use py"list(x[:])" instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.6/PyCall/src/pyeval.jl:58
 [3] (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 [4] cvxopt_to_julia(::PyCall.PyObject) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:228
 [5] #socp#5(::Array{Any,1}, ::Array{Any,1}, ::Dict{Any,Any}, ::Function, ::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,1},Array{Float64,1}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:157
 [6] socp(::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,1},Array{Float64,1}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:130
 [7] include_from_node1(::String) at ./loading.jl:569
 [8] include(::String) at ./sysimg.jl:14
 [9] include_from_node1(::String) at ./loading.jl:569
 [10] include(::String) at ./sysimg.jl:14
 [11] process_options(::Base.JLOptions) at ./client.jl:305
 [12] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/CVXOPT/test/test4.jl, in expression starting on line 7
WARNING: pyeval is deprecated.  Use py"x.size" instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.6/PyCall/src/pyeval.jl:58
 [3] (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 [4] cvxopt_to_julia(::PyCall.PyObject) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:227
 [5] #socp#5(::Array{Any,1}, ::Array{Any,1}, ::Dict{Any,Any}, ::Function, ::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,1},Array{Float64,1}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:158
 [6] socp(::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,1},Array{Float64,1}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:130
 [7] include_from_node1(::String) at ./loading.jl:569
 [8] include(::String) at ./sysimg.jl:14
 [9] include_from_node1(::String) at ./loading.jl:569
 [10] include(::String) at ./sysimg.jl:14
 [11] process_options(::Base.JLOptions) at ./client.jl:305
 [12] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/CVXOPT/test/test4.jl, in expression starting on line 7
WARNING: pyeval is deprecated.  Use py"list(x[:])" instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.6/PyCall/src/pyeval.jl:58
 [3] (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 [4] cvxopt_to_julia(::PyCall.PyObject) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:228
 [5] #socp#5(::Array{Any,1}, ::Array{Any,1}, ::Dict{Any,Any}, ::Function, ::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,1},Array{Float64,1}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:158
 [6] socp(::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,1},Array{Float64,1}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:130
 [7] include_from_node1(::String) at ./loading.jl:569
 [8] include(::String) at ./sysimg.jl:14
 [9] include_from_node1(::String) at ./loading.jl:569
 [10] include(::String) at ./sysimg.jl:14
 [11] process_options(::Base.JLOptions) at ./client.jl:305
 [12] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/CVXOPT/test/test4.jl, in expression starting on line 7
WARNING: pyeval is deprecated.  Use py"x.size" instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.6/PyCall/src/pyeval.jl:58
 [3] (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 [4] cvxopt_to_julia(::PyCall.PyObject) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:227
 [5] #sdp#6(::Array{Any,1}, ::Array{Any,1}, ::Dict{Any,Any}, ::Function, ::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,2},Array{Float64,2}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:193
 [6] sdp(::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,2},Array{Float64,2}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:171
 [7] include_from_node1(::String) at ./loading.jl:569
 [8] include(::String) at ./sysimg.jl:14
 [9] include_from_node1(::String) at ./loading.jl:569
 [10] include(::String) at ./sysimg.jl:14
 [11] process_options(::Base.JLOptions) at ./client.jl:305
 [12] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/CVXOPT/test/test5.jl, in expression starting on line 11
WARNING: pyeval is deprecated.  Use py"list(x[:])" instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.6/PyCall/src/pyeval.jl:58
 [3] (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 [4] cvxopt_to_julia(::PyCall.PyObject) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:228
 [5] #sdp#6(::Array{Any,1}, ::Array{Any,1}, ::Dict{Any,Any}, ::Function, ::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,2},Array{Float64,2}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:193
 [6] sdp(::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,2},Array{Float64,2}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:171
 [7] include_from_node1(::String) at ./loading.jl:569
 [8] include(::String) at ./sysimg.jl:14
 [9] include_from_node1(::String) at ./loading.jl:569
 [10] include(::String) at ./sysimg.jl:14
 [11] process_options(::Base.JLOptions) at ./client.jl:305
 [12] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/CVXOPT/test/test5.jl, in expression starting on line 11
WARNING: pyeval is deprecated.  Use py"x.size" instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.6/PyCall/src/pyeval.jl:58
 [3] (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 [4] cvxopt_to_julia(::PyCall.PyObject) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:227
 [5] #sdp#6(::Array{Any,1}, ::Array{Any,1}, ::Dict{Any,Any}, ::Function, ::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,2},Array{Float64,2}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:194
 [6] sdp(::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,2},Array{Float64,2}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:171
 [7] include_from_node1(::String) at ./loading.jl:569
 [8] include(::String) at ./sysimg.jl:14
 [9] include_from_node1(::String) at ./loading.jl:569
 [10] include(::String) at ./sysimg.jl:14
 [11] process_options(::Base.JLOptions) at ./client.jl:305
 [12] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/CVXOPT/test/test5.jl, in expression starting on line 11
WARNING: pyeval is deprecated.  Use py"list(x[:])" instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.6/PyCall/src/pyeval.jl:58
 [3] (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 [4] cvxopt_to_julia(::PyCall.PyObject) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:228
 [5] #sdp#6(::Array{Any,1}, ::Array{Any,1}, ::Dict{Any,Any}, ::Function, ::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,2},Array{Float64,2}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:194
 [6] sdp(::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,2},Array{Float64,2}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:171
 [7] include_from_node1(::String) at ./loading.jl:569
 [8] include(::String) at ./sysimg.jl:14
 [9] include_from_node1(::String) at ./loading.jl:569
 [10] include(::String) at ./sysimg.jl:14
 [11] process_options(::Base.JLOptions) at ./client.jl:305
 [12] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/CVXOPT/test/test5.jl, in expression starting on line 11
WARNING: pyeval is deprecated.  Use py"x.size" instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.6/PyCall/src/pyeval.jl:58
 [3] (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 [4] cvxopt_to_julia(::PyCall.PyObject) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:227
 [5] #sdp#6(::Array{Any,1}, ::Array{Any,1}, ::Dict{Any,Any}, ::Function, ::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,2},Array{Float64,2}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:195
 [6] sdp(::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,2},Array{Float64,2}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:171
 [7] include_from_node1(::String) at ./loading.jl:569
 [8] include(::String) at ./sysimg.jl:14
 [9] include_from_node1(::String) at ./loading.jl:569
 [10] include(::String) at ./sysimg.jl:14
 [11] process_options(::Base.JLOptions) at ./client.jl:305
 [12] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/CVXOPT/test/test5.jl, in expression starting on line 11
WARNING: pyeval is deprecated.  Use py"list(x[:])" instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.6/PyCall/src/pyeval.jl:58
 [3] (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 [4] cvxopt_to_julia(::PyCall.PyObject) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:228
 [5] #sdp#6(::Array{Any,1}, ::Array{Any,1}, ::Dict{Any,Any}, ::Function, ::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,2},Array{Float64,2}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:195
 [6] sdp(::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,2},Array{Float64,2}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:171
 [7] include_from_node1(::String) at ./loading.jl:569
 [8] include(::String) at ./sysimg.jl:14
 [9] include_from_node1(::String) at ./loading.jl:569
 [10] include(::String) at ./sysimg.jl:14
 [11] process_options(::Base.JLOptions) at ./client.jl:305
 [12] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/CVXOPT/test/test5.jl, in expression starting on line 11
WARNING: pyeval is deprecated.  Use py"x.size" instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.6/PyCall/src/pyeval.jl:58
 [3] (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 [4] cvxopt_to_julia(::PyCall.PyObject) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:227
 [5] #sdp#6(::Array{Any,1}, ::Array{Any,1}, ::Dict{Any,Any}, ::Function, ::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,2},Array{Float64,2}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:196
 [6] sdp(::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,2},Array{Float64,2}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:171
 [7] include_from_node1(::String) at ./loading.jl:569
 [8] include(::String) at ./sysimg.jl:14
 [9] include_from_node1(::String) at ./loading.jl:569
 [10] include(::String) at ./sysimg.jl:14
 [11] process_options(::Base.JLOptions) at ./client.jl:305
 [12] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/CVXOPT/test/test5.jl, in expression starting on line 11
WARNING: pyeval is deprecated.  Use py"list(x[:])" instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.6/PyCall/src/pyeval.jl:58
 [3] (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 [4] cvxopt_to_julia(::PyCall.PyObject) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:228
 [5] #sdp#6(::Array{Any,1}, ::Array{Any,1}, ::Dict{Any,Any}, ::Function, ::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,2},Array{Float64,2}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:196
 [6] sdp(::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,2},Array{Float64,2}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:171
 [7] include_from_node1(::String) at ./loading.jl:569
 [8] include(::String) at ./sysimg.jl:14
 [9] include_from_node1(::String) at ./loading.jl:569
 [10] include(::String) at ./sysimg.jl:14
 [11] process_options(::Base.JLOptions) at ./client.jl:305
 [12] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/CVXOPT/test/test5.jl, in expression starting on line 11
WARNING: pyeval is deprecated.  Use py"x.size" instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.6/PyCall/src/pyeval.jl:58
 [3] (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 [4] cvxopt_to_julia(::PyCall.PyObject) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:227
 [5] #sdp#6(::Array{Any,1}, ::Array{Any,1}, ::Dict{Any,Any}, ::Function, ::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,2},Array{Float64,2}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:198
 [6] sdp(::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,2},Array{Float64,2}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:171
 [7] include_from_node1(::String) at ./loading.jl:569
 [8] include(::String) at ./sysimg.jl:14
 [9] include_from_node1(::String) at ./loading.jl:569
 [10] include(::String) at ./sysimg.jl:14
 [11] process_options(::Base.JLOptions) at ./client.jl:305
 [12] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/CVXOPT/test/test5.jl, in expression starting on line 11
WARNING: pyeval is deprecated.  Use py"list(x[:])" instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.6/PyCall/src/pyeval.jl:58
 [3] (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 [4] cvxopt_to_julia(::PyCall.PyObject) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:228
 [5] #sdp#6(::Array{Any,1}, ::Array{Any,1}, ::Dict{Any,Any}, ::Function, ::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,2},Array{Float64,2}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:198
 [6] sdp(::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,2},Array{Float64,2}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:171
 [7] include_from_node1(::String) at ./loading.jl:569
 [8] include(::String) at ./sysimg.jl:14
 [9] include_from_node1(::String) at ./loading.jl:569
 [10] include(::String) at ./sysimg.jl:14
 [11] process_options(::Base.JLOptions) at ./client.jl:305
 [12] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/CVXOPT/test/test5.jl, in expression starting on line 11
WARNING: pyeval is deprecated.  Use py"x.size" instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.6/PyCall/src/pyeval.jl:58
 [3] (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 [4] cvxopt_to_julia(::PyCall.PyObject) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:227
 [5] #sdp#6(::Array{Any,1}, ::Array{Any,1}, ::Dict{Any,Any}, ::Function, ::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,2},Array{Float64,2}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:199
 [6] sdp(::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,2},Array{Float64,2}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:171
 [7] include_from_node1(::String) at ./loading.jl:569
 [8] include(::String) at ./sysimg.jl:14
 [9] include_from_node1(::String) at ./loading.jl:569
 [10] include(::String) at ./sysimg.jl:14
 [11] process_options(::Base.JLOptions) at ./client.jl:305
 [12] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/CVXOPT/test/test5.jl, in expression starting on line 11
WARNING: pyeval is deprecated.  Use py"list(x[:])" instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.6/PyCall/src/pyeval.jl:58
 [3] (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 [4] cvxopt_to_julia(::PyCall.PyObject) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:228
 [5] #sdp#6(::Array{Any,1}, ::Array{Any,1}, ::Dict{Any,Any}, ::Function, ::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,2},Array{Float64,2}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:199
 [6] sdp(::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,2},Array{Float64,2}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:171
 [7] include_from_node1(::String) at ./loading.jl:569
 [8] include(::String) at ./sysimg.jl:14
 [9] include_from_node1(::String) at ./loading.jl:569
 [10] include(::String) at ./sysimg.jl:14
 [11] process_options(::Base.JLOptions) at ./client.jl:305
 [12] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/CVXOPT/test/test5.jl, in expression starting on line 11
WARNING: pyeval is deprecated.  Use py"x.size" instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.6/PyCall/src/pyeval.jl:58
 [3] (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 [4] cvxopt_to_julia(::PyCall.PyObject) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:227
 [5] #sdp#6(::Array{Any,1}, ::Array{Any,1}, ::Dict{Any,Any}, ::Function, ::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,2},Array{Float64,2}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:198
 [6] sdp(::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,2},Array{Float64,2}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:171
 [7] include_from_node1(::String) at ./loading.jl:569
 [8] include(::String) at ./sysimg.jl:14
 [9] include_from_node1(::String) at ./loading.jl:569
 [10] include(::String) at ./sysimg.jl:14
 [11] process_options(::Base.JLOptions) at ./client.jl:305
 [12] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/CVXOPT/test/test5.jl, in expression starting on line 11
WARNING: pyeval is deprecated.  Use py"list(x[:])" instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.6/PyCall/src/pyeval.jl:58
 [3] (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 [4] cvxopt_to_julia(::PyCall.PyObject) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:228
 [5] #sdp#6(::Array{Any,1}, ::Array{Any,1}, ::Dict{Any,Any}, ::Function, ::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,2},Array{Float64,2}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:198
 [6] sdp(::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,2},Array{Float64,2}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:171
 [7] include_from_node1(::String) at ./loading.jl:569
 [8] include(::String) at ./sysimg.jl:14
 [9] include_from_node1(::String) at ./loading.jl:569
 [10] include(::String) at ./sysimg.jl:14
 [11] process_options(::Base.JLOptions) at ./client.jl:305
 [12] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/CVXOPT/test/test5.jl, in expression starting on line 11
WARNING: pyeval is deprecated.  Use py"x.size" instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.6/PyCall/src/pyeval.jl:58
 [3] (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 [4] cvxopt_to_julia(::PyCall.PyObject) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:227
 [5] #sdp#6(::Array{Any,1}, ::Array{Any,1}, ::Dict{Any,Any}, ::Function, ::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,2},Array{Float64,2}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:199
 [6] sdp(::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,2},Array{Float64,2}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:171
 [7] include_from_node1(::String) at ./loading.jl:569
 [8] include(::String) at ./sysimg.jl:14
 [9] include_from_node1(::String) at ./loading.jl:569
 [10] include(::String) at ./sysimg.jl:14
 [11] process_options(::Base.JLOptions) at ./client.jl:305
 [12] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/CVXOPT/test/test5.jl, in expression starting on line 11
WARNING: pyeval is deprecated.  Use py"list(x[:])" instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.6/PyCall/src/pyeval.jl:58
 [3] (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 [4] cvxopt_to_julia(::PyCall.PyObject) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:228
 [5] #sdp#6(::Array{Any,1}, ::Array{Any,1}, ::Dict{Any,Any}, ::Function, ::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,2},Array{Float64,2}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:199
 [6] sdp(::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,2},Array{Float64,2}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:171
 [7] include_from_node1(::String) at ./loading.jl:569
 [8] include(::String) at ./sysimg.jl:14
 [9] include_from_node1(::String) at ./loading.jl:569
 [10] include(::String) at ./sysimg.jl:14
 [11] process_options(::Base.JLOptions) at ./client.jl:305
 [12] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/CVXOPT/test/test5.jl, in expression starting on line 11
     pcost       dcost       gap    pres   dres   k/t
 0:  1.1431e+00 -2.3216e+02  5e+02  7e-01  8e+00  1e+00
 1:  3.2291e+00 -7.6284e+01  1e+02  2e-01  3e+00  2e+00
 2: -5.4057e+00 -7.5497e+01  1e+02  2e-01  2e+00  6e+00
 3: -8.2526e+00 -5.0576e+01  7e+01  1e-01  1e+00  4e+00
 4:  3.6383e+00 -4.2856e+01  9e+01  1e-01  2e+00  6e+00
 5: -5.8339e+00 -2.2605e+01  4e+01  6e-02  7e-01  4e+00
 6: -3.0169e+00 -1.5737e+01  2e+01  4e-02  5e-01  2e+00
 7: -9.4177e+00 -1.6446e+01  1e+01  2e-02  3e-01  1e+00
 8: -1.0564e+01 -1.1543e+01  2e+00  3e-03  4e-02  2e-01
 9: -1.0930e+01 -1.1021e+01  2e-01  3e-04  4e-03  2e-02
10: -1.0948e+01 -1.0952e+01  8e-03  1e-05  2e-04  8e-04
11: -1.0949e+01 -1.0949e+01  1e-04  2e-07  3e-06  1e-05
12: -1.0949e+01 -1.0949e+01  1e-06  3e-09  3e-08  2e-07
Optimal solution found.
     pcost       dcost       gap    pres   dres
 0: -1.0721e+00 -4.3040e+00  3e+00  0e+00  2e+00
 1: -1.2240e+00 -1.5212e+00  3e-01  2e-15  2e-01
 2: -1.4283e+00 -1.5409e+00  1e-01  3e-16  5e-02
 3: -1.4300e+00 -1.4312e+00  1e-03  3e-15  5e-04
 4: -1.4300e+00 -1.4300e+00  1e-05  6e-15  5e-06
 5: -1.4300e+00 -1.4300e+00  1e-07  1e-13  5e-08
Optimal solution found.
     pcost       dcost       gap    pres   dres   k/t
 0: -8.1000e+00 -1.8300e+01  4e+00  0e+00  8e-01  1e+00
 1: -8.8055e+00 -9.4357e+00  2e-01  4e-16  4e-02  3e-02
 2: -8.9981e+00 -9.0049e+00  2e-03  2e-16  5e-04  4e-04
 3: -9.0000e+00 -9.0000e+00  2e-05  6e-16  5e-06  4e-06
 4: -9.0000e+00 -9.0000e+00  2e-07  1e-16  5e-08  4e-08
Optimal solution found.
     pcost       dcost       gap    pres   dres   k/t
 0:  4.9969e+00 -1.7285e+01  6e+01  3e-01  4e+00  1e+00
 1: -1.6732e+00 -7.0431e+00  1e+01  7e-02  1e+00  6e-01
 2: -1.6221e+01 -3.5417e+01  2e+02  3e-01  5e+00  7e+00
 3: -2.1832e+01 -2.2849e+01  3e+01  4e-02  6e-01  2e+00
 4: -3.5265e+01 -3.5594e+01  1e+01  1e-02  2e-01  9e-01
 5: -3.8303e+01 -3.8314e+01  3e-01  4e-04  6e-03  2e-02
 6: -3.8342e+01 -3.8342e+01  1e-02  1e-05  2e-04  7e-04
 7: -3.8346e+01 -3.8346e+01  9e-04  1e-06  2e-05  7e-05
 8: -3.8346e+01 -3.8346e+01  4e-05  6e-08  9e-07  4e-06
 9: -3.8346e+01 -3.8346e+01  2e-06  3e-09  4e-08  2e-07
Optimal solution found.
     pcost       dcost       gap    pres   dres   k/t
 0: -1.2037e+00 -1.8539e+02  2e+02  2e-16  8e+00  1e+00
 1: -1.2937e+00 -6.8551e+00  5e+00  5e-16  3e-01  3e-02
 2: -2.8964e+00 -3.7331e+00  7e-01  9e-16  4e-02  5e-02
 3: -3.0150e+00 -3.2556e+00  2e-01  7e-16  1e-02  2e-02
 4: -3.1389e+00 -3.1932e+00  5e-02  4e-16  3e-03  5e-03
 5: -3.1533e+00 -3.1547e+00  1e-03  2e-15  7e-05  1e-04
 6: -3.1535e+00 -3.1536e+00  5e-05  8e-16  3e-06  6e-06
 7: -3.1535e+00 -3.1535e+00  1e-06  6e-16  7e-08  2e-07
Optimal solution found.
INFO: CVXOPT tests passed

>>> End of log
