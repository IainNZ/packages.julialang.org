>>> 'Pkg.add("CVXOPT")' log
INFO: Cloning cache of CVXOPT from https://github.com/cvxopt/CVXOPT.jl.git
INFO: Installing BinDeps v0.6.0
INFO: Installing CVXOPT v0.1.0
INFO: Installing Conda v0.7.0
INFO: Installing MacroTools v0.3.7
INFO: Installing PyCall v1.14.0
INFO: Installing SHA v0.5.1
INFO: Installing URIParser v0.2.0
INFO: Building Conda
INFO: Building PyCall
INFO: Using the Python distribution in the Conda package by default.
To use a different Python version, set ENV["PYTHON"]="pythoncommand" and re-run Pkg.build("PyCall").
INFO: PyCall is using /home/vagrant/.julia/v0.6/Conda/deps/usr/bin/python (Python 2.7.13) at /home/vagrant/.julia/v0.6/Conda/deps/usr/bin/python, libpython = /home/vagrant/.julia/v0.6/Conda/deps/usr/lib/libpython2.7
INFO: /home/vagrant/.julia/v0.6/PyCall/deps/deps.jl has not changed
INFO: /home/vagrant/.julia/v0.6/PyCall/deps/PYTHON has not changed
INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of CVXOPT
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("CVXOPT")' log
Julia Version 0.6.0
Commit 9036443 (2017-06-19 13:05 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-128-generic #177-Ubuntu SMP Tue Aug 8 11:40:23 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (745.98828125 MB free)
Uptime: 40552.0 sec
Load Avg:  0.88037109375  0.9345703125  1.12939453125
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz    2392361 s       2789 s     118903 s     987348 s         56 s
#2  3499 MHz     752748 s       3865 s      63797 s    3140244 s          1 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.6
2 required packages:
 - CVXOPT                        0.1.0
 - JSON                          0.13.0
7 additional packages:
 - BinDeps                       0.6.0
 - Compat                        0.30.0
 - Conda                         0.7.0
 - MacroTools                    0.3.7
 - PyCall                        1.14.0
 - SHA                           0.5.1
 - URIParser                     0.2.0
INFO: Testing CVXOPT
INFO: Installing cvxopt via the Conda cvxopt package...
Warning: 'conda-forge' already in 'channels' list, moving to the top
Fetching package metadata ...........
Solving package specifications: .

Package plan for installation in environment /home/vagrant/.julia/v0.6/Conda/deps/usr:

The following NEW packages will be INSTALLED:

    cvxopt:      1.1.9-py27_blas_openblas_200 conda-forge [blas_openblas]
    fftw:        3.3.6-3                      conda-forge
    glpk:        4.61-0                       conda-forge
    gmp:         6.1.2-0                      conda-forge
    gsl:         2.2.1-blas_openblas_2        conda-forge [blas_openblas]
    metis:       5.1.0-3                      conda-forge
    suitesparse: 4.5.4-blas_openblas_200      conda-forge [blas_openblas]
    tbb:         2017_20170604-1              conda-forge

fftw-3.3.6-3.t   0% |                              | ETA:  --:--:--   0.00  B/sfftw-3.3.6-3.t   1% |                               | ETA:  0:00:03   1.23 MB/sfftw-3.3.6-3.t   2% |                               | ETA:  0:00:02   1.47 MB/sfftw-3.3.6-3.t   3% |#                              | ETA:  0:00:02   1.84 MB/sfftw-3.3.6-3.t   4% |#                              | ETA:  0:00:01   2.10 MB/sfftw-3.3.6-3.t   6% |#                              | ETA:  0:00:01   2.29 MB/sfftw-3.3.6-3.t   7% |##                             | ETA:  0:00:01   2.45 MB/sfftw-3.3.6-3.t   8% |##                             | ETA:  0:00:01   2.59 MB/sfftw-3.3.6-3.t   9% |###                            | ETA:  0:00:01   2.92 MB/sfftw-3.3.6-3.t  11% |###                            | ETA:  0:00:01   3.00 MB/sfftw-3.3.6-3.t  12% |###                            | ETA:  0:00:01   3.02 MB/sfftw-3.3.6-3.t  13% |####                           | ETA:  0:00:01   3.30 MB/sfftw-3.3.6-3.t  14% |####                           | ETA:  0:00:00   3.58 MB/sfftw-3.3.6-3.t  16% |#####                          | ETA:  0:00:00   3.67 MB/sfftw-3.3.6-3.t  17% |#####                          | ETA:  0:00:00   3.89 MB/sfftw-3.3.6-3.t  18% |#####                          | ETA:  0:00:00   3.88 MB/sfftw-3.3.6-3.t  19% |######                         | ETA:  0:00:00   4.11 MB/sfftw-3.3.6-3.t  21% |######                         | ETA:  0:00:00   4.18 MB/sfftw-3.3.6-3.t  22% |######                         | ETA:  0:00:00   4.40 MB/sfftw-3.3.6-3.t  23% |#######                        | ETA:  0:00:00   4.59 MB/sfftw-3.3.6-3.t  24% |#######                        | ETA:  0:00:00   4.61 MB/sfftw-3.3.6-3.t  26% |########                       | ETA:  0:00:00   4.81 MB/sfftw-3.3.6-3.t  27% |########                       | ETA:  0:00:00   4.99 MB/sfftw-3.3.6-3.t  28% |########                       | ETA:  0:00:00   5.19 MB/sfftw-3.3.6-3.t  29% |#########                      | ETA:  0:00:00   5.18 MB/sfftw-3.3.6-3.t  31% |#########                      | ETA:  0:00:00   5.38 MB/sfftw-3.3.6-3.t  32% |##########                     | ETA:  0:00:00   5.53 MB/sfftw-3.3.6-3.t  33% |##########                     | ETA:  0:00:00   5.72 MB/sfftw-3.3.6-3.t  34% |##########                     | ETA:  0:00:00   5.33 MB/sfftw-3.3.6-3.t  36% |###########                    | ETA:  0:00:00   5.48 MB/sfftw-3.3.6-3.t  37% |###########                    | ETA:  0:00:00   5.64 MB/sfftw-3.3.6-3.t  38% |###########                    | ETA:  0:00:00   5.81 MB/sfftw-3.3.6-3.t  39% |############                   | ETA:  0:00:00   5.97 MB/sfftw-3.3.6-3.t  40% |############                   | ETA:  0:00:00   6.13 MB/sfftw-3.3.6-3.t  42% |#############                  | ETA:  0:00:00   6.28 MB/sfftw-3.3.6-3.t  43% |#############                  | ETA:  0:00:00   6.45 MB/sfftw-3.3.6-3.t  44% |#############                  | ETA:  0:00:00   6.60 MB/sfftw-3.3.6-3.t  45% |##############                 | ETA:  0:00:00   6.71 MB/sfftw-3.3.6-3.t  47% |##############                 | ETA:  0:00:00   6.87 MB/sfftw-3.3.6-3.t  48% |###############                | ETA:  0:00:00   7.03 MB/sfftw-3.3.6-3.t  49% |###############                | ETA:  0:00:00   7.19 MB/sfftw-3.3.6-3.t  50% |###############                | ETA:  0:00:00   7.35 MB/sfftw-3.3.6-3.t  52% |################               | ETA:  0:00:00   7.51 MB/sfftw-3.3.6-3.t  53% |################               | ETA:  0:00:00   7.43 MB/sfftw-3.3.6-3.t  54% |################               | ETA:  0:00:00   7.56 MB/sfftw-3.3.6-3.t  55% |#################              | ETA:  0:00:00   7.70 MB/sfftw-3.3.6-3.t  57% |#################              | ETA:  0:00:00   7.85 MB/sfftw-3.3.6-3.t  58% |##################             | ETA:  0:00:00   7.99 MB/sfftw-3.3.6-3.t  59% |##################             | ETA:  0:00:00   8.13 MB/sfftw-3.3.6-3.t  60% |##################             | ETA:  0:00:00   8.15 MB/sfftw-3.3.6-3.t  62% |###################            | ETA:  0:00:00   8.25 MB/sfftw-3.3.6-3.t  63% |###################            | ETA:  0:00:00   8.38 MB/sfftw-3.3.6-3.t  64% |####################           | ETA:  0:00:00   8.52 MB/sfftw-3.3.6-3.t  65% |####################           | ETA:  0:00:00   8.65 MB/sfftw-3.3.6-3.t  67% |####################           | ETA:  0:00:00   8.77 MB/sfftw-3.3.6-3.t  68% |#####################          | ETA:  0:00:00   8.90 MB/sfftw-3.3.6-3.t  69% |#####################          | ETA:  0:00:00   8.84 MB/sfftw-3.3.6-3.t  70% |#####################          | ETA:  0:00:00   8.97 MB/sfftw-3.3.6-3.t  72% |######################         | ETA:  0:00:00   9.10 MB/sfftw-3.3.6-3.t  73% |######################         | ETA:  0:00:00   9.22 MB/sfftw-3.3.6-3.t  74% |#######################        | ETA:  0:00:00   9.35 MB/sfftw-3.3.6-3.t  75% |#######################        | ETA:  0:00:00   9.48 MB/sfftw-3.3.6-3.t  76% |#######################        | ETA:  0:00:00   9.61 MB/sfftw-3.3.6-3.t  78% |########################       | ETA:  0:00:00   9.62 MB/sfftw-3.3.6-3.t  79% |########################       | ETA:  0:00:00   9.65 MB/sfftw-3.3.6-3.t  80% |#########################      | ETA:  0:00:00   9.77 MB/sfftw-3.3.6-3.t  81% |#########################      | ETA:  0:00:00   9.89 MB/sfftw-3.3.6-3.t  83% |#########################      | ETA:  0:00:00  10.01 MB/sfftw-3.3.6-3.t  84% |##########################     | ETA:  0:00:00  10.13 MB/sfftw-3.3.6-3.t  85% |##########################     | ETA:  0:00:00  10.26 MB/sfftw-3.3.6-3.t  86% |##########################     | ETA:  0:00:00  10.37 MB/sfftw-3.3.6-3.t  88% |###########################    | ETA:  0:00:00  10.41 MB/sfftw-3.3.6-3.t  89% |###########################    | ETA:  0:00:00  10.43 MB/sfftw-3.3.6-3.t  90% |############################   | ETA:  0:00:00  10.55 MB/sfftw-3.3.6-3.t  91% |############################   | ETA:  0:00:00  10.66 MB/sfftw-3.3.6-3.t  93% |############################   | ETA:  0:00:00  10.78 MB/sfftw-3.3.6-3.t  94% |#############################  | ETA:  0:00:00  10.89 MB/sfftw-3.3.6-3.t  95% |#############################  | ETA:  0:00:00  11.00 MB/sfftw-3.3.6-3.t  96% |############################## | ETA:  0:00:00  11.10 MB/sfftw-3.3.6-3.t  98% |############################## | ETA:  0:00:00  11.21 MB/sfftw-3.3.6-3.t  99% |############################## | ETA:  0:00:00  11.28 MB/sfftw-3.3.6-3.t 100% |###############################| Time: 0:00:00  11.32 MB/s
metis-5.1.0-3.   0% |                              | ETA:  --:--:--   0.00  B/smetis-5.1.0-3.   6% |##                             | Time: 0:00:00  12.85 MB/smetis-5.1.0-3.  13% |####                           | Time: 0:00:00  18.17 MB/smetis-5.1.0-3.  19% |######                         | Time: 0:00:00  21.40 MB/smetis-5.1.0-3.  26% |########                       | Time: 0:00:00  23.70 MB/smetis-5.1.0-3.  32% |##########                     | Time: 0:00:00  25.71 MB/smetis-5.1.0-3.  39% |############                   | Time: 0:00:00  27.50 MB/smetis-5.1.0-3.  45% |##############                 | Time: 0:00:00  28.94 MB/smetis-5.1.0-3.  52% |################               | Time: 0:00:00  30.19 MB/smetis-5.1.0-3.  58% |##################             | Time: 0:00:00  30.64 MB/smetis-5.1.0-3.  65% |####################           | Time: 0:00:00  31.80 MB/smetis-5.1.0-3.  72% |######################         | Time: 0:00:00  32.87 MB/smetis-5.1.0-3.  78% |########################       | Time: 0:00:00  16.69 MB/smetis-5.1.0-3.  85% |##########################     | Time: 0:00:00  17.03 MB/smetis-5.1.0-3.  91% |############################   | Time: 0:00:00  17.66 MB/smetis-5.1.0-3.  98% |############################## | Time: 0:00:00  18.24 MB/smetis-5.1.0-3. 100% |###############################| Time: 0:00:00  18.19 MB/smetis-5.1.0-3. 100% |###############################| Time: 0:00:00  17.89 MB/s
tbb-2017_20170   0% |                              | ETA:  --:--:--   0.00  B/stbb-2017_20170   1% |                               | Time: 0:00:00  25.57 MB/stbb-2017_20170   2% |                               | Time: 0:00:00  32.16 MB/stbb-2017_20170   3% |#                              | Time: 0:00:00  36.04 MB/stbb-2017_20170   5% |#                              | Time: 0:00:00  38.35 MB/stbb-2017_20170   6% |#                              | Time: 0:00:00  39.98 MB/stbb-2017_20170   7% |##                             | Time: 0:00:00   7.76 MB/stbb-2017_20170   8% |##                             | Time: 0:00:00   8.61 MB/stbb-2017_20170  10% |###                            | Time: 0:00:00   9.59 MB/stbb-2017_20170  11% |###                            | Time: 0:00:00  10.54 MB/stbb-2017_20170  12% |###                            | Time: 0:00:00  11.43 MB/stbb-2017_20170  13% |####                           | Time: 0:00:00  12.27 MB/stbb-2017_20170  15% |####                           | Time: 0:00:00  13.07 MB/stbb-2017_20170  16% |#####                          | Time: 0:00:00   8.29 MB/stbb-2017_20170  17% |#####                          | Time: 0:00:00   8.67 MB/stbb-2017_20170  18% |#####                          | Time: 0:00:00   9.13 MB/stbb-2017_20170  20% |######                         | Time: 0:00:00   9.61 MB/stbb-2017_20170  21% |######                         | Time: 0:00:00  10.07 MB/stbb-2017_20170  22% |#######                        | Time: 0:00:00  10.48 MB/stbb-2017_20170  23% |#######                        | Time: 0:00:00  10.92 MB/stbb-2017_20170  25% |#######                        | Time: 0:00:00  11.39 MB/stbb-2017_20170  26% |########                       | Time: 0:00:00  11.83 MB/stbb-2017_20170  27% |########                       | Time: 0:00:00   9.24 MB/stbb-2017_20170  29% |########                       | Time: 0:00:00   9.35 MB/stbb-2017_20170  30% |#########                      | Time: 0:00:00   9.64 MB/stbb-2017_20170  31% |#########                      | Time: 0:00:00   9.95 MB/stbb-2017_20170  32% |##########                     | Time: 0:00:00  10.26 MB/stbb-2017_20170  34% |##########                     | Time: 0:00:00  10.57 MB/stbb-2017_20170  35% |##########                     | Time: 0:00:00  10.87 MB/stbb-2017_20170  36% |###########                    | Time: 0:00:00  11.16 MB/stbb-2017_20170  37% |###########                    | Time: 0:00:00   9.34 MB/stbb-2017_20170  39% |############                   | Time: 0:00:00   9.45 MB/stbb-2017_20170  40% |############                   | Time: 0:00:00   9.69 MB/stbb-2017_20170  41% |############                   | Time: 0:00:00   9.93 MB/stbb-2017_20170  42% |#############                  | Time: 0:00:00  10.16 MB/stbb-2017_20170  44% |#############                  | Time: 0:00:00  10.39 MB/stbb-2017_20170  45% |##############                 | Time: 0:00:00  10.57 MB/stbb-2017_20170  46% |##############                 | Time: 0:00:00  10.83 MB/stbb-2017_20170  47% |##############                 | Time: 0:00:00  11.06 MB/stbb-2017_20170  49% |###############                | Time: 0:00:00  11.27 MB/stbb-2017_20170  50% |###############                | Time: 0:00:00  10.01 MB/stbb-2017_20170  51% |################               | Time: 0:00:00  10.04 MB/stbb-2017_20170  53% |################               | Time: 0:00:00  10.14 MB/stbb-2017_20170  54% |################               | Time: 0:00:00  10.33 MB/stbb-2017_20170  55% |#################              | Time: 0:00:00  10.51 MB/stbb-2017_20170  56% |#################              | Time: 0:00:00  10.68 MB/stbb-2017_20170  58% |#################              | Time: 0:00:00  10.84 MB/stbb-2017_20170  59% |##################             | Time: 0:00:00  11.01 MB/stbb-2017_20170  60% |##################             | Time: 0:00:00  11.18 MB/stbb-2017_20170  61% |###################            | Time: 0:00:00  11.36 MB/stbb-2017_20170  63% |###################            | Time: 0:00:00  10.39 MB/stbb-2017_20170  64% |###################            | Time: 0:00:00  10.24 MB/stbb-2017_20170  65% |####################           | Time: 0:00:00  10.37 MB/stbb-2017_20170  66% |####################           | Time: 0:00:00  10.52 MB/stbb-2017_20170  68% |#####################          | Time: 0:00:00  10.69 MB/stbb-2017_20170  69% |#####################          | Time: 0:00:00  10.84 MB/stbb-2017_20170  70% |#####################          | Time: 0:00:00  10.99 MB/stbb-2017_20170  71% |######################         | Time: 0:00:00  11.13 MB/stbb-2017_20170  73% |######################         | Time: 0:00:00  11.27 MB/stbb-2017_20170  74% |#######################        | Time: 0:00:00  11.41 MB/stbb-2017_20170  75% |#######################        | Time: 0:00:00  11.55 MB/stbb-2017_20170  76% |#######################        | Time: 0:00:00  11.70 MB/stbb-2017_20170  78% |########################       | Time: 0:00:00  10.90 MB/stbb-2017_20170  79% |########################       | Time: 0:00:00  10.88 MB/stbb-2017_20170  80% |#########################      | Time: 0:00:00  10.97 MB/stbb-2017_20170  82% |#########################      | Time: 0:00:00  11.08 MB/stbb-2017_20170  83% |#########################      | Time: 0:00:00  11.21 MB/stbb-2017_20170  84% |##########################     | Time: 0:00:00  11.34 MB/stbb-2017_20170  85% |##########################     | Time: 0:00:00  11.46 MB/stbb-2017_20170  87% |##########################     | Time: 0:00:00  11.58 MB/stbb-2017_20170  88% |###########################    | Time: 0:00:00  11.70 MB/stbb-2017_20170  89% |###########################    | Time: 0:00:00  11.84 MB/stbb-2017_20170  90% |############################   | Time: 0:00:00  11.96 MB/stbb-2017_20170  92% |############################   | Time: 0:00:00  12.07 MB/stbb-2017_20170  93% |############################   | Time: 0:00:00  12.19 MB/stbb-2017_20170  94% |#############################  | Time: 0:00:00  11.56 MB/stbb-2017_20170  95% |#############################  | Time: 0:00:00  11.65 MB/stbb-2017_20170  97% |############################## | Time: 0:00:00  11.76 MB/stbb-2017_20170  98% |############################## | Time: 0:00:00  11.87 MB/stbb-2017_20170  99% |############################## | Time: 0:00:00  11.96 MB/stbb-2017_20170 100% |###############################| Time: 0:00:00  11.97 MB/stbb-2017_20170 100% |###############################| Time: 0:00:00  11.94 MB/s
glpk-4.61-0.ta   0% |                              | ETA:  --:--:--   0.00  B/sglpk-4.61-0.ta   1% |                               | Time: 0:00:00  14.45 MB/sglpk-4.61-0.ta   2% |                               | Time: 0:00:00  17.49 MB/sglpk-4.61-0.ta   4% |#                              | Time: 0:00:00  21.67 MB/sglpk-4.61-0.ta   5% |#                              | Time: 0:00:00  24.67 MB/sglpk-4.61-0.ta   7% |##                             | Time: 0:00:00  26.74 MB/sglpk-4.61-0.ta   8% |##                             | Time: 0:00:00  28.24 MB/sglpk-4.61-0.ta  10% |###                            | Time: 0:00:00  29.62 MB/sglpk-4.61-0.ta  11% |###                            | Time: 0:00:00  30.69 MB/sglpk-4.61-0.ta  13% |####                           | Time: 0:00:00  30.23 MB/sglpk-4.61-0.ta  14% |####                           | Time: 0:00:00  31.12 MB/sglpk-4.61-0.ta  16% |#####                          | Time: 0:00:00  28.09 MB/sglpk-4.61-0.ta  17% |#####                          | Time: 0:00:00  14.59 MB/sglpk-4.61-0.ta  19% |#####                          | Time: 0:00:00  14.80 MB/sglpk-4.61-0.ta  20% |######                         | Time: 0:00:00  14.80 MB/sglpk-4.61-0.ta  22% |######                         | Time: 0:00:00  12.82 MB/sglpk-4.61-0.ta  23% |#######                        | Time: 0:00:00  13.31 MB/sglpk-4.61-0.ta  25% |#######                        | Time: 0:00:00  13.88 MB/sglpk-4.61-0.ta  26% |########                       | Time: 0:00:00  14.43 MB/sglpk-4.61-0.ta  28% |########                       | Time: 0:00:00  14.94 MB/sglpk-4.61-0.ta  29% |#########                      | Time: 0:00:00  15.36 MB/sglpk-4.61-0.ta  31% |#########                      | Time: 0:00:00  15.83 MB/sglpk-4.61-0.ta  32% |##########                     | Time: 0:00:00  16.29 MB/sglpk-4.61-0.ta  34% |##########                     | Time: 0:00:00  16.72 MB/sglpk-4.61-0.ta  35% |###########                    | Time: 0:00:00  17.14 MB/sglpk-4.61-0.ta  37% |###########                    | Time: 0:00:00  17.54 MB/sglpk-4.61-0.ta  38% |###########                    | Time: 0:00:00  18.02 MB/sglpk-4.61-0.ta  40% |############                   | Time: 0:00:00  16.87 MB/sglpk-4.61-0.ta  41% |############                   | Time: 0:00:00  16.49 MB/sglpk-4.61-0.ta  43% |#############                  | Time: 0:00:00  16.51 MB/sglpk-4.61-0.ta  44% |#############                  | Time: 0:00:00  16.59 MB/sglpk-4.61-0.ta  46% |##############                 | Time: 0:00:00  16.95 MB/sglpk-4.61-0.ta  47% |##############                 | Time: 0:00:00  17.31 MB/sglpk-4.61-0.ta  48% |###############                | Time: 0:00:00  17.63 MB/sglpk-4.61-0.ta  50% |###############                | Time: 0:00:00  17.96 MB/sglpk-4.61-0.ta  51% |################               | Time: 0:00:00  18.35 MB/sglpk-4.61-0.ta  53% |################               | Time: 0:00:00  18.68 MB/sglpk-4.61-0.ta  54% |#################              | Time: 0:00:00  19.00 MB/sglpk-4.61-0.ta  56% |#################              | Time: 0:00:00  19.30 MB/sglpk-4.61-0.ta  57% |#################              | Time: 0:00:00  19.59 MB/sglpk-4.61-0.ta  59% |##################             | Time: 0:00:00  19.89 MB/sglpk-4.61-0.ta  60% |##################             | Time: 0:00:00  20.13 MB/sglpk-4.61-0.ta  62% |###################            | Time: 0:00:00  17.36 MB/sglpk-4.61-0.ta  63% |###################            | Time: 0:00:00  17.20 MB/sglpk-4.61-0.ta  65% |####################           | Time: 0:00:00  16.98 MB/sglpk-4.61-0.ta  66% |####################           | Time: 0:00:00  17.14 MB/sglpk-4.61-0.ta  68% |#####################          | Time: 0:00:00  17.37 MB/sglpk-4.61-0.ta  69% |#####################          | Time: 0:00:00  17.59 MB/sglpk-4.61-0.ta  71% |######################         | Time: 0:00:00  17.82 MB/sglpk-4.61-0.ta  72% |######################         | Time: 0:00:00  18.06 MB/sglpk-4.61-0.ta  74% |#######################        | Time: 0:00:00  18.29 MB/sglpk-4.61-0.ta  75% |#######################        | Time: 0:00:00  18.51 MB/sglpk-4.61-0.ta  77% |#######################        | Time: 0:00:00  18.69 MB/sglpk-4.61-0.ta  78% |########################       | Time: 0:00:00  18.91 MB/sglpk-4.61-0.ta  80% |########################       | Time: 0:00:00  19.13 MB/sglpk-4.61-0.ta  81% |#########################      | Time: 0:00:00  19.34 MB/sglpk-4.61-0.ta  83% |#########################      | Time: 0:00:00  19.58 MB/sglpk-4.61-0.ta  84% |##########################     | Time: 0:00:00  19.78 MB/sglpk-4.61-0.ta  86% |##########################     | Time: 0:00:00  19.98 MB/sglpk-4.61-0.ta  87% |###########################    | Time: 0:00:00  18.31 MB/sglpk-4.61-0.ta  89% |###########################    | Time: 0:00:00  18.26 MB/sglpk-4.61-0.ta  90% |############################   | Time: 0:00:00  18.35 MB/sglpk-4.61-0.ta  92% |############################   | Time: 0:00:00  18.53 MB/sglpk-4.61-0.ta  93% |############################   | Time: 0:00:00  18.72 MB/sglpk-4.61-0.ta  95% |#############################  | Time: 0:00:00  18.90 MB/sglpk-4.61-0.ta  96% |#############################  | Time: 0:00:00  19.08 MB/sglpk-4.61-0.ta  97% |############################## | Time: 0:00:00  19.17 MB/sglpk-4.61-0.ta  99% |############################## | Time: 0:00:00  19.33 MB/sglpk-4.61-0.ta 100% |###############################| Time: 0:00:00  19.32 MB/sglpk-4.61-0.ta 100% |###############################| Time: 0:00:00  19.20 MB/s
gsl-2.2.1-blas   0% |                              | ETA:  --:--:--   0.00  B/sgsl-2.2.1-blas   0% |                               | Time: 0:00:00  18.85 MB/sgsl-2.2.1-blas   0% |                               | Time: 0:00:00  26.64 MB/sgsl-2.2.1-blas   0% |                               | Time: 0:00:00  31.21 MB/sgsl-2.2.1-blas   0% |                               | Time: 0:00:00  33.94 MB/sgsl-2.2.1-blas   1% |                               | Time: 0:00:00  35.60 MB/sgsl-2.2.1-blas   1% |                               | Time: 0:00:00  37.01 MB/sgsl-2.2.1-blas   1% |                               | Time: 0:00:00  37.79 MB/sgsl-2.2.1-blas   1% |                               | Time: 0:00:00  10.35 MB/sgsl-2.2.1-blas   1% |                               | Time: 0:00:00  11.01 MB/sgsl-2.2.1-blas   2% |                               | Time: 0:00:00  11.68 MB/sgsl-2.2.1-blas   2% |                               | Time: 0:00:00  12.47 MB/sgsl-2.2.1-blas   2% |                               | Time: 0:00:00  13.29 MB/sgsl-2.2.1-blas   2% |                               | Time: 0:00:00  14.08 MB/sgsl-2.2.1-blas   3% |                               | Time: 0:00:00  14.82 MB/sgsl-2.2.1-blas   3% |#                              | Time: 0:00:00  15.55 MB/sgsl-2.2.1-blas   3% |#                              | Time: 0:00:00  16.25 MB/sgsl-2.2.1-blas   3% |#                              | Time: 0:00:00  16.67 MB/sgsl-2.2.1-blas   3% |#                              | Time: 0:00:00  11.41 MB/sgsl-2.2.1-blas   4% |#                              | Time: 0:00:00  11.64 MB/sgsl-2.2.1-blas   4% |#                              | Time: 0:00:00  11.90 MB/sgsl-2.2.1-blas   4% |#                              | Time: 0:00:00  12.34 MB/sgsl-2.2.1-blas   4% |#                              | Time: 0:00:00  12.66 MB/sgsl-2.2.1-blas   4% |#                              | Time: 0:00:00  13.06 MB/sgsl-2.2.1-blas   5% |#                              | Time: 0:00:00  13.46 MB/sgsl-2.2.1-blas   5% |#                              | Time: 0:00:00  13.86 MB/sgsl-2.2.1-blas   5% |#                              | Time: 0:00:00  14.25 MB/sgsl-2.2.1-blas   5% |#                              | Time: 0:00:00  14.64 MB/sgsl-2.2.1-blas   6% |#                              | Time: 0:00:00  11.85 MB/sgsl-2.2.1-blas   6% |#                              | Time: 0:00:00  11.80 MB/sgsl-2.2.1-blas   6% |##                             | Time: 0:00:00  11.99 MB/sgsl-2.2.1-blas   6% |##                             | Time: 0:00:00  12.28 MB/sgsl-2.2.1-blas   6% |##                             | Time: 0:00:00  12.57 MB/sgsl-2.2.1-blas   7% |##                             | Time: 0:00:00  12.86 MB/sgsl-2.2.1-blas   7% |##                             | Time: 0:00:00  13.15 MB/sgsl-2.2.1-blas   7% |##                             | Time: 0:00:00  13.42 MB/sgsl-2.2.1-blas   7% |##                             | Time: 0:00:00  13.70 MB/sgsl-2.2.1-blas   8% |##                             | Time: 0:00:00  13.97 MB/sgsl-2.2.1-blas   8% |##                             | Time: 0:00:00  14.24 MB/sgsl-2.2.1-blas   8% |##                             | Time: 0:00:00  14.52 MB/sgsl-2.2.1-blas   8% |##                             | Time: 0:00:00  12.54 MB/sgsl-2.2.1-blas   8% |##                             | Time: 0:00:00  12.44 MB/sgsl-2.2.1-blas   9% |##                             | Time: 0:00:00  12.53 MB/sgsl-2.2.1-blas   9% |##                             | Time: 0:00:00  12.74 MB/sgsl-2.2.1-blas   9% |##                             | Time: 0:00:00  12.94 MB/sgsl-2.2.1-blas   9% |###                            | Time: 0:00:00  13.14 MB/sgsl-2.2.1-blas   9% |###                            | Time: 0:00:00  13.32 MB/sgsl-2.2.1-blas  10% |###                            | Time: 0:00:00  13.51 MB/sgsl-2.2.1-blas  10% |###                            | Time: 0:00:00  13.66 MB/sgsl-2.2.1-blas  10% |###                            | Time: 0:00:00  13.84 MB/sgsl-2.2.1-blas  10% |###                            | Time: 0:00:00  14.03 MB/sgsl-2.2.1-blas  11% |###                            | Time: 0:00:00  14.21 MB/sgsl-2.2.1-blas  11% |###                            | Time: 0:00:00  14.39 MB/sgsl-2.2.1-blas  11% |###                            | Time: 0:00:00  13.28 MB/sgsl-2.2.1-blas  11% |###                            | Time: 0:00:00  13.30 MB/sgsl-2.2.1-blas  11% |###                            | Time: 0:00:00  13.43 MB/sgsl-2.2.1-blas  12% |###                            | Time: 0:00:00  13.54 MB/sgsl-2.2.1-blas  12% |###                            | Time: 0:00:00  13.64 MB/sgsl-2.2.1-blas  12% |###                            | Time: 0:00:00  13.81 MB/sgsl-2.2.1-blas  12% |###                            | Time: 0:00:00  13.98 MB/sgsl-2.2.1-blas  13% |####                           | Time: 0:00:00  14.15 MB/sgsl-2.2.1-blas  13% |####                           | Time: 0:00:00  14.31 MB/sgsl-2.2.1-blas  13% |####                           | Time: 0:00:00  14.47 MB/sgsl-2.2.1-blas  13% |####                           | Time: 0:00:00  14.63 MB/sgsl-2.2.1-blas  13% |####                           | Time: 0:00:00  14.79 MB/sgsl-2.2.1-blas  14% |####                           | Time: 0:00:00  14.95 MB/sgsl-2.2.1-blas  14% |####                           | Time: 0:00:00  15.11 MB/sgsl-2.2.1-blas  14% |####                           | Time: 0:00:00  13.96 MB/sgsl-2.2.1-blas  14% |####                           | Time: 0:00:00  13.92 MB/sgsl-2.2.1-blas  14% |####                           | Time: 0:00:00  14.00 MB/sgsl-2.2.1-blas  15% |####                           | Time: 0:00:00  14.04 MB/sgsl-2.2.1-blas  15% |####                           | Time: 0:00:00  14.17 MB/sgsl-2.2.1-blas  15% |####                           | Time: 0:00:00  14.32 MB/sgsl-2.2.1-blas  15% |####                           | Time: 0:00:00  14.47 MB/sgsl-2.2.1-blas  16% |####                           | Time: 0:00:00  14.60 MB/sgsl-2.2.1-blas  16% |#####                          | Time: 0:00:00  14.74 MB/sgsl-2.2.1-blas  16% |#####                          | Time: 0:00:00  14.87 MB/sgsl-2.2.1-blas  16% |#####                          | Time: 0:00:00  15.01 MB/sgsl-2.2.1-blas  16% |#####                          | Time: 0:00:00  15.13 MB/sgsl-2.2.1-blas  17% |#####                          | Time: 0:00:00  15.26 MB/sgsl-2.2.1-blas  17% |#####                          | Time: 0:00:00  15.39 MB/sgsl-2.2.1-blas  17% |#####                          | Time: 0:00:00  15.52 MB/sgsl-2.2.1-blas  17% |#####                          | Time: 0:00:00  15.65 MB/sgsl-2.2.1-blas  18% |#####                          | Time: 0:00:00  14.82 MB/sgsl-2.2.1-blas  18% |#####                          | Time: 0:00:00  14.82 MB/sgsl-2.2.1-blas  18% |#####                          | Time: 0:00:00  14.77 MB/sgsl-2.2.1-blas  18% |#####                          | Time: 0:00:00  14.78 MB/sgsl-2.2.1-blas  18% |#####                          | Time: 0:00:00  14.89 MB/sgsl-2.2.1-blas  19% |#####                          | Time: 0:00:00  15.01 MB/sgsl-2.2.1-blas  19% |#####                          | Time: 0:00:00  15.13 MB/sgsl-2.2.1-blas  19% |######                         | Time: 0:00:00  15.24 MB/sgsl-2.2.1-blas  19% |######                         | Time: 0:00:00  15.34 MB/sgsl-2.2.1-blas  19% |######                         | Time: 0:00:00  15.46 MB/sgsl-2.2.1-blas  20% |######                         | Time: 0:00:00  15.57 MB/sgsl-2.2.1-blas  20% |######                         | Time: 0:00:00  15.69 MB/sgsl-2.2.1-blas  20% |######                         | Time: 0:00:00  15.80 MB/sgsl-2.2.1-blas  20% |######                         | Time: 0:00:00  15.91 MB/sgsl-2.2.1-blas  21% |######                         | Time: 0:00:00  16.02 MB/sgsl-2.2.1-blas  21% |######                         | Time: 0:00:00  16.12 MB/sgsl-2.2.1-blas  21% |######                         | Time: 0:00:00  16.15 MB/sgsl-2.2.1-blas  21% |######                         | Time: 0:00:00  15.54 MB/sgsl-2.2.1-blas  21% |######                         | Time: 0:00:00  15.10 MB/sgsl-2.2.1-blas  22% |######                         | Time: 0:00:00  15.12 MB/sgsl-2.2.1-blas  22% |######                         | Time: 0:00:00  15.20 MB/sgsl-2.2.1-blas  22% |#######                        | Time: 0:00:00  15.29 MB/sgsl-2.2.1-blas  22% |#######                        | Time: 0:00:00  15.39 MB/sgsl-2.2.1-blas  23% |#######                        | Time: 0:00:00  15.50 MB/sgsl-2.2.1-blas  23% |#######                        | Time: 0:00:00  15.56 MB/sgsl-2.2.1-blas  23% |#######                        | Time: 0:00:00  15.66 MB/sgsl-2.2.1-blas  23% |#######                        | Time: 0:00:00  15.75 MB/sgsl-2.2.1-blas  23% |#######                        | Time: 0:00:00  15.85 MB/sgsl-2.2.1-blas  24% |#######                        | Time: 0:00:00  15.94 MB/sgsl-2.2.1-blas  24% |#######                        | Time: 0:00:00  16.02 MB/sgsl-2.2.1-blas  24% |#######                        | Time: 0:00:00  16.12 MB/sgsl-2.2.1-blas  24% |#######                        | Time: 0:00:00  16.21 MB/sgsl-2.2.1-blas  24% |#######                        | Time: 0:00:00  16.31 MB/sgsl-2.2.1-blas  25% |#######                        | Time: 0:00:00  16.40 MB/sgsl-2.2.1-blas  25% |#######                        | Time: 0:00:00  16.47 MB/sgsl-2.2.1-blas  25% |#######                        | Time: 0:00:00  16.56 MB/sgsl-2.2.1-blas  25% |########                       | Time: 0:00:00  16.41 MB/sgsl-2.2.1-blas  26% |########                       | Time: 0:00:00  16.45 MB/sgsl-2.2.1-blas  26% |########                       | Time: 0:00:00  16.53 MB/sgsl-2.2.1-blas  26% |########                       | Time: 0:00:00  16.60 MB/sgsl-2.2.1-blas  26% |########                       | Time: 0:00:00  16.69 MB/sgsl-2.2.1-blas  26% |########                       | Time: 0:00:00  16.78 MB/sgsl-2.2.1-blas  27% |########                       | Time: 0:00:00  16.70 MB/sgsl-2.2.1-blas  27% |########                       | Time: 0:00:00  16.71 MB/sgsl-2.2.1-blas  27% |########                       | Time: 0:00:00  16.71 MB/sgsl-2.2.1-blas  27% |########                       | Time: 0:00:00  16.78 MB/sgsl-2.2.1-blas  28% |########                       | Time: 0:00:00  16.86 MB/sgsl-2.2.1-blas  28% |########                       | Time: 0:00:00  16.94 MB/sgsl-2.2.1-blas  28% |########                       | Time: 0:00:00  17.02 MB/sgsl-2.2.1-blas  28% |########                       | Time: 0:00:00  17.11 MB/sgsl-2.2.1-blas  28% |########                       | Time: 0:00:00  17.18 MB/sgsl-2.2.1-blas  29% |#########                      | Time: 0:00:00  17.27 MB/sgsl-2.2.1-blas  29% |#########                      | Time: 0:00:00  17.34 MB/sgsl-2.2.1-blas  29% |#########                      | Time: 0:00:00  17.42 MB/sgsl-2.2.1-blas  29% |#########                      | Time: 0:00:00  17.49 MB/sgsl-2.2.1-blas  29% |#########                      | Time: 0:00:00  17.56 MB/sgsl-2.2.1-blas  30% |#########                      | Time: 0:00:00  17.27 MB/sgsl-2.2.1-blas  30% |#########                      | Time: 0:00:00  17.28 MB/sgsl-2.2.1-blas  30% |#########                      | Time: 0:00:00  17.35 MB/sgsl-2.2.1-blas  30% |#########                      | Time: 0:00:00  17.43 MB/sgsl-2.2.1-blas  31% |#########                      | Time: 0:00:00  17.50 MB/sgsl-2.2.1-blas  31% |#########                      | Time: 0:00:00  17.58 MB/sgsl-2.2.1-blas  31% |#########                      | Time: 0:00:00  17.66 MB/sgsl-2.2.1-blas  31% |#########                      | Time: 0:00:00  17.74 MB/sgsl-2.2.1-blas  31% |#########                      | Time: 0:00:00  17.59 MB/sgsl-2.2.1-blas  32% |#########                      | Time: 0:00:00  17.60 MB/sgsl-2.2.1-blas  32% |##########                     | Time: 0:00:00  17.62 MB/sgsl-2.2.1-blas  32% |##########                     | Time: 0:00:00  17.67 MB/sgsl-2.2.1-blas  32% |##########                     | Time: 0:00:00  17.73 MB/sgsl-2.2.1-blas  33% |##########                     | Time: 0:00:00  17.80 MB/sgsl-2.2.1-blas  33% |##########                     | Time: 0:00:00  17.84 MB/sgsl-2.2.1-blas  33% |##########                     | Time: 0:00:00  17.89 MB/sgsl-2.2.1-blas  33% |##########                     | Time: 0:00:00  17.95 MB/sgsl-2.2.1-blas  33% |##########                     | Time: 0:00:00  18.01 MB/sgsl-2.2.1-blas  34% |##########                     | Time: 0:00:00  18.09 MB/sgsl-2.2.1-blas  34% |##########                     | Time: 0:00:00  18.16 MB/sgsl-2.2.1-blas  34% |##########                     | Time: 0:00:00  18.22 MB/sgsl-2.2.1-blas  34% |##########                     | Time: 0:00:00  18.29 MB/sgsl-2.2.1-blas  34% |##########                     | Time: 0:00:00  18.32 MB/sgsl-2.2.1-blas  35% |##########                     | Time: 0:00:00  18.25 MB/sgsl-2.2.1-blas  35% |##########                     | Time: 0:00:00  18.27 MB/sgsl-2.2.1-blas  35% |###########                    | Time: 0:00:00  18.33 MB/sgsl-2.2.1-blas  35% |###########                    | Time: 0:00:00  18.39 MB/sgsl-2.2.1-blas  36% |###########                    | Time: 0:00:00  18.46 MB/sgsl-2.2.1-blas  36% |###########                    | Time: 0:00:00  18.42 MB/sgsl-2.2.1-blas  36% |###########                    | Time: 0:00:00  18.42 MB/sgsl-2.2.1-blas  36% |###########                    | Time: 0:00:00  18.32 MB/sgsl-2.2.1-blas  36% |###########                    | Time: 0:00:00  18.27 MB/sgsl-2.2.1-blas  37% |###########                    | Time: 0:00:00  18.31 MB/sgsl-2.2.1-blas  37% |###########                    | Time: 0:00:00  18.37 MB/sgsl-2.2.1-blas  37% |###########                    | Time: 0:00:00  18.43 MB/sgsl-2.2.1-blas  37% |###########                    | Time: 0:00:00  18.50 MB/sgsl-2.2.1-blas  38% |###########                    | Time: 0:00:00  18.56 MB/sgsl-2.2.1-blas  38% |###########                    | Time: 0:00:00  18.62 MB/sgsl-2.2.1-blas  38% |###########                    | Time: 0:00:00  18.68 MB/sgsl-2.2.1-blas  38% |###########                    | Time: 0:00:00  18.74 MB/sgsl-2.2.1-blas  38% |############                   | Time: 0:00:00  18.79 MB/sgsl-2.2.1-blas  39% |############                   | Time: 0:00:00  18.86 MB/sgsl-2.2.1-blas  39% |############                   | Time: 0:00:00  18.89 MB/sgsl-2.2.1-blas  39% |############                   | Time: 0:00:00  18.84 MB/sgsl-2.2.1-blas  39% |############                   | Time: 0:00:00  18.80 MB/sgsl-2.2.1-blas  39% |############                   | Time: 0:00:00  18.82 MB/sgsl-2.2.1-blas  40% |############                   | Time: 0:00:00  18.90 MB/sgsl-2.2.1-blas  40% |############                   | Time: 0:00:00  18.90 MB/sgsl-2.2.1-blas  40% |############                   | Time: 0:00:00  18.83 MB/sgsl-2.2.1-blas  40% |############                   | Time: 0:00:00  18.74 MB/sgsl-2.2.1-blas  41% |############                   | Time: 0:00:00  18.70 MB/sgsl-2.2.1-blas  41% |############                   | Time: 0:00:00  18.74 MB/sgsl-2.2.1-blas  41% |############                   | Time: 0:00:00  18.81 MB/sgsl-2.2.1-blas  41% |############                   | Time: 0:00:00  18.86 MB/sgsl-2.2.1-blas  41% |############                   | Time: 0:00:00  18.92 MB/sgsl-2.2.1-blas  42% |#############                  | Time: 0:00:00  18.98 MB/sgsl-2.2.1-blas  42% |#############                  | Time: 0:00:00  19.04 MB/sgsl-2.2.1-blas  42% |#############                  | Time: 0:00:00  19.10 MB/sgsl-2.2.1-blas  42% |#############                  | Time: 0:00:00  19.08 MB/sgsl-2.2.1-blas  43% |#############                  | Time: 0:00:00  19.13 MB/sgsl-2.2.1-blas  43% |#############                  | Time: 0:00:00  19.19 MB/sgsl-2.2.1-blas  43% |#############                  | Time: 0:00:00  19.25 MB/sgsl-2.2.1-blas  43% |#############                  | Time: 0:00:00  19.29 MB/sgsl-2.2.1-blas  43% |#############                  | Time: 0:00:00  19.32 MB/sgsl-2.2.1-blas  44% |#############                  | Time: 0:00:00  19.38 MB/sgsl-2.2.1-blas  44% |#############                  | Time: 0:00:00  19.43 MB/sgsl-2.2.1-blas  44% |#############                  | Time: 0:00:00  19.46 MB/sgsl-2.2.1-blas  44% |#############                  | Time: 0:00:00  19.51 MB/sgsl-2.2.1-blas  44% |#############                  | Time: 0:00:00  19.56 MB/sgsl-2.2.1-blas  45% |##############                 | Time: 0:00:00  19.62 MB/sgsl-2.2.1-blas  45% |##############                 | Time: 0:00:00  19.68 MB/sgsl-2.2.1-blas  45% |##############                 | Time: 0:00:00  19.72 MB/sgsl-2.2.1-blas  45% |##############                 | Time: 0:00:00  19.71 MB/sgsl-2.2.1-blas  46% |##############                 | Time: 0:00:00  19.68 MB/sgsl-2.2.1-blas  46% |##############                 | Time: 0:00:00  19.63 MB/sgsl-2.2.1-blas  46% |##############                 | Time: 0:00:00  19.55 MB/sgsl-2.2.1-blas  46% |##############                 | Time: 0:00:00  19.57 MB/sgsl-2.2.1-blas  46% |##############                 | Time: 0:00:00  19.62 MB/sgsl-2.2.1-blas  47% |##############                 | Time: 0:00:00  19.66 MB/sgsl-2.2.1-blas  47% |##############                 | Time: 0:00:00  19.71 MB/sgsl-2.2.1-blas  47% |##############                 | Time: 0:00:00  19.77 MB/sgsl-2.2.1-blas  47% |##############                 | Time: 0:00:00  19.82 MB/sgsl-2.2.1-blas  47% |##############                 | Time: 0:00:00  19.87 MB/sgsl-2.2.1-blas  48% |##############                 | Time: 0:00:00  19.92 MB/sgsl-2.2.1-blas  48% |###############                | Time: 0:00:00  19.96 MB/sgsl-2.2.1-blas  48% |###############                | Time: 0:00:00  20.02 MB/sgsl-2.2.1-blas  48% |###############                | Time: 0:00:00  20.01 MB/sgsl-2.2.1-blas  49% |###############                | Time: 0:00:00  20.08 MB/sgsl-2.2.1-blas  49% |###############                | Time: 0:00:00  20.13 MB/sgsl-2.2.1-blas  49% |###############                | Time: 0:00:00  20.18 MB/sgsl-2.2.1-blas  49% |###############                | Time: 0:00:00  20.23 MB/sgsl-2.2.1-blas  49% |###############                | Time: 0:00:00  20.28 MB/sgsl-2.2.1-blas  50% |###############                | Time: 0:00:00  20.33 MB/sgsl-2.2.1-blas  50% |###############                | Time: 0:00:00  20.38 MB/sgsl-2.2.1-blas  50% |###############                | Time: 0:00:00  20.42 MB/sgsl-2.2.1-blas  50% |###############                | Time: 0:00:00  20.47 MB/sgsl-2.2.1-blas  51% |###############                | Time: 0:00:00  20.52 MB/sgsl-2.2.1-blas  51% |###############                | Time: 0:00:00  20.37 MB/sgsl-2.2.1-blas  51% |###############                | Time: 0:00:00  20.30 MB/sgsl-2.2.1-blas  51% |################               | Time: 0:00:00  20.27 MB/sgsl-2.2.1-blas  51% |################               | Time: 0:00:00  20.25 MB/sgsl-2.2.1-blas  52% |################               | Time: 0:00:00  20.29 MB/sgsl-2.2.1-blas  52% |################               | Time: 0:00:00  20.33 MB/sgsl-2.2.1-blas  52% |################               | Time: 0:00:00  20.38 MB/sgsl-2.2.1-blas  52% |################               | Time: 0:00:00  20.43 MB/sgsl-2.2.1-blas  52% |################               | Time: 0:00:00  20.47 MB/sgsl-2.2.1-blas  53% |################               | Time: 0:00:00  20.49 MB/sgsl-2.2.1-blas  53% |################               | Time: 0:00:00  20.53 MB/sgsl-2.2.1-blas  53% |################               | Time: 0:00:00  20.50 MB/sgsl-2.2.1-blas  53% |################               | Time: 0:00:00  20.54 MB/sgsl-2.2.1-blas  54% |################               | Time: 0:00:00  20.58 MB/sgsl-2.2.1-blas  54% |################               | Time: 0:00:00  20.61 MB/sgsl-2.2.1-blas  54% |################               | Time: 0:00:00  20.66 MB/sgsl-2.2.1-blas  54% |################               | Time: 0:00:00  20.70 MB/sgsl-2.2.1-blas  54% |#################              | Time: 0:00:00  20.37 MB/sgsl-2.2.1-blas  55% |#################              | Time: 0:00:00  20.34 MB/sgsl-2.2.1-blas  55% |#################              | Time: 0:00:00  20.32 MB/sgsl-2.2.1-blas  55% |#################              | Time: 0:00:00  20.31 MB/sgsl-2.2.1-blas  55% |#################              | Time: 0:00:00  20.30 MB/sgsl-2.2.1-blas  56% |#################              | Time: 0:00:00  20.20 MB/sgsl-2.2.1-blas  56% |#################              | Time: 0:00:00  20.23 MB/sgsl-2.2.1-blas  56% |#################              | Time: 0:00:00  20.28 MB/sgsl-2.2.1-blas  56% |#################              | Time: 0:00:00  20.31 MB/sgsl-2.2.1-blas  56% |#################              | Time: 0:00:00  20.33 MB/sgsl-2.2.1-blas  57% |#################              | Time: 0:00:00  20.38 MB/sgsl-2.2.1-blas  57% |#################              | Time: 0:00:00  20.43 MB/sgsl-2.2.1-blas  57% |#################              | Time: 0:00:00  20.49 MB/sgsl-2.2.1-blas  57% |#################              | Time: 0:00:00  20.54 MB/sgsl-2.2.1-blas  57% |#################              | Time: 0:00:00  20.60 MB/sgsl-2.2.1-blas  58% |##################             | Time: 0:00:00  20.65 MB/sgsl-2.2.1-blas  58% |##################             | Time: 0:00:00  20.71 MB/sgsl-2.2.1-blas  58% |##################             | Time: 0:00:00  20.76 MB/sgsl-2.2.1-blas  58% |##################             | Time: 0:00:00  20.81 MB/sgsl-2.2.1-blas  59% |##################             | Time: 0:00:00  20.87 MB/sgsl-2.2.1-blas  59% |##################             | Time: 0:00:00  20.92 MB/sgsl-2.2.1-blas  59% |##################             | Time: 0:00:00  20.97 MB/sgsl-2.2.1-blas  59% |##################             | Time: 0:00:00  21.03 MB/sgsl-2.2.1-blas  59% |##################             | Time: 0:00:00  21.09 MB/sgsl-2.2.1-blas  60% |##################             | Time: 0:00:00  21.14 MB/sgsl-2.2.1-blas  60% |##################             | Time: 0:00:00  21.18 MB/sgsl-2.2.1-blas  60% |##################             | Time: 0:00:00  21.23 MB/sgsl-2.2.1-blas  60% |##################             | Time: 0:00:00  21.28 MB/sgsl-2.2.1-blas  61% |##################             | Time: 0:00:00  21.33 MB/sgsl-2.2.1-blas  61% |##################             | Time: 0:00:00  21.38 MB/sgsl-2.2.1-blas  61% |###################            | Time: 0:00:00  21.40 MB/sgsl-2.2.1-blas  61% |###################            | Time: 0:00:00  21.40 MB/sgsl-2.2.1-blas  61% |###################            | Time: 0:00:00  21.34 MB/sgsl-2.2.1-blas  62% |###################            | Time: 0:00:00  21.26 MB/sgsl-2.2.1-blas  62% |###################            | Time: 0:00:00  21.25 MB/sgsl-2.2.1-blas  62% |###################            | Time: 0:00:00  21.29 MB/sgsl-2.2.1-blas  62% |###################            | Time: 0:00:00  21.34 MB/sgsl-2.2.1-blas  62% |###################            | Time: 0:00:00  21.39 MB/sgsl-2.2.1-blas  63% |###################            | Time: 0:00:00  21.44 MB/sgsl-2.2.1-blas  63% |###################            | Time: 0:00:00  21.49 MB/sgsl-2.2.1-blas  63% |###################            | Time: 0:00:00  21.54 MB/sgsl-2.2.1-blas  63% |###################            | Time: 0:00:00  21.59 MB/sgsl-2.2.1-blas  64% |###################            | Time: 0:00:00  21.61 MB/sgsl-2.2.1-blas  64% |###################            | Time: 0:00:00  21.63 MB/sgsl-2.2.1-blas  64% |###################            | Time: 0:00:00  21.66 MB/sgsl-2.2.1-blas  64% |####################           | Time: 0:00:00  21.71 MB/sgsl-2.2.1-blas  64% |####################           | Time: 0:00:00  21.75 MB/sgsl-2.2.1-blas  65% |####################           | Time: 0:00:00  21.80 MB/sgsl-2.2.1-blas  65% |####################           | Time: 0:00:00  21.85 MB/sgsl-2.2.1-blas  65% |####################           | Time: 0:00:00  21.90 MB/sgsl-2.2.1-blas  65% |####################           | Time: 0:00:00  21.95 MB/sgsl-2.2.1-blas  66% |####################           | Time: 0:00:00  21.99 MB/sgsl-2.2.1-blas  66% |####################           | Time: 0:00:00  22.02 MB/sgsl-2.2.1-blas  66% |####################           | Time: 0:00:00  22.05 MB/sgsl-2.2.1-blas  66% |####################           | Time: 0:00:00  22.10 MB/sgsl-2.2.1-blas  66% |####################           | Time: 0:00:00  22.11 MB/sgsl-2.2.1-blas  67% |####################           | Time: 0:00:00  22.12 MB/sgsl-2.2.1-blas  67% |####################           | Time: 0:00:00  22.17 MB/sgsl-2.2.1-blas  67% |####################           | Time: 0:00:00  22.22 MB/sgsl-2.2.1-blas  67% |#####################          | Time: 0:00:00  22.27 MB/sgsl-2.2.1-blas  67% |#####################          | Time: 0:00:00  22.32 MB/sgsl-2.2.1-blas  68% |#####################          | Time: 0:00:00  22.37 MB/sgsl-2.2.1-blas  68% |#####################          | Time: 0:00:00  22.37 MB/sgsl-2.2.1-blas  68% |#####################          | Time: 0:00:00  22.28 MB/sgsl-2.2.1-blas  68% |#####################          | Time: 0:00:00  22.22 MB/sgsl-2.2.1-blas  69% |#####################          | Time: 0:00:00  22.15 MB/sgsl-2.2.1-blas  69% |#####################          | Time: 0:00:00  22.19 MB/sgsl-2.2.1-blas  69% |#####################          | Time: 0:00:00  22.24 MB/sgsl-2.2.1-blas  69% |#####################          | Time: 0:00:00  22.28 MB/sgsl-2.2.1-blas  69% |#####################          | Time: 0:00:00  22.32 MB/sgsl-2.2.1-blas  70% |#####################          | Time: 0:00:00  22.35 MB/sgsl-2.2.1-blas  70% |#####################          | Time: 0:00:00  22.35 MB/sgsl-2.2.1-blas  70% |#####################          | Time: 0:00:00  22.37 MB/sgsl-2.2.1-blas  70% |#####################          | Time: 0:00:00  22.42 MB/sgsl-2.2.1-blas  71% |######################         | Time: 0:00:00  22.47 MB/sgsl-2.2.1-blas  71% |######################         | Time: 0:00:00  22.51 MB/sgsl-2.2.1-blas  71% |######################         | Time: 0:00:00  22.55 MB/sgsl-2.2.1-blas  71% |######################         | Time: 0:00:00  22.59 MB/sgsl-2.2.1-blas  71% |######################         | Time: 0:00:00  22.64 MB/sgsl-2.2.1-blas  72% |######################         | Time: 0:00:00  22.68 MB/sgsl-2.2.1-blas  72% |######################         | Time: 0:00:00  22.73 MB/sgsl-2.2.1-blas  72% |######################         | Time: 0:00:00  22.77 MB/sgsl-2.2.1-blas  72% |######################         | Time: 0:00:00  22.84 MB/sgsl-2.2.1-blas  72% |######################         | Time: 0:00:00  22.88 MB/sgsl-2.2.1-blas  73% |######################         | Time: 0:00:00  22.92 MB/sgsl-2.2.1-blas  73% |######################         | Time: 0:00:00  22.91 MB/sgsl-2.2.1-blas  73% |######################         | Time: 0:00:00  22.93 MB/sgsl-2.2.1-blas  73% |######################         | Time: 0:00:00  22.97 MB/sgsl-2.2.1-blas  74% |######################         | Time: 0:00:00  23.01 MB/sgsl-2.2.1-blas  74% |#######################        | Time: 0:00:00  23.05 MB/sgsl-2.2.1-blas  74% |#######################        | Time: 0:00:00  23.02 MB/sgsl-2.2.1-blas  74% |#######################        | Time: 0:00:00  23.04 MB/sgsl-2.2.1-blas  74% |#######################        | Time: 0:00:00  23.05 MB/sgsl-2.2.1-blas  75% |#######################        | Time: 0:00:00  23.01 MB/sgsl-2.2.1-blas  75% |#######################        | Time: 0:00:00  22.97 MB/sgsl-2.2.1-blas  75% |#######################        | Time: 0:00:00  22.97 MB/sgsl-2.2.1-blas  75% |#######################        | Time: 0:00:00  22.97 MB/sgsl-2.2.1-blas  76% |#######################        | Time: 0:00:00  22.99 MB/sgsl-2.2.1-blas  76% |#######################        | Time: 0:00:00  23.02 MB/sgsl-2.2.1-blas  76% |#######################        | Time: 0:00:00  23.03 MB/sgsl-2.2.1-blas  76% |#######################        | Time: 0:00:00  23.03 MB/sgsl-2.2.1-blas  76% |#######################        | Time: 0:00:00  23.07 MB/sgsl-2.2.1-blas  77% |#######################        | Time: 0:00:00  23.09 MB/sgsl-2.2.1-blas  77% |#######################        | Time: 0:00:00  23.13 MB/sgsl-2.2.1-blas  77% |########################       | Time: 0:00:00  23.17 MB/sgsl-2.2.1-blas  77% |########################       | Time: 0:00:00  23.21 MB/sgsl-2.2.1-blas  77% |########################       | Time: 0:00:00  23.25 MB/sgsl-2.2.1-blas  78% |########################       | Time: 0:00:00  23.30 MB/sgsl-2.2.1-blas  78% |########################       | Time: 0:00:00  23.34 MB/sgsl-2.2.1-blas  78% |########################       | Time: 0:00:00  23.38 MB/sgsl-2.2.1-blas  78% |########################       | Time: 0:00:00  23.42 MB/sgsl-2.2.1-blas  79% |########################       | Time: 0:00:00  23.45 MB/sgsl-2.2.1-blas  79% |########################       | Time: 0:00:00  23.45 MB/sgsl-2.2.1-blas  79% |########################       | Time: 0:00:00  23.46 MB/sgsl-2.2.1-blas  79% |########################       | Time: 0:00:00  23.48 MB/sgsl-2.2.1-blas  79% |########################       | Time: 0:00:00  23.53 MB/sgsl-2.2.1-blas  80% |########################       | Time: 0:00:00  23.58 MB/sgsl-2.2.1-blas  80% |########################       | Time: 0:00:00  23.56 MB/sgsl-2.2.1-blas  80% |########################       | Time: 0:00:00  23.55 MB/sgsl-2.2.1-blas  80% |#########################      | Time: 0:00:00  23.53 MB/sgsl-2.2.1-blas  81% |#########################      | Time: 0:00:00  23.54 MB/sgsl-2.2.1-blas  81% |#########################      | Time: 0:00:00  23.56 MB/sgsl-2.2.1-blas  81% |#########################      | Time: 0:00:00  23.53 MB/sgsl-2.2.1-blas  81% |#########################      | Time: 0:00:00  23.53 MB/sgsl-2.2.1-blas  81% |#########################      | Time: 0:00:00  23.53 MB/sgsl-2.2.1-blas  82% |#########################      | Time: 0:00:00  23.54 MB/sgsl-2.2.1-blas  82% |#########################      | Time: 0:00:00  23.54 MB/sgsl-2.2.1-blas  82% |#########################      | Time: 0:00:00  23.56 MB/sgsl-2.2.1-blas  82% |#########################      | Time: 0:00:00  23.53 MB/sgsl-2.2.1-blas  82% |#########################      | Time: 0:00:00  23.56 MB/sgsl-2.2.1-blas  83% |#########################      | Time: 0:00:00  23.60 MB/sgsl-2.2.1-blas  83% |#########################      | Time: 0:00:00  23.63 MB/sgsl-2.2.1-blas  83% |#########################      | Time: 0:00:00  23.66 MB/sgsl-2.2.1-blas  83% |#########################      | Time: 0:00:00  23.69 MB/sgsl-2.2.1-blas  84% |##########################     | Time: 0:00:00  23.73 MB/sgsl-2.2.1-blas  84% |##########################     | Time: 0:00:00  23.76 MB/sgsl-2.2.1-blas  84% |##########################     | Time: 0:00:00  23.80 MB/sgsl-2.2.1-blas  84% |##########################     | Time: 0:00:00  23.84 MB/sgsl-2.2.1-blas  84% |##########################     | Time: 0:00:00  23.86 MB/sgsl-2.2.1-blas  85% |##########################     | Time: 0:00:00  23.90 MB/sgsl-2.2.1-blas  85% |##########################     | Time: 0:00:00  23.93 MB/sgsl-2.2.1-blas  85% |##########################     | Time: 0:00:00  23.92 MB/sgsl-2.2.1-blas  85% |##########################     | Time: 0:00:00  23.93 MB/sgsl-2.2.1-blas  86% |##########################     | Time: 0:00:00  23.92 MB/sgsl-2.2.1-blas  86% |##########################     | Time: 0:00:00  23.94 MB/sgsl-2.2.1-blas  86% |##########################     | Time: 0:00:00  23.97 MB/sgsl-2.2.1-blas  86% |##########################     | Time: 0:00:00  24.01 MB/sgsl-2.2.1-blas  86% |##########################     | Time: 0:00:00  24.06 MB/sgsl-2.2.1-blas  87% |##########################     | Time: 0:00:00  24.10 MB/sgsl-2.2.1-blas  87% |###########################    | Time: 0:00:00  24.14 MB/sgsl-2.2.1-blas  87% |###########################    | Time: 0:00:00  24.18 MB/sgsl-2.2.1-blas  87% |###########################    | Time: 0:00:00  24.22 MB/sgsl-2.2.1-blas  87% |###########################    | Time: 0:00:00  24.26 MB/sgsl-2.2.1-blas  88% |###########################    | Time: 0:00:00  24.29 MB/sgsl-2.2.1-blas  88% |###########################    | Time: 0:00:00  24.32 MB/sgsl-2.2.1-blas  88% |###########################    | Time: 0:00:00  24.36 MB/sgsl-2.2.1-blas  88% |###########################    | Time: 0:00:00  24.40 MB/sgsl-2.2.1-blas  89% |###########################    | Time: 0:00:00  24.43 MB/sgsl-2.2.1-blas  89% |###########################    | Time: 0:00:00  24.46 MB/sgsl-2.2.1-blas  89% |###########################    | Time: 0:00:00  24.49 MB/sgsl-2.2.1-blas  89% |###########################    | Time: 0:00:00  24.53 MB/sgsl-2.2.1-blas  89% |###########################    | Time: 0:00:00  24.57 MB/sgsl-2.2.1-blas  90% |###########################    | Time: 0:00:00  24.60 MB/sgsl-2.2.1-blas  90% |############################   | Time: 0:00:00  24.64 MB/sgsl-2.2.1-blas  90% |############################   | Time: 0:00:00  24.68 MB/sgsl-2.2.1-blas  90% |############################   | Time: 0:00:00  24.72 MB/sgsl-2.2.1-blas  91% |############################   | Time: 0:00:00  24.75 MB/sgsl-2.2.1-blas  91% |############################   | Time: 0:00:00  24.79 MB/sgsl-2.2.1-blas  91% |############################   | Time: 0:00:00  24.82 MB/sgsl-2.2.1-blas  91% |############################   | Time: 0:00:00  24.86 MB/sgsl-2.2.1-blas  91% |############################   | Time: 0:00:00  24.90 MB/sgsl-2.2.1-blas  92% |############################   | Time: 0:00:00  24.93 MB/sgsl-2.2.1-blas  92% |############################   | Time: 0:00:00  24.97 MB/sgsl-2.2.1-blas  92% |############################   | Time: 0:00:00  25.00 MB/sgsl-2.2.1-blas  92% |############################   | Time: 0:00:00  25.04 MB/sgsl-2.2.1-blas  92% |############################   | Time: 0:00:00  25.08 MB/sgsl-2.2.1-blas  93% |############################   | Time: 0:00:00  25.11 MB/sgsl-2.2.1-blas  93% |############################   | Time: 0:00:00  25.13 MB/sgsl-2.2.1-blas  93% |#############################  | Time: 0:00:00  25.17 MB/sgsl-2.2.1-blas  93% |#############################  | Time: 0:00:00  25.20 MB/sgsl-2.2.1-blas  94% |#############################  | Time: 0:00:00  25.24 MB/sgsl-2.2.1-blas  94% |#############################  | Time: 0:00:00  25.28 MB/sgsl-2.2.1-blas  94% |#############################  | Time: 0:00:00  25.32 MB/sgsl-2.2.1-blas  94% |#############################  | Time: 0:00:00  25.35 MB/sgsl-2.2.1-blas  94% |#############################  | Time: 0:00:00  25.39 MB/sgsl-2.2.1-blas  95% |#############################  | Time: 0:00:00  25.43 MB/sgsl-2.2.1-blas  95% |#############################  | Time: 0:00:00  25.47 MB/sgsl-2.2.1-blas  95% |#############################  | Time: 0:00:00  25.50 MB/sgsl-2.2.1-blas  95% |#############################  | Time: 0:00:00  25.54 MB/sgsl-2.2.1-blas  95% |#############################  | Time: 0:00:00  25.56 MB/sgsl-2.2.1-blas  96% |#############################  | Time: 0:00:00  25.60 MB/sgsl-2.2.1-blas  96% |#############################  | Time: 0:00:00  25.64 MB/sgsl-2.2.1-blas  96% |#############################  | Time: 0:00:00  25.67 MB/sgsl-2.2.1-blas  96% |############################## | Time: 0:00:00  25.71 MB/sgsl-2.2.1-blas  97% |############################## | Time: 0:00:00  25.75 MB/sgsl-2.2.1-blas  97% |############################## | Time: 0:00:00  25.79 MB/sgsl-2.2.1-blas  97% |############################## | Time: 0:00:00  25.83 MB/sgsl-2.2.1-blas  97% |############################## | Time: 0:00:00  25.86 MB/sgsl-2.2.1-blas  97% |############################## | Time: 0:00:00  25.90 MB/sgsl-2.2.1-blas  98% |############################## | Time: 0:00:00  25.93 MB/sgsl-2.2.1-blas  98% |############################## | Time: 0:00:00  25.97 MB/sgsl-2.2.1-blas  98% |############################## | Time: 0:00:00  26.01 MB/sgsl-2.2.1-blas  98% |############################## | Time: 0:00:00  26.05 MB/sgsl-2.2.1-blas  99% |############################## | Time: 0:00:00  26.08 MB/sgsl-2.2.1-blas  99% |############################## | Time: 0:00:00  26.09 MB/sgsl-2.2.1-blas  99% |############################## | Time: 0:00:00  26.12 MB/sgsl-2.2.1-blas  99% |############################## | Time: 0:00:00  26.16 MB/sgsl-2.2.1-blas  99% |############################## | Time: 0:00:00  26.19 MB/sgsl-2.2.1-blas 100% |###############################| Time: 0:00:00  26.20 MB/sgsl-2.2.1-blas 100% |###############################| Time: 0:00:00  26.18 MB/s
suitesparse-4.   0% |                              | ETA:  --:--:--   0.00  B/ssuitesparse-4.   0% |                               | Time: 0:00:00   4.01 MB/ssuitesparse-4.   1% |                               | Time: 0:00:00   4.59 MB/ssuitesparse-4.   2% |                               | Time: 0:00:00   4.69 MB/ssuitesparse-4.   2% |                               | Time: 0:00:00   5.00 MB/ssuitesparse-4.   3% |#                              | Time: 0:00:00   5.41 MB/ssuitesparse-4.   4% |#                              | Time: 0:00:00   5.46 MB/ssuitesparse-4.   5% |#                              | Time: 0:00:00   5.47 MB/ssuitesparse-4.   5% |#                              | Time: 0:00:00   5.41 MB/ssuitesparse-4.   6% |##                             | Time: 0:00:00   5.97 MB/ssuitesparse-4.   7% |##                             | Time: 0:00:00   6.53 MB/ssuitesparse-4.   8% |##                             | Time: 0:00:00   7.06 MB/ssuitesparse-4.   8% |##                             | Time: 0:00:00   7.60 MB/ssuitesparse-4.   9% |##                             | Time: 0:00:00   8.12 MB/ssuitesparse-4.  10% |###                            | Time: 0:00:00   8.63 MB/ssuitesparse-4.  11% |###                            | Time: 0:00:00   9.13 MB/ssuitesparse-4.  11% |###                            | Time: 0:00:00   9.61 MB/ssuitesparse-4.  12% |###                            | Time: 0:00:00  10.08 MB/ssuitesparse-4.  13% |####                           | Time: 0:00:00  10.52 MB/ssuitesparse-4.  13% |####                           | Time: 0:00:00  10.96 MB/ssuitesparse-4.  14% |####                           | Time: 0:00:00  11.41 MB/ssuitesparse-4.  15% |####                           | Time: 0:00:00  11.83 MB/ssuitesparse-4.  16% |#####                          | Time: 0:00:00  12.22 MB/ssuitesparse-4.  16% |#####                          | Time: 0:00:00  12.63 MB/ssuitesparse-4.  17% |#####                          | Time: 0:00:00  13.03 MB/ssuitesparse-4.  18% |#####                          | Time: 0:00:00  13.42 MB/ssuitesparse-4.  19% |#####                          | Time: 0:00:00  13.81 MB/ssuitesparse-4.  19% |######                         | Time: 0:00:00  14.18 MB/ssuitesparse-4.  20% |######                         | Time: 0:00:00  14.54 MB/ssuitesparse-4.  21% |######                         | Time: 0:00:00  14.89 MB/ssuitesparse-4.  22% |######                         | Time: 0:00:00  15.22 MB/ssuitesparse-4.  22% |#######                        | Time: 0:00:00  15.57 MB/ssuitesparse-4.  23% |#######                        | Time: 0:00:00  14.75 MB/ssuitesparse-4.  24% |#######                        | Time: 0:00:00  14.71 MB/ssuitesparse-4.  24% |#######                        | Time: 0:00:00  14.70 MB/ssuitesparse-4.  25% |#######                        | Time: 0:00:00  14.67 MB/ssuitesparse-4.  26% |########                       | Time: 0:00:00  14.57 MB/ssuitesparse-4.  27% |########                       | Time: 0:00:00  14.66 MB/ssuitesparse-4.  27% |########                       | Time: 0:00:00  14.77 MB/ssuitesparse-4.  28% |########                       | Time: 0:00:00  14.72 MB/ssuitesparse-4.  29% |#########                      | Time: 0:00:00  14.79 MB/ssuitesparse-4.  30% |#########                      | Time: 0:00:00  15.03 MB/ssuitesparse-4.  30% |#########                      | Time: 0:00:00  15.19 MB/ssuitesparse-4.  31% |#########                      | Time: 0:00:00  15.43 MB/ssuitesparse-4.  32% |##########                     | Time: 0:00:00  15.65 MB/ssuitesparse-4.  33% |##########                     | Time: 0:00:00  15.73 MB/ssuitesparse-4.  33% |##########                     | Time: 0:00:00  15.89 MB/ssuitesparse-4.  34% |##########                     | Time: 0:00:00  16.11 MB/ssuitesparse-4.  35% |##########                     | Time: 0:00:00  16.25 MB/ssuitesparse-4.  36% |###########                    | Time: 0:00:00  16.27 MB/ssuitesparse-4.  36% |###########                    | Time: 0:00:00  16.37 MB/ssuitesparse-4.  37% |###########                    | Time: 0:00:00  16.56 MB/ssuitesparse-4.  38% |###########                    | Time: 0:00:00  16.77 MB/ssuitesparse-4.  38% |############                   | Time: 0:00:00  16.97 MB/ssuitesparse-4.  39% |############                   | Time: 0:00:00  17.16 MB/ssuitesparse-4.  40% |############                   | Time: 0:00:00  17.36 MB/ssuitesparse-4.  41% |############                   | Time: 0:00:00  17.55 MB/ssuitesparse-4.  41% |############                   | Time: 0:00:00  17.76 MB/ssuitesparse-4.  42% |#############                  | Time: 0:00:00  17.96 MB/ssuitesparse-4.  43% |#############                  | Time: 0:00:00  18.15 MB/ssuitesparse-4.  44% |#############                  | Time: 0:00:00  18.09 MB/ssuitesparse-4.  44% |#############                  | Time: 0:00:00  18.28 MB/ssuitesparse-4.  45% |##############                 | Time: 0:00:00  18.47 MB/ssuitesparse-4.  46% |##############                 | Time: 0:00:00  18.66 MB/ssuitesparse-4.  47% |##############                 | Time: 0:00:00  18.85 MB/ssuitesparse-4.  47% |##############                 | Time: 0:00:00  19.03 MB/ssuitesparse-4.  48% |###############                | Time: 0:00:00  19.21 MB/ssuitesparse-4.  49% |###############                | Time: 0:00:00  19.39 MB/ssuitesparse-4.  49% |###############                | Time: 0:00:00  19.56 MB/ssuitesparse-4.  50% |###############                | Time: 0:00:00  19.73 MB/ssuitesparse-4.  51% |###############                | Time: 0:00:00  19.84 MB/ssuitesparse-4.  52% |################               | Time: 0:00:00  20.01 MB/ssuitesparse-4.  52% |################               | Time: 0:00:00  20.18 MB/ssuitesparse-4.  53% |################               | Time: 0:00:00  20.34 MB/ssuitesparse-4.  54% |################               | Time: 0:00:00  20.50 MB/ssuitesparse-4.  55% |#################              | Time: 0:00:00  20.65 MB/ssuitesparse-4.  55% |#################              | Time: 0:00:00  20.80 MB/ssuitesparse-4.  56% |#################              | Time: 0:00:00  20.94 MB/ssuitesparse-4.  57% |#################              | Time: 0:00:00  21.10 MB/ssuitesparse-4.  58% |##################             | Time: 0:00:00  21.26 MB/ssuitesparse-4.  58% |##################             | Time: 0:00:00  21.41 MB/ssuitesparse-4.  59% |##################             | Time: 0:00:00  21.58 MB/ssuitesparse-4.  60% |##################             | Time: 0:00:00  21.73 MB/ssuitesparse-4.  61% |##################             | Time: 0:00:00  21.89 MB/ssuitesparse-4.  61% |###################            | Time: 0:00:00  22.03 MB/ssuitesparse-4.  62% |###################            | Time: 0:00:00  22.17 MB/ssuitesparse-4.  63% |###################            | Time: 0:00:00  22.31 MB/ssuitesparse-4.  63% |###################            | Time: 0:00:00  22.44 MB/ssuitesparse-4.  64% |####################           | Time: 0:00:00  22.57 MB/ssuitesparse-4.  65% |####################           | Time: 0:00:00  22.70 MB/ssuitesparse-4.  66% |####################           | Time: 0:00:00  22.83 MB/ssuitesparse-4.  66% |####################           | Time: 0:00:00  22.97 MB/ssuitesparse-4.  67% |####################           | Time: 0:00:00  23.09 MB/ssuitesparse-4.  68% |#####################          | Time: 0:00:00  23.27 MB/ssuitesparse-4.  69% |#####################          | Time: 0:00:00  23.40 MB/ssuitesparse-4.  69% |#####################          | Time: 0:00:00  23.54 MB/ssuitesparse-4.  70% |#####################          | Time: 0:00:00  23.68 MB/ssuitesparse-4.  71% |######################         | Time: 0:00:00  23.77 MB/ssuitesparse-4.  72% |######################         | Time: 0:00:00  23.84 MB/ssuitesparse-4.  72% |######################         | Time: 0:00:00  23.96 MB/ssuitesparse-4.  73% |######################         | Time: 0:00:00  24.09 MB/ssuitesparse-4.  74% |#######################        | Time: 0:00:00  24.21 MB/ssuitesparse-4.  74% |#######################        | Time: 0:00:00  24.33 MB/ssuitesparse-4.  75% |#######################        | Time: 0:00:00  24.37 MB/ssuitesparse-4.  76% |#######################        | Time: 0:00:00  24.52 MB/ssuitesparse-4.  77% |#######################        | Time: 0:00:00  24.63 MB/ssuitesparse-4.  77% |########################       | Time: 0:00:00  24.75 MB/ssuitesparse-4.  78% |########################       | Time: 0:00:00  24.85 MB/ssuitesparse-4.  79% |########################       | Time: 0:00:00  24.97 MB/ssuitesparse-4.  80% |########################       | Time: 0:00:00  25.09 MB/ssuitesparse-4.  80% |#########################      | Time: 0:00:00  25.21 MB/ssuitesparse-4.  81% |#########################      | Time: 0:00:00  25.32 MB/ssuitesparse-4.  82% |#########################      | Time: 0:00:00  25.42 MB/ssuitesparse-4.  83% |#########################      | Time: 0:00:00  25.53 MB/ssuitesparse-4.  83% |#########################      | Time: 0:00:00  25.64 MB/ssuitesparse-4.  84% |##########################     | Time: 0:00:00  25.75 MB/ssuitesparse-4.  85% |##########################     | Time: 0:00:00  25.86 MB/ssuitesparse-4.  86% |##########################     | Time: 0:00:00  25.95 MB/ssuitesparse-4.  86% |##########################     | Time: 0:00:00  26.05 MB/ssuitesparse-4.  87% |###########################    | Time: 0:00:00  26.15 MB/ssuitesparse-4.  88% |###########################    | Time: 0:00:00  26.25 MB/ssuitesparse-4.  88% |###########################    | Time: 0:00:00  26.34 MB/ssuitesparse-4.  89% |###########################    | Time: 0:00:00  26.44 MB/ssuitesparse-4.  90% |############################   | Time: 0:00:00  26.54 MB/ssuitesparse-4.  91% |############################   | Time: 0:00:00  26.65 MB/ssuitesparse-4.  91% |############################   | Time: 0:00:00  26.75 MB/ssuitesparse-4.  92% |############################   | Time: 0:00:00  26.83 MB/ssuitesparse-4.  93% |############################   | Time: 0:00:00  26.93 MB/ssuitesparse-4.  94% |#############################  | Time: 0:00:00  26.76 MB/ssuitesparse-4.  94% |#############################  | Time: 0:00:00  26.85 MB/ssuitesparse-4.  95% |#############################  | Time: 0:00:00  26.94 MB/ssuitesparse-4.  96% |#############################  | Time: 0:00:00  27.03 MB/ssuitesparse-4.  97% |############################## | Time: 0:00:00  27.12 MB/ssuitesparse-4.  97% |############################## | Time: 0:00:00  27.19 MB/ssuitesparse-4.  98% |############################## | Time: 0:00:00  27.28 MB/ssuitesparse-4.  99% |############################## | Time: 0:00:00  27.36 MB/ssuitesparse-4.  99% |############################## | Time: 0:00:00  27.45 MB/ssuitesparse-4. 100% |###############################| Time: 0:00:00  27.33 MB/ssuitesparse-4. 100% |###############################| Time: 0:00:00  27.25 MB/s
cvxopt-1.1.9-p   0% |                              | ETA:  --:--:--   0.00  B/scvxopt-1.1.9-p   2% |                               | Time: 0:00:00  23.78 MB/scvxopt-1.1.9-p   4% |#                              | Time: 0:00:00   2.55 MB/scvxopt-1.1.9-p   6% |##                             | Time: 0:00:00   3.68 MB/scvxopt-1.1.9-p   9% |##                             | Time: 0:00:00   2.50 MB/scvxopt-1.1.9-p  11% |###                            | Time: 0:00:00   3.07 MB/scvxopt-1.1.9-p  13% |####                           | Time: 0:00:00   3.63 MB/scvxopt-1.1.9-p  16% |#####                          | Time: 0:00:00   2.88 MB/scvxopt-1.1.9-p  18% |#####                          | Time: 0:00:00   3.24 MB/scvxopt-1.1.9-p  20% |######                         | Time: 0:00:00   3.60 MB/scvxopt-1.1.9-p  23% |#######                        | Time: 0:00:00   3.09 MB/scvxopt-1.1.9-p  25% |#######                        | Time: 0:00:00   3.36 MB/scvxopt-1.1.9-p  27% |########                       | Time: 0:00:00   3.64 MB/scvxopt-1.1.9-p  30% |#########                      | Time: 0:00:00   3.22 MB/scvxopt-1.1.9-p  32% |##########                     | Time: 0:00:00   3.44 MB/scvxopt-1.1.9-p  34% |##########                     | Time: 0:00:00   3.66 MB/scvxopt-1.1.9-p  37% |###########                    | Time: 0:00:00   3.88 MB/scvxopt-1.1.9-p  39% |############                   | Time: 0:00:00   3.52 MB/scvxopt-1.1.9-p  41% |#############                  | Time: 0:00:00   3.68 MB/scvxopt-1.1.9-p  44% |#############                  | Time: 0:00:00   3.86 MB/scvxopt-1.1.9-p  46% |##############                 | Time: 0:00:00   4.04 MB/scvxopt-1.1.9-p  48% |###############                | Time: 0:00:00   4.22 MB/scvxopt-1.1.9-p  51% |###############                | Time: 0:00:00   3.88 MB/scvxopt-1.1.9-p  53% |################               | Time: 0:00:00   4.03 MB/scvxopt-1.1.9-p  55% |#################              | Time: 0:00:00   4.19 MB/scvxopt-1.1.9-p  58% |##################             | Time: 0:00:00   4.35 MB/scvxopt-1.1.9-p  60% |##################             | Time: 0:00:00   4.51 MB/scvxopt-1.1.9-p  62% |###################            | Time: 0:00:00   4.18 MB/scvxopt-1.1.9-p  65% |####################           | Time: 0:00:00   4.29 MB/scvxopt-1.1.9-p  67% |####################           | Time: 0:00:00   4.43 MB/scvxopt-1.1.9-p  69% |#####################          | Time: 0:00:00   4.56 MB/scvxopt-1.1.9-p  72% |######################         | Time: 0:00:00   4.69 MB/scvxopt-1.1.9-p  74% |#######################        | Time: 0:00:00   4.83 MB/scvxopt-1.1.9-p  76% |#######################        | Time: 0:00:00   4.96 MB/scvxopt-1.1.9-p  79% |########################       | Time: 0:00:00   4.67 MB/scvxopt-1.1.9-p  81% |#########################      | Time: 0:00:00   4.77 MB/scvxopt-1.1.9-p  83% |##########################     | Time: 0:00:00   4.88 MB/scvxopt-1.1.9-p  86% |##########################     | Time: 0:00:00   5.01 MB/scvxopt-1.1.9-p  88% |###########################    | Time: 0:00:00   5.13 MB/scvxopt-1.1.9-p  90% |############################   | Time: 0:00:00   5.25 MB/scvxopt-1.1.9-p  93% |############################   | Time: 0:00:00   4.95 MB/scvxopt-1.1.9-p  95% |#############################  | Time: 0:00:00   5.05 MB/scvxopt-1.1.9-p  97% |############################## | Time: 0:00:00   5.15 MB/scvxopt-1.1.9-p 100% |###############################| Time: 0:00:00   5.25 MB/scvxopt-1.1.9-p 100% |###############################| Time: 0:00:00   5.24 MB/s
WARNING: pyeval is deprecated.  Use py"{'l':l,'q':list(q),'s':list(s)}" instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.6/PyCall/src/pyeval.jl:58
 [3] (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 [4] #conelp#1(::Array{Any,1}, ::Array{Any,1}, ::Dict{Any,Any}, ::Function, ::Array{Float64,2}, ::SparseMatrixCSC{Float64,Int64}, ::Array{Float64,2}, ::Dict{String,Any}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:25
 [5] conelp(::Array{Float64,2}, ::SparseMatrixCSC{Float64,Int64}, ::Array{Float64,2}, ::Dict{String,Any}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:18
 [6] include_from_node1(::String) at ./loading.jl:569
 [7] include(::String) at ./sysimg.jl:14
 [8] include_from_node1(::String) at ./loading.jl:569
 [9] include(::String) at ./sysimg.jl:14
 [10] process_options(::Base.JLOptions) at ./client.jl:305
 [11] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/CVXOPT/test/test1.jl, in expression starting on line 13
WARNING: pyeval is deprecated.  Use py"x.size" instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.6/PyCall/src/pyeval.jl:58
 [3] (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 [4] cvxopt_to_julia(::PyCall.PyObject) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:227
 [5] #conelp#1(::Array{Any,1}, ::Array{Any,1}, ::Dict{Any,Any}, ::Function, ::Array{Float64,2}, ::SparseMatrixCSC{Float64,Int64}, ::Array{Float64,2}, ::Dict{String,Any}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:32
 [6] conelp(::Array{Float64,2}, ::SparseMatrixCSC{Float64,Int64}, ::Array{Float64,2}, ::Dict{String,Any}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:18
 [7] include_from_node1(::String) at ./loading.jl:569
 [8] include(::String) at ./sysimg.jl:14
 [9] include_from_node1(::String) at ./loading.jl:569
 [10] include(::String) at ./sysimg.jl:14
 [11] process_options(::Base.JLOptions) at ./client.jl:305
 [12] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/CVXOPT/test/test1.jl, in expression starting on line 13
WARNING: pyeval is deprecated.  Use py"list(x[:])" instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.6/PyCall/src/pyeval.jl:58
 [3] (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 [4] cvxopt_to_julia(::PyCall.PyObject) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:228
 [5] #conelp#1(::Array{Any,1}, ::Array{Any,1}, ::Dict{Any,Any}, ::Function, ::Array{Float64,2}, ::SparseMatrixCSC{Float64,Int64}, ::Array{Float64,2}, ::Dict{String,Any}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:32
 [6] conelp(::Array{Float64,2}, ::SparseMatrixCSC{Float64,Int64}, ::Array{Float64,2}, ::Dict{String,Any}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:18
 [7] include_from_node1(::String) at ./loading.jl:569
 [8] include(::String) at ./sysimg.jl:14
 [9] include_from_node1(::String) at ./loading.jl:569
 [10] include(::String) at ./sysimg.jl:14
 [11] process_options(::Base.JLOptions) at ./client.jl:305
 [12] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/CVXOPT/test/test1.jl, in expression starting on line 13
WARNING: pyeval is deprecated.  Use py"x.size" instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.6/PyCall/src/pyeval.jl:58
 [3] (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 [4] cvxopt_to_julia(::PyCall.PyObject) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:227
 [5] #conelp#1(::Array{Any,1}, ::Array{Any,1}, ::Dict{Any,Any}, ::Function, ::Array{Float64,2}, ::SparseMatrixCSC{Float64,Int64}, ::Array{Float64,2}, ::Dict{String,Any}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:33
 [6] conelp(::Array{Float64,2}, ::SparseMatrixCSC{Float64,Int64}, ::Array{Float64,2}, ::Dict{String,Any}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:18
 [7] include_from_node1(::String) at ./loading.jl:569
 [8] include(::String) at ./sysimg.jl:14
 [9] include_from_node1(::String) at ./loading.jl:569
 [10] include(::String) at ./sysimg.jl:14
 [11] process_options(::Base.JLOptions) at ./client.jl:305
 [12] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/CVXOPT/test/test1.jl, in expression starting on line 13
WARNING: pyeval is deprecated.  Use py"list(x[:])" instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.6/PyCall/src/pyeval.jl:58
 [3] (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 [4] cvxopt_to_julia(::PyCall.PyObject) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:228
 [5] #conelp#1(::Array{Any,1}, ::Array{Any,1}, ::Dict{Any,Any}, ::Function, ::Array{Float64,2}, ::SparseMatrixCSC{Float64,Int64}, ::Array{Float64,2}, ::Dict{String,Any}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:33
 [6] conelp(::Array{Float64,2}, ::SparseMatrixCSC{Float64,Int64}, ::Array{Float64,2}, ::Dict{String,Any}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:18
 [7] include_from_node1(::String) at ./loading.jl:569
 [8] include(::String) at ./sysimg.jl:14
 [9] include_from_node1(::String) at ./loading.jl:569
 [10] include(::String) at ./sysimg.jl:14
 [11] process_options(::Base.JLOptions) at ./client.jl:305
 [12] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/CVXOPT/test/test1.jl, in expression starting on line 13
WARNING: pyeval is deprecated.  Use py"x.size" instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.6/PyCall/src/pyeval.jl:58
 [3] (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 [4] cvxopt_to_julia(::PyCall.PyObject) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:227
 [5] #conelp#1(::Array{Any,1}, ::Array{Any,1}, ::Dict{Any,Any}, ::Function, ::Array{Float64,2}, ::SparseMatrixCSC{Float64,Int64}, ::Array{Float64,2}, ::Dict{String,Any}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:34
 [6] conelp(::Array{Float64,2}, ::SparseMatrixCSC{Float64,Int64}, ::Array{Float64,2}, ::Dict{String,Any}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:18
 [7] include_from_node1(::String) at ./loading.jl:569
 [8] include(::String) at ./sysimg.jl:14
 [9] include_from_node1(::String) at ./loading.jl:569
 [10] include(::String) at ./sysimg.jl:14
 [11] process_options(::Base.JLOptions) at ./client.jl:305
 [12] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/CVXOPT/test/test1.jl, in expression starting on line 13
WARNING: pyeval is deprecated.  Use py"list(x[:])" instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.6/PyCall/src/pyeval.jl:58
 [3] (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 [4] cvxopt_to_julia(::PyCall.PyObject) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:228
 [5] #conelp#1(::Array{Any,1}, ::Array{Any,1}, ::Dict{Any,Any}, ::Function, ::Array{Float64,2}, ::SparseMatrixCSC{Float64,Int64}, ::Array{Float64,2}, ::Dict{String,Any}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:34
 [6] conelp(::Array{Float64,2}, ::SparseMatrixCSC{Float64,Int64}, ::Array{Float64,2}, ::Dict{String,Any}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:18
 [7] include_from_node1(::String) at ./loading.jl:569
 [8] include(::String) at ./sysimg.jl:14
 [9] include_from_node1(::String) at ./loading.jl:569
 [10] include(::String) at ./sysimg.jl:14
 [11] process_options(::Base.JLOptions) at ./client.jl:305
 [12] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/CVXOPT/test/test1.jl, in expression starting on line 13
WARNING: pyeval is deprecated.  Use py"x.size" instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.6/PyCall/src/pyeval.jl:58
 [3] (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 [4] cvxopt_to_julia(::PyCall.PyObject) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:227
 [5] #conelp#1(::Array{Any,1}, ::Array{Any,1}, ::Dict{Any,Any}, ::Function, ::Array{Float64,2}, ::SparseMatrixCSC{Float64,Int64}, ::Array{Float64,2}, ::Dict{String,Any}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:35
 [6] conelp(::Array{Float64,2}, ::SparseMatrixCSC{Float64,Int64}, ::Array{Float64,2}, ::Dict{String,Any}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:18
 [7] include_from_node1(::String) at ./loading.jl:569
 [8] include(::String) at ./sysimg.jl:14
 [9] include_from_node1(::String) at ./loading.jl:569
 [10] include(::String) at ./sysimg.jl:14
 [11] process_options(::Base.JLOptions) at ./client.jl:305
 [12] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/CVXOPT/test/test1.jl, in expression starting on line 13
WARNING: pyeval is deprecated.  Use py"list(x[:])" instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.6/PyCall/src/pyeval.jl:58
 [3] (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 [4] cvxopt_to_julia(::PyCall.PyObject) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:228
 [5] #conelp#1(::Array{Any,1}, ::Array{Any,1}, ::Dict{Any,Any}, ::Function, ::Array{Float64,2}, ::SparseMatrixCSC{Float64,Int64}, ::Array{Float64,2}, ::Dict{String,Any}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:35
 [6] conelp(::Array{Float64,2}, ::SparseMatrixCSC{Float64,Int64}, ::Array{Float64,2}, ::Dict{String,Any}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:18
 [7] include_from_node1(::String) at ./loading.jl:569
 [8] include(::String) at ./sysimg.jl:14
 [9] include_from_node1(::String) at ./loading.jl:569
 [10] include(::String) at ./sysimg.jl:14
 [11] process_options(::Base.JLOptions) at ./client.jl:305
 [12] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/CVXOPT/test/test1.jl, in expression starting on line 13
WARNING: pyeval is deprecated.  Use py"{'l':l,'q':list(q),'s':list(s)}" instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.6/PyCall/src/pyeval.jl:58
 [3] (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 [4] #coneqp#2(::Array{Any,1}, ::Array{Any,1}, ::Dict{Any,Any}, ::Function, ::Array{Float64,2}, ::Array{Float64,1}, ::SparseMatrixCSC{Float64,Int64}, ::Array{Float64,2}, ::Dict{String,Any}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:54
 [5] coneqp(::Array{Float64,2}, ::Array{Float64,1}, ::SparseMatrixCSC{Float64,Int64}, ::Array{Float64,2}, ::Dict{String,Any}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:46
 [6] include_from_node1(::String) at ./loading.jl:569
 [7] include(::String) at ./sysimg.jl:14
 [8] include_from_node1(::String) at ./loading.jl:569
 [9] include(::String) at ./sysimg.jl:14
 [10] process_options(::Base.JLOptions) at ./client.jl:305
 [11] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/CVXOPT/test/test2.jl, in expression starting on line 15
WARNING: pyeval is deprecated.  Use py"x.size" instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.6/PyCall/src/pyeval.jl:58
 [3] (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 [4] cvxopt_to_julia(::PyCall.PyObject) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:227
 [5] #coneqp#2(::Array{Any,1}, ::Array{Any,1}, ::Dict{Any,Any}, ::Function, ::Array{Float64,2}, ::Array{Float64,1}, ::SparseMatrixCSC{Float64,Int64}, ::Array{Float64,2}, ::Dict{String,Any}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:61
 [6] coneqp(::Array{Float64,2}, ::Array{Float64,1}, ::SparseMatrixCSC{Float64,Int64}, ::Array{Float64,2}, ::Dict{String,Any}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:46
 [7] include_from_node1(::String) at ./loading.jl:569
 [8] include(::String) at ./sysimg.jl:14
 [9] include_from_node1(::String) at ./loading.jl:569
 [10] include(::String) at ./sysimg.jl:14
 [11] process_options(::Base.JLOptions) at ./client.jl:305
 [12] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/CVXOPT/test/test2.jl, in expression starting on line 15
WARNING: pyeval is deprecated.  Use py"list(x[:])" instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.6/PyCall/src/pyeval.jl:58
 [3] (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 [4] cvxopt_to_julia(::PyCall.PyObject) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:228
 [5] #coneqp#2(::Array{Any,1}, ::Array{Any,1}, ::Dict{Any,Any}, ::Function, ::Array{Float64,2}, ::Array{Float64,1}, ::SparseMatrixCSC{Float64,Int64}, ::Array{Float64,2}, ::Dict{String,Any}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:61
 [6] coneqp(::Array{Float64,2}, ::Array{Float64,1}, ::SparseMatrixCSC{Float64,Int64}, ::Array{Float64,2}, ::Dict{String,Any}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:46
 [7] include_from_node1(::String) at ./loading.jl:569
 [8] include(::String) at ./sysimg.jl:14
 [9] include_from_node1(::String) at ./loading.jl:569
 [10] include(::String) at ./sysimg.jl:14
 [11] process_options(::Base.JLOptions) at ./client.jl:305
 [12] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/CVXOPT/test/test2.jl, in expression starting on line 15
WARNING: pyeval is deprecated.  Use py"x.size" instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.6/PyCall/src/pyeval.jl:58
 [3] (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 [4] cvxopt_to_julia(::PyCall.PyObject) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:227
 [5] #coneqp#2(::Array{Any,1}, ::Array{Any,1}, ::Dict{Any,Any}, ::Function, ::Array{Float64,2}, ::Array{Float64,1}, ::SparseMatrixCSC{Float64,Int64}, ::Array{Float64,2}, ::Dict{String,Any}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:62
 [6] coneqp(::Array{Float64,2}, ::Array{Float64,1}, ::SparseMatrixCSC{Float64,Int64}, ::Array{Float64,2}, ::Dict{String,Any}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:46
 [7] include_from_node1(::String) at ./loading.jl:569
 [8] include(::String) at ./sysimg.jl:14
 [9] include_from_node1(::String) at ./loading.jl:569
 [10] include(::String) at ./sysimg.jl:14
 [11] process_options(::Base.JLOptions) at ./client.jl:305
 [12] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/CVXOPT/test/test2.jl, in expression starting on line 15
WARNING: pyeval is deprecated.  Use py"list(x[:])" instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.6/PyCall/src/pyeval.jl:58
 [3] (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 [4] cvxopt_to_julia(::PyCall.PyObject) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:228
 [5] #coneqp#2(::Array{Any,1}, ::Array{Any,1}, ::Dict{Any,Any}, ::Function, ::Array{Float64,2}, ::Array{Float64,1}, ::SparseMatrixCSC{Float64,Int64}, ::Array{Float64,2}, ::Dict{String,Any}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:62
 [6] coneqp(::Array{Float64,2}, ::Array{Float64,1}, ::SparseMatrixCSC{Float64,Int64}, ::Array{Float64,2}, ::Dict{String,Any}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:46
 [7] include_from_node1(::String) at ./loading.jl:569
 [8] include(::String) at ./sysimg.jl:14
 [9] include_from_node1(::String) at ./loading.jl:569
 [10] include(::String) at ./sysimg.jl:14
 [11] process_options(::Base.JLOptions) at ./client.jl:305
 [12] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/CVXOPT/test/test2.jl, in expression starting on line 15
WARNING: pyeval is deprecated.  Use py"x.size" instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.6/PyCall/src/pyeval.jl:58
 [3] (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 [4] cvxopt_to_julia(::PyCall.PyObject) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:227
 [5] #coneqp#2(::Array{Any,1}, ::Array{Any,1}, ::Dict{Any,Any}, ::Function, ::Array{Float64,2}, ::Array{Float64,1}, ::SparseMatrixCSC{Float64,Int64}, ::Array{Float64,2}, ::Dict{String,Any}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:63
 [6] coneqp(::Array{Float64,2}, ::Array{Float64,1}, ::SparseMatrixCSC{Float64,Int64}, ::Array{Float64,2}, ::Dict{String,Any}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:46
 [7] include_from_node1(::String) at ./loading.jl:569
 [8] include(::String) at ./sysimg.jl:14
 [9] include_from_node1(::String) at ./loading.jl:569
 [10] include(::String) at ./sysimg.jl:14
 [11] process_options(::Base.JLOptions) at ./client.jl:305
 [12] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/CVXOPT/test/test2.jl, in expression starting on line 15
WARNING: pyeval is deprecated.  Use py"list(x[:])" instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.6/PyCall/src/pyeval.jl:58
 [3] (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 [4] cvxopt_to_julia(::PyCall.PyObject) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:228
 [5] #coneqp#2(::Array{Any,1}, ::Array{Any,1}, ::Dict{Any,Any}, ::Function, ::Array{Float64,2}, ::Array{Float64,1}, ::SparseMatrixCSC{Float64,Int64}, ::Array{Float64,2}, ::Dict{String,Any}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:63
 [6] coneqp(::Array{Float64,2}, ::Array{Float64,1}, ::SparseMatrixCSC{Float64,Int64}, ::Array{Float64,2}, ::Dict{String,Any}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:46
 [7] include_from_node1(::String) at ./loading.jl:569
 [8] include(::String) at ./sysimg.jl:14
 [9] include_from_node1(::String) at ./loading.jl:569
 [10] include(::String) at ./sysimg.jl:14
 [11] process_options(::Base.JLOptions) at ./client.jl:305
 [12] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/CVXOPT/test/test2.jl, in expression starting on line 15
WARNING: pyeval is deprecated.  Use py"x.size" instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.6/PyCall/src/pyeval.jl:58
 [3] (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 [4] cvxopt_to_julia(::PyCall.PyObject) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:227
 [5] #coneqp#2(::Array{Any,1}, ::Array{Any,1}, ::Dict{Any,Any}, ::Function, ::Array{Float64,2}, ::Array{Float64,1}, ::SparseMatrixCSC{Float64,Int64}, ::Array{Float64,2}, ::Dict{String,Any}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:64
 [6] coneqp(::Array{Float64,2}, ::Array{Float64,1}, ::SparseMatrixCSC{Float64,Int64}, ::Array{Float64,2}, ::Dict{String,Any}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:46
 [7] include_from_node1(::String) at ./loading.jl:569
 [8] include(::String) at ./sysimg.jl:14
 [9] include_from_node1(::String) at ./loading.jl:569
 [10] include(::String) at ./sysimg.jl:14
 [11] process_options(::Base.JLOptions) at ./client.jl:305
 [12] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/CVXOPT/test/test2.jl, in expression starting on line 15
WARNING: pyeval is deprecated.  Use py"list(x[:])" instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.6/PyCall/src/pyeval.jl:58
 [3] (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 [4] cvxopt_to_julia(::PyCall.PyObject) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:228
 [5] #coneqp#2(::Array{Any,1}, ::Array{Any,1}, ::Dict{Any,Any}, ::Function, ::Array{Float64,2}, ::Array{Float64,1}, ::SparseMatrixCSC{Float64,Int64}, ::Array{Float64,2}, ::Dict{String,Any}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:64
 [6] coneqp(::Array{Float64,2}, ::Array{Float64,1}, ::SparseMatrixCSC{Float64,Int64}, ::Array{Float64,2}, ::Dict{String,Any}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:46
 [7] include_from_node1(::String) at ./loading.jl:569
 [8] include(::String) at ./sysimg.jl:14
 [9] include_from_node1(::String) at ./loading.jl:569
 [10] include(::String) at ./sysimg.jl:14
 [11] process_options(::Base.JLOptions) at ./client.jl:305
 [12] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/CVXOPT/test/test2.jl, in expression starting on line 15
WARNING: pyeval is deprecated.  Use py"x.size" instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.6/PyCall/src/pyeval.jl:58
 [3] (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 [4] cvxopt_to_julia(::PyCall.PyObject) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:227
 [5] #lp#3(::Array{Any,1}, ::Array{Any,1}, ::Dict{Any,Any}, ::Function, ::Array{Float64,1}, ::Array{Float64,2}, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:88
 [6] lp(::Array{Float64,1}, ::Array{Float64,2}, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:75
 [7] include_from_node1(::String) at ./loading.jl:569
 [8] include(::String) at ./sysimg.jl:14
 [9] include_from_node1(::String) at ./loading.jl:569
 [10] include(::String) at ./sysimg.jl:14
 [11] process_options(::Base.JLOptions) at ./client.jl:305
 [12] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/CVXOPT/test/test3.jl, in expression starting on line 5
WARNING: pyeval is deprecated.  Use py"list(x[:])" instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.6/PyCall/src/pyeval.jl:58
 [3] (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 [4] cvxopt_to_julia(::PyCall.PyObject) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:228
 [5] #lp#3(::Array{Any,1}, ::Array{Any,1}, ::Dict{Any,Any}, ::Function, ::Array{Float64,1}, ::Array{Float64,2}, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:88
 [6] lp(::Array{Float64,1}, ::Array{Float64,2}, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:75
 [7] include_from_node1(::String) at ./loading.jl:569
 [8] include(::String) at ./sysimg.jl:14
 [9] include_from_node1(::String) at ./loading.jl:569
 [10] include(::String) at ./sysimg.jl:14
 [11] process_options(::Base.JLOptions) at ./client.jl:305
 [12] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/CVXOPT/test/test3.jl, in expression starting on line 5
WARNING: pyeval is deprecated.  Use py"x.size" instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.6/PyCall/src/pyeval.jl:58
 [3] (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 [4] cvxopt_to_julia(::PyCall.PyObject) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:227
 [5] #lp#3(::Array{Any,1}, ::Array{Any,1}, ::Dict{Any,Any}, ::Function, ::Array{Float64,1}, ::Array{Float64,2}, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:89
 [6] lp(::Array{Float64,1}, ::Array{Float64,2}, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:75
 [7] include_from_node1(::String) at ./loading.jl:569
 [8] include(::String) at ./sysimg.jl:14
 [9] include_from_node1(::String) at ./loading.jl:569
 [10] include(::String) at ./sysimg.jl:14
 [11] process_options(::Base.JLOptions) at ./client.jl:305
 [12] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/CVXOPT/test/test3.jl, in expression starting on line 5
WARNING: pyeval is deprecated.  Use py"list(x[:])" instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.6/PyCall/src/pyeval.jl:58
 [3] (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 [4] cvxopt_to_julia(::PyCall.PyObject) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:228
 [5] #lp#3(::Array{Any,1}, ::Array{Any,1}, ::Dict{Any,Any}, ::Function, ::Array{Float64,1}, ::Array{Float64,2}, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:89
 [6] lp(::Array{Float64,1}, ::Array{Float64,2}, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:75
 [7] include_from_node1(::String) at ./loading.jl:569
 [8] include(::String) at ./sysimg.jl:14
 [9] include_from_node1(::String) at ./loading.jl:569
 [10] include(::String) at ./sysimg.jl:14
 [11] process_options(::Base.JLOptions) at ./client.jl:305
 [12] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/CVXOPT/test/test3.jl, in expression starting on line 5
WARNING: pyeval is deprecated.  Use py"x.size" instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.6/PyCall/src/pyeval.jl:58
 [3] (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 [4] cvxopt_to_julia(::PyCall.PyObject) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:227
 [5] #lp#3(::Array{Any,1}, ::Array{Any,1}, ::Dict{Any,Any}, ::Function, ::Array{Float64,1}, ::Array{Float64,2}, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:90
 [6] lp(::Array{Float64,1}, ::Array{Float64,2}, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:75
 [7] include_from_node1(::String) at ./loading.jl:569
 [8] include(::String) at ./sysimg.jl:14
 [9] include_from_node1(::String) at ./loading.jl:569
 [10] include(::String) at ./sysimg.jl:14
 [11] process_options(::Base.JLOptions) at ./client.jl:305
 [12] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/CVXOPT/test/test3.jl, in expression starting on line 5
WARNING: pyeval is deprecated.  Use py"list(x[:])" instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.6/PyCall/src/pyeval.jl:58
 [3] (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 [4] cvxopt_to_julia(::PyCall.PyObject) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:228
 [5] #lp#3(::Array{Any,1}, ::Array{Any,1}, ::Dict{Any,Any}, ::Function, ::Array{Float64,1}, ::Array{Float64,2}, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:90
 [6] lp(::Array{Float64,1}, ::Array{Float64,2}, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:75
 [7] include_from_node1(::String) at ./loading.jl:569
 [8] include(::String) at ./sysimg.jl:14
 [9] include_from_node1(::String) at ./loading.jl:569
 [10] include(::String) at ./sysimg.jl:14
 [11] process_options(::Base.JLOptions) at ./client.jl:305
 [12] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/CVXOPT/test/test3.jl, in expression starting on line 5
WARNING: pyeval is deprecated.  Use py"x.size" instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.6/PyCall/src/pyeval.jl:58
 [3] (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 [4] cvxopt_to_julia(::PyCall.PyObject) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:227
 [5] #lp#3(::Array{Any,1}, ::Array{Any,1}, ::Dict{Any,Any}, ::Function, ::Array{Float64,1}, ::Array{Float64,2}, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:91
 [6] lp(::Array{Float64,1}, ::Array{Float64,2}, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:75
 [7] include_from_node1(::String) at ./loading.jl:569
 [8] include(::String) at ./sysimg.jl:14
 [9] include_from_node1(::String) at ./loading.jl:569
 [10] include(::String) at ./sysimg.jl:14
 [11] process_options(::Base.JLOptions) at ./client.jl:305
 [12] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/CVXOPT/test/test3.jl, in expression starting on line 5
WARNING: pyeval is deprecated.  Use py"list(x[:])" instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.6/PyCall/src/pyeval.jl:58
 [3] (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 [4] cvxopt_to_julia(::PyCall.PyObject) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:228
 [5] #lp#3(::Array{Any,1}, ::Array{Any,1}, ::Dict{Any,Any}, ::Function, ::Array{Float64,1}, ::Array{Float64,2}, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:91
 [6] lp(::Array{Float64,1}, ::Array{Float64,2}, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:75
 [7] include_from_node1(::String) at ./loading.jl:569
 [8] include(::String) at ./sysimg.jl:14
 [9] include_from_node1(::String) at ./loading.jl:569
 [10] include(::String) at ./sysimg.jl:14
 [11] process_options(::Base.JLOptions) at ./client.jl:305
 [12] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/CVXOPT/test/test3.jl, in expression starting on line 5
WARNING: pyeval is deprecated.  Use py"x.size" instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.6/PyCall/src/pyeval.jl:58
 [3] (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 [4] cvxopt_to_julia(::PyCall.PyObject) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:227
 [5] #socp#5(::Array{Any,1}, ::Array{Any,1}, ::Dict{Any,Any}, ::Function, ::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,1},Array{Float64,1}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:152
 [6] socp(::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,1},Array{Float64,1}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:130
 [7] include_from_node1(::String) at ./loading.jl:569
 [8] include(::String) at ./sysimg.jl:14
 [9] include_from_node1(::String) at ./loading.jl:569
 [10] include(::String) at ./sysimg.jl:14
 [11] process_options(::Base.JLOptions) at ./client.jl:305
 [12] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/CVXOPT/test/test4.jl, in expression starting on line 7
WARNING: pyeval is deprecated.  Use py"list(x[:])" instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.6/PyCall/src/pyeval.jl:58
 [3] (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 [4] cvxopt_to_julia(::PyCall.PyObject) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:228
 [5] #socp#5(::Array{Any,1}, ::Array{Any,1}, ::Dict{Any,Any}, ::Function, ::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,1},Array{Float64,1}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:152
 [6] socp(::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,1},Array{Float64,1}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:130
 [7] include_from_node1(::String) at ./loading.jl:569
 [8] include(::String) at ./sysimg.jl:14
 [9] include_from_node1(::String) at ./loading.jl:569
 [10] include(::String) at ./sysimg.jl:14
 [11] process_options(::Base.JLOptions) at ./client.jl:305
 [12] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/CVXOPT/test/test4.jl, in expression starting on line 7
WARNING: pyeval is deprecated.  Use py"x.size" instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.6/PyCall/src/pyeval.jl:58
 [3] (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 [4] cvxopt_to_julia(::PyCall.PyObject) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:227
 [5] #socp#5(::Array{Any,1}, ::Array{Any,1}, ::Dict{Any,Any}, ::Function, ::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,1},Array{Float64,1}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:153
 [6] socp(::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,1},Array{Float64,1}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:130
 [7] include_from_node1(::String) at ./loading.jl:569
 [8] include(::String) at ./sysimg.jl:14
 [9] include_from_node1(::String) at ./loading.jl:569
 [10] include(::String) at ./sysimg.jl:14
 [11] process_options(::Base.JLOptions) at ./client.jl:305
 [12] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/CVXOPT/test/test4.jl, in expression starting on line 7
WARNING: pyeval is deprecated.  Use py"list(x[:])" instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.6/PyCall/src/pyeval.jl:58
 [3] (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 [4] cvxopt_to_julia(::PyCall.PyObject) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:228
 [5] #socp#5(::Array{Any,1}, ::Array{Any,1}, ::Dict{Any,Any}, ::Function, ::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,1},Array{Float64,1}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:153
 [6] socp(::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,1},Array{Float64,1}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:130
 [7] include_from_node1(::String) at ./loading.jl:569
 [8] include(::String) at ./sysimg.jl:14
 [9] include_from_node1(::String) at ./loading.jl:569
 [10] include(::String) at ./sysimg.jl:14
 [11] process_options(::Base.JLOptions) at ./client.jl:305
 [12] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/CVXOPT/test/test4.jl, in expression starting on line 7
WARNING: pyeval is deprecated.  Use py"x.size" instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.6/PyCall/src/pyeval.jl:58
 [3] (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 [4] cvxopt_to_julia(::PyCall.PyObject) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:227
 [5] #socp#5(::Array{Any,1}, ::Array{Any,1}, ::Dict{Any,Any}, ::Function, ::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,1},Array{Float64,1}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:154
 [6] socp(::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,1},Array{Float64,1}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:130
 [7] include_from_node1(::String) at ./loading.jl:569
 [8] include(::String) at ./sysimg.jl:14
 [9] include_from_node1(::String) at ./loading.jl:569
 [10] include(::String) at ./sysimg.jl:14
 [11] process_options(::Base.JLOptions) at ./client.jl:305
 [12] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/CVXOPT/test/test4.jl, in expression starting on line 7
WARNING: pyeval is deprecated.  Use py"list(x[:])" instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.6/PyCall/src/pyeval.jl:58
 [3] (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 [4] cvxopt_to_julia(::PyCall.PyObject) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:228
 [5] #socp#5(::Array{Any,1}, ::Array{Any,1}, ::Dict{Any,Any}, ::Function, ::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,1},Array{Float64,1}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:154
 [6] socp(::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,1},Array{Float64,1}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:130
 [7] include_from_node1(::String) at ./loading.jl:569
 [8] include(::String) at ./sysimg.jl:14
 [9] include_from_node1(::String) at ./loading.jl:569
 [10] include(::String) at ./sysimg.jl:14
 [11] process_options(::Base.JLOptions) at ./client.jl:305
 [12] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/CVXOPT/test/test4.jl, in expression starting on line 7
WARNING: pyeval is deprecated.  Use py"x.size" instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.6/PyCall/src/pyeval.jl:58
 [3] (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 [4] cvxopt_to_julia(::PyCall.PyObject) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:227
 [5] #socp#5(::Array{Any,1}, ::Array{Any,1}, ::Dict{Any,Any}, ::Function, ::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,1},Array{Float64,1}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:155
 [6] socp(::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,1},Array{Float64,1}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:130
 [7] include_from_node1(::String) at ./loading.jl:569
 [8] include(::String) at ./sysimg.jl:14
 [9] include_from_node1(::String) at ./loading.jl:569
 [10] include(::String) at ./sysimg.jl:14
 [11] process_options(::Base.JLOptions) at ./client.jl:305
 [12] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/CVXOPT/test/test4.jl, in expression starting on line 7
WARNING: pyeval is deprecated.  Use py"list(x[:])" instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.6/PyCall/src/pyeval.jl:58
 [3] (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 [4] cvxopt_to_julia(::PyCall.PyObject) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:228
 [5] #socp#5(::Array{Any,1}, ::Array{Any,1}, ::Dict{Any,Any}, ::Function, ::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,1},Array{Float64,1}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:155
 [6] socp(::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,1},Array{Float64,1}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:130
 [7] include_from_node1(::String) at ./loading.jl:569
 [8] include(::String) at ./sysimg.jl:14
 [9] include_from_node1(::String) at ./loading.jl:569
 [10] include(::String) at ./sysimg.jl:14
 [11] process_options(::Base.JLOptions) at ./client.jl:305
 [12] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/CVXOPT/test/test4.jl, in expression starting on line 7
WARNING: pyeval is deprecated.  Use py"x.size" instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.6/PyCall/src/pyeval.jl:58
 [3] (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 [4] cvxopt_to_julia(::PyCall.PyObject) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:227
 [5] #socp#5(::Array{Any,1}, ::Array{Any,1}, ::Dict{Any,Any}, ::Function, ::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,1},Array{Float64,1}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:157
 [6] socp(::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,1},Array{Float64,1}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:130
 [7] include_from_node1(::String) at ./loading.jl:569
 [8] include(::String) at ./sysimg.jl:14
 [9] include_from_node1(::String) at ./loading.jl:569
 [10] include(::String) at ./sysimg.jl:14
 [11] process_options(::Base.JLOptions) at ./client.jl:305
 [12] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/CVXOPT/test/test4.jl, in expression starting on line 7
WARNING: pyeval is deprecated.  Use py"list(x[:])" instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.6/PyCall/src/pyeval.jl:58
 [3] (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 [4] cvxopt_to_julia(::PyCall.PyObject) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:228
 [5] #socp#5(::Array{Any,1}, ::Array{Any,1}, ::Dict{Any,Any}, ::Function, ::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,1},Array{Float64,1}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:157
 [6] socp(::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,1},Array{Float64,1}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:130
 [7] include_from_node1(::String) at ./loading.jl:569
 [8] include(::String) at ./sysimg.jl:14
 [9] include_from_node1(::String) at ./loading.jl:569
 [10] include(::String) at ./sysimg.jl:14
 [11] process_options(::Base.JLOptions) at ./client.jl:305
 [12] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/CVXOPT/test/test4.jl, in expression starting on line 7
WARNING: pyeval is deprecated.  Use py"x.size" instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.6/PyCall/src/pyeval.jl:58
 [3] (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 [4] cvxopt_to_julia(::PyCall.PyObject) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:227
 [5] #socp#5(::Array{Any,1}, ::Array{Any,1}, ::Dict{Any,Any}, ::Function, ::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,1},Array{Float64,1}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:158
 [6] socp(::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,1},Array{Float64,1}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:130
 [7] include_from_node1(::String) at ./loading.jl:569
 [8] include(::String) at ./sysimg.jl:14
 [9] include_from_node1(::String) at ./loading.jl:569
 [10] include(::String) at ./sysimg.jl:14
 [11] process_options(::Base.JLOptions) at ./client.jl:305
 [12] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/CVXOPT/test/test4.jl, in expression starting on line 7
WARNING: pyeval is deprecated.  Use py"list(x[:])" instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.6/PyCall/src/pyeval.jl:58
 [3] (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 [4] cvxopt_to_julia(::PyCall.PyObject) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:228
 [5] #socp#5(::Array{Any,1}, ::Array{Any,1}, ::Dict{Any,Any}, ::Function, ::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,1},Array{Float64,1}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:158
 [6] socp(::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,1},Array{Float64,1}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:130
 [7] include_from_node1(::String) at ./loading.jl:569
 [8] include(::String) at ./sysimg.jl:14
 [9] include_from_node1(::String) at ./loading.jl:569
 [10] include(::String) at ./sysimg.jl:14
 [11] process_options(::Base.JLOptions) at ./client.jl:305
 [12] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/CVXOPT/test/test4.jl, in expression starting on line 7
WARNING: pyeval is deprecated.  Use py"x.size" instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.6/PyCall/src/pyeval.jl:58
 [3] (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 [4] cvxopt_to_julia(::PyCall.PyObject) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:227
 [5] #socp#5(::Array{Any,1}, ::Array{Any,1}, ::Dict{Any,Any}, ::Function, ::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,1},Array{Float64,1}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:157
 [6] socp(::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,1},Array{Float64,1}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:130
 [7] include_from_node1(::String) at ./loading.jl:569
 [8] include(::String) at ./sysimg.jl:14
 [9] include_from_node1(::String) at ./loading.jl:569
 [10] include(::String) at ./sysimg.jl:14
 [11] process_options(::Base.JLOptions) at ./client.jl:305
 [12] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/CVXOPT/test/test4.jl, in expression starting on line 7
WARNING: pyeval is deprecated.  Use py"list(x[:])" instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.6/PyCall/src/pyeval.jl:58
 [3] (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 [4] cvxopt_to_julia(::PyCall.PyObject) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:228
 [5] #socp#5(::Array{Any,1}, ::Array{Any,1}, ::Dict{Any,Any}, ::Function, ::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,1},Array{Float64,1}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:157
 [6] socp(::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,1},Array{Float64,1}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:130
 [7] include_from_node1(::String) at ./loading.jl:569
 [8] include(::String) at ./sysimg.jl:14
 [9] include_from_node1(::String) at ./loading.jl:569
 [10] include(::String) at ./sysimg.jl:14
 [11] process_options(::Base.JLOptions) at ./client.jl:305
 [12] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/CVXOPT/test/test4.jl, in expression starting on line 7
WARNING: pyeval is deprecated.  Use py"x.size" instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.6/PyCall/src/pyeval.jl:58
 [3] (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 [4] cvxopt_to_julia(::PyCall.PyObject) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:227
 [5] #socp#5(::Array{Any,1}, ::Array{Any,1}, ::Dict{Any,Any}, ::Function, ::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,1},Array{Float64,1}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:158
 [6] socp(::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,1},Array{Float64,1}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:130
 [7] include_from_node1(::String) at ./loading.jl:569
 [8] include(::String) at ./sysimg.jl:14
 [9] include_from_node1(::String) at ./loading.jl:569
 [10] include(::String) at ./sysimg.jl:14
 [11] process_options(::Base.JLOptions) at ./client.jl:305
 [12] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/CVXOPT/test/test4.jl, in expression starting on line 7
WARNING: pyeval is deprecated.  Use py"list(x[:])" instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.6/PyCall/src/pyeval.jl:58
 [3] (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 [4] cvxopt_to_julia(::PyCall.PyObject) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:228
 [5] #socp#5(::Array{Any,1}, ::Array{Any,1}, ::Dict{Any,Any}, ::Function, ::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,1},Array{Float64,1}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:158
 [6] socp(::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,1},Array{Float64,1}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:130
 [7] include_from_node1(::String) at ./loading.jl:569
 [8] include(::String) at ./sysimg.jl:14
 [9] include_from_node1(::String) at ./loading.jl:569
 [10] include(::String) at ./sysimg.jl:14
 [11] process_options(::Base.JLOptions) at ./client.jl:305
 [12] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/CVXOPT/test/test4.jl, in expression starting on line 7
WARNING: pyeval is deprecated.  Use py"x.size" instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.6/PyCall/src/pyeval.jl:58
 [3] (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 [4] cvxopt_to_julia(::PyCall.PyObject) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:227
 [5] #sdp#6(::Array{Any,1}, ::Array{Any,1}, ::Dict{Any,Any}, ::Function, ::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,2},Array{Float64,2}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:193
 [6] sdp(::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,2},Array{Float64,2}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:171
 [7] include_from_node1(::String) at ./loading.jl:569
 [8] include(::String) at ./sysimg.jl:14
 [9] include_from_node1(::String) at ./loading.jl:569
 [10] include(::String) at ./sysimg.jl:14
 [11] process_options(::Base.JLOptions) at ./client.jl:305
 [12] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/CVXOPT/test/test5.jl, in expression starting on line 11
WARNING: pyeval is deprecated.  Use py"list(x[:])" instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.6/PyCall/src/pyeval.jl:58
 [3] (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 [4] cvxopt_to_julia(::PyCall.PyObject) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:228
 [5] #sdp#6(::Array{Any,1}, ::Array{Any,1}, ::Dict{Any,Any}, ::Function, ::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,2},Array{Float64,2}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:193
 [6] sdp(::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,2},Array{Float64,2}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:171
 [7] include_from_node1(::String) at ./loading.jl:569
 [8] include(::String) at ./sysimg.jl:14
 [9] include_from_node1(::String) at ./loading.jl:569
 [10] include(::String) at ./sysimg.jl:14
 [11] process_options(::Base.JLOptions) at ./client.jl:305
 [12] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/CVXOPT/test/test5.jl, in expression starting on line 11
WARNING: pyeval is deprecated.  Use py"x.size" instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.6/PyCall/src/pyeval.jl:58
 [3] (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 [4] cvxopt_to_julia(::PyCall.PyObject) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:227
 [5] #sdp#6(::Array{Any,1}, ::Array{Any,1}, ::Dict{Any,Any}, ::Function, ::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,2},Array{Float64,2}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:194
 [6] sdp(::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,2},Array{Float64,2}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:171
 [7] include_from_node1(::String) at ./loading.jl:569
 [8] include(::String) at ./sysimg.jl:14
 [9] include_from_node1(::String) at ./loading.jl:569
 [10] include(::String) at ./sysimg.jl:14
 [11] process_options(::Base.JLOptions) at ./client.jl:305
 [12] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/CVXOPT/test/test5.jl, in expression starting on line 11
WARNING: pyeval is deprecated.  Use py"list(x[:])" instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.6/PyCall/src/pyeval.jl:58
 [3] (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 [4] cvxopt_to_julia(::PyCall.PyObject) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:228
 [5] #sdp#6(::Array{Any,1}, ::Array{Any,1}, ::Dict{Any,Any}, ::Function, ::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,2},Array{Float64,2}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:194
 [6] sdp(::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,2},Array{Float64,2}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:171
 [7] include_from_node1(::String) at ./loading.jl:569
 [8] include(::String) at ./sysimg.jl:14
 [9] include_from_node1(::String) at ./loading.jl:569
 [10] include(::String) at ./sysimg.jl:14
 [11] process_options(::Base.JLOptions) at ./client.jl:305
 [12] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/CVXOPT/test/test5.jl, in expression starting on line 11
WARNING: pyeval is deprecated.  Use py"x.size" instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.6/PyCall/src/pyeval.jl:58
 [3] (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 [4] cvxopt_to_julia(::PyCall.PyObject) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:227
 [5] #sdp#6(::Array{Any,1}, ::Array{Any,1}, ::Dict{Any,Any}, ::Function, ::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,2},Array{Float64,2}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:195
 [6] sdp(::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,2},Array{Float64,2}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:171
 [7] include_from_node1(::String) at ./loading.jl:569
 [8] include(::String) at ./sysimg.jl:14
 [9] include_from_node1(::String) at ./loading.jl:569
 [10] include(::String) at ./sysimg.jl:14
 [11] process_options(::Base.JLOptions) at ./client.jl:305
 [12] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/CVXOPT/test/test5.jl, in expression starting on line 11
WARNING: pyeval is deprecated.  Use py"list(x[:])" instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.6/PyCall/src/pyeval.jl:58
 [3] (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 [4] cvxopt_to_julia(::PyCall.PyObject) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:228
 [5] #sdp#6(::Array{Any,1}, ::Array{Any,1}, ::Dict{Any,Any}, ::Function, ::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,2},Array{Float64,2}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:195
 [6] sdp(::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,2},Array{Float64,2}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:171
 [7] include_from_node1(::String) at ./loading.jl:569
 [8] include(::String) at ./sysimg.jl:14
 [9] include_from_node1(::String) at ./loading.jl:569
 [10] include(::String) at ./sysimg.jl:14
 [11] process_options(::Base.JLOptions) at ./client.jl:305
 [12] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/CVXOPT/test/test5.jl, in expression starting on line 11
WARNING: pyeval is deprecated.  Use py"x.size" instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.6/PyCall/src/pyeval.jl:58
 [3] (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 [4] cvxopt_to_julia(::PyCall.PyObject) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:227
 [5] #sdp#6(::Array{Any,1}, ::Array{Any,1}, ::Dict{Any,Any}, ::Function, ::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,2},Array{Float64,2}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:196
 [6] sdp(::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,2},Array{Float64,2}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:171
 [7] include_from_node1(::String) at ./loading.jl:569
 [8] include(::String) at ./sysimg.jl:14
 [9] include_from_node1(::String) at ./loading.jl:569
 [10] include(::String) at ./sysimg.jl:14
 [11] process_options(::Base.JLOptions) at ./client.jl:305
 [12] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/CVXOPT/test/test5.jl, in expression starting on line 11
WARNING: pyeval is deprecated.  Use py"list(x[:])" instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.6/PyCall/src/pyeval.jl:58
 [3] (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 [4] cvxopt_to_julia(::PyCall.PyObject) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:228
 [5] #sdp#6(::Array{Any,1}, ::Array{Any,1}, ::Dict{Any,Any}, ::Function, ::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,2},Array{Float64,2}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:196
 [6] sdp(::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,2},Array{Float64,2}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:171
 [7] include_from_node1(::String) at ./loading.jl:569
 [8] include(::String) at ./sysimg.jl:14
 [9] include_from_node1(::String) at ./loading.jl:569
 [10] include(::String) at ./sysimg.jl:14
 [11] process_options(::Base.JLOptions) at ./client.jl:305
 [12] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/CVXOPT/test/test5.jl, in expression starting on line 11
WARNING: pyeval is deprecated.  Use py"x.size" instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.6/PyCall/src/pyeval.jl:58
 [3] (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 [4] cvxopt_to_julia(::PyCall.PyObject) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:227
 [5] #sdp#6(::Array{Any,1}, ::Array{Any,1}, ::Dict{Any,Any}, ::Function, ::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,2},Array{Float64,2}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:198
 [6] sdp(::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,2},Array{Float64,2}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:171
 [7] include_from_node1(::String) at ./loading.jl:569
 [8] include(::String) at ./sysimg.jl:14
 [9] include_from_node1(::String) at ./loading.jl:569
 [10] include(::String) at ./sysimg.jl:14
 [11] process_options(::Base.JLOptions) at ./client.jl:305
 [12] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/CVXOPT/test/test5.jl, in expression starting on line 11
WARNING: pyeval is deprecated.  Use py"list(x[:])" instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.6/PyCall/src/pyeval.jl:58
 [3] (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 [4] cvxopt_to_julia(::PyCall.PyObject) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:228
 [5] #sdp#6(::Array{Any,1}, ::Array{Any,1}, ::Dict{Any,Any}, ::Function, ::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,2},Array{Float64,2}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:198
 [6] sdp(::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,2},Array{Float64,2}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:171
 [7] include_from_node1(::String) at ./loading.jl:569
 [8] include(::String) at ./sysimg.jl:14
 [9] include_from_node1(::String) at ./loading.jl:569
 [10] include(::String) at ./sysimg.jl:14
 [11] process_options(::Base.JLOptions) at ./client.jl:305
 [12] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/CVXOPT/test/test5.jl, in expression starting on line 11
WARNING: pyeval is deprecated.  Use py"x.size" instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.6/PyCall/src/pyeval.jl:58
 [3] (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 [4] cvxopt_to_julia(::PyCall.PyObject) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:227
 [5] #sdp#6(::Array{Any,1}, ::Array{Any,1}, ::Dict{Any,Any}, ::Function, ::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,2},Array{Float64,2}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:199
 [6] sdp(::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,2},Array{Float64,2}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:171
 [7] include_from_node1(::String) at ./loading.jl:569
 [8] include(::String) at ./sysimg.jl:14
 [9] include_from_node1(::String) at ./loading.jl:569
 [10] include(::String) at ./sysimg.jl:14
 [11] process_options(::Base.JLOptions) at ./client.jl:305
 [12] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/CVXOPT/test/test5.jl, in expression starting on line 11
WARNING: pyeval is deprecated.  Use py"list(x[:])" instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.6/PyCall/src/pyeval.jl:58
 [3] (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 [4] cvxopt_to_julia(::PyCall.PyObject) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:228
 [5] #sdp#6(::Array{Any,1}, ::Array{Any,1}, ::Dict{Any,Any}, ::Function, ::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,2},Array{Float64,2}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:199
 [6] sdp(::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,2},Array{Float64,2}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:171
 [7] include_from_node1(::String) at ./loading.jl:569
 [8] include(::String) at ./sysimg.jl:14
 [9] include_from_node1(::String) at ./loading.jl:569
 [10] include(::String) at ./sysimg.jl:14
 [11] process_options(::Base.JLOptions) at ./client.jl:305
 [12] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/CVXOPT/test/test5.jl, in expression starting on line 11
WARNING: pyeval is deprecated.  Use py"x.size" instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.6/PyCall/src/pyeval.jl:58
 [3] (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 [4] cvxopt_to_julia(::PyCall.PyObject) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:227
 [5] #sdp#6(::Array{Any,1}, ::Array{Any,1}, ::Dict{Any,Any}, ::Function, ::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,2},Array{Float64,2}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:198
 [6] sdp(::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,2},Array{Float64,2}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:171
 [7] include_from_node1(::String) at ./loading.jl:569
 [8] include(::String) at ./sysimg.jl:14
 [9] include_from_node1(::String) at ./loading.jl:569
 [10] include(::String) at ./sysimg.jl:14
 [11] process_options(::Base.JLOptions) at ./client.jl:305
 [12] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/CVXOPT/test/test5.jl, in expression starting on line 11
WARNING: pyeval is deprecated.  Use py"list(x[:])" instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.6/PyCall/src/pyeval.jl:58
 [3] (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 [4] cvxopt_to_julia(::PyCall.PyObject) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:228
 [5] #sdp#6(::Array{Any,1}, ::Array{Any,1}, ::Dict{Any,Any}, ::Function, ::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,2},Array{Float64,2}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:198
 [6] sdp(::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,2},Array{Float64,2}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:171
 [7] include_from_node1(::String) at ./loading.jl:569
 [8] include(::String) at ./sysimg.jl:14
 [9] include_from_node1(::String) at ./loading.jl:569
 [10] include(::String) at ./sysimg.jl:14
 [11] process_options(::Base.JLOptions) at ./client.jl:305
 [12] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/CVXOPT/test/test5.jl, in expression starting on line 11
WARNING: pyeval is deprecated.  Use py"x.size" instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.6/PyCall/src/pyeval.jl:58
 [3] (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 [4] cvxopt_to_julia(::PyCall.PyObject) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:227
 [5] #sdp#6(::Array{Any,1}, ::Array{Any,1}, ::Dict{Any,Any}, ::Function, ::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,2},Array{Float64,2}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:199
 [6] sdp(::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,2},Array{Float64,2}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:171
 [7] include_from_node1(::String) at ./loading.jl:569
 [8] include(::String) at ./sysimg.jl:14
 [9] include_from_node1(::String) at ./loading.jl:569
 [10] include(::String) at ./sysimg.jl:14
 [11] process_options(::Base.JLOptions) at ./client.jl:305
 [12] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/CVXOPT/test/test5.jl, in expression starting on line 11
WARNING: pyeval is deprecated.  Use py"list(x[:])" instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.6/PyCall/src/pyeval.jl:58
 [3] (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 [4] cvxopt_to_julia(::PyCall.PyObject) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:228
 [5] #sdp#6(::Array{Any,1}, ::Array{Any,1}, ::Dict{Any,Any}, ::Function, ::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,2},Array{Float64,2}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:199
 [6] sdp(::Array{Float64,1}, ::Array{Any,1}, ::Array{Any,1}, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Tuple{Array{Float64,2},Array{Float64,2}}) at /home/vagrant/.julia/v0.6/CVXOPT/src/CVXOPT.jl:171
 [7] include_from_node1(::String) at ./loading.jl:569
 [8] include(::String) at ./sysimg.jl:14
 [9] include_from_node1(::String) at ./loading.jl:569
 [10] include(::String) at ./sysimg.jl:14
 [11] process_options(::Base.JLOptions) at ./client.jl:305
 [12] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/CVXOPT/test/test5.jl, in expression starting on line 11
     pcost       dcost       gap    pres   dres   k/t
 0:  1.1431e+00 -2.3216e+02  5e+02  7e-01  8e+00  1e+00
 1:  3.2291e+00 -7.6284e+01  1e+02  2e-01  3e+00  2e+00
 2: -5.4057e+00 -7.5497e+01  1e+02  2e-01  2e+00  6e+00
 3: -8.2526e+00 -5.0576e+01  7e+01  1e-01  1e+00  4e+00
 4:  3.6383e+00 -4.2856e+01  9e+01  1e-01  2e+00  6e+00
 5: -5.8339e+00 -2.2605e+01  4e+01  6e-02  7e-01  4e+00
 6: -3.0169e+00 -1.5737e+01  2e+01  4e-02  5e-01  2e+00
 7: -9.4177e+00 -1.6446e+01  1e+01  2e-02  3e-01  1e+00
 8: -1.0564e+01 -1.1543e+01  2e+00  3e-03  4e-02  2e-01
 9: -1.0930e+01 -1.1021e+01  2e-01  3e-04  4e-03  2e-02
10: -1.0948e+01 -1.0952e+01  8e-03  1e-05  2e-04  8e-04
11: -1.0949e+01 -1.0949e+01  1e-04  2e-07  3e-06  1e-05
12: -1.0949e+01 -1.0949e+01  1e-06  3e-09  3e-08  2e-07
Optimal solution found.
     pcost       dcost       gap    pres   dres
 0: -1.0721e+00 -4.3040e+00  3e+00  0e+00  2e+00
 1: -1.2240e+00 -1.5212e+00  3e-01  2e-15  2e-01
 2: -1.4283e+00 -1.5409e+00  1e-01  3e-16  5e-02
 3: -1.4300e+00 -1.4312e+00  1e-03  3e-15  5e-04
 4: -1.4300e+00 -1.4300e+00  1e-05  6e-15  5e-06
 5: -1.4300e+00 -1.4300e+00  1e-07  1e-13  5e-08
Optimal solution found.
     pcost       dcost       gap    pres   dres   k/t
 0: -8.1000e+00 -1.8300e+01  4e+00  0e+00  8e-01  1e+00
 1: -8.8055e+00 -9.4357e+00  2e-01  4e-16  4e-02  3e-02
 2: -8.9981e+00 -9.0049e+00  2e-03  2e-16  5e-04  4e-04
 3: -9.0000e+00 -9.0000e+00  2e-05  6e-16  5e-06  4e-06
 4: -9.0000e+00 -9.0000e+00  2e-07  1e-16  5e-08  4e-08
Optimal solution found.
     pcost       dcost       gap    pres   dres   k/t
 0:  4.9969e+00 -1.7285e+01  6e+01  3e-01  4e+00  1e+00
 1: -1.6732e+00 -7.0431e+00  1e+01  7e-02  1e+00  6e-01
 2: -1.6221e+01 -3.5417e+01  2e+02  3e-01  5e+00  7e+00
 3: -2.1832e+01 -2.2849e+01  3e+01  4e-02  6e-01  2e+00
 4: -3.5265e+01 -3.5594e+01  1e+01  1e-02  2e-01  9e-01
 5: -3.8303e+01 -3.8314e+01  3e-01  4e-04  6e-03  2e-02
 6: -3.8342e+01 -3.8342e+01  1e-02  1e-05  2e-04  7e-04
 7: -3.8346e+01 -3.8346e+01  9e-04  1e-06  2e-05  7e-05
 8: -3.8346e+01 -3.8346e+01  4e-05  6e-08  9e-07  4e-06
 9: -3.8346e+01 -3.8346e+01  2e-06  3e-09  4e-08  2e-07
Optimal solution found.
     pcost       dcost       gap    pres   dres   k/t
 0: -1.2037e+00 -1.8539e+02  2e+02  2e-16  8e+00  1e+00
 1: -1.2937e+00 -6.8551e+00  5e+00  5e-16  3e-01  3e-02
 2: -2.8964e+00 -3.7331e+00  7e-01  9e-16  4e-02  5e-02
 3: -3.0150e+00 -3.2556e+00  2e-01  7e-16  1e-02  2e-02
 4: -3.1389e+00 -3.1932e+00  5e-02  4e-16  3e-03  5e-03
 5: -3.1533e+00 -3.1547e+00  1e-03  2e-15  7e-05  1e-04
 6: -3.1535e+00 -3.1536e+00  5e-05  8e-16  3e-06  6e-06
 7: -3.1535e+00 -3.1535e+00  1e-06  6e-16  7e-08  2e-07
Optimal solution found.
INFO: CVXOPT tests passed

>>> End of log
