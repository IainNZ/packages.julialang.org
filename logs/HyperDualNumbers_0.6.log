>>> 'Pkg.add("HyperDualNumbers")' log
INFO: Cloning cache of HyperDualNumbers from https://github.com/JuliaDiff/HyperDualNumbers.jl.git
INFO: Installing HyperDualNumbers v1.0.0
INFO: Package database updated
INFO: METADATA is out-of-date — you may not have the latest version of HyperDualNumbers
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("HyperDualNumbers")' log
Julia Version 0.6.0
Commit 9036443 (2017-06-19 13:05 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-128-generic #177-Ubuntu SMP Tue Aug 8 11:40:23 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1652.1796875 MB free)
Uptime: 72633.0 sec
Load Avg:  1.06396484375  0.9990234375  1.04150390625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz    4618224 s       4827 s     210334 s    1322750 s         54 s
#2  3500 MHz    1192684 s       1602 s     120038 s    5789642 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.6
2 required packages:
 - HyperDualNumbers              1.0.0
 - JSON                          0.13.0
1 additional packages:
 - Compat                        0.30.0
INFO: Testing HyperDualNumbers
Running tests:
  * test_basics.jl *

WARNING: deprecated syntax "typealias Hyper256 Hyper{Float64}" at /home/vagrant/.julia/v0.6/HyperDualNumbers/src/hyperdual.jl:19.
Use "const Hyper256 = Hyper{Float64}" instead.

WARNING: deprecated syntax "typealias Hyper128 Hyper{Float32}" at /home/vagrant/.julia/v0.6/HyperDualNumbers/src/hyperdual.jl:21.
Use "const Hyper128 = Hyper{Float32}" instead.
WARNING: `@vectorize_1arg` is deprecated in favor of compact broadcast syntax. Instead of `@vectorize_1arg`'ing function `f` and calling `f(arg)`, call `f.(arg)`.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] @vectorize_1arg(::ANY, ::ANY) at ./deprecated.jl:322
 [3] include_from_node1(::String) at ./loading.jl:569
 [4] include(::String) at ./sysimg.jl:14
 [5] include_from_node1(::String) at ./loading.jl:569
 [6] eval(::Module, ::Any) at ./boot.jl:235
 [7] _require(::Symbol) at ./loading.jl:483
 [8] require(::Symbol) at ./loading.jl:398
 [9] include_from_node1(::String) at ./loading.jl:569
 [10] include(::String) at ./sysimg.jl:14
 [11] macro expansion at /home/vagrant/.julia/v0.6/HyperDualNumbers/test/runtests.jl:9 [inlined]
 [12] anonymous at ./<missing>:?
 [13] include_from_node1(::String) at ./loading.jl:569
 [14] include(::String) at ./sysimg.jl:14
 [15] process_options(::Base.JLOptions) at ./client.jl:305
 [16] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/HyperDualNumbers/src/hyperdual.jl, in expression starting on line 61

Examples of show() for hyperdual numbers with NaN:

hdNaN = NaN + 0.0ϵ1 + 0.0ϵ2 + 0.0ϵ1ϵ2
hdNaN + hd4 = NaN + 4.0ϵ1 + 3.0ϵ2 + 4.0ϵ1ϵ2

Testing includes Tim Holy's division performance improvement.
Testing includes ngedwin98's fixes for asin, acos and atan.



  * test_TimHoly_example.jl *
8//25 - 8//5ϵ1 - 8//5ϵ2 + 144//25ϵ1ϵ2



  * test_Paper_example.jl *

"THE" example
f(1.5) = 4.497780053946162

t0 = 1.5 + 1.0ϵ1 + 1.0ϵ2 + 0.0ϵ1ϵ2
t1 = 4.4816890703380645 + 4.4816890703380645ϵ1 + 4.4816890703380645ϵ2 + 4.4816890703380645ϵ1ϵ2
t2 = 0.9974949866040544 + 0.0707372016677029ϵ1 + 0.0707372016677029ϵ2 - 0.9974949866040544ϵ1ϵ2
t3 = 0.9925037693693152 + 0.21114975082386195ϵ1 + 0.21114975082386195ϵ2 - 2.947564004699509ϵ1ϵ2
t4 = 0.0707372016677029 - 0.9974949866040544ϵ1 - 0.9974949866040544ϵ2 - 0.0707372016677029ϵ1ϵ2
t5 = 0.000353951393082256 - 0.014973651704218029ϵ1 - 0.014973651704218029ϵ2 + 0.42123764746847714ϵ1ϵ2
t5a = 0.000353951393082256 - 0.014973651704218029ϵ1 - 0.014973651704218029ϵ2 + 0.42123764746847714ϵ1ϵ2
t6 = 0.9928577207623974 + 0.19617609911964393ϵ1 + 0.19617609911964393ϵ2 - 2.526326357231032ϵ1ϵ2
t7 = 1.0035903837494204 - 0.0991483686337086ϵ1 - 0.0991483686337086ϵ2 + 1.3062034995890381ϵ1ϵ2
t8 = 4.497780053946162 + 4.053427893898621ϵ1 + 4.053427893898621ϵ2 + 9.463073681596603ϵ1ϵ2

f(t0) = 4.497780053946162 + 4.05342789389862ϵ1 + 4.05342789389862ϵ2 + 9.463073681596601ϵ1ϵ2



INFO: HyperDualNumbers tests passed

>>> End of log
