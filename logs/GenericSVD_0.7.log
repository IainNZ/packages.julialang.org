>>> 'Pkg.add("GenericSVD")' log
┌ Info: Cloning cache of GenericSVD from https://github.com/JuliaMath/GenericSVD.jl.git
└                                                   @ Base.Pkg.Cache cache.jl:43
[ Info: Installing GenericSVD v0.1.0               @ Base.Pkg.Entry entry.jl:543
[ Info: Package database updated                    @ Base.Pkg.Entry entry.jl:32

>>> 'Pkg.test("GenericSVD")' log
Julia Version 0.7.0-DEV.3354
Commit 9b5eed2b6c (2018-01-09 08:03 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
      Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-135-generic #184-Ubuntu SMP Wed Oct 18 11:55:51 UTC 2017 x86_64 x86_64
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
              speed         user         nice          sys         idle          irq
       #1  3505 MHz     147708 s        114 s      10303 s     144248 s          2 s
       #2  3505 MHz      36088 s         44 s       5651 s     292248 s          0 s
       
  Memory: 2.93927001953125 GB (811.234375 MB free)
  Uptime: 3412.0 sec
  Load Avg:  0.9453125  0.970703125  0.89453125
  WORD_SIZE: 64
  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant
Packages:
  Package Directory: /home/vagrant/.julia/v0.7
  Package Status:
2 required packages:
 - GenericSVD                    0.1.0
 - JSON                          0.16.3
2 additional packages:
 - Compat                        0.46.0
 - Nullables                     0.0.3
┌ Info: Computing test dependencies for GenericSVD...
└                                                  @ Base.Pkg.Entry entry.jl:713
┌ Info: Cloning cache of Quaternions from https://github.com/JuliaGeometry/Quaternions.jl.git
└                                                   @ Base.Pkg.Cache cache.jl:43
[ Info: Installing Calculus v0.2.2                 @ Base.Pkg.Entry entry.jl:543
[ Info: Installing DualNumbers v0.3.0              @ Base.Pkg.Entry entry.jl:543
[ Info: Installing NaNMath v0.3.0                  @ Base.Pkg.Entry entry.jl:543
[ Info: Installing Quaternions v0.3.0              @ Base.Pkg.Entry entry.jl:543
[ Info: Testing GenericSVD                         @ Base.Pkg.Entry entry.jl:723
Testing misc.jl
WARNING: importing deprecated binding Base.Void into GenericSVD.
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/GenericSVD/src/utils.jl:26
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/GenericSVD/src/utils.jl:27
┌ Warning: Deprecated syntax `immutable` at /home/vagrant/.julia/v0.7/GenericSVD/src/bidiagonalize.jl:8.
│ Use `struct` instead.
└                                                   @ nothing bidiagonalize.jl:8
┌ Warning: Deprecated syntax `parametric method syntax bidiagonalize_tall!{T}(A::Matrix{T}, B::Bidiagonal)` around /home/vagrant/.julia/v0.7/GenericSVD/src/bidiagonalize.jl:19.
│ Use `bidiagonalize_tall!(A::Matrix{T}, B::Bidiagonal) where T` instead.
└                                                  @ nothing bidiagonalize.jl:19
┌ Warning: Deprecated syntax `parametric method syntax bidiagonalize_tall!{T}(A::Matrix{T})` around /home/vagrant/.julia/v0.7/GenericSVD/src/bidiagonalize.jl:47.
│ Use `bidiagonalize_tall!(A::Matrix{T}) where T` instead.
└                                                  @ nothing bidiagonalize.jl:47
┌ Warning: Deprecated syntax `parametric method syntax Base.full{T}(P::PackedUVt{T},; thin = true)` around /home/vagrant/.julia/v0.7/GenericSVD/src/bidiagonalize.jl:54.
│ Use `Base.full(P::PackedUVt{T},; thin = true) where T` instead.
└                                                  @ nothing bidiagonalize.jl:54
┌ Warning: Deprecated syntax `parametric method syntax svd!{T <: Real}(B::Bidiagonal{T}, U = nothing, Vt = nothing, ε = eps(T))` around /home/vagrant/.julia/v0.7/GenericSVD/src/GenericSVD.jl:99.
│ Use `svd!(B::Bidiagonal{T}, U = nothing, Vt = nothing, ε = eps(T)) where T <: Real` instead.
└                                                     @ nothing GenericSVD.jl:99
┌ Warning: Deprecated syntax `parametric method syntax svd_gk!{T <: Real}(B::Bidiagonal{T}, U, Vt, n₁, n₂, shift)` around /home/vagrant/.julia/v0.7/GenericSVD/src/GenericSVD.jl:222.
│ Use `svd_gk!(B::Bidiagonal{T}, U, Vt, n₁, n₂, shift) where T <: Real` instead.
└                                                    @ nothing GenericSVD.jl:222
WARNING: Base.Test is deprecated, run `using Test` instead.
  likely near /home/vagrant/.julia/v0.7/GenericSVD/test/misc.jl:2
┌ Warning: `eye(m::Integer)` has been deprecated in favor of `I` and `Matrix` constructors. For a direct replacement, consider `Matrix(1.0I, m, m)` or `Matrix{Float64}(I, m, m)`. If `Float64` element type is not necessary, consider the shorter `Matrix(I, m, m)` (with default `eltype(I)` `Bool`).
│   caller = top-level scope
└                                                                      @ Core :0
┌ Warning: `Bidiagonal(dv::AbstractVector, ev::AbstractVector, isupper::Bool)` is deprecated, use `Bidiagonal(dv, ev, ifelse(isupper, :U, :L))` instead.
│   caller = top-level scope
└                                                                      @ Core :0
┌ Warning: `A_mul_Bc!(A::AbstractMatrix, G::Givens)` is deprecated, use `mul!(A, adjoint(G))` instead.
│   caller = svd_zerodiag_row!(::Array{Float64,2}, ::Bidiagonal{Float64,Array{Float64,1}}, ::Int64, ::Int64) at GenericSVD.jl:170
└                                                 @ GenericSVD GenericSVD.jl:170
┌ Warning: `full(A::Bidiagonal)` (and `full` in general) has been deprecated. To replace `full(A::Bidiagonal)`, consider `Matrix(A)` or, if that option is too narrow, `Array(A)`. Also consider `SparseMatrixCSC(A)` or, if that option is too narrow, `sparse(A)`.
│   caller = top-level scope
└                                                                      @ Core :0
┌ Warning: `eye(m::Integer)` has been deprecated in favor of `I` and `Matrix` constructors. For a direct replacement, consider `Matrix(1.0I, m, m)` or `Matrix{Float64}(I, m, m)`. If `Float64` element type is not necessary, consider the shorter `Matrix(I, m, m)` (with default `eltype(I)` `Bool`).
│   caller = top-level scope
└                                                                      @ Core :0
┌ Warning: `Bidiagonal(dv::AbstractVector, ev::AbstractVector, isupper::Bool)` is deprecated, use `Bidiagonal(dv, ev, ifelse(isupper, :U, :L))` instead.
│   caller = top-level scope
└                                                                      @ Core :0
┌ Warning: `A_mul_B!(G::Givens, A::AbstractVecOrMat)` is deprecated, use `mul!(G, A)` instead.
│   caller = svd_zerodiag_col!(::Bidiagonal{Float64,Array{Float64,1}}, ::Array{Float64,2}, ::Int64, ::Int64) at GenericSVD.jl:199
└                                                 @ GenericSVD GenericSVD.jl:199
┌ Warning: `full(A::Bidiagonal)` (and `full` in general) has been deprecated. To replace `full(A::Bidiagonal)`, consider `Matrix(A)` or, if that option is too narrow, `Array(A)`. Also consider `SparseMatrixCSC(A)` or, if that option is too narrow, `sparse(A)`.
│   caller = top-level scope
└                                                                      @ Core :0
Testing bigfloat.jl
WARNING: Base.Test is deprecated, run `using Test` instead.
  likely near /home/vagrant/.julia/v0.7/GenericSVD/test/bigfloat.jl:2
ERROR: LoadError: LoadError: MethodError: no method matching svdfact!(::Array{BigFloat,2}; full=false)
Closest candidates are:
  svdfact!(::AbstractArray{T,2} where T; thin) at /home/vagrant/.julia/v0.7/GenericSVD/src/GenericSVD.jl:9 got unsupported keyword argument "full"
  svdfact!(!Matched::Base.LinAlg.AbstractTriangular) at linalg/triangular.jl:2369 got unsupported keyword argument "full"
  svdfact!(!Matched::Union{DenseArray{T<:Union{Complex{Float32}, Complex{Float64}, Float32, Float64},2}, Base.ReinterpretArray{T<:Union{Complex{Float32}, Complex{Float64}, Float32, Float64},2,S,A} where S, Base.ReshapedArray{T<:Union{Complex{Float32}, Complex{Float64}, Float32, Float64},2,A,MI} where MI<:Tuple{Vararg{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},N} where N} where A<:Union{SubArray{T,N,P,I,true} where I<:Tuple{Union{Base.Slice, UnitRange},Vararg{Any,N} where N} where P where N where T, DenseArray}, SubArray{T<:Union{Complex{Float32}, Complex{Float64}, Float32, Float64},2,A,I,L} where L} where I<:Tuple{Vararg{Union{Int64, AbstractRange{Int64}, Base.AbstractCartesianIndex},N} where N} where A<:Union{Base.ReshapedArray{T,N,A,MI} where MI<:Tuple{Vararg{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},N} where N} where A<:Union{SubArray{T,N,P,I,true} where I<:Tuple{Union{Base.Slice, UnitRange},Vararg{Any,N} where N} where P where N where T, DenseArray} where N where T, DenseArray}; full, thin) where T<:Union{Complex{Float32}, Complex{Float64}, Float32, Float64} at linalg/svd.jl:47
  ...
Stacktrace:
 [1] kwerr(::Base.Iterators.IndexValue{Symbol,Bool,Tuple{Symbol},NamedTuple{(:full,),Tuple{Bool}}}, ::Function, ::Array{BigFloat,2}) at ./error.jl:97
 [2] #svdfact! at ./<missing>:0 [inlined]
 [3] #svdfact#113 at ./linalg/svd.jl:103 [inlined]
 [4] svdfact(::Array{BigFloat,2}) at ./linalg/svd.jl:97
 [5] top-level scope
 [6] include at ./boot.jl:293 [inlined]
 [7] include_relative(::Module, ::String) at ./loading.jl:521
 [8] include(::Module, ::String) at ./sysimg.jl:26
 [9] include(::String) at ./sysimg.jl:65
 [10] top-level scope at ./<missing>:5
 [11] include at ./boot.jl:293 [inlined]
 [12] include_relative(::Module, ::String) at ./loading.jl:521
 [13] include(::Module, ::String) at ./sysimg.jl:26
 [14] process_options(::Base.JLOptions) at ./client.jl:324
 [15] _start() at ./client.jl:375
in expression starting at /home/vagrant/.julia/v0.7/GenericSVD/test/bigfloat.jl:10
in expression starting at /home/vagrant/.julia/v0.7/GenericSVD/test/runtests.jl:1
┌ Error: ------------------------------------------------------------
│ # Testing failed for GenericSVD
│   exception =
│    failed process: Process(`/home/vagrant/julia/bin/julia -Cnative -J/home/vagrant/julia/lib/julia/sys.so --compile=yes --depwarn=yes --code-coverage=none --color=no --compiled-modules=yes --check-bounds=yes --warn-overwrite=yes --startup-file=yes /home/vagrant/.julia/v0.7/GenericSVD/test/runtests.jl`, ProcessExited(1)) [1]
│    Stacktrace:
│     [1] error(::String, ::Base.Process, ::String, ::Int64, ::String) at ./error.jl:42
│     [2] pipeline_error(::Base.Process) at ./process.jl:707
│     [3] run(::Cmd) at ./process.jl:669
│     [4] (::getfield(Base.Pkg.Entry, Symbol("##91#94")){Bool,String,Array{AbstractString,1}})() at ./pkg/entry.jl:736
│     [5] cd(::getfield(Base.Pkg.Entry, Symbol("##91#94")){Bool,String,Array{AbstractString,1}}, ::String) at ./file.jl:70
│     [6] #test!#90(::Bool, ::Function, ::String, ::Array{AbstractString,1}, ::Array{AbstractString,1}, ::Array{AbstractString,1}) at ./pkg/entry.jl:724
│     [7] (::getfield(Base.Pkg.Entry, Symbol("#kw##test!")))(::NamedTuple{(:coverage,),Tuple{Bool}}, ::typeof(Base.Pkg.Entry.test!), ::String, ::Array{AbstractString,1}, ::Array{AbstractString,1}, ::Array{AbstractString,1}) at ./<missing>:0
│     [8] #test#98(::Bool, ::Function, ::Array{AbstractString,1}) at ./pkg/entry.jl:763
│     [9] (::getfield(Base.Pkg.Entry, Symbol("#kw##test")))(::NamedTuple{(:coverage,),Tuple{Bool}}, ::typeof(Base.Pkg.Entry.test), ::Array{AbstractString,1}) at ./<missing>:0
│     [10] (::getfield(Base.Pkg.Dir, Symbol("##4#7")){Base.Iterators.IndexValue{Symbol,Bool,Tuple{Symbol},NamedTuple{(:coverage,),Tuple{Bool}}},typeof(Base.Pkg.Entry.test),Tuple{Array{AbstractString,1}}})() at ./pkg/dir.jl:36
│     [11] cd(::getfield(Base.Pkg.Dir, Symbol("##4#7")){Base.Iterators.IndexValue{Symbol,Bool,Tuple{Symbol},NamedTuple{(:coverage,),Tuple{Bool}}},typeof(Base.Pkg.Entry.test),Tuple{Array{AbstractString,1}}}, ::String) at ./file.jl:70
│     [12] #cd#1(::Base.Iterators.IndexValue{Symbol,Bool,Tuple{Symbol},NamedTuple{(:coverage,),Tuple{Bool}}}, ::Function, ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N} where N) at ./pkg/dir.jl:36
│     [13] (::getfield(Base.Pkg.Dir, Symbol("#kw##cd")))(::NamedTuple{(:coverage,),Tuple{Bool}}, ::typeof(Base.Pkg.Dir.cd), ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N} where N) at ./<missing>:0
│     [14] #test#3(::Bool, ::Function, ::String, ::Vararg{String,N} where N) at ./pkg/pkg.jl:274
│     [15] test(::String, ::Vararg{String,N} where N) at ./pkg/pkg.jl:274
│     [16] top-level scope
│     [17] eval at ./boot.jl:296 [inlined]
│     [18] eval(::Module, ::Expr) at ./sysimg.jl:71
│     [19] process_options(::Base.JLOptions) at ./client.jl:301
│     [20] _start() at ./client.jl:375
└                                                  @ Base.Pkg.Entry entry.jl:739
[ Info: Removing Calculus v0.2.2                   @ Base.Pkg.Entry entry.jl:546
[ Info: Removing DualNumbers v0.3.0                @ Base.Pkg.Entry entry.jl:546
[ Info: Removing NaNMath v0.3.0                    @ Base.Pkg.Entry entry.jl:546
[ Info: Removing Quaternions v0.3.0                @ Base.Pkg.Entry entry.jl:546
ERROR: GenericSVD had test errors

>>> End of log
