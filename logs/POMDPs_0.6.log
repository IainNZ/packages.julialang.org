>>> 'Pkg.add("POMDPs")' log
INFO: Installing BinDeps v0.8.6
INFO: Installing Calculus v0.2.2
INFO: Installing DataStructures v0.7.4
INFO: Installing Distributions v0.15.0
INFO: Installing Missings v0.2.6
INFO: Installing PDMats v0.8.0
INFO: Installing POMDPs v0.6.6
INFO: Installing QuadGK v0.2.0
INFO: Installing Rmath v0.3.2
INFO: Installing SHA v0.5.6
INFO: Installing SortingAlgorithms v0.2.0
INFO: Installing SpecialFunctions v0.3.8
INFO: Installing StatsBase v0.20.0
INFO: Installing StatsFuns v0.5.0
INFO: Installing URIParser v0.3.0
INFO: Building SpecialFunctions
INFO: Building Rmath
INFO: Package database updated
INFO: METADATA is out-of-date — you may not have the latest version of POMDPs
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("POMDPs")' log
Julia Version 0.6.2
Commit d386e40c17 (2017-12-13 18:08 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-135-generic #184-Ubuntu SMP Wed Oct 18 11:55:51 UTC 2017 x86_64 x86_64
Memory: 2.93927001953125 GB (692.09375 MB free)
Uptime: 17725.0 sec
Load Avg:  0.98193359375  0.98583984375  1.03369140625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz     936469 s         59 s      51010 s     554217 s         22 s
#2  3499 MHz     216150 s         90 s      25472 s    1497503 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.6
2 required packages:
 - JSON                          0.16.4
 - POMDPs                        0.6.6
16 additional packages:
 - BinDeps                       0.8.6
 - Calculus                      0.2.2
 - Compat                        0.53.0
 - DataStructures                0.7.4
 - Distributions                 0.15.0
 - Missings                      0.2.6
 - Nullables                     0.0.3
 - PDMats                        0.8.0
 - QuadGK                        0.2.0
 - Rmath                         0.3.2
 - SHA                           0.5.6
 - SortingAlgorithms             0.2.0
 - SpecialFunctions              0.3.8
 - StatsBase                     0.20.0
 - StatsFuns                     0.5.0
 - URIParser                     0.3.0
INFO: Testing POMDPs
WARNING: Method definition midpoints(Base.Range{T} where T) in module Base at deprecated.jl:56 overwritten in module StatsBase at /home/vagrant/.julia/v0.6/StatsBase/src/hist.jl:535.
WARNING: Method definition midpoints(AbstractArray{T, 1} where T) in module Base at deprecated.jl:56 overwritten in module StatsBase at /home/vagrant/.julia/v0.6/StatsBase/src/hist.jl:533.
There should be a warning about no @reqs here:
WARNING: No @req or @subreq found in @POMDP_requirements block.

INFO: POMDPs.jl requirements for solve(::CoolSolver, ::POMDPs.POMDP) and dependencies. ([✔] = implemented correctly; [X] = missing)

For solve(::CoolSolver, ::POMDPs.POMDP):
  [X] states(::SimplePOMDP)
  [✔] actions(::SimplePOMDP)
  [X] transition(::SimplePOMDP, ::Float64, ::Bool)
  WARNING: Some requirements may not be shown because a MethodError was thrown.
For util2(::POMDPs.POMDP) (in solve(::CoolSolver, ::POMDPs.POMDP)):
  [X] observations(::SimplePOMDP)

Note: Missing methods are often due to incorrect importing. Consider using `importall POMDPs`.

Throwing the first exception (from processing solve(::CoolSolver, ::POMDPs.POMDP) requirements):


INFO: POMDPs.jl requirements for solve(::CoolSolver, ::POMDPs.POMDP) and dependencies. ([✔] = implemented correctly; [X] = missing)

For solve(::CoolSolver, ::POMDPs.POMDP):
  [✔] states(::SimplePOMDP)
  [✔] actions(::SimplePOMDP)
  [✔] transition(::SimplePOMDP, ::Float64, ::Bool)
  [X] rand(::AbstractRNG, ::SimpleDistribution)
For util2(::POMDPs.POMDP) (in solve(::CoolSolver, ::POMDPs.POMDP)):
  [X] observations(::SimplePOMDP)
For util1(::Float64) (in solve(::CoolSolver, ::POMDPs.POMDP)):
  [No requirements specified]

Note: Missing methods are often due to incorrect importing. Consider using `importall POMDPs`.

There should be no warnings or requirements output below this point!

Warning expected:
WARNING: POMDPs.jl: Could not find or synthesize initial_state(::W, ::MersenneTwister). Either implement it directly, or, to automatically synthesize it, implement the following methods from the explicit interface:

  [X] initial_state_distribution(::W)

    
([✔] = already implemented correctly; [X] = missing)
Warning expected:
WARNING: POMDPs.jl: Could not find or synthesize generate_s(::W, ::Int64, ::Bool, ::MersenneTwister). Either implement it directly, or, to automatically synthesize it, implement the following methods from the explicit interface:

  [X] transition(::W, ::Int64, ::Bool)

    
([✔] = already implemented correctly; [X] = missing)
Warning expected:
WARNING: POMDPs.jl: Could not find or synthesize generate_sr(::W, ::Int64, ::Bool, ::MersenneTwister). Either implement it directly, or, to automatically synthesize it, implement the following methods from the explicit interface:

  [X] transition(::W, ::Int64, ::Bool)
  [X] reward(::W, ::Int64, ::Bool, ::Int64)

    
OR implement the following methods from the generative interface:

  [X] generate_s(::W, ::Int64, ::Bool, ::AbstractRNG)
  [X] reward(::W, ::Int64, ::Bool, ::Int64)

                     
([✔] = already implemented correctly; [X] = missing)
Warning expected:
WARNING: POMDPs.jl: Could not find or synthesize generate_o(::W, ::Int64, ::Bool, ::Int64, ::MersenneTwister). Either implement it directly, or, to automatically synthesize it, implement the following methods from the explicit interface:

  [X] observation(::W, ::Int64, ::Bool, ::Int64)

    
([✔] = already implemented correctly; [X] = missing)
Warning expected:
WARNING: POMDPs.jl: Could not find or synthesize generate_so(::W, ::Int64, ::Bool, ::MersenneTwister). Either implement it directly, or, to automatically synthesize it, implement the following methods from the explicit interface:

  [X] transition(::W, ::Int64, ::Bool)
  [X] observation(::W, ::Int64, ::Bool, ::Int64)

    
OR implement the following methods from the generative interface:

  [X] generate_s(::W, ::Int64, ::Bool, ::AbstractRNG)
  [X] generate_o(::W, ::Int64, ::Bool, ::Int64, ::AbstractRNG)

                     
([✔] = already implemented correctly; [X] = missing)
Warning expected:
WARNING: POMDPs.jl: Could not find or synthesize generate_sor(::W, ::Int64, ::Bool, ::MersenneTwister). Either implement it directly, or, to automatically synthesize it, implement the following methods from the explicit interface:

  [X] transition(::W, ::Int64, ::Bool)
  [X] observation(::W, ::Int64, ::Bool, ::Int64)
  [X] reward(::W, ::Int64, ::Bool, ::Int64)

    
OR implement the following methods from the generative interface:

  [X] generate_sr(::W, ::Int64, ::Bool, ::AbstractRNG)
  [X] generate_o(::W, ::Int64, ::Bool, ::Int64, ::AbstractRNG)

                     
([✔] = already implemented correctly; [X] = missing)
Warning expected:
WARNING: POMDPs.jl: Could not find or synthesize generate_or(::W, ::Int64, ::Bool, ::MersenneTwister). Either implement it directly, or, to automatically synthesize it, implement the following methods from the explicit interface:

  [X] observation(::W, ::Int64, ::Bool, ::Int64)
  [X] reward(::W, ::Int64, ::Bool, ::Int64)

    
OR implement the following methods from the generative interface:

  [X] generate_o(::W, ::Int64, ::Bool, ::Int64, ::AbstractRNG)
  [X] reward(::W, ::Int64, ::Bool, ::Int64)

                     
([✔] = already implemented correctly; [X] = missing)
INFO: POMDPs tests passed

>>> End of log
