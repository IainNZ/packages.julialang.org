>>> 'Pkg.add("FortranFiles")' log
[ Info: Cloning cache of FortranFiles from https://github.com/traktofon/FortranFiles.jl.git
[ Info: Installing FortranFiles v0.3.0
[ Info: Package database updated
┌ Info: METADATA is out-of-date — you may not have the latest version of FortranFiles
└ Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("FortranFiles")' log
Julia Version 0.7.0-DEV.3563
Commit cf6303abe0 (2018-01-24 23:08 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
      Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-135-generic #184-Ubuntu SMP Wed Oct 18 11:55:51 UTC 2017 x86_64 x86_64
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
              speed         user         nice          sys         idle          irq
       #1  3500 MHz    4942724 s       7871 s     243519 s    1487399 s         65 s
       #2  3500 MHz    1121963 s         48 s     101796 s    6441791 s          1 s
       
  Memory: 2.93927001953125 GB (862.60546875 MB free)
  Uptime: 77937.0 sec
  Load Avg:  1.00341796875  0.9921875  0.96533203125
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant
Packages:
  Package Directory: /home/vagrant/.julia/v0.7
  Package Status:
2 required packages:
 - FortranFiles                  0.3.0
 - JSON                          0.16.4
2 additional packages:
 - Compat                        0.49.0
 - Nullables                     0.0.3
[ Info: Testing FortranFiles
┌ Warning: Deprecated syntax `immutable` at /home/vagrant/.julia/v0.7/FortranFiles/test/runtests.jl:18.
│ Use `struct` instead.
└ @ nothing runtests.jl:18
┌ Warning: Deprecated syntax `immutable` at /home/vagrant/.julia/v0.7/FortranFiles/test/runtests.jl:41.
│ Use `struct` instead.
└ @ nothing runtests.jl:41
┌ Warning: Deprecated syntax `immutable` at /home/vagrant/.julia/v0.7/FortranFiles/src/types.jl:8.
│ Use `struct` instead.
└ @ nothing types.jl:8
┌ Warning: Deprecated syntax `immutable` at /home/vagrant/.julia/v0.7/FortranFiles/src/types.jl:16.
│ Use `struct` instead.
└ @ nothing types.jl:16
┌ Warning: Deprecated syntax `immutable` at /home/vagrant/.julia/v0.7/FortranFiles/src/types.jl:24.
│ Use `struct` instead.
└ @ nothing types.jl:24
┌ Warning: Deprecated syntax `immutable` at /home/vagrant/.julia/v0.7/FortranFiles/src/types.jl:33.
│ Use `struct` instead.
└ @ nothing types.jl:33
┌ Warning: Deprecated syntax `immutable` at /home/vagrant/.julia/v0.7/FortranFiles/src/types.jl:46.
│ Use `struct` instead.
└ @ nothing types.jl:46
┌ Warning: Deprecated syntax `parametric method syntax show{T}(io::IO, ::WithoutSubrecords{T})` around /home/vagrant/.julia/v0.7/FortranFiles/src/types.jl:29.
│ Use `show(io::IO, #unused#::WithoutSubrecords{T}) where T` instead.
└ @ nothing types.jl:29
┌ Warning: Deprecated syntax `immutable` at /home/vagrant/.julia/v0.7/FortranFiles/src/file.jl:3.
│ Use `struct` instead.
└ @ nothing file.jl:3
┌ Warning: Deprecated syntax `type` at /home/vagrant/.julia/v0.7/FortranFiles/src/withoutsubrecords.jl:3.
│ Use `mutable struct` instead.
└ @ nothing withoutsubrecords.jl:3
┌ Warning: Deprecated syntax `parametric method syntax Record{T, C}(f::FortranFile{SequentialAccess{WithoutSubrecords{T}}, C})` around /home/vagrant/.julia/v0.7/FortranFiles/src/withoutsubrecords.jl:13.
│ Use `Record(f::FortranFile{SequentialAccess{WithoutSubrecords{T}}, C}) where {T, C}` instead.
└ @ nothing withoutsubrecords.jl:13
┌ Warning: Deprecated syntax `parametric method syntax Record{T, C}(f::FortranFile{SequentialAccess{WithoutSubrecords{T}}, C}, towrite::Integer)` around /home/vagrant/.julia/v0.7/FortranFiles/src/withoutsubrecords.jl:20.
│ Use `Record(f::FortranFile{SequentialAccess{WithoutSubrecords{T}}, C}, towrite::Integer) where {T, C}` instead.
└ @ nothing withoutsubrecords.jl:20
┌ Warning: Deprecated syntax `parametric method syntax close{T}(rec::RecordWithoutSubrecords{T})` around /home/vagrant/.julia/v0.7/FortranFiles/src/withoutsubrecords.jl:40.
│ Use `close(rec::RecordWithoutSubrecords{T}) where T` instead.
└ @ nothing withoutsubrecords.jl:40
┌ Warning: Deprecated syntax `type` at /home/vagrant/.julia/v0.7/FortranFiles/src/withsubrecords.jl:3.
│ Use `mutable struct` instead.
└ @ nothing withsubrecords.jl:3
┌ Warning: Deprecated syntax `sign?` at /home/vagrant/.julia/v0.7/FortranFiles/src/withsubrecords.jl:29.
│ Use `sign ?` instead.
└ @ nothing withsubrecords.jl:29
┌ Warning: Deprecated syntax `sign ? -1:` at /home/vagrant/.julia/v0.7/FortranFiles/src/withsubrecords.jl:29.
│ Use `sign ? -1 :` instead.
└ @ nothing withsubrecords.jl:29
┌ Warning: Deprecated syntax `parametric method syntax Record{C}(f::FortranFile{SequentialAccess{WithSubrecords}, C})` around /home/vagrant/.julia/v0.7/FortranFiles/src/withsubrecords.jl:36.
│ Use `Record(f::FortranFile{SequentialAccess{WithSubrecords}, C}) where C` instead.
└ @ nothing withsubrecords.jl:36
┌ Warning: Deprecated syntax `type` at /home/vagrant/.julia/v0.7/FortranFiles/src/fixedlengthrecords.jl:3.
│ Use `mutable struct` instead.
└ @ nothing fixedlengthrecords.jl:3
┌ Warning: Deprecated syntax `parametric method syntax Record{C}(f::FortranFile{DirectAccess, C})` around /home/vagrant/.julia/v0.7/FortranFiles/src/fixedlengthrecords.jl:13.
│ Use `Record(f::FortranFile{DirectAccess, C}) where C` instead.
└ @ nothing fixedlengthrecords.jl:13
┌ Warning: Deprecated syntax `parametric method syntax Record{C}(f::FortranFile{DirectAccess, C}, towrite::Integer)` around /home/vagrant/.julia/v0.7/FortranFiles/src/fixedlengthrecords.jl:20.
│ Use `Record(f::FortranFile{DirectAccess, C}, towrite::Integer) where C` instead.
└ @ nothing fixedlengthrecords.jl:20
┌ Warning: Deprecated syntax `immutable` at /home/vagrant/.julia/v0.7/FortranFiles/src/string.jl:13.
│ Use `struct` instead.
└ @ nothing string.jl:13
┌ Warning: Deprecated syntax `>(i, l)?` at /home/vagrant/.julia/v0.7/FortranFiles/src/string.jl:32.
│ Use `>(i, l) ?` instead.
└ @ nothing string.jl:32
┌ Warning: Deprecated syntax `>(i, l) ?'` at /home/vagrant/.julia/v0.7/FortranFiles/src/string.jl:32.
│ Use `>(i, l) ? '` instead.
└ @ nothing string.jl:32
┌ Warning: Deprecated syntax `>(i, l) ? ' ':` at /home/vagrant/.julia/v0.7/FortranFiles/src/string.jl:32.
│ Use `>(i, l) ? ' ' :` instead.
└ @ nothing string.jl:32
┌ Warning: Deprecated syntax `>(i, l) ? ' ' :s` at /home/vagrant/.julia/v0.7/FortranFiles/src/string.jl:32.
│ Use `>(i, l) ? ' ' : s` instead.
└ @ nothing string.jl:32
┌ Warning: Deprecated syntax `parametric method syntax sizeof{N}(::Type{FString{N}})` around /home/vagrant/.julia/v0.7/FortranFiles/src/string.jl:17.
│ Use `sizeof(#unused#::Type{FString{N}}) where N` instead.
└ @ nothing string.jl:17
┌ Warning: Deprecated syntax `parametric method syntax sizeof{N}(::FString{N})` around /home/vagrant/.julia/v0.7/FortranFiles/src/string.jl:18.
│ Use `sizeof(#unused#::FString{N}) where N` instead.
└ @ nothing string.jl:18
┌ Warning: Deprecated syntax `parametric method syntax sizeof{N}(a::Array{FString{N}})` around /home/vagrant/.julia/v0.7/FortranFiles/src/string.jl:19.
│ Use `sizeof(a::Array{FString{N}}) where N` instead.
└ @ nothing string.jl:19
┌ Warning: Deprecated syntax `parametric method syntax print{N}(io::IO, ::Type{FString{N}})` around /home/vagrant/.julia/v0.7/FortranFiles/src/string.jl:21.
│ Use `print(io::IO, #unused#::Type{FString{N}}) where N` instead.
└ @ nothing string.jl:21
┌ Warning: Deprecated syntax `parametric method syntax show{N}(io::IO, T::Type{FString{N}})` around /home/vagrant/.julia/v0.7/FortranFiles/src/string.jl:22.
│ Use `show(io::IO, T::Type{FString{N}}) where N` instead.
└ @ nothing string.jl:22
┌ Warning: Deprecated syntax `parametric method syntax print{N}(io::IO, s::FString{N})` around /home/vagrant/.julia/v0.7/FortranFiles/src/string.jl:23.
│ Use `print(io::IO, s::FString{N}) where N` instead.
└ @ nothing string.jl:23
┌ Warning: Deprecated syntax `parametric method syntax show{N}(io::IO, s::FString{N})` around /home/vagrant/.julia/v0.7/FortranFiles/src/string.jl:24.
│ Use `show(io::IO, s::FString{N}) where N` instead.
└ @ nothing string.jl:24
┌ Warning: Deprecated syntax `parametric method syntax bswap{N}(s::FString{N})` around /home/vagrant/.julia/v0.7/FortranFiles/src/string.jl:28.
│ Use `bswap(s::FString{N}) where N` instead.
└ @ nothing string.jl:28
┌ Warning: Deprecated syntax `parametric method syntax convert{N}(::Type{FString{N}}, s::String)` around /home/vagrant/.julia/v0.7/FortranFiles/src/string.jl:31.
│ Use `convert(#unused#::Type{FString{N}}, s::String) where N` instead.
└ @ nothing string.jl:31
┌ Warning: Deprecated syntax `parametric method syntax convert{N}(::Type{String}, s::FString{N})` around /home/vagrant/.julia/v0.7/FortranFiles/src/string.jl:44.
│ Use `convert(#unused#::Type{String}, s::FString{N}) where N` instead.
└ @ nothing string.jl:44
┌ Warning: Deprecated syntax `parametric method syntax read{N}(io::IO, t::Type{FString{N}})` around /home/vagrant/.julia/v0.7/FortranFiles/src/string.jl:48.
│ Use `read(io::IO, t::Type{FString{N}}) where N` instead.
└ @ nothing string.jl:48
┌ Warning: Deprecated syntax `parametric method syntax write{N}(io::IO, s::FString{N})` around /home/vagrant/.julia/v0.7/FortranFiles/src/string.jl:54.
│ Use `write(io::IO, s::FString{N}) where N` instead.
└ @ nothing string.jl:54
┌ Warning: Deprecated syntax `parametric method syntax trimstring{N}(s::FString{N})` around /home/vagrant/.julia/v0.7/FortranFiles/src/string.jl:64.
│ Use `trimstring(s::FString{N}) where N` instead.
└ @ nothing string.jl:64
┌ Warning: Deprecated syntax `parametric method syntax read_spec{T}(rec::Record, spec::Type{T})` around /home/vagrant/.julia/v0.7/FortranFiles/src/read.jl:65.
│ Use `read_spec(rec::Record, spec::Type{T}) where T` instead.
└ @ nothing read.jl:65
┌ Warning: Deprecated syntax `parametric method syntax read_spec{T, N}(rec::Record, spec::Array{T, N})` around /home/vagrant/.julia/v0.7/FortranFiles/src/read.jl:69.
│ Use `read_spec(rec::Record, spec::Array{T, N}) where {T, N}` instead.
└ @ nothing read.jl:69
┌ Warning: Deprecated syntax `parametric method syntax read_spec{I <: Integer}(rec::Record, spec::Tuple{DataType, I})` around /home/vagrant/.julia/v0.7/FortranFiles/src/read.jl:75.
│ Use `read_spec(rec::Record, spec::Tuple{DataType, I}) where I <: Integer` instead.
└ @ nothing read.jl:75
┌ Warning: Deprecated syntax `parametric method syntax read_spec{N}(rec::Record, spec::Tuple{DataType, Vararg{Integer, N}})` around /home/vagrant/.julia/v0.7/FortranFiles/src/read.jl:80.
│ Use `read_spec(rec::Record, spec::Tuple{DataType, Vararg{Integer, N}}) where N` instead.
└ @ nothing read.jl:80
┌ Warning: Deprecated syntax `parametric method syntax read_spec{N}(rec::Record, spec::Tuple{DataType, Tuple{Vararg{Integer, N}}})` around /home/vagrant/.julia/v0.7/FortranFiles/src/read.jl:86.
│ Use `read_spec(rec::Record, spec::Tuple{DataType, Tuple{Vararg{Integer, N}}}) where N` instead.
└ @ nothing read.jl:86
┌ Warning: Deprecated syntax `parametric method syntax write_var{N}(rec::Record, arr::Array{Int8, N})` around /home/vagrant/.julia/v0.7/FortranFiles/src/write.jl:49.
│ Use `write_var(rec::Record, arr::Array{Int8, N}) where N` instead.
└ @ nothing write.jl:49
┌ Warning: Deprecated syntax `parametric method syntax write_var{T}(rec::Record, var::T)` around /home/vagrant/.julia/v0.7/FortranFiles/src/write.jl:54.
│ Use `write_var(rec::Record, var::T) where T` instead.
└ @ nothing write.jl:54
┌ Warning: Deprecated syntax `parametric method syntax write_var{T, N}(rec::Record, arr::Array{T, N})` around /home/vagrant/.julia/v0.7/FortranFiles/src/write.jl:59.
│ Use `write_var(rec::Record, arr::Array{T, N}) where {T, N}` instead.
└ @ nothing write.jl:59
┌ Warning: Deprecated syntax `parametric method syntax write_var{T, N}(rec::RecordWithSubrecords{NOCONV}, arr::Array{T, N})` around /home/vagrant/.julia/v0.7/FortranFiles/src/write.jl:67.
│ Use `write_var(rec::RecordWithSubrecords{NOCONV}, arr::Array{T, N}) where {T, N}` instead.
└ @ nothing write.jl:67
┌ Warning: Deprecated syntax `parametric method syntax write_var{N}(rec::RecordWithSubrecords{NOCONV}, arr::Array{Int8, N})` around /home/vagrant/.julia/v0.7/FortranFiles/src/write.jl:68.
│ Use `write_var(rec::RecordWithSubrecords{NOCONV}, arr::Array{Int8, N}) where N` instead.
└ @ nothing write.jl:68
┌ Warning: Deprecated syntax `parametric method syntax write_var{T, N, R}(rec::RecordWithoutSubrecords{R, NOCONV}, arr::Array{T, N})` around /home/vagrant/.julia/v0.7/FortranFiles/src/write.jl:69.
│ Use `write_var(rec::RecordWithoutSubrecords{R, NOCONV}, arr::Array{T, N}) where {T, N, R}` instead.
└ @ nothing write.jl:69
┌ Warning: Deprecated syntax `parametric method syntax write_var{N, R}(rec::RecordWithoutSubrecords{R, NOCONV}, arr::Array{Int8, N})` around /home/vagrant/.julia/v0.7/FortranFiles/src/write.jl:70.
│ Use `write_var(rec::RecordWithoutSubrecords{R, NOCONV}, arr::Array{Int8, N}) where {N, R}` instead.
└ @ nothing write.jl:70
┌ Warning: Deprecated syntax `parametric method syntax check_fortran_type{T}(x::Array{T})` around /home/vagrant/.julia/v0.7/FortranFiles/src/write.jl:72.
│ Use `check_fortran_type(x::Array{T}) where T` instead.
└ @ nothing write.jl:72
┌ Warning: Deprecated syntax `parametric method syntax check_fortran_type{T}(x::T)` around /home/vagrant/.julia/v0.7/FortranFiles/src/write.jl:74.
│ Use `check_fortran_type(x::T) where T` instead.
└ @ nothing write.jl:74
┌ Warning: Deprecated syntax `parametric method syntax sizeof_var{T}(var::T)` around /home/vagrant/.julia/v0.7/FortranFiles/src/write.jl:77.
│ Use `sizeof_var(var::T) where T` instead.
└ @ nothing write.jl:77
WARNING: Base.Test is deprecated, run `using Test` instead.
  likely near /home/vagrant/.julia/v0.7/FortranFiles/test/runtests.jl:2
WARNING: Base.Complex128 is deprecated, use ComplexF64 instead.
  likely near /home/vagrant/.julia/v0.7/FortranFiles/test/runtests.jl:14
make: Entering directory `/home/vagrant/.julia/v0.7/FortranFiles/test/codegen'
julia genrandom.jl
touch .random-stamp
gfortran -std=f2008 -fcheck=all -Wall -Wno-conversion -c -o randutil.o randutil.f90
gfortran -std=f2008 -fcheck=all -Wall -Wno-conversion -c -o randomi1.o randomi1.f90
gfortran -std=f2008 -fcheck=all -Wall -Wno-conversion -c -o randomi2.o randomi2.f90
gfortran -std=f2008 -fcheck=all -Wall -Wno-conversion -c -o randomi4.o randomi4.f90
gfortran -std=f2008 -fcheck=all -Wall -Wno-conversion -c -o randomi8.o randomi8.f90
gfortran -std=f2008 -fcheck=all -Wall -Wno-conversion -c -o randomr4.o randomr4.f90
gfortran -std=f2008 -fcheck=all -Wall -Wno-conversion -c -o randomr8.o randomr8.f90
gfortran -std=f2008 -fcheck=all -Wall -Wno-conversion -c -o randomc8.o randomc8.f90
gfortran -std=f2008 -fcheck=all -Wall -Wno-conversion -c -o randomc16.o randomc16.f90
gfortran -std=f2008 -fcheck=all -Wall -Wno-conversion -c -o randomstr.o randomstr.f90
gfortran -std=f2008 -fcheck=all -Wall -Wno-conversion  -c -o gendatadirect_DA_no.o gendatadirect.F90
gfortran -o gendatadirect_DA_no.x randomi1.o randomi2.o randomi4.o randomi8.o randomr4.o randomr8.o randomc8.o randomc16.o randomstr.o randutil.o gendatadirect_DA_no.o
make: Leaving directory `/home/vagrant/.julia/v0.7/FortranFiles/test/codegen'
make: Entering directory `/home/vagrant/.julia/v0.7/FortranFiles/test/codegen'
julia gencode.jl
┌ Warning: Deprecated syntax `immutable` at /home/vagrant/.julia/v0.7/FortranFiles/test/codegen/gencode.jl:4.
│ Use `struct` instead.
└ @ nothing gencode.jl:4
┌ Warning: Deprecated syntax `immutable` at /home/vagrant/.julia/v0.7/FortranFiles/src/types.jl:8.
│ Use `struct` instead.
└ @ nothing types.jl:8
┌ Warning: Deprecated syntax `immutable` at /home/vagrant/.julia/v0.7/FortranFiles/src/types.jl:16.
│ Use `struct` instead.
└ @ nothing types.jl:16
┌ Warning: Deprecated syntax `immutable` at /home/vagrant/.julia/v0.7/FortranFiles/src/types.jl:24.
│ Use `struct` instead.
└ @ nothing types.jl:24
┌ Warning: Deprecated syntax `immutable` at /home/vagrant/.julia/v0.7/FortranFiles/src/types.jl:33.
│ Use `struct` instead.
└ @ nothing types.jl:33
┌ Warning: Deprecated syntax `immutable` at /home/vagrant/.julia/v0.7/FortranFiles/src/types.jl:46.
│ Use `struct` instead.
└ @ nothing types.jl:46
┌ Warning: Deprecated syntax `parametric method syntax show{T}(io::IO, ::WithoutSubrecords{T})` around /home/vagrant/.julia/v0.7/FortranFiles/src/types.jl:29.
│ Use `show(io::IO, #unused#::WithoutSubrecords{T}) where T` instead.
└ @ nothing types.jl:29
┌ Warning: Deprecated syntax `immutable` at /home/vagrant/.julia/v0.7/FortranFiles/src/file.jl:3.
│ Use `struct` instead.
└ @ nothing file.jl:3
┌ Warning: Deprecated syntax `type` at /home/vagrant/.julia/v0.7/FortranFiles/src/withoutsubrecords.jl:3.
│ Use `mutable struct` instead.
└ @ nothing withoutsubrecords.jl:3
┌ Warning: Deprecated syntax `parametric method syntax Record{T, C}(f::FortranFile{SequentialAccess{WithoutSubrecords{T}}, C})` around /home/vagrant/.julia/v0.7/FortranFiles/src/withoutsubrecords.jl:13.
│ Use `Record(f::FortranFile{SequentialAccess{WithoutSubrecords{T}}, C}) where {T, C}` instead.
└ @ nothing withoutsubrecords.jl:13
┌ Warning: Deprecated syntax `parametric method syntax Record{T, C}(f::FortranFile{SequentialAccess{WithoutSubrecords{T}}, C}, towrite::Integer)` around /home/vagrant/.julia/v0.7/FortranFiles/src/withoutsubrecords.jl:20.
│ Use `Record(f::FortranFile{SequentialAccess{WithoutSubrecords{T}}, C}, towrite::Integer) where {T, C}` instead.
└ @ nothing withoutsubrecords.jl:20
┌ Warning: Deprecated syntax `parametric method syntax close{T}(rec::RecordWithoutSubrecords{T})` around /home/vagrant/.julia/v0.7/FortranFiles/src/withoutsubrecords.jl:40.
│ Use `close(rec::RecordWithoutSubrecords{T}) where T` instead.
└ @ nothing withoutsubrecords.jl:40
┌ Warning: Deprecated syntax `type` at /home/vagrant/.julia/v0.7/FortranFiles/src/withsubrecords.jl:3.
│ Use `mutable struct` instead.
└ @ nothing withsubrecords.jl:3
┌ Warning: Deprecated syntax `sign?` at /home/vagrant/.julia/v0.7/FortranFiles/src/withsubrecords.jl:29.
│ Use `sign ?` instead.
└ @ nothing withsubrecords.jl:29
┌ Warning: Deprecated syntax `sign ? -1:` at /home/vagrant/.julia/v0.7/FortranFiles/src/withsubrecords.jl:29.
│ Use `sign ? -1 :` instead.
└ @ nothing withsubrecords.jl:29
┌ Warning: Deprecated syntax `parametric method syntax Record{C}(f::FortranFile{SequentialAccess{WithSubrecords}, C})` around /home/vagrant/.julia/v0.7/FortranFiles/src/withsubrecords.jl:36.
│ Use `Record(f::FortranFile{SequentialAccess{WithSubrecords}, C}) where C` instead.
└ @ nothing withsubrecords.jl:36
┌ Warning: Deprecated syntax `type` at /home/vagrant/.julia/v0.7/FortranFiles/src/fixedlengthrecords.jl:3.
│ Use `mutable struct` instead.
└ @ nothing fixedlengthrecords.jl:3
┌ Warning: Deprecated syntax `parametric method syntax Record{C}(f::FortranFile{DirectAccess, C})` around /home/vagrant/.julia/v0.7/FortranFiles/src/fixedlengthrecords.jl:13.
│ Use `Record(f::FortranFile{DirectAccess, C}) where C` instead.
└ @ nothing fixedlengthrecords.jl:13
┌ Warning: Deprecated syntax `parametric method syntax Record{C}(f::FortranFile{DirectAccess, C}, towrite::Integer)` around /home/vagrant/.julia/v0.7/FortranFiles/src/fixedlengthrecords.jl:20.
│ Use `Record(f::FortranFile{DirectAccess, C}, towrite::Integer) where C` instead.
└ @ nothing fixedlengthrecords.jl:20
┌ Warning: Deprecated syntax `immutable` at /home/vagrant/.julia/v0.7/FortranFiles/src/string.jl:13.
│ Use `struct` instead.
└ @ nothing string.jl:13
┌ Warning: Deprecated syntax `>(i, l)?` at /home/vagrant/.julia/v0.7/FortranFiles/src/string.jl:32.
│ Use `>(i, l) ?` instead.
└ @ nothing string.jl:32
┌ Warning: Deprecated syntax `>(i, l) ?'` at /home/vagrant/.julia/v0.7/FortranFiles/src/string.jl:32.
│ Use `>(i, l) ? '` instead.
└ @ nothing string.jl:32
┌ Warning: Deprecated syntax `>(i, l) ? ' ':` at /home/vagrant/.julia/v0.7/FortranFiles/src/string.jl:32.
│ Use `>(i, l) ? ' ' :` instead.
└ @ nothing string.jl:32
┌ Warning: Deprecated syntax `>(i, l) ? ' ' :s` at /home/vagrant/.julia/v0.7/FortranFiles/src/string.jl:32.
│ Use `>(i, l) ? ' ' : s` instead.
└ @ nothing string.jl:32
┌ Warning: Deprecated syntax `parametric method syntax sizeof{N}(::Type{FString{N}})` around /home/vagrant/.julia/v0.7/FortranFiles/src/string.jl:17.
│ Use `sizeof(#unused#::Type{FString{N}}) where N` instead.
└ @ nothing string.jl:17
┌ Warning: Deprecated syntax `parametric method syntax sizeof{N}(::FString{N})` around /home/vagrant/.julia/v0.7/FortranFiles/src/string.jl:18.
│ Use `sizeof(#unused#::FString{N}) where N` instead.
└ @ nothing string.jl:18
┌ Warning: Deprecated syntax `parametric method syntax sizeof{N}(a::Array{FString{N}})` around /home/vagrant/.julia/v0.7/FortranFiles/src/string.jl:19.
│ Use `sizeof(a::Array{FString{N}}) where N` instead.
└ @ nothing string.jl:19
┌ Warning: Deprecated syntax `parametric method syntax print{N}(io::IO, ::Type{FString{N}})` around /home/vagrant/.julia/v0.7/FortranFiles/src/string.jl:21.
│ Use `print(io::IO, #unused#::Type{FString{N}}) where N` instead.
└ @ nothing string.jl:21
┌ Warning: Deprecated syntax `parametric method syntax show{N}(io::IO, T::Type{FString{N}})` around /home/vagrant/.julia/v0.7/FortranFiles/src/string.jl:22.
│ Use `show(io::IO, T::Type{FString{N}}) where N` instead.
└ @ nothing string.jl:22
┌ Warning: Deprecated syntax `parametric method syntax print{N}(io::IO, s::FString{N})` around /home/vagrant/.julia/v0.7/FortranFiles/src/string.jl:23.
│ Use `print(io::IO, s::FString{N}) where N` instead.
└ @ nothing string.jl:23
┌ Warning: Deprecated syntax `parametric method syntax show{N}(io::IO, s::FString{N})` around /home/vagrant/.julia/v0.7/FortranFiles/src/string.jl:24.
│ Use `show(io::IO, s::FString{N}) where N` instead.
└ @ nothing string.jl:24
┌ Warning: Deprecated syntax `parametric method syntax bswap{N}(s::FString{N})` around /home/vagrant/.julia/v0.7/FortranFiles/src/string.jl:28.
│ Use `bswap(s::FString{N}) where N` instead.
└ @ nothing string.jl:28
┌ Warning: Deprecated syntax `parametric method syntax convert{N}(::Type{FString{N}}, s::String)` around /home/vagrant/.julia/v0.7/FortranFiles/src/string.jl:31.
│ Use `convert(#unused#::Type{FString{N}}, s::String) where N` instead.
└ @ nothing string.jl:31
┌ Warning: Deprecated syntax `parametric method syntax convert{N}(::Type{String}, s::FString{N})` around /home/vagrant/.julia/v0.7/FortranFiles/src/string.jl:44.
│ Use `convert(#unused#::Type{String}, s::FString{N}) where N` instead.
└ @ nothing string.jl:44
┌ Warning: Deprecated syntax `parametric method syntax read{N}(io::IO, t::Type{FString{N}})` around /home/vagrant/.julia/v0.7/FortranFiles/src/string.jl:48.
│ Use `read(io::IO, t::Type{FString{N}}) where N` instead.
└ @ nothing string.jl:48
┌ Warning: Deprecated syntax `parametric method syntax write{N}(io::IO, s::FString{N})` around /home/vagrant/.julia/v0.7/FortranFiles/src/string.jl:54.
│ Use `write(io::IO, s::FString{N}) where N` instead.
└ @ nothing string.jl:54
┌ Warning: Deprecated syntax `parametric method syntax trimstring{N}(s::FString{N})` around /home/vagrant/.julia/v0.7/FortranFiles/src/string.jl:64.
│ Use `trimstring(s::FString{N}) where N` instead.
└ @ nothing string.jl:64
┌ Warning: Deprecated syntax `parametric method syntax read_spec{T}(rec::Record, spec::Type{T})` around /home/vagrant/.julia/v0.7/FortranFiles/src/read.jl:65.
│ Use `read_spec(rec::Record, spec::Type{T}) where T` instead.
└ @ nothing read.jl:65
┌ Warning: Deprecated syntax `parametric method syntax read_spec{T, N}(rec::Record, spec::Array{T, N})` around /home/vagrant/.julia/v0.7/FortranFiles/src/read.jl:69.
│ Use `read_spec(rec::Record, spec::Array{T, N}) where {T, N}` instead.
└ @ nothing read.jl:69
┌ Warning: Deprecated syntax `parametric method syntax read_spec{I <: Integer}(rec::Record, spec::Tuple{DataType, I})` around /home/vagrant/.julia/v0.7/FortranFiles/src/read.jl:75.
│ Use `read_spec(rec::Record, spec::Tuple{DataType, I}) where I <: Integer` instead.
└ @ nothing read.jl:75
┌ Warning: Deprecated syntax `parametric method syntax read_spec{N}(rec::Record, spec::Tuple{DataType, Vararg{Integer, N}})` around /home/vagrant/.julia/v0.7/FortranFiles/src/read.jl:80.
│ Use `read_spec(rec::Record, spec::Tuple{DataType, Vararg{Integer, N}}) where N` instead.
└ @ nothing read.jl:80
┌ Warning: Deprecated syntax `parametric method syntax read_spec{N}(rec::Record, spec::Tuple{DataType, Tuple{Vararg{Integer, N}}})` around /home/vagrant/.julia/v0.7/FortranFiles/src/read.jl:86.
│ Use `read_spec(rec::Record, spec::Tuple{DataType, Tuple{Vararg{Integer, N}}}) where N` instead.
└ @ nothing read.jl:86
┌ Warning: Deprecated syntax `parametric method syntax write_var{N}(rec::Record, arr::Array{Int8, N})` around /home/vagrant/.julia/v0.7/FortranFiles/src/write.jl:49.
│ Use `write_var(rec::Record, arr::Array{Int8, N}) where N` instead.
└ @ nothing write.jl:49
┌ Warning: Deprecated syntax `parametric method syntax write_var{T}(rec::Record, var::T)` around /home/vagrant/.julia/v0.7/FortranFiles/src/write.jl:54.
│ Use `write_var(rec::Record, var::T) where T` instead.
└ @ nothing write.jl:54
┌ Warning: Deprecated syntax `parametric method syntax write_var{T, N}(rec::Record, arr::Array{T, N})` around /home/vagrant/.julia/v0.7/FortranFiles/src/write.jl:59.
│ Use `write_var(rec::Record, arr::Array{T, N}) where {T, N}` instead.
└ @ nothing write.jl:59
┌ Warning: Deprecated syntax `parametric method syntax write_var{T, N}(rec::RecordWithSubrecords{NOCONV}, arr::Array{T, N})` around /home/vagrant/.julia/v0.7/FortranFiles/src/write.jl:67.
│ Use `write_var(rec::RecordWithSubrecords{NOCONV}, arr::Array{T, N}) where {T, N}` instead.
└ @ nothing write.jl:67
┌ Warning: Deprecated syntax `parametric method syntax write_var{N}(rec::RecordWithSubrecords{NOCONV}, arr::Array{Int8, N})` around /home/vagrant/.julia/v0.7/FortranFiles/src/write.jl:68.
│ Use `write_var(rec::RecordWithSubrecords{NOCONV}, arr::Array{Int8, N}) where N` instead.
└ @ nothing write.jl:68
┌ Warning: Deprecated syntax `parametric method syntax write_var{T, N, R}(rec::RecordWithoutSubrecords{R, NOCONV}, arr::Array{T, N})` around /home/vagrant/.julia/v0.7/FortranFiles/src/write.jl:69.
│ Use `write_var(rec::RecordWithoutSubrecords{R, NOCONV}, arr::Array{T, N}) where {T, N, R}` instead.
└ @ nothing write.jl:69
┌ Warning: Deprecated syntax `parametric method syntax write_var{N, R}(rec::RecordWithoutSubrecords{R, NOCONV}, arr::Array{Int8, N})` around /home/vagrant/.julia/v0.7/FortranFiles/src/write.jl:70.
│ Use `write_var(rec::RecordWithoutSubrecords{R, NOCONV}, arr::Array{Int8, N}) where {N, R}` instead.
└ @ nothing write.jl:70
┌ Warning: Deprecated syntax `parametric method syntax check_fortran_type{T}(x::Array{T})` around /home/vagrant/.julia/v0.7/FortranFiles/src/write.jl:72.
│ Use `check_fortran_type(x::Array{T}) where T` instead.
└ @ nothing write.jl:72
┌ Warning: Deprecated syntax `parametric method syntax check_fortran_type{T}(x::T)` around /home/vagrant/.julia/v0.7/FortranFiles/src/write.jl:74.
│ Use `check_fortran_type(x::T) where T` instead.
└ @ nothing write.jl:74
┌ Warning: Deprecated syntax `parametric method syntax sizeof_var{T}(var::T)` around /home/vagrant/.julia/v0.7/FortranFiles/src/write.jl:77.
│ Use `sizeof_var(var::T) where T` instead.
└ @ nothing write.jl:77
ERROR: LoadError: Base.srand has been moved to the standard library package Random.
Restart Julia and then run `using Random` to load it.
Stacktrace:
 [1] error(::Function, ::String, ::String, ::String, ::String, ::String, ::String) at ./error.jl:42
 [2] #srand#941 at ./deprecated.jl:138 [inlined]
 [3] srand at ./deprecated.jl:138 [inlined]
 [4] #gencode#15 at /home/vagrant/.julia/v0.7/FortranFiles/test/codegen/gencode.jl:83 [inlined]
 [5] (::getfield(, Symbol("#kw##gencode")))(::NamedTuple{(:seed,),Tuple{Int64}}, ::typeof(gencode), ::Int64, ::Int64, ::Int64) at ./<missing>:0
 [6] top-level scope
 [7] include at ./boot.jl:292 [inlined]
 [8] include_relative(::Module, ::String) at ./loading.jl:1012
 [9] include(::Module, ::String) at ./sysimg.jl:26
 [10] process_options(::Base.JLOptions) at ./client.jl:334
 [11] _start() at ./client.jl:386
in expression starting at /home/vagrant/.julia/v0.7/FortranFiles/test/codegen/gencode.jl:154
make: *** [.code-stamp] Error 1
make: Leaving directory `/home/vagrant/.julia/v0.7/FortranFiles/test/codegen'
ERROR: LoadError: failed process: Process(`make -C codegen gendataseq SUFFIX=_4Bshort_no 'XFLAGS=-fmax-subrecord-length=32759 '`, ProcessExited(2)) [2]
Stacktrace:
 [1] error(::String, ::Base.Process, ::String, ::Int64, ::String) at ./error.jl:42
 [2] pipeline_error(::Base.Process) at ./process.jl:698
 [3] run(::Cmd) at ./process.jl:660
 [4] gendata(::String, ::String, ::String) at /home/vagrant/.julia/v0.7/FortranFiles/test/runtests.jl:57
 [5] genalldata(::Array{RecordTypeTest,1}, ::Vararg{Any,N} where N) at /home/vagrant/.julia/v0.7/FortranFiles/test/runtests.jl:66
 [6] top-level scope
 [7] include at ./boot.jl:292 [inlined]
 [8] include_relative(::Module, ::String) at ./loading.jl:1012
 [9] include(::Module, ::String) at ./sysimg.jl:26
 [10] process_options(::Base.JLOptions) at ./client.jl:334
 [11] _start() at ./client.jl:386
in expression starting at /home/vagrant/.julia/v0.7/FortranFiles/test/runtests.jl:71
┌ Error: ------------------------------------------------------------
│ # Testing failed for FortranFiles
│   exception =
│    failed process: Process(`/home/vagrant/julia/bin/julia -Cnative -J/home/vagrant/julia/lib/julia/sys.so --compile=yes --depwarn=yes --code-coverage=none --color=no --compiled-modules=yes --check-bounds=yes --warn-overwrite=yes --startup-file=yes /home/vagrant/.julia/v0.7/FortranFiles/test/runtests.jl`, ProcessExited(1)) [1]
│    Stacktrace:
│     [1] error(::String, ::Base.Process, ::String, ::Int64, ::String) at ./error.jl:42
│     [2] pipeline_error(::Base.Process) at ./process.jl:698
│     [3] run(::Cmd) at ./process.jl:660
│     [4] (::getfield(Base.Pkg.Entry, Symbol("##89#92")){Bool,String,Array{AbstractString,1}})() at ./pkg/entry.jl:729
│     [5] cd(::getfield(Base.Pkg.Entry, Symbol("##89#92")){Bool,String,Array{AbstractString,1}}, ::String) at ./file.jl:70
│     [6] #test!#88(::Bool, ::Function, ::String, ::Array{AbstractString,1}, ::Array{AbstractString,1}, ::Array{AbstractString,1}) at ./pkg/entry.jl:717
│     [7] (::getfield(Base.Pkg.Entry, Symbol("#kw##test!")))(::NamedTuple{(:coverage,),Tuple{Bool}}, ::typeof(Base.Pkg.Entry.test!), ::String, ::Array{AbstractString,1}, ::Array{AbstractString,1}, ::Array{AbstractString,1}) at ./<missing>:0
│     [8] #test#96(::Bool, ::Function, ::Array{AbstractString,1}) at ./pkg/entry.jl:756
│     [9] (::getfield(Base.Pkg.Entry, Symbol("#kw##test")))(::NamedTuple{(:coverage,),Tuple{Bool}}, ::typeof(Base.Pkg.Entry.test), ::Array{AbstractString,1}) at ./<missing>:0
│     [10] (::getfield(Base.Pkg.Dir, Symbol("##4#7")){Base.Iterators.IndexValue{Symbol,Bool,Tuple{Symbol},NamedTuple{(:coverage,),Tuple{Bool}}},typeof(Base.Pkg.Entry.test),Tuple{Array{AbstractString,1}}})() at ./pkg/dir.jl:36
│     [11] cd(::getfield(Base.Pkg.Dir, Symbol("##4#7")){Base.Iterators.IndexValue{Symbol,Bool,Tuple{Symbol},NamedTuple{(:coverage,),Tuple{Bool}}},typeof(Base.Pkg.Entry.test),Tuple{Array{AbstractString,1}}}, ::String) at ./file.jl:70
│     [12] #cd#1(::Base.Iterators.IndexValue{Symbol,Bool,Tuple{Symbol},NamedTuple{(:coverage,),Tuple{Bool}}}, ::Function, ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N} where N) at ./pkg/dir.jl:36
│     [13] (::getfield(Base.Pkg.Dir, Symbol("#kw##cd")))(::NamedTuple{(:coverage,),Tuple{Bool}}, ::typeof(Base.Pkg.Dir.cd), ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N} where N) at ./<missing>:0
│     [14] #test#3(::Bool, ::Function, ::String, ::Vararg{String,N} where N) at ./pkg/pkg.jl:274
│     [15] test(::String, ::Vararg{String,N} where N) at ./pkg/pkg.jl:274
│     [16] top-level scope
│     [17] eval at ./boot.jl:295 [inlined]
│     [18] eval(::Module, ::Expr) at ./sysimg.jl:71
│     [19] process_options(::Base.JLOptions) at ./client.jl:311
│     [20] _start() at ./client.jl:386
└ @ Base.Pkg.Entry entry.jl:732
[ Info: No packages to install, update or remove
ERROR: FortranFiles had test errors

>>> End of log
