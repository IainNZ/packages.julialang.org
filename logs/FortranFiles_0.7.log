>>> 'Pkg.add("FortranFiles")' log
WARNING: Base.Pkg is deprecated, run `using Pkg` instead
 in module Main
[ Info: Cloning cache of FortranFiles from https://github.com/traktofon/FortranFiles.jl.git
[ Info: Installing FortranFiles v0.3.0
[ Info: Package database updated
┌ Info: METADATA is out-of-date — you may not have the latest version of FortranFiles
└ Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("FortranFiles")' log
WARNING: Base.versioninfo is deprecated: it has been moved to the standard library package `InteractiveUtils`.
Add `using InteractiveUtils` to your imports.
 in module Main
WARNING: Base.versioninfo is deprecated: it has been moved to the standard library package `InteractiveUtils`.
Add `using InteractiveUtils` to your imports.
 in module Main
Julia Version 0.7.0-DEV.4959
Commit 509d6a1a88 (2018-04-27 21:12 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
      Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-143-generic #192-Ubuntu SMP Tue Feb 27 10:45:36 UTC 2018 x86_64 x86_64
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
              speed         user         nice          sys         idle          irq
       #1  3495 MHz    5647611 s       7500 s     435238 s    1909528 s         96 s
       #2  3495 MHz    1387440 s       2095 s     160208 s    7568547 s          7 s
       
  Memory: 2.939197540283203 GB (1483.41015625 MB free)
  Uptime: 92996.0 sec
  Load Avg:  1.15380859375  1.01708984375  0.970703125
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant
Packages:
  Package Directory: /home/vagrant/.julia/v0.7
  Package Status:
2 required packages:
 - FortranFiles                  0.3.0
 - JSON                          0.17.2
2 additional packages:
 - Compat                        0.64.0
 - Nullables                     0.0.5
WARNING: Base.Pkg is deprecated, run `using Pkg` instead
 in module Main
[ Info: Testing FortranFiles
┌ Warning: Deprecated syntax `immutable` at /home/vagrant/.julia/v0.7/FortranFiles/test/runtests.jl:18.
│ Use `struct` instead.
└ @ nothing runtests.jl:18
┌ Warning: Deprecated syntax `immutable` at /home/vagrant/.julia/v0.7/FortranFiles/test/runtests.jl:41.
│ Use `struct` instead.
└ @ nothing runtests.jl:41
┌ Warning: Deprecated syntax `immutable` at /home/vagrant/.julia/v0.7/FortranFiles/src/types.jl:8.
│ Use `struct` instead.
└ @ nothing types.jl:8
┌ Warning: Deprecated syntax `immutable` at /home/vagrant/.julia/v0.7/FortranFiles/src/types.jl:16.
│ Use `struct` instead.
└ @ nothing types.jl:16
┌ Warning: Deprecated syntax `immutable` at /home/vagrant/.julia/v0.7/FortranFiles/src/types.jl:24.
│ Use `struct` instead.
└ @ nothing types.jl:24
┌ Warning: Deprecated syntax `immutable` at /home/vagrant/.julia/v0.7/FortranFiles/src/types.jl:33.
│ Use `struct` instead.
└ @ nothing types.jl:33
┌ Warning: Deprecated syntax `immutable` at /home/vagrant/.julia/v0.7/FortranFiles/src/types.jl:46.
│ Use `struct` instead.
└ @ nothing types.jl:46
┌ Warning: Deprecated syntax `parametric method syntax show{T}(io::IO, ::WithoutSubrecords{T})` around /home/vagrant/.julia/v0.7/FortranFiles/src/types.jl:29.
│ Use `show(io::IO, #unused#::WithoutSubrecords{T}) where T` instead.
└ @ nothing types.jl:29
┌ Warning: Deprecated syntax `immutable` at /home/vagrant/.julia/v0.7/FortranFiles/src/file.jl:3.
│ Use `struct` instead.
└ @ nothing file.jl:3
┌ Warning: Deprecated syntax `type` at /home/vagrant/.julia/v0.7/FortranFiles/src/withoutsubrecords.jl:3.
│ Use `mutable struct` instead.
└ @ nothing withoutsubrecords.jl:3
┌ Warning: Deprecated syntax `parametric method syntax Record{T, C}(f::FortranFile{SequentialAccess{WithoutSubrecords{T}}, C})` around /home/vagrant/.julia/v0.7/FortranFiles/src/withoutsubrecords.jl:13.
│ Use `Record(f::FortranFile{SequentialAccess{WithoutSubrecords{T}}, C}) where {T, C}` instead.
└ @ nothing withoutsubrecords.jl:13
┌ Warning: Deprecated syntax `parametric method syntax Record{T, C}(f::FortranFile{SequentialAccess{WithoutSubrecords{T}}, C}, towrite::Integer)` around /home/vagrant/.julia/v0.7/FortranFiles/src/withoutsubrecords.jl:20.
│ Use `Record(f::FortranFile{SequentialAccess{WithoutSubrecords{T}}, C}, towrite::Integer) where {T, C}` instead.
└ @ nothing withoutsubrecords.jl:20
┌ Warning: Deprecated syntax `parametric method syntax close{T}(rec::RecordWithoutSubrecords{T})` around /home/vagrant/.julia/v0.7/FortranFiles/src/withoutsubrecords.jl:40.
│ Use `close(rec::RecordWithoutSubrecords{T}) where T` instead.
└ @ nothing withoutsubrecords.jl:40
┌ Warning: Deprecated syntax `type` at /home/vagrant/.julia/v0.7/FortranFiles/src/withsubrecords.jl:3.
│ Use `mutable struct` instead.
└ @ nothing withsubrecords.jl:3
┌ Warning: Deprecated syntax `sign?` at /home/vagrant/.julia/v0.7/FortranFiles/src/withsubrecords.jl:29.
│ Use `sign ?` instead.
└ @ nothing withsubrecords.jl:29
┌ Warning: Deprecated syntax `sign ? -1:` at /home/vagrant/.julia/v0.7/FortranFiles/src/withsubrecords.jl:29.
│ Use `sign ? -1 :` instead.
└ @ nothing withsubrecords.jl:29
┌ Warning: Deprecated syntax `parametric method syntax Record{C}(f::FortranFile{SequentialAccess{WithSubrecords}, C})` around /home/vagrant/.julia/v0.7/FortranFiles/src/withsubrecords.jl:36.
│ Use `Record(f::FortranFile{SequentialAccess{WithSubrecords}, C}) where C` instead.
└ @ nothing withsubrecords.jl:36
┌ Warning: Deprecated syntax `type` at /home/vagrant/.julia/v0.7/FortranFiles/src/fixedlengthrecords.jl:3.
│ Use `mutable struct` instead.
└ @ nothing fixedlengthrecords.jl:3
┌ Warning: Deprecated syntax `parametric method syntax Record{C}(f::FortranFile{DirectAccess, C})` around /home/vagrant/.julia/v0.7/FortranFiles/src/fixedlengthrecords.jl:13.
│ Use `Record(f::FortranFile{DirectAccess, C}) where C` instead.
└ @ nothing fixedlengthrecords.jl:13
┌ Warning: Deprecated syntax `parametric method syntax Record{C}(f::FortranFile{DirectAccess, C}, towrite::Integer)` around /home/vagrant/.julia/v0.7/FortranFiles/src/fixedlengthrecords.jl:20.
│ Use `Record(f::FortranFile{DirectAccess, C}, towrite::Integer) where C` instead.
└ @ nothing fixedlengthrecords.jl:20
┌ Warning: Deprecated syntax `immutable` at /home/vagrant/.julia/v0.7/FortranFiles/src/string.jl:13.
│ Use `struct` instead.
└ @ nothing string.jl:13
┌ Warning: Deprecated syntax `(i > l)?` at /home/vagrant/.julia/v0.7/FortranFiles/src/string.jl:32.
│ Use `(i > l) ?` instead.
└ @ nothing string.jl:32
┌ Warning: Deprecated syntax `(i > l) ?'` at /home/vagrant/.julia/v0.7/FortranFiles/src/string.jl:32.
│ Use `(i > l) ? '` instead.
└ @ nothing string.jl:32
┌ Warning: Deprecated syntax `(i > l) ? ' ':` at /home/vagrant/.julia/v0.7/FortranFiles/src/string.jl:32.
│ Use `(i > l) ? ' ' :` instead.
└ @ nothing string.jl:32
┌ Warning: Deprecated syntax `(i > l) ? ' ' :s` at /home/vagrant/.julia/v0.7/FortranFiles/src/string.jl:32.
│ Use `(i > l) ? ' ' : s` instead.
└ @ nothing string.jl:32
┌ Warning: Deprecated syntax `parametric method syntax sizeof{N}(::Type{FString{N}})` around /home/vagrant/.julia/v0.7/FortranFiles/src/string.jl:17.
│ Use `sizeof(#unused#::Type{FString{N}}) where N` instead.
└ @ nothing string.jl:17
┌ Warning: Deprecated syntax `parametric method syntax sizeof{N}(::FString{N})` around /home/vagrant/.julia/v0.7/FortranFiles/src/string.jl:18.
│ Use `sizeof(#unused#::FString{N}) where N` instead.
└ @ nothing string.jl:18
┌ Warning: Deprecated syntax `parametric method syntax sizeof{N}(a::Array{FString{N}})` around /home/vagrant/.julia/v0.7/FortranFiles/src/string.jl:19.
│ Use `sizeof(a::Array{FString{N}}) where N` instead.
└ @ nothing string.jl:19
┌ Warning: Deprecated syntax `parametric method syntax print{N}(io::IO, ::Type{FString{N}})` around /home/vagrant/.julia/v0.7/FortranFiles/src/string.jl:21.
│ Use `print(io::IO, #unused#::Type{FString{N}}) where N` instead.
└ @ nothing string.jl:21
┌ Warning: Deprecated syntax `parametric method syntax show{N}(io::IO, T::Type{FString{N}})` around /home/vagrant/.julia/v0.7/FortranFiles/src/string.jl:22.
│ Use `show(io::IO, T::Type{FString{N}}) where N` instead.
└ @ nothing string.jl:22
┌ Warning: Deprecated syntax `parametric method syntax print{N}(io::IO, s::FString{N})` around /home/vagrant/.julia/v0.7/FortranFiles/src/string.jl:23.
│ Use `print(io::IO, s::FString{N}) where N` instead.
└ @ nothing string.jl:23
┌ Warning: Deprecated syntax `parametric method syntax show{N}(io::IO, s::FString{N})` around /home/vagrant/.julia/v0.7/FortranFiles/src/string.jl:24.
│ Use `show(io::IO, s::FString{N}) where N` instead.
└ @ nothing string.jl:24
┌ Warning: Deprecated syntax `parametric method syntax bswap{N}(s::FString{N})` around /home/vagrant/.julia/v0.7/FortranFiles/src/string.jl:28.
│ Use `bswap(s::FString{N}) where N` instead.
└ @ nothing string.jl:28
┌ Warning: Deprecated syntax `parametric method syntax convert{N}(::Type{FString{N}}, s::String)` around /home/vagrant/.julia/v0.7/FortranFiles/src/string.jl:31.
│ Use `convert(#unused#::Type{FString{N}}, s::String) where N` instead.
└ @ nothing string.jl:31
┌ Warning: Deprecated syntax `parametric method syntax convert{N}(::Type{String}, s::FString{N})` around /home/vagrant/.julia/v0.7/FortranFiles/src/string.jl:44.
│ Use `convert(#unused#::Type{String}, s::FString{N}) where N` instead.
└ @ nothing string.jl:44
┌ Warning: Deprecated syntax `parametric method syntax read{N}(io::IO, t::Type{FString{N}})` around /home/vagrant/.julia/v0.7/FortranFiles/src/string.jl:48.
│ Use `read(io::IO, t::Type{FString{N}}) where N` instead.
└ @ nothing string.jl:48
┌ Warning: Deprecated syntax `parametric method syntax write{N}(io::IO, s::FString{N})` around /home/vagrant/.julia/v0.7/FortranFiles/src/string.jl:54.
│ Use `write(io::IO, s::FString{N}) where N` instead.
└ @ nothing string.jl:54
┌ Warning: Deprecated syntax `parametric method syntax trimstring{N}(s::FString{N})` around /home/vagrant/.julia/v0.7/FortranFiles/src/string.jl:64.
│ Use `trimstring(s::FString{N}) where N` instead.
└ @ nothing string.jl:64
┌ Warning: Deprecated syntax `parametric method syntax read_spec{T}(rec::Record, spec::Type{T})` around /home/vagrant/.julia/v0.7/FortranFiles/src/read.jl:65.
│ Use `read_spec(rec::Record, spec::Type{T}) where T` instead.
└ @ nothing read.jl:65
┌ Warning: Deprecated syntax `parametric method syntax read_spec{T, N}(rec::Record, spec::Array{T, N})` around /home/vagrant/.julia/v0.7/FortranFiles/src/read.jl:69.
│ Use `read_spec(rec::Record, spec::Array{T, N}) where {T, N}` instead.
└ @ nothing read.jl:69
┌ Warning: Deprecated syntax `parametric method syntax read_spec{I <: Integer}(rec::Record, spec::Tuple{DataType, I})` around /home/vagrant/.julia/v0.7/FortranFiles/src/read.jl:75.
│ Use `read_spec(rec::Record, spec::Tuple{DataType, I}) where I <: Integer` instead.
└ @ nothing read.jl:75
┌ Warning: Deprecated syntax `parametric method syntax read_spec{N}(rec::Record, spec::Tuple{DataType, Vararg{Integer, N}})` around /home/vagrant/.julia/v0.7/FortranFiles/src/read.jl:80.
│ Use `read_spec(rec::Record, spec::Tuple{DataType, Vararg{Integer, N}}) where N` instead.
└ @ nothing read.jl:80
┌ Warning: Deprecated syntax `parametric method syntax read_spec{N}(rec::Record, spec::Tuple{DataType, Tuple{Vararg{Integer, N}}})` around /home/vagrant/.julia/v0.7/FortranFiles/src/read.jl:86.
│ Use `read_spec(rec::Record, spec::Tuple{DataType, Tuple{Vararg{Integer, N}}}) where N` instead.
└ @ nothing read.jl:86
┌ Warning: Deprecated syntax `parametric method syntax write_var{N}(rec::Record, arr::Array{Int8, N})` around /home/vagrant/.julia/v0.7/FortranFiles/src/write.jl:49.
│ Use `write_var(rec::Record, arr::Array{Int8, N}) where N` instead.
└ @ nothing write.jl:49
┌ Warning: Deprecated syntax `parametric method syntax write_var{T}(rec::Record, var::T)` around /home/vagrant/.julia/v0.7/FortranFiles/src/write.jl:54.
│ Use `write_var(rec::Record, var::T) where T` instead.
└ @ nothing write.jl:54
┌ Warning: Deprecated syntax `parametric method syntax write_var{T, N}(rec::Record, arr::Array{T, N})` around /home/vagrant/.julia/v0.7/FortranFiles/src/write.jl:59.
│ Use `write_var(rec::Record, arr::Array{T, N}) where {T, N}` instead.
└ @ nothing write.jl:59
┌ Warning: Deprecated syntax `parametric method syntax write_var{T, N}(rec::RecordWithSubrecords{NOCONV}, arr::Array{T, N})` around /home/vagrant/.julia/v0.7/FortranFiles/src/write.jl:67.
│ Use `write_var(rec::RecordWithSubrecords{NOCONV}, arr::Array{T, N}) where {T, N}` instead.
└ @ nothing write.jl:67
┌ Warning: Deprecated syntax `parametric method syntax write_var{N}(rec::RecordWithSubrecords{NOCONV}, arr::Array{Int8, N})` around /home/vagrant/.julia/v0.7/FortranFiles/src/write.jl:68.
│ Use `write_var(rec::RecordWithSubrecords{NOCONV}, arr::Array{Int8, N}) where N` instead.
└ @ nothing write.jl:68
┌ Warning: Deprecated syntax `parametric method syntax write_var{T, N, R}(rec::RecordWithoutSubrecords{R, NOCONV}, arr::Array{T, N})` around /home/vagrant/.julia/v0.7/FortranFiles/src/write.jl:69.
│ Use `write_var(rec::RecordWithoutSubrecords{R, NOCONV}, arr::Array{T, N}) where {T, N, R}` instead.
└ @ nothing write.jl:69
┌ Warning: Deprecated syntax `parametric method syntax write_var{N, R}(rec::RecordWithoutSubrecords{R, NOCONV}, arr::Array{Int8, N})` around /home/vagrant/.julia/v0.7/FortranFiles/src/write.jl:70.
│ Use `write_var(rec::RecordWithoutSubrecords{R, NOCONV}, arr::Array{Int8, N}) where {N, R}` instead.
└ @ nothing write.jl:70
┌ Warning: Deprecated syntax `parametric method syntax check_fortran_type{T}(x::Array{T})` around /home/vagrant/.julia/v0.7/FortranFiles/src/write.jl:72.
│ Use `check_fortran_type(x::Array{T}) where T` instead.
└ @ nothing write.jl:72
┌ Warning: Deprecated syntax `parametric method syntax check_fortran_type{T}(x::T)` around /home/vagrant/.julia/v0.7/FortranFiles/src/write.jl:74.
│ Use `check_fortran_type(x::T) where T` instead.
└ @ nothing write.jl:74
┌ Warning: Deprecated syntax `parametric method syntax sizeof_var{T}(var::T)` around /home/vagrant/.julia/v0.7/FortranFiles/src/write.jl:77.
│ Use `sizeof_var(var::T) where T` instead.
└ @ nothing write.jl:77
WARNING: Base.Test is deprecated, run `using Test` instead
  likely near /home/vagrant/.julia/v0.7/FortranFiles/test/runtests.jl:2
WARNING: Base.Complex128 is deprecated, use ComplexF64 instead.
  likely near /home/vagrant/.julia/v0.7/FortranFiles/test/runtests.jl:14
make: Entering directory `/home/vagrant/.julia/v0.7/FortranFiles/test/codegen'
julia genrandom.jl
touch .random-stamp
gfortran -std=f2008 -fcheck=all -Wall -Wno-conversion -c -o randutil.o randutil.f90
gfortran -std=f2008 -fcheck=all -Wall -Wno-conversion -c -o randomi1.o randomi1.f90
gfortran -std=f2008 -fcheck=all -Wall -Wno-conversion -c -o randomi2.o randomi2.f90
gfortran -std=f2008 -fcheck=all -Wall -Wno-conversion -c -o randomi4.o randomi4.f90
gfortran -std=f2008 -fcheck=all -Wall -Wno-conversion -c -o randomi8.o randomi8.f90
gfortran -std=f2008 -fcheck=all -Wall -Wno-conversion -c -o randomr4.o randomr4.f90
gfortran -std=f2008 -fcheck=all -Wall -Wno-conversion -c -o randomr8.o randomr8.f90
gfortran -std=f2008 -fcheck=all -Wall -Wno-conversion -c -o randomc8.o randomc8.f90
gfortran -std=f2008 -fcheck=all -Wall -Wno-conversion -c -o randomc16.o randomc16.f90
gfortran -std=f2008 -fcheck=all -Wall -Wno-conversion -c -o randomstr.o randomstr.f90
gfortran -std=f2008 -fcheck=all -Wall -Wno-conversion  -c -o gendatadirect_DA_no.o gendatadirect.F90
gfortran -o gendatadirect_DA_no.x randomi1.o randomi2.o randomi4.o randomi8.o randomr4.o randomr8.o randomc8.o randomc16.o randomstr.o randutil.o gendatadirect_DA_no.o
make: Leaving directory `/home/vagrant/.julia/v0.7/FortranFiles/test/codegen'
make: Entering directory `/home/vagrant/.julia/v0.7/FortranFiles/test/codegen'
julia gencode.jl
┌ Warning: Deprecated syntax `immutable` at /home/vagrant/.julia/v0.7/FortranFiles/test/codegen/gencode.jl:4.
│ Use `struct` instead.
└ @ nothing gencode.jl:4
┌ Warning: Deprecated syntax `immutable` at /home/vagrant/.julia/v0.7/FortranFiles/src/types.jl:8.
│ Use `struct` instead.
└ @ nothing types.jl:8
┌ Warning: Deprecated syntax `immutable` at /home/vagrant/.julia/v0.7/FortranFiles/src/types.jl:16.
│ Use `struct` instead.
└ @ nothing types.jl:16
┌ Warning: Deprecated syntax `immutable` at /home/vagrant/.julia/v0.7/FortranFiles/src/types.jl:24.
│ Use `struct` instead.
└ @ nothing types.jl:24
┌ Warning: Deprecated syntax `immutable` at /home/vagrant/.julia/v0.7/FortranFiles/src/types.jl:33.
│ Use `struct` instead.
└ @ nothing types.jl:33
┌ Warning: Deprecated syntax `immutable` at /home/vagrant/.julia/v0.7/FortranFiles/src/types.jl:46.
│ Use `struct` instead.
└ @ nothing types.jl:46
┌ Warning: Deprecated syntax `parametric method syntax show{T}(io::IO, ::WithoutSubrecords{T})` around /home/vagrant/.julia/v0.7/FortranFiles/src/types.jl:29.
│ Use `show(io::IO, #unused#::WithoutSubrecords{T}) where T` instead.
└ @ nothing types.jl:29
┌ Warning: Deprecated syntax `immutable` at /home/vagrant/.julia/v0.7/FortranFiles/src/file.jl:3.
│ Use `struct` instead.
└ @ nothing file.jl:3
┌ Warning: Deprecated syntax `type` at /home/vagrant/.julia/v0.7/FortranFiles/src/withoutsubrecords.jl:3.
│ Use `mutable struct` instead.
└ @ nothing withoutsubrecords.jl:3
┌ Warning: Deprecated syntax `parametric method syntax Record{T, C}(f::FortranFile{SequentialAccess{WithoutSubrecords{T}}, C})` around /home/vagrant/.julia/v0.7/FortranFiles/src/withoutsubrecords.jl:13.
│ Use `Record(f::FortranFile{SequentialAccess{WithoutSubrecords{T}}, C}) where {T, C}` instead.
└ @ nothing withoutsubrecords.jl:13
┌ Warning: Deprecated syntax `parametric method syntax Record{T, C}(f::FortranFile{SequentialAccess{WithoutSubrecords{T}}, C}, towrite::Integer)` around /home/vagrant/.julia/v0.7/FortranFiles/src/withoutsubrecords.jl:20.
│ Use `Record(f::FortranFile{SequentialAccess{WithoutSubrecords{T}}, C}, towrite::Integer) where {T, C}` instead.
└ @ nothing withoutsubrecords.jl:20
┌ Warning: Deprecated syntax `parametric method syntax close{T}(rec::RecordWithoutSubrecords{T})` around /home/vagrant/.julia/v0.7/FortranFiles/src/withoutsubrecords.jl:40.
│ Use `close(rec::RecordWithoutSubrecords{T}) where T` instead.
└ @ nothing withoutsubrecords.jl:40
┌ Warning: Deprecated syntax `type` at /home/vagrant/.julia/v0.7/FortranFiles/src/withsubrecords.jl:3.
│ Use `mutable struct` instead.
└ @ nothing withsubrecords.jl:3
┌ Warning: Deprecated syntax `sign?` at /home/vagrant/.julia/v0.7/FortranFiles/src/withsubrecords.jl:29.
│ Use `sign ?` instead.
└ @ nothing withsubrecords.jl:29
┌ Warning: Deprecated syntax `sign ? -1:` at /home/vagrant/.julia/v0.7/FortranFiles/src/withsubrecords.jl:29.
│ Use `sign ? -1 :` instead.
└ @ nothing withsubrecords.jl:29
┌ Warning: Deprecated syntax `parametric method syntax Record{C}(f::FortranFile{SequentialAccess{WithSubrecords}, C})` around /home/vagrant/.julia/v0.7/FortranFiles/src/withsubrecords.jl:36.
│ Use `Record(f::FortranFile{SequentialAccess{WithSubrecords}, C}) where C` instead.
└ @ nothing withsubrecords.jl:36
┌ Warning: Deprecated syntax `type` at /home/vagrant/.julia/v0.7/FortranFiles/src/fixedlengthrecords.jl:3.
│ Use `mutable struct` instead.
└ @ nothing fixedlengthrecords.jl:3
┌ Warning: Deprecated syntax `parametric method syntax Record{C}(f::FortranFile{DirectAccess, C})` around /home/vagrant/.julia/v0.7/FortranFiles/src/fixedlengthrecords.jl:13.
│ Use `Record(f::FortranFile{DirectAccess, C}) where C` instead.
└ @ nothing fixedlengthrecords.jl:13
┌ Warning: Deprecated syntax `parametric method syntax Record{C}(f::FortranFile{DirectAccess, C}, towrite::Integer)` around /home/vagrant/.julia/v0.7/FortranFiles/src/fixedlengthrecords.jl:20.
│ Use `Record(f::FortranFile{DirectAccess, C}, towrite::Integer) where C` instead.
└ @ nothing fixedlengthrecords.jl:20
┌ Warning: Deprecated syntax `immutable` at /home/vagrant/.julia/v0.7/FortranFiles/src/string.jl:13.
│ Use `struct` instead.
└ @ nothing string.jl:13
┌ Warning: Deprecated syntax `(i > l)?` at /home/vagrant/.julia/v0.7/FortranFiles/src/string.jl:32.
│ Use `(i > l) ?` instead.
└ @ nothing string.jl:32
┌ Warning: Deprecated syntax `(i > l) ?'` at /home/vagrant/.julia/v0.7/FortranFiles/src/string.jl:32.
│ Use `(i > l) ? '` instead.
└ @ nothing string.jl:32
┌ Warning: Deprecated syntax `(i > l) ? ' ':` at /home/vagrant/.julia/v0.7/FortranFiles/src/string.jl:32.
│ Use `(i > l) ? ' ' :` instead.
└ @ nothing string.jl:32
┌ Warning: Deprecated syntax `(i > l) ? ' ' :s` at /home/vagrant/.julia/v0.7/FortranFiles/src/string.jl:32.
│ Use `(i > l) ? ' ' : s` instead.
└ @ nothing string.jl:32
┌ Warning: Deprecated syntax `parametric method syntax sizeof{N}(::Type{FString{N}})` around /home/vagrant/.julia/v0.7/FortranFiles/src/string.jl:17.
│ Use `sizeof(#unused#::Type{FString{N}}) where N` instead.
└ @ nothing string.jl:17
┌ Warning: Deprecated syntax `parametric method syntax sizeof{N}(::FString{N})` around /home/vagrant/.julia/v0.7/FortranFiles/src/string.jl:18.
│ Use `sizeof(#unused#::FString{N}) where N` instead.
└ @ nothing string.jl:18
┌ Warning: Deprecated syntax `parametric method syntax sizeof{N}(a::Array{FString{N}})` around /home/vagrant/.julia/v0.7/FortranFiles/src/string.jl:19.
│ Use `sizeof(a::Array{FString{N}}) where N` instead.
└ @ nothing string.jl:19
┌ Warning: Deprecated syntax `parametric method syntax print{N}(io::IO, ::Type{FString{N}})` around /home/vagrant/.julia/v0.7/FortranFiles/src/string.jl:21.
│ Use `print(io::IO, #unused#::Type{FString{N}}) where N` instead.
└ @ nothing string.jl:21
┌ Warning: Deprecated syntax `parametric method syntax show{N}(io::IO, T::Type{FString{N}})` around /home/vagrant/.julia/v0.7/FortranFiles/src/string.jl:22.
│ Use `show(io::IO, T::Type{FString{N}}) where N` instead.
└ @ nothing string.jl:22
┌ Warning: Deprecated syntax `parametric method syntax print{N}(io::IO, s::FString{N})` around /home/vagrant/.julia/v0.7/FortranFiles/src/string.jl:23.
│ Use `print(io::IO, s::FString{N}) where N` instead.
└ @ nothing string.jl:23
┌ Warning: Deprecated syntax `parametric method syntax show{N}(io::IO, s::FString{N})` around /home/vagrant/.julia/v0.7/FortranFiles/src/string.jl:24.
│ Use `show(io::IO, s::FString{N}) where N` instead.
└ @ nothing string.jl:24
┌ Warning: Deprecated syntax `parametric method syntax bswap{N}(s::FString{N})` around /home/vagrant/.julia/v0.7/FortranFiles/src/string.jl:28.
│ Use `bswap(s::FString{N}) where N` instead.
└ @ nothing string.jl:28
┌ Warning: Deprecated syntax `parametric method syntax convert{N}(::Type{FString{N}}, s::String)` around /home/vagrant/.julia/v0.7/FortranFiles/src/string.jl:31.
│ Use `convert(#unused#::Type{FString{N}}, s::String) where N` instead.
└ @ nothing string.jl:31
┌ Warning: Deprecated syntax `parametric method syntax convert{N}(::Type{String}, s::FString{N})` around /home/vagrant/.julia/v0.7/FortranFiles/src/string.jl:44.
│ Use `convert(#unused#::Type{String}, s::FString{N}) where N` instead.
└ @ nothing string.jl:44
┌ Warning: Deprecated syntax `parametric method syntax read{N}(io::IO, t::Type{FString{N}})` around /home/vagrant/.julia/v0.7/FortranFiles/src/string.jl:48.
│ Use `read(io::IO, t::Type{FString{N}}) where N` instead.
└ @ nothing string.jl:48
┌ Warning: Deprecated syntax `parametric method syntax write{N}(io::IO, s::FString{N})` around /home/vagrant/.julia/v0.7/FortranFiles/src/string.jl:54.
│ Use `write(io::IO, s::FString{N}) where N` instead.
└ @ nothing string.jl:54
┌ Warning: Deprecated syntax `parametric method syntax trimstring{N}(s::FString{N})` around /home/vagrant/.julia/v0.7/FortranFiles/src/string.jl:64.
│ Use `trimstring(s::FString{N}) where N` instead.
└ @ nothing string.jl:64
┌ Warning: Deprecated syntax `parametric method syntax read_spec{T}(rec::Record, spec::Type{T})` around /home/vagrant/.julia/v0.7/FortranFiles/src/read.jl:65.
│ Use `read_spec(rec::Record, spec::Type{T}) where T` instead.
└ @ nothing read.jl:65
┌ Warning: Deprecated syntax `parametric method syntax read_spec{T, N}(rec::Record, spec::Array{T, N})` around /home/vagrant/.julia/v0.7/FortranFiles/src/read.jl:69.
│ Use `read_spec(rec::Record, spec::Array{T, N}) where {T, N}` instead.
└ @ nothing read.jl:69
┌ Warning: Deprecated syntax `parametric method syntax read_spec{I <: Integer}(rec::Record, spec::Tuple{DataType, I})` around /home/vagrant/.julia/v0.7/FortranFiles/src/read.jl:75.
│ Use `read_spec(rec::Record, spec::Tuple{DataType, I}) where I <: Integer` instead.
└ @ nothing read.jl:75
┌ Warning: Deprecated syntax `parametric method syntax read_spec{N}(rec::Record, spec::Tuple{DataType, Vararg{Integer, N}})` around /home/vagrant/.julia/v0.7/FortranFiles/src/read.jl:80.
│ Use `read_spec(rec::Record, spec::Tuple{DataType, Vararg{Integer, N}}) where N` instead.
└ @ nothing read.jl:80
┌ Warning: Deprecated syntax `parametric method syntax read_spec{N}(rec::Record, spec::Tuple{DataType, Tuple{Vararg{Integer, N}}})` around /home/vagrant/.julia/v0.7/FortranFiles/src/read.jl:86.
│ Use `read_spec(rec::Record, spec::Tuple{DataType, Tuple{Vararg{Integer, N}}}) where N` instead.
└ @ nothing read.jl:86
┌ Warning: Deprecated syntax `parametric method syntax write_var{N}(rec::Record, arr::Array{Int8, N})` around /home/vagrant/.julia/v0.7/FortranFiles/src/write.jl:49.
│ Use `write_var(rec::Record, arr::Array{Int8, N}) where N` instead.
└ @ nothing write.jl:49
┌ Warning: Deprecated syntax `parametric method syntax write_var{T}(rec::Record, var::T)` around /home/vagrant/.julia/v0.7/FortranFiles/src/write.jl:54.
│ Use `write_var(rec::Record, var::T) where T` instead.
└ @ nothing write.jl:54
┌ Warning: Deprecated syntax `parametric method syntax write_var{T, N}(rec::Record, arr::Array{T, N})` around /home/vagrant/.julia/v0.7/FortranFiles/src/write.jl:59.
│ Use `write_var(rec::Record, arr::Array{T, N}) where {T, N}` instead.
└ @ nothing write.jl:59
┌ Warning: Deprecated syntax `parametric method syntax write_var{T, N}(rec::RecordWithSubrecords{NOCONV}, arr::Array{T, N})` around /home/vagrant/.julia/v0.7/FortranFiles/src/write.jl:67.
│ Use `write_var(rec::RecordWithSubrecords{NOCONV}, arr::Array{T, N}) where {T, N}` instead.
└ @ nothing write.jl:67
┌ Warning: Deprecated syntax `parametric method syntax write_var{N}(rec::RecordWithSubrecords{NOCONV}, arr::Array{Int8, N})` around /home/vagrant/.julia/v0.7/FortranFiles/src/write.jl:68.
│ Use `write_var(rec::RecordWithSubrecords{NOCONV}, arr::Array{Int8, N}) where N` instead.
└ @ nothing write.jl:68
┌ Warning: Deprecated syntax `parametric method syntax write_var{T, N, R}(rec::RecordWithoutSubrecords{R, NOCONV}, arr::Array{T, N})` around /home/vagrant/.julia/v0.7/FortranFiles/src/write.jl:69.
│ Use `write_var(rec::RecordWithoutSubrecords{R, NOCONV}, arr::Array{T, N}) where {T, N, R}` instead.
└ @ nothing write.jl:69
┌ Warning: Deprecated syntax `parametric method syntax write_var{N, R}(rec::RecordWithoutSubrecords{R, NOCONV}, arr::Array{Int8, N})` around /home/vagrant/.julia/v0.7/FortranFiles/src/write.jl:70.
│ Use `write_var(rec::RecordWithoutSubrecords{R, NOCONV}, arr::Array{Int8, N}) where {N, R}` instead.
└ @ nothing write.jl:70
┌ Warning: Deprecated syntax `parametric method syntax check_fortran_type{T}(x::Array{T})` around /home/vagrant/.julia/v0.7/FortranFiles/src/write.jl:72.
│ Use `check_fortran_type(x::Array{T}) where T` instead.
└ @ nothing write.jl:72
┌ Warning: Deprecated syntax `parametric method syntax check_fortran_type{T}(x::T)` around /home/vagrant/.julia/v0.7/FortranFiles/src/write.jl:74.
│ Use `check_fortran_type(x::T) where T` instead.
└ @ nothing write.jl:74
┌ Warning: Deprecated syntax `parametric method syntax sizeof_var{T}(var::T)` around /home/vagrant/.julia/v0.7/FortranFiles/src/write.jl:77.
│ Use `sizeof_var(var::T) where T` instead.
└ @ nothing write.jl:77
WARNING: Base.srand is deprecated: it has been moved to the standard library package `Random`.
Add `using Random` to your imports.
  likely near /home/vagrant/.julia/v0.7/FortranFiles/test/codegen/gencode.jl:154
WARNING: Base.Complex64 is deprecated, use ComplexF32 instead.
  likely near /home/vagrant/.julia/v0.7/FortranFiles/test/codegen/gencode.jl:154
WARNING: Base.Complex128 is deprecated, use ComplexF64 instead.
  likely near /home/vagrant/.julia/v0.7/FortranFiles/test/codegen/gencode.jl:154
WARNING: Base.shuffle! is deprecated: it has been moved to the standard library package `Random`.
Add `using Random` to your imports.
  likely near /home/vagrant/.julia/v0.7/FortranFiles/test/codegen/gencode.jl:154
WARNING: Base.srand is deprecated: it has been moved to the standard library package `Random`.
Add `using Random` to your imports.
  likely near /home/vagrant/.julia/v0.7/FortranFiles/test/codegen/gencode.jl:154
WARNING: Base.srand is deprecated: it has been moved to the standard library package `Random`.
Add `using Random` to your imports.
  likely near /home/vagrant/.julia/v0.7/FortranFiles/test/codegen/gencode.jl:154
WARNING: Base.Complex64 is deprecated, use ComplexF32 instead.
  likely near /home/vagrant/.julia/v0.7/FortranFiles/test/codegen/gencode.jl:154
WARNING: Base.Complex128 is deprecated, use ComplexF64 instead.
  likely near /home/vagrant/.julia/v0.7/FortranFiles/test/codegen/gencode.jl:154
WARNING: Base.shuffle! is deprecated: it has been moved to the standard library package `Random`.
Add `using Random` to your imports.
  likely near /home/vagrant/.julia/v0.7/FortranFiles/test/codegen/gencode.jl:154
WARNING: Base.shuffle! is deprecated: it has been moved to the standard library package `Random`.
Add `using Random` to your imports.
  likely near /home/vagrant/.julia/v0.7/FortranFiles/test/codegen/gencode.jl:154
WARNING: Base.srand is deprecated: it has been moved to the standard library package `Random`.
Add `using Random` to your imports.
  likely near /home/vagrant/.julia/v0.7/FortranFiles/test/codegen/gencode.jl:154
WARNING: Base.Complex64 is deprecated, use ComplexF32 instead.
  likely near /home/vagrant/.julia/v0.7/FortranFiles/test/codegen/gencode.jl:154
WARNING: Base.Complex128 is deprecated, use ComplexF64 instead.
  likely near /home/vagrant/.julia/v0.7/FortranFiles/test/codegen/gencode.jl:154
WARNING: Base.shuffle! is deprecated: it has been moved to the standard library package `Random`.
Add `using Random` to your imports.
  likely near /home/vagrant/.julia/v0.7/FortranFiles/test/codegen/gencode.jl:154
WARNING: Base.srand is deprecated: it has been moved to the standard library package `Random`.
Add `using Random` to your imports.
  likely near /home/vagrant/.julia/v0.7/FortranFiles/test/codegen/gencode.jl:154
WARNING: Base.srand is deprecated: it has been moved to the standard library package `Random`.
Add `using Random` to your imports.
  likely near /home/vagrant/.julia/v0.7/FortranFiles/test/codegen/gencode.jl:154
WARNING: Base.Complex64 is deprecated, use ComplexF32 instead.
  likely near /home/vagrant/.julia/v0.7/FortranFiles/test/codegen/gencode.jl:154
WARNING: Base.Complex128 is deprecated, use ComplexF64 instead.
  likely near /home/vagrant/.julia/v0.7/FortranFiles/test/codegen/gencode.jl:154
WARNING: Base.shuffle! is deprecated: it has been moved to the standard library package `Random`.
Add `using Random` to your imports.
  likely near /home/vagrant/.julia/v0.7/FortranFiles/test/codegen/gencode.jl:154
WARNING: Base.shuffle! is deprecated: it has been moved to the standard library package `Random`.
Add `using Random` to your imports.
  likely near /home/vagrant/.julia/v0.7/FortranFiles/test/codegen/gencode.jl:154
WARNING: Base.Complex64 is deprecated, use ComplexF32 instead.
  likely near /home/vagrant/.julia/v0.7/FortranFiles/test/codegen/gencode.jl:154
in #gencode#17 at /home/vagrant/.julia/v0.7/FortranFiles/test/codegen/gencode.jl
WARNING: Base.Complex128 is deprecated, use ComplexF64 instead.
  likely near /home/vagrant/.julia/v0.7/FortranFiles/test/codegen/gencode.jl:154
in #gencode#17 at /home/vagrant/.julia/v0.7/FortranFiles/test/codegen/gencode.jl
touch .code-stamp
gfortran -std=f2008 -fcheck=all -Wall -Wno-conversion -fmax-subrecord-length=32759  -c -o gendataseq_4Bshort_no.o gendataseq.F90
gfortran -o gendataseq_4Bshort_no.x randomi1.o randomi2.o randomi4.o randomi8.o randomr4.o randomr8.o randomc8.o randomc16.o randomstr.o randutil.o gendataseq_4Bshort_no.o
make: Leaving directory `/home/vagrant/.julia/v0.7/FortranFiles/test/codegen'
make: Entering directory `/home/vagrant/.julia/v0.7/FortranFiles/test/codegen'
gfortran -std=f2008 -fcheck=all -Wall -Wno-conversion  -c -o gendataseq_4Bdef_no.o gendataseq.F90
gfortran -o gendataseq_4Bdef_no.x randomi1.o randomi2.o randomi4.o randomi8.o randomr4.o randomr8.o randomc8.o randomc16.o randomstr.o randutil.o gendataseq_4Bdef_no.o
make: Leaving directory `/home/vagrant/.julia/v0.7/FortranFiles/test/codegen'
make: Entering directory `/home/vagrant/.julia/v0.7/FortranFiles/test/codegen'
gfortran -std=f2008 -fcheck=all -Wall -Wno-conversion -frecord-marker=8  -c -o gendataseq_8B_no.o gendataseq.F90
gfortran -o gendataseq_8B_no.x randomi1.o randomi2.o randomi4.o randomi8.o randomr4.o randomr8.o randomc8.o randomc16.o randomstr.o randutil.o gendataseq_8B_no.o
make: Leaving directory `/home/vagrant/.julia/v0.7/FortranFiles/test/codegen'
make: Entering directory `/home/vagrant/.julia/v0.7/FortranFiles/test/codegen'
gfortran -std=f2008 -fcheck=all -Wall -Wno-conversion  -c -o gendataseq_4Bdumb_no.o gendataseq.F90
gfortran -o gendataseq_4Bdumb_no.x randomi1.o randomi2.o randomi4.o randomi8.o randomr4.o randomr8.o randomc8.o randomc16.o randomstr.o randutil.o gendataseq_4Bdumb_no.o
make: Leaving directory `/home/vagrant/.julia/v0.7/FortranFiles/test/codegen'
make: Entering directory `/home/vagrant/.julia/v0.7/FortranFiles/test/codegen'
gfortran -std=f2008 -fcheck=all -Wall -Wno-conversion -fconvert=little-endian -c -o gendatadirect_DA_LE.o gendatadirect.F90
gfortran -o gendatadirect_DA_LE.x randomi1.o randomi2.o randomi4.o randomi8.o randomr4.o randomr8.o randomc8.o randomc16.o randomstr.o randutil.o gendatadirect_DA_LE.o
make: Leaving directory `/home/vagrant/.julia/v0.7/FortranFiles/test/codegen'
make: Entering directory `/home/vagrant/.julia/v0.7/FortranFiles/test/codegen'
gfortran -std=f2008 -fcheck=all -Wall -Wno-conversion -fmax-subrecord-length=32759 -fconvert=little-endian -c -o gendataseq_4Bshort_LE.o gendataseq.F90
gfortran -o gendataseq_4Bshort_LE.x randomi1.o randomi2.o randomi4.o randomi8.o randomr4.o randomr8.o randomc8.o randomc16.o randomstr.o randutil.o gendataseq_4Bshort_LE.o
make: Leaving directory `/home/vagrant/.julia/v0.7/FortranFiles/test/codegen'
make: Entering directory `/home/vagrant/.julia/v0.7/FortranFiles/test/codegen'
gfortran -std=f2008 -fcheck=all -Wall -Wno-conversion -fconvert=little-endian -c -o gendataseq_4Bdef_LE.o gendataseq.F90
gfortran -o gendataseq_4Bdef_LE.x randomi1.o randomi2.o randomi4.o randomi8.o randomr4.o randomr8.o randomc8.o randomc16.o randomstr.o randutil.o gendataseq_4Bdef_LE.o
make: Leaving directory `/home/vagrant/.julia/v0.7/FortranFiles/test/codegen'
make: Entering directory `/home/vagrant/.julia/v0.7/FortranFiles/test/codegen'
gfortran -std=f2008 -fcheck=all -Wall -Wno-conversion -frecord-marker=8 -fconvert=little-endian -c -o gendataseq_8B_LE.o gendataseq.F90
gfortran -o gendataseq_8B_LE.x randomi1.o randomi2.o randomi4.o randomi8.o randomr4.o randomr8.o randomc8.o randomc16.o randomstr.o randutil.o gendataseq_8B_LE.o
make: Leaving directory `/home/vagrant/.julia/v0.7/FortranFiles/test/codegen'
make: Entering directory `/home/vagrant/.julia/v0.7/FortranFiles/test/codegen'
gfortran -std=f2008 -fcheck=all -Wall -Wno-conversion -fconvert=little-endian -c -o gendataseq_4Bdumb_LE.o gendataseq.F90
gfortran -o gendataseq_4Bdumb_LE.x randomi1.o randomi2.o randomi4.o randomi8.o randomr4.o randomr8.o randomc8.o randomc16.o randomstr.o randutil.o gendataseq_4Bdumb_LE.o
make: Leaving directory `/home/vagrant/.julia/v0.7/FortranFiles/test/codegen'
make: Entering directory `/home/vagrant/.julia/v0.7/FortranFiles/test/codegen'
gfortran -std=f2008 -fcheck=all -Wall -Wno-conversion -fconvert=big-endian -c -o gendatadirect_DA_BE.o gendatadirect.F90
gfortran -o gendatadirect_DA_BE.x randomi1.o randomi2.o randomi4.o randomi8.o randomr4.o randomr8.o randomc8.o randomc16.o randomstr.o randutil.o gendatadirect_DA_BE.o
make: Leaving directory `/home/vagrant/.julia/v0.7/FortranFiles/test/codegen'
make: Entering directory `/home/vagrant/.julia/v0.7/FortranFiles/test/codegen'
gfortran -std=f2008 -fcheck=all -Wall -Wno-conversion -fmax-subrecord-length=32759 -fconvert=big-endian -c -o gendataseq_4Bshort_BE.o gendataseq.F90
gfortran -o gendataseq_4Bshort_BE.x randomi1.o randomi2.o randomi4.o randomi8.o randomr4.o randomr8.o randomc8.o randomc16.o randomstr.o randutil.o gendataseq_4Bshort_BE.o
make: Leaving directory `/home/vagrant/.julia/v0.7/FortranFiles/test/codegen'
make: Entering directory `/home/vagrant/.julia/v0.7/FortranFiles/test/codegen'
gfortran -std=f2008 -fcheck=all -Wall -Wno-conversion -fconvert=big-endian -c -o gendataseq_4Bdef_BE.o gendataseq.F90
gfortran -o gendataseq_4Bdef_BE.x randomi1.o randomi2.o randomi4.o randomi8.o randomr4.o randomr8.o randomc8.o randomc16.o randomstr.o randutil.o gendataseq_4Bdef_BE.o
make: Leaving directory `/home/vagrant/.julia/v0.7/FortranFiles/test/codegen'
make: Entering directory `/home/vagrant/.julia/v0.7/FortranFiles/test/codegen'
gfortran -std=f2008 -fcheck=all -Wall -Wno-conversion -frecord-marker=8 -fconvert=big-endian -c -o gendataseq_8B_BE.o gendataseq.F90
gfortran -o gendataseq_8B_BE.x randomi1.o randomi2.o randomi4.o randomi8.o randomr4.o randomr8.o randomc8.o randomc16.o randomstr.o randutil.o gendataseq_8B_BE.o
make: Leaving directory `/home/vagrant/.julia/v0.7/FortranFiles/test/codegen'
make: Entering directory `/home/vagrant/.julia/v0.7/FortranFiles/test/codegen'
gfortran -std=f2008 -fcheck=all -Wall -Wno-conversion -fconvert=big-endian -c -o gendataseq_4Bdumb_BE.o gendataseq.F90
gfortran -o gendataseq_4Bdumb_BE.x randomi1.o randomi2.o randomi4.o randomi8.o randomr4.o randomr8.o randomc8.o randomc16.o randomstr.o randutil.o gendataseq_4Bdumb_BE.o
make: Leaving directory `/home/vagrant/.julia/v0.7/FortranFiles/test/codegen'
Test Summary: | Pass  Total
Strings       |    7      7
WARNING: Base.Complex64 is deprecated, use ComplexF32 instead.
  likely near /home/vagrant/.julia/v0.7/FortranFiles/test/runtests.jl:170
WARNING: Base.Complex64 is deprecated, use ComplexF32 instead.
  likely near /home/vagrant/.julia/v0.7/FortranFiles/test/runtests.jl:170
WARNING: Base.Complex64 is deprecated, use ComplexF32 instead.
  likely near /home/vagrant/.julia/v0.7/FortranFiles/test/runtests.jl:170
WARNING: Base.Complex128 is deprecated, use ComplexF64 instead.
  likely near /home/vagrant/.julia/v0.7/FortranFiles/test/runtests.jl:170
WARNING: Base.Complex128 is deprecated, use ComplexF64 instead.
  likely near /home/vagrant/.julia/v0.7/FortranFiles/test/runtests.jl:170
WARNING: Base.Complex128 is deprecated, use ComplexF64 instead.
  likely near /home/vagrant/.julia/v0.7/FortranFiles/test/runtests.jl:170
WARNING: Base.Complex64 is deprecated, use ComplexF32 instead.
  likely near /home/vagrant/.julia/v0.7/FortranFiles/test/runtests.jl:170
WARNING: Base.Complex64 is deprecated, use ComplexF32 instead.
  likely near /home/vagrant/.julia/v0.7/FortranFiles/test/runtests.jl:170
WARNING: Base.Complex64 is deprecated, use ComplexF32 instead.
  likely near /home/vagrant/.julia/v0.7/FortranFiles/test/runtests.jl:170
WARNING: Base.Complex128 is deprecated, use ComplexF64 instead.
  likely near /home/vagrant/.julia/v0.7/FortranFiles/test/runtests.jl:170
WARNING: Base.Complex128 is deprecated, use ComplexF64 instead.
  likely near /home/vagrant/.julia/v0.7/FortranFiles/test/runtests.jl:170
WARNING: Base.Complex128 is deprecated, use ComplexF64 instead.
  likely near /home/vagrant/.julia/v0.7/FortranFiles/test/runtests.jl:170
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = _readdata(::FortranFile{DirectAccess,FortranFiles.Conversion{typeof(identity),typeof(identity)}}, ::Int64) at runtests.jl:93
└ @ Main runtests.jl:93
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = _readdata(::FortranFile{DirectAccess,FortranFiles.Conversion{typeof(identity),typeof(identity)}}, ::Int64) at runtests.jl:96
└ @ Main runtests.jl:96
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = _readdata(::FortranFile{DirectAccess,FortranFiles.Conversion{typeof(identity),typeof(identity)}}, ::Int64) at runtests.jl:99
└ @ Main runtests.jl:99
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = _readdata(::FortranFile{DirectAccess,FortranFiles.Conversion{typeof(identity),typeof(identity)}}, ::Int64) at runtests.jl:102
└ @ Main runtests.jl:102
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = _readdata(::FortranFile{DirectAccess,FortranFiles.Conversion{typeof(identity),typeof(identity)}}, ::Int64) at runtests.jl:105
└ @ Main runtests.jl:105
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = _readdata(::FortranFile{DirectAccess,FortranFiles.Conversion{typeof(identity),typeof(identity)}}, ::Int64) at runtests.jl:108
└ @ Main runtests.jl:108
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = _readdata(::FortranFile{DirectAccess,FortranFiles.Conversion{typeof(identity),typeof(identity)}}, ::Int64) at runtests.jl:111
└ @ Main runtests.jl:111
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = _readdata(::FortranFile{DirectAccess,FortranFiles.Conversion{typeof(identity),typeof(identity)}}, ::Int64) at runtests.jl:114
└ @ Main runtests.jl:114
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = _readdata(::FortranFile{DirectAccess,FortranFiles.Conversion{typeof(identity),typeof(identity)}}, ::Int64) at runtests.jl:117
└ @ Main runtests.jl:117
┌ Warning: `read(s::IO, t::Type, d1::Int, dims::Int...)` is deprecated, use `read!(s, Array{t}(undef, d1, dims...))` instead.
│   caller = read at string.jl:48 [inlined]
└ @ Core string.jl:48
  1.481477 seconds (1.03 M allocations: 59.380 MiB, 1.17% gc time)
  0.015881 seconds (2.13 k allocations: 219.333 KiB)
  1.037723 seconds (778.22 k allocations: 45.495 MiB, 1.45% gc time)
Test Summary:                                                        | Pass  Total
Testing records with fixed length (direct access), native byte order |   50     50
WARNING: Base.Complex64 is deprecated, use ComplexF32 instead.
  likely near /home/vagrant/.julia/v0.7/FortranFiles/test/runtests.jl:170
WARNING: Base.Complex64 is deprecated, use ComplexF32 instead.
  likely near /home/vagrant/.julia/v0.7/FortranFiles/test/runtests.jl:170
WARNING: Base.Complex64 is deprecated, use ComplexF32 instead.
  likely near /home/vagrant/.julia/v0.7/FortranFiles/test/runtests.jl:170
WARNING: Base.Complex128 is deprecated, use ComplexF64 instead.
  likely near /home/vagrant/.julia/v0.7/FortranFiles/test/runtests.jl:170
WARNING: Base.Complex128 is deprecated, use ComplexF64 instead.
  likely near /home/vagrant/.julia/v0.7/FortranFiles/test/runtests.jl:170
WARNING: Base.Complex128 is deprecated, use ComplexF64 instead.
  likely near /home/vagrant/.julia/v0.7/FortranFiles/test/runtests.jl:170
WARNING: Base.Complex64 is deprecated, use ComplexF32 instead.
  likely near /home/vagrant/.julia/v0.7/FortranFiles/test/runtests.jl:170
WARNING: Base.Complex64 is deprecated, use ComplexF32 instead.
  likely near /home/vagrant/.julia/v0.7/FortranFiles/test/runtests.jl:170
WARNING: Base.Complex64 is deprecated, use ComplexF32 instead.
  likely near /home/vagrant/.julia/v0.7/FortranFiles/test/runtests.jl:170
WARNING: Base.Complex128 is deprecated, use ComplexF64 instead.
  likely near /home/vagrant/.julia/v0.7/FortranFiles/test/runtests.jl:170
WARNING: Base.Complex128 is deprecated, use ComplexF64 instead.
  likely near /home/vagrant/.julia/v0.7/FortranFiles/test/runtests.jl:170
WARNING: Base.Complex128 is deprecated, use ComplexF64 instead.
  likely near /home/vagrant/.julia/v0.7/FortranFiles/test/runtests.jl:170
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = _readdata(::FortranFile{DirectAccess,FortranFiles.Conversion{typeof(ltoh),typeof(htol)}}, ::Int64) at runtests.jl:93
└ @ Main runtests.jl:93
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = _readdata(::FortranFile{DirectAccess,FortranFiles.Conversion{typeof(ltoh),typeof(htol)}}, ::Int64) at runtests.jl:96
└ @ Main runtests.jl:96
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = _readdata(::FortranFile{DirectAccess,FortranFiles.Conversion{typeof(ltoh),typeof(htol)}}, ::Int64) at runtests.jl:99
└ @ Main runtests.jl:99
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = _readdata(::FortranFile{DirectAccess,FortranFiles.Conversion{typeof(ltoh),typeof(htol)}}, ::Int64) at runtests.jl:102
└ @ Main runtests.jl:102
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = _readdata(::FortranFile{DirectAccess,FortranFiles.Conversion{typeof(ltoh),typeof(htol)}}, ::Int64) at runtests.jl:105
└ @ Main runtests.jl:105
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = _readdata(::FortranFile{DirectAccess,FortranFiles.Conversion{typeof(ltoh),typeof(htol)}}, ::Int64) at runtests.jl:108
└ @ Main runtests.jl:108
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = _readdata(::FortranFile{DirectAccess,FortranFiles.Conversion{typeof(ltoh),typeof(htol)}}, ::Int64) at runtests.jl:111
└ @ Main runtests.jl:111
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = _readdata(::FortranFile{DirectAccess,FortranFiles.Conversion{typeof(ltoh),typeof(htol)}}, ::Int64) at runtests.jl:114
└ @ Main runtests.jl:114
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = _readdata(::FortranFile{DirectAccess,FortranFiles.Conversion{typeof(ltoh),typeof(htol)}}, ::Int64) at runtests.jl:117
└ @ Main runtests.jl:117
┌ Warning: `read(s::IO, t::Type, d1::Int, dims::Int...)` is deprecated, use `read!(s, Array{t}(undef, d1, dims...))` instead.
│   caller = read at string.jl:48 [inlined]
└ @ Core string.jl:48
  0.407889 seconds (277.64 k allocations: 16.074 MiB)
  0.017071 seconds (2.13 k allocations: 219.067 KiB)
  0.803605 seconds (549.07 k allocations: 31.670 MiB, 2.15% gc time)
Test Summary:                                                               | Pass  Total
Testing records with fixed length (direct access), little-endian byte order |   50     50
WARNING: Base.Complex64 is deprecated, use ComplexF32 instead.
  likely near /home/vagrant/.julia/v0.7/FortranFiles/test/runtests.jl:170
WARNING: Base.Complex64 is deprecated, use ComplexF32 instead.
  likely near /home/vagrant/.julia/v0.7/FortranFiles/test/runtests.jl:170
WARNING: Base.Complex64 is deprecated, use ComplexF32 instead.
  likely near /home/vagrant/.julia/v0.7/FortranFiles/test/runtests.jl:170
WARNING: Base.Complex128 is deprecated, use ComplexF64 instead.
  likely near /home/vagrant/.julia/v0.7/FortranFiles/test/runtests.jl:170
WARNING: Base.Complex128 is deprecated, use ComplexF64 instead.
  likely near /home/vagrant/.julia/v0.7/FortranFiles/test/runtests.jl:170
WARNING: Base.Complex128 is deprecated, use ComplexF64 instead.
  likely near /home/vagrant/.julia/v0.7/FortranFiles/test/runtests.jl:170
WARNING: Base.Complex64 is deprecated, use ComplexF32 instead.
  likely near /home/vagrant/.julia/v0.7/FortranFiles/test/runtests.jl:170
WARNING: Base.Complex64 is deprecated, use ComplexF32 instead.
  likely near /home/vagrant/.julia/v0.7/FortranFiles/test/runtests.jl:170
WARNING: Base.Complex64 is deprecated, use ComplexF32 instead.
  likely near /home/vagrant/.julia/v0.7/FortranFiles/test/runtests.jl:170
WARNING: Base.Complex128 is deprecated, use ComplexF64 instead.
  likely near /home/vagrant/.julia/v0.7/FortranFiles/test/runtests.jl:170
WARNING: Base.Complex128 is deprecated, use ComplexF64 instead.
  likely near /home/vagrant/.julia/v0.7/FortranFiles/test/runtests.jl:170
WARNING: Base.Complex128 is deprecated, use ComplexF64 instead.
  likely near /home/vagrant/.julia/v0.7/FortranFiles/test/runtests.jl:170
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = _readdata(::FortranFile{DirectAccess,FortranFiles.Conversion{typeof(ntoh),typeof(hton)}}, ::Int64) at runtests.jl:93
└ @ Main runtests.jl:93
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = _readdata(::FortranFile{DirectAccess,FortranFiles.Conversion{typeof(ntoh),typeof(hton)}}, ::Int64) at runtests.jl:96
└ @ Main runtests.jl:96
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = _readdata(::FortranFile{DirectAccess,FortranFiles.Conversion{typeof(ntoh),typeof(hton)}}, ::Int64) at runtests.jl:99
└ @ Main runtests.jl:99
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = _readdata(::FortranFile{DirectAccess,FortranFiles.Conversion{typeof(ntoh),typeof(hton)}}, ::Int64) at runtests.jl:102
└ @ Main runtests.jl:102
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = _readdata(::FortranFile{DirectAccess,FortranFiles.Conversion{typeof(ntoh),typeof(hton)}}, ::Int64) at runtests.jl:105
└ @ Main runtests.jl:105
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = _readdata(::FortranFile{DirectAccess,FortranFiles.Conversion{typeof(ntoh),typeof(hton)}}, ::Int64) at runtests.jl:108
└ @ Main runtests.jl:108
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = _readdata(::FortranFile{DirectAccess,FortranFiles.Conversion{typeof(ntoh),typeof(hton)}}, ::Int64) at runtests.jl:111
└ @ Main runtests.jl:111
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = _readdata(::FortranFile{DirectAccess,FortranFiles.Conversion{typeof(ntoh),typeof(hton)}}, ::Int64) at runtests.jl:114
└ @ Main runtests.jl:114
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = _readdata(::FortranFile{DirectAccess,FortranFiles.Conversion{typeof(ntoh),typeof(hton)}}, ::Int64) at runtests.jl:117
└ @ Main runtests.jl:117
┌ Warning: `read(s::IO, t::Type, d1::Int, dims::Int...)` is deprecated, use `read!(s, Array{t}(undef, d1, dims...))` instead.
│   caller = read at string.jl:48 [inlined]
└ @ Core string.jl:48
  0.558793 seconds (286.36 k allocations: 16.649 MiB)
  0.015912 seconds (2.14 k allocations: 220.239 KiB)
  1.147619 seconds (553.76 k allocations: 31.904 MiB, 1.66% gc time)
Test Summary:                                                            | Pass  Total
Testing records with fixed length (direct access), big-endian byte order |   50     50
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = readdata(::FortranFile{SequentialAccess{FortranFiles.WithSubrecords},FortranFiles.Conversion{typeof(identity),typeof(identity)}}) at jread.jl:3
└ @ Main jread.jl:3
┌ Warning: `Array{T}(m::Integer, n::Integer, o::Integer) where T` is deprecated, use `Array{T}(undef, m, n, o)` instead.
│   caller = read_spec(::FortranFiles.RecordWithSubrecords{FortranFiles.Conversion{typeof(identity),typeof(identity)}}, ::Tuple{DataType,Int64,Int32,Int32}) at read.jl:82
└ @ FortranFiles read.jl:82
┌ Warning: `Array{T}(m::Integer) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = read_spec(::FortranFiles.RecordWithSubrecords{FortranFiles.Conversion{typeof(identity),typeof(identity)}}, ::Tuple{DataType,Int16}) at read.jl:76
└ @ FortranFiles read.jl:76
┌ Warning: `Array{T}(m::Integer, n::Integer) where T` is deprecated, use `Array{T}(undef, m, n)` instead.
│   caller = read_spec(::FortranFiles.RecordWithSubrecords{FortranFiles.Conversion{typeof(identity),typeof(identity)}}, ::Tuple{DataType,Tuple{Int32,Int64}}) at read.jl:87
└ @ FortranFiles read.jl:87
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = readdata(::FortranFile{SequentialAccess{FortranFiles.WithSubrecords},FortranFiles.Conversion{typeof(identity),typeof(identity)}}) at jread.jl:13
└ @ Main jread.jl:13
┌ Warning: `Array{T}(m::Integer, n::Integer, o::Integer) where T` is deprecated, use `Array{T}(undef, m, n, o)` instead.
│   caller = read_spec(::FortranFiles.RecordWithSubrecords{FortranFiles.Conversion{typeof(identity),typeof(identity)}}, ::Tuple{DataType,Int16,Int64,Int64}) at read.jl:82
└ @ FortranFiles read.jl:82
┌ Warning: `read(s::IO, t::Type, d1::Int, dims::Int...)` is deprecated, use `read!(s, Array{t}(undef, d1, dims...))` instead.
│   caller = read at string.jl:48 [inlined]
└ @ Core string.jl:48
┌ Warning: `Array{T}(m::Integer, n::Integer, o::Integer) where T` is deprecated, use `Array{T}(undef, m, n, o)` instead.
│   caller = read_spec(::FortranFiles.RecordWithSubrecords{FortranFiles.Conversion{typeof(identity),typeof(identity)}}, ::Tuple{DataType,Int64,Int32,Int16}) at read.jl:82
└ @ FortranFiles read.jl:82
┌ Warning: `read(s::IO, t::Type, d1::Int, dims::Int...)` is deprecated, use `read!(s, Array{t}(undef, d1, dims...))` instead.
│   caller = read at string.jl:48 [inlined]
└ @ Core string.jl:48
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = read_spec(::FortranFiles.RecordWithSubrecords{FortranFiles.Conversion{typeof(identity),typeof(identity)}}, ::Tuple{DataType,Int64}) at read.jl:76
└ @ FortranFiles read.jl:76
┌ Warning: `Array{T}(m::Integer, n::Integer, o::Integer) where T` is deprecated, use `Array{T}(undef, m, n, o)` instead.
│   caller = read_spec(::FortranFiles.RecordWithSubrecords{FortranFiles.Conversion{typeof(identity),typeof(identity)}}, ::Tuple{DataType,Int64,Int16,Int32}) at read.jl:82
└ @ FortranFiles read.jl:82
┌ Warning: `Array{T}(m::Integer, n::Integer, o::Integer) where T` is deprecated, use `Array{T}(undef, m, n, o)` instead.
│   caller = read_spec(::FortranFiles.RecordWithSubrecords{FortranFiles.Conversion{typeof(identity),typeof(identity)}}, ::Tuple{DataType,Int64,Int16,Int16}) at read.jl:82
└ @ FortranFiles read.jl:82
┌ Warning: `Array{T}(m::Integer, n::Integer) where T` is deprecated, use `Array{T}(undef, m, n)` instead.
│   caller = read_spec(::FortranFiles.RecordWithSubrecords{FortranFiles.Conversion{typeof(identity),typeof(identity)}}, ::Tuple{DataType,Tuple{Int32,Int32}}) at read.jl:87
└ @ FortranFiles read.jl:87
┌ Warning: `Array{T}(m::Integer, n::Integer, o::Integer) where T` is deprecated, use `Array{T}(undef, m, n, o)` instead.
│   caller = read_spec(::FortranFiles.RecordWithSubrecords{FortranFiles.Conversion{typeof(identity),typeof(identity)}}, ::Tuple{DataType,Tuple{Int64,Int64,Int32}}) at read.jl:87
└ @ FortranFiles read.jl:87
┌ Warning: `Array{T}(m::Int, n::Int) where T` is deprecated, use `Array{T}(undef, m, n)` instead.
│   caller = readdata(::FortranFile{SequentialAccess{FortranFiles.WithSubrecords},FortranFiles.Conversion{typeof(identity),typeof(identity)}}) at jread.jl:53
└ @ Main jread.jl:53
┌ Warning: `Array{T}(m::Int, n::Int) where T` is deprecated, use `Array{T}(undef, m, n)` instead.
│   caller = readdata(::FortranFile{SequentialAccess{FortranFiles.WithSubrecords},FortranFiles.Conversion{typeof(identity),typeof(identity)}}) at jread.jl:53
└ @ Main jread.jl:53
┌ Warning: `Array{T}(m::Integer, n::Integer) where T` is deprecated, use `Array{T}(undef, m, n)` instead.
│   caller = read_spec(::FortranFiles.RecordWithSubrecords{FortranFiles.Conversion{typeof(identity),typeof(identity)}}, ::Tuple{DataType,Int16,Int32}) at read.jl:82
└ @ FortranFiles read.jl:82
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = readdata(::FortranFile{SequentialAccess{FortranFiles.WithSubrecords},FortranFiles.Conversion{typeof(identity),typeof(identity)}}) at jread.jl:61
└ @ Main jread.jl:61
┌ Warning: `read(s::IO, t::Type, d1::Int, dims::Int...)` is deprecated, use `read!(s, Array{t}(undef, d1, dims...))` instead.
│   caller = read at string.jl:48 [inlined]
└ @ Core string.jl:48
┌ Warning: `Array{T}(m::Int, n::Int, o::Int) where T` is deprecated, use `Array{T}(undef, m, n, o)` instead.
│   caller = readdata(::FortranFile{SequentialAccess{FortranFiles.WithSubrecords},FortranFiles.Conversion{typeof(identity),typeof(identity)}}) at jread.jl:69
└ @ Main jread.jl:69
┌ Warning: `Array{T}(m::Integer, n::Integer, o::Integer) where T` is deprecated, use `Array{T}(undef, m, n, o)` instead.
│   caller = read_spec(::FortranFiles.RecordWithSubrecords{FortranFiles.Conversion{typeof(identity),typeof(identity)}}, ::Tuple{DataType,Tuple{Int64,Int64,Int16}}) at read.jl:87
└ @ FortranFiles read.jl:87
┌ Warning: `read(s::IO, t::Type, d1::Int, dims::Int...)` is deprecated, use `read!(s, Array{t}(undef, d1, dims...))` instead.
│   caller = read at string.jl:48 [inlined]
└ @ Core string.jl:48
┌ Warning: `read(s::IO, t::Type, d1::Int, dims::Int...)` is deprecated, use `read!(s, Array{t}(undef, d1, dims...))` instead.
│   caller = read at string.jl:48 [inlined]
└ @ Core string.jl:48
┌ Warning: `Array{T}(m::Integer, n::Integer) where T` is deprecated, use `Array{T}(undef, m, n)` instead.
│   caller = read_spec(::FortranFiles.RecordWithSubrecords{FortranFiles.Conversion{typeof(identity),typeof(identity)}}, ::Tuple{DataType,Int32,Int32}) at read.jl:82
└ @ FortranFiles read.jl:82
┌ Warning: `Array{T}(m::Int, n::Int) where T` is deprecated, use `Array{T}(undef, m, n)` instead.
│   caller = readdata(::FortranFile{SequentialAccess{FortranFiles.WithSubrecords},FortranFiles.Conversion{typeof(identity),typeof(identity)}}) at jread.jl:91
└ @ Main jread.jl:91
┌ Warning: `Array{T}(m::Int, n::Int, o::Int) where T` is deprecated, use `Array{T}(undef, m, n, o)` instead.
│   caller = readdata(::FortranFile{SequentialAccess{FortranFiles.WithSubrecords},FortranFiles.Conversion{typeof(identity),typeof(identity)}}) at jread.jl:95
└ @ Main jread.jl:95
┌ Warning: `Array{T}(m::Int, n::Int) where T` is deprecated, use `Array{T}(undef, m, n)` instead.
│   caller = read_spec(::FortranFiles.RecordWithSubrecords{FortranFiles.Conversion{typeof(identity),typeof(identity)}}, ::Tuple{DataType,Tuple{Int64,Int64}}) at read.jl:87
└ @ FortranFiles read.jl:87
┌ Warning: `read(s::IO, t::Type, d1::Int, dims::Int...)` is deprecated, use `read!(s, Array{t}(undef, d1, dims...))` instead.
│   caller = read at string.jl:48 [inlined]
└ @ Core string.jl:48
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = readdata(::FortranFile{SequentialAccess{FortranFiles.WithSubrecords},FortranFiles.Conversion{typeof(identity),typeof(identity)}}) at jread.jl:103
└ @ Main jread.jl:103
┌ Warning: `read(s::IO, t::Type, d1::Int, dims::Int...)` is deprecated, use `read!(s, Array{t}(undef, d1, dims...))` instead.
│   caller = read at string.jl:48 [inlined]
└ @ Core string.jl:48
┌ Warning: `Array{T}(m::Int, n::Int) where T` is deprecated, use `Array{T}(undef, m, n)` instead.
│   caller = read_spec(::FortranFiles.RecordWithSubrecords{FortranFiles.Conversion{typeof(identity),typeof(identity)}}, ::Tuple{DataType,Int64,Int64}) at read.jl:82
└ @ FortranFiles read.jl:82
┌ Warning: `read(s::IO, t::Type, d1::Int, dims::Int...)` is deprecated, use `read!(s, Array{t}(undef, d1, dims...))` instead.
│   caller = read at string.jl:48 [inlined]
└ @ Core string.jl:48
  6.733217 seconds (3.86 M allocations: 335.000 MiB, 3.00% gc time)
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = skipdata(::FortranFile{SequentialAccess{FortranFiles.WithSubrecords},FortranFiles.Conversion{typeof(identity),typeof(identity)}}) at jskip.jl:3
└ @ Main jskip.jl:3
┌ Warning: `Array{T}(m::Int, n::Int, o::Int) where T` is deprecated, use `Array{T}(undef, m, n, o)` instead.
│   caller = read_spec(::FortranFiles.RecordWithSubrecords{FortranFiles.Conversion{typeof(identity),typeof(identity)}}, ::Tuple{DataType,Tuple{Int64,Int64,Int64}}) at read.jl:87
└ @ FortranFiles read.jl:87
┌ Warning: `Array{T}(m::Integer) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = read_spec(::FortranFiles.RecordWithSubrecords{FortranFiles.Conversion{typeof(identity),typeof(identity)}}, ::Tuple{DataType,Int32}) at read.jl:76
└ @ FortranFiles read.jl:76
┌ Warning: `Array{T}(m::Int, n::Int, o::Int) where T` is deprecated, use `Array{T}(undef, m, n, o)` instead.
│   caller = read_spec(::FortranFiles.RecordWithSubrecords{FortranFiles.Conversion{typeof(identity),typeof(identity)}}, ::Tuple{DataType,Int64,Int64,Int64}) at read.jl:82
└ @ FortranFiles read.jl:82
┌ Warning: `Array{T}(m::Int, n::Int) where T` is deprecated, use `Array{T}(undef, m, n)` instead.
│   caller = skipdata(::FortranFile{SequentialAccess{FortranFiles.WithSubrecords},FortranFiles.Conversion{typeof(identity),typeof(identity)}}) at jskip.jl:22
└ @ Main jskip.jl:22
┌ Warning: `Array{T}(m::Integer, n::Integer) where T` is deprecated, use `Array{T}(undef, m, n)` instead.
│   caller = read_spec(::FortranFiles.RecordWithSubrecords{FortranFiles.Conversion{typeof(identity),typeof(identity)}}, ::Tuple{DataType,Tuple{Int64,Int32}}) at read.jl:87
└ @ FortranFiles read.jl:87
┌ Warning: `Array{T}(m::Int, n::Int) where T` is deprecated, use `Array{T}(undef, m, n)` instead.
│   caller = skipdata(::FortranFile{SequentialAccess{FortranFiles.WithSubrecords},FortranFiles.Conversion{typeof(identity),typeof(identity)}}) at jskip.jl:34
└ @ Main jskip.jl:34
┌ Warning: `Array{T}(m::Integer, n::Integer, o::Integer) where T` is deprecated, use `Array{T}(undef, m, n, o)` instead.
│   caller = read_spec(::FortranFiles.RecordWithSubrecords{FortranFiles.Conversion{typeof(identity),typeof(identity)}}, ::Tuple{DataType,Int32,Int32,Int16}) at read.jl:82
└ @ FortranFiles read.jl:82
┌ Warning: `Array{T}(m::Int, n::Int, o::Int) where T` is deprecated, use `Array{T}(undef, m, n, o)` instead.
│   caller = skipdata(::FortranFile{SequentialAccess{FortranFiles.WithSubrecords},FortranFiles.Conversion{typeof(identity),typeof(identity)}}) at jskip.jl:46
└ @ Main jskip.jl:46
  2.368692 seconds (1.26 M allocations: 127.467 MiB, 4.44% gc time)
┌ Warning: `shift!` is deprecated, use `popfirst!` instead.
│   caller = writedata(::FortranFile{SequentialAccess{FortranFiles.WithSubrecords},FortranFiles.Conversion{typeof(identity),typeof(identity)}}, ::Array{Any,1}) at jwrite.jl:2
└ @ Main jwrite.jl:2
┌ Warning: `shift!` is deprecated, use `popfirst!` instead.
│   caller = writedata(::FortranFile{SequentialAccess{FortranFiles.WithSubrecords},FortranFiles.Conversion{typeof(identity),typeof(identity)}}, ::Array{Any,1}) at jwrite.jl:5
└ @ Main jwrite.jl:5
┌ Warning: Calling `write` on non-isbits arrays is deprecated. Use a loop or `serialize` instead.
│   caller = write_var at write.jl:67 [inlined]
└ @ Core write.jl:67
┌ Warning: `shift!` is deprecated, use `popfirst!` instead.
│   caller = writedata(::FortranFile{SequentialAccess{FortranFiles.WithSubrecords},FortranFiles.Conversion{typeof(identity),typeof(identity)}}, ::Array{Any,1}) at jwrite.jl:8
└ @ Main jwrite.jl:8
┌ Warning: Calling `write` on non-isbits arrays is deprecated. Use a loop or `serialize` instead.
│   caller = write_var at write.jl:67 [inlined]
└ @ Core write.jl:67
┌ Warning: `shift!` is deprecated, use `popfirst!` instead.
│   caller = writedata(::FortranFile{SequentialAccess{FortranFiles.WithSubrecords},FortranFiles.Conversion{typeof(identity),typeof(identity)}}, ::Array{Any,1}) at jwrite.jl:11
└ @ Main jwrite.jl:11
┌ Warning: `shift!` is deprecated, use `popfirst!` instead.
│   caller = writedata(::FortranFile{SequentialAccess{FortranFiles.WithSubrecords},FortranFiles.Conversion{typeof(identity),typeof(identity)}}, ::Array{Any,1}) at jwrite.jl:14
└ @ Main jwrite.jl:14
┌ Warning: `shift!` is deprecated, use `popfirst!` instead.
│   caller = writedata(::FortranFile{SequentialAccess{FortranFiles.WithSubrecords},FortranFiles.Conversion{typeof(identity),typeof(identity)}}, ::Array{Any,1}) at jwrite.jl:17
└ @ Main jwrite.jl:17
┌ Warning: `shift!` is deprecated, use `popfirst!` instead.
│   caller = writedata(::FortranFile{SequentialAccess{FortranFiles.WithSubrecords},FortranFiles.Conversion{typeof(identity),typeof(identity)}}, ::Array{Any,1}) at jwrite.jl:20
└ @ Main jwrite.jl:20
┌ Warning: `shift!` is deprecated, use `popfirst!` instead.
│   caller = writedata(::FortranFile{SequentialAccess{FortranFiles.WithSubrecords},FortranFiles.Conversion{typeof(identity),typeof(identity)}}, ::Array{Any,1}) at jwrite.jl:23
└ @ Main jwrite.jl:23
┌ Warning: Calling `write` on non-isbits arrays is deprecated. Use a loop or `serialize` instead.
│   caller = write_var at write.jl:67 [inlined]
└ @ Core write.jl:67
┌ Warning: `shift!` is deprecated, use `popfirst!` instead.
│   caller = writedata(::FortranFile{SequentialAccess{FortranFiles.WithSubrecords},FortranFiles.Conversion{typeof(identity),typeof(identity)}}, ::Array{Any,1}) at jwrite.jl:26
└ @ Main jwrite.jl:26
┌ Warning: Calling `write` on non-isbits arrays is deprecated. Use a loop or `serialize` instead.
│   caller = write_var at write.jl:67 [inlined]
└ @ Core write.jl:67
┌ Warning: `shift!` is deprecated, use `popfirst!` instead.
│   caller = writedata(::FortranFile{SequentialAccess{FortranFiles.WithSubrecords},FortranFiles.Conversion{typeof(identity),typeof(identity)}}, ::Array{Any,1}) at jwrite.jl:29
└ @ Main jwrite.jl:29
┌ Warning: `shift!` is deprecated, use `popfirst!` instead.
│   caller = writedata(::FortranFile{SequentialAccess{FortranFiles.WithSubrecords},FortranFiles.Conversion{typeof(identity),typeof(identity)}}, ::Array{Any,1}) at jwrite.jl:32
└ @ Main jwrite.jl:32
┌ Warning: `shift!` is deprecated, use `popfirst!` instead.
│   caller = writedata(::FortranFile{SequentialAccess{FortranFiles.WithSubrecords},FortranFiles.Conversion{typeof(identity),typeof(identity)}}, ::Array{Any,1}) at jwrite.jl:35
└ @ Main jwrite.jl:35
┌ Warning: `shift!` is deprecated, use `popfirst!` instead.
│   caller = writedata(::FortranFile{SequentialAccess{FortranFiles.WithSubrecords},FortranFiles.Conversion{typeof(identity),typeof(identity)}}, ::Array{Any,1}) at jwrite.jl:38
└ @ Main jwrite.jl:38
┌ Warning: Calling `write` on non-isbits arrays is deprecated. Use a loop or `serialize` instead.
│   caller = write_var at write.jl:67 [inlined]
└ @ Core write.jl:67
┌ Warning: `shift!` is deprecated, use `popfirst!` instead.
│   caller = writedata(::FortranFile{SequentialAccess{FortranFiles.WithSubrecords},FortranFiles.Conversion{typeof(identity),typeof(identity)}}, ::Array{Any,1}) at jwrite.jl:41
└ @ Main jwrite.jl:41
┌ Warning: `shift!` is deprecated, use `popfirst!` instead.
│   caller = writedata(::FortranFile{SequentialAccess{FortranFiles.WithSubrecords},FortranFiles.Conversion{typeof(identity),typeof(identity)}}, ::Array{Any,1}) at jwrite.jl:44
└ @ Main jwrite.jl:44
┌ Warning: Calling `write` on non-isbits arrays is deprecated. Use a loop or `serialize` instead.
│   caller = write_var at write.jl:67 [inlined]
└ @ Core write.jl:67
  2.276278 seconds (1.44 M allocations: 82.255 MiB, 1.14% gc time)
Test Summary:                                                                   | Pass  Total
Testing records with markers of 4-byte with short subrecords, native byte order |  126    126
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = readdata(::FortranFile{SequentialAccess{FortranFiles.WithSubrecords},FortranFiles.Conversion{typeof(ltoh),typeof(htol)}}) at jread.jl:3
└ @ Main jread.jl:3
┌ Warning: `Array{T}(m::Integer, n::Integer, o::Integer) where T` is deprecated, use `Array{T}(undef, m, n, o)` instead.
│   caller = read_spec(::FortranFiles.RecordWithSubrecords{FortranFiles.Conversion{typeof(ltoh),typeof(htol)}}, ::Tuple{DataType,Int64,Int32,Int32}) at read.jl:82
└ @ FortranFiles read.jl:82
┌ Warning: `Array{T}(m::Integer) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = read_spec(::FortranFiles.RecordWithSubrecords{FortranFiles.Conversion{typeof(ltoh),typeof(htol)}}, ::Tuple{DataType,Int16}) at read.jl:76
└ @ FortranFiles read.jl:76
┌ Warning: `Array{T}(m::Integer, n::Integer) where T` is deprecated, use `Array{T}(undef, m, n)` instead.
│   caller = read_spec(::FortranFiles.RecordWithSubrecords{FortranFiles.Conversion{typeof(ltoh),typeof(htol)}}, ::Tuple{DataType,Tuple{Int32,Int64}}) at read.jl:87
└ @ FortranFiles read.jl:87
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = readdata(::FortranFile{SequentialAccess{FortranFiles.WithSubrecords},FortranFiles.Conversion{typeof(ltoh),typeof(htol)}}) at jread.jl:13
└ @ Main jread.jl:13
┌ Warning: `Array{T}(m::Integer, n::Integer, o::Integer) where T` is deprecated, use `Array{T}(undef, m, n, o)` instead.
│   caller = read_spec(::FortranFiles.RecordWithSubrecords{FortranFiles.Conversion{typeof(ltoh),typeof(htol)}}, ::Tuple{DataType,Int16,Int64,Int64}) at read.jl:82
└ @ FortranFiles read.jl:82
┌ Warning: `read(s::IO, t::Type, d1::Int, dims::Int...)` is deprecated, use `read!(s, Array{t}(undef, d1, dims...))` instead.
│   caller = read at string.jl:48 [inlined]
└ @ Core string.jl:48
┌ Warning: `Array{T}(m::Integer, n::Integer, o::Integer) where T` is deprecated, use `Array{T}(undef, m, n, o)` instead.
│   caller = read_spec(::FortranFiles.RecordWithSubrecords{FortranFiles.Conversion{typeof(ltoh),typeof(htol)}}, ::Tuple{DataType,Int64,Int32,Int16}) at read.jl:82
└ @ FortranFiles read.jl:82
┌ Warning: `read(s::IO, t::Type, d1::Int, dims::Int...)` is deprecated, use `read!(s, Array{t}(undef, d1, dims...))` instead.
│   caller = read at string.jl:48 [inlined]
└ @ Core string.jl:48
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = read_spec(::FortranFiles.RecordWithSubrecords{FortranFiles.Conversion{typeof(ltoh),typeof(htol)}}, ::Tuple{DataType,Int64}) at read.jl:76
└ @ FortranFiles read.jl:76
┌ Warning: `Array{T}(m::Integer, n::Integer, o::Integer) where T` is deprecated, use `Array{T}(undef, m, n, o)` instead.
│   caller = read_spec(::FortranFiles.RecordWithSubrecords{FortranFiles.Conversion{typeof(ltoh),typeof(htol)}}, ::Tuple{DataType,Int64,Int16,Int32}) at read.jl:82
└ @ FortranFiles read.jl:82
┌ Warning: `Array{T}(m::Integer, n::Integer, o::Integer) where T` is deprecated, use `Array{T}(undef, m, n, o)` instead.
│   caller = read_spec(::FortranFiles.RecordWithSubrecords{FortranFiles.Conversion{typeof(ltoh),typeof(htol)}}, ::Tuple{DataType,Int64,Int16,Int16}) at read.jl:82
└ @ FortranFiles read.jl:82
┌ Warning: `Array{T}(m::Integer, n::Integer) where T` is deprecated, use `Array{T}(undef, m, n)` instead.
│   caller = read_spec(::FortranFiles.RecordWithSubrecords{FortranFiles.Conversion{typeof(ltoh),typeof(htol)}}, ::Tuple{DataType,Tuple{Int32,Int32}}) at read.jl:87
└ @ FortranFiles read.jl:87
┌ Warning: `Array{T}(m::Integer, n::Integer, o::Integer) where T` is deprecated, use `Array{T}(undef, m, n, o)` instead.
│   caller = read_spec(::FortranFiles.RecordWithSubrecords{FortranFiles.Conversion{typeof(ltoh),typeof(htol)}}, ::Tuple{DataType,Tuple{Int64,Int64,Int32}}) at read.jl:87
└ @ FortranFiles read.jl:87
┌ Warning: `Array{T}(m::Int, n::Int) where T` is deprecated, use `Array{T}(undef, m, n)` instead.
│   caller = readdata(::FortranFile{SequentialAccess{FortranFiles.WithSubrecords},FortranFiles.Conversion{typeof(ltoh),typeof(htol)}}) at jread.jl:53
└ @ Main jread.jl:53
┌ Warning: `Array{T}(m::Int, n::Int) where T` is deprecated, use `Array{T}(undef, m, n)` instead.
│   caller = readdata(::FortranFile{SequentialAccess{FortranFiles.WithSubrecords},FortranFiles.Conversion{typeof(ltoh),typeof(htol)}}) at jread.jl:53
└ @ Main jread.jl:53
┌ Warning: `Array{T}(m::Integer, n::Integer) where T` is deprecated, use `Array{T}(undef, m, n)` instead.
│   caller = read_spec(::FortranFiles.RecordWithSubrecords{FortranFiles.Conversion{typeof(ltoh),typeof(htol)}}, ::Tuple{DataType,Int16,Int32}) at read.jl:82
└ @ FortranFiles read.jl:82
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = readdata(::FortranFile{SequentialAccess{FortranFiles.WithSubrecords},FortranFiles.Conversion{typeof(ltoh),typeof(htol)}}) at jread.jl:61
└ @ Main jread.jl:61
┌ Warning: `read(s::IO, t::Type, d1::Int, dims::Int...)` is deprecated, use `read!(s, Array{t}(undef, d1, dims...))` instead.
│   caller = read at string.jl:48 [inlined]
└ @ Core string.jl:48
┌ Warning: `Array{T}(m::Int, n::Int, o::Int) where T` is deprecated, use `Array{T}(undef, m, n, o)` instead.
│   caller = readdata(::FortranFile{SequentialAccess{FortranFiles.WithSubrecords},FortranFiles.Conversion{typeof(ltoh),typeof(htol)}}) at jread.jl:69
└ @ Main jread.jl:69
┌ Warning: `Array{T}(m::Integer, n::Integer, o::Integer) where T` is deprecated, use `Array{T}(undef, m, n, o)` instead.
│   caller = read_spec(::FortranFiles.RecordWithSubrecords{FortranFiles.Conversion{typeof(ltoh),typeof(htol)}}, ::Tuple{DataType,Tuple{Int64,Int64,Int16}}) at read.jl:87
└ @ FortranFiles read.jl:87
┌ Warning: `read(s::IO, t::Type, d1::Int, dims::Int...)` is deprecated, use `read!(s, Array{t}(undef, d1, dims...))` instead.
│   caller = read at string.jl:48 [inlined]
└ @ Core string.jl:48
┌ Warning: `read(s::IO, t::Type, d1::Int, dims::Int...)` is deprecated, use `read!(s, Array{t}(undef, d1, dims...))` instead.
│   caller = read at string.jl:48 [inlined]
└ @ Core string.jl:48
┌ Warning: `Array{T}(m::Integer, n::Integer) where T` is deprecated, use `Array{T}(undef, m, n)` instead.
│   caller = read_spec(::FortranFiles.RecordWithSubrecords{FortranFiles.Conversion{typeof(ltoh),typeof(htol)}}, ::Tuple{DataType,Int32,Int32}) at read.jl:82
└ @ FortranFiles read.jl:82
┌ Warning: `Array{T}(m::Int, n::Int) where T` is deprecated, use `Array{T}(undef, m, n)` instead.
│   caller = readdata(::FortranFile{SequentialAccess{FortranFiles.WithSubrecords},FortranFiles.Conversion{typeof(ltoh),typeof(htol)}}) at jread.jl:91
└ @ Main jread.jl:91
┌ Warning: `Array{T}(m::Int, n::Int, o::Int) where T` is deprecated, use `Array{T}(undef, m, n, o)` instead.
│   caller = readdata(::FortranFile{SequentialAccess{FortranFiles.WithSubrecords},FortranFiles.Conversion{typeof(ltoh),typeof(htol)}}) at jread.jl:95
└ @ Main jread.jl:95
┌ Warning: `Array{T}(m::Int, n::Int) where T` is deprecated, use `Array{T}(undef, m, n)` instead.
│   caller = read_spec(::FortranFiles.RecordWithSubrecords{FortranFiles.Conversion{typeof(ltoh),typeof(htol)}}, ::Tuple{DataType,Tuple{Int64,Int64}}) at read.jl:87
└ @ FortranFiles read.jl:87
┌ Warning: `read(s::IO, t::Type, d1::Int, dims::Int...)` is deprecated, use `read!(s, Array{t}(undef, d1, dims...))` instead.
│   caller = read at string.jl:48 [inlined]
└ @ Core string.jl:48
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = readdata(::FortranFile{SequentialAccess{FortranFiles.WithSubrecords},FortranFiles.Conversion{typeof(ltoh),typeof(htol)}}) at jread.jl:103
└ @ Main jread.jl:103
┌ Warning: `read(s::IO, t::Type, d1::Int, dims::Int...)` is deprecated, use `read!(s, Array{t}(undef, d1, dims...))` instead.
│   caller = read at string.jl:48 [inlined]
└ @ Core string.jl:48
┌ Warning: `Array{T}(m::Int, n::Int) where T` is deprecated, use `Array{T}(undef, m, n)` instead.
│   caller = read_spec(::FortranFiles.RecordWithSubrecords{FortranFiles.Conversion{typeof(ltoh),typeof(htol)}}, ::Tuple{DataType,Int64,Int64}) at read.jl:82
└ @ FortranFiles read.jl:82
┌ Warning: `read(s::IO, t::Type, d1::Int, dims::Int...)` is deprecated, use `read!(s, Array{t}(undef, d1, dims...))` instead.
│   caller = read at string.jl:48 [inlined]
└ @ Core string.jl:48
  4.749080 seconds (2.87 M allocations: 275.654 MiB, 1.51% gc time)
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = skipdata(::FortranFile{SequentialAccess{FortranFiles.WithSubrecords},FortranFiles.Conversion{typeof(ltoh),typeof(htol)}}) at jskip.jl:3
└ @ Main jskip.jl:3
┌ Warning: `Array{T}(m::Int, n::Int, o::Int) where T` is deprecated, use `Array{T}(undef, m, n, o)` instead.
│   caller = read_spec(::FortranFiles.RecordWithSubrecords{FortranFiles.Conversion{typeof(ltoh),typeof(htol)}}, ::Tuple{DataType,Tuple{Int64,Int64,Int64}}) at read.jl:87
└ @ FortranFiles read.jl:87
┌ Warning: `Array{T}(m::Integer) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = read_spec(::FortranFiles.RecordWithSubrecords{FortranFiles.Conversion{typeof(ltoh),typeof(htol)}}, ::Tuple{DataType,Int32}) at read.jl:76
└ @ FortranFiles read.jl:76
┌ Warning: `Array{T}(m::Int, n::Int, o::Int) where T` is deprecated, use `Array{T}(undef, m, n, o)` instead.
│   caller = read_spec(::FortranFiles.RecordWithSubrecords{FortranFiles.Conversion{typeof(ltoh),typeof(htol)}}, ::Tuple{DataType,Int64,Int64,Int64}) at read.jl:82
└ @ FortranFiles read.jl:82
┌ Warning: `Array{T}(m::Int, n::Int) where T` is deprecated, use `Array{T}(undef, m, n)` instead.
│   caller = skipdata(::FortranFile{SequentialAccess{FortranFiles.WithSubrecords},FortranFiles.Conversion{typeof(ltoh),typeof(htol)}}) at jskip.jl:22
└ @ Main jskip.jl:22
┌ Warning: `Array{T}(m::Integer, n::Integer) where T` is deprecated, use `Array{T}(undef, m, n)` instead.
│   caller = read_spec(::FortranFiles.RecordWithSubrecords{FortranFiles.Conversion{typeof(ltoh),typeof(htol)}}, ::Tuple{DataType,Tuple{Int64,Int32}}) at read.jl:87
└ @ FortranFiles read.jl:87
┌ Warning: `Array{T}(m::Int, n::Int) where T` is deprecated, use `Array{T}(undef, m, n)` instead.
│   caller = skipdata(::FortranFile{SequentialAccess{FortranFiles.WithSubrecords},FortranFiles.Conversion{typeof(ltoh),typeof(htol)}}) at jskip.jl:34
└ @ Main jskip.jl:34
┌ Warning: `Array{T}(m::Integer, n::Integer, o::Integer) where T` is deprecated, use `Array{T}(undef, m, n, o)` instead.
│   caller = read_spec(::FortranFiles.RecordWithSubrecords{FortranFiles.Conversion{typeof(ltoh),typeof(htol)}}, ::Tuple{DataType,Int32,Int32,Int16}) at read.jl:82
└ @ FortranFiles read.jl:82
┌ Warning: `Array{T}(m::Int, n::Int, o::Int) where T` is deprecated, use `Array{T}(undef, m, n, o)` instead.
│   caller = skipdata(::FortranFile{SequentialAccess{FortranFiles.WithSubrecords},FortranFiles.Conversion{typeof(ltoh),typeof(htol)}}) at jskip.jl:46
└ @ Main jskip.jl:46
  1.575167 seconds (1.08 M allocations: 117.269 MiB, 1.61% gc time)
┌ Warning: `shift!` is deprecated, use `popfirst!` instead.
│   caller = writedata(::FortranFile{SequentialAccess{FortranFiles.WithSubrecords},FortranFiles.Conversion{typeof(ltoh),typeof(htol)}}, ::Array{Any,1}) at jwrite.jl:2
└ @ Main jwrite.jl:2
┌ Warning: `shift!` is deprecated, use `popfirst!` instead.
│   caller = writedata(::FortranFile{SequentialAccess{FortranFiles.WithSubrecords},FortranFiles.Conversion{typeof(ltoh),typeof(htol)}}, ::Array{Any,1}) at jwrite.jl:5
└ @ Main jwrite.jl:5
┌ Warning: `shift!` is deprecated, use `popfirst!` instead.
│   caller = writedata(::FortranFile{SequentialAccess{FortranFiles.WithSubrecords},FortranFiles.Conversion{typeof(ltoh),typeof(htol)}}, ::Array{Any,1}) at jwrite.jl:8
└ @ Main jwrite.jl:8
┌ Warning: `shift!` is deprecated, use `popfirst!` instead.
│   caller = writedata(::FortranFile{SequentialAccess{FortranFiles.WithSubrecords},FortranFiles.Conversion{typeof(ltoh),typeof(htol)}}, ::Array{Any,1}) at jwrite.jl:11
└ @ Main jwrite.jl:11
┌ Warning: `shift!` is deprecated, use `popfirst!` instead.
│   caller = writedata(::FortranFile{SequentialAccess{FortranFiles.WithSubrecords},FortranFiles.Conversion{typeof(ltoh),typeof(htol)}}, ::Array{Any,1}) at jwrite.jl:14
└ @ Main jwrite.jl:14
┌ Warning: `shift!` is deprecated, use `popfirst!` instead.
│   caller = writedata(::FortranFile{SequentialAccess{FortranFiles.WithSubrecords},FortranFiles.Conversion{typeof(ltoh),typeof(htol)}}, ::Array{Any,1}) at jwrite.jl:17
└ @ Main jwrite.jl:17
┌ Warning: `shift!` is deprecated, use `popfirst!` instead.
│   caller = writedata(::FortranFile{SequentialAccess{FortranFiles.WithSubrecords},FortranFiles.Conversion{typeof(ltoh),typeof(htol)}}, ::Array{Any,1}) at jwrite.jl:20
└ @ Main jwrite.jl:20
┌ Warning: `shift!` is deprecated, use `popfirst!` instead.
│   caller = writedata(::FortranFile{SequentialAccess{FortranFiles.WithSubrecords},FortranFiles.Conversion{typeof(ltoh),typeof(htol)}}, ::Array{Any,1}) at jwrite.jl:23
└ @ Main jwrite.jl:23
┌ Warning: `shift!` is deprecated, use `popfirst!` instead.
│   caller = writedata(::FortranFile{SequentialAccess{FortranFiles.WithSubrecords},FortranFiles.Conversion{typeof(ltoh),typeof(htol)}}, ::Array{Any,1}) at jwrite.jl:26
└ @ Main jwrite.jl:26
┌ Warning: `shift!` is deprecated, use `popfirst!` instead.
│   caller = writedata(::FortranFile{SequentialAccess{FortranFiles.WithSubrecords},FortranFiles.Conversion{typeof(ltoh),typeof(htol)}}, ::Array{Any,1}) at jwrite.jl:29
└ @ Main jwrite.jl:29
┌ Warning: `shift!` is deprecated, use `popfirst!` instead.
│   caller = writedata(::FortranFile{SequentialAccess{FortranFiles.WithSubrecords},FortranFiles.Conversion{typeof(ltoh),typeof(htol)}}, ::Array{Any,1}) at jwrite.jl:32
└ @ Main jwrite.jl:32
┌ Warning: `shift!` is deprecated, use `popfirst!` instead.
│   caller = writedata(::FortranFile{SequentialAccess{FortranFiles.WithSubrecords},FortranFiles.Conversion{typeof(ltoh),typeof(htol)}}, ::Array{Any,1}) at jwrite.jl:35
└ @ Main jwrite.jl:35
┌ Warning: `shift!` is deprecated, use `popfirst!` instead.
│   caller = writedata(::FortranFile{SequentialAccess{FortranFiles.WithSubrecords},FortranFiles.Conversion{typeof(ltoh),typeof(htol)}}, ::Array{Any,1}) at jwrite.jl:38
└ @ Main jwrite.jl:38
┌ Warning: `shift!` is deprecated, use `popfirst!` instead.
│   caller = writedata(::FortranFile{SequentialAccess{FortranFiles.WithSubrecords},FortranFiles.Conversion{typeof(ltoh),typeof(htol)}}, ::Array{Any,1}) at jwrite.jl:41
└ @ Main jwrite.jl:41
┌ Warning: `shift!` is deprecated, use `popfirst!` instead.
│   caller = writedata(::FortranFile{SequentialAccess{FortranFiles.WithSubrecords},FortranFiles.Conversion{typeof(ltoh),typeof(htol)}}, ::Array{Any,1}) at jwrite.jl:44
└ @ Main jwrite.jl:44
  1.464282 seconds (1.20 M allocations: 58.432 MiB, 1.33% gc time)
Test Summary:                                                                          | Pass  Total
Testing records with markers of 4-byte with short subrecords, little-endian byte order |  126    126
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = readdata(::FortranFile{SequentialAccess{FortranFiles.WithSubrecords},FortranFiles.Conversion{typeof(ntoh),typeof(hton)}}) at jread.jl:3
└ @ Main jread.jl:3
┌ Warning: `Array{T}(m::Integer, n::Integer, o::Integer) where T` is deprecated, use `Array{T}(undef, m, n, o)` instead.
│   caller = read_spec(::FortranFiles.RecordWithSubrecords{FortranFiles.Conversion{typeof(ntoh),typeof(hton)}}, ::Tuple{DataType,Int64,Int32,Int32}) at read.jl:82
└ @ FortranFiles read.jl:82
┌ Warning: `Array{T}(m::Integer) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = read_spec(::FortranFiles.RecordWithSubrecords{FortranFiles.Conversion{typeof(ntoh),typeof(hton)}}, ::Tuple{DataType,Int16}) at read.jl:76
└ @ FortranFiles read.jl:76
┌ Warning: `Array{T}(m::Integer, n::Integer) where T` is deprecated, use `Array{T}(undef, m, n)` instead.
│   caller = read_spec(::FortranFiles.RecordWithSubrecords{FortranFiles.Conversion{typeof(ntoh),typeof(hton)}}, ::Tuple{DataType,Tuple{Int32,Int64}}) at read.jl:87
└ @ FortranFiles read.jl:87
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = readdata(::FortranFile{SequentialAccess{FortranFiles.WithSubrecords},FortranFiles.Conversion{typeof(ntoh),typeof(hton)}}) at jread.jl:13
└ @ Main jread.jl:13
┌ Warning: `Array{T}(m::Integer, n::Integer, o::Integer) where T` is deprecated, use `Array{T}(undef, m, n, o)` instead.
│   caller = read_spec(::FortranFiles.RecordWithSubrecords{FortranFiles.Conversion{typeof(ntoh),typeof(hton)}}, ::Tuple{DataType,Int16,Int64,Int64}) at read.jl:82
└ @ FortranFiles read.jl:82
┌ Warning: `read(s::IO, t::Type, d1::Int, dims::Int...)` is deprecated, use `read!(s, Array{t}(undef, d1, dims...))` instead.
│   caller = read at string.jl:48 [inlined]
└ @ Core string.jl:48
┌ Warning: `Array{T}(m::Integer, n::Integer, o::Integer) where T` is deprecated, use `Array{T}(undef, m, n, o)` instead.
│   caller = read_spec(::FortranFiles.RecordWithSubrecords{FortranFiles.Conversion{typeof(ntoh),typeof(hton)}}, ::Tuple{DataType,Int64,Int32,Int16}) at read.jl:82
└ @ FortranFiles read.jl:82
┌ Warning: `read(s::IO, t::Type, d1::Int, dims::Int...)` is deprecated, use `read!(s, Array{t}(undef, d1, dims...))` instead.
│   caller = read at string.jl:48 [inlined]
└ @ Core string.jl:48
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = read_spec(::FortranFiles.RecordWithSubrecords{FortranFiles.Conversion{typeof(ntoh),typeof(hton)}}, ::Tuple{DataType,Int64}) at read.jl:76
└ @ FortranFiles read.jl:76
┌ Warning: `Array{T}(m::Integer, n::Integer, o::Integer) where T` is deprecated, use `Array{T}(undef, m, n, o)` instead.
│   caller = read_spec(::FortranFiles.RecordWithSubrecords{FortranFiles.Conversion{typeof(ntoh),typeof(hton)}}, ::Tuple{DataType,Int64,Int16,Int32}) at read.jl:82
└ @ FortranFiles read.jl:82
┌ Warning: `Array{T}(m::Integer, n::Integer, o::Integer) where T` is deprecated, use `Array{T}(undef, m, n, o)` instead.
│   caller = read_spec(::FortranFiles.RecordWithSubrecords{FortranFiles.Conversion{typeof(ntoh),typeof(hton)}}, ::Tuple{DataType,Int64,Int16,Int16}) at read.jl:82
└ @ FortranFiles read.jl:82
┌ Warning: `Array{T}(m::Integer, n::Integer) where T` is deprecated, use `Array{T}(undef, m, n)` instead.
│   caller = read_spec(::FortranFiles.RecordWithSubrecords{FortranFiles.Conversion{typeof(ntoh),typeof(hton)}}, ::Tuple{DataType,Tuple{Int32,Int32}}) at read.jl:87
└ @ FortranFiles read.jl:87
┌ Warning: `Array{T}(m::Integer, n::Integer, o::Integer) where T` is deprecated, use `Array{T}(undef, m, n, o)` instead.
│   caller = read_spec(::FortranFiles.RecordWithSubrecords{FortranFiles.Conversion{typeof(ntoh),typeof(hton)}}, ::Tuple{DataType,Tuple{Int64,Int64,Int32}}) at read.jl:87
└ @ FortranFiles read.jl:87
┌ Warning: `Array{T}(m::Int, n::Int) where T` is deprecated, use `Array{T}(undef, m, n)` instead.
│   caller = readdata(::FortranFile{SequentialAccess{FortranFiles.WithSubrecords},FortranFiles.Conversion{typeof(ntoh),typeof(hton)}}) at jread.jl:53
└ @ Main jread.jl:53
┌ Warning: `Array{T}(m::Int, n::Int) where T` is deprecated, use `Array{T}(undef, m, n)` instead.
│   caller = readdata(::FortranFile{SequentialAccess{FortranFiles.WithSubrecords},FortranFiles.Conversion{typeof(ntoh),typeof(hton)}}) at jread.jl:53
└ @ Main jread.jl:53
┌ Warning: `Array{T}(m::Integer, n::Integer) where T` is deprecated, use `Array{T}(undef, m, n)` instead.
│   caller = read_spec(::FortranFiles.RecordWithSubrecords{FortranFiles.Conversion{typeof(ntoh),typeof(hton)}}, ::Tuple{DataType,Int16,Int32}) at read.jl:82
└ @ FortranFiles read.jl:82
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = readdata(::FortranFile{SequentialAccess{FortranFiles.WithSubrecords},FortranFiles.Conversion{typeof(ntoh),typeof(hton)}}) at jread.jl:61
└ @ Main jread.jl:61
┌ Warning: `read(s::IO, t::Type, d1::Int, dims::Int...)` is deprecated, use `read!(s, Array{t}(undef, d1, dims...))` instead.
│   caller = read at string.jl:48 [inlined]
└ @ Core string.jl:48
┌ Warning: `Array{T}(m::Int, n::Int, o::Int) where T` is deprecated, use `Array{T}(undef, m, n, o)` instead.
│   caller = readdata(::FortranFile{SequentialAccess{FortranFiles.WithSubrecords},FortranFiles.Conversion{typeof(ntoh),typeof(hton)}}) at jread.jl:69
└ @ Main jread.jl:69
┌ Warning: `Array{T}(m::Integer, n::Integer, o::Integer) where T` is deprecated, use `Array{T}(undef, m, n, o)` instead.
│   caller = read_spec(::FortranFiles.RecordWithSubrecords{FortranFiles.Conversion{typeof(ntoh),typeof(hton)}}, ::Tuple{DataType,Tuple{Int64,Int64,Int16}}) at read.jl:87
└ @ FortranFiles read.jl:87
┌ Warning: `read(s::IO, t::Type, d1::Int, dims::Int...)` is deprecated, use `read!(s, Array{t}(undef, d1, dims...))` instead.
│   caller = read at string.jl:48 [inlined]
└ @ Core string.jl:48
┌ Warning: `read(s::IO, t::Type, d1::Int, dims::Int...)` is deprecated, use `read!(s, Array{t}(undef, d1, dims...))` instead.
│   caller = read at string.jl:48 [inlined]
└ @ Core string.jl:48
┌ Warning: `Array{T}(m::Integer, n::Integer) where T` is deprecated, use `Array{T}(undef, m, n)` instead.
│   caller = read_spec(::FortranFiles.RecordWithSubrecords{FortranFiles.Conversion{typeof(ntoh),typeof(hton)}}, ::Tuple{DataType,Int32,Int32}) at read.jl:82
└ @ FortranFiles read.jl:82
┌ Warning: `Array{T}(m::Int, n::Int) where T` is deprecated, use `Array{T}(undef, m, n)` instead.
│   caller = readdata(::FortranFile{SequentialAccess{FortranFiles.WithSubrecords},FortranFiles.Conversion{typeof(ntoh),typeof(hton)}}) at jread.jl:91
└ @ Main jread.jl:91
┌ Warning: `Array{T}(m::Int, n::Int, o::Int) where T` is deprecated, use `Array{T}(undef, m, n, o)` instead.
│   caller = readdata(::FortranFile{SequentialAccess{FortranFiles.WithSubrecords},FortranFiles.Conversion{typeof(ntoh),typeof(hton)}}) at jread.jl:95
└ @ Main jread.jl:95
┌ Warning: `Array{T}(m::Int, n::Int) where T` is deprecated, use `Array{T}(undef, m, n)` instead.
│   caller = read_spec(::FortranFiles.RecordWithSubrecords{FortranFiles.Conversion{typeof(ntoh),typeof(hton)}}, ::Tuple{DataType,Tuple{Int64,Int64}}) at read.jl:87
└ @ FortranFiles read.jl:87
┌ Warning: `read(s::IO, t::Type, d1::Int, dims::Int...)` is deprecated, use `read!(s, Array{t}(undef, d1, dims...))` instead.
│   caller = read at string.jl:48 [inlined]
└ @ Core string.jl:48
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = readdata(::FortranFile{SequentialAccess{FortranFiles.WithSubrecords},FortranFiles.Conversion{typeof(ntoh),typeof(hton)}}) at jread.jl:103
└ @ Main jread.jl:103
┌ Warning: `read(s::IO, t::Type, d1::Int, dims::Int...)` is deprecated, use `read!(s, Array{t}(undef, d1, dims...))` instead.
│   caller = read at string.jl:48 [inlined]
└ @ Core string.jl:48
┌ Warning: `Array{T}(m::Int, n::Int) where T` is deprecated, use `Array{T}(undef, m, n)` instead.
│   caller = read_spec(::FortranFiles.RecordWithSubrecords{FortranFiles.Conversion{typeof(ntoh),typeof(hton)}}, ::Tuple{DataType,Int64,Int64}) at read.jl:82
└ @ FortranFiles read.jl:82
┌ Warning: `read(s::IO, t::Type, d1::Int, dims::Int...)` is deprecated, use `read!(s, Array{t}(undef, d1, dims...))` instead.
│   caller = read at string.jl:48 [inlined]
└ @ Core string.jl:48
  5.624925 seconds (2.87 M allocations: 275.934 MiB, 1.41% gc time)
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = skipdata(::FortranFile{SequentialAccess{FortranFiles.WithSubrecords},FortranFiles.Conversion{typeof(ntoh),typeof(hton)}}) at jskip.jl:3
└ @ Main jskip.jl:3
┌ Warning: `Array{T}(m::Int, n::Int, o::Int) where T` is deprecated, use `Array{T}(undef, m, n, o)` instead.
│   caller = read_spec(::FortranFiles.RecordWithSubrecords{FortranFiles.Conversion{typeof(ntoh),typeof(hton)}}, ::Tuple{DataType,Tuple{Int64,Int64,Int64}}) at read.jl:87
└ @ FortranFiles read.jl:87
┌ Warning: `Array{T}(m::Integer) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = read_spec(::FortranFiles.RecordWithSubrecords{FortranFiles.Conversion{typeof(ntoh),typeof(hton)}}, ::Tuple{DataType,Int32}) at read.jl:76
└ @ FortranFiles read.jl:76
┌ Warning: `Array{T}(m::Int, n::Int, o::Int) where T` is deprecated, use `Array{T}(undef, m, n, o)` instead.
│   caller = read_spec(::FortranFiles.RecordWithSubrecords{FortranFiles.Conversion{typeof(ntoh),typeof(hton)}}, ::Tuple{DataType,Int64,Int64,Int64}) at read.jl:82
└ @ FortranFiles read.jl:82
┌ Warning: `Array{T}(m::Int, n::Int) where T` is deprecated, use `Array{T}(undef, m, n)` instead.
│   caller = skipdata(::FortranFile{SequentialAccess{FortranFiles.WithSubrecords},FortranFiles.Conversion{typeof(ntoh),typeof(hton)}}) at jskip.jl:22
└ @ Main jskip.jl:22
┌ Warning: `Array{T}(m::Integer, n::Integer) where T` is deprecated, use `Array{T}(undef, m, n)` instead.
│   caller = read_spec(::FortranFiles.RecordWithSubrecords{FortranFiles.Conversion{typeof(ntoh),typeof(hton)}}, ::Tuple{DataType,Tuple{Int64,Int32}}) at read.jl:87
└ @ FortranFiles read.jl:87
┌ Warning: `Array{T}(m::Int, n::Int) where T` is deprecated, use `Array{T}(undef, m, n)` instead.
│   caller = skipdata(::FortranFile{SequentialAccess{FortranFiles.WithSubrecords},FortranFiles.Conversion{typeof(ntoh),typeof(hton)}}) at jskip.jl:34
└ @ Main jskip.jl:34
┌ Warning: `Array{T}(m::Integer, n::Integer, o::Integer) where T` is deprecated, use `Array{T}(undef, m, n, o)` instead.
│   caller = read_spec(::FortranFiles.RecordWithSubrecords{FortranFiles.Conversion{typeof(ntoh),typeof(hton)}}, ::Tuple{DataType,Int32,Int32,Int16}) at read.jl:82
└ @ FortranFiles read.jl:82
┌ Warning: `Array{T}(m::Int, n::Int, o::Int) where T` is deprecated, use `Array{T}(undef, m, n, o)` instead.
│   caller = skipdata(::FortranFile{SequentialAccess{FortranFiles.WithSubrecords},FortranFiles.Conversion{typeof(ntoh),typeof(hton)}}) at jskip.jl:46
└ @ Main jskip.jl:46
  2.032623 seconds (1.08 M allocations: 117.282 MiB, 1.80% gc time)
┌ Warning: `shift!` is deprecated, use `popfirst!` instead.
│   caller = writedata(::FortranFile{SequentialAccess{FortranFiles.WithSubrecords},FortranFiles.Conversion{typeof(ntoh),typeof(hton)}}, ::Array{Any,1}) at jwrite.jl:2
└ @ Main jwrite.jl:2
┌ Warning: `shift!` is deprecated, use `popfirst!` instead.
│   caller = writedata(::FortranFile{SequentialAccess{FortranFiles.WithSubrecords},FortranFiles.Conversion{typeof(ntoh),typeof(hton)}}, ::Array{Any,1}) at jwrite.jl:5
└ @ Main jwrite.jl:5
┌ Warning: `shift!` is deprecated, use `popfirst!` instead.
│   caller = writedata(::FortranFile{SequentialAccess{FortranFiles.WithSubrecords},FortranFiles.Conversion{typeof(ntoh),typeof(hton)}}, ::Array{Any,1}) at jwrite.jl:8
└ @ Main jwrite.jl:8
┌ Warning: `shift!` is deprecated, use `popfirst!` instead.
│   caller = writedata(::FortranFile{SequentialAccess{FortranFiles.WithSubrecords},FortranFiles.Conversion{typeof(ntoh),typeof(hton)}}, ::Array{Any,1}) at jwrite.jl:11
└ @ Main jwrite.jl:11
┌ Warning: `shift!` is deprecated, use `popfirst!` instead.
│   caller = writedata(::FortranFile{SequentialAccess{FortranFiles.WithSubrecords},FortranFiles.Conversion{typeof(ntoh),typeof(hton)}}, ::Array{Any,1}) at jwrite.jl:14
└ @ Main jwrite.jl:14
┌ Warning: `shift!` is deprecated, use `popfirst!` instead.
│   caller = writedata(::FortranFile{SequentialAccess{FortranFiles.WithSubrecords},FortranFiles.Conversion{typeof(ntoh),typeof(hton)}}, ::Array{Any,1}) at jwrite.jl:17
└ @ Main jwrite.jl:17
┌ Warning: `shift!` is deprecated, use `popfirst!` instead.
│   caller = writedata(::FortranFile{SequentialAccess{FortranFiles.WithSubrecords},FortranFiles.Conversion{typeof(ntoh),typeof(hton)}}, ::Array{Any,1}) at jwrite.jl:20
└ @ Main jwrite.jl:20
┌ Warning: `shift!` is deprecated, use `popfirst!` instead.
│   caller = writedata(::FortranFile{SequentialAccess{FortranFiles.WithSubrecords},FortranFiles.Conversion{typeof(ntoh),typeof(hton)}}, ::Array{Any,1}) at jwrite.jl:23
└ @ Main jwrite.jl:23
┌ Warning: `shift!` is deprecated, use `popfirst!` instead.
│   caller = writedata(::FortranFile{SequentialAccess{FortranFiles.WithSubrecords},FortranFiles.Conversion{typeof(ntoh),typeof(hton)}}, ::Array{Any,1}) at jwrite.jl:26
└ @ Main jwrite.jl:26
┌ Warning: `shift!` is deprecated, use `popfirst!` instead.
│   caller = writedata(::FortranFile{SequentialAccess{FortranFiles.WithSubrecords},FortranFiles.Conversion{typeof(ntoh),typeof(hton)}}, ::Array{Any,1}) at jwrite.jl:29
└ @ Main jwrite.jl:29
┌ Warning: `shift!` is deprecated, use `popfirst!` instead.
│   caller = writedata(::FortranFile{SequentialAccess{FortranFiles.WithSubrecords},FortranFiles.Conversion{typeof(ntoh),typeof(hton)}}, ::Array{Any,1}) at jwrite.jl:32
└ @ Main jwrite.jl:32
┌ Warning: `shift!` is deprecated, use `popfirst!` instead.
│   caller = writedata(::FortranFile{SequentialAccess{FortranFiles.WithSubrecords},FortranFiles.Conversion{typeof(ntoh),typeof(hton)}}, ::Array{Any,1}) at jwrite.jl:35
└ @ Main jwrite.jl:35
┌ Warning: `shift!` is deprecated, use `popfirst!` instead.
│   caller = writedata(::FortranFile{SequentialAccess{FortranFiles.WithSubrecords},FortranFiles.Conversion{typeof(ntoh),typeof(hton)}}, ::Array{Any,1}) at jwrite.jl:38
└ @ Main jwrite.jl:38
┌ Warning: `shift!` is deprecated, use `popfirst!` instead.
│   caller = writedata(::FortranFile{SequentialAccess{FortranFiles.WithSubrecords},FortranFiles.Conversion{typeof(ntoh),typeof(hton)}}, ::Array{Any,1}) at jwrite.jl:41
└ @ Main jwrite.jl:41
┌ Warning: `shift!` is deprecated, use `popfirst!` instead.
│   caller = writedata(::FortranFile{SequentialAccess{FortranFiles.WithSubrecords},FortranFiles.Conversion{typeof(ntoh),typeof(hton)}}, ::Array{Any,1}) at jwrite.jl:44
└ @ Main jwrite.jl:44
  2.376942 seconds (1.19 M allocations: 57.739 MiB, 0.88% gc time)
Test Summary:                                                                       | Pass  Total
Testing records with markers of 4-byte with short subrecords, big-endian byte order |  126    126
  2.907948 seconds (1.78 M allocations: 213.790 MiB, 3.74% gc time)
  1.775989 seconds (858.73 k allocations: 104.878 MiB, 1.29% gc time)
  0.029290 seconds (37.96 k allocations: 828.438 KiB)
Test Summary:                                                                     | Pass  Total
Testing records with markers of 4-byte with default subrecords, native byte order |  126    126
  3.813336 seconds (1.78 M allocations: 213.789 MiB, 1.37% gc time)
  1.997634 seconds (858.73 k allocations: 104.878 MiB, 1.05% gc time)
  0.027566 seconds (276.71 k allocations: 4.392 MiB, 15.31% gc time)
Test Summary:                                                                            | Pass  Total
Testing records with markers of 4-byte with default subrecords, little-endian byte order |  126    126
  3.687859 seconds (1.78 M allocations: 213.790 MiB, 3.43% gc time)
  1.846540 seconds (858.74 k allocations: 104.878 MiB, 1.27% gc time)
  0.034688 seconds (276.71 k allocations: 4.392 MiB)
Test Summary:                                                                         | Pass  Total
Testing records with markers of 4-byte with default subrecords, big-endian byte order |  126    126
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = readdata(::FortranFile{SequentialAccess{FortranFiles.WithoutSubrecords{Int64}},FortranFiles.Conversion{typeof(identity),typeof(identity)}}) at jread.jl:3
└ @ Main jread.jl:3
┌ Warning: `Array{T}(m::Integer, n::Integer, o::Integer) where T` is deprecated, use `Array{T}(undef, m, n, o)` instead.
│   caller = read_spec(::FortranFiles.RecordWithoutSubrecords{Int64,FortranFiles.Conversion{typeof(identity),typeof(identity)}}, ::Tuple{DataType,Int64,Int32,Int32}) at read.jl:82
└ @ FortranFiles read.jl:82
┌ Warning: `Array{T}(m::Integer) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = read_spec(::FortranFiles.RecordWithoutSubrecords{Int64,FortranFiles.Conversion{typeof(identity),typeof(identity)}}, ::Tuple{DataType,Int16}) at read.jl:76
└ @ FortranFiles read.jl:76
┌ Warning: `Array{T}(m::Integer, n::Integer) where T` is deprecated, use `Array{T}(undef, m, n)` instead.
│   caller = read_spec(::FortranFiles.RecordWithoutSubrecords{Int64,FortranFiles.Conversion{typeof(identity),typeof(identity)}}, ::Tuple{DataType,Tuple{Int32,Int64}}) at read.jl:87
└ @ FortranFiles read.jl:87
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = readdata(::FortranFile{SequentialAccess{FortranFiles.WithoutSubrecords{Int64}},FortranFiles.Conversion{typeof(identity),typeof(identity)}}) at jread.jl:13
└ @ Main jread.jl:13
┌ Warning: `Array{T}(m::Integer, n::Integer, o::Integer) where T` is deprecated, use `Array{T}(undef, m, n, o)` instead.
│   caller = read_spec(::FortranFiles.RecordWithoutSubrecords{Int64,FortranFiles.Conversion{typeof(identity),typeof(identity)}}, ::Tuple{DataType,Int16,Int64,Int64}) at read.jl:82
└ @ FortranFiles read.jl:82
┌ Warning: `read(s::IO, t::Type, d1::Int, dims::Int...)` is deprecated, use `read!(s, Array{t}(undef, d1, dims...))` instead.
│   caller = read at string.jl:48 [inlined]
└ @ Core string.jl:48
┌ Warning: `Array{T}(m::Integer, n::Integer, o::Integer) where T` is deprecated, use `Array{T}(undef, m, n, o)` instead.
│   caller = read_spec(::FortranFiles.RecordWithoutSubrecords{Int64,FortranFiles.Conversion{typeof(identity),typeof(identity)}}, ::Tuple{DataType,Int64,Int32,Int16}) at read.jl:82
└ @ FortranFiles read.jl:82
┌ Warning: `read(s::IO, t::Type, d1::Int, dims::Int...)` is deprecated, use `read!(s, Array{t}(undef, d1, dims...))` instead.
│   caller = read at string.jl:48 [inlined]
└ @ Core string.jl:48
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = read_spec(::FortranFiles.RecordWithoutSubrecords{Int64,FortranFiles.Conversion{typeof(identity),typeof(identity)}}, ::Tuple{DataType,Int64}) at read.jl:76
└ @ FortranFiles read.jl:76
┌ Warning: `Array{T}(m::Integer, n::Integer, o::Integer) where T` is deprecated, use `Array{T}(undef, m, n, o)` instead.
│   caller = read_spec(::FortranFiles.RecordWithoutSubrecords{Int64,FortranFiles.Conversion{typeof(identity),typeof(identity)}}, ::Tuple{DataType,Int64,Int16,Int32}) at read.jl:82
└ @ FortranFiles read.jl:82
┌ Warning: `Array{T}(m::Integer, n::Integer, o::Integer) where T` is deprecated, use `Array{T}(undef, m, n, o)` instead.
│   caller = read_spec(::FortranFiles.RecordWithoutSubrecords{Int64,FortranFiles.Conversion{typeof(identity),typeof(identity)}}, ::Tuple{DataType,Int64,Int16,Int16}) at read.jl:82
└ @ FortranFiles read.jl:82
┌ Warning: `Array{T}(m::Integer, n::Integer) where T` is deprecated, use `Array{T}(undef, m, n)` instead.
│   caller = read_spec(::FortranFiles.RecordWithoutSubrecords{Int64,FortranFiles.Conversion{typeof(identity),typeof(identity)}}, ::Tuple{DataType,Tuple{Int32,Int32}}) at read.jl:87
└ @ FortranFiles read.jl:87
┌ Warning: `Array{T}(m::Integer, n::Integer, o::Integer) where T` is deprecated, use `Array{T}(undef, m, n, o)` instead.
│   caller = read_spec(::FortranFiles.RecordWithoutSubrecords{Int64,FortranFiles.Conversion{typeof(identity),typeof(identity)}}, ::Tuple{DataType,Tuple{Int64,Int64,Int32}}) at read.jl:87
└ @ FortranFiles read.jl:87
┌ Warning: `Array{T}(m::Int, n::Int) where T` is deprecated, use `Array{T}(undef, m, n)` instead.
│   caller = readdata(::FortranFile{SequentialAccess{FortranFiles.WithoutSubrecords{Int64}},FortranFiles.Conversion{typeof(identity),typeof(identity)}}) at jread.jl:53
└ @ Main jread.jl:53
┌ Warning: `Array{T}(m::Int, n::Int) where T` is deprecated, use `Array{T}(undef, m, n)` instead.
│   caller = readdata(::FortranFile{SequentialAccess{FortranFiles.WithoutSubrecords{Int64}},FortranFiles.Conversion{typeof(identity),typeof(identity)}}) at jread.jl:53
└ @ Main jread.jl:53
┌ Warning: `Array{T}(m::Integer, n::Integer) where T` is deprecated, use `Array{T}(undef, m, n)` instead.
│   caller = read_spec(::FortranFiles.RecordWithoutSubrecords{Int64,FortranFiles.Conversion{typeof(identity),typeof(identity)}}, ::Tuple{DataType,Int16,Int32}) at read.jl:82
└ @ FortranFiles read.jl:82
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = readdata(::FortranFile{SequentialAccess{FortranFiles.WithoutSubrecords{Int64}},FortranFiles.Conversion{typeof(identity),typeof(identity)}}) at jread.jl:61
└ @ Main jread.jl:61
┌ Warning: `read(s::IO, t::Type, d1::Int, dims::Int...)` is deprecated, use `read!(s, Array{t}(undef, d1, dims...))` instead.
│   caller = read at string.jl:48 [inlined]
└ @ Core string.jl:48
┌ Warning: `Array{T}(m::Int, n::Int, o::Int) where T` is deprecated, use `Array{T}(undef, m, n, o)` instead.
│   caller = readdata(::FortranFile{SequentialAccess{FortranFiles.WithoutSubrecords{Int64}},FortranFiles.Conversion{typeof(identity),typeof(identity)}}) at jread.jl:69
└ @ Main jread.jl:69
┌ Warning: `Array{T}(m::Integer, n::Integer, o::Integer) where T` is deprecated, use `Array{T}(undef, m, n, o)` instead.
│   caller = read_spec(::FortranFiles.RecordWithoutSubrecords{Int64,FortranFiles.Conversion{typeof(identity),typeof(identity)}}, ::Tuple{DataType,Tuple{Int64,Int64,Int16}}) at read.jl:87
└ @ FortranFiles read.jl:87
┌ Warning: `read(s::IO, t::Type, d1::Int, dims::Int...)` is deprecated, use `read!(s, Array{t}(undef, d1, dims...))` instead.
│   caller = read at string.jl:48 [inlined]
└ @ Core string.jl:48
┌ Warning: `read(s::IO, t::Type, d1::Int, dims::Int...)` is deprecated, use `read!(s, Array{t}(undef, d1, dims...))` instead.
│   caller = read at string.jl:48 [inlined]
└ @ Core string.jl:48
┌ Warning: `Array{T}(m::Integer, n::Integer) where T` is deprecated, use `Array{T}(undef, m, n)` instead.
│   caller = read_spec(::FortranFiles.RecordWithoutSubrecords{Int64,FortranFiles.Conversion{typeof(identity),typeof(identity)}}, ::Tuple{DataType,Int32,Int32}) at read.jl:82
└ @ FortranFiles read.jl:82
┌ Warning: `Array{T}(m::Int, n::Int) where T` is deprecated, use `Array{T}(undef, m, n)` instead.
│   caller = readdata(::FortranFile{SequentialAccess{FortranFiles.WithoutSubrecords{Int64}},FortranFiles.Conversion{typeof(identity),typeof(identity)}}) at jread.jl:91
└ @ Main jread.jl:91
┌ Warning: `Array{T}(m::Int, n::Int, o::Int) where T` is deprecated, use `Array{T}(undef, m, n, o)` instead.
│   caller = readdata(::FortranFile{SequentialAccess{FortranFiles.WithoutSubrecords{Int64}},FortranFiles.Conversion{typeof(identity),typeof(identity)}}) at jread.jl:95
└ @ Main jread.jl:95
┌ Warning: `Array{T}(m::Int, n::Int) where T` is deprecated, use `Array{T}(undef, m, n)` instead.
│   caller = read_spec(::FortranFiles.RecordWithoutSubrecords{Int64,FortranFiles.Conversion{typeof(identity),typeof(identity)}}, ::Tuple{DataType,Tuple{Int64,Int64}}) at read.jl:87
└ @ FortranFiles read.jl:87
┌ Warning: `read(s::IO, t::Type, d1::Int, dims::Int...)` is deprecated, use `read!(s, Array{t}(undef, d1, dims...))` instead.
│   caller = read at string.jl:48 [inlined]
└ @ Core string.jl:48
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = readdata(::FortranFile{SequentialAccess{FortranFiles.WithoutSubrecords{Int64}},FortranFiles.Conversion{typeof(identity),typeof(identity)}}) at jread.jl:103
└ @ Main jread.jl:103
┌ Warning: `read(s::IO, t::Type, d1::Int, dims::Int...)` is deprecated, use `read!(s, Array{t}(undef, d1, dims...))` instead.
│   caller = read at string.jl:48 [inlined]
└ @ Core string.jl:48
┌ Warning: `Array{T}(m::Int, n::Int) where T` is deprecated, use `Array{T}(undef, m, n)` instead.
│   caller = read_spec(::FortranFiles.RecordWithoutSubrecords{Int64,FortranFiles.Conversion{typeof(identity),typeof(identity)}}, ::Tuple{DataType,Int64,Int64}) at read.jl:82
└ @ FortranFiles read.jl:82
┌ Warning: `read(s::IO, t::Type, d1::Int, dims::Int...)` is deprecated, use `read!(s, Array{t}(undef, d1, dims...))` instead.
│   caller = read at string.jl:48 [inlined]
└ @ Core string.jl:48
  5.595557 seconds (2.61 M allocations: 260.095 MiB, 1.36% gc time)
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = skipdata(::FortranFile{SequentialAccess{FortranFiles.WithoutSubrecords{Int64}},FortranFiles.Conversion{typeof(identity),typeof(identity)}}) at jskip.jl:3
└ @ Main jskip.jl:3
┌ Warning: `Array{T}(m::Int, n::Int, o::Int) where T` is deprecated, use `Array{T}(undef, m, n, o)` instead.
│   caller = read_spec(::FortranFiles.RecordWithoutSubrecords{Int64,FortranFiles.Conversion{typeof(identity),typeof(identity)}}, ::Tuple{DataType,Tuple{Int64,Int64,Int64}}) at read.jl:87
└ @ FortranFiles read.jl:87
┌ Warning: `Array{T}(m::Integer) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = read_spec(::FortranFiles.RecordWithoutSubrecords{Int64,FortranFiles.Conversion{typeof(identity),typeof(identity)}}, ::Tuple{DataType,Int32}) at read.jl:76
└ @ FortranFiles read.jl:76
┌ Warning: `Array{T}(m::Int, n::Int, o::Int) where T` is deprecated, use `Array{T}(undef, m, n, o)` instead.
│   caller = read_spec(::FortranFiles.RecordWithoutSubrecords{Int64,FortranFiles.Conversion{typeof(identity),typeof(identity)}}, ::Tuple{DataType,Int64,Int64,Int64}) at read.jl:82
└ @ FortranFiles read.jl:82
┌ Warning: `Array{T}(m::Int, n::Int) where T` is deprecated, use `Array{T}(undef, m, n)` instead.
│   caller = skipdata(::FortranFile{SequentialAccess{FortranFiles.WithoutSubrecords{Int64}},FortranFiles.Conversion{typeof(identity),typeof(identity)}}) at jskip.jl:22
└ @ Main jskip.jl:22
┌ Warning: `Array{T}(m::Integer, n::Integer) where T` is deprecated, use `Array{T}(undef, m, n)` instead.
│   caller = read_spec(::FortranFiles.RecordWithoutSubrecords{Int64,FortranFiles.Conversion{typeof(identity),typeof(identity)}}, ::Tuple{DataType,Tuple{Int64,Int32}}) at read.jl:87
└ @ FortranFiles read.jl:87
┌ Warning: `Array{T}(m::Int, n::Int) where T` is deprecated, use `Array{T}(undef, m, n)` instead.
│   caller = skipdata(::FortranFile{SequentialAccess{FortranFiles.WithoutSubrecords{Int64}},FortranFiles.Conversion{typeof(identity),typeof(identity)}}) at jskip.jl:34
└ @ Main jskip.jl:34
┌ Warning: `Array{T}(m::Integer, n::Integer, o::Integer) where T` is deprecated, use `Array{T}(undef, m, n, o)` instead.
│   caller = read_spec(::FortranFiles.RecordWithoutSubrecords{Int64,FortranFiles.Conversion{typeof(identity),typeof(identity)}}, ::Tuple{DataType,Int32,Int32,Int16}) at read.jl:82
└ @ FortranFiles read.jl:82
┌ Warning: `Array{T}(m::Int, n::Int, o::Int) where T` is deprecated, use `Array{T}(undef, m, n, o)` instead.
│   caller = skipdata(::FortranFile{SequentialAccess{FortranFiles.WithoutSubrecords{Int64}},FortranFiles.Conversion{typeof(identity),typeof(identity)}}) at jskip.jl:46
└ @ Main jskip.jl:46
  2.720152 seconds (1.08 M allocations: 117.289 MiB, 1.54% gc time)
┌ Warning: `shift!` is deprecated, use `popfirst!` instead.
│   caller = writedata(::FortranFile{SequentialAccess{FortranFiles.WithoutSubrecords{Int64}},FortranFiles.Conversion{typeof(identity),typeof(identity)}}, ::Array{Any,1}) at jwrite.jl:2
└ @ Main jwrite.jl:2
┌ Warning: `shift!` is deprecated, use `popfirst!` instead.
│   caller = writedata(::FortranFile{SequentialAccess{FortranFiles.WithoutSubrecords{Int64}},FortranFiles.Conversion{typeof(identity),typeof(identity)}}, ::Array{Any,1}) at jwrite.jl:5
└ @ Main jwrite.jl:5
┌ Warning: Calling `write` on non-isbits arrays is deprecated. Use a loop or `serialize` instead.
│   caller = write_var at write.jl:69 [inlined]
└ @ Core write.jl:69
┌ Warning: `shift!` is deprecated, use `popfirst!` instead.
│   caller = writedata(::FortranFile{SequentialAccess{FortranFiles.WithoutSubrecords{Int64}},FortranFiles.Conversion{typeof(identity),typeof(identity)}}, ::Array{Any,1}) at jwrite.jl:8
└ @ Main jwrite.jl:8
┌ Warning: Calling `write` on non-isbits arrays is deprecated. Use a loop or `serialize` instead.
│   caller = write_var at write.jl:69 [inlined]
└ @ Core write.jl:69
┌ Warning: `shift!` is deprecated, use `popfirst!` instead.
│   caller = writedata(::FortranFile{SequentialAccess{FortranFiles.WithoutSubrecords{Int64}},FortranFiles.Conversion{typeof(identity),typeof(identity)}}, ::Array{Any,1}) at jwrite.jl:11
└ @ Main jwrite.jl:11
┌ Warning: `shift!` is deprecated, use `popfirst!` instead.
│   caller = writedata(::FortranFile{SequentialAccess{FortranFiles.WithoutSubrecords{Int64}},FortranFiles.Conversion{typeof(identity),typeof(identity)}}, ::Array{Any,1}) at jwrite.jl:14
└ @ Main jwrite.jl:14
┌ Warning: `shift!` is deprecated, use `popfirst!` instead.
│   caller = writedata(::FortranFile{SequentialAccess{FortranFiles.WithoutSubrecords{Int64}},FortranFiles.Conversion{typeof(identity),typeof(identity)}}, ::Array{Any,1}) at jwrite.jl:17
└ @ Main jwrite.jl:17
┌ Warning: `shift!` is deprecated, use `popfirst!` instead.
│   caller = writedata(::FortranFile{SequentialAccess{FortranFiles.WithoutSubrecords{Int64}},FortranFiles.Conversion{typeof(identity),typeof(identity)}}, ::Array{Any,1}) at jwrite.jl:20
└ @ Main jwrite.jl:20
┌ Warning: `shift!` is deprecated, use `popfirst!` instead.
│   caller = writedata(::FortranFile{SequentialAccess{FortranFiles.WithoutSubrecords{Int64}},FortranFiles.Conversion{typeof(identity),typeof(identity)}}, ::Array{Any,1}) at jwrite.jl:23
└ @ Main jwrite.jl:23
┌ Warning: Calling `write` on non-isbits arrays is deprecated. Use a loop or `serialize` instead.
│   caller = write_var at write.jl:69 [inlined]
└ @ Core write.jl:69
┌ Warning: `shift!` is deprecated, use `popfirst!` instead.
│   caller = writedata(::FortranFile{SequentialAccess{FortranFiles.WithoutSubrecords{Int64}},FortranFiles.Conversion{typeof(identity),typeof(identity)}}, ::Array{Any,1}) at jwrite.jl:26
└ @ Main jwrite.jl:26
┌ Warning: Calling `write` on non-isbits arrays is deprecated. Use a loop or `serialize` instead.
│   caller = write_var at write.jl:69 [inlined]
└ @ Core write.jl:69
┌ Warning: `shift!` is deprecated, use `popfirst!` instead.
│   caller = writedata(::FortranFile{SequentialAccess{FortranFiles.WithoutSubrecords{Int64}},FortranFiles.Conversion{typeof(identity),typeof(identity)}}, ::Array{Any,1}) at jwrite.jl:29
└ @ Main jwrite.jl:29
┌ Warning: `shift!` is deprecated, use `popfirst!` instead.
│   caller = writedata(::FortranFile{SequentialAccess{FortranFiles.WithoutSubrecords{Int64}},FortranFiles.Conversion{typeof(identity),typeof(identity)}}, ::Array{Any,1}) at jwrite.jl:32
└ @ Main jwrite.jl:32
┌ Warning: `shift!` is deprecated, use `popfirst!` instead.
│   caller = writedata(::FortranFile{SequentialAccess{FortranFiles.WithoutSubrecords{Int64}},FortranFiles.Conversion{typeof(identity),typeof(identity)}}, ::Array{Any,1}) at jwrite.jl:35
└ @ Main jwrite.jl:35
┌ Warning: `shift!` is deprecated, use `popfirst!` instead.
│   caller = writedata(::FortranFile{SequentialAccess{FortranFiles.WithoutSubrecords{Int64}},FortranFiles.Conversion{typeof(identity),typeof(identity)}}, ::Array{Any,1}) at jwrite.jl:38
└ @ Main jwrite.jl:38
┌ Warning: Calling `write` on non-isbits arrays is deprecated. Use a loop or `serialize` instead.
│   caller = write_var at write.jl:69 [inlined]
└ @ Core write.jl:69
┌ Warning: `shift!` is deprecated, use `popfirst!` instead.
│   caller = writedata(::FortranFile{SequentialAccess{FortranFiles.WithoutSubrecords{Int64}},FortranFiles.Conversion{typeof(identity),typeof(identity)}}, ::Array{Any,1}) at jwrite.jl:41
└ @ Main jwrite.jl:41
┌ Warning: `shift!` is deprecated, use `popfirst!` instead.
│   caller = writedata(::FortranFile{SequentialAccess{FortranFiles.WithoutSubrecords{Int64}},FortranFiles.Conversion{typeof(identity),typeof(identity)}}, ::Array{Any,1}) at jwrite.jl:44
└ @ Main jwrite.jl:44
┌ Warning: Calling `write` on non-isbits arrays is deprecated. Use a loop or `serialize` instead.
│   caller = write_var at write.jl:69 [inlined]
└ @ Core write.jl:69
  1.759197 seconds (957.05 k allocations: 54.552 MiB, 0.93% gc time)
Test Summary:                                                                | Pass  Total
Testing records with markers of 8-byte without subrecords, native byte order |  126    126
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = readdata(::FortranFile{SequentialAccess{FortranFiles.WithoutSubrecords{Int64}},FortranFiles.Conversion{typeof(ltoh),typeof(htol)}}) at jread.jl:3
└ @ Main jread.jl:3
┌ Warning: `Array{T}(m::Integer, n::Integer, o::Integer) where T` is deprecated, use `Array{T}(undef, m, n, o)` instead.
│   caller = read_spec(::FortranFiles.RecordWithoutSubrecords{Int64,FortranFiles.Conversion{typeof(ltoh),typeof(htol)}}, ::Tuple{DataType,Int64,Int32,Int32}) at read.jl:82
└ @ FortranFiles read.jl:82
┌ Warning: `Array{T}(m::Integer) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = read_spec(::FortranFiles.RecordWithoutSubrecords{Int64,FortranFiles.Conversion{typeof(ltoh),typeof(htol)}}, ::Tuple{DataType,Int16}) at read.jl:76
└ @ FortranFiles read.jl:76
┌ Warning: `Array{T}(m::Integer, n::Integer) where T` is deprecated, use `Array{T}(undef, m, n)` instead.
│   caller = read_spec(::FortranFiles.RecordWithoutSubrecords{Int64,FortranFiles.Conversion{typeof(ltoh),typeof(htol)}}, ::Tuple{DataType,Tuple{Int32,Int64}}) at read.jl:87
└ @ FortranFiles read.jl:87
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = readdata(::FortranFile{SequentialAccess{FortranFiles.WithoutSubrecords{Int64}},FortranFiles.Conversion{typeof(ltoh),typeof(htol)}}) at jread.jl:13
└ @ Main jread.jl:13
┌ Warning: `Array{T}(m::Integer, n::Integer, o::Integer) where T` is deprecated, use `Array{T}(undef, m, n, o)` instead.
│   caller = read_spec(::FortranFiles.RecordWithoutSubrecords{Int64,FortranFiles.Conversion{typeof(ltoh),typeof(htol)}}, ::Tuple{DataType,Int16,Int64,Int64}) at read.jl:82
└ @ FortranFiles read.jl:82
┌ Warning: `read(s::IO, t::Type, d1::Int, dims::Int...)` is deprecated, use `read!(s, Array{t}(undef, d1, dims...))` instead.
│   caller = read at string.jl:48 [inlined]
└ @ Core string.jl:48
┌ Warning: `Array{T}(m::Integer, n::Integer, o::Integer) where T` is deprecated, use `Array{T}(undef, m, n, o)` instead.
│   caller = read_spec(::FortranFiles.RecordWithoutSubrecords{Int64,FortranFiles.Conversion{typeof(ltoh),typeof(htol)}}, ::Tuple{DataType,Int64,Int32,Int16}) at read.jl:82
└ @ FortranFiles read.jl:82
┌ Warning: `read(s::IO, t::Type, d1::Int, dims::Int...)` is deprecated, use `read!(s, Array{t}(undef, d1, dims...))` instead.
│   caller = read at string.jl:48 [inlined]
└ @ Core string.jl:48
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = read_spec(::FortranFiles.RecordWithoutSubrecords{Int64,FortranFiles.Conversion{typeof(ltoh),typeof(htol)}}, ::Tuple{DataType,Int64}) at read.jl:76
└ @ FortranFiles read.jl:76
┌ Warning: `Array{T}(m::Integer, n::Integer, o::Integer) where T` is deprecated, use `Array{T}(undef, m, n, o)` instead.
│   caller = read_spec(::FortranFiles.RecordWithoutSubrecords{Int64,FortranFiles.Conversion{typeof(ltoh),typeof(htol)}}, ::Tuple{DataType,Int64,Int16,Int32}) at read.jl:82
└ @ FortranFiles read.jl:82
┌ Warning: `Array{T}(m::Integer, n::Integer, o::Integer) where T` is deprecated, use `Array{T}(undef, m, n, o)` instead.
│   caller = read_spec(::FortranFiles.RecordWithoutSubrecords{Int64,FortranFiles.Conversion{typeof(ltoh),typeof(htol)}}, ::Tuple{DataType,Int64,Int16,Int16}) at read.jl:82
└ @ FortranFiles read.jl:82
┌ Warning: `Array{T}(m::Integer, n::Integer) where T` is deprecated, use `Array{T}(undef, m, n)` instead.
│   caller = read_spec(::FortranFiles.RecordWithoutSubrecords{Int64,FortranFiles.Conversion{typeof(ltoh),typeof(htol)}}, ::Tuple{DataType,Tuple{Int32,Int32}}) at read.jl:87
└ @ FortranFiles read.jl:87
┌ Warning: `Array{T}(m::Integer, n::Integer, o::Integer) where T` is deprecated, use `Array{T}(undef, m, n, o)` instead.
│   caller = read_spec(::FortranFiles.RecordWithoutSubrecords{Int64,FortranFiles.Conversion{typeof(ltoh),typeof(htol)}}, ::Tuple{DataType,Tuple{Int64,Int64,Int32}}) at read.jl:87
└ @ FortranFiles read.jl:87
┌ Warning: `Array{T}(m::Int, n::Int) where T` is deprecated, use `Array{T}(undef, m, n)` instead.
│   caller = readdata(::FortranFile{SequentialAccess{FortranFiles.WithoutSubrecords{Int64}},FortranFiles.Conversion{typeof(ltoh),typeof(htol)}}) at jread.jl:53
└ @ Main jread.jl:53
┌ Warning: `Array{T}(m::Int, n::Int) where T` is deprecated, use `Array{T}(undef, m, n)` instead.
│   caller = readdata(::FortranFile{SequentialAccess{FortranFiles.WithoutSubrecords{Int64}},FortranFiles.Conversion{typeof(ltoh),typeof(htol)}}) at jread.jl:53
└ @ Main jread.jl:53
┌ Warning: `Array{T}(m::Integer, n::Integer) where T` is deprecated, use `Array{T}(undef, m, n)` instead.
│   caller = read_spec(::FortranFiles.RecordWithoutSubrecords{Int64,FortranFiles.Conversion{typeof(ltoh),typeof(htol)}}, ::Tuple{DataType,Int16,Int32}) at read.jl:82
└ @ FortranFiles read.jl:82
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = readdata(::FortranFile{SequentialAccess{FortranFiles.WithoutSubrecords{Int64}},FortranFiles.Conversion{typeof(ltoh),typeof(htol)}}) at jread.jl:61
└ @ Main jread.jl:61
┌ Warning: `read(s::IO, t::Type, d1::Int, dims::Int...)` is deprecated, use `read!(s, Array{t}(undef, d1, dims...))` instead.
│   caller = read at string.jl:48 [inlined]
└ @ Core string.jl:48
┌ Warning: `Array{T}(m::Int, n::Int, o::Int) where T` is deprecated, use `Array{T}(undef, m, n, o)` instead.
│   caller = readdata(::FortranFile{SequentialAccess{FortranFiles.WithoutSubrecords{Int64}},FortranFiles.Conversion{typeof(ltoh),typeof(htol)}}) at jread.jl:69
└ @ Main jread.jl:69
┌ Warning: `Array{T}(m::Integer, n::Integer, o::Integer) where T` is deprecated, use `Array{T}(undef, m, n, o)` instead.
│   caller = read_spec(::FortranFiles.RecordWithoutSubrecords{Int64,FortranFiles.Conversion{typeof(ltoh),typeof(htol)}}, ::Tuple{DataType,Tuple{Int64,Int64,Int16}}) at read.jl:87
└ @ FortranFiles read.jl:87
┌ Warning: `read(s::IO, t::Type, d1::Int, dims::Int...)` is deprecated, use `read!(s, Array{t}(undef, d1, dims...))` instead.
│   caller = read at string.jl:48 [inlined]
└ @ Core string.jl:48
┌ Warning: `read(s::IO, t::Type, d1::Int, dims::Int...)` is deprecated, use `read!(s, Array{t}(undef, d1, dims...))` instead.
│   caller = read at string.jl:48 [inlined]
└ @ Core string.jl:48
┌ Warning: `Array{T}(m::Integer, n::Integer) where T` is deprecated, use `Array{T}(undef, m, n)` instead.
│   caller = read_spec(::FortranFiles.RecordWithoutSubrecords{Int64,FortranFiles.Conversion{typeof(ltoh),typeof(htol)}}, ::Tuple{DataType,Int32,Int32}) at read.jl:82
└ @ FortranFiles read.jl:82
┌ Warning: `Array{T}(m::Int, n::Int) where T` is deprecated, use `Array{T}(undef, m, n)` instead.
│   caller = readdata(::FortranFile{SequentialAccess{FortranFiles.WithoutSubrecords{Int64}},FortranFiles.Conversion{typeof(ltoh),typeof(htol)}}) at jread.jl:91
└ @ Main jread.jl:91
┌ Warning: `Array{T}(m::Int, n::Int, o::Int) where T` is deprecated, use `Array{T}(undef, m, n, o)` instead.
│   caller = readdata(::FortranFile{SequentialAccess{FortranFiles.WithoutSubrecords{Int64}},FortranFiles.Conversion{typeof(ltoh),typeof(htol)}}) at jread.jl:95
└ @ Main jread.jl:95
┌ Warning: `Array{T}(m::Int, n::Int) where T` is deprecated, use `Array{T}(undef, m, n)` instead.
│   caller = read_spec(::FortranFiles.RecordWithoutSubrecords{Int64,FortranFiles.Conversion{typeof(ltoh),typeof(htol)}}, ::Tuple{DataType,Tuple{Int64,Int64}}) at read.jl:87
└ @ FortranFiles read.jl:87
┌ Warning: `read(s::IO, t::Type, d1::Int, dims::Int...)` is deprecated, use `read!(s, Array{t}(undef, d1, dims...))` instead.
│   caller = read at string.jl:48 [inlined]
└ @ Core string.jl:48
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = readdata(::FortranFile{SequentialAccess{FortranFiles.WithoutSubrecords{Int64}},FortranFiles.Conversion{typeof(ltoh),typeof(htol)}}) at jread.jl:103
└ @ Main jread.jl:103
┌ Warning: `read(s::IO, t::Type, d1::Int, dims::Int...)` is deprecated, use `read!(s, Array{t}(undef, d1, dims...))` instead.
│   caller = read at string.jl:48 [inlined]
└ @ Core string.jl:48
┌ Warning: `Array{T}(m::Int, n::Int) where T` is deprecated, use `Array{T}(undef, m, n)` instead.
│   caller = read_spec(::FortranFiles.RecordWithoutSubrecords{Int64,FortranFiles.Conversion{typeof(ltoh),typeof(htol)}}, ::Tuple{DataType,Int64,Int64}) at read.jl:82
└ @ FortranFiles read.jl:82
┌ Warning: `read(s::IO, t::Type, d1::Int, dims::Int...)` is deprecated, use `read!(s, Array{t}(undef, d1, dims...))` instead.
│   caller = read at string.jl:48 [inlined]
└ @ Core string.jl:48
  5.781791 seconds (2.60 M allocations: 259.954 MiB, 2.33% gc time)
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = skipdata(::FortranFile{SequentialAccess{FortranFiles.WithoutSubrecords{Int64}},FortranFiles.Conversion{typeof(ltoh),typeof(htol)}}) at jskip.jl:3
└ @ Main jskip.jl:3
┌ Warning: `Array{T}(m::Int, n::Int, o::Int) where T` is deprecated, use `Array{T}(undef, m, n, o)` instead.
│   caller = read_spec(::FortranFiles.RecordWithoutSubrecords{Int64,FortranFiles.Conversion{typeof(ltoh),typeof(htol)}}, ::Tuple{DataType,Tuple{Int64,Int64,Int64}}) at read.jl:87
└ @ FortranFiles read.jl:87
┌ Warning: `Array{T}(m::Integer) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = read_spec(::FortranFiles.RecordWithoutSubrecords{Int64,FortranFiles.Conversion{typeof(ltoh),typeof(htol)}}, ::Tuple{DataType,Int32}) at read.jl:76
└ @ FortranFiles read.jl:76
┌ Warning: `Array{T}(m::Int, n::Int, o::Int) where T` is deprecated, use `Array{T}(undef, m, n, o)` instead.
│   caller = read_spec(::FortranFiles.RecordWithoutSubrecords{Int64,FortranFiles.Conversion{typeof(ltoh),typeof(htol)}}, ::Tuple{DataType,Int64,Int64,Int64}) at read.jl:82
└ @ FortranFiles read.jl:82
┌ Warning: `Array{T}(m::Int, n::Int) where T` is deprecated, use `Array{T}(undef, m, n)` instead.
│   caller = skipdata(::FortranFile{SequentialAccess{FortranFiles.WithoutSubrecords{Int64}},FortranFiles.Conversion{typeof(ltoh),typeof(htol)}}) at jskip.jl:22
└ @ Main jskip.jl:22
┌ Warning: `Array{T}(m::Integer, n::Integer) where T` is deprecated, use `Array{T}(undef, m, n)` instead.
│   caller = read_spec(::FortranFiles.RecordWithoutSubrecords{Int64,FortranFiles.Conversion{typeof(ltoh),typeof(htol)}}, ::Tuple{DataType,Tuple{Int64,Int32}}) at read.jl:87
└ @ FortranFiles read.jl:87
┌ Warning: `Array{T}(m::Int, n::Int) where T` is deprecated, use `Array{T}(undef, m, n)` instead.
│   caller = skipdata(::FortranFile{SequentialAccess{FortranFiles.WithoutSubrecords{Int64}},FortranFiles.Conversion{typeof(ltoh),typeof(htol)}}) at jskip.jl:34
└ @ Main jskip.jl:34
┌ Warning: `Array{T}(m::Integer, n::Integer, o::Integer) where T` is deprecated, use `Array{T}(undef, m, n, o)` instead.
│   caller = read_spec(::FortranFiles.RecordWithoutSubrecords{Int64,FortranFiles.Conversion{typeof(ltoh),typeof(htol)}}, ::Tuple{DataType,Int32,Int32,Int16}) at read.jl:82
└ @ FortranFiles read.jl:82
┌ Warning: `Array{T}(m::Int, n::Int, o::Int) where T` is deprecated, use `Array{T}(undef, m, n, o)` instead.
│   caller = skipdata(::FortranFile{SequentialAccess{FortranFiles.WithoutSubrecords{Int64}},FortranFiles.Conversion{typeof(ltoh),typeof(htol)}}) at jskip.jl:46
└ @ Main jskip.jl:46
  2.370209 seconds (1.08 M allocations: 117.295 MiB, 1.42% gc time)
┌ Warning: `shift!` is deprecated, use `popfirst!` instead.
│   caller = writedata(::FortranFile{SequentialAccess{FortranFiles.WithoutSubrecords{Int64}},FortranFiles.Conversion{typeof(ltoh),typeof(htol)}}, ::Array{Any,1}) at jwrite.jl:2
└ @ Main jwrite.jl:2
┌ Warning: `shift!` is deprecated, use `popfirst!` instead.
│   caller = writedata(::FortranFile{SequentialAccess{FortranFiles.WithoutSubrecords{Int64}},FortranFiles.Conversion{typeof(ltoh),typeof(htol)}}, ::Array{Any,1}) at jwrite.jl:5
└ @ Main jwrite.jl:5
┌ Warning: `shift!` is deprecated, use `popfirst!` instead.
│   caller = writedata(::FortranFile{SequentialAccess{FortranFiles.WithoutSubrecords{Int64}},FortranFiles.Conversion{typeof(ltoh),typeof(htol)}}, ::Array{Any,1}) at jwrite.jl:8
└ @ Main jwrite.jl:8
┌ Warning: `shift!` is deprecated, use `popfirst!` instead.
│   caller = writedata(::FortranFile{SequentialAccess{FortranFiles.WithoutSubrecords{Int64}},FortranFiles.Conversion{typeof(ltoh),typeof(htol)}}, ::Array{Any,1}) at jwrite.jl:11
└ @ Main jwrite.jl:11
┌ Warning: `shift!` is deprecated, use `popfirst!` instead.
│   caller = writedata(::FortranFile{SequentialAccess{FortranFiles.WithoutSubrecords{Int64}},FortranFiles.Conversion{typeof(ltoh),typeof(htol)}}, ::Array{Any,1}) at jwrite.jl:14
└ @ Main jwrite.jl:14
┌ Warning: `shift!` is deprecated, use `popfirst!` instead.
│   caller = writedata(::FortranFile{SequentialAccess{FortranFiles.WithoutSubrecords{Int64}},FortranFiles.Conversion{typeof(ltoh),typeof(htol)}}, ::Array{Any,1}) at jwrite.jl:17
└ @ Main jwrite.jl:17
┌ Warning: `shift!` is deprecated, use `popfirst!` instead.
│   caller = writedata(::FortranFile{SequentialAccess{FortranFiles.WithoutSubrecords{Int64}},FortranFiles.Conversion{typeof(ltoh),typeof(htol)}}, ::Array{Any,1}) at jwrite.jl:20
└ @ Main jwrite.jl:20
┌ Warning: `shift!` is deprecated, use `popfirst!` instead.
│   caller = writedata(::FortranFile{SequentialAccess{FortranFiles.WithoutSubrecords{Int64}},FortranFiles.Conversion{typeof(ltoh),typeof(htol)}}, ::Array{Any,1}) at jwrite.jl:23
└ @ Main jwrite.jl:23
┌ Warning: `shift!` is deprecated, use `popfirst!` instead.
│   caller = writedata(::FortranFile{SequentialAccess{FortranFiles.WithoutSubrecords{Int64}},FortranFiles.Conversion{typeof(ltoh),typeof(htol)}}, ::Array{Any,1}) at jwrite.jl:26
└ @ Main jwrite.jl:26
┌ Warning: `shift!` is deprecated, use `popfirst!` instead.
│   caller = writedata(::FortranFile{SequentialAccess{FortranFiles.WithoutSubrecords{Int64}},FortranFiles.Conversion{typeof(ltoh),typeof(htol)}}, ::Array{Any,1}) at jwrite.jl:29
└ @ Main jwrite.jl:29
┌ Warning: `shift!` is deprecated, use `popfirst!` instead.
│   caller = writedata(::FortranFile{SequentialAccess{FortranFiles.WithoutSubrecords{Int64}},FortranFiles.Conversion{typeof(ltoh),typeof(htol)}}, ::Array{Any,1}) at jwrite.jl:32
└ @ Main jwrite.jl:32
┌ Warning: `shift!` is deprecated, use `popfirst!` instead.
│   caller = writedata(::FortranFile{SequentialAccess{FortranFiles.WithoutSubrecords{Int64}},FortranFiles.Conversion{typeof(ltoh),typeof(htol)}}, ::Array{Any,1}) at jwrite.jl:35
└ @ Main jwrite.jl:35
┌ Warning: `shift!` is deprecated, use `popfirst!` instead.
│   caller = writedata(::FortranFile{SequentialAccess{FortranFiles.WithoutSubrecords{Int64}},FortranFiles.Conversion{typeof(ltoh),typeof(htol)}}, ::Array{Any,1}) at jwrite.jl:38
└ @ Main jwrite.jl:38
┌ Warning: `shift!` is deprecated, use `popfirst!` instead.
│   caller = writedata(::FortranFile{SequentialAccess{FortranFiles.WithoutSubrecords{Int64}},FortranFiles.Conversion{typeof(ltoh),typeof(htol)}}, ::Array{Any,1}) at jwrite.jl:41
└ @ Main jwrite.jl:41
┌ Warning: `shift!` is deprecated, use `popfirst!` instead.
│   caller = writedata(::FortranFile{SequentialAccess{FortranFiles.WithoutSubrecords{Int64}},FortranFiles.Conversion{typeof(ltoh),typeof(htol)}}, ::Array{Any,1}) at jwrite.jl:44
└ @ Main jwrite.jl:44
  1.845985 seconds (1.16 M allocations: 56.126 MiB, 1.01% gc time)
Test Summary:                                                                       | Pass  Total
Testing records with markers of 8-byte without subrecords, little-endian byte order |  126    126
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = readdata(::FortranFile{SequentialAccess{FortranFiles.WithoutSubrecords{Int64}},FortranFiles.Conversion{typeof(ntoh),typeof(hton)}}) at jread.jl:3
└ @ Main jread.jl:3
┌ Warning: `Array{T}(m::Integer, n::Integer, o::Integer) where T` is deprecated, use `Array{T}(undef, m, n, o)` instead.
│   caller = read_spec(::FortranFiles.RecordWithoutSubrecords{Int64,FortranFiles.Conversion{typeof(ntoh),typeof(hton)}}, ::Tuple{DataType,Int64,Int32,Int32}) at read.jl:82
└ @ FortranFiles read.jl:82
┌ Warning: `Array{T}(m::Integer) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = read_spec(::FortranFiles.RecordWithoutSubrecords{Int64,FortranFiles.Conversion{typeof(ntoh),typeof(hton)}}, ::Tuple{DataType,Int16}) at read.jl:76
└ @ FortranFiles read.jl:76
┌ Warning: `Array{T}(m::Integer, n::Integer) where T` is deprecated, use `Array{T}(undef, m, n)` instead.
│   caller = read_spec(::FortranFiles.RecordWithoutSubrecords{Int64,FortranFiles.Conversion{typeof(ntoh),typeof(hton)}}, ::Tuple{DataType,Tuple{Int32,Int64}}) at read.jl:87
└ @ FortranFiles read.jl:87
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = readdata(::FortranFile{SequentialAccess{FortranFiles.WithoutSubrecords{Int64}},FortranFiles.Conversion{typeof(ntoh),typeof(hton)}}) at jread.jl:13
└ @ Main jread.jl:13
┌ Warning: `Array{T}(m::Integer, n::Integer, o::Integer) where T` is deprecated, use `Array{T}(undef, m, n, o)` instead.
│   caller = read_spec(::FortranFiles.RecordWithoutSubrecords{Int64,FortranFiles.Conversion{typeof(ntoh),typeof(hton)}}, ::Tuple{DataType,Int16,Int64,Int64}) at read.jl:82
└ @ FortranFiles read.jl:82
┌ Warning: `read(s::IO, t::Type, d1::Int, dims::Int...)` is deprecated, use `read!(s, Array{t}(undef, d1, dims...))` instead.
│   caller = read at string.jl:48 [inlined]
└ @ Core string.jl:48
┌ Warning: `Array{T}(m::Integer, n::Integer, o::Integer) where T` is deprecated, use `Array{T}(undef, m, n, o)` instead.
│   caller = read_spec(::FortranFiles.RecordWithoutSubrecords{Int64,FortranFiles.Conversion{typeof(ntoh),typeof(hton)}}, ::Tuple{DataType,Int64,Int32,Int16}) at read.jl:82
└ @ FortranFiles read.jl:82
┌ Warning: `read(s::IO, t::Type, d1::Int, dims::Int...)` is deprecated, use `read!(s, Array{t}(undef, d1, dims...))` instead.
│   caller = read at string.jl:48 [inlined]
└ @ Core string.jl:48
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = read_spec(::FortranFiles.RecordWithoutSubrecords{Int64,FortranFiles.Conversion{typeof(ntoh),typeof(hton)}}, ::Tuple{DataType,Int64}) at read.jl:76
└ @ FortranFiles read.jl:76
┌ Warning: `Array{T}(m::Integer, n::Integer, o::Integer) where T` is deprecated, use `Array{T}(undef, m, n, o)` instead.
│   caller = read_spec(::FortranFiles.RecordWithoutSubrecords{Int64,FortranFiles.Conversion{typeof(ntoh),typeof(hton)}}, ::Tuple{DataType,Int64,Int16,Int32}) at read.jl:82
└ @ FortranFiles read.jl:82
┌ Warning: `Array{T}(m::Integer, n::Integer, o::Integer) where T` is deprecated, use `Array{T}(undef, m, n, o)` instead.
│   caller = read_spec(::FortranFiles.RecordWithoutSubrecords{Int64,FortranFiles.Conversion{typeof(ntoh),typeof(hton)}}, ::Tuple{DataType,Int64,Int16,Int16}) at read.jl:82
└ @ FortranFiles read.jl:82
┌ Warning: `Array{T}(m::Integer, n::Integer) where T` is deprecated, use `Array{T}(undef, m, n)` instead.
│   caller = read_spec(::FortranFiles.RecordWithoutSubrecords{Int64,FortranFiles.Conversion{typeof(ntoh),typeof(hton)}}, ::Tuple{DataType,Tuple{Int32,Int32}}) at read.jl:87
└ @ FortranFiles read.jl:87
┌ Warning: `Array{T}(m::Integer, n::Integer, o::Integer) where T` is deprecated, use `Array{T}(undef, m, n, o)` instead.
│   caller = read_spec(::FortranFiles.RecordWithoutSubrecords{Int64,FortranFiles.Conversion{typeof(ntoh),typeof(hton)}}, ::Tuple{DataType,Tuple{Int64,Int64,Int32}}) at read.jl:87
└ @ FortranFiles read.jl:87
┌ Warning: `Array{T}(m::Int, n::Int) where T` is deprecated, use `Array{T}(undef, m, n)` instead.
│   caller = readdata(::FortranFile{SequentialAccess{FortranFiles.WithoutSubrecords{Int64}},FortranFiles.Conversion{typeof(ntoh),typeof(hton)}}) at jread.jl:53
└ @ Main jread.jl:53
┌ Warning: `Array{T}(m::Int, n::Int) where T` is deprecated, use `Array{T}(undef, m, n)` instead.
│   caller = readdata(::FortranFile{SequentialAccess{FortranFiles.WithoutSubrecords{Int64}},FortranFiles.Conversion{typeof(ntoh),typeof(hton)}}) at jread.jl:53
└ @ Main jread.jl:53
┌ Warning: `Array{T}(m::Integer, n::Integer) where T` is deprecated, use `Array{T}(undef, m, n)` instead.
│   caller = read_spec(::FortranFiles.RecordWithoutSubrecords{Int64,FortranFiles.Conversion{typeof(ntoh),typeof(hton)}}, ::Tuple{DataType,Int16,Int32}) at read.jl:82
└ @ FortranFiles read.jl:82
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = readdata(::FortranFile{SequentialAccess{FortranFiles.WithoutSubrecords{Int64}},FortranFiles.Conversion{typeof(ntoh),typeof(hton)}}) at jread.jl:61
└ @ Main jread.jl:61
┌ Warning: `read(s::IO, t::Type, d1::Int, dims::Int...)` is deprecated, use `read!(s, Array{t}(undef, d1, dims...))` instead.
│   caller = read at string.jl:48 [inlined]
└ @ Core string.jl:48
┌ Warning: `Array{T}(m::Int, n::Int, o::Int) where T` is deprecated, use `Array{T}(undef, m, n, o)` instead.
│   caller = readdata(::FortranFile{SequentialAccess{FortranFiles.WithoutSubrecords{Int64}},FortranFiles.Conversion{typeof(ntoh),typeof(hton)}}) at jread.jl:69
└ @ Main jread.jl:69
┌ Warning: `Array{T}(m::Integer, n::Integer, o::Integer) where T` is deprecated, use `Array{T}(undef, m, n, o)` instead.
│   caller = read_spec(::FortranFiles.RecordWithoutSubrecords{Int64,FortranFiles.Conversion{typeof(ntoh),typeof(hton)}}, ::Tuple{DataType,Tuple{Int64,Int64,Int16}}) at read.jl:87
└ @ FortranFiles read.jl:87
┌ Warning: `read(s::IO, t::Type, d1::Int, dims::Int...)` is deprecated, use `read!(s, Array{t}(undef, d1, dims...))` instead.
│   caller = read at string.jl:48 [inlined]
└ @ Core string.jl:48
┌ Warning: `read(s::IO, t::Type, d1::Int, dims::Int...)` is deprecated, use `read!(s, Array{t}(undef, d1, dims...))` instead.
│   caller = read at string.jl:48 [inlined]
└ @ Core string.jl:48
┌ Warning: `Array{T}(m::Integer, n::Integer) where T` is deprecated, use `Array{T}(undef, m, n)` instead.
│   caller = read_spec(::FortranFiles.RecordWithoutSubrecords{Int64,FortranFiles.Conversion{typeof(ntoh),typeof(hton)}}, ::Tuple{DataType,Int32,Int32}) at read.jl:82
└ @ FortranFiles read.jl:82
┌ Warning: `Array{T}(m::Int, n::Int) where T` is deprecated, use `Array{T}(undef, m, n)` instead.
│   caller = readdata(::FortranFile{SequentialAccess{FortranFiles.WithoutSubrecords{Int64}},FortranFiles.Conversion{typeof(ntoh),typeof(hton)}}) at jread.jl:91
└ @ Main jread.jl:91
┌ Warning: `Array{T}(m::Int, n::Int, o::Int) where T` is deprecated, use `Array{T}(undef, m, n, o)` instead.
│   caller = readdata(::FortranFile{SequentialAccess{FortranFiles.WithoutSubrecords{Int64}},FortranFiles.Conversion{typeof(ntoh),typeof(hton)}}) at jread.jl:95
└ @ Main jread.jl:95
┌ Warning: `Array{T}(m::Int, n::Int) where T` is deprecated, use `Array{T}(undef, m, n)` instead.
│   caller = read_spec(::FortranFiles.RecordWithoutSubrecords{Int64,FortranFiles.Conversion{typeof(ntoh),typeof(hton)}}, ::Tuple{DataType,Tuple{Int64,Int64}}) at read.jl:87
└ @ FortranFiles read.jl:87
┌ Warning: `read(s::IO, t::Type, d1::Int, dims::Int...)` is deprecated, use `read!(s, Array{t}(undef, d1, dims...))` instead.
│   caller = read at string.jl:48 [inlined]
└ @ Core string.jl:48
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = readdata(::FortranFile{SequentialAccess{FortranFiles.WithoutSubrecords{Int64}},FortranFiles.Conversion{typeof(ntoh),typeof(hton)}}) at jread.jl:103
└ @ Main jread.jl:103
┌ Warning: `read(s::IO, t::Type, d1::Int, dims::Int...)` is deprecated, use `read!(s, Array{t}(undef, d1, dims...))` instead.
│   caller = read at string.jl:48 [inlined]
└ @ Core string.jl:48
┌ Warning: `Array{T}(m::Int, n::Int) where T` is deprecated, use `Array{T}(undef, m, n)` instead.
│   caller = read_spec(::FortranFiles.RecordWithoutSubrecords{Int64,FortranFiles.Conversion{typeof(ntoh),typeof(hton)}}, ::Tuple{DataType,Int64,Int64}) at read.jl:82
└ @ FortranFiles read.jl:82
┌ Warning: `read(s::IO, t::Type, d1::Int, dims::Int...)` is deprecated, use `read!(s, Array{t}(undef, d1, dims...))` instead.
│   caller = read at string.jl:48 [inlined]
└ @ Core string.jl:48
  6.144284 seconds (2.61 M allocations: 259.978 MiB, 1.39% gc time)
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = skipdata(::FortranFile{SequentialAccess{FortranFiles.WithoutSubrecords{Int64}},FortranFiles.Conversion{typeof(ntoh),typeof(hton)}}) at jskip.jl:3
└ @ Main jskip.jl:3
┌ Warning: `Array{T}(m::Int, n::Int, o::Int) where T` is deprecated, use `Array{T}(undef, m, n, o)` instead.
│   caller = read_spec(::FortranFiles.RecordWithoutSubrecords{Int64,FortranFiles.Conversion{typeof(ntoh),typeof(hton)}}, ::Tuple{DataType,Tuple{Int64,Int64,Int64}}) at read.jl:87
└ @ FortranFiles read.jl:87
┌ Warning: `Array{T}(m::Integer) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = read_spec(::FortranFiles.RecordWithoutSubrecords{Int64,FortranFiles.Conversion{typeof(ntoh),typeof(hton)}}, ::Tuple{DataType,Int32}) at read.jl:76
└ @ FortranFiles read.jl:76
┌ Warning: `Array{T}(m::Int, n::Int, o::Int) where T` is deprecated, use `Array{T}(undef, m, n, o)` instead.
│   caller = read_spec(::FortranFiles.RecordWithoutSubrecords{Int64,FortranFiles.Conversion{typeof(ntoh),typeof(hton)}}, ::Tuple{DataType,Int64,Int64,Int64}) at read.jl:82
└ @ FortranFiles read.jl:82
┌ Warning: `Array{T}(m::Int, n::Int) where T` is deprecated, use `Array{T}(undef, m, n)` instead.
│   caller = skipdata(::FortranFile{SequentialAccess{FortranFiles.WithoutSubrecords{Int64}},FortranFiles.Conversion{typeof(ntoh),typeof(hton)}}) at jskip.jl:22
└ @ Main jskip.jl:22
┌ Warning: `Array{T}(m::Integer, n::Integer) where T` is deprecated, use `Array{T}(undef, m, n)` instead.
│   caller = read_spec(::FortranFiles.RecordWithoutSubrecords{Int64,FortranFiles.Conversion{typeof(ntoh),typeof(hton)}}, ::Tuple{DataType,Tuple{Int64,Int32}}) at read.jl:87
└ @ FortranFiles read.jl:87
┌ Warning: `Array{T}(m::Int, n::Int) where T` is deprecated, use `Array{T}(undef, m, n)` instead.
│   caller = skipdata(::FortranFile{SequentialAccess{FortranFiles.WithoutSubrecords{Int64}},FortranFiles.Conversion{typeof(ntoh),typeof(hton)}}) at jskip.jl:34
└ @ Main jskip.jl:34
┌ Warning: `Array{T}(m::Integer, n::Integer, o::Integer) where T` is deprecated, use `Array{T}(undef, m, n, o)` instead.
│   caller = read_spec(::FortranFiles.RecordWithoutSubrecords{Int64,FortranFiles.Conversion{typeof(ntoh),typeof(hton)}}, ::Tuple{DataType,Int32,Int32,Int16}) at read.jl:82
└ @ FortranFiles read.jl:82
┌ Warning: `Array{T}(m::Int, n::Int, o::Int) where T` is deprecated, use `Array{T}(undef, m, n, o)` instead.
│   caller = skipdata(::FortranFile{SequentialAccess{FortranFiles.WithoutSubrecords{Int64}},FortranFiles.Conversion{typeof(ntoh),typeof(hton)}}) at jskip.jl:46
└ @ Main jskip.jl:46
  2.428964 seconds (1.08 M allocations: 117.309 MiB, 1.54% gc time)
┌ Warning: `shift!` is deprecated, use `popfirst!` instead.
│   caller = writedata(::FortranFile{SequentialAccess{FortranFiles.WithoutSubrecords{Int64}},FortranFiles.Conversion{typeof(ntoh),typeof(hton)}}, ::Array{Any,1}) at jwrite.jl:2
└ @ Main jwrite.jl:2
┌ Warning: `shift!` is deprecated, use `popfirst!` instead.
│   caller = writedata(::FortranFile{SequentialAccess{FortranFiles.WithoutSubrecords{Int64}},FortranFiles.Conversion{typeof(ntoh),typeof(hton)}}, ::Array{Any,1}) at jwrite.jl:5
└ @ Main jwrite.jl:5
┌ Warning: `shift!` is deprecated, use `popfirst!` instead.
│   caller = writedata(::FortranFile{SequentialAccess{FortranFiles.WithoutSubrecords{Int64}},FortranFiles.Conversion{typeof(ntoh),typeof(hton)}}, ::Array{Any,1}) at jwrite.jl:8
└ @ Main jwrite.jl:8
┌ Warning: `shift!` is deprecated, use `popfirst!` instead.
│   caller = writedata(::FortranFile{SequentialAccess{FortranFiles.WithoutSubrecords{Int64}},FortranFiles.Conversion{typeof(ntoh),typeof(hton)}}, ::Array{Any,1}) at jwrite.jl:11
└ @ Main jwrite.jl:11
┌ Warning: `shift!` is deprecated, use `popfirst!` instead.
│   caller = writedata(::FortranFile{SequentialAccess{FortranFiles.WithoutSubrecords{Int64}},FortranFiles.Conversion{typeof(ntoh),typeof(hton)}}, ::Array{Any,1}) at jwrite.jl:14
└ @ Main jwrite.jl:14
┌ Warning: `shift!` is deprecated, use `popfirst!` instead.
│   caller = writedata(::FortranFile{SequentialAccess{FortranFiles.WithoutSubrecords{Int64}},FortranFiles.Conversion{typeof(ntoh),typeof(hton)}}, ::Array{Any,1}) at jwrite.jl:17
└ @ Main jwrite.jl:17
┌ Warning: `shift!` is deprecated, use `popfirst!` instead.
│   caller = writedata(::FortranFile{SequentialAccess{FortranFiles.WithoutSubrecords{Int64}},FortranFiles.Conversion{typeof(ntoh),typeof(hton)}}, ::Array{Any,1}) at jwrite.jl:20
└ @ Main jwrite.jl:20
┌ Warning: `shift!` is deprecated, use `popfirst!` instead.
│   caller = writedata(::FortranFile{SequentialAccess{FortranFiles.WithoutSubrecords{Int64}},FortranFiles.Conversion{typeof(ntoh),typeof(hton)}}, ::Array{Any,1}) at jwrite.jl:23
└ @ Main jwrite.jl:23
┌ Warning: `shift!` is deprecated, use `popfirst!` instead.
│   caller = writedata(::FortranFile{SequentialAccess{FortranFiles.WithoutSubrecords{Int64}},FortranFiles.Conversion{typeof(ntoh),typeof(hton)}}, ::Array{Any,1}) at jwrite.jl:26
└ @ Main jwrite.jl:26
┌ Warning: `shift!` is deprecated, use `popfirst!` instead.
│   caller = writedata(::FortranFile{SequentialAccess{FortranFiles.WithoutSubrecords{Int64}},FortranFiles.Conversion{typeof(ntoh),typeof(hton)}}, ::Array{Any,1}) at jwrite.jl:29
└ @ Main jwrite.jl:29
┌ Warning: `shift!` is deprecated, use `popfirst!` instead.
│   caller = writedata(::FortranFile{SequentialAccess{FortranFiles.WithoutSubrecords{Int64}},FortranFiles.Conversion{typeof(ntoh),typeof(hton)}}, ::Array{Any,1}) at jwrite.jl:32
└ @ Main jwrite.jl:32
┌ Warning: `shift!` is deprecated, use `popfirst!` instead.
│   caller = writedata(::FortranFile{SequentialAccess{FortranFiles.WithoutSubrecords{Int64}},FortranFiles.Conversion{typeof(ntoh),typeof(hton)}}, ::Array{Any,1}) at jwrite.jl:35
└ @ Main jwrite.jl:35
┌ Warning: `shift!` is deprecated, use `popfirst!` instead.
│   caller = writedata(::FortranFile{SequentialAccess{FortranFiles.WithoutSubrecords{Int64}},FortranFiles.Conversion{typeof(ntoh),typeof(hton)}}, ::Array{Any,1}) at jwrite.jl:38
└ @ Main jwrite.jl:38
┌ Warning: `shift!` is deprecated, use `popfirst!` instead.
│   caller = writedata(::FortranFile{SequentialAccess{FortranFiles.WithoutSubrecords{Int64}},FortranFiles.Conversion{typeof(ntoh),typeof(hton)}}, ::Array{Any,1}) at jwrite.jl:41
└ @ Main jwrite.jl:41
┌ Warning: `shift!` is deprecated, use `popfirst!` instead.
│   caller = writedata(::FortranFile{SequentialAccess{FortranFiles.WithoutSubrecords{Int64}},FortranFiles.Conversion{typeof(ntoh),typeof(hton)}}, ::Array{Any,1}) at jwrite.jl:44
└ @ Main jwrite.jl:44
  1.719262 seconds (1.17 M allocations: 56.461 MiB, 1.31% gc time)
Test Summary:                                                                    | Pass  Total
Testing records with markers of 8-byte without subrecords, big-endian byte order |  126    126
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = readdata(::FortranFile{SequentialAccess{FortranFiles.WithoutSubrecords{Int32}},FortranFiles.Conversion{typeof(identity),typeof(identity)}}) at jread.jl:3
└ @ Main jread.jl:3
┌ Warning: `Array{T}(m::Integer, n::Integer, o::Integer) where T` is deprecated, use `Array{T}(undef, m, n, o)` instead.
│   caller = read_spec(::FortranFiles.RecordWithoutSubrecords{Int32,FortranFiles.Conversion{typeof(identity),typeof(identity)}}, ::Tuple{DataType,Int64,Int32,Int32}) at read.jl:82
└ @ FortranFiles read.jl:82
┌ Warning: `Array{T}(m::Integer) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = read_spec(::FortranFiles.RecordWithoutSubrecords{Int32,FortranFiles.Conversion{typeof(identity),typeof(identity)}}, ::Tuple{DataType,Int16}) at read.jl:76
└ @ FortranFiles read.jl:76
┌ Warning: `Array{T}(m::Integer, n::Integer) where T` is deprecated, use `Array{T}(undef, m, n)` instead.
│   caller = read_spec(::FortranFiles.RecordWithoutSubrecords{Int32,FortranFiles.Conversion{typeof(identity),typeof(identity)}}, ::Tuple{DataType,Tuple{Int32,Int64}}) at read.jl:87
└ @ FortranFiles read.jl:87
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = readdata(::FortranFile{SequentialAccess{FortranFiles.WithoutSubrecords{Int32}},FortranFiles.Conversion{typeof(identity),typeof(identity)}}) at jread.jl:13
└ @ Main jread.jl:13
┌ Warning: `Array{T}(m::Integer, n::Integer, o::Integer) where T` is deprecated, use `Array{T}(undef, m, n, o)` instead.
│   caller = read_spec(::FortranFiles.RecordWithoutSubrecords{Int32,FortranFiles.Conversion{typeof(identity),typeof(identity)}}, ::Tuple{DataType,Int16,Int64,Int64}) at read.jl:82
└ @ FortranFiles read.jl:82
┌ Warning: `read(s::IO, t::Type, d1::Int, dims::Int...)` is deprecated, use `read!(s, Array{t}(undef, d1, dims...))` instead.
│   caller = read at string.jl:48 [inlined]
└ @ Core string.jl:48
┌ Warning: `Array{T}(m::Integer, n::Integer, o::Integer) where T` is deprecated, use `Array{T}(undef, m, n, o)` instead.
│   caller = read_spec(::FortranFiles.RecordWithoutSubrecords{Int32,FortranFiles.Conversion{typeof(identity),typeof(identity)}}, ::Tuple{DataType,Int64,Int32,Int16}) at read.jl:82
└ @ FortranFiles read.jl:82
┌ Warning: `read(s::IO, t::Type, d1::Int, dims::Int...)` is deprecated, use `read!(s, Array{t}(undef, d1, dims...))` instead.
│   caller = read at string.jl:48 [inlined]
└ @ Core string.jl:48
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = read_spec(::FortranFiles.RecordWithoutSubrecords{Int32,FortranFiles.Conversion{typeof(identity),typeof(identity)}}, ::Tuple{DataType,Int64}) at read.jl:76
└ @ FortranFiles read.jl:76
┌ Warning: `Array{T}(m::Integer, n::Integer, o::Integer) where T` is deprecated, use `Array{T}(undef, m, n, o)` instead.
│   caller = read_spec(::FortranFiles.RecordWithoutSubrecords{Int32,FortranFiles.Conversion{typeof(identity),typeof(identity)}}, ::Tuple{DataType,Int64,Int16,Int32}) at read.jl:82
└ @ FortranFiles read.jl:82
┌ Warning: `Array{T}(m::Integer, n::Integer, o::Integer) where T` is deprecated, use `Array{T}(undef, m, n, o)` instead.
│   caller = read_spec(::FortranFiles.RecordWithoutSubrecords{Int32,FortranFiles.Conversion{typeof(identity),typeof(identity)}}, ::Tuple{DataType,Int64,Int16,Int16}) at read.jl:82
└ @ FortranFiles read.jl:82
┌ Warning: `Array{T}(m::Integer, n::Integer) where T` is deprecated, use `Array{T}(undef, m, n)` instead.
│   caller = read_spec(::FortranFiles.RecordWithoutSubrecords{Int32,FortranFiles.Conversion{typeof(identity),typeof(identity)}}, ::Tuple{DataType,Tuple{Int32,Int32}}) at read.jl:87
└ @ FortranFiles read.jl:87
┌ Warning: `Array{T}(m::Integer, n::Integer, o::Integer) where T` is deprecated, use `Array{T}(undef, m, n, o)` instead.
│   caller = read_spec(::FortranFiles.RecordWithoutSubrecords{Int32,FortranFiles.Conversion{typeof(identity),typeof(identity)}}, ::Tuple{DataType,Tuple{Int64,Int64,Int32}}) at read.jl:87
└ @ FortranFiles read.jl:87
┌ Warning: `Array{T}(m::Int, n::Int) where T` is deprecated, use `Array{T}(undef, m, n)` instead.
│   caller = readdata(::FortranFile{SequentialAccess{FortranFiles.WithoutSubrecords{Int32}},FortranFiles.Conversion{typeof(identity),typeof(identity)}}) at jread.jl:53
└ @ Main jread.jl:53
┌ Warning: `Array{T}(m::Int, n::Int) where T` is deprecated, use `Array{T}(undef, m, n)` instead.
│   caller = readdata(::FortranFile{SequentialAccess{FortranFiles.WithoutSubrecords{Int32}},FortranFiles.Conversion{typeof(identity),typeof(identity)}}) at jread.jl:53
└ @ Main jread.jl:53
┌ Warning: `Array{T}(m::Integer, n::Integer) where T` is deprecated, use `Array{T}(undef, m, n)` instead.
│   caller = read_spec(::FortranFiles.RecordWithoutSubrecords{Int32,FortranFiles.Conversion{typeof(identity),typeof(identity)}}, ::Tuple{DataType,Int16,Int32}) at read.jl:82
└ @ FortranFiles read.jl:82
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = readdata(::FortranFile{SequentialAccess{FortranFiles.WithoutSubrecords{Int32}},FortranFiles.Conversion{typeof(identity),typeof(identity)}}) at jread.jl:61
└ @ Main jread.jl:61
┌ Warning: `read(s::IO, t::Type, d1::Int, dims::Int...)` is deprecated, use `read!(s, Array{t}(undef, d1, dims...))` instead.
│   caller = read at string.jl:48 [inlined]
└ @ Core string.jl:48
┌ Warning: `Array{T}(m::Int, n::Int, o::Int) where T` is deprecated, use `Array{T}(undef, m, n, o)` instead.
│   caller = readdata(::FortranFile{SequentialAccess{FortranFiles.WithoutSubrecords{Int32}},FortranFiles.Conversion{typeof(identity),typeof(identity)}}) at jread.jl:69
└ @ Main jread.jl:69
┌ Warning: `Array{T}(m::Integer, n::Integer, o::Integer) where T` is deprecated, use `Array{T}(undef, m, n, o)` instead.
│   caller = read_spec(::FortranFiles.RecordWithoutSubrecords{Int32,FortranFiles.Conversion{typeof(identity),typeof(identity)}}, ::Tuple{DataType,Tuple{Int64,Int64,Int16}}) at read.jl:87
└ @ FortranFiles read.jl:87
┌ Warning: `read(s::IO, t::Type, d1::Int, dims::Int...)` is deprecated, use `read!(s, Array{t}(undef, d1, dims...))` instead.
│   caller = read at string.jl:48 [inlined]
└ @ Core string.jl:48
┌ Warning: `read(s::IO, t::Type, d1::Int, dims::Int...)` is deprecated, use `read!(s, Array{t}(undef, d1, dims...))` instead.
│   caller = read at string.jl:48 [inlined]
└ @ Core string.jl:48
┌ Warning: `Array{T}(m::Integer, n::Integer) where T` is deprecated, use `Array{T}(undef, m, n)` instead.
│   caller = read_spec(::FortranFiles.RecordWithoutSubrecords{Int32,FortranFiles.Conversion{typeof(identity),typeof(identity)}}, ::Tuple{DataType,Int32,Int32}) at read.jl:82
└ @ FortranFiles read.jl:82
┌ Warning: `Array{T}(m::Int, n::Int) where T` is deprecated, use `Array{T}(undef, m, n)` instead.
│   caller = readdata(::FortranFile{SequentialAccess{FortranFiles.WithoutSubrecords{Int32}},FortranFiles.Conversion{typeof(identity),typeof(identity)}}) at jread.jl:91
└ @ Main jread.jl:91
┌ Warning: `Array{T}(m::Int, n::Int, o::Int) where T` is deprecated, use `Array{T}(undef, m, n, o)` instead.
│   caller = readdata(::FortranFile{SequentialAccess{FortranFiles.WithoutSubrecords{Int32}},FortranFiles.Conversion{typeof(identity),typeof(identity)}}) at jread.jl:95
└ @ Main jread.jl:95
┌ Warning: `Array{T}(m::Int, n::Int) where T` is deprecated, use `Array{T}(undef, m, n)` instead.
│   caller = read_spec(::FortranFiles.RecordWithoutSubrecords{Int32,FortranFiles.Conversion{typeof(identity),typeof(identity)}}, ::Tuple{DataType,Tuple{Int64,Int64}}) at read.jl:87
└ @ FortranFiles read.jl:87
┌ Warning: `read(s::IO, t::Type, d1::Int, dims::Int...)` is deprecated, use `read!(s, Array{t}(undef, d1, dims...))` instead.
│   caller = read at string.jl:48 [inlined]
└ @ Core string.jl:48
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = readdata(::FortranFile{SequentialAccess{FortranFiles.WithoutSubrecords{Int32}},FortranFiles.Conversion{typeof(identity),typeof(identity)}}) at jread.jl:103
└ @ Main jread.jl:103
┌ Warning: `read(s::IO, t::Type, d1::Int, dims::Int...)` is deprecated, use `read!(s, Array{t}(undef, d1, dims...))` instead.
│   caller = read at string.jl:48 [inlined]
└ @ Core string.jl:48
┌ Warning: `Array{T}(m::Int, n::Int) where T` is deprecated, use `Array{T}(undef, m, n)` instead.
│   caller = read_spec(::FortranFiles.RecordWithoutSubrecords{Int32,FortranFiles.Conversion{typeof(identity),typeof(identity)}}, ::Tuple{DataType,Int64,Int64}) at read.jl:82
└ @ FortranFiles read.jl:82
┌ Warning: `read(s::IO, t::Type, d1::Int, dims::Int...)` is deprecated, use `read!(s, Array{t}(undef, d1, dims...))` instead.
│   caller = read at string.jl:48 [inlined]
└ @ Core string.jl:48
  5.309690 seconds (2.61 M allocations: 260.333 MiB, 2.92% gc time)
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = skipdata(::FortranFile{SequentialAccess{FortranFiles.WithoutSubrecords{Int32}},FortranFiles.Conversion{typeof(identity),typeof(identity)}}) at jskip.jl:3
└ @ Main jskip.jl:3
┌ Warning: `Array{T}(m::Int, n::Int, o::Int) where T` is deprecated, use `Array{T}(undef, m, n, o)` instead.
│   caller = read_spec(::FortranFiles.RecordWithoutSubrecords{Int32,FortranFiles.Conversion{typeof(identity),typeof(identity)}}, ::Tuple{DataType,Tuple{Int64,Int64,Int64}}) at read.jl:87
└ @ FortranFiles read.jl:87
┌ Warning: `Array{T}(m::Integer) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = read_spec(::FortranFiles.RecordWithoutSubrecords{Int32,FortranFiles.Conversion{typeof(identity),typeof(identity)}}, ::Tuple{DataType,Int32}) at read.jl:76
└ @ FortranFiles read.jl:76
┌ Warning: `Array{T}(m::Int, n::Int, o::Int) where T` is deprecated, use `Array{T}(undef, m, n, o)` instead.
│   caller = read_spec(::FortranFiles.RecordWithoutSubrecords{Int32,FortranFiles.Conversion{typeof(identity),typeof(identity)}}, ::Tuple{DataType,Int64,Int64,Int64}) at read.jl:82
└ @ FortranFiles read.jl:82
┌ Warning: `Array{T}(m::Int, n::Int) where T` is deprecated, use `Array{T}(undef, m, n)` instead.
│   caller = skipdata(::FortranFile{SequentialAccess{FortranFiles.WithoutSubrecords{Int32}},FortranFiles.Conversion{typeof(identity),typeof(identity)}}) at jskip.jl:22
└ @ Main jskip.jl:22
┌ Warning: `Array{T}(m::Integer, n::Integer) where T` is deprecated, use `Array{T}(undef, m, n)` instead.
│   caller = read_spec(::FortranFiles.RecordWithoutSubrecords{Int32,FortranFiles.Conversion{typeof(identity),typeof(identity)}}, ::Tuple{DataType,Tuple{Int64,Int32}}) at read.jl:87
└ @ FortranFiles read.jl:87
┌ Warning: `Array{T}(m::Int, n::Int) where T` is deprecated, use `Array{T}(undef, m, n)` instead.
│   caller = skipdata(::FortranFile{SequentialAccess{FortranFiles.WithoutSubrecords{Int32}},FortranFiles.Conversion{typeof(identity),typeof(identity)}}) at jskip.jl:34
└ @ Main jskip.jl:34
┌ Warning: `Array{T}(m::Integer, n::Integer, o::Integer) where T` is deprecated, use `Array{T}(undef, m, n, o)` instead.
│   caller = read_spec(::FortranFiles.RecordWithoutSubrecords{Int32,FortranFiles.Conversion{typeof(identity),typeof(identity)}}, ::Tuple{DataType,Int32,Int32,Int16}) at read.jl:82
└ @ FortranFiles read.jl:82
┌ Warning: `Array{T}(m::Int, n::Int, o::Int) where T` is deprecated, use `Array{T}(undef, m, n, o)` instead.
│   caller = skipdata(::FortranFile{SequentialAccess{FortranFiles.WithoutSubrecords{Int32}},FortranFiles.Conversion{typeof(identity),typeof(identity)}}) at jskip.jl:46
└ @ Main jskip.jl:46
  2.154627 seconds (1.08 M allocations: 117.303 MiB, 1.44% gc time)
┌ Warning: `shift!` is deprecated, use `popfirst!` instead.
│   caller = writedata(::FortranFile{SequentialAccess{FortranFiles.WithoutSubrecords{Int32}},FortranFiles.Conversion{typeof(identity),typeof(identity)}}, ::Array{Any,1}) at jwrite.jl:2
└ @ Main jwrite.jl:2
┌ Warning: `shift!` is deprecated, use `popfirst!` instead.
│   caller = writedata(::FortranFile{SequentialAccess{FortranFiles.WithoutSubrecords{Int32}},FortranFiles.Conversion{typeof(identity),typeof(identity)}}, ::Array{Any,1}) at jwrite.jl:5
└ @ Main jwrite.jl:5
┌ Warning: Calling `write` on non-isbits arrays is deprecated. Use a loop or `serialize` instead.
│   caller = write_var at write.jl:69 [inlined]
└ @ Core write.jl:69
┌ Warning: `shift!` is deprecated, use `popfirst!` instead.
│   caller = writedata(::FortranFile{SequentialAccess{FortranFiles.WithoutSubrecords{Int32}},FortranFiles.Conversion{typeof(identity),typeof(identity)}}, ::Array{Any,1}) at jwrite.jl:8
└ @ Main jwrite.jl:8
┌ Warning: Calling `write` on non-isbits arrays is deprecated. Use a loop or `serialize` instead.
│   caller = write_var at write.jl:69 [inlined]
└ @ Core write.jl:69
┌ Warning: `shift!` is deprecated, use `popfirst!` instead.
│   caller = writedata(::FortranFile{SequentialAccess{FortranFiles.WithoutSubrecords{Int32}},FortranFiles.Conversion{typeof(identity),typeof(identity)}}, ::Array{Any,1}) at jwrite.jl:11
└ @ Main jwrite.jl:11
┌ Warning: `shift!` is deprecated, use `popfirst!` instead.
│   caller = writedata(::FortranFile{SequentialAccess{FortranFiles.WithoutSubrecords{Int32}},FortranFiles.Conversion{typeof(identity),typeof(identity)}}, ::Array{Any,1}) at jwrite.jl:14
└ @ Main jwrite.jl:14
┌ Warning: `shift!` is deprecated, use `popfirst!` instead.
│   caller = writedata(::FortranFile{SequentialAccess{FortranFiles.WithoutSubrecords{Int32}},FortranFiles.Conversion{typeof(identity),typeof(identity)}}, ::Array{Any,1}) at jwrite.jl:17
└ @ Main jwrite.jl:17
┌ Warning: `shift!` is deprecated, use `popfirst!` instead.
│   caller = writedata(::FortranFile{SequentialAccess{FortranFiles.WithoutSubrecords{Int32}},FortranFiles.Conversion{typeof(identity),typeof(identity)}}, ::Array{Any,1}) at jwrite.jl:20
└ @ Main jwrite.jl:20
┌ Warning: `shift!` is deprecated, use `popfirst!` instead.
│   caller = writedata(::FortranFile{SequentialAccess{FortranFiles.WithoutSubrecords{Int32}},FortranFiles.Conversion{typeof(identity),typeof(identity)}}, ::Array{Any,1}) at jwrite.jl:23
└ @ Main jwrite.jl:23
┌ Warning: Calling `write` on non-isbits arrays is deprecated. Use a loop or `serialize` instead.
│   caller = write_var at write.jl:69 [inlined]
└ @ Core write.jl:69
┌ Warning: `shift!` is deprecated, use `popfirst!` instead.
│   caller = writedata(::FortranFile{SequentialAccess{FortranFiles.WithoutSubrecords{Int32}},FortranFiles.Conversion{typeof(identity),typeof(identity)}}, ::Array{Any,1}) at jwrite.jl:26
└ @ Main jwrite.jl:26
┌ Warning: Calling `write` on non-isbits arrays is deprecated. Use a loop or `serialize` instead.
│   caller = write_var at write.jl:69 [inlined]
└ @ Core write.jl:69
┌ Warning: `shift!` is deprecated, use `popfirst!` instead.
│   caller = writedata(::FortranFile{SequentialAccess{FortranFiles.WithoutSubrecords{Int32}},FortranFiles.Conversion{typeof(identity),typeof(identity)}}, ::Array{Any,1}) at jwrite.jl:29
└ @ Main jwrite.jl:29
┌ Warning: `shift!` is deprecated, use `popfirst!` instead.
│   caller = writedata(::FortranFile{SequentialAccess{FortranFiles.WithoutSubrecords{Int32}},FortranFiles.Conversion{typeof(identity),typeof(identity)}}, ::Array{Any,1}) at jwrite.jl:32
└ @ Main jwrite.jl:32
┌ Warning: `shift!` is deprecated, use `popfirst!` instead.
│   caller = writedata(::FortranFile{SequentialAccess{FortranFiles.WithoutSubrecords{Int32}},FortranFiles.Conversion{typeof(identity),typeof(identity)}}, ::Array{Any,1}) at jwrite.jl:35
└ @ Main jwrite.jl:35
┌ Warning: `shift!` is deprecated, use `popfirst!` instead.
│   caller = writedata(::FortranFile{SequentialAccess{FortranFiles.WithoutSubrecords{Int32}},FortranFiles.Conversion{typeof(identity),typeof(identity)}}, ::Array{Any,1}) at jwrite.jl:38
└ @ Main jwrite.jl:38
┌ Warning: Calling `write` on non-isbits arrays is deprecated. Use a loop or `serialize` instead.
│   caller = write_var at write.jl:69 [inlined]
└ @ Core write.jl:69
┌ Warning: `shift!` is deprecated, use `popfirst!` instead.
│   caller = writedata(::FortranFile{SequentialAccess{FortranFiles.WithoutSubrecords{Int32}},FortranFiles.Conversion{typeof(identity),typeof(identity)}}, ::Array{Any,1}) at jwrite.jl:41
└ @ Main jwrite.jl:41
┌ Warning: `shift!` is deprecated, use `popfirst!` instead.
│   caller = writedata(::FortranFile{SequentialAccess{FortranFiles.WithoutSubrecords{Int32}},FortranFiles.Conversion{typeof(identity),typeof(identity)}}, ::Array{Any,1}) at jwrite.jl:44
└ @ Main jwrite.jl:44
┌ Warning: Calling `write` on non-isbits arrays is deprecated. Use a loop or `serialize` instead.
│   caller = write_var at write.jl:69 [inlined]
└ @ Core write.jl:69
  2.134842 seconds (955.60 k allocations: 53.897 MiB, 1.06% gc time)
Test Summary:                                                                | Pass  Total
Testing records with markers of 4-byte without subrecords, native byte order |  126    126
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = readdata(::FortranFile{SequentialAccess{FortranFiles.WithoutSubrecords{Int32}},FortranFiles.Conversion{typeof(ltoh),typeof(htol)}}) at jread.jl:3
└ @ Main jread.jl:3
┌ Warning: `Array{T}(m::Integer, n::Integer, o::Integer) where T` is deprecated, use `Array{T}(undef, m, n, o)` instead.
│   caller = read_spec(::FortranFiles.RecordWithoutSubrecords{Int32,FortranFiles.Conversion{typeof(ltoh),typeof(htol)}}, ::Tuple{DataType,Int64,Int32,Int32}) at read.jl:82
└ @ FortranFiles read.jl:82
┌ Warning: `Array{T}(m::Integer) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = read_spec(::FortranFiles.RecordWithoutSubrecords{Int32,FortranFiles.Conversion{typeof(ltoh),typeof(htol)}}, ::Tuple{DataType,Int16}) at read.jl:76
└ @ FortranFiles read.jl:76
┌ Warning: `Array{T}(m::Integer, n::Integer) where T` is deprecated, use `Array{T}(undef, m, n)` instead.
│   caller = read_spec(::FortranFiles.RecordWithoutSubrecords{Int32,FortranFiles.Conversion{typeof(ltoh),typeof(htol)}}, ::Tuple{DataType,Tuple{Int32,Int64}}) at read.jl:87
└ @ FortranFiles read.jl:87
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = readdata(::FortranFile{SequentialAccess{FortranFiles.WithoutSubrecords{Int32}},FortranFiles.Conversion{typeof(ltoh),typeof(htol)}}) at jread.jl:13
└ @ Main jread.jl:13
┌ Warning: `Array{T}(m::Integer, n::Integer, o::Integer) where T` is deprecated, use `Array{T}(undef, m, n, o)` instead.
│   caller = read_spec(::FortranFiles.RecordWithoutSubrecords{Int32,FortranFiles.Conversion{typeof(ltoh),typeof(htol)}}, ::Tuple{DataType,Int16,Int64,Int64}) at read.jl:82
└ @ FortranFiles read.jl:82
┌ Warning: `read(s::IO, t::Type, d1::Int, dims::Int...)` is deprecated, use `read!(s, Array{t}(undef, d1, dims...))` instead.
│   caller = read at string.jl:48 [inlined]
└ @ Core string.jl:48
┌ Warning: `Array{T}(m::Integer, n::Integer, o::Integer) where T` is deprecated, use `Array{T}(undef, m, n, o)` instead.
│   caller = read_spec(::FortranFiles.RecordWithoutSubrecords{Int32,FortranFiles.Conversion{typeof(ltoh),typeof(htol)}}, ::Tuple{DataType,Int64,Int32,Int16}) at read.jl:82
└ @ FortranFiles read.jl:82
┌ Warning: `read(s::IO, t::Type, d1::Int, dims::Int...)` is deprecated, use `read!(s, Array{t}(undef, d1, dims...))` instead.
│   caller = read at string.jl:48 [inlined]
└ @ Core string.jl:48
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = read_spec(::FortranFiles.RecordWithoutSubrecords{Int32,FortranFiles.Conversion{typeof(ltoh),typeof(htol)}}, ::Tuple{DataType,Int64}) at read.jl:76
└ @ FortranFiles read.jl:76
┌ Warning: `Array{T}(m::Integer, n::Integer, o::Integer) where T` is deprecated, use `Array{T}(undef, m, n, o)` instead.
│   caller = read_spec(::FortranFiles.RecordWithoutSubrecords{Int32,FortranFiles.Conversion{typeof(ltoh),typeof(htol)}}, ::Tuple{DataType,Int64,Int16,Int32}) at read.jl:82
└ @ FortranFiles read.jl:82
┌ Warning: `Array{T}(m::Integer, n::Integer, o::Integer) where T` is deprecated, use `Array{T}(undef, m, n, o)` instead.
│   caller = read_spec(::FortranFiles.RecordWithoutSubrecords{Int32,FortranFiles.Conversion{typeof(ltoh),typeof(htol)}}, ::Tuple{DataType,Int64,Int16,Int16}) at read.jl:82
└ @ FortranFiles read.jl:82
┌ Warning: `Array{T}(m::Integer, n::Integer) where T` is deprecated, use `Array{T}(undef, m, n)` instead.
│   caller = read_spec(::FortranFiles.RecordWithoutSubrecords{Int32,FortranFiles.Conversion{typeof(ltoh),typeof(htol)}}, ::Tuple{DataType,Tuple{Int32,Int32}}) at read.jl:87
└ @ FortranFiles read.jl:87
┌ Warning: `Array{T}(m::Integer, n::Integer, o::Integer) where T` is deprecated, use `Array{T}(undef, m, n, o)` instead.
│   caller = read_spec(::FortranFiles.RecordWithoutSubrecords{Int32,FortranFiles.Conversion{typeof(ltoh),typeof(htol)}}, ::Tuple{DataType,Tuple{Int64,Int64,Int32}}) at read.jl:87
└ @ FortranFiles read.jl:87
┌ Warning: `Array{T}(m::Int, n::Int) where T` is deprecated, use `Array{T}(undef, m, n)` instead.
│   caller = readdata(::FortranFile{SequentialAccess{FortranFiles.WithoutSubrecords{Int32}},FortranFiles.Conversion{typeof(ltoh),typeof(htol)}}) at jread.jl:53
└ @ Main jread.jl:53
┌ Warning: `Array{T}(m::Int, n::Int) where T` is deprecated, use `Array{T}(undef, m, n)` instead.
│   caller = readdata(::FortranFile{SequentialAccess{FortranFiles.WithoutSubrecords{Int32}},FortranFiles.Conversion{typeof(ltoh),typeof(htol)}}) at jread.jl:53
└ @ Main jread.jl:53
┌ Warning: `Array{T}(m::Integer, n::Integer) where T` is deprecated, use `Array{T}(undef, m, n)` instead.
│   caller = read_spec(::FortranFiles.RecordWithoutSubrecords{Int32,FortranFiles.Conversion{typeof(ltoh),typeof(htol)}}, ::Tuple{DataType,Int16,Int32}) at read.jl:82
└ @ FortranFiles read.jl:82
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = readdata(::FortranFile{SequentialAccess{FortranFiles.WithoutSubrecords{Int32}},FortranFiles.Conversion{typeof(ltoh),typeof(htol)}}) at jread.jl:61
└ @ Main jread.jl:61
┌ Warning: `read(s::IO, t::Type, d1::Int, dims::Int...)` is deprecated, use `read!(s, Array{t}(undef, d1, dims...))` instead.
│   caller = read at string.jl:48 [inlined]
└ @ Core string.jl:48
┌ Warning: `Array{T}(m::Int, n::Int, o::Int) where T` is deprecated, use `Array{T}(undef, m, n, o)` instead.
│   caller = readdata(::FortranFile{SequentialAccess{FortranFiles.WithoutSubrecords{Int32}},FortranFiles.Conversion{typeof(ltoh),typeof(htol)}}) at jread.jl:69
└ @ Main jread.jl:69
┌ Warning: `Array{T}(m::Integer, n::Integer, o::Integer) where T` is deprecated, use `Array{T}(undef, m, n, o)` instead.
│   caller = read_spec(::FortranFiles.RecordWithoutSubrecords{Int32,FortranFiles.Conversion{typeof(ltoh),typeof(htol)}}, ::Tuple{DataType,Tuple{Int64,Int64,Int16}}) at read.jl:87
└ @ FortranFiles read.jl:87
┌ Warning: `read(s::IO, t::Type, d1::Int, dims::Int...)` is deprecated, use `read!(s, Array{t}(undef, d1, dims...))` instead.
│   caller = read at string.jl:48 [inlined]
└ @ Core string.jl:48
┌ Warning: `read(s::IO, t::Type, d1::Int, dims::Int...)` is deprecated, use `read!(s, Array{t}(undef, d1, dims...))` instead.
│   caller = read at string.jl:48 [inlined]
└ @ Core string.jl:48
┌ Warning: `Array{T}(m::Integer, n::Integer) where T` is deprecated, use `Array{T}(undef, m, n)` instead.
│   caller = read_spec(::FortranFiles.RecordWithoutSubrecords{Int32,FortranFiles.Conversion{typeof(ltoh),typeof(htol)}}, ::Tuple{DataType,Int32,Int32}) at read.jl:82
└ @ FortranFiles read.jl:82
┌ Warning: `Array{T}(m::Int, n::Int) where T` is deprecated, use `Array{T}(undef, m, n)` instead.
│   caller = readdata(::FortranFile{SequentialAccess{FortranFiles.WithoutSubrecords{Int32}},FortranFiles.Conversion{typeof(ltoh),typeof(htol)}}) at jread.jl:91
└ @ Main jread.jl:91
┌ Warning: `Array{T}(m::Int, n::Int, o::Int) where T` is deprecated, use `Array{T}(undef, m, n, o)` instead.
│   caller = readdata(::FortranFile{SequentialAccess{FortranFiles.WithoutSubrecords{Int32}},FortranFiles.Conversion{typeof(ltoh),typeof(htol)}}) at jread.jl:95
└ @ Main jread.jl:95
┌ Warning: `Array{T}(m::Int, n::Int) where T` is deprecated, use `Array{T}(undef, m, n)` instead.
│   caller = read_spec(::FortranFiles.RecordWithoutSubrecords{Int32,FortranFiles.Conversion{typeof(ltoh),typeof(htol)}}, ::Tuple{DataType,Tuple{Int64,Int64}}) at read.jl:87
└ @ FortranFiles read.jl:87
┌ Warning: `read(s::IO, t::Type, d1::Int, dims::Int...)` is deprecated, use `read!(s, Array{t}(undef, d1, dims...))` instead.
│   caller = read at string.jl:48 [inlined]
└ @ Core string.jl:48
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = readdata(::FortranFile{SequentialAccess{FortranFiles.WithoutSubrecords{Int32}},FortranFiles.Conversion{typeof(ltoh),typeof(htol)}}) at jread.jl:103
└ @ Main jread.jl:103
┌ Warning: `read(s::IO, t::Type, d1::Int, dims::Int...)` is deprecated, use `read!(s, Array{t}(undef, d1, dims...))` instead.
│   caller = read at string.jl:48 [inlined]
└ @ Core string.jl:48
┌ Warning: `Array{T}(m::Int, n::Int) where T` is deprecated, use `Array{T}(undef, m, n)` instead.
│   caller = read_spec(::FortranFiles.RecordWithoutSubrecords{Int32,FortranFiles.Conversion{typeof(ltoh),typeof(htol)}}, ::Tuple{DataType,Int64,Int64}) at read.jl:82
└ @ FortranFiles read.jl:82
┌ Warning: `read(s::IO, t::Type, d1::Int, dims::Int...)` is deprecated, use `read!(s, Array{t}(undef, d1, dims...))` instead.
│   caller = read at string.jl:48 [inlined]
└ @ Core string.jl:48
  5.813159 seconds (2.61 M allocations: 260.139 MiB, 1.44% gc time)
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = skipdata(::FortranFile{SequentialAccess{FortranFiles.WithoutSubrecords{Int32}},FortranFiles.Conversion{typeof(ltoh),typeof(htol)}}) at jskip.jl:3
└ @ Main jskip.jl:3
┌ Warning: `Array{T}(m::Int, n::Int, o::Int) where T` is deprecated, use `Array{T}(undef, m, n, o)` instead.
│   caller = read_spec(::FortranFiles.RecordWithoutSubrecords{Int32,FortranFiles.Conversion{typeof(ltoh),typeof(htol)}}, ::Tuple{DataType,Tuple{Int64,Int64,Int64}}) at read.jl:87
└ @ FortranFiles read.jl:87
┌ Warning: `Array{T}(m::Integer) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = read_spec(::FortranFiles.RecordWithoutSubrecords{Int32,FortranFiles.Conversion{typeof(ltoh),typeof(htol)}}, ::Tuple{DataType,Int32}) at read.jl:76
└ @ FortranFiles read.jl:76
┌ Warning: `Array{T}(m::Int, n::Int, o::Int) where T` is deprecated, use `Array{T}(undef, m, n, o)` instead.
│   caller = read_spec(::FortranFiles.RecordWithoutSubrecords{Int32,FortranFiles.Conversion{typeof(ltoh),typeof(htol)}}, ::Tuple{DataType,Int64,Int64,Int64}) at read.jl:82
└ @ FortranFiles read.jl:82
┌ Warning: `Array{T}(m::Int, n::Int) where T` is deprecated, use `Array{T}(undef, m, n)` instead.
│   caller = skipdata(::FortranFile{SequentialAccess{FortranFiles.WithoutSubrecords{Int32}},FortranFiles.Conversion{typeof(ltoh),typeof(htol)}}) at jskip.jl:22
└ @ Main jskip.jl:22
┌ Warning: `Array{T}(m::Integer, n::Integer) where T` is deprecated, use `Array{T}(undef, m, n)` instead.
│   caller = read_spec(::FortranFiles.RecordWithoutSubrecords{Int32,FortranFiles.Conversion{typeof(ltoh),typeof(htol)}}, ::Tuple{DataType,Tuple{Int64,Int32}}) at read.jl:87
└ @ FortranFiles read.jl:87
┌ Warning: `Array{T}(m::Int, n::Int) where T` is deprecated, use `Array{T}(undef, m, n)` instead.
│   caller = skipdata(::FortranFile{SequentialAccess{FortranFiles.WithoutSubrecords{Int32}},FortranFiles.Conversion{typeof(ltoh),typeof(htol)}}) at jskip.jl:34
└ @ Main jskip.jl:34
┌ Warning: `Array{T}(m::Integer, n::Integer, o::Integer) where T` is deprecated, use `Array{T}(undef, m, n, o)` instead.
│   caller = read_spec(::FortranFiles.RecordWithoutSubrecords{Int32,FortranFiles.Conversion{typeof(ltoh),typeof(htol)}}, ::Tuple{DataType,Int32,Int32,Int16}) at read.jl:82
└ @ FortranFiles read.jl:82
┌ Warning: `Array{T}(m::Int, n::Int, o::Int) where T` is deprecated, use `Array{T}(undef, m, n, o)` instead.
│   caller = skipdata(::FortranFile{SequentialAccess{FortranFiles.WithoutSubrecords{Int32}},FortranFiles.Conversion{typeof(ltoh),typeof(htol)}}) at jskip.jl:46
└ @ Main jskip.jl:46
  2.962275 seconds (1.08 M allocations: 117.285 MiB, 1.26% gc time)
┌ Warning: `shift!` is deprecated, use `popfirst!` instead.
│   caller = writedata(::FortranFile{SequentialAccess{FortranFiles.WithoutSubrecords{Int32}},FortranFiles.Conversion{typeof(ltoh),typeof(htol)}}, ::Array{Any,1}) at jwrite.jl:2
└ @ Main jwrite.jl:2
┌ Warning: `shift!` is deprecated, use `popfirst!` instead.
│   caller = writedata(::FortranFile{SequentialAccess{FortranFiles.WithoutSubrecords{Int32}},FortranFiles.Conversion{typeof(ltoh),typeof(htol)}}, ::Array{Any,1}) at jwrite.jl:5
└ @ Main jwrite.jl:5
┌ Warning: `shift!` is deprecated, use `popfirst!` instead.
│   caller = writedata(::FortranFile{SequentialAccess{FortranFiles.WithoutSubrecords{Int32}},FortranFiles.Conversion{typeof(ltoh),typeof(htol)}}, ::Array{Any,1}) at jwrite.jl:8
└ @ Main jwrite.jl:8
┌ Warning: `shift!` is deprecated, use `popfirst!` instead.
│   caller = writedata(::FortranFile{SequentialAccess{FortranFiles.WithoutSubrecords{Int32}},FortranFiles.Conversion{typeof(ltoh),typeof(htol)}}, ::Array{Any,1}) at jwrite.jl:11
└ @ Main jwrite.jl:11
┌ Warning: `shift!` is deprecated, use `popfirst!` instead.
│   caller = writedata(::FortranFile{SequentialAccess{FortranFiles.WithoutSubrecords{Int32}},FortranFiles.Conversion{typeof(ltoh),typeof(htol)}}, ::Array{Any,1}) at jwrite.jl:14
└ @ Main jwrite.jl:14
┌ Warning: `shift!` is deprecated, use `popfirst!` instead.
│   caller = writedata(::FortranFile{SequentialAccess{FortranFiles.WithoutSubrecords{Int32}},FortranFiles.Conversion{typeof(ltoh),typeof(htol)}}, ::Array{Any,1}) at jwrite.jl:17
└ @ Main jwrite.jl:17
┌ Warning: `shift!` is deprecated, use `popfirst!` instead.
│   caller = writedata(::FortranFile{SequentialAccess{FortranFiles.WithoutSubrecords{Int32}},FortranFiles.Conversion{typeof(ltoh),typeof(htol)}}, ::Array{Any,1}) at jwrite.jl:20
└ @ Main jwrite.jl:20
┌ Warning: `shift!` is deprecated, use `popfirst!` instead.
│   caller = writedata(::FortranFile{SequentialAccess{FortranFiles.WithoutSubrecords{Int32}},FortranFiles.Conversion{typeof(ltoh),typeof(htol)}}, ::Array{Any,1}) at jwrite.jl:23
└ @ Main jwrite.jl:23
┌ Warning: `shift!` is deprecated, use `popfirst!` instead.
│   caller = writedata(::FortranFile{SequentialAccess{FortranFiles.WithoutSubrecords{Int32}},FortranFiles.Conversion{typeof(ltoh),typeof(htol)}}, ::Array{Any,1}) at jwrite.jl:26
└ @ Main jwrite.jl:26
┌ Warning: `shift!` is deprecated, use `popfirst!` instead.
│   caller = writedata(::FortranFile{SequentialAccess{FortranFiles.WithoutSubrecords{Int32}},FortranFiles.Conversion{typeof(ltoh),typeof(htol)}}, ::Array{Any,1}) at jwrite.jl:29
└ @ Main jwrite.jl:29
┌ Warning: `shift!` is deprecated, use `popfirst!` instead.
│   caller = writedata(::FortranFile{SequentialAccess{FortranFiles.WithoutSubrecords{Int32}},FortranFiles.Conversion{typeof(ltoh),typeof(htol)}}, ::Array{Any,1}) at jwrite.jl:32
└ @ Main jwrite.jl:32
┌ Warning: `shift!` is deprecated, use `popfirst!` instead.
│   caller = writedata(::FortranFile{SequentialAccess{FortranFiles.WithoutSubrecords{Int32}},FortranFiles.Conversion{typeof(ltoh),typeof(htol)}}, ::Array{Any,1}) at jwrite.jl:35
└ @ Main jwrite.jl:35
┌ Warning: `shift!` is deprecated, use `popfirst!` instead.
│   caller = writedata(::FortranFile{SequentialAccess{FortranFiles.WithoutSubrecords{Int32}},FortranFiles.Conversion{typeof(ltoh),typeof(htol)}}, ::Array{Any,1}) at jwrite.jl:38
└ @ Main jwrite.jl:38
┌ Warning: `shift!` is deprecated, use `popfirst!` instead.
│   caller = writedata(::FortranFile{SequentialAccess{FortranFiles.WithoutSubrecords{Int32}},FortranFiles.Conversion{typeof(ltoh),typeof(htol)}}, ::Array{Any,1}) at jwrite.jl:41
└ @ Main jwrite.jl:41
┌ Warning: `shift!` is deprecated, use `popfirst!` instead.
│   caller = writedata(::FortranFile{SequentialAccess{FortranFiles.WithoutSubrecords{Int32}},FortranFiles.Conversion{typeof(ltoh),typeof(htol)}}, ::Array{Any,1}) at jwrite.jl:44
└ @ Main jwrite.jl:44
  2.549699 seconds (1.17 M allocations: 56.347 MiB, 1.04% gc time)
Test Summary:                                                                       | Pass  Total
Testing records with markers of 4-byte without subrecords, little-endian byte order |  126    126
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = readdata(::FortranFile{SequentialAccess{FortranFiles.WithoutSubrecords{Int32}},FortranFiles.Conversion{typeof(ntoh),typeof(hton)}}) at jread.jl:3
└ @ Main jread.jl:3
┌ Warning: `Array{T}(m::Integer, n::Integer, o::Integer) where T` is deprecated, use `Array{T}(undef, m, n, o)` instead.
│   caller = read_spec(::FortranFiles.RecordWithoutSubrecords{Int32,FortranFiles.Conversion{typeof(ntoh),typeof(hton)}}, ::Tuple{DataType,Int64,Int32,Int32}) at read.jl:82
└ @ FortranFiles read.jl:82
┌ Warning: `Array{T}(m::Integer) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = read_spec(::FortranFiles.RecordWithoutSubrecords{Int32,FortranFiles.Conversion{typeof(ntoh),typeof(hton)}}, ::Tuple{DataType,Int16}) at read.jl:76
└ @ FortranFiles read.jl:76
┌ Warning: `Array{T}(m::Integer, n::Integer) where T` is deprecated, use `Array{T}(undef, m, n)` instead.
│   caller = read_spec(::FortranFiles.RecordWithoutSubrecords{Int32,FortranFiles.Conversion{typeof(ntoh),typeof(hton)}}, ::Tuple{DataType,Tuple{Int32,Int64}}) at read.jl:87
└ @ FortranFiles read.jl:87
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = readdata(::FortranFile{SequentialAccess{FortranFiles.WithoutSubrecords{Int32}},FortranFiles.Conversion{typeof(ntoh),typeof(hton)}}) at jread.jl:13
└ @ Main jread.jl:13
┌ Warning: `Array{T}(m::Integer, n::Integer, o::Integer) where T` is deprecated, use `Array{T}(undef, m, n, o)` instead.
│   caller = read_spec(::FortranFiles.RecordWithoutSubrecords{Int32,FortranFiles.Conversion{typeof(ntoh),typeof(hton)}}, ::Tuple{DataType,Int16,Int64,Int64}) at read.jl:82
└ @ FortranFiles read.jl:82
┌ Warning: `read(s::IO, t::Type, d1::Int, dims::Int...)` is deprecated, use `read!(s, Array{t}(undef, d1, dims...))` instead.
│   caller = read at string.jl:48 [inlined]
└ @ Core string.jl:48
┌ Warning: `Array{T}(m::Integer, n::Integer, o::Integer) where T` is deprecated, use `Array{T}(undef, m, n, o)` instead.
│   caller = read_spec(::FortranFiles.RecordWithoutSubrecords{Int32,FortranFiles.Conversion{typeof(ntoh),typeof(hton)}}, ::Tuple{DataType,Int64,Int32,Int16}) at read.jl:82
└ @ FortranFiles read.jl:82
┌ Warning: `read(s::IO, t::Type, d1::Int, dims::Int...)` is deprecated, use `read!(s, Array{t}(undef, d1, dims...))` instead.
│   caller = read at string.jl:48 [inlined]
└ @ Core string.jl:48
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = read_spec(::FortranFiles.RecordWithoutSubrecords{Int32,FortranFiles.Conversion{typeof(ntoh),typeof(hton)}}, ::Tuple{DataType,Int64}) at read.jl:76
└ @ FortranFiles read.jl:76
┌ Warning: `Array{T}(m::Integer, n::Integer, o::Integer) where T` is deprecated, use `Array{T}(undef, m, n, o)` instead.
│   caller = read_spec(::FortranFiles.RecordWithoutSubrecords{Int32,FortranFiles.Conversion{typeof(ntoh),typeof(hton)}}, ::Tuple{DataType,Int64,Int16,Int32}) at read.jl:82
└ @ FortranFiles read.jl:82
┌ Warning: `Array{T}(m::Integer, n::Integer, o::Integer) where T` is deprecated, use `Array{T}(undef, m, n, o)` instead.
│   caller = read_spec(::FortranFiles.RecordWithoutSubrecords{Int32,FortranFiles.Conversion{typeof(ntoh),typeof(hton)}}, ::Tuple{DataType,Int64,Int16,Int16}) at read.jl:82
└ @ FortranFiles read.jl:82
┌ Warning: `Array{T}(m::Integer, n::Integer) where T` is deprecated, use `Array{T}(undef, m, n)` instead.
│   caller = read_spec(::FortranFiles.RecordWithoutSubrecords{Int32,FortranFiles.Conversion{typeof(ntoh),typeof(hton)}}, ::Tuple{DataType,Tuple{Int32,Int32}}) at read.jl:87
└ @ FortranFiles read.jl:87
┌ Warning: `Array{T}(m::Integer, n::Integer, o::Integer) where T` is deprecated, use `Array{T}(undef, m, n, o)` instead.
│   caller = read_spec(::FortranFiles.RecordWithoutSubrecords{Int32,FortranFiles.Conversion{typeof(ntoh),typeof(hton)}}, ::Tuple{DataType,Tuple{Int64,Int64,Int32}}) at read.jl:87
└ @ FortranFiles read.jl:87
┌ Warning: `Array{T}(m::Int, n::Int) where T` is deprecated, use `Array{T}(undef, m, n)` instead.
│   caller = readdata(::FortranFile{SequentialAccess{FortranFiles.WithoutSubrecords{Int32}},FortranFiles.Conversion{typeof(ntoh),typeof(hton)}}) at jread.jl:53
└ @ Main jread.jl:53
┌ Warning: `Array{T}(m::Int, n::Int) where T` is deprecated, use `Array{T}(undef, m, n)` instead.
│   caller = readdata(::FortranFile{SequentialAccess{FortranFiles.WithoutSubrecords{Int32}},FortranFiles.Conversion{typeof(ntoh),typeof(hton)}}) at jread.jl:53
└ @ Main jread.jl:53
┌ Warning: `Array{T}(m::Integer, n::Integer) where T` is deprecated, use `Array{T}(undef, m, n)` instead.
│   caller = read_spec(::FortranFiles.RecordWithoutSubrecords{Int32,FortranFiles.Conversion{typeof(ntoh),typeof(hton)}}, ::Tuple{DataType,Int16,Int32}) at read.jl:82
└ @ FortranFiles read.jl:82
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = readdata(::FortranFile{SequentialAccess{FortranFiles.WithoutSubrecords{Int32}},FortranFiles.Conversion{typeof(ntoh),typeof(hton)}}) at jread.jl:61
└ @ Main jread.jl:61
┌ Warning: `read(s::IO, t::Type, d1::Int, dims::Int...)` is deprecated, use `read!(s, Array{t}(undef, d1, dims...))` instead.
│   caller = read at string.jl:48 [inlined]
└ @ Core string.jl:48
┌ Warning: `Array{T}(m::Int, n::Int, o::Int) where T` is deprecated, use `Array{T}(undef, m, n, o)` instead.
│   caller = readdata(::FortranFile{SequentialAccess{FortranFiles.WithoutSubrecords{Int32}},FortranFiles.Conversion{typeof(ntoh),typeof(hton)}}) at jread.jl:69
└ @ Main jread.jl:69
┌ Warning: `Array{T}(m::Integer, n::Integer, o::Integer) where T` is deprecated, use `Array{T}(undef, m, n, o)` instead.
│   caller = read_spec(::FortranFiles.RecordWithoutSubrecords{Int32,FortranFiles.Conversion{typeof(ntoh),typeof(hton)}}, ::Tuple{DataType,Tuple{Int64,Int64,Int16}}) at read.jl:87
└ @ FortranFiles read.jl:87
┌ Warning: `read(s::IO, t::Type, d1::Int, dims::Int...)` is deprecated, use `read!(s, Array{t}(undef, d1, dims...))` instead.
│   caller = read at string.jl:48 [inlined]
└ @ Core string.jl:48
┌ Warning: `read(s::IO, t::Type, d1::Int, dims::Int...)` is deprecated, use `read!(s, Array{t}(undef, d1, dims...))` instead.
│   caller = read at string.jl:48 [inlined]
└ @ Core string.jl:48
┌ Warning: `Array{T}(m::Integer, n::Integer) where T` is deprecated, use `Array{T}(undef, m, n)` instead.
│   caller = read_spec(::FortranFiles.RecordWithoutSubrecords{Int32,FortranFiles.Conversion{typeof(ntoh),typeof(hton)}}, ::Tuple{DataType,Int32,Int32}) at read.jl:82
└ @ FortranFiles read.jl:82
┌ Warning: `Array{T}(m::Int, n::Int) where T` is deprecated, use `Array{T}(undef, m, n)` instead.
│   caller = readdata(::FortranFile{SequentialAccess{FortranFiles.WithoutSubrecords{Int32}},FortranFiles.Conversion{typeof(ntoh),typeof(hton)}}) at jread.jl:91
└ @ Main jread.jl:91
┌ Warning: `Array{T}(m::Int, n::Int, o::Int) where T` is deprecated, use `Array{T}(undef, m, n, o)` instead.
│   caller = readdata(::FortranFile{SequentialAccess{FortranFiles.WithoutSubrecords{Int32}},FortranFiles.Conversion{typeof(ntoh),typeof(hton)}}) at jread.jl:95
└ @ Main jread.jl:95
┌ Warning: `Array{T}(m::Int, n::Int) where T` is deprecated, use `Array{T}(undef, m, n)` instead.
│   caller = read_spec(::FortranFiles.RecordWithoutSubrecords{Int32,FortranFiles.Conversion{typeof(ntoh),typeof(hton)}}, ::Tuple{DataType,Tuple{Int64,Int64}}) at read.jl:87
└ @ FortranFiles read.jl:87
┌ Warning: `read(s::IO, t::Type, d1::Int, dims::Int...)` is deprecated, use `read!(s, Array{t}(undef, d1, dims...))` instead.
│   caller = read at string.jl:48 [inlined]
└ @ Core string.jl:48
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = readdata(::FortranFile{SequentialAccess{FortranFiles.WithoutSubrecords{Int32}},FortranFiles.Conversion{typeof(ntoh),typeof(hton)}}) at jread.jl:103
└ @ Main jread.jl:103
┌ Warning: `read(s::IO, t::Type, d1::Int, dims::Int...)` is deprecated, use `read!(s, Array{t}(undef, d1, dims...))` instead.
│   caller = read at string.jl:48 [inlined]
└ @ Core string.jl:48
┌ Warning: `Array{T}(m::Int, n::Int) where T` is deprecated, use `Array{T}(undef, m, n)` instead.
│   caller = read_spec(::FortranFiles.RecordWithoutSubrecords{Int32,FortranFiles.Conversion{typeof(ntoh),typeof(hton)}}, ::Tuple{DataType,Int64,Int64}) at read.jl:82
└ @ FortranFiles read.jl:82
┌ Warning: `read(s::IO, t::Type, d1::Int, dims::Int...)` is deprecated, use `read!(s, Array{t}(undef, d1, dims...))` instead.
│   caller = read at string.jl:48 [inlined]
└ @ Core string.jl:48
  7.212740 seconds (2.61 M allocations: 260.349 MiB, 2.83% gc time)
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = skipdata(::FortranFile{SequentialAccess{FortranFiles.WithoutSubrecords{Int32}},FortranFiles.Conversion{typeof(ntoh),typeof(hton)}}) at jskip.jl:3
└ @ Main jskip.jl:3
┌ Warning: `Array{T}(m::Int, n::Int, o::Int) where T` is deprecated, use `Array{T}(undef, m, n, o)` instead.
│   caller = read_spec(::FortranFiles.RecordWithoutSubrecords{Int32,FortranFiles.Conversion{typeof(ntoh),typeof(hton)}}, ::Tuple{DataType,Tuple{Int64,Int64,Int64}}) at read.jl:87
└ @ FortranFiles read.jl:87
┌ Warning: `Array{T}(m::Integer) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = read_spec(::FortranFiles.RecordWithoutSubrecords{Int32,FortranFiles.Conversion{typeof(ntoh),typeof(hton)}}, ::Tuple{DataType,Int32}) at read.jl:76
└ @ FortranFiles read.jl:76
┌ Warning: `Array{T}(m::Int, n::Int, o::Int) where T` is deprecated, use `Array{T}(undef, m, n, o)` instead.
│   caller = read_spec(::FortranFiles.RecordWithoutSubrecords{Int32,FortranFiles.Conversion{typeof(ntoh),typeof(hton)}}, ::Tuple{DataType,Int64,Int64,Int64}) at read.jl:82
└ @ FortranFiles read.jl:82
┌ Warning: `Array{T}(m::Int, n::Int) where T` is deprecated, use `Array{T}(undef, m, n)` instead.
│   caller = skipdata(::FortranFile{SequentialAccess{FortranFiles.WithoutSubrecords{Int32}},FortranFiles.Conversion{typeof(ntoh),typeof(hton)}}) at jskip.jl:22
└ @ Main jskip.jl:22
┌ Warning: `Array{T}(m::Integer, n::Integer) where T` is deprecated, use `Array{T}(undef, m, n)` instead.
│   caller = read_spec(::FortranFiles.RecordWithoutSubrecords{Int32,FortranFiles.Conversion{typeof(ntoh),typeof(hton)}}, ::Tuple{DataType,Tuple{Int64,Int32}}) at read.jl:87
└ @ FortranFiles read.jl:87
┌ Warning: `Array{T}(m::Int, n::Int) where T` is deprecated, use `Array{T}(undef, m, n)` instead.
│   caller = skipdata(::FortranFile{SequentialAccess{FortranFiles.WithoutSubrecords{Int32}},FortranFiles.Conversion{typeof(ntoh),typeof(hton)}}) at jskip.jl:34
└ @ Main jskip.jl:34
┌ Warning: `Array{T}(m::Integer, n::Integer, o::Integer) where T` is deprecated, use `Array{T}(undef, m, n, o)` instead.
│   caller = read_spec(::FortranFiles.RecordWithoutSubrecords{Int32,FortranFiles.Conversion{typeof(ntoh),typeof(hton)}}, ::Tuple{DataType,Int32,Int32,Int16}) at read.jl:82
└ @ FortranFiles read.jl:82
┌ Warning: `Array{T}(m::Int, n::Int, o::Int) where T` is deprecated, use `Array{T}(undef, m, n, o)` instead.
│   caller = skipdata(::FortranFile{SequentialAccess{FortranFiles.WithoutSubrecords{Int32}},FortranFiles.Conversion{typeof(ntoh),typeof(hton)}}) at jskip.jl:46
└ @ Main jskip.jl:46
  3.275972 seconds (1.08 M allocations: 117.291 MiB, 1.20% gc time)
┌ Warning: `shift!` is deprecated, use `popfirst!` instead.
│   caller = writedata(::FortranFile{SequentialAccess{FortranFiles.WithoutSubrecords{Int32}},FortranFiles.Conversion{typeof(ntoh),typeof(hton)}}, ::Array{Any,1}) at jwrite.jl:2
└ @ Main jwrite.jl:2
┌ Warning: `shift!` is deprecated, use `popfirst!` instead.
│   caller = writedata(::FortranFile{SequentialAccess{FortranFiles.WithoutSubrecords{Int32}},FortranFiles.Conversion{typeof(ntoh),typeof(hton)}}, ::Array{Any,1}) at jwrite.jl:5
└ @ Main jwrite.jl:5
┌ Warning: `shift!` is deprecated, use `popfirst!` instead.
│   caller = writedata(::FortranFile{SequentialAccess{FortranFiles.WithoutSubrecords{Int32}},FortranFiles.Conversion{typeof(ntoh),typeof(hton)}}, ::Array{Any,1}) at jwrite.jl:8
└ @ Main jwrite.jl:8
┌ Warning: `shift!` is deprecated, use `popfirst!` instead.
│   caller = writedata(::FortranFile{SequentialAccess{FortranFiles.WithoutSubrecords{Int32}},FortranFiles.Conversion{typeof(ntoh),typeof(hton)}}, ::Array{Any,1}) at jwrite.jl:11
└ @ Main jwrite.jl:11
┌ Warning: `shift!` is deprecated, use `popfirst!` instead.
│   caller = writedata(::FortranFile{SequentialAccess{FortranFiles.WithoutSubrecords{Int32}},FortranFiles.Conversion{typeof(ntoh),typeof(hton)}}, ::Array{Any,1}) at jwrite.jl:14
└ @ Main jwrite.jl:14
┌ Warning: `shift!` is deprecated, use `popfirst!` instead.
│   caller = writedata(::FortranFile{SequentialAccess{FortranFiles.WithoutSubrecords{Int32}},FortranFiles.Conversion{typeof(ntoh),typeof(hton)}}, ::Array{Any,1}) at jwrite.jl:17
└ @ Main jwrite.jl:17
┌ Warning: `shift!` is deprecated, use `popfirst!` instead.
│   caller = writedata(::FortranFile{SequentialAccess{FortranFiles.WithoutSubrecords{Int32}},FortranFiles.Conversion{typeof(ntoh),typeof(hton)}}, ::Array{Any,1}) at jwrite.jl:20
└ @ Main jwrite.jl:20
┌ Warning: `shift!` is deprecated, use `popfirst!` instead.
│   caller = writedata(::FortranFile{SequentialAccess{FortranFiles.WithoutSubrecords{Int32}},FortranFiles.Conversion{typeof(ntoh),typeof(hton)}}, ::Array{Any,1}) at jwrite.jl:23
└ @ Main jwrite.jl:23
┌ Warning: `shift!` is deprecated, use `popfirst!` instead.
│   caller = writedata(::FortranFile{SequentialAccess{FortranFiles.WithoutSubrecords{Int32}},FortranFiles.Conversion{typeof(ntoh),typeof(hton)}}, ::Array{Any,1}) at jwrite.jl:26
└ @ Main jwrite.jl:26
┌ Warning: `shift!` is deprecated, use `popfirst!` instead.
│   caller = writedata(::FortranFile{SequentialAccess{FortranFiles.WithoutSubrecords{Int32}},FortranFiles.Conversion{typeof(ntoh),typeof(hton)}}, ::Array{Any,1}) at jwrite.jl:29
└ @ Main jwrite.jl:29
┌ Warning: `shift!` is deprecated, use `popfirst!` instead.
│   caller = writedata(::FortranFile{SequentialAccess{FortranFiles.WithoutSubrecords{Int32}},FortranFiles.Conversion{typeof(ntoh),typeof(hton)}}, ::Array{Any,1}) at jwrite.jl:32
└ @ Main jwrite.jl:32
┌ Warning: `shift!` is deprecated, use `popfirst!` instead.
│   caller = writedata(::FortranFile{SequentialAccess{FortranFiles.WithoutSubrecords{Int32}},FortranFiles.Conversion{typeof(ntoh),typeof(hton)}}, ::Array{Any,1}) at jwrite.jl:35
└ @ Main jwrite.jl:35
┌ Warning: `shift!` is deprecated, use `popfirst!` instead.
│   caller = writedata(::FortranFile{SequentialAccess{FortranFiles.WithoutSubrecords{Int32}},FortranFiles.Conversion{typeof(ntoh),typeof(hton)}}, ::Array{Any,1}) at jwrite.jl:38
└ @ Main jwrite.jl:38
┌ Warning: `shift!` is deprecated, use `popfirst!` instead.
│   caller = writedata(::FortranFile{SequentialAccess{FortranFiles.WithoutSubrecords{Int32}},FortranFiles.Conversion{typeof(ntoh),typeof(hton)}}, ::Array{Any,1}) at jwrite.jl:41
└ @ Main jwrite.jl:41
┌ Warning: `shift!` is deprecated, use `popfirst!` instead.
│   caller = writedata(::FortranFile{SequentialAccess{FortranFiles.WithoutSubrecords{Int32}},FortranFiles.Conversion{typeof(ntoh),typeof(hton)}}, ::Array{Any,1}) at jwrite.jl:44
└ @ Main jwrite.jl:44
  2.808581 seconds (1.18 M allocations: 56.782 MiB, 1.34% gc time)
Test Summary:                                                                    | Pass  Total
Testing records with markers of 4-byte without subrecords, big-endian byte order |  126    126
[ Info: FortranFiles tests passed
[ Info: No packages to install, update or remove

>>> End of log
