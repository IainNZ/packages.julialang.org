>>> 'Pkg.add("IncrementalInference")' log
INFO: Cloning cache of DiffBase from https://github.com/JuliaDiff/DiffBase.jl.git
INFO: Cloning cache of IncrementalInference from https://github.com/JuliaRobotics/IncrementalInference.jl.git
INFO: Cloning cache of KernelDensityEstimate from https://github.com/JuliaRobotics/KernelDensityEstimate.jl.git
INFO: Cloning cache of NLsolve from https://github.com/JuliaNLSolvers/NLsolve.jl.git
INFO: Installing BinDeps v0.8.8
INFO: Installing BinaryProvider v0.3.3
INFO: Installing Blosc v0.5.0
INFO: Installing CMakeWrapper v0.1.0
INFO: Installing Calculus v0.4.0
INFO: Installing CommonSubexpressions v0.1.0
INFO: Installing DataStructures v0.8.4
INFO: Installing DiffBase v0.3.2
INFO: Installing DiffEqDiffTools v0.4.1
INFO: Installing DiffResults v0.0.3
INFO: Installing DiffRules v0.0.6
INFO: Installing Distances v0.6.0
INFO: Installing Distributions v0.15.0
INFO: Installing DocStringExtensions v0.4.5
INFO: Installing FileIO v0.9.1
INFO: Installing ForwardDiff v0.7.5
INFO: Installing Graphs v0.9.0
INFO: Installing HDF5 v0.9.3
INFO: Installing IncrementalInference v0.3.6
INFO: Installing JLD v0.8.3
INFO: Installing KernelDensityEstimate v0.3.0
INFO: Installing LegacyStrings v0.3.0
INFO: Installing LineSearches v3.2.5
INFO: Installing Missings v0.2.10
INFO: Installing NLSolversBase v4.4.1
INFO: Installing NLsolve v1.0.1
INFO: Installing NaNMath v0.3.1
INFO: Installing Optim v0.14.1
INFO: Installing PDMats v0.8.0
INFO: Installing Parameters v0.9.0
INFO: Installing PositiveFactorizations v0.1.0
INFO: Installing ProgressMeter v0.5.6
INFO: Installing QuadGK v0.3.0
INFO: Installing Rmath v0.4.0
INFO: Installing SHA v0.5.7
INFO: Installing SortingAlgorithms v0.2.1
INFO: Installing SpecialFunctions v0.6.0
INFO: Installing StaticArrays v0.7.2
INFO: Installing StatsBase v0.23.1
INFO: Installing StatsFuns v0.6.1
INFO: Installing URIParser v0.3.1
INFO: Building CMakeWrapper
INFO: Building Blosc
INFO: Building SpecialFunctions
INFO: Building Rmath
INFO: Building HDF5
INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of IncrementalInference
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("IncrementalInference")' log
Julia Version 0.6.4
Commit 9d11f62bcb (2018-07-09 19:09 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-143-generic #192-Ubuntu SMP Tue Feb 27 10:45:36 UTC 2018 x86_64 x86_64
Memory: 2.939197540283203 GB (1039.3671875 MB free)
Uptime: 27122.0 sec
Load Avg:  0.8818359375  0.982421875  1.0185546875
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3501 MHz    1499951 s       5054 s     125122 s     711614 s          4 s
#2  3501 MHz     274733 s        359 s      50340 s    2343851 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem MAX_THREADS=16)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.6
2 required packages:
 - IncrementalInference          0.3.6
 - JSON                          0.17.2
42 additional packages:
 - BinDeps                       0.8.8
 - BinaryProvider                0.3.3
 - Blosc                         0.5.0
 - CMakeWrapper                  0.1.0
 - Calculus                      0.4.0
 - CommonSubexpressions          0.1.0
 - Compat                        0.69.0
 - DataStructures                0.8.4
 - DiffBase                      0.3.2
 - DiffEqDiffTools               0.4.1
 - DiffResults                   0.0.3
 - DiffRules                     0.0.6
 - Distances                     0.6.0
 - Distributions                 0.15.0
 - DocStringExtensions           0.4.5
 - FileIO                        0.9.1
 - ForwardDiff                   0.7.5
 - Graphs                        0.9.0
 - HDF5                          0.9.3
 - JLD                           0.8.3
 - KernelDensityEstimate         0.3.0
 - LegacyStrings                 0.3.0
 - LineSearches                  3.2.5
 - Missings                      0.2.10
 - NLSolversBase                 4.4.1
 - NLsolve                       1.0.1
 - NaNMath                       0.3.1
 - Nullables                     0.0.6
 - Optim                         0.14.1
 - PDMats                        0.8.0
 - Parameters                    0.9.0
 - PositiveFactorizations        0.1.0
 - ProgressMeter                 0.5.6
 - QuadGK                        0.3.0
 - Rmath                         0.4.0
 - SHA                           0.5.7
 - SortingAlgorithms             0.2.1
 - SpecialFunctions              0.6.0
 - StaticArrays                  0.7.2
 - StatsBase                     0.23.1
 - StatsFuns                     0.6.1
 - URIParser                     0.3.1
INFO: Testing IncrementalInference
[TEST] out of module evalPotential...
evalPotential sees Second.SecondType(1)
evalPotential also sees Second.SecondAgain(3)
evalPotential sees Second.SecondType(1)
evalPotential sees Second.SecondType(1)
evalPotential also sees Second.SecondAgain(3)
Check the speed is reasonable
Success
[TEST] Ensure memory return is working properly...Success
[TEST] basic Bayes tree construction
WARNING: Method definition getType(KernelDensityEstimate.BallTreeDensity) in module KernelDensityEstimate at /home/vagrant/.julia/v0.6/KernelDensityEstimate/src/BallTreeDensity01.jl:28 overwritten at /home/vagrant/.julia/v0.6/KernelDensityEstimate/src/KDE01.jl:43.
WARNING: using KernelDensityEstimate.root in module IncrementalInference conflicts with an existing identifier.
WARNING: using KernelDensityEstimate.sample in module IncrementalInference conflicts with an existing identifier.
WARNING: using KernelDensityEstimate.sample in module IncrementalInference conflicts with an existing identifier.
WARNING: using KernelDensityEstimate.root in module IncrementalInference conflicts with an existing identifier.
WARNING: using IncrementalInference.evalPotential in module Main conflicts with an existing identifier.
[drct][drct][2x0p,d1,N100],[drct]
Building Bayes net...
(vert.label, getData(vert).BayesNetVertID) = ("l1", 0)
(vert.label, getData(vert).BayesNetVertID) = ("l2", 0)
(vert.label, getData(vert).BayesNetVertID) = ("x1", 0)
(vert.label, getData(vert).BayesNetVertID) = ("x2", 0)
(vert.label, getData(vert).BayesNetVertID) = ("x3", 0)

Eliminating 7
===============

adding marginal to
x.index = 1
x.index = 3

Eliminating 10
===============

adding marginal to
x.index = 5

Eliminating 1
===============

adding marginal to
x.index = 3

Eliminating 3
===============

adding marginal to
x.index = 5

Eliminating 5
===============

adding marginal to
Find potential functions for each clique
Get potentials x1,l1,: x2,
Get potentials l2,: x3,
Get potentials x3,x2,: 
Success
[TEST] Ensure converter types can be run from extending namespaces...Success
[TEST] packing converters work...
[drct]Test Summary:                                                      | Pass  Total
Testing conversion to packed function node data structure and back |    2      2
Test Summary:                                                      | Pass  Total
Testing conversion to packed variable node data structure and back |    2      2
Success
[TEST] generic root finding by numeric solve of residual functions...
WARNING: numericRootGenericRandomizedFnc!(fgr::FastGenericRoot{T}...) deprecated, use numericRootGenericRandomizedFnc!(fgr::FastRootGenericWrapRoot{T}...) instead.
WARNING: numericRootGenericRandomizedFnc!(fgr::FastGenericRoot{T}...) deprecated, use numericRootGenericRandomizedFnc!(fgr::FastRootGenericWrapRoot{T}...) instead.
WARNING: numericRootGenericRandomizedFnc!(fgr::FastGenericRoot{T}...) deprecated, use numericRootGenericRandomizedFnc!(fgr::FastRootGenericWrapRoot{T}...) instead.
Test shuffling function
x0 = collect(11:13) + 0.0 = [11.0, 12.0, 13.0]
WARNING: numericRootGenericRandomizedFnc!(fgr::FastGenericRoot{T}...) deprecated, use numericRootGenericRandomizedFnc!(fgr::FastRootGenericWrapRoot{T}...) instead.
res = [11.0, 12.0]
x = [11.0, 12.0, 13.0]
res = [6.92039e-310, 6.92038e-310]
x = [11.0001, 12.0, 13.0]
res = [NaN, 6.92038e-310]
x = [10.9999, 12.0, 13.0]
res = [3.73655e9, 1.89954e10]
x = [11.0, 12.0001, 13.0]
res = [8.69631e9, 1.848e10]
x = [11.0, 11.9999, 13.0]
y = [11.0, 12.0, 13.0]
y .% 10 = [1.0, 2.0, 3.0]
yy = y .% 10.0 = [1.0, 2.0, 3.0]
WARNING: numericRootGenericRandomizedFnc!(fgr::FastGenericRoot{T}...) deprecated, use numericRootGenericRandomizedFnc!(fgr::FastRootGenericWrapRoot{T}...) instead.
res = [11.0, 12.0]
x = [11.0, 12.0, 13.0]
res = [6.9204e-310, 6.92038e-310]
x = [11.0001, 12.0, 13.0]
res = [6.92038e-310, 6.9204e-310]
x = [10.9999, 12.0, 13.0]
res = [-9.24144e9, -2.34023e10]
x = [11.0, 12.0001, 13.0]
res = [6.48306e9, -5.96888e9]
x = [11.0, 11.9999, 13.0]
y = [11.0, 12.0, 13.0]
y .% 10 = [1.0, 2.0, 3.0]
yy = y .% 10.0 = [1.0, 2.0, 3.0]
WARNING: numericRootGenericRandomizedFnc!(fgr::FastGenericRoot{T}...) deprecated, use numericRootGenericRandomizedFnc!(fgr::FastRootGenericWrapRoot{T}...) instead.
res = [12.0, 11.0]
x = [11.0, 12.0, 13.0]
res = [6.9204e-310, 6.92038e-310]
x = [11.0, 12.0001, 13.0]
res = [6.9204e-310, 6.9204e-310]
x = [11.0, 11.9999, 13.0]
res = [-1.60225e10, -1.70348e10]
x = [11.0001, 12.0, 13.0]
res = [1.72648e10, 6.35861e9]
x = [10.9999, 12.0, 13.0]
y = [11.0, 12.0, 13.0]
y .% 10 = [1.0, 2.0, 3.0]
yy = y .% 10.0 = [1.0, 2.0, 3.0]
WARNING: numericRootGenericRandomizedFnc!(fgr::FastGenericRoot{T}...) deprecated, use numericRootGenericRandomizedFnc!(fgr::FastRootGenericWrapRoot{T}...) instead.
res = [12.0, 13.0]
x = [11.0, 12.0, 13.0]
res = [6.9204e-310, 6.9204e-310]
x = [11.0, 12.0001, 13.0]
res = [6.92038e-310, 6.9204e-310]
x = [11.0, 11.9999, 13.0]
res = [8.85471e9, -1.01552e10]
x = [11.0, 12.0, 13.0001]
res = [1.39857e10, -3.87321e9]
x = [11.0, 12.0, 12.9999]
y = [11.0, 12.0, 13.0]
y .% 10 = [1.0, 2.0, 3.0]
yy = y .% 10.0 = [1.0, 2.0, 3.0]
WARNING: numericRootGenericRandomizedFnc!(fgr::FastGenericRoot{T}...) deprecated, use numericRootGenericRandomizedFnc!(fgr::FastRootGenericWrapRoot{T}...) instead.
res = [11.0, 13.0]
x = [11.0, 12.0, 13.0]
res = [NaN, 6.9204e-310]
x = [11.0001, 12.0, 13.0]
res = [2.23911e-320, 6.9204e-310]
x = [10.9999, 12.0, 13.0]
res = [-4.33414e9, -3.76597e9]
x = [11.0, 12.0, 13.0001]
res = [-1.90163e10, 1.41864e10]
x = [11.0, 12.0, 12.9999]
y = [11.0, 12.0, 13.0]
y .% 10 = [1.0, 2.0, 3.0]
yy = y .% 10.0 = [1.0, 2.0, 3.0]
WARNING: numericRootGenericRandomizedFnc!(fgr::FastGenericRoot{T}...) deprecated, use numericRootGenericRandomizedFnc!(fgr::FastRootGenericWrapRoot{T}...) instead.
res = [11.0, 12.0]
x = [11.0, 12.0, 13.0]
res = [1.69168e-320, 0.0]
x = [11.0001, 12.0, 13.0]
res = [6.92038e-310, 6.9204e-310]
x = [10.9999, 12.0, 13.0]
res = [-3.44667e9, 2.57835e9]
x = [11.0, 12.0001, 13.0]
res = [4.08775e9, 1.23846e10]
x = [11.0, 11.9999, 13.0]
y = [11.0, 12.0, 13.0]
y .% 10 = [1.0, 2.0, 3.0]
yy = y .% 10.0 = [1.0, 2.0, 3.0]
WARNING: numericRootGenericRandomizedFnc!(fgr::FastGenericRoot{T}...) deprecated, use numericRootGenericRandomizedFnc!(fgr::FastRootGenericWrapRoot{T}...) instead.
res = [13.0, 12.0]
x = [11.0, 12.0, 13.0]
res = [NaN, 0.0]
x = [11.0, 12.0, 13.0001]
res = [1.10928e-319, 0.0]
x = [11.0, 12.0, 12.9999]
res = [-1.41199e10, 3.98616e9]
x = [11.0, 12.0001, 13.0]
res = [-1.42217e9, 1.22386e10]
x = [11.0, 11.9999, 13.0]
y = [11.0, 12.0, 13.0]
y .% 10 = [1.0, 2.0, 3.0]
yy = y .% 10.0 = [1.0, 2.0, 3.0]
WARNING: numericRootGenericRandomizedFnc!(fgr::FastGenericRoot{T}...) deprecated, use numericRootGenericRandomizedFnc!(fgr::FastRootGenericWrapRoot{T}...) instead.
res = [11.0, 13.0]
x = [11.0, 12.0, 13.0]
res = [0.0, 0.0]
x = [11.0001, 12.0, 13.0]
res = [0.0, 0.0]
x = [10.9999, 12.0, 13.0]
res = [7.12935e9, -1.6127e10]
x = [11.0, 12.0, 13.0001]
res = [1.18705e10, -1.14416e8]
x = [11.0, 12.0, 12.9999]
y = [11.0, 12.0, 13.0]
y .% 10 = [1.0, 2.0, 3.0]
yy = y .% 10.0 = [1.0, 2.0, 3.0]
WARNING: numericRootGenericRandomizedFnc!(fgr::FastGenericRoot{T}...) deprecated, use numericRootGenericRandomizedFnc!(fgr::FastRootGenericWrapRoot{T}...) instead.
res = [13.0, 11.0]
x = [11.0, 12.0, 13.0]
res = [6.92038e-310, 6.9204e-310]
x = [11.0, 12.0, 13.0001]
res = [6.9204e-310, 6.9204e-310]
x = [11.0, 12.0, 12.9999]
res = [1.31364e9, -1.68455e9]
x = [11.0001, 12.0, 13.0]
res = [-2.50927e9, 6.49643e9]
x = [10.9999, 12.0, 13.0]
y = [11.0, 12.0, 13.0]
y .% 10 = [1.0, 2.0, 3.0]
yy = y .% 10.0 = [1.0, 2.0, 3.0]
WARNING: numericRootGenericRandomizedFnc!(fgr::FastGenericRoot{T}...) deprecated, use numericRootGenericRandomizedFnc!(fgr::FastRootGenericWrapRoot{T}...) instead.
res = [13.0, 11.0]
x = [11.0, 12.0, 13.0]
res = [6.92038e-310, 0.0]
x = [11.0, 12.0, 13.0001]
res = [6.9204e-310, 6.9204e-310]
x = [11.0, 12.0, 12.9999]
res = [1.86041e10, -2.30675e10]
x = [11.0001, 12.0, 13.0]
res = [-1.22029e10, 4.31183e9]
x = [10.9999, 12.0, 13.0]
y = [11.0, 12.0, 13.0]
y .% 10 = [1.0, 2.0, 3.0]
yy = y .% 10.0 = [1.0, 2.0, 3.0]
Test if shuffling results in correct mapping for solving
starting with x0=[11.0, 12.0]
WARNING: numericRootGenericRandomizedFnc!(fgr::FastGenericRoot{T}...) deprecated, use numericRootGenericRandomizedFnc!(fgr::FastRootGenericWrapRoot{T}...) instead.
result y=[1.0, 2.0]
starting with x0=[11.0, 12.0]
WARNING: numericRootGenericRandomizedFnc!(fgr::FastGenericRoot{T}...) deprecated, use numericRootGenericRandomizedFnc!(fgr::FastRootGenericWrapRoot{T}...) instead.
result y=[1.0, 2.0]
starting with x0=[11.0, 12.0]
WARNING: numericRootGenericRandomizedFnc!(fgr::FastGenericRoot{T}...) deprecated, use numericRootGenericRandomizedFnc!(fgr::FastRootGenericWrapRoot{T}...) instead.
result y=[1.0, 2.0]
starting with x0=[11.0, 12.0]
WARNING: numericRootGenericRandomizedFnc!(fgr::FastGenericRoot{T}...) deprecated, use numericRootGenericRandomizedFnc!(fgr::FastRootGenericWrapRoot{T}...) instead.
result y=[1.0, 2.0]
starting with x0=[11.0, 12.0]
WARNING: numericRootGenericRandomizedFnc!(fgr::FastGenericRoot{T}...) deprecated, use numericRootGenericRandomizedFnc!(fgr::FastRootGenericWrapRoot{T}...) instead.
result y=[1.0, 2.0]
starting with x0=[11.0, 12.0]
WARNING: numericRootGenericRandomizedFnc!(fgr::FastGenericRoot{T}...) deprecated, use numericRootGenericRandomizedFnc!(fgr::FastRootGenericWrapRoot{T}...) instead.
result y=[1.0, 2.0]
starting with x0=[11.0, 12.0]
WARNING: numericRootGenericRandomizedFnc!(fgr::FastGenericRoot{T}...) deprecated, use numericRootGenericRandomizedFnc!(fgr::FastRootGenericWrapRoot{T}...) instead.
result y=[1.0, 2.0]
starting with x0=[11.0, 12.0]
WARNING: numericRootGenericRandomizedFnc!(fgr::FastGenericRoot{T}...) deprecated, use numericRootGenericRandomizedFnc!(fgr::FastRootGenericWrapRoot{T}...) instead.
result y=[1.0, 2.0]
starting with x0=[11.0, 12.0]
WARNING: numericRootGenericRandomizedFnc!(fgr::FastGenericRoot{T}...) deprecated, use numericRootGenericRandomizedFnc!(fgr::FastRootGenericWrapRoot{T}...) instead.
result y=[1.0, 2.0]
starting with x0=[11.0, 12.0]
WARNING: numericRootGenericRandomizedFnc!(fgr::FastGenericRoot{T}...) deprecated, use numericRootGenericRandomizedFnc!(fgr::FastRootGenericWrapRoot{T}...) instead.
result y=[1.0, 2.0]
WARNING: numericRootGenericRandomizedFnc!(fgr::FastGenericRoot{T}...) deprecated, use numericRootGenericRandomizedFnc!(fgr::FastRootGenericWrapRoot{T}...) instead.
WARNING: numericRootGenericRandomizedFnc!(fgr::FastGenericRoot{T}...) deprecated, use numericRootGenericRandomizedFnc!(fgr::FastRootGenericWrapRoot{T}...) instead.
WARNING: numericRootGenericRandomizedFnc!(fgr::FastGenericRoot{T}...) deprecated, use numericRootGenericRandomizedFnc!(fgr::FastRootGenericWrapRoot{T}...) instead.
WARNING: numericRootGenericRandomizedFnc!(fgr::FastGenericRoot{T}...) deprecated, use numericRootGenericRandomizedFnc!(fgr::FastRootGenericWrapRoot{T}...) instead.
WARNING: numericRootGenericRandomizedFnc!(fgr::FastGenericRoot{T}...) deprecated, use numericRootGenericRandomizedFnc!(fgr::FastRootGenericWrapRoot{T}...) instead.
WARNING: numericRootGenericRandomizedFnc!(fgr::FastGenericRoot{T}...) deprecated, use numericRootGenericRandomizedFnc!(fgr::FastRootGenericWrapRoot{T}...) instead.
WARNING: numericRootGenericRandomizedFnc!(fgr::FastGenericRoot{T}...) deprecated, use numericRootGenericRandomizedFnc!(fgr::FastRootGenericWrapRoot{T}...) instead.
WARNING: numericRootGenericRandomizedFnc!(fgr::FastGenericRoot{T}...) deprecated, use numericRootGenericRandomizedFnc!(fgr::FastRootGenericWrapRoot{T}...) instead.
WARNING: numericRootGenericRandomizedFnc!(fgr::FastGenericRoot{T}...) deprecated, use numericRootGenericRandomizedFnc!(fgr::FastRootGenericWrapRoot{T}...) instead.
WARNING: numericRootGenericRandomizedFnc!(fgr::FastGenericRoot{T}...) deprecated, use numericRootGenericRandomizedFnc!(fgr::FastRootGenericWrapRoot{T}...) instead.
WARNING: Test FastRootGenericWrapParam{T} not implemented yet
Success
[TEST] GenericWrapParam functors...
WARNING: using Distributions.params in module Main conflicts with an existing identifier.
FunctorWorks
FunctorArray
a1 = [-1.0 0.562949 0.63827; 0.354716 0.983645 0.601211]
GenericWrapParam test
  0.024003 seconds (2.11 k allocations: 109.534 KiB)
Test in factor graph setting...

WARNING: deprecated syntax "inner constructor Pose1Pose1Test(...) around /home/vagrant/.julia/v0.6/IncrementalInference/test/testGenericWrapParam.jl:100".
Use "Pose1Pose1Test{T}(...) where T" instead.

WARNING: deprecated syntax "inner constructor Pose1Pose1Test(...) around /home/vagrant/.julia/v0.6/IncrementalInference/test/testGenericWrapParam.jl:101".
Use "Pose1Pose1Test{#s33}(...) where #s33" instead.
  0.024570 seconds (3.72 k allocations: 199.288 KiB)
Test with NLsolve for root finding using generalwrapper functor.
  0.245826 seconds (102.79 k allocations: 5.599 MiB)
Test with FastRootGenericWrapParam for un-permuted root finding...
gwp.varidx = 2
zDim = size(gwp.measurement, 1) = 1
  0.184627 seconds (137.67 k allocations: 6.719 MiB)
and in the reverse direction, achieved by simply changing GenericWrapParam.varidx to 1...
gwp.varidx = 1 = 1
  0.003810 seconds (14.30 k allocations: 1.282 MiB)
Test with FastRootGenericWrapParam for permuted root finding...
WARNING: test not implemented yet
GenericWrapParam testing in factor graph context...
[drct]
Building Bayes net...
(vert.label, getData(vert).BayesNetVertID) = ("x1", 0)
(vert.label, getData(vert).BayesNetVertID) = ("x2", 0)

Eliminating 1
===============

adding marginal to
x.index = 2

Eliminating 2
===============

adding marginal to
Bayes Net
Bayes Tree
Find potential functions for each clique
Get potentials x2,x1,: 
Ensure all nodes are initialized
x2 is not initialized, and will do so now...
[drct]Do recursive inference over tree
Start Clique x2,x1,:  =============================
====================== Clique x2,x1,:  =============================
up w 0 msgs---------- successive fnc approx ------------x2,x1,: 
#1	 -- 
fmcmc! -- finished on x2,x1,: 
---------- successive fnc approx ------------x2,x1,: 
#1	 -- [2x0p,d1,N200], [drct] 
#2	 -- [2x0p,d1,N200], [drct] 
#3	 -- [2x0p,d1,N200], [drct] 
fmcmc! -- finished on x2,x1,: 
Outgoing msg density on: updateFGBT! up -- finished updating x2,x1,: 
End Clique x2,x1,:  =============================
====================== Clique x2,x1,:  =============================
dwn---------- successive fnc approx ------------x2,x1,: 
fmcmc! -- finished on x2,x1,: 
Outgoing msg density on: Ensure all nodes are initialized
Do recursive inference over tree
Start Clique x2,x1,:  =============================
====================== Clique x2,x1,:  =============================
up w 0 msgs---------- successive fnc approx ------------x2,x1,: 
#1	 -- 
fmcmc! -- finished on x2,x1,: 
---------- successive fnc approx ------------x2,x1,: 
#1	 -- [2x0p,d1,N200], [drct] 
#2	 -- [2x0p,d1,N200], [drct] 
#3	 -- [2x0p,d1,N200], [drct] 
fmcmc! -- finished on x2,x1,: 
Outgoing msg density on: updateFGBT! up -- finished updating x2,x1,: 
End Clique x2,x1,:  =============================
====================== Clique x2,x1,:  =============================
dwn---------- successive fnc approx ------------x2,x1,: 
fmcmc! -- finished on x2,x1,: 
Outgoing msg density on: Ensure all nodes are initialized
Do recursive inference over tree
Start Clique x2,x1,:  =============================
====================== Clique x2,x1,:  =============================
up w 0 msgs---------- successive fnc approx ------------x2,x1,: 
#1	 -- 
fmcmc! -- finished on x2,x1,: 
---------- successive fnc approx ------------x2,x1,: 
#1	 -- [2x0p,d1,N200], [drct] 
#2	 -- [2x0p,d1,N200], [drct] 
#3	 -- [2x0p,d1,N200], [drct] 
fmcmc! -- finished on x2,x1,: 
Outgoing msg density on: updateFGBT! up -- finished updating x2,x1,: 
End Clique x2,x1,:  =============================
====================== Clique x2,x1,:  =============================
dwn---------- successive fnc approx ------------x2,x1,: 
fmcmc! -- finished on x2,x1,: 
Outgoing msg density on:   5.425752 seconds (5.00 M allocations: 302.051 MiB, 2.09% gc time)
Success
[TEST] with simple local constraint examples Odo, Obsv2...
[drct]x2 is not initialized, and will do so now...
[drct]
Building Bayes net...
(vert.label, getData(vert).BayesNetVertID) = ("x1", 0)
(vert.label, getData(vert).BayesNetVertID) = ("x2", 0)

Eliminating 1
===============

adding marginal to
x.index = 3

Eliminating 3
===============

adding marginal to
Bayes Net
Bayes Tree
Find potential functions for each clique
Get potentials x2,x1,: 
Ensure all nodes are initialized
Do multi-process inference over tree
child.attributes["label"] = "x2,x1,: "
Start Clique x2,x1,:  =============================
====================== Clique x2,x1,:  =============================
End Clique x2,x1,:  =============================
processPostOrderStacks! -- THIS ONLY HAPPENS AFTER SYNC
	From worker 2:	up w 0 msgs---------- successive fnc approx ------------x2,x1,: 
	From worker 2:	#1	 -- 
	From worker 2:	fmcmc! -- finished on x2,x1,: 
	From worker 2:	---------- successive fnc approx ------------x2,x1,: 
	From worker 2:	#1	 -- [2x0p,d1,N200], [drct] 
	From worker 2:	#2	 -- [2x0p,d1,N200], [drct] 
	From worker 2:	#3	 -- [2x0p,d1,N200], [drct] 
	From worker 2:	fmcmc! -- finished on x2,x1,: 
upward leftovers, Int64[]
updateFGBT! up -- finished updating x2,x1,: 
	From worker 2:	Outgoing msg density on: =================== Iter Clique x2,x1,:  ===========================
	From worker 2:	dwn---------- successive fnc approx ------------x2,x1,: 
	From worker 2:	fmcmc! -- finished on x2,x1,: 
dwnward leftovers, Int64[]
Test Summary:                           | Pass  Total
test evaluation of pose pose constraint |    2      2
Success
[TEST] partial constraints...
[1x1p,d2,N50],Test Summary:                            | Pass  Total
test evaluation of full constraint prior |    3      3
Test Summary:                               | Pass  Total
test evaluation of partial constraint prior |    6      6

Building Bayes net...
(vert.label, getData(vert).BayesNetVertID) = ("x1", 0)

Eliminating 1
===============

adding marginal to
Bayes Net
Bayes Tree
Find potential functions for each clique
Get potentials x1,: 
Ensure all nodes are initialized
Do recursive inference over tree
Start Clique x1,:  =============================
====================== Clique x1,:  =============================
up w 0 msgs---------- successive fnc approx ------------x1,: 
#1	 -- 
fmcmc! -- finished on x1,: 
---------- successive fnc approx ------------x1,: 
#1	 -- [1x1p,d2,N50], 
fmcmc! -- finished on x1,: 
Outgoing msg density on: updateFGBT! up -- finished updating x1,: 
End Clique x1,:  =============================
====================== Clique x1,:  =============================
dwn---------- successive fnc approx ------------x1,: 
#1	 -- [1x1p,d2,N50], 
fmcmc! -- finished on x1,: 
Outgoing msg density on: Test Summary:                | Pass  Total
test solving of factor graph |    2      2
[0x2p,d2,N50],Test Summary:                                                | Pass  Total
test evaluation of multiple simultaneous partial constraints |    6      6
Test Summary:                    | Pass  Total
test findRelatedFromPotential... |   10     10
[0x1p,d2,N50],[0x1p,d2,N50],[0x2p,d2,N50],
Building Bayes net...
(vert.label, getData(vert).BayesNetVertID) = ("x1", 0)
(vert.label, getData(vert).BayesNetVertID) = ("x2", 0)

Eliminating 1
===============

adding marginal to
x.index = 4

Eliminating 4
===============

adding marginal to
Bayes Net
Bayes Tree
Find potential functions for each clique
Get potentials x2,x1,: 
Ensure all nodes are initialized
Do recursive inference over tree
Start Clique x2,x1,:  =============================
====================== Clique x2,x1,:  =============================
up w 0 msgs---------- successive fnc approx ------------x2,x1,: 
#1	 -- 
fmcmc! -- finished on x2,x1,: 
---------- successive fnc approx ------------x2,x1,: 
#1	 -- [0x2p,d2,N50], [1x2p,d2,N50], 
#2	 -- [0x2p,d2,N50], [1x2p,d2,N50], 
#3	 -- [0x2p,d2,N50], [1x2p,d2,N50], 
fmcmc! -- finished on x2,x1,: 
Outgoing msg density on: updateFGBT! up -- finished updating x2,x1,: 
End Clique x2,x1,:  =============================
====================== Clique x2,x1,:  =============================
dwn---------- successive fnc approx ------------x2,x1,: 
fmcmc! -- finished on x2,x1,: 
Outgoing msg density on: Test Summary:                           | Pass  Total
test belief prediction with partials... |   16     16
Success
[TEST] null hypothesis...
Success
[TEST] standardized multihypothesis...
x1 is not initialized, and will do so now...
[drct]x2 is not initialized, and will do so now...
[drct]Test Summary:                                        | Pass  Total
Test multi-hypothesis factor convolution exploration |    3      3
Packing converters
Test Summary:                                 | Pass  Total
test packing and unpacking the data structure |    4      4
Success
[TEST] with local Graphs.jl dictionary and arrays only (multicore)...
[drct][drct][2x0p,d1,N100],[drct][2x0p,d1,N100],[drct][drct][2x0p,d1,N100],
Building Bayes net...
(vert.label, getData(vert).BayesNetVertID) = ("x3", 0)
(vert.label, getData(vert).BayesNetVertID) = ("x4", 0)
(vert.label, getData(vert).BayesNetVertID) = ("x0", 0)
(vert.label, getData(vert).BayesNetVertID) = ("x6", 0)
(vert.label, getData(vert).BayesNetVertID) = ("l1", 0)
(vert.label, getData(vert).BayesNetVertID) = ("x7", 0)
(vert.label, getData(vert).BayesNetVertID) = ("x2", 0)
(vert.label, getData(vert).BayesNetVertID) = ("x5", 0)

Eliminating 5
===============

adding marginal to
x.index = 3
x.index = 8
x.index = 10

Eliminating 8
===============

adding marginal to
x.index = 10
x.index = 13
x.index = 3

Eliminating 1
===============

adding marginal to
x.index = 3

Eliminating 15
===============

adding marginal to
x.index = 13
x.index = 17

Eliminating 10
===============

adding marginal to
x.index = 13
x.index = 3

Eliminating 17
===============

adding marginal to
x.index = 13

Eliminating 3
===============

adding marginal to
x.index = 13

Eliminating 13
===============

adding marginal to
Bayes Net
Bayes Tree
Find potential functions for each clique
Get potentials x7,x6,: x5,
Get potentials x0,: x2,
Get potentials x3,: x2,x4,l1,
Get potentials x5,x2,l1,x4,: 
(xx, ll) = ls(fg) = (Symbol[:x0, :x2, :x3, :x4, :x5, :x6, :x7], Symbol[:l1])
Ensure all nodes are initialized
Do recursive inference over tree
Start Clique x5,x2,l1,x4,:  =============================
upMsgRec -- calling new recursive on x7,x6,: x5,
Start Clique x7,x6,: x5, =============================
====================== Clique x7,x6,: x5, =============================
up w 0 msgs---------- successive fnc approx ------------x7,x6,: x5,
#1	 -- 
fmcmc! -- finished on x7,x6,: x5,
---------- successive fnc approx ------------x7,x6,: x5,
#1	 -- [2x0p,d1,N100], [2x0p,d1,N100], [drct] 
#2	 -- [2x0p,d1,N100], [2x0p,d1,N100], [drct] 
#3	 -- [2x0p,d1,N100], [2x0p,d1,N100], [drct] 
fmcmc! -- finished on x7,x6,: x5,
Outgoing msg density on: updateFGBT! up -- finished updating x7,x6,: x5,
End Clique x7,x6,: x5, =============================
upMsgRec -- finished with x7,x6,: x5,, w [13])
upMsgRec -- calling new recursive on x0,: x2,
Start Clique x0,: x2, =============================
====================== Clique x0,: x2, =============================
up w 0 msgs---------- successive fnc approx ------------x0,: x2,
#1	 -- 
fmcmc! -- finished on x0,: x2,
---------- successive fnc approx ------------x0,: x2,
#1	 -- [2x0p,d1,N100], [drct] 
#2	 -- [2x0p,d1,N100], [drct] 
#3	 -- [2x0p,d1,N100], [drct] 
fmcmc! -- finished on x0,: x2,
Outgoing msg density on: updateFGBT! up -- finished updating x0,: x2,
End Clique x0,: x2, =============================
upMsgRec -- finished with x0,: x2,, w [3])
upMsgRec -- calling new recursive on x3,: x2,x4,l1,
Start Clique x3,: x2,x4,l1, =============================
====================== Clique x3,: x2,x4,l1, =============================
up w 0 msgs---------- successive fnc approx ------------x3,: x2,x4,l1,
#1	 -- 
fmcmc! -- finished on x3,: x2,x4,l1,
---------- successive fnc approx ------------x3,: x2,x4,l1,
#1	 -- [4x0p,d1,N100], [drct] [drct] [drct] 
#2	 -- [4x0p,d1,N100], [drct] [drct] [drct] 
#3	 -- [4x0p,d1,N100], [drct] [drct] [drct] 
fmcmc! -- finished on x3,: x2,x4,l1,
Outgoing msg density on: updateFGBT! up -- finished updating x3,: x2,x4,l1,
End Clique x3,: x2,x4,l1, =============================
upMsgRec -- finished with x3,: x2,x4,l1,, w [10, 3, 8])
====================== Clique x5,x2,l1,x4,:  =============================
up w 3 msgs---------- successive fnc approx ------------x5,x2,l1,x4,: 
#1	 -- 
fmcmc! -- finished on x5,x2,l1,x4,: 
---------- successive fnc approx ------------x5,x2,l1,x4,: 
#1	 -- [2x0p,d1,N100], [2x0p,d1,N100], [3x0p,d1,N100], 
#2	 -- [2x0p,d1,N100], [2x0p,d1,N100], [3x0p,d1,N100], 
#3	 -- [2x0p,d1,N100], [2x0p,d1,N100], [3x0p,d1,N100], 
fmcmc! -- finished on x5,x2,l1,x4,: 
---------- successive fnc approx ------------x5,x2,l1,x4,: 
#1	 -- [2x0p,d1,N100], 
fmcmc! -- finished on x5,x2,l1,x4,: 
Outgoing msg density on: updateFGBT! up -- finished updating x5,x2,l1,x4,: 
End Clique x5,x2,l1,x4,:  =============================
====================== Clique x5,x2,l1,x4,:  =============================
dwn---------- successive fnc approx ------------x5,x2,l1,x4,: 
fmcmc! -- finished on x5,x2,l1,x4,: 
Outgoing msg density on: ====================== Clique x7,x6,: x5, =============================
dwn---------- successive fnc approx ------------x7,x6,: x5,
#1	 -- [2x0p,d1,N100], [2x0p,d1,N100], 
#2	 -- [2x0p,d1,N100], [2x0p,d1,N100], 
#3	 -- [2x0p,d1,N100], [2x0p,d1,N100], 
fmcmc! -- finished on x7,x6,: x5,
Dwn msg keys [13, 10, 3, 8]
Outgoing msg density on: 
====================== Clique x0,: x2, =============================
dwn---------- successive fnc approx ------------x0,: x2,
#1	 -- [2x0p,d1,N100], 
fmcmc! -- finished on x0,: x2,
Dwn msg keys [13, 10, 3, 8]
Outgoing msg density on: 
====================== Clique x3,: x2,x4,l1, =============================
dwn---------- successive fnc approx ------------x3,: x2,x4,l1,
#1	 -- [4x0p,d1,N100], 
fmcmc! -- finished on x3,: x2,x4,l1,
Dwn msg keys [13, 10, 3, 8]
Outgoing msg density on: 


Ensure all nodes are initialized
Do multi-process inference over tree
child.attributes["label"] = "x5,x2,l1,x4,: "
child.attributes["label"] = "x3,: x2,x4,l1,"
child.attributes["label"] = "x0,: x2,"
child.attributes["label"] = "x7,x6,: x5,"
Start Clique x7,x6,: x5, =============================
====================== Clique x7,x6,: x5, =============================
Start Clique x0,: x2, =============================
====================== Clique x0,: x2, =============================
Start Clique x3,: x2,x4,l1, =============================
====================== Clique x3,: x2,x4,l1, =============================
Start Clique x5,x2,l1,x4,:  =============================
asyncProcessPostStacks -- 1, cliq=x5,x2,l1,x4,: , start on child x7,x6,: x5, haskey=false
End Clique x7,x6,: x5, =============================
End Clique x3,: x2,x4,l1, =============================
End Clique x0,: x2, =============================
	From worker 2:	Outgoing msg density on: up w 0 msgsup w 0 msgsup w 0 msgs---------- successive fnc approx ------------x7,x6,: x5,
	From worker 2:	#1	 -- ---------- successive fnc approx ------------x3,: x2,x4,l1,
	From worker 2:	#1	 -- ---------- successive fnc approx ------------x0,: x2,
	From worker 2:	#1	 -- 
	From worker 2:	fmcmc! -- finished on x7,x6,: x5,
	From worker 2:	---------- successive fnc approx ------------x7,x6,: x5,
	From worker 2:	#1	 -- [2x0p,d1,N200],
	From worker 2:	 fmcmc! -- finished on x3,: x2,x4,l1,[2x0p,d1,N200],
	From worker 2:	 ---------- successive fnc approx ------------x3,: x2,x4,l1,[drct]
	From worker 2:	 #1	 -- [4x0p,d1,N200],
	From worker 2:	 #2	 -- [drct][2x0p,d1,N200], 
	From worker 2:	 [drct]fmcmc! -- finished on x0,: x2,[2x0p,d1,N200], 
	From worker 2:	 [drct]---------- successive fnc approx ------------x0,: x2,[drct] 
	From worker 2:	 #1	 -- [2x0p,d1,N200],
	From worker 2:	 #3	 -- [drct][2x0p,d1,N200], 
	From worker 2:	 #2	 -- [2x0p,d1,N200],[4x0p,d1,N200], 
	From worker 2:	 [drct]#2	 -- [drct] [2x0p,d1,N200],  [drct]
	From worker 2:	[drct] fmcmc! -- finished on x7,x6,: x5, [drct]
	From worker 2:	 Outgoing msg density on: 
updateFGBT! up -- finished updating x7,x6,: x5,
asyncProcessPostStacks -- 1, cliq=x5,x2,l1,x4,: , start on child x0,: x2, haskey=false
	From worker 2:	#3	 -- [4x0p,d1,N200],
	From worker 2:	 #3	 -- [drct][2x0p,d1,N200],  [drct][drct]  [drct] 
	From worker 2:	fmcmc! -- finished on x0,: x2,
	From worker 2:	Outgoing msg density on: 
updateFGBT! up -- finished updating x0,: x2,
asyncProcessPostStacks -- 1, cliq=x5,x2,l1,x4,: , start on child x3,: x2,x4,l1, haskey=false
	From worker 2:	fmcmc! -- finished on x3,: x2,x4,l1,
updateFGBT! up -- finished updating x3,: x2,x4,l1,
====================== Clique x5,x2,l1,x4,:  =============================
End Clique x5,x2,l1,x4,:  =============================
processPostOrderStacks! -- THIS ONLY HAPPENS AFTER SYNC
	From worker 2:	Outgoing msg density on: up w 3 msgs---------- successive fnc approx ------------x5,x2,l1,x4,: 
	From worker 2:	#1	 -- 
	From worker 2:	fmcmc! -- finished on x5,x2,l1,x4,: 
	From worker 2:	---------- successive fnc approx ------------x5,x2,l1,x4,: 
	From worker 2:	#1	 -- [2x0p,d1,N200], [2x0p,d1,N200], [3x0p,d1,N200], 
	From worker 2:	#2	 -- [2x0p,d1,N200], [2x0p,d1,N200], [3x0p,d1,N200], 
	From worker 2:	#3	 -- [2x0p,d1,N200], [2x0p,d1,N200], [3x0p,d1,N200], 
	From worker 2:	fmcmc! -- finished on x5,x2,l1,x4,: 
	From worker 2:	---------- successive fnc approx ------------x5,x2,l1,x4,: 
	From worker 2:	#1	 -- [2x0p,d1,N200], 
	From worker 2:	fmcmc! -- finished on x5,x2,l1,x4,: 
upward leftovers, Int64[]
updateFGBT! up -- finished updating x5,x2,l1,x4,: 
	From worker 2:	Outgoing msg density on: =================== Iter Clique x5,x2,l1,x4,:  ===========================
	From worker 2:	dwn---------- successive fnc approx ------------x5,x2,l1,x4,: 
	From worker 2:	fmcmc! -- finished on x5,x2,l1,x4,: 
	From worker 2:	Outgoing msg density on: =================== Iter Clique x7,x6,: x5, ===========================
	From worker 2:	dwn=================== Iter Clique x3,: x2,x4,l1, ===========================
	From worker 2:	dwn=================== Iter Clique x0,: x2, ===========================
	From worker 2:	dwn---------- successive fnc approx ------------x7,x6,: x5,
	From worker 2:	#1	 -- ---------- successive fnc approx ------------x3,: x2,x4,l1,[2x0p,d1,N200],
	From worker 2:	 #1	 -- [2x0p,d1,N200],---------- successive fnc approx ------------x0,: x2,[4x0p,d1,N200], 
	From worker 2:	 #1	 -- [2x0p,d1,N200],
	From worker 2:	 fmcmc! -- finished on x3,: x2,x4,l1,
	From worker 2:	Dwn msg keys [13, 10, 3, 8]
	From worker 2:	Outgoing msg density on: 
	From worker 2:	fmcmc! -- finished on x0,: x2,
	From worker 2:	Dwn msg keys [13, 10, 3, 8]
	From worker 2:	Outgoing msg density on: 
	From worker 2:	#2	 -- [2x0p,d1,N200],
	From worker 2:	 [2x0p,d1,N200],
	From worker 2:	 
	From worker 2:	
	From worker 2:	#3	 -- [2x0p,d1,N200],
	From worker 2:	 [2x0p,d1,N200], 
	From worker 2:	fmcmc! -- finished on x7,x6,: x5,
	From worker 2:	Dwn msg keys [13, 10, 3, 8]
	From worker 2:	Outgoing msg density on: 
dwnward leftovers, Int64[]
Success
[TEST] saving to and loading from .jld file
Success
INFO: IncrementalInference tests passed

>>> End of log
