>>> 'Pkg.add("IncrementalInference")' log
INFO: Cloning cache of IncrementalInference from https://github.com/dehann/IncrementalInference.jl.git
INFO: Cloning cache of KernelDensityEstimate from https://github.com/dehann/KernelDensityEstimate.jl.git
INFO: Cloning cache of NLsolve from https://github.com/JuliaNLSolvers/NLsolve.jl.git
INFO: Installing BinDeps v0.8.6
INFO: Installing Blosc v0.3.0
INFO: Installing Calculus v0.2.2
INFO: Installing CommonSubexpressions v0.0.1
INFO: Installing DataStructures v0.7.4
INFO: Installing DiffBase v0.3.2
INFO: Installing DiffResults v0.0.3
INFO: Installing DiffRules v0.0.3
INFO: Installing Distances v0.5.0
INFO: Installing Distributions v0.15.0
INFO: Installing FileIO v0.6.1
INFO: Installing ForwardDiff v0.7.2
INFO: Installing Graphs v0.9.0
INFO: Installing HDF5 v0.8.8
INFO: Installing IncrementalInference v0.3.0
INFO: Installing JLD v0.8.3
INFO: Installing KernelDensityEstimate v0.3.0
INFO: Installing LegacyStrings v0.3.0
INFO: Installing LineSearches v3.2.5
INFO: Installing NLSolversBase v3.1.0
INFO: Installing NLsolve v0.13.0
INFO: Installing NaNMath v0.3.0
INFO: Installing Optim v0.11.0
INFO: Installing PDMats v0.8.0
INFO: Installing Parameters v0.8.1
INFO: Installing PositiveFactorizations v0.1.0
INFO: Installing ProgressMeter v0.5.3
INFO: Installing QuadGK v0.2.0
INFO: Installing Rmath v0.3.2
INFO: Installing SHA v0.5.6
INFO: Installing SortingAlgorithms v0.2.0
INFO: Installing SpecialFunctions v0.3.8
INFO: Installing StaticArrays v0.6.6
INFO: Installing StatsBase v0.19.5
INFO: Installing StatsFuns v0.5.0
INFO: Installing URIParser v0.3.0
INFO: Building Blosc
INFO: Building SpecialFunctions
INFO: Building Rmath
INFO: Building HDF5
INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of IncrementalInference
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("IncrementalInference")' log
Julia Version 0.6.2
Commit d386e40c17 (2017-12-13 18:08 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-135-generic #184-Ubuntu SMP Wed Oct 18 11:55:51 UTC 2017 x86_64 x86_64
Memory: 2.93927001953125 GB (1018.6484375 MB free)
Uptime: 24894.0 sec
Load Avg:  0.974609375  0.96728515625  0.9755859375
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz    1573721 s       3672 s      79508 s     436515 s         20 s
#2  3500 MHz     344052 s       3883 s      40488 s    2050592 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.6
2 required packages:
 - IncrementalInference          0.3.0
 - JSON                          0.16.4
37 additional packages:
 - BinDeps                       0.8.6
 - Blosc                         0.3.0
 - Calculus                      0.2.2
 - CommonSubexpressions          0.0.1
 - Compat                        0.49.0
 - DataStructures                0.7.4
 - DiffBase                      0.3.2
 - DiffResults                   0.0.3
 - DiffRules                     0.0.3
 - Distances                     0.5.0
 - Distributions                 0.15.0
 - FileIO                        0.6.1
 - ForwardDiff                   0.7.2
 - Graphs                        0.9.0
 - HDF5                          0.8.8
 - JLD                           0.8.3
 - KernelDensityEstimate         0.3.0
 - LegacyStrings                 0.3.0
 - LineSearches                  3.2.5
 - NLSolversBase                 3.1.0
 - NLsolve                       0.13.0
 - NaNMath                       0.3.0
 - Nullables                     0.0.3
 - Optim                         0.11.0
 - PDMats                        0.8.0
 - Parameters                    0.8.1
 - PositiveFactorizations        0.1.0
 - ProgressMeter                 0.5.3
 - QuadGK                        0.2.0
 - Rmath                         0.3.2
 - SHA                           0.5.6
 - SortingAlgorithms             0.2.0
 - SpecialFunctions              0.3.8
 - StaticArrays                  0.6.6
 - StatsBase                     0.19.5
 - StatsFuns                     0.5.0
 - URIParser                     0.3.0
INFO: Testing IncrementalInference
[TEST] out of module evalPotential...
evalPotential sees Second.SecondType(1)
evalPotential also sees Second.SecondAgain(3)
evalPotential sees Second.SecondType(1)
evalPotential sees Second.SecondType(1)
evalPotential also sees Second.SecondAgain(3)
Check the speed is reasonable
Success
[TEST] Ensure memory return is working properly...Success
[TEST] Ensure converter types can be run from extending namespaces...Success
[TEST] packing converters work...
WARNING: Method definition getType(KernelDensityEstimate.BallTreeDensity) in module KernelDensityEstimate at /home/vagrant/.julia/v0.6/KernelDensityEstimate/src/BallTreeDensity01.jl:28 overwritten at /home/vagrant/.julia/v0.6/KernelDensityEstimate/src/KDE01.jl:43.
WARNING: using IncrementalInference.evalPotential in module Main conflicts with an existing identifier.
WARNING: setDefaultNodeData! -- deprecated use of stdev.
Testing conversion to packed function node data structure and back
Testing conversion to packed variable node data structure and back
Conversions and comparisons agree
Success
[TEST] generic root finding by numeric solve of residual functions...
Test shuffling function
WARNING: abs(x::AbstractArray{T}) where T <: Number is deprecated, use abs.(x) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] abs(::Array{Float64,1}) at ./deprecated.jl:57
 [3] testshuffle!(::Array{Float64,1}, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/IncrementalInference/test/testNumericRootGenericRandomized.jl:78
 [4] (::NLsolve.#fvec!#27{IncrementalInference.FastGenericRoot{#testshuffle!},Array{Float64,1}})(::Array{Float64,1}, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/NLsolve/src/utils.jl:107
 [5] fg! at /home/vagrant/.julia/v0.6/NLsolve/src/differentiable_functions.jl:33 [inlined]
 [6] trust_region_(::NLsolve.DifferentiableMultivariateFunction{NLsolve.#fvec!#27{IncrementalInference.FastGenericRoot{#testshuffle!},Array{Float64,1}},NLsolve.#g!#5{NLsolve.#fg!#3{Symbol,NLsolve.#fvec!#27{IncrementalInference.FastGenericRoot{#testshuffle!},Array{Float64,1}}}},NLsolve.#fg!#3{Symbol,NLsolve.#fvec!#27{IncrementalInference.FastGenericRoot{#testshuffle!},Array{Float64,1}}}}, ::Array{Float64,1}, ::Float64, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::Float64, ::Bool) at /home/vagrant/.julia/v0.6/NLsolve/src/trust_region.jl:106
 [7] #nlsolve#12(::Symbol, ::Float64, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::Function, ::Float64, ::Bool, ::Int64, ::Float64, ::NLsolve.#nlsolve, ::NLsolve.DifferentiableMultivariateFunction{NLsolve.#fvec!#27{IncrementalInference.FastGenericRoot{#testshuffle!},Array{Float64,1}},NLsolve.#g!#5{NLsolve.#fg!#3{Symbol,NLsolve.#fvec!#27{IncrementalInference.FastGenericRoot{#testshuffle!},Array{Float64,1}}}},NLsolve.#fg!#3{Symbol,NLsolve.#fvec!#27{IncrementalInference.FastGenericRoot{#testshuffle!},Array{Float64,1}}}}, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/NLsolve/src/nlsolve_func_defs.jl:26
 [8] (::NLsolve.#kw##nlsolve)(::Array{Any,1}, ::NLsolve.#nlsolve, ::NLsolve.DifferentiableMultivariateFunction{NLsolve.#fvec!#27{IncrementalInference.FastGenericRoot{#testshuffle!},Array{Float64,1}},NLsolve.#g!#5{NLsolve.#fg!#3{Symbol,NLsolve.#fvec!#27{IncrementalInference.FastGenericRoot{#testshuffle!},Array{Float64,1}}}},NLsolve.#fg!#3{Symbol,NLsolve.#fvec!#27{IncrementalInference.FastGenericRoot{#testshuffle!},Array{Float64,1}}}}, ::Array{Float64,1}) at ./<missing>:0
 [9] #nlsolve#14(::Symbol, ::Float64, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::Function, ::Float64, ::Bool, ::Int64, ::Float64, ::Bool, ::NLsolve.#nlsolve, ::IncrementalInference.FastGenericRoot{#testshuffle!}, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/NLsolve/src/nlsolve_func_defs.jl:80
 [10] #numericRootGenericRandomizedFnc!#63(::Float64, ::Bool, ::Function, ::IncrementalInference.FastGenericRoot{#testshuffle!}) at /home/vagrant/.julia/v0.6/IncrementalInference/src/SolverUtilities.jl:161
 [11] (::IncrementalInference.#kw##numericRootGenericRandomizedFnc!)(::Array{Any,1}, ::IncrementalInference.#numericRootGenericRandomizedFnc!, ::IncrementalInference.FastGenericRoot{#testshuffle!}) at ./<missing>:0
 [12] #numericRootGenericRandomizedFnc#64(::Float64, ::Bool, ::Function, ::Function, ::Int64, ::Int64, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/IncrementalInference/src/SolverUtilities.jl:190
 [13] (::IncrementalInference.#kw##numericRootGenericRandomizedFnc)(::Array{Any,1}, ::IncrementalInference.#numericRootGenericRandomizedFnc, ::Function, ::Int64, ::Int64, ::Array{Float64,1}) at ./<missing>:0
 [14] macro expansion at /home/vagrant/.julia/v0.6/IncrementalInference/test/testNumericRootGenericRandomized.jl:93 [inlined]
 [15] anonymous at ./<missing>:?
 [16] include_from_node1(::String) at ./loading.jl:576
 [17] include(::String) at ./sysimg.jl:14
 [18] include_from_node1(::String) at ./loading.jl:576
 [19] include(::String) at ./sysimg.jl:14
 [20] process_options(::Base.JLOptions) at ./client.jl:305
 [21] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/IncrementalInference/test/testNumericRootGenericRandomized.jl, in expression starting on line 92
y = [11.0, 12.0, 13.0]
y .% 10 = [1.0, 2.0, 3.0]
yy = y .% 10.0 = [1.0, 2.0, 3.0]
y = [11.0, 12.0, 13.0]
y .% 10 = [1.0, 2.0, 3.0]
yy = y .% 10.0 = [1.0, 2.0, 3.0]
y = [11.0, 12.0, 13.0]
y .% 10 = [1.0, 2.0, 3.0]
yy = y .% 10.0 = [1.0, 2.0, 3.0]
y = [11.0, 12.0, 13.0]
y .% 10 = [1.0, 2.0, 3.0]
yy = y .% 10.0 = [1.0, 2.0, 3.0]
y = [11.0, 12.0, 13.0]
y .% 10 = [1.0, 2.0, 3.0]
yy = y .% 10.0 = [1.0, 2.0, 3.0]
y = [11.0, 12.0, 13.0]
y .% 10 = [1.0, 2.0, 3.0]
yy = y .% 10.0 = [1.0, 2.0, 3.0]
y = [11.0, 12.0, 13.0]
y .% 10 = [1.0, 2.0, 3.0]
yy = y .% 10.0 = [1.0, 2.0, 3.0]
y = [11.0, 12.0, 13.0]
y .% 10 = [1.0, 2.0, 3.0]
yy = y .% 10.0 = [1.0, 2.0, 3.0]
y = [11.0, 12.0, 13.0]
y .% 10 = [1.0, 2.0, 3.0]
yy = y .% 10.0 = [1.0, 2.0, 3.0]
y = [11.0, 12.0, 13.0]
y .% 10 = [1.0, 2.0, 3.0]
yy = y .% 10.0 = [1.0, 2.0, 3.0]
Test if shuffling results in correct mapping for solving
starting with x0=[11.0, 12.0]
result y=[1.0, 2.0]
starting with x0=[11.0, 12.0]
result y=[1.0, 2.0]
starting with x0=[11.0, 12.0]
result y=[1.0, 2.0]
starting with x0=[11.0, 12.0]
result y=[1.0, 2.0]
starting with x0=[11.0, 12.0]
result y=[1.0, 2.0]
starting with x0=[11.0, 12.0]
result y=[1.0, 2.0]
starting with x0=[11.0, 12.0]
result y=[1.0, 2.0]
starting with x0=[11.0, 12.0]
result y=[1.0, 2.0]
starting with x0=[11.0, 12.0]
result y=[1.0, 2.0]
starting with x0=[11.0, 12.0]
result y=[1.0, 2.0]
WARNING: Test FastRootGenericWrapParam{T} not implemented yet
Success
[TEST] GenericWrapParam functors...
WARNING: using Distributions.params in module Main conflicts with an existing identifier.
FunctorWorks
FunctorArray
a1 = [-1.0 0.75974 0.699783; 0.351736 0.548562 0.316773]
GenericWrapParam test
  0.012506 seconds (1.83 k allocations: 98.860 KiB)
Test in factor graph setting...

WARNING: deprecated syntax "inner constructor Pose1Pose1Test(...) around /home/vagrant/.julia/v0.6/IncrementalInference/test/testGenericWrapParam.jl:100".
Use "Pose1Pose1Test{T}(...) where T" instead.

WARNING: deprecated syntax "inner constructor Pose1Pose1Test(...) around /home/vagrant/.julia/v0.6/IncrementalInference/test/testGenericWrapParam.jl:102".
Use "Pose1Pose1Test{#s55}(...) where #s55" instead.
  0.014141 seconds (3.10 k allocations: 158.116 KiB)
Test with NLsolve for root finding using generalwrapper functor.
  1.182106 seconds (434.42 k allocations: 17.832 MiB, 0.70% gc time)
Test with FastRootGenericWrapParam for un-permuted root finding...
gwp.varidx = 2
zDim = size(gwp.measurement, 1) = 1
  0.316627 seconds (100.24 k allocations: 4.997 MiB, 2.95% gc time)
and in the reverse direction, achieved by simply changing GenericWrapParam.varidx to 1...
gwp.varidx = 1 = 1
  0.001864 seconds (10.60 k allocations: 1003.125 KiB)
Test with FastRootGenericWrapParam for permuted root finding...
WARNING: test not implemented yet
GenericWrapParam testing in factor graph context...

Building Bayes net...
(vert.label, getData(vert).BayesNetVertID) = ("x1", 0)
(vert.label, getData(vert).BayesNetVertID) = ("x2", 0)

Eliminating 1
===============

adding marginal to
x.index = 2

Eliminating 2
===============

adding marginal to
Bayes Net
Bayes Tree
Find potential functions for each clique
Get potentials x2,x1,: 
Do recursive inference over tree
Start Clique x2,x1,:  =============================
====================== Clique x2,x1,:  =============================
up w 0 msgs---------- successive fnc approx ------------x2,x1,: 
#1	 -- 
fmcmc! -- finished on x2,x1,: 
---------- successive fnc approx ------------x2,x1,: 
#1	 -- [2x0p,d1,N200], [drct] 
#2	 -- [2x0p,d1,N200], [drct] 
#3	 -- [2x0p,d1,N200], [drct] 
fmcmc! -- finished on x2,x1,: 
Outgoing msg density on: updateFGBT! up -- finished updating x2,x1,: 
End Clique x2,x1,:  =============================
====================== Clique x2,x1,:  =============================
dwn---------- successive fnc approx ------------x2,x1,: 
fmcmc! -- finished on x2,x1,: 
Outgoing msg density on: Do recursive inference over tree
Start Clique x2,x1,:  =============================
====================== Clique x2,x1,:  =============================
up w 0 msgs---------- successive fnc approx ------------x2,x1,: 
#1	 -- 
fmcmc! -- finished on x2,x1,: 
---------- successive fnc approx ------------x2,x1,: 
#1	 -- [2x0p,d1,N200], [drct] 
#2	 -- [2x0p,d1,N200], [drct] 
#3	 -- [2x0p,d1,N200], [drct] 
fmcmc! -- finished on x2,x1,: 
Outgoing msg density on: updateFGBT! up -- finished updating x2,x1,: 
End Clique x2,x1,:  =============================
====================== Clique x2,x1,:  =============================
dwn---------- successive fnc approx ------------x2,x1,: 
fmcmc! -- finished on x2,x1,: 
Outgoing msg density on: Do recursive inference over tree
Start Clique x2,x1,:  =============================
====================== Clique x2,x1,:  =============================
up w 0 msgs---------- successive fnc approx ------------x2,x1,: 
#1	 -- 
fmcmc! -- finished on x2,x1,: 
---------- successive fnc approx ------------x2,x1,: 
#1	 -- [2x0p,d1,N200], [drct] 
#2	 -- [2x0p,d1,N200], [drct] 
#3	 -- [2x0p,d1,N200], [drct] 
fmcmc! -- finished on x2,x1,: 
Outgoing msg density on: updateFGBT! up -- finished updating x2,x1,: 
End Clique x2,x1,:  =============================
====================== Clique x2,x1,:  =============================
dwn---------- successive fnc approx ------------x2,x1,: 
fmcmc! -- finished on x2,x1,: 
Outgoing msg density on:   6.766609 seconds (5.24 M allocations: 305.875 MiB, 1.31% gc time)
Success
[TEST] with simple local constraint examples Odo, Obsv2...
WARNING: setDefaultNodeData! -- deprecated use of stdev.

Building Bayes net...
(vert.label, getData(vert).BayesNetVertID) = ("x1", 0)
(vert.label, getData(vert).BayesNetVertID) = ("x2", 0)

Eliminating 1
===============

adding marginal to
x.index = 3

Eliminating 3
===============

adding marginal to
Bayes Net
Bayes Tree
Find potential functions for each clique
Get potentials x2,x1,: 
Do multi-process inference over tree
child.attributes["label"] = "x2,x1,: "
Start Clique x2,x1,:  =============================
====================== Clique x2,x1,:  =============================
End Clique x2,x1,:  =============================
processPostOrderStacks! -- THIS ONLY HAPPENS AFTER SYNC
	From worker 2:	up w 0 msgs---------- successive fnc approx ------------x2,x1,: 
	From worker 2:	#1	 -- 
	From worker 2:	fmcmc! -- finished on x2,x1,: 
	From worker 2:	---------- successive fnc approx ------------x2,x1,: 
	From worker 2:	#1	 -- [2x0p,d1,N200], [drct] 
	From worker 2:	#2	 -- [2x0p,d1,N200], [drct] 
	From worker 2:	#3	 -- [2x0p,d1,N200], [drct] 
	From worker 2:	fmcmc! -- finished on x2,x1,: 
upward leftovers, Int64[]
updateFGBT! up -- finished updating x2,x1,: 
	From worker 3:	=================== Iter Clique x2,x1,:  ===========================
	From worker 3:	dwn---------- successive fnc approx ------------x2,x1,: 
	From worker 3:	fmcmc! -- finished on x2,x1,: 
dwnward leftovers, Int64[]
Success
[TEST] partial constraints...
test evaluation of full constraint prior
test evaluation of partial constraint prior

Building Bayes net...
(vert.label, getData(vert).BayesNetVertID) = ("x1", 0)

Eliminating 1
===============

adding marginal to
Bayes Net
Bayes Tree
Find potential functions for each clique
Get potentials x1,: 
Do recursive inference over tree
Start Clique x1,:  =============================
====================== Clique x1,:  =============================
up w 0 msgs---------- successive fnc approx ------------x1,: 
#1	 -- 
fmcmc! -- finished on x1,: 
---------- successive fnc approx ------------x1,: 
#1	 -- [1x1p,d2,N50], 
fmcmc! -- finished on x1,: 
Outgoing msg density on: updateFGBT! up -- finished updating x1,: 
End Clique x1,:  =============================
====================== Clique x1,:  =============================
dwn---------- successive fnc approx ------------x1,: 
#1	 -- [1x1p,d2,N50], 
fmcmc! -- finished on x1,: 
Outgoing msg density on: test evaluation of multiple simultaneous partial constraints
test findRelatedFromPotential...
test belief prediction...
[0x1p,d2,N50],[0x1p,d2,N50],[0x2p,d2,N50],
Building Bayes net...
(vert.label, getData(vert).BayesNetVertID) = ("x1", 0)
(vert.label, getData(vert).BayesNetVertID) = ("x2", 0)

Eliminating 1
===============

adding marginal to
x.index = 4

Eliminating 4
===============

adding marginal to
Bayes Net
Bayes Tree
Find potential functions for each clique
Get potentials x2,x1,: 
Do recursive inference over tree
Start Clique x2,x1,:  =============================
====================== Clique x2,x1,:  =============================
up w 0 msgs---------- successive fnc approx ------------x2,x1,: 
#1	 -- 
fmcmc! -- finished on x2,x1,: 
---------- successive fnc approx ------------x2,x1,: 
#1	 -- [0x2p,d2,N50], [1x2p,d2,N50], 
#2	 -- [0x2p,d2,N50], [1x2p,d2,N50], 
#3	 -- [0x2p,d2,N50], [1x2p,d2,N50], 
fmcmc! -- finished on x2,x1,: 
Outgoing msg density on: updateFGBT! up -- finished updating x2,x1,: 
End Clique x2,x1,:  =============================
====================== Clique x2,x1,:  =============================
dwn---------- successive fnc approx ------------x2,x1,: 
fmcmc! -- finished on x2,x1,: 
Outgoing msg density on: Success
[TEST] partial constraints...
Success
[TEST] with local Graphs.jl dictionary and arrays only (multicore)...
WARNING: setDefaultNodeData! -- deprecated use of stdev.

Building Bayes net...
(vert.label, getData(vert).BayesNetVertID) = ("x3", 0)
(vert.label, getData(vert).BayesNetVertID) = ("x4", 0)
(vert.label, getData(vert).BayesNetVertID) = ("x0", 0)
(vert.label, getData(vert).BayesNetVertID) = ("x6", 0)
(vert.label, getData(vert).BayesNetVertID) = ("l1", 0)
(vert.label, getData(vert).BayesNetVertID) = ("x7", 0)
(vert.label, getData(vert).BayesNetVertID) = ("x2", 0)
(vert.label, getData(vert).BayesNetVertID) = ("x5", 0)

Eliminating 5
===============

adding marginal to
x.index = 3
x.index = 8
x.index = 10

Eliminating 8
===============

adding marginal to
x.index = 10
x.index = 13
x.index = 3

Eliminating 1
===============

adding marginal to
x.index = 3

Eliminating 15
===============

adding marginal to
x.index = 13
x.index = 17

Eliminating 10
===============

adding marginal to
x.index = 13
x.index = 3

Eliminating 17
===============

adding marginal to
x.index = 13

Eliminating 3
===============

adding marginal to
x.index = 13

Eliminating 13
===============

adding marginal to
Bayes Net
Bayes Tree
Find potential functions for each clique
Get potentials x7,x6,: x5,
Get potentials x0,: x2,
Get potentials x3,: x2,x4,l1,
Get potentials x5,x2,l1,x4,: 
(xx, ll) = ls(fg) = (Symbol[:x0, :x2, :x3, :x4, :x5, :x6, :x7], Symbol[:l1])
Do recursive inference over tree
Start Clique x5,x2,l1,x4,:  =============================
upMsgRec -- calling new recursive on x7,x6,: x5,
Start Clique x7,x6,: x5, =============================
====================== Clique x7,x6,: x5, =============================
up w 0 msgs---------- successive fnc approx ------------x7,x6,: x5,
#1	 -- 
fmcmc! -- finished on x7,x6,: x5,
---------- successive fnc approx ------------x7,x6,: x5,
#1	 -- [2x0p,d1,N100], [2x0p,d1,N100], [drct] 
#2	 -- [2x0p,d1,N100], [2x0p,d1,N100], [drct] 
#3	 -- [2x0p,d1,N100], [2x0p,d1,N100], [drct] 
fmcmc! -- finished on x7,x6,: x5,
Outgoing msg density on: updateFGBT! up -- finished updating x7,x6,: x5,
End Clique x7,x6,: x5, =============================
upMsgRec -- finished with x7,x6,: x5,, w [13])
upMsgRec -- calling new recursive on x0,: x2,
Start Clique x0,: x2, =============================
====================== Clique x0,: x2, =============================
up w 0 msgs---------- successive fnc approx ------------x0,: x2,
#1	 -- 
fmcmc! -- finished on x0,: x2,
---------- successive fnc approx ------------x0,: x2,
#1	 -- [2x0p,d1,N100], [drct] 
#2	 -- [2x0p,d1,N100], [drct] 
#3	 -- [2x0p,d1,N100], [drct] 
fmcmc! -- finished on x0,: x2,
Outgoing msg density on: updateFGBT! up -- finished updating x0,: x2,
End Clique x0,: x2, =============================
upMsgRec -- finished with x0,: x2,, w [3])
upMsgRec -- calling new recursive on x3,: x2,x4,l1,
Start Clique x3,: x2,x4,l1, =============================
====================== Clique x3,: x2,x4,l1, =============================
up w 0 msgs---------- successive fnc approx ------------x3,: x2,x4,l1,
#1	 -- 
fmcmc! -- finished on x3,: x2,x4,l1,
---------- successive fnc approx ------------x3,: x2,x4,l1,
#1	 -- [4x0p,d1,N100], [drct] [drct] [drct] 
#2	 -- [4x0p,d1,N100], [drct] [drct] [drct] 
#3	 -- [4x0p,d1,N100], [drct] [drct] [drct] 
fmcmc! -- finished on x3,: x2,x4,l1,
Outgoing msg density on: updateFGBT! up -- finished updating x3,: x2,x4,l1,
End Clique x3,: x2,x4,l1, =============================
upMsgRec -- finished with x3,: x2,x4,l1,, w [10, 3, 8])
====================== Clique x5,x2,l1,x4,:  =============================
up w 3 msgs---------- successive fnc approx ------------x5,x2,l1,x4,: 
#1	 -- 
fmcmc! -- finished on x5,x2,l1,x4,: 
---------- successive fnc approx ------------x5,x2,l1,x4,: 
#1	 -- [2x0p,d1,N100], [2x0p,d1,N100], [3x0p,d1,N100], 
#2	 -- [2x0p,d1,N100], [2x0p,d1,N100], [3x0p,d1,N100], 
#3	 -- [2x0p,d1,N100], [2x0p,d1,N100], [3x0p,d1,N100], 
fmcmc! -- finished on x5,x2,l1,x4,: 
---------- successive fnc approx ------------x5,x2,l1,x4,: 
#1	 -- [2x0p,d1,N100], 
fmcmc! -- finished on x5,x2,l1,x4,: 
Outgoing msg density on: updateFGBT! up -- finished updating x5,x2,l1,x4,: 
End Clique x5,x2,l1,x4,:  =============================
====================== Clique x5,x2,l1,x4,:  =============================
dwn---------- successive fnc approx ------------x5,x2,l1,x4,: 
fmcmc! -- finished on x5,x2,l1,x4,: 
Outgoing msg density on: ====================== Clique x7,x6,: x5, =============================
dwn---------- successive fnc approx ------------x7,x6,: x5,
#1	 -- [2x0p,d1,N100], [2x0p,d1,N100], 
#2	 -- [2x0p,d1,N100], [2x0p,d1,N100], 
#3	 -- [2x0p,d1,N100], [2x0p,d1,N100], 
fmcmc! -- finished on x7,x6,: x5,
Dwn msg keys [13, 10, 3, 8]
Outgoing msg density on: 
====================== Clique x0,: x2, =============================
dwn---------- successive fnc approx ------------x0,: x2,
#1	 -- [2x0p,d1,N100], 
fmcmc! -- finished on x0,: x2,
Dwn msg keys [13, 10, 3, 8]
Outgoing msg density on: 
====================== Clique x3,: x2,x4,l1, =============================
dwn---------- successive fnc approx ------------x3,: x2,x4,l1,
#1	 -- [4x0p,d1,N100], 
fmcmc! -- finished on x3,: x2,x4,l1,
Dwn msg keys [13, 10, 3, 8]
Outgoing msg density on: 


Do multi-process inference over tree
child.attributes["label"] = "x5,x2,l1,x4,: "
child.attributes["label"] = "x3,: x2,x4,l1,"
child.attributes["label"] = "x0,: x2,"
child.attributes["label"] = "x7,x6,: x5,"
Start Clique x7,x6,: x5, =============================
====================== Clique x7,x6,: x5, =============================
Start Clique x0,: x2, =============================
====================== Clique x0,: x2, =============================
Start Clique x3,: x2,x4,l1, =============================
====================== Clique x3,: x2,x4,l1, =============================
Start Clique x5,x2,l1,x4,:  =============================
asyncProcessPostStacks -- 1, cliq=x5,x2,l1,x4,: , start on child x7,x6,: x5, haskey=false
End Clique x0,: x2, =============================
End Clique x3,: x2,x4,l1, =============================
End Clique x7,x6,: x5, =============================
	From worker 2:	Outgoing msg density on: up w 0 msgs---------- successive fnc approx ------------x3,: x2,x4,l1,
	From worker 2:	#1	 -- 
	From worker 2:	fmcmc! -- finished on x3,: x2,x4,l1,
	From worker 2:	---------- successive fnc approx ------------x3,: x2,x4,l1,
	From worker 2:	#1	 -- [4x0p,d1,N200], [drct] [drct] [drct] 
	From worker 2:	#2	 -- [4x0p,d1,N200], [drct] [drct] [drct] 
	From worker 2:	#3	 -- [4x0p,d1,N200], [drct] [drct] [drct] 
	From worker 2:	fmcmc! -- finished on x3,: x2,x4,l1,
	From worker 4:	up w 0 msgs---------- successive fnc approx ------------x7,x6,: x5,
	From worker 4:	#1	 -- 
	From worker 4:	fmcmc! -- finished on x7,x6,: x5,
	From worker 4:	---------- successive fnc approx ------------x7,x6,: x5,
	From worker 5:	up w 0 msgs---------- successive fnc approx ------------x0,: x2,
	From worker 5:	#1	 -- 
	From worker 5:	fmcmc! -- finished on x0,: x2,
	From worker 5:	---------- successive fnc approx ------------x0,: x2,
	From worker 5:	#1	 -- [2x0p,d1,N200], [drct] 
	From worker 5:	#2	 -- [2x0p,d1,N200], [drct] 
	From worker 5:	#3	 -- [2x0p,d1,N200], [drct] 
	From worker 5:	fmcmc! -- finished on x0,: x2,
	From worker 4:	#1	 -- [2x0p,d1,N200], [2x0p,d1,N200], [drct] 
	From worker 4:	#2	 -- [2x0p,d1,N200], [2x0p,d1,N200], [drct] 
	From worker 4:	#3	 -- [2x0p,d1,N200], [2x0p,d1,N200], [drct] 
	From worker 4:	fmcmc! -- finished on x7,x6,: x5,
updateFGBT! up -- finished updating x7,x6,: x5,
asyncProcessPostStacks -- 1, cliq=x5,x2,l1,x4,: , start on child x0,: x2, haskey=false
updateFGBT! up -- finished updating x0,: x2,
asyncProcessPostStacks -- 1, cliq=x5,x2,l1,x4,: , start on child x3,: x2,x4,l1, haskey=false
updateFGBT! up -- finished updating x3,: x2,x4,l1,
====================== Clique x5,x2,l1,x4,:  =============================
End Clique x5,x2,l1,x4,:  =============================
processPostOrderStacks! -- THIS ONLY HAPPENS AFTER SYNC
	From worker 3:	Outgoing msg density on: up w 3 msgs---------- successive fnc approx ------------x5,x2,l1,x4,: 
	From worker 3:	#1	 -- 
	From worker 3:	fmcmc! -- finished on x5,x2,l1,x4,: 
	From worker 3:	---------- successive fnc approx ------------x5,x2,l1,x4,: 
	From worker 3:	#1	 -- [2x0p,d1,N200], [2x0p,d1,N200], [3x0p,d1,N200], 
	From worker 3:	#2	 -- [2x0p,d1,N200], [2x0p,d1,N200], [3x0p,d1,N200], 
	From worker 3:	#3	 -- [2x0p,d1,N200], [2x0p,d1,N200], [3x0p,d1,N200], 
	From worker 3:	fmcmc! -- finished on x5,x2,l1,x4,: 
	From worker 3:	---------- successive fnc approx ------------x5,x2,l1,x4,: 
	From worker 3:	#1	 -- [2x0p,d1,N200], 
	From worker 3:	fmcmc! -- finished on x5,x2,l1,x4,: 
upward leftovers, Int64[]
updateFGBT! up -- finished updating x5,x2,l1,x4,: 
	From worker 4:	Outgoing msg density on: =================== Iter Clique x5,x2,l1,x4,:  ===========================
	From worker 4:	dwn---------- successive fnc approx ------------x5,x2,l1,x4,: 
	From worker 4:	fmcmc! -- finished on x5,x2,l1,x4,: 
	From worker 3:	Outgoing msg density on: =================== Iter Clique x3,: x2,x4,l1, ===========================
	From worker 3:	dwn---------- successive fnc approx ------------x3,: x2,x4,l1,
	From worker 2:	Outgoing msg density on: =================== Iter Clique x0,: x2, ===========================
	From worker 2:	dwn---------- successive fnc approx ------------x0,: x2,
	From worker 5:	Outgoing msg density on: =================== Iter Clique x7,x6,: x5, ===========================
	From worker 5:	dwn---------- successive fnc approx ------------x7,x6,: x5,
	From worker 2:	#1	 -- [2x0p,d1,N200], 
	From worker 2:	fmcmc! -- finished on x0,: x2,
	From worker 2:	Dwn msg keys [13, 10, 3, 8]
	From worker 2:	Outgoing msg density on: 
	From worker 5:	#1	 -- [2x0p,d1,N200], [2x0p,d1,N200], 
	From worker 3:	#1	 -- [4x0p,d1,N200], 
	From worker 3:	fmcmc! -- finished on x3,: x2,x4,l1,
	From worker 3:	Dwn msg keys [13, 10, 3, 8]
	From worker 3:	Outgoing msg density on: 
	From worker 3:	
	From worker 3:	
	From worker 5:	#2	 -- [2x0p,d1,N200], [2x0p,d1,N200], 
	From worker 5:	#3	 -- [2x0p,d1,N200], [2x0p,d1,N200], 
	From worker 5:	fmcmc! -- finished on x7,x6,: x5,
	From worker 5:	Dwn msg keys [13, 10, 3, 8]
	From worker 5:	Outgoing msg density on: 
dwnward leftovers, Int64[]
Success
[TEST] saving to and loading from .jld file
Success
INFO: IncrementalInference tests passed

>>> End of log
