>>> 'Pkg.add("NLOptControl")' log
INFO: Installing AxisAlgorithms v0.2.0
INFO: Installing BinDeps v0.8.8
INFO: Installing BinaryProvider v0.3.3
INFO: Installing CSV v0.2.5
INFO: Installing Calculus v0.4.0
INFO: Installing CategoricalArrays v0.3.10
INFO: Installing CodecZlib v0.4.3
INFO: Installing CommonSubexpressions v0.1.0
INFO: Installing DataFrames v0.11.7
INFO: Installing DataStreams v0.3.6
INFO: Installing DataStructures v0.8.4
INFO: Installing DiffBase v0.3.2
INFO: Installing DiffEqBase v3.13.3
INFO: Installing DiffEqDiffTools v0.4.1
INFO: Installing DiffEqOperators v1.3.0
INFO: Installing DiffResults v0.0.3
INFO: Installing DiffRules v0.0.6
INFO: Installing Distances v0.6.0
INFO: Installing DualNumbers v0.4.0
INFO: Installing FastGaussQuadrature v0.3.0
INFO: Installing ForwardDiff v0.7.5
INFO: Installing FunctionWrappers v0.1.0
INFO: Installing GenericSVD v0.1.0
INFO: Installing InternedStrings v0.6.2
INFO: Installing Interpolations v0.7.3
INFO: Installing Ipopt v0.4.0
INFO: Installing IteratorInterfaceExtensions v0.0.2
INFO: Installing JuMP v0.18.2
INFO: Installing Juno v0.4.1
INFO: Installing KNITRO v0.4.0
INFO: Installing LineSearches v4.0.0
INFO: Installing LinearMaps v1.0.4
INFO: Installing MacroTools v0.4.2
INFO: Installing MathOptInterface v0.4.1
INFO: Installing MathProgBase v0.7.1
INFO: Installing Media v0.3.0
INFO: Installing Missings v0.2.10
INFO: Installing MuladdMacro v0.0.2
INFO: Installing NLOptControl v0.1.6
INFO: Installing NLSolversBase v4.4.1
INFO: Installing NLsolve v1.1.1
INFO: Installing NaNMath v0.3.1
INFO: Installing NamedTuples v4.0.2
INFO: Installing OrdinaryDiffEq v3.21.0
INFO: Installing Parameters v0.9.1
INFO: Installing Ratios v0.2.0
INFO: Installing RecipesBase v0.3.1
INFO: Installing RecursiveArrayTools v0.15.0
INFO: Installing Reexport v0.1.0
INFO: Installing Requires v0.4.4
INFO: Installing ReverseDiffSparse v0.8.1
INFO: Installing Roots v0.6.0
INFO: Installing SHA v0.5.7
INFO: Installing ShowItLikeYouBuildIt v0.2.0
INFO: Installing SimpleTraits v0.6.0
INFO: Installing SortingAlgorithms v0.2.1
INFO: Installing SpecialFunctions v0.6.0
INFO: Installing StaticArrays v0.7.2
INFO: Installing StatsBase v0.23.1
INFO: Installing TableTraits v0.2.0
INFO: Installing TranscodingStreams v0.5.3
INFO: Installing URIParser v0.3.1
INFO: Installing WeakRefStrings v0.4.7
INFO: Installing WoodburyMatrices v0.3.0
INFO: Building CodecZlib
INFO: Building DiffEqBase
INFO: ~~~ DifferentialEquations.jl *BREAKING* changes  ~~~

We have changed the front-end API on how
users may define equations of motion and 
problems, for all problem types that can
be used in the DifferentialEquations.jl.
These are *BREAKING* changes, and they
also have *NO WARNINGS*!

Please see our latest documentation here:
http://docs.juliadiffeq.org/latest/

or the blogpost that describes the changes:
http://juliadiffeq.org/2018/01/24/Parameters.html

In short, the mutated argument is the first argument,
and parameters are now directly passed
into the equations of motion function. For all
types now mutation goes first, then dependent variables, 
then parameters, then independent variables. 

`f(mutated, dependent variables, p/integrator, independent variables)`

For example, this means that the ODE syntax will be `f(u,p,t)` (for the
out-of-place) and `f(du,u,p,t)` (for the in-place). Notice
that this change also removes the need for ParameterizedFunctions
as now parameters are part of the equations of motion.

For more details please visit the above links!
INFO: Building SpecialFunctions
INFO: Building Ipopt
WARNING: imported binding for srcdir overwritten in module __anon__
INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of NLOptControl
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("NLOptControl")' log
Julia Version 0.6.4
Commit 9d11f62bcb (2018-07-09 19:09 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-143-generic #192-Ubuntu SMP Tue Feb 27 10:45:36 UTC 2018 x86_64 x86_64
Memory: 2.939197540283203 GB (663.2109375 MB free)
Uptime: 78374.0 sec
Load Avg:  0.9970703125  0.998046875  1.08251953125
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz    4858554 s         68 s     353134 s    1396099 s         30 s
#2  3500 MHz     886039 s       4835 s     125482 s    6690286 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem MAX_THREADS=16)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.6
2 required packages:
 - JSON                          0.17.2
 - NLOptControl                  0.1.6
65 additional packages:
 - AxisAlgorithms                0.2.0
 - BinDeps                       0.8.8
 - BinaryProvider                0.3.3
 - CSV                           0.2.5
 - Calculus                      0.4.0
 - CategoricalArrays             0.3.10
 - CodecZlib                     0.4.3
 - CommonSubexpressions          0.1.0
 - Compat                        0.70.0
 - DataFrames                    0.11.7
 - DataStreams                   0.3.6
 - DataStructures                0.8.4
 - DiffBase                      0.3.2
 - DiffEqBase                    3.13.3
 - DiffEqDiffTools               0.4.1
 - DiffEqOperators               1.3.0
 - DiffResults                   0.0.3
 - DiffRules                     0.0.6
 - Distances                     0.6.0
 - DualNumbers                   0.4.0
 - FastGaussQuadrature           0.3.0
 - ForwardDiff                   0.7.5
 - FunctionWrappers              0.1.0
 - GenericSVD                    0.1.0
 - InternedStrings               0.6.2
 - Interpolations                0.7.3
 - Ipopt                         0.4.0
 - IteratorInterfaceExtensions   0.0.2
 - JuMP                          0.18.2
 - Juno                          0.4.1
 - KNITRO                        0.4.0
 - LineSearches                  4.0.0
 - LinearMaps                    1.0.4
 - MacroTools                    0.4.2
 - MathOptInterface              0.4.1
 - MathProgBase                  0.7.1
 - Media                         0.3.0
 - Missings                      0.2.10
 - MuladdMacro                   0.0.2
 - NLSolversBase                 4.4.1
 - NLsolve                       1.1.1
 - NaNMath                       0.3.1
 - NamedTuples                   4.0.2
 - Nullables                     0.0.6
 - OrdinaryDiffEq                3.21.0
 - Parameters                    0.9.1
 - Ratios                        0.2.0
 - RecipesBase                   0.3.1
 - RecursiveArrayTools           0.15.0
 - Reexport                      0.1.0
 - Requires                      0.4.4
 - ReverseDiffSparse             0.8.1
 - Roots                         0.6.0
 - SHA                           0.5.7
 - ShowItLikeYouBuildIt          0.2.0
 - SimpleTraits                  0.6.0
 - SortingAlgorithms             0.2.1
 - SpecialFunctions              0.6.0
 - StaticArrays                  0.7.2
 - StatsBase                     0.23.1
 - TableTraits                   0.2.0
 - TranscodingStreams            0.5.3
 - URIParser                     0.3.1
 - WeakRefStrings                0.4.7
 - WoodburyMatrices              0.3.0
INFO: Testing NLOptControl

******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit http://projects.coin-or.org/Ipopt
******************************************************************************

n.r.ocp.dfsOpt[:tSolve] = Any[3.92601]
Test Summary:                                                          | Pass  Total
BrysonDenham with (:integrationScheme=>lgrExplicit) using expressions) |    1      1
n.r.ocp.dfsOpt[:tSolve] = Any[0.0199761]
Test Summary:                                                          | Pass  Total
BrysonDenham with (:integrationScheme=>lgrImplicit) using expressions) |    1      1
n.r.ocp.dfsOpt[:tSolve] = Any[0.0274782]
Test Summary:                                                          | Pass  Total
BrysonDenham with (:integrationScheme=>trapezoidal) using expressions) |    1      1
n.r.ocp.dfsOpt[:tSolve] = Any[0.0311871]
Test Summary:                                                       | Pass  Total
BrysonDenham with (:integrationScheme=>bkwEuler) using expressions) |    1      1
n.r.ocp.dfsOpt[:tSolve] = Any[0.025116]
Test Summary:                                                                               | Pass  Total
BrysonDenham using slackVariables with (:integrationScheme=>lgrExplicit) using expressions) |    1      1
n.r.ocp.dfsOpt[:tSolve] = Any[0.0245638]
Test Summary:                                                                               | Pass  Total
BrysonDenham using slackVariables with (:integrationScheme=>lgrImplicit) using expressions) |    1      1
n.r.ocp.dfsOpt[:tSolve] = Any[0.043648]
Test Summary:                                                                               | Pass  Total
BrysonDenham using slackVariables with (:integrationScheme=>trapezoidal) using expressions) |    1      1
n.r.ocp.dfsOpt[:tSolve] = Any[0.0358081]
Test Summary:                                                                            | Pass  Total
BrysonDenham using slackVariables with (:integrationScheme=>bkwEuler) using expressions) |    1      1
n.r.ocp.dfsOpt[:tSolve] = Any[0.022572]
Test Summary:                                                                             | Pass  Total
BeamProblem with (:integrationScheme=>lgrExplicit) using expressions and solver settings) |    1      1
n.r.ocp.dfsOpt[:tSolve] = Any[0.0104461]
Test Summary:                                                                             | Pass  Total
BeamProblem with (:integrationScheme=>lgrImplicit) using expressions and solver settings) |    1      1
n.r.ocp.dfsOpt[:tSolve] = Any[0.01179]
Test Summary:                                                                             | Pass  Total
BeamProblem with (:integrationScheme=>trapezoidal) using expressions and solver settings) |    1      1
n.r.ocp.dfsOpt[:tSolve] = Any[0.0487711]
Test Summary:                                                                          | Pass  Total
BeamProblem with (:integrationScheme=>bkwEuler) using expressions and solver settings) |    1      1
n.r.ocp.dfsOpt[:tSolve] = Any[1.82336]
Test Summary:                                                                                                                          | Pass  Total
MoonLander with (:integrationScheme=>lgrExplicit) using new names for states and controls; also naming them x and u to check for bugs) |    1      1
n.r.ocp.dfsOpt[:tSolve] = Any[0.153702]
Test Summary:                                                                                                                          | Pass  Total
MoonLander with (:integrationScheme=>lgrImplicit) using new names for states and controls; also naming them x and u to check for bugs) |    1      1
n.r.ocp.dfsOpt[:tSolve] = Any[0.775999]
Test Summary:                                                                                                                          | Pass  Total
MoonLander with (:integrationScheme=>trapezoidal) using new names for states and controls; also naming them x and u to check for bugs) |    1      1
n.r.ocp.dfsOpt[:tSolve] = Any[0.103698]
Test Summary:                                                                                                                       | Pass  Total
MoonLander with (:integrationScheme=>bkwEuler) using new names for states and controls; also naming them x and u to check for bugs) |    1      1
maximum(max_error_ave) = 0.2543252129944562
Test Summary:                                                                                                          | Pass  Total
MoonLander test to make sure that a benchmark test will be able to be executed with (:integrationScheme=>lgrExplicit)  |    1      1
maximum(max_error_ave) = 0.254325212994456
Test Summary:                                                                                                          | Pass  Total
MoonLander test to make sure that a benchmark test will be able to be executed with (:integrationScheme=>lgrImplicit)  |    1      1
maximum(max_error_ave) = 0.320036348758582
Test Summary:                                                                                                          | Pass  Total
MoonLander test to make sure that a benchmark test will be able to be executed with (:integrationScheme=>trapezoidal)  |    1      1
maximum(max_error_ave) = 0.4127819341442782
Test Summary:                                                                                                       | Pass  Total
MoonLander test to make sure that a benchmark test will be able to be executed with (:integrationScheme=>bkwEuler)  |    1      1
WARNING: Not solved to optimality, status: Infeasible
n.r.ocp.dfsOpt = 31Ã—4 DataFrames.DataFrame
â”‚ Row â”‚ tSolve    â”‚ objVal  â”‚ status     â”‚ iterNum â”‚
â”œâ”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”€â”€â”¤
â”‚ 1   â”‚ 0.041759  â”‚ 8.92419 â”‚ Optimal    â”‚ 0       â”‚
â”‚ 2   â”‚ 0.053128  â”‚ 8.92435 â”‚ Optimal    â”‚ 0       â”‚
â”‚ 3   â”‚ 0.0474222 â”‚ 8.92438 â”‚ Optimal    â”‚ 0       â”‚
â”‚ 4   â”‚ 0.040576  â”‚ 8.92436 â”‚ Optimal    â”‚ 0       â”‚
â”‚ 5   â”‚ 0.0439541 â”‚ 8.92434 â”‚ Optimal    â”‚ 0       â”‚
â”‚ 6   â”‚ 0.0656481 â”‚ 8.92427 â”‚ Optimal    â”‚ 0       â”‚
â”‚ 7   â”‚ 0.048538  â”‚ 8.92414 â”‚ Optimal    â”‚ 0       â”‚
â”‚ 8   â”‚ 0.046669  â”‚ 8.92428 â”‚ Optimal    â”‚ 0       â”‚
â”‚ 9   â”‚ 0.0532629 â”‚ 8.9241  â”‚ Optimal    â”‚ 0       â”‚
â”‚ 10  â”‚ 0.0462918 â”‚ 8.92422 â”‚ Optimal    â”‚ 0       â”‚
â”‚ 11  â”‚ 0.0617201 â”‚ 8.92422 â”‚ Optimal    â”‚ 0       â”‚
â”‚ 12  â”‚ 0.072876  â”‚ 8.9242  â”‚ Optimal    â”‚ 0       â”‚
â”‚ 13  â”‚ 0.107441  â”‚ 8.87546 â”‚ Optimal    â”‚ 0       â”‚
â”‚ 14  â”‚ 0.133033  â”‚ 8.7377  â”‚ Optimal    â”‚ 0       â”‚
â”‚ 15  â”‚ 0.121834  â”‚ 8.43614 â”‚ Optimal    â”‚ 0       â”‚
â”‚ 16  â”‚ 0.109227  â”‚ 8.13457 â”‚ Optimal    â”‚ 0       â”‚
â”‚ 17  â”‚ 0.169135  â”‚ 7.833   â”‚ Optimal    â”‚ 0       â”‚
â”‚ 18  â”‚ 0.155811  â”‚ 7.53143 â”‚ Optimal    â”‚ 0       â”‚
â”‚ 19  â”‚ 0.324365  â”‚ 7.23179 â”‚ Optimal    â”‚ 0       â”‚
â”‚ 20  â”‚ 0.122558  â”‚ 6.93256 â”‚ Optimal    â”‚ 0       â”‚
â”‚ 21  â”‚ 0.138419  â”‚ 6.63293 â”‚ Optimal    â”‚ 0       â”‚
â”‚ 22  â”‚ 0.124298  â”‚ 6.33296 â”‚ Optimal    â”‚ 0       â”‚
â”‚ 23  â”‚ 0.133087  â”‚ 6.03269 â”‚ Optimal    â”‚ 0       â”‚
â”‚ 24  â”‚ 0.144221  â”‚ 5.73217 â”‚ Optimal    â”‚ 0       â”‚
â”‚ 25  â”‚ 0.119167  â”‚ 5.43141 â”‚ Optimal    â”‚ 0       â”‚
â”‚ 26  â”‚ 0.1469    â”‚ 5.13044 â”‚ Optimal    â”‚ 0       â”‚
â”‚ 27  â”‚ 0.121403  â”‚ 4.82928 â”‚ Optimal    â”‚ 0       â”‚
â”‚ 28  â”‚ 0.12551   â”‚ 4.52795 â”‚ Optimal    â”‚ 0       â”‚
â”‚ 29  â”‚ 0.112716  â”‚ 4.22696 â”‚ Optimal    â”‚ 0       â”‚
â”‚ 30  â”‚ 0.106046  â”‚ 3.92773 â”‚ Optimal    â”‚ 0       â”‚
â”‚ 31  â”‚ 0.526823  â”‚ 3.92773 â”‚ Infeasible â”‚ 0       â”‚
optIdx = 30
n.r.ocp.dfs[optIdx] = 101Ã—4 DataFrames.DataFrame
â”‚ Row â”‚ t       â”‚ h            â”‚ v            â”‚ T          â”‚
â”œâ”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”¤
â”‚ 1   â”‚ 3.0     â”‚ 1.09905      â”‚ -1.74031     â”‚ 3.0        â”‚
â”‚ 2   â”‚ 3.01346 â”‚ 1.07574      â”‚ -1.7218      â”‚ 3.0        â”‚
â”‚ 3   â”‚ 3.02692 â”‚ 1.05269      â”‚ -1.70329     â”‚ 3.0        â”‚
â”‚ 4   â”‚ 3.04038 â”‚ 1.02989      â”‚ -1.68478     â”‚ 3.0        â”‚
â”‚ 5   â”‚ 3.05384 â”‚ 1.00733      â”‚ -1.66627     â”‚ 3.0        â”‚
â”‚ 6   â”‚ 3.06731 â”‚ 0.985028     â”‚ -1.64776     â”‚ 3.0        â”‚
â”‚ 7   â”‚ 3.08077 â”‚ 0.962972     â”‚ -1.62926     â”‚ 3.0        â”‚
â”‚ 8   â”‚ 3.09423 â”‚ 0.941165     â”‚ -1.61075     â”‚ 3.0        â”‚
â”‚ 9   â”‚ 3.10769 â”‚ 0.919607     â”‚ -1.59224     â”‚ 3.0        â”‚
â”‚ 10  â”‚ 3.12115 â”‚ 0.898299     â”‚ -1.57373     â”‚ 3.0        â”‚
â”‚ 11  â”‚ 3.13461 â”‚ 0.877239     â”‚ -1.55522     â”‚ 3.0        â”‚
â”‚ 12  â”‚ 3.14807 â”‚ 0.856429     â”‚ -1.53671     â”‚ 3.0        â”‚
â”‚ 13  â”‚ 3.16153 â”‚ 0.835868     â”‚ -1.5182      â”‚ 3.0        â”‚
â”‚ 14  â”‚ 3.17499 â”‚ 0.815556     â”‚ -1.49969     â”‚ 3.0        â”‚
â”‚ 15  â”‚ 3.18845 â”‚ 0.795493     â”‚ -1.48118     â”‚ 3.0        â”‚
â”‚ 16  â”‚ 3.20192 â”‚ 0.775679     â”‚ -1.46268     â”‚ 3.0        â”‚
â”‚ 17  â”‚ 3.21538 â”‚ 0.756115     â”‚ -1.44417     â”‚ 3.0        â”‚
â”‚ 18  â”‚ 3.22884 â”‚ 0.736799     â”‚ -1.42566     â”‚ 3.0        â”‚
â”‚ 19  â”‚ 3.2423  â”‚ 0.717733     â”‚ -1.40715     â”‚ 3.0        â”‚
â”‚ 20  â”‚ 3.25576 â”‚ 0.698916     â”‚ -1.38864     â”‚ 3.0        â”‚
â”‚ 21  â”‚ 3.26922 â”‚ 0.680348     â”‚ -1.37013     â”‚ 3.0        â”‚
â”‚ 22  â”‚ 3.28268 â”‚ 0.662029     â”‚ -1.35162     â”‚ 3.0        â”‚
â”‚ 23  â”‚ 3.29614 â”‚ 0.643959     â”‚ -1.33311     â”‚ 3.0        â”‚
â”‚ 24  â”‚ 3.3096  â”‚ 0.626139     â”‚ -1.3146      â”‚ 3.0        â”‚
â”‚ 25  â”‚ 3.32307 â”‚ 0.608568     â”‚ -1.29609     â”‚ 3.0        â”‚
â”‚ 26  â”‚ 3.33653 â”‚ 0.591245     â”‚ -1.27759     â”‚ 3.0        â”‚
â”‚ 27  â”‚ 3.34999 â”‚ 0.574172     â”‚ -1.25908     â”‚ 3.0        â”‚
â”‚ 28  â”‚ 3.36345 â”‚ 0.557348     â”‚ -1.24057     â”‚ 3.0        â”‚
â”‚ 29  â”‚ 3.37691 â”‚ 0.540774     â”‚ -1.22206     â”‚ 3.0        â”‚
â”‚ 30  â”‚ 3.39037 â”‚ 0.524448     â”‚ -1.20355     â”‚ 3.0        â”‚
â”‚ 31  â”‚ 3.40383 â”‚ 0.508371     â”‚ -1.18504     â”‚ 3.0        â”‚
â”‚ 32  â”‚ 3.41729 â”‚ 0.492544     â”‚ -1.16653     â”‚ 3.0        â”‚
â”‚ 33  â”‚ 3.43075 â”‚ 0.476966     â”‚ -1.14802     â”‚ 3.0        â”‚
â”‚ 34  â”‚ 3.44421 â”‚ 0.461637     â”‚ -1.12951     â”‚ 3.0        â”‚
â”‚ 35  â”‚ 3.45768 â”‚ 0.446557     â”‚ -1.11101     â”‚ 3.0        â”‚
â”‚ 36  â”‚ 3.47114 â”‚ 0.431726     â”‚ -1.0925      â”‚ 3.0        â”‚
â”‚ 37  â”‚ 3.4846  â”‚ 0.417145     â”‚ -1.07399     â”‚ 3.0        â”‚
â”‚ 38  â”‚ 3.49806 â”‚ 0.402812     â”‚ -1.05548     â”‚ 3.0        â”‚
â”‚ 39  â”‚ 3.51152 â”‚ 0.388729     â”‚ -1.03697     â”‚ 3.0        â”‚
â”‚ 40  â”‚ 3.52498 â”‚ 0.374895     â”‚ -1.01846     â”‚ 3.0        â”‚
â”‚ 41  â”‚ 3.53844 â”‚ 0.36131      â”‚ -0.999952    â”‚ 3.0        â”‚
â”‚ 42  â”‚ 3.5519  â”‚ 0.347974     â”‚ -0.981443    â”‚ 3.0        â”‚
â”‚ 43  â”‚ 3.56536 â”‚ 0.334888     â”‚ -0.962934    â”‚ 3.0        â”‚
â”‚ 44  â”‚ 3.57882 â”‚ 0.32205      â”‚ -0.944425    â”‚ 3.0        â”‚
â”‚ 45  â”‚ 3.59229 â”‚ 0.309462     â”‚ -0.925916    â”‚ 3.0        â”‚
â”‚ 46  â”‚ 3.60575 â”‚ 0.297122     â”‚ -0.907407    â”‚ 3.0        â”‚
â”‚ 47  â”‚ 3.61921 â”‚ 0.285032     â”‚ -0.888898    â”‚ 3.0        â”‚
â”‚ 48  â”‚ 3.63267 â”‚ 0.273191     â”‚ -0.870389    â”‚ 3.0        â”‚
â”‚ 49  â”‚ 3.64613 â”‚ 0.2616       â”‚ -0.85188     â”‚ 3.0        â”‚
â”‚ 50  â”‚ 3.65959 â”‚ 0.250257     â”‚ -0.833372    â”‚ 3.0        â”‚
â”‚ 51  â”‚ 3.67305 â”‚ 0.239163     â”‚ -0.814863    â”‚ 3.0        â”‚
â”‚ 52  â”‚ 3.68651 â”‚ 0.228319     â”‚ -0.796354    â”‚ 3.0        â”‚
â”‚ 53  â”‚ 3.69997 â”‚ 0.217724     â”‚ -0.777845    â”‚ 3.0        â”‚
â”‚ 54  â”‚ 3.71344 â”‚ 0.207378     â”‚ -0.759336    â”‚ 3.0        â”‚
â”‚ 55  â”‚ 3.7269  â”‚ 0.197281     â”‚ -0.740827    â”‚ 3.0        â”‚
â”‚ 56  â”‚ 3.74036 â”‚ 0.187433     â”‚ -0.722318    â”‚ 3.0        â”‚
â”‚ 57  â”‚ 3.75382 â”‚ 0.177835     â”‚ -0.703809    â”‚ 3.0        â”‚
â”‚ 58  â”‚ 3.76728 â”‚ 0.168485     â”‚ -0.6853      â”‚ 3.0        â”‚
â”‚ 59  â”‚ 3.78074 â”‚ 0.159385     â”‚ -0.666791    â”‚ 3.0        â”‚
â”‚ 60  â”‚ 3.7942  â”‚ 0.150534     â”‚ -0.648282    â”‚ 3.0        â”‚
â”‚ 61  â”‚ 3.80766 â”‚ 0.141932     â”‚ -0.629773    â”‚ 3.0        â”‚
â”‚ 62  â”‚ 3.82112 â”‚ 0.133579     â”‚ -0.611264    â”‚ 3.0        â”‚
â”‚ 63  â”‚ 3.83458 â”‚ 0.125475     â”‚ -0.592755    â”‚ 3.0        â”‚
â”‚ 64  â”‚ 3.84805 â”‚ 0.117621     â”‚ -0.574246    â”‚ 3.0        â”‚
â”‚ 65  â”‚ 3.86151 â”‚ 0.110016     â”‚ -0.555737    â”‚ 3.0        â”‚
â”‚ 66  â”‚ 3.87497 â”‚ 0.102659     â”‚ -0.537229    â”‚ 3.0        â”‚
â”‚ 67  â”‚ 3.88843 â”‚ 0.0955522    â”‚ -0.51872     â”‚ 3.0        â”‚
â”‚ 68  â”‚ 3.90189 â”‚ 0.0886943    â”‚ -0.500211    â”‚ 3.0        â”‚
â”‚ 69  â”‚ 3.91535 â”‚ 0.0820855    â”‚ -0.481702    â”‚ 3.0        â”‚
â”‚ 70  â”‚ 3.92881 â”‚ 0.0757259    â”‚ -0.463193    â”‚ 3.0        â”‚
â”‚ 71  â”‚ 3.94227 â”‚ 0.0696154    â”‚ -0.444684    â”‚ 3.0        â”‚
â”‚ 72  â”‚ 3.95573 â”‚ 0.063754     â”‚ -0.426175    â”‚ 3.0        â”‚
â”‚ 73  â”‚ 3.9692  â”‚ 0.0581419    â”‚ -0.407666    â”‚ 3.0        â”‚
â”‚ 74  â”‚ 3.98266 â”‚ 0.0527788    â”‚ -0.389157    â”‚ 3.0        â”‚
â”‚ 75  â”‚ 3.99612 â”‚ 0.0476649    â”‚ -0.370648    â”‚ 3.0        â”‚
â”‚ 76  â”‚ 4.00958 â”‚ 0.0428002    â”‚ -0.352139    â”‚ 3.0        â”‚
â”‚ 77  â”‚ 4.02304 â”‚ 0.0381846    â”‚ -0.33363     â”‚ 3.0        â”‚
â”‚ 78  â”‚ 4.0365  â”‚ 0.0338182    â”‚ -0.315121    â”‚ 3.0        â”‚
â”‚ 79  â”‚ 4.04996 â”‚ 0.0297009    â”‚ -0.296612    â”‚ 3.0        â”‚
â”‚ 80  â”‚ 4.06342 â”‚ 0.0258328    â”‚ -0.278103    â”‚ 3.0        â”‚
â”‚ 81  â”‚ 4.07688 â”‚ 0.0222138    â”‚ -0.259594    â”‚ 3.0        â”‚
â”‚ 82  â”‚ 4.09034 â”‚ 0.0188439    â”‚ -0.241086    â”‚ 3.0        â”‚
â”‚ 83  â”‚ 4.10381 â”‚ 0.0157232    â”‚ -0.222577    â”‚ 3.0        â”‚
â”‚ 84  â”‚ 4.11727 â”‚ 0.0128517    â”‚ -0.204068    â”‚ 3.0        â”‚
â”‚ 85  â”‚ 4.13073 â”‚ 0.0102293    â”‚ -0.185559    â”‚ 3.0        â”‚
â”‚ 86  â”‚ 4.14419 â”‚ 0.00785608   â”‚ -0.16705     â”‚ 3.0        â”‚
â”‚ 87  â”‚ 4.15765 â”‚ 0.00573199   â”‚ -0.148541    â”‚ 3.0        â”‚
â”‚ 88  â”‚ 4.17111 â”‚ 0.00385705   â”‚ -0.130032    â”‚ 3.0        â”‚
â”‚ 89  â”‚ 4.18457 â”‚ 0.00223126   â”‚ -0.111523    â”‚ 3.0        â”‚
â”‚ 90  â”‚ 4.19803 â”‚ 0.000854617  â”‚ -0.093014    â”‚ 3.0        â”‚
â”‚ 91  â”‚ 4.21149 â”‚ -0.000272874 â”‚ -0.0745051   â”‚ 3.0        â”‚
â”‚ 92  â”‚ 4.22496 â”‚ -0.00115122  â”‚ -0.0559962   â”‚ 3.0        â”‚
â”‚ 93  â”‚ 4.23842 â”‚ -0.00178041  â”‚ -0.0374872   â”‚ 3.0        â”‚
â”‚ 94  â”‚ 4.25188 â”‚ -0.00216045  â”‚ -0.0189783   â”‚ 3.0        â”‚
â”‚ 95  â”‚ 4.26534 â”‚ -0.00229134  â”‚ -0.000469341 â”‚ 3.0        â”‚
â”‚ 96  â”‚ 4.2788  â”‚ -0.00217309  â”‚ 0.0180396    â”‚ 3.0        â”‚
â”‚ 97  â”‚ 4.29226 â”‚ -0.00180568  â”‚ 0.0365485    â”‚ 3.0        â”‚
â”‚ 98  â”‚ 4.30572 â”‚ -0.00122152  â”‚ 0.0502442    â”‚ 2.28487    â”‚
â”‚ 99  â”‚ 4.31918 â”‚ -0.000588899 â”‚ 0.0437484    â”‚ 4.59554e-7 â”‚
â”‚ 100 â”‚ 4.33264 â”‚ -0.000147225 â”‚ 0.0218742    â”‚ 2.24776e-7 â”‚
â”‚ 101 â”‚ 4.3461  â”‚ 0.0          â”‚ 0.0          â”‚ 3.6564e-7  â”‚
n.mpc.v.t = 3.0000000000000013
Test Summary:        | Pass  Total
MoonLander MPC Tests |    8      8
INFO: NLOptControl tests passed

>>> End of log
