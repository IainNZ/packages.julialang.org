>>> 'Pkg.add("MINPACK")' log
WARNING: Base.Pkg is deprecated, run `using Pkg` instead
 in module Main
[ Info: Cloning cache of MINPACK from https://github.com/sglyon/MINPACK.jl.git
[ Info: Installing Distances v0.6.0
[ Info: Installing MINPACK v1.0.0
[ Info: Building MINPACK
┌ Warning: `is_apple` is deprecated, use `Sys.isapple` instead.
│   caller = top-level scope
└ @ Core :0
┌ Warning: `is_windows` is deprecated, use `Sys.iswindows` instead.
│   caller = top-level scope at build.jl:4
└ @ Core build.jl:4
┌ Warning: `is_linux` is deprecated, use `Sys.islinux` instead.
│   caller = top-level scope at build.jl:11
└ @ Core build.jl:11
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0100   604    0   604    0     0   4584      0 --:--:-- --:--:-- --:--:--  4610
  0     0    0     0    0     0      0      0 --:--:--  0:00:01 --:--:--     0  0  116k    0     0    0     0      0      0 --:--:--  0:00:01 --:--:--     0100  116k  100  116k    0     0  65025      0  0:00:01  0:00:01 --:--:--  625k
[ Info: Package database updated

>>> 'Pkg.test("MINPACK")' log
WARNING: Base.versioninfo is deprecated: it has been moved to the standard library package `InteractiveUtils`.
Add `using InteractiveUtils` to your imports.
 in module Main
WARNING: Base.versioninfo is deprecated: it has been moved to the standard library package `InteractiveUtils`.
Add `using InteractiveUtils` to your imports.
 in module Main
Julia Version 0.7.0-DEV.4925
Commit 55d4808a62 (2018-04-21 19:20 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
      Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-143-generic #192-Ubuntu SMP Tue Feb 27 10:45:36 UTC 2018 x86_64 x86_64
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
              speed         user         nice          sys         idle          irq
       #1  3500 MHz    4311374 s       7182 s     342635 s    1323355 s         78 s
       #2  3500 MHz    1142024 s        364 s     127927 s    5540026 s          2 s
       
  Memory: 2.939197540283203 GB (1098.9296875 MB free)
  Uptime: 69595.0 sec
  Load Avg:  0.88134765625  0.94580078125  0.947265625
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant
Packages:
  Package Directory: /home/vagrant/.julia/v0.7
  Package Status:
2 required packages:
 - JSON                          0.17.2
 - MINPACK                       1.0.0
3 additional packages:
 - Compat                        0.64.0
 - Distances                     0.6.0
 - Nullables                     0.0.5
WARNING: Base.Pkg is deprecated, run `using Pkg` instead
 in module Main
[ Info: Testing MINPACK
┌ Warning: Deprecated syntax `immutable` at /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:35.
│ Use `struct` instead.
└ @ nothing runtests.jl:35
┌ Warning: Deprecated syntax `immutable` at /home/vagrant/.julia/v0.7/MINPACK/src/MINPACK.jl:13.
│ Use `struct` instead.
└ @ nothing MINPACK.jl:13
┌ Warning: Deprecated syntax `type` at /home/vagrant/.julia/v0.7/MINPACK/src/MINPACK.jl:24.
│ Use `mutable struct` instead.
└ @ nothing MINPACK.jl:24
┌ Warning: Deprecated syntax `immutable` at /home/vagrant/.julia/v0.7/MINPACK/src/MINPACK.jl:82.
│ Use `struct` instead.
└ @ nothing MINPACK.jl:82
┌ Warning: `is_apple` is deprecated, use `Sys.isapple` instead.
│   caller = top-level scope
└ @ Core :0
┌ Warning: `is_windows` is deprecated, use `Sys.iswindows` instead.
│   caller = top-level scope
└ @ Core :0
WARNING: importing deprecated binding Base.@printf into MINPACK.
WARNING: Base.@printf is deprecated: it has been moved to the standard library package `Printf`.
Add `using Printf` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/src/MINPACK.jl:20
WARNING: importing deprecated binding Base.Void into MINPACK.
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/src/MINPACK.jl:48
WARNING: Base.@printf is deprecated: it has been moved to the standard library package `Printf`.
Add `using Printf` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/src/MINPACK.jl:50
WARNING: Base.@printf is deprecated: it has been moved to the standard library package `Printf`.
Add `using Printf` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/src/MINPACK.jl:50
WARNING: Base.@printf is deprecated: it has been moved to the standard library package `Printf`.
Add `using Printf` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/src/MINPACK.jl:94
WARNING: Base.@printf is deprecated: it has been moved to the standard library package `Printf`.
Add `using Printf` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/src/MINPACK.jl:94
WARNING: Base.@printf is deprecated: it has been moved to the standard library package `Printf`.
Add `using Printf` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/src/MINPACK.jl:94
WARNING: Base.@printf is deprecated: it has been moved to the standard library package `Printf`.
Add `using Printf` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/src/MINPACK.jl:94
WARNING: Base.@printf is deprecated: it has been moved to the standard library package `Printf`.
Add `using Printf` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/src/MINPACK.jl:94
WARNING: Base.@printf is deprecated: it has been moved to the standard library package `Printf`.
Add `using Printf` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/src/MINPACK.jl:94
WARNING: Base.@printf is deprecated: it has been moved to the standard library package `Printf`.
Add `using Printf` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/src/MINPACK.jl:94
WARNING: Base.@printf is deprecated: it has been moved to the standard library package `Printf`.
Add `using Printf` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/src/MINPACK.jl:94
WARNING: Base.@printf is deprecated: it has been moved to the standard library package `Printf`.
Add `using Printf` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/src/MINPACK.jl:94
WARNING: Base.@printf is deprecated: it has been moved to the standard library package `Printf`.
Add `using Printf` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/src/MINPACK.jl:94
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/src/wrappers.jl:3
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/src/wrappers.jl:18
┌ Warning: `cfunction(f, r, a::Tuple)` is deprecated, use `cfunction(f, r, Tuple{a...})` instead.
│   caller = top-level scope
└ @ Core :0
┌ Warning: The function `cfunction` is now written as a macro `@cfunction`.
│   caller = cfunction(::Function, ::Type, ::NTuple{5,DataType}) at deprecated.jl:57
└ @ Base deprecated.jl:57
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/src/wrappers.jl:34
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/src/wrappers.jl:34
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/src/wrappers.jl:88
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/src/wrappers.jl:111
┌ Warning: `cfunction(f, r, a::Tuple)` is deprecated, use `cfunction(f, r, Tuple{a...})` instead.
│   caller = top-level scope
└ @ Core :0
┌ Warning: The function `cfunction` is now written as a macro `@cfunction`.
│   caller = cfunction(::Function, ::Type, ::NTuple{7,DataType}) at deprecated.jl:57
└ @ Base deprecated.jl:57
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/src/wrappers.jl:127
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/src/wrappers.jl:127
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/src/wrappers.jl:186
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/src/wrappers.jl:201
┌ Warning: `cfunction(f, r, a::Tuple)` is deprecated, use `cfunction(f, r, Tuple{a...})` instead.
│   caller = top-level scope
└ @ Core :0
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/src/wrappers.jl:214
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/src/wrappers.jl:214
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/src/wrappers.jl:248
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/src/wrappers.jl:262
┌ Warning: `cfunction(f, r, a::Tuple)` is deprecated, use `cfunction(f, r, Tuple{a...})` instead.
│   caller = top-level scope
└ @ Core :0
┌ Warning: The function `cfunction` is now written as a macro `@cfunction`.
│   caller = cfunction(::Function, ::Type, ::NTuple{6,DataType}) at deprecated.jl:57
└ @ Base deprecated.jl:57
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/src/wrappers.jl:283
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/src/wrappers.jl:283
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/src/wrappers.jl:322
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/src/wrappers.jl:336
┌ Warning: `cfunction(f, r, a::Tuple)` is deprecated, use `cfunction(f, r, Tuple{a...})` instead.
│   caller = top-level scope
└ @ Core :0
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/src/wrappers.jl:359
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/src/wrappers.jl:359
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/src/wrappers.jl:424
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/src/wrappers.jl:448
┌ Warning: `cfunction(f, r, a::Tuple)` is deprecated, use `cfunction(f, r, Tuple{a...})` instead.
│   caller = top-level scope
└ @ Core :0
┌ Warning: The function `cfunction` is now written as a macro `@cfunction`.
│   caller = cfunction(::Function, ::Type, ::NTuple{8,DataType}) at deprecated.jl:57
└ @ Base deprecated.jl:57
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/src/wrappers.jl:470
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/src/wrappers.jl:470
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/src/wrappers.jl:537
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/src/wrappers.jl:545
┌ Warning: `cfunction(f, r, a::Tuple)` is deprecated, use `cfunction(f, r, Tuple{a...})` instead.
│   caller = top-level scope
└ @ Core :0
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/src/wrappers.jl:547
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/src/wrappers.jl:547
WARNING: Base.Test is deprecated, run `using Test` instead
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:2
WARNING: Base.@printf is deprecated: it has been moved to the standard library package `Printf`.
Add `using Printf` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.@printf is deprecated: it has been moved to the standard library package `Printf`.
Add `using Printf` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.@printf is deprecated: it has been moved to the standard library package `Printf`.
Add `using Printf` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.@printf is deprecated: it has been moved to the standard library package `Printf`.
Add `using Printf` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.@printf is deprecated: it has been moved to the standard library package `Printf`.
Add `using Printf` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.@printf is deprecated: it has been moved to the standard library package `Printf`.
Add `using Printf` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
┌ Warning: Deprecated syntax ``const` declaration on local variable` around /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:78.
└ @ nothing runtests.jl:78
┌ Warning: Deprecated syntax ``const` declaration on local variable` around /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:79.
└ @ nothing runtests.jl:79
┌ Warning: Deprecated syntax ``const` declaration on local variable` around /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:94.
└ @ nothing runtests.jl:94
┌ Warning: Deprecated syntax ``const` declaration on local variable` around /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:95.
└ @ nothing runtests.jl:95
┌ Warning: Deprecated syntax ``const` declaration on local variable` around /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:96.
└ @ nothing runtests.jl:96
┌ Warning: Deprecated syntax ``const` declaration on local variable` around /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:97.
└ @ nothing runtests.jl:97
┌ Warning: Deprecated syntax ``const` declaration on local variable` around /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:127.
└ @ nothing runtests.jl:127
┌ Warning: Deprecated syntax ``const` declaration on local variable` around /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:128.
└ @ nothing runtests.jl:128
┌ Warning: Deprecated syntax ``const` declaration on local variable` around /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:129.
└ @ nothing runtests.jl:129
┌ Warning: Deprecated syntax ``const` declaration on local variable` around /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:163.
└ @ nothing runtests.jl:163
┌ Warning: Deprecated syntax ``const` declaration on local variable` around /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:238.
└ @ nothing runtests.jl:238
┌ Warning: Deprecated syntax ``const` declaration on local variable` around /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:314.
└ @ nothing runtests.jl:314
┌ Warning: Deprecated syntax ``const` declaration on local variable` around /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:355.
└ @ nothing runtests.jl:355
┌ Warning: Deprecated syntax ``const` declaration on local variable` around /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:480.
└ @ nothing runtests.jl:480
┌ Warning: Deprecated syntax ``const` declaration on local variable` around /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:481.
└ @ nothing runtests.jl:481
WARNING: Base.norm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
in top-level scope at /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl
WARNING: Base.norm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
in top-level scope at /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl
WARNING: Base.norm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
in top-level scope at /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl
WARNING: Base.norm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
in top-level scope at /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl
Function                                          Dim    NFEV    NJEV   Final inf-norm     total time
--------------------------------------------------------------------------------------
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: importing deprecated binding Base.norm into MINPACK.
WARNING: Base.norm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.norm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.norm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.norm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.norm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.norm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.norm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.norm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.norm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.norm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.norm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.norm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.norm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.norm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.norm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
┌ Warning: `Array{T}(m::Int, n::Int) where T` is deprecated, use `Array{T}(undef, m, n)` instead.
│   caller = #hybrj#4(::Int64, ::Int64, ::Int64, ::Int64, ::Float64, ::Array{Float64,1}, ::Int64, ::Float64, ::Int64, ::Int32, ::typeof(MINPACK.hybrj), ::getfield(Main, Symbol("#f!#9")), ::getfield(Main, Symbol("#g!#10")), ::Array{Float64,1}, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:138
└ @ MINPACK wrappers.jl:138
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = Type at MINPACK.jl:43 [inlined]
└ @ Core MINPACK.jl:43
┌ Warning: `Array{T}(m::Integer) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #hybrj#4(::Int64, ::Int64, ::Int64, ::Int64, ::Float64, ::Array{Float64,1}, ::Int64, ::Float64, ::Int64, ::Int32, ::typeof(MINPACK.hybrj), ::getfield(Main, Symbol("#f!#9")), ::getfield(Main, Symbol("#g!#10")), ::Array{Float64,1}, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:145
└ @ MINPACK wrappers.jl:145
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #hybrj#4(::Int64, ::Int64, ::Int64, ::Int64, ::Float64, ::Array{Float64,1}, ::Int64, ::Float64, ::Int64, ::Int32, ::typeof(MINPACK.hybrj), ::getfield(Main, Symbol("#f!#9")), ::getfield(Main, Symbol("#g!#10")), ::Array{Float64,1}, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:146
└ @ MINPACK wrappers.jl:146
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #hybrj#4(::Int64, ::Int64, ::Int64, ::Int64, ::Float64, ::Array{Float64,1}, ::Int64, ::Float64, ::Int64, ::Int32, ::typeof(MINPACK.hybrj), ::getfield(Main, Symbol("#f!#9")), ::getfield(Main, Symbol("#g!#10")), ::Array{Float64,1}, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:147
└ @ MINPACK wrappers.jl:147
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #hybrj#4(::Int64, ::Int64, ::Int64, ::Int64, ::Float64, ::Array{Float64,1}, ::Int64, ::Float64, ::Int64, ::Int32, ::typeof(MINPACK.hybrj), ::getfield(Main, Symbol("#f!#9")), ::getfield(Main, Symbol("#g!#10")), ::Array{Float64,1}, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:148
└ @ MINPACK wrappers.jl:148
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #hybrj#4(::Int64, ::Int64, ::Int64, ::Int64, ::Float64, ::Array{Float64,1}, ::Int64, ::Float64, ::Int64, ::Int32, ::typeof(MINPACK.hybrj), ::getfield(Main, Symbol("#f!#9")), ::getfield(Main, Symbol("#g!#10")), ::Array{Float64,1}, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:149
└ @ MINPACK wrappers.jl:149
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #hybrj#4(::Int64, ::Int64, ::Int64, ::Int64, ::Float64, ::Array{Float64,1}, ::Int64, ::Float64, ::Int64, ::Int32, ::typeof(MINPACK.hybrj), ::getfield(Main, Symbol("#f!#9")), ::getfield(Main, Symbol("#g!#10")), ::Array{Float64,1}, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:150
└ @ MINPACK wrappers.jl:150
┌ Warning: `copy!(dst::AbstractArray, src::AbstractArray)` is deprecated. You can either use `copyto!(dst, src)` or `Future.copy!(dst, src)` instead.
│   caller = push!(::MINPACK.AlgoTrace, ::Array{Float64,1}, ::Array{Float64,1}, ::Int32) at MINPACK.jl:76
└ @ MINPACK MINPACK.jl:76
Rosenbrock-hybr                                     2      16       3     0.000000e+00   7.239027e-01
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.norm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.norm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.norm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.norm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.norm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.norm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.norm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.norm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.norm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = Type at MINPACK.jl:43 [inlined]
└ @ Core MINPACK.jl:43
Rosenbrock-hybr-no_g                                2      16       3     0.000000e+00   1.887130e-01
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.norm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.norm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.norm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #lmder#6(::Int64, ::Float64, ::Float64, ::Float64, ::Float64, ::Int64, ::Int64, ::Int64, ::Float64, ::Int64, ::typeof(MINPACK.lmder), ::getfield(Main, Symbol("#f!#9")), ::getfield(Main, Symbol("#g!#10")), ::Array{Float64,1}, ::Int64, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:484
└ @ MINPACK wrappers.jl:484
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #lmder#6(::Int64, ::Float64, ::Float64, ::Float64, ::Float64, ::Int64, ::Int64, ::Int64, ::Float64, ::Int64, ::typeof(MINPACK.lmder), ::getfield(Main, Symbol("#f!#9")), ::getfield(Main, Symbol("#g!#10")), ::Array{Float64,1}, ::Int64, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:486
└ @ MINPACK wrappers.jl:486
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #lmder#6(::Int64, ::Float64, ::Float64, ::Float64, ::Float64, ::Int64, ::Int64, ::Int64, ::Float64, ::Int64, ::typeof(MINPACK.lmder), ::getfield(Main, Symbol("#f!#9")), ::getfield(Main, Symbol("#g!#10")), ::Array{Float64,1}, ::Int64, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:487
└ @ MINPACK wrappers.jl:487
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = Type at MINPACK.jl:43 [inlined]
└ @ Core MINPACK.jl:43
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #lmder#6(::Int64, ::Float64, ::Float64, ::Float64, ::Float64, ::Int64, ::Int64, ::Int64, ::Float64, ::Int64, ::typeof(MINPACK.lmder), ::getfield(Main, Symbol("#f!#9")), ::getfield(Main, Symbol("#g!#10")), ::Array{Float64,1}, ::Int64, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:492
└ @ MINPACK wrappers.jl:492
┌ Warning: `Array{T}(m::Int, n::Int) where T` is deprecated, use `Array{T}(undef, m, n)` instead.
│   caller = #lmder#6(::Int64, ::Float64, ::Float64, ::Float64, ::Float64, ::Int64, ::Int64, ::Int64, ::Float64, ::Int64, ::typeof(MINPACK.lmder), ::getfield(Main, Symbol("#f!#9")), ::getfield(Main, Symbol("#g!#10")), ::Array{Float64,1}, ::Int64, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:495
└ @ MINPACK wrappers.jl:495
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #lmder#6(::Int64, ::Float64, ::Float64, ::Float64, ::Float64, ::Int64, ::Int64, ::Int64, ::Float64, ::Int64, ::typeof(MINPACK.lmder), ::getfield(Main, Symbol("#f!#9")), ::getfield(Main, Symbol("#g!#10")), ::Array{Float64,1}, ::Int64, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:496
└ @ MINPACK wrappers.jl:496
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #lmder#6(::Int64, ::Float64, ::Float64, ::Float64, ::Float64, ::Int64, ::Int64, ::Int64, ::Float64, ::Int64, ::typeof(MINPACK.lmder), ::getfield(Main, Symbol("#f!#9")), ::getfield(Main, Symbol("#g!#10")), ::Array{Float64,1}, ::Int64, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:497
└ @ MINPACK wrappers.jl:497
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #lmder#6(::Int64, ::Float64, ::Float64, ::Float64, ::Float64, ::Int64, ::Int64, ::Int64, ::Float64, ::Int64, ::typeof(MINPACK.lmder), ::getfield(Main, Symbol("#f!#9")), ::getfield(Main, Symbol("#g!#10")), ::Array{Float64,1}, ::Int64, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:498
└ @ MINPACK wrappers.jl:498
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #lmder#6(::Int64, ::Float64, ::Float64, ::Float64, ::Float64, ::Int64, ::Int64, ::Int64, ::Float64, ::Int64, ::typeof(MINPACK.lmder), ::getfield(Main, Symbol("#f!#9")), ::getfield(Main, Symbol("#g!#10")), ::Array{Float64,1}, ::Int64, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:499
└ @ MINPACK wrappers.jl:499
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #lmder#6(::Int64, ::Float64, ::Float64, ::Float64, ::Float64, ::Int64, ::Int64, ::Int64, ::Float64, ::Int64, ::typeof(MINPACK.lmder), ::getfield(Main, Symbol("#f!#9")), ::getfield(Main, Symbol("#g!#10")), ::Array{Float64,1}, ::Int64, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:500
└ @ MINPACK wrappers.jl:500
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #lmder#6(::Int64, ::Float64, ::Float64, ::Float64, ::Float64, ::Int64, ::Int64, ::Int64, ::Float64, ::Int64, ::typeof(MINPACK.lmder), ::getfield(Main, Symbol("#f!#9")), ::getfield(Main, Symbol("#g!#10")), ::Array{Float64,1}, ::Int64, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:501
└ @ MINPACK wrappers.jl:501
Rosenbrock-lm                                       2      21      16     0.000000e+00   1.050066e-01
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = lmdif1(::Function, ::Array{Float64,1}, ::Int64, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:292
└ @ MINPACK wrappers.jl:292
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = lmdif1(::Function, ::Array{Float64,1}, ::Int64, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:294
└ @ MINPACK wrappers.jl:294
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = lmdif1(::Function, ::Array{Float64,1}, ::Int64, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:295
└ @ MINPACK wrappers.jl:295
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = Type at MINPACK.jl:43 [inlined]
└ @ Core MINPACK.jl:43
Rosenbrock-lm-no_g                                  2      22      16     0.000000e+00   5.000002e-02
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.norm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.norm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.norm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.norm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.norm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.norm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.norm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.norm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.norm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
┌ Warning: `Array{T}(m::Int, n::Int) where T` is deprecated, use `Array{T}(undef, m, n)` instead.
│   caller = #hybrj#4(::Int64, ::Int64, ::Int64, ::Int64, ::Float64, ::Array{Float64,1}, ::Int64, ::Float64, ::Int64, ::Int32, ::typeof(MINPACK.hybrj), ::getfield(Main, Symbol("#f!#12")), ::getfield(Main, Symbol("#g!#13")), ::Array{Float64,1}, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:138
└ @ MINPACK wrappers.jl:138
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = Type at MINPACK.jl:43 [inlined]
└ @ Core MINPACK.jl:43
┌ Warning: `Array{T}(m::Integer) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #hybrj#4(::Int64, ::Int64, ::Int64, ::Int64, ::Float64, ::Array{Float64,1}, ::Int64, ::Float64, ::Int64, ::Int32, ::typeof(MINPACK.hybrj), ::getfield(Main, Symbol("#f!#12")), ::getfield(Main, Symbol("#g!#13")), ::Array{Float64,1}, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:145
└ @ MINPACK wrappers.jl:145
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #hybrj#4(::Int64, ::Int64, ::Int64, ::Int64, ::Float64, ::Array{Float64,1}, ::Int64, ::Float64, ::Int64, ::Int32, ::typeof(MINPACK.hybrj), ::getfield(Main, Symbol("#f!#12")), ::getfield(Main, Symbol("#g!#13")), ::Array{Float64,1}, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:146
└ @ MINPACK wrappers.jl:146
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #hybrj#4(::Int64, ::Int64, ::Int64, ::Int64, ::Float64, ::Array{Float64,1}, ::Int64, ::Float64, ::Int64, ::Int32, ::typeof(MINPACK.hybrj), ::getfield(Main, Symbol("#f!#12")), ::getfield(Main, Symbol("#g!#13")), ::Array{Float64,1}, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:147
└ @ MINPACK wrappers.jl:147
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #hybrj#4(::Int64, ::Int64, ::Int64, ::Int64, ::Float64, ::Array{Float64,1}, ::Int64, ::Float64, ::Int64, ::Int32, ::typeof(MINPACK.hybrj), ::getfield(Main, Symbol("#f!#12")), ::getfield(Main, Symbol("#g!#13")), ::Array{Float64,1}, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:148
└ @ MINPACK wrappers.jl:148
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #hybrj#4(::Int64, ::Int64, ::Int64, ::Int64, ::Float64, ::Array{Float64,1}, ::Int64, ::Float64, ::Int64, ::Int32, ::typeof(MINPACK.hybrj), ::getfield(Main, Symbol("#f!#12")), ::getfield(Main, Symbol("#g!#13")), ::Array{Float64,1}, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:149
└ @ MINPACK wrappers.jl:149
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #hybrj#4(::Int64, ::Int64, ::Int64, ::Int64, ::Float64, ::Array{Float64,1}, ::Int64, ::Float64, ::Int64, ::Int32, ::typeof(MINPACK.hybrj), ::getfield(Main, Symbol("#f!#12")), ::getfield(Main, Symbol("#g!#13")), ::Array{Float64,1}, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:150
└ @ MINPACK wrappers.jl:150
Powell singular-hybr                                4     105       6     6.035768e-35   2.609399e-01
Powell singular-hybr-no_g                           4      96       3     1.378751e-34   1.731425e-02
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.norm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.norm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.norm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #lmder#6(::Int64, ::Float64, ::Float64, ::Float64, ::Float64, ::Int64, ::Int64, ::Int64, ::Float64, ::Int64, ::typeof(MINPACK.lmder), ::getfield(Main, Symbol("#f!#12")), ::getfield(Main, Symbol("#g!#13")), ::Array{Float64,1}, ::Int64, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:484
└ @ MINPACK wrappers.jl:484
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #lmder#6(::Int64, ::Float64, ::Float64, ::Float64, ::Float64, ::Int64, ::Int64, ::Int64, ::Float64, ::Int64, ::typeof(MINPACK.lmder), ::getfield(Main, Symbol("#f!#12")), ::getfield(Main, Symbol("#g!#13")), ::Array{Float64,1}, ::Int64, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:486
└ @ MINPACK wrappers.jl:486
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #lmder#6(::Int64, ::Float64, ::Float64, ::Float64, ::Float64, ::Int64, ::Int64, ::Int64, ::Float64, ::Int64, ::typeof(MINPACK.lmder), ::getfield(Main, Symbol("#f!#12")), ::getfield(Main, Symbol("#g!#13")), ::Array{Float64,1}, ::Int64, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:487
└ @ MINPACK wrappers.jl:487
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = Type at MINPACK.jl:43 [inlined]
└ @ Core MINPACK.jl:43
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #lmder#6(::Int64, ::Float64, ::Float64, ::Float64, ::Float64, ::Int64, ::Int64, ::Int64, ::Float64, ::Int64, ::typeof(MINPACK.lmder), ::getfield(Main, Symbol("#f!#12")), ::getfield(Main, Symbol("#g!#13")), ::Array{Float64,1}, ::Int64, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:492
└ @ MINPACK wrappers.jl:492
┌ Warning: `Array{T}(m::Int, n::Int) where T` is deprecated, use `Array{T}(undef, m, n)` instead.
│   caller = #lmder#6(::Int64, ::Float64, ::Float64, ::Float64, ::Float64, ::Int64, ::Int64, ::Int64, ::Float64, ::Int64, ::typeof(MINPACK.lmder), ::getfield(Main, Symbol("#f!#12")), ::getfield(Main, Symbol("#g!#13")), ::Array{Float64,1}, ::Int64, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:495
└ @ MINPACK wrappers.jl:495
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #lmder#6(::Int64, ::Float64, ::Float64, ::Float64, ::Float64, ::Int64, ::Int64, ::Int64, ::Float64, ::Int64, ::typeof(MINPACK.lmder), ::getfield(Main, Symbol("#f!#12")), ::getfield(Main, Symbol("#g!#13")), ::Array{Float64,1}, ::Int64, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:496
└ @ MINPACK wrappers.jl:496
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #lmder#6(::Int64, ::Float64, ::Float64, ::Float64, ::Float64, ::Int64, ::Int64, ::Int64, ::Float64, ::Int64, ::typeof(MINPACK.lmder), ::getfield(Main, Symbol("#f!#12")), ::getfield(Main, Symbol("#g!#13")), ::Array{Float64,1}, ::Int64, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:497
└ @ MINPACK wrappers.jl:497
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #lmder#6(::Int64, ::Float64, ::Float64, ::Float64, ::Float64, ::Int64, ::Int64, ::Int64, ::Float64, ::Int64, ::typeof(MINPACK.lmder), ::getfield(Main, Symbol("#f!#12")), ::getfield(Main, Symbol("#g!#13")), ::Array{Float64,1}, ::Int64, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:498
└ @ MINPACK wrappers.jl:498
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #lmder#6(::Int64, ::Float64, ::Float64, ::Float64, ::Float64, ::Int64, ::Int64, ::Int64, ::Float64, ::Int64, ::typeof(MINPACK.lmder), ::getfield(Main, Symbol("#f!#12")), ::getfield(Main, Symbol("#g!#13")), ::Array{Float64,1}, ::Int64, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:499
└ @ MINPACK wrappers.jl:499
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #lmder#6(::Int64, ::Float64, ::Float64, ::Float64, ::Float64, ::Int64, ::Int64, ::Int64, ::Float64, ::Int64, ::typeof(MINPACK.lmder), ::getfield(Main, Symbol("#f!#12")), ::getfield(Main, Symbol("#g!#13")), ::Array{Float64,1}, ::Int64, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:500
└ @ MINPACK wrappers.jl:500
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #lmder#6(::Int64, ::Float64, ::Float64, ::Float64, ::Float64, ::Int64, ::Int64, ::Int64, ::Float64, ::Int64, ::typeof(MINPACK.lmder), ::getfield(Main, Symbol("#f!#12")), ::getfield(Main, Symbol("#g!#13")), ::Array{Float64,1}, ::Int64, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:501
└ @ MINPACK wrappers.jl:501
Powell singular-lm                                  4      59      58     6.090325e-34   1.169248e-01
Powell singular-lm-no_g                             4     235     192     1.080555e-23   5.399291e-02
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.norm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.norm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.norm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.norm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.norm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.norm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.norm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.norm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.norm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
┌ Warning: `Array{T}(m::Int, n::Int) where T` is deprecated, use `Array{T}(undef, m, n)` instead.
│   caller = #hybrj#4(::Int64, ::Int64, ::Int64, ::Int64, ::Float64, ::Array{Float64,1}, ::Int64, ::Float64, ::Int64, ::Int32, ::typeof(MINPACK.hybrj), ::getfield(Main, Symbol("#f!#15")){Float64,Float64}, ::getfield(Main, Symbol("#g!#16")){Float64}, ::Array{Float64,1}, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:138
└ @ MINPACK wrappers.jl:138
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = Type at MINPACK.jl:43 [inlined]
└ @ Core MINPACK.jl:43
┌ Warning: `Array{T}(m::Integer) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #hybrj#4(::Int64, ::Int64, ::Int64, ::Int64, ::Float64, ::Array{Float64,1}, ::Int64, ::Float64, ::Int64, ::Int32, ::typeof(MINPACK.hybrj), ::getfield(Main, Symbol("#f!#15")){Float64,Float64}, ::getfield(Main, Symbol("#g!#16")){Float64}, ::Array{Float64,1}, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:145
└ @ MINPACK wrappers.jl:145
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #hybrj#4(::Int64, ::Int64, ::Int64, ::Int64, ::Float64, ::Array{Float64,1}, ::Int64, ::Float64, ::Int64, ::Int32, ::typeof(MINPACK.hybrj), ::getfield(Main, Symbol("#f!#15")){Float64,Float64}, ::getfield(Main, Symbol("#g!#16")){Float64}, ::Array{Float64,1}, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:146
└ @ MINPACK wrappers.jl:146
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #hybrj#4(::Int64, ::Int64, ::Int64, ::Int64, ::Float64, ::Array{Float64,1}, ::Int64, ::Float64, ::Int64, ::Int32, ::typeof(MINPACK.hybrj), ::getfield(Main, Symbol("#f!#15")){Float64,Float64}, ::getfield(Main, Symbol("#g!#16")){Float64}, ::Array{Float64,1}, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:147
└ @ MINPACK wrappers.jl:147
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #hybrj#4(::Int64, ::Int64, ::Int64, ::Int64, ::Float64, ::Array{Float64,1}, ::Int64, ::Float64, ::Int64, ::Int32, ::typeof(MINPACK.hybrj), ::getfield(Main, Symbol("#f!#15")){Float64,Float64}, ::getfield(Main, Symbol("#g!#16")){Float64}, ::Array{Float64,1}, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:148
└ @ MINPACK wrappers.jl:148
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #hybrj#4(::Int64, ::Int64, ::Int64, ::Int64, ::Float64, ::Array{Float64,1}, ::Int64, ::Float64, ::Int64, ::Int32, ::typeof(MINPACK.hybrj), ::getfield(Main, Symbol("#f!#15")){Float64,Float64}, ::getfield(Main, Symbol("#g!#16")){Float64}, ::Array{Float64,1}, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:149
└ @ MINPACK wrappers.jl:149
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #hybrj#4(::Int64, ::Int64, ::Int64, ::Int64, ::Float64, ::Array{Float64,1}, ::Int64, ::Float64, ::Int64, ::Int32, ::typeof(MINPACK.hybrj), ::getfield(Main, Symbol("#f!#15")){Float64,Float64}, ::getfield(Main, Symbol("#g!#16")){Float64}, ::Array{Float64,1}, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:150
└ @ MINPACK wrappers.jl:150
Powell badly scaled-hybr                            2     169       6     1.712673e-09   3.216654e-01
Powell badly scaled-hybr-no_g                       2     169       6     1.712421e-09   4.281391e-02
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.norm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.norm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.norm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #lmder#6(::Int64, ::Float64, ::Float64, ::Float64, ::Float64, ::Int64, ::Int64, ::Int64, ::Float64, ::Int64, ::typeof(MINPACK.lmder), ::getfield(Main, Symbol("#f!#15")){Float64,Float64}, ::getfield(Main, Symbol("#g!#16")){Float64}, ::Array{Float64,1}, ::Int64, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:484
└ @ MINPACK wrappers.jl:484
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #lmder#6(::Int64, ::Float64, ::Float64, ::Float64, ::Float64, ::Int64, ::Int64, ::Int64, ::Float64, ::Int64, ::typeof(MINPACK.lmder), ::getfield(Main, Symbol("#f!#15")){Float64,Float64}, ::getfield(Main, Symbol("#g!#16")){Float64}, ::Array{Float64,1}, ::Int64, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:486
└ @ MINPACK wrappers.jl:486
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #lmder#6(::Int64, ::Float64, ::Float64, ::Float64, ::Float64, ::Int64, ::Int64, ::Int64, ::Float64, ::Int64, ::typeof(MINPACK.lmder), ::getfield(Main, Symbol("#f!#15")){Float64,Float64}, ::getfield(Main, Symbol("#g!#16")){Float64}, ::Array{Float64,1}, ::Int64, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:487
└ @ MINPACK wrappers.jl:487
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = Type at MINPACK.jl:43 [inlined]
└ @ Core MINPACK.jl:43
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #lmder#6(::Int64, ::Float64, ::Float64, ::Float64, ::Float64, ::Int64, ::Int64, ::Int64, ::Float64, ::Int64, ::typeof(MINPACK.lmder), ::getfield(Main, Symbol("#f!#15")){Float64,Float64}, ::getfield(Main, Symbol("#g!#16")){Float64}, ::Array{Float64,1}, ::Int64, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:492
└ @ MINPACK wrappers.jl:492
┌ Warning: `Array{T}(m::Int, n::Int) where T` is deprecated, use `Array{T}(undef, m, n)` instead.
│   caller = #lmder#6(::Int64, ::Float64, ::Float64, ::Float64, ::Float64, ::Int64, ::Int64, ::Int64, ::Float64, ::Int64, ::typeof(MINPACK.lmder), ::getfield(Main, Symbol("#f!#15")){Float64,Float64}, ::getfield(Main, Symbol("#g!#16")){Float64}, ::Array{Float64,1}, ::Int64, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:495
└ @ MINPACK wrappers.jl:495
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #lmder#6(::Int64, ::Float64, ::Float64, ::Float64, ::Float64, ::Int64, ::Int64, ::Int64, ::Float64, ::Int64, ::typeof(MINPACK.lmder), ::getfield(Main, Symbol("#f!#15")){Float64,Float64}, ::getfield(Main, Symbol("#g!#16")){Float64}, ::Array{Float64,1}, ::Int64, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:496
└ @ MINPACK wrappers.jl:496
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #lmder#6(::Int64, ::Float64, ::Float64, ::Float64, ::Float64, ::Int64, ::Int64, ::Int64, ::Float64, ::Int64, ::typeof(MINPACK.lmder), ::getfield(Main, Symbol("#f!#15")){Float64,Float64}, ::getfield(Main, Symbol("#g!#16")){Float64}, ::Array{Float64,1}, ::Int64, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:497
└ @ MINPACK wrappers.jl:497
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #lmder#6(::Int64, ::Float64, ::Float64, ::Float64, ::Float64, ::Int64, ::Int64, ::Int64, ::Float64, ::Int64, ::typeof(MINPACK.lmder), ::getfield(Main, Symbol("#f!#15")){Float64,Float64}, ::getfield(Main, Symbol("#g!#16")){Float64}, ::Array{Float64,1}, ::Int64, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:498
└ @ MINPACK wrappers.jl:498
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #lmder#6(::Int64, ::Float64, ::Float64, ::Float64, ::Float64, ::Int64, ::Int64, ::Int64, ::Float64, ::Int64, ::typeof(MINPACK.lmder), ::getfield(Main, Symbol("#f!#15")){Float64,Float64}, ::getfield(Main, Symbol("#g!#16")){Float64}, ::Array{Float64,1}, ::Int64, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:499
└ @ MINPACK wrappers.jl:499
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #lmder#6(::Int64, ::Float64, ::Float64, ::Float64, ::Float64, ::Int64, ::Int64, ::Int64, ::Float64, ::Int64, ::typeof(MINPACK.lmder), ::getfield(Main, Symbol("#f!#15")){Float64,Float64}, ::getfield(Main, Symbol("#g!#16")){Float64}, ::Array{Float64,1}, ::Int64, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:500
└ @ MINPACK wrappers.jl:500
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #lmder#6(::Int64, ::Float64, ::Float64, ::Float64, ::Float64, ::Int64, ::Int64, ::Int64, ::Float64, ::Int64, ::typeof(MINPACK.lmder), ::getfield(Main, Symbol("#f!#15")){Float64,Float64}, ::getfield(Main, Symbol("#g!#16")){Float64}, ::Array{Float64,1}, ::Int64, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:501
└ @ MINPACK wrappers.jl:501
Powell badly scaled-lm                              2      19      17     1.110223e-16   1.083241e-01
Powell badly scaled-lm-no_g                         2      19      17     0.000000e+00   6.820245e-03
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.norm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.norm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.norm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.norm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.norm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.norm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.norm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.norm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.norm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
┌ Warning: `Array{T}(m::Int, n::Int) where T` is deprecated, use `Array{T}(undef, m, n)` instead.
│   caller = #hybrj#4(::Int64, ::Int64, ::Int64, ::Int64, ::Float64, ::Array{Float64,1}, ::Int64, ::Float64, ::Int64, ::Int32, ::typeof(MINPACK.hybrj), ::getfield(Main, Symbol("#f!#18")){Float64,Float64,Float64,Float64}, ::getfield(Main, Symbol("#g!#19")){Float64,Float64,Float64,Float64}, ::Array{Float64,1}, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:138
└ @ MINPACK wrappers.jl:138
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = Type at MINPACK.jl:43 [inlined]
└ @ Core MINPACK.jl:43
┌ Warning: `Array{T}(m::Integer) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #hybrj#4(::Int64, ::Int64, ::Int64, ::Int64, ::Float64, ::Array{Float64,1}, ::Int64, ::Float64, ::Int64, ::Int32, ::typeof(MINPACK.hybrj), ::getfield(Main, Symbol("#f!#18")){Float64,Float64,Float64,Float64}, ::getfield(Main, Symbol("#g!#19")){Float64,Float64,Float64,Float64}, ::Array{Float64,1}, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:145
└ @ MINPACK wrappers.jl:145
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #hybrj#4(::Int64, ::Int64, ::Int64, ::Int64, ::Float64, ::Array{Float64,1}, ::Int64, ::Float64, ::Int64, ::Int32, ::typeof(MINPACK.hybrj), ::getfield(Main, Symbol("#f!#18")){Float64,Float64,Float64,Float64}, ::getfield(Main, Symbol("#g!#19")){Float64,Float64,Float64,Float64}, ::Array{Float64,1}, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:146
└ @ MINPACK wrappers.jl:146
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #hybrj#4(::Int64, ::Int64, ::Int64, ::Int64, ::Float64, ::Array{Float64,1}, ::Int64, ::Float64, ::Int64, ::Int32, ::typeof(MINPACK.hybrj), ::getfield(Main, Symbol("#f!#18")){Float64,Float64,Float64,Float64}, ::getfield(Main, Symbol("#g!#19")){Float64,Float64,Float64,Float64}, ::Array{Float64,1}, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:147
└ @ MINPACK wrappers.jl:147
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #hybrj#4(::Int64, ::Int64, ::Int64, ::Int64, ::Float64, ::Array{Float64,1}, ::Int64, ::Float64, ::Int64, ::Int32, ::typeof(MINPACK.hybrj), ::getfield(Main, Symbol("#f!#18")){Float64,Float64,Float64,Float64}, ::getfield(Main, Symbol("#g!#19")){Float64,Float64,Float64,Float64}, ::Array{Float64,1}, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:148
└ @ MINPACK wrappers.jl:148
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #hybrj#4(::Int64, ::Int64, ::Int64, ::Int64, ::Float64, ::Array{Float64,1}, ::Int64, ::Float64, ::Int64, ::Int32, ::typeof(MINPACK.hybrj), ::getfield(Main, Symbol("#f!#18")){Float64,Float64,Float64,Float64}, ::getfield(Main, Symbol("#g!#19")){Float64,Float64,Float64,Float64}, ::Array{Float64,1}, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:149
└ @ MINPACK wrappers.jl:149
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #hybrj#4(::Int64, ::Int64, ::Int64, ::Int64, ::Float64, ::Array{Float64,1}, ::Int64, ::Float64, ::Int64, ::Int32, ::typeof(MINPACK.hybrj), ::getfield(Main, Symbol("#f!#18")){Float64,Float64,Float64,Float64}, ::getfield(Main, Symbol("#g!#19")){Float64,Float64,Float64,Float64}, ::Array{Float64,1}, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:150
└ @ MINPACK wrappers.jl:150
Wood-hybr                                           4      86       2     3.364109e-11   2.707609e-01
Wood-hybr-no_g                                      4      86       2     3.373679e-11   1.894369e-02
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.norm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.norm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.norm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #lmder#6(::Int64, ::Float64, ::Float64, ::Float64, ::Float64, ::Int64, ::Int64, ::Int64, ::Float64, ::Int64, ::typeof(MINPACK.lmder), ::getfield(Main, Symbol("#f!#18")){Float64,Float64,Float64,Float64}, ::getfield(Main, Symbol("#g!#19")){Float64,Float64,Float64,Float64}, ::Array{Float64,1}, ::Int64, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:484
└ @ MINPACK wrappers.jl:484
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #lmder#6(::Int64, ::Float64, ::Float64, ::Float64, ::Float64, ::Int64, ::Int64, ::Int64, ::Float64, ::Int64, ::typeof(MINPACK.lmder), ::getfield(Main, Symbol("#f!#18")){Float64,Float64,Float64,Float64}, ::getfield(Main, Symbol("#g!#19")){Float64,Float64,Float64,Float64}, ::Array{Float64,1}, ::Int64, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:486
└ @ MINPACK wrappers.jl:486
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #lmder#6(::Int64, ::Float64, ::Float64, ::Float64, ::Float64, ::Int64, ::Int64, ::Int64, ::Float64, ::Int64, ::typeof(MINPACK.lmder), ::getfield(Main, Symbol("#f!#18")){Float64,Float64,Float64,Float64}, ::getfield(Main, Symbol("#g!#19")){Float64,Float64,Float64,Float64}, ::Array{Float64,1}, ::Int64, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:487
└ @ MINPACK wrappers.jl:487
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = Type at MINPACK.jl:43 [inlined]
└ @ Core MINPACK.jl:43
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #lmder#6(::Int64, ::Float64, ::Float64, ::Float64, ::Float64, ::Int64, ::Int64, ::Int64, ::Float64, ::Int64, ::typeof(MINPACK.lmder), ::getfield(Main, Symbol("#f!#18")){Float64,Float64,Float64,Float64}, ::getfield(Main, Symbol("#g!#19")){Float64,Float64,Float64,Float64}, ::Array{Float64,1}, ::Int64, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:492
└ @ MINPACK wrappers.jl:492
┌ Warning: `Array{T}(m::Int, n::Int) where T` is deprecated, use `Array{T}(undef, m, n)` instead.
│   caller = #lmder#6(::Int64, ::Float64, ::Float64, ::Float64, ::Float64, ::Int64, ::Int64, ::Int64, ::Float64, ::Int64, ::typeof(MINPACK.lmder), ::getfield(Main, Symbol("#f!#18")){Float64,Float64,Float64,Float64}, ::getfield(Main, Symbol("#g!#19")){Float64,Float64,Float64,Float64}, ::Array{Float64,1}, ::Int64, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:495
└ @ MINPACK wrappers.jl:495
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #lmder#6(::Int64, ::Float64, ::Float64, ::Float64, ::Float64, ::Int64, ::Int64, ::Int64, ::Float64, ::Int64, ::typeof(MINPACK.lmder), ::getfield(Main, Symbol("#f!#18")){Float64,Float64,Float64,Float64}, ::getfield(Main, Symbol("#g!#19")){Float64,Float64,Float64,Float64}, ::Array{Float64,1}, ::Int64, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:496
└ @ MINPACK wrappers.jl:496
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #lmder#6(::Int64, ::Float64, ::Float64, ::Float64, ::Float64, ::Int64, ::Int64, ::Int64, ::Float64, ::Int64, ::typeof(MINPACK.lmder), ::getfield(Main, Symbol("#f!#18")){Float64,Float64,Float64,Float64}, ::getfield(Main, Symbol("#g!#19")){Float64,Float64,Float64,Float64}, ::Array{Float64,1}, ::Int64, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:497
└ @ MINPACK wrappers.jl:497
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #lmder#6(::Int64, ::Float64, ::Float64, ::Float64, ::Float64, ::Int64, ::Int64, ::Int64, ::Float64, ::Int64, ::typeof(MINPACK.lmder), ::getfield(Main, Symbol("#f!#18")){Float64,Float64,Float64,Float64}, ::getfield(Main, Symbol("#g!#19")){Float64,Float64,Float64,Float64}, ::Array{Float64,1}, ::Int64, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:498
└ @ MINPACK wrappers.jl:498
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #lmder#6(::Int64, ::Float64, ::Float64, ::Float64, ::Float64, ::Int64, ::Int64, ::Int64, ::Float64, ::Int64, ::typeof(MINPACK.lmder), ::getfield(Main, Symbol("#f!#18")){Float64,Float64,Float64,Float64}, ::getfield(Main, Symbol("#g!#19")){Float64,Float64,Float64,Float64}, ::Array{Float64,1}, ::Int64, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:499
└ @ MINPACK wrappers.jl:499
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #lmder#6(::Int64, ::Float64, ::Float64, ::Float64, ::Float64, ::Int64, ::Int64, ::Int64, ::Float64, ::Int64, ::typeof(MINPACK.lmder), ::getfield(Main, Symbol("#f!#18")){Float64,Float64,Float64,Float64}, ::getfield(Main, Symbol("#g!#19")){Float64,Float64,Float64,Float64}, ::Array{Float64,1}, ::Int64, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:500
└ @ MINPACK wrappers.jl:500
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #lmder#6(::Int64, ::Float64, ::Float64, ::Float64, ::Float64, ::Int64, ::Int64, ::Int64, ::Float64, ::Int64, ::typeof(MINPACK.lmder), ::getfield(Main, Symbol("#f!#18")){Float64,Float64,Float64,Float64}, ::getfield(Main, Symbol("#g!#19")){Float64,Float64,Float64,Float64}, ::Array{Float64,1}, ::Int64, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:501
└ @ MINPACK wrappers.jl:501
Wood-lm                                             4      32      27     1.920686e-14   1.268554e-01
Wood-lm-no_g                                        4      32      27     1.310063e-14   1.434205e-02
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.norm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.norm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.norm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.norm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.norm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.norm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.norm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.norm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.norm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
┌ Warning: `Array{T}(m::Int, n::Int) where T` is deprecated, use `Array{T}(undef, m, n)` instead.
│   caller = #hybrj#4(::Int64, ::Int64, ::Int64, ::Int64, ::Float64, ::Array{Float64,1}, ::Int64, ::Float64, ::Int64, ::Int32, ::typeof(MINPACK.hybrj), ::getfield(Main, Symbol("#f!#21")){Float64,Float64,Float64}, ::getfield(Main, Symbol("#g!#22")){Float64}, ::Array{Float64,1}, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:138
└ @ MINPACK wrappers.jl:138
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = Type at MINPACK.jl:43 [inlined]
└ @ Core MINPACK.jl:43
┌ Warning: `Array{T}(m::Integer) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #hybrj#4(::Int64, ::Int64, ::Int64, ::Int64, ::Float64, ::Array{Float64,1}, ::Int64, ::Float64, ::Int64, ::Int32, ::typeof(MINPACK.hybrj), ::getfield(Main, Symbol("#f!#21")){Float64,Float64,Float64}, ::getfield(Main, Symbol("#g!#22")){Float64}, ::Array{Float64,1}, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:145
└ @ MINPACK wrappers.jl:145
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #hybrj#4(::Int64, ::Int64, ::Int64, ::Int64, ::Float64, ::Array{Float64,1}, ::Int64, ::Float64, ::Int64, ::Int32, ::typeof(MINPACK.hybrj), ::getfield(Main, Symbol("#f!#21")){Float64,Float64,Float64}, ::getfield(Main, Symbol("#g!#22")){Float64}, ::Array{Float64,1}, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:146
└ @ MINPACK wrappers.jl:146
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #hybrj#4(::Int64, ::Int64, ::Int64, ::Int64, ::Float64, ::Array{Float64,1}, ::Int64, ::Float64, ::Int64, ::Int32, ::typeof(MINPACK.hybrj), ::getfield(Main, Symbol("#f!#21")){Float64,Float64,Float64}, ::getfield(Main, Symbol("#g!#22")){Float64}, ::Array{Float64,1}, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:147
└ @ MINPACK wrappers.jl:147
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #hybrj#4(::Int64, ::Int64, ::Int64, ::Int64, ::Float64, ::Array{Float64,1}, ::Int64, ::Float64, ::Int64, ::Int32, ::typeof(MINPACK.hybrj), ::getfield(Main, Symbol("#f!#21")){Float64,Float64,Float64}, ::getfield(Main, Symbol("#g!#22")){Float64}, ::Array{Float64,1}, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:148
└ @ MINPACK wrappers.jl:148
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #hybrj#4(::Int64, ::Int64, ::Int64, ::Int64, ::Float64, ::Array{Float64,1}, ::Int64, ::Float64, ::Int64, ::Int32, ::typeof(MINPACK.hybrj), ::getfield(Main, Symbol("#f!#21")){Float64,Float64,Float64}, ::getfield(Main, Symbol("#g!#22")){Float64}, ::Array{Float64,1}, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:149
└ @ MINPACK wrappers.jl:149
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #hybrj#4(::Int64, ::Int64, ::Int64, ::Int64, ::Float64, ::Array{Float64,1}, ::Int64, ::Float64, ::Int64, ::Int32, ::typeof(MINPACK.hybrj), ::getfield(Main, Symbol("#f!#21")){Float64,Float64,Float64}, ::getfield(Main, Symbol("#g!#22")){Float64}, ::Array{Float64,1}, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:150
└ @ MINPACK wrappers.jl:150
Helical Valley-hybr                                 3      18       3     2.565742e-13   2.619829e-01
Helical Valley-hybr-no_g                            3      18       3     2.565742e-13   6.321566e-03
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.norm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.norm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.norm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #lmder#6(::Int64, ::Float64, ::Float64, ::Float64, ::Float64, ::Int64, ::Int64, ::Int64, ::Float64, ::Int64, ::typeof(MINPACK.lmder), ::getfield(Main, Symbol("#f!#21")){Float64,Float64,Float64}, ::getfield(Main, Symbol("#g!#22")){Float64}, ::Array{Float64,1}, ::Int64, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:484
└ @ MINPACK wrappers.jl:484
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #lmder#6(::Int64, ::Float64, ::Float64, ::Float64, ::Float64, ::Int64, ::Int64, ::Int64, ::Float64, ::Int64, ::typeof(MINPACK.lmder), ::getfield(Main, Symbol("#f!#21")){Float64,Float64,Float64}, ::getfield(Main, Symbol("#g!#22")){Float64}, ::Array{Float64,1}, ::Int64, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:486
└ @ MINPACK wrappers.jl:486
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #lmder#6(::Int64, ::Float64, ::Float64, ::Float64, ::Float64, ::Int64, ::Int64, ::Int64, ::Float64, ::Int64, ::typeof(MINPACK.lmder), ::getfield(Main, Symbol("#f!#21")){Float64,Float64,Float64}, ::getfield(Main, Symbol("#g!#22")){Float64}, ::Array{Float64,1}, ::Int64, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:487
└ @ MINPACK wrappers.jl:487
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = Type at MINPACK.jl:43 [inlined]
└ @ Core MINPACK.jl:43
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #lmder#6(::Int64, ::Float64, ::Float64, ::Float64, ::Float64, ::Int64, ::Int64, ::Int64, ::Float64, ::Int64, ::typeof(MINPACK.lmder), ::getfield(Main, Symbol("#f!#21")){Float64,Float64,Float64}, ::getfield(Main, Symbol("#g!#22")){Float64}, ::Array{Float64,1}, ::Int64, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:492
└ @ MINPACK wrappers.jl:492
┌ Warning: `Array{T}(m::Int, n::Int) where T` is deprecated, use `Array{T}(undef, m, n)` instead.
│   caller = #lmder#6(::Int64, ::Float64, ::Float64, ::Float64, ::Float64, ::Int64, ::Int64, ::Int64, ::Float64, ::Int64, ::typeof(MINPACK.lmder), ::getfield(Main, Symbol("#f!#21")){Float64,Float64,Float64}, ::getfield(Main, Symbol("#g!#22")){Float64}, ::Array{Float64,1}, ::Int64, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:495
└ @ MINPACK wrappers.jl:495
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #lmder#6(::Int64, ::Float64, ::Float64, ::Float64, ::Float64, ::Int64, ::Int64, ::Int64, ::Float64, ::Int64, ::typeof(MINPACK.lmder), ::getfield(Main, Symbol("#f!#21")){Float64,Float64,Float64}, ::getfield(Main, Symbol("#g!#22")){Float64}, ::Array{Float64,1}, ::Int64, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:496
└ @ MINPACK wrappers.jl:496
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #lmder#6(::Int64, ::Float64, ::Float64, ::Float64, ::Float64, ::Int64, ::Int64, ::Int64, ::Float64, ::Int64, ::typeof(MINPACK.lmder), ::getfield(Main, Symbol("#f!#21")){Float64,Float64,Float64}, ::getfield(Main, Symbol("#g!#22")){Float64}, ::Array{Float64,1}, ::Int64, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:497
└ @ MINPACK wrappers.jl:497
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #lmder#6(::Int64, ::Float64, ::Float64, ::Float64, ::Float64, ::Int64, ::Int64, ::Int64, ::Float64, ::Int64, ::typeof(MINPACK.lmder), ::getfield(Main, Symbol("#f!#21")){Float64,Float64,Float64}, ::getfield(Main, Symbol("#g!#22")){Float64}, ::Array{Float64,1}, ::Int64, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:498
└ @ MINPACK wrappers.jl:498
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #lmder#6(::Int64, ::Float64, ::Float64, ::Float64, ::Float64, ::Int64, ::Int64, ::Int64, ::Float64, ::Int64, ::typeof(MINPACK.lmder), ::getfield(Main, Symbol("#f!#21")){Float64,Float64,Float64}, ::getfield(Main, Symbol("#g!#22")){Float64}, ::Array{Float64,1}, ::Int64, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:499
└ @ MINPACK wrappers.jl:499
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #lmder#6(::Int64, ::Float64, ::Float64, ::Float64, ::Float64, ::Int64, ::Int64, ::Int64, ::Float64, ::Int64, ::typeof(MINPACK.lmder), ::getfield(Main, Symbol("#f!#21")){Float64,Float64,Float64}, ::getfield(Main, Symbol("#g!#22")){Float64}, ::Array{Float64,1}, ::Int64, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:500
└ @ MINPACK wrappers.jl:500
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #lmder#6(::Int64, ::Float64, ::Float64, ::Float64, ::Float64, ::Int64, ::Int64, ::Int64, ::Float64, ::Int64, ::typeof(MINPACK.lmder), ::getfield(Main, Symbol("#f!#21")){Float64,Float64,Float64}, ::getfield(Main, Symbol("#g!#22")){Float64}, ::Array{Float64,1}, ::Int64, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:501
└ @ MINPACK wrappers.jl:501
Helical Valley-lm                                   3      11       8     9.936523e-17   1.011578e-01
Helical Valley-lm-no_g                              3      11       8     8.661763e-17   3.207692e-03
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.norm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.norm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.norm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.norm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.norm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.norm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.norm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.norm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.norm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
┌ Warning: `Array{T}(m::Int, n::Int) where T` is deprecated, use `Array{T}(undef, m, n)` instead.
│   caller = #hybrj#4(::Int64, ::Int64, ::Int64, ::Int64, ::Float64, ::Array{Float64,1}, ::Int64, ::Float64, ::Int64, ::Int32, ::typeof(MINPACK.hybrj), ::getfield(Main, Symbol("#f!#24")){Int64,Float64}, ::getfield(Main, Symbol("#g!#25")){Int64,Float64}, ::Array{Float64,1}, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:138
└ @ MINPACK wrappers.jl:138
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = Type at MINPACK.jl:43 [inlined]
└ @ Core MINPACK.jl:43
┌ Warning: `Array{T}(m::Integer) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #hybrj#4(::Int64, ::Int64, ::Int64, ::Int64, ::Float64, ::Array{Float64,1}, ::Int64, ::Float64, ::Int64, ::Int32, ::typeof(MINPACK.hybrj), ::getfield(Main, Symbol("#f!#24")){Int64,Float64}, ::getfield(Main, Symbol("#g!#25")){Int64,Float64}, ::Array{Float64,1}, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:145
└ @ MINPACK wrappers.jl:145
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #hybrj#4(::Int64, ::Int64, ::Int64, ::Int64, ::Float64, ::Array{Float64,1}, ::Int64, ::Float64, ::Int64, ::Int32, ::typeof(MINPACK.hybrj), ::getfield(Main, Symbol("#f!#24")){Int64,Float64}, ::getfield(Main, Symbol("#g!#25")){Int64,Float64}, ::Array{Float64,1}, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:146
└ @ MINPACK wrappers.jl:146
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #hybrj#4(::Int64, ::Int64, ::Int64, ::Int64, ::Float64, ::Array{Float64,1}, ::Int64, ::Float64, ::Int64, ::Int32, ::typeof(MINPACK.hybrj), ::getfield(Main, Symbol("#f!#24")){Int64,Float64}, ::getfield(Main, Symbol("#g!#25")){Int64,Float64}, ::Array{Float64,1}, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:147
└ @ MINPACK wrappers.jl:147
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #hybrj#4(::Int64, ::Int64, ::Int64, ::Int64, ::Float64, ::Array{Float64,1}, ::Int64, ::Float64, ::Int64, ::Int32, ::typeof(MINPACK.hybrj), ::getfield(Main, Symbol("#f!#24")){Int64,Float64}, ::getfield(Main, Symbol("#g!#25")){Int64,Float64}, ::Array{Float64,1}, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:148
└ @ MINPACK wrappers.jl:148
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #hybrj#4(::Int64, ::Int64, ::Int64, ::Int64, ::Float64, ::Array{Float64,1}, ::Int64, ::Float64, ::Int64, ::Int32, ::typeof(MINPACK.hybrj), ::getfield(Main, Symbol("#f!#24")){Int64,Float64}, ::getfield(Main, Symbol("#g!#25")){Int64,Float64}, ::Array{Float64,1}, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:149
└ @ MINPACK wrappers.jl:149
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #hybrj#4(::Int64, ::Int64, ::Int64, ::Int64, ::Float64, ::Array{Float64,1}, ::Int64, ::Float64, ::Int64, ::Int32, ::typeof(MINPACK.hybrj), ::getfield(Main, Symbol("#f!#24")){Int64,Float64}, ::getfield(Main, Symbol("#g!#25")){Int64,Float64}, ::Array{Float64,1}, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:150
└ @ MINPACK wrappers.jl:150
Watson6-hybr                                        6      60       6     3.118270e-13   4.308017e-01
Watson6-hybr-no_g                                   6      60       6     2.739822e-13   1.686260e-02
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.norm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.norm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.norm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #lmder#6(::Int64, ::Float64, ::Float64, ::Float64, ::Float64, ::Int64, ::Int64, ::Int64, ::Float64, ::Int64, ::typeof(MINPACK.lmder), ::getfield(Main, Symbol("#f!#24")){Int64,Float64}, ::getfield(Main, Symbol("#g!#25")){Int64,Float64}, ::Array{Float64,1}, ::Int64, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:484
└ @ MINPACK wrappers.jl:484
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #lmder#6(::Int64, ::Float64, ::Float64, ::Float64, ::Float64, ::Int64, ::Int64, ::Int64, ::Float64, ::Int64, ::typeof(MINPACK.lmder), ::getfield(Main, Symbol("#f!#24")){Int64,Float64}, ::getfield(Main, Symbol("#g!#25")){Int64,Float64}, ::Array{Float64,1}, ::Int64, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:486
└ @ MINPACK wrappers.jl:486
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #lmder#6(::Int64, ::Float64, ::Float64, ::Float64, ::Float64, ::Int64, ::Int64, ::Int64, ::Float64, ::Int64, ::typeof(MINPACK.lmder), ::getfield(Main, Symbol("#f!#24")){Int64,Float64}, ::getfield(Main, Symbol("#g!#25")){Int64,Float64}, ::Array{Float64,1}, ::Int64, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:487
└ @ MINPACK wrappers.jl:487
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = Type at MINPACK.jl:43 [inlined]
└ @ Core MINPACK.jl:43
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #lmder#6(::Int64, ::Float64, ::Float64, ::Float64, ::Float64, ::Int64, ::Int64, ::Int64, ::Float64, ::Int64, ::typeof(MINPACK.lmder), ::getfield(Main, Symbol("#f!#24")){Int64,Float64}, ::getfield(Main, Symbol("#g!#25")){Int64,Float64}, ::Array{Float64,1}, ::Int64, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:492
└ @ MINPACK wrappers.jl:492
┌ Warning: `Array{T}(m::Int, n::Int) where T` is deprecated, use `Array{T}(undef, m, n)` instead.
│   caller = #lmder#6(::Int64, ::Float64, ::Float64, ::Float64, ::Float64, ::Int64, ::Int64, ::Int64, ::Float64, ::Int64, ::typeof(MINPACK.lmder), ::getfield(Main, Symbol("#f!#24")){Int64,Float64}, ::getfield(Main, Symbol("#g!#25")){Int64,Float64}, ::Array{Float64,1}, ::Int64, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:495
└ @ MINPACK wrappers.jl:495
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #lmder#6(::Int64, ::Float64, ::Float64, ::Float64, ::Float64, ::Int64, ::Int64, ::Int64, ::Float64, ::Int64, ::typeof(MINPACK.lmder), ::getfield(Main, Symbol("#f!#24")){Int64,Float64}, ::getfield(Main, Symbol("#g!#25")){Int64,Float64}, ::Array{Float64,1}, ::Int64, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:496
└ @ MINPACK wrappers.jl:496
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #lmder#6(::Int64, ::Float64, ::Float64, ::Float64, ::Float64, ::Int64, ::Int64, ::Int64, ::Float64, ::Int64, ::typeof(MINPACK.lmder), ::getfield(Main, Symbol("#f!#24")){Int64,Float64}, ::getfield(Main, Symbol("#g!#25")){Int64,Float64}, ::Array{Float64,1}, ::Int64, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:497
└ @ MINPACK wrappers.jl:497
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #lmder#6(::Int64, ::Float64, ::Float64, ::Float64, ::Float64, ::Int64, ::Int64, ::Int64, ::Float64, ::Int64, ::typeof(MINPACK.lmder), ::getfield(Main, Symbol("#f!#24")){Int64,Float64}, ::getfield(Main, Symbol("#g!#25")){Int64,Float64}, ::Array{Float64,1}, ::Int64, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:498
└ @ MINPACK wrappers.jl:498
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #lmder#6(::Int64, ::Float64, ::Float64, ::Float64, ::Float64, ::Int64, ::Int64, ::Int64, ::Float64, ::Int64, ::typeof(MINPACK.lmder), ::getfield(Main, Symbol("#f!#24")){Int64,Float64}, ::getfield(Main, Symbol("#g!#25")){Int64,Float64}, ::Array{Float64,1}, ::Int64, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:499
└ @ MINPACK wrappers.jl:499
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #lmder#6(::Int64, ::Float64, ::Float64, ::Float64, ::Float64, ::Int64, ::Int64, ::Int64, ::Float64, ::Int64, ::typeof(MINPACK.lmder), ::getfield(Main, Symbol("#f!#24")){Int64,Float64}, ::getfield(Main, Symbol("#g!#25")){Int64,Float64}, ::Array{Float64,1}, ::Int64, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:500
└ @ MINPACK wrappers.jl:500
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #lmder#6(::Int64, ::Float64, ::Float64, ::Float64, ::Float64, ::Int64, ::Int64, ::Int64, ::Float64, ::Int64, ::typeof(MINPACK.lmder), ::getfield(Main, Symbol("#f!#24")){Int64,Float64}, ::getfield(Main, Symbol("#g!#25")){Int64,Float64}, ::Array{Float64,1}, ::Int64, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:501
└ @ MINPACK wrappers.jl:501
Watson6-lm                                          6      45      37     1.582588e-14   1.278165e-01
Watson6-lm-no_g                                     6      45      37     6.992670e-15   1.114910e-02
Watson9-hybr                                        9      92       4     3.728515e-12   2.207464e-02
Watson9-hybr-no_g                                   9      95       8     1.715425e-15   2.747427e-02
Watson9-lm                                          9      64      50     2.631359e-14   1.852305e-02
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.norm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.norm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.norm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.norm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.norm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.norm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.norm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.norm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.norm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
┌ Warning: `Array{T}(m::Int, n::Int) where T` is deprecated, use `Array{T}(undef, m, n)` instead.
│   caller = #hybrj#4(::Int64, ::Int64, ::Int64, ::Int64, ::Float64, ::Array{Float64,1}, ::Int64, ::Float64, ::Int64, ::Int32, ::typeof(MINPACK.hybrj), ::getfield(Main, Symbol("#f!#27")){Int64,Float64}, ::getfield(Main, Symbol("#g!#28")){Int64,Float64}, ::Array{Float64,1}, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:138
└ @ MINPACK wrappers.jl:138
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = Type at MINPACK.jl:43 [inlined]
└ @ Core MINPACK.jl:43
┌ Warning: `Array{T}(m::Integer) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #hybrj#4(::Int64, ::Int64, ::Int64, ::Int64, ::Float64, ::Array{Float64,1}, ::Int64, ::Float64, ::Int64, ::Int32, ::typeof(MINPACK.hybrj), ::getfield(Main, Symbol("#f!#27")){Int64,Float64}, ::getfield(Main, Symbol("#g!#28")){Int64,Float64}, ::Array{Float64,1}, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:145
└ @ MINPACK wrappers.jl:145
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #hybrj#4(::Int64, ::Int64, ::Int64, ::Int64, ::Float64, ::Array{Float64,1}, ::Int64, ::Float64, ::Int64, ::Int32, ::typeof(MINPACK.hybrj), ::getfield(Main, Symbol("#f!#27")){Int64,Float64}, ::getfield(Main, Symbol("#g!#28")){Int64,Float64}, ::Array{Float64,1}, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:146
└ @ MINPACK wrappers.jl:146
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #hybrj#4(::Int64, ::Int64, ::Int64, ::Int64, ::Float64, ::Array{Float64,1}, ::Int64, ::Float64, ::Int64, ::Int32, ::typeof(MINPACK.hybrj), ::getfield(Main, Symbol("#f!#27")){Int64,Float64}, ::getfield(Main, Symbol("#g!#28")){Int64,Float64}, ::Array{Float64,1}, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:147
└ @ MINPACK wrappers.jl:147
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #hybrj#4(::Int64, ::Int64, ::Int64, ::Int64, ::Float64, ::Array{Float64,1}, ::Int64, ::Float64, ::Int64, ::Int32, ::typeof(MINPACK.hybrj), ::getfield(Main, Symbol("#f!#27")){Int64,Float64}, ::getfield(Main, Symbol("#g!#28")){Int64,Float64}, ::Array{Float64,1}, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:148
└ @ MINPACK wrappers.jl:148
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #hybrj#4(::Int64, ::Int64, ::Int64, ::Int64, ::Float64, ::Array{Float64,1}, ::Int64, ::Float64, ::Int64, ::Int32, ::typeof(MINPACK.hybrj), ::getfield(Main, Symbol("#f!#27")){Int64,Float64}, ::getfield(Main, Symbol("#g!#28")){Int64,Float64}, ::Array{Float64,1}, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:149
└ @ MINPACK wrappers.jl:149
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #hybrj#4(::Int64, ::Int64, ::Int64, ::Int64, ::Float64, ::Array{Float64,1}, ::Int64, ::Float64, ::Int64, ::Int32, ::typeof(MINPACK.hybrj), ::getfield(Main, Symbol("#f!#27")){Int64,Float64}, ::getfield(Main, Symbol("#g!#28")){Int64,Float64}, ::Array{Float64,1}, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:150
└ @ MINPACK wrappers.jl:150
Chebyquad-hybr                                      5      10       1     5.969114e-13   3.117412e-01
Chebyquad-hybr-no_g                                 5      12       1     3.567124e-12   4.301605e-03
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.norm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.norm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.norm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #lmder#6(::Int64, ::Float64, ::Float64, ::Float64, ::Float64, ::Int64, ::Int64, ::Int64, ::Float64, ::Int64, ::typeof(MINPACK.lmder), ::getfield(Main, Symbol("#f!#27")){Int64,Float64}, ::getfield(Main, Symbol("#g!#28")){Int64,Float64}, ::Array{Float64,1}, ::Int64, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:484
└ @ MINPACK wrappers.jl:484
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #lmder#6(::Int64, ::Float64, ::Float64, ::Float64, ::Float64, ::Int64, ::Int64, ::Int64, ::Float64, ::Int64, ::typeof(MINPACK.lmder), ::getfield(Main, Symbol("#f!#27")){Int64,Float64}, ::getfield(Main, Symbol("#g!#28")){Int64,Float64}, ::Array{Float64,1}, ::Int64, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:486
└ @ MINPACK wrappers.jl:486
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #lmder#6(::Int64, ::Float64, ::Float64, ::Float64, ::Float64, ::Int64, ::Int64, ::Int64, ::Float64, ::Int64, ::typeof(MINPACK.lmder), ::getfield(Main, Symbol("#f!#27")){Int64,Float64}, ::getfield(Main, Symbol("#g!#28")){Int64,Float64}, ::Array{Float64,1}, ::Int64, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:487
└ @ MINPACK wrappers.jl:487
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = Type at MINPACK.jl:43 [inlined]
└ @ Core MINPACK.jl:43
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #lmder#6(::Int64, ::Float64, ::Float64, ::Float64, ::Float64, ::Int64, ::Int64, ::Int64, ::Float64, ::Int64, ::typeof(MINPACK.lmder), ::getfield(Main, Symbol("#f!#27")){Int64,Float64}, ::getfield(Main, Symbol("#g!#28")){Int64,Float64}, ::Array{Float64,1}, ::Int64, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:492
└ @ MINPACK wrappers.jl:492
┌ Warning: `Array{T}(m::Int, n::Int) where T` is deprecated, use `Array{T}(undef, m, n)` instead.
│   caller = #lmder#6(::Int64, ::Float64, ::Float64, ::Float64, ::Float64, ::Int64, ::Int64, ::Int64, ::Float64, ::Int64, ::typeof(MINPACK.lmder), ::getfield(Main, Symbol("#f!#27")){Int64,Float64}, ::getfield(Main, Symbol("#g!#28")){Int64,Float64}, ::Array{Float64,1}, ::Int64, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:495
└ @ MINPACK wrappers.jl:495
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #lmder#6(::Int64, ::Float64, ::Float64, ::Float64, ::Float64, ::Int64, ::Int64, ::Int64, ::Float64, ::Int64, ::typeof(MINPACK.lmder), ::getfield(Main, Symbol("#f!#27")){Int64,Float64}, ::getfield(Main, Symbol("#g!#28")){Int64,Float64}, ::Array{Float64,1}, ::Int64, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:496
└ @ MINPACK wrappers.jl:496
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #lmder#6(::Int64, ::Float64, ::Float64, ::Float64, ::Float64, ::Int64, ::Int64, ::Int64, ::Float64, ::Int64, ::typeof(MINPACK.lmder), ::getfield(Main, Symbol("#f!#27")){Int64,Float64}, ::getfield(Main, Symbol("#g!#28")){Int64,Float64}, ::Array{Float64,1}, ::Int64, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:497
└ @ MINPACK wrappers.jl:497
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #lmder#6(::Int64, ::Float64, ::Float64, ::Float64, ::Float64, ::Int64, ::Int64, ::Int64, ::Float64, ::Int64, ::typeof(MINPACK.lmder), ::getfield(Main, Symbol("#f!#27")){Int64,Float64}, ::getfield(Main, Symbol("#g!#28")){Int64,Float64}, ::Array{Float64,1}, ::Int64, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:498
└ @ MINPACK wrappers.jl:498
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #lmder#6(::Int64, ::Float64, ::Float64, ::Float64, ::Float64, ::Int64, ::Int64, ::Int64, ::Float64, ::Int64, ::typeof(MINPACK.lmder), ::getfield(Main, Symbol("#f!#27")){Int64,Float64}, ::getfield(Main, Symbol("#g!#28")){Int64,Float64}, ::Array{Float64,1}, ::Int64, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:499
└ @ MINPACK wrappers.jl:499
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #lmder#6(::Int64, ::Float64, ::Float64, ::Float64, ::Float64, ::Int64, ::Int64, ::Int64, ::Float64, ::Int64, ::typeof(MINPACK.lmder), ::getfield(Main, Symbol("#f!#27")){Int64,Float64}, ::getfield(Main, Symbol("#g!#28")){Int64,Float64}, ::Array{Float64,1}, ::Int64, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:500
└ @ MINPACK wrappers.jl:500
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #lmder#6(::Int64, ::Float64, ::Float64, ::Float64, ::Float64, ::Int64, ::Int64, ::Int64, ::Float64, ::Int64, ::typeof(MINPACK.lmder), ::getfield(Main, Symbol("#f!#27")){Int64,Float64}, ::getfield(Main, Symbol("#g!#28")){Int64,Float64}, ::Array{Float64,1}, ::Int64, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:501
└ @ MINPACK wrappers.jl:501
Chebyquad-lm                                        5       8       6     1.665335e-16   8.386148e-02
Chebyquad-lm-no_g                                   5       8       6     1.249001e-16   2.884678e-03
Chebyquad-hybr                                      6      13       2     1.317492e-11   4.149164e-03
Chebyquad-hybr-no_g                                 6      13       2     6.447310e-10   2.766076e-03
Chebyquad-lm                                        6      11       7     2.324529e-16   5.779874e-03
Chebyquad-lm-no_g                                   6      11       7     1.249001e-16   3.393343e-03
Chebyquad-hybr                                      7      12       1     4.102544e-12   4.978198e-03
Chebyquad-hybr-no_g                                 7      14       1     2.108302e-10   3.235694e-03
Chebyquad-lm                                        7       9       7     1.665335e-16   4.786841e-03
Chebyquad-lm-no_g                                   7       9       7     2.696256e-16   3.887810e-03
Chebyquad-hybr                                      9      23       2     4.022407e-10   6.539243e-03
Chebyquad-hybr-no_g                                 9      23       2     3.988115e-09   4.455213e-03
Chebyquad-lm                                        9      12       9     2.343804e-16   4.598885e-03
Chebyquad-lm-no_g                                   9      12       9     1.727014e-16   3.063996e-03
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.norm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.norm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.norm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.norm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.norm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.norm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.norm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.norm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.norm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
┌ Warning: `Array{T}(m::Int, n::Int) where T` is deprecated, use `Array{T}(undef, m, n)` instead.
│   caller = #hybrj#4(::Int64, ::Int64, ::Int64, ::Int64, ::Float64, ::Array{Float64,1}, ::Int64, ::Float64, ::Int64, ::Int32, ::typeof(MINPACK.hybrj), ::getfield(Main, Symbol("#f!#30")){Int64}, ::getfield(Main, Symbol("#g!#31")){Int64}, ::Array{Float64,1}, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:138
└ @ MINPACK wrappers.jl:138
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = Type at MINPACK.jl:43 [inlined]
└ @ Core MINPACK.jl:43
┌ Warning: `Array{T}(m::Integer) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #hybrj#4(::Int64, ::Int64, ::Int64, ::Int64, ::Float64, ::Array{Float64,1}, ::Int64, ::Float64, ::Int64, ::Int32, ::typeof(MINPACK.hybrj), ::getfield(Main, Symbol("#f!#30")){Int64}, ::getfield(Main, Symbol("#g!#31")){Int64}, ::Array{Float64,1}, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:145
└ @ MINPACK wrappers.jl:145
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #hybrj#4(::Int64, ::Int64, ::Int64, ::Int64, ::Float64, ::Array{Float64,1}, ::Int64, ::Float64, ::Int64, ::Int32, ::typeof(MINPACK.hybrj), ::getfield(Main, Symbol("#f!#30")){Int64}, ::getfield(Main, Symbol("#g!#31")){Int64}, ::Array{Float64,1}, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:146
└ @ MINPACK wrappers.jl:146
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #hybrj#4(::Int64, ::Int64, ::Int64, ::Int64, ::Float64, ::Array{Float64,1}, ::Int64, ::Float64, ::Int64, ::Int32, ::typeof(MINPACK.hybrj), ::getfield(Main, Symbol("#f!#30")){Int64}, ::getfield(Main, Symbol("#g!#31")){Int64}, ::Array{Float64,1}, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:147
└ @ MINPACK wrappers.jl:147
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #hybrj#4(::Int64, ::Int64, ::Int64, ::Int64, ::Float64, ::Array{Float64,1}, ::Int64, ::Float64, ::Int64, ::Int32, ::typeof(MINPACK.hybrj), ::getfield(Main, Symbol("#f!#30")){Int64}, ::getfield(Main, Symbol("#g!#31")){Int64}, ::Array{Float64,1}, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:148
└ @ MINPACK wrappers.jl:148
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #hybrj#4(::Int64, ::Int64, ::Int64, ::Int64, ::Float64, ::Array{Float64,1}, ::Int64, ::Float64, ::Int64, ::Int32, ::typeof(MINPACK.hybrj), ::getfield(Main, Symbol("#f!#30")){Int64}, ::getfield(Main, Symbol("#g!#31")){Int64}, ::Array{Float64,1}, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:149
└ @ MINPACK wrappers.jl:149
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #hybrj#4(::Int64, ::Int64, ::Int64, ::Int64, ::Float64, ::Array{Float64,1}, ::Int64, ::Float64, ::Int64, ::Int32, ::typeof(MINPACK.hybrj), ::getfield(Main, Symbol("#f!#30")){Int64}, ::getfield(Main, Symbol("#g!#31")){Int64}, ::Array{Float64,1}, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:150
└ @ MINPACK wrappers.jl:150
WARNING: Base.diagind is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.diagind is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.diagind is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
Brown almost-linear10-hybr                         10      11       2     4.996004e-15   4.541237e-01
Brown almost-linear10-hybr-no_g                    10      11       2     5.995204e-15   3.130429e-03
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.norm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.norm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.norm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #lmder#6(::Int64, ::Float64, ::Float64, ::Float64, ::Float64, ::Int64, ::Int64, ::Int64, ::Float64, ::Int64, ::typeof(MINPACK.lmder), ::getfield(Main, Symbol("#f!#30")){Int64}, ::getfield(Main, Symbol("#g!#31")){Int64}, ::Array{Float64,1}, ::Int64, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:484
└ @ MINPACK wrappers.jl:484
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #lmder#6(::Int64, ::Float64, ::Float64, ::Float64, ::Float64, ::Int64, ::Int64, ::Int64, ::Float64, ::Int64, ::typeof(MINPACK.lmder), ::getfield(Main, Symbol("#f!#30")){Int64}, ::getfield(Main, Symbol("#g!#31")){Int64}, ::Array{Float64,1}, ::Int64, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:486
└ @ MINPACK wrappers.jl:486
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #lmder#6(::Int64, ::Float64, ::Float64, ::Float64, ::Float64, ::Int64, ::Int64, ::Int64, ::Float64, ::Int64, ::typeof(MINPACK.lmder), ::getfield(Main, Symbol("#f!#30")){Int64}, ::getfield(Main, Symbol("#g!#31")){Int64}, ::Array{Float64,1}, ::Int64, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:487
└ @ MINPACK wrappers.jl:487
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = Type at MINPACK.jl:43 [inlined]
└ @ Core MINPACK.jl:43
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #lmder#6(::Int64, ::Float64, ::Float64, ::Float64, ::Float64, ::Int64, ::Int64, ::Int64, ::Float64, ::Int64, ::typeof(MINPACK.lmder), ::getfield(Main, Symbol("#f!#30")){Int64}, ::getfield(Main, Symbol("#g!#31")){Int64}, ::Array{Float64,1}, ::Int64, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:492
└ @ MINPACK wrappers.jl:492
┌ Warning: `Array{T}(m::Int, n::Int) where T` is deprecated, use `Array{T}(undef, m, n)` instead.
│   caller = #lmder#6(::Int64, ::Float64, ::Float64, ::Float64, ::Float64, ::Int64, ::Int64, ::Int64, ::Float64, ::Int64, ::typeof(MINPACK.lmder), ::getfield(Main, Symbol("#f!#30")){Int64}, ::getfield(Main, Symbol("#g!#31")){Int64}, ::Array{Float64,1}, ::Int64, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:495
└ @ MINPACK wrappers.jl:495
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #lmder#6(::Int64, ::Float64, ::Float64, ::Float64, ::Float64, ::Int64, ::Int64, ::Int64, ::Float64, ::Int64, ::typeof(MINPACK.lmder), ::getfield(Main, Symbol("#f!#30")){Int64}, ::getfield(Main, Symbol("#g!#31")){Int64}, ::Array{Float64,1}, ::Int64, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:496
└ @ MINPACK wrappers.jl:496
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #lmder#6(::Int64, ::Float64, ::Float64, ::Float64, ::Float64, ::Int64, ::Int64, ::Int64, ::Float64, ::Int64, ::typeof(MINPACK.lmder), ::getfield(Main, Symbol("#f!#30")){Int64}, ::getfield(Main, Symbol("#g!#31")){Int64}, ::Array{Float64,1}, ::Int64, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:497
└ @ MINPACK wrappers.jl:497
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #lmder#6(::Int64, ::Float64, ::Float64, ::Float64, ::Float64, ::Int64, ::Int64, ::Int64, ::Float64, ::Int64, ::typeof(MINPACK.lmder), ::getfield(Main, Symbol("#f!#30")){Int64}, ::getfield(Main, Symbol("#g!#31")){Int64}, ::Array{Float64,1}, ::Int64, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:498
└ @ MINPACK wrappers.jl:498
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #lmder#6(::Int64, ::Float64, ::Float64, ::Float64, ::Float64, ::Int64, ::Int64, ::Int64, ::Float64, ::Int64, ::typeof(MINPACK.lmder), ::getfield(Main, Symbol("#f!#30")){Int64}, ::getfield(Main, Symbol("#g!#31")){Int64}, ::Array{Float64,1}, ::Int64, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:499
└ @ MINPACK wrappers.jl:499
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #lmder#6(::Int64, ::Float64, ::Float64, ::Float64, ::Float64, ::Int64, ::Int64, ::Int64, ::Float64, ::Int64, ::typeof(MINPACK.lmder), ::getfield(Main, Symbol("#f!#30")){Int64}, ::getfield(Main, Symbol("#g!#31")){Int64}, ::Array{Float64,1}, ::Int64, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:500
└ @ MINPACK wrappers.jl:500
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #lmder#6(::Int64, ::Float64, ::Float64, ::Float64, ::Float64, ::Int64, ::Int64, ::Int64, ::Float64, ::Int64, ::typeof(MINPACK.lmder), ::getfield(Main, Symbol("#f!#30")){Int64}, ::getfield(Main, Symbol("#g!#31")){Int64}, ::Array{Float64,1}, ::Int64, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:501
└ @ MINPACK wrappers.jl:501
Brown almost-linear10-lm                           10      15      13     5.551115e-16   1.110892e-01
Brown almost-linear10-lm-no_g                      10       7       5     1.000000e+00   2.811686e-03
Brown almost-linear30-hybr                         30      12       2     3.474998e-14   4.961144e-03
Brown almost-linear30-hybr-no_g                    30      24       3     2.953193e-14   6.732802e-03
Brown almost-linear30-lm                           30      19      14     1.654232e-14   1.035739e-02
Brown almost-linear30-lm-no_g                      30      11      10     1.354472e-14   5.507048e-03
Brown almost-linear40-hybr                         40      12       2     1.576517e-14   6.358929e-03
Brown almost-linear40-hybr-no_g                    40      30       3     2.353673e-14   1.197756e-02
Brown almost-linear40-lm                           40      19      14     2.409184e-14   1.620147e-02
Brown almost-linear40-lm-no_g                      40      11      10     7.327472e-15   8.553691e-03
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.norm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.norm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.norm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.norm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.norm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.norm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.norm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.norm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.norm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
┌ Warning: `Array{T}(m::Int, n::Int) where T` is deprecated, use `Array{T}(undef, m, n)` instead.
│   caller = #hybrj#4(::Int64, ::Int64, ::Int64, ::Int64, ::Float64, ::Array{Float64,1}, ::Int64, ::Float64, ::Int64, ::Int32, ::typeof(MINPACK.hybrj), ::getfield(Main, Symbol("#f!#33")){Int64,Float64}, ::getfield(Main, Symbol("#g!#34")){Int64,Float64}, ::Array{Float64,1}, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:138
└ @ MINPACK wrappers.jl:138
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = Type at MINPACK.jl:43 [inlined]
└ @ Core MINPACK.jl:43
┌ Warning: `Array{T}(m::Integer) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #hybrj#4(::Int64, ::Int64, ::Int64, ::Int64, ::Float64, ::Array{Float64,1}, ::Int64, ::Float64, ::Int64, ::Int32, ::typeof(MINPACK.hybrj), ::getfield(Main, Symbol("#f!#33")){Int64,Float64}, ::getfield(Main, Symbol("#g!#34")){Int64,Float64}, ::Array{Float64,1}, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:145
└ @ MINPACK wrappers.jl:145
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #hybrj#4(::Int64, ::Int64, ::Int64, ::Int64, ::Float64, ::Array{Float64,1}, ::Int64, ::Float64, ::Int64, ::Int32, ::typeof(MINPACK.hybrj), ::getfield(Main, Symbol("#f!#33")){Int64,Float64}, ::getfield(Main, Symbol("#g!#34")){Int64,Float64}, ::Array{Float64,1}, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:146
└ @ MINPACK wrappers.jl:146
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #hybrj#4(::Int64, ::Int64, ::Int64, ::Int64, ::Float64, ::Array{Float64,1}, ::Int64, ::Float64, ::Int64, ::Int32, ::typeof(MINPACK.hybrj), ::getfield(Main, Symbol("#f!#33")){Int64,Float64}, ::getfield(Main, Symbol("#g!#34")){Int64,Float64}, ::Array{Float64,1}, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:147
└ @ MINPACK wrappers.jl:147
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #hybrj#4(::Int64, ::Int64, ::Int64, ::Int64, ::Float64, ::Array{Float64,1}, ::Int64, ::Float64, ::Int64, ::Int32, ::typeof(MINPACK.hybrj), ::getfield(Main, Symbol("#f!#33")){Int64,Float64}, ::getfield(Main, Symbol("#g!#34")){Int64,Float64}, ::Array{Float64,1}, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:148
└ @ MINPACK wrappers.jl:148
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #hybrj#4(::Int64, ::Int64, ::Int64, ::Int64, ::Float64, ::Array{Float64,1}, ::Int64, ::Float64, ::Int64, ::Int32, ::typeof(MINPACK.hybrj), ::getfield(Main, Symbol("#f!#33")){Int64,Float64}, ::getfield(Main, Symbol("#g!#34")){Int64,Float64}, ::Array{Float64,1}, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:149
└ @ MINPACK wrappers.jl:149
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #hybrj#4(::Int64, ::Int64, ::Int64, ::Int64, ::Float64, ::Array{Float64,1}, ::Int64, ::Float64, ::Int64, ::Int32, ::typeof(MINPACK.hybrj), ::getfield(Main, Symbol("#f!#33")){Int64,Float64}, ::getfield(Main, Symbol("#g!#34")){Int64,Float64}, ::Array{Float64,1}, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:150
└ @ MINPACK wrappers.jl:150
Discrete boundary value-hybr                       10       6       1     1.582068e-15   2.985926e-01
Discrete boundary value-hybr-no_g                  10       6       1     1.582068e-15   1.807919e-03
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.norm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.norm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.norm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #lmder#6(::Int64, ::Float64, ::Float64, ::Float64, ::Float64, ::Int64, ::Int64, ::Int64, ::Float64, ::Int64, ::typeof(MINPACK.lmder), ::getfield(Main, Symbol("#f!#33")){Int64,Float64}, ::getfield(Main, Symbol("#g!#34")){Int64,Float64}, ::Array{Float64,1}, ::Int64, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:484
└ @ MINPACK wrappers.jl:484
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #lmder#6(::Int64, ::Float64, ::Float64, ::Float64, ::Float64, ::Int64, ::Int64, ::Int64, ::Float64, ::Int64, ::typeof(MINPACK.lmder), ::getfield(Main, Symbol("#f!#33")){Int64,Float64}, ::getfield(Main, Symbol("#g!#34")){Int64,Float64}, ::Array{Float64,1}, ::Int64, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:486
└ @ MINPACK wrappers.jl:486
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #lmder#6(::Int64, ::Float64, ::Float64, ::Float64, ::Float64, ::Int64, ::Int64, ::Int64, ::Float64, ::Int64, ::typeof(MINPACK.lmder), ::getfield(Main, Symbol("#f!#33")){Int64,Float64}, ::getfield(Main, Symbol("#g!#34")){Int64,Float64}, ::Array{Float64,1}, ::Int64, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:487
└ @ MINPACK wrappers.jl:487
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = Type at MINPACK.jl:43 [inlined]
└ @ Core MINPACK.jl:43
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #lmder#6(::Int64, ::Float64, ::Float64, ::Float64, ::Float64, ::Int64, ::Int64, ::Int64, ::Float64, ::Int64, ::typeof(MINPACK.lmder), ::getfield(Main, Symbol("#f!#33")){Int64,Float64}, ::getfield(Main, Symbol("#g!#34")){Int64,Float64}, ::Array{Float64,1}, ::Int64, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:492
└ @ MINPACK wrappers.jl:492
┌ Warning: `Array{T}(m::Int, n::Int) where T` is deprecated, use `Array{T}(undef, m, n)` instead.
│   caller = #lmder#6(::Int64, ::Float64, ::Float64, ::Float64, ::Float64, ::Int64, ::Int64, ::Int64, ::Float64, ::Int64, ::typeof(MINPACK.lmder), ::getfield(Main, Symbol("#f!#33")){Int64,Float64}, ::getfield(Main, Symbol("#g!#34")){Int64,Float64}, ::Array{Float64,1}, ::Int64, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:495
└ @ MINPACK wrappers.jl:495
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #lmder#6(::Int64, ::Float64, ::Float64, ::Float64, ::Float64, ::Int64, ::Int64, ::Int64, ::Float64, ::Int64, ::typeof(MINPACK.lmder), ::getfield(Main, Symbol("#f!#33")){Int64,Float64}, ::getfield(Main, Symbol("#g!#34")){Int64,Float64}, ::Array{Float64,1}, ::Int64, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:496
└ @ MINPACK wrappers.jl:496
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #lmder#6(::Int64, ::Float64, ::Float64, ::Float64, ::Float64, ::Int64, ::Int64, ::Int64, ::Float64, ::Int64, ::typeof(MINPACK.lmder), ::getfield(Main, Symbol("#f!#33")){Int64,Float64}, ::getfield(Main, Symbol("#g!#34")){Int64,Float64}, ::Array{Float64,1}, ::Int64, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:497
└ @ MINPACK wrappers.jl:497
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #lmder#6(::Int64, ::Float64, ::Float64, ::Float64, ::Float64, ::Int64, ::Int64, ::Int64, ::Float64, ::Int64, ::typeof(MINPACK.lmder), ::getfield(Main, Symbol("#f!#33")){Int64,Float64}, ::getfield(Main, Symbol("#g!#34")){Int64,Float64}, ::Array{Float64,1}, ::Int64, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:498
└ @ MINPACK wrappers.jl:498
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #lmder#6(::Int64, ::Float64, ::Float64, ::Float64, ::Float64, ::Int64, ::Int64, ::Int64, ::Float64, ::Int64, ::typeof(MINPACK.lmder), ::getfield(Main, Symbol("#f!#33")){Int64,Float64}, ::getfield(Main, Symbol("#g!#34")){Int64,Float64}, ::Array{Float64,1}, ::Int64, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:499
└ @ MINPACK wrappers.jl:499
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #lmder#6(::Int64, ::Float64, ::Float64, ::Float64, ::Float64, ::Int64, ::Int64, ::Int64, ::Float64, ::Int64, ::typeof(MINPACK.lmder), ::getfield(Main, Symbol("#f!#33")){Int64,Float64}, ::getfield(Main, Symbol("#g!#34")){Int64,Float64}, ::Array{Float64,1}, ::Int64, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:500
└ @ MINPACK wrappers.jl:500
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #lmder#6(::Int64, ::Float64, ::Float64, ::Float64, ::Float64, ::Int64, ::Int64, ::Int64, ::Float64, ::Int64, ::typeof(MINPACK.lmder), ::getfield(Main, Symbol("#f!#33")){Int64,Float64}, ::getfield(Main, Symbol("#g!#34")){Int64,Float64}, ::Array{Float64,1}, ::Int64, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:501
└ @ MINPACK wrappers.jl:501
Discrete boundary value-lm                         10       5       4     2.428613e-17   1.094937e-01
Discrete boundary value-lm-no_g                    10       5       4     3.122502e-17   2.775854e-03
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.norm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.norm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.norm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.norm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.norm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.norm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.norm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.norm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.norm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
┌ Warning: `Array{T}(m::Int, n::Int) where T` is deprecated, use `Array{T}(undef, m, n)` instead.
│   caller = #hybrj#4(::Int64, ::Int64, ::Int64, ::Int64, ::Float64, ::Array{Float64,1}, ::Int64, ::Float64, ::Int64, ::Int32, ::typeof(MINPACK.hybrj), ::getfield(Main, Symbol("#f!#37")){Int64,Float64}, ::getfield(Main, Symbol("#g!#38")){Int64,Float64}, ::Array{Float64,1}, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:138
└ @ MINPACK wrappers.jl:138
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = Type at MINPACK.jl:43 [inlined]
└ @ Core MINPACK.jl:43
┌ Warning: `Array{T}(m::Integer) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #hybrj#4(::Int64, ::Int64, ::Int64, ::Int64, ::Float64, ::Array{Float64,1}, ::Int64, ::Float64, ::Int64, ::Int32, ::typeof(MINPACK.hybrj), ::getfield(Main, Symbol("#f!#37")){Int64,Float64}, ::getfield(Main, Symbol("#g!#38")){Int64,Float64}, ::Array{Float64,1}, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:145
└ @ MINPACK wrappers.jl:145
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #hybrj#4(::Int64, ::Int64, ::Int64, ::Int64, ::Float64, ::Array{Float64,1}, ::Int64, ::Float64, ::Int64, ::Int32, ::typeof(MINPACK.hybrj), ::getfield(Main, Symbol("#f!#37")){Int64,Float64}, ::getfield(Main, Symbol("#g!#38")){Int64,Float64}, ::Array{Float64,1}, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:146
└ @ MINPACK wrappers.jl:146
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #hybrj#4(::Int64, ::Int64, ::Int64, ::Int64, ::Float64, ::Array{Float64,1}, ::Int64, ::Float64, ::Int64, ::Int32, ::typeof(MINPACK.hybrj), ::getfield(Main, Symbol("#f!#37")){Int64,Float64}, ::getfield(Main, Symbol("#g!#38")){Int64,Float64}, ::Array{Float64,1}, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:147
└ @ MINPACK wrappers.jl:147
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #hybrj#4(::Int64, ::Int64, ::Int64, ::Int64, ::Float64, ::Array{Float64,1}, ::Int64, ::Float64, ::Int64, ::Int32, ::typeof(MINPACK.hybrj), ::getfield(Main, Symbol("#f!#37")){Int64,Float64}, ::getfield(Main, Symbol("#g!#38")){Int64,Float64}, ::Array{Float64,1}, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:148
└ @ MINPACK wrappers.jl:148
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #hybrj#4(::Int64, ::Int64, ::Int64, ::Int64, ::Float64, ::Array{Float64,1}, ::Int64, ::Float64, ::Int64, ::Int32, ::typeof(MINPACK.hybrj), ::getfield(Main, Symbol("#f!#37")){Int64,Float64}, ::getfield(Main, Symbol("#g!#38")){Int64,Float64}, ::Array{Float64,1}, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:149
└ @ MINPACK wrappers.jl:149
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #hybrj#4(::Int64, ::Int64, ::Int64, ::Int64, ::Float64, ::Array{Float64,1}, ::Int64, ::Float64, ::Int64, ::Int32, ::typeof(MINPACK.hybrj), ::getfield(Main, Symbol("#f!#37")){Int64,Float64}, ::getfield(Main, Symbol("#g!#38")){Int64,Float64}, ::Array{Float64,1}, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:150
└ @ MINPACK wrappers.jl:150
Discrete integral equation-hybr                     1       6       1     2.775558e-17   3.528890e-01
Discrete integral equation-hybr-no_g                1       6       1     2.775558e-17   2.567308e-03
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.norm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.norm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.norm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #lmder#6(::Int64, ::Float64, ::Float64, ::Float64, ::Float64, ::Int64, ::Int64, ::Int64, ::Float64, ::Int64, ::typeof(MINPACK.lmder), ::getfield(Main, Symbol("#f!#37")){Int64,Float64}, ::getfield(Main, Symbol("#g!#38")){Int64,Float64}, ::Array{Float64,1}, ::Int64, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:484
└ @ MINPACK wrappers.jl:484
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #lmder#6(::Int64, ::Float64, ::Float64, ::Float64, ::Float64, ::Int64, ::Int64, ::Int64, ::Float64, ::Int64, ::typeof(MINPACK.lmder), ::getfield(Main, Symbol("#f!#37")){Int64,Float64}, ::getfield(Main, Symbol("#g!#38")){Int64,Float64}, ::Array{Float64,1}, ::Int64, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:486
└ @ MINPACK wrappers.jl:486
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #lmder#6(::Int64, ::Float64, ::Float64, ::Float64, ::Float64, ::Int64, ::Int64, ::Int64, ::Float64, ::Int64, ::typeof(MINPACK.lmder), ::getfield(Main, Symbol("#f!#37")){Int64,Float64}, ::getfield(Main, Symbol("#g!#38")){Int64,Float64}, ::Array{Float64,1}, ::Int64, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:487
└ @ MINPACK wrappers.jl:487
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = Type at MINPACK.jl:43 [inlined]
└ @ Core MINPACK.jl:43
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #lmder#6(::Int64, ::Float64, ::Float64, ::Float64, ::Float64, ::Int64, ::Int64, ::Int64, ::Float64, ::Int64, ::typeof(MINPACK.lmder), ::getfield(Main, Symbol("#f!#37")){Int64,Float64}, ::getfield(Main, Symbol("#g!#38")){Int64,Float64}, ::Array{Float64,1}, ::Int64, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:492
└ @ MINPACK wrappers.jl:492
┌ Warning: `Array{T}(m::Int, n::Int) where T` is deprecated, use `Array{T}(undef, m, n)` instead.
│   caller = #lmder#6(::Int64, ::Float64, ::Float64, ::Float64, ::Float64, ::Int64, ::Int64, ::Int64, ::Float64, ::Int64, ::typeof(MINPACK.lmder), ::getfield(Main, Symbol("#f!#37")){Int64,Float64}, ::getfield(Main, Symbol("#g!#38")){Int64,Float64}, ::Array{Float64,1}, ::Int64, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:495
└ @ MINPACK wrappers.jl:495
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #lmder#6(::Int64, ::Float64, ::Float64, ::Float64, ::Float64, ::Int64, ::Int64, ::Int64, ::Float64, ::Int64, ::typeof(MINPACK.lmder), ::getfield(Main, Symbol("#f!#37")){Int64,Float64}, ::getfield(Main, Symbol("#g!#38")){Int64,Float64}, ::Array{Float64,1}, ::Int64, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:496
└ @ MINPACK wrappers.jl:496
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #lmder#6(::Int64, ::Float64, ::Float64, ::Float64, ::Float64, ::Int64, ::Int64, ::Int64, ::Float64, ::Int64, ::typeof(MINPACK.lmder), ::getfield(Main, Symbol("#f!#37")){Int64,Float64}, ::getfield(Main, Symbol("#g!#38")){Int64,Float64}, ::Array{Float64,1}, ::Int64, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:497
└ @ MINPACK wrappers.jl:497
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #lmder#6(::Int64, ::Float64, ::Float64, ::Float64, ::Float64, ::Int64, ::Int64, ::Int64, ::Float64, ::Int64, ::typeof(MINPACK.lmder), ::getfield(Main, Symbol("#f!#37")){Int64,Float64}, ::getfield(Main, Symbol("#g!#38")){Int64,Float64}, ::Array{Float64,1}, ::Int64, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:498
└ @ MINPACK wrappers.jl:498
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #lmder#6(::Int64, ::Float64, ::Float64, ::Float64, ::Float64, ::Int64, ::Int64, ::Int64, ::Float64, ::Int64, ::typeof(MINPACK.lmder), ::getfield(Main, Symbol("#f!#37")){Int64,Float64}, ::getfield(Main, Symbol("#g!#38")){Int64,Float64}, ::Array{Float64,1}, ::Int64, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:499
└ @ MINPACK wrappers.jl:499
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #lmder#6(::Int64, ::Float64, ::Float64, ::Float64, ::Float64, ::Int64, ::Int64, ::Int64, ::Float64, ::Int64, ::typeof(MINPACK.lmder), ::getfield(Main, Symbol("#f!#37")){Int64,Float64}, ::getfield(Main, Symbol("#g!#38")){Int64,Float64}, ::Array{Float64,1}, ::Int64, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:500
└ @ MINPACK wrappers.jl:500
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #lmder#6(::Int64, ::Float64, ::Float64, ::Float64, ::Float64, ::Int64, ::Int64, ::Int64, ::Float64, ::Int64, ::typeof(MINPACK.lmder), ::getfield(Main, Symbol("#f!#37")){Int64,Float64}, ::getfield(Main, Symbol("#g!#38")){Int64,Float64}, ::Array{Float64,1}, ::Int64, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:501
└ @ MINPACK wrappers.jl:501
Discrete integral equation-lm                       1       5       4     0.000000e+00   1.165487e-01
Discrete integral equation-lm-no_g                  1       5       4     2.775558e-17   2.923983e-03
Discrete integral equation-hybr                    10       6       1     3.164136e-15   4.233443e-03
Discrete integral equation-hybr-no_g               10       6       1     3.219647e-15   2.947077e-03
Discrete integral equation-lm                      10       5       4     2.775558e-17   4.126411e-03
Discrete integral equation-lm-no_g                 10       5       4     5.551115e-17   2.229007e-03
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.norm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.norm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.norm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.norm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.norm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.norm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.norm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.norm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.norm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #lmder#6(::Int64, ::Float64, ::Float64, ::Float64, ::Float64, ::Int64, ::Int64, ::Int64, ::Float64, ::Int64, ::typeof(MINPACK.lmder), ::getfield(Main, Symbol("#f!#41")){Int64}, ::getfield(Main, Symbol("#g!#42")){Int64}, ::Array{Float64,1}, ::Int64, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:484
└ @ MINPACK wrappers.jl:484
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #lmder#6(::Int64, ::Float64, ::Float64, ::Float64, ::Float64, ::Int64, ::Int64, ::Int64, ::Float64, ::Int64, ::typeof(MINPACK.lmder), ::getfield(Main, Symbol("#f!#41")){Int64}, ::getfield(Main, Symbol("#g!#42")){Int64}, ::Array{Float64,1}, ::Int64, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:486
└ @ MINPACK wrappers.jl:486
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #lmder#6(::Int64, ::Float64, ::Float64, ::Float64, ::Float64, ::Int64, ::Int64, ::Int64, ::Float64, ::Int64, ::typeof(MINPACK.lmder), ::getfield(Main, Symbol("#f!#41")){Int64}, ::getfield(Main, Symbol("#g!#42")){Int64}, ::Array{Float64,1}, ::Int64, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:487
└ @ MINPACK wrappers.jl:487
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = Type at MINPACK.jl:43 [inlined]
└ @ Core MINPACK.jl:43
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #lmder#6(::Int64, ::Float64, ::Float64, ::Float64, ::Float64, ::Int64, ::Int64, ::Int64, ::Float64, ::Int64, ::typeof(MINPACK.lmder), ::getfield(Main, Symbol("#f!#41")){Int64}, ::getfield(Main, Symbol("#g!#42")){Int64}, ::Array{Float64,1}, ::Int64, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:492
└ @ MINPACK wrappers.jl:492
┌ Warning: `Array{T}(m::Int, n::Int) where T` is deprecated, use `Array{T}(undef, m, n)` instead.
│   caller = #lmder#6(::Int64, ::Float64, ::Float64, ::Float64, ::Float64, ::Int64, ::Int64, ::Int64, ::Float64, ::Int64, ::typeof(MINPACK.lmder), ::getfield(Main, Symbol("#f!#41")){Int64}, ::getfield(Main, Symbol("#g!#42")){Int64}, ::Array{Float64,1}, ::Int64, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:495
└ @ MINPACK wrappers.jl:495
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #lmder#6(::Int64, ::Float64, ::Float64, ::Float64, ::Float64, ::Int64, ::Int64, ::Int64, ::Float64, ::Int64, ::typeof(MINPACK.lmder), ::getfield(Main, Symbol("#f!#41")){Int64}, ::getfield(Main, Symbol("#g!#42")){Int64}, ::Array{Float64,1}, ::Int64, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:496
└ @ MINPACK wrappers.jl:496
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #lmder#6(::Int64, ::Float64, ::Float64, ::Float64, ::Float64, ::Int64, ::Int64, ::Int64, ::Float64, ::Int64, ::typeof(MINPACK.lmder), ::getfield(Main, Symbol("#f!#41")){Int64}, ::getfield(Main, Symbol("#g!#42")){Int64}, ::Array{Float64,1}, ::Int64, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:497
└ @ MINPACK wrappers.jl:497
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #lmder#6(::Int64, ::Float64, ::Float64, ::Float64, ::Float64, ::Int64, ::Int64, ::Int64, ::Float64, ::Int64, ::typeof(MINPACK.lmder), ::getfield(Main, Symbol("#f!#41")){Int64}, ::getfield(Main, Symbol("#g!#42")){Int64}, ::Array{Float64,1}, ::Int64, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:498
└ @ MINPACK wrappers.jl:498
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #lmder#6(::Int64, ::Float64, ::Float64, ::Float64, ::Float64, ::Int64, ::Int64, ::Int64, ::Float64, ::Int64, ::typeof(MINPACK.lmder), ::getfield(Main, Symbol("#f!#41")){Int64}, ::getfield(Main, Symbol("#g!#42")){Int64}, ::Array{Float64,1}, ::Int64, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:499
└ @ MINPACK wrappers.jl:499
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #lmder#6(::Int64, ::Float64, ::Float64, ::Float64, ::Float64, ::Int64, ::Int64, ::Int64, ::Float64, ::Int64, ::typeof(MINPACK.lmder), ::getfield(Main, Symbol("#f!#41")){Int64}, ::getfield(Main, Symbol("#g!#42")){Int64}, ::Array{Float64,1}, ::Int64, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:500
└ @ MINPACK wrappers.jl:500
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #lmder#6(::Int64, ::Float64, ::Float64, ::Float64, ::Float64, ::Int64, ::Int64, ::Int64, ::Float64, ::Int64, ::typeof(MINPACK.lmder), ::getfield(Main, Symbol("#f!#41")){Int64}, ::getfield(Main, Symbol("#g!#42")){Int64}, ::Array{Float64,1}, ::Int64, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:501
└ @ MINPACK wrappers.jl:501
Trigonometric-lm                                   10      28      16     4.295512e-03   6.554233e-01
Trigonometric-lm-no_g                              10      29      16     4.295461e-03   7.685881e-03
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.norm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.norm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.norm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.norm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.norm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.norm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.norm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.norm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.norm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
┌ Warning: `Array{T}(m::Int, n::Int) where T` is deprecated, use `Array{T}(undef, m, n)` instead.
│   caller = #hybrj#4(::Int64, ::Int64, ::Int64, ::Int64, ::Float64, ::Array{Float64,1}, ::Int64, ::Float64, ::Int64, ::Int32, ::typeof(MINPACK.hybrj), ::getfield(Main, Symbol("#f!#44")){Int64}, ::getfield(Main, Symbol("#g!#45")){Int64}, ::Array{Float64,1}, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:138
└ @ MINPACK wrappers.jl:138
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = Type at MINPACK.jl:43 [inlined]
└ @ Core MINPACK.jl:43
┌ Warning: `Array{T}(m::Integer) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #hybrj#4(::Int64, ::Int64, ::Int64, ::Int64, ::Float64, ::Array{Float64,1}, ::Int64, ::Float64, ::Int64, ::Int32, ::typeof(MINPACK.hybrj), ::getfield(Main, Symbol("#f!#44")){Int64}, ::getfield(Main, Symbol("#g!#45")){Int64}, ::Array{Float64,1}, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:145
└ @ MINPACK wrappers.jl:145
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #hybrj#4(::Int64, ::Int64, ::Int64, ::Int64, ::Float64, ::Array{Float64,1}, ::Int64, ::Float64, ::Int64, ::Int32, ::typeof(MINPACK.hybrj), ::getfield(Main, Symbol("#f!#44")){Int64}, ::getfield(Main, Symbol("#g!#45")){Int64}, ::Array{Float64,1}, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:146
└ @ MINPACK wrappers.jl:146
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #hybrj#4(::Int64, ::Int64, ::Int64, ::Int64, ::Float64, ::Array{Float64,1}, ::Int64, ::Float64, ::Int64, ::Int32, ::typeof(MINPACK.hybrj), ::getfield(Main, Symbol("#f!#44")){Int64}, ::getfield(Main, Symbol("#g!#45")){Int64}, ::Array{Float64,1}, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:147
└ @ MINPACK wrappers.jl:147
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #hybrj#4(::Int64, ::Int64, ::Int64, ::Int64, ::Float64, ::Array{Float64,1}, ::Int64, ::Float64, ::Int64, ::Int32, ::typeof(MINPACK.hybrj), ::getfield(Main, Symbol("#f!#44")){Int64}, ::getfield(Main, Symbol("#g!#45")){Int64}, ::Array{Float64,1}, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:148
└ @ MINPACK wrappers.jl:148
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #hybrj#4(::Int64, ::Int64, ::Int64, ::Int64, ::Float64, ::Array{Float64,1}, ::Int64, ::Float64, ::Int64, ::Int32, ::typeof(MINPACK.hybrj), ::getfield(Main, Symbol("#f!#44")){Int64}, ::getfield(Main, Symbol("#g!#45")){Int64}, ::Array{Float64,1}, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:149
└ @ MINPACK wrappers.jl:149
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #hybrj#4(::Int64, ::Int64, ::Int64, ::Int64, ::Float64, ::Array{Float64,1}, ::Int64, ::Float64, ::Int64, ::Int32, ::typeof(MINPACK.hybrj), ::getfield(Main, Symbol("#f!#44")){Int64}, ::getfield(Main, Symbol("#g!#45")){Int64}, ::Array{Float64,1}, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:150
└ @ MINPACK wrappers.jl:150
Variably dimensioned-hybr                          10      22       1     0.000000e+00   3.016005e-01
Variably dimensioned-hybr-no_g                     10      22       1     2.282952e-12   6.154929e-03
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.norm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.norm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.norm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #lmder#6(::Int64, ::Float64, ::Float64, ::Float64, ::Float64, ::Int64, ::Int64, ::Int64, ::Float64, ::Int64, ::typeof(MINPACK.lmder), ::getfield(Main, Symbol("#f!#44")){Int64}, ::getfield(Main, Symbol("#g!#45")){Int64}, ::Array{Float64,1}, ::Int64, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:484
└ @ MINPACK wrappers.jl:484
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #lmder#6(::Int64, ::Float64, ::Float64, ::Float64, ::Float64, ::Int64, ::Int64, ::Int64, ::Float64, ::Int64, ::typeof(MINPACK.lmder), ::getfield(Main, Symbol("#f!#44")){Int64}, ::getfield(Main, Symbol("#g!#45")){Int64}, ::Array{Float64,1}, ::Int64, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:486
└ @ MINPACK wrappers.jl:486
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #lmder#6(::Int64, ::Float64, ::Float64, ::Float64, ::Float64, ::Int64, ::Int64, ::Int64, ::Float64, ::Int64, ::typeof(MINPACK.lmder), ::getfield(Main, Symbol("#f!#44")){Int64}, ::getfield(Main, Symbol("#g!#45")){Int64}, ::Array{Float64,1}, ::Int64, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:487
└ @ MINPACK wrappers.jl:487
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = Type at MINPACK.jl:43 [inlined]
└ @ Core MINPACK.jl:43
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #lmder#6(::Int64, ::Float64, ::Float64, ::Float64, ::Float64, ::Int64, ::Int64, ::Int64, ::Float64, ::Int64, ::typeof(MINPACK.lmder), ::getfield(Main, Symbol("#f!#44")){Int64}, ::getfield(Main, Symbol("#g!#45")){Int64}, ::Array{Float64,1}, ::Int64, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:492
└ @ MINPACK wrappers.jl:492
┌ Warning: `Array{T}(m::Int, n::Int) where T` is deprecated, use `Array{T}(undef, m, n)` instead.
│   caller = #lmder#6(::Int64, ::Float64, ::Float64, ::Float64, ::Float64, ::Int64, ::Int64, ::Int64, ::Float64, ::Int64, ::typeof(MINPACK.lmder), ::getfield(Main, Symbol("#f!#44")){Int64}, ::getfield(Main, Symbol("#g!#45")){Int64}, ::Array{Float64,1}, ::Int64, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:495
└ @ MINPACK wrappers.jl:495
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #lmder#6(::Int64, ::Float64, ::Float64, ::Float64, ::Float64, ::Int64, ::Int64, ::Int64, ::Float64, ::Int64, ::typeof(MINPACK.lmder), ::getfield(Main, Symbol("#f!#44")){Int64}, ::getfield(Main, Symbol("#g!#45")){Int64}, ::Array{Float64,1}, ::Int64, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:496
└ @ MINPACK wrappers.jl:496
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #lmder#6(::Int64, ::Float64, ::Float64, ::Float64, ::Float64, ::Int64, ::Int64, ::Int64, ::Float64, ::Int64, ::typeof(MINPACK.lmder), ::getfield(Main, Symbol("#f!#44")){Int64}, ::getfield(Main, Symbol("#g!#45")){Int64}, ::Array{Float64,1}, ::Int64, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:497
└ @ MINPACK wrappers.jl:497
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #lmder#6(::Int64, ::Float64, ::Float64, ::Float64, ::Float64, ::Int64, ::Int64, ::Int64, ::Float64, ::Int64, ::typeof(MINPACK.lmder), ::getfield(Main, Symbol("#f!#44")){Int64}, ::getfield(Main, Symbol("#g!#45")){Int64}, ::Array{Float64,1}, ::Int64, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:498
└ @ MINPACK wrappers.jl:498
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #lmder#6(::Int64, ::Float64, ::Float64, ::Float64, ::Float64, ::Int64, ::Int64, ::Int64, ::Float64, ::Int64, ::typeof(MINPACK.lmder), ::getfield(Main, Symbol("#f!#44")){Int64}, ::getfield(Main, Symbol("#g!#45")){Int64}, ::Array{Float64,1}, ::Int64, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:499
└ @ MINPACK wrappers.jl:499
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #lmder#6(::Int64, ::Float64, ::Float64, ::Float64, ::Float64, ::Int64, ::Int64, ::Int64, ::Float64, ::Int64, ::typeof(MINPACK.lmder), ::getfield(Main, Symbol("#f!#44")){Int64}, ::getfield(Main, Symbol("#g!#45")){Int64}, ::Array{Float64,1}, ::Int64, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:500
└ @ MINPACK wrappers.jl:500
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #lmder#6(::Int64, ::Float64, ::Float64, ::Float64, ::Float64, ::Int64, ::Int64, ::Int64, ::Float64, ::Int64, ::typeof(MINPACK.lmder), ::getfield(Main, Symbol("#f!#44")){Int64}, ::getfield(Main, Symbol("#g!#45")){Int64}, ::Array{Float64,1}, ::Int64, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:501
└ @ MINPACK wrappers.jl:501
Variably dimensioned-lm                            10      16      15     0.000000e+00   1.048168e-01
Variably dimensioned-lm-no_g                       10      16      15     0.000000e+00   5.127215e-03
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.norm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.norm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.norm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.norm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.norm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.norm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.norm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.norm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.norm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
┌ Warning: `Array{T}(m::Int, n::Int) where T` is deprecated, use `Array{T}(undef, m, n)` instead.
│   caller = #hybrj#4(::Int64, ::Int64, ::Int64, ::Int64, ::Float64, ::Array{Float64,1}, ::Int64, ::Float64, ::Int64, ::Int32, ::typeof(MINPACK.hybrj), ::getfield(Main, Symbol("#f!#48")){Int64}, ::getfield(Main, Symbol("#g!#49")){Int64}, ::Array{Float64,1}, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:138
└ @ MINPACK wrappers.jl:138
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = Type at MINPACK.jl:43 [inlined]
└ @ Core MINPACK.jl:43
┌ Warning: `Array{T}(m::Integer) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #hybrj#4(::Int64, ::Int64, ::Int64, ::Int64, ::Float64, ::Array{Float64,1}, ::Int64, ::Float64, ::Int64, ::Int32, ::typeof(MINPACK.hybrj), ::getfield(Main, Symbol("#f!#48")){Int64}, ::getfield(Main, Symbol("#g!#49")){Int64}, ::Array{Float64,1}, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:145
└ @ MINPACK wrappers.jl:145
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #hybrj#4(::Int64, ::Int64, ::Int64, ::Int64, ::Float64, ::Array{Float64,1}, ::Int64, ::Float64, ::Int64, ::Int32, ::typeof(MINPACK.hybrj), ::getfield(Main, Symbol("#f!#48")){Int64}, ::getfield(Main, Symbol("#g!#49")){Int64}, ::Array{Float64,1}, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:146
└ @ MINPACK wrappers.jl:146
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #hybrj#4(::Int64, ::Int64, ::Int64, ::Int64, ::Float64, ::Array{Float64,1}, ::Int64, ::Float64, ::Int64, ::Int32, ::typeof(MINPACK.hybrj), ::getfield(Main, Symbol("#f!#48")){Int64}, ::getfield(Main, Symbol("#g!#49")){Int64}, ::Array{Float64,1}, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:147
└ @ MINPACK wrappers.jl:147
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #hybrj#4(::Int64, ::Int64, ::Int64, ::Int64, ::Float64, ::Array{Float64,1}, ::Int64, ::Float64, ::Int64, ::Int32, ::typeof(MINPACK.hybrj), ::getfield(Main, Symbol("#f!#48")){Int64}, ::getfield(Main, Symbol("#g!#49")){Int64}, ::Array{Float64,1}, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:148
└ @ MINPACK wrappers.jl:148
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #hybrj#4(::Int64, ::Int64, ::Int64, ::Int64, ::Float64, ::Array{Float64,1}, ::Int64, ::Float64, ::Int64, ::Int32, ::typeof(MINPACK.hybrj), ::getfield(Main, Symbol("#f!#48")){Int64}, ::getfield(Main, Symbol("#g!#49")){Int64}, ::Array{Float64,1}, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:149
└ @ MINPACK wrappers.jl:149
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #hybrj#4(::Int64, ::Int64, ::Int64, ::Int64, ::Float64, ::Array{Float64,1}, ::Int64, ::Float64, ::Int64, ::Int32, ::typeof(MINPACK.hybrj), ::getfield(Main, Symbol("#f!#48")){Int64}, ::getfield(Main, Symbol("#g!#49")){Int64}, ::Array{Float64,1}, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:150
└ @ MINPACK wrappers.jl:150
Broyden tridiagonal-hybr                           10      12       1     2.377046e-10   1.852490e-01
Broyden tridiagonal-hybr-no_g                      10      12       1     2.377046e-10   2.624734e-03
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.norm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.norm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.norm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #lmder#6(::Int64, ::Float64, ::Float64, ::Float64, ::Float64, ::Int64, ::Int64, ::Int64, ::Float64, ::Int64, ::typeof(MINPACK.lmder), ::getfield(Main, Symbol("#f!#48")){Int64}, ::getfield(Main, Symbol("#g!#49")){Int64}, ::Array{Float64,1}, ::Int64, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:484
└ @ MINPACK wrappers.jl:484
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #lmder#6(::Int64, ::Float64, ::Float64, ::Float64, ::Float64, ::Int64, ::Int64, ::Int64, ::Float64, ::Int64, ::typeof(MINPACK.lmder), ::getfield(Main, Symbol("#f!#48")){Int64}, ::getfield(Main, Symbol("#g!#49")){Int64}, ::Array{Float64,1}, ::Int64, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:486
└ @ MINPACK wrappers.jl:486
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #lmder#6(::Int64, ::Float64, ::Float64, ::Float64, ::Float64, ::Int64, ::Int64, ::Int64, ::Float64, ::Int64, ::typeof(MINPACK.lmder), ::getfield(Main, Symbol("#f!#48")){Int64}, ::getfield(Main, Symbol("#g!#49")){Int64}, ::Array{Float64,1}, ::Int64, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:487
└ @ MINPACK wrappers.jl:487
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = Type at MINPACK.jl:43 [inlined]
└ @ Core MINPACK.jl:43
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #lmder#6(::Int64, ::Float64, ::Float64, ::Float64, ::Float64, ::Int64, ::Int64, ::Int64, ::Float64, ::Int64, ::typeof(MINPACK.lmder), ::getfield(Main, Symbol("#f!#48")){Int64}, ::getfield(Main, Symbol("#g!#49")){Int64}, ::Array{Float64,1}, ::Int64, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:492
└ @ MINPACK wrappers.jl:492
┌ Warning: `Array{T}(m::Int, n::Int) where T` is deprecated, use `Array{T}(undef, m, n)` instead.
│   caller = #lmder#6(::Int64, ::Float64, ::Float64, ::Float64, ::Float64, ::Int64, ::Int64, ::Int64, ::Float64, ::Int64, ::typeof(MINPACK.lmder), ::getfield(Main, Symbol("#f!#48")){Int64}, ::getfield(Main, Symbol("#g!#49")){Int64}, ::Array{Float64,1}, ::Int64, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:495
└ @ MINPACK wrappers.jl:495
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #lmder#6(::Int64, ::Float64, ::Float64, ::Float64, ::Float64, ::Int64, ::Int64, ::Int64, ::Float64, ::Int64, ::typeof(MINPACK.lmder), ::getfield(Main, Symbol("#f!#48")){Int64}, ::getfield(Main, Symbol("#g!#49")){Int64}, ::Array{Float64,1}, ::Int64, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:496
└ @ MINPACK wrappers.jl:496
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #lmder#6(::Int64, ::Float64, ::Float64, ::Float64, ::Float64, ::Int64, ::Int64, ::Int64, ::Float64, ::Int64, ::typeof(MINPACK.lmder), ::getfield(Main, Symbol("#f!#48")){Int64}, ::getfield(Main, Symbol("#g!#49")){Int64}, ::Array{Float64,1}, ::Int64, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:497
└ @ MINPACK wrappers.jl:497
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #lmder#6(::Int64, ::Float64, ::Float64, ::Float64, ::Float64, ::Int64, ::Int64, ::Int64, ::Float64, ::Int64, ::typeof(MINPACK.lmder), ::getfield(Main, Symbol("#f!#48")){Int64}, ::getfield(Main, Symbol("#g!#49")){Int64}, ::Array{Float64,1}, ::Int64, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:498
└ @ MINPACK wrappers.jl:498
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #lmder#6(::Int64, ::Float64, ::Float64, ::Float64, ::Float64, ::Int64, ::Int64, ::Int64, ::Float64, ::Int64, ::typeof(MINPACK.lmder), ::getfield(Main, Symbol("#f!#48")){Int64}, ::getfield(Main, Symbol("#g!#49")){Int64}, ::Array{Float64,1}, ::Int64, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:499
└ @ MINPACK wrappers.jl:499
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #lmder#6(::Int64, ::Float64, ::Float64, ::Float64, ::Float64, ::Int64, ::Int64, ::Int64, ::Float64, ::Int64, ::typeof(MINPACK.lmder), ::getfield(Main, Symbol("#f!#48")){Int64}, ::getfield(Main, Symbol("#g!#49")){Int64}, ::Array{Float64,1}, ::Int64, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:500
└ @ MINPACK wrappers.jl:500
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #lmder#6(::Int64, ::Float64, ::Float64, ::Float64, ::Float64, ::Int64, ::Int64, ::Int64, ::Float64, ::Int64, ::typeof(MINPACK.lmder), ::getfield(Main, Symbol("#f!#48")){Int64}, ::getfield(Main, Symbol("#g!#49")){Int64}, ::Array{Float64,1}, ::Int64, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:501
└ @ MINPACK wrappers.jl:501
Broyden tridiagonal-lm                             10       6       5     4.440892e-16   7.316870e-02
Broyden tridiagonal-lm-no_g                        10       6       5     6.661338e-16   3.617529e-03
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.norm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.norm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.norm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.norm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.norm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.norm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.norm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.norm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.norm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
┌ Warning: `Array{T}(m::Int, n::Int) where T` is deprecated, use `Array{T}(undef, m, n)` instead.
│   caller = #hybrj#4(::Int64, ::Int64, ::Int64, ::Int64, ::Float64, ::Array{Float64,1}, ::Int64, ::Float64, ::Int64, ::Int32, ::typeof(MINPACK.hybrj), ::getfield(Main, Symbol("#f!#51")){Int64,Int64,Int64}, ::getfield(Main, Symbol("#g!#52")){Int64,Int64,Int64}, ::Array{Float64,1}, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:138
└ @ MINPACK wrappers.jl:138
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = Type at MINPACK.jl:43 [inlined]
└ @ Core MINPACK.jl:43
┌ Warning: `Array{T}(m::Integer) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #hybrj#4(::Int64, ::Int64, ::Int64, ::Int64, ::Float64, ::Array{Float64,1}, ::Int64, ::Float64, ::Int64, ::Int32, ::typeof(MINPACK.hybrj), ::getfield(Main, Symbol("#f!#51")){Int64,Int64,Int64}, ::getfield(Main, Symbol("#g!#52")){Int64,Int64,Int64}, ::Array{Float64,1}, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:145
└ @ MINPACK wrappers.jl:145
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #hybrj#4(::Int64, ::Int64, ::Int64, ::Int64, ::Float64, ::Array{Float64,1}, ::Int64, ::Float64, ::Int64, ::Int32, ::typeof(MINPACK.hybrj), ::getfield(Main, Symbol("#f!#51")){Int64,Int64,Int64}, ::getfield(Main, Symbol("#g!#52")){Int64,Int64,Int64}, ::Array{Float64,1}, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:146
└ @ MINPACK wrappers.jl:146
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #hybrj#4(::Int64, ::Int64, ::Int64, ::Int64, ::Float64, ::Array{Float64,1}, ::Int64, ::Float64, ::Int64, ::Int32, ::typeof(MINPACK.hybrj), ::getfield(Main, Symbol("#f!#51")){Int64,Int64,Int64}, ::getfield(Main, Symbol("#g!#52")){Int64,Int64,Int64}, ::Array{Float64,1}, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:147
└ @ MINPACK wrappers.jl:147
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #hybrj#4(::Int64, ::Int64, ::Int64, ::Int64, ::Float64, ::Array{Float64,1}, ::Int64, ::Float64, ::Int64, ::Int32, ::typeof(MINPACK.hybrj), ::getfield(Main, Symbol("#f!#51")){Int64,Int64,Int64}, ::getfield(Main, Symbol("#g!#52")){Int64,Int64,Int64}, ::Array{Float64,1}, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:148
└ @ MINPACK wrappers.jl:148
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #hybrj#4(::Int64, ::Int64, ::Int64, ::Int64, ::Float64, ::Array{Float64,1}, ::Int64, ::Float64, ::Int64, ::Int32, ::typeof(MINPACK.hybrj), ::getfield(Main, Symbol("#f!#51")){Int64,Int64,Int64}, ::getfield(Main, Symbol("#g!#52")){Int64,Int64,Int64}, ::Array{Float64,1}, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:149
└ @ MINPACK wrappers.jl:149
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #hybrj#4(::Int64, ::Int64, ::Int64, ::Int64, ::Float64, ::Array{Float64,1}, ::Int64, ::Float64, ::Int64, ::Int32, ::typeof(MINPACK.hybrj), ::getfield(Main, Symbol("#f!#51")){Int64,Int64,Int64}, ::getfield(Main, Symbol("#g!#52")){Int64,Int64,Int64}, ::Array{Float64,1}, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:150
└ @ MINPACK wrappers.jl:150
Broyden banded-hybr                                10      20       1     1.406736e-09   1.954430e-01
Broyden banded-hybr-no_g                           10      20       1     1.406737e-09   4.223688e-03
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.norm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.norm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
WARNING: Base.norm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/MINPACK/test/runtests.jl:40
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #lmder#6(::Int64, ::Float64, ::Float64, ::Float64, ::Float64, ::Int64, ::Int64, ::Int64, ::Float64, ::Int64, ::typeof(MINPACK.lmder), ::getfield(Main, Symbol("#f!#51")){Int64,Int64,Int64}, ::getfield(Main, Symbol("#g!#52")){Int64,Int64,Int64}, ::Array{Float64,1}, ::Int64, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:484
└ @ MINPACK wrappers.jl:484
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #lmder#6(::Int64, ::Float64, ::Float64, ::Float64, ::Float64, ::Int64, ::Int64, ::Int64, ::Float64, ::Int64, ::typeof(MINPACK.lmder), ::getfield(Main, Symbol("#f!#51")){Int64,Int64,Int64}, ::getfield(Main, Symbol("#g!#52")){Int64,Int64,Int64}, ::Array{Float64,1}, ::Int64, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:486
└ @ MINPACK wrappers.jl:486
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #lmder#6(::Int64, ::Float64, ::Float64, ::Float64, ::Float64, ::Int64, ::Int64, ::Int64, ::Float64, ::Int64, ::typeof(MINPACK.lmder), ::getfield(Main, Symbol("#f!#51")){Int64,Int64,Int64}, ::getfield(Main, Symbol("#g!#52")){Int64,Int64,Int64}, ::Array{Float64,1}, ::Int64, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:487
└ @ MINPACK wrappers.jl:487
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = Type at MINPACK.jl:43 [inlined]
└ @ Core MINPACK.jl:43
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #lmder#6(::Int64, ::Float64, ::Float64, ::Float64, ::Float64, ::Int64, ::Int64, ::Int64, ::Float64, ::Int64, ::typeof(MINPACK.lmder), ::getfield(Main, Symbol("#f!#51")){Int64,Int64,Int64}, ::getfield(Main, Symbol("#g!#52")){Int64,Int64,Int64}, ::Array{Float64,1}, ::Int64, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:492
└ @ MINPACK wrappers.jl:492
┌ Warning: `Array{T}(m::Int, n::Int) where T` is deprecated, use `Array{T}(undef, m, n)` instead.
│   caller = #lmder#6(::Int64, ::Float64, ::Float64, ::Float64, ::Float64, ::Int64, ::Int64, ::Int64, ::Float64, ::Int64, ::typeof(MINPACK.lmder), ::getfield(Main, Symbol("#f!#51")){Int64,Int64,Int64}, ::getfield(Main, Symbol("#g!#52")){Int64,Int64,Int64}, ::Array{Float64,1}, ::Int64, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:495
└ @ MINPACK wrappers.jl:495
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #lmder#6(::Int64, ::Float64, ::Float64, ::Float64, ::Float64, ::Int64, ::Int64, ::Int64, ::Float64, ::Int64, ::typeof(MINPACK.lmder), ::getfield(Main, Symbol("#f!#51")){Int64,Int64,Int64}, ::getfield(Main, Symbol("#g!#52")){Int64,Int64,Int64}, ::Array{Float64,1}, ::Int64, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:496
└ @ MINPACK wrappers.jl:496
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #lmder#6(::Int64, ::Float64, ::Float64, ::Float64, ::Float64, ::Int64, ::Int64, ::Int64, ::Float64, ::Int64, ::typeof(MINPACK.lmder), ::getfield(Main, Symbol("#f!#51")){Int64,Int64,Int64}, ::getfield(Main, Symbol("#g!#52")){Int64,Int64,Int64}, ::Array{Float64,1}, ::Int64, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:497
└ @ MINPACK wrappers.jl:497
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #lmder#6(::Int64, ::Float64, ::Float64, ::Float64, ::Float64, ::Int64, ::Int64, ::Int64, ::Float64, ::Int64, ::typeof(MINPACK.lmder), ::getfield(Main, Symbol("#f!#51")){Int64,Int64,Int64}, ::getfield(Main, Symbol("#g!#52")){Int64,Int64,Int64}, ::Array{Float64,1}, ::Int64, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:498
└ @ MINPACK wrappers.jl:498
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #lmder#6(::Int64, ::Float64, ::Float64, ::Float64, ::Float64, ::Int64, ::Int64, ::Int64, ::Float64, ::Int64, ::typeof(MINPACK.lmder), ::getfield(Main, Symbol("#f!#51")){Int64,Int64,Int64}, ::getfield(Main, Symbol("#g!#52")){Int64,Int64,Int64}, ::Array{Float64,1}, ::Int64, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:499
└ @ MINPACK wrappers.jl:499
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #lmder#6(::Int64, ::Float64, ::Float64, ::Float64, ::Float64, ::Int64, ::Int64, ::Int64, ::Float64, ::Int64, ::typeof(MINPACK.lmder), ::getfield(Main, Symbol("#f!#51")){Int64,Int64,Int64}, ::getfield(Main, Symbol("#g!#52")){Int64,Int64,Int64}, ::Array{Float64,1}, ::Int64, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:500
└ @ MINPACK wrappers.jl:500
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = #lmder#6(::Int64, ::Float64, ::Float64, ::Float64, ::Float64, ::Int64, ::Int64, ::Int64, ::Float64, ::Int64, ::typeof(MINPACK.lmder), ::getfield(Main, Symbol("#f!#51")){Int64,Int64,Int64}, ::getfield(Main, Symbol("#g!#52")){Int64,Int64,Int64}, ::Array{Float64,1}, ::Int64, ::Float64, ::Bool, ::Bool, ::Int64) at wrappers.jl:501
└ @ MINPACK wrappers.jl:501
Broyden banded-lm                                  10       7       6     4.440892e-16   1.051831e-01
Broyden banded-lm-no_g                             10       7       6     6.661338e-16   3.304345e-03
Test Summary: | Pass  Total
minpack       |   81     81
[ Info: MINPACK tests passed

>>> End of log
