>>> 'Pkg.add("OnlineStats")' log
INFO: Installing DataStructures v0.7.4
INFO: Installing LearnBase v0.1.6
INFO: Installing LossFunctions v0.2.0
INFO: Installing NamedTuples v4.0.0
INFO: Installing OnlineStats v0.14.1
INFO: Installing OnlineStatsBase v0.4.0
INFO: Installing PenaltyFunctions v0.0.2
INFO: Installing RecipesBase v0.2.3
INFO: Installing SortingAlgorithms v0.2.0
INFO: Installing SpecialFunctions v0.3.7
INFO: Installing StatsBase v0.19.5
INFO: Installing SweepOperator v0.1.0
INFO: Building SpecialFunctions
INFO: Package database updated
INFO: METADATA is out-of-date — you may not have the latest version of OnlineStats
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("OnlineStats")' log
Julia Version 0.6.2
Commit d386e40c17 (2017-12-13 18:08 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-135-generic #184-Ubuntu SMP Wed Oct 18 11:55:51 UTC 2017 x86_64 x86_64
Memory: 2.93927001953125 GB (563.74609375 MB free)
Uptime: 73302.0 sec
Load Avg:  1.0234375  1.001953125  0.97607421875
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz    4804456 s       5378 s     227605 s    1045857 s         10 s
#2  3500 MHz     941300 s       1653 s      93075 s    6179258 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.6
2 required packages:
 - JSON                          0.16.3
 - OnlineStats                   0.14.1
28 additional packages:
 - BinDeps                       0.8.2
 - Cairo                         0.4.0
 - ColorTypes                    0.6.6
 - Colors                        0.8.2
 - Compat                        0.44.0
 - DataStructures                0.7.4
 - FixedPointNumbers             0.4.3
 - Graphics                      0.2.0
 - Gtk                           0.13.1
 - LearnBase                     0.1.6
 - LossFunctions                 0.2.0
 - NaNMath                       0.3.0
 - NamedTuples                   4.0.0
 - NodeJS                        0.2.0
 - Nullables                     0.0.2
 - OnlineStatsBase               0.4.0
 - PenaltyFunctions              0.0.2
 - RecipesBase                   0.2.3
 - Reexport                      0.1.0
 - Requires                      0.4.3
 - Rsvg                          0.1.0
 - SHA                           0.5.2
 - SortingAlgorithms             0.2.0
 - SpecialFunctions              0.3.7
 - StatsBase                     0.19.5
 - SweepOperator                 0.1.0
 - URIParser                     0.3.0
 - VegaLite                      0.1.0              ecb31725 (dirty)
INFO: Testing OnlineStats
INFO: Show
Mean(0.0)
MV{Mean}(0.0, 0.0)
Variance(0.0)
MV{Variance}(0.0, 0.0)
CStat: re = Mean(0.0), im = Mean(0.0)
MV{CStat{Mean}}((0.0, 0.0), (0.0, 0.0))
CovMatrix([0.0 0.0 0.0 0.0 0.0; 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 0.0 0.0 0.0])
Diff{Float64}(0.0)
MV{Diff{Float64}}(0.0, 0.0)
Extrema((Inf, -Inf))
MV{Extrema}((Inf, -Inf), (Inf, -Inf))
HyperLogLog(16 registers, estimate = 0.0)
MV{HyperLogLog}(0.0, 0.0)
Moments([0.0, 0.0, 0.0, 0.0])
MV{Moments}([0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0])
OrderStats([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0])
MV{OrderStats}([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0])
Quantile{OMAS}([0.0, 0.0, 0.0])
MV{Quantile{OMAS{Tuple{Array{Float64,1},Array{Float64,1}}}}}([0.0, 0.0, 0.0], [0.0, 0.0, 0.0])
PQuantile(0.5, 0.0)
MV{PQuantile}(0.0, 0.0)
ReservoirSample{Float64}([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0])
MV{ReservoirSample{Float64}}([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0])
Sum{Float64}(0.0)
MV{Sum{Float64}}(0.0, 0.0)
StatLearn{SGD,LPDistLoss{2},L2Penalty}
    > β       : [0.0, 0.0, 0.0, 0.0, 0.0]
    > λfactor : [0.1, 0.1, 0.1, 0.1, 0.1]
    > Loss    : L2DistLoss
    > Penalty : L2Penalty
    > Updater : SGD
Hist: AdaptiveBins(5)
MV{Hist{AdaptiveBins}}(([Inf, Inf, Inf, Inf, Inf], [0, 0, 0, 0, 0]), ([Inf, Inf, Inf, Inf, Inf], [0, 0, 0, 0, 0]))
Hist: KnownBins(edges = 1:5)
MV{Hist{KnownBins{UnitRange{Int64}}}}((1.5:1.0:4.5, [0, 0, 0, 0]), (1.5:1.0:4.5, [0, 0, 0, 0]))
LinRegBuilder of 5 variables
LinReg: β(0.0) = [0.0 0.0 0.0 0.0 0.0]
CallFun: Mean(0.0) |> info
MV{CallFun{Mean,#info}}(0.0, 0.0)
Bootstrap(100): Mean(0.0)
MV{Bootstrap{Mean,Array{Int64,1}}}([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0])
Group : ("Mean", "Variance")
Partition{Mean}
MV{Partition{Mean}}(OnlineStats.Part{OnlineStats.Mean}[], OnlineStats.Part{OnlineStats.Mean}[])
▦ Series{0}  |  EqualWeight  |  nobs = 0
└── Mean(0.0)
▦ Series{0}  |  EqualWeight  |  nobs = 0
├── Mean(0.0)
├── Variance(0.0)
└── Moments([0.0, 0.0, 0.0, 0.0])
MV{Mean}(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ...)
this should print twice
this should print twice



Test Summary: | Pass  Total
test_merge 0  |    9      9
Test Summary: | Pass  Total
test_merge 1  |    4      4
Test Summary:    | Pass  Total
test_merge (1,0) |    1      1
Test Summary: | Pass  Total
Series        |   32     32
Test Summary: | Pass  Total
mapblocks     |    5      5
Test Summary: | Pass  Total
Group         |    2      2
Test Summary: | Pass  Total
Partition     |   26     26
Test Summary: | Pass  Total
Count         |   21     21
Test Summary: | Pass  Total
CountMap      |   11     11
NBClassifier: Test Failed
  Expression: classify(o, vcat(zeros(5), ones(5)))
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.6/OnlineStats/test/runtests.jl:328 [inlined]
 [2] macro expansion at ./test.jl:860 [inlined]
 [3] anonymous at ./<missing>:?
Test Summary: | Fail  Total
NBClassifier  |    1      1
ERROR: LoadError: Some tests did not pass: 0 passed, 1 failed, 0 errored, 0 broken.
while loading /home/vagrant/.julia/v0.6/OnlineStats/test/runtests.jl, in expression starting on line 323
=============================[ ERROR: OnlineStats ]=============================

failed process: Process(`/home/vagrant/julia/bin/julia -Cx86-64 -J/home/vagrant/julia/lib/julia/sys.so --compile=yes --depwarn=yes --check-bounds=yes --code-coverage=none --color=no --compilecache=yes /home/vagrant/.julia/v0.6/OnlineStats/test/runtests.jl`, ProcessExited(1)) [1]

================================================================================
ERROR: OnlineStats had test errors

>>> End of log
