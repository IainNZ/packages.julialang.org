>>> 'Pkg.add("BlockArrays")' log
WARNING: Base.Pkg is deprecated, run `using Pkg` instead
 in module Main
[ Info: Cloning cache of BlockArrays from https://github.com/KristofferC/BlockArrays.jl.git
[ Info: Installing BlockArrays v0.2.0
[ Info: Package database updated

>>> 'Pkg.test("BlockArrays")' log
WARNING: Base.versioninfo is deprecated: it has been moved to the standard library package `InteractiveUtils`.
Add `using InteractiveUtils` to your imports.
 in module Main
WARNING: Base.versioninfo is deprecated: it has been moved to the standard library package `InteractiveUtils`.
Add `using InteractiveUtils` to your imports.
 in module Main
Julia Version 0.7.0-DEV.3755
Commit 94ee4f5a30 (2018-02-08 21:49 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
      Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-135-generic #184-Ubuntu SMP Wed Oct 18 11:55:51 UTC 2017 x86_64 x86_64
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
              speed         user         nice          sys         idle          irq
       #1  3499 MHz    1150569 s        143 s      62001 s     303494 s          9 s
       #2  3499 MHz     236347 s         43 s      26508 s    1486098 s          0 s
       
  Memory: 2.93927001953125 GB (857.015625 MB free)
  Uptime: 17797.0 sec
  Load Avg:  1.00390625  0.9853515625  0.96337890625
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant
Packages:
  Package Directory: /home/vagrant/.julia/v0.7
  Package Status:
2 required packages:
 - BlockArrays                   0.2.0
 - JSON                          0.16.4
2 additional packages:
 - Compat                        0.53.0
 - Nullables                     0.0.3
WARNING: Base.Pkg is deprecated, run `using Pkg` instead
 in module Main
[ Info: Computing test dependencies for BlockArrays...
[ Info: Cloning cache of Documenter from https://github.com/JuliaDocs/Documenter.jl.git
[ Info: Installing DocStringExtensions v0.4.3
[ Info: Installing Documenter v0.13.1
[ Info: Testing BlockArrays
WARNING: importing deprecated binding Base.diff into BlockArrays.
WARNING: Base.diff is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/BlockArrays/test/test_blockindices.jl:16
WARNING: Base.diff is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/BlockArrays/test/test_blockindices.jl:16
WARNING: Base.diff is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/BlockArrays/test/test_blockindices.jl:16
WARNING: Base.diff is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/BlockArrays/test/test_blockindices.jl:16
WARNING: Base.diff is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/BlockArrays/test/test_blockindices.jl:16
WARNING: Base.diff is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/BlockArrays/test/test_blockindices.jl:16
Test Summary:             | Pass  Total
BlockSizes / BlockIndices |    4      4
┌ Warning: `Array{T, N}(d::NTuple{N, Int}) where {T, N}` is deprecated, use `Array{T, N}(uninitialized, d)` instead.
│   caller = Type at blockarray.jl:58 [inlined]
└ @ Core blockarray.jl:58
┌ Warning: `Array{T, N}(d::NTuple{N, Int}) where {T, N}` is deprecated, use `Array{T, N}(uninitialized, d)` instead.
│   caller = Type at blockarray.jl:58 [inlined]
└ @ Core blockarray.jl:58
Test Summary:  | Pass  Total
block indexing |   10     10
WARNING: Base.sprand is deprecated: it has been moved to the standard library package `SparseArrays`.
Add `using SparseArrays` to your imports.
  likely near /home/vagrant/.julia/v0.7/BlockArrays/test/test_blockarrays.jl:24
in top-level scope at /home/vagrant/.julia/v0.7/BlockArrays/test/test_blockarrays.jl
WARNING: Base.sprand is deprecated: it has been moved to the standard library package `SparseArrays`.
Add `using SparseArrays` to your imports.
  likely near /home/vagrant/.julia/v0.7/BlockArrays/test/test_blockarrays.jl:24
in top-level scope at /home/vagrant/.julia/v0.7/BlockArrays/test/test_blockarrays.jl
┌ Warning: `Array{T, N}(d::NTuple{N, Int}) where {T, N}` is deprecated, use `Array{T, N}(uninitialized, d)` instead.
│   caller = Type at blockarray.jl:58 [inlined]
└ @ Core blockarray.jl:58
┌ Warning: `rand(dims::Dims)` is deprecated, use `rand(Float64, dims)` instead.
│   caller = macro expansion at test_blockarrays.jl:47 [inlined]
└ @ Core test_blockarrays.jl:47
┌ Warning: `copy!(dst::AbstractArray, src::AbstractArray)` is deprecated. You can either use `copyto!(dst, src)` or `Future.copy!(dst, src)` instead.
│   caller = macro expansion at blockarray.jl:189 [inlined]
└ @ Core blockarray.jl:189
┌ Warning: `Array{T, N}(d::NTuple{N, Int}) where {T, N}` is deprecated, use `Array{T, N}(uninitialized, d)` instead.
│   caller = Type at blockarray.jl:58 [inlined]
└ @ Core blockarray.jl:58
┌ Warning: `Array{T, N}(d::NTuple{N, Int}) where {T, N}` is deprecated, use `Array{T, N}(uninitialized, d)` instead.
│   caller = Type at blockarray.jl:58 [inlined]
└ @ Core blockarray.jl:58
┌ Warning: `rand(dims::Dims)` is deprecated, use `rand(Float64, dims)` instead.
│   caller = macro expansion at test_blockarrays.jl:78 [inlined]
└ @ Core test_blockarrays.jl:78
┌ Warning: `copy!(dst::AbstractArray, src::AbstractArray)` is deprecated. You can either use `copyto!(dst, src)` or `Future.copy!(dst, src)` instead.
│   caller = macro expansion at blockarray.jl:189 [inlined]
└ @ Core blockarray.jl:189
┌ Warning: `Array{T, N}(d::NTuple{N, Int}) where {T, N}` is deprecated, use `Array{T, N}(uninitialized, d)` instead.
│   caller = Type at blockarray.jl:58 [inlined]
└ @ Core blockarray.jl:58
┌ Warning: `Array{T, N}(d::NTuple{N, Int}) where {T, N}` is deprecated, use `Array{T, N}(uninitialized, d)` instead.
│   caller = Type at blockarray.jl:58 [inlined]
└ @ Core blockarray.jl:58
┌ Warning: `rand(dims::Dims)` is deprecated, use `rand(Float64, dims)` instead.
│   caller = macro expansion at test_blockarrays.jl:108 [inlined]
└ @ Core test_blockarrays.jl:108
┌ Warning: `copy!(dst::AbstractArray, src::AbstractArray)` is deprecated. You can either use `copyto!(dst, src)` or `Future.copy!(dst, src)` instead.
│   caller = macro expansion at blockarray.jl:189 [inlined]
└ @ Core blockarray.jl:189
┌ Warning: `zeros(a::AbstractArray)` is deprecated, consider `zero(a)`, `fill(0, size(a))`, `fill!(copy(a), 0)`, or `fill!(similar(a), 0)`. Where necessary, use `fill!(similar(a), zero(eltype(a)))`.
│   caller = macro expansion at test_blockarrays.jl:37 [inlined]
└ @ Core test_blockarrays.jl:37
┌ Warning: `copy!(dst::AbstractArray, src::AbstractArray)` is deprecated. You can either use `copyto!(dst, src)` or `Future.copy!(dst, src)` instead.
│   caller = copy!(::PseudoBlockArray{Float64,1,Array{Float64,1}}, ::Array{Float64,1}) at pseudo_blockarray.jl:177
└ @ BlockArrays pseudo_blockarray.jl:177
┌ Warning: `zeros(a::AbstractArray)` is deprecated, consider `zero(a)`, `fill(0, size(a))`, `fill!(copy(a), 0)`, or `fill!(similar(a), 0)`. Where necessary, use `fill!(similar(a), zero(eltype(a)))`.
│   caller = macro expansion at test_blockarrays.jl:71 [inlined]
└ @ Core test_blockarrays.jl:71
┌ Warning: `copy!(dst::AbstractArray, src::AbstractArray)` is deprecated. You can either use `copyto!(dst, src)` or `Future.copy!(dst, src)` instead.
│   caller = copy!(::PseudoBlockArray{Float64,2,Array{Float64,2}}, ::Array{Float64,2}) at pseudo_blockarray.jl:177
└ @ BlockArrays pseudo_blockarray.jl:177
┌ Warning: `zeros(a::AbstractArray)` is deprecated, consider `zero(a)`, `fill(0, size(a))`, `fill!(copy(a), 0)`, or `fill!(similar(a), 0)`. Where necessary, use `fill!(similar(a), zero(eltype(a)))`.
│   caller = macro expansion at test_blockarrays.jl:101 [inlined]
└ @ Core test_blockarrays.jl:101
┌ Warning: `copy!(dst::AbstractArray, src::AbstractArray)` is deprecated. You can either use `copyto!(dst, src)` or `Future.copy!(dst, src)` instead.
│   caller = copy!(::PseudoBlockArray{Float64,3,Array{Float64,3}}, ::Array{Float64,3}) at pseudo_blockarray.jl:177
└ @ BlockArrays pseudo_blockarray.jl:177
Test Summary:    | Pass  Total
misc block tests |   65     65
convert: Error During Test at /home/vagrant/.julia/v0.7/BlockArrays/test/test_blockarrays.jl:118
  Test threw an exception of type MethodError
  Expression: C == A == BlockArray(A)
  MethodError: no method matching BlockArray(::PseudoBlockArray{Float64,2,Array{Float64,2}})
  Closest candidates are:
    BlockArray(::AbstractArray{T,N}, !Matched::Array{Int64,1}...) where {T, N} at /home/vagrant/.julia/v0.7/BlockArrays/src/blockarray.jl:63
    BlockArray(::AbstractArray{T,N}, !Matched::BlockSizes{N}) where {T, N} at /home/vagrant/.julia/v0.7/BlockArrays/src/blockarray.jl:72
    BlockArray(::AbstractArray{T,N}, !Matched::AbstractArray{Int64,1}...) where {T, N} at /home/vagrant/.julia/v0.7/BlockArrays/src/blockarray.jl:88
    ...
  Stacktrace:
   [1] BlockArray(::PseudoBlockArray{Float64,2,Array{Float64,2}}) at ./abstractarray.jl:21
   [2] macro expansion at /home/vagrant/.julia/v0.7/BlockArrays/test/test_blockarrays.jl:118 [inlined]
   [3] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1008 [inlined]
   [4] top-level scope at /home/vagrant/.julia/v0.7/BlockArrays/test/test_blockarrays.jl:116
┌ Warning: `Array{T, N}(d::NTuple{N, Int}) where {T, N}` is deprecated, use `Array{T, N}(uninitialized, d)` instead.
│   caller = Type at blockarray.jl:58 [inlined]
└ @ Core blockarray.jl:58
convert: Error During Test at /home/vagrant/.julia/v0.7/BlockArrays/test/test_blockarrays.jl:122
  Test threw an exception of type MethodError
  Expression: C ≈ A ≈ BlockArray(A)
  MethodError: no method matching BlockArray(::PseudoBlockArray{Float64,2,Array{Float64,2}})
  Closest candidates are:
    BlockArray(::AbstractArray{T,N}, !Matched::Array{Int64,1}...) where {T, N} at /home/vagrant/.julia/v0.7/BlockArrays/src/blockarray.jl:63
    BlockArray(::AbstractArray{T,N}, !Matched::BlockSizes{N}) where {T, N} at /home/vagrant/.julia/v0.7/BlockArrays/src/blockarray.jl:72
    BlockArray(::AbstractArray{T,N}, !Matched::AbstractArray{Int64,1}...) where {T, N} at /home/vagrant/.julia/v0.7/BlockArrays/src/blockarray.jl:88
    ...
  Stacktrace:
   [1] BlockArray(::PseudoBlockArray{Float64,2,Array{Float64,2}}) at ./abstractarray.jl:21
   [2] macro expansion at /home/vagrant/.julia/v0.7/BlockArrays/test/test_blockarrays.jl:122 [inlined]
   [3] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1008 [inlined]
   [4] top-level scope at /home/vagrant/.julia/v0.7/BlockArrays/test/test_blockarrays.jl:116
convert: Error During Test at /home/vagrant/.julia/v0.7/BlockArrays/test/test_blockarrays.jl:126
  Test threw an exception of type MethodError
  Expression: C ≈ A ≈ BlockArray(A)
  MethodError: no method matching BlockArray(::PseudoBlockArray{Float64,2,Array{Float64,2}})
  Closest candidates are:
    BlockArray(::AbstractArray{T,N}, !Matched::Array{Int64,1}...) where {T, N} at /home/vagrant/.julia/v0.7/BlockArrays/src/blockarray.jl:63
    BlockArray(::AbstractArray{T,N}, !Matched::BlockSizes{N}) where {T, N} at /home/vagrant/.julia/v0.7/BlockArrays/src/blockarray.jl:72
    BlockArray(::AbstractArray{T,N}, !Matched::AbstractArray{Int64,1}...) where {T, N} at /home/vagrant/.julia/v0.7/BlockArrays/src/blockarray.jl:88
    ...
  Stacktrace:
   [1] BlockArray(::PseudoBlockArray{Float64,2,Array{Float64,2}}) at ./abstractarray.jl:21
   [2] macro expansion at /home/vagrant/.julia/v0.7/BlockArrays/test/test_blockarrays.jl:126 [inlined]
   [3] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1008 [inlined]
   [4] top-level scope at /home/vagrant/.julia/v0.7/BlockArrays/test/test_blockarrays.jl:116
Test Summary: | Pass  Error  Total
convert       |    9      3     12
ERROR: LoadError: LoadError: Some tests did not pass: 9 passed, 0 failed, 3 errored, 0 broken.
in expression starting at /home/vagrant/.julia/v0.7/BlockArrays/test/test_blockarrays.jl:114
in expression starting at /home/vagrant/.julia/v0.7/BlockArrays/test/runtests.jl:11
┌ Error: ------------------------------------------------------------
│ # Testing failed for BlockArrays
│   exception =
│    failed process: Process(`/home/vagrant/julia/bin/julia -Cnative -J/home/vagrant/julia/lib/julia/sys.so --compile=yes --depwarn=yes --code-coverage=none --color=no --compiled-modules=yes --check-bounds=yes --warn-overwrite=yes --startup-file=yes /home/vagrant/.julia/v0.7/BlockArrays/test/runtests.jl`, ProcessExited(1)) [1]
│    Stacktrace:
│     [1] error(::String, ::Base.Process, ::String, ::Int64, ::String) at ./error.jl:42
│     [2] pipeline_error(::Base.Process) at ./process.jl:698
│     [3] run(::Cmd) at ./process.jl:660
│     [4] (::getfield(Pkg.Entry, Symbol("##89#92")){Bool,String,Array{AbstractString,1}})() at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Pkg/src/entry.jl:731
│     [5] cd(::getfield(Pkg.Entry, Symbol("##89#92")){Bool,String,Array{AbstractString,1}}, ::String) at ./file.jl:70
│     [6] #test!#88(::Bool, ::Function, ::String, ::Array{AbstractString,1}, ::Array{AbstractString,1}, ::Array{AbstractString,1}) at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Pkg/src/entry.jl:719
│     [7] (::getfield(Pkg.Entry, Symbol("#kw##test!")))(::NamedTuple{(:coverage,),Tuple{Bool}}, ::typeof(Pkg.Entry.test!), ::String, ::Array{AbstractString,1}, ::Array{AbstractString,1}, ::Array{AbstractString,1}) at ./<missing>:0
│     [8] #test#96(::Bool, ::Function, ::Array{AbstractString,1}) at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Pkg/src/entry.jl:758
│     [9] #test at ./<missing>:0 [inlined]
│     [10] #4 at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Pkg/src/dir.jl:36 [inlined]
│     [11] cd(::getfield(Pkg.Dir, Symbol("##4#7")){Base.Iterators.Pairs{Symbol,Bool,Tuple{Symbol},NamedTuple{(:coverage,),Tuple{Bool}}},typeof(Pkg.Entry.test),Tuple{Array{AbstractString,1}}}, ::String) at ./file.jl:70
│     [12] #cd#1(::Base.Iterators.Pairs{Symbol,Bool,Tuple{Symbol},NamedTuple{(:coverage,),Tuple{Bool}}}, ::Function, ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N} where N) at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Pkg/src/dir.jl:36
│     [13] (::getfield(Pkg.Dir, Symbol("#kw##cd")))(::NamedTuple{(:coverage,),Tuple{Bool}}, ::typeof(Pkg.Dir.cd), ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N} where N) at ./<missing>:0
│     [14] #test#3(::Bool, ::Function, ::String, ::Vararg{String,N} where N) at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Pkg/src/Pkg.jl:275
│     [15] test(::String, ::Vararg{String,N} where N) at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Pkg/src/Pkg.jl:275
│     [16] top-level scope
│     [17] eval at ./boot.jl:298 [inlined]
│     [18] eval(::Module, ::Expr) at ./sysimg.jl:71
│     [19] exec_options(::Base.JLOptions) at ./client.jl:309
│     [20] _start() at ./client.jl:448
└ @ Pkg.Entry entry.jl:734
[ Info: Removing DocStringExtensions v0.4.3
[ Info: Removing Documenter v0.13.1
ERROR: BlockArrays had test errors

>>> End of log
