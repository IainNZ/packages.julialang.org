>>> 'Pkg.add("BlockArrays")' log
[ Info: Cloning cache of BlockArrays from https://github.com/KristofferC/BlockArrays.jl.git @ Base.Pkg.Cache cache.jl:43
[ Info: Installing BlockArrays v0.2.0 @ Base.Pkg.Entry entry.jl:543
[ Info: Removing BinDeps v0.8.2 @ Base.Pkg.Entry entry.jl:546
[ Info: Removing Codecs v0.4.0 @ Base.Pkg.Entry entry.jl:546
[ Info: Removing Hiccup v0.1.1 @ Base.Pkg.Entry entry.jl:546
[ Info: Removing HttpCommon v0.3.0 @ Base.Pkg.Entry entry.jl:546
[ Info: Removing HttpParser v0.3.0 @ Base.Pkg.Entry entry.jl:546
[ Info: Removing HttpServer v0.2.0 @ Base.Pkg.Entry entry.jl:546
[ Info: Removing Lazy v0.12.0 @ Base.Pkg.Entry entry.jl:546
[ Info: Removing MacroTools v0.4.0 @ Base.Pkg.Entry entry.jl:546
[ Info: Removing MbedTLS v0.5.3 @ Base.Pkg.Entry entry.jl:546
[ Info: Removing Mustache v0.3.0 @ Base.Pkg.Entry entry.jl:546
[ Info: Removing Mux v0.2.3 @ Base.Pkg.Entry entry.jl:546
[ Info: Removing Reexport v0.1.0 @ Base.Pkg.Entry entry.jl:546
[ Info: Removing SHA v0.5.2 @ Base.Pkg.Entry entry.jl:546
[ Info: Removing URIParser v0.3.0 @ Base.Pkg.Entry entry.jl:546
[ Info: Removing WebSockets v0.4.0 @ Base.Pkg.Entry entry.jl:546
[ Info: Package database updated @ Base.Pkg.Entry entry.jl:32
┌ Info: METADATA is out-of-date — you may not have the latest version of BlockArrays
│ Use `Pkg.update()` to get the latest versions of your packages
└ @ Base.Pkg.Entry entry.jl:74

>>> 'Pkg.test("BlockArrays")' log
Julia Version 0.7.0-DEV.3309
Commit b96097b66f (2018-01-07 00:26 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
      Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-135-generic #184-Ubuntu SMP Wed Oct 18 11:55:51 UTC 2017 x86_64 x86_64
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
              speed         user         nice          sys         idle          irq
       #1  3500 MHz    1010359 s        101 s      59471 s     285424 s         10 s
       #2  3500 MHz     203696 s         70 s      25377 s    1340711 s          0 s
       
  Memory: 2.93927001953125 GB (688.5625 MB free)
  Uptime: 15925.0 sec
  Load Avg:  0.9970703125  0.9853515625  0.95458984375
  WORD_SIZE: 64
  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant
Packages:
  Package Directory: /home/vagrant/.julia/v0.7
  Package Status:
2 required packages:
 - BlockArrays                   0.2.0
 - JSON                          0.16.3
2 additional packages:
 - Compat                        0.43.0
 - Nullables                     0.0.2
[ Info: Computing test dependencies for BlockArrays... @ Base.Pkg.Entry entry.jl:713
[ Info: Cloning cache of Documenter from https://github.com/JuliaDocs/Documenter.jl.git @ Base.Pkg.Cache cache.jl:43
[ Info: Installing DocStringExtensions v0.4.1 @ Base.Pkg.Entry entry.jl:543
[ Info: Installing Documenter v0.12.5 @ Base.Pkg.Entry entry.jl:543
[ Info: Testing BlockArrays @ Base.Pkg.Entry entry.jl:723
Test Summary:             | Pass  Total
BlockSizes / BlockIndices |    4      4
┌ Warning: `Array{T, N}(d::NTuple{N, Int}) where {T, N}` is deprecated, use `Array{T, N}(uninitialized, d)` instead.
│   caller = Type at blockarray.jl:58 [inlined]
└ @ Core blockarray.jl:58
┌ Warning: `Array{T, N}(d::NTuple{N, Int}) where {T, N}` is deprecated, use `Array{T, N}(uninitialized, d)` instead.
│   caller = Type at blockarray.jl:58 [inlined]
└ @ Core blockarray.jl:58
Test Summary:  | Pass  Total
block indexing |   10     10
┌ Warning: `Array{T, N}(d::NTuple{N, Int}) where {T, N}` is deprecated, use `Array{T, N}(uninitialized, d)` instead.
│   caller = Type at blockarray.jl:58 [inlined]
└ @ Core blockarray.jl:58
┌ Warning: `copy!(dst::AbstractArray, src::AbstractArray)` is deprecated. You can either use `copyto!(dst, src)` or `Future.copy!(dst, src)` instead.
│   caller = macro expansion at blockarray.jl:189 [inlined]
└ @ Core blockarray.jl:189
┌ Warning: `Array{T, N}(d::NTuple{N, Int}) where {T, N}` is deprecated, use `Array{T, N}(uninitialized, d)` instead.
│   caller = Type at blockarray.jl:58 [inlined]
└ @ Core blockarray.jl:58
┌ Warning: `Array{T, N}(d::NTuple{N, Int}) where {T, N}` is deprecated, use `Array{T, N}(uninitialized, d)` instead.
│   caller = Type at blockarray.jl:58 [inlined]
└ @ Core blockarray.jl:58
┌ Warning: `copy!(dst::AbstractArray, src::AbstractArray)` is deprecated. You can either use `copyto!(dst, src)` or `Future.copy!(dst, src)` instead.
│   caller = macro expansion at blockarray.jl:189 [inlined]
└ @ Core blockarray.jl:189
┌ Warning: `Array{T, N}(d::NTuple{N, Int}) where {T, N}` is deprecated, use `Array{T, N}(uninitialized, d)` instead.
│   caller = Type at blockarray.jl:58 [inlined]
└ @ Core blockarray.jl:58
┌ Warning: `Array{T, N}(d::NTuple{N, Int}) where {T, N}` is deprecated, use `Array{T, N}(uninitialized, d)` instead.
│   caller = Type at blockarray.jl:58 [inlined]
└ @ Core blockarray.jl:58
┌ Warning: `copy!(dst::AbstractArray, src::AbstractArray)` is deprecated. You can either use `copyto!(dst, src)` or `Future.copy!(dst, src)` instead.
│   caller = macro expansion at blockarray.jl:189 [inlined]
└ @ Core blockarray.jl:189
┌ Warning: `zeros(a::AbstractArray)` is deprecated, consider `zero(a)`, `fill(0, size(a))`, `fill!(copy(a), 0)`, or `fill!(similar(a), 0)`. Where necessary, use `fill!(similar(a), zero(eltype(a)))`.
│   caller = macro expansion at test_blockarrays.jl:37 [inlined]
└ @ Core test_blockarrays.jl:37
┌ Warning: `copy!(dst::AbstractArray, src::AbstractArray)` is deprecated. You can either use `copyto!(dst, src)` or `Future.copy!(dst, src)` instead.
│   caller = copy!(::PseudoBlockArray{Float64,1,Array{Float64,1}}, ::Array{Float64,1}) at pseudo_blockarray.jl:177
└ @ BlockArrays pseudo_blockarray.jl:177
┌ Warning: `zeros(a::AbstractArray)` is deprecated, consider `zero(a)`, `fill(0, size(a))`, `fill!(copy(a), 0)`, or `fill!(similar(a), 0)`. Where necessary, use `fill!(similar(a), zero(eltype(a)))`.
│   caller = macro expansion at test_blockarrays.jl:71 [inlined]
└ @ Core test_blockarrays.jl:71
┌ Warning: `copy!(dst::AbstractArray, src::AbstractArray)` is deprecated. You can either use `copyto!(dst, src)` or `Future.copy!(dst, src)` instead.
│   caller = copy!(::PseudoBlockArray{Float64,2,Array{Float64,2}}, ::Array{Float64,2}) at pseudo_blockarray.jl:177
└ @ BlockArrays pseudo_blockarray.jl:177
┌ Warning: `zeros(a::AbstractArray)` is deprecated, consider `zero(a)`, `fill(0, size(a))`, `fill!(copy(a), 0)`, or `fill!(similar(a), 0)`. Where necessary, use `fill!(similar(a), zero(eltype(a)))`.
│   caller = macro expansion at test_blockarrays.jl:101 [inlined]
└ @ Core test_blockarrays.jl:101
┌ Warning: `copy!(dst::AbstractArray, src::AbstractArray)` is deprecated. You can either use `copyto!(dst, src)` or `Future.copy!(dst, src)` instead.
│   caller = copy!(::PseudoBlockArray{Float64,3,Array{Float64,3}}, ::Array{Float64,3}) at pseudo_blockarray.jl:177
└ @ BlockArrays pseudo_blockarray.jl:177
Test Summary:    | Pass  Total
misc block tests |   65     65
convert: Error During Test at /home/vagrant/.julia/v0.7/BlockArrays/test/test_blockarrays.jl:118
  Test threw an exception of type MethodError
  Expression: C == A == BlockArray(A)
  MethodError: no method matching BlockArray(::PseudoBlockArray{Float64,2,Array{Float64,2}})
  Closest candidates are:
    BlockArray(::AbstractArray{T,N}, !Matched::Array{Int64,1}...) where {T, N} at /home/vagrant/.julia/v0.7/BlockArrays/src/blockarray.jl:63
    BlockArray(::AbstractArray{T,N}, !Matched::BlockSizes{N}) where {T, N} at /home/vagrant/.julia/v0.7/BlockArrays/src/blockarray.jl:72
    BlockArray(::AbstractArray{T,N}, !Matched::AbstractArray{Int64,1}...) where {T, N} at /home/vagrant/.julia/v0.7/BlockArrays/src/blockarray.jl:88
    ...
  Stacktrace:
   [1] BlockArray(::PseudoBlockArray{Float64,2,Array{Float64,2}}) at ./abstractarray.jl:21
   [2] macro expansion at /home/vagrant/.julia/v0.7/BlockArrays/test/test_blockarrays.jl:118 [inlined]
   [3] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:980 [inlined]
   [4] top-level scope at /home/vagrant/.julia/v0.7/BlockArrays/test/test_blockarrays.jl:116
┌ Warning: `Array{T, N}(d::NTuple{N, Int}) where {T, N}` is deprecated, use `Array{T, N}(uninitialized, d)` instead.
│   caller = Type at blockarray.jl:58 [inlined]
└ @ Core blockarray.jl:58
convert: Error During Test at /home/vagrant/.julia/v0.7/BlockArrays/test/test_blockarrays.jl:122
  Test threw an exception of type MethodError
  Expression: C ≈ A ≈ BlockArray(A)
  MethodError: no method matching BlockArray(::PseudoBlockArray{Float64,2,Array{Float64,2}})
  Closest candidates are:
    BlockArray(::AbstractArray{T,N}, !Matched::Array{Int64,1}...) where {T, N} at /home/vagrant/.julia/v0.7/BlockArrays/src/blockarray.jl:63
    BlockArray(::AbstractArray{T,N}, !Matched::BlockSizes{N}) where {T, N} at /home/vagrant/.julia/v0.7/BlockArrays/src/blockarray.jl:72
    BlockArray(::AbstractArray{T,N}, !Matched::AbstractArray{Int64,1}...) where {T, N} at /home/vagrant/.julia/v0.7/BlockArrays/src/blockarray.jl:88
    ...
  Stacktrace:
   [1] BlockArray(::PseudoBlockArray{Float64,2,Array{Float64,2}}) at ./abstractarray.jl:21
   [2] macro expansion at /home/vagrant/.julia/v0.7/BlockArrays/test/test_blockarrays.jl:122 [inlined]
   [3] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:980 [inlined]
   [4] top-level scope at /home/vagrant/.julia/v0.7/BlockArrays/test/test_blockarrays.jl:116
convert: Error During Test at /home/vagrant/.julia/v0.7/BlockArrays/test/test_blockarrays.jl:126
  Test threw an exception of type MethodError
  Expression: C ≈ A ≈ BlockArray(A)
  MethodError: no method matching BlockArray(::PseudoBlockArray{Float64,2,Array{Float64,2}})
  Closest candidates are:
    BlockArray(::AbstractArray{T,N}, !Matched::Array{Int64,1}...) where {T, N} at /home/vagrant/.julia/v0.7/BlockArrays/src/blockarray.jl:63
    BlockArray(::AbstractArray{T,N}, !Matched::BlockSizes{N}) where {T, N} at /home/vagrant/.julia/v0.7/BlockArrays/src/blockarray.jl:72
    BlockArray(::AbstractArray{T,N}, !Matched::AbstractArray{Int64,1}...) where {T, N} at /home/vagrant/.julia/v0.7/BlockArrays/src/blockarray.jl:88
    ...
  Stacktrace:
   [1] BlockArray(::PseudoBlockArray{Float64,2,Array{Float64,2}}) at ./abstractarray.jl:21
   [2] macro expansion at /home/vagrant/.julia/v0.7/BlockArrays/test/test_blockarrays.jl:126 [inlined]
   [3] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:980 [inlined]
   [4] top-level scope at /home/vagrant/.julia/v0.7/BlockArrays/test/test_blockarrays.jl:116
Test Summary: | Pass  Error  Total
convert       |    9      3     12
ERROR: LoadError: LoadError: Some tests did not pass: 9 passed, 0 failed, 3 errored, 0 broken.
in expression starting at /home/vagrant/.julia/v0.7/BlockArrays/test/test_blockarrays.jl:114
in expression starting at /home/vagrant/.julia/v0.7/BlockArrays/test/runtests.jl:11
┌ Error: ------------------------------------------------------------
│ # Testing failed for BlockArrays
│   exception = ErrorException("failed process: Process(`/home/vagrant/julia/bin/julia -Cnative -J/home/vagrant/julia/lib/julia/sys.so --compile=yes --depwarn=yes --code-coverage=none --color=no --compiled-modules=yes --check-bounds=yes --warn-overwrite=yes --startup-file=yes /home/vagrant/.julia/v0.7/BlockArrays/test/runtests.jl`, ProcessExited(1)) [1]")
└ @ Base.Pkg.Entry entry.jl:739
[ Info: Removing DocStringExtensions v0.4.1 @ Base.Pkg.Entry entry.jl:546
[ Info: Removing Documenter v0.12.5 @ Base.Pkg.Entry entry.jl:546
ERROR: BlockArrays had test errors

>>> End of log
