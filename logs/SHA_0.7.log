>>> 'Pkg.add("SHA")' log
[ Info: Installing SHA v0.5.3
[ Info: Package database updated
┌ Info: METADATA is out-of-date — you may not have the latest version of SHA
└ Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("SHA")' log
Julia Version 0.7.0-DEV.3519
Commit 5ecba29832 (2018-01-22 20:58 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
      Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-135-generic #184-Ubuntu SMP Wed Oct 18 11:55:51 UTC 2017 x86_64 x86_64
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
              speed         user         nice          sys         idle          irq
       #1  3500 MHz    2613136 s       6736 s     139126 s     907465 s         41 s
       #2  3500 MHz     706462 s         94 s      58185 s    3447046 s          0 s
       
  Memory: 2.93927001953125 GB (821.15625 MB free)
  Uptime: 42842.0 sec
  Load Avg:  1.00341796875  1.0146484375  0.970703125
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant
Packages:
  Package Directory: /home/vagrant/.julia/v0.7
  Package Status:
2 required packages:
 - JSON                          0.16.4
 - SHA                           0.5.3
3 additional packages:
 - Compat                        0.49.0
 - Nullables                     0.0.3
 - tmpoFILxC                     0.0.0-             non-repo (unregistered)
[ Info: Testing SHA
┌ Warning: Deprecated syntax `parametric method syntax describe_hash{S <: SHA.SHA_CTX}(T::Type{S})` around /home/vagrant/.julia/v0.7/SHA/test/runtests.jl:105.
│ Use `describe_hash(T::Type{S}) where S <: SHA.SHA_CTX` instead.
└ @ nothing runtests.jl:105
Loaded hash types: SHA1, SHA2-224, SHA2-256, SHA2-384, SHA2-512, SHA3-224, SHA3-256, SHA3-384 and SHA3-512
┌ Warning: Deprecated syntax `implicit assignment to global variable `nerrors``.
│ Use `global nerrors` instead.
└ @ nothing none:0
Testing on the empty string..................┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = sha1(::String) at SHA.jl:58
└ @ SHA SHA.jl:58
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = SHA1_CTX() at types.jl:126
└ @ SHA types.jl:126
.┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = sha2_224(::String) at SHA.jl:58
└ @ SHA SHA.jl:58
.┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = sha2_256(::String) at SHA.jl:58
└ @ SHA SHA.jl:58
.┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = sha2_384(::String) at SHA.jl:58
└ @ SHA SHA.jl:58
.┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = sha2_512(::String) at SHA.jl:58
└ @ SHA SHA.jl:58
.┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = sha3_224(::String) at SHA.jl:58
└ @ SHA SHA.jl:58
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = transform!(::SHA3_224_CTX) at sha3.jl:7
└ @ SHA sha3.jl:7
.┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = sha3_256(::String) at SHA.jl:58
└ @ SHA SHA.jl:58
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = transform!(::SHA3_256_CTX) at sha3.jl:7
└ @ SHA sha3.jl:7
.┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = sha3_384(::String) at SHA.jl:58
└ @ SHA SHA.jl:58
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = transform!(::SHA3_384_CTX) at sha3.jl:7
└ @ SHA sha3.jl:7
.┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = sha3_512(::String) at SHA.jl:58
└ @ SHA SHA.jl:58
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = transform!(::SHA3_512_CTX) at sha3.jl:7
└ @ SHA sha3.jl:7
.Done! [0 errors]
Testing on the string "test"..........................Done! [0 errors]
Testing on lorem ipsum................................Done! [0 errors]
Testing on 0 file............................┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = sha1(::IOStream, ::Int64) at SHA.jl:67
└ @ SHA SHA.jl:67
.┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = sha2_224(::IOStream, ::Int64) at SHA.jl:67
└ @ SHA SHA.jl:67
.┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = sha2_256(::IOStream, ::Int64) at SHA.jl:67
└ @ SHA SHA.jl:67
.┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = sha2_384(::IOStream, ::Int64) at SHA.jl:67
└ @ SHA SHA.jl:67
.┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = sha2_512(::IOStream, ::Int64) at SHA.jl:67
└ @ SHA SHA.jl:67
.┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = sha3_224(::IOStream, ::Int64) at SHA.jl:67
└ @ SHA SHA.jl:67
.┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = sha3_256(::IOStream, ::Int64) at SHA.jl:67
└ @ SHA SHA.jl:67
.┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = sha3_384(::IOStream, ::Int64) at SHA.jl:67
└ @ SHA SHA.jl:67
.┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = sha3_512(::IOStream, ::Int64) at SHA.jl:67
└ @ SHA SHA.jl:67
.Done! [0 errors]
Testing on one million a's Array......................Done! [0 errors]
Testing on one million a's Tuple......................Done! [0 errors]
Testing on one million a's (chunked properly)┌ Warning: Deprecated syntax `implicit assignment to global variable `nerrors``.
│ Use `global nerrors` instead.
└ @ nothing none:0
.........Done! [0 errors]
Testing on one million a's (chunked clumsily)┌ Warning: Deprecated syntax `implicit assignment to global variable `nerrors``.
│ Use `global nerrors` instead.
└ @ nothing none:0
.........Done! [0 errors]
Testing on the hmac functions┌ Warning: Deprecated syntax `implicit assignment to global variable `nerrors``.
│ Use `global nerrors` instead.
└ @ nothing none:0
ERROR: LoadError: MethodError: no method matching hmac_sha1(::Base.CodeUnits{UInt8,String}, ::Base.CodeUnits{UInt8,String})
Stacktrace:
 [1] top-level scope at ./<missing>:221
 [2] include at ./boot.jl:292 [inlined]
 [3] include_relative(::Module, ::String) at ./loading.jl:1011
 [4] include(::Module, ::String) at ./sysimg.jl:26
 [5] process_options(::Base.JLOptions) at ./client.jl:334
 [6] _start() at ./client.jl:386
in expression starting at /home/vagrant/.julia/v0.7/SHA/test/runtests.jl:215
┌ Error: ------------------------------------------------------------
│ # Testing failed for SHA
│   exception =
│    failed process: Process(`/home/vagrant/julia/bin/julia -Cnative -J/home/vagrant/julia/lib/julia/sys.so --compile=yes --depwarn=yes --code-coverage=none --color=no --compiled-modules=yes --check-bounds=yes --warn-overwrite=yes --startup-file=yes /home/vagrant/.julia/v0.7/SHA/test/runtests.jl`, ProcessExited(1)) [1]
│    Stacktrace:
│     [1] error(::String, ::Base.Process, ::String, ::Int64, ::String) at ./error.jl:42
│     [2] pipeline_error(::Base.Process) at ./process.jl:698
│     [3] run(::Cmd) at ./process.jl:660
│     [4] (::getfield(Base.Pkg.Entry, Symbol("##89#92")){Bool,String,Array{AbstractString,1}})() at ./pkg/entry.jl:729
│     [5] cd(::getfield(Base.Pkg.Entry, Symbol("##89#92")){Bool,String,Array{AbstractString,1}}, ::String) at ./file.jl:70
│     [6] #test!#88(::Bool, ::Function, ::String, ::Array{AbstractString,1}, ::Array{AbstractString,1}, ::Array{AbstractString,1}) at ./pkg/entry.jl:717
│     [7] (::getfield(Base.Pkg.Entry, Symbol("#kw##test!")))(::NamedTuple{(:coverage,),Tuple{Bool}}, ::typeof(Base.Pkg.Entry.test!), ::String, ::Array{AbstractString,1}, ::Array{AbstractString,1}, ::Array{AbstractString,1}) at ./<missing>:0
│     [8] #test#96(::Bool, ::Function, ::Array{AbstractString,1}) at ./pkg/entry.jl:756
│     [9] (::getfield(Base.Pkg.Entry, Symbol("#kw##test")))(::NamedTuple{(:coverage,),Tuple{Bool}}, ::typeof(Base.Pkg.Entry.test), ::Array{AbstractString,1}) at ./<missing>:0
│     [10] (::getfield(Base.Pkg.Dir, Symbol("##4#7")){Base.Iterators.IndexValue{Symbol,Bool,Tuple{Symbol},NamedTuple{(:coverage,),Tuple{Bool}}},typeof(Base.Pkg.Entry.test),Tuple{Array{AbstractString,1}}})() at ./pkg/dir.jl:36
│     [11] cd(::getfield(Base.Pkg.Dir, Symbol("##4#7")){Base.Iterators.IndexValue{Symbol,Bool,Tuple{Symbol},NamedTuple{(:coverage,),Tuple{Bool}}},typeof(Base.Pkg.Entry.test),Tuple{Array{AbstractString,1}}}, ::String) at ./file.jl:70
│     [12] #cd#1(::Base.Iterators.IndexValue{Symbol,Bool,Tuple{Symbol},NamedTuple{(:coverage,),Tuple{Bool}}}, ::Function, ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N} where N) at ./pkg/dir.jl:36
│     [13] (::getfield(Base.Pkg.Dir, Symbol("#kw##cd")))(::NamedTuple{(:coverage,),Tuple{Bool}}, ::typeof(Base.Pkg.Dir.cd), ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N} where N) at ./<missing>:0
│     [14] #test#3(::Bool, ::Function, ::String, ::Vararg{String,N} where N) at ./pkg/pkg.jl:274
│     [15] test(::String, ::Vararg{String,N} where N) at ./pkg/pkg.jl:274
│     [16] top-level scope
│     [17] eval at ./boot.jl:295 [inlined]
│     [18] eval(::Module, ::Expr) at ./sysimg.jl:71
│     [19] process_options(::Base.JLOptions) at ./client.jl:311
│     [20] _start() at ./client.jl:386
└ @ Base.Pkg.Entry entry.jl:732
ERROR: SHA had test errors

>>> End of log
