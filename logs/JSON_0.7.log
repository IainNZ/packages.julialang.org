>>> 'Pkg.add("JSON")' log
[ Info: Package JSON is already installed @ Base.Pkg.Entry entry.jl:54
┌ Info: METADATA is out-of-date — you may not have the latest version of JSON
│ Use `Pkg.update()` to get the latest versions of your packages
└ @ Base.Pkg.Entry entry.jl:74

>>> 'Pkg.test("JSON")' log
Julia Version 0.7.0-DEV.3246
Commit 2138144d3a (2018-01-04 02:34 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
      Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-135-generic #184-Ubuntu SMP Wed Oct 18 11:55:51 UTC 2017 x86_64 x86_64
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
              speed         user         nice          sys         idle          irq
       #1  3499 MHz    6196260 s        140 s     311176 s    1319261 s         64 s
       #2  3499 MHz    1113308 s         55 s     117177 s    7947777 s          0 s
       
  Memory: 2.93927001953125 GB (1578.5546875 MB free)
  Uptime: 93094.0 sec
  Load Avg:  0.9970703125  1.0078125  0.9990234375
  WORD_SIZE: 64
  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant
Packages:
  Package Directory: /home/vagrant/.julia/v0.7
  Package Status:
1 required packages:
 - JSON                          0.16.3
2 additional packages:
 - Compat                        0.42.0
 - Nullables                     0.0.2
[ Info: Computing test dependencies for JSON... @ Base.Pkg.Entry entry.jl:713
[ Info: Installing DataStructures v0.7.3 @ Base.Pkg.Entry entry.jl:543
[ Info: Installing FixedPointNumbers v0.4.3 @ Base.Pkg.Entry entry.jl:543
[ Info: Installing OffsetArrays v0.4.2 @ Base.Pkg.Entry entry.jl:543
[ Info: Testing JSON @ Base.Pkg.Entry entry.jl:723
[ Warning: Replacing module `Compat` @ Base loading.jl:350
WARNING: Base.Associative is deprecated, use AbstractDict instead.
  likely near /home/vagrant/.julia/v0.7/JSON/test/parser/invalid-input.jl:24
WARNING: Base.Associative is deprecated, use AbstractDict instead.
  likely near /home/vagrant/.julia/v0.7/JSON/test/parser/invalid-input.jl:24
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = #parse#1(::Type{Dict{String,Any}}, ::Type{Int64}, ::Function, ::String) at Parser.jl:386
└ @ JSON.Parser Parser.jl:386
┌ Warning: `replace(s::AbstractString, pat, f)` is deprecated, use `replace(s, pat => f)` instead.
│   caller = _error at Parser.jl:132 [inlined]
└ @ Core Parser.jl:132
┌ Warning: `unsafe_copy!(dest, args...)` is deprecated, use `unsafe_copyto!(dest, args...)` instead.
│   caller = parse_string(::JSON.Parser.MemoryParserState) at specialized.jl:15
└ @ JSON.Parser specialized.jl:15
┌ Warning: `replace(s::AbstractString, pat, f)` is deprecated, use `replace(s, pat => f)` instead.
│   caller = _error at Parser.jl:132 [inlined]
└ @ Core Parser.jl:132
┌ Warning: `replace(s::AbstractString, pat, f)` is deprecated, use `replace(s, pat => f)` instead.
│   caller = _error at Parser.jl:132 [inlined]
└ @ Core Parser.jl:132
┌ Warning: `replace(s::AbstractString, pat, f)` is deprecated, use `replace(s, pat => f)` instead.
│   caller = _error at Parser.jl:132 [inlined]
└ @ Core Parser.jl:132
┌ Warning: `replace(s::AbstractString, pat, f)` is deprecated, use `replace(s, pat => f)` instead.
│   caller = _error at Parser.jl:132 [inlined]
└ @ Core Parser.jl:132
┌ Warning: `replace(s::AbstractString, pat, f)` is deprecated, use `replace(s, pat => f)` instead.
│   caller = _error at Parser.jl:132 [inlined]
└ @ Core Parser.jl:132
┌ Warning: `replace(s::AbstractString, pat, f)` is deprecated, use `replace(s, pat => f)` instead.
│   caller = _error at Parser.jl:132 [inlined]
└ @ Core Parser.jl:132
┌ Warning: `replace(s::AbstractString, pat, f)` is deprecated, use `replace(s, pat => f)` instead.
│   caller = _error at Parser.jl:132 [inlined]
└ @ Core Parser.jl:132
┌ Warning: `replace(s::AbstractString, pat, f)` is deprecated, use `replace(s, pat => f)` instead.
│   caller = _error at Parser.jl:132 [inlined]
└ @ Core Parser.jl:132
WARNING: Base.Associative is deprecated, use AbstractDict instead.
  likely near /home/vagrant/.julia/v0.7/JSON/test/parser/parsefile.jl:8
WARNING: Base.Associative is deprecated, use AbstractDict instead.
  likely near /home/vagrant/.julia/v0.7/JSON/test/parser/parsefile.jl:8
WARNING: Base.Associative is deprecated, use AbstractDict instead.
  likely near /home/vagrant/.julia/v0.7/JSON/test/parser/parsefile.jl:8
WARNING: Base.Associative is deprecated, use AbstractDict instead.
  likely near /home/vagrant/.julia/v0.7/JSON/test/parser/parsefile.jl:8
WARNING: Base.Associative is deprecated, use AbstractDict instead.
  likely near /home/vagrant/.julia/v0.7/JSON/test/parser/parsefile.jl:8
in #parse at <missing>
WARNING: Base.Associative is deprecated, use AbstractDict instead.
  likely near /home/vagrant/.julia/v0.7/JSON/test/parser/dicttype.jl:1
WARNING: Base.Associative is deprecated, use AbstractDict instead.
  likely near /home/vagrant/.julia/v0.7/JSON/test/parser/dicttype.jl:1
WARNING: Base.Associative is deprecated, use AbstractDict instead.
  likely near /home/vagrant/.julia/v0.7/JSON/test/parser/dicttype.jl:1
in #parse at <missing>
WARNING: Base.Associative is deprecated, use AbstractDict instead.
  likely near /home/vagrant/.julia/v0.7/JSON/test/parser/dicttype.jl:1
WARNING: Base.Associative is deprecated, use AbstractDict instead.
  likely near /home/vagrant/.julia/v0.7/JSON/test/parser/dicttype.jl:1
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = #parse#1(::Type{DataStructures.OrderedDict}, ::Type{Int64}, ::Function, ::String) at Parser.jl:386
└ @ JSON.Parser Parser.jl:386
WARNING: Base.Associative is deprecated, use AbstractDict instead.
  likely near /home/vagrant/.julia/v0.7/JSON/test/parser/dicttype.jl:1
WARNING: Base.Associative is deprecated, use AbstractDict instead.
  likely near /home/vagrant/.julia/v0.7/JSON/test/parser/dicttype.jl:1
WARNING: Base.Associative is deprecated, use AbstractDict instead.
  likely near /home/vagrant/.julia/v0.7/JSON/test/parser/dicttype.jl:1
in #parse at <missing>
WARNING: Base.Associative is deprecated, use AbstractDict instead.
  likely near /home/vagrant/.julia/v0.7/JSON/test/parser/dicttype.jl:1
WARNING: Base.Associative is deprecated, use AbstractDict instead.
  likely near /home/vagrant/.julia/v0.7/JSON/test/parser/dicttype.jl:1
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = #parse#1(::Type{Dict{Symbol,Int32}}, ::Type{Int64}, ::Function, ::String) at Parser.jl:386
└ @ JSON.Parser Parser.jl:386
┌ Warning: `convert(::Type{Symbol}, s::AbstractString)` is deprecated, use `Symbol(s)` instead.
│   caller = byteat at Parser.jl:220 [inlined]
└ @ Core Parser.jl:220
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = #parse#1(::Type{Dict{String,Any}}, ::Type{Int32}, ::Function, ::String) at Parser.jl:386
└ @ JSON.Parser Parser.jl:386
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = #parse#1(::Type{Dict{String,Any}}, ::Type{Int128}, ::Function, ::String) at Parser.jl:386
└ @ JSON.Parser Parser.jl:386
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = #parse#1(::Type{Dict{String,Any}}, ::Type{BigInt}, ::Function, ::String) at Parser.jl:386
└ @ JSON.Parser Parser.jl:386
Test Summary: | Pass  Total
Parser        |   61     61
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = parse_string(::JSON.Parser.MemoryParserState, ::Array{UInt8,1}) at specialized.jl:99
└ @ JSON.Parser specialized.jl:99
┌ Warning: `indices(a, d)` is deprecated, use `axes(a, d)` instead.
│   caller = show_json(::JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8,1}}}, ::JSON.Serializations.StandardSerialization, ::Array{Int64,2}) at Writer.jl:313
└ @ JSON.Writer Writer.jl:313
┌ Warning: `indices(a)` is deprecated, use `axes(a)` instead.
│   caller = OffsetArray(::Array{Int64,2}, ::Tuple{UnitRange{Int64},UnitRange{Int64}}) at OffsetArrays.jl:42
└ @ OffsetArrays OffsetArrays.jl:42
┌ Warning: `indices(a)` is deprecated, use `axes(a)` instead.
│   caller = indices at OffsetArrays.jl:65 [inlined]
└ @ Core OffsetArrays.jl:65
┌ Warning: `indices(a)` is deprecated, use `axes(a)` instead.
│   caller = indices at OffsetArrays.jl:67 [inlined]
└ @ Core OffsetArrays.jl:67
Arrays: Error During Test at /home/vagrant/.julia/v0.7/JSON/test/standard-serializer.jl:61
  Test threw an exception of type ErrorException
  Expression: json(OffsetArray([0 1; 2 0], 0:1, 10:11)) == "[[0,2],[1,0]]"
  size not supported for arrays with indices (0:1, 10:11); see http://docs.julialang.org/en/latest/devdocs/offset-arrays/
  Stacktrace:
   [1] error at ./error.jl:33 [inlined]
   [2] errmsg at /home/vagrant/.julia/v0.7/OffsetArrays/src/OffsetArrays.jl:56 [inlined]
   [3] size at /home/vagrant/.julia/v0.7/OffsetArrays/src/OffsetArrays.jl:57 [inlined]
   [4] axes at ./abstractarray.jl:80 [inlined]
   [5] to_indices at ./indices.jl:215 [inlined]
   [6] view at ./subarray.jl:138 [inlined]
   [7] show_json(::JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8,1}}}, ::JSON.Serializations.StandardSerialization, ::OffsetArray{Int64,2,Array{Int64,2}}) at /home/vagrant/.julia/v0.7/JSON/src/Writer.jl:314
   [8] #show_json#3 at /home/vagrant/.julia/v0.7/JSON/src/Writer.jl:333 [inlined]
   [9] show_json at /home/vagrant/.julia/v0.7/JSON/src/Writer.jl:332 [inlined]
   [10] print(::Base.GenericIOBuffer{Array{UInt8,1}}, ::OffsetArray{Int64,2,Array{Int64,2}}) at /home/vagrant/.julia/v0.7/JSON/src/Writer.jl:341
   [11] #sprint#312(::Nothing, ::Int64, ::Function, ::Function, ::OffsetArray{Int64,2,Array{Int64,2}}, ::Vararg{OffsetArray{Int64,2,Array{Int64,2}},N} where N) at ./strings/io.jl:91
   [12] sprint at ./strings/io.jl:84 [inlined]
   [13] json(::OffsetArray{Int64,2,Array{Int64,2}}) at /home/vagrant/.julia/v0.7/JSON/src/Writer.jl:346
   [14] macro expansion at /home/vagrant/.julia/v0.7/JSON/test/standard-serializer.jl:61 [inlined]
   [15] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:980 [inlined]
   [16] top-level scope at /home/vagrant/.julia/v0.7/JSON/test/standard-serializer.jl:56
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = #parse#1(::Type{Dict{String,Any}}, ::Type{Int64}, ::Function, ::String) at Parser.jl:386
└ @ JSON.Parser Parser.jl:386
┌ Warning: `unsafe_copy!(dest, args...)` is deprecated, use `unsafe_copyto!(dest, args...)` instead.
│   caller = parse_string(::JSON.Parser.MemoryParserState) at specialized.jl:15
└ @ JSON.Parser specialized.jl:15
┌ Warning: Constructors no longer fall back to `convert`. A constructor `Float64(::FixedPointNumbers.Fixed{Int16,15})` should be defined instead.
│   caller = lower at Writer.jl:62 [inlined]
└ @ Core Writer.jl:62
┌ Warning: Constructors no longer fall back to `convert`. A constructor `Float64(::FixedPointNumbers.Fixed{Int16,15})` should be defined instead.
│   caller = top-level scope
└ @ Core :0
Test Summary:         | Pass  Error  Total
Serializer            |   44      1     45
  Standard Serializer |   30      1     31
    Symbol            |    1             1
    Floats            |    2             2
    Nullable          |    3             3
    Char              |    4             4
    Enum              |    2             2
    Type              |    1             1
    Module            |    1             1
    Dates             |    4             4
    Null bytes        |    3             3
    Arrays            |    3      1      4
    Pairs             |    4             4
    Sets              |    2             2
  Lowering            |    8             8
  Custom Serializer   |    6             6
ERROR: LoadError: Some tests did not pass: 44 passed, 0 failed, 1 errored, 0 broken.
in expression starting at /home/vagrant/.julia/v0.7/JSON/test/runtests.jl:40
┌ Error: ------------------------------------------------------------
│ # Testing failed for JSON
│   exception = ErrorException("failed process: Process(`/home/vagrant/julia/bin/julia -Cnative -J/home/vagrant/julia/lib/julia/sys.so --compile=yes --depwarn=yes --code-coverage=none --color=no --compiled-modules=yes --check-bounds=yes --warn-overwrite=yes --startup-file=yes /home/vagrant/.julia/v0.7/JSON/test/runtests.jl`, ProcessExited(1)) [1]")
└ @ Base.Pkg.Entry entry.jl:739
[ Info: Removing DataStructures v0.7.3 @ Base.Pkg.Entry entry.jl:546
[ Info: Removing FixedPointNumbers v0.4.3 @ Base.Pkg.Entry entry.jl:546
[ Info: Removing OffsetArrays v0.4.2 @ Base.Pkg.Entry entry.jl:546
ERROR: JSON had test errors

>>> End of log
