>>> 'Pkg.add("JSON")' log
[ Info: Package JSON is already installed
┌ Info: METADATA is out-of-date — you may not have the latest version of JSON
└ Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("JSON")' log
Julia Version 0.7.0-DEV.3563
Commit cf6303abe0 (2018-01-24 23:08 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
      Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-135-generic #184-Ubuntu SMP Wed Oct 18 11:55:51 UTC 2017 x86_64 x86_64
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
              speed         user         nice          sys         idle          irq
       #1  3500 MHz    2000701 s       7350 s     105399 s     497884 s         16 s
       #2  3500 MHz     370551 s         42 s      40203 s    2629630 s          0 s
       
  Memory: 2.93927001953125 GB (844.20703125 MB free)
  Uptime: 30804.0 sec
  Load Avg:  0.94384765625  0.9853515625  0.9599609375
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant
Packages:
  Package Directory: /home/vagrant/.julia/v0.7
  Package Status:
1 required packages:
 - JSON                          0.16.4
2 additional packages:
 - Compat                        0.49.0
 - Nullables                     0.0.3
[ Info: Computing test dependencies for JSON...
[ Info: Installing DataStructures v0.7.4
[ Info: Installing FixedPointNumbers v0.4.3
[ Info: Installing OffsetArrays v0.4.2
[ Info: Testing JSON
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = #parse#1(::Type{Dict{String,Any}}, ::Type{Int64}, ::Function, ::String) at Parser.jl:386
└ @ JSON.Parser Parser.jl:386
┌ Warning: `unsafe_copy!(dest, args...)` is deprecated, use `unsafe_copyto!(dest, args...)` instead.
│   caller = parse_string(::JSON.Parser.MemoryParserState) at specialized.jl:15
└ @ JSON.Parser specialized.jl:15
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = #parse#1(::Type{DataStructures.OrderedDict}, ::Type{Int64}, ::Function, ::String) at Parser.jl:386
└ @ JSON.Parser Parser.jl:386
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = #parse#1(::Type{Dict{Symbol,Int32}}, ::Type{Int64}, ::Function, ::String) at Parser.jl:386
└ @ JSON.Parser Parser.jl:386
┌ Warning: `convert(::Type{Symbol}, s::AbstractString)` is deprecated, use `Symbol(s)` instead.
│   caller = byteat at Parser.jl:220 [inlined]
└ @ Core Parser.jl:220
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = #parse#1(::Type{Dict{String,Any}}, ::Type{Int32}, ::Function, ::String) at Parser.jl:386
└ @ JSON.Parser Parser.jl:386
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = #parse#1(::Type{Dict{String,Any}}, ::Type{Int128}, ::Function, ::String) at Parser.jl:386
└ @ JSON.Parser Parser.jl:386
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = #parse#1(::Type{Dict{String,Any}}, ::Type{BigInt}, ::Function, ::String) at Parser.jl:386
└ @ JSON.Parser Parser.jl:386
Test Summary: | Pass  Total
Parser        |   61     61
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = parse_string(::JSON.Parser.MemoryParserState, ::Array{UInt8,1}) at specialized.jl:99
└ @ JSON.Parser specialized.jl:99
┌ Warning: `indices(a)` is deprecated, use `axes(a)` instead.
│   caller = OffsetArray(::Array{Int64,2}, ::Tuple{UnitRange{Int64},UnitRange{Int64}}) at OffsetArrays.jl:42
└ @ OffsetArrays OffsetArrays.jl:42
┌ Warning: `indices(a)` is deprecated, use `axes(a)` instead.
│   caller = indices at OffsetArrays.jl:67 [inlined]
└ @ Core OffsetArrays.jl:67
Arrays: Error During Test at /home/vagrant/.julia/v0.7/JSON/test/standard-serializer.jl:61
  Test threw an exception of type ErrorException
  Expression: json(OffsetArray([0 1; 2 0], 0:1, 10:11)) == "[[0,2],[1,0]]"
  size not supported for arrays with indices (0:1, 10:11); see http://docs.julialang.org/en/latest/devdocs/offset-arrays/
  Stacktrace:
   [1] error at ./error.jl:33 [inlined]
   [2] errmsg at /home/vagrant/.julia/v0.7/OffsetArrays/src/OffsetArrays.jl:56 [inlined]
   [3] size at /home/vagrant/.julia/v0.7/OffsetArrays/src/OffsetArrays.jl:57 [inlined]
   [4] axes at ./abstractarray.jl:80 [inlined]
   [5] axes at ./abstractarray.jl:62 [inlined]
   [6] show_json at /home/vagrant/.julia/v0.7/JSON/src/Writer.jl:315 [inlined]
   [7] #show_json#3 at /home/vagrant/.julia/v0.7/JSON/src/Writer.jl:335 [inlined]
   [8] show_json at /home/vagrant/.julia/v0.7/JSON/src/Writer.jl:334 [inlined]
   [9] print at /home/vagrant/.julia/v0.7/JSON/src/Writer.jl:343 [inlined]
   [10] #sprint#342 at ./strings/io.jl:91 [inlined]
   [11] sprint at ./strings/io.jl:84 [inlined]
   [12] json(::OffsetArray{Int64,2,Array{Int64,2}}) at /home/vagrant/.julia/v0.7/JSON/src/Writer.jl:348
   [13] macro expansion at /home/vagrant/.julia/v0.7/JSON/test/standard-serializer.jl:61 [inlined]
   [14] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1007 [inlined]
   [15] top-level scope at /home/vagrant/.julia/v0.7/JSON/test/standard-serializer.jl:56
ERROR: LoadError: UndefVarError: promote_sys_size not defined
Stacktrace:
 [1] getproperty(::Module, ::Symbol) at ./sysimg.jl:14
 [2] top-level scope at /home/vagrant/.julia/v0.7/FixedPointNumbers/src/FixedPointNumbers.jl:140
 [3] include at ./boot.jl:292 [inlined]
 [4] include_relative(::Module, ::String) at ./loading.jl:1012
 [5] include(::Module, ::String) at ./sysimg.jl:26
 [6] top-level scope
 [7] eval at ./boot.jl:295 [inlined]
 [8] top-level scope at ./<missing>:3
in expression starting at /home/vagrant/.julia/v0.7/FixedPointNumbers/src/FixedPointNumbers.jl:140
Lowering: Error During Test at /home/vagrant/.julia/v0.7/JSON/test/runtests.jl:45
  Got an exception of type LoadError outside of a @test
  LoadError: Failed to precompile FixedPointNumbers to /home/vagrant/.julia/lib/v0.7/FixedPointNumbers.ji.
  Stacktrace:
   [1] error at ./error.jl:33 [inlined]
   [2] compilecache(::Base.PkgId) at ./loading.jl:1156
   [3] _require(::Base.PkgId) at ./loading.jl:949
   [4] require(::Module, ::Symbol) at ./loading.jl:820
   [5] include at ./boot.jl:292 [inlined]
   [6] include_relative(::Module, ::String) at ./loading.jl:1012
   [7] include(::Module, ::String) at ./sysimg.jl:26
   [8] include(::String) at ./sysimg.jl:65
   [9] macro expansion at /home/vagrant/.julia/v0.7/JSON/test/runtests.jl:46 [inlined]
   [10] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1007 [inlined]
   [11] macro expansion at /home/vagrant/.julia/v0.7/JSON/test/runtests.jl:46 [inlined]
   [12] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1007 [inlined]
   [13] top-level scope at /home/vagrant/.julia/v0.7/JSON/test/runtests.jl:41
   [14] include at ./boot.jl:292 [inlined]
   [15] include_relative(::Module, ::String) at ./loading.jl:1012
   [16] include(::Module, ::String) at ./sysimg.jl:26
   [17] process_options(::Base.JLOptions) at ./client.jl:334
   [18] _start() at ./client.jl:386
  in expression starting at /home/vagrant/.julia/v0.7/JSON/test/lowering.jl:6
Test Summary:         | Pass  Error  Total
Serializer            |   36      2     38
  Standard Serializer |   30      1     31
    Symbol            |    1             1
    Floats            |    2             2
    Nullable          |    3             3
    Char              |    4             4
    Enum              |    2             2
    Type              |    1             1
    Module            |    1             1
    Dates             |    4             4
    Null bytes        |    3             3
    Arrays            |    3      1      4
    Pairs             |    4             4
    Sets              |    2             2
  Lowering            |           1      1
  Custom Serializer   |    6             6
ERROR: LoadError: Some tests did not pass: 36 passed, 0 failed, 2 errored, 0 broken.
in expression starting at /home/vagrant/.julia/v0.7/JSON/test/runtests.jl:40
┌ Error: ------------------------------------------------------------
│ # Testing failed for JSON
│   exception =
│    failed process: Process(`/home/vagrant/julia/bin/julia -Cnative -J/home/vagrant/julia/lib/julia/sys.so --compile=yes --depwarn=yes --code-coverage=none --color=no --compiled-modules=yes --check-bounds=yes --warn-overwrite=yes --startup-file=yes /home/vagrant/.julia/v0.7/JSON/test/runtests.jl`, ProcessExited(1)) [1]
│    Stacktrace:
│     [1] error(::String, ::Base.Process, ::String, ::Int64, ::String) at ./error.jl:42
│     [2] pipeline_error(::Base.Process) at ./process.jl:698
│     [3] run(::Cmd) at ./process.jl:660
│     [4] (::getfield(Base.Pkg.Entry, Symbol("##89#92")){Bool,String,Array{AbstractString,1}})() at ./pkg/entry.jl:729
│     [5] cd(::getfield(Base.Pkg.Entry, Symbol("##89#92")){Bool,String,Array{AbstractString,1}}, ::String) at ./file.jl:70
│     [6] #test!#88(::Bool, ::Function, ::String, ::Array{AbstractString,1}, ::Array{AbstractString,1}, ::Array{AbstractString,1}) at ./pkg/entry.jl:717
│     [7] (::getfield(Base.Pkg.Entry, Symbol("#kw##test!")))(::NamedTuple{(:coverage,),Tuple{Bool}}, ::typeof(Base.Pkg.Entry.test!), ::String, ::Array{AbstractString,1}, ::Array{AbstractString,1}, ::Array{AbstractString,1}) at ./<missing>:0
│     [8] #test#96(::Bool, ::Function, ::Array{AbstractString,1}) at ./pkg/entry.jl:756
│     [9] (::getfield(Base.Pkg.Entry, Symbol("#kw##test")))(::NamedTuple{(:coverage,),Tuple{Bool}}, ::typeof(Base.Pkg.Entry.test), ::Array{AbstractString,1}) at ./<missing>:0
│     [10] (::getfield(Base.Pkg.Dir, Symbol("##4#7")){Base.Iterators.IndexValue{Symbol,Bool,Tuple{Symbol},NamedTuple{(:coverage,),Tuple{Bool}}},typeof(Base.Pkg.Entry.test),Tuple{Array{AbstractString,1}}})() at ./pkg/dir.jl:36
│     [11] cd(::getfield(Base.Pkg.Dir, Symbol("##4#7")){Base.Iterators.IndexValue{Symbol,Bool,Tuple{Symbol},NamedTuple{(:coverage,),Tuple{Bool}}},typeof(Base.Pkg.Entry.test),Tuple{Array{AbstractString,1}}}, ::String) at ./file.jl:70
│     [12] #cd#1(::Base.Iterators.IndexValue{Symbol,Bool,Tuple{Symbol},NamedTuple{(:coverage,),Tuple{Bool}}}, ::Function, ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N} where N) at ./pkg/dir.jl:36
│     [13] (::getfield(Base.Pkg.Dir, Symbol("#kw##cd")))(::NamedTuple{(:coverage,),Tuple{Bool}}, ::typeof(Base.Pkg.Dir.cd), ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N} where N) at ./<missing>:0
│     [14] #test#3(::Bool, ::Function, ::String, ::Vararg{String,N} where N) at ./pkg/pkg.jl:274
│     [15] test(::String, ::Vararg{String,N} where N) at ./pkg/pkg.jl:274
│     [16] top-level scope
│     [17] eval at ./boot.jl:295 [inlined]
│     [18] eval(::Module, ::Expr) at ./sysimg.jl:71
│     [19] process_options(::Base.JLOptions) at ./client.jl:311
│     [20] _start() at ./client.jl:386
└ @ Base.Pkg.Entry entry.jl:732
[ Info: Removing DataStructures v0.7.4
[ Info: Removing FixedPointNumbers v0.4.3
[ Info: Removing OffsetArrays v0.4.2
ERROR: JSON had test errors

>>> End of log
