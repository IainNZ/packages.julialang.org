>>> 'Pkg.add("BioArgParse")' log
[ Info: Cloning cache of BioArgParse from https://github.com/Ward9250/BioArgParse.jl.git
[ Info: Installing ArgParse v0.5.0
[ Info: Installing BGZFStreams v0.1.4
[ Info: Installing BinDeps v0.8.6
[ Info: Installing Bio v0.4.7
[ Info: Installing BioArgParse v0.0.2
[ Info: Installing BufferedStreams v0.3.3
[ Info: Installing Calculus v0.2.2
[ Info: Installing CodecZlib v0.4.2
[ Info: Installing ColorTypes v0.6.6
[ Info: Installing Colors v0.8.2
[ Info: Installing Combinatorics v0.5.0
[ Info: Installing CommonSubexpressions v0.0.1
[ Info: Installing DataStructures v0.7.4
[ Info: Installing DiffResults v0.0.3
[ Info: Installing DiffRules v0.0.3
[ Info: Installing Distributions v0.15.0
[ Info: Installing FixedPointNumbers v0.4.3
[ Info: Installing ForwardDiff v0.7.2
[ Info: Installing IndexableBitVectors v0.1.2
[ Info: Installing IntervalTrees v0.1.0
[ Info: Installing IterTools v0.2.1
[ Info: Installing Iterators v0.3.1
[ Info: Installing Libz v0.2.4
[ Info: Installing LightGraphs v0.11.1
[ Info: Installing LightXML v0.5.0
[ Info: Installing MacroTools v0.4.0
[ Info: Installing Missings v0.2.5
[ Info: Installing NaNMath v0.3.0
[ Info: Installing PDMats v0.8.0
[ Info: Installing Polynomials v0.2.1
[ Info: Installing QuadGK v0.2.0
[ Info: Installing Reexport v0.1.0
[ Info: Installing Rmath v0.3.2
[ Info: Installing Roots v0.5.0
[ Info: Installing SHA v0.5.6
[ Info: Installing SimpleTraits v0.5.1
[ Info: Installing SortingAlgorithms v0.2.0
[ Info: Installing SpecialFunctions v0.3.8
[ Info: Installing StaticArrays v0.6.6
[ Info: Installing StatsBase v0.19.5
[ Info: Installing StatsFuns v0.5.0
[ Info: Installing TextWrap v0.2.0
[ Info: Installing TranscodingStreams v0.4.1
[ Info: Installing URIParser v0.3.0
[ Info: Building SpecialFunctions
┌ Warning: `isalnum(c::Char)` is deprecated, use `isalpha(c) || isnumeric(c)` instead.
│   caller = is_userinfo_char at parser.jl:4 [inlined]
└ @ Core parser.jl:4
┌ Warning: `isalnum(c::Char)` is deprecated, use `isalpha(c) || isnumeric(c)` instead.
│   caller = is_host_char at parser.jl:8 [inlined]
└ @ Core parser.jl:8
┌ Warning: `isalnum(c::Char)` is deprecated, use `isalpha(c) || isnumeric(c)` instead.
│   caller = is_host_char at parser.jl:8 [inlined]
└ @ Core parser.jl:8
WARNING: importing deprecated binding Base.Associative into BinDeps.
WARNING: Base.Associative is deprecated, use AbstractDict instead.
  likely near /home/vagrant/.julia/v0.7/SpecialFunctions/deps/binaries.jl:44
in @install at /home/vagrant/.julia/v0.7/BinDeps/src/dependencies.jl
[ Info: Building Rmath
┌ Warning: `isalnum(c::Char)` is deprecated, use `isalpha(c) || isnumeric(c)` instead.
│   caller = is_userinfo_char at parser.jl:4 [inlined]
└ @ Core parser.jl:4
┌ Warning: `isalnum(c::Char)` is deprecated, use `isalpha(c) || isnumeric(c)` instead.
│   caller = is_host_char at parser.jl:8 [inlined]
└ @ Core parser.jl:8
┌ Warning: `isalnum(c::Char)` is deprecated, use `isalpha(c) || isnumeric(c)` instead.
│   caller = is_host_char at parser.jl:8 [inlined]
└ @ Core parser.jl:8
WARNING: importing deprecated binding Base.Associative into BinDeps.
WARNING: Base.Associative is deprecated, use AbstractDict instead.
  likely near /home/vagrant/.julia/v0.7/Rmath/deps/build.jl:47
in @install at /home/vagrant/.julia/v0.7/BinDeps/src/dependencies.jl
[ Info: Building LightXML
┌ Warning: `is_windows` is deprecated, use `Sys.iswindows` instead.
│   caller = top-level scope
└ @ Core :0
[ Info: Package database updated
┌ Info: METADATA is out-of-date — you may not have the latest version of BioArgParse
└ Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("BioArgParse")' log
Julia Version 0.7.0-DEV.3563
Commit cf6303abe0 (2018-01-24 23:08 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
      Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-135-generic #184-Ubuntu SMP Wed Oct 18 11:55:51 UTC 2017 x86_64 x86_64
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
              speed         user         nice          sys         idle          irq
       #1  3500 MHz     894753 s        100 s      50880 s     437432 s          7 s
       #2  3500 MHz     169578 s         46 s      21328 s    1375407 s          0 s
       
  Memory: 2.93927001953125 GB (893.140625 MB free)
  Uptime: 15855.0 sec
  Load Avg:  0.9453125  0.998046875  0.978515625
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant
Packages:
  Package Directory: /home/vagrant/.julia/v0.7
  Package Status:
2 required packages:
 - BioArgParse                   0.0.2
 - JSON                          0.16.4
45 additional packages:
 - ArgParse                      0.5.0
 - BGZFStreams                   0.1.4
 - BinDeps                       0.8.6
 - Bio                           0.4.7
 - BufferedStreams               0.3.3
 - Calculus                      0.2.2
 - CodecZlib                     0.4.2
 - ColorTypes                    0.6.6
 - Colors                        0.8.2
 - Combinatorics                 0.5.0
 - CommonSubexpressions          0.0.1
 - Compat                        0.49.0
 - DataStructures                0.7.4
 - DiffResults                   0.0.3
 - DiffRules                     0.0.3
 - Distributions                 0.15.0
 - FixedPointNumbers             0.4.3
 - ForwardDiff                   0.7.2
 - IndexableBitVectors           0.1.2
 - IntervalTrees                 0.1.0
 - IterTools                     0.2.1
 - Iterators                     0.3.1
 - Libz                          0.2.4
 - LightGraphs                   0.11.1
 - LightXML                      0.5.0
 - MacroTools                    0.4.0
 - Missings                      0.2.5
 - NaNMath                       0.3.0
 - Nullables                     0.0.3
 - PDMats                        0.8.0
 - Polynomials                   0.2.1
 - QuadGK                        0.2.0
 - Reexport                      0.1.0
 - Rmath                         0.3.2
 - Roots                         0.5.0
 - SHA                           0.5.6
 - SimpleTraits                  0.5.1
 - SortingAlgorithms             0.2.0
 - SpecialFunctions              0.3.8
 - StaticArrays                  0.6.6
 - StatsBase                     0.19.5
 - StatsFuns                     0.5.0
 - TextWrap                      0.2.0
 - TranscodingStreams            0.4.1
 - URIParser                     0.3.0
[ Info: Testing BioArgParse
WARNING: Base.Test is deprecated, run `using Test` instead.
  likely near /home/vagrant/.julia/v0.7/BioArgParse/test/runtests.jl:3
ERROR: LoadError: LoadError: syntax: extra token "FileFormat" after end of expression
Stacktrace:
 [1] include at ./boot.jl:292 [inlined]
 [2] include_relative(::Module, ::String) at ./loading.jl:1012
 [3] include at ./sysimg.jl:26 [inlined]
 [4] include(::String) at /home/vagrant/.julia/v0.7/Bio/src/Bio.jl:3
 [5] top-level scope
 [6] include at ./boot.jl:292 [inlined]
 [7] include_relative(::Module, ::String) at ./loading.jl:1012
 [8] include(::Module, ::String) at ./sysimg.jl:26
 [9] top-level scope
 [10] eval at ./boot.jl:295 [inlined]
 [11] top-level scope at ./<missing>:3
in expression starting at /home/vagrant/.julia/v0.7/Bio/src/IO.jl:16
in expression starting at /home/vagrant/.julia/v0.7/Bio/src/Bio.jl:5
ERROR: LoadError: LoadError: Failed to precompile Bio to /home/vagrant/.julia/lib/v0.7/Bio.ji.
Stacktrace:
 [1] error at ./error.jl:33 [inlined]
 [2] compilecache(::Base.PkgId) at ./loading.jl:1156
 [3] _require(::Base.PkgId) at ./loading.jl:949
 [4] require(::Module, ::Symbol) at ./loading.jl:820
 [5] include at ./boot.jl:292 [inlined]
 [6] include_relative(::Module, ::String) at ./loading.jl:1012
 [7] _require(::Base.PkgId) at ./loading.jl:939
 [8] require(::Module, ::Symbol) at ./loading.jl:820
 [9] include at ./boot.jl:292 [inlined]
 [10] include_relative(::Module, ::String) at ./loading.jl:1012
 [11] include(::Module, ::String) at ./sysimg.jl:26
 [12] process_options(::Base.JLOptions) at ./client.jl:334
 [13] _start() at ./client.jl:386
in expression starting at /home/vagrant/.julia/v0.7/BioArgParse/src/BioArgParse.jl:3
in expression starting at /home/vagrant/.julia/v0.7/BioArgParse/test/runtests.jl:3
┌ Error: ------------------------------------------------------------
│ # Testing failed for BioArgParse
│   exception =
│    failed process: Process(`/home/vagrant/julia/bin/julia -Cnative -J/home/vagrant/julia/lib/julia/sys.so --compile=yes --depwarn=yes --code-coverage=none --color=no --compiled-modules=yes --check-bounds=yes --warn-overwrite=yes --startup-file=yes /home/vagrant/.julia/v0.7/BioArgParse/test/runtests.jl`, ProcessExited(1)) [1]
│    Stacktrace:
│     [1] error(::String, ::Base.Process, ::String, ::Int64, ::String) at ./error.jl:42
│     [2] pipeline_error(::Base.Process) at ./process.jl:698
│     [3] run(::Cmd) at ./process.jl:660
│     [4] (::getfield(Base.Pkg.Entry, Symbol("##89#92")){Bool,String,Array{AbstractString,1}})() at ./pkg/entry.jl:729
│     [5] cd(::getfield(Base.Pkg.Entry, Symbol("##89#92")){Bool,String,Array{AbstractString,1}}, ::String) at ./file.jl:70
│     [6] #test!#88(::Bool, ::Function, ::String, ::Array{AbstractString,1}, ::Array{AbstractString,1}, ::Array{AbstractString,1}) at ./pkg/entry.jl:717
│     [7] (::getfield(Base.Pkg.Entry, Symbol("#kw##test!")))(::NamedTuple{(:coverage,),Tuple{Bool}}, ::typeof(Base.Pkg.Entry.test!), ::String, ::Array{AbstractString,1}, ::Array{AbstractString,1}, ::Array{AbstractString,1}) at ./<missing>:0
│     [8] #test#96(::Bool, ::Function, ::Array{AbstractString,1}) at ./pkg/entry.jl:756
│     [9] (::getfield(Base.Pkg.Entry, Symbol("#kw##test")))(::NamedTuple{(:coverage,),Tuple{Bool}}, ::typeof(Base.Pkg.Entry.test), ::Array{AbstractString,1}) at ./<missing>:0
│     [10] (::getfield(Base.Pkg.Dir, Symbol("##4#7")){Base.Iterators.IndexValue{Symbol,Bool,Tuple{Symbol},NamedTuple{(:coverage,),Tuple{Bool}}},typeof(Base.Pkg.Entry.test),Tuple{Array{AbstractString,1}}})() at ./pkg/dir.jl:36
│     [11] cd(::getfield(Base.Pkg.Dir, Symbol("##4#7")){Base.Iterators.IndexValue{Symbol,Bool,Tuple{Symbol},NamedTuple{(:coverage,),Tuple{Bool}}},typeof(Base.Pkg.Entry.test),Tuple{Array{AbstractString,1}}}, ::String) at ./file.jl:70
│     [12] #cd#1(::Base.Iterators.IndexValue{Symbol,Bool,Tuple{Symbol},NamedTuple{(:coverage,),Tuple{Bool}}}, ::Function, ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N} where N) at ./pkg/dir.jl:36
│     [13] (::getfield(Base.Pkg.Dir, Symbol("#kw##cd")))(::NamedTuple{(:coverage,),Tuple{Bool}}, ::typeof(Base.Pkg.Dir.cd), ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N} where N) at ./<missing>:0
│     [14] #test#3(::Bool, ::Function, ::String, ::Vararg{String,N} where N) at ./pkg/pkg.jl:274
│     [15] test(::String, ::Vararg{String,N} where N) at ./pkg/pkg.jl:274
│     [16] top-level scope
│     [17] eval at ./boot.jl:295 [inlined]
│     [18] eval(::Module, ::Expr) at ./sysimg.jl:71
│     [19] process_options(::Base.JLOptions) at ./client.jl:311
│     [20] _start() at ./client.jl:386
└ @ Base.Pkg.Entry entry.jl:732
ERROR: BioArgParse had test errors

>>> End of log
