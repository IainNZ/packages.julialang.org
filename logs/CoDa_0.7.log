>>> 'Pkg.add("CoDa")' log
WARNING: Base.Pkg is deprecated, run `using Pkg` instead
 in module Main
[ Info: Cloning cache of CoDa from https://github.com/juliohm/CoDa.jl.git
[ Info: Installing BinaryProvider v0.3.0
[ Info: Installing CategoricalArrays v0.3.9
[ Info: Installing CoDa v0.0.1
[ Info: Installing CodecZlib v0.4.3
[ Info: Installing DataFrames v0.11.6
[ Info: Installing DataStreams v0.3.4
[ Info: Installing DataStructures v0.8.1
[ Info: Installing Missings v0.2.9
[ Info: Installing NamedTuples v4.0.1
[ Info: Installing Reexport v0.1.0
[ Info: Installing SHA v0.5.7
[ Info: Installing SortingAlgorithms v0.2.1
[ Info: Installing StaticArrays v0.7.0
[ Info: Installing StatsBase v0.21.0
[ Info: Installing TranscodingStreams v0.5.2
[ Info: Installing UnicodePlots v0.2.6
[ Info: Installing WeakRefStrings v0.4.6
[ Info: Building CodecZlib
┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `occursin(r, s)` instead.
│   caller = valid_dl_path(::String, ::BinaryProvider.Linux) at PlatformNames.jl:376
└ @ BinaryProvider PlatformNames.jl:376
WARNING: importing deprecated binding Base.Libdl into Sys.
WARNING: Base.Libdl is deprecated, run `using Libdl` instead
  likely near /home/vagrant/.julia/v0.7/CodecZlib/deps/build.jl:98
[ Info: Package database updated
┌ Info: METADATA is out-of-date — you may not have the latest version of CoDa
└ Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("CoDa")' log
WARNING: Base.versioninfo is deprecated: it has been moved to the standard library package `InteractiveUtils`.
Add `using InteractiveUtils` to your imports.
 in module Main
WARNING: Base.versioninfo is deprecated: it has been moved to the standard library package `InteractiveUtils`.
Add `using InteractiveUtils` to your imports.
 in module Main
Julia Version 0.7.0-DEV.4983
Commit 7e2ce0e543 (2018-05-02 20:11 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
      Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-143-generic #192-Ubuntu SMP Tue Feb 27 10:45:36 UTC 2018 x86_64 x86_64
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
              speed         user         nice          sys         idle          irq
       #1  3492 MHz    2120242 s       7381 s     161191 s     740825 s         18 s
       #2  3492 MHz     493416 s         76 s      61350 s    2917462 s          0 s
       
  Memory: 2.939197540283203 GB (1318.76953125 MB free)
  Uptime: 35272.0 sec
  Load Avg:  1.462890625  1.7578125  1.3427734375
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant
Packages:
  Package Directory: /home/vagrant/.julia/v0.7
  Package Status:
2 required packages:
 - CoDa                          0.0.1
 - JSON                          0.17.2
18 additional packages:
 - BinaryProvider                0.3.0
 - CategoricalArrays             0.3.9
 - CodecZlib                     0.4.3
 - Compat                        0.64.0
 - DataFrames                    0.11.6
 - DataStreams                   0.3.4
 - DataStructures                0.8.1
 - Missings                      0.2.9
 - NamedTuples                   4.0.1
 - Nullables                     0.0.5
 - Reexport                      0.1.0
 - SHA                           0.5.7
 - SortingAlgorithms             0.2.1
 - StaticArrays                  0.7.0
 - StatsBase                     0.21.0
 - TranscodingStreams            0.5.2
 - UnicodePlots                  0.2.6
 - WeakRefStrings                0.4.6
WARNING: Base.Pkg is deprecated, run `using Pkg` instead
 in module Main
[ Info: Testing CoDa
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(undef, m)` instead.
│   caller = top-level scope
└ @ Core :0
WARNING: Base.LinAlg is deprecated, run `using LinearAlgebra` instead
  likely near /home/vagrant/.julia/v0.7/CoDa/src/CoDa.jl:24
WARNING: Base.Test is deprecated, run `using Test` instead
  likely near /home/vagrant/.julia/v0.7/CoDa/test/runtests.jl:2
WARNING: Base.norm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/CoDa/test/runtests.jl:4
in top-level scope at /home/vagrant/.julia/v0.7/CoDa/test/runtests.jl
Composition: Error During Test at /home/vagrant/.julia/v0.7/CoDa/test/runtests.jl:10
  Test threw exception MethodError(Base.Broadcast.broadcast_similar, (StaticArrays.StaticArrayStyle{1}(), Float64, (Base.OneTo(3),), Base.Broadcast.Broadcasted{StaticArrays.StaticArrayStyle{1}}(*, ([1.0, 2.0, 3.0], [0.545455, 0.272727, 0.181818]))), 0x0000000000006b37)
  Expression: c₁ - c₂ == c₀
  MethodError: no method matching broadcast_similar(::StaticArrays.StaticArrayStyle{1}, ::Type{Float64}, ::Tuple{Base.OneTo{Int64}}, ::Base.Broadcast.Broadcasted{StaticArrays.StaticArrayStyle{1},Tuple{Base.OneTo{Int64}},typeof(*),Tuple{StaticArrays.SArray{Tuple{3},Float64,1,3},StaticArrays.SArray{Tuple{3},Float64,1,3}}})
  Closest candidates are:
    broadcast_similar(!Matched::Base.Broadcast.DefaultArrayStyle{N}, ::Type{ElType}, ::Tuple{Vararg{AbstractUnitRange,N}}, ::Any) where {N, ElType} at broadcast.jl:197
    broadcast_similar(!Matched::Base.Broadcast.ArrayConflict, ::Type{ElType}, ::Tuple{Vararg{AbstractUnitRange,N}} where N, ::Any) where ElType at broadcast.jl:202
    broadcast_similar(!Matched::LinearAlgebra.StructuredMatrixStyle{T}, ::Type{ElType}, ::Any, ::Any) where {T, ElType} at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v0.7/LinearAlgebra/src/structuredbroadcast.jl:95
    ...
  Stacktrace:
   [1] copy at ./broadcast.jl:736 [inlined]
   [2] materialize at ./broadcast.jl:716 [inlined]
   [3] +(::Composition{3}, ::Composition{3}) at /home/vagrant/.julia/v0.7/CoDa/src/composition.jl:34
   [4] -(::Composition{3}, ::Composition{3}) at /home/vagrant/.julia/v0.7/CoDa/src/composition.jl:38
   [5] macro expansion at /home/vagrant/.julia/v0.7/CoDa/test/runtests.jl:10 [inlined]
   [6] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v0.7/Test/src/Test.jl:1079 [inlined]
   [7] macro expansion at /home/vagrant/.julia/v0.7/CoDa/test/runtests.jl:6 [inlined]
   [8] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v0.7/Test/src/Test.jl:1079 [inlined]
   [9] top-level scope at /home/vagrant/.julia/v0.7/CoDa/test/runtests.jl:5
Composition: Error During Test at /home/vagrant/.julia/v0.7/CoDa/test/runtests.jl:12
  Test threw exception MethodError(Base.Broadcast.broadcast_similar, (StaticArrays.StaticArrayStyle{1}(), Float64, (Base.OneTo(3),), Base.Broadcast.Broadcasted{StaticArrays.StaticArrayStyle{1}}(*, ([1.0, 2.0, 3.0], [0.545455, 0.272727, 0.181818]))), 0x0000000000006b37)
  Expression: isapprox(distance(c₁, c₁), 0.0, atol=1.0e-6)
  MethodError: no method matching broadcast_similar(::StaticArrays.StaticArrayStyle{1}, ::Type{Float64}, ::Tuple{Base.OneTo{Int64}}, ::Base.Broadcast.Broadcasted{StaticArrays.StaticArrayStyle{1},Tuple{Base.OneTo{Int64}},typeof(*),Tuple{StaticArrays.SArray{Tuple{3},Float64,1,3},StaticArrays.SArray{Tuple{3},Float64,1,3}}})
  Closest candidates are:
    broadcast_similar(!Matched::Base.Broadcast.DefaultArrayStyle{N}, ::Type{ElType}, ::Tuple{Vararg{AbstractUnitRange,N}}, ::Any) where {N, ElType} at broadcast.jl:197
    broadcast_similar(!Matched::Base.Broadcast.ArrayConflict, ::Type{ElType}, ::Tuple{Vararg{AbstractUnitRange,N}} where N, ::Any) where ElType at broadcast.jl:202
    broadcast_similar(!Matched::LinearAlgebra.StructuredMatrixStyle{T}, ::Type{ElType}, ::Any, ::Any) where {T, ElType} at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v0.7/LinearAlgebra/src/structuredbroadcast.jl:95
    ...
  Stacktrace:
   [1] copy at ./broadcast.jl:736 [inlined]
   [2] materialize at ./broadcast.jl:716 [inlined]
   [3] +(::Composition{3}, ::Composition{3}) at /home/vagrant/.julia/v0.7/CoDa/src/composition.jl:34
   [4] -(::Composition{3}, ::Composition{3}) at /home/vagrant/.julia/v0.7/CoDa/src/composition.jl:38
   [5] distance(::Composition{3}, ::Composition{3}) at /home/vagrant/.julia/v0.7/CoDa/src/composition.jl:66
   [6] macro expansion at /home/vagrant/.julia/v0.7/CoDa/test/runtests.jl:12 [inlined]
   [7] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v0.7/Test/src/Test.jl:1079 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.7/CoDa/test/runtests.jl:6 [inlined]
   [9] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v0.7/Test/src/Test.jl:1079 [inlined]
   [10] top-level scope at /home/vagrant/.julia/v0.7/CoDa/test/runtests.jl:5
Test Summary: | Pass  Error  Total
CoDa.jl       |    2      2      4
  Composition |    2      2      4
ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 2 errored, 0 broken.
in expression starting at /home/vagrant/.julia/v0.7/CoDa/test/runtests.jl:4
┌ Error: ------------------------------------------------------------
│ # Testing failed for CoDa
│   exception =
│    failed process: Process(`/home/vagrant/julia/bin/julia -Cnative -J/home/vagrant/julia/lib/julia/sys.so --compile=yes --depwarn=yes --code-coverage=none --color=no --compiled-modules=yes --check-bounds=yes --warn-overwrite=yes --startup-file=yes /home/vagrant/.julia/v0.7/CoDa/test/runtests.jl`, ProcessExited(1)) [1]
│    Stacktrace:
│     [1] error(::String, ::Base.Process, ::String, ::Int64, ::String) at ./error.jl:42
│     [2] pipeline_error(::Base.Process) at ./process.jl:712
│     [3] #run#533(::Bool, ::Function, ::Cmd) at ./process.jl:670
│     [4] run at ./process.jl:668 [inlined]
│     [5] (::getfield(Pkg.Entry, Symbol("##56#57")){Bool,String,Array{AbstractString,1}})() at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v0.7/Pkg/src/entry.jl:729
│     [6] cd(::getfield(Pkg.Entry, Symbol("##56#57")){Bool,String,Array{AbstractString,1}}, ::String) at ./file.jl:72
│     [7] #test!#55(::Bool, ::Function, ::String, ::Array{AbstractString,1}, ::Array{AbstractString,1}, ::Array{AbstractString,1}) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v0.7/Pkg/src/entry.jl:717
│     [8] (::getfield(Pkg.Entry, Symbol("#kw##test!")))(::NamedTuple{(:coverage,),Tuple{Bool}}, ::typeof(Pkg.Entry.test!), ::String, ::Array{AbstractString,1}, ::Array{AbstractString,1}, ::Array{AbstractString,1}) at ./<missing>:0
│     [9] #test#59(::Bool, ::Function, ::Array{AbstractString,1}) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v0.7/Pkg/src/entry.jl:756
│     [10] #test at ./<missing>:0 [inlined]
│     [11] #4 at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v0.7/Pkg/src/dir.jl:36 [inlined]
│     [12] cd(::getfield(Pkg.Dir, Symbol("##4#7")){Base.Iterators.Pairs{Symbol,Bool,Tuple{Symbol},NamedTuple{(:coverage,),Tuple{Bool}}},typeof(Pkg.Entry.test),Tuple{Array{AbstractString,1}}}, ::String) at ./file.jl:72
│     [13] #cd#1(::Base.Iterators.Pairs{Symbol,Bool,Tuple{Symbol},NamedTuple{(:coverage,),Tuple{Bool}}}, ::Function, ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N} where N) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v0.7/Pkg/src/dir.jl:36
│     [14] (::getfield(Pkg.Dir, Symbol("#kw##cd")))(::NamedTuple{(:coverage,),Tuple{Bool}}, ::typeof(Pkg.Dir.cd), ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N} where N) at ./<missing>:0
│     [15] #test#3(::Bool, ::Function, ::String, ::Vararg{String,N} where N) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v0.7/Pkg/src/Pkg.jl:278
│     [16] test(::String, ::Vararg{String,N} where N) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v0.7/Pkg/src/Pkg.jl:278
│     [17] top-level scope
│     [18] eval at ./boot.jl:317 [inlined]
│     [19] eval(::Module, ::Expr) at ./sysimg.jl:74
│     [20] exec_options(::Base.JLOptions) at ./client.jl:304
│     [21] _start() at ./client.jl:455
└ @ Pkg.Entry entry.jl:732
ERROR: CoDa had test errors

>>> End of log
