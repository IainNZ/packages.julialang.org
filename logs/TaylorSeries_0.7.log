>>> 'Pkg.add("TaylorSeries")' log
[ Info: Installing TaylorSeries v0.7.1
[ Info: Package database updated
┌ Info: METADATA is out-of-date — you may not have the latest version of TaylorSeries
└ Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("TaylorSeries")' log
Julia Version 0.7.0-DEV.3421
Commit 2042dcfc2e (2018-01-16 23:39 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
      Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-135-generic #184-Ubuntu SMP Wed Oct 18 11:55:51 UTC 2017 x86_64 x86_64
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
              speed         user         nice          sys         idle          irq
       #1  3499 MHz    3723267 s        764 s     187584 s     972714 s         40 s
       #2  3499 MHz     784246 s       5822 s      70178 s    4791697 s          0 s
       
  Memory: 2.93927001953125 GB (578.83984375 MB free)
  Uptime: 57378.0 sec
  Load Avg:  1.0029296875  1.001953125  0.9599609375
  WORD_SIZE: 64
  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant
Packages:
  Package Directory: /home/vagrant/.julia/v0.7
  Package Status:
2 required packages:
 - JSON                          0.16.4
 - TaylorSeries                  0.7.1
3 additional packages:
 - Compat                        0.46.0
 - Nullables                     0.0.3
 - tmpueiSOW                     0.0.0-             non-repo (unregistered)
[ Info: Testing TaylorSeries
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/TaylorSeries/test/onevariable.jl:13
in top-level scope at /home/vagrant/.julia/v0.7/TaylorSeries/test/onevariable.jl
WARNING: Base.Complex128 is deprecated, use ComplexF64 instead.
  likely near /home/vagrant/.julia/v0.7/TaylorSeries/test/onevariable.jl:13
in top-level scope at /home/vagrant/.julia/v0.7/TaylorSeries/test/onevariable.jl
WARNING: Base.Complex128 is deprecated, use ComplexF64 instead.
  likely near /home/vagrant/.julia/v0.7/TaylorSeries/test/onevariable.jl:13
in top-level scope at /home/vagrant/.julia/v0.7/TaylorSeries/test/onevariable.jl
WARNING: Base.Complex128 is deprecated, use ComplexF64 instead.
  likely near /home/vagrant/.julia/v0.7/TaylorSeries/test/onevariable.jl:13
in top-level scope at /home/vagrant/.julia/v0.7/TaylorSeries/test/onevariable.jl
WARNING: Base.Complex128 is deprecated, use ComplexF64 instead.
  likely near /home/vagrant/.julia/v0.7/TaylorSeries/test/onevariable.jl:13
in top-level scope at /home/vagrant/.julia/v0.7/TaylorSeries/test/onevariable.jl
WARNING: Base.Complex128 is deprecated, use ComplexF64 instead.
  likely near /home/vagrant/.julia/v0.7/TaylorSeries/test/onevariable.jl:13
in top-level scope at /home/vagrant/.julia/v0.7/TaylorSeries/test/onevariable.jl
WARNING: Base.Complex128 is deprecated, use ComplexF64 instead.
  likely near /home/vagrant/.julia/v0.7/TaylorSeries/test/onevariable.jl:13
in top-level scope at /home/vagrant/.julia/v0.7/TaylorSeries/test/onevariable.jl
WARNING: Base.Complex128 is deprecated, use ComplexF64 instead.
  likely near /home/vagrant/.julia/v0.7/TaylorSeries/test/onevariable.jl:13
in top-level scope at /home/vagrant/.julia/v0.7/TaylorSeries/test/onevariable.jl
WARNING: Base.Complex128 is deprecated, use ComplexF64 instead.
  likely near /home/vagrant/.julia/v0.7/TaylorSeries/test/onevariable.jl:13
in top-level scope at /home/vagrant/.julia/v0.7/TaylorSeries/test/onevariable.jl
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(uninitialized, m)` instead.
│   caller = *(::Complex{Bool}, ::Taylor1{Int64}) at arithmetic.jl:215
└ @ TaylorSeries arithmetic.jl:215
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(uninitialized, m)` instead.
│   caller = *(::Float64, ::Taylor1{Int64}) at arithmetic.jl:215
└ @ TaylorSeries arithmetic.jl:215
┌ Warning: `a::AbstractArray + b::Number` is deprecated, use `broadcast(+, a, b)` instead.
│   caller = setindex!(::Taylor1{Int64}, ::Int64, ::UnitRange{Int64}) at auxiliary.jl:81
└ @ TaylorSeries auxiliary.jl:81
┌ Warning: `a::AbstractArray + b::Number` is deprecated, use `broadcast(+, a, b)` instead.
│   caller = setindex!(::Taylor1{Float64}, ::Array{Float64,1}, ::UnitRange{Int64}) at auxiliary.jl:82
└ @ TaylorSeries auxiliary.jl:82
┌ Warning: `a::AbstractArray + b::Number` is deprecated, use `broadcast(+, a, b)` instead.
│   caller = getindex(::Taylor1{Float64}, ::UnitRange{Int64}) at auxiliary.jl:77
└ @ TaylorSeries auxiliary.jl:77
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(uninitialized, m)` instead.
│   caller = *(::Int64, ::Taylor1{Int64}) at arithmetic.jl:215
└ @ TaylorSeries arithmetic.jl:215
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(uninitialized, m)` instead.
│   caller = *(::Complex{Int64}, ::Taylor1{Int64}) at arithmetic.jl:215
└ @ TaylorSeries arithmetic.jl:215
┌ Warning: In the future `findnext` will only work on boolean collections. Use `findnext(x->x!=0, A, start)` instead.
│   caller = findfirst at array.jl:1552 [inlined]
└ @ Core array.jl:1552
Tests for Taylor1 expansions: Error During Test at /home/vagrant/.julia/v0.7/TaylorSeries/test/onevariable.jl:99
  Test threw an exception of type MethodError
  Expression: TaylorSeries.findfirst(zt) == -1
  MethodError: no method matching -(::Nothing, ::Int64)
  Closest candidates are:
    -(!Matched::Complex{Bool}, ::Real) at complex.jl:297
    -(!Matched::Char, ::Integer) at char.jl:94
    -(!Matched::Base.CoreLogging.LogLevel, ::Any) at logging.jl:107
    ...
  Stacktrace:
   [1] findfirst(::Taylor1{Int64}) at /home/vagrant/.julia/v0.7/TaylorSeries/src/auxiliary.jl:209
   [2] macro expansion at /home/vagrant/.julia/v0.7/TaylorSeries/test/onevariable.jl:99 [inlined]
   [3] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1007 [inlined]
   [4] top-level scope at /home/vagrant/.julia/v0.7/TaylorSeries/test/onevariable.jl:14
Tests for Taylor1 expansions: Error During Test at /home/vagrant/.julia/v0.7/TaylorSeries/test/onevariable.jl:123
  Test threw an exception of type MethodError
  Expression: zero(t) / t == zero(t)
  MethodError: no method matching -(::Nothing, ::Int64)
  Closest candidates are:
    -(!Matched::Complex{Bool}, ::Real) at complex.jl:297
    -(!Matched::Char, ::Integer) at char.jl:94
    -(!Matched::Base.CoreLogging.LogLevel, ::Any) at logging.jl:107
    ...
  Stacktrace:
   [1] findfirst(::Taylor1{Int64}) at /home/vagrant/.julia/v0.7/TaylorSeries/src/auxiliary.jl:209
   [2] divfactorization(::Taylor1{Int64}, ::Taylor1{Int64}) at /home/vagrant/.julia/v0.7/TaylorSeries/src/arithmetic.jl:447
   [3] /(::Taylor1{Int64}, ::Taylor1{Int64}) at /home/vagrant/.julia/v0.7/TaylorSeries/src/arithmetic.jl:414
   [4] macro expansion at /home/vagrant/.julia/v0.7/TaylorSeries/test/onevariable.jl:123 [inlined]
   [5] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1007 [inlined]
   [6] top-level scope at /home/vagrant/.julia/v0.7/TaylorSeries/test/onevariable.jl:14
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(uninitialized, m)` instead.
│   caller = *(::Float64, ::Taylor1{Float64}) at arithmetic.jl:215
└ @ TaylorSeries arithmetic.jl:215
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(uninitialized, m)` instead.
│   caller = *(::Complex{Float64}, ::Taylor1{Complex{Int64}}) at arithmetic.jl:215
└ @ TaylorSeries arithmetic.jl:215
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(uninitialized, m)` instead.
│   caller = *(::Rational{Int64}, ::Taylor1{Int64}) at arithmetic.jl:215
└ @ TaylorSeries arithmetic.jl:215
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(uninitialized, m)` instead.
│   caller = *(::BigFloat, ::Taylor1{BigFloat}) at arithmetic.jl:215
└ @ TaylorSeries arithmetic.jl:215
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(uninitialized, m)` instead.
│   caller = *(::Complex{Int64}, ::Taylor1{Float64}) at arithmetic.jl:215
└ @ TaylorSeries arithmetic.jl:215
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(uninitialized, m)` instead.
│   caller = *(::Complex{BigFloat}, ::Taylor1{Complex{BigFloat}}) at arithmetic.jl:215
└ @ TaylorSeries arithmetic.jl:215
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(uninitialized, m)` instead.
│   caller = *(::Int64, ::Taylor1{Float64}) at arithmetic.jl:215
└ @ TaylorSeries arithmetic.jl:215
┌ Warning: In the future `findnext` will only work on boolean collections. Use `findnext(x->x!=0, A, start)` instead.
│   caller = findfirst at array.jl:1552 [inlined]
└ @ Core array.jl:1552
┌ Warning: In the future `findnext` will only work on boolean collections. Use `findnext(x->x!=0, A, start)` instead.
│   caller = findfirst at array.jl:1552 [inlined]
└ @ Core array.jl:1552
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(uninitialized, m)` instead.
│   caller = *(::Complex{Int64}, ::Taylor1{Rational{Int64}}) at arithmetic.jl:215
└ @ TaylorSeries arithmetic.jl:215
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(uninitialized, m)` instead.
│   caller = /(::Taylor1{Rational{Int64}}, ::Int64) at arithmetic.jl:369
└ @ TaylorSeries arithmetic.jl:369
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(uninitialized, m)` instead.
│   caller = /(::Taylor1{Rational{Int64}}, ::Complex{Int64}) at arithmetic.jl:369
└ @ TaylorSeries arithmetic.jl:369
Tests for Taylor1 expansions: Error During Test at /home/vagrant/.julia/v0.7/TaylorSeries/test/onevariable.jl:154
  Test threw an exception of type MethodError
  Expression: sqrt(zero(t)) == zero(t)
  MethodError: no method matching -(::Nothing, ::Int64)
  Closest candidates are:
    -(!Matched::Complex{Bool}, ::Real) at complex.jl:297
    -(!Matched::Char, ::Integer) at char.jl:94
    -(!Matched::Base.CoreLogging.LogLevel, ::Any) at logging.jl:107
    ...
  Stacktrace:
   [1] findfirst(::Taylor1{Int64}) at /home/vagrant/.julia/v0.7/TaylorSeries/src/auxiliary.jl:209
   [2] sqrt(::Taylor1{Int64}) at /home/vagrant/.julia/v0.7/TaylorSeries/src/power.jl:309
   [3] macro expansion at /home/vagrant/.julia/v0.7/TaylorSeries/test/onevariable.jl:154 [inlined]
   [4] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1007 [inlined]
   [5] top-level scope at /home/vagrant/.julia/v0.7/TaylorSeries/test/onevariable.jl:14
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(uninitialized, m)` instead.
│   caller = *(::Complex{Bool}, ::Taylor1{Float64}) at arithmetic.jl:215
└ @ TaylorSeries arithmetic.jl:215
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(uninitialized, m)` instead.
│   caller = convert(::Type{Taylor1{Rational{Int64}}}, ::Taylor1{Float64}) at conversion.jl:17
└ @ TaylorSeries conversion.jl:17
┌ Warning: `a::AbstractArray + b::Number` is deprecated, use `broadcast(+, a, b)` instead.
│   caller = getindex at auxiliary.jl:77 [inlined]
└ @ Core auxiliary.jl:77
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(uninitialized, m)` instead.
│   caller = *(::Complex{Float64}, ::Taylor1{Complex{Float64}}) at arithmetic.jl:215
└ @ TaylorSeries arithmetic.jl:215
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(uninitialized, m)` instead.
│   caller = evaluate at evaluate.jl:49 [inlined]
└ @ Core evaluate.jl:49
┌ Warning: In the future `findnext` will only work on boolean collections. Use `findnext(x->x!=0, A, start)` instead.
│   caller = findfirst at array.jl:1552 [inlined]
└ @ Core array.jl:1552
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(uninitialized, m)` instead.
│   caller = *(::Complex{Int64}, ::Taylor1{Complex{Float64}}) at arithmetic.jl:215
└ @ TaylorSeries arithmetic.jl:215
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = macro expansion at onevariable.jl:306 [inlined]
└ @ Core onevariable.jl:306
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(uninitialized, m)` instead.
│   caller = evaluate at evaluate.jl:49 [inlined]
└ @ Core evaluate.jl:49
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(uninitialized, m)` instead.
│   caller = evaluate at evaluate.jl:49 [inlined]
└ @ Core evaluate.jl:49
Tests for Taylor1 expansions: Test Failed at /home/vagrant/.julia/v0.7/TaylorSeries/test/onevariable.jl:343
  Expression: zt / zt
    Expected: ArgumentError
      Thrown: MethodError
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.7/TaylorSeries/test/onevariable.jl:343 [inlined]
 [2] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1007 [inlined]
 [3] top-level scope at /home/vagrant/.julia/v0.7/TaylorSeries/test/onevariable.jl:14
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(uninitialized, m)` instead.
│   caller = *(::Complex{Float64}, ::Taylor1{Int64}) at arithmetic.jl:215
└ @ TaylorSeries arithmetic.jl:215
┌ Warning: `rtoldefault(x, y)` is deprecated, use `rtoldefault(x, y, 0)` instead.
│   caller = isapprox(::Taylor1{Complex{Float64}}, ::Taylor1{Complex{Float64}}) at other_functions.jl:189
└ @ TaylorSeries other_functions.jl:189
┌ Warning: `rtoldefault(x, y)` is deprecated, use `rtoldefault(x, y, 0)` instead.
│   caller = isapprox(::Taylor1{Int64}, ::Taylor1{Int64}) at other_functions.jl:189
└ @ TaylorSeries other_functions.jl:189
┌ Warning: `rtoldefault(x, y)` is deprecated, use `rtoldefault(x, y, 0)` instead.
│   caller = isapprox(::Taylor1{Int64}, ::Taylor1{Float64}) at other_functions.jl:189
└ @ TaylorSeries other_functions.jl:189
┌ Warning: `rtoldefault(x, y)` is deprecated, use `rtoldefault(x, y, 0)` instead.
│   caller = isapprox(::Taylor1{Float64}, ::Taylor1{Float64}) at other_functions.jl:189
└ @ TaylorSeries other_functions.jl:189
┌ Warning: `rtoldefault(x, y)` is deprecated, use `rtoldefault(x, y, 0)` instead.
│   caller = (::getfield(Base, Symbol("#kw##isapprox")))(::NamedTuple{(:atol,),Tuple{Float64}}, ::typeof(isapprox), ::Taylor1{Float64}, ::Taylor1{Float64}) at <missing>:0
└ @ TaylorSeries <missing>:0
Test Summary:                | Pass  Fail  Error  Total
Tests for Taylor1 expansions |  265     1      3    269
ERROR: LoadError: LoadError: Some tests did not pass: 265 passed, 1 failed, 3 errored, 0 broken.
in expression starting at /home/vagrant/.julia/v0.7/TaylorSeries/test/onevariable.jl:13
in expression starting at /home/vagrant/.julia/v0.7/TaylorSeries/test/runtests.jl:14
┌ Error: ------------------------------------------------------------
│ # Testing failed for TaylorSeries
│   exception =
│    failed process: Process(`/home/vagrant/julia/bin/julia -Cnative -J/home/vagrant/julia/lib/julia/sys.so --compile=yes --depwarn=yes --code-coverage=none --color=no --compiled-modules=yes --check-bounds=yes --warn-overwrite=yes --startup-file=yes /home/vagrant/.julia/v0.7/TaylorSeries/test/runtests.jl`, ProcessExited(1)) [1]
│    Stacktrace:
│     [1] error(::String, ::Base.Process, ::String, ::Int64, ::String) at ./error.jl:42
│     [2] pipeline_error(::Base.Process) at ./process.jl:707
│     [3] run(::Cmd) at ./process.jl:669
│     [4] (::getfield(Base.Pkg.Entry, Symbol("##91#94")){Bool,String,Array{AbstractString,1}})() at ./pkg/entry.jl:730
│     [5] cd(::getfield(Base.Pkg.Entry, Symbol("##91#94")){Bool,String,Array{AbstractString,1}}, ::String) at ./file.jl:70
│     [6] #test!#90(::Bool, ::Function, ::String, ::Array{AbstractString,1}, ::Array{AbstractString,1}, ::Array{AbstractString,1}) at ./pkg/entry.jl:718
│     [7] (::getfield(Base.Pkg.Entry, Symbol("#kw##test!")))(::NamedTuple{(:coverage,),Tuple{Bool}}, ::typeof(Base.Pkg.Entry.test!), ::String, ::Array{AbstractString,1}, ::Array{AbstractString,1}, ::Array{AbstractString,1}) at ./<missing>:0
│     [8] #test#98(::Bool, ::Function, ::Array{AbstractString,1}) at ./pkg/entry.jl:757
│     [9] (::getfield(Base.Pkg.Entry, Symbol("#kw##test")))(::NamedTuple{(:coverage,),Tuple{Bool}}, ::typeof(Base.Pkg.Entry.test), ::Array{AbstractString,1}) at ./<missing>:0
│     [10] (::getfield(Base.Pkg.Dir, Symbol("##4#7")){Base.Iterators.IndexValue{Symbol,Bool,Tuple{Symbol},NamedTuple{(:coverage,),Tuple{Bool}}},typeof(Base.Pkg.Entry.test),Tuple{Array{AbstractString,1}}})() at ./pkg/dir.jl:36
│     [11] cd(::getfield(Base.Pkg.Dir, Symbol("##4#7")){Base.Iterators.IndexValue{Symbol,Bool,Tuple{Symbol},NamedTuple{(:coverage,),Tuple{Bool}}},typeof(Base.Pkg.Entry.test),Tuple{Array{AbstractString,1}}}, ::String) at ./file.jl:70
│     [12] #cd#1(::Base.Iterators.IndexValue{Symbol,Bool,Tuple{Symbol},NamedTuple{(:coverage,),Tuple{Bool}}}, ::Function, ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N} where N) at ./pkg/dir.jl:36
│     [13] (::getfield(Base.Pkg.Dir, Symbol("#kw##cd")))(::NamedTuple{(:coverage,),Tuple{Bool}}, ::typeof(Base.Pkg.Dir.cd), ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N} where N) at ./<missing>:0
│     [14] #test#3(::Bool, ::Function, ::String, ::Vararg{String,N} where N) at ./pkg/pkg.jl:274
│     [15] test(::String, ::Vararg{String,N} where N) at ./pkg/pkg.jl:274
│     [16] top-level scope
│     [17] eval at ./boot.jl:295 [inlined]
│     [18] eval(::Module, ::Expr) at ./sysimg.jl:71
│     [19] process_options(::Base.JLOptions) at ./client.jl:301
│     [20] _start() at ./client.jl:375
└ @ Base.Pkg.Entry entry.jl:733
ERROR: TaylorSeries had test errors

>>> End of log
