>>> 'Pkg.add("DiffResults")' log
[ Info: Installing DiffResults v0.0.3
[ Info: Installing StaticArrays v0.6.6
[ Info: Package database updated
┌ Info: METADATA is out-of-date — you may not have the latest version of DiffResults
└ Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("DiffResults")' log
Julia Version 0.7.0-DEV.3583
Commit 7d3991f784 (2018-01-26 19:00 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
      Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-135-generic #184-Ubuntu SMP Wed Oct 18 11:55:51 UTC 2017 x86_64 x86_64
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
              speed         user         nice          sys         idle          irq
       #1  3500 MHz    3576565 s       6517 s     177918 s    1129736 s         44 s
       #2  3500 MHz     992009 s       1748 s      80756 s    4492253 s          1 s
       
  Memory: 2.93927001953125 GB (1427.390625 MB free)
  Uptime: 56946.0 sec
  Load Avg:  0.970703125  0.97509765625  0.95458984375
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant
Packages:
  Package Directory: /home/vagrant/.julia/v0.7
  Package Status:
2 required packages:
 - DiffResults                   0.0.3
 - JSON                          0.16.4
3 additional packages:
 - Compat                        0.49.0
 - Nullables                     0.0.3
 - StaticArrays                  0.6.6
[ Info: Testing DiffResults
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #s168#236(::Tuple{Int64,Int64}, ::Type, ::Type, ::Type, ::Tuple{DataType}) at mapreduce.jl:20
└ @ StaticArrays mapreduce.jl:20
┌ Error: Exception while generating log record in module StaticArrays at /home/vagrant/.julia/v0.7/StaticArrays/src/mapreduce.jl:20
│   exception = task switch not allowed from inside staged nor pure functions
└ @ StaticArrays mapreduce.jl:20
Exception handling log message: ERROR: LoadError: UndefVarError: Inference not defined
Stacktrace:
 [1] getproperty at ./sysimg.jl:14 [inlined]
 [2] @generated body at /home/vagrant/.julia/v0.7/StaticArrays/src/mapreduce.jl:29 [inlined]
 [3] _map(::typeof(exp), ::Size{(4, 4)}, ::SArray{Tuple{4,4},Float64,2,16}) at /home/vagrant/.julia/v0.7/StaticArrays/src/mapreduce.jl:20
 [4] map at /home/vagrant/.julia/v0.7/StaticArrays/src/mapreduce.jl:15 [inlined]
 [5] derivative!(::Function, ::DiffResults.ImmutableDiffResult{2,SVector{4,Float64},Tuple{SArray{Tuple{4,4},Float64,2,16},SArray{Tuple{4,4,4},Float64,3,64}}}, ::Array{Float64,2}, ::Type{Val{1}}) at /home/vagrant/.julia/v0.7/DiffResults/src/DiffResults.jl:241
 [6] derivative!(::Function, ::DiffResults.ImmutableDiffResult{2,SVector{4,Float64},Tuple{SArray{Tuple{4,4},Float64,2,16},SArray{Tuple{4,4,4},Float64,3,64}}}, ::Array{Float64,2}) at /home/vagrant/.julia/v0.7/DiffResults/src/DiffResults.jl:240
 [7] top-level scope
 [8] include at ./boot.jl:292 [inlined]
 [9] include_relative(::Module, ::String) at ./loading.jl:1012
 [10] include(::Module, ::String) at ./sysimg.jl:26
 [11] process_options(::Base.JLOptions) at ./client.jl:334
 [12] _start() at ./client.jl:386
in expression starting at /home/vagrant/.julia/v0.7/DiffResults/test/runtests.jl:179
┌ Error: ------------------------------------------------------------
│ # Testing failed for DiffResults
│   exception =
│    failed process: Process(`/home/vagrant/julia/bin/julia -Cnative -J/home/vagrant/julia/lib/julia/sys.so --compile=yes --depwarn=yes --code-coverage=none --color=no --compiled-modules=yes --check-bounds=yes --warn-overwrite=yes --startup-file=yes /home/vagrant/.julia/v0.7/DiffResults/test/runtests.jl`, ProcessExited(1)) [1]
│    Stacktrace:
│     [1] error(::String, ::Base.Process, ::String, ::Int64, ::String) at ./error.jl:42
│     [2] pipeline_error(::Base.Process) at ./process.jl:698
│     [3] run(::Cmd) at ./process.jl:660
│     [4] (::getfield(Base.Pkg.Entry, Symbol("##89#92")){Bool,String,Array{AbstractString,1}})() at ./pkg/entry.jl:729
│     [5] cd(::getfield(Base.Pkg.Entry, Symbol("##89#92")){Bool,String,Array{AbstractString,1}}, ::String) at ./file.jl:70
│     [6] #test!#88(::Bool, ::Function, ::String, ::Array{AbstractString,1}, ::Array{AbstractString,1}, ::Array{AbstractString,1}) at ./pkg/entry.jl:717
│     [7] (::getfield(Base.Pkg.Entry, Symbol("#kw##test!")))(::NamedTuple{(:coverage,),Tuple{Bool}}, ::typeof(Base.Pkg.Entry.test!), ::String, ::Array{AbstractString,1}, ::Array{AbstractString,1}, ::Array{AbstractString,1}) at ./<missing>:0
│     [8] #test#96(::Bool, ::Function, ::Array{AbstractString,1}) at ./pkg/entry.jl:756
│     [9] (::getfield(Base.Pkg.Entry, Symbol("#kw##test")))(::NamedTuple{(:coverage,),Tuple{Bool}}, ::typeof(Base.Pkg.Entry.test), ::Array{AbstractString,1}) at ./<missing>:0
│     [10] (::getfield(Base.Pkg.Dir, Symbol("##4#7")){Base.Iterators.IndexValue{Symbol,Bool,Tuple{Symbol},NamedTuple{(:coverage,),Tuple{Bool}}},typeof(Base.Pkg.Entry.test),Tuple{Array{AbstractString,1}}})() at ./pkg/dir.jl:36
│     [11] cd(::getfield(Base.Pkg.Dir, Symbol("##4#7")){Base.Iterators.IndexValue{Symbol,Bool,Tuple{Symbol},NamedTuple{(:coverage,),Tuple{Bool}}},typeof(Base.Pkg.Entry.test),Tuple{Array{AbstractString,1}}}, ::String) at ./file.jl:70
│     [12] #cd#1(::Base.Iterators.IndexValue{Symbol,Bool,Tuple{Symbol},NamedTuple{(:coverage,),Tuple{Bool}}}, ::Function, ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N} where N) at ./pkg/dir.jl:36
│     [13] (::getfield(Base.Pkg.Dir, Symbol("#kw##cd")))(::NamedTuple{(:coverage,),Tuple{Bool}}, ::typeof(Base.Pkg.Dir.cd), ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N} where N) at ./<missing>:0
│     [14] #test#3(::Bool, ::Function, ::String, ::Vararg{String,N} where N) at ./pkg/pkg.jl:274
│     [15] test(::String, ::Vararg{String,N} where N) at ./pkg/pkg.jl:274
│     [16] top-level scope
│     [17] eval at ./boot.jl:295 [inlined]
│     [18] eval(::Module, ::Expr) at ./sysimg.jl:71
│     [19] process_options(::Base.JLOptions) at ./client.jl:311
│     [20] _start() at ./client.jl:386
└ @ Base.Pkg.Entry entry.jl:732
ERROR: DiffResults had test errors

>>> End of log
