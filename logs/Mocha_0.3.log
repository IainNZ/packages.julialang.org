>>> 'Pkg.add("Mocha")' log
INFO: Cloning cache of JLD from git://github.com/JuliaIO/JLD.jl.git
INFO: Cloning cache of Logging from git://github.com/kmsquire/Logging.jl.git
INFO: Cloning cache of Mocha from git://github.com/pluskid/Mocha.jl.git
INFO: Installing BinDeps v0.3.21
INFO: Installing Blosc v0.1.5
INFO: Installing Dates v0.3.2
INFO: Installing Docile v0.5.23
INFO: Installing FileIO v0.0.6
INFO: Installing HDF5 v0.6.1
INFO: Installing HttpCommon v0.1.2
INFO: Installing JLD v0.5.9
INFO: Installing Logging v0.2.0
INFO: Installing Mocha v0.1.2
INFO: Installing SHA v0.1.2
INFO: Installing URIParser v0.0.7
INFO: Building Blosc
INFO: Building HDF5
INFO: Building Mocha
Running `g++ -fPIC -Wall -O3 -shared -fopenmp -o libmochaext.so im2col.cpp pooling.cpp`
INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of Mocha
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("Mocha")' log
Julia Version 0.3.12
Commit 80aa779 (2015-10-26 12:41 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
INFO: Testing Mocha
Configuring Mocha...
 * CUDA       disabled by default
 * Native Ext disabled by default
Mocha configured, continue loading module...
DefaultBackend => CPUBackend
-- Testing simple Adam solver call
INFO: Constructing net TEST on CPUBackend...
INFO: Topological sorting 4 layers...
INFO: Setup layers...
INFO: Network constructed!
26-May 15:24:31:DEBUG:root:#DEBUG Checking network topology for back-propagation
26-May 15:24:32:DEBUG:root:Init network TEST
26-May 15:24:32:DEBUG:root:Init parameter weight for layer ip1
26-May 15:24:32:DEBUG:root:Init parameter bias for layer ip1
26-May 15:24:32:DEBUG:root:Init parameter weight for layer ip2
26-May 15:24:32:DEBUG:root:Init parameter bias for layer ip2
26-May 15:24:32:DEBUG:root:#DEBUG Initializing coffee breaks
26-May 15:24:32:DEBUG:root:#DEBUG Entering solver loop
26-May 15:24:33:DEBUG:root:Destroying network TEST
-- Testing simple SGD solver call
INFO: Constructing net TEST on CPUBackend...
INFO: Topological sorting 4 layers...
INFO: Setup layers...
INFO: Network constructed!
26-May 15:24:33:DEBUG:root:#DEBUG Checking network topology for back-propagation
26-May 15:24:33:DEBUG:root:Init network TEST
26-May 15:24:33:DEBUG:root:Init parameter weight for layer ip1
26-May 15:24:33:DEBUG:root:Init parameter bias for layer ip1
26-May 15:24:33:DEBUG:root:Init parameter weight for layer ip2
26-May 15:24:33:DEBUG:root:Init parameter bias for layer ip2
26-May 15:24:33:DEBUG:root:#DEBUG Initializing coffee breaks
26-May 15:24:33:DEBUG:root:#DEBUG Entering solver loop
26-May 15:24:33:DEBUG:root:Destroying network TEST
-- Testing network topology with duplicated blobs
INFO: Constructing net net on CPUBackend...
INFO: Topological sorting 1 layers...
INFO: Constructing net net on CPUBackend...
INFO: Topological sorting 2 layers...
-- Testing network topology with missing blobs
INFO: Constructing net net on CPUBackend...
INFO: Topological sorting 1 layers...
-- Testing network topology with circular dependency
INFO: Constructing net net on CPUBackend...
INFO: Topological sorting 2 layers...
-- Testing network topology with multiple back-propagate path
    > Good blob sharing
INFO: Constructing net net on CPUBackend...
INFO: Topological sorting 5 layers...
INFO: Setup layers...
INFO: Network constructed!
26-May 15:24:35:DEBUG:root:Destroying network net
    > Bad blob sharing
INFO: Constructing net net on CPUBackend...
INFO: Topological sorting 6 layers...
INFO: Setup layers...
INFO: Network constructed!
-- Testing network topology with dangling blob
    > Good case
INFO: Constructing net net on CPUBackend...
INFO: Topological sorting 4 layers...
INFO: Setup layers...
INFO: Network constructed!
26-May 15:24:35:DEBUG:root:Destroying network net
    > Bad case
INFO: Constructing net net on CPUBackend...
INFO: Topological sorting 4 layers...
INFO: Setup layers...
INFO: Network constructed!
26-May 15:24:35:DEBUG:root:Destroying network net
    > Good case 2
INFO: Constructing net net on CPUBackend...
INFO: Topological sorting 5 layers...
INFO: Setup layers...
INFO: Network constructed!
26-May 15:24:35:DEBUG:root:Destroying network net
    > Bad case 2
INFO: Constructing net net on CPUBackend...
INFO: Topological sorting 6 layers...
INFO: Setup layers...
INFO: Network constructed!
26-May 15:24:35:DEBUG:root:Destroying network net
-- Testing gradients on simple network (example for gradient checking code)
INFO: Constructing net TEST on CPUBackend...
INFO: Topological sorting 4 layers...
INFO: Setup layers...
INFO: Network constructed!
-- Testing simple reference counting...
-- Testing glob Utilities
-- Testing RawBLAS{Float32} Utilities
-- Testing RawBLAS{Float64} Utilities
-- Testing blob reshape on CPUBackend{Float32}...
-- Testing blob reshape on CPUBackend{Float64}...
-- Testing ReLU neuron on CPUBackend{Float32}...
    > Forward
    > Backward
-- Testing ReLU neuron on CPUBackend{Float64}...
    > Forward
    > Backward
-- Testing Sigmoid neuron on CPUBackend{Float32}...
    > Forward
    > Backward
-- Testing Sigmoid neuron on CPUBackend{Float64}...
    > Forward
    > Backward
-- Testing Tanh neuron on CPUBackend{Float32}...
    > Forward
    > Backward
-- Testing Tanh neuron on CPUBackend{Float64}...
    > Forward
    > Backward
-- Testing Exponential neuron on CPUBackend{Float32}...
    > Forward
    > Backward
-- Testing Exponential neuron on CPUBackend{Float64}...
    > Forward
    > Backward
-- Testing L2 regularizer on CPUBackend{Float32}...
-- Testing L2 regularizer on CPUBackend{Float64}...
-- Testing L1 regularizer on CPUBackend{Float32}...
-- Testing L1 regularizer on CPUBackend{Float64}...
-- Testing L2 constraint on CPUBackend{Float32}...
-- Testing L2 constraint on CPUBackend{Float64}...
-- Testing DataTransformers on CPUBackend{Float32}...
    > SubMean
    > Scale
-- Testing DataTransformers on CPUBackend{Float64}...
    > SubMean
    > Scale
-- Testing TiedInnerProductLayer on CPUBackend{Float32}...
    > Setup
INFO: Constructing net test-tied-ip on CPUBackend...
INFO: Topological sorting 3 layers...
INFO: Setup layers...
INFO: Network constructed!
26-May 15:24:45:DEBUG:root:Init network test-tied-ip
26-May 15:24:45:DEBUG:root:Init parameter weight for layer ip1
26-May 15:24:45:DEBUG:root:Init parameter bias for layer ip1
26-May 15:24:45:DEBUG:root:Init parameter bias for layer ip2
    > Forward
    > Backward
26-May 15:24:45:DEBUG:root:Destroying network test-tied-ip
-- Testing TiedInnerProductLayer on CPUBackend{Float64}...
    > Setup
INFO: Constructing net test-tied-ip on CPUBackend...
INFO: Topological sorting 3 layers...
INFO: Setup layers...
INFO: Network constructed!
26-May 15:24:45:DEBUG:root:Init network test-tied-ip
26-May 15:24:45:DEBUG:root:Init parameter weight for layer ip1
26-May 15:24:45:DEBUG:root:Init parameter bias for layer ip1
26-May 15:24:45:DEBUG:root:Init parameter bias for layer ip2
    > Forward
    > Backward
26-May 15:24:46:DEBUG:root:Destroying network test-tied-ip
-- Testing SquareLossLayer on CPUBackend{Float32}...
    > (9,6,7)
-- Testing SquareLossLayer on CPUBackend{Float64}...
    > (7,10,10,11)
-- Testing SplitLayer on CPUBackend{Float32}...
    > Setup
    > Forward
    > Backward
-- Testing SplitLayer on CPUBackend{Float64}...
    > Setup
    > Forward
    > Backward
-- Testing SoftmaxLossLayer on CPUBackend{Float64} ...
    > (11,7) (operate on dimension 1)
    > Forward
    > Backward
-- Testing SoftmaxLossLayer on CPUBackend{Float64} ...
    > (10,9,6,10) (operate on dimension 3)
    > Forward
    > Backward
-- Testing SoftmaxLossLayer on CPUBackend{Float64} ...
    > (9,9,7,7,6) (operate on dimension 2)
    > Forward
    > Backward
-- Testing SoftmaxLossLayer on CPUBackend{Float64} (with weights)...
    > (10,6) (operate on dimension 1)
    > Forward
    > Backward
-- Testing SoftmaxLossLayer on CPUBackend{Float64} (with weights)...
    > (6,6,8,11) (operate on dimension 3)
    > Forward
    > Backward
-- Testing SoftmaxLossLayer on CPUBackend{Float64} (with weights)...
    > (6,7,8,6,7) (operate on dimension 4)
    > Forward
    > Backward
-- Testing SoftmaxLossLayer on CPUBackend{Float32} ...
    > (11,11) (operate on dimension 1)
    > Forward
    > Backward
-- Testing SoftmaxLossLayer on CPUBackend{Float32} ...
    > (11,6,8,7) (operate on dimension 3)
    > Forward
    > Backward
-- Testing SoftmaxLossLayer on CPUBackend{Float32} ...
    > (10,6,9,8,9) (operate on dimension 1)
    > Forward
    > Backward
-- Testing SoftmaxLossLayer on CPUBackend{Float32} (with weights)...
    > (9,7) (operate on dimension 1)
    > Forward
    > Backward
-- Testing SoftmaxLossLayer on CPUBackend{Float32} (with weights)...
    > (7,10,9,10) (operate on dimension 3)
    > Forward
    > Backward
-- Testing SoftmaxLossLayer on CPUBackend{Float32} (with weights)...
    > (8,8,8,10,9) (operate on dimension 4)
    > Forward
    > Backward
-- Testing SoftmaxLayer on CPUBackend{Float64}...
    > 2-dimensional input, normalize along dimension 1
    > Forward
    > Backward
-- Testing SoftmaxLayer on CPUBackend{Float64}...
    > 4-dimensional input, normalize along dimension 1
    > Forward
    > Backward
-- Testing SoftmaxLayer on CPUBackend{Float64}...
    > 5-dimensional input, normalize along dimension 4
    > Forward
    > Backward
-- Testing SoftmaxLayer on CPUBackend{Float32}...
    > 2-dimensional input, normalize along dimension 1
    > Forward
    > Backward
-- Testing SoftmaxLayer on CPUBackend{Float32}...
    > 4-dimensional input, normalize along dimension 1
    > Forward
    > Backward
-- Testing SoftmaxLayer on CPUBackend{Float32}...
    > 5-dimensional input, normalize along dimension 1
    > Forward
    > Backward
-- Testing SoftlabelSoftmaxLossLayer on CPUBackend{Float64}...
    > (11,7) (operate on dimension 1)
    > Forward
    > Backward
-- Testing SoftlabelSoftmaxLossLayer on CPUBackend{Float64}...
    > (9,7,8,8) (operate on dimension 1)
    > Forward
    > Backward
-- Testing SoftlabelSoftmaxLossLayer on CPUBackend{Float64}...
    > (9,8,9,10,11) (operate on dimension 3)
    > Forward
    > Backward
-- Testing SoftlabelSoftmaxLossLayer on CPUBackend{Float32}...
    > (8,8) (operate on dimension 1)
    > Forward
    > Backward
-- Testing SoftlabelSoftmaxLossLayer on CPUBackend{Float32}...
    > (9,8,10,10) (operate on dimension 3)
    > Forward
    > Backward
-- Testing SoftlabelSoftmaxLossLayer on CPUBackend{Float32}...
    > (9,6,11,6,8) (operate on dimension 1)
    > Forward
    > Backward
-- Testing convolution layer with shared param on CPUBackend{Float64}...
INFO: Constructing net test-shared-params on CPUBackend...
INFO: Topological sorting 5 layers...
INFO: Setup layers...
26-May 15:24:57:DEBUG:root:ConvolutionLayer(conv2): sharing filters and bias
INFO: Network constructed!
26-May 15:24:57:DEBUG:root:Init network test-shared-params
26-May 15:24:57:DEBUG:root:Init parameter filter for layer conv1
26-May 15:24:57:DEBUG:root:Init parameter bias for layer conv1
26-May 15:24:57:DEBUG:root:Destroying network test-shared-params
-- Testing inner-product layer with shared param on CPUBackend{Float64}...
INFO: Constructing net test-shared-params on CPUBackend...
INFO: Topological sorting 5 layers...
INFO: Setup layers...
26-May 15:24:57:DEBUG:root:InnerProductLayer(ip2): sharing weights and bias
INFO: Network constructed!
26-May 15:24:57:DEBUG:root:Init network test-shared-params
26-May 15:24:57:DEBUG:root:Init parameter weight for layer ip1
26-May 15:24:57:DEBUG:root:Init parameter bias for layer ip1
26-May 15:24:57:DEBUG:root:Destroying network test-shared-params
-- Testing convolution layer with shared param on CPUBackend{Float32}...
INFO: Constructing net test-shared-params on CPUBackend...
INFO: Topological sorting 5 layers...
INFO: Setup layers...
26-May 15:24:57:DEBUG:root:ConvolutionLayer(conv2): sharing filters and bias
INFO: Network constructed!
26-May 15:24:57:DEBUG:root:Init network test-shared-params
26-May 15:24:57:DEBUG:root:Init parameter filter for layer conv1
26-May 15:24:57:DEBUG:root:Init parameter bias for layer conv1
26-May 15:24:57:DEBUG:root:Destroying network test-shared-params
-- Testing inner-product layer with shared param on CPUBackend{Float32}...
INFO: Constructing net test-shared-params on CPUBackend...
INFO: Topological sorting 5 layers...
INFO: Setup layers...
26-May 15:24:57:DEBUG:root:InnerProductLayer(ip2): sharing weights and bias
INFO: Network constructed!
26-May 15:24:57:DEBUG:root:Init network test-shared-params
26-May 15:24:57:DEBUG:root:Init parameter weight for layer ip1
26-May 15:24:57:DEBUG:root:Init parameter bias for layer ip1
26-May 15:24:57:DEBUG:root:Destroying network test-shared-params
-- Testing ReshapeLayer on CPUBackend{Float64}...
    > Setup
    > Forward
    > Backward
-- Testing ReshapeLayer on CPUBackend{Float32}...
    > Setup
    > Forward
    > Backward
-- Testing RandomNormal Layer on CPUBackend{Float32}...
    > Random output 3[1,2,3]
-- Testing RandomNormal Layer on CPUBackend{Float64}...
    > Random output 3[2,2,1]
-- Testing RandomMask on CPUBackend{Float64}
    > 3 input blobs with tensor dims [4,3,1]
    > Setup
    > Forward
    > Backward
-- Testing RandomMask on CPUBackend{Float32}
    > 3 input blobs with tensor dims [3,5,6]
    > Setup
    > Forward
    > Backward
-- Testing PowerLayer on CPUBackend{Float32}...
    > scale=0.23, shift=0.81, power=2, tensor_dim=6
    > scale=0, shift=0.26, power=5, tensor_dim=6
    > scale=0.45, shift=0.94, power=2, tensor_dim=6
    > scale=0.75, shift=0, power=3, tensor_dim=1
    > scale=0.59, shift=0.29, power=4, tensor_dim=5
    > scale=0.42, shift=0.64, power=0, tensor_dim=4
    > scale=0.69, shift=0.73, power=1, tensor_dim=3
    > scale=0.64, shift=0.51, power=-1, tensor_dim=1
-- Testing PowerLayer on CPUBackend{Float64}...
    > scale=0.66, shift=0.58, power=2, tensor_dim=3
    > scale=0, shift=0.32, power=6, tensor_dim=2
    > scale=1.0, shift=0.33, power=2, tensor_dim=3
    > scale=0.52, shift=0, power=3, tensor_dim=6
    > scale=0.95, shift=0.12, power=4, tensor_dim=1
    > scale=0.68, shift=0.24, power=0, tensor_dim=4
    > scale=0.39, shift=0.93, power=1, tensor_dim=5
    > scale=0.49, shift=0.22, power=-1, tensor_dim=3
-- Testing Pooling(Max)  on CPUBackend{Float64}...
    > Setup
    > Forward
    > Backward
-- Testing Pooling(Mean)  on CPUBackend{Float64}...
    > Setup
    > Forward
    > Backward
-- Testing Pooling(Max) with padding on CPUBackend{Float64}...
    > Setup
    > Forward
    > Backward
-- Testing Pooling(Mean) with padding on CPUBackend{Float64}...
    > Setup
    > Forward
    > Backward
-- Testing Pooling(Max)  on CPUBackend{Float32}...
    > Setup
    > Forward
    > Backward
-- Testing Pooling(Mean)  on CPUBackend{Float32}...
    > Setup
    > Forward
    > Backward
-- Testing Pooling(Max) with padding on CPUBackend{Float32}...
    > Setup
    > Forward
    > Backward
-- Testing Pooling(Mean) with padding on CPUBackend{Float32}...
    > Setup
    > Forward
    > Backward
-- Testing MultinomialLogisticLossLayer{equal,local} on CPUBackend{Float64}...
    > [11,7] (operate on dimension 1)
-- Testing MultinomialLogisticLossLayer{equal,local} on CPUBackend{Float64}...
    > [9,8,8,10] (operate on dimension 3)
-- Testing MultinomialLogisticLossLayer{equal,local} on CPUBackend{Float64}...
    > [9,10,10,10,10] (operate on dimension 4)
-- Testing MultinomialLogisticLossLayer{local,local} on CPUBackend{Float64}...
    > [8,9] (operate on dimension 1)
-- Testing MultinomialLogisticLossLayer{local,local} on CPUBackend{Float64}...
    > [8,9,11,11] (operate on dimension 3)
-- Testing MultinomialLogisticLossLayer{local,local} on CPUBackend{Float64}...
    > [6,7,11,7,11] (operate on dimension 4)
-- Testing MultinomialLogisticLossLayer{global,global} on CPUBackend{Float64}...
    > [6,11] (operate on dimension 1)
-- Testing MultinomialLogisticLossLayer{global,global} on CPUBackend{Float64}...
    > [11,6,7,10] (operate on dimension 3)
-- Testing MultinomialLogisticLossLayer{global,global} on CPUBackend{Float64}...
    > [9,8,11,6,10] (operate on dimension 4)
-- Testing MultinomialLogisticLossLayer{global,local} on CPUBackend{Float64}...
    > [11,7] (operate on dimension 1)
-- Testing MultinomialLogisticLossLayer{global,local} on CPUBackend{Float64}...
    > [11,10,8,11] (operate on dimension 3)
-- Testing MultinomialLogisticLossLayer{global,local} on CPUBackend{Float64}...
    > [6,8,9,8,9] (operate on dimension 4)
-- Testing MultinomialLogisticLossLayer{no,no} on CPUBackend{Float64}...
    > [9,9] (operate on dimension 1)
-- Testing MultinomialLogisticLossLayer{no,no} on CPUBackend{Float64}...
    > [7,10,7,6] (operate on dimension 3)
-- Testing MultinomialLogisticLossLayer{no,no} on CPUBackend{Float64}...
    > [9,7,10,9,8] (operate on dimension 1)
-- Testing MultinomialLogisticLossLayer{equal,local} on CPUBackend{Float32}...
    > [6,10] (operate on dimension 1)
-- Testing MultinomialLogisticLossLayer{equal,local} on CPUBackend{Float32}...
    > [8,6,10,8] (operate on dimension 3)
-- Testing MultinomialLogisticLossLayer{equal,local} on CPUBackend{Float32}...
    > [9,6,6,8,9] (operate on dimension 4)
-- Testing MultinomialLogisticLossLayer{local,local} on CPUBackend{Float32}...
    > [8,7] (operate on dimension 1)
-- Testing MultinomialLogisticLossLayer{local,local} on CPUBackend{Float32}...
    > [9,8,10,10] (operate on dimension 3)
-- Testing MultinomialLogisticLossLayer{local,local} on CPUBackend{Float32}...
    > [7,9,8,10,11] (operate on dimension 4)
-- Testing MultinomialLogisticLossLayer{global,global} on CPUBackend{Float32}...
    > [11,6] (operate on dimension 1)
-- Testing MultinomialLogisticLossLayer{global,global} on CPUBackend{Float32}...
    > [8,7,7,10] (operate on dimension 3)
-- Testing MultinomialLogisticLossLayer{global,global} on CPUBackend{Float32}...
    > [9,7,8,8,10] (operate on dimension 4)
-- Testing MultinomialLogisticLossLayer{global,local} on CPUBackend{Float32}...
    > [9,10] (operate on dimension 1)
-- Testing MultinomialLogisticLossLayer{global,local} on CPUBackend{Float32}...
    > [7,9,10,9] (operate on dimension 3)
-- Testing MultinomialLogisticLossLayer{global,local} on CPUBackend{Float32}...
    > [6,6,10,9,10] (operate on dimension 4)
-- Testing MultinomialLogisticLossLayer{no,no} on CPUBackend{Float32}...
    > [11,9] (operate on dimension 1)
-- Testing MultinomialLogisticLossLayer{no,no} on CPUBackend{Float32}...
    > [7,11,7,10] (operate on dimension 1)
-- Testing MultinomialLogisticLossLayer{no,no} on CPUBackend{Float32}...
    > [6,8,6,11,6] (operate on dimension 3)
-- Testing Memory Output Layer on CPUBackend{Float32}...
    > (1,7,4,8)
-- Testing Memory Output Layer on CPUBackend{Float64}...
    > (1,4,3,4,8)
-- Testing Memory Data Layer on CPUBackend{Float32}...
    > (1,2,3,3)
-- Testing Memory Data Layer on CPUBackend{Float64}...
    > (6,5,1,3,2)
-- Testing LRN(AcrossChannel) on CPUBackend{Float32}...
    > Setup with dims (9,10,9,9)
    > Forward
    > Backward
-- Testing LRN(WithinChannel) on CPUBackend{Float32}...
    > Setup with dims (11,6,8,8)
    > Forward
    > Backward
-- Testing LRN(AcrossChannel) on CPUBackend{Float64}...
    > Setup with dims (10,7,11,9)
    > Forward
    > Backward
-- Testing LRN(WithinChannel) on CPUBackend{Float64}...
    > Setup with dims (7,11,11,6)
    > Forward
    > Backward
-- Testing InplaceLayer on CPUBackend{Float64}...
    > Setup
INFO: Constructing net test-inplace on CPUBackend...
INFO: Topological sorting 5 layers...
INFO: Setup layers...
INFO: Network constructed!
26-May 15:25:29:DEBUG:root:Init network test-inplace
26-May 15:25:29:DEBUG:root:Init parameter weight for layer ip1
26-May 15:25:29:DEBUG:root:Init parameter bias for layer ip1
26-May 15:25:29:DEBUG:root:Init parameter weight for layer ip2
26-May 15:25:29:DEBUG:root:Init parameter bias for layer ip2
    > Forward
    > Backward
26-May 15:25:29:DEBUG:root:Destroying network test-inplace
-- Testing InplaceLayer on CPUBackend{Float32}...
    > Setup
INFO: Constructing net test-inplace on CPUBackend...
INFO: Topological sorting 5 layers...
INFO: Setup layers...
INFO: Network constructed!
26-May 15:25:29:DEBUG:root:Init network test-inplace
26-May 15:25:29:DEBUG:root:Init parameter weight for layer ip1
26-May 15:25:29:DEBUG:root:Init parameter bias for layer ip1
26-May 15:25:29:DEBUG:root:Init parameter weight for layer ip2
26-May 15:25:29:DEBUG:root:Init parameter bias for layer ip2
    > Forward
    > Backward
26-May 15:25:29:DEBUG:root:Destroying network test-inplace
-- Testing InnerProductLayer on CPUBackend{Float32}...
    > Setup
    > Forward
    > Backward
-- Testing InnerProductLayer on CPUBackend{Float64}...
    > Setup
    > Forward
    > Backward
-- Testing Index2OnehotLayer on CPUBackend{Float32}...
    > 2-dimensional input, expanding along dimension 1
-- Testing Index2OnehotLayer on CPUBackend{Float32}...
    > 4-dimensional input, expanding along dimension 1
-- Testing Index2OnehotLayer on CPUBackend{Float32}...
    > 5-dimensional input, expanding along dimension 1
-- Testing Index2OnehotLayer on CPUBackend{Float64}...
    > 2-dimensional input, expanding along dimension 1
-- Testing Index2OnehotLayer on CPUBackend{Float64}...
    > 4-dimensional input, expanding along dimension 1
-- Testing Index2OnehotLayer on CPUBackend{Float64}...
    > 5-dimensional input, expanding along dimension 3
-- Testing IdentityLayer on CPUBackend{Float32}...
    > Setup
    > Forward
-- Testing IdentityLayer on CPUBackend{Float64}...
    > Setup
    > Forward
-- Testing HingeLossLayer on CPUBackend{Float32}...
    > (11,6,7,10)
-- Testing HingeLossLayer on CPUBackend{Float64}...
    > (8,6,10)
-- Testing HDF5 Output Layer on CPUBackend{Float32}...
    > (3,8,8,5)
WARNING: HDF5OutputLayer: output file '/tmp/Mocha-32648-c0nQKaoBkzMDYnH9833h7ldzJ2OZemtS.hdf5' already exists, overwriting
-- Testing HDF5 Output Layer on CPUBackend{Float64}...
    > (1,2,1)
WARNING: HDF5OutputLayer: output file '/tmp/Mocha-32648-tnG2dTst2YiGS0vLkeVZrSRgtsMXAlcA.hdf5' already exists, overwriting
-- Testing  HDF5 Data Layer on CPUBackend{Float32}...
    > (6,5,3,7,5)
-- Testing (Async) HDF5 Data Layer on CPUBackend{Float32}...
    > (7,3,8)
INFO: AsyncHDF5DataLayer: Stopping IO task...
INFO: AsyncHDF5DataLayer: IO Task reaching the end...
-- Testing  HDF5 Data Layer on CPUBackend{Float64}...
    > (7,4,2,2,7)
-- Testing (Async) HDF5 Data Layer on CPUBackend{Float64}...
    > (5,)
INFO: AsyncHDF5DataLayer: Stopping IO task...
INFO: AsyncHDF5DataLayer: IO Task reaching the end...
-- Testing  HDF5 Data Layer (shuffle,n=6,b=4) on CPUBackend{Float32}...
-- Testing (Async) HDF5 Data Layer (shuffle,n=6,b=4) on CPUBackend{Float32}...
INFO: AsyncHDF5DataLayer: Stopping IO task...
INFO: AsyncHDF5DataLayer: IO Task reaching the end...
-- Testing  HDF5 Data Layer (shuffle,n=4,b=6) on CPUBackend{Float32}...
-- Testing (Async) HDF5 Data Layer (shuffle,n=4,b=6) on CPUBackend{Float32}...
INFO: AsyncHDF5DataLayer: Stopping IO task...
INFO: AsyncHDF5DataLayer: IO Task reaching the end...
-- Testing  HDF5 Data Layer (shuffle,n=6,b=4) on CPUBackend{Float64}...
-- Testing (Async) HDF5 Data Layer (shuffle,n=6,b=4) on CPUBackend{Float64}...
INFO: AsyncHDF5DataLayer: Stopping IO task...
INFO: AsyncHDF5DataLayer: IO Task reaching the end...
-- Testing  HDF5 Data Layer (shuffle,n=4,b=6) on CPUBackend{Float64}...
-- Testing (Async) HDF5 Data Layer (shuffle,n=4,b=6) on CPUBackend{Float64}...
INFO: AsyncHDF5DataLayer: Stopping IO task...
INFO: AsyncHDF5DataLayer: IO Task reaching the end...
-- Testing GaussianKLLossLayer on CPUBackend{Float32}...
    > (8,11,9)
-- Testing GaussianKLLossLayer on CPUBackend{Float64}...
    > (6,9,6)
-- Testing ElementWiseLayer{Add()} on CPUBackend{Float32}...
    > (2,1,2,5,8)
-- Testing ElementWiseLayer{Subtract()} on CPUBackend{Float32}...
    > (6,)
-- Testing ElementWiseLayer{Multiply()} on CPUBackend{Float32}...
    > (8,6,2,8,2)
-- Testing ElementWiseLayer{Divide()} on CPUBackend{Float32}...
    > (2,2,7,5,3,4)
-- Testing ElementWiseLayer{Add()} on CPUBackend{Float64}...
    > (8,)
-- Testing ElementWiseLayer{Subtract()} on CPUBackend{Float64}...
    > (8,8,5,5,3,3)
-- Testing ElementWiseLayer{Multiply()} on CPUBackend{Float64}...
    > (2,8,6,1,1,5)
-- Testing ElementWiseLayer{Divide()} on CPUBackend{Float64}...
    > (3,3,5)
-- Testing Dropout on CPUBackend{Float64}...
    > (4,6)
    > Setup
    > Forward
    > Backward
-- Testing Dropout on CPUBackend{Float32}...
    > (4,3,8,1,3,7)
    > Setup
    > Forward
    > Backward
-- Testing CropLayer on CPUBackend{Float64} ...
    > Setup
    > Forward
-- Testing CropLayer on CPUBackend{Float64} with mirror...
    > Setup
    > Forward
-- Testing CropLayer{rnd} on CPUBackend{Float64} ...
    > Setup
    > Forward
-- Testing CropLayer{rnd} on CPUBackend{Float64} with mirror...
    > Setup
    > Forward
-- Testing CropLayer on CPUBackend{Float32} ...
    > Setup
    > Forward
-- Testing CropLayer on CPUBackend{Float32} with mirror...
    > Setup
    > Forward
-- Testing CropLayer{rnd} on CPUBackend{Float32} ...
    > Setup
    > Forward
-- Testing CropLayer{rnd} on CPUBackend{Float32} with mirror...
    > Setup
    > Forward
-- Testing Convolution(frozen=true) on CPUBackend{Float64} filter=(3,4)...
    > Setup
    > Forward
    > Backward
-- Testing Convolution(frozen=false) on CPUBackend{Float64} filter=(3,4)...
    > Setup
    > Forward
    > Backward
maximum(abs(grad_filter_exp - grad_filter_got)) => 3.637978807091713e-12
eps => 1.0e-5
-- Testing Convolution(frozen=true) on CPUBackend{Float64} filter=(1,1)...
    > Setup
    > Forward
    > Backward
-- Testing Convolution(frozen=false) on CPUBackend{Float64} filter=(1,1)...
    > Setup
    > Forward
    > Backward
maximum(abs(grad_filter_exp - grad_filter_got)) => 6.821210263296962e-12
eps => 1.0e-5
-- Testing Convolution(frozen=true) on CPUBackend{Float32} filter=(3,4)...
    > Setup
    > Forward
    > Backward
-- Testing Convolution(frozen=false) on CPUBackend{Float32} filter=(3,4)...
    > Setup
    > Forward
    > Backward
maximum(abs(grad_filter_exp - grad_filter_got)) => 0.0015869141f0
eps => 0.01
-- Testing Convolution(frozen=true) on CPUBackend{Float32} filter=(1,1)...
    > Setup
    > Forward
    > Backward
-- Testing Convolution(frozen=false) on CPUBackend{Float32} filter=(1,1)...
    > Setup
    > Forward
    > Backward
maximum(abs(grad_filter_exp - grad_filter_got)) => 0.0029296875f0
eps => 0.01
-- Testing ConcatLayer(dim=1) on CPUBackend{Float64}...
    > 5-dimensional tensor
    > Forward
    > Backward
-- Testing ConcatLayer(dim=2) on CPUBackend{Float64}...
    > 3-dimensional tensor
    > Forward
    > Backward
-- Testing ConcatLayer(dim=3) on CPUBackend{Float64}...
    > 3-dimensional tensor
    > Forward
    > Backward
-- Testing ConcatLayer(dim=4) on CPUBackend{Float64}...
    > 5-dimensional tensor
    > Forward
    > Backward
-- Testing ConcatLayer(dim=5) on CPUBackend{Float64}...
    > 5-dimensional tensor
    > Forward
    > Backward
-- Testing ConcatLayer(dim=1) on CPUBackend{Float32}...
    > 2-dimensional tensor
    > Forward
    > Backward
-- Testing ConcatLayer(dim=2) on CPUBackend{Float32}...
    > 2-dimensional tensor
    > Forward
    > Backward
-- Testing ConcatLayer(dim=3) on CPUBackend{Float32}...
    > 3-dimensional tensor
    > Forward
    > Backward
-- Testing ConcatLayer(dim=4) on CPUBackend{Float32}...
    > 4-dimensional tensor
    > Forward
    > Backward
-- Testing ConcatLayer(dim=5) on CPUBackend{Float32}...
    > 5-dimensional tensor
    > Forward
    > Backward
-- Testing ChannelPooling(Max) on CPUBackend{Float32}...
    > Setup (pool along dimension 1 for 2-D tensors)
    > Forward
    > Backward
-- Testing ChannelPooling(Max) on CPUBackend{Float32}...
    > Setup (pool along dimension 1 for 3-D tensors)
    > Forward
    > Backward
-- Testing ChannelPooling(Max) on CPUBackend{Float32}...
    > Setup (pool along dimension 1 for 4-D tensors)
    > Forward
    > Backward
-- Testing ChannelPooling(Max) on CPUBackend{Float32}...
    > Setup (pool along dimension 1 for 5-D tensors)
    > Forward
    > Backward
-- Testing ChannelPooling(Max) on CPUBackend{Float32}...
    > Setup (pool along dimension 2 for 6-D tensors)
    > Forward
    > Backward
-- Testing ChannelPooling(Mean) on CPUBackend{Float32}...
    > Setup (pool along dimension 1 for 2-D tensors)
    > Forward
    > Backward
-- Testing ChannelPooling(Mean) on CPUBackend{Float32}...
    > Setup (pool along dimension 2 for 3-D tensors)
    > Forward
    > Backward
-- Testing ChannelPooling(Mean) on CPUBackend{Float32}...
    > Setup (pool along dimension 1 for 4-D tensors)
    > Forward
    > Backward
-- Testing ChannelPooling(Mean) on CPUBackend{Float32}...
    > Setup (pool along dimension 2 for 5-D tensors)
    > Forward
    > Backward
-- Testing ChannelPooling(Mean) on CPUBackend{Float32}...
    > Setup (pool along dimension 2 for 6-D tensors)
    > Forward
    > Backward
-- Testing ChannelPooling(Max) on CPUBackend{Float64}...
    > Setup (pool along dimension 1 for 2-D tensors)
    > Forward
    > Backward
-- Testing ChannelPooling(Max) on CPUBackend{Float64}...
    > Setup (pool along dimension 2 for 3-D tensors)
    > Forward
    > Backward
-- Testing ChannelPooling(Max) on CPUBackend{Float64}...
    > Setup (pool along dimension 1 for 4-D tensors)
    > Forward
    > Backward
-- Testing ChannelPooling(Max) on CPUBackend{Float64}...
    > Setup (pool along dimension 4 for 5-D tensors)
    > Forward
    > Backward
-- Testing ChannelPooling(Max) on CPUBackend{Float64}...
    > Setup (pool along dimension 1 for 6-D tensors)
    > Forward
    > Backward
-- Testing ChannelPooling(Mean) on CPUBackend{Float64}...
    > Setup (pool along dimension 1 for 2-D tensors)
    > Forward
    > Backward
-- Testing ChannelPooling(Mean) on CPUBackend{Float64}...
    > Setup (pool along dimension 1 for 3-D tensors)
    > Forward
    > Backward
-- Testing ChannelPooling(Mean) on CPUBackend{Float64}...
    > Setup (pool along dimension 2 for 4-D tensors)
    > Forward
    > Backward
-- Testing ChannelPooling(Mean) on CPUBackend{Float64}...
    > Setup (pool along dimension 1 for 5-D tensors)
    > Forward
    > Backward
-- Testing ChannelPooling(Mean) on CPUBackend{Float64}...
    > Setup (pool along dimension 5 for 6-D tensors)
    > Forward
    > Backward
-- Testing BinaryCrossEntropyLossLayer on CPUBackend{Float32}...
    > [5,5]
-- Testing BinaryCrossEntropyLossLayer on CPUBackend{Float32}...
    > [5,4,7,5]
-- Testing BinaryCrossEntropyLossLayer on CPUBackend{Float32}...
    > [3,4,4,7,3]
-- Testing BinaryCrossEntropyLossLayer on CPUBackend{Float64}...
    > [7,2]
-- Testing BinaryCrossEntropyLossLayer on CPUBackend{Float64}...
    > [2,2,4,3]
-- Testing BinaryCrossEntropyLossLayer on CPUBackend{Float64}...
    > [5,6,4,2,4]
-- Testing BinaryAccuracyLayer on CPUBackend{Float32}...
    > (8,10)
    > Forward
    > Forward Again
    > Forward Again and Again
-- Testing BinaryAccuracyLayer on CPUBackend{Float32}...
    > (10,6)
    > Forward
    > Forward Again
    > Forward Again and Again
-- Testing BinaryAccuracyLayer on CPUBackend{Float32}...
    > (7,8,7,10)
    > Forward
    > Forward Again
    > Forward Again and Again
-- Testing BinaryAccuracyLayer on CPUBackend{Float32}...
    > (7,9,10,9)
    > Forward
    > Forward Again
    > Forward Again and Again
-- Testing BinaryAccuracyLayer on CPUBackend{Float32}...
    > (11,7,11,6,10)
    > Forward
    > Forward Again
    > Forward Again and Again
-- Testing BinaryAccuracyLayer on CPUBackend{Float32}...
    > (9,11,11,10,10)
    > Forward
    > Forward Again
    > Forward Again and Again
-- Testing BinaryAccuracyLayer on CPUBackend{Float64}...
    > (7,8)
    > Forward
    > Forward Again
    > Forward Again and Again
-- Testing BinaryAccuracyLayer on CPUBackend{Float64}...
    > (8,6)
    > Forward
    > Forward Again
    > Forward Again and Again
-- Testing BinaryAccuracyLayer on CPUBackend{Float64}...
    > (9,10,6,10)
    > Forward
    > Forward Again
    > Forward Again and Again
-- Testing BinaryAccuracyLayer on CPUBackend{Float64}...
    > (7,9,6,8)
    > Forward
    > Forward Again
    > Forward Again and Again
-- Testing BinaryAccuracyLayer on CPUBackend{Float64}...
    > (6,9,9,9,11)
    > Forward
    > Forward Again
    > Forward Again and Again
-- Testing BinaryAccuracyLayer on CPUBackend{Float64}...
    > (11,8,10,7,7)
    > Forward
    > Forward Again
    > Forward Again and Again
-- Testing ArgmaxLayer on CPUBackend{Float64}...
    > 2-dimensional tensor
    > Setup
    > Forward
-- Testing ArgmaxLayer on CPUBackend{Float64}...
    > 4-dimensional tensor
    > Setup
    > Forward
-- Testing ArgmaxLayer on CPUBackend{Float64}...
    > 5-dimensional tensor
    > Setup
    > Forward
-- Testing ArgmaxLayer on CPUBackend{Float32}...
    > 2-dimensional tensor
    > Setup
    > Forward
-- Testing ArgmaxLayer on CPUBackend{Float32}...
    > 4-dimensional tensor
    > Setup
    > Forward
-- Testing ArgmaxLayer on CPUBackend{Float32}...
    > 5-dimensional tensor
    > Setup
    > Forward
-- Testing AccuracyLayer on CPUBackend{Float32}...
    > (6,6) (operate on dimension 1)
    > Forward
    > Forward Again
    > Forward Again and Again
-- Testing AccuracyLayer on CPUBackend{Float32}...
    > (7,11,10,10) (operate on dimension 1)
    > Forward
    > Forward Again
    > Forward Again and Again
-- Testing AccuracyLayer on CPUBackend{Float32}...
    > (10,9,6,8,11) (operate on dimension 1)
    > Forward
    > Forward Again
    > Forward Again and Again
-- Testing AccuracyLayer on CPUBackend{Float64}...
    > (6,9) (operate on dimension 1)
    > Forward
    > Forward Again
    > Forward Again and Again
-- Testing AccuracyLayer on CPUBackend{Float64}...
    > (11,8,7,9) (operate on dimension 2)
    > Forward
    > Forward Again
    > Forward Again and Again
-- Testing AccuracyLayer on CPUBackend{Float64}...
    > (11,11,8,8,10) (operate on dimension 1)
    > Forward
    > Forward Again
    > Forward Again and Again
INFO: Mocha tests passed
INFO: No packages to install, update or remove

>>> End of log
