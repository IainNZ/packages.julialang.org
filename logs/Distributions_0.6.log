>>> 'Pkg.add("Distributions")' log
INFO: Installing BinDeps v0.8.2
INFO: Installing Calculus v0.2.2
INFO: Installing DataStructures v0.7.4
INFO: Installing Distributions v0.15.0
INFO: Installing PDMats v0.8.0
INFO: Installing QuadGK v0.2.0
INFO: Installing Rmath v0.3.1
INFO: Installing SHA v0.5.2
INFO: Installing SortingAlgorithms v0.2.0
INFO: Installing SpecialFunctions v0.3.7
INFO: Installing StatsBase v0.19.5
INFO: Installing StatsFuns v0.5.0
INFO: Installing URIParser v0.3.0
INFO: Building SpecialFunctions
INFO: Building Rmath
INFO: Package database updated
INFO: METADATA is out-of-date — you may not have the latest version of Distributions
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("Distributions")' log
Julia Version 0.6.2
Commit d386e40c17 (2017-12-13 18:08 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-135-generic #184-Ubuntu SMP Wed Oct 18 11:55:51 UTC 2017 x86_64 x86_64
Memory: 2.93927001953125 GB (1938.21484375 MB free)
Uptime: 60769.0 sec
Load Avg:  1.125  1.27490234375  1.20703125
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz    3953861 s       1290 s     175214 s     988337 s         26 s
#2  3499 MHz     895504 s       5653 s     103298 s    4944681 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.6
2 required packages:
 - Distributions                 0.15.0
 - JSON                          0.16.3
14 additional packages:
 - BinDeps                       0.8.2
 - Calculus                      0.2.2
 - Compat                        0.43.0
 - DataStructures                0.7.4
 - Nullables                     0.0.2
 - PDMats                        0.8.0
 - QuadGK                        0.2.0
 - Rmath                         0.3.1
 - SHA                           0.5.2
 - SortingAlgorithms             0.2.0
 - SpecialFunctions              0.3.7
 - StatsBase                     0.19.5
 - StatsFuns                     0.5.0
 - URIParser                     0.3.0
INFO: Computing test dependencies for Distributions...
INFO: Installing CommonSubexpressions v0.0.1
INFO: Installing DiffResults v0.0.2
INFO: Installing DiffRules v0.0.2
INFO: Installing ForwardDiff v0.7.0
INFO: Installing NaNMath v0.3.0
INFO: Installing StaticArrays v0.6.6
INFO: Building SpecialFunctions
INFO: Testing Distributions
Running tests:
	From worker 2:	    testing Distributions.CategoricalDirectSampler
	From worker 2:	    testing Distributions.AliasTable
	From worker 2:	    testing Distributions.BinomialGeomSampler
	From worker 2:	    testing Distributions.BinomialTPESampler
	From worker 2:	    testing Distributions.BinomialPolySampler
	From worker 2:	    testing Distributions.BinomialAliasSampler
	From worker 3:	    testing Distributions.Categorical{Float64}(K=2, p=[0.5, 0.5])
	From worker 2:	    testing Distributions.PoissonCountSampler
	From worker 2:	    testing Distributions.PoissonADSampler
	From worker 3:	    testing Distributions.Categorical{Float64}(K=4, p=[0.1, 0.3, 0.2, 0.4])
	From worker 3:	    testing Distributions.Categorical{Float64}(K=3, p=[0.15, 0.25, 0.6])
	From worker 2:	    testing Distributions.PoissBinAliasSampler
	From worker 3:	    [Discrete]
	From worker 3:	    ------------
	From worker 3:	    testing Bernoulli()
	From worker 2:	    testing Distributions.ExponentialSampler
	From worker 3:	    testing Bernoulli(0.25)
	From worker 3:	    testing Bernoulli(0.75)
	From worker 3:	    testing Bernoulli(0.0)
	From worker 2:	    testing Distributions.GammaGDSampler
	From worker 3:	    testing Bernoulli(1.0)
	From worker 3:	    testing BetaBinomial(2, 0.2, 0.25)
	From worker 2:	    testing Distributions.GammaMTSampler
	From worker 2:	    testing Distributions.GammaGSSampler
	From worker 2:	    testing Distributions.GammaIPSampler
	From worker 3:	    testing BetaBinomial(10, 0.2, 0.25)
	From worker 2:	    testing Distributions.Biweight{Float64}(μ=0.0, σ=1.0)
	From worker 2:	    testing Distributions.Biweight{Float64}(μ=1.0, σ=3.0)
	From worker 2:	    testing Distributions.Epanechnikov{Float64}(μ=0.0, σ=1.0)
	From worker 2:	    testing Distributions.Epanechnikov{Float64}(μ=1.0, σ=3.0)
	From worker 2:	    testing Distributions.Triweight{Float64}(μ=0.0, σ=1.0)
	From worker 2:	    testing Distributions.Triweight{Float64}(μ=2.0, σ=1.0)
	From worker 2:	    testing Distributions.Triweight{Float64}(μ=1.0, σ=3.0)
	From worker 2:	    testing Distributions.Triweight{Float64}(μ=1.0, σ=1.0)
	From worker 3:	    testing BetaBinomial(10, 2, 2.5)
	From worker 3:	    testing BetaBinomial(10, 60, 40)
	From worker 2:	   testing PoissonBinomial p=0.8, n=6
	From worker 2:	   testing PoissonBinomial p=0.5, n=10
	From worker 2:	   testing PoissonBinomial p=0.04, n=20
	From worker 2:	   testing PoissonBinomial [10 × 0.1, 10 × 0.5, 10 × 0.9]
	From worker 2:	   testing PoissonBinomial [1 × 0.99, 10 × 0.1, 100 × 0.05]
	From worker 2:	   testing PoissonBinomial [5 × 0.01, 1 × 0.99, 3 × 0.999]
	From worker 2:	   testing PoissonBinomial [10 × 0.0, 7 × 0.9, 10 × 0.5]
	From worker 2:	Test Summary: | Pass  Total
	From worker 2:	_dft          |    1      1
	From worker 3:	    testing Binomial()
	From worker 3:	    testing Binomial(3)
	From worker 3:	    testing Binomial(5, 0.4)
	From worker 3:	    testing Binomial(6, 0.8)
	From worker 3:	    testing Binomial(100, 0.1)
	From worker 3:	    testing Binomial(100, 0.9)
	From worker 3:	    testing Binomial(10, 0.0)
	From worker 3:	    testing Binomial(10, 1.0)
	From worker 3:	    testing DiscreteUniform()
	From worker 3:	    testing DiscreteUniform(6)
	From worker 3:	    testing DiscreteUniform(7)
	From worker 3:	    testing DiscreteUniform(0, 4)
	From worker 3:	    testing DiscreteUniform(2, 8)
	From worker 3:	    testing Geometric()
	From worker 3:	    testing Geometric(0.02)
	From worker 3:	    testing Geometric(0.1)
	From worker 3:	    testing Geometric(0.5)
	From worker 3:	    testing Geometric(0.9)
	From worker 3:	    testing Hypergeometric(2, 2, 2)
	From worker 3:	    testing Hypergeometric(3, 2, 2)
	From worker 3:	    testing Hypergeometric(3, 2, 0)
	From worker 3:	    testing Hypergeometric(3, 2, 5)
	From worker 3:	    testing Hypergeometric(4, 5, 6)
	From worker 3:	    testing Hypergeometric(60, 80, 100)
	From worker 2:	    testing IsoNormal
	From worker 3:	    testing NegativeBinomial()
	From worker 3:	    testing NegativeBinomial(6)
	From worker 3:	    testing NegativeBinomial(1, 0.5)
	From worker 3:	    testing NegativeBinomial(5, 0.6)
	From worker 2:	    testing ZeroMeanIsoNormal
	From worker 3:	    testing NegativeBinomial(0.5, 0.5)
	From worker 3:	    testing Poisson()
	From worker 2:	    testing DiagNormal
	From worker 2:	    testing ZeroMeanDiagNormal
	From worker 2:	    testing FullNormal
	From worker 3:	    testing Poisson(0.0)
	From worker 3:	    testing Poisson(0.5)
	From worker 3:	    testing Poisson(2.0)
	From worker 3:	    testing Poisson(10.0)
	From worker 3:	    testing Poisson(80.0)
	From worker 3:	    testing Skellam()
	From worker 3:	    testing Skellam(2.0)
	From worker 3:	    testing Skellam(2.0, 3.0)
	From worker 3:	    testing Skellam(3.2, 1.8)
	From worker 3:	    testing FisherNoncentralHypergeometric(8, 6, 10, 1)
	From worker 3:	    testing FisherNoncentralHypergeometric(8, 6, 10, 10)
	From worker 3:	    testing FisherNoncentralHypergeometric(8, 6, 10, 0.1)
	From worker 3:	    testing FisherNoncentralHypergeometric(80, 60, 100, 1)
	From worker 3:	    testing FisherNoncentralHypergeometric(80, 60, 100, 10)
	From worker 3:	    testing FisherNoncentralHypergeometric(80, 60, 100, 0.1)
	From worker 3:	    testing WalleniusNoncentralHypergeometric(8, 6, 10, 1)
	From worker 2:	    testing ZeroMeanFullNormal
	From worker 2:	    testing IsoNormalCanon
	From worker 2:	    testing ZeroMeanIsoNormalCanon
	From worker 2:	    testing DiagNormalCanon
	From worker 2:	    testing ZeroMeanDiagormalCanon
	From worker 2:	    testing FullNormalCanon
	From worker 2:	    testing ZeroMeanFullNormalCanon
	From worker 2:	    testing fit_mle
	From worker 2:	    comparing results from MvLogNormal with univariate LogNormal
	From worker 2:	    testing Distributions.MvLogNormal{Float64,PDMats.PDMat{Float64,Array{Float64,2}},Array{Float64,1}} with normal distribution FullNormal
	From worker 3:	    testing WalleniusNoncentralHypergeometric(8, 6, 10, 10)
	From worker 3:	    testing WalleniusNoncentralHypergeometric(8, 6, 10, 0.1)
	From worker 3:	    testing WalleniusNoncentralHypergeometric(40, 30, 50, 1)
	From worker 3:	    testing WalleniusNoncentralHypergeometric(40, 30, 50, 0.5)
	From worker 2:	    testing Distributions.MvLogNormal{Float64,PDMats.PDiagMat{Float64,Array{Float64,1}},Distributions.ZeroVector{Float64}} with normal distribution ZeroMeanDiagNormal
	From worker 3:	    testing WalleniusNoncentralHypergeometric(40, 30, 50, 2)
	From worker 3:	
	From worker 3:	    [Continuous]
	From worker 3:	    ------------
	From worker 3:	    testing Arcsine()
	From worker 2:	    testing Distributions.MvLogNormal{Float64,PDMats.ScalMat{Float64},Array{Float64,1}} with normal distribution IsoNormal
	From worker 2:	    testing Distributions.MvLogNormal{Float64,PDMats.ScalMat{Float64},Distributions.ZeroVector{Float64}} with normal distribution ZeroMeanIsoNormal
	From worker 3:	    testing Arcsine(2.0)
	From worker 3:	    testing Arcsine(1.0, 2.5)
	From worker 3:	    testing Arcsine(-1.0, 1.0)
	From worker 3:	    testing Beta(2.0, 2.0)
	From worker 2:	    testing Distributions.MvLogNormal{Float64,PDMats.PDiagMat{Float64,Array{Float64,1}},Array{Float64,1}} with normal distribution DiagNormal
	From worker 3:	    testing Beta(3.0, 4.0)
	From worker 3:	    testing Beta(17.0, 13.0)
	From worker 2:	    testing Distributions.MvLogNormal{Float64,PDMats.PDiagMat{Float64,Array{Float64,1}},Distributions.ZeroVector{Float64}} with normal distribution ZeroMeanDiagNormal
	From worker 2:	    testing Distributions.MvLogNormal{Float64,PDMats.PDMat{Float64,Array{Float64,2}},Array{Float64,1}} with normal distribution FullNormal
	From worker 2:	    testing Distributions.MvLogNormal{Float64,PDMats.PDMat{Float64,Array{Float64,2}},Distributions.ZeroVector{Float64}} with normal distribution ZeroMeanFullNormal
	From worker 3:	    testing BetaPrime()
	From worker 3:	    testing BetaPrime(3.0)
	From worker 3:	    testing BetaPrime(3.0, 5.0)
	From worker 3:	    testing BetaPrime(5.0, 3.0)
	From worker 3:	    testing Cauchy()
	From worker 3:	    testing Cauchy(2.0)
	From worker 3:	    testing Cauchy(0.0, 1.0)
	From worker 3:	    testing Cauchy(10.0, 1.0)
	From worker 3:	    testing Cauchy(2.0, 10.0)
	From worker 3:	    testing Chi(1)
	From worker 3:	    testing Chi(2)
	From worker 3:	    testing Chi(3)
	From worker 3:	    testing Chi(12)
	From worker 3:	    testing Chisq(1)
	From worker 2:	    testing UnivariateMixture
	From worker 3:	    testing Chisq(8)
	From worker 3:	    testing Chisq(20)
	From worker 3:	    testing Cosine()
	From worker 3:	    testing Cosine(1.5)
	From worker 2:	    testing MultivariateMixture
	From worker 3:	    testing Cosine(2.0, 2.8)
	From worker 3:	    testing Erlang()
	From worker 3:	    testing Erlang(3)
	From worker 3:	    testing Erlang(3, 1.0)
	From worker 2:	g = MixtureModel{Distributions.MvNormal{Float64,PDMats.ScalMat{Float64},Array{Float64,1}}}(K = 3)
	From worker 2:	components[1] (prior = 0.2000): IsoNormal(
	From worker 2:	dim: 2
	From worker 2:	μ: [0.0, 0.0]
	From worker 2:	Σ: [1.0 0.0; 0.0 1.0]
	From worker 2:	)
	From worker 2:	
	From worker 2:	components[2] (prior = 0.5000): IsoNormal(
	From worker 2:	dim: 2
	From worker 2:	μ: [0.2, 1.0]
	From worker 2:	Σ: [1.0 0.0; 0.0 1.0]
	From worker 2:	)
	From worker 2:	
	From worker 2:	components[3] (prior = 0.3000): IsoNormal(
	From worker 2:	dim: 2
	From worker 2:	μ: [-0.5, -3.0]
	From worker 2:	Σ: [2.56 0.0; 0.0 2.56]
	From worker 2:	)
	From worker 2:	
	From worker 2:	
	From worker 2:	size(X) = (2, 1000)
	From worker 2:	size(mix_p0) = (1000,)
	From worker 3:	    testing Erlang(5, 2.0)
	From worker 3:	    testing Exponential()
	From worker 2:	    [Discrete]
	From worker 2:	    ------------
	From worker 2:	    testing Truncated(BetaBinomial(10, 0.2, 0.25),3,5)
	From worker 3:	    testing Exponential(2.0)
	From worker 3:	    testing Exponential(6.5)
	From worker 3:	    testing FDist(6.0, 8.0)
	From worker 2:	    testing Truncated(BetaBinomial(10, 2, 2.5),3,5)
	From worker 2:	    testing Truncated(BetaBinomial(10, 60, 40),3,5)
	From worker 2:	    testing Truncated(Binomial(5, 0.4),3,5)
	From worker 2:	    testing Truncated(Binomial(6, 0.8),3,5)
	From worker 2:	    testing Truncated(Binomial(100, 0.1),3,5)
	From worker 2:	    testing Truncated(Binomial(100, 0.9),3,5)
	From worker 2:	    testing Truncated(Binomial(10, 0.0),3,5)
	From worker 2:	    testing Truncated(Binomial(10, 1.0),3,5)
	From worker 2:	    testing Truncated(DiscreteUniform(6),3,5)
	From worker 2:	    testing Truncated(DiscreteUniform(7),3,5)
	From worker 2:	    testing Truncated(DiscreteUniform(2, 8),3,5)
	From worker 2:	    testing Truncated(Geometric(),3,5)
	From worker 2:	    testing Truncated(Geometric(0.02),3,5)
	From worker 2:	    testing Truncated(Geometric(0.1),3,5)
	From worker 2:	    testing Truncated(Geometric(0.5),3,5)
	From worker 2:	    testing Truncated(Geometric(0.9),3,5)
	From worker 2:	    testing Truncated(NegativeBinomial(),3,5)
	From worker 2:	    testing Truncated(NegativeBinomial(6),3,5)
	From worker 2:	    testing Truncated(NegativeBinomial(1, 0.5),3,5)
	From worker 2:	    testing Truncated(NegativeBinomial(5, 0.6),3,5)
	From worker 2:	    testing Truncated(NegativeBinomial(0.5, 0.5),3,5)
	From worker 2:	    testing Truncated(Poisson(),3,5)
	From worker 2:	    testing Truncated(Poisson(0.5),3,5)
	From worker 2:	    testing Truncated(Poisson(2.0),3,5)
	From worker 2:	    testing Truncated(Poisson(10.0),3,5)
	From worker 2:	    testing Truncated(Poisson(80.0),3,5)
	From worker 3:	    testing FDist(8.0, 6.0)
	From worker 2:	
	From worker 2:	    [Continuous]
	From worker 2:	    ------------
	From worker 2:	    testing Truncated(BetaPrime(),3,5)
	From worker 3:	    testing FDist(30, 40)
	From worker 2:	    testing Truncated(BetaPrime(3.0),3,5)
	From worker 2:	    testing Truncated(BetaPrime(3.0, 5.0),3,5)
	From worker 2:	    testing Truncated(BetaPrime(5.0, 3.0),3,5)
	From worker 2:	    testing Truncated(Cauchy(),3,5)
	From worker 3:	    testing Frechet()
	From worker 2:	    testing Truncated(Cauchy(2.0),3,5)
	From worker 2:	    testing Truncated(Cauchy(0.0, 1.0),3,5)
	From worker 2:	    testing Truncated(Cauchy(10.0, 1.0),3,5)
	From worker 2:	    testing Truncated(Cauchy(2.0, 10.0),3,5)
	From worker 2:	    testing Truncated(Chi(1),3,5)
	From worker 2:	    testing Truncated(Chi(2),3,5)
	From worker 2:	    testing Truncated(Chi(3),3,5)
	From worker 2:	    testing Truncated(Chi(12),3,5)
	From worker 2:	    testing Truncated(Chisq(1),3,5)
	From worker 2:	    testing Truncated(Chisq(8),3,5)
	From worker 2:	    testing Truncated(Chisq(20),3,5)
	From worker 2:	    testing Truncated(Erlang(),3,5)
	From worker 2:	    testing Truncated(Erlang(3),3,5)
	From worker 2:	    testing Truncated(Erlang(3, 1.0),3,5)
	From worker 2:	    testing Truncated(Erlang(5, 2.0),3,5)
	From worker 2:	    testing Truncated(Exponential(),3,5)
	From worker 3:	    testing Frechet(0.5)
	From worker 3:	    testing Frechet(3.0)
	From worker 2:	    testing Truncated(Exponential(2.0),3,5)
	From worker 2:	    testing Truncated(Exponential(6.5),3,5)
	From worker 2:	    testing Truncated(FDist(6.0, 8.0),3,5)
	From worker 3:	    testing Frechet(20.0)
	From worker 2:	    testing Truncated(FDist(8.0, 6.0),3,5)
	From worker 2:	    testing Truncated(FDist(30, 40),3,5)
	From worker 3:	    testing Frechet(60.0)
	From worker 2:	    testing Truncated(Frechet(),3,5)
	From worker 3:	    testing Frechet(0.5, 2.0)
	From worker 3:	    testing Frechet(3.0, 2.0)
	From worker 2:	    testing Truncated(Frechet(0.5),3,5)
	From worker 2:	    testing Truncated(Frechet(3.0),3,5)
	From worker 2:	    testing Truncated(Frechet(20.0),3,5)
	From worker 2:	    testing Truncated(Frechet(60.0),3,5)
	From worker 2:	    testing Truncated(Frechet(0.5, 2.0),3,5)
	From worker 2:	    testing Truncated(Frechet(3.0, 2.0),3,5)
	From worker 2:	    testing Truncated(Gamma(),3,5)
	From worker 3:	    testing Gamma()
	From worker 2:	    testing Truncated(Gamma(2.0),3,5)
	From worker 2:	    testing Truncated(Gamma(1.0, 1.0),3,5)
	From worker 2:	    testing Truncated(Gamma(3.0, 1.0),3,5)
	From worker 2:	    testing Truncated(Gamma(3.0, 2.0),3,5)
	From worker 2:	    testing Truncated(GeneralizedExtremeValue(1.0, 1.0, 1.0),3,5)
	From worker 2:	    testing Truncated(GeneralizedExtremeValue(0.0, 1.0, 0.0),3,5)
	From worker 2:	    testing Truncated(GeneralizedExtremeValue(0.0, 1.0, 1.1),3,5)
	From worker 2:	    testing Truncated(GeneralizedExtremeValue(0.0, 1.0, 0.6),3,5)
	From worker 2:	    testing Truncated(GeneralizedExtremeValue(0.0, 1.0, 0.3),3,5)
	From worker 2:	    testing Truncated(GeneralizedExtremeValue(-1.0, 0.5, 0.6),3,5)
	From worker 2:	    testing Truncated(GeneralizedPareto(),3,5)
	From worker 2:	    testing Truncated(GeneralizedPareto(1.0, 1.0),3,5)
	From worker 2:	    testing Truncated(GeneralizedPareto(0.1, 2.0),3,5)
	From worker 2:	    testing Truncated(GeneralizedPareto(1.0, 1.0, 1.0),3,5)
	From worker 2:	    testing Truncated(GeneralizedPareto(-1.5, 0.5, 2.0),3,5)
	From worker 2:	    testing Truncated(Gumbel(),3,5)
	From worker 2:	    testing Truncated(Gumbel(3.0),3,5)
	From worker 2:	    testing Truncated(Gumbel(3.0, 5.0),3,5)
	From worker 2:	    testing Truncated(Gumbel(5.0, 3.0),3,5)
	From worker 3:	    testing Gamma(2.0)
	From worker 2:	    testing Truncated(InverseGamma(),3,5)
	From worker 3:	    testing Gamma(1.0, 1.0)
	From worker 2:	    testing Truncated(InverseGamma(2.0),3,5)
	From worker 2:	    testing Truncated(InverseGamma(1.0, 1.0),3,5)
	From worker 2:	    testing Truncated(InverseGamma(1.0, 2.0),3,5)
	From worker 2:	    testing Truncated(InverseGamma(2.0, 1.0),3,5)
	From worker 2:	    testing Truncated(InverseGamma(2.0, 3.0),3,5)
	From worker 2:	    testing Truncated(InverseGaussian(),3,5)
	From worker 3:	    testing Gamma(3.0, 1.0)
	From worker 2:	    testing Truncated(InverseGaussian(0.8),3,5)
	From worker 2:	    testing Truncated(InverseGaussian(2.0),3,5)
	From worker 2:	    testing Truncated(InverseGaussian(1.0, 1.0),3,5)
	From worker 2:	    testing Truncated(InverseGaussian(2.0, 1.5),3,5)
	From worker 2:	    testing Truncated(InverseGaussian(2.0, 7.0),3,5)
	From worker 2:	    testing Truncated(Laplace(),3,5)
	From worker 3:	    testing Gamma(3.0, 2.0)
	From worker 2:	    testing Truncated(Laplace(2.0),3,5)
	From worker 2:	    testing Truncated(Laplace(0.0, 1.0),3,5)
	From worker 2:	    testing Truncated(Laplace(5.0, 1.0),3,5)
	From worker 2:	    testing Truncated(Laplace(5.0, 1.5),3,5)
	From worker 2:	    testing Truncated(Levy(),3,5)
	From worker 3:	    testing GeneralizedExtremeValue(1.0, 1.0, 1.0)
	From worker 2:	    testing Truncated(Levy(2),3,5)
	From worker 2:	    testing Truncated(Levy(2, 8),3,5)
	From worker 2:	    testing Truncated(Levy(3.0, 3),3,5)
	From worker 2:	    testing Truncated(Logistic(),3,5)
	From worker 2:	    testing Truncated(Logistic(2.0),3,5)
	From worker 2:	    testing Truncated(Logistic(0.0, 1.0),3,5)
	From worker 2:	    testing Truncated(Logistic(5.0, 1.0),3,5)
	From worker 2:	    testing Truncated(Logistic(2.0, 1.5),3,5)
	From worker 2:	    testing Truncated(Logistic(5.0, 1.5),3,5)
	From worker 2:	    testing Truncated(LogNormal(),3,5)
	From worker 2:	    testing Truncated(LogNormal(1.0),3,5)
	From worker 2:	    testing Truncated(LogNormal(0.0, 2.0),3,5)
	From worker 2:	    testing Truncated(LogNormal(1.0, 2.0),3,5)
	From worker 2:	    testing Truncated(LogNormal(3.0, 0.5),3,5)
	From worker 2:	    testing Truncated(LogNormal(3.0, 1.0),3,5)
	From worker 2:	    testing Truncated(LogNormal(3.0, 2.0),3,5)
	From worker 2:	    testing Truncated(NoncentralChisq(2, 2),3,5)
	From worker 2:	    testing Truncated(NoncentralChisq(2, 5),3,5)
	From worker 2:	    testing Truncated(NoncentralF(2, 2, 2),3,5)
	From worker 2:	    testing Truncated(NoncentralF(8, 10, 5),3,5)
	From worker 2:	    testing Truncated(NoncentralT(2, 2),3,5)
	From worker 2:	    testing Truncated(NoncentralT(10, 2),3,5)
	From worker 2:	    testing Truncated(Normal(),3,5)
	From worker 2:	    testing Truncated(Normal(2.0),3,5)
	From worker 2:	    testing Truncated(Normal(-3.0, 2.0),3,5)
	From worker 2:	    testing Truncated(Normal(1.0, 10.0),3,5)
	From worker 2:	    testing Truncated(NormalCanon(),3,5)
	From worker 3:	    testing GeneralizedExtremeValue(0.0, 1.0, 0.0)
	From worker 3:	    testing GeneralizedExtremeValue(0.0, 1.0, 1.1)
	From worker 2:	    testing Truncated(NormalCanon(0.0, 1.0),3,5)
	From worker 2:	    testing Truncated(NormalCanon(-1.0, 2.5),3,5)
	From worker 2:	    testing Truncated(NormalCanon(2.0, 0.8),3,5)
	From worker 2:	    testing Truncated(Pareto(),3,5)
	From worker 3:	    testing GeneralizedExtremeValue(0.0, 1.0, 0.6)
	From worker 2:	    testing Truncated(Pareto(2.0),3,5)
	From worker 2:	    testing Truncated(Pareto(2.0, 1.5),3,5)
	From worker 2:	    testing Truncated(Pareto(3.0, 2.0),3,5)
	From worker 2:	    testing Truncated(Rayleigh(),3,5)
	From worker 3:	    testing GeneralizedExtremeValue(0.0, 1.0, 0.3)
	From worker 2:	    testing Truncated(Rayleigh(3.0),3,5)
	From worker 2:	    testing Truncated(Rayleigh(8.0),3,5)
	From worker 2:	    testing Truncated(SymTriangularDist(3.0, 2.0),3,5)
	From worker 3:	    testing GeneralizedExtremeValue(1.0, 1.0, -1.0)
	From worker 3:	    testing GeneralizedExtremeValue(-1.0, 0.5, 0.6)
	From worker 2:	    testing Truncated(SymTriangularDist(10.0, 8.0),3,5)
	From worker 2:	    testing Truncated(TDist(1.2),3,5)
	From worker 3:	    testing GeneralizedPareto()
	From worker 2:	    testing Truncated(TDist(5.0),3,5)
	From worker 2:	    testing Truncated(TDist(28.0),3,5)
	From worker 2:	    testing Truncated(TriangularDist(0, 5),3,5)
	From worker 2:	    testing Truncated(TriangularDist(-4, 14, 3),3,5)
	From worker 2:	    testing Truncated(TriangularDist(2, 2000, 500),3,5)
	From worker 2:	    testing Truncated(TruncatedNormal(27, 3, 0, Inf),3,5)
	From worker 2:	    testing Truncated(Uniform(3.0, 17.0),3,5)
	From worker 2:	    testing Truncated(Weibull(),3,5)
	From worker 2:	    testing Truncated(Weibull(0.5),3,5)
	From worker 2:	    testing Truncated(Weibull(5.0),3,5)
	From worker 2:	    testing Truncated(Weibull(20.0, 1.0),3,5)
	From worker 2:	    testing Truncated(Weibull(1.0, 2.0),3,5)
	From worker 2:	    testing Truncated(Weibull(5.0, 2.0),3,5)
	From worker 2:	
	From worker 3:	    testing GeneralizedPareto(1.0, 1.0)
	From worker 2:	Test Summary:               | Pass  Total
	From worker 2:	non-central T-Distributions |    5      5
	From worker 2:		testing LocationScale
	From worker 3:	    testing GeneralizedPareto(0.1, 2.0)
	From worker 3:	    testing GeneralizedPareto(1.0, 1.0, 1.0)
	From worker 3:	    testing GeneralizedPareto(-1.5, 0.5, 2.0)
	From worker 3:	    testing Gumbel()
	From worker 3:	    testing Gumbel(3.0)
	From worker 3:	    testing Gumbel(3.0, 5.0)
	From worker 3:	    testing Gumbel(5.0, 3.0)
	From worker 3:	    testing InverseGamma()
	From worker 3:	    testing InverseGamma(2.0)
	From worker 3:	    testing InverseGamma(1.0, 1.0)
	From worker 3:	    testing InverseGamma(1.0, 2.0)
	From worker 3:	    testing InverseGamma(2.0, 1.0)
	From worker 3:	    testing InverseGamma(2.0, 3.0)
	From worker 3:	    testing InverseGaussian()
	From worker 3:	    testing InverseGaussian(0.8)
	From worker 3:	    testing InverseGaussian(2.0)
	From worker 3:	    testing InverseGaussian(1.0, 1.0)
	From worker 3:	    testing InverseGaussian(2.0, 1.5)
	From worker 3:	    testing InverseGaussian(2.0, 7.0)
	From worker 3:	    testing Laplace()
	From worker 3:	    testing Laplace(2.0)
	From worker 3:	    testing Laplace(0.0, 1.0)
	From worker 3:	    testing Laplace(5.0, 1.0)
	From worker 3:	    testing Laplace(5.0, 1.5)
	From worker 3:	    testing Levy()
	From worker 3:	    testing Levy(2)
	From worker 3:	    testing Levy(2, 8)
	From worker 3:	    testing Levy(3.0, 3)
	From worker 3:	    testing Logistic()
	From worker 3:	    testing Logistic(2.0)
	From worker 3:	    testing Logistic(0.0, 1.0)
	From worker 3:	    testing Logistic(5.0, 1.0)
	From worker 3:	    testing Logistic(2.0, 1.5)
	From worker 3:	    testing Logistic(5.0, 1.5)
	From worker 3:	    testing LogNormal()
	From worker 3:	    testing LogNormal(1.0)
	From worker 3:	    testing LogNormal(0.0, 2.0)
	From worker 3:	    testing LogNormal(1.0, 2.0)
	From worker 3:	    testing LogNormal(3.0, 0.5)
	From worker 3:	    testing LogNormal(3.0, 1.0)
	From worker 3:	    testing LogNormal(3.0, 2.0)
	From worker 3:	    testing NoncentralBeta(2, 2, 0)
	From worker 3:	    testing NoncentralBeta(2, 6, 5)
	From worker 3:	    testing NoncentralChisq(2, 2)
	From worker 3:	    testing NoncentralChisq(2, 5)
	From worker 3:	    testing NoncentralF(2, 2, 2)
	From worker 3:	    testing NoncentralF(8, 10, 5)
	From worker 3:	    testing NoncentralT(2, 2)
	From worker 3:	    testing NoncentralT(10, 2)
	From worker 3:	    testing Normal()
	From worker 3:	    testing Normal(2.0)
	From worker 3:	    testing Normal(-3.0, 2.0)
	From worker 3:	    testing Normal(1.0, 10.0)
	From worker 3:	    testing NormalInverseGaussian(1.7, 1.8, 1.2, 2.3)
	From worker 3:	    testing NormalCanon()
	From worker 3:	    testing NormalCanon(0.0, 1.0)
	From worker 3:	    testing NormalCanon(-1.0, 2.5)
	From worker 3:	    testing NormalCanon(2.0, 0.8)
	From worker 3:	    testing Pareto()
	From worker 3:	    testing Pareto(2.0)
	From worker 3:	    testing Pareto(2.0, 1.5)
	From worker 3:	    testing Pareto(3.0, 2.0)
	From worker 3:	    testing Rayleigh()
	From worker 3:	    testing Rayleigh(3.0)
	From worker 3:	    testing Rayleigh(8.0)
	From worker 3:	    testing SymTriangularDist()
	From worker 3:	    testing SymTriangularDist(3.0)
	From worker 3:	    testing SymTriangularDist(3.0, 0.5)
	From worker 3:	    testing SymTriangularDist(3.0, 2.0)
	From worker 3:	    testing SymTriangularDist(10.0, 8.0)
	From worker 3:	    testing TDist(1.2)
	From worker 3:	    testing TDist(5.0)
	From worker 3:	    testing TDist(28.0)
	From worker 3:	    testing TriangularDist(0, 5)
	From worker 3:	    testing TriangularDist(-7, 2)
	From worker 3:	    testing TriangularDist(-4, 14, 3)
	From worker 3:	    testing TriangularDist(2, 2000, 500)
	From worker 3:	    testing TriangularDist(1, 3, 2)
	From worker 3:	    testing TruncatedNormal(0, 1, -2, 2)
	From worker 3:	    testing TruncatedNormal(3, 10, 7, 8)
	From worker 3:	    testing TruncatedNormal(27, 3, 0, Inf)
	From worker 3:	    testing TruncatedNormal(-5, 1, -Inf, -10)
	From worker 3:	    testing TruncatedNormal(1.8, 1.2, -Inf, 0)
	From worker 3:	    testing Uniform()
	From worker 3:	    testing Uniform(0.0, 2.0)
	From worker 3:	    testing Uniform(3.0, 17.0)
	From worker 3:	    testing Uniform(3.0, 3.1)
	From worker 3:	    testing VonMises()
	From worker 3:	    testing VonMises(4.0)
	From worker 3:	    testing VonMises(1.1, 2.5)
	From worker 3:	    testing Weibull()
	From worker 3:	    testing Weibull(0.5)
	From worker 3:	    testing Weibull(5.0)
	From worker 3:	    testing Weibull(20.0, 1.0)
	From worker 3:	    testing Weibull(1.0, 2.0)
	From worker 3:	    testing Weibull(5.0, 2.0)
	From worker 3:	
Potentially stale exports: 
Skipping Distributions.binaryentropy
Skipping Distributions.cgf
Skipping Distributions.cumulant
Skipping Distributions.fit_map
Skipping Distributions.fit_map!
Skipping Distributions.fit_mle!
Skipping Distributions.freecumulant
Skipping Distributions.kde
Skipping Distributions.logpmf
Skipping Distributions.logpmf!
Skipping Distributions.pmf
2-element Array{Tuple{Method,Method},1}:
 (pdf(d::Distributions.Truncated, x::T) where T<:Real in Distributions at /home/vagrant/.julia/v0.6/Distributions/src/truncate.jl:56, pdf(d::Distributions.Distribution{Distributions.Univariate,Distributions.Discrete}, x::Integer) in Distributions at /home/vagrant/.julia/v0.6/Distributions/src/univariates.jl:326)      
 (logpdf(d::Distributions.Truncated, x::T) where T<:Real in Distributions at /home/vagrant/.julia/v0.6/Distributions/src/truncate.jl:58, logpdf(d::Distributions.Distribution{Distributions.Univariate,Distributions.Discrete}, x::Integer) in Distributions at /home/vagrant/.julia/v0.6/Distributions/src/univariates.jl:338)
INFO: Distributions tests passed
INFO: Removing CommonSubexpressions v0.0.1
INFO: Removing DiffResults v0.0.2
INFO: Removing DiffRules v0.0.2
INFO: Removing ForwardDiff v0.7.0
INFO: Removing NaNMath v0.3.0
INFO: Removing StaticArrays v0.6.6

>>> End of log
