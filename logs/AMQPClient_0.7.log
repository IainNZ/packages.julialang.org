>>> 'Pkg.add("AMQPClient")' log
WARNING: Base.Pkg is deprecated, run `using Pkg` instead
 in module Main
[ Info: Cloning cache of AMQPClient from https://github.com/JuliaComputing/AMQPClient.jl.git
[ Info: Installing AMQPClient v0.1.1
[ Info: Package database updated

>>> 'Pkg.test("AMQPClient")' log
WARNING: Base.versioninfo is deprecated: it has been moved to the standard library package `InteractiveUtils`.
Add `using InteractiveUtils` to your imports.
 in module Main
WARNING: Base.versioninfo is deprecated: it has been moved to the standard library package `InteractiveUtils`.
Add `using InteractiveUtils` to your imports.
 in module Main
Julia Version 0.7.0-DEV.4880
Commit 2eb9048f7b (2018-04-13 19:14 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
      Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-143-generic #192-Ubuntu SMP Tue Feb 27 10:45:36 UTC 2018 x86_64 x86_64
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
              speed         user         nice          sys         idle          irq
       #1  3507 MHz     272182 s         90 s      23245 s     348180 s          2 s
       #2  3507 MHz     115426 s         65 s      10600 s     573857 s          0 s
       
  Memory: 2.939197540283203 GB (897.359375 MB free)
  Uptime: 7114.0 sec
  Load Avg:  0.609375  0.20947265625  0.2431640625
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant
Packages:
  Package Directory: /home/vagrant/.julia/v0.7
  Package Status:
2 required packages:
 - AMQPClient                    0.1.1
 - JSON                          0.17.2
2 additional packages:
 - Compat                        0.63.0
 - Nullables                     0.0.5
WARNING: Base.Pkg is deprecated, run `using Pkg` instead
 in module Main
[ Info: Testing AMQPClient
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = convert(::Type{AMQPClient.TAMQPShortStr}, ::String) at convert.jl:3
└ @ AMQPClient convert.jl:3
WARNING: importing deprecated binding Base.randstring into AMQPTestCoverage.
WARNING: Base.randstring is deprecated: it has been moved to the standard library package `Random`.
Add `using Random` to your imports.
  likely near /home/vagrant/.julia/v0.7/AMQPClient/test/runtests.jl:5
WARNING: Base.randstring is deprecated: it has been moved to the standard library package `Random`.
Add `using Random` to your imports.
  likely near /home/vagrant/.julia/v0.7/AMQPClient/test/runtests.jl:5
WARNING: Base.randstring is deprecated: it has been moved to the standard library package `Random`.
Add `using Random` to your imports.
  likely near /home/vagrant/.julia/v0.7/AMQPClient/test/runtests.jl:5
WARNING: Base.randstring is deprecated: it has been moved to the standard library package `Random`.
Add `using Random` to your imports.
  likely near /home/vagrant/.julia/v0.7/AMQPClient/test/runtests.jl:5
WARNING: Base.randstring is deprecated: it has been moved to the standard library package `Random`.
Add `using Random` to your imports.
  likely near /home/vagrant/.julia/v0.7/AMQPClient/test/runtests.jl:5
WARNING: Base.randstring is deprecated: it has been moved to the standard library package `Random`.
Add `using Random` to your imports.
  likely near /home/vagrant/.julia/v0.7/AMQPClient/test/runtests.jl:5
WARNING: Base.randstring is deprecated: it has been moved to the standard library package `Random`.
Add `using Random` to your imports.
  likely near /home/vagrant/.julia/v0.7/AMQPClient/test/runtests.jl:5
WARNING: Base.randstring is deprecated: it has been moved to the standard library package `Random`.
Add `using Random` to your imports.
  likely near /home/vagrant/.julia/v0.7/AMQPClient/test/runtests.jl:5
WARNING: Base.randstring is deprecated: it has been moved to the standard library package `Random`.
Add `using Random` to your imports.
  likely near /home/vagrant/.julia/v0.7/AMQPClient/test/runtests.jl:5
WARNING: Base.randstring is deprecated: it has been moved to the standard library package `Random`.
Add `using Random` to your imports.
  likely near /home/vagrant/.julia/v0.7/AMQPClient/test/runtests.jl:5
WARNING: Base.randstring is deprecated: it has been moved to the standard library package `Random`.
Add `using Random` to your imports.
  likely near /home/vagrant/.julia/v0.7/AMQPClient/test/runtests.jl:5
WARNING: Base.randstring is deprecated: it has been moved to the standard library package `Random`.
Add `using Random` to your imports.
  likely near /home/vagrant/.julia/v0.7/AMQPClient/test/runtests.jl:5
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = convert at convert.jl:3 [inlined]
└ @ Core convert.jl:3
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = convert at convert.jl:3 [inlined]
└ @ Core convert.jl:3
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = convert at convert.jl:3 [inlined]
└ @ Core convert.jl:3
opening connection...
ERROR: LoadError: connect: connection refused (ECONNREFUSED)
Stacktrace:
 [1] try_yieldto(::typeof(Base.ensure_rescheduled), ::Base.RefValue{Task}) at ./event.jl:208
 [2] wait() at ./event.jl:267
 [3] wait(::Condition) at ./event.jl:46
 [4] stream_wait(::Sockets.TCPSocket, ::Condition, ::Vararg{Condition,N} where N) at ./stream.jl:47
 [5] wait_connected(::Sockets.TCPSocket) at ./stream.jl:263
 [6] connect at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Sockets/src/Sockets.jl:444 [inlined]
 [7] connect(::String, ::Int64) at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Sockets/src/Sockets.jl:427
 [8] #connection#17(::String, ::String, ::Int64, ::Dict{String,Any}, ::Int64, ::Int64, ::Int64, ::Int64, ::typeof(AMQPClient.connection)) at /home/vagrant/.julia/v0.7/AMQPClient/src/protocol.jl:501
 [9] #connection at ./<missing>:0 [inlined]
 [10] #runtests#1(::String, ::String, ::Int64, ::Dict{String,Any}, ::Function) at /home/vagrant/.julia/v0.7/AMQPClient/test/test_coverage.jl:30
 [11] runtests() at /home/vagrant/.julia/v0.7/AMQPClient/test/test_coverage.jl:22
 [12] top-level scope
 [13] include at ./boot.jl:314 [inlined]
 [14] include_relative(::Module, ::String) at ./loading.jl:1067
 [15] include(::Module, ::String) at ./sysimg.jl:29
 [16] exec_options(::Base.JLOptions) at ./client.jl:327
 [17] _start() at ./client.jl:455
in expression starting at /home/vagrant/.julia/v0.7/AMQPClient/test/runtests.jl:5
┌ Error: ------------------------------------------------------------
│ # Testing failed for AMQPClient
│   exception =
│    failed process: Process(`/home/vagrant/julia/bin/julia -Cnative -J/home/vagrant/julia/lib/julia/sys.so --compile=yes --depwarn=yes --code-coverage=none --color=no --compiled-modules=yes --check-bounds=yes --warn-overwrite=yes --startup-file=yes /home/vagrant/.julia/v0.7/AMQPClient/test/runtests.jl`, ProcessExited(1)) [1]
│    Stacktrace:
│     [1] error(::String, ::Base.Process, ::String, ::Int64, ::String) at ./error.jl:42
│     [2] pipeline_error(::Base.Process) at ./process.jl:712
│     [3] #run#542(::Bool, ::Function, ::Cmd) at ./process.jl:670
│     [4] run at ./process.jl:668 [inlined]
│     [5] (::getfield(Pkg.Entry, Symbol("##56#57")){Bool,String,Array{AbstractString,1}})() at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Pkg/src/entry.jl:729
│     [6] cd(::getfield(Pkg.Entry, Symbol("##56#57")){Bool,String,Array{AbstractString,1}}, ::String) at ./file.jl:72
│     [7] #test!#55(::Bool, ::Function, ::String, ::Array{AbstractString,1}, ::Array{AbstractString,1}, ::Array{AbstractString,1}) at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Pkg/src/entry.jl:717
│     [8] (::getfield(Pkg.Entry, Symbol("#kw##test!")))(::NamedTuple{(:coverage,),Tuple{Bool}}, ::typeof(Pkg.Entry.test!), ::String, ::Array{AbstractString,1}, ::Array{AbstractString,1}, ::Array{AbstractString,1}) at ./<missing>:0
│     [9] #test#59(::Bool, ::Function, ::Array{AbstractString,1}) at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Pkg/src/entry.jl:756
│     [10] #test at ./<missing>:0 [inlined]
│     [11] #4 at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Pkg/src/dir.jl:36 [inlined]
│     [12] cd(::getfield(Pkg.Dir, Symbol("##4#7")){Base.Iterators.Pairs{Symbol,Bool,Tuple{Symbol},NamedTuple{(:coverage,),Tuple{Bool}}},typeof(Pkg.Entry.test),Tuple{Array{AbstractString,1}}}, ::String) at ./file.jl:72
│     [13] #cd#1(::Base.Iterators.Pairs{Symbol,Bool,Tuple{Symbol},NamedTuple{(:coverage,),Tuple{Bool}}}, ::Function, ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N} where N) at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Pkg/src/dir.jl:36
│     [14] (::getfield(Pkg.Dir, Symbol("#kw##cd")))(::NamedTuple{(:coverage,),Tuple{Bool}}, ::typeof(Pkg.Dir.cd), ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N} where N) at ./<missing>:0
│     [15] #test#3(::Bool, ::Function, ::String, ::Vararg{String,N} where N) at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Pkg/src/Pkg.jl:278
│     [16] test(::String, ::Vararg{String,N} where N) at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Pkg/src/Pkg.jl:278
│     [17] top-level scope
│     [18] eval at ./boot.jl:317 [inlined]
│     [19] eval(::Module, ::Expr) at ./sysimg.jl:74
│     [20] exec_options(::Base.JLOptions) at ./client.jl:304
│     [21] _start() at ./client.jl:455
└ @ Pkg.Entry entry.jl:732
ERROR: AMQPClient had test errors

>>> End of log
