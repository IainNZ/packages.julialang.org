>>> 'Pkg.add("PyAMG")' log
INFO: Installing BinDeps v0.4.7
INFO: Installing Conda v0.6.2
INFO: Installing MacroTools v0.3.7
INFO: Installing PyAMG v0.0.9
INFO: Installing PyCall v1.11.1
INFO: Installing SHA v0.3.3
INFO: Installing URIParser v0.1.8
INFO: Building Conda
INFO: Building PyCall
INFO: Using the Python distribution in the Conda package by default.
To use a different Python version, set ENV["PYTHON"]="pythoncommand" and re-run Pkg.build("PyCall").
Fetching package metadata ...........
Solving package specifications: .

# All requested packages already installed.
# packages in environment at /home/vagrant/.julia/v0.4/Conda/deps/usr:
#
numpy                     1.13.1           py27hd1b6e02_2  
INFO: PyCall is using /home/vagrant/.julia/v0.4/Conda/deps/usr/bin/python (Python 2.7.14) at /home/vagrant/.julia/v0.4/Conda/deps/usr/bin/python, libpython = /home/vagrant/.julia/v0.4/Conda/deps/usr/lib/libpython2.7
INFO: /home/vagrant/.julia/v0.4/PyCall/deps/deps.jl has not changed
INFO: /home/vagrant/.julia/v0.4/PyCall/deps/PYTHON has not changed
INFO: Package database updated

>>> 'Pkg.test("PyAMG")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-132-generic #181-Ubuntu SMP Wed Sep 13 13:25:03 UTC 2017 x86_64 x86_64
Memory: 2.93927001953125 GB (543.3046875 MB free)
Uptime: 26765.0 sec
Load Avg:  1.0703125  1.00390625  0.9599609375
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3508 MHz    1237645 s       2585 s     102237 s    1059435 s         18 s
#2  3508 MHz     905262 s       5636 s      85520 s    1596735 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.9.1
 - PyAMG                         0.0.9
7 additional packages:
 - BinDeps                       0.4.7
 - Compat                        0.26.0
 - Conda                         0.6.2
 - MacroTools                    0.3.7
 - PyCall                        1.11.1
 - SHA                           0.3.3
 - URIParser                     0.1.8
INFO: Computing test dependencies for PyAMG...
INFO: Cloning cache of IterativeSolvers from git://github.com/JuliaMath/IterativeSolvers.jl.git
INFO: Installing IterativeSolvers v0.2.2
INFO: Testing PyAMG
INFO: Installing scipy.sparse via the Conda scipy package...
Fetching package metadata ...........
Solving package specifications: .

Package plan for installation in environment /home/vagrant/.julia/v0.4/Conda/deps/usr:

The following NEW packages will be INSTALLED:

    scipy: 0.19.1-py27h1edc525_3

scipy-0.19.1-p   0% |                              | ETA:  --:--:--   0.00  B/sscipy-0.19.1-p   1% |                               | ETA:  0:00:01  15.63 MB/sscipy-0.19.1-p   2% |                               | ETA:  0:00:01  16.95 MB/sscipy-0.19.1-p   3% |                               | ETA:  0:00:00  20.54 MB/sscipy-0.19.1-p   4% |#                              | ETA:  0:00:00  24.18 MB/sscipy-0.19.1-p   5% |#                              | ETA:  0:00:00  23.53 MB/sscipy-0.19.1-p   6% |#                              | ETA:  0:00:00  23.93 MB/sscipy-0.19.1-p   7% |##                             | ETA:  0:00:00  24.78 MB/sscipy-0.19.1-p   8% |##                             | ETA:  0:00:00  25.41 MB/sscipy-0.19.1-p   9% |##                             | ETA:  0:00:00  25.97 MB/sscipy-0.19.1-p  10% |###                            | ETA:  0:00:00  26.51 MB/sscipy-0.19.1-p  11% |###                            | ETA:  0:00:00  26.79 MB/sscipy-0.19.1-p  12% |###                            | ETA:  0:00:00  26.74 MB/sscipy-0.19.1-p  13% |####                           | ETA:  0:00:00  26.71 MB/sscipy-0.19.1-p  15% |####                           | ETA:  0:00:00  26.90 MB/sscipy-0.19.1-p  16% |####                           | ETA:  0:00:00  27.01 MB/sscipy-0.19.1-p  17% |#####                          | ETA:  0:00:00  27.11 MB/sscipy-0.19.1-p  18% |#####                          | ETA:  0:00:00  27.18 MB/sscipy-0.19.1-p  19% |#####                          | ETA:  0:00:00  27.26 MB/sscipy-0.19.1-p  20% |######                         | ETA:  0:00:00  27.41 MB/sscipy-0.19.1-p  21% |######                         | ETA:  0:00:00  27.42 MB/sscipy-0.19.1-p  22% |######                         | ETA:  0:00:00  27.31 MB/sscipy-0.19.1-p  23% |#######                        | ETA:  0:00:00  27.34 MB/sscipy-0.19.1-p  24% |#######                        | ETA:  0:00:00  27.45 MB/sscipy-0.19.1-p  25% |#######                        | ETA:  0:00:00  27.85 MB/sscipy-0.19.1-p  26% |########                       | ETA:  0:00:00  27.73 MB/sscipy-0.19.1-p  27% |########                       | ETA:  0:00:00  27.55 MB/sscipy-0.19.1-p  28% |########                       | ETA:  0:00:00  27.51 MB/sscipy-0.19.1-p  30% |#########                      | ETA:  0:00:00  27.51 MB/sscipy-0.19.1-p  31% |#########                      | ETA:  0:00:00  27.58 MB/sscipy-0.19.1-p  32% |#########                      | ETA:  0:00:00  27.58 MB/sscipy-0.19.1-p  33% |##########                     | ETA:  0:00:00  27.56 MB/sscipy-0.19.1-p  34% |##########                     | ETA:  0:00:00  27.54 MB/sscipy-0.19.1-p  35% |##########                     | ETA:  0:00:00  27.55 MB/sscipy-0.19.1-p  36% |###########                    | ETA:  0:00:00  27.47 MB/sscipy-0.19.1-p  37% |###########                    | ETA:  0:00:00  27.55 MB/sscipy-0.19.1-p  38% |###########                    | ETA:  0:00:00  27.60 MB/sscipy-0.19.1-p  39% |############                   | ETA:  0:00:00  27.67 MB/sscipy-0.19.1-p  40% |############                   | ETA:  0:00:00  27.75 MB/sscipy-0.19.1-p  41% |############                   | ETA:  0:00:00  27.76 MB/sscipy-0.19.1-p  42% |#############                  | ETA:  0:00:00  27.87 MB/sscipy-0.19.1-p  43% |#############                  | ETA:  0:00:00  27.79 MB/sscipy-0.19.1-p  45% |#############                  | ETA:  0:00:00  27.64 MB/sscipy-0.19.1-p  46% |##############                 | ETA:  0:00:00  27.59 MB/sscipy-0.19.1-p  47% |##############                 | ETA:  0:00:00  27.58 MB/sscipy-0.19.1-p  48% |##############                 | ETA:  0:00:00  27.59 MB/sscipy-0.19.1-p  49% |###############                | ETA:  0:00:00  27.62 MB/sscipy-0.19.1-p  50% |###############                | ETA:  0:00:00  27.73 MB/sscipy-0.19.1-p  51% |###############                | ETA:  0:00:00  27.73 MB/sscipy-0.19.1-p  52% |################               | ETA:  0:00:00  27.76 MB/sscipy-0.19.1-p  53% |################               | ETA:  0:00:00  27.87 MB/sscipy-0.19.1-p  54% |################               | ETA:  0:00:00  27.88 MB/sscipy-0.19.1-p  55% |#################              | ETA:  0:00:00  27.95 MB/sscipy-0.19.1-p  56% |#################              | ETA:  0:00:00  27.93 MB/sscipy-0.19.1-p  57% |#################              | ETA:  0:00:00  28.01 MB/sscipy-0.19.1-p  58% |##################             | ETA:  0:00:00  28.08 MB/sscipy-0.19.1-p  60% |##################             | ETA:  0:00:00  28.14 MB/sscipy-0.19.1-p  61% |##################             | ETA:  0:00:00  28.20 MB/sscipy-0.19.1-p  62% |###################            | ETA:  0:00:00  28.26 MB/sscipy-0.19.1-p  63% |###################            | ETA:  0:00:00  28.31 MB/sscipy-0.19.1-p  64% |###################            | ETA:  0:00:00  28.38 MB/sscipy-0.19.1-p  65% |####################           | ETA:  0:00:00  28.44 MB/sscipy-0.19.1-p  66% |####################           | ETA:  0:00:00  28.49 MB/sscipy-0.19.1-p  67% |####################           | ETA:  0:00:00  28.55 MB/sscipy-0.19.1-p  68% |#####################          | ETA:  0:00:00  28.63 MB/sscipy-0.19.1-p  69% |#####################          | ETA:  0:00:00  28.64 MB/sscipy-0.19.1-p  70% |#####################          | ETA:  0:00:00  28.68 MB/sscipy-0.19.1-p  71% |######################         | ETA:  0:00:00  28.74 MB/sscipy-0.19.1-p  72% |######################         | ETA:  0:00:00  28.80 MB/sscipy-0.19.1-p  74% |######################         | ETA:  0:00:00  28.84 MB/sscipy-0.19.1-p  75% |#######################        | ETA:  0:00:00  28.89 MB/sscipy-0.19.1-p  76% |#######################        | ETA:  0:00:00  28.88 MB/sscipy-0.19.1-p  77% |#######################        | ETA:  0:00:00  28.91 MB/sscipy-0.19.1-p  78% |########################       | ETA:  0:00:00  28.96 MB/sscipy-0.19.1-p  79% |########################       | ETA:  0:00:00  29.01 MB/sscipy-0.19.1-p  80% |########################       | ETA:  0:00:00  29.04 MB/sscipy-0.19.1-p  81% |#########################      | ETA:  0:00:00  29.10 MB/sscipy-0.19.1-p  82% |#########################      | ETA:  0:00:00  29.13 MB/sscipy-0.19.1-p  83% |#########################      | ETA:  0:00:00  29.12 MB/sscipy-0.19.1-p  84% |##########################     | ETA:  0:00:00  29.16 MB/sscipy-0.19.1-p  85% |##########################     | ETA:  0:00:00  29.18 MB/sscipy-0.19.1-p  86% |##########################     | ETA:  0:00:00  29.22 MB/sscipy-0.19.1-p  87% |###########################    | ETA:  0:00:00  29.17 MB/sscipy-0.19.1-p  89% |###########################    | ETA:  0:00:00  29.19 MB/sscipy-0.19.1-p  90% |###########################    | ETA:  0:00:00  29.21 MB/sscipy-0.19.1-p  91% |############################   | ETA:  0:00:00  29.27 MB/sscipy-0.19.1-p  92% |############################   | ETA:  0:00:00  29.30 MB/sscipy-0.19.1-p  93% |############################   | ETA:  0:00:00  29.34 MB/sscipy-0.19.1-p  94% |#############################  | ETA:  0:00:00  29.36 MB/sscipy-0.19.1-p  95% |#############################  | ETA:  0:00:00  29.50 MB/sscipy-0.19.1-p  96% |#############################  | ETA:  0:00:00  29.67 MB/sscipy-0.19.1-p  97% |############################## | ETA:  0:00:00  29.84 MB/sscipy-0.19.1-p  98% |############################## | ETA:  0:00:00  30.02 MB/sscipy-0.19.1-p  99% |############################## | ETA:  0:00:00  30.16 MB/sscipy-0.19.1-p 100% |###############################| Time: 0:00:00  30.19 MB/s
INFO: Installing pyamg via the Conda pyamg package...
Fetching package metadata ...........
Solving package specifications: .

Package plan for installation in environment /home/vagrant/.julia/v0.4/Conda/deps/usr:

The following NEW packages will be INSTALLED:

    pyamg: 2.2.1-np113py27_0

pyamg-2.2.1-np   0% |                              | ETA:  --:--:--   0.00  B/spyamg-2.2.1-np   1% |                               | ETA:  0:00:00  10.18 MB/spyamg-2.2.1-np   3% |#                              | ETA:  0:00:00  12.27 MB/spyamg-2.2.1-np   5% |#                              | ETA:  0:00:00  11.81 MB/spyamg-2.2.1-np   7% |##                             | ETA:  0:00:00  13.25 MB/spyamg-2.2.1-np   9% |###                            | ETA:  0:00:00  14.17 MB/spyamg-2.2.1-np  11% |###                            | ETA:  0:00:00  14.75 MB/spyamg-2.2.1-np  13% |####                           | ETA:  0:00:00  15.54 MB/spyamg-2.2.1-np  15% |####                           | ETA:  0:00:00  16.38 MB/spyamg-2.2.1-np  17% |#####                          | ETA:  0:00:00  17.12 MB/spyamg-2.2.1-np  19% |######                         | ETA:  0:00:00  17.06 MB/spyamg-2.2.1-np  21% |######                         | ETA:  0:00:00  17.23 MB/spyamg-2.2.1-np  23% |#######                        | ETA:  0:00:00  17.44 MB/spyamg-2.2.1-np  25% |#######                        | ETA:  0:00:00  17.84 MB/spyamg-2.2.1-np  27% |########                       | ETA:  0:00:00  18.36 MB/spyamg-2.2.1-np  29% |#########                      | ETA:  0:00:00  18.25 MB/spyamg-2.2.1-np  31% |#########                      | ETA:  0:00:00  18.58 MB/spyamg-2.2.1-np  33% |##########                     | ETA:  0:00:00  18.96 MB/spyamg-2.2.1-np  35% |###########                    | ETA:  0:00:00  18.95 MB/spyamg-2.2.1-np  37% |###########                    | ETA:  0:00:00  19.27 MB/spyamg-2.2.1-np  39% |############                   | ETA:  0:00:00  19.63 MB/spyamg-2.2.1-np  41% |############                   | ETA:  0:00:00  19.87 MB/spyamg-2.2.1-np  43% |#############                  | ETA:  0:00:00  20.10 MB/spyamg-2.2.1-np  45% |##############                 | ETA:  0:00:00  20.38 MB/spyamg-2.2.1-np  47% |##############                 | ETA:  0:00:00  20.53 MB/spyamg-2.2.1-np  49% |###############                | ETA:  0:00:00  20.74 MB/spyamg-2.2.1-np  51% |###############                | ETA:  0:00:00  20.91 MB/spyamg-2.2.1-np  53% |################               | ETA:  0:00:00  21.38 MB/spyamg-2.2.1-np  55% |#################              | ETA:  0:00:00  21.75 MB/spyamg-2.2.1-np  57% |#################              | ETA:  0:00:00  22.06 MB/spyamg-2.2.1-np  59% |##################             | ETA:  0:00:00  22.46 MB/spyamg-2.2.1-np  61% |###################            | ETA:  0:00:00  22.85 MB/spyamg-2.2.1-np  63% |###################            | ETA:  0:00:00  23.11 MB/spyamg-2.2.1-np  65% |####################           | ETA:  0:00:00  23.45 MB/spyamg-2.2.1-np  67% |####################           | ETA:  0:00:00  23.80 MB/spyamg-2.2.1-np  69% |#####################          | ETA:  0:00:00  24.15 MB/spyamg-2.2.1-np  71% |######################         | ETA:  0:00:00  24.46 MB/spyamg-2.2.1-np  73% |######################         | ETA:  0:00:00  24.80 MB/spyamg-2.2.1-np  75% |#######################        | ETA:  0:00:00  25.04 MB/spyamg-2.2.1-np  77% |#######################        | ETA:  0:00:00  25.33 MB/spyamg-2.2.1-np  79% |########################       | ETA:  0:00:00  25.62 MB/spyamg-2.2.1-np  81% |#########################      | ETA:  0:00:00  25.90 MB/spyamg-2.2.1-np  83% |#########################      | ETA:  0:00:00  26.19 MB/spyamg-2.2.1-np  85% |##########################     | ETA:  0:00:00  26.47 MB/spyamg-2.2.1-np  87% |##########################     | ETA:  0:00:00  26.39 MB/spyamg-2.2.1-np  89% |###########################    | ETA:  0:00:00  26.52 MB/spyamg-2.2.1-np  90% |############################   | ETA:  0:00:00  26.78 MB/spyamg-2.2.1-np  92% |############################   | ETA:  0:00:00  27.04 MB/spyamg-2.2.1-np  94% |#############################  | ETA:  0:00:00  27.26 MB/spyamg-2.2.1-np  96% |############################## | ETA:  0:00:00  27.50 MB/spyamg-2.2.1-np  98% |############################## | ETA:  0:00:00  27.44 MB/spyamg-2.2.1-np 100% |###############################| ETA:  0:00:00  27.43 MB/spyamg-2.2.1-np 100% |###############################| Time: 0:00:00  27.28 MB/s
=================================================
Test 1: Julia `\` vs PyAMG Blackbox `solve` (2D) Laplacian
 \ :   0.433797 seconds (393.72 k allocations: 26.656 MB, 0.94% gc time)
PyAMG-Warmup: /home/vagrant/.julia/v0.4/Conda/deps/usr/lib/python2.7/site-packages/pyamg/strength.py:533: FutureWarning: elementwise comparison failed; returning scalar instead, but in the future will perform elementwise comparison
  if B == 'ones':
  3.048404 seconds (1.90 M allocations: 81.906 MB, 0.57% gc time)
PyAMG:   0.272154 seconds (289 allocations: 942.469 KB)
|x_\ - x_amg|_∞ = 1.2523662662466961e-12
|A x_amg - b|_∞ = 2.591679049146478e-8
=================================================
Test 2: Julia `\` vs PyAMG Blackbox `solve` (3D)
 \ :   0.724216 seconds (85 allocations: 98.501 MB, 0.89% gc time)
PyAMG-Warmup:   1.450212 seconds (288 allocations: 3.224 MB)
PyAMG:   1.453587 seconds (288 allocations: 3.224 MB)
|x_\ - x_amg|_∞ = 1.495234491777353e-12
|A x_amg - b|_∞ = 1.0008989193011075e-9
=================================================
Test 3: RugeStubenSolver (3D)
        50 x 50 x 50 grid = 125k dofs 
Create solver:   0.920736 seconds (126.06 k allocations: 19.336 MB)
First solve:   0.470930 seconds (149.70 k allocations: 7.377 MB, 0.68% gc time)
Second solve: (tol 1e-9)  0.390095 seconds (13.89 k allocations: 1.608 MB)
Third solve: (tol 1e-6)  0.219392 seconds (189 allocations: 983.938 KB)
|A x_amg - b|_∞ = 2.532215191308751e-6
=================================================
Test 4: \, ldiv, and kwargs
=================================================
Test 5: AMG as a preconditioner
        100 x 100 Dirichlet problem, TOL = 1e-4
        PyAMG vs CG vs PCG  (using IterativeSolvers)
WARNING: replacing module IterativeSolvers
Plain CG:
  0.479410 seconds (331.93 k allocations: 76.482 MB, 3.10% gc time)
  0.036393 seconds (3.25 k allocations: 61.645 MB, 9.25% gc time)
PyAMG-preconditionerd CG:  (see `aspreconditioner`)
  0.135853 seconds (57.09 k allocations: 4.712 MB)
  0.025664 seconds (629 allocations: 2.082 MB)
PyAMG solver
  0.018262 seconds (247 allocations: 88.359 KB)
  0.016417 seconds (215 allocations: 86.359 KB)
|x_cg-x| = 3.5312070957405564e-6 
|x_pcg-x| = 2.779657213388534e-6
|x_pyamg-x| = 1.0901104405281368e-7
INFO: PyAMG tests passed
INFO: Removing IterativeSolvers v0.2.2

>>> End of log
