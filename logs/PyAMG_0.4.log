>>> 'Pkg.add("PyAMG")' log
INFO: Installing BinDeps v0.4.7
INFO: Installing Conda v0.5.3
INFO: Installing MacroTools v0.3.7
INFO: Installing PyAMG v0.0.9
INFO: Installing PyCall v1.11.1
INFO: Installing SHA v0.3.3
INFO: Installing URIParser v0.1.8
INFO: Building Conda
INFO: Building PyCall
INFO: Using the Python distribution in the Conda package by default.
To use a different Python version, set ENV["PYTHON"]="pythoncommand" and re-run Pkg.build("PyCall").
Fetching package metadata .........
Solving package specifications: .

# All requested packages already installed.
# packages in environment at /home/vagrant/.julia/v0.4/Conda/deps/usr:
#
numpy                     1.13.1                   py27_0  
INFO: PyCall is using /home/vagrant/.julia/v0.4/Conda/deps/usr/bin/python (Python 2.7.13) at /home/vagrant/.julia/v0.4/Conda/deps/usr/bin/python, libpython = /home/vagrant/.julia/v0.4/Conda/deps/usr/lib/libpython2.7
INFO: /home/vagrant/.julia/v0.4/PyCall/deps/deps.jl has not changed
INFO: /home/vagrant/.julia/v0.4/PyCall/deps/PYTHON has not changed
INFO: Package database updated
INFO: METADATA is out-of-date — you may not have the latest version of PyAMG
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("PyAMG")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-121-generic #170-Ubuntu SMP Wed Jun 14 09:04:33 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (524.5859375 MB free)
Uptime: 24191.0 sec
Load Avg:  1.0166015625  1.0185546875  0.982421875
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz    1144443 s       6293 s     103521 s     913727 s         19 s
#2  3500 MHz     793248 s        445 s      88274 s    1462675 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.9.1
 - PyAMG                         0.0.9
7 additional packages:
 - BinDeps                       0.4.7
 - Compat                        0.26.0
 - Conda                         0.5.3
 - MacroTools                    0.3.7
 - PyCall                        1.11.1
 - SHA                           0.3.3
 - URIParser                     0.1.8
INFO: Computing test dependencies for PyAMG...
INFO: Cloning cache of IterativeSolvers from git://github.com/JuliaMath/IterativeSolvers.jl.git
INFO: Installing IterativeSolvers v0.2.2
INFO: Testing PyAMG
=================================================
Test 1: Julia `\` vs PyAMG Blackbox `solve` (2D) Laplacian
 \ :   0.545278 seconds (393.72 k allocations: 26.655 MB, 0.93% gc time)
PyAMG-Warmup: /home/vagrant/.julia/v0.4/Conda/deps/usr/lib/python2.7/site-packages/pyamg/strength.py:533: FutureWarning: elementwise comparison failed; returning scalar instead, but in the future will perform elementwise comparison
  if B == 'ones':
  2.255601 seconds (1.90 M allocations: 81.846 MB, 0.76% gc time)
PyAMG:   0.287950 seconds (289 allocations: 942.469 KB)
|x_\ - x_amg|_∞ = 1.4915360613265705e-12
|A x_amg - b|_∞ = 2.6959696697304025e-8
=================================================
Test 2: Julia `\` vs PyAMG Blackbox `solve` (3D)
 \ :   0.719842 seconds (85 allocations: 98.501 MB, 0.75% gc time)
PyAMG-Warmup:   1.506649 seconds (288 allocations: 3.224 MB)
PyAMG:   1.510265 seconds (288 allocations: 3.224 MB)
|x_\ - x_amg|_∞ = 1.171972241476027e-12
|A x_amg - b|_∞ = 8.003908646969649e-10
=================================================
Test 3: RugeStubenSolver (3D)
        50 x 50 x 50 grid = 125k dofs 
Create solver:   0.602014 seconds (126.06 k allocations: 19.336 MB)
First solve:   0.351905 seconds (149.69 k allocations: 7.375 MB, 0.93% gc time)
Second solve: (tol 1e-9)  0.301511 seconds (13.89 k allocations: 1.608 MB)
Third solve: (tol 1e-6)  0.171681 seconds (189 allocations: 983.938 KB)
|A x_amg - b|_∞ = 2.532215049200204e-6
=================================================
Test 4: \, ldiv, and kwargs
=================================================
Test 5: AMG as a preconditioner
        100 x 100 Dirichlet problem, TOL = 1e-4
        PyAMG vs CG vs PCG  (using IterativeSolvers)
WARNING: replacing module IterativeSolvers
Plain CG:
  0.283431 seconds (331.93 k allocations: 76.482 MB, 4.82% gc time)
  0.035559 seconds (3.25 k allocations: 61.645 MB, 10.13% gc time)
PyAMG-preconditionerd CG:  (see `aspreconditioner`)
  0.116856 seconds (57.09 k allocations: 4.712 MB)
  0.012133 seconds (629 allocations: 2.082 MB)
PyAMG solver
  0.014470 seconds (247 allocations: 88.359 KB)
  0.013684 seconds (215 allocations: 86.359 KB)
|x_cg-x| = 3.5312070957405564e-6 
|x_pcg-x| = 2.7796572129198973e-6
|x_pyamg-x| = 1.0901104402769516e-7
INFO: PyAMG tests passed
INFO: Removing IterativeSolvers v0.2.2

>>> End of log
