>>> 'Pkg.add("ReverseDiff")' log
INFO: Installing BinDeps v0.6.0
INFO: Installing CommonSubexpressions v0.0.1
INFO: Installing DiffResults v0.0.2
INFO: Installing DiffRules v0.0.1
INFO: Installing ForwardDiff v0.7.0
INFO: Installing FunctionWrappers v0.1.0
INFO: Installing NaNMath v0.3.0
INFO: Installing ReverseDiff v0.2.0
INFO: Installing SHA v0.5.2
INFO: Installing SpecialFunctions v0.3.5
INFO: Installing StaticArrays v0.6.6
INFO: Installing URIParser v0.2.0
INFO: Building SpecialFunctions
INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of ReverseDiff
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("ReverseDiff")' log
Julia Version 0.6.1
Commit 0d7248e2ff (2017-10-24 22:15 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-135-generic #184-Ubuntu SMP Wed Oct 18 11:55:51 UTC 2017 x86_64 x86_64
Memory: 2.93927001953125 GB (798.12109375 MB free)
Uptime: 72691.0 sec
Load Avg:  1.04931640625  1.0146484375  0.96533203125
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz    4763177 s         59 s     213339 s    1185452 s         73 s
#2  3499 MHz    1133382 s       6487 s     101248 s    5898742 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.6
2 required packages:
 - JSON                          0.16.1
 - ReverseDiff                   0.2.0
12 additional packages:
 - BinDeps                       0.6.0
 - CommonSubexpressions          0.0.1
 - Compat                        0.37.0
 - DiffResults                   0.0.2
 - DiffRules                     0.0.1
 - ForwardDiff                   0.7.0
 - FunctionWrappers              0.1.0
 - NaNMath                       0.3.0
 - SHA                           0.5.2
 - SpecialFunctions              0.3.5
 - StaticArrays                  0.6.6
 - URIParser                     0.2.0
INFO: Computing test dependencies for ReverseDiff...
INFO: Cloning cache of DiffTests from https://github.com/JuliaDiff/DiffTests.jl.git
INFO: Installing DiffTests v0.0.1
INFO: Testing ReverseDiff
testing InstructionTape/AbstractInstructions...
done (took 0.494222007 seconds)
testing TrackedReals/TrackedArrays...
done (took 3.589191762 seconds)
testing macros (@forward, @skip, etc.)...
  testing @forward named functions: `ReverseDiff.ForwardOptimize{MacrosTests.#f0}(MacrosTests.f0)`...
  testing @forward named functions: `ReverseDiff.ForwardOptimize{MacrosTests.##hidden_f1}(MacrosTests.#hidden_f1)`...
  testing @forward named functions: `ReverseDiff.ForwardOptimize{MacrosTests.##hidden_f2}(MacrosTests.#hidden_f2)`...
  testing @forward named functions: `ReverseDiff.ForwardOptimize{MacrosTests.##hidden_f3}(MacrosTests.#hidden_f3)`...
  testing @forward named functions: `ReverseDiff.ForwardOptimize{MacrosTests.##hidden_f4}(MacrosTests.#hidden_f4)`...
  testing @forward named functions: `ReverseDiff.ForwardOptimize{Base.#-}(-)`...
  testing @forward anonymous functions: `ReverseDiff.ForwardOptimize{MacrosTests.##1#2}(MacrosTests.#1)`...
  testing @forward anonymous functions: `ReverseDiff.ForwardOptimize{MacrosTests.##3#4}(MacrosTests.#3)`...
  testing @skip named functions: `ReverseDiff.SkipOptimize{MacrosTests.#f0}(MacrosTests.f0)`...
  testing @skip named functions: `ReverseDiff.SkipOptimize{MacrosTests.##hidden_g1}(MacrosTests.#hidden_g1)`...
  testing @skip named functions: `ReverseDiff.SkipOptimize{MacrosTests.##hidden_g2}(MacrosTests.#hidden_g2)`...
  testing @skip named functions: `ReverseDiff.SkipOptimize{MacrosTests.##hidden_g3}(MacrosTests.#hidden_g3)`...
  testing @skip named functions: `ReverseDiff.SkipOptimize{MacrosTests.##hidden_g4}(MacrosTests.#hidden_g4)`...
  testing @skip anonymous functions: `ReverseDiff.SkipOptimize{MacrosTests.##5#6}(MacrosTests.#5)`...
  testing @skip anonymous functions: `ReverseDiff.SkipOptimize{MacrosTests.##7#8}(MacrosTests.#7)`...
done (took 3.418496366 seconds)
testing scalar derivatives (both forward and reverse passes)
  testing forward-mode unary scalar functions: `+`...
  testing forward-mode unary scalar functions: `-`...
  testing forward-mode unary scalar functions: `sqrt`...
  testing forward-mode unary scalar functions: `cbrt`...
  testing forward-mode unary scalar functions: `abs2`...
  testing forward-mode unary scalar functions: `inv`...
  testing forward-mode unary scalar functions: `log`...
  testing forward-mode unary scalar functions: `log10`...
  testing forward-mode unary scalar functions: `log2`...
  testing forward-mode unary scalar functions: `log1p`...
  testing forward-mode unary scalar functions: `exp`...
  testing forward-mode unary scalar functions: `exp2`...
  testing forward-mode unary scalar functions: `expm1`...
  testing forward-mode unary scalar functions: `sin`...
  testing forward-mode unary scalar functions: `cos`...
  testing forward-mode unary scalar functions: `tan`...
  testing forward-mode unary scalar functions: `sec`...
  testing forward-mode unary scalar functions: `csc`...
  testing forward-mode unary scalar functions: `cot`...
  testing forward-mode unary scalar functions: `sind`...
  testing forward-mode unary scalar functions: `cosd`...
  testing forward-mode unary scalar functions: `tand`...
  testing forward-mode unary scalar functions: `secd`...
  testing forward-mode unary scalar functions: `cscd`...
  testing forward-mode unary scalar functions: `cotd`...
  testing forward-mode unary scalar functions: `asin`...
  testing forward-mode unary scalar functions: `acos`...
  testing forward-mode unary scalar functions: `atan`...
  testing forward-mode unary scalar functions: `asec`...
  testing forward-mode unary scalar functions: `acsc`...
  testing forward-mode unary scalar functions: `acot`...
  testing forward-mode unary scalar functions: `asind`...
  testing forward-mode unary scalar functions: `acosd`...
  testing forward-mode unary scalar functions: `atand`...
  testing forward-mode unary scalar functions: `asecd`...
  testing forward-mode unary scalar functions: `acscd`...
  testing forward-mode unary scalar functions: `acotd`...
  testing forward-mode unary scalar functions: `sinh`...
  testing forward-mode unary scalar functions: `cosh`...
  testing forward-mode unary scalar functions: `tanh`...
  testing forward-mode unary scalar functions: `sech`...
  testing forward-mode unary scalar functions: `csch`...
  testing forward-mode unary scalar functions: `coth`...
  testing forward-mode unary scalar functions: `asinh`...
  testing forward-mode unary scalar functions: `acosh`...
  testing forward-mode unary scalar functions: `atanh`...
  testing forward-mode unary scalar functions: `asech`...
  testing forward-mode unary scalar functions: `acsch`...
  testing forward-mode unary scalar functions: `acoth`...
  testing forward-mode unary scalar functions: `deg2rad`...
  testing forward-mode unary scalar functions: `rad2deg`...
  testing forward-mode unary scalar functions: `gamma`...
  testing forward-mode unary scalar functions: `lgamma`...
  testing forward-mode binary scalar functions: `+`...
  testing forward-mode binary scalar functions: `-`...
  testing forward-mode binary scalar functions: `*`...
  testing forward-mode binary scalar functions: `/`...
  testing forward-mode binary scalar functions: `^`...
  testing forward-mode binary scalar functions: `atan2`...
  testing forward-mode binary scalar functions: `hypot`...
  testing forward-mode binary scalar functions: `mod`...
  testing forward-mode binary scalar functions: `rem`...
  testing forward-mode unary scalar functions: `erf`...
  testing forward-mode unary scalar functions: `erfinv`...
  testing forward-mode unary scalar functions: `erfc`...
  testing forward-mode unary scalar functions: `erfcinv`...
  testing forward-mode unary scalar functions: `erfi`...
  testing forward-mode unary scalar functions: `erfcx`...
  testing forward-mode unary scalar functions: `dawson`...
  testing forward-mode unary scalar functions: `digamma`...
  testing forward-mode unary scalar functions: `invdigamma`...
  testing forward-mode unary scalar functions: `trigamma`...
  testing forward-mode unary scalar functions: `airyai`...
  testing forward-mode unary scalar functions: `airyaiprime`...
  testing forward-mode unary scalar functions: `airybi`...
  testing forward-mode unary scalar functions: `airybiprime`...
  testing forward-mode unary scalar functions: `besselj0`...
  testing forward-mode unary scalar functions: `besselj1`...
  testing forward-mode unary scalar functions: `bessely0`...
  testing forward-mode unary scalar functions: `bessely1`...
  testing forward-mode binary scalar functions: `beta`...
  testing forward-mode binary scalar functions: `lbeta`...
  testing forward-mode unary scalar functions: `sqrt`...
  testing forward-mode unary scalar functions: `sin`...
  testing forward-mode unary scalar functions: `cos`...
  testing forward-mode unary scalar functions: `tan`...
  testing forward-mode unary scalar functions: `asin`...
  testing forward-mode unary scalar functions: `acos`...
  testing forward-mode unary scalar functions: `acosh`...
  testing forward-mode unary scalar functions: `atanh`...
  testing forward-mode unary scalar functions: `log`...
  testing forward-mode unary scalar functions: `log2`...
  testing forward-mode unary scalar functions: `log10`...
  testing forward-mode unary scalar functions: `log1p`...
  testing forward-mode unary scalar functions: `lgamma`...
  testing SKIPPED_UNARY_SCALAR_FUNCS: `isinf`...
  testing SKIPPED_UNARY_SCALAR_FUNCS: `isnan`...
  testing SKIPPED_UNARY_SCALAR_FUNCS: `isfinite`...
  testing SKIPPED_UNARY_SCALAR_FUNCS: `iseven`...
  testing SKIPPED_UNARY_SCALAR_FUNCS: `isodd`...
  testing SKIPPED_UNARY_SCALAR_FUNCS: `isreal`...
  testing SKIPPED_UNARY_SCALAR_FUNCS: `isinteger`...
  testing SKIPPED_BINARY_SCALAR_FUNCS: `isequal`...
  testing SKIPPED_BINARY_SCALAR_FUNCS: `isless`...
  testing SKIPPED_BINARY_SCALAR_FUNCS: `<`...
  testing SKIPPED_BINARY_SCALAR_FUNCS: `>`...
  testing SKIPPED_BINARY_SCALAR_FUNCS: `==`...
  testing SKIPPED_BINARY_SCALAR_FUNCS: `!=`...
  testing SKIPPED_BINARY_SCALAR_FUNCS: `<=`...
  testing SKIPPED_BINARY_SCALAR_FUNCS: `>=`...
done (took 9.578095446 seconds)
testing linear algebra derivatives (both forward and reverse passes)
  testing Array -> Number functions: `sum`...
  testing Array -> Number functions: `det`...
  testing Array -> Number functions: `LinAlgTests.#17`...
  testing Array -> Number functions: `mean`...
  testing Array -> Array functions: `-`...
  testing Array -> Array functions: `inv`...
  testing (Array, Array) -> Array functions: `+`...
  testing (Array, Array) -> Array functions: `-`...
  testing A_mul_B functions: `*`...
  testing A_mul_B functions: `A_mul_Bt`...
  testing A_mul_B functions: `At_mul_B`...
  testing A_mul_B functions: `At_mul_Bt`...
  testing A_mul_B functions: `A_mul_Bc`...
  testing A_mul_B functions: `Ac_mul_B`...
  testing A_mul_B functions: `Ac_mul_Bc`...
done (took 77.13644941 seconds)
testing elementwise derivatives (both forward and reverse passes)
  testing DiffTests.NUMBER_TO_NUMBER_FUNCS: `DiffTests.num2num_1`...
  testing DiffTests.NUMBER_TO_NUMBER_FUNCS: `DiffTests.num2num_2`...
  testing DiffTests.NUMBER_TO_NUMBER_FUNCS: `DiffTests.num2num_3`...
  testing DiffTests.NUMBER_TO_NUMBER_FUNCS: `DiffTests.num2num_4`...
  testing DiffTests.NUMBER_TO_NUMBER_FUNCS: `DiffTests.num2num_5`...
  testing DiffTests.NUMBER_TO_NUMBER_FUNCS: `identity`...
  testing forward-mode unary scalar functions: `+`...
  testing forward-mode unary scalar functions: `-`...
  testing forward-mode unary scalar functions: `sqrt`...
  testing forward-mode unary scalar functions: `cbrt`...
  testing forward-mode unary scalar functions: `abs2`...
  testing forward-mode unary scalar functions: `inv`...
  testing forward-mode unary scalar functions: `log`...
  testing forward-mode unary scalar functions: `log10`...
  testing forward-mode unary scalar functions: `log2`...
  testing forward-mode unary scalar functions: `log1p`...
  testing forward-mode unary scalar functions: `exp`...
  testing forward-mode unary scalar functions: `exp2`...
  testing forward-mode unary scalar functions: `expm1`...
  testing forward-mode unary scalar functions: `sin`...
  testing forward-mode unary scalar functions: `cos`...
  testing forward-mode unary scalar functions: `tan`...
  testing forward-mode unary scalar functions: `sec`...
  testing forward-mode unary scalar functions: `csc`...
  testing forward-mode unary scalar functions: `cot`...
  testing forward-mode unary scalar functions: `sind`...
  testing forward-mode unary scalar functions: `cosd`...
  testing forward-mode unary scalar functions: `tand`...
  testing forward-mode unary scalar functions: `secd`...
  testing forward-mode unary scalar functions: `cscd`...
  testing forward-mode unary scalar functions: `cotd`...
  testing forward-mode unary scalar functions: `asin`...
  testing forward-mode unary scalar functions: `acos`...
  testing forward-mode unary scalar functions: `atan`...
  testing forward-mode unary scalar functions: `asec`...
  testing forward-mode unary scalar functions: `acsc`...
  testing forward-mode unary scalar functions: `acot`...
  testing forward-mode unary scalar functions: `asind`...
  testing forward-mode unary scalar functions: `acosd`...
  testing forward-mode unary scalar functions: `atand`...
  testing forward-mode unary scalar functions: `asecd`...
  testing forward-mode unary scalar functions: `acscd`...
  testing forward-mode unary scalar functions: `acotd`...
  testing forward-mode unary scalar functions: `sinh`...
  testing forward-mode unary scalar functions: `cosh`...
  testing forward-mode unary scalar functions: `tanh`...
  testing forward-mode unary scalar functions: `sech`...
  testing forward-mode unary scalar functions: `csch`...
  testing forward-mode unary scalar functions: `coth`...
  testing forward-mode unary scalar functions: `asinh`...
  testing forward-mode unary scalar functions: `acosh`...
  testing forward-mode unary scalar functions: `atanh`...
  testing forward-mode unary scalar functions: `asech`...
  testing forward-mode unary scalar functions: `acsch`...
  testing forward-mode unary scalar functions: `acoth`...
  testing forward-mode unary scalar functions: `deg2rad`...
  testing forward-mode unary scalar functions: `rad2deg`...
  testing forward-mode unary scalar functions: `gamma`...
  testing forward-mode unary scalar functions: `lgamma`...
  testing forward-mode binary scalar functions: `+`...
  testing forward-mode binary scalar functions: `-`...
  testing forward-mode binary scalar functions: `*`...
  testing forward-mode binary scalar functions: `/`...
  testing forward-mode binary scalar functions: `^`...
  testing forward-mode binary scalar functions: `atan2`...
  testing forward-mode binary scalar functions: `hypot`...
  testing forward-mode binary scalar functions: `mod`...
  testing forward-mode binary scalar functions: `rem`...
  testing forward-mode unary scalar functions: `erf`...
  testing forward-mode unary scalar functions: `erfinv`...
  testing forward-mode unary scalar functions: `erfc`...
  testing forward-mode unary scalar functions: `erfcinv`...
  testing forward-mode unary scalar functions: `erfi`...
  testing forward-mode unary scalar functions: `erfcx`...
  testing forward-mode unary scalar functions: `dawson`...
  testing forward-mode unary scalar functions: `digamma`...
  testing forward-mode unary scalar functions: `invdigamma`...
  testing forward-mode unary scalar functions: `trigamma`...
  testing forward-mode unary scalar functions: `airyai`...
  testing forward-mode unary scalar functions: `airyaiprime`...
  testing forward-mode unary scalar functions: `airybi`...
  testing forward-mode unary scalar functions: `airybiprime`...
  testing forward-mode unary scalar functions: `besselj0`...
  testing forward-mode unary scalar functions: `besselj1`...
  testing forward-mode unary scalar functions: `bessely0`...
  testing forward-mode unary scalar functions: `bessely1`...
  testing forward-mode binary scalar functions: `beta`...
  testing forward-mode binary scalar functions: `lbeta`...
  testing forward-mode unary scalar functions: `NaNMath.sqrt`...
  testing forward-mode unary scalar functions: `NaNMath.sin`...
  testing forward-mode unary scalar functions: `NaNMath.cos`...
  testing forward-mode unary scalar functions: `NaNMath.tan`...
  testing forward-mode unary scalar functions: `NaNMath.asin`...
  testing forward-mode unary scalar functions: `NaNMath.acos`...
  testing forward-mode unary scalar functions: `NaNMath.acosh`...
  testing forward-mode unary scalar functions: `NaNMath.atanh`...
  testing forward-mode unary scalar functions: `NaNMath.log`...
  testing forward-mode unary scalar functions: `NaNMath.log2`...
  testing forward-mode unary scalar functions: `NaNMath.log10`...
  testing forward-mode unary scalar functions: `NaNMath.log1p`...
  testing forward-mode unary scalar functions: `NaNMath.lgamma`...
  testing built-in broadcast operators: `DiffTests.#21`...
  testing built-in broadcast operators: `DiffTests.#22`...
  testing built-in broadcast operators: `DiffTests.#23`...
  testing built-in broadcast operators: `DiffTests.#24`...
  testing built-in broadcast operators: `DiffTests.#25`...
  testing built-in broadcast operators: `DiffTests.#26`...
done (took 177.419358718 seconds)
testing Config...
done (took 0.455638378 seconds)
testing gradient/gradient!...
  testing MATRIX_TO_NUMBER_FUNCS: `det`...
  testing MATRIX_TO_NUMBER_FUNCS: `DiffTests.mat2num_1`...
  testing MATRIX_TO_NUMBER_FUNCS: `DiffTests.mat2num_2`...
  testing MATRIX_TO_NUMBER_FUNCS: `DiffTests.mat2num_3`...
  testing MATRIX_TO_NUMBER_FUNCS: `DiffTests.mat2num_4`...
  testing MATRIX_TO_NUMBER_FUNCS: `DiffTests.softmax`...
  testing VECTOR_TO_NUMBER_FUNCS: `DiffTests.vec2num_1`...
  testing VECTOR_TO_NUMBER_FUNCS: `DiffTests.vec2num_2`...
  testing VECTOR_TO_NUMBER_FUNCS: `DiffTests.vec2num_3`...
  testing VECTOR_TO_NUMBER_FUNCS: `DiffTests.vec2num_4`...
  testing VECTOR_TO_NUMBER_FUNCS: `DiffTests.vec2num_5`...
  testing VECTOR_TO_NUMBER_FUNCS: `DiffTests.vec2num_6`...
  testing VECTOR_TO_NUMBER_FUNCS: `DiffTests.rosenbrock_1`...
  testing VECTOR_TO_NUMBER_FUNCS: `DiffTests.rosenbrock_2`...
  testing VECTOR_TO_NUMBER_FUNCS: `DiffTests.rosenbrock_3`...
  testing VECTOR_TO_NUMBER_FUNCS: `DiffTests.rosenbrock_4`...
  testing VECTOR_TO_NUMBER_FUNCS: `DiffTests.ackley`...
  testing VECTOR_TO_NUMBER_FUNCS: `DiffTests.self_weighted_logit`...
  testing VECTOR_TO_NUMBER_FUNCS: `first`...
  testing TERNARY_MATRIX_TO_NUMBER_FUNCS: `DiffTests.neural_step`...
done (took 23.601258061 seconds)
testing jacobian/jacobian!...
  testing ARRAY_TO_ARRAY_FUNCS + MATRIX_TO_MATRIX_FUNCS: `-`...
  testing ARRAY_TO_ARRAY_FUNCS + MATRIX_TO_MATRIX_FUNCS: `DiffTests.chebyquad`...
  testing ARRAY_TO_ARRAY_FUNCS + MATRIX_TO_MATRIX_FUNCS: `DiffTests.brown_almost_linear`...
  testing ARRAY_TO_ARRAY_FUNCS + MATRIX_TO_MATRIX_FUNCS: `DiffTests.trigonometric`...
  testing ARRAY_TO_ARRAY_FUNCS + MATRIX_TO_MATRIX_FUNCS: `DiffTests.arr2arr_1`...
  testing ARRAY_TO_ARRAY_FUNCS + MATRIX_TO_MATRIX_FUNCS: `DiffTests.arr2arr_2`...
  testing ARRAY_TO_ARRAY_FUNCS + MATRIX_TO_MATRIX_FUNCS: `DiffTests.mutation_test_1`...
  testing ARRAY_TO_ARRAY_FUNCS + MATRIX_TO_MATRIX_FUNCS: `DiffTests.mutation_test_2`...
  testing ARRAY_TO_ARRAY_FUNCS + MATRIX_TO_MATRIX_FUNCS: `identity`...
  testing ARRAY_TO_ARRAY_FUNCS + MATRIX_TO_MATRIX_FUNCS: `inv`...
  testing INPLACE_ARRAY_TO_ARRAY_FUNCS: `DiffTests.chebyquad!`...
  testing INPLACE_ARRAY_TO_ARRAY_FUNCS: `DiffTests.brown_almost_linear!`...
  testing INPLACE_ARRAY_TO_ARRAY_FUNCS: `DiffTests.trigonometric!`...
  testing INPLACE_ARRAY_TO_ARRAY_FUNCS: `DiffTests.mutation_test_1!`...
  testing INPLACE_ARRAY_TO_ARRAY_FUNCS: `DiffTests.mutation_test_2!`...
  testing BINARY_MATRIX_TO_MATRIX_FUNCS: `+`...
  testing BINARY_MATRIX_TO_MATRIX_FUNCS: `-`...
  testing BINARY_MATRIX_TO_MATRIX_FUNCS: `*`...
  testing BINARY_MATRIX_TO_MATRIX_FUNCS: `/`...
  testing BINARY_MATRIX_TO_MATRIX_FUNCS: `\`...
  testing BINARY_MATRIX_TO_MATRIX_FUNCS: `DiffTests.#21`...
  testing BINARY_MATRIX_TO_MATRIX_FUNCS: `DiffTests.#22`...
  testing BINARY_MATRIX_TO_MATRIX_FUNCS: `DiffTests.#23`...
  testing BINARY_MATRIX_TO_MATRIX_FUNCS: `DiffTests.#24`...
  testing BINARY_MATRIX_TO_MATRIX_FUNCS: `DiffTests.#25`...
  testing BINARY_MATRIX_TO_MATRIX_FUNCS: `DiffTests.#26`...
  testing BINARY_MATRIX_TO_MATRIX_FUNCS: `A_mul_Bt`...
  testing BINARY_MATRIX_TO_MATRIX_FUNCS: `At_mul_B`...
  testing BINARY_MATRIX_TO_MATRIX_FUNCS: `At_mul_Bt`...
  testing BINARY_MATRIX_TO_MATRIX_FUNCS: `A_mul_Bc`...
  testing BINARY_MATRIX_TO_MATRIX_FUNCS: `Ac_mul_B`...
  testing BINARY_MATRIX_TO_MATRIX_FUNCS: `Ac_mul_Bc`...
done (took 50.998175514 seconds)
testing nested jacobians...
  testing ARRAY_TO_ARRAY_FUNCS + MATRIX_TO_MATRIX_FUNCS: `-`...
  testing ARRAY_TO_ARRAY_FUNCS + MATRIX_TO_MATRIX_FUNCS: `DiffTests.chebyquad`...
  testing ARRAY_TO_ARRAY_FUNCS + MATRIX_TO_MATRIX_FUNCS: `DiffTests.brown_almost_linear`...
  testing ARRAY_TO_ARRAY_FUNCS + MATRIX_TO_MATRIX_FUNCS: `DiffTests.trigonometric`...
  testing ARRAY_TO_ARRAY_FUNCS + MATRIX_TO_MATRIX_FUNCS: `DiffTests.arr2arr_1`...
  testing ARRAY_TO_ARRAY_FUNCS + MATRIX_TO_MATRIX_FUNCS: `DiffTests.arr2arr_2`...
  testing ARRAY_TO_ARRAY_FUNCS + MATRIX_TO_MATRIX_FUNCS: `DiffTests.mutation_test_1`...
  testing ARRAY_TO_ARRAY_FUNCS + MATRIX_TO_MATRIX_FUNCS: `DiffTests.mutation_test_2`...
  testing ARRAY_TO_ARRAY_FUNCS + MATRIX_TO_MATRIX_FUNCS: `identity`...
  testing ARRAY_TO_ARRAY_FUNCS + MATRIX_TO_MATRIX_FUNCS: `inv`...
  testing BINARY_MATRIX_TO_MATRIX_FUNCS: `+`...
  testing BINARY_MATRIX_TO_MATRIX_FUNCS: `-`...
  testing BINARY_MATRIX_TO_MATRIX_FUNCS: `*`...
  testing BINARY_MATRIX_TO_MATRIX_FUNCS: `/`...
  testing BINARY_MATRIX_TO_MATRIX_FUNCS: `\`...
  testing BINARY_MATRIX_TO_MATRIX_FUNCS: `DiffTests.#21`...
  testing BINARY_MATRIX_TO_MATRIX_FUNCS: `DiffTests.#22`...
  testing BINARY_MATRIX_TO_MATRIX_FUNCS: `DiffTests.#23`...
  testing BINARY_MATRIX_TO_MATRIX_FUNCS: `DiffTests.#24`...
  testing BINARY_MATRIX_TO_MATRIX_FUNCS: `DiffTests.#25`...
  testing BINARY_MATRIX_TO_MATRIX_FUNCS: `DiffTests.#26`...
  testing BINARY_MATRIX_TO_MATRIX_FUNCS: `A_mul_Bt`...
  testing BINARY_MATRIX_TO_MATRIX_FUNCS: `At_mul_B`...
  testing BINARY_MATRIX_TO_MATRIX_FUNCS: `At_mul_Bt`...
  testing BINARY_MATRIX_TO_MATRIX_FUNCS: `A_mul_Bc`...
  testing BINARY_MATRIX_TO_MATRIX_FUNCS: `Ac_mul_B`...
  testing BINARY_MATRIX_TO_MATRIX_FUNCS: `Ac_mul_Bc`...
done (took 322.665027025 seconds)
testing hessian/hessian!...
  testing MATRIX_TO_NUMBER_FUNCS: `det`...
  testing MATRIX_TO_NUMBER_FUNCS: `DiffTests.mat2num_1`...
  testing MATRIX_TO_NUMBER_FUNCS: `DiffTests.mat2num_2`...
  testing MATRIX_TO_NUMBER_FUNCS: `DiffTests.mat2num_3`...
  testing MATRIX_TO_NUMBER_FUNCS: `DiffTests.mat2num_4`...
  testing MATRIX_TO_NUMBER_FUNCS: `DiffTests.softmax`...
  testing VECTOR_TO_NUMBER_FUNCS: `DiffTests.vec2num_1`...
  testing VECTOR_TO_NUMBER_FUNCS: `DiffTests.vec2num_2`...
  testing VECTOR_TO_NUMBER_FUNCS: `DiffTests.vec2num_3`...
  testing VECTOR_TO_NUMBER_FUNCS: `DiffTests.vec2num_4`...
  testing VECTOR_TO_NUMBER_FUNCS: `DiffTests.vec2num_5`...
  testing VECTOR_TO_NUMBER_FUNCS: `DiffTests.vec2num_6`...
  testing VECTOR_TO_NUMBER_FUNCS: `DiffTests.rosenbrock_1`...
  testing VECTOR_TO_NUMBER_FUNCS: `DiffTests.rosenbrock_2`...
  testing VECTOR_TO_NUMBER_FUNCS: `DiffTests.rosenbrock_3`...
  testing VECTOR_TO_NUMBER_FUNCS: `DiffTests.rosenbrock_4`...
  testing VECTOR_TO_NUMBER_FUNCS: `DiffTests.ackley`...
  testing VECTOR_TO_NUMBER_FUNCS: `DiffTests.self_weighted_logit`...
  testing VECTOR_TO_NUMBER_FUNCS: `first`...
done (took 55.399347735 seconds)
INFO: ReverseDiff tests passed
INFO: Removing DiffTests v0.0.1

>>> End of log
