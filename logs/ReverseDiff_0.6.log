>>> 'Pkg.add("ReverseDiff")' log
INFO: Cloning cache of FunctionWrappers from https://github.com/yuyichao/FunctionWrappers.jl.git
INFO: Cloning cache of ReverseDiff from https://github.com/JuliaDiff/ReverseDiff.jl.git
INFO: Installing Calculus v0.2.2
INFO: Installing DiffBase v0.2.0
INFO: Installing ForwardDiff v0.4.2
INFO: Installing FunctionWrappers v0.1.0
INFO: Installing NaNMath v0.2.5
INFO: Installing ReverseDiff v0.1.4
INFO: Installing SpecialFunctions v0.1.1
INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of ReverseDiff
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("ReverseDiff")' log
Julia Version 0.6.0
Commit 9036443 (2017-06-19 13:05 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-121-generic #170-Ubuntu SMP Wed Jun 14 09:04:33 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1094.42578125 MB free)
Uptime: 54871.0 sec
Load Avg:  0.98681640625  0.998046875  0.96533203125
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz    3660462 s       6804 s     157761 s     755511 s         63 s
#2  3500 MHz     626196 s        158 s      75759 s    4689648 s          2 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.6
2 required packages:
 - JSON                          0.13.0
 - ReverseDiff                   0.1.4
7 additional packages:
 - Calculus                      0.2.2
 - Compat                        0.26.0
 - DiffBase                      0.2.0
 - ForwardDiff                   0.4.2
 - FunctionWrappers              0.1.0
 - NaNMath                       0.2.5
 - SpecialFunctions              0.1.1
INFO: Testing ReverseDiff
testing InstructionTape/AbstractInstructions...
done (took 0.520517765 seconds)
testing TrackedReals/TrackedArrays...
done (took 2.756288828 seconds)
testing macros (@forward, @skip, etc.)...
  testing @forward named functions: `ReverseDiff.ForwardOptimize{MacrosTests.#f0}(MacrosTests.f0)`...
  testing @forward named functions: `ReverseDiff.ForwardOptimize{MacrosTests.##hidden_f1}(MacrosTests.#hidden_f1)`...
  testing @forward named functions: `ReverseDiff.ForwardOptimize{MacrosTests.##hidden_f2}(MacrosTests.#hidden_f2)`...
  testing @forward named functions: `ReverseDiff.ForwardOptimize{MacrosTests.##hidden_f3}(MacrosTests.#hidden_f3)`...
  testing @forward named functions: `ReverseDiff.ForwardOptimize{MacrosTests.##hidden_f4}(MacrosTests.#hidden_f4)`...
  testing @forward named functions: `ReverseDiff.ForwardOptimize{Base.#-}(-)`...
  testing @forward anonymous functions: `ReverseDiff.ForwardOptimize{MacrosTests.##1#2}(MacrosTests.#1)`...
  testing @forward anonymous functions: `ReverseDiff.ForwardOptimize{MacrosTests.##3#4}(MacrosTests.#3)`...
  testing @skip named functions: `ReverseDiff.SkipOptimize{MacrosTests.#f0}(MacrosTests.f0)`...
  testing @skip named functions: `ReverseDiff.SkipOptimize{MacrosTests.##hidden_g1}(MacrosTests.#hidden_g1)`...
  testing @skip named functions: `ReverseDiff.SkipOptimize{MacrosTests.##hidden_g2}(MacrosTests.#hidden_g2)`...
  testing @skip named functions: `ReverseDiff.SkipOptimize{MacrosTests.##hidden_g3}(MacrosTests.#hidden_g3)`...
  testing @skip named functions: `ReverseDiff.SkipOptimize{MacrosTests.##hidden_g4}(MacrosTests.#hidden_g4)`...
  testing @skip anonymous functions: `ReverseDiff.SkipOptimize{MacrosTests.##5#6}(MacrosTests.#5)`...
  testing @skip anonymous functions: `ReverseDiff.SkipOptimize{MacrosTests.##7#8}(MacrosTests.#7)`...
done (took 2.753647262 seconds)
testing scalar derivatives (both forward and reverse passes)
  testing FORWARD_UNARY_SCALAR_FUNCS: `sqrt`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `cbrt`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `abs2`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `inv`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `log`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `log10`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `log2`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `log1p`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `exp`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `exp2`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `expm1`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `sin`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `cos`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `tan`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `sec`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `csc`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `cot`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `sind`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `cosd`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `tand`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `secd`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `cscd`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `cotd`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `asin`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `acos`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `atan`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `asec`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `acsc`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `acot`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `asind`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `acosd`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `atand`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `asecd`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `acscd`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `acotd`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `sinh`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `cosh`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `tanh`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `sech`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `csch`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `coth`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `asinh`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `acosh`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `atanh`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `asech`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `acsch`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `acoth`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `deg2rad`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `rad2deg`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `erf`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `erfinv`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `erfc`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `erfcinv`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `erfi`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `gamma`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `lgamma`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `digamma`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `invdigamma`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `trigamma`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `airyai`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `airybi`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `airyaiprime`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `airybiprime`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `besselj0`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `besselj1`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `bessely0`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `bessely1`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `erfcx`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `dawson`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `-`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `abs`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `conj`...
  testing FORWARD_BINARY_SCALAR_FUNCS: `*`...
  testing FORWARD_BINARY_SCALAR_FUNCS: `/`...
  testing FORWARD_BINARY_SCALAR_FUNCS: `+`...
  testing FORWARD_BINARY_SCALAR_FUNCS: `-`...
  testing FORWARD_BINARY_SCALAR_FUNCS: `^`...
  testing FORWARD_BINARY_SCALAR_FUNCS: `atan2`...
  testing SKIPPED_UNARY_SCALAR_FUNCS: `isinf`...
  testing SKIPPED_UNARY_SCALAR_FUNCS: `isnan`...
  testing SKIPPED_UNARY_SCALAR_FUNCS: `isfinite`...
  testing SKIPPED_UNARY_SCALAR_FUNCS: `iseven`...
  testing SKIPPED_UNARY_SCALAR_FUNCS: `isodd`...
  testing SKIPPED_UNARY_SCALAR_FUNCS: `isreal`...
  testing SKIPPED_UNARY_SCALAR_FUNCS: `isinteger`...
  testing SKIPPED_BINARY_SCALAR_FUNCS: `isequal`...
  testing SKIPPED_BINARY_SCALAR_FUNCS: `isless`...
  testing SKIPPED_BINARY_SCALAR_FUNCS: `<`...
  testing SKIPPED_BINARY_SCALAR_FUNCS: `>`...
  testing SKIPPED_BINARY_SCALAR_FUNCS: `==`...
  testing SKIPPED_BINARY_SCALAR_FUNCS: `!=`...
  testing SKIPPED_BINARY_SCALAR_FUNCS: `<=`...
  testing SKIPPED_BINARY_SCALAR_FUNCS: `>=`...
done (took 6.384555426 seconds)
testing linear algebra derivatives (both forward and reverse passes)
  testing Array -> Number functions: `sum`...
  testing Array -> Number functions: `det`...
  testing Array -> Number functions: `LinAlgTests.#17`...
  testing Array -> Number functions: `mean`...
  testing Array -> Array functions: `-`...
  testing Array -> Array functions: `inv`...
  testing (Array, Array) -> Array functions: `+`...
  testing (Array, Array) -> Array functions: `-`...
  testing A_mul_B functions: `*`...
  testing A_mul_B functions: `A_mul_Bt`...
  testing A_mul_B functions: `At_mul_B`...
  testing A_mul_B functions: `At_mul_Bt`...
  testing A_mul_B functions: `A_mul_Bc`...
  testing A_mul_B functions: `Ac_mul_B`...
  testing A_mul_B functions: `Ac_mul_Bc`...
done (took 8.40415841 seconds)
testing elementwise derivatives (both forward and reverse passes)
  testing DiffBase.NUMBER_TO_NUMBER_FUNCS: `DiffBase.num2num_1`...
  testing DiffBase.NUMBER_TO_NUMBER_FUNCS: `DiffBase.num2num_2`...
  testing DiffBase.NUMBER_TO_NUMBER_FUNCS: `DiffBase.num2num_3`...
  testing DiffBase.NUMBER_TO_NUMBER_FUNCS: `DiffBase.num2num_4`...
  testing DiffBase.NUMBER_TO_NUMBER_FUNCS: `DiffBase.num2num_5`...
  testing DiffBase.NUMBER_TO_NUMBER_FUNCS: `identity`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `sqrt`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `cbrt`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `abs2`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `inv`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `log`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `log10`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `log2`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `log1p`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `exp`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `exp2`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `expm1`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `sin`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `cos`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `tan`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `sec`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `csc`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `cot`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `sind`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `cosd`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `tand`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `secd`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `cscd`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `cotd`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `asin`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `acos`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `atan`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `asec`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `acsc`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `acot`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `asind`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `acosd`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `atand`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `asecd`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `acscd`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `acotd`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `sinh`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `cosh`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `tanh`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `sech`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `csch`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `coth`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `asinh`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `acosh`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `atanh`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `asech`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `acsch`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `acoth`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `deg2rad`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `rad2deg`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `erf`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `erfinv`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `erfc`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `erfcinv`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `erfi`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `gamma`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `lgamma`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `digamma`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `invdigamma`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `trigamma`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `airyai`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `airybi`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `airyaiprime`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `airybiprime`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `besselj0`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `besselj1`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `bessely0`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `bessely1`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `erfcx`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `dawson`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `-`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `abs`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `conj`...
  testing FORWARD_BINARY_SCALAR_FUNCS: `*`...
  testing FORWARD_BINARY_SCALAR_FUNCS: `/`...
  testing FORWARD_BINARY_SCALAR_FUNCS: `+`...
  testing FORWARD_BINARY_SCALAR_FUNCS: `-`...
  testing FORWARD_BINARY_SCALAR_FUNCS: `^`...
  testing FORWARD_BINARY_SCALAR_FUNCS: `atan2`...
  testing built-in broadcast operators: `DiffBase.#23`...
  testing built-in broadcast operators: `DiffBase.#24`...
  testing built-in broadcast operators: `DiffBase.#25`...
  testing built-in broadcast operators: `DiffBase.#26`...
  testing built-in broadcast operators: `DiffBase.#27`...
  testing built-in broadcast operators: `DiffBase.#28`...
done (took 89.863658004 seconds)
testing Config...
done (took 0.566204465 seconds)
testing gradient/gradient!...
  testing MATRIX_TO_NUMBER_FUNCS: `det`...
  testing MATRIX_TO_NUMBER_FUNCS: `DiffBase.mat2num_1`...
  testing MATRIX_TO_NUMBER_FUNCS: `DiffBase.mat2num_2`...
  testing MATRIX_TO_NUMBER_FUNCS: `DiffBase.mat2num_3`...
  testing MATRIX_TO_NUMBER_FUNCS: `DiffBase.mat2num_4`...
  testing MATRIX_TO_NUMBER_FUNCS: `DiffBase.softmax`...
  testing VECTOR_TO_NUMBER_FUNCS: `DiffBase.vec2num_1`...
  testing VECTOR_TO_NUMBER_FUNCS: `DiffBase.vec2num_2`...
  testing VECTOR_TO_NUMBER_FUNCS: `DiffBase.vec2num_3`...
  testing VECTOR_TO_NUMBER_FUNCS: `DiffBase.vec2num_4`...
  testing VECTOR_TO_NUMBER_FUNCS: `DiffBase.vec2num_5`...
  testing VECTOR_TO_NUMBER_FUNCS: `DiffBase.rosenbrock_1`...
  testing VECTOR_TO_NUMBER_FUNCS: `DiffBase.rosenbrock_2`...
  testing VECTOR_TO_NUMBER_FUNCS: `DiffBase.rosenbrock_3`...
  testing VECTOR_TO_NUMBER_FUNCS: `DiffBase.rosenbrock_4`...
  testing VECTOR_TO_NUMBER_FUNCS: `DiffBase.ackley`...
  testing VECTOR_TO_NUMBER_FUNCS: `DiffBase.self_weighted_logit`...
  testing VECTOR_TO_NUMBER_FUNCS: `first`...
  testing TERNARY_MATRIX_TO_NUMBER_FUNCS: `DiffBase.neural_step`...
done (took 21.468157386 seconds)
testing jacobian/jacobian!...
  testing ARRAY_TO_ARRAY_FUNCS + MATRIX_TO_MATRIX_FUNCS: `-`...
  testing ARRAY_TO_ARRAY_FUNCS + MATRIX_TO_MATRIX_FUNCS: `DiffBase.chebyquad`...
  testing ARRAY_TO_ARRAY_FUNCS + MATRIX_TO_MATRIX_FUNCS: `DiffBase.brown_almost_linear`...
  testing ARRAY_TO_ARRAY_FUNCS + MATRIX_TO_MATRIX_FUNCS: `DiffBase.trigonometric`...
  testing ARRAY_TO_ARRAY_FUNCS + MATRIX_TO_MATRIX_FUNCS: `DiffBase.arr2arr_1`...
  testing ARRAY_TO_ARRAY_FUNCS + MATRIX_TO_MATRIX_FUNCS: `DiffBase.arr2arr_2`...
  testing ARRAY_TO_ARRAY_FUNCS + MATRIX_TO_MATRIX_FUNCS: `DiffBase.mutation_test_1`...
  testing ARRAY_TO_ARRAY_FUNCS + MATRIX_TO_MATRIX_FUNCS: `DiffBase.mutation_test_2`...
  testing ARRAY_TO_ARRAY_FUNCS + MATRIX_TO_MATRIX_FUNCS: `identity`...
  testing ARRAY_TO_ARRAY_FUNCS + MATRIX_TO_MATRIX_FUNCS: `inv`...
  testing INPLACE_ARRAY_TO_ARRAY_FUNCS: `DiffBase.chebyquad!`...
  testing INPLACE_ARRAY_TO_ARRAY_FUNCS: `DiffBase.brown_almost_linear!`...
  testing INPLACE_ARRAY_TO_ARRAY_FUNCS: `DiffBase.trigonometric!`...
  testing INPLACE_ARRAY_TO_ARRAY_FUNCS: `DiffBase.mutation_test_1!`...
  testing INPLACE_ARRAY_TO_ARRAY_FUNCS: `DiffBase.mutation_test_2!`...
  testing BINARY_MATRIX_TO_MATRIX_FUNCS: `+`...
  testing BINARY_MATRIX_TO_MATRIX_FUNCS: `-`...
  testing BINARY_MATRIX_TO_MATRIX_FUNCS: `*`...
  testing BINARY_MATRIX_TO_MATRIX_FUNCS: `/`...
  testing BINARY_MATRIX_TO_MATRIX_FUNCS: `\`...
  testing BINARY_MATRIX_TO_MATRIX_FUNCS: `DiffBase.#23`...
  testing BINARY_MATRIX_TO_MATRIX_FUNCS: `DiffBase.#24`...
  testing BINARY_MATRIX_TO_MATRIX_FUNCS: `DiffBase.#25`...
  testing BINARY_MATRIX_TO_MATRIX_FUNCS: `DiffBase.#26`...
  testing BINARY_MATRIX_TO_MATRIX_FUNCS: `DiffBase.#27`...
  testing BINARY_MATRIX_TO_MATRIX_FUNCS: `DiffBase.#28`...
  testing BINARY_MATRIX_TO_MATRIX_FUNCS: `A_mul_Bt`...
  testing BINARY_MATRIX_TO_MATRIX_FUNCS: `At_mul_B`...
  testing BINARY_MATRIX_TO_MATRIX_FUNCS: `At_mul_Bt`...
  testing BINARY_MATRIX_TO_MATRIX_FUNCS: `A_mul_Bc`...
  testing BINARY_MATRIX_TO_MATRIX_FUNCS: `Ac_mul_B`...
  testing BINARY_MATRIX_TO_MATRIX_FUNCS: `Ac_mul_Bc`...
done (took 28.950302693 seconds)
testing nested jacobians...
  testing ARRAY_TO_ARRAY_FUNCS + MATRIX_TO_MATRIX_FUNCS: `-`...
  testing ARRAY_TO_ARRAY_FUNCS + MATRIX_TO_MATRIX_FUNCS: `DiffBase.chebyquad`...
  testing ARRAY_TO_ARRAY_FUNCS + MATRIX_TO_MATRIX_FUNCS: `DiffBase.brown_almost_linear`...
  testing ARRAY_TO_ARRAY_FUNCS + MATRIX_TO_MATRIX_FUNCS: `DiffBase.trigonometric`...
  testing ARRAY_TO_ARRAY_FUNCS + MATRIX_TO_MATRIX_FUNCS: `DiffBase.arr2arr_1`...
  testing ARRAY_TO_ARRAY_FUNCS + MATRIX_TO_MATRIX_FUNCS: `DiffBase.arr2arr_2`...
  testing ARRAY_TO_ARRAY_FUNCS + MATRIX_TO_MATRIX_FUNCS: `DiffBase.mutation_test_1`...
  testing ARRAY_TO_ARRAY_FUNCS + MATRIX_TO_MATRIX_FUNCS: `DiffBase.mutation_test_2`...
  testing ARRAY_TO_ARRAY_FUNCS + MATRIX_TO_MATRIX_FUNCS: `identity`...
  testing ARRAY_TO_ARRAY_FUNCS + MATRIX_TO_MATRIX_FUNCS: `inv`...
  testing BINARY_MATRIX_TO_MATRIX_FUNCS: `+`...
  testing BINARY_MATRIX_TO_MATRIX_FUNCS: `-`...
  testing BINARY_MATRIX_TO_MATRIX_FUNCS: `*`...
  testing BINARY_MATRIX_TO_MATRIX_FUNCS: `/`...
  testing BINARY_MATRIX_TO_MATRIX_FUNCS: `\`...
  testing BINARY_MATRIX_TO_MATRIX_FUNCS: `DiffBase.#23`...
  testing BINARY_MATRIX_TO_MATRIX_FUNCS: `DiffBase.#24`...
  testing BINARY_MATRIX_TO_MATRIX_FUNCS: `DiffBase.#25`...
  testing BINARY_MATRIX_TO_MATRIX_FUNCS: `DiffBase.#26`...
  testing BINARY_MATRIX_TO_MATRIX_FUNCS: `DiffBase.#27`...
  testing BINARY_MATRIX_TO_MATRIX_FUNCS: `DiffBase.#28`...
  testing BINARY_MATRIX_TO_MATRIX_FUNCS: `A_mul_Bt`...
  testing BINARY_MATRIX_TO_MATRIX_FUNCS: `At_mul_B`...
  testing BINARY_MATRIX_TO_MATRIX_FUNCS: `At_mul_Bt`...
  testing BINARY_MATRIX_TO_MATRIX_FUNCS: `A_mul_Bc`...
  testing BINARY_MATRIX_TO_MATRIX_FUNCS: `Ac_mul_B`...
  testing BINARY_MATRIX_TO_MATRIX_FUNCS: `Ac_mul_Bc`...
done (took 307.597800541 seconds)
testing hessian/hessian!...
  testing MATRIX_TO_NUMBER_FUNCS: `det`...
  testing MATRIX_TO_NUMBER_FUNCS: `DiffBase.mat2num_1`...
  testing MATRIX_TO_NUMBER_FUNCS: `DiffBase.mat2num_2`...
  testing MATRIX_TO_NUMBER_FUNCS: `DiffBase.mat2num_3`...
  testing MATRIX_TO_NUMBER_FUNCS: `DiffBase.mat2num_4`...
  testing MATRIX_TO_NUMBER_FUNCS: `DiffBase.softmax`...
  testing VECTOR_TO_NUMBER_FUNCS: `DiffBase.vec2num_1`...
  testing VECTOR_TO_NUMBER_FUNCS: `DiffBase.vec2num_2`...
  testing VECTOR_TO_NUMBER_FUNCS: `DiffBase.vec2num_3`...
  testing VECTOR_TO_NUMBER_FUNCS: `DiffBase.vec2num_4`...
  testing VECTOR_TO_NUMBER_FUNCS: `DiffBase.vec2num_5`...
  testing VECTOR_TO_NUMBER_FUNCS: `DiffBase.rosenbrock_1`...
  testing VECTOR_TO_NUMBER_FUNCS: `DiffBase.rosenbrock_2`...
  testing VECTOR_TO_NUMBER_FUNCS: `DiffBase.rosenbrock_3`...
  testing VECTOR_TO_NUMBER_FUNCS: `DiffBase.rosenbrock_4`...
  testing VECTOR_TO_NUMBER_FUNCS: `DiffBase.ackley`...
  testing VECTOR_TO_NUMBER_FUNCS: `DiffBase.self_weighted_logit`...
  testing VECTOR_TO_NUMBER_FUNCS: `first`...
done (took 34.867785424 seconds)
INFO: ReverseDiff tests passed

>>> End of log
