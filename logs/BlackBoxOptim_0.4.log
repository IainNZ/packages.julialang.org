>>> 'Pkg.add("BlackBoxOptim")' log
INFO: Installing BinDeps v0.4.7
INFO: Installing BlackBoxOptim v0.2.1
INFO: Installing Calculus v0.2.2
INFO: Installing Distributions v0.11.1
INFO: Installing FactCheck v0.4.3
INFO: Installing PDMats v0.6.0
INFO: Installing Rmath v0.1.7
INFO: Installing SHA v0.3.3
INFO: Installing StatsBase v0.12.0
INFO: Installing StatsFuns v0.4.0
INFO: Installing URIParser v0.1.8
INFO: Building Rmath
INFO: Package database updated

>>> 'Pkg.test("BlackBoxOptim")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-126-generic #175-Ubuntu SMP Thu Jul 20 17:33:56 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (451.734375 MB free)
Uptime: 9236.0 sec
Load Avg:  0.927734375  0.95947265625  0.9775390625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz     411718 s        136 s      39706 s     384668 s         10 s
#2  3500 MHz     278507 s         54 s      35243 s     580430 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - BlackBoxOptim                 0.2.1
 - JSON                          0.9.1
11 additional packages:
 - BinDeps                       0.4.7
 - Calculus                      0.2.2
 - Compat                        0.26.0
 - Distributions                 0.11.1
 - FactCheck                     0.4.3
 - PDMats                        0.6.0
 - Rmath                         0.1.7
 - SHA                           0.3.3
 - StatsBase                     0.12.0
 - StatsFuns                     0.4.0
 - URIParser                     0.1.8
INFO: Testing BlackBoxOptim
Latin hypercube sampling
15 facts verified.
Assign ranks within tolerance
  > Ranks correctly if none are within tolerance of each other
  > Ranks correctly if some are within tolerance of each other
  > Ranks correctly if all are within tolerance of each other
  > Ranks in reverse if none are within tolerance of each other
  > Ranks correctly for a complex example testing many aspects
25 facts verified.
DictChain
  > Matching keys and type parameters
  > merging and chaining
    > incompatible dictionary types
    > using constructor
    > using merge()
    > using merge!()
    > using chain()
  > converting to Dict
  > show()
BlackBoxOptim.DictChain{Symbol,Int64}[Dict(:a=>1),Dict(:a=>2,:b=>4),Dict(:a=>3,:b=>5)]
  > flatten
35 facts verified.
Parameters
  > When no parameters or key type doesn't match
  > With one parameter in one set
  > With parameters in multiple sets
  > Updating parameters after construction
  > Constructing from another parameters object
  > Get key without default
  > Get key with default
  > Merge with Parameters or Dict
28 facts verified.
Fitness
  > hat_compare() Float64
  > ScalarFitnessScheme
    > is_minimizing()
    > hat_compare(..., MinimizingFitnessScheme)
    > hat_compare(..., MaximizingFitnessScheme)
    > fitness_scheme(x, y)
  > TupleFitnessScheme
    > general interface
      > ParetoFitnessScheme{1}
      > ParetoFitnessScheme{1}(is_minimizing=false)
      > ParetoFitnessScheme{3}()
    > hat_compare(..., ParetoFitnessScheme{1}())
    > hat_compare(..., ParetoFitnessScheme{1}(is_minimizing=false))
    > hat_compare(..., ParetoFitnessScheme{2}(is_minimizing=true))
    > hat_compare(..., ParetoFitnessScheme{2}(is_minimizing=false))
    > is_better/is_worse/same_fitness(..., ParetoFitnessScheme{2}(is_minimizing=true))
    > is_better/is_worse/same_fitness(..., ParetoFitnessScheme{2}(is_minimizing=false))
  > ϵ-box FitnessScheme
    > ϵ-index()
    > IndexedTupleFitness
    > hat_compare(..., EpsBoxDominanceFitnessScheme{2}(...))
Out of 167 total facts:
  Verified: 163
  Pending:  4
Evaluator
  > ProblemEvaluator
    > Basic evaluation with a single-objective function to be minimized
    > update_fitness!()
    > rank_by_fitness!()
  > ParallelEvaluator
    > Basic evaluation with a single-objective function to be minimized
    > update_fitness!()
    > rank_by_fitness!()
38 facts verified.
Population
  > FitPopulation
    > candidates pool
    > append!()
21 facts verified.
Bimodal Cauchy Distributions
  > sample bimodal cauchy with truncation on one side
  > sample bimodal cauchy with truncation on both sides
400 facts verified.
Search space
  > in()
  > Symmetric search space with default range
  > SymmetricSearchSpace with given range
  > rand_individual is within the search space
  > rand_individuals creates many individuals and all are within the search space
  > rand_individuals correctly handles column-wise generation in assymetric search spaces
  > RangePerDimSearchSpace
  > rand_individuals_lhs samples in LHS intervals
  > feasible finds feasible points in the search space
  > diameters
  > concat(ss1, ss2)
7277 facts verified.
Mutation operators
  > UniformMutation
  > MutationClock
  > FixedGeneticOperatorsMixture
  > FAGeneticOperatorsMixture
22615 facts verified.
Crossover operators
  > DiffEvoRandBin1
    > always copies from donor if length is 1
    > always copies at least one element from donor
    > unlikely to copy everything if vectors are large
    > correctly modifies the parameters vector
608 facts verified.
Selection operators
  > SimpleSelector
  > RadiusLimitedSelector
  > Tournament
    > tournament()
    > select()
801 facts verified.
Embedding operators
  > RandomBound
    > does nothing if within bounds
    > bounds if lower than min bound
    > bounds if higher than max bound
11 facts verified.
Frequency Adaptation
  > returns all indices once in the first block
  > increases the frequency of a method that has higher progress values
1088 facts verified.
TopListArchive
  > TopListIndividual
  > Constructing a small archive and adding to it
  > magnitude_class for positive fitness values
  > magnitude_class for negative fitness values
  > archive copies the individuals
  > for maximizing fitness
98 facts verified.
EpsBoxArchive
  > EpsBoxFrontierIndividual
  > Constructing a small archive and adding to it
    > noprogress_streak(since_restart=0) is reset after restart
    > updating best candidate index if old and new non-dominated
    > handling dulicate elements
  > shaffer1() Pareto frontier
  > archive copies the individuals
  > simulate optimization
270 facts verified.
Random search
  > ask()
900 facts verified.
Differential evolution optimizer
  > ask()/tell!()
1000 facts verified.
Adaptive differential evolution optimizer
  > parameters adjust!()
  > ask()
1000 facts verified.
sNES
  > assign_weights!()
    > when indices are already ordered
    > when indices are not ordered
35 facts verified.
BorgMOEA
  > Schaffer1
  > CEC09_UP8
2 facts verified.
Testing methods diagnostic tracing
  > trace_state()
    > silent
    > compact
    > verbose
0 facts verified.
Top-level interface
  > run a simple optimization
    > using bboptimize() with mostly defaults
    > using bbsetup()/bboptimize() with mostly defaults
    > using non-population optimizer
    > using population optimizer
    > using population optimizer and parallel evaluator
  > continue running an optimization after it finished
  > return results after interruption
    > :RecoverResults on
WARNING: Optimization interrupted, recovering intermediate results...
    > :RecoverResults off
  > continue running an optimization after serializing to disc
49 facts verified.
bboptimize() single-objective methods smoketest
  > resampling_memetic_search
  > de_rand_2_bin_radiuslimited
  > de_rand_2_bin
  > de_rand_1_bin_radiuslimited
  > adaptive_de_rand_1_bin_radiuslimited
  > adaptive_de_rand_1_bin
  > separable_nes
  > dxnes
  > simultaneous_perturbation_stochastic_approximation
  > de_rand_1_bin
  > generating_set_search
  > resampling_inheritance_memetic_search
  > xnes
  > probabilistic_descent
  > random_search
45 facts verified.
bboptimize() multi-objective methods smoketest
  > borg_moea
4 facts verified.
Single objective functions
  > Sphere
  > Schwefel2.22
  > Schwefel1.2
  > Schwefel2.21
  > Rosenbrock
32 facts verified.
Generating set search
2 facts verified.
Random sampling on unit, n-dimensional sphere
830 facts verified.
Random direction generator
2 facts verified.
Mirrored random direction generator
10 facts verified.
Testing solver
2 facts verified.
INFO: BlackBoxOptim tests passed

>>> End of log
