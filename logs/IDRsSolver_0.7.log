>>> 'Pkg.add("IDRsSolver")' log
[ Info: Cloning cache of IDRsSolver from https://github.com/mschauer/IDRsSolver.jl.git @ Base.Pkg.Cache cache.jl:43
[ Info: Installing IDRsSolver v0.1.3 @ Base.Pkg.Entry entry.jl:543
[ Info: Package database updated @ Base.Pkg.Entry entry.jl:32
┌ Info: METADATA is out-of-date — you may not have the latest version of IDRsSolver
│ Use `Pkg.update()` to get the latest versions of your packages
└ @ Base.Pkg.Entry entry.jl:74

>>> 'Pkg.test("IDRsSolver")' log
Julia Version 0.7.0-DEV.3246
Commit 2138144d3a (2018-01-04 02:34 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
      Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-135-generic #184-Ubuntu SMP Wed Oct 18 11:55:51 UTC 2017 x86_64 x86_64
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
              speed         user         nice          sys         idle          irq
       #1  3499 MHz    5629646 s        133 s     281762 s    1245502 s         64 s
       #2  3499 MHz    1044788 s         52 s     108496 s    7203044 s          0 s
       
  Memory: 2.93927001953125 GB (684.2109375 MB free)
  Uptime: 84795.0 sec
  Load Avg:  1.02001953125  1.001953125  1.00244140625
  WORD_SIZE: 64
  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant
Packages:
  Package Directory: /home/vagrant/.julia/v0.7
  Package Status:
2 required packages:
 - IDRsSolver                    0.1.3
 - JSON                          0.16.3
2 additional packages:
 - Compat                        0.42.0
 - Nullables                     0.0.2
[ Info: Testing IDRsSolver @ Base.Pkg.Entry entry.jl:723
┌ Warning: Deprecated syntax `type` at /home/vagrant/.julia/v0.7/IDRsSolver/src/IDRsSolver.jl:6.
│ Use `mutable struct` instead.
└ @ nothing IDRsSolver.jl:6
┌ Warning: Deprecated syntax `parametric method syntax idrs_core{T}(op, args, C::T, X0 = zero(C); s = 8, tol = sqrt(eps(anorm(C))), maxiter = ^(length(C), 2))` around /home/vagrant/.julia/v0.7/IDRsSolver/src/IDRsSolver.jl:59.
│ Use `idrs_core(op, args, C::T, X0 = zero(C); s = 8, tol = sqrt(eps(anorm(C))), maxiter = ^(length(C), 2)) where T` instead.
└ @ nothing IDRsSolver.jl:59
WARNING: Base.Test is deprecated, run `using Test` instead.
  likely near /home/vagrant/.julia/v0.7/IDRsSolver/test/runtests.jl:2
┌ Warning: `eye(m::Integer)` has been deprecated in favor of `I` and `Matrix` constructors. For a direct replacement, consider `Matrix(1.0I, m, m)` or `Matrix{Float64}(I, m, m)`. If `Float64` element type is not necessary, consider the shorter `Matrix(I, m, m)` (with default `eltype(I)` `Bool`).
│   caller = top-level scope
└ @ Core :0
┌ Warning: `a::AbstractArray - b::Number` is deprecated, use `broadcast(-, a, b)` instead.
│   caller = top-level scope
└ @ Core :0
┌ Warning: `eye(m::Integer)` has been deprecated in favor of `I` and `Matrix` constructors. For a direct replacement, consider `Matrix(1.0I, m, m)` or `Matrix{Float64}(I, m, m)`. If `Float64` element type is not necessary, consider the shorter `Matrix(I, m, m)` (with default `eltype(I)` `Bool`).
│   caller = top-level scope
└ @ Core :0
┌ Warning: `a::AbstractArray - b::Number` is deprecated, use `broadcast(-, a, b)` instead.
│   caller = top-level scope
└ @ Core :0
┌ Warning: `eye(m::Integer)` has been deprecated in favor of `I` and `Matrix` constructors. For a direct replacement, consider `Matrix(1.0I, m, m)` or `Matrix{Float64}(I, m, m)`. If `Float64` element type is not necessary, consider the shorter `Matrix(I, m, m)` (with default `eltype(I)` `Bool`).
│   caller = top-level scope
└ @ Core :0
┌ Warning: `a::AbstractArray - b::Number` is deprecated, use `broadcast(-, a, b)` instead.
│   caller = top-level scope
└ @ Core :0
┌ Warning: `zeros(a::AbstractArray)` is deprecated, consider `zero(a)`, `fill(0, size(a))`, `fill!(copy(a), 0)`, or `fill!(similar(a), 0)`. Where necessary, use `fill!(similar(a), zero(eltype(a)))`.
│   caller = (::getfield(IDRsSolver, Symbol("#kw##stein")))(::NamedTuple{(:s, :tol, :maxiter),Tuple{Int64,Float64,Int64}}, ::typeof(stein), ::Array{Float64,2}, ::Array{Float64,2}, ::Array{Float64,2}) at <missing>:0
└ @ IDRsSolver <missing>:0
┌ Warning: `eye(m::Integer, n::Integer)` has been deprecated in favor of `I` and `Matrix` constructors. For a direct replacement, consider `Matrix(1.0I, m, n)` or `Matrix{Float64}(I, m, n)`. If `Float64` element type is not necessary, consider the shorter `Matrix(I, m, n)` (with default `eltype(I)` `Bool`).
│   caller = #idrs_core#4(::Int64, ::Float64, ::Int64, ::Function, ::Function, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Array{Float64,2}, ::Array{Float64,2}) at IDRsSolver.jl:78
└ @ IDRsSolver IDRsSolver.jl:78
┌ Warning: copy!(dst::AbstractArray, src::AbstractArray) is deprecated. You can either use copyto!(dst, src) of Future.copy!(dst, src) instead.
│   caller = #idrs_core#4(::Int64, ::Float64, ::Int64, ::Function, ::Function, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Array{Float64,2}, ::Array{Float64,2}) at IDRsSolver.jl:93
└ @ IDRsSolver IDRsSolver.jl:93
┌ Warning: copy!(dst::AbstractArray, src::AbstractArray) is deprecated. You can either use copyto!(dst, src) of Future.copy!(dst, src) instead.
│   caller = #idrs_core#4(::Int64, ::Float64, ::Int64, ::Function, ::Function, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Array{Float64,2}, ::Array{Float64,2}) at IDRsSolver.jl:96
└ @ IDRsSolver IDRsSolver.jl:96
┌ Warning: copy!(dst::AbstractArray, src::AbstractArray) is deprecated. You can either use copyto!(dst, src) of Future.copy!(dst, src) instead.
│   caller = #idrs_core#4(::Int64, ::Float64, ::Int64, ::Function, ::Function, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Array{Float64,2}, ::Array{Float64,2}) at IDRsSolver.jl:109
└ @ IDRsSolver IDRsSolver.jl:109
┌ Warning: copy!(dst::AbstractArray, src::AbstractArray) is deprecated. You can either use copyto!(dst, src) of Future.copy!(dst, src) instead.
│   caller = #idrs_core#4(::Int64, ::Float64, ::Int64, ::Function, ::Function, ::Tuple{Array{Float64,2},Array{Float64,2}}, ::Array{Float64,2}, ::Array{Float64,2}) at IDRsSolver.jl:148
└ @ IDRsSolver IDRsSolver.jl:148
┌ Warning: `zeros(a::AbstractArray)` is deprecated, consider `zero(a)`, `fill(0, size(a))`, `fill!(copy(a), 0)`, or `fill!(similar(a), 0)`. Where necessary, use `fill!(similar(a), zero(eltype(a)))`.
│   caller = (::getfield(IDRsSolver, Symbol("#kw##syl")))(::NamedTuple{(:s, :tol, :maxiter),Tuple{Int64,Float64,Int64}}, ::typeof(syl), ::Array{Float64,2}, ::Array{Float64,2}, ::Array{Float64,2}) at <missing>:0
└ @ IDRsSolver <missing>:0
┌ Warning: `zeros(a::AbstractArray)` is deprecated, consider `zero(a)`, `fill(0, size(a))`, `fill!(copy(a), 0)`, or `fill!(similar(a), 0)`. Where necessary, use `fill!(similar(a), zero(eltype(a)))`.
│   caller = (::getfield(IDRsSolver, Symbol("#kw##idrs")))(::NamedTuple{(:s, :tol, :maxiter),Tuple{Int64,Float64,Int64}}, ::typeof(idrs), ::Array{Float64,2}, ::Array{Float64,1}) at <missing>:0
└ @ IDRsSolver <missing>:0
┌ Warning: `eye(m::Integer, n::Integer)` has been deprecated in favor of `I` and `Matrix` constructors. For a direct replacement, consider `Matrix(1.0I, m, n)` or `Matrix{Float64}(I, m, n)`. If `Float64` element type is not necessary, consider the shorter `Matrix(I, m, n)` (with default `eltype(I)` `Bool`).
│   caller = #idrs_core#4(::Int64, ::Float64, ::Int64, ::Function, ::Function, ::Tuple{Array{Float64,2}}, ::Array{Float64,1}, ::Array{Float64,1}) at IDRsSolver.jl:78
└ @ IDRsSolver IDRsSolver.jl:78
┌ Warning: copy!(dst::AbstractArray, src::AbstractArray) is deprecated. You can either use copyto!(dst, src) of Future.copy!(dst, src) instead.
│   caller = #idrs_core#4(::Int64, ::Float64, ::Int64, ::Function, ::Function, ::Tuple{Array{Float64,2}}, ::Array{Float64,1}, ::Array{Float64,1}) at IDRsSolver.jl:93
└ @ IDRsSolver IDRsSolver.jl:93
┌ Warning: copy!(dst::AbstractArray, src::AbstractArray) is deprecated. You can either use copyto!(dst, src) of Future.copy!(dst, src) instead.
│   caller = #idrs_core#4(::Int64, ::Float64, ::Int64, ::Function, ::Function, ::Tuple{Array{Float64,2}}, ::Array{Float64,1}, ::Array{Float64,1}) at IDRsSolver.jl:96
└ @ IDRsSolver IDRsSolver.jl:96
┌ Warning: copy!(dst::AbstractArray, src::AbstractArray) is deprecated. You can either use copyto!(dst, src) of Future.copy!(dst, src) instead.
│   caller = #idrs_core#4(::Int64, ::Float64, ::Int64, ::Function, ::Function, ::Tuple{Array{Float64,2}}, ::Array{Float64,1}, ::Array{Float64,1}) at IDRsSolver.jl:109
└ @ IDRsSolver IDRsSolver.jl:109
┌ Warning: copy!(dst::AbstractArray, src::AbstractArray) is deprecated. You can either use copyto!(dst, src) of Future.copy!(dst, src) instead.
│   caller = #idrs_core#4(::Int64, ::Float64, ::Int64, ::Function, ::Function, ::Tuple{Array{Float64,2}}, ::Array{Float64,1}, ::Array{Float64,1}) at IDRsSolver.jl:148
└ @ IDRsSolver IDRsSolver.jl:148
[ Info: IDRsSolver tests passed @ Base.Pkg.Entry entry.jl:737

>>> End of log
