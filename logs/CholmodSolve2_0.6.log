>>> 'Pkg.add("CholmodSolve2")' log
INFO: Cloning cache of CholmodSolve2 from https://github.com/mfalt/CholmodSolve2.jl.git
INFO: Installing CholmodSolve2 v0.1.0
INFO: Package database updated

>>> 'Pkg.test("CholmodSolve2")' log
Julia Version 0.6.2
Commit d386e40c17 (2017-12-13 18:08 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-135-generic #184-Ubuntu SMP Wed Oct 18 11:55:51 UTC 2017 x86_64 x86_64
Memory: 2.93927001953125 GB (905.71875 MB free)
Uptime: 30965.0 sec
Load Avg:  0.9970703125  0.9853515625  0.98828125
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3506 MHz    1644251 s       4218 s      84146 s     936580 s         26 s
#2  3506 MHz     416807 s       2584 s      40756 s    2583938 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.6
2 required packages:
 - CholmodSolve2                 0.1.0
 - JSON                          0.16.4
2 additional packages:
 - Compat                        0.53.0
 - Nullables                     0.0.3
INFO: Testing CholmodSolve2

CHOLMOD version 3.0.6, July 14, 2015: Test1: status: OK
  Architecture: Linux
    sizeof(int):      4
    sizeof(SuiteSparse_long):  8
    sizeof(void *):   8
    sizeof(double):   8
    sizeof(Int):      8 (CHOLMOD's basic integer)
    sizeof(BLAS_INT): 8 (integer used in the BLAS)
  Results from most recent analysis:
    Cholesky flop count: 1.4807e+07
    Nonzeros in L:       80400
  memory blocks in use:          32
  memory in use (MB):           7.6
  peak memory usage (MB):      16.6
  maxrank:    update/downdate rank:   8
  supernodal control: 0 40 (always do simplicial)
  nmethods=0: default strategy:  Try user permutation if given.  Try AMD.
    Select best ordering tried.
    method 0: user permutation (if given)
    method 1: AMD (or COLAMD if factorizing AA')
        prune_dense: for pruning dense nodes:   10
        a dense node has degree >= max(16,(10)*sqrt(n))
        flop count: 1.4807e+07
        nnz(L):     80400
  final_asis: TRUE, leave as is
  dbound:  LDL' diagonal threshold:  0
    Entries with abs. value less than dbound are replaced with +/- dbound.
  grow0: memory reallocation:  1.2
  grow1: memory reallocation:  1.2
  grow2: memory reallocation: 5
  nrelax, zrelax:  supernodal amalgamation rule:
    s = # columns in two adjacent supernodes
    z = % of zeros in new supernode if they are merged.
    Two supernodes are merged if (s <= 4) or (no new zero entries) or
    (s <= 16 and z < 80%) or (s <= 48 and z < 10%) or (z < 5%)
  OK


CHOLMOD version 3.0.6, July 14, 2015: Test1: status: OK
  Architecture: Linux
    sizeof(int):      4
    sizeof(SuiteSparse_long):  8
    sizeof(void *):   8
    sizeof(double):   8
    sizeof(Int):      8 (CHOLMOD's basic integer)
    sizeof(BLAS_INT): 8 (integer used in the BLAS)
  Results from most recent analysis:
    Cholesky flop count: 1.4807e+07
    Nonzeros in L:       80400
  memory blocks in use:          10
  memory in use (MB):           0.2
  peak memory usage (MB):      16.6
  maxrank:    update/downdate rank:   8
  supernodal control: 0 40 (always do simplicial)
  nmethods=0: default strategy:  Try user permutation if given.  Try AMD.
    Select best ordering tried.
    method 0: user permutation (if given)
    method 1: AMD (or COLAMD if factorizing AA')
        prune_dense: for pruning dense nodes:   10
        a dense node has degree >= max(16,(10)*sqrt(n))
        flop count: 1.4807e+07
        nnz(L):     80400
  final_asis: TRUE, leave as is
  dbound:  LDL' diagonal threshold:  0
    Entries with abs. value less than dbound are replaced with +/- dbound.
  grow0: memory reallocation:  1.2
  grow1: memory reallocation:  1.2
  grow2: memory reallocation: 5
  nrelax, zrelax:  supernodal amalgamation rule:
    s = # columns in two adjacent supernodes
    z = % of zeros in new supernode if they are merged.
    Two supernodes are merged if (s <= 4) or (no new zero entries) or
    (s <= 16 and z < 80%) or (s <= 48 and z < 10%) or (z < 5%)
  OK

INFO: CholmodSolve2 tests passed

>>> End of log
