>>> 'Pkg.add("TimeZones")' log
[ Info: Installing Mocking v0.4.4
[ Info: Installing TimeZones v0.6.0
[ Info: Building TimeZones
WARNING: importing deprecated binding Base.serialize into TZData.
WARNING: Base.serialize is deprecated: it has been moved to the standard library package `Serialization`.
Add a `using Serialization` to your imports..
  likely near /home/vagrant/.julia/v0.7/TimeZones/deps/build.jl:6
WARNING: Base.serialize is deprecated: it has been moved to the standard library package `Serialization`.
Add a `using Serialization` to your imports..
  likely near /home/vagrant/.julia/v0.7/TimeZones/deps/build.jl:6
WARNING: Base.serialize is deprecated: it has been moved to the standard library package `Serialization`.
Add a `using Serialization` to your imports..
  likely near /home/vagrant/.julia/v0.7/TimeZones/deps/build.jl:6
WARNING: Base.serialize is deprecated: it has been moved to the standard library package `Serialization`.
Add a `using Serialization` to your imports..
  likely near /home/vagrant/.julia/v0.7/TimeZones/deps/build.jl:6
WARNING: Base.serialize is deprecated: it has been moved to the standard library package `Serialization`.
Add a `using Serialization` to your imports..
  likely near /home/vagrant/.julia/v0.7/TimeZones/deps/build.jl:6
┌ Warning: `info()` is deprecated, use `@info` instead.
│   caller = #build#34(::Bool, ::Function, ::String, ::Array{String,1}, ::String, ::String, ::String) at build.jl:49
└ @ TimeZones.TZData build.jl:49
INFO: Extracting tzdata archive
africa
antarctica
asia
australasia
europe
northamerica
southamerica
┌ Warning: `info()` is deprecated, use `@info` instead.
│   caller = #build#34(::Bool, ::Function, ::String, ::Array{String,1}, ::String, ::String, ::String) at build.jl:54
└ @ TimeZones.TZData build.jl:54
INFO: Converting tz source files into TimeZone data
┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `contains(s, r)` instead.
│   caller = (::getfield(TimeZones.TZData, Symbol("##28#29")){Dict{AbstractString,Array{TimeZones.TZData.Zone,1}},Dict{AbstractString,Array{TimeZones.TZData.Rule,1}},Dict{AbstractString,AbstractString}})(::IOStream) at compile.jl:506
└ @ TimeZones.TZData compile.jl:506
┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `contains(s, r)` instead.
│   caller = ruleparse(::SubString{String}, ::SubString{String}, ::SubString{String}, ::SubString{String}, ::SubString{String}, ::SubString{String}, ::SubString{String}, ::SubString{String}) at compile.jl:165
└ @ TimeZones.TZData compile.jl:165
┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `contains(s, r)` instead.
│   caller = ruleparse(::SubString{String}, ::SubString{String}, ::SubString{String}, ::SubString{String}, ::SubString{String}, ::SubString{String}, ::SubString{String}, ::SubString{String}) at compile.jl:169
└ @ TimeZones.TZData compile.jl:169
┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `contains(s, r)` instead.
│   caller = ruleparse(::SubString{String}, ::SubString{String}, ::SubString{String}, ::SubString{String}, ::SubString{String}, ::SubString{String}, ::SubString{String}, ::SubString{String}) at compile.jl:180
└ @ TimeZones.TZData compile.jl:180
┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `contains(s, r)` instead.
│   caller = ruleparse(::SubString{String}, ::SubString{String}, ::SubString{String}, ::SubString{String}, ::SubString{String}, ::SubString{String}, ::SubString{String}, ::SubString{String}) at compile.jl:175
└ @ TimeZones.TZData compile.jl:175
┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `contains(s, r)` instead.
│   caller = zoneparse(::SubString{String}, ::SubString{String}, ::SubString{String}, ::SubString{String}) at compile.jl:226
└ @ TimeZones.TZData compile.jl:226
┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `contains(s, r)` instead.
│   caller = zoneparse(::SubString{String}, ::SubString{String}, ::SubString{String}, ::String) at compile.jl:226
└ @ TimeZones.TZData compile.jl:226
┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `contains(s, r)` instead.
│   caller = abbr_string(::SubString{String}, ::TimeZones.TZData.TimeOffset, ::String) at compile.jl:151
└ @ TimeZones.TZData compile.jl:151
┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `contains(s, r)` instead.
│   caller = abbr_string(::SubString{String}, ::TimeZones.TZData.TimeOffset, ::SubString{String}) at compile.jl:151
└ @ TimeZones.TZData compile.jl:151
┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `contains(s, r)` instead.
│   caller = abbr_string(::SubString{String}, ::TimeZones.TZData.TimeOffset, ::String) at compile.jl:151
└ @ TimeZones.TZData compile.jl:151
┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `contains(s, r)` instead.
│   caller = abbr_string(::SubString{String}, ::TimeZones.TZData.TimeOffset, ::SubString{String}) at compile.jl:151
└ @ TimeZones.TZData compile.jl:151
WARNING: Base.serialize is deprecated: it has been moved to the standard library package `Serialization`.
Add a `using Serialization` to your imports..
  likely near /home/vagrant/.julia/v0.7/TimeZones/deps/build.jl:6
in #32 at /home/vagrant/.julia/v0.7/TimeZones/src/tzdata/compile.jl
┌ Warning: `info()` is deprecated, use `@info` instead.
│   caller = #build#5 at TimeZones.jl:124 [inlined]
└ @ Core TimeZones.jl:124
INFO: Successfully built TimeZones
[ Info: Package database updated
┌ Info: METADATA is out-of-date — you may not have the latest version of TimeZones
└ Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("TimeZones")' log
Julia Version 0.7.0-DEV.3583
Commit 7d3991f784 (2018-01-26 19:00 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
      Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-135-generic #184-Ubuntu SMP Wed Oct 18 11:55:51 UTC 2017 x86_64 x86_64
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
              speed         user         nice          sys         idle          irq
       #1  3499 MHz    4210626 s        112 s     203808 s    1100940 s         60 s
       #2  3499 MHz     949249 s       7456 s      78872 s    5340474 s          0 s
       
  Memory: 2.93927001953125 GB (855.96875 MB free)
  Uptime: 64786.0 sec
  Load Avg:  0.97998046875  0.96630859375  0.95458984375
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant
Packages:
  Package Directory: /home/vagrant/.julia/v0.7
  Package Status:
2 required packages:
 - JSON                          0.16.4
 - TimeZones                     0.6.0
4 additional packages:
 - Compat                        0.49.0
 - Mocking                       0.4.4
 - Nullables                     0.0.3
 - tmpJpLd7f                     0.0.0-             non-repo (unregistered)
[ Info: Testing TimeZones
┌ Warning: `warn()` is deprecated, use `@warn` instead.
│   caller = #warn#895(::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::String, ::Vararg{String,N} where N) at deprecated.jl:1088
└ @ Base deprecated.jl:1088
WARNING: `julia` not started with `--compiled-modules=no`. Disabling tests that require Mocking
WARNING: importing deprecated binding Base.serialize into TZData.
WARNING: Base.serialize is deprecated: it has been moved to the standard library package `Serialization`.
Add a `using Serialization` to your imports..
  likely near /home/vagrant/.julia/v0.7/TimeZones/test/runtests.jl:30
WARNING: Base.serialize is deprecated: it has been moved to the standard library package `Serialization`.
Add a `using Serialization` to your imports..
  likely near /home/vagrant/.julia/v0.7/TimeZones/test/runtests.jl:30
WARNING: Base.serialize is deprecated: it has been moved to the standard library package `Serialization`.
Add a `using Serialization` to your imports..
  likely near /home/vagrant/.julia/v0.7/TimeZones/test/runtests.jl:30
WARNING: Base.serialize is deprecated: it has been moved to the standard library package `Serialization`.
Add a `using Serialization` to your imports..
  likely near /home/vagrant/.julia/v0.7/TimeZones/test/runtests.jl:30
WARNING: Base.serialize is deprecated: it has been moved to the standard library package `Serialization`.
Add a `using Serialization` to your imports..
  likely near /home/vagrant/.julia/v0.7/TimeZones/test/runtests.jl:30
┌ Warning: `info()` is deprecated, use `@info` instead.
│   caller = #build#34(::Bool, ::Function, ::String, ::NTuple{4,String}, ::String, ::String, ::String) at build.jl:36
└ @ TimeZones.TZData build.jl:36
INFO: Downloading 2016j tzdata
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0
  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0 10  313k   10 32766    0     0  17280      0  0:00:18  0:00:01  0:00:17 27282100  313k  100  313k    0     0   161k      0  0:00:01  0:00:01 --:--:--  251k
┌ Warning: `info()` is deprecated, use `@info` instead.
│   caller = #build#34(::Bool, ::Function, ::String, ::NTuple{4,String}, ::String, ::String, ::String) at build.jl:49
└ @ TimeZones.TZData build.jl:49
INFO: Extracting tzdata archive
┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `contains(s, r)` instead.
│   caller = (::getfield(TimeZones.TZData, Symbol("##28#29")){Dict{AbstractString,Array{TimeZones.TZData.Zone,1}},Dict{AbstractString,Array{TimeZones.TZData.Rule,1}},Dict{AbstractString,AbstractString}})(::IOStream) at compile.jl:506
└ @ TimeZones.TZData compile.jl:506
┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `contains(s, r)` instead.
│   caller = ruleparse(::SubString{String}, ::SubString{String}, ::SubString{String}, ::SubString{String}, ::Any, ::SubString{String}, ::Any, ::SubString{String}) at compile.jl:165
└ @ TimeZones.TZData compile.jl:165
┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `contains(s, r)` instead.
│   caller = ruleparse(::SubString{String}, ::SubString{String}, ::SubString{String}, ::SubString{String}, ::Any, ::SubString{String}, ::Any, ::SubString{String}) at compile.jl:169
└ @ TimeZones.TZData compile.jl:169
┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `contains(s, r)` instead.
│   caller = ruleparse(::SubString{String}, ::SubString{String}, ::SubString{String}, ::SubString{String}, ::Any, ::SubString{String}, ::Any, ::SubString{String}) at compile.jl:180
└ @ TimeZones.TZData compile.jl:180
┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `contains(s, r)` instead.
│   caller = zoneparse(::SubString{String}, ::SubString{String}, ::SubString{String}, ::SubString{String}) at compile.jl:226
└ @ TimeZones.TZData compile.jl:226
┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `contains(s, r)` instead.
│   caller = zoneparse(::SubString{String}, ::SubString{String}, ::SubString{String}, ::String) at compile.jl:226
└ @ TimeZones.TZData compile.jl:226
┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `contains(s, r)` instead.
│   caller = ruleparse(::SubString{String}, ::SubString{String}, ::SubString{String}, ::SubString{String}, ::Any, ::SubString{String}, ::Any, ::SubString{String}) at compile.jl:175
└ @ TimeZones.TZData compile.jl:175
┌ Warning: `findin(a, b)` is deprecated, use `findall(occursin(b), a)` instead.
│   caller = optional(::Expr) at utils.jl:51
└ @ TimeZones utils.jl:51
┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `contains(s, r)` instead.
│   caller = top-level scope
└ @ Core :0
┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `contains(s, r)` instead.
│   caller = (::getfield(, Symbol("##10#12")))(::String) at download.jl:29
└ @ Main download.jl:29
┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `contains(s, r)` instead.
│   caller = ruleparse(::String, ::String, ::String, ::String, ::Any, ::String, ::Any, ::String) at compile.jl:165
└ @ TimeZones.TZData compile.jl:165
┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `contains(s, r)` instead.
│   caller = ruleparse(::String, ::String, ::String, ::String, ::Any, ::String, ::Any, ::String) at compile.jl:169
└ @ TimeZones.TZData compile.jl:169
┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `contains(s, r)` instead.
│   caller = ruleparse(::String, ::String, ::String, ::String, ::Any, ::String, ::Any, ::String) at compile.jl:180
└ @ TimeZones.TZData compile.jl:180
┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `contains(s, r)` instead.
│   caller = abbr_string(::SubString{String}, ::TimeOffset, ::String) at compile.jl:151
└ @ TimeZones.TZData compile.jl:151
┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `contains(s, r)` instead.
│   caller = abbr_string(::SubString{String}, ::TimeOffset, ::SubString{String}) at compile.jl:151
└ @ TimeZones.TZData compile.jl:151
┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `contains(s, r)` instead.
│   caller = abbr_string(::SubString{String}, ::TimeOffset, ::SubString{String}) at compile.jl:151
└ @ TimeZones.TZData compile.jl:151
┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `contains(s, r)` instead.
│   caller = abbr_string(::SubString{String}, ::TimeOffset, ::String) at compile.jl:151
└ @ TimeZones.TZData compile.jl:151
┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `contains(s, r)` instead.
│   caller = abbr_string(::String, ::TimeOffset, ::String) at compile.jl:151
└ @ TimeZones.TZData compile.jl:151
┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `contains(s, r)` instead.
│   caller = zoneparse(::String, ::String, ::String, ::String) at compile.jl:226
└ @ TimeZones.TZData compile.jl:226
WARNING: importing deprecated binding Base.deserialize into TimeZones.
WARNING: Base.deserialize is deprecated: it has been moved to the standard library package `Serialization`.
Add a `using Serialization` to your imports..
  likely near /home/vagrant/.julia/v0.7/TimeZones/test/interpret.jl:58
WARNING: Base.deserialize is deprecated: it has been moved to the standard library package `Serialization`.
Add a `using Serialization` to your imports..
  likely near /home/vagrant/.julia/v0.7/TimeZones/test/interpret.jl:58
┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `contains(s, r)` instead.
│   caller = (::getfield(TimeZones, Symbol("##1#3")){SubString{String}})() at TimeZones.jl:67
└ @ TimeZones TimeZones.jl:67
WARNING: Base.deserialize is deprecated: it has been moved to the standard library package `Serialization`.
Add a `using Serialization` to your imports..
  likely near /home/vagrant/.julia/v0.7/TimeZones/test/io.jl:66
in #open#318 at iostream.jl
┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `contains(s, r)` instead.
│   caller = (::getfield(TimeZones, Symbol("##1#3")){String})() at TimeZones.jl:67
└ @ TimeZones TimeZones.jl:67
┌ Warning: `find` is deprecated, use `findall` instead.
│   caller = overlap(::Array{Transition,1}, ::Array{Transition,1}) at tzfile.jl:18
└ @ Main tzfile.jl:18
┌ Warning: `find` is deprecated, use `findall` instead.
│   caller = overlap(::Array{Transition,1}, ::Array{Transition,1}) at tzfile.jl:18
└ @ Main tzfile.jl:18
┌ Warning: `unshift!` is deprecated, use `pushfirst!` instead.
│   caller = localzone() at local.jl:53
└ @ TimeZones local.jl:53
┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `contains(s, r)` instead.
│   caller = istimezone(::String) at TimeZones.jl:101
└ @ TimeZones TimeZones.jl:101
Test Summary: | Pass  Total
TimeZones     | 1340   1340
[ Info: TimeZones tests passed

>>> End of log
