>>> 'Pkg.add("TimeZones")' log
[ Info: Installing Mocking v0.4.4
[ Info: Installing TimeZones v0.6.0
[ Info: Building TimeZones
WARNING: importing deprecated binding Base.serialize into TZData.
┌ Warning: `info()` is deprecated, use `@info` instead.
│   caller = #build#34(::Bool, ::Function, ::String, ::Array{String,1}, ::String, ::String, ::String) at build.jl:49
└ @ TimeZones.TZData build.jl:49
INFO: Extracting tzdata archive
africa
antarctica
asia
australasia
europe
northamerica
southamerica
┌ Warning: `info()` is deprecated, use `@info` instead.
│   caller = #build#34(::Bool, ::Function, ::String, ::Array{String,1}, ::String, ::String, ::String) at build.jl:54
└ @ TimeZones.TZData build.jl:54
INFO: Converting tz source files into TimeZone data
┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `contains(s, r)` instead.
│   caller = (::getfield(TimeZones.TZData, Symbol("##28#29")){Dict{AbstractString,Array{TimeZones.TZData.Zone,1}},Dict{AbstractString,Array{TimeZones.TZData.Rule,1}},Dict{AbstractString,AbstractString}})(::IOStream) at compile.jl:506
└ @ TimeZones.TZData compile.jl:506
┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `contains(s, r)` instead.
│   caller = ruleparse(::SubString{String}, ::SubString{String}, ::SubString{String}, ::SubString{String}, ::Any, ::SubString{String}, ::Any, ::SubString{String}) at compile.jl:165
└ @ TimeZones.TZData compile.jl:165
┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `contains(s, r)` instead.
│   caller = ruleparse(::SubString{String}, ::SubString{String}, ::SubString{String}, ::SubString{String}, ::Any, ::SubString{String}, ::Any, ::SubString{String}) at compile.jl:169
└ @ TimeZones.TZData compile.jl:169
┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `contains(s, r)` instead.
│   caller = ruleparse(::SubString{String}, ::SubString{String}, ::SubString{String}, ::SubString{String}, ::Any, ::SubString{String}, ::Any, ::SubString{String}) at compile.jl:180
└ @ TimeZones.TZData compile.jl:180
┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `contains(s, r)` instead.
│   caller = ruleparse(::SubString{String}, ::SubString{String}, ::SubString{String}, ::SubString{String}, ::Any, ::SubString{String}, ::Any, ::SubString{String}) at compile.jl:175
└ @ TimeZones.TZData compile.jl:175
┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `contains(s, r)` instead.
│   caller = zoneparse(::SubString{String}, ::SubString{String}, ::SubString{String}, ::SubString{String}) at compile.jl:226
└ @ TimeZones.TZData compile.jl:226
┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `contains(s, r)` instead.
│   caller = zoneparse(::SubString{String}, ::SubString{String}, ::SubString{String}, ::String) at compile.jl:226
└ @ TimeZones.TZData compile.jl:226
┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `contains(s, r)` instead.
│   caller = abbr_string(::SubString{String}, ::TimeZones.TZData.TimeOffset, ::String) at compile.jl:151
└ @ TimeZones.TZData compile.jl:151
┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `contains(s, r)` instead.
│   caller = abbr_string(::SubString{String}, ::TimeZones.TZData.TimeOffset, ::SubString{String}) at compile.jl:151
└ @ TimeZones.TZData compile.jl:151
┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `contains(s, r)` instead.
│   caller = abbr_string(::SubString{String}, ::TimeZones.TZData.TimeOffset, ::String) at compile.jl:151
└ @ TimeZones.TZData compile.jl:151
┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `contains(s, r)` instead.
│   caller = abbr_string(::SubString{String}, ::TimeZones.TZData.TimeOffset, ::SubString{String}) at compile.jl:151
└ @ TimeZones.TZData compile.jl:151
┌ Error: ------------------------------------------------------------
│ # Build failed for TimeZones
│   exception =
│    LoadError: Base.serialize has been moved to the standard library package Serialization.
│    Restart Julia and then run `using Serialization` to load it.
│    Stacktrace:
│     [1] error(::Function, ::String, ::String, ::String, ::String, ::String, ::String) at ./error.jl:42
│     [2] #serialize#960 at ./deprecated.jl:138 [inlined]
│     [3] serialize at ./deprecated.jl:138 [inlined]
│     [4] #32 at /home/vagrant/.julia/v0.7/TimeZones/src/tzdata/compile.jl:563 [inlined]
│     [5] #open#317(::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::getfield(TimeZones.TZData, Symbol("##32#33")), ::String, ::Vararg{String,N} where N) at ./iostream.jl:369
│     [6] open at ./iostream.jl:367 [inlined]
│     [7] #compile#31(::Int64, ::Function, ::String, ::String) at /home/vagrant/.julia/v0.7/TimeZones/src/tzdata/compile.jl:562
│     [8] compile at /home/vagrant/.julia/v0.7/TimeZones/src/tzdata/compile.jl:551 [inlined]
│     [9] #build#34(::Bool, ::Function, ::String, ::Array{String,1}, ::String, ::String, ::String) at /home/vagrant/.julia/v0.7/TimeZones/src/tzdata/build.jl:55
│     [10] #build at ./<missing>:0 [inlined]
│     [11] build(::String, ::Array{String,1}) at /home/vagrant/.julia/v0.7/TimeZones/src/tzdata/build.jl:72
│     [12] #build#5 at /home/vagrant/.julia/v0.7/TimeZones/src/TimeZones.jl:118 [inlined]
│     [13] build at /home/vagrant/.julia/v0.7/TimeZones/src/TimeZones.jl:118 [inlined] (repeats 2 times)
│     [14] top-level scope
│     [15] include at ./boot.jl:292 [inlined]
│     [16] include_relative(::Module, ::String) at ./loading.jl:1012
│     [17] include at ./sysimg.jl:26 [inlined]
│     [18] include(::String) at ./loading.jl:1046
│     [19] top-level scope
│     [20] eval at ./boot.jl:295 [inlined]
│     [21] eval at ./sysimg.jl:71 [inlined]
│     [22] evalfile(::String, ::Array{String,1}) at ./loading.jl:1041 (repeats 2 times)
│     [23] #2 at ./none:14 [inlined]
│     [24] cd(::getfield(, Symbol("##2#5")){String}, ::String) at ./file.jl:70
│     [25] (::getfield(, Symbol("##1#3")))(::IOStream) at ./none:13
│     [26] #open#317(::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::getfield(, Symbol("##1#3")), ::String, ::Vararg{String,N} where N) at ./iostream.jl:369
│     [27] open(::Function, ::String, ::String) at ./iostream.jl:367
│     [28] top-level scope
│     [29] eval at ./boot.jl:295 [inlined]
│     [30] eval(::Module, ::Expr) at ./sysimg.jl:71
│     [31] process_options(::Base.JLOptions) at ./client.jl:311
│     [32] _start() at ./client.jl:386
│    in expression starting at /home/vagrant/.julia/v0.7/TimeZones/deps/build.jl:6
└ @ Main none:17
┌ Warning: ------------------------------------------------------------
│ # Build error summary
│ 
│ TimeZones had build errors.
│ 
│  - packages with build errors remain installed in /home/vagrant/.julia/v0.7
│  - build the package(s) and all dependencies with `Pkg.build("TimeZones")`
│  - build a single package by running its `deps/build.jl` script
└ @ Base.Pkg.Entry entry.jl:649
[ Info: Package database updated
┌ Info: METADATA is out-of-date — you may not have the latest version of TimeZones
└ Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("TimeZones")' log
Julia Version 0.7.0-DEV.3563
Commit cf6303abe0 (2018-01-24 23:08 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
      Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-135-generic #184-Ubuntu SMP Wed Oct 18 11:55:51 UTC 2017 x86_64 x86_64
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
              speed         user         nice          sys         idle          irq
       #1  3499 MHz    4350365 s       2572 s     210887 s    1418802 s         83 s
       #2  3499 MHz    1064177 s       4431 s      91312 s    5653159 s          2 s
       
  Memory: 2.93927001953125 GB (699.078125 MB free)
  Uptime: 69707.0 sec
  Load Avg:  0.9697265625  0.9853515625  0.9599609375
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant
Packages:
  Package Directory: /home/vagrant/.julia/v0.7
  Package Status:
2 required packages:
 - JSON                          0.16.4
 - TimeZones                     0.6.0
4 additional packages:
 - Compat                        0.49.0
 - Mocking                       0.4.4
 - Nullables                     0.0.3
 - tmp8IAMyc                     0.0.0-             non-repo (unregistered)
[ Info: Testing TimeZones
┌ Warning: `warn()` is deprecated, use `@warn` instead.
│   caller = #warn#972(::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::String, ::Vararg{String,N} where N) at deprecated.jl:1177
└ @ Base deprecated.jl:1177
WARNING: `julia` not started with `--compiled-modules=no`. Disabling tests that require Mocking
WARNING: importing deprecated binding Base.serialize into TZData.
┌ Warning: `info()` is deprecated, use `@info` instead.
│   caller = #build#34(::Bool, ::Function, ::String, ::NTuple{4,String}, ::String, ::String, ::String) at build.jl:36
└ @ TimeZones.TZData build.jl:36
INFO: Downloading 2016j tzdata
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0
  5  313k    5 16384    0     0   8039      0  0:00:39  0:00:02  0:00:37  8039 20  313k   20 65533    0     0  32111      0  0:00:10  0:00:02  0:00:08 15.6M100  313k  100  313k    0     0   153k      0  0:00:02  0:00:02 --:--:-- 29.0M
┌ Warning: `info()` is deprecated, use `@info` instead.
│   caller = #build#34(::Bool, ::Function, ::String, ::NTuple{4,String}, ::String, ::String, ::String) at build.jl:49
└ @ TimeZones.TZData build.jl:49
INFO: Extracting tzdata archive
┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `contains(s, r)` instead.
│   caller = (::getfield(TimeZones.TZData, Symbol("##28#29")){Dict{AbstractString,Array{TimeZones.TZData.Zone,1}},Dict{AbstractString,Array{TimeZones.TZData.Rule,1}},Dict{AbstractString,AbstractString}})(::IOStream) at compile.jl:506
└ @ TimeZones.TZData compile.jl:506
┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `contains(s, r)` instead.
│   caller = ruleparse(::SubString{String}, ::SubString{String}, ::SubString{String}, ::SubString{String}, ::Any, ::Any, ::Any, ::SubString{String}) at compile.jl:165
└ @ TimeZones.TZData compile.jl:165
┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `contains(s, r)` instead.
│   caller = ruleparse(::SubString{String}, ::SubString{String}, ::SubString{String}, ::SubString{String}, ::Any, ::Any, ::Any, ::SubString{String}) at compile.jl:169
└ @ TimeZones.TZData compile.jl:169
┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `contains(s, r)` instead.
│   caller = ruleparse(::SubString{String}, ::SubString{String}, ::SubString{String}, ::SubString{String}, ::Any, ::Any, ::Any, ::SubString{String}) at compile.jl:180
└ @ TimeZones.TZData compile.jl:180
┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `contains(s, r)` instead.
│   caller = zoneparse(::SubString{String}, ::SubString{String}, ::SubString{String}, ::SubString{String}) at compile.jl:226
└ @ TimeZones.TZData compile.jl:226
┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `contains(s, r)` instead.
│   caller = zoneparse(::SubString{String}, ::SubString{String}, ::SubString{String}, ::String) at compile.jl:226
└ @ TimeZones.TZData compile.jl:226
┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `contains(s, r)` instead.
│   caller = ruleparse(::SubString{String}, ::SubString{String}, ::SubString{String}, ::SubString{String}, ::Any, ::Any, ::Any, ::SubString{String}) at compile.jl:175
└ @ TimeZones.TZData compile.jl:175
┌ Warning: `findin(a, b)` is deprecated, use `findall(occursin(b), a)` instead.
│   caller = optional(::Expr) at utils.jl:51
└ @ TimeZones utils.jl:51
TimeZones: Error During Test at /home/vagrant/.julia/v0.7/TimeZones/test/runtests.jl:45
  Got an exception of type LoadError outside of a @test
  LoadError: No active tzdata version. Try re-building TimeZones
  Stacktrace:
   [1] error at ./error.jl:33 [inlined]
   [2] active_version() at /home/vagrant/.julia/v0.7/TimeZones/src/tzdata/version.jl:97
   [3] top-level scope
   [4] include at ./boot.jl:292 [inlined]
   [5] include_relative(::Module, ::String) at ./loading.jl:1012
   [6] include(::Module, ::String) at ./sysimg.jl:26
   [7] include(::String) at ./sysimg.jl:65
   [8] macro expansion at /home/vagrant/.julia/v0.7/TimeZones/test/runtests.jl:49 [inlined]
   [9] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1007 [inlined]
   [10] top-level scope at /home/vagrant/.julia/v0.7/TimeZones/test/runtests.jl:46
   [11] include at ./boot.jl:292 [inlined]
   [12] include_relative(::Module, ::String) at ./loading.jl:1012
   [13] include(::Module, ::String) at ./sysimg.jl:26
   [14] process_options(::Base.JLOptions) at ./client.jl:334
   [15] _start() at ./client.jl:386
  in expression starting at /home/vagrant/.julia/v0.7/TimeZones/test/tzdata/version.jl:60
Test Summary: | Pass  Error  Total
TimeZones     |   85      1     86
ERROR: LoadError: Some tests did not pass: 85 passed, 0 failed, 1 errored, 0 broken.
in expression starting at /home/vagrant/.julia/v0.7/TimeZones/test/runtests.jl:45
┌ Error: ------------------------------------------------------------
│ # Testing failed for TimeZones
│   exception =
│    failed process: Process(`/home/vagrant/julia/bin/julia -Cnative -J/home/vagrant/julia/lib/julia/sys.so --compile=yes --depwarn=yes --code-coverage=none --color=no --compiled-modules=yes --check-bounds=yes --warn-overwrite=yes --startup-file=yes /home/vagrant/.julia/v0.7/TimeZones/test/runtests.jl`, ProcessExited(1)) [1]
│    Stacktrace:
│     [1] error(::String, ::Base.Process, ::String, ::Int64, ::String) at ./error.jl:42
│     [2] pipeline_error(::Base.Process) at ./process.jl:698
│     [3] run(::Cmd) at ./process.jl:660
│     [4] (::getfield(Base.Pkg.Entry, Symbol("##89#92")){Bool,String,Array{AbstractString,1}})() at ./pkg/entry.jl:729
│     [5] cd(::getfield(Base.Pkg.Entry, Symbol("##89#92")){Bool,String,Array{AbstractString,1}}, ::String) at ./file.jl:70
│     [6] #test!#88(::Bool, ::Function, ::String, ::Array{AbstractString,1}, ::Array{AbstractString,1}, ::Array{AbstractString,1}) at ./pkg/entry.jl:717
│     [7] (::getfield(Base.Pkg.Entry, Symbol("#kw##test!")))(::NamedTuple{(:coverage,),Tuple{Bool}}, ::typeof(Base.Pkg.Entry.test!), ::String, ::Array{AbstractString,1}, ::Array{AbstractString,1}, ::Array{AbstractString,1}) at ./<missing>:0
│     [8] #test#96(::Bool, ::Function, ::Array{AbstractString,1}) at ./pkg/entry.jl:756
│     [9] (::getfield(Base.Pkg.Entry, Symbol("#kw##test")))(::NamedTuple{(:coverage,),Tuple{Bool}}, ::typeof(Base.Pkg.Entry.test), ::Array{AbstractString,1}) at ./<missing>:0
│     [10] (::getfield(Base.Pkg.Dir, Symbol("##4#7")){Base.Iterators.IndexValue{Symbol,Bool,Tuple{Symbol},NamedTuple{(:coverage,),Tuple{Bool}}},typeof(Base.Pkg.Entry.test),Tuple{Array{AbstractString,1}}})() at ./pkg/dir.jl:36
│     [11] cd(::getfield(Base.Pkg.Dir, Symbol("##4#7")){Base.Iterators.IndexValue{Symbol,Bool,Tuple{Symbol},NamedTuple{(:coverage,),Tuple{Bool}}},typeof(Base.Pkg.Entry.test),Tuple{Array{AbstractString,1}}}, ::String) at ./file.jl:70
│     [12] #cd#1(::Base.Iterators.IndexValue{Symbol,Bool,Tuple{Symbol},NamedTuple{(:coverage,),Tuple{Bool}}}, ::Function, ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N} where N) at ./pkg/dir.jl:36
│     [13] (::getfield(Base.Pkg.Dir, Symbol("#kw##cd")))(::NamedTuple{(:coverage,),Tuple{Bool}}, ::typeof(Base.Pkg.Dir.cd), ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N} where N) at ./<missing>:0
│     [14] #test#3(::Bool, ::Function, ::String, ::Vararg{String,N} where N) at ./pkg/pkg.jl:274
│     [15] test(::String, ::Vararg{String,N} where N) at ./pkg/pkg.jl:274
│     [16] top-level scope
│     [17] eval at ./boot.jl:295 [inlined]
│     [18] eval(::Module, ::Expr) at ./sysimg.jl:71
│     [19] process_options(::Base.JLOptions) at ./client.jl:311
│     [20] _start() at ./client.jl:386
└ @ Base.Pkg.Entry entry.jl:732
ERROR: TimeZones had test errors

>>> End of log
