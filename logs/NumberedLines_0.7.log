>>> 'Pkg.add("NumberedLines")' log
WARNING: Base.Pkg is deprecated, run `using Pkg` instead
 in module Main
[ Info: Installing NumberedLines v0.1.0
[ Info: Package database updated
┌ Info: METADATA is out-of-date — you may not have the latest version of NumberedLines
└ Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("NumberedLines")' log
WARNING: Base.versioninfo is deprecated: it has been moved to the standard library package `InteractiveUtils`.
Add `using InteractiveUtils` to your imports.
 in module Main
WARNING: Base.versioninfo is deprecated: it has been moved to the standard library package `InteractiveUtils`.
Add `using InteractiveUtils` to your imports.
 in module Main
Julia Version 0.7.0-DEV.4475
Commit c1e7c93169 (2018-03-06 19:47 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
      Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-135-generic #184-Ubuntu SMP Wed Oct 18 11:55:51 UTC 2017 x86_64 x86_64
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
              speed         user         nice          sys         idle          irq
       #1  3508 MHz    4614130 s       1282 s     252536 s    1199473 s         97 s
       #2  3508 MHz    1207061 s       4916 s     114284 s    5621957 s          3 s
       
  Memory: 2.93927001953125 GB (681.1015625 MB free)
  Uptime: 70913.0 sec
  Load Avg:  1.0029296875  1.0146484375  1.0185546875
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant
Packages:
  Package Directory: /home/vagrant/.julia/v0.7
  Package Status:
2 required packages:
 - JSON                          0.17.1
 - NumberedLines                 0.1.0
2 additional packages:
 - Compat                        0.56.0
 - Nullables                     0.0.4
WARNING: Base.Pkg is deprecated, run `using Pkg` instead
 in module Main
[ Info: Computing test dependencies for NumberedLines...
[ Info: Installing DocStringExtensions v0.4.3
[ Info: Installing Documenter v0.14.0
[ Info: Testing NumberedLines
Documenter: setting up build directory.
Documenter: expanding markdown templates.
Documenter: building cross-references.
Documenter: running document checks.
 > checking for missing docstrings.
 > running doctests.
┌ Warning: `link_pipe(pipe; julia_only_read=true, julia_only_write=true)` is deprecated, use `link_pipe!(pipe, reader_supports_async=julia_only_read, writer_supports_async=julia_only_write)` instead.
│   caller = ip:0x0
└ @ Core :-1
┌ Warning: `shift!` is deprecated, use `popfirst!` instead.
│   caller = attach_append!(::Array{Any,1}, ::Array{Any,1}) at numbered_lines.jl:152
└ @ NumberedLines numbered_lines.jl:152
┌ Warning: `shift!` is deprecated, use `popfirst!` instead.
│   caller = attach_append!(::Array{Any,1}, ::Array{Any,1}) at numbered_lines.jl:157
└ @ NumberedLines numbered_lines.jl:157
=====[Test Error]==============================

> File: src/index.md

> Code block:

```jldoctest
julia> using NumberedLines

julia> link(head, tail::Expr) = Expr(:let, tail, Expr( :(=), :_, wrap(head) ) );

julia> link(head, tail::NumberedLine) = without_line_number(tail) do tail
           link(head, tail)
       end;

julia> simple_chain(e) = with_numbered_lines(e) do e
           foldl(link, e.args) |> wrap
       end;

julia> macro simple_chain(e)
           simple_chain(e)
       end;

julia> @simple_chain begin
           1
           vcat(2,_)
           vcat(_,3)
       end
3-element Array{Int64,1}:
 2
 1
 3
```

> Subexpression:

    @simple_chain begin
        1
        vcat(2,_)
        vcat(_,3)
    end

> Output Diff (REQUIRES COLOR):

3-element Array{Int64,1}:
 2
 1
 3ERROR: syntax: invalid let syntax

=====[End Error]===============================
=====[Test Error]==============================

> File: /home/vagrant/.julia/v0.7/NumberedLines/src/numbered_lines.jl

> Code block:

```jldoctest
julia> using NumberedLines

julia> NumberedLine(LineNumberNode(1), 1)
:( # line 1:
    1)
```

> Subexpression:

    NumberedLine(LineNumberNode(1), 1)

> Output Diff (REQUIRES COLOR):

:( # :(#= line 1:
    1 =#
  1)

=====[End Error]===============================
=====[Test Error]==============================

> File: /home/vagrant/.julia/v0.7/NumberedLines/src/numbered_lines.jl

> Code block:

```jldoctest
julia> using NumberedLines

julia> test = attach_line_number(1, LineNumberNode(1) )
:( # line 1:
    1)

julia> attach_line_number(test, LineNumberNode(2) )
ERROR: Line already has line number
[...]
```

> Subexpression:

    test = attach_line_number(1, LineNumberNode(1) )

> Output Diff (REQUIRES COLOR):

:( # :(#= line 1:
    1 =#
  1)

=====[End Error]===============================
=====[Test Error]==============================

> File: /home/vagrant/.julia/v0.7/NumberedLines/src/numbered_lines.jl

> Code block:

```jldoctest
julia> using NumberedLines

julia> attach_line_number( [1, 2], LineNumberNode(1) )
2-element Array{NumberedLines.NumberedLine,1}:
 :( # line 1:
    1)
 :( # line 1:
    2)
```

> Subexpression:

    attach_line_number( [1, 2], LineNumberNode(1) )

> Output Diff (REQUIRES COLOR):

2-element Array{NumberedLines.NumberedLine,1}:
 :( # Array{NumberedLine,1}:
 :(#= line 1:
    1 =#
  1)
 :( # :(#= line 1:
    1 =#
  2)

=====[End Error]===============================
=====[Test Error]==============================

> File: /home/vagrant/.julia/v0.7/NumberedLines/src/numbered_lines.jl

> Code block:

```jldoctest
julia> using NumberedLines

julia> e = quote
           a = 1
           if a == 1
               2
           end
       end |> attach_line_numbers;

julia> NumberedLines.pretty_number(e) # renumber for reproducibility
quote
     # line 1:
    a = 1
     # line 2:
    if a == 1
         # line 3:
        2
    end
end
```

> Subexpression:

    NumberedLines.pretty_number(e) # renumber for reproducibility

> Output Diff (REQUIRES COLOR):

quote
     # quote
    #= line 1:
    1 =#
    a = 1
     # 1
    #= line 2:
    2 =#
    if a == 1
         # 1
        #= line 3:
        3 =#
        2
    end
end

=====[End Error]===============================
=====[Test Error]==============================

> File: /home/vagrant/.julia/v0.7/NumberedLines/src/numbered_lines.jl

> Code block:

```jldoctest
julia> using NumberedLines

julia> e = quote
            a = 1
            b = 2
        end;

julia> insert_line_number(attach_line_numbers(e), LineNumberNode(1))
quote
     # line 1:
    a = 1
     # line 1:
    b = 2
end
```

> Subexpression:

    insert_line_number(attach_line_numbers(e), LineNumberNode(1))

> Output Diff (REQUIRES COLOR):

quote
     # quote
    #= line 1:
    1 =#
    a = 1
     # 1
    #= line 1:
    1 =#
    b = 2
end

=====[End Error]===============================
=====[Test Error]==============================

> File: /home/vagrant/.julia/v0.7/NumberedLines/src/numbered_lines.jl

> Code block:

```jldoctest
julia> using NumberedLines

julia> e = :(a = 1; b = 2);

julia> insert_line_number(e, LineNumberNode(1))
quote
     # line 1:
    a = 1
     # line 1:
    b = 2
end
```

> Subexpression:

    insert_line_number(e, LineNumberNode(1))

> Output Diff (REQUIRES COLOR):

quote
     # quote
    #= line 1:
    1 =#
    a = 1
     # 1
    #= line 1:
    1 =#
    #= none:1 =#
    #= line 1 =#
    b = 2
end

=====[End Error]===============================
=====[Test Error]==============================

> File: /home/vagrant/.julia/v0.7/NumberedLines/src/numbered_lines.jl

> Code block:

```jldoctest
julia> using NumberedLines

julia> add_one(a) = :($a + 1);

julia> without_line_number(add_one, 1)
:(1 + 1)

julia> n = NumberedLine(LineNumberNode(1), 1)
:( # line 1:
    1)

julia> without_line_number(add_one, n)
:( # line 1:
    1 + 1)
```

> Subexpression:

    n = NumberedLine(LineNumberNode(1), 1)

> Output Diff (REQUIRES COLOR):

:( # :(#= line 1:
    1 =#
  1)

=====[End Error]===============================
=====[Test Error]==============================

> File: /home/vagrant/.julia/v0.7/NumberedLines/src/numbered_lines.jl

> Code block:

```jldoctest
julia> using NumberedLines

julia> add_one(a) = :($a + 1);

julia> without_line_number(add_one, 1)
:(1 + 1)

julia> n = NumberedLine(LineNumberNode(1), 1)
:( # line 1:
    1)

julia> without_line_number(add_one, n)
:( # line 1:
    1 + 1)
```

> Subexpression:

    without_line_number(add_one, n)

> Output Diff (REQUIRES COLOR):

:( # :(#= line 1:
    1 =#
  1 + 1)

=====[End Error]===============================
=====[Test Error]==============================

> File: /home/vagrant/.julia/v0.7/NumberedLines/src/numbered_lines.jl

> Code block:

```jldoctest
julia> using NumberedLines

julia> wrap(1)
1

julia> NumberedLine(LineNumberNode(1), 1) |> wrap
quote
     # line 1:
    1
end
```

> Subexpression:

    NumberedLine(LineNumberNode(1), 1) |> wrap

> Output Diff (REQUIRES COLOR):

quote
     # quote
    #= line 1:
    1 =#
    1
end

=====[End Error]===============================
 > checking footnote links.
Documenter: populating indices.
ERROR: LoadError: `makedocs` encountered an error. Terminating build
Stacktrace:
 [1] error at ./error.jl:33 [inlined]
 [2] runner(::Type{Documenter.Builder.RenderDocument}, ::Documenter.Documents.Document) at /home/vagrant/.julia/v0.7/Documenter/src/Builder.jl:202
 [3] dispatch(::Type{Documenter.Builder.DocumentPipeline}, ::Documenter.Documents.Document, ::Vararg{Documenter.Documents.Document,N} where N) at /home/vagrant/.julia/v0.7/Documenter/src/Selectors.jl:168
 [4] #2 at /home/vagrant/.julia/v0.7/Documenter/src/Documenter.jl:204 [inlined]
 [5] cd(::getfield(Documenter, Symbol("##2#3")){Documenter.Documents.Document}, ::String) at ./file.jl:72
 [6] #makedocs#1 at /home/vagrant/.julia/v0.7/Documenter/src/Documenter.jl:203 [inlined]
 [7] (::getfield(Documenter, Symbol("#kw##makedocs")))(::NamedTuple{(:modules, :root, :format, :sitename, :pages, :authors, :strict),Tuple{Module,String,Symbol,String,Array{String,1},String,Bool}}, ::typeof(Documenter.makedocs)) at ./<missing>:0
 [8] top-level scope
 [9] include at ./boot.jl:305 [inlined]
 [10] include_relative(::Module, ::String) at ./loading.jl:1072
 [11] include(::Module, ::String) at ./sysimg.jl:29
 [12] exec_options(::Base.JLOptions) at ./client.jl:327
 [13] _start() at ./client.jl:455
in expression starting at /home/vagrant/.julia/v0.7/NumberedLines/test/runtests.jl:4
┌ Error: ------------------------------------------------------------
│ # Testing failed for NumberedLines
│   exception =
│    failed process: Process(`/home/vagrant/julia/bin/julia -Cnative -J/home/vagrant/julia/lib/julia/sys.so --compile=yes --depwarn=yes --code-coverage=none --color=no --compiled-modules=yes --check-bounds=yes --warn-overwrite=yes --startup-file=yes /home/vagrant/.julia/v0.7/NumberedLines/test/runtests.jl`, ProcessExited(1)) [1]
│    Stacktrace:
│     [1] error(::String, ::Base.Process, ::String, ::Int64, ::String) at ./error.jl:42
│     [2] pipeline_error(::Base.Process) at ./process.jl:712
│     [3] #run#534(::Bool, ::Function, ::Cmd) at ./process.jl:670
│     [4] run at ./process.jl:668 [inlined]
│     [5] (::getfield(Pkg.Entry, Symbol("##56#57")){Bool,String,Array{AbstractString,1}})() at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Pkg/src/entry.jl:729
│     [6] cd(::getfield(Pkg.Entry, Symbol("##56#57")){Bool,String,Array{AbstractString,1}}, ::String) at ./file.jl:72
│     [7] #test!#55(::Bool, ::Function, ::String, ::Array{AbstractString,1}, ::Array{AbstractString,1}, ::Array{AbstractString,1}) at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Pkg/src/entry.jl:717
│     [8] (::getfield(Pkg.Entry, Symbol("#kw##test!")))(::NamedTuple{(:coverage,),Tuple{Bool}}, ::typeof(Pkg.Entry.test!), ::String, ::Array{AbstractString,1}, ::Array{AbstractString,1}, ::Array{AbstractString,1}) at ./<missing>:0
│     [9] #test#59(::Bool, ::Function, ::Array{AbstractString,1}) at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Pkg/src/entry.jl:756
│     [10] #test at ./<missing>:0 [inlined]
│     [11] #4 at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Pkg/src/dir.jl:36 [inlined]
│     [12] cd(::getfield(Pkg.Dir, Symbol("##4#7")){Base.Iterators.Pairs{Symbol,Bool,Tuple{Symbol},NamedTuple{(:coverage,),Tuple{Bool}}},typeof(Pkg.Entry.test),Tuple{Array{AbstractString,1}}}, ::String) at ./file.jl:72
│     [13] #cd#1(::Base.Iterators.Pairs{Symbol,Bool,Tuple{Symbol},NamedTuple{(:coverage,),Tuple{Bool}}}, ::Function, ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N} where N) at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Pkg/src/dir.jl:36
│     [14] (::getfield(Pkg.Dir, Symbol("#kw##cd")))(::NamedTuple{(:coverage,),Tuple{Bool}}, ::typeof(Pkg.Dir.cd), ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N} where N) at ./<missing>:0
│     [15] #test#3(::Bool, ::Function, ::String, ::Vararg{String,N} where N) at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Pkg/src/Pkg.jl:276
│     [16] test(::String, ::Vararg{String,N} where N) at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Pkg/src/Pkg.jl:276
│     [17] top-level scope
│     [18] eval at ./boot.jl:308 [inlined]
│     [19] eval(::Module, ::Expr) at ./sysimg.jl:74
│     [20] exec_options(::Base.JLOptions) at ./client.jl:304
│     [21] _start() at ./client.jl:455
└ @ Pkg.Entry entry.jl:732
[ Info: Removing DocStringExtensions v0.4.3
[ Info: Removing Documenter v0.14.0
ERROR: NumberedLines had test errors

>>> End of log
