>>> 'Pkg.add("Cartesian")' log
┌ Info: Cloning cache of Cartesian from https://github.com/timholy/Cartesian.jl.git
└                                                   @ Base.Pkg.Cache cache.jl:43
[ Info: Installing Cartesian v0.2.2                @ Base.Pkg.Entry entry.jl:543
[ Info: Package database updated                    @ Base.Pkg.Entry entry.jl:32

>>> 'Pkg.test("Cartesian")' log
Julia Version 0.7.0-DEV.3351
Commit 09f7213c94 (2018-01-09 01:31 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
      Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-135-generic #184-Ubuntu SMP Wed Oct 18 11:55:51 UTC 2017 x86_64 x86_64
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
              speed         user         nice          sys         idle          irq
       #1  3499 MHz    1348634 s        106 s      72498 s     377129 s         14 s
       #2  3499 MHz     276705 s       6428 s      30771 s    1770042 s          0 s
       
  Memory: 2.93927001953125 GB (479.8203125 MB free)
  Uptime: 21180.0 sec
  Load Avg:  1.048828125  1.03369140625  1.0537109375
  WORD_SIZE: 64
  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant
Packages:
  Package Directory: /home/vagrant/.julia/v0.7
  Package Status:
2 required packages:
 - Cartesian                     0.2.2
 - JSON                          0.16.3
2 additional packages:
 - Compat                        0.43.0
 - Nullables                     0.0.2
[ Info: Testing Cartesian                          @ Base.Pkg.Entry entry.jl:723
┌ Warning: Deprecated syntax `(Symbol...)` at /home/vagrant/.julia/v0.7/Cartesian/src/Cartesian.jl:142.
│ Use `(Symbol...,)` instead.
└                                                     @ nothing Cartesian.jl:142
┌ Warning: Deprecated syntax `(Symbol...)` at /home/vagrant/.julia/v0.7/Cartesian/src/Cartesian.jl:185.
│ Use `(Symbol...,)` instead.
└                                                     @ nothing Cartesian.jl:185
┌ Warning: Deprecated syntax `tf?` at /home/vagrant/.julia/v0.7/Cartesian/src/Cartesian.jl:532.
│ Use `tf ?` instead.
└                                                     @ nothing Cartesian.jl:532
┌ Warning: Deprecated syntax `tf ?ex` at /home/vagrant/.julia/v0.7/Cartesian/src/Cartesian.jl:532.
│ Use `tf ? ex` instead.
└                                                     @ nothing Cartesian.jl:532
┌ Warning: Deprecated syntax `tf ? ex.args[2]:` at /home/vagrant/.julia/v0.7/Cartesian/src/Cartesian.jl:532.
│ Use `tf ? ex.args[2] :` instead.
└                                                     @ nothing Cartesian.jl:532
┌ Warning: Deprecated syntax `tf ? ex.args[2] :ex` at /home/vagrant/.julia/v0.7/Cartesian/src/Cartesian.jl:532.
│ Use `tf ? ex.args[2] : ex` instead.
└                                                     @ nothing Cartesian.jl:532
┌ Warning: Deprecated syntax `parametric method syntax linear{T}(s::SubArray{T, 1}, i::Integer)` around /home/vagrant/.julia/v0.7/Cartesian/src/compat.jl:99.
│ Use `linear(s::SubArray{T, 1}, i::Integer) where T` instead.
└                                                         @ nothing compat.jl:99
┌ Warning: Deprecated syntax `parametric method syntax linear{T}(s::SubArray{T, 2}, i::Integer, j::Integer)` around /home/vagrant/.julia/v0.7/Cartesian/src/compat.jl:101.
│ Use `linear(s::SubArray{T, 2}, i::Integer, j::Integer) where T` instead.
└                                                        @ nothing compat.jl:101
┌ Warning: Deprecated syntax `parametric method syntax linear{T}(s::SubArray{T, 3}, i::Integer, j::Integer, k::Integer)` around /home/vagrant/.julia/v0.7/Cartesian/src/compat.jl:103.
│ Use `linear(s::SubArray{T, 3}, i::Integer, j::Integer, k::Integer) where T` instead.
└                                                        @ nothing compat.jl:103
┌ Warning: Deprecated syntax `parametric method syntax linear{T}(s::SubArray{T, 4}, i::Integer, j::Integer, k::Integer, l::Integer)` around /home/vagrant/.julia/v0.7/Cartesian/src/compat.jl:105.
│ Use `linear(s::SubArray{T, 4}, i::Integer, j::Integer, k::Integer, l::Integer) where T` instead.
└                                                        @ nothing compat.jl:105
┌ Warning: Deprecated syntax `parametric method syntax linear{T}(s::SubArray{T, 5}, i::Integer, j::Integer, k::Integer, l::Integer, m::Integer)` around /home/vagrant/.julia/v0.7/Cartesian/src/compat.jl:107.
│ Use `linear(s::SubArray{T, 5}, i::Integer, j::Integer, k::Integer, l::Integer, m::Integer) where T` instead.
└                                                        @ nothing compat.jl:107
┌ Warning: Deprecated syntax `parametric method syntax generate1{K}(itersyms::NTuple{K, Symbol}, prototype, bodyfunc, itervals::NTuple{K, Int})` around /home/vagrant/.julia/v0.7/Cartesian/src/Cartesian.jl:99.
│ Use `generate1(itersyms::NTuple{K, Symbol}, prototype, bodyfunc, itervals::NTuple{K, Int}) where K` instead.
└                                                      @ nothing Cartesian.jl:99
ERROR: LoadError: LoadError: LoadError: MethodError: no method matching start(::Type{Symbol})
Closest candidates are:
  start(!Matched::SimpleVector) at essentials.jl:550
  start(!Matched::Base.MethodList) at reflection.jl:673
  start(!Matched::ExponentialBackOff) at error.jl:171
  ...
Stacktrace:
 [1] append_any(::Type, ::Vararg{Type,N} where N) at ./essentials.jl:390
 [2] top-level scope
 [3] include at ./boot.jl:293 [inlined]
 [4] include_relative(::Module, ::String) at ./loading.jl:521
 [5] _require(::Symbol) at ./loading.jl:453
 [6] require(::Symbol) at ./loading.jl:333
 [7] include at ./boot.jl:293 [inlined]
 [8] include_relative(::Module, ::String) at ./loading.jl:521
 [9] include(::Module, ::String) at ./sysimg.jl:26
 [10] include(::String) at ./sysimg.jl:65
 [11] top-level scope
 [12] include at ./boot.jl:293 [inlined]
 [13] include_relative(::Module, ::String) at ./loading.jl:521
 [14] include(::Module, ::String) at ./sysimg.jl:26
 [15] process_options(::Base.JLOptions) at ./client.jl:324
 [16] _start() at ./client.jl:375
in expression starting at /home/vagrant/.julia/v0.7/Cartesian/src/Cartesian.jl:142
in expression starting at /home/vagrant/.julia/v0.7/Cartesian/test/tests.jl:1
in expression starting at /home/vagrant/.julia/v0.7/Cartesian/test/runtests.jl:1
┌ Error: ------------------------------------------------------------
│ # Testing failed for Cartesian
│   exception =
│    failed process: Process(`/home/vagrant/julia/bin/julia -Cnative -J/home/vagrant/julia/lib/julia/sys.so --compile=yes --depwarn=yes --code-coverage=none --color=no --compiled-modules=yes --check-bounds=yes --warn-overwrite=yes --startup-file=yes /home/vagrant/.julia/v0.7/Cartesian/test/runtests.jl`, ProcessExited(1)) [1]
│    Stacktrace:
│     [1] error(::String, ::Base.Process, ::String, ::Int64, ::String) at ./error.jl:42
│     [2] pipeline_error(::Base.Process) at ./process.jl:707
│     [3] run(::Cmd) at ./process.jl:669
│     [4] (::getfield(Base.Pkg.Entry, Symbol("##91#94")){Bool,String,Array{AbstractString,1}})() at ./pkg/entry.jl:736
│     [5] cd(::getfield(Base.Pkg.Entry, Symbol("##91#94")){Bool,String,Array{AbstractString,1}}, ::String) at ./file.jl:70
│     [6] #test!#90(::Bool, ::Function, ::String, ::Array{AbstractString,1}, ::Array{AbstractString,1}, ::Array{AbstractString,1}) at ./pkg/entry.jl:724
│     [7] (::getfield(Base.Pkg.Entry, Symbol("#kw##test!")))(::NamedTuple{(:coverage,),Tuple{Bool}}, ::typeof(Base.Pkg.Entry.test!), ::String, ::Array{AbstractString,1}, ::Array{AbstractString,1}, ::Array{AbstractString,1}) at ./<missing>:0
│     [8] #test#98(::Bool, ::Function, ::Array{AbstractString,1}) at ./pkg/entry.jl:763
│     [9] (::getfield(Base.Pkg.Entry, Symbol("#kw##test")))(::NamedTuple{(:coverage,),Tuple{Bool}}, ::typeof(Base.Pkg.Entry.test), ::Array{AbstractString,1}) at ./<missing>:0
│     [10] (::getfield(Base.Pkg.Dir, Symbol("##4#7")){Base.Iterators.IndexValue{Symbol,Bool,Tuple{Symbol},NamedTuple{(:coverage,),Tuple{Bool}}},typeof(Base.Pkg.Entry.test),Tuple{Array{AbstractString,1}}})() at ./pkg/dir.jl:36
│     [11] cd(::getfield(Base.Pkg.Dir, Symbol("##4#7")){Base.Iterators.IndexValue{Symbol,Bool,Tuple{Symbol},NamedTuple{(:coverage,),Tuple{Bool}}},typeof(Base.Pkg.Entry.test),Tuple{Array{AbstractString,1}}}, ::String) at ./file.jl:70
│     [12] #cd#1(::Base.Iterators.IndexValue{Symbol,Bool,Tuple{Symbol},NamedTuple{(:coverage,),Tuple{Bool}}}, ::Function, ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N} where N) at ./pkg/dir.jl:36
│     [13] (::getfield(Base.Pkg.Dir, Symbol("#kw##cd")))(::NamedTuple{(:coverage,),Tuple{Bool}}, ::typeof(Base.Pkg.Dir.cd), ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N} where N) at ./<missing>:0
│     [14] #test#3(::Bool, ::Function, ::String, ::Vararg{String,N} where N) at ./pkg/pkg.jl:274
│     [15] test(::String, ::Vararg{String,N} where N) at ./pkg/pkg.jl:274
│     [16] top-level scope
│     [17] eval at ./boot.jl:296 [inlined]
│     [18] eval(::Module, ::Expr) at ./sysimg.jl:71
│     [19] process_options(::Base.JLOptions) at ./client.jl:301
│     [20] _start() at ./client.jl:375
└                                                  @ Base.Pkg.Entry entry.jl:739
ERROR: Cartesian had test errors

>>> End of log
