>>> 'Pkg.add("NRRD")' log
INFO: Cloning cache of NRRD from https://github.com/JuliaIO/NRRD.jl.git
INFO: Cloning cache of Quaternions from https://github.com/JuliaGeometry/Quaternions.jl.git
INFO: Cloning cache of Unitful from https://github.com/ajkeller34/Unitful.jl.git
INFO: Installing AxisArrays v0.1.4
INFO: Installing BufferedStreams v0.3.3
INFO: Installing Calculus v0.2.2
INFO: Installing ColorTypes v0.5.2
INFO: Installing ColorVectorSpace v0.4.4
INFO: Installing Colors v0.7.4
INFO: Installing DataStructures v0.6.1
INFO: Installing DualNumbers v0.3.0
INFO: Installing FileIO v0.5.2
INFO: Installing FixedPointNumbers v0.3.9
INFO: Installing Graphics v0.2.0
INFO: Installing ImageAxes v0.3.1
INFO: Installing ImageCore v0.3.3
INFO: Installing IntervalSets v0.1.1
INFO: Installing Libz v0.2.4
INFO: Installing MacroTools v0.3.7
INFO: Installing MappedArrays v0.0.7
INFO: Installing NRRD v0.3.2
INFO: Installing NaNMath v0.2.6
INFO: Installing OffsetArrays v0.3.0
INFO: Installing PaddedViews v0.1.0
INFO: Installing Quaternions v0.2.0
INFO: Installing RangeArrays v0.2.0
INFO: Installing Ranges v0.0.1
INFO: Installing Reexport v0.0.3
INFO: Installing ShowItLikeYouBuildIt v0.0.1
INFO: Installing SimpleTraits v0.5.1
INFO: Installing SpecialFunctions v0.2.0
INFO: Installing StaticArrays v0.3.1
INFO: Installing StatsBase v0.17.0
INFO: Installing Unitful v0.2.6
INFO: Package database updated

>>> 'Pkg.test("NRRD")' log
Julia Version 0.5.2
Commit f4c6c9d (2017-05-06 16:34 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-135-generic #184-Ubuntu SMP Wed Oct 18 11:55:51 UTC 2017 x86_64 x86_64
Memory: 2.93927001953125 GB (629.12890625 MB free)
Uptime: 20584.0 sec
Load Avg:  1.0029296875  0.98193359375  0.9599609375
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz    1235580 s        137 s     147303 s     456270 s         18 s
#2  3500 MHz     310141 s         40 s      57241 s    1648117 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.7.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.5
2 required packages:
 - JSON                          0.14.0
 - NRRD                          0.3.2
31 additional packages:
 - AxisArrays                    0.1.4
 - BufferedStreams               0.3.3
 - Calculus                      0.2.2
 - ColorTypes                    0.5.2
 - ColorVectorSpace              0.4.4
 - Colors                        0.7.4
 - Compat                        0.41.0
 - DataStructures                0.6.1
 - DualNumbers                   0.3.0
 - FileIO                        0.5.2
 - FixedPointNumbers             0.3.9
 - Graphics                      0.2.0
 - ImageAxes                     0.3.1
 - ImageCore                     0.3.3
 - IntervalSets                  0.1.1
 - Libz                          0.2.4
 - MacroTools                    0.3.7
 - MappedArrays                  0.0.7
 - NaNMath                       0.2.6
 - OffsetArrays                  0.3.0
 - PaddedViews                   0.1.0
 - Quaternions                   0.2.0
 - RangeArrays                   0.2.0
 - Ranges                        0.0.1
 - Reexport                      0.0.3
 - ShowItLikeYouBuildIt          0.0.1
 - SimpleTraits                  0.5.1
 - SpecialFunctions              0.2.0
 - StaticArrays                  0.3.1
 - StatsBase                     0.17.0
 - Unitful                       0.2.6
INFO: Computing test dependencies for NRRD...
INFO: No packages to install, update or remove
INFO: Testing NRRD
Test Summary: | Pass  Total
  unu headers |   88     88
WARNING: both AxisArrays and Compat export "axes"; uses of it in module ImageAxes must be qualified
WARNING: both Compat and ImageAxes export "axes"; uses of it in module NRRD must be qualified
Error encountered while saving "/tmp/Images/write/small.nrrd".
Fatal error:
Gray, raw: Error During Test
  Got an exception of type UndefVarError outside of a @test
  UndefVarError: axes not defined
   in #save#10(::Dict{String,Any}, ::Void, ::Void, ::Function, ::FileIO.Stream{FileIO.DataFormat{:NRRD},IOStream}, ::AxisArrays.AxisArray{Float32,3,Array{Float32,3},Tuple{AxisArrays.Axis{:L,UnitRange{Int64}},AxisArrays.Axis{:P,UnitRange{Int64}},AxisArrays.Axis{:S,UnitRange{Int64}}}}) at /home/vagrant/.julia/v0.5/NRRD/src/NRRD.jl:280
   in (::NRRD.#kw##save)(::Array{Any,1}, ::NRRD.#save, ::FileIO.Stream{FileIO.DataFormat{:NRRD},IOStream}, ::AxisArrays.AxisArray{Float32,3,Array{Float32,3},Tuple{AxisArrays.Axis{:L,UnitRange{Int64}},AxisArrays.Axis{:P,UnitRange{Int64}},AxisArrays.Axis{:S,UnitRange{Int64}}}}) at ./<missing>:0
   in open(::NRRD.##8#9{Dict{String,Any},Void,Void,AxisArrays.AxisArray{Float32,3,Array{Float32,3},Tuple{AxisArrays.Axis{:L,UnitRange{Int64}},AxisArrays.Axis{:P,UnitRange{Int64}},AxisArrays.Axis{:S,UnitRange{Int64}}}}}, ::FileIO.File{FileIO.DataFormat{:NRRD}}, ::String) at ./iostream.jl:113
   in save(::FileIO.File{FileIO.DataFormat{:NRRD}}, ::AxisArrays.AxisArray{Float32,3,Array{Float32,3},Tuple{AxisArrays.Axis{:L,UnitRange{Int64}},AxisArrays.Axis{:P,UnitRange{Int64}},AxisArrays.Axis{:S,UnitRange{Int64}}}}) at /home/vagrant/.julia/v0.5/NRRD/src/NRRD.jl:273
   in anonymous at ./<missing>:?
   in eval(::Module, ::Any) at ./boot.jl:234
   in #save#21(::Array{Any,1}, ::Function, ::FileIO.File{FileIO.DataFormat{:NRRD}}, ::AxisArrays.AxisArray{Float32,3,Array{Float32,3},Tuple{AxisArrays.Axis{:L,UnitRange{Int64}},AxisArrays.Axis{:P,UnitRange{Int64}},AxisArrays.Axis{:S,UnitRange{Int64}}}}, ::Vararg{AxisArrays.AxisArray{Float32,3,Array{Float32,3},Tuple{AxisArrays.Axis{:L,UnitRange{Int64}},AxisArrays.Axis{:P,UnitRange{Int64}},AxisArrays.Axis{:S,UnitRange{Int64}}}},N}) at /home/vagrant/.julia/v0.5/FileIO/src/loadsave.jl:115
   in save(::FileIO.File{FileIO.DataFormat{:NRRD}}, ::AxisArrays.AxisArray{Float32,3,Array{Float32,3},Tuple{AxisArrays.Axis{:L,UnitRange{Int64}},AxisArrays.Axis{:P,UnitRange{Int64}},AxisArrays.Axis{:S,UnitRange{Int64}}}}) at /home/vagrant/.julia/v0.5/FileIO/src/loadsave.jl:106
   in #save#14(::Array{Any,1}, ::Function, ::String, ::AxisArrays.AxisArray{Float32,3,Array{Float32,3},Tuple{AxisArrays.Axis{:L,UnitRange{Int64}},AxisArrays.Axis{:P,UnitRange{Int64}},AxisArrays.Axis{:S,UnitRange{Int64}}}}, ::Vararg{AxisArrays.AxisArray{Float32,3,Array{Float32,3},Tuple{AxisArrays.Axis{:L,UnitRange{Int64}},AxisArrays.Axis{:P,UnitRange{Int64}},AxisArrays.Axis{:S,UnitRange{Int64}}}},N}) at /home/vagrant/.julia/v0.5/FileIO/src/loadsave.jl:61
   in macro expansion; at /home/vagrant/.julia/v0.5/NRRD/test/runtests.jl:24 [inlined]
   in macro expansion; at ./test.jl:674 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/NRRD/test/runtests.jl:16 [inlined]
   in macro expansion; at ./test.jl:674 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488
   in process_options(::Base.JLOptions) at ./client.jl:265
   in _start() at ./client.jl:321
Error encountered while saving "/tmp/Images/write/units.nrrd".
Fatal error:
Units: Error During Test
  Got an exception of type UndefVarError outside of a @test
  UndefVarError: axes not defined
   in #save#10(::Dict{String,Any}, ::Void, ::Void, ::Function, ::FileIO.Stream{FileIO.DataFormat{:NRRD},IOStream}, ::AxisArrays.AxisArray{Float32,3,Array{Float32,3},Tuple{AxisArrays.Axis{:L,Ranges.LinSpace{Quantity{Float64, Dimensions:{ùêã}, Units:{mm}}}},AxisArrays.Axis{:P,Ranges.LinSpace{Quantity{Float64, Dimensions:{ùêã}, Units:{mm}}}},AxisArrays.Axis{:S,Ranges.LinSpace{Quantity{Float64, Dimensions:{ùêã}, Units:{mm}}}}}}) at /home/vagrant/.julia/v0.5/NRRD/src/NRRD.jl:280
   in (::NRRD.#kw##save)(::Array{Any,1}, ::NRRD.#save, ::FileIO.Stream{FileIO.DataFormat{:NRRD},IOStream}, ::AxisArrays.AxisArray{Float32,3,Array{Float32,3},Tuple{AxisArrays.Axis{:L,Ranges.LinSpace{Quantity{Float64, Dimensions:{ùêã}, Units:{mm}}}},AxisArrays.Axis{:P,Ranges.LinSpace{Quantity{Float64, Dimensions:{ùêã}, Units:{mm}}}},AxisArrays.Axis{:S,Ranges.LinSpace{Quantity{Float64, Dimensions:{ùêã}, Units:{mm}}}}}}) at ./<missing>:0
   in open(::NRRD.##8#9{Dict{String,Any},Void,Void,AxisArrays.AxisArray{Float32,3,Array{Float32,3},Tuple{AxisArrays.Axis{:L,Ranges.LinSpace{Quantity{Float64, Dimensions:{ùêã}, Units:{mm}}}},AxisArrays.Axis{:P,Ranges.LinSpace{Quantity{Float64, Dimensions:{ùêã}, Units:{mm}}}},AxisArrays.Axis{:S,Ranges.LinSpace{Quantity{Float64, Dimensions:{ùêã}, Units:{mm}}}}}}}, ::FileIO.File{FileIO.DataFormat{:NRRD}}, ::String) at ./iostream.jl:113
   in save(::FileIO.File{FileIO.DataFormat{:NRRD}}, ::AxisArrays.AxisArray{Float32,3,Array{Float32,3},Tuple{AxisArrays.Axis{:L,Ranges.LinSpace{Quantity{Float64, Dimensions:{ùêã}, Units:{mm}}}},AxisArrays.Axis{:P,Ranges.LinSpace{Quantity{Float64, Dimensions:{ùêã}, Units:{mm}}}},AxisArrays.Axis{:S,Ranges.LinSpace{Quantity{Float64, Dimensions:{ùêã}, Units:{mm}}}}}}) at /home/vagrant/.julia/v0.5/NRRD/src/NRRD.jl:273
   in anonymous at ./<missing>:?
   in eval(::Module, ::Any) at ./boot.jl:234
   in #save#21(::Array{Any,1}, ::Function, ::FileIO.File{FileIO.DataFormat{:NRRD}}, ::AxisArrays.AxisArray{Float32,3,Array{Float32,3},Tuple{AxisArrays.Axis{:L,Ranges.LinSpace{Quantity{Float64, Dimensions:{ùêã}, Units:{mm}}}},AxisArrays.Axis{:P,Ranges.LinSpace{Quantity{Float64, Dimensions:{ùêã}, Units:{mm}}}},AxisArrays.Axis{:S,Ranges.LinSpace{Quantity{Float64, Dimensions:{ùêã}, Units:{mm}}}}}}, ::Vararg{AxisArrays.AxisArray{Float32,3,Array{Float32,3},Tuple{AxisArrays.Axis{:L,Ranges.LinSpace{Quantity{Float64, Dimensions:{ùêã}, Units:{mm}}}},AxisArrays.Axis{:P,Ranges.LinSpace{Quantity{Float64, Dimensions:{ùêã}, Units:{mm}}}},AxisArrays.Axis{:S,Ranges.LinSpace{Quantity{Float64, Dimensions:{ùêã}, Units:{mm}}}}}},N}) at /home/vagrant/.julia/v0.5/FileIO/src/loadsave.jl:115
   in save(::FileIO.File{FileIO.DataFormat{:NRRD}}, ::AxisArrays.AxisArray{Float32,3,Array{Float32,3},Tuple{AxisArrays.Axis{:L,Ranges.LinSpace{Quantity{Float64, Dimensions:{ùêã}, Units:{mm}}}},AxisArrays.Axis{:P,Ranges.LinSpace{Quantity{Float64, Dimensions:{ùêã}, Units:{mm}}}},AxisArrays.Axis{:S,Ranges.LinSpace{Quantity{Float64, Dimensions:{ùêã}, Units:{mm}}}}}}) at /home/vagrant/.julia/v0.5/FileIO/src/loadsave.jl:106
   in #save#14(::Array{Any,1}, ::Function, ::String, ::AxisArrays.AxisArray{Float32,3,Array{Float32,3},Tuple{AxisArrays.Axis{:L,Ranges.LinSpace{Quantity{Float64, Dimensions:{ùêã}, Units:{mm}}}},AxisArrays.Axis{:P,Ranges.LinSpace{Quantity{Float64, Dimensions:{ùêã}, Units:{mm}}}},AxisArrays.Axis{:S,Ranges.LinSpace{Quantity{Float64, Dimensions:{ùêã}, Units:{mm}}}}}}, ::Vararg{AxisArrays.AxisArray{Float32,3,Array{Float32,3},Tuple{AxisArrays.Axis{:L,Ranges.LinSpace{Quantity{Float64, Dimensions:{ùêã}, Units:{mm}}}},AxisArrays.Axis{:P,Ranges.LinSpace{Quantity{Float64, Dimensions:{ùêã}, Units:{mm}}}},AxisArrays.Axis{:S,Ranges.LinSpace{Quantity{Float64, Dimensions:{ùêã}, Units:{mm}}}}}},N}) at /home/vagrant/.julia/v0.5/FileIO/src/loadsave.jl:61
   in macro expansion; at /home/vagrant/.julia/v0.5/NRRD/test/runtests.jl:48 [inlined]
   in macro expansion; at ./test.jl:674 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/NRRD/test/runtests.jl:38 [inlined]
   in macro expansion; at ./test.jl:674 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488
   in process_options(::Base.JLOptions) at ./client.jl:265
   in _start() at ./client.jl:321
Error encountered while saving "/tmp/Images/write/smallgz.nrrd".
Fatal error:
Compressed (gzip): Error During Test
  Got an exception of type UndefVarError outside of a @test
  UndefVarError: axes not defined
   in #save#10(::Dict{String,Any}, ::Void, ::Void, ::Function, ::FileIO.Stream{FileIO.DataFormat{:NRRD},IOStream}, ::AxisArrays.AxisArray{Float32,3,Array{Float32,3},Tuple{AxisArrays.Axis{:L,UnitRange{Int64}},AxisArrays.Axis{:P,UnitRange{Int64}},AxisArrays.Axis{:S,UnitRange{Int64}}}}) at /home/vagrant/.julia/v0.5/NRRD/src/NRRD.jl:280
   in (::NRRD.#kw##save)(::Array{Any,1}, ::NRRD.#save, ::FileIO.Stream{FileIO.DataFormat{:NRRD},IOStream}, ::AxisArrays.AxisArray{Float32,3,Array{Float32,3},Tuple{AxisArrays.Axis{:L,UnitRange{Int64}},AxisArrays.Axis{:P,UnitRange{Int64}},AxisArrays.Axis{:S,UnitRange{Int64}}}}) at ./<missing>:0
   in open(::NRRD.##8#9{Dict{String,Any},Void,Void,AxisArrays.AxisArray{Float32,3,Array{Float32,3},Tuple{AxisArrays.Axis{:L,UnitRange{Int64}},AxisArrays.Axis{:P,UnitRange{Int64}},AxisArrays.Axis{:S,UnitRange{Int64}}}}}, ::FileIO.File{FileIO.DataFormat{:NRRD}}, ::String) at ./iostream.jl:113
   in save(::FileIO.File{FileIO.DataFormat{:NRRD}}, ::AxisArrays.AxisArray{Float32,3,Array{Float32,3},Tuple{AxisArrays.Axis{:L,UnitRange{Int64}},AxisArrays.Axis{:P,UnitRange{Int64}},AxisArrays.Axis{:S,UnitRange{Int64}}}}) at /home/vagrant/.julia/v0.5/NRRD/src/NRRD.jl:273
   in anonymous at ./<missing>:?
   in eval(::Module, ::Any) at ./boot.jl:234
   in #save#21(::Array{Any,1}, ::Function, ::FileIO.File{FileIO.DataFormat{:NRRD}}, ::AxisArrays.AxisArray{Float32,3,Array{Float32,3},Tuple{AxisArrays.Axis{:L,UnitRange{Int64}},AxisArrays.Axis{:P,UnitRange{Int64}},AxisArrays.Axis{:S,UnitRange{Int64}}}}, ::Vararg{AxisArrays.AxisArray{Float32,3,Array{Float32,3},Tuple{AxisArrays.Axis{:L,UnitRange{Int64}},AxisArrays.Axis{:P,UnitRange{Int64}},AxisArrays.Axis{:S,UnitRange{Int64}}}},N}) at /home/vagrant/.julia/v0.5/FileIO/src/loadsave.jl:115
   in save(::FileIO.File{FileIO.DataFormat{:NRRD}}, ::AxisArrays.AxisArray{Float32,3,Array{Float32,3},Tuple{AxisArrays.Axis{:L,UnitRange{Int64}},AxisArrays.Axis{:P,UnitRange{Int64}},AxisArrays.Axis{:S,UnitRange{Int64}}}}) at /home/vagrant/.julia/v0.5/FileIO/src/loadsave.jl:106
   in #save#14(::Array{Any,1}, ::Function, ::String, ::AxisArrays.AxisArray{Float32,3,Array{Float32,3},Tuple{AxisArrays.Axis{:L,UnitRange{Int64}},AxisArrays.Axis{:P,UnitRange{Int64}},AxisArrays.Axis{:S,UnitRange{Int64}}}}, ::Vararg{AxisArrays.AxisArray{Float32,3,Array{Float32,3},Tuple{AxisArrays.Axis{:L,UnitRange{Int64}},AxisArrays.Axis{:P,UnitRange{Int64}},AxisArrays.Axis{:S,UnitRange{Int64}}}},N}) at /home/vagrant/.julia/v0.5/FileIO/src/loadsave.jl:61
   in macro expansion; at /home/vagrant/.julia/v0.5/NRRD/test/runtests.jl:65 [inlined]
   in macro expansion; at ./test.jl:674 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/NRRD/test/runtests.jl:59 [inlined]
   in macro expansion; at ./test.jl:674 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488
   in process_options(::Base.JLOptions) at ./client.jl:265
   in _start() at ./client.jl:321
Time is 4th dimension: Error During Test
  Test threw an exception of type UndefVarError
  Expression: timedim(img) == 4
  UndefVarError: axes not defined
   in timedim(::AxisArrays.AxisArray{Float64,4,Array{Float64,4},Tuple{AxisArrays.Axis{:space_1,Ranges.LinSpace{Quantity{Float64, Dimensions:{ùêã}, Units:{m}}}},AxisArrays.Axis{:space_2,Ranges.LinSpace{Quantity{Float64, Dimensions:{ùêã}, Units:{m}}}},AxisArrays.Axis{:space_3,Ranges.LinSpace{Quantity{Float64, Dimensions:{ùêã}, Units:{m}}}},AxisArrays.Axis{:time,UnitRange{Int64}}}}) at /home/vagrant/.julia/v0.5/ImageAxes/src/ImageAxes.jl:134
   in macro expansion; at /home/vagrant/.julia/v0.5/NRRD/test/runtests.jl:72 [inlined]
   in macro expansion; at ./test.jl:674 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/NRRD/test/runtests.jl:70 [inlined]
   in macro expansion; at ./test.jl:674 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488
   in process_options(::Base.JLOptions) at ./client.jl:265
   in _start() at ./client.jl:321
Error encountered while saving "/tmp/Images/write/small_time.nrrd".
Fatal error:
Time is 4th dimension: Error During Test
  Got an exception of type UndefVarError outside of a @test
  UndefVarError: axes not defined
   in #save#10(::Dict{String,Any}, ::Void, ::Void, ::Function, ::FileIO.Stream{FileIO.DataFormat{:NRRD},IOStream}, ::AxisArrays.AxisArray{Float64,4,Array{Float64,4},Tuple{AxisArrays.Axis{:space_1,Ranges.LinSpace{Quantity{Float64, Dimensions:{ùêã}, Units:{m}}}},AxisArrays.Axis{:space_2,Ranges.LinSpace{Quantity{Float64, Dimensions:{ùêã}, Units:{m}}}},AxisArrays.Axis{:space_3,Ranges.LinSpace{Quantity{Float64, Dimensions:{ùêã}, Units:{m}}}},AxisArrays.Axis{:time,UnitRange{Int64}}}}) at /home/vagrant/.julia/v0.5/NRRD/src/NRRD.jl:280
   in (::NRRD.#kw##save)(::Array{Any,1}, ::NRRD.#save, ::FileIO.Stream{FileIO.DataFormat{:NRRD},IOStream}, ::AxisArrays.AxisArray{Float64,4,Array{Float64,4},Tuple{AxisArrays.Axis{:space_1,Ranges.LinSpace{Quantity{Float64, Dimensions:{ùêã}, Units:{m}}}},AxisArrays.Axis{:space_2,Ranges.LinSpace{Quantity{Float64, Dimensions:{ùêã}, Units:{m}}}},AxisArrays.Axis{:space_3,Ranges.LinSpace{Quantity{Float64, Dimensions:{ùêã}, Units:{m}}}},AxisArrays.Axis{:time,UnitRange{Int64}}}}) at ./<missing>:0
   in open(::NRRD.##8#9{Dict{String,Any},Void,Void,AxisArrays.AxisArray{Float64,4,Array{Float64,4},Tuple{AxisArrays.Axis{:space_1,Ranges.LinSpace{Quantity{Float64, Dimensions:{ùêã}, Units:{m}}}},AxisArrays.Axis{:space_2,Ranges.LinSpace{Quantity{Float64, Dimensions:{ùêã}, Units:{m}}}},AxisArrays.Axis{:space_3,Ranges.LinSpace{Quantity{Float64, Dimensions:{ùêã}, Units:{m}}}},AxisArrays.Axis{:time,UnitRange{Int64}}}}}, ::FileIO.File{FileIO.DataFormat{:NRRD}}, ::String) at ./iostream.jl:113
   in save(::FileIO.File{FileIO.DataFormat{:NRRD}}, ::AxisArrays.AxisArray{Float64,4,Array{Float64,4},Tuple{AxisArrays.Axis{:space_1,Ranges.LinSpace{Quantity{Float64, Dimensions:{ùêã}, Units:{m}}}},AxisArrays.Axis{:space_2,Ranges.LinSpace{Quantity{Float64, Dimensions:{ùêã}, Units:{m}}}},AxisArrays.Axis{:space_3,Ranges.LinSpace{Quantity{Float64, Dimensions:{ùêã}, Units:{m}}}},AxisArrays.Axis{:time,UnitRange{Int64}}}}) at /home/vagrant/.julia/v0.5/NRRD/src/NRRD.jl:273
   in anonymous at ./<missing>:?
   in eval(::Module, ::Any) at ./boot.jl:234
   in #save#21(::Array{Any,1}, ::Function, ::FileIO.File{FileIO.DataFormat{:NRRD}}, ::AxisArrays.AxisArray{Float64,4,Array{Float64,4},Tuple{AxisArrays.Axis{:space_1,Ranges.LinSpace{Quantity{Float64, Dimensions:{ùêã}, Units:{m}}}},AxisArrays.Axis{:space_2,Ranges.LinSpace{Quantity{Float64, Dimensions:{ùêã}, Units:{m}}}},AxisArrays.Axis{:space_3,Ranges.LinSpace{Quantity{Float64, Dimensions:{ùêã}, Units:{m}}}},AxisArrays.Axis{:time,UnitRange{Int64}}}}, ::Vararg{AxisArrays.AxisArray{Float64,4,Array{Float64,4},Tuple{AxisArrays.Axis{:space_1,Ranges.LinSpace{Quantity{Float64, Dimensions:{ùêã}, Units:{m}}}},AxisArrays.Axis{:space_2,Ranges.LinSpace{Quantity{Float64, Dimensions:{ùêã}, Units:{m}}}},AxisArrays.Axis{:space_3,Ranges.LinSpace{Quantity{Float64, Dimensions:{ùêã}, Units:{m}}}},AxisArrays.Axis{:time,UnitRange{Int64}}}},N}) at /home/vagrant/.julia/v0.5/FileIO/src/loadsave.jl:115
   in save(::FileIO.File{FileIO.DataFormat{:NRRD}}, ::AxisArrays.AxisArray{Float64,4,Array{Float64,4},Tuple{AxisArrays.Axis{:space_1,Ranges.LinSpace{Quantity{Float64, Dimensions:{ùêã}, Units:{m}}}},AxisArrays.Axis{:space_2,Ranges.LinSpace{Quantity{Float64, Dimensions:{ùêã}, Units:{m}}}},AxisArrays.Axis{:space_3,Ranges.LinSpace{Quantity{Float64, Dimensions:{ùêã}, Units:{m}}}},AxisArrays.Axis{:time,UnitRange{Int64}}}}) at /home/vagrant/.julia/v0.5/FileIO/src/loadsave.jl:106
   in #save#14(::Array{Any,1}, ::Function, ::String, ::AxisArrays.AxisArray{Float64,4,Array{Float64,4},Tuple{AxisArrays.Axis{:space_1,Ranges.LinSpace{Quantity{Float64, Dimensions:{ùêã}, Units:{m}}}},AxisArrays.Axis{:space_2,Ranges.LinSpace{Quantity{Float64, Dimensions:{ùêã}, Units:{m}}}},AxisArrays.Axis{:space_3,Ranges.LinSpace{Quantity{Float64, Dimensions:{ùêã}, Units:{m}}}},AxisArrays.Axis{:time,UnitRange{Int64}}}}, ::Vararg{AxisArrays.AxisArray{Float64,4,Array{Float64,4},Tuple{AxisArrays.Axis{:space_1,Ranges.LinSpace{Quantity{Float64, Dimensions:{ùêã}, Units:{m}}}},AxisArrays.Axis{:space_2,Ranges.LinSpace{Quantity{Float64, Dimensions:{ùêã}, Units:{m}}}},AxisArrays.Axis{:space_3,Ranges.LinSpace{Quantity{Float64, Dimensions:{ùêã}, Units:{m}}}},AxisArrays.Axis{:time,UnitRange{Int64}}}},N}) at /home/vagrant/.julia/v0.5/FileIO/src/loadsave.jl:61
   in macro expansion; at /home/vagrant/.julia/v0.5/NRRD/test/runtests.jl:75 [inlined]
   in macro expansion; at ./test.jl:674 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/NRRD/test/runtests.jl:70 [inlined]
   in macro expansion; at ./test.jl:674 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488
   in process_options(::Base.JLOptions) at ./client.jl:265
   in _start() at ./client.jl:321
Fiji compatibility: Error During Test
  Test threw an exception of type UndefVarError
  Expression: pixelspacing(v) == ps
  UndefVarError: axes not defined
   in pixelspacing(::AxisArrays.AxisArray{UInt16,3,Array{UInt16,3},Tuple{AxisArrays.Axis{:dim_1,UnitRange{Int64}},AxisArrays.Axis{:dim_2,UnitRange{Int64}},AxisArrays.Axis{:dim_3,UnitRange{Int64}}}}) at /home/vagrant/.julia/v0.5/ImageAxes/src/ImageAxes.jl:150
   in macro expansion; at /home/vagrant/.julia/v0.5/NRRD/test/runtests.jl:125 [inlined]
   in macro expansion; at ./test.jl:674 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/NRRD/test/runtests.jl:119 [inlined]
   in macro expansion; at ./test.jl:674 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488
   in process_options(::Base.JLOptions) at ./client.jl:265
   in _start() at ./client.jl:321
Fiji compatibility: Error During Test
  Test threw an exception of type UndefVarError
  Expression: pixelspacing(v) == ps
  UndefVarError: axes not defined
   in pixelspacing(::AxisArrays.AxisArray{UInt16,3,Array{UInt16,3},Tuple{AxisArrays.Axis{:dim_1,Ranges.LinSpace{Quantity{Float64, Dimensions:{ùêã}, Units:{Œºm}}}},AxisArrays.Axis{:dim_2,Ranges.LinSpace{Quantity{Float64, Dimensions:{ùêã}, Units:{Œºm}}}},AxisArrays.Axis{:dim_3,Ranges.LinSpace{Quantity{Float64, Dimensions:{ùêã}, Units:{Œºm}}}}}}) at /home/vagrant/.julia/v0.5/ImageAxes/src/ImageAxes.jl:150
   in macro expansion; at /home/vagrant/.julia/v0.5/NRRD/test/runtests.jl:125 [inlined]
   in macro expansion; at ./test.jl:674 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/NRRD/test/runtests.jl:119 [inlined]
   in macro expansion; at ./test.jl:674 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488
   in process_options(::Base.JLOptions) at ./client.jl:265
   in _start() at ./client.jl:321
Error encountered while saving "/tmp/Images/write/small.nhdr".
Fatal error:
Header only: Error During Test
  Got an exception of type UndefVarError outside of a @test
  UndefVarError: axes not defined
   in #save#10(::Dict{String,String}, ::Void, ::Void, ::Function, ::FileIO.Stream{FileIO.DataFormat{:NRRD},IOStream}, ::AxisArrays.AxisArray{Float32,3,Array{Float32,3},Tuple{AxisArrays.Axis{:L,UnitRange{Int64}},AxisArrays.Axis{:P,UnitRange{Int64}},AxisArrays.Axis{:S,UnitRange{Int64}}}}) at /home/vagrant/.julia/v0.5/NRRD/src/NRRD.jl:280
   in (::NRRD.#kw##save)(::Array{Any,1}, ::NRRD.#save, ::FileIO.Stream{FileIO.DataFormat{:NRRD},IOStream}, ::AxisArrays.AxisArray{Float32,3,Array{Float32,3},Tuple{AxisArrays.Axis{:L,UnitRange{Int64}},AxisArrays.Axis{:P,UnitRange{Int64}},AxisArrays.Axis{:S,UnitRange{Int64}}}}) at ./<missing>:0
   in open(::NRRD.##8#9{Dict{String,String},Void,Void,AxisArrays.AxisArray{Float32,3,Array{Float32,3},Tuple{AxisArrays.Axis{:L,UnitRange{Int64}},AxisArrays.Axis{:P,UnitRange{Int64}},AxisArrays.Axis{:S,UnitRange{Int64}}}}}, ::FileIO.File{FileIO.DataFormat{:NRRD}}, ::String) at ./iostream.jl:113
   in (::NRRD.#kw##save)(::Array{Any,1}, ::NRRD.#save, ::FileIO.File{FileIO.DataFormat{:NRRD}}, ::AxisArrays.AxisArray{Float32,3,Array{Float32,3},Tuple{AxisArrays.Axis{:L,UnitRange{Int64}},AxisArrays.Axis{:P,UnitRange{Int64}},AxisArrays.Axis{:S,UnitRange{Int64}}}}) at ./<missing>:0
   in anonymous at ./<missing>:?
   in eval(::Module, ::Any) at ./boot.jl:234
   in #save#21(::Array{Any,1}, ::Function, ::FileIO.File{FileIO.DataFormat{:NRRD}}, ::AxisArrays.AxisArray{Float32,3,Array{Float32,3},Tuple{AxisArrays.Axis{:L,UnitRange{Int64}},AxisArrays.Axis{:P,UnitRange{Int64}},AxisArrays.Axis{:S,UnitRange{Int64}}}}, ::Vararg{AxisArrays.AxisArray{Float32,3,Array{Float32,3},Tuple{AxisArrays.Axis{:L,UnitRange{Int64}},AxisArrays.Axis{:P,UnitRange{Int64}},AxisArrays.Axis{:S,UnitRange{Int64}}}},N}) at /home/vagrant/.julia/v0.5/FileIO/src/loadsave.jl:115
   in (::FileIO.#kw##save)(::Array{Any,1}, ::FileIO.#save, ::FileIO.File{FileIO.DataFormat{:NRRD}}, ::AxisArrays.AxisArray{Float32,3,Array{Float32,3},Tuple{AxisArrays.Axis{:L,UnitRange{Int64}},AxisArrays.Axis{:P,UnitRange{Int64}},AxisArrays.Axis{:S,UnitRange{Int64}}}}) at ./<missing>:0
   in #save#14(::Array{Any,1}, ::Function, ::String, ::AxisArrays.AxisArray{Float32,3,Array{Float32,3},Tuple{AxisArrays.Axis{:L,UnitRange{Int64}},AxisArrays.Axis{:P,UnitRange{Int64}},AxisArrays.Axis{:S,UnitRange{Int64}}}}, ::Vararg{AxisArrays.AxisArray{Float32,3,Array{Float32,3},Tuple{AxisArrays.Axis{:L,UnitRange{Int64}},AxisArrays.Axis{:P,UnitRange{Int64}},AxisArrays.Axis{:S,UnitRange{Int64}}}},N}) at /home/vagrant/.julia/v0.5/FileIO/src/loadsave.jl:61
   in (::FileIO.#kw##save)(::Array{Any,1}, ::FileIO.#save, ::String, ::AxisArrays.AxisArray{Float32,3,Array{Float32,3},Tuple{AxisArrays.Axis{:L,UnitRange{Int64}},AxisArrays.Axis{:P,UnitRange{Int64}},AxisArrays.Axis{:S,UnitRange{Int64}}}}) at ./<missing>:0
   in macro expansion; at /home/vagrant/.julia/v0.5/NRRD/test/runtests.jl:134 [inlined]
   in macro expansion; at ./test.jl:674 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/NRRD/test/runtests.jl:129 [inlined]
   in macro expansion; at ./test.jl:674 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488
   in process_options(::Base.JLOptions) at ./client.jl:265
   in _start() at ./client.jl:321
Test Summary:           | Pass  Error  Total
  NRRD                  |   35      8     43
  Gray, raw             |    3      1      4
  Units                 |    4      1      5
  Compressed (gzip)     |    2      1      3
  Time is 4th dimension |           2      2
  eltype                |   21            21
  Mmapped               |    2             2
  Endian mmapped        |    1             1
  Fiji compatibility    |    2      2      4
  Header only           |           1      1
ERROR: LoadError: Some tests did not pass: 35 passed, 0 failed, 8 errored, 0 broken.
 in finish(::Base.Test.DefaultTestSet) at ./test.jl:498
 in macro expansion; at ./test.jl:681 [inlined]
 in anonymous at ./<missing>:?
 in include_from_node1(::String) at ./loading.jl:488
 in process_options(::Base.JLOptions) at ./client.jl:265
 in _start() at ./client.jl:321
while loading /home/vagrant/.julia/v0.5/NRRD/test/runtests.jl, in expression starting on line 6
================================[ ERROR: NRRD ]=================================

failed process: Process(`/home/vagrant/julia/bin/julia -Cx86-64 -J/home/vagrant/julia/lib/julia/sys.so --compile=yes --depwarn=yes --check-bounds=yes --code-coverage=none --color=no --compilecache=yes /home/vagrant/.julia/v0.5/NRRD/test/runtests.jl`, ProcessExited(1)) [1]

================================================================================
INFO: No packages to install, update or remove
ERROR: NRRD had test errors
 in #test#61(::Bool, ::Function, ::Array{AbstractString,1}) at ./pkg/entry.jl:748
 in (::Base.Pkg.Entry.#kw##test)(::Array{Any,1}, ::Base.Pkg.Entry.#test, ::Array{AbstractString,1}) at ./<missing>:0
 in (::Base.Pkg.Dir.##2#3{Array{Any,1},Base.Pkg.Entry.#test,Tuple{Array{AbstractString,1}}})() at ./pkg/dir.jl:31
 in cd(::Base.Pkg.Dir.##2#3{Array{Any,1},Base.Pkg.Entry.#test,Tuple{Array{AbstractString,1}}}, ::String) at ./file.jl:59
 in #cd#1(::Array{Any,1}, ::Function, ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N}) at ./pkg/dir.jl:31
 in (::Base.Pkg.Dir.#kw##cd)(::Array{Any,1}, ::Base.Pkg.Dir.#cd, ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N}) at ./<missing>:0
 in #test#3(::Bool, ::Function, ::String, ::Vararg{String,N}) at ./pkg/pkg.jl:258
 in test(::String, ::Vararg{String,N}) at ./pkg/pkg.jl:258
 in eval(::Module, ::Any) at ./boot.jl:234
 in process_options(::Base.JLOptions) at ./client.jl:242
 in _start() at ./client.jl:321

>>> End of log
