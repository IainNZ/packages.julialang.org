>>> 'Pkg.add("LTISystems")' log
WARNING: Base.Pkg is deprecated, run `using Pkg` instead.
 in module Main
[ Info: Cloning cache of DiffEqDiffTools from https://github.com/JuliaDiffEq/DiffEqDiffTools.jl.git
[ Info: Cloning cache of LTISystems from https://github.com/JuliaSystems/LTISystems.jl.git
[ Info: Cloning cache of MuladdMacro from https://github.com/JuliaDiffEq/MuladdMacro.jl.git
[ Info: Cloning cache of OrdinaryDiffEq from https://github.com/JuliaDiffEq/OrdinaryDiffEq.jl.git
[ Info: Cloning cache of PolynomialMatrices from https://github.com/neveritt/PolynomialMatrices.jl.git
[ Info: Cloning cache of RationalFunctions from https://github.com/aytekinar/RationalFunctions.jl.git
[ Info: Installing BinDeps v0.8.6
[ Info: Installing Calculus v0.2.2
[ Info: Installing CommonSubexpressions v0.0.1
[ Info: Installing DataStructures v0.7.4
[ Info: Installing DiffBase v0.3.2
[ Info: Installing DiffEqBase v2.10.2
[ Info: Installing DiffEqDiffTools v0.2.1
[ Info: Installing DiffResults v0.0.3
[ Info: Installing DiffRules v0.0.3
[ Info: Installing Distances v0.5.0
[ Info: Installing ForwardDiff v0.7.3
[ Info: Installing FunctionWrappers v0.1.0
[ Info: Installing GenericSVD v0.1.0
[ Info: Installing Juno v0.4.0
[ Info: Installing LTISystems v0.1.0
[ Info: Installing LineSearches v3.2.5
[ Info: Installing LinearMaps v1.0.4
[ Info: Installing MacroTools v0.4.0
[ Info: Installing Media v0.3.0
[ Info: Installing Missings v0.2.5
[ Info: Installing MuladdMacro v0.0.2
[ Info: Installing NLSolversBase v3.1.0
[ Info: Installing NLsolve v0.13.0
[ Info: Installing NaNMath v0.3.0
[ Info: Installing OrdinaryDiffEq v2.37.0
[ Info: Installing Parameters v0.8.1
[ Info: Installing PolynomialMatrices v0.2.0
[ Info: Installing Polynomials v0.2.1
[ Info: Installing RationalFunctions v0.1.1
[ Info: Installing RecipesBase v0.2.3
[ Info: Installing RecursiveArrayTools v0.14.5
[ Info: Installing Reexport v0.1.0
[ Info: Installing Requires v0.4.3
[ Info: Installing Roots v0.5.0
[ Info: Installing SHA v0.5.6
[ Info: Installing SimpleTraits v0.5.1
[ Info: Installing SpecialFunctions v0.3.8
[ Info: Installing StaticArrays v0.6.6
[ Info: Installing URIParser v0.3.0
[ Info: Building SpecialFunctions
┌ Warning: `isalnum(c::Char)` is deprecated, use `isalpha(c) || isnumeric(c)` instead.
│   caller = is_userinfo_char at parser.jl:4 [inlined]
└ @ Core parser.jl:4
┌ Warning: `isalnum(c::Char)` is deprecated, use `isalpha(c) || isnumeric(c)` instead.
│   caller = is_host_char at parser.jl:8 [inlined]
└ @ Core parser.jl:8
┌ Warning: `isalnum(c::Char)` is deprecated, use `isalpha(c) || isnumeric(c)` instead.
│   caller = is_host_char at parser.jl:8 [inlined]
└ @ Core parser.jl:8
WARNING: importing deprecated binding Base.Associative into BinDeps.
WARNING: Base.Associative is deprecated, use AbstractDict instead.
  likely near /home/vagrant/.julia/v0.7/SpecialFunctions/deps/binaries.jl:44
in @install at /home/vagrant/.julia/v0.7/BinDeps/src/dependencies.jl
[ Info: Package database updated
┌ Info: METADATA is out-of-date — you may not have the latest version of LTISystems
└ Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("LTISystems")' log
WARNING: Base.versioninfo is deprecated: it has been moved to the standard library package `InteractiveUtils`.
Add a `using InteractiveUtils` to your imports..
 in module Main
WARNING: Base.versioninfo is deprecated: it has been moved to the standard library package `InteractiveUtils`.
Add a `using InteractiveUtils` to your imports..
 in module Main
Julia Version 0.7.0-DEV.3664
Commit 9d5aebb07a (2018-01-30 22:46 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
      Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-135-generic #184-Ubuntu SMP Wed Oct 18 11:55:51 UTC 2017 x86_64 x86_64
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
              speed         user         nice          sys         idle          irq
       #1  3503 MHz    3397159 s       4018 s     173099 s     840332 s         52 s
       #2  3503 MHz     747014 s       3513 s      76382 s    4261309 s          1 s
       
  Memory: 2.93927001953125 GB (1004.9375 MB free)
  Uptime: 51883.0 sec
  Load Avg:  0.935546875  0.9931640625  1.029296875
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant
Packages:
  Package Directory: /home/vagrant/.julia/v0.7
  Package Status:
2 required packages:
 - JSON                          0.16.4
 - LTISystems                    0.1.0
40 additional packages:
 - BinDeps                       0.8.6
 - Calculus                      0.2.2
 - CommonSubexpressions          0.0.1
 - Compat                        0.49.0
 - DataStructures                0.7.4
 - DiffBase                      0.3.2
 - DiffEqBase                    2.10.2
 - DiffEqDiffTools               0.2.1
 - DiffResults                   0.0.3
 - DiffRules                     0.0.3
 - Distances                     0.5.0
 - ForwardDiff                   0.7.3
 - FunctionWrappers              0.1.0
 - GenericSVD                    0.1.0
 - Juno                          0.4.0
 - LineSearches                  3.2.5
 - LinearMaps                    1.0.4
 - MacroTools                    0.4.0
 - Media                         0.3.0
 - Missings                      0.2.5
 - MuladdMacro                   0.0.2
 - NLSolversBase                 3.1.0
 - NLsolve                       0.13.0
 - NaNMath                       0.3.0
 - Nullables                     0.0.3
 - OrdinaryDiffEq                2.37.0
 - Parameters                    0.8.1
 - PolynomialMatrices            0.2.0
 - Polynomials                   0.2.1
 - RationalFunctions             0.1.1
 - RecipesBase                   0.2.3
 - RecursiveArrayTools           0.14.5
 - Reexport                      0.1.0
 - Requires                      0.4.3
 - Roots                         0.5.0
 - SHA                           0.5.6
 - SimpleTraits                  0.5.1
 - SpecialFunctions              0.3.8
 - StaticArrays                  0.6.6
 - URIParser                     0.3.0
WARNING: Base.Pkg is deprecated, run `using Pkg` instead.
 in module Main
[ Info: Testing LTISystems
WARNING: importing deprecated binding Base.dot into RationalFunctions.
WARNING: could not import Base.num into RationalFunctions
WARNING: could not import Base.den into RationalFunctions
┌ Warning: Deprecated syntax `immutable` at /home/vagrant/.julia/v0.7/RationalFunctions/src/type.jl:52.
│ Use `struct` instead.
└ @ nothing type.jl:52
┌ Warning: Deprecated syntax `parametric method syntax (::Type{RationalFunction}){U <: Number, V <: Number}(num::Poly{U}, den::Poly{V}, ::Type{Val{:conj}})` around /home/vagrant/.julia/v0.7/RationalFunctions/src/type.jl:59.
│ Use `(::Type{RationalFunction})(num::Poly{U}, den::Poly{V}, #unused#::Type{Val{:conj}}) where {U <: Number, V <: Number}` instead.
└ @ nothing type.jl:59
┌ Warning: Deprecated syntax `parametric method syntax (::Type{RationalFunction}){U <: Number, V <: Number}(num::Poly{U}, den::Poly{V}, ::Type{Val{:notc}})` around /home/vagrant/.julia/v0.7/RationalFunctions/src/type.jl:67.
│ Use `(::Type{RationalFunction})(num::Poly{U}, den::Poly{V}, #unused#::Type{Val{:notc}}) where {U <: Number, V <: Number}` instead.
└ @ nothing type.jl:67
┌ Warning: Deprecated syntax `parametric method syntax (::Type{RationalFunction}){U <: Number, V <: Number}(num::Poly{U}, den::Poly{V})` around /home/vagrant/.julia/v0.7/RationalFunctions/src/type.jl:75.
│ Use `(::Type{RationalFunction})(num::Poly{U}, den::Poly{V}) where {U <: Number, V <: Number}` instead.
└ @ nothing type.jl:75
┌ Warning: Deprecated syntax `parametric method syntax RationalFunction{S}(num::Poly, conj::Type{Val{S}} = Val{:notc})` around /home/vagrant/.julia/v0.7/RationalFunctions/src/type.jl:84.
│ Use `RationalFunction(num::Poly, conj::Type{Val{S}} = Val{:notc}) where S` instead.
└ @ nothing type.jl:84
┌ Warning: Deprecated syntax `parametric method syntax RationalFunction{S}(num::Number, den::Poly, conj::Type{Val{S}} = Val{:notc})` around /home/vagrant/.julia/v0.7/RationalFunctions/src/type.jl:88.
│ Use `RationalFunction(num::Number, den::Poly, conj::Type{Val{S}} = Val{:notc}) where S` instead.
└ @ nothing type.jl:88
┌ Warning: Deprecated syntax `parametric method syntax RationalFunction{S}(num::Poly, den::Number, conj::Type{Val{S}} = Val{:notc})` around /home/vagrant/.julia/v0.7/RationalFunctions/src/type.jl:91.
│ Use `RationalFunction(num::Poly, den::Number, conj::Type{Val{S}} = Val{:notc}) where S` instead.
└ @ nothing type.jl:91
┌ Warning: Deprecated syntax `parametric method syntax RationalFunction{S}(num::Vector, den::Poly, conj::Type{Val{S}} = Val{:notc})` around /home/vagrant/.julia/v0.7/RationalFunctions/src/type.jl:94.
│ Use `RationalFunction(num::Vector, den::Poly, conj::Type{Val{S}} = Val{:notc}) where S` instead.
└ @ nothing type.jl:94
┌ Warning: Deprecated syntax `parametric method syntax RationalFunction{S}(num::Poly, den::Vector, conj::Type{Val{S}} = Val{:notc})` around /home/vagrant/.julia/v0.7/RationalFunctions/src/type.jl:97.
│ Use `RationalFunction(num::Poly, den::Vector, conj::Type{Val{S}} = Val{:notc}) where S` instead.
└ @ nothing type.jl:97
┌ Warning: Deprecated syntax `parametric method syntax RationalFunction{S}(num::Vector, den::Vector, var::SymbolLike = :x, conj::Type{Val{S}} = Val{:notc})` around /home/vagrant/.julia/v0.7/RationalFunctions/src/type.jl:102.
│ Use `RationalFunction(num::Vector, den::Vector, var::SymbolLike = :x, conj::Type{Val{S}} = Val{:notc}) where S` instead.
└ @ nothing type.jl:102
┌ Warning: Deprecated syntax `parametric method syntax RationalFunction{S}(num::Number, den::Number, var::SymbolLike = :x, conj::Type{Val{S}} = Val{:notc})` around /home/vagrant/.julia/v0.7/RationalFunctions/src/type.jl:105.
│ Use `RationalFunction(num::Number, den::Number, var::SymbolLike = :x, conj::Type{Val{S}} = Val{:notc}) where S` instead.
└ @ nothing type.jl:105
┌ Warning: Deprecated syntax `parametric method syntax RationalFunction{S}(num::Vector, den::Number, var::SymbolLike = :x, conj::Type{Val{S}} = Val{:notc})` around /home/vagrant/.julia/v0.7/RationalFunctions/src/type.jl:108.
│ Use `RationalFunction(num::Vector, den::Number, var::SymbolLike = :x, conj::Type{Val{S}} = Val{:notc}) where S` instead.
└ @ nothing type.jl:108
┌ Warning: Deprecated syntax `parametric method syntax RationalFunction{S}(num::Number, den::Vector, var::SymbolLike = :x, conj::Type{Val{S}} = Val{:notc})` around /home/vagrant/.julia/v0.7/RationalFunctions/src/type.jl:111.
│ Use `RationalFunction(num::Number, den::Vector, var::SymbolLike = :x, conj::Type{Val{S}} = Val{:notc}) where S` instead.
└ @ nothing type.jl:111
┌ Warning: Deprecated syntax `parametric method syntax RationalFunction{S, U <: Number}(num::Vector{U}, var::SymbolLike = :x, conj::Type{Val{S}} = Val{:notc})` around /home/vagrant/.julia/v0.7/RationalFunctions/src/type.jl:115.
│ Use `RationalFunction(num::Vector{U}, var::SymbolLike = :x, conj::Type{Val{S}} = Val{:notc}) where {S, U <: Number}` instead.
└ @ nothing type.jl:115
┌ Warning: Deprecated syntax `parametric method syntax RationalFunction{S, U <: Number}(num::U, var::SymbolLike = :x, conj::Type{Val{S}} = Val{:notc})` around /home/vagrant/.julia/v0.7/RationalFunctions/src/type.jl:119.
│ Use `RationalFunction(num::U, var::SymbolLike = :x, conj::Type{Val{S}} = Val{:notc}) where {S, U <: Number}` instead.
└ @ nothing type.jl:119
┌ Warning: Deprecated syntax `parametric method syntax summary{T, S, U, V}(::RationalFunction{Val{T}, Val{S}, U, V})` around /home/vagrant/.julia/v0.7/RationalFunctions/src/printing.jl:1.
│ Use `summary(#unused#::RationalFunction{Val{T}, Val{S}, U, V}) where {T, S, U, V}` instead.
└ @ nothing printing.jl:1
┌ Warning: Deprecated syntax `parametric method syntax _compact{T, S}(stream, ::Base.MIME{:text/plain}, r::RationalFunction{Val{T}, Val{S}})` around /home/vagrant/.julia/v0.7/RationalFunctions/src/printing.jl:5.
│ Use `_compact(stream, #unused#::Base.MIME{:text/plain}, r::RationalFunction{Val{T}, Val{S}}) where {T, S}` instead.
└ @ nothing printing.jl:5
┌ Warning: Deprecated syntax `parametric method syntax _compact{T, S}(stream, ::Base.MIME{:text/latex}, r::RationalFunction{Val{T}, Val{S}})` around /home/vagrant/.julia/v0.7/RationalFunctions/src/printing.jl:11.
│ Use `_compact(stream, #unused#::Base.MIME{:text/latex}, r::RationalFunction{Val{T}, Val{S}}) where {T, S}` instead.
└ @ nothing printing.jl:11
┌ Warning: Deprecated syntax `parametric method syntax _full{T, S}(stream, m::Base.MIME{:text/plain}, r::RationalFunction{Val{T}, Val{S}})` around /home/vagrant/.julia/v0.7/RationalFunctions/src/printing.jl:22.
│ Use `_full(stream, m::Base.MIME{:text/plain}, r::RationalFunction{Val{T}, Val{S}}) where {T, S}` instead.
└ @ nothing printing.jl:22
┌ Warning: Deprecated syntax `parametric method syntax _full{T, S}(stream, m::Base.MIME{:text/latex}, r::RationalFunction{Val{T}, Val{S}})` around /home/vagrant/.julia/v0.7/RationalFunctions/src/printing.jl:33.
│ Use `_full(stream, m::Base.MIME{:text/latex}, r::RationalFunction{Val{T}, Val{S}}) where {T, S}` instead.
└ @ nothing printing.jl:33
┌ Warning: Deprecated syntax `parametric method syntax promote_rule{T, S, U1, V1, U2, V2}(::Type{RationalFunction{Val{T}, Val{S}, U1, V1}}, ::Type{RationalFunction{Val{T}, Val{S}, U2, V2}})` around /home/vagrant/.julia/v0.7/RationalFunctions/src/conversions.jl:3.
│ Use `promote_rule(#unused#::Type{RationalFunction{Val{T}, Val{S}, U1, V1}}, #unused#::Type{RationalFunction{Val{T}, Val{S}, U2, V2}}) where {T, S, U1, V1, U2, V2}` instead.
└ @ nothing conversions.jl:3
┌ Warning: Deprecated syntax `parametric method syntax convert{T, S, U1, V1, U2, V2}(::Type{RationalFunction{Val{T}, Val{S}, U1, V1}}, r::RationalFunction{Val{T}, Val{S}, U2, V2})` around /home/vagrant/.julia/v0.7/RationalFunctions/src/conversions.jl:6.
│ Use `convert(#unused#::Type{RationalFunction{Val{T}, Val{S}, U1, V1}}, r::RationalFunction{Val{T}, Val{S}, U2, V2}) where {T, S, U1, V1, U2, V2}` instead.
└ @ nothing conversions.jl:6
┌ Warning: Deprecated syntax `parametric method syntax convert{T, S, U, V}(::Type{RationalFunction{Val{T}, Val{S}, U, V}}, r::RationalFunction{Val{T}, Val{S}, U, V})` around /home/vagrant/.julia/v0.7/RationalFunctions/src/conversions.jl:9.
│ Use `convert(#unused#::Type{RationalFunction{Val{T}, Val{S}, U, V}}, r::RationalFunction{Val{T}, Val{S}, U, V}) where {T, S, U, V}` instead.
└ @ nothing conversions.jl:9
┌ Warning: Deprecated syntax `parametric method syntax convert{T, S1, S2, U1, V1, U2, V2}(::Type{RationalFunction{Val{T}, Val{S1}, U1, V1}}, r::RationalFunction{Val{T}, Val{S2}, U2, V2})` around /home/vagrant/.julia/v0.7/RationalFunctions/src/conversions.jl:12.
│ Use `convert(#unused#::Type{RationalFunction{Val{T}, Val{S1}, U1, V1}}, r::RationalFunction{Val{T}, Val{S2}, U2, V2}) where {T, S1, S2, U1, V1, U2, V2}` instead.
└ @ nothing conversions.jl:12
┌ Warning: Deprecated syntax `parametric method syntax promote_rule{T, S, U, V, Y <: Number}(::Type{RationalFunction{Val{T}, Val{S}, U, V}}, ::Type{Y})` around /home/vagrant/.julia/v0.7/RationalFunctions/src/conversions.jl:17.
│ Use `promote_rule(#unused#::Type{RationalFunction{Val{T}, Val{S}, U, V}}, #unused#::Type{Y}) where {T, S, U, V, Y <: Number}` instead.
└ @ nothing conversions.jl:17
┌ Warning: Deprecated syntax `parametric method syntax convert{T, S, U, V}(::Type{RationalFunction{Val{T}, Val{S}, U, V}}, n::Number)` around /home/vagrant/.julia/v0.7/RationalFunctions/src/conversions.jl:19.
│ Use `convert(#unused#::Type{RationalFunction{Val{T}, Val{S}, U, V}}, n::Number) where {T, S, U, V}` instead.
└ @ nothing conversions.jl:19
┌ Warning: Deprecated syntax `parametric method syntax promote_rule{T, S, U, V, Y <: Number}(::Type{RationalFunction{Val{T}, Val{S}, U, V}}, ::Type{Poly{Y}})` around /home/vagrant/.julia/v0.7/RationalFunctions/src/conversions.jl:24.
│ Use `promote_rule(#unused#::Type{RationalFunction{Val{T}, Val{S}, U, V}}, #unused#::Type{Poly{Y}}) where {T, S, U, V, Y <: Number}` instead.
└ @ nothing conversions.jl:24
┌ Warning: Deprecated syntax `parametric method syntax convert{T, S, U, V}(::Type{RationalFunction{Val{T}, Val{S}, U, V}}, p::Poly)` around /home/vagrant/.julia/v0.7/RationalFunctions/src/conversions.jl:26.
│ Use `convert(#unused#::Type{RationalFunction{Val{T}, Val{S}, U, V}}, p::Poly) where {T, S, U, V}` instead.
└ @ nothing conversions.jl:26
┌ Warning: Deprecated syntax `parametric method syntax copy{T, S}(r::RationalFunction{T, S})` around /home/vagrant/.julia/v0.7/RationalFunctions/src/methods.jl:2.
│ Use `copy(r::RationalFunction{T, S}) where {T, S}` instead.
└ @ nothing methods.jl:2
┌ Warning: Deprecated syntax `parametric method syntax eltype{T, S, U, V}(::Type{RationalFunction{T, S, U, V}})` around /home/vagrant/.julia/v0.7/RationalFunctions/src/methods.jl:5.
│ Use `eltype(#unused#::Type{RationalFunction{T, S, U, V}}) where {T, S, U, V}` instead.
└ @ nothing methods.jl:5
┌ Warning: Deprecated syntax `parametric method syntax eltype{T, S, U, V}(r::RationalFunction{T, S, U, V})` around /home/vagrant/.julia/v0.7/RationalFunctions/src/methods.jl:6.
│ Use `eltype(r::RationalFunction{T, S, U, V}) where {T, S, U, V}` instead.
└ @ nothing methods.jl:6
┌ Warning: Deprecated syntax `parametric method syntax variable{T, S, U, V}(::Type{RationalFunction{Val{T}, Val{S}, U, V}})` around /home/vagrant/.julia/v0.7/RationalFunctions/src/methods.jl:42.
│ Use `variable(#unused#::Type{RationalFunction{Val{T}, Val{S}, U, V}}) where {T, S, U, V}` instead.
└ @ nothing methods.jl:42
┌ Warning: Deprecated syntax `parametric method syntax variable{T, S, U, V}(r::RationalFunction{Val{T}, Val{S}, U, V})` around /home/vagrant/.julia/v0.7/RationalFunctions/src/methods.jl:44.
│ Use `variable(r::RationalFunction{Val{T}, Val{S}, U, V}) where {T, S, U, V}` instead.
└ @ nothing methods.jl:44
┌ Warning: Deprecated syntax `parametric method syntax one{T, S, U, V}(::Type{RationalFunction{Val{T}, Val{S}, U, V}})` around /home/vagrant/.julia/v0.7/RationalFunctions/src/methods.jl:84.
│ Use `one(#unused#::Type{RationalFunction{Val{T}, Val{S}, U, V}}) where {T, S, U, V}` instead.
└ @ nothing methods.jl:84
┌ Warning: Deprecated syntax `parametric method syntax one{T, S}(r::RationalFunction{T, S})` around /home/vagrant/.julia/v0.7/RationalFunctions/src/methods.jl:86.
│ Use `one(r::RationalFunction{T, S}) where {T, S}` instead.
└ @ nothing methods.jl:86
┌ Warning: Deprecated syntax `parametric method syntax zero{T, S, U, V}(::Type{RationalFunction{Val{T}, Val{S}, U, V}})` around /home/vagrant/.julia/v0.7/RationalFunctions/src/methods.jl:88.
│ Use `zero(#unused#::Type{RationalFunction{Val{T}, Val{S}, U, V}}) where {T, S, U, V}` instead.
└ @ nothing methods.jl:88
┌ Warning: Deprecated syntax `parametric method syntax zero{T, S}(r::RationalFunction{T, S})` around /home/vagrant/.julia/v0.7/RationalFunctions/src/methods.jl:90.
│ Use `zero(r::RationalFunction{T, S}) where {T, S}` instead.
└ @ nothing methods.jl:90
┌ Warning: Deprecated syntax `parametric method syntax hash{T, S}(r::RationalFunction{Val{T}, Val{S}}, h::UInt)` around /home/vagrant/.julia/v0.7/RationalFunctions/src/methods.jl:94.
│ Use `hash(r::RationalFunction{Val{T}, Val{S}}, h::UInt) where {T, S}` instead.
└ @ nothing methods.jl:94
┌ Warning: Deprecated syntax `parametric method syntax =={T, S}(r1::RationalFunction{T, S}, r2::RationalFunction{T, S})` around /home/vagrant/.julia/v0.7/RationalFunctions/src/methods.jl:97.
│ Use `==(r1::RationalFunction{T, S}, r2::RationalFunction{T, S}) where {T, S}` instead.
└ @ nothing methods.jl:97
┌ Warning: Deprecated syntax `parametric method syntax isequal{T, S}(r1::RationalFunction{T, S}, r2::RationalFunction{T, S})` around /home/vagrant/.julia/v0.7/RationalFunctions/src/methods.jl:101.
│ Use `isequal(r1::RationalFunction{T, S}, r2::RationalFunction{T, S}) where {T, S}` instead.
└ @ nothing methods.jl:101
┌ Warning: Deprecated syntax `parametric method syntax eps{T <: AbstractFloat}(::Type{T})` around /home/vagrant/.julia/v0.7/RationalFunctions/src/methods.jl:105.
│ Use `eps(#unused#::Type{T}) where T <: AbstractFloat` instead.
└ @ nothing methods.jl:105
┌ Warning: Deprecated syntax `parametric method syntax eps{T <: AbstractFloat}(::Type{Complex{T}})` around /home/vagrant/.julia/v0.7/RationalFunctions/src/methods.jl:106.
│ Use `eps(#unused#::Type{Complex{T}}) where T <: AbstractFloat` instead.
└ @ nothing methods.jl:106
┌ Warning: Deprecated syntax `parametric method syntax eps{T}(::Type{T})` around /home/vagrant/.julia/v0.7/RationalFunctions/src/methods.jl:107.
│ Use `eps(#unused#::Type{T}) where T` instead.
└ @ nothing methods.jl:107
┌ Warning: Deprecated syntax `parametric method syntax isapprox{T, S, U1, V1, U2, V2}(r1::RationalFunction{Val{T}, Val{S}, U1, V1}, r2::RationalFunction{Val{T}, Val{S}, U2, V2}; rtol::Real = sqrt(eps(promote_type(U1, V2, U2, V2))), atol::Real = 0)` around /home/vagrant/.julia/v0.7/RationalFunctions/src/methods.jl:112.
│ Use `isapprox(r1::RationalFunction{Val{T}, Val{S}, U1, V1}, r2::RationalFunction{Val{T}, Val{S}, U2, V2}; rtol::Real = sqrt(eps(promote_type(U1, V2, U2, V2))), atol::Real = 0) where {T, S, U1, V1, U2, V2}` instead.
└ @ nothing methods.jl:112
┌ Warning: Deprecated syntax `parametric method syntax isapprox{T1, S1, T2, S2}(r1::RationalFunction{Val{T1}, Val{S1}}, r2::RationalFunction{Val{T2}, Val{S2}}; rtol::Real = 0, atol::Real = 0)` around /home/vagrant/.julia/v0.7/RationalFunctions/src/methods.jl:120.
│ Use `isapprox(r1::RationalFunction{Val{T1}, Val{S1}}, r2::RationalFunction{Val{T2}, Val{S2}}; rtol::Real = 0, atol::Real = 0) where {T1, S1, T2, S2}` instead.
└ @ nothing methods.jl:120
┌ Warning: Deprecated syntax `parametric method syntax (r::RationalFunction{T, Val{:conj}}){T}(x::Number)` around /home/vagrant/.julia/v0.7/RationalFunctions/src/methods.jl:146.
│ Use `(r::RationalFunction{T, Val{:conj}})(x::Number) where T` instead.
└ @ nothing methods.jl:146
┌ Warning: Deprecated syntax `parametric method syntax (r::RationalFunction{T, Val{:conj}}){T}(x::Real)` around /home/vagrant/.julia/v0.7/RationalFunctions/src/methods.jl:147.
│ Use `(r::RationalFunction{T, Val{:conj}})(x::Real) where T` instead.
└ @ nothing methods.jl:147
┌ Warning: Deprecated syntax `parametric method syntax inv{T, S}(r::RationalFunction{T, S})` around /home/vagrant/.julia/v0.7/RationalFunctions/src/methods.jl:198.
│ Use `inv(r::RationalFunction{T, S}) where {T, S}` instead.
└ @ nothing methods.jl:198
┌ Warning: Deprecated syntax `parametric method syntax conj{T, S}(r::RationalFunction{Val{T}, Val{S}})` around /home/vagrant/.julia/v0.7/RationalFunctions/src/methods.jl:205.
│ Use `conj(r::RationalFunction{Val{T}, Val{S}}) where {T, S}` instead.
└ @ nothing methods.jl:205
┌ Warning: Deprecated syntax `parametric method syntax conj{T, S, U, V}(m::AbstractArray{RationalFunction{Val{T}, Val{S}, U, V}})` around /home/vagrant/.julia/v0.7/RationalFunctions/src/methods.jl:210.
│ Use `conj(m::AbstractArray{RationalFunction{Val{T}, Val{S}, U, V}}) where {T, S, U, V}` instead.
└ @ nothing methods.jl:210
┌ Warning: Deprecated syntax `parametric method syntax derivative{T, S}(r::RationalFunction{T, S}, n::Int = 1)` around /home/vagrant/.julia/v0.7/RationalFunctions/src/methods.jl:219.
│ Use `derivative(r::RationalFunction{T, S}, n::Int = 1) where {T, S}` instead.
└ @ nothing methods.jl:219
┌ Warning: Deprecated syntax `parametric method syntax reduce{T, S}(r::RationalFunction{T, S})` around /home/vagrant/.julia/v0.7/RationalFunctions/src/methods.jl:245.
│ Use `reduce(r::RationalFunction{T, S}) where {T, S}` instead.
└ @ nothing methods.jl:245
┌ Warning: Deprecated syntax `parametric method syntax +{T, S}(r1::RationalFunction{Val{T}, Val{S}}, r2::RationalFunction{Val{T}, Val{S}})` around /home/vagrant/.julia/v0.7/RationalFunctions/src/methods.jl:255.
│ Use `+(r1::RationalFunction{Val{T}, Val{S}}, r2::RationalFunction{Val{T}, Val{S}}) where {T, S}` instead.
└ @ nothing methods.jl:255
┌ Warning: Deprecated syntax `parametric method syntax +{T1, S1, T2, S2}(r1::RationalFunction{Val{T1}, Val{S1}}, r2::RationalFunction{Val{T2}, Val{S2}})` around /home/vagrant/.julia/v0.7/RationalFunctions/src/methods.jl:266.
│ Use `+(r1::RationalFunction{Val{T1}, Val{S1}}, r2::RationalFunction{Val{T2}, Val{S2}}) where {T1, S1, T2, S2}` instead.
└ @ nothing methods.jl:266
┌ Warning: Deprecated syntax `parametric method syntax *{T, S}(r1::RationalFunction{Val{T}, Val{S}}, r2::RationalFunction{Val{T}, Val{S}})` around /home/vagrant/.julia/v0.7/RationalFunctions/src/methods.jl:271.
│ Use `*(r1::RationalFunction{Val{T}, Val{S}}, r2::RationalFunction{Val{T}, Val{S}}) where {T, S}` instead.
└ @ nothing methods.jl:271
┌ Warning: Deprecated syntax `parametric method syntax *{T1, S1, T2, S2}(r1::RationalFunction{Val{T1}, Val{S1}}, r2::RationalFunction{Val{T2}, Val{S2}})` around /home/vagrant/.julia/v0.7/RationalFunctions/src/methods.jl:277.
│ Use `*(r1::RationalFunction{Val{T1}, Val{S1}}, r2::RationalFunction{Val{T2}, Val{S2}}) where {T1, S1, T2, S2}` instead.
└ @ nothing methods.jl:277
WARNING: Base.dot is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/RationalFunctions/src/methods.jl:281
WARNING: Base.dot is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/RationalFunctions/src/methods.jl:281
┌ Warning: Deprecated syntax `parametric method syntax /{T, S}(r1::RationalFunction{Val{T}, Val{S}}, r2::RationalFunction{Val{T}, Val{S}})` around /home/vagrant/.julia/v0.7/RationalFunctions/src/methods.jl:284.
│ Use `/(r1::RationalFunction{Val{T}, Val{S}}, r2::RationalFunction{Val{T}, Val{S}}) where {T, S}` instead.
└ @ nothing methods.jl:284
┌ Warning: Deprecated syntax `parametric method syntax /{T1, S1, T2, S2}(r1::RationalFunction{Val{T1}, Val{S1}}, r2::RationalFunction{Val{T2}, Val{S2}})` around /home/vagrant/.julia/v0.7/RationalFunctions/src/methods.jl:290.
│ Use `/(r1::RationalFunction{Val{T1}, Val{S1}}, r2::RationalFunction{Val{T2}, Val{S2}}) where {T1, S1, T2, S2}` instead.
└ @ nothing methods.jl:290
┌ Warning: Deprecated syntax `parametric method syntax -{T, S}(r::RationalFunction{T, S})` around /home/vagrant/.julia/v0.7/RationalFunctions/src/methods.jl:294.
│ Use `-(r::RationalFunction{T, S}) where {T, S}` instead.
└ @ nothing methods.jl:294
┌ Warning: Deprecated syntax `function .+(...)`.
│ Use `function Base.broadcast(::typeof(+), ...)` instead.
└ @ nothing none:0
┌ Warning: Deprecated syntax `function .*(...)`.
│ Use `function Base.broadcast(::typeof(*), ...)` instead.
└ @ nothing none:0
┌ Warning: Deprecated syntax `function ./(...)`.
│ Use `function Base.broadcast(::typeof(/), ...)` instead.
└ @ nothing none:0
┌ Warning: Deprecated syntax `function .-(...)`.
│ Use `function Base.broadcast(::typeof(-), ...)` instead.
└ @ nothing none:0
┌ Warning: Deprecated syntax `parametric method syntax isapprox{T, S, U, V, Z <: Number}(r::RationalFunction{T, S, U, V}, n::Z; rtol::Real = sqrt(eps(promote_type(U, V, Z))), atol::Real = 0)` around /home/vagrant/.julia/v0.7/RationalFunctions/src/methods.jl:307.
│ Use `isapprox(r::RationalFunction{T, S, U, V}, n::Z; rtol::Real = sqrt(eps(promote_type(U, V, Z))), atol::Real = 0) where {T, S, U, V, Z <: Number}` instead.
└ @ nothing methods.jl:307
┌ Warning: Deprecated syntax `parametric method syntax isapprox{T, S, U, V, Z <: Number}(n::Z, r::RationalFunction{T, S, U, V}; rtol::Real = sqrt(eps(promote_type(U, V, Z))), atol::Real = 0)` around /home/vagrant/.julia/v0.7/RationalFunctions/src/methods.jl:310.
│ Use `isapprox(n::Z, r::RationalFunction{T, S, U, V}; rtol::Real = sqrt(eps(promote_type(U, V, Z))), atol::Real = 0) where {T, S, U, V, Z <: Number}` instead.
└ @ nothing methods.jl:310
┌ Warning: Deprecated syntax `parametric method syntax +{T, S}(r::RationalFunction{T, S}, n::Number)` around /home/vagrant/.julia/v0.7/RationalFunctions/src/methods.jl:313.
│ Use `+(r::RationalFunction{T, S}, n::Number) where {T, S}` instead.
└ @ nothing methods.jl:313
┌ Warning: Deprecated syntax `parametric method syntax *{T, S}(r::RationalFunction{T, S}, n::Number)` around /home/vagrant/.julia/v0.7/RationalFunctions/src/methods.jl:315.
│ Use `*(r::RationalFunction{T, S}, n::Number) where {T, S}` instead.
└ @ nothing methods.jl:315
WARNING: Base.dot is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/RationalFunctions/src/methods.jl:317
WARNING: Base.dot is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/RationalFunctions/src/methods.jl:317
WARNING: Base.dot is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/RationalFunctions/src/methods.jl:318
WARNING: Base.dot is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/RationalFunctions/src/methods.jl:318
┌ Warning: Deprecated syntax `parametric method syntax /{T, S}(r::RationalFunction{T, S}, n::Number)` around /home/vagrant/.julia/v0.7/RationalFunctions/src/methods.jl:319.
│ Use `/(r::RationalFunction{T, S}, n::Number) where {T, S}` instead.
└ @ nothing methods.jl:319
┌ Warning: Deprecated syntax `parametric method syntax /{T, S}(n::Number, r::RationalFunction{T, S})` around /home/vagrant/.julia/v0.7/RationalFunctions/src/methods.jl:320.
│ Use `/(n::Number, r::RationalFunction{T, S}) where {T, S}` instead.
└ @ nothing methods.jl:320
┌ Warning: Deprecated syntax `function .+(...)`.
│ Use `function Base.broadcast(::typeof(+), ...)` instead.
└ @ nothing none:0
┌ Warning: Deprecated syntax `function .*(...)`.
│ Use `function Base.broadcast(::typeof(*), ...)` instead.
└ @ nothing none:0
┌ Warning: Deprecated syntax `function ./(...)`.
│ Use `function Base.broadcast(::typeof(/), ...)` instead.
└ @ nothing none:0
┌ Warning: Deprecated syntax `function .-(...)`.
│ Use `function Base.broadcast(::typeof(-), ...)` instead.
└ @ nothing none:0
┌ Warning: Deprecated syntax `function .+(...)`.
│ Use `function Base.broadcast(::typeof(+), ...)` instead.
└ @ nothing none:0
┌ Warning: Deprecated syntax `function .*(...)`.
│ Use `function Base.broadcast(::typeof(*), ...)` instead.
└ @ nothing none:0
┌ Warning: Deprecated syntax `function ./(...)`.
│ Use `function Base.broadcast(::typeof(/), ...)` instead.
└ @ nothing none:0
┌ Warning: Deprecated syntax `function .-(...)`.
│ Use `function Base.broadcast(::typeof(-), ...)` instead.
└ @ nothing none:0
┌ Warning: Deprecated syntax `parametric method syntax =={T, S}(r::RationalFunction{Val{T}, S}, p::Poly)` around /home/vagrant/.julia/v0.7/RationalFunctions/src/methods.jl:336.
│ Use `==(r::RationalFunction{Val{T}, S}, p::Poly) where {T, S}` instead.
└ @ nothing methods.jl:336
┌ Warning: Deprecated syntax `parametric method syntax isapprox{T, S, U, V, Z <: Number}(r::RationalFunction{Val{T}, S, U, V}, p::Poly{Z}; rtol::Real = sqrt(eps(promote_type(U, V, Z))), atol::Real = 0)` around /home/vagrant/.julia/v0.7/RationalFunctions/src/methods.jl:343.
│ Use `isapprox(r::RationalFunction{Val{T}, S, U, V}, p::Poly{Z}; rtol::Real = sqrt(eps(promote_type(U, V, Z))), atol::Real = 0) where {T, S, U, V, Z <: Number}` instead.
└ @ nothing methods.jl:343
┌ Warning: Deprecated syntax `parametric method syntax isapprox{T, S, U, V, Z <: Number}(p::Poly{Z}, r::RationalFunction{Val{T}, S, U, V}; rtol::Real = sqrt(eps(promote_type(U, V, Z))), atol::Real = 0)` around /home/vagrant/.julia/v0.7/RationalFunctions/src/methods.jl:350.
│ Use `isapprox(p::Poly{Z}, r::RationalFunction{Val{T}, S, U, V}; rtol::Real = sqrt(eps(promote_type(U, V, Z))), atol::Real = 0) where {T, S, U, V, Z <: Number}` instead.
└ @ nothing methods.jl:350
┌ Warning: Deprecated syntax `parametric method syntax +{T, S}(r::RationalFunction{Val{T}, S}, p::Poly)` around /home/vagrant/.julia/v0.7/RationalFunctions/src/methods.jl:354.
│ Use `+(r::RationalFunction{Val{T}, S}, p::Poly) where {T, S}` instead.
└ @ nothing methods.jl:354
┌ Warning: Deprecated syntax `parametric method syntax *{T, S}(r::RationalFunction{Val{T}, S}, p::Poly)` around /home/vagrant/.julia/v0.7/RationalFunctions/src/methods.jl:363.
│ Use `*(r::RationalFunction{Val{T}, S}, p::Poly) where {T, S}` instead.
└ @ nothing methods.jl:363
WARNING: Base.dot is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/RationalFunctions/src/methods.jl:370
WARNING: Base.dot is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/RationalFunctions/src/methods.jl:370
WARNING: Base.dot is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/RationalFunctions/src/methods.jl:371
WARNING: Base.dot is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/RationalFunctions/src/methods.jl:371
┌ Warning: Deprecated syntax `parametric method syntax /{T, S}(r::RationalFunction{Val{T}, S}, p::Poly)` around /home/vagrant/.julia/v0.7/RationalFunctions/src/methods.jl:374.
│ Use `/(r::RationalFunction{Val{T}, S}, p::Poly) where {T, S}` instead.
└ @ nothing methods.jl:374
┌ Warning: Deprecated syntax `parametric method syntax /{T, S}(p::Poly, r::RationalFunction{Val{T}, S})` around /home/vagrant/.julia/v0.7/RationalFunctions/src/methods.jl:382.
│ Use `/(p::Poly, r::RationalFunction{Val{T}, S}) where {T, S}` instead.
└ @ nothing methods.jl:382
┌ Warning: Deprecated syntax `function .+(...)`.
│ Use `function Base.broadcast(::typeof(+), ...)` instead.
└ @ nothing none:0
┌ Warning: Deprecated syntax `function .*(...)`.
│ Use `function Base.broadcast(::typeof(*), ...)` instead.
└ @ nothing none:0
┌ Warning: Deprecated syntax `function ./(...)`.
│ Use `function Base.broadcast(::typeof(/), ...)` instead.
└ @ nothing none:0
┌ Warning: Deprecated syntax `function .-(...)`.
│ Use `function Base.broadcast(::typeof(-), ...)` instead.
└ @ nothing none:0
┌ Warning: Deprecated syntax `function .+(...)`.
│ Use `function Base.broadcast(::typeof(+), ...)` instead.
└ @ nothing none:0
┌ Warning: Deprecated syntax `function .*(...)`.
│ Use `function Base.broadcast(::typeof(*), ...)` instead.
└ @ nothing none:0
┌ Warning: Deprecated syntax `function ./(...)`.
│ Use `function Base.broadcast(::typeof(/), ...)` instead.
└ @ nothing none:0
┌ Warning: Deprecated syntax `function .-(...)`.
│ Use `function Base.broadcast(::typeof(-), ...)` instead.
└ @ nothing none:0
┌ Warning: Deprecated syntax `parametric method syntax solve{T, S}(lhs::RationalFunction{Val{T}, Val{S}}, rhs::RationalFunction{Val{T}, Val{S}})` around /home/vagrant/.julia/v0.7/RationalFunctions/src/methods.jl:428.
│ Use `solve(lhs::RationalFunction{Val{T}, Val{S}}, rhs::RationalFunction{Val{T}, Val{S}}) where {T, S}` instead.
└ @ nothing methods.jl:428
┌ Warning: Deprecated syntax `parametric method syntax solve{T1, S1, T2, S2}(lhs::RationalFunction{Val{T1}, Val{S1}}, rhs::RationalFunction{Val{T2}, Val{S2}})` around /home/vagrant/.julia/v0.7/RationalFunctions/src/methods.jl:434.
│ Use `solve(lhs::RationalFunction{Val{T1}, Val{S1}}, rhs::RationalFunction{Val{T2}, Val{S2}}) where {T1, S1, T2, S2}` instead.
└ @ nothing methods.jl:434
┌ Warning: Deprecated syntax `parametric method syntax residue{T <: Number}(num::Vector{T}, den::Vector{T})` around /home/vagrant/.julia/v0.7/RationalFunctions/src/methods.jl:520.
│ Use `residue(num::Vector{T}, den::Vector{T}) where T <: Number` instead.
└ @ nothing methods.jl:520
┌ Warning: Deprecated syntax `parametric method syntax residue{T <: Number, S <: Number, U <: Number}(r::Vector{T}, p::Vector{S}, k::Vector{U})` around /home/vagrant/.julia/v0.7/RationalFunctions/src/methods.jl:557.
│ Use `residue(r::Vector{T}, p::Vector{S}, k::Vector{U}) where {T <: Number, S <: Number, U <: Number}` instead.
└ @ nothing methods.jl:557
WARNING: importing deprecated binding Base.det into PolynomialMatrices.
WARNING: importing deprecated binding Base.filt! into PolynomialMatrices.
WARNING: importing deprecated binding Base.filt into PolynomialMatrices.
WARNING: importing deprecated binding Base.vecnorm into PolynomialMatrices.
WARNING: importing deprecated binding Base.norm into PolynomialMatrices.
WARNING: importing deprecated binding Base.rank into PolynomialMatrices.
┌ Warning: Deprecated syntax `immutable` at /home/vagrant/.julia/v0.7/PolynomialMatrices/src/type.jl:9.
│ Use `struct` instead.
└ @ nothing type.jl:9
┌ Warning: Deprecated syntax `parametric method syntax (::Type{PolyMatrix}){M, N, W}(coeffs::SortedDict{Int, M, ForwardOrdering}, dims::NTuple{N, Int}, ::Type{Val{W}})` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/type.jl:15.
│ Use `(::Type{PolyMatrix})(coeffs::SortedDict{Int, M, ForwardOrdering}, dims::NTuple{N, Int}, #unused#::Type{Val{W}}) where {M, N, W}` instead.
└ @ nothing type.jl:15
┌ Warning: Deprecated syntax `parametric method syntax truncate!{T, M, V, N}(p::PolyMatrix{T, M, Val{V}, N}, ϵ = *(Base.rtoldefault(T), length(p), degree(p)))` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/type.jl:23.
│ Use `truncate!(p::PolyMatrix{T, M, Val{V}, N}, ϵ = *(Base.rtoldefault(T), length(p), degree(p))) where {T, M, V, N}` instead.
└ @ nothing type.jl:23
┌ Warning: Deprecated syntax `parametric method syntax _truncate!{T, M, N}(coeffs::SortedDict{Int, M, ForwardOrdering}, dims::NTuple{N, Int}, ::Type{T}, ϵ::Real = *(Base.rtoldefault(real(T)), prod(dims), length(coeffs)))` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/type.jl:29.
│ Use `_truncate!(coeffs::SortedDict{Int, M, ForwardOrdering}, dims::NTuple{N, Int}, #s1::Type{T}, ϵ::Real = *(Base.rtoldefault(real(T)), prod(dims), length(coeffs))) where {T, M, N}` instead.
└ @ nothing type.jl:29
┌ Warning: Deprecated syntax `parametric method syntax (p::PolyMatrix{T, M, Val{W}, N}){T, M, W, N, S}(x::S)` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/type.jl:48.
│ Use `(p::PolyMatrix{T, M, Val{W}, N})(x::S) where {T, M, W, N, S}` instead.
└ @ nothing type.jl:48
┌ Warning: Deprecated syntax `parametric method syntax PolyMatrix{M <: AbstractArray}(d::Dict{Int, M}, var::SymbolLike = :x)` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/type.jl:64.
│ Use `PolyMatrix(d::Dict{Int, M}, var::SymbolLike = :x) where M <: AbstractArray` instead.
└ @ nothing type.jl:64
┌ Warning: Deprecated syntax `parametric method syntax PolyMatrix{M <: AbstractArray, W}(d::Dict{Int, M}, var::Type{Val{W}})` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/type.jl:68.
│ Use `PolyMatrix(d::Dict{Int, M}, var::Type{Val{W}}) where {M <: AbstractArray, W}` instead.
└ @ nothing type.jl:68
┌ Warning: Deprecated syntax `parametric method syntax PolyMatrix{M1 <: AbstractArray}(PM::M1)` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/type.jl:84.
│ Use `PolyMatrix(PM::M1) where M1 <: AbstractArray` instead.
└ @ nothing type.jl:84
┌ Warning: Deprecated syntax `parametric method syntax PolyMatrix{T, N, W}(PM::AbstractArray{Poly{T}, N}, ::Type{Val{W}})` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/type.jl:90.
│ Use `PolyMatrix(PM::AbstractArray{Poly{T}, N}, #unused#::Type{Val{W}}) where {T, N, W}` instead.
└ @ nothing type.jl:90
┌ Warning: Deprecated syntax `parametric method syntax PolyMatrix{T <: Number}(A::AbstractArray{T}, var::SymbolLike = :x)` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/type.jl:117.
│ Use `PolyMatrix(A::AbstractArray{T}, var::SymbolLike = :x) where T <: Number` instead.
└ @ nothing type.jl:117
┌ Warning: Deprecated syntax `parametric method syntax PolyMatrix{T <: Number, W}(A::AbstractArray{T}, ::Type{Val{W}})` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/type.jl:121.
│ Use `PolyMatrix(A::AbstractArray{T}, #unused#::Type{Val{W}}) where {T <: Number, W}` instead.
└ @ nothing type.jl:121
┌ Warning: Deprecated syntax `parametric method syntax PolyMatrix{M <: AbstractArray}(A::M, dims::Tuple{Int}, var::SymbolLike = :x)` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/type.jl:126.
│ Use `PolyMatrix(A::M, dims::Tuple{Int}, var::SymbolLike = :x) where M <: AbstractArray` instead.
└ @ nothing type.jl:126
┌ Warning: Deprecated syntax `parametric method syntax PolyMatrix{M <: AbstractArray, W}(A::M, dims::Tuple{Int}, ::Type{Val{W}})` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/type.jl:130.
│ Use `PolyMatrix(A::M, dims::Tuple{Int}, #unused#::Type{Val{W}}) where {M <: AbstractArray, W}` instead.
└ @ nothing type.jl:130
┌ Warning: Deprecated syntax `parametric method syntax PolyMatrix{M <: AbstractArray}(A::M, dims::Tuple{Int, Int}, var::SymbolLike = :x; reverse::Bool = false)` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/type.jl:147.
│ Use `PolyMatrix(A::M, dims::Tuple{Int, Int}, var::SymbolLike = :x; reverse::Bool = false) where M <: AbstractArray` instead.
└ @ nothing type.jl:147
┌ Warning: Deprecated syntax `parametric method syntax PolyMatrix{M <: AbstractArray, W}(A::M, dims::Tuple{Int, Int}, ::Type{Val{W}}; reverse::Bool = false)` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/type.jl:151.
│ Use `PolyMatrix(A::M, dims::Tuple{Int, Int}, #s5::Type{Val{W}}; reverse::Bool = false) where {M <: AbstractArray, W}` instead.
└ @ nothing type.jl:151
┌ Warning: Deprecated syntax `parametric method syntax PolyMatrix{M <: AbstractArray}(A::M, dims::Tuple{Int, Int, Int}, var::SymbolLike = :x)` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/type.jl:168.
│ Use `PolyMatrix(A::M, dims::Tuple{Int, Int, Int}, var::SymbolLike = :x) where M <: AbstractArray` instead.
└ @ nothing type.jl:168
┌ Warning: Deprecated syntax `parametric method syntax PolyMatrix{M <: AbstractArray, W}(A::M, dims::Tuple{Int, Int, Int}, ::Type{Val{W}})` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/type.jl:172.
│ Use `PolyMatrix(A::M, dims::Tuple{Int, Int, Int}, #unused#::Type{Val{W}}) where {M <: AbstractArray, W}` instead.
└ @ nothing type.jl:172
┌ Warning: Deprecated syntax `parametric method syntax length{T, M, W, N}(p::PolyMatrix{T, M, Val{W}, N})` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/methods.jl:4.
│ Use `length(p::PolyMatrix{T, M, Val{W}, N}) where {T, M, W, N}` instead.
└ @ nothing methods.jl:4
┌ Warning: Deprecated syntax `parametric method syntax start{T, M, W, N}(p::PolyMatrix{T, M, Val{W}, N})` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/methods.jl:5.
│ Use `start(p::PolyMatrix{T, M, Val{W}, N}) where {T, M, W, N}` instead.
└ @ nothing methods.jl:5
┌ Warning: Deprecated syntax `parametric method syntax next{T, M, W, N}(p::PolyMatrix{T, M, Val{W}, N}, state)` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/methods.jl:6.
│ Use `next(p::PolyMatrix{T, M, Val{W}, N}, state) where {T, M, W, N}` instead.
└ @ nothing methods.jl:6
┌ Warning: Deprecated syntax `parametric method syntax done{T, M, W, N}(p::PolyMatrix{T, M, Val{W}, N}, state)` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/methods.jl:7.
│ Use `done(p::PolyMatrix{T, M, Val{W}, N}, state) where {T, M, W, N}` instead.
└ @ nothing methods.jl:7
┌ Warning: Deprecated syntax `parametric method syntax eltype{T, M, W, N}(::PolyMatrix{T, M, Val{W}, N})` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/methods.jl:8.
│ Use `eltype(#unused#::PolyMatrix{T, M, Val{W}, N}) where {T, M, W, N}` instead.
└ @ nothing methods.jl:8
┌ Warning: Deprecated syntax `parametric method syntax vartype{T, M, W, N}(p::PolyMatrix{T, M, Val{W}, N})` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/methods.jl:9.
│ Use `vartype(p::PolyMatrix{T, M, Val{W}, N}) where {T, M, W, N}` instead.
└ @ nothing methods.jl:9
┌ Warning: Deprecated syntax `parametric method syntax mattype{T, M, W, N}(p::PolyMatrix{T, M, Val{W}, N})` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/methods.jl:10.
│ Use `mattype(p::PolyMatrix{T, M, Val{W}, N}) where {T, M, W, N}` instead.
└ @ nothing methods.jl:10
┌ Warning: Deprecated syntax `parametric method syntax similar{T, M, W, N, N2}(p::PolyMatrix{T, M, Val{W}, N}, dims::NTuple{N2, Int})` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/methods.jl:14.
│ Use `similar(p::PolyMatrix{T, M, Val{W}, N}, dims::NTuple{N2, Int}) where {T, M, W, N, N2}` instead.
└ @ nothing methods.jl:14
┌ Warning: Deprecated syntax `parametric method syntax similar{T, M, W, N, S, N2}(p::PolyMatrix{T, M, Val{W}, N}, ::Type{S} = T, dims::NTuple{N2, Int} = size(p))` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/methods.jl:21.
│ Use `similar(p::PolyMatrix{T, M, Val{W}, N}, #s7::Type{S} = T, dims::NTuple{N2, Int} = size(p)) where {T, M, W, N, S, N2}` instead.
└ @ nothing methods.jl:21
┌ Warning: Deprecated syntax `parametric method syntax similar{T, M, W, N, S, N2}(p::PolyMatrix{T, M, Val{W}, N}, ::Type{Poly{S}}, dims::NTuple{N2, Int} = size(p))` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/methods.jl:28.
│ Use `similar(p::PolyMatrix{T, M, Val{W}, N}, #s7::Type{Poly{S}}, dims::NTuple{N2, Int} = size(p)) where {T, M, W, N, S, N2}` instead.
└ @ nothing methods.jl:28
┌ Warning: Deprecated syntax `parametric method syntax Base.vcat{T, M, W, N}(A::PolyMatrix{T, M, Val{W}, N}...)` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/methods.jl:38.
│ Use `Base.vcat(A::PolyMatrix{T, M, Val{W}, N}...) where {T, M, W, N}` instead.
└ @ nothing methods.jl:38
┌ Warning: Deprecated syntax `parametric method syntax Base.hcat{T, M, W, N}(A::PolyMatrix{T, M, Val{W}, N}...)` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/methods.jl:44.
│ Use `Base.hcat(A::PolyMatrix{T, M, Val{W}, N}...) where {T, M, W, N}` instead.
└ @ nothing methods.jl:44
┌ Warning: Deprecated syntax `parametric method syntax Base.cat{T, M, W, N}(catdims, A::PolyMatrix{T, M, Val{W}, N}...)` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/methods.jl:51.
│ Use `Base.cat(catdims, A::PolyMatrix{T, M, Val{W}, N}...) where {T, M, W, N}` instead.
└ @ nothing methods.jl:51
┌ Warning: Deprecated syntax `parametric method syntax Base.hvcat{T, M, W, N}(nbc::Integer, A::PolyMatrix{T, M, Val{W}, N}...)` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/methods.jl:57.
│ Use `Base.hvcat(nbc::Integer, A::PolyMatrix{T, M, Val{W}, N}...) where {T, M, W, N}` instead.
└ @ nothing methods.jl:57
┌ Warning: Deprecated syntax `parametric method syntax Base.hvcat{T, M, W, N, N2}(rows::NTuple{N2, Int}, A::PolyMatrix{T, M, Val{W}, N}...)` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/methods.jl:63.
│ Use `Base.hvcat(rows::NTuple{N2, Int}, A::PolyMatrix{T, M, Val{W}, N}...) where {T, M, W, N, N2}` instead.
└ @ nothing methods.jl:63
┌ Warning: Deprecated syntax `parametric method syntax variable{T, M, W, N}(p::PolyMatrix{T, M, Val{W}, N})` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/methods.jl:72.
│ Use `variable(p::PolyMatrix{T, M, Val{W}, N}) where {T, M, W, N}` instead.
└ @ nothing methods.jl:72
┌ Warning: Deprecated syntax `parametric method syntax copy{T, M, W, N}(p::PolyMatrix{T, M, Val{W}, N})` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/methods.jl:76.
│ Use `copy(p::PolyMatrix{T, M, Val{W}, N}) where {T, M, W, N}` instead.
└ @ nothing methods.jl:76
┌ Warning: Deprecated syntax `parametric method syntax Base.checkbounds{T, M, W, N}(p::PolyMatrix{T, M, Val{W}, N}, I...)` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/methods.jl:85.
│ Use `Base.checkbounds(p::PolyMatrix{T, M, Val{W}, N}, I...) where {T, M, W, N}` instead.
└ @ nothing methods.jl:85
┌ Warning: Deprecated syntax `parametric method syntax getindex{T, M, W, N}(p::PolyMatrix{T, M, Val{W}, N}, i::Integer)` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/methods.jl:89.
│ Use `getindex(p::PolyMatrix{T, M, Val{W}, N}, i::Integer) where {T, M, W, N}` instead.
└ @ nothing methods.jl:89
┌ Warning: Deprecated syntax `parametric method syntax getindex{T, M, W, N}(p::PolyMatrix{T, M, Val{W}, N}, i::Integer, j::Integer)` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/methods.jl:98.
│ Use `getindex(p::PolyMatrix{T, M, Val{W}, N}, i::Integer, j::Integer) where {T, M, W, N}` instead.
└ @ nothing methods.jl:98
┌ Warning: Deprecated syntax `parametric method syntax getindex{T, M, W, N}(p::PolyMatrix{T, M, Val{W}, N}, I...)` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/methods.jl:106.
│ Use `getindex(p::PolyMatrix{T, M, Val{W}, N}, I...) where {T, M, W, N}` instead.
└ @ nothing methods.jl:106
┌ Warning: Deprecated syntax `parametric method syntax _PolyMatrix{T, N}(p::Array{Poly{T}, N})` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/methods.jl:116.
│ Use `_PolyMatrix(p::Array{Poly{T}, N}) where {T, N}` instead.
└ @ nothing methods.jl:116
┌ Warning: Deprecated syntax `parametric method syntax _PolyMatrix{T}(p::Poly{T})` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/methods.jl:117.
│ Use `_PolyMatrix(p::Poly{T}) where T` instead.
└ @ nothing methods.jl:117
┌ Warning: Deprecated syntax `parametric method syntax setindex!{T, M, W, N, U}(Pm::PolyMatrix{T, M, Val{W}, N}, p::Poly{U}, i::Integer)` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/methods.jl:121.
│ Use `setindex!(Pm::PolyMatrix{T, M, Val{W}, N}, p::Poly{U}, i::Integer) where {T, M, W, N, U}` instead.
└ @ nothing methods.jl:121
┌ Warning: Deprecated syntax `parametric method syntax setindex!{T, M, W, U}(Pm::PolyMatrix{T, M, Val{W}, 2}, p::Poly{U}, i::Integer, j::Integer)` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/methods.jl:147.
│ Use `setindex!(Pm::PolyMatrix{T, M, Val{W}, 2}, p::Poly{U}, i::Integer, j::Integer) where {T, M, W, U}` instead.
└ @ nothing methods.jl:147
┌ Warning: Deprecated syntax `parametric method syntax setindex!{T, M, W, N, U}(Pm::PolyMatrix{T, M, Val{W}, N}, p::Poly{U}, I...)` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/methods.jl:173.
│ Use `setindex!(Pm::PolyMatrix{T, M, Val{W}, N}, p::Poly{U}, I...) where {T, M, W, N, U}` instead.
└ @ nothing methods.jl:173
┌ Warning: Deprecated syntax `parametric method syntax setindex!{T, M, W, N, T2 <: Number}(Pm::PolyMatrix{T, M, Val{W}, N}, p::T2, i::Integer)` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/methods.jl:199.
│ Use `setindex!(Pm::PolyMatrix{T, M, Val{W}, N}, p::T2, i::Integer) where {T, M, W, N, T2 <: Number}` instead.
└ @ nothing methods.jl:199
┌ Warning: Deprecated syntax `parametric method syntax setindex!{T, M, W, T2 <: Number}(Pm::PolyMatrix{T, M, Val{W}, 2}, p::T2, i::Integer, j::Integer)` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/methods.jl:217.
│ Use `setindex!(Pm::PolyMatrix{T, M, Val{W}, 2}, p::T2, i::Integer, j::Integer) where {T, M, W, T2 <: Number}` instead.
└ @ nothing methods.jl:217
┌ Warning: Deprecated syntax `parametric method syntax setindex!{T, M, W, N, T2 <: Number}(Pm::PolyMatrix{T, M, Val{W}, N}, p::T2, I...)` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/methods.jl:235.
│ Use `setindex!(Pm::PolyMatrix{T, M, Val{W}, N}, p::T2, I...) where {T, M, W, N, T2 <: Number}` instead.
└ @ nothing methods.jl:235
┌ Warning: Deprecated syntax `parametric method syntax insert!{T, M, W, N}(p::PolyMatrix{T, M, Val{W}, N}, k::Int, A)` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/methods.jl:252.
│ Use `insert!(p::PolyMatrix{T, M, Val{W}, N}, k::Int, A) where {T, M, W, N}` instead.
└ @ nothing methods.jl:252
┌ Warning: Deprecated syntax `parametric method syntax degree{T, M, W, N}(p::PolyMatrix{T, M, Val{W}, N})` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/methods.jl:259.
│ Use `degree(p::PolyMatrix{T, M, Val{W}, N}) where {T, M, W, N}` instead.
└ @ nothing methods.jl:259
┌ Warning: Deprecated syntax `parametric method syntax transpose{T, M <: AbstractMatrix, W, N}(p::PolyMatrix{T, M, Val{W}, N})` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/methods.jl:262.
│ Use `transpose(p::PolyMatrix{T, M, Val{W}, N}) where {T, M <: AbstractMatrix, W, N}` instead.
└ @ nothing methods.jl:262
┌ Warning: Deprecated syntax `parametric method syntax ctranspose{T1, M1, W, N}(p::PolyMatrix{T1, M1, Val{W}, N})` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/methods.jl:270.
│ Use `ctranspose(p::PolyMatrix{T1, M1, Val{W}, N}) where {T1, M1, W, N}` instead.
└ @ nothing methods.jl:270
┌ Warning: Deprecated syntax `parametric method syntax vecnorm{T1, M1, W, N}(p₁::PolyMatrix{T1, M1, Val{W}, N}, p::Real = 2)` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/methods.jl:286.
│ Use `vecnorm(p₁::PolyMatrix{T1, M1, Val{W}, N}, p::Real = 2) where {T1, M1, W, N}` instead.
└ @ nothing methods.jl:286
WARNING: Base.vecnorm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/PolynomialMatrices/src/methods.jl:285
WARNING: Base.vecnorm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/PolynomialMatrices/src/methods.jl:285
WARNING: Base.vecnorm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/PolynomialMatrices/src/methods.jl:285
┌ Warning: Deprecated syntax `parametric method syntax =={T1, M1, W, N, T2, M2}(p₁::PolyMatrix{T1, M1, Val{W}, N}, p₂::PolyMatrix{T2, M2, Val{W}, N})` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/methods.jl:291.
│ Use `==(p₁::PolyMatrix{T1, M1, Val{W}, N}, p₂::PolyMatrix{T2, M2, Val{W}, N}) where {T1, M1, W, N, T2, M2}` instead.
└ @ nothing methods.jl:291
┌ Warning: Deprecated syntax `parametric method syntax =={T1, M1, W1, W2, N, T2, M2}(p₁::PolyMatrix{T1, M1, Val{W1}, N}, p₂::PolyMatrix{T2, M2, Val{W2}, N})` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/methods.jl:292.
│ Use `==(p₁::PolyMatrix{T1, M1, Val{W1}, N}, p₂::PolyMatrix{T2, M2, Val{W2}, N}) where {T1, M1, W1, W2, N, T2, M2}` instead.
└ @ nothing methods.jl:292
┌ Warning: Deprecated syntax `parametric method syntax =={T1, M1, W, N, M2 <: AbstractArray}(p₁::PolyMatrix{T1, M1, Val{W}, N}, n::M2)` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/methods.jl:295.
│ Use `==(p₁::PolyMatrix{T1, M1, Val{W}, N}, n::M2) where {T1, M1, W, N, M2 <: AbstractArray}` instead.
└ @ nothing methods.jl:295
┌ Warning: Deprecated syntax `parametric method syntax =={T1, M1, W, N, M2 <: AbstractArray}(n::M2, p₁::PolyMatrix{T1, M1, Val{W}, N})` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/methods.jl:307.
│ Use `==(n::M2, p₁::PolyMatrix{T1, M1, Val{W}, N}) where {T1, M1, W, N, M2 <: AbstractArray}` instead.
└ @ nothing methods.jl:307
┌ Warning: Deprecated syntax `parametric method syntax hash{T1, M1, W, N}(p::PolyMatrix{T1, M1, Val{W}, N}, h::UInt)` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/methods.jl:309.
│ Use `hash(p::PolyMatrix{T1, M1, Val{W}, N}, h::UInt) where {T1, M1, W, N}` instead.
└ @ nothing methods.jl:309
┌ Warning: Deprecated syntax `parametric method syntax isapprox{T1, M1, W, N, T2, M2}(p₁::PolyMatrix{T1, M1, Val{W}, N}, p₂::PolyMatrix{T2, M2, Val{W}, N}; rtol::Real = *(length(p₁), degree(p₁), degree(p₂), Base.rtoldefault(T1, T2)), atol::Real = 0, norm::Function = vecnorm)` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/methods.jl:315.
│ Use `isapprox(p₁::PolyMatrix{T1, M1, Val{W}, N}, p₂::PolyMatrix{T2, M2, Val{W}, N}; rtol::Real = *(length(p₁), degree(p₁), degree(p₂), Base.rtoldefault(T1, T2)), atol::Real = 0, norm::Function = vecnorm) where {T1, M1, W, N, T2, M2}` instead.
└ @ nothing methods.jl:315
┌ Warning: Deprecated syntax `parametric method syntax isapprox{T1, M1, W1, W2, N, T2, M2}(p₁::PolyMatrix{T1, M1, Val{W1}, N}, p₂::PolyMatrix{T2, M2, Val{W2}, N}; rtol::Real = Base.rtoldefault(T1, T2), atol::Real = 0, norm::Function = vecnorm)` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/methods.jl:338.
│ Use `isapprox(p₁::PolyMatrix{T1, M1, Val{W1}, N}, p₂::PolyMatrix{T2, M2, Val{W2}, N}; rtol::Real = Base.rtoldefault(T1, T2), atol::Real = 0, norm::Function = vecnorm) where {T1, M1, W1, W2, N, T2, M2}` instead.
└ @ nothing methods.jl:338
┌ Warning: Deprecated syntax `parametric method syntax isapprox{T1, M1, W, N, T2}(p₁::PolyMatrix{T1, M1, Val{W}, N}, n::AbstractArray{T2, N}; rtol::Real = Base.rtoldefault(T1, T2), atol::Real = 0, norm::Function = vecnorm)` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/methods.jl:345.
│ Use `isapprox(p₁::PolyMatrix{T1, M1, Val{W}, N}, n::AbstractArray{T2, N}; rtol::Real = Base.rtoldefault(T1, T2), atol::Real = 0, norm::Function = vecnorm) where {T1, M1, W, N, T2}` instead.
└ @ nothing methods.jl:345
┌ Warning: Deprecated syntax `parametric method syntax isapprox{T1, M1, W, N, T2}(n::AbstractArray{T2, N}, p₁::PolyMatrix{T1, M1, Val{W}, N})` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/methods.jl:362.
│ Use `isapprox(n::AbstractArray{T2, N}, p₁::PolyMatrix{T1, M1, Val{W}, N}) where {T1, M1, W, N, T2}` instead.
└ @ nothing methods.jl:362
┌ Warning: Deprecated syntax `parametric method syntax isapprox{T1, M1, W, N, T2}(p₁::PolyMatrix{T1, M1, Val{W}, N}, n::AbstractArray{Poly{T2}, N}; rtol::Real = Base.rtoldefault(T1, T2), atol::Real = 0, norm::Function = vecnorm)` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/methods.jl:367.
│ Use `isapprox(p₁::PolyMatrix{T1, M1, Val{W}, N}, n::AbstractArray{Poly{T2}, N}; rtol::Real = Base.rtoldefault(T1, T2), atol::Real = 0, norm::Function = vecnorm) where {T1, M1, W, N, T2}` instead.
└ @ nothing methods.jl:367
┌ Warning: Deprecated syntax `parametric method syntax isapprox{T1, M1, W, N, T2}(n::AbstractArray{Poly{T2}, N}, p₁::PolyMatrix{T1, M1, Val{W}, N}; rtol::Real = Base.rtoldefault(T1, T2), atol::Real = 0, norm::Function = vecnorm)` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/methods.jl:373.
│ Use `isapprox(n::AbstractArray{Poly{T2}, N}, p₁::PolyMatrix{T1, M1, Val{W}, N}; rtol::Real = Base.rtoldefault(T1, T2), atol::Real = 0, norm::Function = vecnorm) where {T1, M1, W, N, T2}` instead.
└ @ nothing methods.jl:373
┌ Warning: Deprecated syntax `parametric method syntax rank{T, M, W, N}(p::PolyMatrix{T, M, Val{W}, N})` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/methods.jl:378.
│ Use `rank(p::PolyMatrix{T, M, Val{W}, N}) where {T, M, W, N}` instead.
└ @ nothing methods.jl:378
WARNING: Base.rank is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/PolynomialMatrices/src/methods.jl:377
WARNING: Base.rank is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/PolynomialMatrices/src/methods.jl:377
┌ Warning: Deprecated syntax `parametric method syntax fastrank{T, M, W, N}(p::PolyMatrix{T, M, Val{W}, N})` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/methods.jl:389.
│ Use `fastrank(p::PolyMatrix{T, M, Val{W}, N}) where {T, M, W, N}` instead.
└ @ nothing methods.jl:389
┌ Warning: Deprecated syntax `parametric method syntax summary{T, M, W, N}(p::PolyMatrix{T, M, Val{W}, N})` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/methods.jl:391.
│ Use `summary(p::PolyMatrix{T, M, Val{W}, N}) where {T, M, W, N}` instead.
└ @ nothing methods.jl:391
┌ Warning: Deprecated syntax `parametric method syntax promote_rule{T1, T2, M1, M2, W, N}(::Type{PolyMatrix{T1, M1, Val{W}, N}}, ::Type{PolyMatrix{T2, M2, Val{W}, N}})` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/conversions.jl:3.
│ Use `promote_rule(#unused#::Type{PolyMatrix{T1, M1, Val{W}, N}}, #unused#::Type{PolyMatrix{T2, M2, Val{W}, N}}) where {T1, T2, M1, M2, W, N}` instead.
└ @ nothing conversions.jl:3
┌ Warning: Deprecated syntax `parametric method syntax _convert{T1, N, T2, M1, M2, W}(::Type{PolyMatrix{T1, M1, Val{W}, N}}, p::PolyMatrix{T2, M2, Val{W}, N})` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/conversions.jl:8.
│ Use `_convert(#unused#::Type{PolyMatrix{T1, M1, Val{W}, N}}, p::PolyMatrix{T2, M2, Val{W}, N}) where {T1, N, T2, M1, M2, W}` instead.
└ @ nothing conversions.jl:8
┌ Warning: Deprecated syntax `parametric method syntax convert{T1, N, T2, M1, M2, W}(::Type{PolyMatrix{T1, M1, Val{W}, N}}, p::PolyMatrix{T2, M2, Val{W}, N})` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/conversions.jl:17.
│ Use `convert(#unused#::Type{PolyMatrix{T1, M1, Val{W}, N}}, p::PolyMatrix{T2, M2, Val{W}, N}) where {T1, N, T2, M1, M2, W}` instead.
└ @ nothing conversions.jl:17
┌ Warning: Deprecated syntax `parametric method syntax promote_rule{T1, T2, M1, W, N}(::Type{PolyMatrix{T1, M1, Val{W}, N}}, ::Type{AbstractArray{T2, N}})` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/conversions.jl:28.
│ Use `promote_rule(#unused#::Type{PolyMatrix{T1, M1, Val{W}, N}}, #unused#::Type{AbstractArray{T2, N}}) where {T1, T2, M1, W, N}` instead.
└ @ nothing conversions.jl:28
┌ Warning: Deprecated syntax `parametric method syntax convert{T1, T2, M1, W, N}(::Type{PolyMatrix{T1, M1, Val{W}, N}}, p::AbstractArray{T2, N})` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/conversions.jl:31.
│ Use `convert(#unused#::Type{PolyMatrix{T1, M1, Val{W}, N}}, p::AbstractArray{T2, N}) where {T1, T2, M1, W, N}` instead.
└ @ nothing conversions.jl:31
┌ Warning: Deprecated syntax `parametric method syntax +{T1, M1, W, N, T2, M2}(p1::PolyMatrix{T1, M1, Val{W}, N}, p2::PolyMatrix{T2, M2, Val{W}, N})` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/arithmetic.jl:3.
│ Use `+(p1::PolyMatrix{T1, M1, Val{W}, N}, p2::PolyMatrix{T2, M2, Val{W}, N}) where {T1, M1, W, N, T2, M2}` instead.
└ @ nothing arithmetic.jl:3
┌ Warning: Deprecated syntax `parametric method syntax _add{T1, M1, W, N, T2, M2}(p1::PolyMatrix{T1, M1, Val{W}, N}, p2::PolyMatrix{T2, M2, Val{W}, N})` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/arithmetic.jl:12.
│ Use `_add(p1::PolyMatrix{T1, M1, Val{W}, N}, p2::PolyMatrix{T2, M2, Val{W}, N}) where {T1, M1, W, N, T2, M2}` instead.
└ @ nothing arithmetic.jl:12
┌ Warning: Deprecated syntax `parametric method syntax _add{T1, M1, W, N, T2 <: Poly}(p1::PolyMatrix{T1, M1, Val{W}, N}, p2::T2)` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/arithmetic.jl:36.
│ Use `_add(p1::PolyMatrix{T1, M1, Val{W}, N}, p2::T2) where {T1, M1, W, N, T2 <: Poly}` instead.
└ @ nothing arithmetic.jl:36
┌ Warning: Deprecated syntax `parametric method syntax +{T1, M1, W1, W2, N, T2, M2}(p1::PolyMatrix{T1, M1, Val{W1}, N}, p2::PolyMatrix{T2, M2, Val{W2}, N})` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/arithmetic.jl:60.
│ Use `+(p1::PolyMatrix{T1, M1, Val{W1}, N}, p2::PolyMatrix{T2, M2, Val{W2}, N}) where {T1, M1, W1, W2, N, T2, M2}` instead.
└ @ nothing arithmetic.jl:60
┌ Warning: Deprecated syntax `parametric method syntax -{T1, M1, W, N}(p::PolyMatrix{T1, M1, Val{W}, N})` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/arithmetic.jl:66.
│ Use `-(p::PolyMatrix{T1, M1, Val{W}, N}) where {T1, M1, W, N}` instead.
└ @ nothing arithmetic.jl:66
┌ Warning: Deprecated syntax `parametric method syntax -{T1, M1, W, N, T2, M2}(p1::PolyMatrix{T1, M1, Val{W}, N}, p2::PolyMatrix{T2, M2, Val{W}, N})` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/arithmetic.jl:73.
│ Use `-(p1::PolyMatrix{T1, M1, Val{W}, N}, p2::PolyMatrix{T2, M2, Val{W}, N}) where {T1, M1, W, N, T2, M2}` instead.
└ @ nothing arithmetic.jl:73
┌ Warning: Deprecated syntax `parametric method syntax -{T1, M1, W1, W2, N, T2, M2}(p1::PolyMatrix{T1, M1, Val{W1}, N}, p2::PolyMatrix{T2, M2, Val{W2}, N})` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/arithmetic.jl:76.
│ Use `-(p1::PolyMatrix{T1, M1, Val{W1}, N}, p2::PolyMatrix{T2, M2, Val{W2}, N}) where {T1, M1, W1, W2, N, T2, M2}` instead.
└ @ nothing arithmetic.jl:76
┌ Warning: Deprecated syntax `parametric method syntax *{T1, M1, W, T2, M2}(p1::PolyMatrix{T1, M1, Val{W}, 2}, p2::PolyMatrix{T2, M2, Val{W}, 2})` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/arithmetic.jl:84.
│ Use `*(p1::PolyMatrix{T1, M1, Val{W}, 2}, p2::PolyMatrix{T2, M2, Val{W}, 2}) where {T1, M1, W, T2, M2}` instead.
└ @ nothing arithmetic.jl:84
┌ Warning: Deprecated syntax `parametric method syntax *{T1, M1, W, T2, M2}(p1::PolyMatrix{T1, M1, Val{W}, 2}, p2::PolyMatrix{T2, M2, Val{W}, 1})` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/arithmetic.jl:92.
│ Use `*(p1::PolyMatrix{T1, M1, Val{W}, 2}, p2::PolyMatrix{T2, M2, Val{W}, 1}) where {T1, M1, W, T2, M2}` instead.
└ @ nothing arithmetic.jl:92
┌ Warning: Deprecated syntax `parametric method syntax _mul{T1, T2}(p1::T1, p2::T2)` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/arithmetic.jl:100.
│ Use `_mul(p1::T1, p2::T2) where {T1, T2}` instead.
└ @ nothing arithmetic.jl:100
┌ Warning: Deprecated syntax `parametric method syntax _mulconv{T1, M1, W, T2, M2, N}(p1::PolyMatrix{T1, M1, Val{W}, 2}, p2::PolyMatrix{T2, M2, Val{W}, N})` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/arithmetic.jl:113.
│ Use `_mulconv(p1::PolyMatrix{T1, M1, Val{W}, 2}, p2::PolyMatrix{T2, M2, Val{W}, N}) where {T1, M1, W, T2, M2, N}` instead.
└ @ nothing arithmetic.jl:113
┌ Warning: Deprecated syntax `parametric method syntax _mulconv{T1, M1, W, N, T2 <: Poly}(p1::PolyMatrix{T1, M1, Val{W}, N}, p2::T2)` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/arithmetic.jl:141.
│ Use `_mulconv(p1::PolyMatrix{T1, M1, Val{W}, N}, p2::T2) where {T1, M1, W, N, T2 <: Poly}` instead.
└ @ nothing arithmetic.jl:141
┌ Warning: Deprecated syntax `parametric method syntax _keys{T}(c::T)` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/arithmetic.jl:168.
│ Use `_keys(c::T) where T` instead.
└ @ nothing arithmetic.jl:168
┌ Warning: Deprecated syntax `parametric method syntax _keys{T <: AbstractArray}(c::T)` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/arithmetic.jl:169.
│ Use `_keys(c::T) where T <: AbstractArray` instead.
└ @ nothing arithmetic.jl:169
┌ Warning: Deprecated syntax `parametric method syntax _mulfft{T1, M1, W, T2, M2, N}(p1::PolyMatrix{T1, M1, Val{W}, 2}, p2::PolyMatrix{T2, M2, Val{W}, N})` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/arithmetic.jl:173.
│ Use `_mulfft(p1::PolyMatrix{T1, M1, Val{W}, 2}, p2::PolyMatrix{T2, M2, Val{W}, N}) where {T1, M1, W, T2, M2, N}` instead.
└ @ nothing arithmetic.jl:173
┌ Warning: Deprecated syntax `parametric method syntax _mulfft{T1, M1, W, N, T2}(p1::PolyMatrix{T1, M1, Val{W}, N}, p2::Poly{T2})` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/arithmetic.jl:199.
│ Use `_mulfft(p1::PolyMatrix{T1, M1, Val{W}, N}, p2::Poly{T2}) where {T1, M1, W, N, T2}` instead.
└ @ nothing arithmetic.jl:199
┌ Warning: Deprecated syntax `parametric method syntax _fftmatrix{T1, M1, W1, N, T}(p::PolyMatrix{T1, M1, Val{W1}, N}, ::Type{T}, dn::Integer)` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/arithmetic.jl:225.
│ Use `_fftmatrix(p::PolyMatrix{T1, M1, Val{W1}, N}, #unused#::Type{T}, dn::Integer) where {T1, M1, W1, N, T}` instead.
└ @ nothing arithmetic.jl:225
┌ Warning: Deprecated syntax `parametric method syntax _fftmatrix{T1, T}(p::Poly{T1}, ::Type{T}, dn::Integer)` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/arithmetic.jl:233.
│ Use `_fftmatrix(p::Poly{T1}, #unused#::Type{T}, dn::Integer) where {T1, T}` instead.
└ @ nothing arithmetic.jl:233
┌ Warning: Deprecated syntax `parametric method syntax *{T1, M1, W1, W2, N, T2, M2}(p1::PolyMatrix{T1, M1, Val{W1}, N}, p2::PolyMatrix{T2, M2, Val{W2}, N})` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/arithmetic.jl:242.
│ Use `*(p1::PolyMatrix{T1, M1, Val{W1}, N}, p2::PolyMatrix{T2, M2, Val{W2}, N}) where {T1, M1, W1, W2, N, T2, M2}` instead.
└ @ nothing arithmetic.jl:242
┌ Warning: Deprecated syntax `parametric method syntax +{T, M1, W, N, M2 <: AbstractArray}(p1::PolyMatrix{T, M1, Val{W}, N}, p2::M2)` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/arithmetic.jl:247.
│ Use `+(p1::PolyMatrix{T, M1, Val{W}, N}, p2::M2) where {T, M1, W, N, M2 <: AbstractArray}` instead.
└ @ nothing arithmetic.jl:247
┌ Warning: Deprecated syntax `parametric method syntax +{T, M1, W, N, M2 <: AbstractArray}(p1::M2, p2::PolyMatrix{T, M1, Val{W}, N})` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/arithmetic.jl:248.
│ Use `+(p1::M2, p2::PolyMatrix{T, M1, Val{W}, N}) where {T, M1, W, N, M2 <: AbstractArray}` instead.
└ @ nothing arithmetic.jl:248
┌ Warning: Deprecated syntax `parametric method syntax -{T, M1, W, N, M2 <: AbstractArray}(p1::PolyMatrix{T, M1, Val{W}, N}, p2::M2)` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/arithmetic.jl:250.
│ Use `-(p1::PolyMatrix{T, M1, Val{W}, N}, p2::M2) where {T, M1, W, N, M2 <: AbstractArray}` instead.
└ @ nothing arithmetic.jl:250
┌ Warning: Deprecated syntax `parametric method syntax -{T, M1, W, N, M2 <: AbstractArray}(p1::M2, p2::PolyMatrix{T, M1, Val{W}, N})` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/arithmetic.jl:251.
│ Use `-(p1::M2, p2::PolyMatrix{T, M1, Val{W}, N}) where {T, M1, W, N, M2 <: AbstractArray}` instead.
└ @ nothing arithmetic.jl:251
┌ Warning: Deprecated syntax `parametric method syntax *{T, M1, W, N, S}(p1::PolyMatrix{T, M1, Val{W}, N}, p2::AbstractArray{S, 2})` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/arithmetic.jl:253.
│ Use `*(p1::PolyMatrix{T, M1, Val{W}, N}, p2::AbstractArray{S, 2}) where {T, M1, W, N, S}` instead.
└ @ nothing arithmetic.jl:253
┌ Warning: Deprecated syntax `parametric method syntax *{T, M1, W, N, S}(p2::AbstractArray{S, 2}, p1::PolyMatrix{T, M1, Val{W}, N})` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/arithmetic.jl:254.
│ Use `*(p2::AbstractArray{S, 2}, p1::PolyMatrix{T, M1, Val{W}, N}) where {T, M1, W, N, S}` instead.
└ @ nothing arithmetic.jl:254
┌ Warning: Deprecated syntax `parametric method syntax *{T, M1, W, N, S <: Number}(p1::PolyMatrix{T, M1, Val{W}, N}, p2::AbstractArray{S, 1})` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/arithmetic.jl:256.
│ Use `*(p1::PolyMatrix{T, M1, Val{W}, N}, p2::AbstractArray{S, 1}) where {T, M1, W, N, S <: Number}` instead.
└ @ nothing arithmetic.jl:256
┌ Warning: Deprecated syntax `parametric method syntax +{T, M1, W, N, M2 <: Poly}(p1::PolyMatrix{T, M1, Val{W}, N}, p2::M2)` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/arithmetic.jl:259.
│ Use `+(p1::PolyMatrix{T, M1, Val{W}, N}, p2::M2) where {T, M1, W, N, M2 <: Poly}` instead.
└ @ nothing arithmetic.jl:259
┌ Warning: Deprecated syntax `parametric method syntax +{T, M1, W, N, M2 <: Poly}(p1::M2, p2::PolyMatrix{T, M1, Val{W}, N})` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/arithmetic.jl:260.
│ Use `+(p1::M2, p2::PolyMatrix{T, M1, Val{W}, N}) where {T, M1, W, N, M2 <: Poly}` instead.
└ @ nothing arithmetic.jl:260
┌ Warning: Deprecated syntax `parametric method syntax -{T, M1, W, N, M2 <: Poly}(p1::PolyMatrix{T, M1, Val{W}, N}, p2::M2)` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/arithmetic.jl:262.
│ Use `-(p1::PolyMatrix{T, M1, Val{W}, N}, p2::M2) where {T, M1, W, N, M2 <: Poly}` instead.
└ @ nothing arithmetic.jl:262
┌ Warning: Deprecated syntax `parametric method syntax -{T, M1, W, N, M2 <: Poly}(p1::M2, p2::PolyMatrix{T, M1, Val{W}, N})` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/arithmetic.jl:263.
│ Use `-(p1::M2, p2::PolyMatrix{T, M1, Val{W}, N}) where {T, M1, W, N, M2 <: Poly}` instead.
└ @ nothing arithmetic.jl:263
┌ Warning: Deprecated syntax `parametric method syntax *{T, M1, W, N, M2 <: Poly}(p1::PolyMatrix{T, M1, Val{W}, N}, p2::M2)` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/arithmetic.jl:265.
│ Use `*(p1::PolyMatrix{T, M1, Val{W}, N}, p2::M2) where {T, M1, W, N, M2 <: Poly}` instead.
└ @ nothing arithmetic.jl:265
┌ Warning: Deprecated syntax `parametric method syntax *{T, M1, W, N, M2 <: Poly}(p1::M2, p2::PolyMatrix{T, M1, Val{W}, N})` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/arithmetic.jl:266.
│ Use `*(p1::M2, p2::PolyMatrix{T, M1, Val{W}, N}) where {T, M1, W, N, M2 <: Poly}` instead.
└ @ nothing arithmetic.jl:266
┌ Warning: Deprecated syntax `parametric method syntax _add{T1, M1, W, N, T2 <: Number}(p1::PolyMatrix{T1, M1, Val{W}, N}, v2::T2)` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/arithmetic.jl:270.
│ Use `_add(p1::PolyMatrix{T1, M1, Val{W}, N}, v2::T2) where {T1, M1, W, N, T2 <: Number}` instead.
└ @ nothing arithmetic.jl:270
┌ Warning: Deprecated syntax `parametric method syntax +{T, M1, W, N, M2 <: Number}(p1::PolyMatrix{T, M1, Val{W}, N}, p2::M2)` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/arithmetic.jl:283.
│ Use `+(p1::PolyMatrix{T, M1, Val{W}, N}, p2::M2) where {T, M1, W, N, M2 <: Number}` instead.
└ @ nothing arithmetic.jl:283
┌ Warning: Deprecated syntax `parametric method syntax +{T, M1, W, N, M2 <: Number}(p1::M2, p2::PolyMatrix{T, M1, Val{W}, N})` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/arithmetic.jl:284.
│ Use `+(p1::M2, p2::PolyMatrix{T, M1, Val{W}, N}) where {T, M1, W, N, M2 <: Number}` instead.
└ @ nothing arithmetic.jl:284
┌ Warning: Deprecated syntax `parametric method syntax -{T, M1, W, N, M2 <: Number}(p1::PolyMatrix{T, M1, Val{W}, N}, p2::M2)` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/arithmetic.jl:286.
│ Use `-(p1::PolyMatrix{T, M1, Val{W}, N}, p2::M2) where {T, M1, W, N, M2 <: Number}` instead.
└ @ nothing arithmetic.jl:286
┌ Warning: Deprecated syntax `parametric method syntax -{T, M1, W, N, M2 <: Number}(p1::M2, p2::PolyMatrix{T, M1, Val{W}, N})` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/arithmetic.jl:287.
│ Use `-(p1::M2, p2::PolyMatrix{T, M1, Val{W}, N}) where {T, M1, W, N, M2 <: Number}` instead.
└ @ nothing arithmetic.jl:287
┌ Warning: Deprecated syntax `parametric method syntax _mul{T1, M1, W, N, T2 <: Number}(p1::PolyMatrix{T1, M1, Val{W}, N}, v2::T2)` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/arithmetic.jl:290.
│ Use `_mul(p1::PolyMatrix{T1, M1, Val{W}, N}, v2::T2) where {T1, M1, W, N, T2 <: Number}` instead.
└ @ nothing arithmetic.jl:290
┌ Warning: Deprecated syntax `parametric method syntax *{T, M1, W, N, M2 <: Number}(p1::PolyMatrix{T, M1, Val{W}, N}, p2::M2)` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/arithmetic.jl:302.
│ Use `*(p1::PolyMatrix{T, M1, Val{W}, N}, p2::M2) where {T, M1, W, N, M2 <: Number}` instead.
└ @ nothing arithmetic.jl:302
┌ Warning: Deprecated syntax `parametric method syntax *{T, M1, W, N, M2 <: Number}(p1::M2, p2::PolyMatrix{T, M1, Val{W}, N})` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/arithmetic.jl:303.
│ Use `*(p1::M2, p2::PolyMatrix{T, M1, Val{W}, N}) where {T, M1, W, N, M2 <: Number}` instead.
└ @ nothing arithmetic.jl:303
┌ Warning: Deprecated syntax `parametric method syntax /{T, M1, W, N, M2 <: Number}(p1::PolyMatrix{T, M1, Val{W}, N}, p2::M2)` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/arithmetic.jl:305.
│ Use `/(p1::PolyMatrix{T, M1, Val{W}, N}, p2::M2) where {T, M1, W, N, M2 <: Number}` instead.
└ @ nothing arithmetic.jl:305
┌ Warning: Deprecated syntax `parametric method syntax Base.LinAlg.At_mul_B{T1, M1, W, N1, T2, N2}(p1::PolyMatrix{T1, M1, Val{W}, N1}, p2::AbstractArray{T2, N2})` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/arithmetic.jl:310.
│ Use `Base.LinAlg.At_mul_B(p1::PolyMatrix{T1, M1, Val{W}, N1}, p2::AbstractArray{T2, N2}) where {T1, M1, W, N1, T2, N2}` instead.
└ @ nothing arithmetic.jl:310
WARNING: Base.LinAlg is deprecated, run `using LinearAlgebra` instead.
  likely near /home/vagrant/.julia/v0.7/PolynomialMatrices/src/arithmetic.jl:309
┌ Warning: Deprecated syntax `parametric method syntax Base.LinAlg.A_mul_Bt{T1, M1, W, N1, T2, N2}(p1::PolyMatrix{T1, M1, Val{W}, N1}, p2::AbstractArray{T2, N2})` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/arithmetic.jl:313.
│ Use `Base.LinAlg.A_mul_Bt(p1::PolyMatrix{T1, M1, Val{W}, N1}, p2::AbstractArray{T2, N2}) where {T1, M1, W, N1, T2, N2}` instead.
└ @ nothing arithmetic.jl:313
WARNING: Base.LinAlg is deprecated, run `using LinearAlgebra` instead.
  likely near /home/vagrant/.julia/v0.7/PolynomialMatrices/src/arithmetic.jl:312
┌ Warning: Deprecated syntax `parametric method syntax Base.LinAlg.At_mul_Bt{T1, M1, W, N1, T2, N2}(p1::PolyMatrix{T1, M1, Val{W}, N1}, p2::AbstractArray{T2, N2})` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/arithmetic.jl:316.
│ Use `Base.LinAlg.At_mul_Bt(p1::PolyMatrix{T1, M1, Val{W}, N1}, p2::AbstractArray{T2, N2}) where {T1, M1, W, N1, T2, N2}` instead.
└ @ nothing arithmetic.jl:316
WARNING: Base.LinAlg is deprecated, run `using LinearAlgebra` instead.
  likely near /home/vagrant/.julia/v0.7/PolynomialMatrices/src/arithmetic.jl:315
┌ Warning: Deprecated syntax `parametric method syntax Base.LinAlg.Ac_mul_B{T1, M1, W, N1, T2, N2}(p1::PolyMatrix{T1, M1, Val{W}, N1}, p2::AbstractArray{T2, N2})` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/arithmetic.jl:320.
│ Use `Base.LinAlg.Ac_mul_B(p1::PolyMatrix{T1, M1, Val{W}, N1}, p2::AbstractArray{T2, N2}) where {T1, M1, W, N1, T2, N2}` instead.
└ @ nothing arithmetic.jl:320
WARNING: Base.LinAlg is deprecated, run `using LinearAlgebra` instead.
  likely near /home/vagrant/.julia/v0.7/PolynomialMatrices/src/arithmetic.jl:319
┌ Warning: Deprecated syntax `parametric method syntax Base.LinAlg.A_mul_Bc{T1, M1, W, N1, T2, N2}(p1::PolyMatrix{T1, M1, Val{W}, N1}, p2::AbstractArray{T2, N2})` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/arithmetic.jl:323.
│ Use `Base.LinAlg.A_mul_Bc(p1::PolyMatrix{T1, M1, Val{W}, N1}, p2::AbstractArray{T2, N2}) where {T1, M1, W, N1, T2, N2}` instead.
└ @ nothing arithmetic.jl:323
WARNING: Base.LinAlg is deprecated, run `using LinearAlgebra` instead.
  likely near /home/vagrant/.julia/v0.7/PolynomialMatrices/src/arithmetic.jl:322
┌ Warning: Deprecated syntax `parametric method syntax Base.LinAlg.Ac_mul_Bc{T1, M1, W, N1, T2, N2}(p1::PolyMatrix{T1, M1, Val{W}, N1}, p2::AbstractArray{T2, N2})` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/arithmetic.jl:326.
│ Use `Base.LinAlg.Ac_mul_Bc(p1::PolyMatrix{T1, M1, Val{W}, N1}, p2::AbstractArray{T2, N2}) where {T1, M1, W, N1, T2, N2}` instead.
└ @ nothing arithmetic.jl:326
WARNING: Base.LinAlg is deprecated, run `using LinearAlgebra` instead.
  likely near /home/vagrant/.julia/v0.7/PolynomialMatrices/src/arithmetic.jl:325
┌ Warning: Deprecated syntax `parametric method syntax Base.LinAlg.At_mul_B{T1, M1, W, N1, T2, M2, N2}(p1::PolyMatrix{T1, M1, Val{W}, N1}, p2::PolyMatrix{T2, M2, Val{W}, N2})` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/arithmetic.jl:331.
│ Use `Base.LinAlg.At_mul_B(p1::PolyMatrix{T1, M1, Val{W}, N1}, p2::PolyMatrix{T2, M2, Val{W}, N2}) where {T1, M1, W, N1, T2, M2, N2}` instead.
└ @ nothing arithmetic.jl:331
WARNING: Base.LinAlg is deprecated, run `using LinearAlgebra` instead.
  likely near /home/vagrant/.julia/v0.7/PolynomialMatrices/src/arithmetic.jl:330
┌ Warning: Deprecated syntax `parametric method syntax Base.LinAlg.A_mul_Bt{T1, M1, W, N1, T2, M2, N2}(p1::PolyMatrix{T1, M1, Val{W}, N1}, p2::PolyMatrix{T2, M2, Val{W}, N2})` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/arithmetic.jl:334.
│ Use `Base.LinAlg.A_mul_Bt(p1::PolyMatrix{T1, M1, Val{W}, N1}, p2::PolyMatrix{T2, M2, Val{W}, N2}) where {T1, M1, W, N1, T2, M2, N2}` instead.
└ @ nothing arithmetic.jl:334
WARNING: Base.LinAlg is deprecated, run `using LinearAlgebra` instead.
  likely near /home/vagrant/.julia/v0.7/PolynomialMatrices/src/arithmetic.jl:333
┌ Warning: Deprecated syntax `parametric method syntax Base.LinAlg.At_mul_Bt{T1, M1, W, N1, T2, M2, N2}(p1::PolyMatrix{T1, M1, Val{W}, N1}, p2::PolyMatrix{T2, M2, Val{W}, N2})` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/arithmetic.jl:337.
│ Use `Base.LinAlg.At_mul_Bt(p1::PolyMatrix{T1, M1, Val{W}, N1}, p2::PolyMatrix{T2, M2, Val{W}, N2}) where {T1, M1, W, N1, T2, M2, N2}` instead.
└ @ nothing arithmetic.jl:337
WARNING: Base.LinAlg is deprecated, run `using LinearAlgebra` instead.
  likely near /home/vagrant/.julia/v0.7/PolynomialMatrices/src/arithmetic.jl:336
┌ Warning: Deprecated syntax `parametric method syntax Base.LinAlg.Ac_mul_B{T1, M1, W, N1, T2, M2, N2}(p1::PolyMatrix{T1, M1, Val{W}, N1}, p2::PolyMatrix{T2, M2, Val{W}, N2})` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/arithmetic.jl:341.
│ Use `Base.LinAlg.Ac_mul_B(p1::PolyMatrix{T1, M1, Val{W}, N1}, p2::PolyMatrix{T2, M2, Val{W}, N2}) where {T1, M1, W, N1, T2, M2, N2}` instead.
└ @ nothing arithmetic.jl:341
WARNING: Base.LinAlg is deprecated, run `using LinearAlgebra` instead.
  likely near /home/vagrant/.julia/v0.7/PolynomialMatrices/src/arithmetic.jl:340
┌ Warning: Deprecated syntax `parametric method syntax Base.LinAlg.A_mul_Bc{T1, M1, W, N1, T2, M2, N2}(p1::PolyMatrix{T1, M1, Val{W}, N1}, p2::PolyMatrix{T2, M2, Val{W}, N2})` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/arithmetic.jl:344.
│ Use `Base.LinAlg.A_mul_Bc(p1::PolyMatrix{T1, M1, Val{W}, N1}, p2::PolyMatrix{T2, M2, Val{W}, N2}) where {T1, M1, W, N1, T2, M2, N2}` instead.
└ @ nothing arithmetic.jl:344
WARNING: Base.LinAlg is deprecated, run `using LinearAlgebra` instead.
  likely near /home/vagrant/.julia/v0.7/PolynomialMatrices/src/arithmetic.jl:343
┌ Warning: Deprecated syntax `parametric method syntax Base.LinAlg.Ac_mul_Bc{T1, M1, W, N1, T2, M2, N2}(p1::PolyMatrix{T1, M1, Val{W}, N1}, p2::PolyMatrix{T2, M2, Val{W}, N2})` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/arithmetic.jl:347.
│ Use `Base.LinAlg.Ac_mul_Bc(p1::PolyMatrix{T1, M1, Val{W}, N1}, p2::PolyMatrix{T2, M2, Val{W}, N2}) where {T1, M1, W, N1, T2, M2, N2}` instead.
└ @ nothing arithmetic.jl:347
WARNING: Base.LinAlg is deprecated, run `using LinearAlgebra` instead.
  likely near /home/vagrant/.julia/v0.7/PolynomialMatrices/src/arithmetic.jl:346
┌ Warning: Deprecated syntax `parametric method syntax det{T, M, W, N}(p::PolyMatrix{T, M, Val{W}, N})` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/arithmetic.jl:351.
│ Use `det(p::PolyMatrix{T, M, Val{W}, N}) where {T, M, W, N}` instead.
└ @ nothing arithmetic.jl:351
WARNING: Base.det is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/PolynomialMatrices/src/arithmetic.jl:350
WARNING: Base.det is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/PolynomialMatrices/src/arithmetic.jl:350
┌ Warning: Deprecated syntax `parametric method syntax _truncate{T <: Real, T2}(::Type{T}, a::AbstractArray{T2})` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/arithmetic.jl:368.
│ Use `_truncate(#unused#::Type{T}, a::AbstractArray{T2}) where {T <: Real, T2}` instead.
└ @ nothing arithmetic.jl:368
┌ Warning: Deprecated syntax `parametric method syntax _truncate{T <: Integer, T2}(::Type{T}, a::AbstractArray{T2})` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/arithmetic.jl:373.
│ Use `_truncate(#unused#::Type{T}, a::AbstractArray{T2}) where {T <: Integer, T2}` instead.
└ @ nothing arithmetic.jl:373
┌ Warning: Deprecated syntax `parametric method syntax inv{T, M, W, N}(p::PolyMatrix{T, M, Val{W}, N})` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/arithmetic.jl:383.
│ Use `inv(p::PolyMatrix{T, M, Val{W}, N}) where {T, M, W, N}` instead.
└ @ nothing arithmetic.jl:383
┌ Warning: Deprecated syntax `1./` at /home/vagrant/.julia/v0.7/PolynomialMatrices/src/reductions.jl:121.
│ Use `1 ./` instead.
└ @ nothing reductions.jl:121
┌ Warning: Deprecated syntax `parametric method syntax gcrd{T1, M1, W, N, T2, M2}(p₁::PolyMatrix{T1, M1, Val{W}, N}, p₂::PolyMatrix{T2, M2, Val{W}, N}, iterative::Bool = true, dᵤ::Int = -1)` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/reductions.jl:33.
│ Use `gcrd(p₁::PolyMatrix{T1, M1, Val{W}, N}, p₂::PolyMatrix{T2, M2, Val{W}, N}, iterative::Bool = true, dᵤ::Int = -1) where {T1, M1, W, N, T2, M2}` instead.
└ @ nothing reductions.jl:33
┌ Warning: Deprecated syntax `parametric method syntax gcld{T1, M1, W, N, T2, M2}(p₁::PolyMatrix{T1, M1, Val{W}, N}, p₂::PolyMatrix{T2, M2, Val{W}, N}, iterative::Bool = true, dᵤ::Int = -1)` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/reductions.jl:76.
│ Use `gcld(p₁::PolyMatrix{T1, M1, Val{W}, N}, p₂::PolyMatrix{T2, M2, Val{W}, N}, iterative::Bool = true, dᵤ::Int = -1) where {T1, M1, W, N, T2, M2}` instead.
└ @ nothing reductions.jl:76
┌ Warning: Deprecated syntax `parametric method syntax hermite{T1, M, W, N}(p::PolyMatrix{T1, M, Val{W}, N}, iterative::Bool = true, dᵤ::Int = -1)` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/reductions.jl:116.
│ Use `hermite(p::PolyMatrix{T1, M, Val{W}, N}, iterative::Bool = true, dᵤ::Int = -1) where {T1, M, W, N}` instead.
└ @ nothing reductions.jl:116
┌ Warning: Deprecated syntax `parametric method syntax ltriang{T1, M, W, N}(p::PolyMatrix{T1, M, Val{W}, N}, iterative::Bool = true, dᵤ::Int = -1)` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/reductions.jl:172.
│ Use `ltriang(p::PolyMatrix{T1, M, Val{W}, N}, iterative::Bool = true, dᵤ::Int = -1) where {T1, M, W, N}` instead.
└ @ nothing reductions.jl:172
┌ Warning: Deprecated syntax `parametric method syntax rtriang{T1, M, W, N}(p::PolyMatrix{T1, M, Val{W}, N}, iterative::Bool = true, dᵤ::Int = -1)` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/reductions.jl:213.
│ Use `rtriang(p::PolyMatrix{T1, M, Val{W}, N}, iterative::Bool = true, dᵤ::Int = -1) where {T1, M, W, N}` instead.
└ @ nothing reductions.jl:213
┌ Warning: The postfix .' syntax is deprecated. For vector v in v.', use transpose(v) instead. For matrix A in A.', use copy(transpose(A)) instead, unless A.' appears as an argument of *, / or \. In those cases, use transpose(A) instead. 
└ @ nothing none:0
┌ Warning: The postfix .' syntax is deprecated. For vector v in v.', use transpose(v) instead. For matrix A in A.', use copy(transpose(A)) instead, unless A.' appears as an argument of *, / or \. In those cases, use transpose(A) instead. 
└ @ nothing none:0
┌ Warning: The postfix .' syntax is deprecated. For vector v in v.', use transpose(v) instead. For matrix A in A.', use copy(transpose(A)) instead, unless A.' appears as an argument of *, / or \. In those cases, use transpose(A) instead. 
└ @ nothing none:0
┌ Warning: Deprecated syntax `parametric method syntax _ltriang{T1, M, W, N}(p::PolyMatrix{T1, M, Val{W}, N}, iterative::Bool = true, dᵤ::Int = -1)` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/reductions.jl:231.
│ Use `_ltriang(p::PolyMatrix{T1, M, Val{W}, N}, iterative::Bool = true, dᵤ::Int = -1) where {T1, M, W, N}` instead.
└ @ nothing reductions.jl:231
┌ Warning: The postfix .' syntax is deprecated. For vector v in v.', use transpose(v) instead. For matrix A in A.', use copy(transpose(A)) instead, unless A.' appears as an argument of *, / or \. In those cases, use transpose(A) instead. 
└ @ nothing none:0
┌ Warning: The postfix .' syntax is deprecated. For vector v in v.', use transpose(v) instead. For matrix A in A.', use copy(transpose(A)) instead, unless A.' appears as an argument of *, / or \. In those cases, use transpose(A) instead. 
└ @ nothing none:0
┌ Warning: The postfix .' syntax is deprecated. For vector v in v.', use transpose(v) instead. For matrix A in A.', use copy(transpose(A)) instead, unless A.' appears as an argument of *, / or \. In those cases, use transpose(A) instead. 
└ @ nothing none:0
┌ Warning: The postfix .' syntax is deprecated. For vector v in v.', use transpose(v) instead. For matrix A in A.', use copy(transpose(A)) instead, unless A.' appears as an argument of *, / or \. In those cases, use transpose(A) instead. 
└ @ nothing none:0
┌ Warning: Use of final value of loop variable `j` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/reductions.jl:288 is deprecated. In the future the variable will be local to the loop instead.
└ @ nothing reductions.jl:288
┌ Warning: Deprecated syntax `parametric method syntax col_degree{T, M, O, N}(p::PolyMatrix{T, M, O, N})` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/reductions.jl:346.
│ Use `col_degree(p::PolyMatrix{T, M, O, N}) where {T, M, O, N}` instead.
└ @ nothing reductions.jl:346
┌ Warning: Deprecated syntax `parametric method syntax row_degree{T, M, O, N}(p::PolyMatrix{T, M, O, N})` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/reductions.jl:363.
│ Use `row_degree(p::PolyMatrix{T, M, O, N}) where {T, M, O, N}` instead.
└ @ nothing reductions.jl:363
┌ Warning: Deprecated syntax `parametric method syntax high_col_deg_matrix{T, M, O, N}(p::PolyMatrix{T, M, O, N})` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/reductions.jl:381.
│ Use `high_col_deg_matrix(p::PolyMatrix{T, M, O, N}) where {T, M, O, N}` instead.
└ @ nothing reductions.jl:381
┌ Warning: Deprecated syntax `parametric method syntax high_row_deg_matrix{T, M, O, N}(p::PolyMatrix{T, M, O, N})` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/reductions.jl:401.
│ Use `high_row_deg_matrix(p::PolyMatrix{T, M, O, N}) where {T, M, O, N}` instead.
└ @ nothing reductions.jl:401
┌ Warning: Deprecated syntax `parametric method syntax is_col_proper{T, M, O}(p::PolyMatrix{T, M, O, 1})` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/reductions.jl:419.
│ Use `is_col_proper(p::PolyMatrix{T, M, O, 1}) where {T, M, O}` instead.
└ @ nothing reductions.jl:419
┌ Warning: Deprecated syntax `parametric method syntax is_col_proper{T, M, O, N}(p::PolyMatrix{T, M, O, N})` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/reductions.jl:421.
│ Use `is_col_proper(p::PolyMatrix{T, M, O, N}) where {T, M, O, N}` instead.
└ @ nothing reductions.jl:421
┌ Warning: Deprecated syntax `parametric method syntax colred{T, M, W, N}(p::PolyMatrix{T, M, Val{W}, N})` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/reductions.jl:438.
│ Use `colred(p::PolyMatrix{T, M, Val{W}, N}) where {T, M, W, N}` instead.
└ @ nothing reductions.jl:438
┌ Warning: Deprecated syntax `parametric method syntax colred{T, M1, M2, W, N1, N2}(p1::PolyMatrix{T, M1, Val{W}, N1}, p2::PolyMatrix{T, M2, Val{W}, N2})` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/reductions.jl:511.
│ Use `colred(p1::PolyMatrix{T, M1, Val{W}, N1}, p2::PolyMatrix{T, M2, Val{W}, N2}) where {T, M1, M2, W, N1, N2}` instead.
└ @ nothing reductions.jl:511
┌ Warning: Deprecated syntax `parametric method syntax rowred{T, M, W, N}(p::PolyMatrix{T, M, Val{W}, N})` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/reductions.jl:591.
│ Use `rowred(p::PolyMatrix{T, M, Val{W}, N}) where {T, M, W, N}` instead.
└ @ nothing reductions.jl:591
┌ Warning: Deprecated syntax `parametric method syntax rowred{T, M1, M2, W, N1, N2}(p1::PolyMatrix{T, M1, Val{W}, N1}, p2::PolyMatrix{T, M2, Val{W}, N2})` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/reductions.jl:665.
│ Use `rowred(p1::PolyMatrix{T, M1, Val{W}, N1}, p2::PolyMatrix{T, M2, Val{W}, N2}) where {T, M1, M2, W, N1, N2}` instead.
└ @ nothing reductions.jl:665
┌ Warning: Deprecated syntax `parametric method syntax _zerosi{S, G}(b::PolyMatrix{S}, a::PolyMatrix{G}, T)` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/filt.jl:2.
│ Use `_zerosi(b::PolyMatrix{S}, a::PolyMatrix{G}, T) where {S, G}` instead.
└ @ nothing filt.jl:2
┌ Warning: Deprecated syntax `parametric method syntax filt{T, S, M1, M2, W, N, G}(b::PolyMatrix{T, M1, W, N}, a::PolyMatrix{S, M2, W, N}, x::AbstractArray{G}, si = _zerosi(b, a, G))` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/filt.jl:8.
│ Use `filt(b::PolyMatrix{T, M1, W, N}, a::PolyMatrix{S, M2, W, N}, x::AbstractArray{G}, si = _zerosi(b, a, G)) where {T, S, M1, M2, W, N, G}` instead.
└ @ nothing filt.jl:8
┌ Warning: Deprecated syntax `parametric method syntax filt!{H, T, S, M1, M2, W, N, G}(out::AbstractArray{H}, b::PolyMatrix{T, M1, W, N}, a::PolyMatrix{S, M2, W, N}, x::AbstractArray{G}, si = _zerosi(b, a, G))` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/filt.jl:14.
│ Use `filt!(out::AbstractArray{H}, b::PolyMatrix{T, M1, W, N}, a::PolyMatrix{S, M2, W, N}, x::AbstractArray{G}, si = _zerosi(b, a, G)) where {H, T, S, M1, M2, W, N, G}` instead.
└ @ nothing filt.jl:14
┌ Warning: Deprecated syntax `parametric method syntax _filt_iir!{T, S, M1, M2, W, N, G}(out::AbstractArray{T}, b::PolyMatrix{T, M1, W, N}, a::PolyMatrix{T, M2, W, N}, x::AbstractArray{S}, si::AbstractArray{G})` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/filt.jl:59.
│ Use `_filt_iir!(out::AbstractArray{T}, b::PolyMatrix{T, M1, W, N}, a::PolyMatrix{T, M2, W, N}, x::AbstractArray{S}, si::AbstractArray{G}) where {T, S, M1, M2, W, N, G}` instead.
└ @ nothing filt.jl:59
┌ Warning: Deprecated syntax `parametric method syntax _filt_fir!{T, M1, W, N}(out::AbstractMatrix{T}, b::PolyMatrix{T, M1, W, N}, x, si = zeros(T, size(b, 1), degree(b)))` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/filt.jl:77.
│ Use `_filt_fir!(out::AbstractMatrix{T}, b::PolyMatrix{T, M1, W, N}, x, si = zeros(T, size(b, 1), degree(b))) where {T, M1, W, N}` instead.
└ @ nothing filt.jl:77
┌ Warning: Deprecated syntax `parametric method syntax _filt_ar!{T, M1, W, N}(out::AbstractMatrix{T}, a::PolyMatrix{T, M1, W, N}, x::AbstractArray{T}, si = zeros(T, size(a, 1), degree(a)))` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/filt.jl:100.
│ Use `_filt_ar!(out::AbstractMatrix{T}, a::PolyMatrix{T, M1, W, N}, x::AbstractArray{T}, si = zeros(T, size(a, 1), degree(a))) where {T, M1, W, N}` instead.
└ @ nothing filt.jl:100
WARNING: Method definition __init__() in module Requires at /home/vagrant/.julia/v0.7/Requires/src/init.jl:9 overwritten in module RecursiveArrayTools at /home/vagrant/.julia/v0.7/Requires/src/init.jl:9.
WARNING: importing deprecated binding Base.A_ldiv_B! into DiffEqBase.
┌ Warning: Deprecated syntax `parametric method syntax realtype{T}(::Type{T})` around /home/vagrant/.julia/v0.7/DiffEqBase/src/utils.jl:41.
│ Use `realtype(#unused#::Type{T}) where T` instead.
└ @ nothing utils.jl:41
┌ Warning: Deprecated syntax `parametric method syntax realtype{T}(::Type{Complex{T}})` around /home/vagrant/.julia/v0.7/DiffEqBase/src/utils.jl:42.
│ Use `realtype(#unused#::Type{Complex{T}}) where T` instead.
└ @ nothing utils.jl:42
┌ Warning: Deprecated syntax `parametric method syntax check_first_arg{F}(::Type{F}, T::Type)` around /home/vagrant/.julia/v0.7/DiffEqBase/src/extended_functions.jl:20.
│ Use `check_first_arg(#unused#::Type{F}, T::Type) where F` instead.
└ @ nothing extended_functions.jl:20
┌ Warning: Deprecated syntax `parametric method syntax SimpleTraits.trait{F}(::Type{HasJac{F}})` around /home/vagrant/.julia/v0.7/DiffEqBase/src/extended_functions.jl:33.
│ Use `SimpleTraits.trait(#unused#::Type{HasJac{F}}) where F` instead.
└ @ nothing extended_functions.jl:33
┌ Warning: Deprecated syntax `parametric method syntax SimpleTraits.trait{F}(::Type{HastGrad{F}})` around /home/vagrant/.julia/v0.7/DiffEqBase/src/extended_functions.jl:34.
│ Use `SimpleTraits.trait(#unused#::Type{HastGrad{F}}) where F` instead.
└ @ nothing extended_functions.jl:34
┌ Warning: Deprecated syntax `parametric method syntax SimpleTraits.trait{F}(::Type{HasExpJac{F}})` around /home/vagrant/.julia/v0.7/DiffEqBase/src/extended_functions.jl:47.
│ Use `SimpleTraits.trait(#unused#::Type{HasExpJac{F}}) where F` instead.
└ @ nothing extended_functions.jl:47
┌ Warning: Deprecated syntax `parametric method syntax SimpleTraits.trait{F}(::Type{HasInvJac{F}})` around /home/vagrant/.julia/v0.7/DiffEqBase/src/extended_functions.jl:48.
│ Use `SimpleTraits.trait(#unused#::Type{HasInvJac{F}}) where F` instead.
└ @ nothing extended_functions.jl:48
┌ Warning: Deprecated syntax `parametric method syntax SimpleTraits.trait{F}(::Type{HasInvW{F}})` around /home/vagrant/.julia/v0.7/DiffEqBase/src/extended_functions.jl:49.
│ Use `SimpleTraits.trait(#unused#::Type{HasInvW{F}}) where F` instead.
└ @ nothing extended_functions.jl:49
┌ Warning: Deprecated syntax `parametric method syntax SimpleTraits.trait{F}(::Type{HasInvW_t{F}})` around /home/vagrant/.julia/v0.7/DiffEqBase/src/extended_functions.jl:50.
│ Use `SimpleTraits.trait(#unused#::Type{HasInvW_t{F}}) where F` instead.
└ @ nothing extended_functions.jl:50
┌ Warning: Deprecated syntax `parametric method syntax SimpleTraits.trait{F}(::Type{HasHes{F}})` around /home/vagrant/.julia/v0.7/DiffEqBase/src/extended_functions.jl:61.
│ Use `SimpleTraits.trait(#unused#::Type{HasHes{F}}) where F` instead.
└ @ nothing extended_functions.jl:61
┌ Warning: Deprecated syntax `parametric method syntax SimpleTraits.trait{F}(::Type{HasInvHes{F}})` around /home/vagrant/.julia/v0.7/DiffEqBase/src/extended_functions.jl:62.
│ Use `SimpleTraits.trait(#unused#::Type{HasInvHes{F}}) where F` instead.
└ @ nothing extended_functions.jl:62
┌ Warning: Deprecated syntax `parametric method syntax SimpleTraits.trait{F}(::Type{HasParamDeriv{F}})` around /home/vagrant/.julia/v0.7/DiffEqBase/src/extended_functions.jl:71.
│ Use `SimpleTraits.trait(#unused#::Type{HasParamDeriv{F}}) where F` instead.
└ @ nothing extended_functions.jl:71
┌ Warning: Deprecated syntax `parametric method syntax SimpleTraits.trait{F}(::Type{HasParamJac{F}})` around /home/vagrant/.julia/v0.7/DiffEqBase/src/extended_functions.jl:72.
│ Use `SimpleTraits.trait(#unused#::Type{HasParamJac{F}}) where F` instead.
└ @ nothing extended_functions.jl:72
┌ Warning: Deprecated syntax `parametric method syntax SimpleTraits.trait{F}(::Type{HasSyms{F}})` around /home/vagrant/.julia/v0.7/DiffEqBase/src/extended_functions.jl:79.
│ Use `SimpleTraits.trait(#unused#::Type{HasSyms{F}}) where F` instead.
└ @ nothing extended_functions.jl:79
┌ Warning: Deprecated syntax `parametric method syntax SimpleTraits.trait{F}(::Type{HasAnalytic{F}})` around /home/vagrant/.julia/v0.7/DiffEqBase/src/extended_functions.jl:85.
│ Use `SimpleTraits.trait(#unused#::Type{HasAnalytic{F}}) where F` instead.
└ @ nothing extended_functions.jl:85
┌ Warning: Deprecated syntax `(size(ArrayPartition(prob.u0))...)` at /home/vagrant/.julia/v0.7/DiffEqBase/src/solutions/steady_state_solutions.jl:15.
│ Use `(size(ArrayPartition(prob.u0))...,)` instead.
└ @ nothing steady_state_solutions.jl:15
┌ Warning: Deprecated syntax `(size(prob.u0)...)` at /home/vagrant/.julia/v0.7/DiffEqBase/src/solutions/steady_state_solutions.jl:17.
│ Use `(size(prob.u0)...,)` instead.
└ @ nothing steady_state_solutions.jl:17
┌ Warning: Deprecated syntax `(x...)` at /home/vagrant/.julia/v0.7/DiffEqBase/src/solutions/solution_interface.jl:51.
│ Use `(x...,)` instead.
└ @ nothing solution_interface.jl:51
┌ Warning: Deprecated syntax `(plot_vecs...)` at /home/vagrant/.julia/v0.7/DiffEqBase/src/solutions/solution_interface.jl:193.
│ Use `(plot_vecs...,)` instead.
└ @ nothing solution_interface.jl:193
┌ Warning: Deprecated syntax `((I for i = 1:length(f))...)` at /home/vagrant/.julia/v0.7/DiffEqBase/src/problems/ode_problems.jl:15.
│ Use `((I for i = 1:length(f))...,)` instead.
└ @ nothing ode_problems.jl:15
┌ Warning: Deprecated syntax `((I for i = 1:length(f))...)` at /home/vagrant/.julia/v0.7/DiffEqBase/src/problems/sde_problems.jl:19.
│ Use `((I for i = 1:length(f))...,)` instead.
└ @ nothing sde_problems.jl:19
WARNING: importing deprecated binding Base.Void into DiffEqBase.
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/DiffEqBase/src/interpolation.jl:15
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/DiffEqBase/src/callbacks.jl:65
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/DiffEqBase/src/callbacks.jl:68
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/DiffEqBase/src/callbacks.jl:71
┌ Warning: Deprecated syntax `(plot_vecs...)` at /home/vagrant/.julia/v0.7/DiffEqBase/src/integrator_interface.jl:181.
│ Use `(plot_vecs...,)` instead.
└ @ nothing integrator_interface.jl:181
WARNING: Base.expm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/DiffEqBase/src/diffeq_operator.jl:46
WARNING: importing deprecated binding Base.lufact! into DiffEqBase.
WARNING: Base.lufact! is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/DiffEqBase/src/linear_nonlinear.jl:12
WARNING: Base.A_ldiv_B! is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/DiffEqBase/src/data_array.jl:75
WARNING: importing deprecated binding Base.Factorization into DiffEqBase.
WARNING: Base.Factorization is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/DiffEqBase/src/data_array.jl:75
WARNING: Base.A_ldiv_B! is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/DiffEqBase/src/data_array.jl:76
WARNING: Base.Factorization is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/DiffEqBase/src/data_array.jl:76
WARNING: Base.A_ldiv_B! is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/DiffEqBase/src/data_array.jl:77
WARNING: Base.Factorization is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/DiffEqBase/src/data_array.jl:77
┌ Warning: `current_module()` is deprecated, use `@__MODULE__` instead.
│   caller = @require(::LineNumberNode, ::Module, ::Any, ::Any) at require.jl:51
└ @ Requires require.jl:51
┌ Warning: `isdefined(:symbol)` is deprecated, use `@isdefined symbol` instead
│   caller = ip:0x0
└ @ Core :-1
WARNING: Method definition __init__() in module RecursiveArrayTools at /home/vagrant/.julia/v0.7/Requires/src/init.jl:9 overwritten in module DiffEqBase at /home/vagrant/.julia/v0.7/Requires/src/init.jl:9.
WARNING: Method definition __init__() in module Requires at /home/vagrant/.julia/v0.7/Requires/src/init.jl:9 overwritten in module RecursiveArrayTools at /home/vagrant/.julia/v0.7/Requires/src/init.jl:9.
WARNING: Method definition __init__() in module RecursiveArrayTools at /home/vagrant/.julia/v0.7/Requires/src/init.jl:9 overwritten in module DiffEqBase at /home/vagrant/.julia/v0.7/Requires/src/init.jl:9.
WARNING: Method definition __init__() in module Requires at /home/vagrant/.julia/v0.7/Requires/src/init.jl:9 overwritten in module RecursiveArrayTools at /home/vagrant/.julia/v0.7/Requires/src/init.jl:9.
WARNING: Method definition __init__() in module RecursiveArrayTools at /home/vagrant/.julia/v0.7/Requires/src/init.jl:9 overwritten in module DiffEqBase at /home/vagrant/.julia/v0.7/Requires/src/init.jl:9.
WARNING: importing deprecated binding Base.gradient into NLSolversBase.
WARNING: Base.gradient is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/NLSolversBase/src/interface.jl:60
WARNING: Base.gradient is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/NLSolversBase/src/interface.jl:60
WARNING: Base.gradient is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/NLSolversBase/src/interface.jl:61
WARNING: Base.gradient is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/NLSolversBase/src/interface.jl:61
WARNING: importing deprecated binding Base.clear! into LineSearches.
WARNING: Base.clear! is deprecated: it has been moved to the standard library package `Distributed`.
Add a `using Distributed` to your imports..
  likely near /home/vagrant/.julia/v0.7/LineSearches/src/types.jl:20
WARNING: Base.clear! is deprecated: it has been moved to the standard library package `Distributed`.
Add a `using Distributed` to your imports..
  likely near /home/vagrant/.julia/v0.7/LineSearches/src/types.jl:20
WARNING: importing deprecated binding Base.Associative into LineSearches.
WARNING: Base.Associative is deprecated, use AbstractDict instead.
  likely near /home/vagrant/.julia/v0.7/LineSearches/src/backtracking.jl:446
WARNING: Base.Associative is deprecated, use AbstractDict instead.
  likely near /home/vagrant/.julia/v0.7/LineSearches/src/strongwolfe.jl:446
WARNING: Base.Associative is deprecated, use AbstractDict instead.
  likely near /home/vagrant/.julia/v0.7/LineSearches/src/morethuente.jl:446
WARNING: Base.Associative is deprecated, use AbstractDict instead.
  likely near /home/vagrant/.julia/v0.7/LineSearches/src/hagerzhang.jl:446
WARNING: importing deprecated binding Base.@sprintf into LineSearches.
WARNING: Base.@sprintf is deprecated: it has been moved to the standard library package `Printf`.
Add a `using Printf` to your imports..
  likely near /home/vagrant/.julia/v0.7/LineSearches/src/hagerzhang.jl:319
WARNING: Base.Associative is deprecated, use AbstractDict instead.
  likely near /home/vagrant/.julia/v0.7/LineSearches/src/hagerzhang.jl:446
WARNING: Base.Associative is deprecated, use AbstractDict instead.
  likely near /home/vagrant/.julia/v0.7/LineSearches/src/static.jl:446
WARNING: Base.Associative is deprecated, use AbstractDict instead.
  likely near /home/vagrant/.julia/v0.7/LineSearches/src/initialguess.jl:446
WARNING: Base.Associative is deprecated, use AbstractDict instead.
  likely near /home/vagrant/.julia/v0.7/LineSearches/src/initialguess.jl:446
WARNING: Base.Associative is deprecated, use AbstractDict instead.
  likely near /home/vagrant/.julia/v0.7/LineSearches/src/initialguess.jl:446
WARNING: Base.Associative is deprecated, use AbstractDict instead.
  likely near /home/vagrant/.julia/v0.7/LineSearches/src/initialguess.jl:446
WARNING: importing deprecated binding Base.SparseMatrixCSC into NLsolve.
WARNING: Base.SparseMatrixCSC is deprecated, run `using SparseArrays` to load sparse array functionality.
  likely near /home/vagrant/.julia/v0.7/NLsolve/src/differentiable_functions.jl:105
WARNING: Base.SparseMatrixCSC is deprecated, run `using SparseArrays` to load sparse array functionality.
  likely near /home/vagrant/.julia/v0.7/NLsolve/src/differentiable_functions.jl:113
WARNING: Base.SparseMatrixCSC is deprecated, run `using SparseArrays` to load sparse array functionality.
  likely near /home/vagrant/.julia/v0.7/NLsolve/src/differentiable_functions.jl:113
WARNING: Base.SparseMatrixCSC is deprecated, run `using SparseArrays` to load sparse array functionality.
  likely near /home/vagrant/.julia/v0.7/NLsolve/src/differentiable_functions.jl:122
WARNING: Base.SparseMatrixCSC is deprecated, run `using SparseArrays` to load sparse array functionality.
  likely near /home/vagrant/.julia/v0.7/NLsolve/src/differentiable_functions.jl:130
WARNING: Base.SparseMatrixCSC is deprecated, run `using SparseArrays` to load sparse array functionality.
  likely near /home/vagrant/.julia/v0.7/NLsolve/src/differentiable_functions.jl:130
WARNING: Base.SparseMatrixCSC is deprecated, run `using SparseArrays` to load sparse array functionality.
  likely near /home/vagrant/.julia/v0.7/NLsolve/src/differentiable_functions.jl:139
┌ Warning: Deprecated syntax `parametric method syntax SolverState{T <: Real}(i::Integer, fnorm::T, stepnorm::T)` around /home/vagrant/.julia/v0.7/NLsolve/src/solver_state_results.jl:13.
│ Use `SolverState(i::Integer, fnorm::T, stepnorm::T) where T <: Real` instead.
└ @ nothing solver_state_results.jl:13
WARNING: importing deprecated binding Base.@printf into NLsolve.
WARNING: Base.@printf is deprecated: it has been moved to the standard library package `Printf`.
Add a `using Printf` to your imports..
  likely near /home/vagrant/.julia/v0.7/NLsolve/src/solver_state_results.jl:22
WARNING: Base.@printf is deprecated: it has been moved to the standard library package `Printf`.
Add a `using Printf` to your imports..
  likely near /home/vagrant/.julia/v0.7/NLsolve/src/solver_state_results.jl:22
WARNING: Base.@printf is deprecated: it has been moved to the standard library package `Printf`.
Add a `using Printf` to your imports..
  likely near /home/vagrant/.julia/v0.7/NLsolve/src/solver_state_results.jl:42
WARNING: Base.@printf is deprecated: it has been moved to the standard library package `Printf`.
Add a `using Printf` to your imports..
  likely near /home/vagrant/.julia/v0.7/NLsolve/src/solver_state_results.jl:42
WARNING: Base.@printf is deprecated: it has been moved to the standard library package `Printf`.
Add a `using Printf` to your imports..
  likely near /home/vagrant/.julia/v0.7/NLsolve/src/solver_state_results.jl:87
WARNING: Base.@printf is deprecated: it has been moved to the standard library package `Printf`.
Add a `using Printf` to your imports..
  likely near /home/vagrant/.julia/v0.7/NLsolve/src/solver_state_results.jl:87
WARNING: Base.@printf is deprecated: it has been moved to the standard library package `Printf`.
Add a `using Printf` to your imports..
  likely near /home/vagrant/.julia/v0.7/NLsolve/src/solver_state_results.jl:87
WARNING: Base.@printf is deprecated: it has been moved to the standard library package `Printf`.
Add a `using Printf` to your imports..
  likely near /home/vagrant/.julia/v0.7/NLsolve/src/solver_state_results.jl:87
WARNING: Base.@printf is deprecated: it has been moved to the standard library package `Printf`.
Add a `using Printf` to your imports..
  likely near /home/vagrant/.julia/v0.7/NLsolve/src/solver_state_results.jl:87
WARNING: Base.@printf is deprecated: it has been moved to the standard library package `Printf`.
Add a `using Printf` to your imports..
  likely near /home/vagrant/.julia/v0.7/NLsolve/src/solver_state_results.jl:87
WARNING: Base.@printf is deprecated: it has been moved to the standard library package `Printf`.
Add a `using Printf` to your imports..
  likely near /home/vagrant/.julia/v0.7/NLsolve/src/solver_state_results.jl:87
WARNING: Base.@printf is deprecated: it has been moved to the standard library package `Printf`.
Add a `using Printf` to your imports..
  likely near /home/vagrant/.julia/v0.7/NLsolve/src/solver_state_results.jl:87
WARNING: Base.@printf is deprecated: it has been moved to the standard library package `Printf`.
Add a `using Printf` to your imports..
  likely near /home/vagrant/.julia/v0.7/NLsolve/src/solver_state_results.jl:87
WARNING: Base.@printf is deprecated: it has been moved to the standard library package `Printf`.
Add a `using Printf` to your imports..
  likely near /home/vagrant/.julia/v0.7/NLsolve/src/solver_state_results.jl:87
WARNING: Base.@printf is deprecated: it has been moved to the standard library package `Printf`.
Add a `using Printf` to your imports..
  likely near /home/vagrant/.julia/v0.7/NLsolve/src/solver_state_results.jl:87
WARNING: Base.@printf is deprecated: it has been moved to the standard library package `Printf`.
Add a `using Printf` to your imports..
  likely near /home/vagrant/.julia/v0.7/NLsolve/src/nlsolve_func_defs.jl:1
WARNING: Base.@printf is deprecated: it has been moved to the standard library package `Printf`.
Add a `using Printf` to your imports..
  likely near /home/vagrant/.julia/v0.7/NLsolve/src/nlsolve_func_defs.jl:1
┌ Warning: Deprecated syntax `parametric method syntax nlsolve{T}(df::AbstractDifferentiableMultivariateFunction, initial_x::AbstractArray{T}; method::Symbol = :trust_region, xtol::Real = zero(T), ftol::Real = convert(T, 1e-08), iterations::Integer = 1000, store_trace::Bool = false, show_trace::Bool = false, extended_trace::Bool = false, linesearch! = no_linesearch!, factor::Real = one(T), autoscale::Bool = true, m::Integer = 0, beta::Real = 1)` around /home/vagrant/.julia/v0.7/NLsolve/src/nlsolve_func_defs.jl:15.
│ Use `nlsolve(df::AbstractDifferentiableMultivariateFunction, initial_x::AbstractArray{T}; method::Symbol = :trust_region, xtol::Real = zero(T), ftol::Real = convert(T, 1e-08), iterations::Integer = 1000, store_trace::Bool = false, show_trace::Bool = false, extended_trace::Bool = false, linesearch! = no_linesearch!, factor::Real = one(T), autoscale::Bool = true, m::Integer = 0, beta::Real = 1) where T` instead.
└ @ nothing nlsolve_func_defs.jl:15
┌ Warning: Deprecated syntax `parametric method syntax nlsolve{T}(f!, g!, initial_x::AbstractArray{T}; method::Symbol = :trust_region, xtol::Real = zero(T), ftol::Real = convert(T, 1e-08), iterations::Integer = 1000, store_trace::Bool = false, show_trace::Bool = false, extended_trace::Bool = false, linesearch! = no_linesearch!, factor::Real = one(T), autoscale::Bool = true, m::Integer = 0, beta::Real = 1.0)` around /home/vagrant/.julia/v0.7/NLsolve/src/nlsolve_func_defs.jl:52.
│ Use `nlsolve(f!, g!, initial_x::AbstractArray{T}; method::Symbol = :trust_region, xtol::Real = zero(T), ftol::Real = convert(T, 1e-08), iterations::Integer = 1000, store_trace::Bool = false, show_trace::Bool = false, extended_trace::Bool = false, linesearch! = no_linesearch!, factor::Real = one(T), autoscale::Bool = true, m::Integer = 0, beta::Real = 1.0) where T` instead.
└ @ nothing nlsolve_func_defs.jl:52
┌ Warning: Deprecated syntax `parametric method syntax nlsolve{T}(f!, initial_x::AbstractArray{T}; method::Symbol = :trust_region, xtol::Real = zero(T), ftol::Real = convert(T, 1e-08), iterations::Integer = 1000, store_trace::Bool = false, show_trace::Bool = false, extended_trace::Bool = false, linesearch! = no_linesearch!, factor::Real = one(T), autoscale::Bool = true, m::Integer = 0, beta::Real = 1.0, autodiff::Bool = false)` around /home/vagrant/.julia/v0.7/NLsolve/src/nlsolve_func_defs.jl:75.
│ Use `nlsolve(f!, initial_x::AbstractArray{T}; method::Symbol = :trust_region, xtol::Real = zero(T), ftol::Real = convert(T, 1e-08), iterations::Integer = 1000, store_trace::Bool = false, show_trace::Bool = false, extended_trace::Bool = false, linesearch! = no_linesearch!, factor::Real = one(T), autoscale::Bool = true, m::Integer = 0, beta::Real = 1.0, autodiff::Bool = false) where T` instead.
└ @ nothing nlsolve_func_defs.jl:75
┌ Warning: Deprecated syntax `parametric method syntax mcpsolve{T}(df::AbstractDifferentiableMultivariateFunction, lower::Vector, upper::Vector, initial_x::AbstractArray{T}; method::Symbol = :trust_region, reformulation::Symbol = :smooth, xtol::Real = zero(T), ftol::Real = convert(T, 1e-08), iterations::Integer = 1000, store_trace::Bool = false, show_trace::Bool = false, extended_trace::Bool = false, linesearch! = LineSearches.BackTracking(), factor::Real = one(T), autoscale::Bool = true)` around /home/vagrant/.julia/v0.7/NLsolve/src/mcp_func_defs.jl:30.
│ Use `mcpsolve(df::AbstractDifferentiableMultivariateFunction, lower::Vector, upper::Vector, initial_x::AbstractArray{T}; method::Symbol = :trust_region, reformulation::Symbol = :smooth, xtol::Real = zero(T), ftol::Real = convert(T, 1e-08), iterations::Integer = 1000, store_trace::Bool = false, show_trace::Bool = false, extended_trace::Bool = false, linesearch! = LineSearches.BackTracking(), factor::Real = one(T), autoscale::Bool = true) where T` instead.
└ @ nothing mcp_func_defs.jl:30
┌ Warning: Deprecated syntax `parametric method syntax mcpsolve{T}(f!, g!, lower::Vector, upper::Vector, initial_x::AbstractArray{T}; method::Symbol = :trust_region, reformulation::Symbol = :smooth, xtol::Real = zero(T), ftol::Real = convert(T, 1e-08), iterations::Integer = 1000, store_trace::Bool = false, show_trace::Bool = false, extended_trace::Bool = false, linesearch! = LineSearches.BackTracking(), factor::Real = one(T), autoscale::Bool = true)` around /home/vagrant/.julia/v0.7/NLsolve/src/mcp_func_defs.jl:54.
│ Use `mcpsolve(f!, g!, lower::Vector, upper::Vector, initial_x::AbstractArray{T}; method::Symbol = :trust_region, reformulation::Symbol = :smooth, xtol::Real = zero(T), ftol::Real = convert(T, 1e-08), iterations::Integer = 1000, store_trace::Bool = false, show_trace::Bool = false, extended_trace::Bool = false, linesearch! = LineSearches.BackTracking(), factor::Real = one(T), autoscale::Bool = true) where T` instead.
└ @ nothing mcp_func_defs.jl:54
┌ Warning: Deprecated syntax `parametric method syntax mcpsolve{T}(f!, lower::Vector, upper::Vector, initial_x::AbstractArray{T}; method::Symbol = :trust_region, reformulation::Symbol = :smooth, xtol::Real = zero(T), ftol::Real = convert(T, 1e-08), iterations::Integer = 1000, store_trace::Bool = false, show_trace::Bool = false, extended_trace::Bool = false, linesearch! = LineSearches.BackTracking(), factor::Real = one(T), autoscale::Bool = true, autodiff::Bool = false)` around /home/vagrant/.julia/v0.7/NLsolve/src/mcp_func_defs.jl:78.
│ Use `mcpsolve(f!, lower::Vector, upper::Vector, initial_x::AbstractArray{T}; method::Symbol = :trust_region, reformulation::Symbol = :smooth, xtol::Real = zero(T), ftol::Real = convert(T, 1e-08), iterations::Integer = 1000, store_trace::Bool = false, show_trace::Bool = false, extended_trace::Bool = false, linesearch! = LineSearches.BackTracking(), factor::Real = one(T), autoscale::Bool = true, autodiff::Bool = false) where T` instead.
└ @ nothing mcp_func_defs.jl:78
┌ Warning: Deprecated syntax `parametric method syntax wdot{T}(wx::AbstractVector{T}, x::AbstractVector{T}, wy::AbstractVector{T}, y::AbstractVector{T})` around /home/vagrant/.julia/v0.7/NLsolve/src/utils.jl:3.
│ Use `wdot(wx::AbstractVector{T}, x::AbstractVector{T}, wy::AbstractVector{T}, y::AbstractVector{T}) where T` instead.
└ @ nothing utils.jl:3
┌ Warning: Deprecated syntax `parametric method syntax wnorm{T}(w::AbstractVector{T}, x::AbstractVector{T})` around /home/vagrant/.julia/v0.7/NLsolve/src/utils.jl:10.
│ Use `wnorm(w::AbstractVector{T}, x::AbstractVector{T}) where T` instead.
└ @ nothing utils.jl:10
WARNING: Base.SparseMatrixCSC is deprecated, run `using SparseArrays` to load sparse array functionality.
  likely near /home/vagrant/.julia/v0.7/NLsolve/src/utils.jl:117
WARNING: Base.SparseMatrixCSC is deprecated, run `using SparseArrays` to load sparse array functionality.
  likely near /home/vagrant/.julia/v0.7/NLsolve/src/utils.jl:129
┌ Warning: Deprecated syntax `parametric method syntax newton_{T}(df::AbstractDifferentiableMultivariateFunction, initial_x::AbstractArray{T}, xtol::T, ftol::T, iterations::Integer, store_trace::Bool, show_trace::Bool, extended_trace::Bool, linesearch!)` around /home/vagrant/.julia/v0.7/NLsolve/src/newton.jl:39.
│ Use `newton_(df::AbstractDifferentiableMultivariateFunction, initial_x::AbstractArray{T}, xtol::T, ftol::T, iterations::Integer, store_trace::Bool, show_trace::Bool, extended_trace::Bool, linesearch!) where T` instead.
└ @ nothing newton.jl:39
┌ Warning: Deprecated syntax `parametric method syntax newton{T}(df::AbstractDifferentiableMultivariateFunction, initial_x::AbstractArray{T}, xtol::Real, ftol::Real, iterations::Integer, store_trace::Bool, show_trace::Bool, extended_trace::Bool, linesearch!)` around /home/vagrant/.julia/v0.7/NLsolve/src/newton.jl:159.
│ Use `newton(df::AbstractDifferentiableMultivariateFunction, initial_x::AbstractArray{T}, xtol::Real, ftol::Real, iterations::Integer, store_trace::Bool, show_trace::Bool, extended_trace::Bool, linesearch!) where T` instead.
└ @ nothing newton.jl:159
┌ Warning: Deprecated syntax `1./` at /home/vagrant/.julia/v0.7/NLsolve/src/trust_region.jl:33.
│ Use `1 ./` instead.
└ @ nothing trust_region.jl:33
┌ Warning: Deprecated syntax `parametric method syntax dogleg!{T}(p::AbstractVector{T}, r::AbstractVector{T}, d::AbstractVector{T}, J::AbstractMatrix{T}, delta::Real)` around /home/vagrant/.julia/v0.7/NLsolve/src/trust_region.jl:25.
│ Use `dogleg!(p::AbstractVector{T}, r::AbstractVector{T}, d::AbstractVector{T}, J::AbstractMatrix{T}, delta::Real) where T` instead.
└ @ nothing trust_region.jl:25
┌ Warning: Deprecated syntax `parametric method syntax trust_region_{T}(df::AbstractDifferentiableMultivariateFunction, initial_x::AbstractArray{T}, xtol::T, ftol::T, iterations::Integer, store_trace::Bool, show_trace::Bool, extended_trace::Bool, factor::T, autoscale::Bool)` around /home/vagrant/.julia/v0.7/NLsolve/src/trust_region.jl:93.
│ Use `trust_region_(df::AbstractDifferentiableMultivariateFunction, initial_x::AbstractArray{T}, xtol::T, ftol::T, iterations::Integer, store_trace::Bool, show_trace::Bool, extended_trace::Bool, factor::T, autoscale::Bool) where T` instead.
└ @ nothing trust_region.jl:93
┌ Warning: Deprecated syntax `parametric method syntax trust_region{T}(df::AbstractDifferentiableMultivariateFunction, initial_x::AbstractArray{T}, xtol::Real, ftol::Real, iterations::Integer, store_trace::Bool, show_trace::Bool, extended_trace::Bool, factor::Real, autoscale::Bool)` around /home/vagrant/.julia/v0.7/NLsolve/src/trust_region.jl:207.
│ Use `trust_region(df::AbstractDifferentiableMultivariateFunction, initial_x::AbstractArray{T}, xtol::Real, ftol::Real, iterations::Integer, store_trace::Bool, show_trace::Bool, extended_trace::Bool, factor::Real, autoscale::Bool) where T` instead.
└ @ nothing trust_region.jl:207
┌ Warning: Deprecated syntax `parametric method syntax anderson_{T}(df::AbstractDifferentiableMultivariateFunction, x0::AbstractArray{T}, xtol::T, ftol::T, iterations::Integer, store_trace::Bool, show_trace::Bool, extended_trace::Bool, m::Integer, β::Real)` around /home/vagrant/.julia/v0.7/NLsolve/src/anderson.jl:15.
│ Use `anderson_(df::AbstractDifferentiableMultivariateFunction, x0::AbstractArray{T}, xtol::T, ftol::T, iterations::Integer, store_trace::Bool, show_trace::Bool, extended_trace::Bool, m::Integer, β::Real) where T` instead.
└ @ nothing anderson.jl:15
┌ Warning: Use of final value of loop variable `n` around /home/vagrant/.julia/v0.7/NLsolve/src/anderson.jl:81 is deprecated. In the future the variable will be local to the loop instead.
└ @ nothing anderson.jl:81
┌ Warning: Deprecated syntax `parametric method syntax anderson{T}(df::AbstractDifferentiableMultivariateFunction, initial_x::AbstractArray{T}, xtol::Real, ftol::Real, iterations::Integer, store_trace::Bool, show_trace::Bool, extended_trace::Bool, m::Integer, beta::Real)` around /home/vagrant/.julia/v0.7/NLsolve/src/anderson.jl:97.
│ Use `anderson(df::AbstractDifferentiableMultivariateFunction, initial_x::AbstractArray{T}, xtol::Real, ftol::Real, iterations::Integer, store_trace::Bool, show_trace::Bool, extended_trace::Bool, m::Integer, beta::Real) where T` instead.
└ @ nothing anderson.jl:97
┌ Warning: Deprecated syntax ``const` declaration on local variable` around /home/vagrant/.julia/v0.7/Roots/src/bracketing.jl:532.
└ @ nothing bracketing.jl:532
WARNING: importing deprecated binding Base.Void into DiffEqDiffTools.
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/DiffEqDiffTools/src/derivatives.jl:5
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/DiffEqDiffTools/src/derivatives.jl:5
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/DiffEqDiffTools/src/derivatives.jl:5
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/DiffEqDiffTools/src/derivatives.jl:5
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/DiffEqDiffTools/src/derivatives.jl:5
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/DiffEqDiffTools/src/derivatives.jl:13
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/DiffEqDiffTools/src/derivatives.jl:13
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/DiffEqDiffTools/src/derivatives.jl:13
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/DiffEqDiffTools/src/derivatives.jl:13
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/DiffEqDiffTools/src/derivatives.jl:13
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/DiffEqDiffTools/src/derivatives.jl:178
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/DiffEqDiffTools/src/derivatives.jl:195
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/DiffEqDiffTools/src/derivatives.jl:199
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/DiffEqDiffTools/src/derivatives.jl:203
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/DiffEqDiffTools/src/derivatives.jl:207
┌ Warning: Deprecated syntax `immutable` at /home/vagrant/.julia/v0.7/OrdinaryDiffEq/src/misc_utils.jl:3.
│ Use `struct` instead.
└ @ nothing misc_utils.jl:3
┌ Warning: Deprecated syntax `immutable` at /home/vagrant/.julia/v0.7/OrdinaryDiffEq/src/misc_utils.jl:52.
│ Use `struct` instead.
└ @ nothing misc_utils.jl:52
┌ Warning: Deprecated syntax `parametric method syntax DiffCache{chunk_size}(T, size, ::Type{Val{chunk_size}})` around /home/vagrant/.julia/v0.7/OrdinaryDiffEq/src/misc_utils.jl:9.
│ Use `DiffCache(T, size, #unused#::Type{Val{chunk_size}}) where chunk_size` instead.
└ @ nothing misc_utils.jl:9
┌ Warning: Deprecated syntax `parametric method syntax DiffCache{CS}(u::AbstractArray, T::Type{Val{CS}})` around /home/vagrant/.julia/v0.7/OrdinaryDiffEq/src/misc_utils.jl:14.
│ Use `DiffCache(u::AbstractArray, T::Type{Val{CS}}) where CS` instead.
└ @ nothing misc_utils.jl:14
┌ Warning: Deprecated syntax `parametric method syntax get_du{T <: Dual}(dc::DiffCache, ::Type{T})` around /home/vagrant/.julia/v0.7/OrdinaryDiffEq/src/misc_utils.jl:16.
│ Use `get_du(dc::DiffCache, #unused#::Type{T}) where T <: Dual` instead.
└ @ nothing misc_utils.jl:16
┌ Warning: Deprecated syntax `parametric method syntax autodiff_setup{CS}(f!, initial_x, chunk_size::Type{Val{CS}})` around /home/vagrant/.julia/v0.7/OrdinaryDiffEq/src/misc_utils.jl:31.
│ Use `autodiff_setup(f!, initial_x, chunk_size::Type{Val{CS}}) where CS` instead.
└ @ nothing misc_utils.jl:31
┌ Warning: Deprecated syntax `parametric method syntax (p::NLSOLVEJL_SETUP{CS, AD}){CS, AD}(::Type{Val{:init}}, f, u0_prototype)` around /home/vagrant/.julia/v0.7/OrdinaryDiffEq/src/misc_utils.jl:56.
│ Use `(p::NLSOLVEJL_SETUP{CS, AD})(#unused#::Type{Val{:init}}, f, u0_prototype) where {CS, AD}` instead.
└ @ nothing misc_utils.jl:56
┌ Warning: Deprecated syntax `parametric method syntax get_chunksize{CS, AD}(x::NLSOLVEJL_SETUP{CS, AD})` around /home/vagrant/.julia/v0.7/OrdinaryDiffEq/src/misc_utils.jl:64.
│ Use `get_chunksize(x::NLSOLVEJL_SETUP{CS, AD}) where {CS, AD}` instead.
└ @ nothing misc_utils.jl:64
ERROR: LoadError: LoadError: syntax: invalid escape sequence
Stacktrace:
 [1] include at ./boot.jl:292 [inlined]
 [2] include_relative(::Module, ::String) at ./loading.jl:1012
 [3] include at ./sysimg.jl:26 [inlined]
 [4] include(::String) at /home/vagrant/.julia/v0.7/OrdinaryDiffEq/src/OrdinaryDiffEq.jl:3
 [5] top-level scope
 [6] include at ./boot.jl:292 [inlined]
 [7] include_relative(::Module, ::String) at ./loading.jl:1012
 [8] include(::Module, ::String) at ./sysimg.jl:26
 [9] top-level scope
 [10] eval at ./boot.jl:295 [inlined]
 [11] top-level scope at ./<missing>:3
in expression starting at /home/vagrant/.julia/v0.7/OrdinaryDiffEq/src/misc_utils.jl:74
in expression starting at /home/vagrant/.julia/v0.7/OrdinaryDiffEq/src/OrdinaryDiffEq.jl:45
ERROR: LoadError: Failed to precompile OrdinaryDiffEq to /home/vagrant/.julia/lib/v0.7/OrdinaryDiffEq.ji.
Stacktrace:
 [1] error at ./error.jl:33 [inlined]
 [2] compilecache(::Base.PkgId) at ./loading.jl:1157
 [3] _require(::Base.PkgId) at ./loading.jl:920
 [4] require(::Module, ::Symbol) at ./loading.jl:820
 [5] include at ./boot.jl:292 [inlined]
 [6] include_relative(::Module, ::String) at ./loading.jl:1012
 [7] include(::Module, ::String) at ./sysimg.jl:26
 [8] top-level scope
 [9] eval at ./boot.jl:295 [inlined]
 [10] top-level scope at ./<missing>:3
in expression starting at /home/vagrant/.julia/v0.7/LTISystems/src/LTISystems.jl:9
ERROR: LoadError: Failed to precompile LTISystems to /home/vagrant/.julia/lib/v0.7/LTISystems.ji.
Stacktrace:
 [1] error at ./error.jl:33 [inlined]
 [2] compilecache(::Base.PkgId) at ./loading.jl:1157
 [3] _require(::Base.PkgId) at ./loading.jl:949
 [4] require(::Module, ::Symbol) at ./loading.jl:820
 [5] include at ./boot.jl:292 [inlined]
 [6] include_relative(::Module, ::String) at ./loading.jl:1012
 [7] include(::Module, ::String) at ./sysimg.jl:26
 [8] exec_options(::Base.JLOptions) at ./client.jl:332
 [9] _start() at ./client.jl:447
in expression starting at /home/vagrant/.julia/v0.7/LTISystems/test/runtests.jl:5
┌ Error: ------------------------------------------------------------
│ # Testing failed for LTISystems
│   exception =
│    failed process: Process(`/home/vagrant/julia/bin/julia -Cnative -J/home/vagrant/julia/lib/julia/sys.so --compile=yes --depwarn=yes --code-coverage=none --color=no --compiled-modules=yes --check-bounds=yes --warn-overwrite=yes --startup-file=yes /home/vagrant/.julia/v0.7/LTISystems/test/runtests.jl`, ProcessExited(1)) [1]
│    Stacktrace:
│     [1] error(::String, ::Base.Process, ::String, ::Int64, ::String) at ./error.jl:42
│     [2] pipeline_error(::Base.Process) at ./process.jl:698
│     [3] run(::Cmd) at ./process.jl:660
│     [4] (::getfield(Pkg.Entry, Symbol("##89#92")){Bool,String,Array{AbstractString,1}})() at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Pkg/src/entry.jl:731
│     [5] cd(::getfield(Pkg.Entry, Symbol("##89#92")){Bool,String,Array{AbstractString,1}}, ::String) at ./file.jl:70
│     [6] #test!#88(::Bool, ::Function, ::String, ::Array{AbstractString,1}, ::Array{AbstractString,1}, ::Array{AbstractString,1}) at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Pkg/src/entry.jl:719
│     [7] (::getfield(Pkg.Entry, Symbol("#kw##test!")))(::NamedTuple{(:coverage,),Tuple{Bool}}, ::typeof(Pkg.Entry.test!), ::String, ::Array{AbstractString,1}, ::Array{AbstractString,1}, ::Array{AbstractString,1}) at ./<missing>:0
│     [8] #test#96(::Bool, ::Function, ::Array{AbstractString,1}) at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Pkg/src/entry.jl:758
│     [9] (::getfield(Pkg.Entry, Symbol("#kw##test")))(::NamedTuple{(:coverage,),Tuple{Bool}}, ::typeof(Pkg.Entry.test), ::Array{AbstractString,1}) at ./<missing>:0
│     [10] (::getfield(Pkg.Dir, Symbol("##4#7")){Base.Iterators.IndexValue{Symbol,Bool,Tuple{Symbol},NamedTuple{(:coverage,),Tuple{Bool}}},typeof(Pkg.Entry.test),Tuple{Array{AbstractString,1}}})() at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Pkg/src/dir.jl:36
│     [11] cd(::getfield(Pkg.Dir, Symbol("##4#7")){Base.Iterators.IndexValue{Symbol,Bool,Tuple{Symbol},NamedTuple{(:coverage,),Tuple{Bool}}},typeof(Pkg.Entry.test),Tuple{Array{AbstractString,1}}}, ::String) at ./file.jl:70
│     [12] #cd#1(::Base.Iterators.IndexValue{Symbol,Bool,Tuple{Symbol},NamedTuple{(:coverage,),Tuple{Bool}}}, ::Function, ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N} where N) at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Pkg/src/dir.jl:36
│     [13] (::getfield(Pkg.Dir, Symbol("#kw##cd")))(::NamedTuple{(:coverage,),Tuple{Bool}}, ::typeof(Pkg.Dir.cd), ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N} where N) at ./<missing>:0
│     [14] #test#3(::Bool, ::Function, ::String, ::Vararg{String,N} where N) at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Pkg/src/Pkg.jl:275
│     [15] test(::String, ::Vararg{String,N} where N) at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Pkg/src/Pkg.jl:275
│     [16] top-level scope
│     [17] eval at ./boot.jl:295 [inlined]
│     [18] eval(::Module, ::Expr) at ./sysimg.jl:71
│     [19] exec_options(::Base.JLOptions) at ./client.jl:309
│     [20] _start() at ./client.jl:447
└ @ Pkg.Entry entry.jl:734
[ Info: No packages to install, update or remove
ERROR: LTISystems had test errors

>>> End of log
