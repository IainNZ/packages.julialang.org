>>> 'Pkg.add("DiffEqBiological")' log
INFO: Installing DataStructures v0.6.1
INFO: Installing DiffEqBase v1.9.0
INFO: Installing DiffEqBiological v0.3.0
INFO: Installing DiffEqJump v0.4.0
INFO: Installing Hiccup v0.1.1
INFO: Installing Juno v0.2.7
INFO: Installing MacroTools v0.3.7
INFO: Installing Media v0.2.7
INFO: Installing Ranges v0.0.1
INFO: Installing RecipesBase v0.1.0
INFO: Installing RecursiveArrayTools v0.8.0
INFO: Installing SimpleTraits v0.5.1
INFO: Installing StaticArrays v0.3.1
INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of DiffEqBiological
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("DiffEqBiological")' log
Julia Version 0.5.2
Commit f4c6c9d (2017-05-06 16:34 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-135-generic #184-Ubuntu SMP Wed Oct 18 11:55:51 UTC 2017 x86_64 x86_64
Memory: 2.93927001953125 GB (1752.578125 MB free)
Uptime: 30799.0 sec
Load Avg:  1.037109375  1.060546875  1.06494140625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz    1948315 s         59 s     148476 s     635412 s         21 s
#2  3499 MHz     735769 s         89 s      81216 s    2193124 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.7.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.5
2 required packages:
 - DiffEqBiological              0.3.0
 - JSON                          0.14.0
13 additional packages:
 - Compat                        0.42.0
 - DataStructures                0.6.1
 - DiffEqBase                    1.9.0
 - DiffEqJump                    0.4.0
 - Hiccup                        0.1.1
 - Juno                          0.2.7
 - MacroTools                    0.3.7
 - Media                         0.2.7
 - Ranges                        0.0.1
 - RecipesBase                   0.1.0
 - RecursiveArrayTools           0.8.0
 - SimpleTraits                  0.5.1
 - StaticArrays                  0.3.1
INFO: Computing test dependencies for DiffEqBiological...
INFO: Installing Calculus v0.2.2
INFO: Installing DiffBase v0.1.0
INFO: Installing DiffEqDiffTools v0.0.1
INFO: Installing DiffEqNoiseProcess v0.2.0
INFO: Installing Distances v0.4.1
INFO: Installing ForwardDiff v0.4.2
INFO: Installing GenericSVD v0.1.0
INFO: Installing Iterators v0.3.1
INFO: Installing LineSearches v0.1.5
INFO: Installing NLSolversBase v2.1.3
INFO: Installing NLsolve v0.9.1
INFO: Installing NaNMath v0.2.6
INFO: Installing Optim v0.7.8
INFO: Installing OrdinaryDiffEq v2.4.0
INFO: Installing Parameters v0.7.3
INFO: Installing PositiveFactorizations v0.1.0
INFO: Installing ResettableStacks v0.2.0
INFO: Installing Roots v0.4.2
INFO: Installing SpecialFunctions v0.2.0
INFO: Installing StochasticDiffEq v2.2.1
INFO: Testing DiffEqBiological
  1.008109 seconds (6.82 M allocations: 588.356 MB, 6.99% gc time)
Test Summary:   | Pass  Total
  Gillespie Tests |    1      1
 14.081283 seconds (17.05 M allocations: 979.089 MB, 2.83% gc time)
Solve the Gillespie Problem
  5.955337 seconds (46.38 M allocations: 803.703 MB, 2.14% gc time)
Add ODE to Gillespie Problem
Turn Gillespie Problem into SDE
Now mix constant rate reactions
Variable Rate Reaction Tests: Error During Test
  Got an exception of type LoadError outside of a @test
  LoadError: Something went wrong. Integrator stepped past tstops but the algorithm was dtchangeable. Please report this error.
   in handle_tstop! at /home/vagrant/.julia/v0.5/StochasticDiffEq/src/integrators/integrator_utils.jl:346 [inlined]
   in solve!(::StochasticDiffEq.SDEIntegrator{StochasticDiffEq.SRIW1,DiffEqJump.ExtendedJumpArray{Array{Float64,1},Array{Float64,1}},Float64,Float64,Float64,Float64,DiffEqNoiseProcess.NoiseProcess{Float64,2,Float64,Array{Float64,1},Array{Float64,1},Array{Array{Float64,1},1},DiffEqNoiseProcess.#INPLACE_WHITE_NOISE_DIST,DiffEqNoiseProcess.#INPLACE_WHITE_NOISE_BRIDGE,true,DataStructures.Stack{Tuple{Float64,Array{Float64,1},Array{Float64,1}}},ResettableStacks.ResettableStack{Tuple{Float64,Array{Float64,1},Array{Float64,1}}},DiffEqNoiseProcess.RSWM{:RSwM3,Float64}},DiffEqJump.ExtendedJumpArray{Array{Float64,1},Array{Float64,1}},DiffEqBase.RODESolution{Float64,2,Array{DiffEqJump.ExtendedJumpArray{Array{Float64,1},Array{Float64,1}},1},Void,Void,Array{Float64,1},DiffEqNoiseProcess.NoiseProcess{Float64,2,Float64,Array{Float64,1},Array{Float64,1},Array{Array{Float64,1},1},DiffEqNoiseProcess.#INPLACE_WHITE_NOISE_DIST,DiffEqNoiseProcess.#INPLACE_WHITE_NOISE_BRIDGE,true,DataStructures.Stack{Tuple{Float64,Array{Float64,1},Array{Float64,1}}},ResettableStacks.ResettableStack{Tuple{Float64,Array{Float64,1},Array{Float64,1}}},DiffEqNoiseProcess.RSWM{:RSwM3,Float64}},DiffEqBase.SDEProblem{DiffEqJump.ExtendedJumpArray{Array{Float64,1},Array{Float64,1}},Float64,true,Void,DiffEqJump.##15#17{DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,Void,##3#4,##5#6,Void,UniformScaling{Int64},Void},DiffEqJump.JumpSet{Tuple{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},Void,Float64,Int64}},Tuple{DiffEqJump.ConstantRateJump{DiffEqBiological.##6#8{DiffEqBiological.Reaction{Float64,Int64,2,2}},DiffEqBiological.##7#9{DiffEqBiological.Reaction{Float64,Int64,2,2}}},DiffEqJump.ConstantRateJump{DiffEqBiological.##6#8{DiffEqBiological.Reaction{Float64,Int64,1,2}},DiffEqBiological.##7#9{DiffEqBiological.Reaction{Float64,Int64,1,2}}}}}},##5#6,Void,UniformScaling{Int64},Void},StochasticDiffEq.SRIW1,StochasticDiffEq.LinearInterpolationData{Array{DiffEqJump.ExtendedJumpArray{Array{Float64,1},Array{Float64,1}},1},Array{Float64,1}}},StochasticDiffEq.SRIW1Cache{Array{Float64,1},DiffEqJump.ExtendedJumpArray{Array{Float64,1},Array{Float64,1}},Array{Float64,1}},Void,DiffEqJump.##15#17{DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,Void,##3#4,##5#6,Void,UniformScaling{Int64},Void},DiffEqJump.JumpSet{Tuple{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},Void,Float64,Int64}},Tuple{DiffEqJump.ConstantRateJump{DiffEqBiological.##6#8{DiffEqBiological.Reaction{Float64,Int64,2,2}},DiffEqBiological.##7#9{DiffEqBiological.Reaction{Float64,Int64,2,2}}},DiffEqJump.ConstantRateJump{DiffEqBiological.##6#8{DiffEqBiological.Reaction{Float64,Int64,1,2}},DiffEqBiological.##7#9{DiffEqBiological.Reaction{Float64,Int64,1,2}}}}}},##5#6,StochasticDiffEq.SDEOptions{Float64,Float64,Float64,Float64,DiffEqBase.#ODE_DEFAULT_NORM,DiffEqBase.CallbackSet{Tuple{DiffEqBase.ContinuousCallback{DiffEqJump.##31#33,DiffEqJump.##32#34{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},Void,Float64,Int64}},DiffEqJump.##32#34{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},Void,Float64,Int64}},DiffEqBase.#INITIALIZE_DEFAULT,Float64,Int64,Void}},Tuple{DiffEqBase.DiscreteCallback{DiffEqJump.DirectJumpAggregation{Float64,Tuple{DiffEqBiological.##6#8{DiffEqBiological.Reaction{Float64,Int64,2,2}},DiffEqBiological.##6#8{DiffEqBiological.Reaction{Float64,Int64,1,2}}},Tuple{DiffEqBiological.##7#9{DiffEqBiological.Reaction{Float64,Int64,2,2}},DiffEqBiological.##7#9{DiffEqBiological.Reaction{Float64,Int64,1,2}}}},DiffEqJump.DirectJumpAggregation{Float64,Tuple{DiffEqBiological.##6#8{DiffEqBiological.Reaction{Float64,Int64,2,2}},DiffEqBiological.##6#8{DiffEqBiological.Reaction{Float64,Int64,1,2}}},Tuple{DiffEqBiological.##7#9{DiffEqBiological.Reaction{Float64,Int64,2,2}},DiffEqBiological.##7#9{DiffEqBiological.Reaction{Float64,Int64,1,2}}}},DiffEqJump.DirectJumpAggregation{Float64,Tuple{DiffEqBiological.##6#8{DiffEqBiological.Reaction{Float64,Int64,2,2}},DiffEqBiological.##6#8{DiffEqBiological.Reaction{Float64,Int64,1,2}}},Tuple{DiffEqBiological.##7#9{DiffEqBiological.Reaction{Float64,Int64,2,2}},DiffEqBiological.##7#9{DiffEqBiological.Reaction{Float64,Int64,1,2}}}}}}},DiffEqBase.#ODE_DEFAULT_ISOUTOFDOMAIN,DiffEqBase.#ODE_DEFAULT_PROG_MESSAGE,DiffEqBase.#ODE_DEFAULT_UNSTABLE_CHECK,DataStructures.BinaryHeap{Float64,DataStructures.LessThan},Void,Void},Void}) at /home/vagrant/.julia/v0.5/StochasticDiffEq/src/solve.jl:360
   in include_from_node1(::String) at ./loading.jl:488
   in macro expansion; at /home/vagrant/.julia/v0.5/DiffEqBiological/test/runtests.jl:6 [inlined]
   in macro expansion; at ./test.jl:674 [inlined]
   in macro expansion; at ./util.jl:188 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488
   in process_options(::Base.JLOptions) at ./client.jl:265
   in _start() at ./client.jl:321
  while loading /home/vagrant/.julia/v0.5/DiffEqBiological/test/variable_rate_reactions.jl, in expression starting on line 64
Test Summary:                | Pass  Error  Total
  Variable Rate Reaction Tests |    3      1      4
ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 1 errored, 0 broken.
 in finish(::Base.Test.DefaultTestSet) at ./test.jl:498
 in macro expansion; at ./util.jl:188 [inlined]
 in anonymous at ./<missing>:?
 in include_from_node1(::String) at ./loading.jl:488
 in process_options(::Base.JLOptions) at ./client.jl:265
 in _start() at ./client.jl:321
while loading /home/vagrant/.julia/v0.5/DiffEqBiological/test/runtests.jl, in expression starting on line 6
==========================[ ERROR: DiffEqBiological ]===========================

failed process: Process(`/home/vagrant/julia/bin/julia -Cx86-64 -J/home/vagrant/julia/lib/julia/sys.so --compile=yes --depwarn=yes --check-bounds=yes --code-coverage=none --color=no --compilecache=yes /home/vagrant/.julia/v0.5/DiffEqBiological/test/runtests.jl`, ProcessExited(1)) [1]

================================================================================
INFO: Removing Calculus v0.2.2
INFO: Removing DiffBase v0.1.0
INFO: Removing DiffEqDiffTools v0.0.1
INFO: Removing DiffEqNoiseProcess v0.2.0
INFO: Removing Distances v0.4.1
INFO: Removing ForwardDiff v0.4.2
INFO: Removing GenericSVD v0.1.0
INFO: Removing Iterators v0.3.1
INFO: Removing LineSearches v0.1.5
INFO: Removing NLSolversBase v2.1.3
INFO: Removing NLsolve v0.9.1
INFO: Removing NaNMath v0.2.6
INFO: Removing Optim v0.7.8
INFO: Removing OrdinaryDiffEq v2.4.0
INFO: Removing Parameters v0.7.3
INFO: Removing PositiveFactorizations v0.1.0
INFO: Removing ResettableStacks v0.2.0
INFO: Removing Roots v0.4.2
INFO: Removing SpecialFunctions v0.2.0
INFO: Removing StochasticDiffEq v2.2.1
ERROR: DiffEqBiological had test errors
 in #test#61(::Bool, ::Function, ::Array{AbstractString,1}) at ./pkg/entry.jl:748
 in (::Base.Pkg.Entry.#kw##test)(::Array{Any,1}, ::Base.Pkg.Entry.#test, ::Array{AbstractString,1}) at ./<missing>:0
 in (::Base.Pkg.Dir.##2#3{Array{Any,1},Base.Pkg.Entry.#test,Tuple{Array{AbstractString,1}}})() at ./pkg/dir.jl:31
 in cd(::Base.Pkg.Dir.##2#3{Array{Any,1},Base.Pkg.Entry.#test,Tuple{Array{AbstractString,1}}}, ::String) at ./file.jl:59
 in #cd#1(::Array{Any,1}, ::Function, ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N}) at ./pkg/dir.jl:31
 in (::Base.Pkg.Dir.#kw##cd)(::Array{Any,1}, ::Base.Pkg.Dir.#cd, ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N}) at ./<missing>:0
 in #test#3(::Bool, ::Function, ::String, ::Vararg{String,N}) at ./pkg/pkg.jl:258
 in test(::String, ::Vararg{String,N}) at ./pkg/pkg.jl:258
 in eval(::Module, ::Any) at ./boot.jl:234
 in process_options(::Base.JLOptions) at ./client.jl:242
 in _start() at ./client.jl:321

>>> End of log
