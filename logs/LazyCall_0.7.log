>>> 'Pkg.add("LazyCall")' log
[ Info: Cloning cache of LazyCall from https://github.com/bramtayl/LazyCall.jl.git
[ Info: Installing DataStructures v0.7.4
[ Info: Installing LazyCall v0.2.0
[ Info: Installing MacroTools v0.4.0
[ Info: Package database updated

>>> 'Pkg.test("LazyCall")' log
Julia Version 0.7.0-DEV.3519
Commit 5ecba29832 (2018-01-22 20:58 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
      Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-135-generic #184-Ubuntu SMP Wed Oct 18 11:55:51 UTC 2017 x86_64 x86_64
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
              speed         user         nice          sys         idle          irq
       #1  3500 MHz    2443221 s       6062 s     133278 s     691103 s         23 s
       #2  3500 MHz     561024 s        121 s      54514 s    3159794 s          1 s
       
  Memory: 2.93927001953125 GB (981.171875 MB free)
  Uptime: 38370.0 sec
  Load Avg:  0.962890625  0.96240234375  0.95458984375
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant
Packages:
  Package Directory: /home/vagrant/.julia/v0.7
  Package Status:
2 required packages:
 - JSON                          0.16.4
 - LazyCall                      0.2.0
4 additional packages:
 - Compat                        0.49.0
 - DataStructures                0.7.4
 - MacroTools                    0.4.0
 - Nullables                     0.0.3
[ Info: Computing test dependencies for LazyCall...
[ Info: Installing DocStringExtensions v0.4.3
[ Info: Installing Documenter v0.13.0
[ Info: Testing LazyCall
┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `contains(s, r)` instead.
│   caller = isbinding at match.jl:14 [inlined]
└ @ Core match.jl:14
┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `contains(s, r)` instead.
│   caller = isslurp at match.jl:29 [inlined]
└ @ Core match.jl:29
┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `contains(s, r)` instead.
│   caller = isslurp(::Symbol) at match.jl:29
└ @ MacroTools match.jl:29
┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `contains(s, r)` instead.
│   caller = isbinding at match.jl:14 [inlined]
└ @ Core match.jl:14
┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `contains(s, r)` instead.
│   caller = isbinding at match.jl:14 [inlined]
└ @ Core match.jl:14
┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `contains(s, r)` instead.
│   caller = isslurp at match.jl:29 [inlined]
└ @ Core match.jl:29
WARNING: Base.ObjectIdDict is deprecated, use IdDict{Any, Any} instead.
  likely near /home/vagrant/.julia/v0.7/LazyCall/test/runtests.jl:4
WARNING: Base.ObjectIdDict is deprecated, use IdDict{Any, Any} instead.
  likely near /home/vagrant/.julia/v0.7/LazyCall/test/runtests.jl:4
WARNING: Base.ObjectIdDict is deprecated, use IdDict{Any, Any} instead.
  likely near /home/vagrant/.julia/v0.7/LazyCall/test/runtests.jl:4
WARNING: Base.ObjectIdDict is deprecated, use IdDict{Any, Any} instead.
  likely near /home/vagrant/.julia/v0.7/LazyCall/test/runtests.jl:4
WARNING: Base.ObjectIdDict is deprecated, use IdDict{Any, Any} instead.
  likely near /home/vagrant/.julia/v0.7/LazyCall/test/runtests.jl:4
WARNING: Base.ObjectIdDict is deprecated, use IdDict{Any, Any} instead.
  likely near /home/vagrant/.julia/v0.7/LazyCall/test/runtests.jl:4
WARNING: Base.ObjectIdDict is deprecated, use IdDict{Any, Any} instead.
  likely near /home/vagrant/.julia/v0.7/LazyCall/test/runtests.jl:4
WARNING: Base.ObjectIdDict is deprecated, use IdDict{Any, Any} instead.
  likely near /home/vagrant/.julia/v0.7/LazyCall/test/runtests.jl:4
WARNING: Base.ObjectIdDict is deprecated, use IdDict{Any, Any} instead.
  likely near /home/vagrant/.julia/v0.7/LazyCall/test/runtests.jl:4
WARNING: Base.ObjectIdDict is deprecated, use IdDict{Any, Any} instead.
  likely near /home/vagrant/.julia/v0.7/LazyCall/test/runtests.jl:4
WARNING: Base.ObjectIdDict is deprecated, use IdDict{Any, Any} instead.
  likely near /home/vagrant/.julia/v0.7/LazyCall/test/runtests.jl:4
WARNING: Base.ObjectIdDict is deprecated, use IdDict{Any, Any} instead.
  likely near /home/vagrant/.julia/v0.7/LazyCall/test/runtests.jl:4
WARNING: Base.ObjectIdDict is deprecated, use IdDict{Any, Any} instead.
  likely near /home/vagrant/.julia/v0.7/LazyCall/test/runtests.jl:4
WARNING: Base.ObjectIdDict is deprecated, use IdDict{Any, Any} instead.
  likely near /home/vagrant/.julia/v0.7/LazyCall/test/runtests.jl:4
WARNING: Base.ObjectIdDict is deprecated, use IdDict{Any, Any} instead.
  likely near /home/vagrant/.julia/v0.7/LazyCall/test/runtests.jl:4
WARNING: Base.ObjectIdDict is deprecated, use IdDict{Any, Any} instead.
  likely near /home/vagrant/.julia/v0.7/LazyCall/test/runtests.jl:4
WARNING: Base.ObjectIdDict is deprecated, use IdDict{Any, Any} instead.
  likely near /home/vagrant/.julia/v0.7/LazyCall/test/runtests.jl:4
WARNING: Base.ObjectIdDict is deprecated, use IdDict{Any, Any} instead.
  likely near /home/vagrant/.julia/v0.7/LazyCall/test/runtests.jl:4
WARNING: Base.ObjectIdDict is deprecated, use IdDict{Any, Any} instead.
  likely near /home/vagrant/.julia/v0.7/LazyCall/test/runtests.jl:4
WARNING: Base.ObjectIdDict is deprecated, use IdDict{Any, Any} instead.
  likely near /home/vagrant/.julia/v0.7/LazyCall/test/runtests.jl:4
WARNING: Base.ObjectIdDict is deprecated, use IdDict{Any, Any} instead.
  likely near /home/vagrant/.julia/v0.7/LazyCall/test/runtests.jl:4
WARNING: Base.ObjectIdDict is deprecated, use IdDict{Any, Any} instead.
  likely near /home/vagrant/.julia/v0.7/LazyCall/test/runtests.jl:4
WARNING: Base.ObjectIdDict is deprecated, use IdDict{Any, Any} instead.
  likely near /home/vagrant/.julia/v0.7/LazyCall/test/runtests.jl:4
WARNING: Base.ObjectIdDict is deprecated, use IdDict{Any, Any} instead.
  likely near /home/vagrant/.julia/v0.7/LazyCall/test/runtests.jl:4
WARNING: Base.ObjectIdDict is deprecated, use IdDict{Any, Any} instead.
  likely near /home/vagrant/.julia/v0.7/LazyCall/test/runtests.jl:4
WARNING: Base.ObjectIdDict is deprecated, use IdDict{Any, Any} instead.
  likely near /home/vagrant/.julia/v0.7/LazyCall/test/runtests.jl:4
WARNING: Base.ObjectIdDict is deprecated, use IdDict{Any, Any} instead.
  likely near /home/vagrant/.julia/v0.7/LazyCall/test/runtests.jl:4
WARNING: Base.ObjectIdDict is deprecated, use IdDict{Any, Any} instead.
  likely near /home/vagrant/.julia/v0.7/LazyCall/test/runtests.jl:4
WARNING: Base.ObjectIdDict is deprecated, use IdDict{Any, Any} instead.
  likely near /home/vagrant/.julia/v0.7/LazyCall/test/runtests.jl:4
WARNING: Base.ObjectIdDict is deprecated, use IdDict{Any, Any} instead.
  likely near /home/vagrant/.julia/v0.7/LazyCall/test/runtests.jl:4
WARNING: Base.ObjectIdDict is deprecated, use IdDict{Any, Any} instead.
  likely near /home/vagrant/.julia/v0.7/LazyCall/test/runtests.jl:4
WARNING: Base.ObjectIdDict is deprecated, use IdDict{Any, Any} instead.
  likely near /home/vagrant/.julia/v0.7/LazyCall/test/runtests.jl:4
WARNING: Base.ObjectIdDict is deprecated, use IdDict{Any, Any} instead.
  likely near /home/vagrant/.julia/v0.7/LazyCall/test/runtests.jl:4
WARNING: Base.ObjectIdDict is deprecated, use IdDict{Any, Any} instead.
  likely near /home/vagrant/.julia/v0.7/LazyCall/test/runtests.jl:4
WARNING: Base.ObjectIdDict is deprecated, use IdDict{Any, Any} instead.
  likely near /home/vagrant/.julia/v0.7/LazyCall/test/runtests.jl:4
WARNING: Base.ObjectIdDict is deprecated, use IdDict{Any, Any} instead.
  likely near /home/vagrant/.julia/v0.7/LazyCall/test/runtests.jl:4
WARNING: Base.ObjectIdDict is deprecated, use IdDict{Any, Any} instead.
  likely near /home/vagrant/.julia/v0.7/LazyCall/test/runtests.jl:4
WARNING: Base.ObjectIdDict is deprecated, use IdDict{Any, Any} instead.
  likely near /home/vagrant/.julia/v0.7/LazyCall/test/runtests.jl:4
WARNING: Base.ObjectIdDict is deprecated, use IdDict{Any, Any} instead.
  likely near /home/vagrant/.julia/v0.7/LazyCall/test/runtests.jl:4
WARNING: Base.ObjectIdDict is deprecated, use IdDict{Any, Any} instead.
  likely near /home/vagrant/.julia/v0.7/LazyCall/test/runtests.jl:4
WARNING: Base.ObjectIdDict is deprecated, use IdDict{Any, Any} instead.
  likely near /home/vagrant/.julia/v0.7/LazyCall/test/runtests.jl:4
WARNING: Base.ObjectIdDict is deprecated, use IdDict{Any, Any} instead.
  likely near /home/vagrant/.julia/v0.7/LazyCall/test/runtests.jl:4
Documenter: setting up build directory.
Documenter: expanding markdown templates.
Documenter: building cross-references.
WARNING: importing deprecated binding Base.ObjectIdDict into DocChecks.
WARNING: Base.ObjectIdDict is deprecated, use IdDict{Any, Any} instead.
  likely near /home/vagrant/.julia/v0.7/LazyCall/test/runtests.jl:4
WARNING: Base.ObjectIdDict is deprecated, use IdDict{Any, Any} instead.
  likely near /home/vagrant/.julia/v0.7/LazyCall/test/runtests.jl:4
WARNING: Base.ObjectIdDict is deprecated, use IdDict{Any, Any} instead.
  likely near /home/vagrant/.julia/v0.7/LazyCall/test/runtests.jl:4
WARNING: Base.ObjectIdDict is deprecated, use IdDict{Any, Any} instead.
  likely near /home/vagrant/.julia/v0.7/LazyCall/test/runtests.jl:4
in allbindings at /home/vagrant/.julia/v0.7/Documenter/src/DocChecks.jl
Documenter: running document checks.
 > checking for missing docstrings.
 !! 132 docstrings potentially missing:

    DataStructures.compare :: Tuple{Union{DataStructures.SortedDict, DataStructures.SortedMultiDict, DataStructures.SortedSet},DataStructures.Tokens.IntSemiToken,DataStructures.Tokens.IntSemiToken}
    Base.insert! :: Tuple{DataStructures.SortedSet,Any}
    Base.insert! :: Union{Tuple{Ord}, Tuple{D}, Tuple{K}, Tuple{DataStructures.SortedMultiDict{K,D,Ord},Any,Any}} where Ord<:Base.Order.Ordering where D where K
    Base.insert! :: Union{Tuple{Ord}, Tuple{D}, Tuple{K}, Tuple{DataStructures.SortedDict{K,D,Ord},Any,Any}} where Ord<:Base.Order.Ordering where D where K
    Base.haskey :: Tuple{DataStructures.SortedSet,Any}
    Base.haskey :: Tuple{DataStructures.SortedDict,Any}
    Base.haskey :: Tuple{DataStructures.SortedMultiDict,Any}
    DataStructures.find_root :: Union{Tuple{T}, Tuple{DataStructures.DisjointSets{T},T}} where T
    DataStructures.isheap :: Union{Tuple{AbstractArray}, Tuple{AbstractArray,Base.Order.Ordering}}
    MacroTools.inexpr :: Tuple{Any,Any}
    DataStructures.heappop! :: Union{Tuple{AbstractArray}, Tuple{AbstractArray,Base.Order.Ordering}}
    DataStructures.nsmallest :: Union{Tuple{T}, Tuple{Int64,AbstractArray{T,1}}} where T
    MacroTools.combinedef :: Tuple{Dict}
    Base.symdiff :: Union{Tuple{Ord}, Tuple{K}, Tuple{DataStructures.SortedSet{K,Ord},DataStructures.SortedSet{K,Ord}}} where Ord<:Base.Order.Ordering where K
    MacroTools.@expand :: Tuple{Any}
    Base.isequal :: Tuple{DataStructures.SortedMultiDict,DataStructures.SortedMultiDict}
    Base.isequal :: Tuple{DataStructures.SortedSet,DataStructures.SortedSet}
    Base.isequal :: Tuple{DataStructures.SortedDict,DataStructures.SortedDict}
    DataStructures.front :: Tuple{DataStructures.Deque}
    DataStructures.OrderedDict
    DataStructures.peek :: Tuple{DataStructures.PriorityQueue}
    DataStructures.in_same_set :: Tuple{DataStructures.IntDisjointSets,Integer,Integer}
    Base.similar :: Union{Tuple{DataStructures.SortedSet{K,Ord}}, Tuple{Ord}, Tuple{K}} where Ord<:Base.Order.Ordering where K
    Base.similar :: Union{Tuple{DataStructures.SortedDict{K,D,Ord}}, Tuple{Ord}, Tuple{D}, Tuple{K}} where Ord<:Base.Order.Ordering where D where K
    DataStructures.ordtype :: Union{Tuple{DataStructures.SortedSet{K,Ord}}, Tuple{Ord}, Tuple{K}} where Ord<:Base.Order.Ordering where K
    DataStructures.ordtype :: Union{Tuple{DataStructures.SortedDict{K,D,Ord}}, Tuple{Ord}, Tuple{D}, Tuple{K}} where Ord<:Base.Order.Ordering where D where K
    MacroTools.splitdef :: Tuple{Any}
    MacroTools.combinearg :: NTuple{4,Any}
    MacroTools.rmlines :: Tuple{Any}
    DataStructures.dequeue_pair! :: Tuple{DataStructures.PriorityQueue}
    Base.setdiff :: Union{Tuple{Ord}, Tuple{K}, Tuple{DataStructures.SortedSet{K,Ord},DataStructures.SortedSet{K,Ord}}} where Ord<:Base.Order.Ordering where K
    Base.first :: Tuple{DataStructures.SortedSet}
    Base.first :: Tuple{DataStructures.SortedDict}
    Base.first :: Tuple{DataStructures.SortedMultiDict}
    DataStructures.top :: Tuple{DataStructures.BinaryHeap}
    MacroTools.alias_gensyms :: Tuple{Any}
    Base.get! :: Union{Tuple{D}, Tuple{K}, Tuple{Union{Function, Type},DataStructures.SortedDict{K,D,Ord} where Ord<:Base.Order.Ordering,Any}} where D where K
    Base.merge! :: Union{Tuple{Ord}, Tuple{D}, Tuple{K}, Tuple{DataStructures.SortedDict{K,D,Ord},Vararg{AbstractDict{K,D},N} where N}} where Ord<:Base.Order.Ordering where D where K
    Base.merge! :: Tuple{DataStructures.Accumulator,DataStructures.Accumulator}
    Base.merge! :: Union{Tuple{Ord}, Tuple{D}, Tuple{K}, Tuple{DataStructures.SortedMultiDict{K,D,Ord},Vararg{Union{AbstractDict, DataStructures.SortedMultiDict},N} where N}} where Ord<:Base.Order.Ordering where D where K
    DataStructures.deque :: Union{Tuple{Type{T}}, Tuple{T}} where T
    DataStructures.packdeepcopy :: Union{Tuple{DataStructures.SortedSet{K,Ord}}, Tuple{Ord}, Tuple{K}} where Ord<:Base.Order.Ordering where K
    DataStructures.packdeepcopy :: Union{Tuple{DataStructures.SortedDict{K,D,Ord}}, Tuple{Ord}, Tuple{D}, Tuple{K}} where Ord<:Base.Order.Ordering where D where K
    Base.merge :: Union{Tuple{Ord}, Tuple{D}, Tuple{K}, Tuple{DataStructures.SortedDict{K,D,Ord},Vararg{AbstractDict{K,D},N} where N}} where Ord<:Base.Order.Ordering where D where K
    Base.merge :: Union{Tuple{Ord}, Tuple{D}, Tuple{K}, Tuple{DataStructures.SortedMultiDict{K,D,Ord},Vararg{Union{AbstractDict, DataStructures.SortedMultiDict},N} where N}} where Ord<:Base.Order.Ordering where D where K
    Base.merge :: Tuple{DataStructures.Accumulator,Vararg{DataStructures.Accumulator,N} where N}
    DataStructures.isordered :: Union{Tuple{Type{T}}, Tuple{T}} where T<:AbstractDict
    DataStructures.heappush! :: Union{Tuple{AbstractArray,Any}, Tuple{AbstractArray,Any,Base.Order.Ordering}}
    Base.push! :: Union{Tuple{D}, Tuple{K}, Tuple{DataStructures.SortedDict{K,D,Ord} where Ord<:Base.Order.Ordering,Pair}} where D where K
    Base.push! :: Tuple{DataStructures.SortedSet,Any}
    Base.push! :: Union{Tuple{D}, Tuple{K}, Tuple{DataStructures.SortedMultiDict{K,D,Ord} where Ord<:Base.Order.Ordering,Pair}} where D where K
    Base.pop! :: Tuple{DataStructures.SortedSet}
    Base.pop! :: Tuple{DataStructures.SortedSet,Any}
    Base.pop! :: Tuple{DataStructures.SortedDict,Any}
    Base.union! :: Union{Tuple{Ord}, Tuple{K}, Tuple{DataStructures.SortedSet{K,Ord},Any}} where Ord<:Base.Order.Ordering where K
    DataStructures.PriorityQueue
    DataStructures.reset! :: Tuple{DataStructures.Accumulator,Any}
    MacroTools.unblock :: Tuple{Any}
    MacroTools.prewalk :: Tuple{Any,Any}
    DataStructures.SortedMultiDict :: Tuple{Vararg{Pair,N} where N}
    DataStructures.SortedMultiDict :: Tuple{Base.Order.Ordering,Vararg{Pair,N} where N}
    DataStructures.SortedMultiDict :: Tuple{}
    DataStructures.SortedMultiDict :: Union{Tuple{O}, Tuple{O}} where O<:Base.Order.Ordering
    DataStructures.SortedMultiDict :: Union{Tuple{Any}, Tuple{D}, Tuple{K}} where D where K
    DataStructures.SortedMultiDict :: Union{Tuple{Ord}, Tuple{D}, Tuple{K}, Tuple{Ord,Any}} where Ord<:Base.Order.Ordering where D where K
    DataStructures.packcopy :: Union{Tuple{DataStructures.SortedSet{K,Ord}}, Tuple{Ord}, Tuple{K}} where Ord<:Base.Order.Ordering where K
    DataStructures.packcopy :: Union{Tuple{DataStructures.SortedDict{K,D,Ord}}, Tuple{Ord}, Tuple{D}, Tuple{K}} where Ord<:Base.Order.Ordering where D where K
    DataStructures.top_with_handle :: Tuple{DataStructures.MutableBinaryHeap}
    DataStructures.inc! :: Tuple{DataStructures.Accumulator,Any,Number}
    MacroTools.namify :: Tuple{Symbol}
    Base.delete! :: Tuple{DataStructures.SortedSet,Any}
    Base.delete! :: Tuple{DataStructures.SortedDict,Any}
    Base.getkey :: Union{Tuple{Ord}, Tuple{D}, Tuple{K}, Tuple{DataStructures.SortedDict{K,D,Ord},Any,Any}} where Ord<:Base.Order.Ordering where D where K
    DataStructures.SortedDict :: Tuple{Vararg{Pair,N} where N}
    DataStructures.SortedDict :: Union{Tuple{Ord}, Tuple{D}, Tuple{K}, Tuple{Ord,Vararg{Pair,N} where N}} where Ord<:Base.Order.Ordering where D where K
    DataStructures.SortedDict :: Tuple{Base.Order.Ordering,Vararg{Pair,N} where N}
    DataStructures.SortedDict :: Tuple{}
    DataStructures.SortedDict :: Union{Tuple{Any}, Tuple{Any,Base.Order.Ordering}}
    DataStructures.SortedDict :: Union{Tuple{Any}, Tuple{D}, Tuple{K}} where D where K
    DataStructures.SortedDict :: Union{Tuple{Ord}, Tuple{Ord}} where Ord<:Base.Order.Ordering
    DataStructures.CircularBuffer
    DataStructures.heapify :: Union{Tuple{AbstractArray}, Tuple{AbstractArray,Base.Order.Ordering}}
    DataStructures.CircularDeque
    Base.setindex! :: Union{Tuple{Ord}, Tuple{D}, Tuple{K}, Tuple{DataStructures.SortedDict{K,D,Ord},Any,Any}} where Ord<:Base.Order.Ordering where D where K
    Base.issubset :: Tuple{Any,DataStructures.SortedSet}
    Base.valtype :: Union{Tuple{DataStructures.SortedMultiDict{K,D,Ord}}, Tuple{Ord}, Tuple{D}, Tuple{K}} where Ord<:Base.Order.Ordering where D where K
    Base.valtype :: Union{Tuple{DataStructures.SortedDict{K,D,Ord}}, Tuple{Ord}, Tuple{D}, Tuple{K}} where Ord<:Base.Order.Ordering where D where K
    MacroTools.gatherwheres :: Tuple{Any}
    MacroTools.isdef :: Tuple{Any}
    MacroTools.postwalk :: Tuple{Any,Any}
    Base.last :: Tuple{DataStructures.SortedSet}
    Base.last :: Tuple{DataStructures.SortedDict}
    Base.last :: Tuple{DataStructures.SortedMultiDict}
    DataStructures.dequeue! :: Tuple{DataStructures.Queue}
    DataStructures.dequeue! :: Tuple{DataStructures.PriorityQueue}
    MacroTools.@esc :: Tuple
    DataStructures.Queue :: Union{Tuple{Type{T}}, Tuple{T}} where T
    MacroTools.isexpr :: Tuple{Expr}
    MacroTools.@>> :: Tuple
    Base.getindex :: Tuple{DataStructures.SortedDict,Any}
    DataStructures.orderobject :: Tuple{DataStructures.SortedSet}
    DataStructures.orderobject :: Tuple{DataStructures.SortedDict}
    DataStructures.orderobject :: Tuple{DataStructures.SortedMultiDict}
    DataStructures.dec! :: Tuple{DataStructures.Accumulator,Any,Number}
    DataStructures.heapify! :: Union{Tuple{AbstractArray}, Tuple{AbstractArray,Base.Order.Ordering}}
    DataStructures.back :: Tuple{DataStructures.Deque}
    MacroTools.@q :: Tuple{Any}
    Base.keytype :: Union{Tuple{DataStructures.SortedSet{K,Ord}}, Tuple{Ord}, Tuple{K}} where Ord<:Base.Order.Ordering where K
    Base.keytype :: Union{Tuple{DataStructures.SortedDict{K,D,Ord}}, Tuple{Ord}, Tuple{D}, Tuple{K}} where Ord<:Base.Order.Ordering where D where K
    DataStructures.update! :: Union{Tuple{T}, Tuple{DataStructures.MutableBinaryHeap{T,Comp} where Comp,Int64,T}} where T
    MacroTools.splitarg :: Tuple{Any}
    DataStructures.counter :: Tuple{Any}
    DataStructures.SortedSet :: Union{Tuple{O}, Tuple{O}, Tuple{K}} where O<:Base.Order.Ordering where K
    DataStructures.SortedSet
    DataStructures.SortedSet :: Tuple{}
    DataStructures.SortedSet :: Union{Tuple{O}, Tuple{O}} where O<:Base.Order.Ordering
    DataStructures.SortedSet :: Union{Tuple{}, Tuple{K}} where K
    Base.in :: Tuple{Pair,DataStructures.SortedMultiDict}
    Base.in :: Union{Tuple{Ord}, Tuple{D}, Tuple{K}, Tuple{Pair,DataStructures.SortedDict{K,D,Ord}}} where Ord<:Base.Order.Ordering where D where K
    Base.intersect :: Union{Tuple{Ord}, Tuple{K}, Tuple{DataStructures.SortedSet{K,Ord},Vararg{DataStructures.SortedSet{K,Ord},N} where N}} where Ord<:Base.Order.Ordering where K
    DataStructures.nlargest :: Union{Tuple{T}, Tuple{Int64,AbstractArray{T,1}}} where T
    MacroTools.@> :: Tuple
    Base.eltype :: Union{Tuple{DataStructures.SortedSet{K,Ord}}, Tuple{Ord}, Tuple{K}} where Ord<:Base.Order.Ordering where K
    Base.eltype :: Union{Tuple{DataStructures.SortedDict{K,D,Ord}}, Tuple{Ord}, Tuple{D}, Tuple{K}} where Ord<:Base.Order.Ordering where D where K
    Base.union :: Tuple{DataStructures.SortedSet,Vararg{Any,N} where N}
    Base.get :: Union{Tuple{D}, Tuple{K}, Tuple{Union{Function, Type},DataStructures.SortedDict{K,D,Ord} where Ord<:Base.Order.Ordering,Any}} where D where K
    DataStructures.enqueue! :: Tuple{DataStructures.PriorityQueue,Any,Any}
    DataStructures.enqueue! :: Tuple{DataStructures.Queue,Any}
    DataStructures.enqueue! :: Union{Tuple{V}, Tuple{K}, Tuple{DataStructures.PriorityQueue{K,V,O} where O<:Base.Order.Ordering,Pair{K,V}}} where V where K
    Base.setdiff! :: Tuple{DataStructures.SortedSet,Any}
    MacroTools.prettify :: Tuple{Any}
    Base.find :: Tuple{DataStructures.SortedDict,Any}

 > running doctests.
WARNING: Base.REPL is deprecated, run `using REPL` instead.
  likely near /home/vagrant/.julia/v0.7/LazyCall/test/runtests.jl:4
WARNING: Base.REPL is deprecated, run `using REPL` instead.
  likely near /home/vagrant/.julia/v0.7/LazyCall/test/runtests.jl:4
WARNING: Base.REPL is deprecated, run `using REPL` instead.
  likely near /home/vagrant/.julia/v0.7/LazyCall/test/runtests.jl:4
WARNING: Base.REPL is deprecated, run `using REPL` instead.
  likely near /home/vagrant/.julia/v0.7/LazyCall/test/runtests.jl:4
WARNING: Base.REPL is deprecated, run `using REPL` instead.
  likely near /home/vagrant/.julia/v0.7/LazyCall/test/runtests.jl:4
WARNING: Base.REPL is deprecated, run `using REPL` instead.
  likely near /home/vagrant/.julia/v0.7/LazyCall/test/runtests.jl:4
WARNING: Base.REPL is deprecated, run `using REPL` instead.
  likely near /home/vagrant/.julia/v0.7/LazyCall/test/runtests.jl:4
WARNING: Base.REPL is deprecated, run `using REPL` instead.
  likely near /home/vagrant/.julia/v0.7/LazyCall/test/runtests.jl:4
WARNING: Base.REPL is deprecated, run `using REPL` instead.
  likely near /home/vagrant/.julia/v0.7/LazyCall/test/runtests.jl:4
WARNING: Base.REPL is deprecated, run `using REPL` instead.
  likely near /home/vagrant/.julia/v0.7/LazyCall/test/runtests.jl:4
WARNING: Base.REPL is deprecated, run `using REPL` instead.
  likely near /home/vagrant/.julia/v0.7/LazyCall/test/runtests.jl:4
WARNING: Base.REPL is deprecated, run `using REPL` instead.
  likely near /home/vagrant/.julia/v0.7/LazyCall/test/runtests.jl:4
WARNING: Base.REPL is deprecated, run `using REPL` instead.
  likely near /home/vagrant/.julia/v0.7/LazyCall/test/runtests.jl:4
WARNING: Base.REPL is deprecated, run `using REPL` instead.
  likely near /home/vagrant/.julia/v0.7/LazyCall/test/runtests.jl:4
WARNING: Base.REPL is deprecated, run `using REPL` instead.
  likely near /home/vagrant/.julia/v0.7/LazyCall/test/runtests.jl:4
WARNING: Base.REPL is deprecated, run `using REPL` instead.
  likely near /home/vagrant/.julia/v0.7/LazyCall/test/runtests.jl:4
WARNING: Base.REPL is deprecated, run `using REPL` instead.
  likely near /home/vagrant/.julia/v0.7/LazyCall/test/runtests.jl:4
WARNING: Base.REPL is deprecated, run `using REPL` instead.
  likely near /home/vagrant/.julia/v0.7/LazyCall/test/runtests.jl:4
in eval_repl at /home/vagrant/.julia/v0.7/Documenter/src/DocChecks.jl
┌ Warning: `nb_available` is deprecated, use `bytesavailable` instead.
│   caller = savebuffer!(::Array{String,1}, ::Base.GenericIOBuffer{Array{UInt8,1}}) at DocChecks.jl:380
└ @ Documenter.DocChecks DocChecks.jl:380
┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `contains(s, r)` instead.
│   caller = isbinding at match.jl:14 [inlined]
└ @ Core match.jl:14
 > checking footnote links.
Documenter: populating indices.
ERROR: LoadError: `makedocs` encountered an error. Terminating build
Stacktrace:
 [1] error at ./error.jl:33 [inlined]
 [2] runner(::Type{Documenter.Builder.RenderDocument}, ::Documenter.Documents.Document) at /home/vagrant/.julia/v0.7/Documenter/src/Builder.jl:202
 [3] dispatch(::Type{Documenter.Builder.DocumentPipeline}, ::Documenter.Documents.Document, ::Vararg{Documenter.Documents.Document,N} where N) at /home/vagrant/.julia/v0.7/Documenter/src/Selectors.jl:167
 [4] #2 at /home/vagrant/.julia/v0.7/Documenter/src/Documenter.jl:194 [inlined]
 [5] cd(::getfield(Documenter, Symbol("##2#3")){Documenter.Documents.Document}, ::String) at ./file.jl:70
 [6] #makedocs#1(::Bool, ::Base.Iterators.IndexValue{Symbol,Any,NTuple{6,Symbol},NamedTuple{(:modules, :format, :sitename, :root, :pages, :strict),Tuple{Array{Module,1},Symbol,String,String,Array{Any,1},Bool}}}, ::Function) at /home/vagrant/.julia/v0.7/Documenter/src/Documenter.jl:193
 [7] (::getfield(Documenter, Symbol("#kw##makedocs")))(::NamedTuple{(:modules, :format, :sitename, :root, :pages, :strict),Tuple{Array{Module,1},Symbol,String,String,Array{Any,1},Bool}}, ::typeof(makedocs)) at ./<missing>:0
 [8] top-level scope
 [9] include at ./boot.jl:292 [inlined]
 [10] include_relative(::Module, ::String) at ./loading.jl:1011
 [11] include(::Module, ::String) at ./sysimg.jl:26
 [12] process_options(::Base.JLOptions) at ./client.jl:334
 [13] _start() at ./client.jl:386
in expression starting at /home/vagrant/.julia/v0.7/LazyCall/test/runtests.jl:4
┌ Error: ------------------------------------------------------------
│ # Testing failed for LazyCall
│   exception =
│    failed process: Process(`/home/vagrant/julia/bin/julia -Cnative -J/home/vagrant/julia/lib/julia/sys.so --compile=yes --depwarn=yes --code-coverage=none --color=no --compiled-modules=yes --check-bounds=yes --warn-overwrite=yes --startup-file=yes /home/vagrant/.julia/v0.7/LazyCall/test/runtests.jl`, ProcessExited(1)) [1]
│    Stacktrace:
│     [1] error(::String, ::Base.Process, ::String, ::Int64, ::String) at ./error.jl:42
│     [2] pipeline_error(::Base.Process) at ./process.jl:698
│     [3] run(::Cmd) at ./process.jl:660
│     [4] (::getfield(Base.Pkg.Entry, Symbol("##89#92")){Bool,String,Array{AbstractString,1}})() at ./pkg/entry.jl:729
│     [5] cd(::getfield(Base.Pkg.Entry, Symbol("##89#92")){Bool,String,Array{AbstractString,1}}, ::String) at ./file.jl:70
│     [6] #test!#88(::Bool, ::Function, ::String, ::Array{AbstractString,1}, ::Array{AbstractString,1}, ::Array{AbstractString,1}) at ./pkg/entry.jl:717
│     [7] (::getfield(Base.Pkg.Entry, Symbol("#kw##test!")))(::NamedTuple{(:coverage,),Tuple{Bool}}, ::typeof(Base.Pkg.Entry.test!), ::String, ::Array{AbstractString,1}, ::Array{AbstractString,1}, ::Array{AbstractString,1}) at ./<missing>:0
│     [8] #test#96(::Bool, ::Function, ::Array{AbstractString,1}) at ./pkg/entry.jl:756
│     [9] (::getfield(Base.Pkg.Entry, Symbol("#kw##test")))(::NamedTuple{(:coverage,),Tuple{Bool}}, ::typeof(Base.Pkg.Entry.test), ::Array{AbstractString,1}) at ./<missing>:0
│     [10] (::getfield(Base.Pkg.Dir, Symbol("##4#7")){Base.Iterators.IndexValue{Symbol,Bool,Tuple{Symbol},NamedTuple{(:coverage,),Tuple{Bool}}},typeof(Base.Pkg.Entry.test),Tuple{Array{AbstractString,1}}})() at ./pkg/dir.jl:36
│     [11] cd(::getfield(Base.Pkg.Dir, Symbol("##4#7")){Base.Iterators.IndexValue{Symbol,Bool,Tuple{Symbol},NamedTuple{(:coverage,),Tuple{Bool}}},typeof(Base.Pkg.Entry.test),Tuple{Array{AbstractString,1}}}, ::String) at ./file.jl:70
│     [12] #cd#1(::Base.Iterators.IndexValue{Symbol,Bool,Tuple{Symbol},NamedTuple{(:coverage,),Tuple{Bool}}}, ::Function, ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N} where N) at ./pkg/dir.jl:36
│     [13] (::getfield(Base.Pkg.Dir, Symbol("#kw##cd")))(::NamedTuple{(:coverage,),Tuple{Bool}}, ::typeof(Base.Pkg.Dir.cd), ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N} where N) at ./<missing>:0
│     [14] #test#3(::Bool, ::Function, ::String, ::Vararg{String,N} where N) at ./pkg/pkg.jl:274
│     [15] test(::String, ::Vararg{String,N} where N) at ./pkg/pkg.jl:274
│     [16] top-level scope
│     [17] eval at ./boot.jl:295 [inlined]
│     [18] eval(::Module, ::Expr) at ./sysimg.jl:71
│     [19] process_options(::Base.JLOptions) at ./client.jl:311
│     [20] _start() at ./client.jl:386
└ @ Base.Pkg.Entry entry.jl:732
[ Info: Removing DocStringExtensions v0.4.3
[ Info: Removing Documenter v0.13.0
ERROR: LazyCall had test errors

>>> End of log
