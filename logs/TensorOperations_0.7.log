>>> 'Pkg.add("TensorOperations")' log
[ Info: Installing TensorOperations v0.6.0 @ Base.Pkg.Entry entry.jl:543
[ Info: Removing AutoHashEquals v0.2.0 @ Base.Pkg.Entry entry.jl:546
[ Info: Removing BinDeps v0.8.2 @ Base.Pkg.Entry entry.jl:546
[ Info: Removing Blosc v0.3.0 @ Base.Pkg.Entry entry.jl:546
[ Info: Removing Calculus v0.2.2 @ Base.Pkg.Entry entry.jl:546
[ Info: Removing Conda v0.7.1 @ Base.Pkg.Entry entry.jl:546
[ Info: Removing DataStructures v0.7.4 @ Base.Pkg.Entry entry.jl:546
[ Info: Removing Distributions v0.15.0 @ Base.Pkg.Entry entry.jl:546
[ Info: Removing FileIO v0.6.1 @ Base.Pkg.Entry entry.jl:546
[ Info: Removing HDF5 v0.8.8 @ Base.Pkg.Entry entry.jl:546
[ Info: Removing Hiccup v0.1.1 @ Base.Pkg.Entry entry.jl:546
[ Info: Removing JLD v0.8.3 @ Base.Pkg.Entry entry.jl:546
[ Info: Removing Juno v0.3.2 @ Base.Pkg.Entry entry.jl:546
[ Info: Removing LegacyStrings v0.3.0 @ Base.Pkg.Entry entry.jl:546
[ Info: Removing MNIST v0.0.2 @ Base.Pkg.Entry entry.jl:546
[ Info: Removing MacroTools v0.4.0 @ Base.Pkg.Entry entry.jl:546
[ Info: Removing Media v0.3.0 @ Base.Pkg.Entry entry.jl:546
[ Info: Removing PDMats v0.8.0 @ Base.Pkg.Entry entry.jl:546
[ Info: Removing ProtoBuf v0.4.0 @ Base.Pkg.Entry entry.jl:546
[ Info: Removing PyCall v1.15.0 @ Base.Pkg.Entry entry.jl:546
[ Info: Removing QuadGK v0.2.0 @ Base.Pkg.Entry entry.jl:546
[ Info: Removing Rmath v0.3.1 @ Base.Pkg.Entry entry.jl:546
[ Info: Removing SHA v0.5.2 @ Base.Pkg.Entry entry.jl:546
[ Info: Removing SortingAlgorithms v0.2.0 @ Base.Pkg.Entry entry.jl:546
[ Info: Removing SpecialFunctions v0.3.6 @ Base.Pkg.Entry entry.jl:546
[ Info: Removing StatsBase v0.19.5 @ Base.Pkg.Entry entry.jl:546
[ Info: Removing StatsFuns v0.5.0 @ Base.Pkg.Entry entry.jl:546
[ Info: Removing TakingBroadcastSeriously v0.1.1 @ Base.Pkg.Entry entry.jl:546
[ Info: Removing URIParser v0.3.0 @ Base.Pkg.Entry entry.jl:546
[ Info: Package database updated @ Base.Pkg.Entry entry.jl:32
┌ Info: METADATA is out-of-date — you may not have the latest version of TensorOperations
│ Use `Pkg.update()` to get the latest versions of your packages
└ @ Base.Pkg.Entry entry.jl:74

>>> 'Pkg.test("TensorOperations")' log
Julia Version 0.7.0-DEV.3299
Commit fb527308bb (2018-01-05 19:41 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
      Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-135-generic #184-Ubuntu SMP Wed Oct 18 11:55:51 UTC 2017 x86_64 x86_64
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
              speed         user         nice          sys         idle          irq
       #1  3500 MHz    3625600 s       6541 s     175712 s     854800 s         25 s
       #2  3500 MHz     656900 s        276 s      65911 s    4691371 s          0 s
       
  Memory: 2.93927001953125 GB (704.68359375 MB free)
  Uptime: 55109.0 sec
  Load Avg:  1.0029296875  0.99658203125  0.970703125
  WORD_SIZE: 64
  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant
Packages:
  Package Directory: /home/vagrant/.julia/v0.7
  Package Status:
2 required packages:
 - JSON                          0.16.3
 - TensorOperations              0.6.0
3 additional packages:
 - Compat                        0.42.0
 - Nullables                     0.0.2
 - tmp6B2J9N                     0.0.0-             non-repo (unregistered)
[ Info: Testing TensorOperations @ Base.Pkg.Entry entry.jl:723
┌ Warning: Deprecated syntax `(1:4...)` at /home/vagrant/.julia/v0.7/TensorOperations/test/methods.jl:7.
│ Use `(1:4...,)` instead.
└ @ nothing methods.jl:7
┌ Warning: Deprecated syntax `(p...)` at /home/vagrant/.julia/v0.7/TensorOperations/test/methods.jl:7.
│ Use `(p...,)` instead.
└ @ nothing methods.jl:7
┌ Warning: Deprecated syntax `(1:4...)` at /home/vagrant/.julia/v0.7/TensorOperations/test/methods.jl:15.
│ Use `(1:4...,)` instead.
└ @ nothing methods.jl:15
┌ Warning: `copy!(dst::AbstractArray, src::AbstractArray)` is deprecated. You can either use `copyto!(dst, src)` or `Future.copy!(dst, src)` instead.
│   caller = tensoradd(::Array{Float64,4}, ::NTuple{4,Int64}, ::Array{Float64,4}, ::NTuple{4,Int64}, ::NTuple{4,Int64}) at simple.jl:51
└ @ TensorOperations simple.jl:51
┌ Warning: `Array{T}(d::NTuple{N, Int}) where {T, N}` is deprecated, use `Array{T}(uninitialized, d)` instead.
│   caller = contract!(::Int64, ::Array{Float64,5}, ::Type{Val{:N}}, ::Array{Float64,4}, ::Type{Val{:N}}, ::Int64, ::Array{Float64,5}, ::Tuple{Int64,Int64,Int64}, ::Tuple{Int64,Int64}, ::Tuple{Int64,Int64}, ::Tuple{Int64,Int64}, ::NTuple{5,Int64}, ::Type{Val{:BLAS}}) at stridedarray.jl:150
└ @ TensorOperations stridedarray.jl:150
┌ Warning: `Array{T}(d::NTuple{N, Int}) where {T, N}` is deprecated, use `Array{T}(uninitialized, d)` instead.
│   caller = contract!(::Int64, ::Array{Float64,5}, ::Type{Val{:N}}, ::Array{Float64,4}, ::Type{Val{:N}}, ::Int64, ::Array{Float64,5}, ::Tuple{Int64,Int64,Int64}, ::Tuple{Int64,Int64}, ::Tuple{Int64,Int64}, ::Tuple{Int64,Int64}, ::NTuple{5,Int64}, ::Type{Val{:BLAS}}) at stridedarray.jl:178
└ @ TensorOperations stridedarray.jl:178
┌ Warning: `Array{T}(m::Int, n::Int) where T` is deprecated, use `Array{T}(uninitialized, m, n)` instead.
│   caller = contract!(::Int64, ::Array{Float64,5}, ::Type{Val{:N}}, ::Array{Float64,4}, ::Type{Val{:N}}, ::Int64, ::Array{Float64,5}, ::Tuple{Int64,Int64,Int64}, ::Tuple{Int64,Int64}, ::Tuple{Int64,Int64}, ::Tuple{Int64,Int64}, ::NTuple{5,Int64}, ::Type{Val{:BLAS}}) at stridedarray.jl:190
└ @ TensorOperations stridedarray.jl:190
WARNING: Base.Complex128 is deprecated, use ComplexF64 instead.
  likely near /home/vagrant/.julia/v0.7/TensorOperations/test/methods.jl:56
WARNING: Base.Complex128 is deprecated, use ComplexF64 instead.
  likely near /home/vagrant/.julia/v0.7/TensorOperations/test/methods.jl:72
WARNING: Base.Complex128 is deprecated, use ComplexF64 instead.
  likely near /home/vagrant/.julia/v0.7/TensorOperations/test/methods.jl:84
WARNING: Base.Complex128 is deprecated, use ComplexF64 instead.
  likely near /home/vagrant/.julia/v0.7/TensorOperations/test/methods.jl:100
┌ Warning: Deprecated syntax `implicit assignment to global variable `Bcopy``.
│ Use `global Bcopy` instead.
└ @ nothing none:0
WARNING: Base.Complex128 is deprecated, use ComplexF64 instead.
  likely near /home/vagrant/.julia/v0.7/TensorOperations/test/methods.jl:120
WARNING: Base.Complex64 is deprecated, use ComplexF32 instead.
  likely near /home/vagrant/.julia/v0.7/TensorOperations/test/methods.jl:122
┌ Warning: `Array{T}(d::NTuple{N, Int}) where {T, N}` is deprecated, use `Array{T}(uninitialized, d)` instead.
│   caller = contract!(::Float64, ::SubArray{Float64,4,Array{Float64,4},NTuple{4,StepRange{Int64,Int64}},false}, ::Type{Val{:N}}, ::SubArray{Complex{Float64},3,Array{Complex{Float64},3},Tuple{StepRange{Int64,Int64},StepRange{Int64,Int64},UnitRange{Int64}},false}, ::Type{Val{:C}}, ::Float64, ::SubArray{Complex{Float32},3,Array{Complex{Float32},3},Tuple{StepRange{Int64,Int64},UnitRange{Int64},StepRange{Int64,Int64}},false}, ::Tuple{Int64,Int64}, ::Tuple{Int64,Int64}, ::Tuple{Int64}, ::Tuple{Int64,Int64}, ::Tuple{Int64,Int64,Int64}, ::Type{Val{:BLAS}}) at stridedarray.jl:150
└ @ TensorOperations stridedarray.jl:150
┌ Warning: `Array{T}(d::NTuple{N, Int}) where {T, N}` is deprecated, use `Array{T}(uninitialized, d)` instead.
│   caller = contract!(::Float64, ::SubArray{Float64,4,Array{Float64,4},NTuple{4,StepRange{Int64,Int64}},false}, ::Type{Val{:N}}, ::SubArray{Complex{Float64},3,Array{Complex{Float64},3},Tuple{StepRange{Int64,Int64},StepRange{Int64,Int64},UnitRange{Int64}},false}, ::Type{Val{:C}}, ::Float64, ::SubArray{Complex{Float32},3,Array{Complex{Float32},3},Tuple{StepRange{Int64,Int64},UnitRange{Int64},StepRange{Int64,Int64}},false}, ::Tuple{Int64,Int64}, ::Tuple{Int64,Int64}, ::Tuple{Int64}, ::Tuple{Int64,Int64}, ::Tuple{Int64,Int64,Int64}, ::Type{Val{:BLAS}}) at stridedarray.jl:164
└ @ TensorOperations stridedarray.jl:164
┌ Warning: `Array{T}(m::Int, n::Int) where T` is deprecated, use `Array{T}(uninitialized, m, n)` instead.
│   caller = contract!(::Float64, ::SubArray{Float64,4,Array{Float64,4},NTuple{4,StepRange{Int64,Int64}},false}, ::Type{Val{:N}}, ::SubArray{Complex{Float64},3,Array{Complex{Float64},3},Tuple{StepRange{Int64,Int64},StepRange{Int64,Int64},UnitRange{Int64}},false}, ::Type{Val{:C}}, ::Float64, ::SubArray{Complex{Float32},3,Array{Complex{Float32},3},Tuple{StepRange{Int64,Int64},UnitRange{Int64},StepRange{Int64,Int64}},false}, ::Tuple{Int64,Int64}, ::Tuple{Int64,Int64}, ::Tuple{Int64}, ::Tuple{Int64,Int64}, ::Tuple{Int64,Int64,Int64}, ::Type{Val{:BLAS}}) at stridedarray.jl:190
└ @ TensorOperations stridedarray.jl:190
WARNING: Base.Complex64 is deprecated, use ComplexF32 instead.
  likely near /home/vagrant/.julia/v0.7/TensorOperations/test/methods.jl:137
┌ Warning: Deprecated syntax `implicit assignment to global variable `C``.
│ Use `global C` instead.
└ @ nothing none:0
┌ Warning: Deprecated syntax `implicit assignment to global variable `C``.
│ Use `global C` instead.
└ @ nothing none:0
┌ Warning: Deprecated syntax `implicit assignment to global variable `C``.
│ Use `global C` instead.
└ @ nothing none:0
WARNING: Base.Complex128 is deprecated, use ComplexF64 instead.
  likely near /home/vagrant/.julia/v0.7/TensorOperations/test/tensor.jl:55
┌ Warning: `Array{T}(d::NTuple{N, Int}) where {T, N}` is deprecated, use `Array{T}(uninitialized, d)` instead.
│   caller = contract!(::Int64, ::Array{Float64,4}, ::Type{Val{:N}}, ::Array{Complex{Float64},4}, ::Type{Val{:N}}, ::Int64, ::Array{Complex{Float64},8}, ::NTuple{4,Int64}, ::Tuple{}, ::NTuple{4,Int64}, ::Tuple{}, ::NTuple{8,Int64}, ::Type{Val{:BLAS}}) at stridedarray.jl:150
└ @ TensorOperations stridedarray.jl:150
┌ Warning: `Array{T}(m::Int, n::Int) where T` is deprecated, use `Array{T}(uninitialized, m, n)` instead.
│   caller = contract!(::Int64, ::Array{Float64,4}, ::Type{Val{:N}}, ::Array{Complex{Float64},4}, ::Type{Val{:N}}, ::Int64, ::Array{Complex{Float64},8}, ::NTuple{4,Int64}, ::Tuple{}, ::NTuple{4,Int64}, ::Tuple{}, ::NTuple{8,Int64}, ::Type{Val{:BLAS}}) at stridedarray.jl:190
└ @ TensorOperations stridedarray.jl:190
┌ Warning: Deprecated syntax `implicit assignment to global variable `C``.
│ Use `global C` instead.
└ @ nothing none:0
WARNING: Base.Complex128 is deprecated, use ComplexF64 instead.
  likely near /home/vagrant/.julia/v0.7/TensorOperations/test/tensor.jl:71
WARNING: Base.Complex128 is deprecated, use ComplexF64 instead.
  likely near /home/vagrant/.julia/v0.7/TensorOperations/test/tensor.jl:72
WARNING: Base.Complex128 is deprecated, use ComplexF64 instead.
  likely near /home/vagrant/.julia/v0.7/TensorOperations/test/tensor.jl:73
┌ Warning: `Array{T}(d::NTuple{N, Int}) where {T, N}` is deprecated, use `Array{T}(uninitialized, d)` instead.
│   caller = contract!(::Int64, ::Array{Complex{Float64},4}, ::Type{Val{:N}}, ::Array{Complex{Float64},5}, ::Type{Val{:N}}, ::Int64, ::Array{Complex{Float64},3}, ::Tuple{Int64}, ::Tuple{Int64,Int64,Int64}, ::Tuple{Int64,Int64}, ::Tuple{Int64,Int64,Int64}, ::Tuple{Int64,Int64,Int64}, ::Type{Val{:BLAS}}) at stridedarray.jl:178
└ @ TensorOperations stridedarray.jl:178
┌ Warning: `Array{T}(m::Int, n::Int) where T` is deprecated, use `Array{T}(uninitialized, m, n)` instead.
│   caller = contract!(::Int64, ::Array{Complex{Float64},4}, ::Type{Val{:N}}, ::Array{Complex{Float64},5}, ::Type{Val{:N}}, ::Int64, ::Array{Complex{Float64},3}, ::Tuple{Int64}, ::Tuple{Int64,Int64,Int64}, ::Tuple{Int64,Int64}, ::Tuple{Int64,Int64,Int64}, ::Tuple{Int64,Int64,Int64}, ::Type{Val{:BLAS}}) at stridedarray.jl:190
└ @ TensorOperations stridedarray.jl:190
WARNING: Base.Complex128 is deprecated, use ComplexF64 instead.
  likely near /home/vagrant/.julia/v0.7/TensorOperations/test/tensor.jl:75
WARNING: Base.Complex128 is deprecated, use ComplexF64 instead.
  likely near /home/vagrant/.julia/v0.7/TensorOperations/test/tensor.jl:88
WARNING: Base.Complex128 is deprecated, use ComplexF64 instead.
  likely near /home/vagrant/.julia/v0.7/TensorOperations/test/tensor.jl:105
WARNING: Base.Complex128 is deprecated, use ComplexF64 instead.
  likely near /home/vagrant/.julia/v0.7/TensorOperations/test/tensor.jl:126
┌ Warning: Deprecated syntax `implicit assignment to global variable `Bcopy``.
│ Use `global Bcopy` instead.
└ @ nothing none:0
WARNING: Base.Complex128 is deprecated, use ComplexF64 instead.
  likely near /home/vagrant/.julia/v0.7/TensorOperations/test/tensor.jl:151
WARNING: Base.Complex64 is deprecated, use ComplexF32 instead.
  likely near /home/vagrant/.julia/v0.7/TensorOperations/test/tensor.jl:153
┌ Warning: `Array{T}(d::NTuple{N, Int}) where {T, N}` is deprecated, use `Array{T}(uninitialized, d)` instead.
│   caller = contract!(::Float64, ::SubArray{Float64,4,Array{Float64,4},NTuple{4,StepRange{Int64,Int64}},false}, ::Type{Val{:N}}, ::SubArray{Complex{Float64},3,Array{Complex{Float64},3},Tuple{StepRange{Int64,Int64},StepRange{Int64,Int64},UnitRange{Int64}},false}, ::Type{Val{:C}}, ::Int64, ::SubArray{Complex{Float32},3,Array{Complex{Float32},3},Tuple{StepRange{Int64,Int64},UnitRange{Int64},StepRange{Int64,Int64}},false}, ::Tuple{Int64,Int64}, ::Tuple{Int64,Int64}, ::Tuple{Int64}, ::Tuple{Int64,Int64}, ::Tuple{Int64,Int64,Int64}, ::Type{Val{:BLAS}}) at stridedarray.jl:150
└ @ TensorOperations stridedarray.jl:150
┌ Warning: `Array{T}(d::NTuple{N, Int}) where {T, N}` is deprecated, use `Array{T}(uninitialized, d)` instead.
│   caller = contract!(::Float64, ::SubArray{Float64,4,Array{Float64,4},NTuple{4,StepRange{Int64,Int64}},false}, ::Type{Val{:N}}, ::SubArray{Complex{Float64},3,Array{Complex{Float64},3},Tuple{StepRange{Int64,Int64},StepRange{Int64,Int64},UnitRange{Int64}},false}, ::Type{Val{:C}}, ::Int64, ::SubArray{Complex{Float32},3,Array{Complex{Float32},3},Tuple{StepRange{Int64,Int64},UnitRange{Int64},StepRange{Int64,Int64}},false}, ::Tuple{Int64,Int64}, ::Tuple{Int64,Int64}, ::Tuple{Int64}, ::Tuple{Int64,Int64}, ::Tuple{Int64,Int64,Int64}, ::Type{Val{:BLAS}}) at stridedarray.jl:164
└ @ TensorOperations stridedarray.jl:164
┌ Warning: `Array{T}(m::Int, n::Int) where T` is deprecated, use `Array{T}(uninitialized, m, n)` instead.
│   caller = contract!(::Float64, ::SubArray{Float64,4,Array{Float64,4},NTuple{4,StepRange{Int64,Int64}},false}, ::Type{Val{:N}}, ::SubArray{Complex{Float64},3,Array{Complex{Float64},3},Tuple{StepRange{Int64,Int64},StepRange{Int64,Int64},UnitRange{Int64}},false}, ::Type{Val{:C}}, ::Int64, ::SubArray{Complex{Float32},3,Array{Complex{Float32},3},Tuple{StepRange{Int64,Int64},UnitRange{Int64},StepRange{Int64,Int64}},false}, ::Tuple{Int64,Int64}, ::Tuple{Int64,Int64}, ::Tuple{Int64}, ::Tuple{Int64,Int64}, ::Tuple{Int64,Int64,Int64}, ::Type{Val{:BLAS}}) at stridedarray.jl:190
└ @ TensorOperations stridedarray.jl:190
WARNING: Base.Complex64 is deprecated, use ComplexF32 instead.
  likely near /home/vagrant/.julia/v0.7/TensorOperations/test/tensor.jl:166
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = optimaltree(::Array{Array{Any,1},1}, ::Dict{Any,TensorOperations.Power{:χ,Int64}}) at optimize.jl:8
└ @ TensorOperations optimize.jl:8
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(uninitialized, m)` instead.
│   caller = _optimaltree(::Type{UInt32}, ::Array{Array{Any,1},1}, ::Array{Any,1}, ::Array{TensorOperations.Power{:χ,Int64},1}, ::TensorOperations.Poly{:χ,Int64}, ::TensorOperations.Poly{:χ,Int64}) at optimize.jl:85
└ @ TensorOperations optimize.jl:85
┌ Warning: `findin(a, b)` is deprecated, use `find(occursin(b), a)` instead.
│   caller = _optimaltree(::Type{UInt32}, ::Array{Array{Any,1},1}, ::Array{Any,1}, ::Array{TensorOperations.Power{:χ,Int64},1}, ::TensorOperations.Poly{:χ,Int64}, ::TensorOperations.Poly{:χ,Int64}) at optimize.jl:94
└ @ TensorOperations optimize.jl:94
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = _optimaltree(::Type{UInt32}, ::Array{Array{Any,1},1}, ::Array{Any,1}, ::Array{TensorOperations.Power{:χ,Int64},1}, ::TensorOperations.Poly{:χ,Int64}, ::TensorOperations.Poly{:χ,Int64}) at optimize.jl:115
└ @ TensorOperations optimize.jl:115
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = _optimaltree(::Type{UInt32}, ::Array{Array{Any,1},1}, ::Array{Any,1}, ::Array{TensorOperations.Power{:χ,Int64},1}, ::TensorOperations.Poly{:χ,Int64}, ::TensorOperations.Poly{:χ,Int64}) at optimize.jl:116
└ @ TensorOperations optimize.jl:116
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = _optimaltree(::Type{UInt32}, ::Array{Array{Any,1},1}, ::Array{Any,1}, ::Array{TensorOperations.Power{:χ,Int64},1}, ::TensorOperations.Poly{:χ,Int64}, ::TensorOperations.Poly{:χ,Int64}) at optimize.jl:117
└ @ TensorOperations optimize.jl:117
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(uninitialized, m)` instead.
│   caller = _optimaltree(::Type{UInt32}, ::Array{Array{Any,1},1}, ::Array{Any,1}, ::Array{TensorOperations.Power{:χ,Int64},1}, ::TensorOperations.Poly{:χ,Int64}, ::TensorOperations.Poly{:χ,Int64}) at optimize.jl:124
└ @ TensorOperations optimize.jl:124
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(uninitialized, m)` instead.
│   caller = _optimaltree(::Type{UInt32}, ::Array{Array{Any,1},1}, ::Array{Any,1}, ::Array{TensorOperations.Power{:χ,Int64},1}, ::TensorOperations.Poly{:χ,Int64}, ::TensorOperations.Poly{:χ,Int64}) at optimize.jl:125
└ @ TensorOperations optimize.jl:125
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(uninitialized, m)` instead.
│   caller = _optimaltree(::Type{UInt32}, ::Array{Array{Any,1},1}, ::Array{Any,1}, ::Array{TensorOperations.Power{:χ,Int64},1}, ::TensorOperations.Poly{:χ,Int64}, ::TensorOperations.Poly{:χ,Int64}) at optimize.jl:126
└ @ TensorOperations optimize.jl:126
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(uninitialized, m)` instead.
│   caller = _optimaltree(::Type{UInt64}, ::Array{Array{Any,1},1}, ::Array{Any,1}, ::Array{TensorOperations.Power{:χ,Int64},1}, ::TensorOperations.Poly{:χ,Int64}, ::TensorOperations.Poly{:χ,Int64}) at optimize.jl:85
└ @ TensorOperations optimize.jl:85
┌ Warning: `findin(a, b)` is deprecated, use `find(occursin(b), a)` instead.
│   caller = _optimaltree(::Type{UInt64}, ::Array{Array{Any,1},1}, ::Array{Any,1}, ::Array{TensorOperations.Power{:χ,Int64},1}, ::TensorOperations.Poly{:χ,Int64}, ::TensorOperations.Poly{:χ,Int64}) at optimize.jl:94
└ @ TensorOperations optimize.jl:94
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = _optimaltree(::Type{UInt64}, ::Array{Array{Any,1},1}, ::Array{Any,1}, ::Array{TensorOperations.Power{:χ,Int64},1}, ::TensorOperations.Poly{:χ,Int64}, ::TensorOperations.Poly{:χ,Int64}) at optimize.jl:115
└ @ TensorOperations optimize.jl:115
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = _optimaltree(::Type{UInt64}, ::Array{Array{Any,1},1}, ::Array{Any,1}, ::Array{TensorOperations.Power{:χ,Int64},1}, ::TensorOperations.Poly{:χ,Int64}, ::TensorOperations.Poly{:χ,Int64}) at optimize.jl:116
└ @ TensorOperations optimize.jl:116
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = _optimaltree(::Type{UInt64}, ::Array{Array{Any,1},1}, ::Array{Any,1}, ::Array{TensorOperations.Power{:χ,Int64},1}, ::TensorOperations.Poly{:χ,Int64}, ::TensorOperations.Poly{:χ,Int64}) at optimize.jl:117
└ @ TensorOperations optimize.jl:117
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(uninitialized, m)` instead.
│   caller = _optimaltree(::Type{UInt64}, ::Array{Array{Any,1},1}, ::Array{Any,1}, ::Array{TensorOperations.Power{:χ,Int64},1}, ::TensorOperations.Poly{:χ,Int64}, ::TensorOperations.Poly{:χ,Int64}) at optimize.jl:124
└ @ TensorOperations optimize.jl:124
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(uninitialized, m)` instead.
│   caller = _optimaltree(::Type{UInt64}, ::Array{Array{Any,1},1}, ::Array{Any,1}, ::Array{TensorOperations.Power{:χ,Int64},1}, ::TensorOperations.Poly{:χ,Int64}, ::TensorOperations.Poly{:χ,Int64}) at optimize.jl:125
└ @ TensorOperations optimize.jl:125
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(uninitialized, m)` instead.
│   caller = _optimaltree(::Type{UInt64}, ::Array{Array{Any,1},1}, ::Array{Any,1}, ::Array{TensorOperations.Power{:χ,Int64},1}, ::TensorOperations.Poly{:χ,Int64}, ::TensorOperations.Poly{:χ,Int64}) at optimize.jl:126
└ @ TensorOperations optimize.jl:126
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(uninitialized, m)` instead.
│   caller = _optimaltree(::Type{UInt128}, ::Array{Array{Any,1},1}, ::Array{Any,1}, ::Array{TensorOperations.Power{:χ,Int64},1}, ::TensorOperations.Poly{:χ,Int64}, ::TensorOperations.Poly{:χ,Int64}) at optimize.jl:85
└ @ TensorOperations optimize.jl:85
┌ Warning: `findin(a, b)` is deprecated, use `find(occursin(b), a)` instead.
│   caller = _optimaltree(::Type{UInt128}, ::Array{Array{Any,1},1}, ::Array{Any,1}, ::Array{TensorOperations.Power{:χ,Int64},1}, ::TensorOperations.Poly{:χ,Int64}, ::TensorOperations.Poly{:χ,Int64}) at optimize.jl:94
└ @ TensorOperations optimize.jl:94
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = _optimaltree(::Type{UInt128}, ::Array{Array{Any,1},1}, ::Array{Any,1}, ::Array{TensorOperations.Power{:χ,Int64},1}, ::TensorOperations.Poly{:χ,Int64}, ::TensorOperations.Poly{:χ,Int64}) at optimize.jl:115
└ @ TensorOperations optimize.jl:115
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = _optimaltree(::Type{UInt128}, ::Array{Array{Any,1},1}, ::Array{Any,1}, ::Array{TensorOperations.Power{:χ,Int64},1}, ::TensorOperations.Poly{:χ,Int64}, ::TensorOperations.Poly{:χ,Int64}) at optimize.jl:116
└ @ TensorOperations optimize.jl:116
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = _optimaltree(::Type{UInt128}, ::Array{Array{Any,1},1}, ::Array{Any,1}, ::Array{TensorOperations.Power{:χ,Int64},1}, ::TensorOperations.Poly{:χ,Int64}, ::TensorOperations.Poly{:χ,Int64}) at optimize.jl:117
└ @ TensorOperations optimize.jl:117
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(uninitialized, m)` instead.
│   caller = _optimaltree(::Type{UInt128}, ::Array{Array{Any,1},1}, ::Array{Any,1}, ::Array{TensorOperations.Power{:χ,Int64},1}, ::TensorOperations.Poly{:χ,Int64}, ::TensorOperations.Poly{:χ,Int64}) at optimize.jl:124
└ @ TensorOperations optimize.jl:124
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(uninitialized, m)` instead.
│   caller = _optimaltree(::Type{UInt128}, ::Array{Array{Any,1},1}, ::Array{Any,1}, ::Array{TensorOperations.Power{:χ,Int64},1}, ::TensorOperations.Poly{:χ,Int64}, ::TensorOperations.Poly{:χ,Int64}) at optimize.jl:125
└ @ TensorOperations optimize.jl:125
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(uninitialized, m)` instead.
│   caller = _optimaltree(::Type{UInt128}, ::Array{Array{Any,1},1}, ::Array{Any,1}, ::Array{TensorOperations.Power{:χ,Int64},1}, ::TensorOperations.Poly{:χ,Int64}, ::TensorOperations.Poly{:χ,Int64}) at optimize.jl:126
└ @ TensorOperations optimize.jl:126
[ Info: TensorOperations tests passed @ Base.Pkg.Entry entry.jl:737

>>> End of log
