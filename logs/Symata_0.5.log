>>> 'Pkg.add("Symata")' log
INFO: Cloning cache of Symata from https://github.com/jlapeyre/Symata.jl.git
INFO: Installing BinDeps v0.6.0
INFO: Installing Combinatorics v0.4.1
INFO: Installing Conda v0.7.0
INFO: Installing IterTools v0.1.0
INFO: Installing MacroTools v0.3.7
INFO: Installing Polynomials v0.1.6
INFO: Installing Primes v0.2.0
INFO: Installing PyCall v1.15.0
INFO: Installing SHA v0.3.3
INFO: Installing Symata v0.2.0
INFO: Installing URIParser v0.2.0
INFO: Building Conda
INFO: Building PyCall
INFO: Using the Python distribution in the Conda package by default.
To use a different Python version, set ENV["PYTHON"]="pythoncommand" and re-run Pkg.build("PyCall").
Fetching package metadata ...........
Solving package specifications: .

# All requested packages already installed.
# packages in environment at /home/vagrant/.julia/v0.5/Conda/deps/usr:
#
numpy                     1.13.3          py27_blas_openblas_200  [blas_openblas]  conda-forge
INFO: PyCall is using /home/vagrant/.julia/v0.5/Conda/deps/usr/bin/python (Python 2.7.14) at /home/vagrant/.julia/v0.5/Conda/deps/usr/bin/python, libpython = /home/vagrant/.julia/v0.5/Conda/deps/usr/lib/libpython2.7
INFO: /home/vagrant/.julia/v0.5/PyCall/deps/deps.jl has not changed
INFO: /home/vagrant/.julia/v0.5/PyCall/deps/PYTHON has not changed
INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of Symata
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("Symata")' log
Julia Version 0.5.2
Commit f4c6c9d (2017-05-06 16:34 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-132-generic #181-Ubuntu SMP Wed Sep 13 13:25:03 UTC 2017 x86_64 x86_64
Memory: 2.93927001953125 GB (771.94921875 MB free)
Uptime: 42512.0 sec
Load Avg:  1.05419921875  1.01513671875  1.0400390625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3496 MHz    2750216 s       2797 s     232756 s     717530 s         25 s
#2  3496 MHz     734483 s       4935 s      99542 s    3328255 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.7.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.5
2 required packages:
 - JSON                          0.14.0
 - Symata                        0.2.0
11 additional packages:
 - BinDeps                       0.6.0
 - Combinatorics                 0.4.1
 - Compat                        0.32.0
 - Conda                         0.7.0
 - IterTools                     0.1.0
 - MacroTools                    0.3.7
 - Polynomials                   0.1.6
 - Primes                        0.2.0
 - PyCall                        1.15.0
 - SHA                           0.3.3
 - URIParser                     0.2.0
INFO: Testing Symata
Done testing shifrin_test.sj
Done testing function_test.sj
Done testing pattern_test.sj
Done testing up_downvalue_test.sj
MethodError(*,(:a,PyObject <PyCall.jlwrap :d*((:a*:d - :b*:c)^(-1))>))
WARNING: SJ Error reading file /home/vagrant/.julia/v0.5/Symata/src/../sjtest/linalg_test.sj,  line 24
WARNING: Failed running Symata tests
LoadError("/home/vagrant/.julia/v0.5/Symata/src/../sjtest/sjruntests.jl",63,MethodError(*,(:a,PyObject <PyCall.jlwrap :d*((:a*:d - :b*:c)^(-1))>)))
Error During Test
  Test threw an exception of type LoadError
  Expression: begin 
    runtests()
    true
end
  LoadError: MethodError: no method matching *(::Symbol, ::PyCall.PyObject)
  Closest candidates are:
    *(::Any, ::Any, !Matched::Any, !Matched::Any...) at operators.jl:138
    *(!Matched::PyCall.PyObject, ::Any) at /home/vagrant/.julia/v0.5/PyCall/src/pyoperators.jl:11
    *(!Matched::Symata.Mxpr{T}, ::Any) at /home/vagrant/.julia/v0.5/Symata/src/julia_level.jl:92
    ...
   in eval(::Module, ::Any) at ./boot.jl:234
   in runtests() at /home/vagrant/.julia/v0.5/Symata/test/runtests.jl:12
   in include_from_node1(::String) at ./loading.jl:488
   in process_options(::Base.JLOptions) at ./client.jl:265
   in _start() at ./client.jl:321
  while loading /home/vagrant/.julia/v0.5/Symata/src/../sjtest/sjruntests.jl, in expression starting on line 63
ERROR: LoadError: There was an error during testing
 in record(::Base.Test.FallbackTestSet, ::Base.Test.Error) at ./test.jl:397
 in do_test(::Base.Test.Threw, ::Expr) at ./test.jl:281
 in include_from_node1(::String) at ./loading.jl:488
 in process_options(::Base.JLOptions) at ./client.jl:265
 in _start() at ./client.jl:321
while loading /home/vagrant/.julia/v0.5/Symata/test/runtests.jl, in expression starting on line 15
===============================[ ERROR: Symata ]================================

failed process: Process(`/home/vagrant/julia/bin/julia -Cx86-64 -J/home/vagrant/julia/lib/julia/sys.so --compile=yes --depwarn=yes --check-bounds=yes --code-coverage=none --color=no --compilecache=yes /home/vagrant/.julia/v0.5/Symata/test/runtests.jl`, ProcessExited(1)) [1]

================================================================================
ERROR: Symata had test errors
 in #test#61(::Bool, ::Function, ::Array{AbstractString,1}) at ./pkg/entry.jl:748
 in (::Base.Pkg.Entry.#kw##test)(::Array{Any,1}, ::Base.Pkg.Entry.#test, ::Array{AbstractString,1}) at ./<missing>:0
 in (::Base.Pkg.Dir.##2#3{Array{Any,1},Base.Pkg.Entry.#test,Tuple{Array{AbstractString,1}}})() at ./pkg/dir.jl:31
 in cd(::Base.Pkg.Dir.##2#3{Array{Any,1},Base.Pkg.Entry.#test,Tuple{Array{AbstractString,1}}}, ::String) at ./file.jl:59
 in #cd#1(::Array{Any,1}, ::Function, ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N}) at ./pkg/dir.jl:31
 in (::Base.Pkg.Dir.#kw##cd)(::Array{Any,1}, ::Base.Pkg.Dir.#cd, ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N}) at ./<missing>:0
 in #test#3(::Bool, ::Function, ::String, ::Vararg{String,N}) at ./pkg/pkg.jl:258
 in test(::String, ::Vararg{String,N}) at ./pkg/pkg.jl:258
 in eval(::Module, ::Any) at ./boot.jl:234
 in process_options(::Base.JLOptions) at ./client.jl:242
 in _start() at ./client.jl:321

>>> End of log
