>>> 'Pkg.add("CodecZlib")' log
[ Info: Installing CodecZlib v0.4.2
[ Info: Installing TranscodingStreams v0.4.1
[ Info: Package database updated

>>> 'Pkg.test("CodecZlib")' log
Julia Version 0.7.0-DEV.3519
Commit 5ecba29832 (2018-01-22 20:58 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
      Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-135-generic #184-Ubuntu SMP Wed Oct 18 11:55:51 UTC 2017 x86_64 x86_64
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
              speed         user         nice          sys         idle          irq
       #1  3500 MHz    1794410 s       5034 s      99492 s     594269 s         16 s
       #2  3500 MHz     410842 s       2786 s      42362 s    2412961 s          0 s
       
  Memory: 2.93927001953125 GB (849.90625 MB free)
  Uptime: 29268.0 sec
  Load Avg:  0.9970703125  0.9853515625  1.0078125
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant
Packages:
  Package Directory: /home/vagrant/.julia/v0.7
  Package Status:
2 required packages:
 - CodecZlib                     0.4.2
 - JSON                          0.16.4
3 additional packages:
 - Compat                        0.49.0
 - Nullables                     0.0.3
 - TranscodingStreams            0.4.1
[ Info: Testing CodecZlib
┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `contains(s, r)` instead.
│   caller = macro expansion at runtests.jl:19 [inlined]
└ @ Core runtests.jl:19
┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `contains(s, r)` instead.
│   caller = macro expansion at runtests.jl:25 [inlined]
└ @ Core runtests.jl:25
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = Type at buffer.jl:30 [inlined]
└ @ Core buffer.jl:30
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = Type at buffer.jl:30 [inlined]
└ @ Core buffer.jl:30
┌ Warning: `nb_available` is deprecated, use `bytesavailable` instead.
│   caller = readdata!(::Base.GenericIOBuffer{Base.CodeUnits{UInt8,String}}, ::TranscodingStreams.Buffer) at stream.jl:615
└ @ TranscodingStreams stream.jl:615
┌ Warning: `unsafe_copy!(dest, args...)` is deprecated, use `unsafe_copyto!(dest, args...)` instead.
│   caller = copydata! at buffer.jl:202 [inlined]
└ @ Core buffer.jl:202
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = Type at buffer.jl:30 [inlined]
└ @ Core buffer.jl:30
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = Type at buffer.jl:30 [inlined]
└ @ Core buffer.jl:30
┌ Warning: `nb_available` is deprecated, use `bytesavailable` instead.
│   caller = readdata!(::Base.GenericIOBuffer{Array{UInt8,1}}, ::TranscodingStreams.Buffer) at stream.jl:615
└ @ TranscodingStreams stream.jl:615
┌ Warning: `unsafe_copy!(dest, args...)` is deprecated, use `unsafe_copyto!(dest, args...)` instead.
│   caller = copydata! at buffer.jl:202 [inlined]
└ @ Core buffer.jl:202
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = Type at buffer.jl:30 [inlined]
└ @ Core buffer.jl:30
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = Type at buffer.jl:30 [inlined]
└ @ Core buffer.jl:30
┌ Warning: `nb_available` is deprecated, use `bytesavailable` instead.
│   caller = readdata!(::IOStream, ::TranscodingStreams.Buffer) at stream.jl:615
└ @ TranscodingStreams stream.jl:615
┌ Warning: `nb_available` is deprecated, use `bytesavailable` instead.
│   caller = readdata!(::IOStream, ::TranscodingStreams.Buffer) at stream.jl:618
└ @ TranscodingStreams stream.jl:618
┌ Warning: `unsafe_copy!(dest, args...)` is deprecated, use `unsafe_copyto!(dest, args...)` instead.
│   caller = copydata! at buffer.jl:202 [inlined]
└ @ Core buffer.jl:202
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = Type at buffer.jl:30 [inlined]
└ @ Core buffer.jl:30
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = Type at buffer.jl:30 [inlined]
└ @ Core buffer.jl:30
┌ Warning: `unsafe_copy!(dest, args...)` is deprecated, use `unsafe_copyto!(dest, args...)` instead.
│   caller = copydata! at buffer.jl:202 [inlined]
└ @ Core buffer.jl:202
┌ Warning: `unsafe_copy!(dest, args...)` is deprecated, use `unsafe_copyto!(dest, args...)` instead.
│   caller = copydata! at buffer.jl:192 [inlined]
└ @ Core buffer.jl:192
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = Type at buffer.jl:30 [inlined]
└ @ Core buffer.jl:30
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = Type at buffer.jl:30 [inlined]
└ @ Core buffer.jl:30
┌ Warning: `unsafe_copy!(dest, args...)` is deprecated, use `unsafe_copyto!(dest, args...)` instead.
│   caller = copydata! at buffer.jl:192 [inlined]
└ @ Core buffer.jl:192
WARNING: importing deprecated binding Base.srand into TranscodingStreams.
Gzip Codec: Error During Test at /home/vagrant/.julia/v0.7/CodecZlib/test/runtests.jl:16
  Got an exception of type ErrorException outside of a @test
  Base.srand has been moved to the standard library package Random.
  Restart Julia and then run `using Random` to load it.
  Stacktrace:
   [1] error(::Function, ::String, ::String, ::String, ::String, ::String, ::String) at ./error.jl:42
   [2] #srand#915 at ./deprecated.jl:138 [inlined]
   [3] srand at ./deprecated.jl:138 [inlined]
   [4] test_roundtrip_read(::Type, ::Type) at /home/vagrant/.julia/v0.7/TranscodingStreams/src/testtools.jl:9
   [5] macro expansion at /home/vagrant/.julia/v0.7/CodecZlib/test/runtests.jl:108 [inlined]
   [6] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1007 [inlined]
   [7] top-level scope at /home/vagrant/.julia/v0.7/CodecZlib/test/runtests.jl:17
   [8] include at ./boot.jl:292 [inlined]
   [9] include_relative(::Module, ::String) at ./loading.jl:1011
   [10] include(::Module, ::String) at ./sysimg.jl:26
   [11] process_options(::Base.JLOptions) at ./client.jl:334
   [12] _start() at ./client.jl:386
Test Summary: | Pass  Error  Total
Gzip Codec    |   46      1     47
ERROR: LoadError: Some tests did not pass: 46 passed, 0 failed, 1 errored, 0 broken.
in expression starting at /home/vagrant/.julia/v0.7/CodecZlib/test/runtests.jl:16
┌ Error: ------------------------------------------------------------
│ # Testing failed for CodecZlib
│   exception =
│    failed process: Process(`/home/vagrant/julia/bin/julia -Cnative -J/home/vagrant/julia/lib/julia/sys.so --compile=yes --depwarn=yes --code-coverage=none --color=no --compiled-modules=yes --check-bounds=yes --warn-overwrite=yes --startup-file=yes /home/vagrant/.julia/v0.7/CodecZlib/test/runtests.jl`, ProcessExited(1)) [1]
│    Stacktrace:
│     [1] error(::String, ::Base.Process, ::String, ::Int64, ::String) at ./error.jl:42
│     [2] pipeline_error(::Base.Process) at ./process.jl:698
│     [3] run(::Cmd) at ./process.jl:660
│     [4] (::getfield(Base.Pkg.Entry, Symbol("##89#92")){Bool,String,Array{AbstractString,1}})() at ./pkg/entry.jl:729
│     [5] cd(::getfield(Base.Pkg.Entry, Symbol("##89#92")){Bool,String,Array{AbstractString,1}}, ::String) at ./file.jl:70
│     [6] #test!#88(::Bool, ::Function, ::String, ::Array{AbstractString,1}, ::Array{AbstractString,1}, ::Array{AbstractString,1}) at ./pkg/entry.jl:717
│     [7] (::getfield(Base.Pkg.Entry, Symbol("#kw##test!")))(::NamedTuple{(:coverage,),Tuple{Bool}}, ::typeof(Base.Pkg.Entry.test!), ::String, ::Array{AbstractString,1}, ::Array{AbstractString,1}, ::Array{AbstractString,1}) at ./<missing>:0
│     [8] #test#96(::Bool, ::Function, ::Array{AbstractString,1}) at ./pkg/entry.jl:756
│     [9] (::getfield(Base.Pkg.Entry, Symbol("#kw##test")))(::NamedTuple{(:coverage,),Tuple{Bool}}, ::typeof(Base.Pkg.Entry.test), ::Array{AbstractString,1}) at ./<missing>:0
│     [10] (::getfield(Base.Pkg.Dir, Symbol("##4#7")){Base.Iterators.IndexValue{Symbol,Bool,Tuple{Symbol},NamedTuple{(:coverage,),Tuple{Bool}}},typeof(Base.Pkg.Entry.test),Tuple{Array{AbstractString,1}}})() at ./pkg/dir.jl:36
│     [11] cd(::getfield(Base.Pkg.Dir, Symbol("##4#7")){Base.Iterators.IndexValue{Symbol,Bool,Tuple{Symbol},NamedTuple{(:coverage,),Tuple{Bool}}},typeof(Base.Pkg.Entry.test),Tuple{Array{AbstractString,1}}}, ::String) at ./file.jl:70
│     [12] #cd#1(::Base.Iterators.IndexValue{Symbol,Bool,Tuple{Symbol},NamedTuple{(:coverage,),Tuple{Bool}}}, ::Function, ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N} where N) at ./pkg/dir.jl:36
│     [13] (::getfield(Base.Pkg.Dir, Symbol("#kw##cd")))(::NamedTuple{(:coverage,),Tuple{Bool}}, ::typeof(Base.Pkg.Dir.cd), ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N} where N) at ./<missing>:0
│     [14] #test#3(::Bool, ::Function, ::String, ::Vararg{String,N} where N) at ./pkg/pkg.jl:274
│     [15] test(::String, ::Vararg{String,N} where N) at ./pkg/pkg.jl:274
│     [16] top-level scope
│     [17] eval at ./boot.jl:295 [inlined]
│     [18] eval(::Module, ::Expr) at ./sysimg.jl:71
│     [19] process_options(::Base.JLOptions) at ./client.jl:311
│     [20] _start() at ./client.jl:386
└ @ Base.Pkg.Entry entry.jl:732
ERROR: CodecZlib had test errors

>>> End of log
