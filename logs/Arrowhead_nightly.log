>>> 'Pkg.add("Arrowhead")' log
INFO: Installing Arrowhead v0.0.1
INFO: Installing DoubleDouble v0.1.0
INFO: Package database updated

>>> 'using Arrowhead' log
Warning: New definition 
    call
is ambiguous with: 
    call at rounding.jl:62.
To fix, define 
    call
before the new definition.
(Type{Double{T<:Union(Float64,Float32)}},Any,Any)(Type{T<:FloatingPoint},Real,RoundingMode{T})(Type{Double{T<:Union(Float64,Float32)}},Real,RoundingMode{T})Julia Version 0.4.0-dev+1642
Commit aa1f53b (2014-11-17 08:38 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E5-2650 0 @ 2.00GHz
  WORD_SIZE: 64
  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Sandybridge)
  LAPACK: libopenblas
  LIBM: libopenlibm
  LLVM: libLLVM-3.3

>>> test log
Warning: New definition 
    call
is ambiguous with: 
    call at rounding.jl:62.
To fix, define 
    call
before the new definition.
There are four tests for arrowhead matrices, a random matrix test and three
tests from the arrowhead paper [1] (see README for details)

tols = [100.0,100.0,100.0,100.0,100.0] = [100.0,100.0,100.0,100.0,100.0]

1st test - Random SymArrow matrix

A = Arrowhead.GenSymArrow(10,10) = [0.28211451772501395 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.5821484508636745
 0.0 0.15804025898788687 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.9436835484464459
 0.0 0.0 0.5176704393440394 0.0 0.0 0.0 0.0 0.0 0.0 0.7768334390651677
 0.0 0.0 0.0 0.2174394311935779 0.0 0.0 0.0 0.0 0.0 0.13523509836435
 0.0 0.0 0.0 0.0 0.5485803474320952 0.0 0.0 0.0 0.0 0.22536308251840786
 0.0 0.0 0.0 0.0 0.0 0.327373031235231 0.0 0.0 0.0 0.9104964635899628
... truncated ...
 2.0e-7 9.999999999999998e-15 1.99999990000001 2.0e-7
 4.0 2.0e-7 2.0e-7 5.0]
(Ua,Lambdaa,Sind,Kb,Kz,Knu,Krho,Qout) = dpr1eigall(A,tols) = (
[-0.7999999999999988 0.20889321381638568 0.5222329678004558 0.20889316064388422
 -3.360000040319997e-8 -0.9351941398441738 0.34815531248360626 0.06480585768707446
 -3.359999959679996e-8 -0.06480586264549802 -0.348155311616842 0.9351941398232515
 -0.5999999999999995 -0.2785242290885133 -0.6963106237339411 -0.2785242701918447],

[10.33333333333335,2.0000001148912534,2.0,1.9999998851087477],[1,2,2,3],[3.7999999999999416,1.3913043861207293e7,1.3913043861207293e7,1.3913043298649127e7],[1.0000000999999998,4.000000099999999e7,4.000000099999999e7,4.000000099999999e7],[6.000000000000014,1.4518971715911815,9.74999965042207,1.4518971502576907],[0.0,0.0,0.0,0.0],[0,1,1,1])

 There is one test for SVD of HalfArrow matrices

HalfArrow with entries varying in magnitude

A = HalfArrow(sort(exp(20 * (rand(8) - 0.5)),rev=true),exp(20 * (rand(8) - 0.5))) = [18163.913494507407 0.0 0.0 0.0 0.0 0.0 0.0 0.0 6.612550915088864e-5
 0.0 32.25832339813401 0.0 0.0 0.0 0.0 0.0 0.0 0.0007374627230244673
 0.0 0.0 5.9691866937646605 0.0 0.0 0.0 0.0 0.0 0.17709190069375458
 0.0 0.0 0.0 0.013481008549445343 0.0 0.0 0.0 0.0 5228.804327731978
 0.0 0.0 0.0 0.0 0.003823758906159255 0.0 0.0 0.0 0.005755960028674608
 0.0 0.0 0.0 0.0 0.0 0.000943328156229276 0.0 0.0 1.586790940382473
 0.0 0.0 0.0 0.0 0.0 0.0 0.0001910235803420293 0.0 5.129207949412247
 0.0 0.0 0.0 0.0 0.0 0.0 0.0 9.770888654301286e-5 0.857072592779855]
Remedy 3 
(Ua,Lambdaa,Va,Sind,Kb,Kz,Knu,Krho,Qout) = ahsvdall(A,tols) = (
[-1.0 1.1426702384340644e-9 5.625827462216438e-21 4.6256455427225453e-20 7.051602177728348e-27 2.1041130241674024e-24 6.83316735866795e-24 1.134400323844402e-24
 -1.6116091835099573e-16 -1.410437926512583e-7 0.9999999999999901 1.6935961604388295e-13 2.4934124276172112e-20 7.440041797751168e-18 2.4161748981118126e-17 4.0111846277765545e-18
 -3.870054108880141e-14 -3.386855283663711e-5 -4.946308759635628e-12 0.9999999994264606 1.7486632258474493e-16 5.217798108462246e-14 1.6944948515398273e-13 2.8130958982562883e-14
 -1.142669620033864e-9 -0.9999994588113174 -1.4104371631424602e-7 -3.386853452697193e-5 1.1008313477472677e-6 0.0003035346457902646 0.000981108698772576 0.00016285331780961358
 -1.2578708719332154e-15 -1.1008170420627839e-6 -1.552633856876047e-13 -3.7282905310207744e-11 -0.9999999999993942 4.400749613218257e-9 1.3455476343023214e-8 2.2296502471265414e-9
 -3.4676719327638335e-13 -0.0003034709241657465 -4.2802682663510534e-11 -1.0278068868438525e-8 -4.065807513301893e-9 -0.9999999518904126 6.340728402867944e-5 1.0202279424327101e-5
 -1.1209044613778034e-12 -0.0009809518299059557 -1.383571423346329e-10 -3.322324947814083e-8 -1.2373488315954795e-8 -6.309853422479306e-5 -0.9999989361538063 0.0010777028056210623
 -1.8729918974754502e-13 -0.00016391359768246105 -2.3118991446013262e-11 -5.55148803287133e-9 -2.0637538593144524e-9 -1.0220854848257941e-5 -0.0010775418755024865 -0.9999994059655102],

[18163.913494507407,5228.80715752061,32.25832339813369,5.969186690341118,0.003823758906185736,0.00094333698588546,0.0001914807593493899,9.773370728787621e-5],
[-1.0 3.969426054241069e-9 3.167772921658897e-18 1.4075590168794778e-16 3.349706273236364e-20 4.0514606684025015e-17 6.481959922138349e-16 2.1082950726260807e-16
 -2.8621480854765973e-19 -8.701480355992097e-10 1.0 9.15243155950811e-13 2.1035140140473968e-16 2.5441944713130616e-13 4.070474313689454e-12 1.323945387145783e-12
 -1.2718115783728067e-17 -3.8664213240058216e-8 -9.152813079236714e-13 0.9999999999999964 2.7298000516503173e-13 3.301684499367759e-10 5.28238772126871e-9 1.718127253138427e-9
 -8.480737877069338e-16 -2.578217334767513e-6 -5.894328486978653e-11 -7.648981799381471e-8 3.881080678614704e-6 0.004337742732636019 0.06907396231886957 0.02246335507595424
 -2.647994855738206e-22 -8.050132356832602e-13 -1.8404234668245834e-17 -2.3882791512967773e-14 -0.9999999999924687 1.7838170006156624e-8 2.6869800223305886e-7 8.72334144141066e-8
 -1.8009073714930884e-20 -5.474913469522798e-11 -1.2516762021479455e-15 -1.6242734995959e-12 -1.0030419802100127e-9 -0.9999905918675457 0.00031237538715385703 9.847265294396774e-5
 -1.178816357490854e-20 -3.58370322420831e-11 -8.193072023136334e-16 -1.0631974496928059e-12 -6.181425391674892e-10 -1.2777308747881065e-5 -0.9976113410630731 0.0021064037596363948
 -1.0075359192926732e-21 -3.0629959446442857e-12 -7.002629629282238e-17 -9.087162832860241e-14 -5.273530487663699e-11 -1.0586549257407115e-6 -0.0005498485446608566 -0.9997454431229275
 -3.9694260542520764e-9 -0.9999999999966758 -8.701478835981151e-10 -3.86640160328126e-8 -9.201256180914224e-12 -1.1128894439109668e-8 -1.780519512249422e-7 -5.791243018287098e-8],

[1,2,2,3,5,6,7,8],[1.0000000000000997,1.0000000000000002,1.0000000000000002,1.0000000000000415,23.85988813699524,407.552873512525,10009.535844834769,37844.14100553631],[58.687596018355734,2963.0768123486514,2963.0768123486514,66.68235245828683,3.202701794789095e6,47091.47183973998,71942.82487830568,841730.5740343682],[1.0000000039694266,1.3207292253510031e18,1.0000000009300087,1.0000001151575444,1.0000038827490099,1.0043328322758327,1.0653130526123882,1.0241649715601244],[0.0,1.0000000000000004,0.0,0.0,0.0,0.0,0.0,0.0],[0,0,0,0,0,0,1,1])
N1 = norm(Ua' * Ua - eye(8)) = 4.442526847048418e-16
N2 = norm(Va' * Va - eye(8)) = 3.3323417469126517e-16
(Type{Double{T<:Union(Float64,Float32)}},Any,Any)(Type{T<:FloatingPoint},Real,RoundingMode{T})(Type{Double{T<:Union(Float64,Float32)}},Real,RoundingMode{T})INFO: Testing Arrowhead
INFO: Arrowhead tests passed
INFO: No packages to install, update or remove

>>> end of log
