>>> 'Pkg.add("GeographicLibPy")' log
INFO: Cloning cache of GeographicLibPy from https://github.com/kshramt/GeographicLibPy.jl.git
INFO: Installing BinDeps v0.8.8
INFO: Installing Conda v0.8.1
INFO: Installing GeographicLibPy v0.0.3
INFO: Installing MacroTools v0.4.2
INFO: Installing PyCall v1.17.1
INFO: Installing SHA v0.5.7
INFO: Installing URIParser v0.3.1
INFO: Installing VersionParsing v1.1.1
INFO: Building Conda
INFO: Building PyCall
Info: Using the Python distribution in the Conda package by default.
To use a different Python version, set ENV["PYTHON"]="pythoncommand" and re-run Pkg.build("PyCall").
Solving environment: ...working... done

# All requested packages already installed.

Info: PyCall is using /home/vagrant/.julia/v0.6/Conda/deps/usr/bin/python (Python 2.7.15) at /home/vagrant/.julia/v0.6/Conda/deps/usr/bin/python, libpython = /home/vagrant/.julia/v0.6/Conda/deps/usr/lib/libpython2.7
Info: /home/vagrant/.julia/v0.6/PyCall/deps/deps.jl has not changed
Info: /home/vagrant/.julia/v0.6/PyCall/deps/PYTHON has not changed
INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of GeographicLibPy
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("GeographicLibPy")' log
Julia Version 0.6.3
Commit d55cadc350 (2018-05-28 20:20 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-143-generic #192-Ubuntu SMP Tue Feb 27 10:45:36 UTC 2018 x86_64 x86_64
Memory: 2.939197540283203 GB (1215.73046875 MB free)
Uptime: 6567.0 sec
Load Avg:  0.9482421875  0.97119140625  0.95068359375
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz     372908 s         40 s      35078 s     181542 s          7 s
#2  3500 MHz     109208 s        141 s      21824 s     512734 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.6
2 required packages:
 - GeographicLibPy               0.0.3
 - JSON                          0.17.2
9 additional packages:
 - BinDeps                       0.8.8
 - Compat                        0.69.0
 - Conda                         0.8.1
 - MacroTools                    0.4.2
 - Nullables                     0.0.5
 - PyCall                        1.17.1
 - SHA                           0.5.7
 - URIParser                     0.3.1
 - VersionParsing                1.1.1
INFO: Testing GeographicLibPy
ERROR: LoadError: InitError: PyError (PyImport_ImportModule

The Python package geographiclib could not be found by pyimport. Usually this means
that you did not install geographiclib in the Python version being used by PyCall.

PyCall is currently configured to use the Julia-specific Python distribution
installed by the Conda.jl package.  To install the geographiclib module, you can
use `pyimport_conda("geographiclib", PKG)`, where PKG is the Anaconda
package the contains the module geographiclib, or alternatively you can use the
Conda package directly (via `using Conda` followed by `Conda.add` etcetera).

Alternatively, if you want to use a different Python distribution on your
system, such as a system-wide Python (as opposed to the Julia-specific Python),
you can re-configure PyCall with that Python.   As explained in the PyCall
documentation, set ENV["PYTHON"] to the path/name of the python executable
you want to use, run Pkg.build("PyCall"), and re-launch Julia.

) <type 'exceptions.ImportError'>
ImportError('No module named geographiclib',)

Stacktrace:
 [1] pyimport(::String) at /home/vagrant/.julia/v0.6/PyCall/src/PyCall.jl:473
 [2] __init__() at /home/vagrant/.julia/v0.6/GeographicLibPy/src/GeographicLibPy.jl:16
 [3] _include_from_serialized(::String) at ./loading.jl:157
 [4] _require_from_serialized(::Int64, ::Symbol, ::String, ::Bool) at ./loading.jl:200
 [5] _require(::Symbol) at ./loading.jl:498
 [6] require(::Symbol) at ./loading.jl:405
 [7] include_from_node1(::String) at ./loading.jl:576
 [8] include(::String) at ./sysimg.jl:14
 [9] process_options(::Base.JLOptions) at ./client.jl:305
 [10] _start() at ./client.jl:371
during initialization of module GeographicLibPy
while loading /home/vagrant/.julia/v0.6/GeographicLibPy/test/runtests.jl, in expression starting on line 3
===========================[ ERROR: GeographicLibPy ]===========================

failed process: Process(`/home/vagrant/julia/bin/julia -Cgeneric -J/home/vagrant/julia/lib/julia/sys.so --compile=yes --depwarn=yes --check-bounds=yes --code-coverage=none --color=no --compilecache=yes /home/vagrant/.julia/v0.6/GeographicLibPy/test/runtests.jl`, ProcessExited(1)) [1]

================================================================================
ERROR: GeographicLibPy had test errors

>>> End of log
