>>> 'Pkg.add("PolynomialRoots")' log
WARNING: Base.Pkg is deprecated, run `using Pkg` instead
 in module Main
[ Info: Cloning cache of PolynomialRoots from https://github.com/giordano/PolynomialRoots.jl.git
[ Info: Installing PolynomialRoots v0.1.0
[ Info: Package database updated

>>> 'Pkg.test("PolynomialRoots")' log
WARNING: Base.versioninfo is deprecated: it has been moved to the standard library package `InteractiveUtils`.
Add `using InteractiveUtils` to your imports.
 in module Main
WARNING: Base.versioninfo is deprecated: it has been moved to the standard library package `InteractiveUtils`.
Add `using InteractiveUtils` to your imports.
 in module Main
Julia Version 0.7.0-DEV.4033
Commit a237986bf9 (2018-02-20 19:08 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
      Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-135-generic #184-Ubuntu SMP Wed Oct 18 11:55:51 UTC 2017 x86_64 x86_64
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
              speed         user         nice          sys         idle          irq
       #1  3500 MHz     692105 s         62 s      46108 s     288535 s          7 s
       #2  3500 MHz     191610 s        101 s      21688 s     950228 s          0 s
       
  Memory: 2.93927001953125 GB (858.26953125 MB free)
  Uptime: 11909.0 sec
  Load Avg:  0.96142578125  1.0146484375  1.0400390625
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant
Packages:
  Package Directory: /home/vagrant/.julia/v0.7
  Package Status:
2 required packages:
 - JSON                          0.16.4
 - PolynomialRoots               0.1.0
2 additional packages:
 - Compat                        0.54.0
 - Nullables                     0.0.3
WARNING: Base.Pkg is deprecated, run `using Pkg` instead
 in module Main
[ Info: Testing PolynomialRoots
┌ Warning: Deprecated syntax `parametric method syntax divide_poly_1{T <: AbstractFloat}(p::Complex{T}, poly::Vector{Complex{T}}, degree::Integer)` around /home/vagrant/.julia/v0.7/PolynomialRoots/src/PolynomialRoots.jl:88.
│ Use `divide_poly_1(p::Complex{T}, poly::Vector{Complex{T}}, degree::Integer) where T <: AbstractFloat` instead.
└ @ nothing PolynomialRoots.jl:88
┌ Warning: Deprecated syntax `parametric method syntax solve_quadratic_eq{T <: AbstractFloat}(poly::Vector{Complex{T}})` around /home/vagrant/.julia/v0.7/PolynomialRoots/src/PolynomialRoots.jl:100.
│ Use `solve_quadratic_eq(poly::Vector{Complex{T}}) where T <: AbstractFloat` instead.
└ @ nothing PolynomialRoots.jl:100
┌ Warning: Deprecated syntax `parametric method syntax solve_cubic_eq{T <: AbstractFloat}(poly::Vector{Complex{T}})` around /home/vagrant/.julia/v0.7/PolynomialRoots/src/PolynomialRoots.jl:119.
│ Use `solve_cubic_eq(poly::Vector{Complex{T}}) where T <: AbstractFloat` instead.
└ @ nothing PolynomialRoots.jl:119
┌ Warning: Deprecated syntax `parametric method syntax newton_spec{T <: AbstractFloat, E <: AbstractFloat}(poly::Vector{Complex{T}}, degree::Integer, root::Complex{T}, epsilon::E)` around /home/vagrant/.julia/v0.7/PolynomialRoots/src/PolynomialRoots.jl:148.
│ Use `newton_spec(poly::Vector{Complex{T}}, degree::Integer, root::Complex{T}, epsilon::E) where {T <: AbstractFloat, E <: AbstractFloat}` instead.
└ @ nothing PolynomialRoots.jl:148
┌ Warning: Deprecated syntax `parametric method syntax laguerre{T <: AbstractFloat, E <: AbstractFloat}(poly::Vector{Complex{T}}, degree::Integer, root::Complex{T}, epsilon::E)` around /home/vagrant/.julia/v0.7/PolynomialRoots/src/PolynomialRoots.jl:224.
│ Use `laguerre(poly::Vector{Complex{T}}, degree::Integer, root::Complex{T}, epsilon::E) where {T <: AbstractFloat, E <: AbstractFloat}` instead.
└ @ nothing PolynomialRoots.jl:224
┌ Warning: Deprecated syntax `parametric method syntax laguerre2newton{T <: AbstractFloat, E <: AbstractFloat}(poly::Vector{Complex{T}}, degree::Integer, root::Complex{T}, starting_mode::Integer, epsilon::E)` around /home/vagrant/.julia/v0.7/PolynomialRoots/src/PolynomialRoots.jl:305.
│ Use `laguerre2newton(poly::Vector{Complex{T}}, degree::Integer, root::Complex{T}, starting_mode::Integer, epsilon::E) where {T <: AbstractFloat, E <: AbstractFloat}` instead.
└ @ nothing PolynomialRoots.jl:305
┌ Warning: Use of final value of loop variable `i` around /home/vagrant/.julia/v0.7/PolynomialRoots/src/PolynomialRoots.jl:402 is deprecated. In the future the variable will be local to the loop instead.
└ @ nothing PolynomialRoots.jl:402
┌ Warning: Use of final value of loop variable `i` around /home/vagrant/.julia/v0.7/PolynomialRoots/src/PolynomialRoots.jl:488 is deprecated. In the future the variable will be local to the loop instead.
└ @ nothing PolynomialRoots.jl:488
┌ Warning: Deprecated syntax `parametric method syntax find_2_closest_from_5{T <: AbstractFloat}(points::Vector{Complex{T}})` around /home/vagrant/.julia/v0.7/PolynomialRoots/src/PolynomialRoots.jl:568.
│ Use `find_2_closest_from_5(points::Vector{Complex{T}}) where T <: AbstractFloat` instead.
└ @ nothing PolynomialRoots.jl:568
┌ Warning: Deprecated syntax `parametric method syntax sort_5_points_by_separation_i{T <: AbstractFloat}(points::Vector{Complex{T}})` around /home/vagrant/.julia/v0.7/PolynomialRoots/src/PolynomialRoots.jl:584.
│ Use `sort_5_points_by_separation_i(points::Vector{Complex{T}}) where T <: AbstractFloat` instead.
└ @ nothing PolynomialRoots.jl:584
┌ Warning: Deprecated syntax `parametric method syntax sort_5_points_by_separation!{T <: AbstractFloat}(points::Vector{Complex{T}})` around /home/vagrant/.julia/v0.7/PolynomialRoots/src/PolynomialRoots.jl:597.
│ Use `sort_5_points_by_separation!(points::Vector{Complex{T}}) where T <: AbstractFloat` instead.
└ @ nothing PolynomialRoots.jl:597
┌ Warning: Deprecated syntax `parametric method syntax roots!{T <: AbstractFloat, E <: AbstractFloat}(roots::Vector{Complex{T}}, poly::Vector{Complex{T}}, epsilon::E, degree::Integer, polish::Bool)` around /home/vagrant/.julia/v0.7/PolynomialRoots/src/PolynomialRoots.jl:607.
│ Use `roots!(roots::Vector{Complex{T}}, poly::Vector{Complex{T}}, epsilon::E, degree::Integer, polish::Bool) where {T <: AbstractFloat, E <: AbstractFloat}` instead.
└ @ nothing PolynomialRoots.jl:607
┌ Warning: Deprecated syntax `parametric method syntax roots{N1 <: Number, N2 <: Number, E <: AbstractFloat}(poly::Vector{N1}, roots::Vector{N2}; epsilon::E = NaN, polish::Bool = false)` around /home/vagrant/.julia/v0.7/PolynomialRoots/src/PolynomialRoots.jl:645.
│ Use `roots(poly::Vector{N1}, roots::Vector{N2}; epsilon::E = NaN, polish::Bool = false) where {N1 <: Number, N2 <: Number, E <: AbstractFloat}` instead.
└ @ nothing PolynomialRoots.jl:645
┌ Warning: Deprecated syntax `parametric method syntax roots{N <: Number, E <: AbstractFloat}(poly::Vector{N},; epsilon::E = NaN, polish::Bool = false)` around /home/vagrant/.julia/v0.7/PolynomialRoots/src/PolynomialRoots.jl:654.
│ Use `roots(poly::Vector{N},; epsilon::E = NaN, polish::Bool = false) where {N <: Number, E <: AbstractFloat}` instead.
└ @ nothing PolynomialRoots.jl:654
┌ Warning: Deprecated syntax `parametric method syntax roots5!{T <: AbstractFloat, E <: AbstractFloat}(roots::Vector{Complex{T}}, poly::Vector{Complex{T}}, epsilon::E, polish::Bool)` around /home/vagrant/.julia/v0.7/PolynomialRoots/src/PolynomialRoots.jl:662.
│ Use `roots5!(roots::Vector{Complex{T}}, poly::Vector{Complex{T}}, epsilon::E, polish::Bool) where {T <: AbstractFloat, E <: AbstractFloat}` instead.
└ @ nothing PolynomialRoots.jl:662
┌ Warning: Deprecated syntax `parametric method syntax roots5{N1 <: Number, N2 <: Number, E <: AbstractFloat}(poly::Vector{N1}, roots::Vector{N2}; epsilon::E = NaN)` around /home/vagrant/.julia/v0.7/PolynomialRoots/src/PolynomialRoots.jl:764.
│ Use `roots5(poly::Vector{N1}, roots::Vector{N2}; epsilon::E = NaN) where {N1 <: Number, N2 <: Number, E <: AbstractFloat}` instead.
└ @ nothing PolynomialRoots.jl:764
┌ Warning: Deprecated syntax `parametric method syntax roots5{N <: Number, E <: AbstractFloat}(poly::Vector{N},; epsilon::E = NaN)` around /home/vagrant/.julia/v0.7/PolynomialRoots/src/PolynomialRoots.jl:771.
│ Use `roots5(poly::Vector{N},; epsilon::E = NaN) where {N <: Number, E <: AbstractFloat}` instead.
└ @ nothing PolynomialRoots.jl:771
┌ Warning: Deprecated syntax `parametric method syntax evalpoly{T <: AbstractFloat}(z::Complex{T}, u::Vector{Complex{T}})` around /home/vagrant/.julia/v0.7/PolynomialRoots/src/PolynomialRoots.jl:838.
│ Use `evalpoly(z::Complex{T}, u::Vector{Complex{T}}) where T <: AbstractFloat` instead.
└ @ nothing PolynomialRoots.jl:838
┌ Warning: Deprecated syntax `parametric method syntax evalpoly{Z <: AbstractFloat, U <: Number}(z::Complex{Z}, u::Vector{U})` around /home/vagrant/.julia/v0.7/PolynomialRoots/src/PolynomialRoots.jl:853.
│ Use `evalpoly(z::Complex{Z}, u::Vector{U}) where {Z <: AbstractFloat, U <: Number}` instead.
└ @ nothing PolynomialRoots.jl:853
┌ Warning: Deprecated syntax `parametric method syntax evalpoly{Z, U}(z::Vector{Complex{Z}}, u::Vector{U})` around /home/vagrant/.julia/v0.7/PolynomialRoots/src/PolynomialRoots.jl:856.
│ Use `evalpoly(z::Vector{Complex{Z}}, u::Vector{U}) where {Z, U}` instead.
└ @ nothing PolynomialRoots.jl:856
WARNING: Base.Test is deprecated, run `using Test` instead
  likely near /home/vagrant/.julia/v0.7/PolynomialRoots/test/runtests.jl:23
WARNING: Base.Complex128 is deprecated, use ComplexF64 instead.
  likely near /home/vagrant/.julia/v0.7/PolynomialRoots/test/runtests.jl:27
in top-level scope at /home/vagrant/.julia/v0.7/PolynomialRoots/test/runtests.jl
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(uninitialized, m)` instead.
│   caller = macro expansion at runtests.jl:30 [inlined]
└ @ Core runtests.jl:30
Test Summary:         | Pass  Total
0th-order polynomials |    1      1
Test Summary:         | Pass  Total
1st-order polynomials |    1      1
Test Summary:         | Pass  Total
2nd-order polynomials |    5      5
Test Summary:         | Pass  Total
3rd-order polynomials |    5      5
Test Summary:         | Pass  Total
4th-order polynomials |    5      5
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(uninitialized, m)` instead.
│   caller = sort_5_points_by_separation_i(::Array{Complex{Float64},1}) at PolynomialRoots.jl:586
└ @ PolynomialRoots PolynomialRoots.jl:586
5th-order polynomials: Test Failed at /home/vagrant/.julia/v0.7/PolynomialRoots/test/runtests.jl:123
  Expression: isapprox(zeros(length(poly) - 1), evalpoly(#= /home/vagrant/.julia/v0.7/PolynomialRoots/test/runtests.jl:124 =# @inferred(roots5(poly, ones(5))), poly), atol=2.0e-14)
   Evaluated: isapprox([0.0, 0.0, 0.0, 0.0, 0.0], Complex{Float64}[0.0-8.88178e-16im, -3.55271e-15-5.32907e-15im, -3.55271e-15+3.55271e-15im, 1.77636e-14+1.42109e-14im, 1.06581e-14+0.0im]; atol=2.0e-14)
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.7/PolynomialRoots/test/runtests.jl:123 [inlined]
 [2] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1012 [inlined]
 [3] top-level scope at /home/vagrant/.julia/v0.7/PolynomialRoots/test/runtests.jl:98
Test Summary:         | Pass  Fail  Total
5th-order polynomials |   13     1     14
ERROR: LoadError: Some tests did not pass: 13 passed, 1 failed, 0 errored, 0 broken.
in expression starting at /home/vagrant/.julia/v0.7/PolynomialRoots/test/runtests.jl:97
┌ Error: ------------------------------------------------------------
│ # Testing failed for PolynomialRoots
│   exception =
│    failed process: Process(`/home/vagrant/julia/bin/julia -Cnative -J/home/vagrant/julia/lib/julia/sys.so --compile=yes --depwarn=yes --code-coverage=none --color=no --compiled-modules=yes --check-bounds=yes --warn-overwrite=yes --startup-file=yes /home/vagrant/.julia/v0.7/PolynomialRoots/test/runtests.jl`, ProcessExited(1)) [1]
│    Stacktrace:
│     [1] error(::String, ::Base.Process, ::String, ::Int64, ::String) at ./error.jl:42
│     [2] pipeline_error(::Base.Process) at ./process.jl:693
│     [3] run(::Cmd) at ./process.jl:655
│     [4] (::getfield(Pkg.Entry, Symbol("##56#57")){Bool,String,Array{AbstractString,1}})() at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Pkg/src/entry.jl:731
│     [5] cd(::getfield(Pkg.Entry, Symbol("##56#57")){Bool,String,Array{AbstractString,1}}, ::String) at ./file.jl:70
│     [6] #test!#55(::Bool, ::Function, ::String, ::Array{AbstractString,1}, ::Array{AbstractString,1}, ::Array{AbstractString,1}) at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Pkg/src/entry.jl:719
│     [7] (::getfield(Pkg.Entry, Symbol("#kw##test!")))(::NamedTuple{(:coverage,),Tuple{Bool}}, ::typeof(Pkg.Entry.test!), ::String, ::Array{AbstractString,1}, ::Array{AbstractString,1}, ::Array{AbstractString,1}) at ./<missing>:0
│     [8] #test#59(::Bool, ::Function, ::Array{AbstractString,1}) at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Pkg/src/entry.jl:758
│     [9] #test at ./<missing>:0 [inlined]
│     [10] #4 at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Pkg/src/dir.jl:36 [inlined]
│     [11] cd(::getfield(Pkg.Dir, Symbol("##4#7")){Base.Iterators.Pairs{Symbol,Bool,Tuple{Symbol},NamedTuple{(:coverage,),Tuple{Bool}}},typeof(Pkg.Entry.test),Tuple{Array{AbstractString,1}}}, ::String) at ./file.jl:70
│     [12] #cd#1(::Base.Iterators.Pairs{Symbol,Bool,Tuple{Symbol},NamedTuple{(:coverage,),Tuple{Bool}}}, ::Function, ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N} where N) at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Pkg/src/dir.jl:36
│     [13] (::getfield(Pkg.Dir, Symbol("#kw##cd")))(::NamedTuple{(:coverage,),Tuple{Bool}}, ::typeof(Pkg.Dir.cd), ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N} where N) at ./<missing>:0
│     [14] #test#3(::Bool, ::Function, ::String, ::Vararg{String,N} where N) at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Pkg/src/Pkg.jl:277
│     [15] test(::String, ::Vararg{String,N} where N) at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Pkg/src/Pkg.jl:277
│     [16] top-level scope
│     [17] eval at ./boot.jl:298 [inlined]
│     [18] eval(::Module, ::Expr) at ./sysimg.jl:72
│     [19] exec_options(::Base.JLOptions) at ./client.jl:309
│     [20] _start() at ./client.jl:448
└ @ Pkg.Entry entry.jl:734
ERROR: PolynomialRoots had test errors

>>> End of log
