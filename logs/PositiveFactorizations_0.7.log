>>> 'Pkg.add("PositiveFactorizations")' log
[ Info: Installing PositiveFactorizations v0.1.0
[ Info: Package database updated

>>> 'Pkg.test("PositiveFactorizations")' log
Julia Version 0.7.0-DEV.3421
Commit 2042dcfc2e (2018-01-16 23:39 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
      Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-135-generic #184-Ubuntu SMP Wed Oct 18 11:55:51 UTC 2017 x86_64 x86_64
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
              speed         user         nice          sys         idle          irq
       #1  3499 MHz     835508 s        108 s      49163 s     308986 s         10 s
       #2  3499 MHz     199559 s         48 s      21725 s    1141590 s          0 s
       
  Memory: 2.93927001953125 GB (1153.21875 MB free)
  Uptime: 13847.0 sec
  Load Avg:  1.02001953125  1.00244140625  1.02392578125
  WORD_SIZE: 64
  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant
Packages:
  Package Directory: /home/vagrant/.julia/v0.7
  Package Status:
2 required packages:
 - JSON                          0.16.4
 - PositiveFactorizations        0.1.0
2 additional packages:
 - Compat                        0.46.0
 - Nullables                     0.0.3
[ Info: Testing PositiveFactorizations
┌ Warning: Deprecated syntax `immutable` at /home/vagrant/.julia/v0.7/PositiveFactorizations/src/PositiveFactorizations.jl:10.
│ Use `struct` instead.
└ @ nothing PositiveFactorizations.jl:10
┌ Warning: Deprecated syntax `immutable` at /home/vagrant/.julia/v0.7/PositiveFactorizations/src/PositiveFactorizations.jl:10.
│ Use `struct` instead.
└ @ nothing PositiveFactorizations.jl:10
┌ Warning: `using A.B` will only be allowed for modules, not single bindings. Use `using A: B` instead
│   caller = ip:0x0
└ @ Core :-1
┌ Warning: Deprecated syntax `parametric method syntax Base.cholfact{T}(::Type{Positive{T}}, A::AbstractMatrix, pivot = Val{false}; tol = default_tol(A), blocksize = default_blocksize(T))` around /home/vagrant/.julia/v0.7/PositiveFactorizations/src/cholesky.jl:11.
│ Use `Base.cholfact(#s1::Type{Positive{T}}, A::AbstractMatrix, pivot = Val{false}; tol = default_tol(A), blocksize = default_blocksize(T)) where T` instead.
└ @ nothing cholesky.jl:11
┌ Warning: Deprecated syntax `parametric method syntax Base.ldltfact{T}(::Type{Positive{T}}, A::AbstractMatrix, pivot = Val{false}; tol = default_tol(A), blocksize = default_blocksize(T))` around /home/vagrant/.julia/v0.7/PositiveFactorizations/src/cholesky.jl:15.
│ Use `Base.ldltfact(#s5::Type{Positive{T}}, A::AbstractMatrix, pivot = Val{false}; tol = default_tol(A), blocksize = default_blocksize(T)) where T` instead.
└ @ nothing cholesky.jl:15
┌ Warning: Deprecated syntax `parametric method syntax Base.cholfact!{T <: AbstractFloat}(::Type{Positive{T}}, A::AbstractMatrix{T}, pivot = Val{false}; tol = default_tol(A), blocksize = default_blocksize(T))` around /home/vagrant/.julia/v0.7/PositiveFactorizations/src/cholesky.jl:22.
│ Use `Base.cholfact!(#s5::Type{Positive{T}}, A::AbstractMatrix{T}, pivot = Val{false}; tol = default_tol(A), blocksize = default_blocksize(T)) where T <: AbstractFloat` instead.
└ @ nothing cholesky.jl:22
┌ Warning: Deprecated syntax `parametric method syntax Base.cholfact!{T <: AbstractFloat}(::Type{Positive}, A::AbstractMatrix{T}, pivot = Val{false}; tol = default_tol(A), blocksize = default_blocksize(T))` around /home/vagrant/.julia/v0.7/PositiveFactorizations/src/cholesky.jl:23.
│ Use `Base.cholfact!(#s5::Type{Positive}, A::AbstractMatrix{T}, pivot = Val{false}; tol = default_tol(A), blocksize = default_blocksize(T)) where T <: AbstractFloat` instead.
└ @ nothing cholesky.jl:23
┌ Warning: Deprecated syntax `parametric method syntax Base.ldltfact!{T <: AbstractFloat}(::Type{Positive{T}}, A::AbstractMatrix{T}, pivot::Type{Val{false}} = Val{false}; tol = default_tol(A), blocksize = default_blocksize(T))` around /home/vagrant/.julia/v0.7/PositiveFactorizations/src/cholesky.jl:27.
│ Use `Base.ldltfact!(#s5::Type{Positive{T}}, A::AbstractMatrix{T}, pivot::Type{Val{false}} = Val{false}; tol = default_tol(A), blocksize = default_blocksize(T)) where T <: AbstractFloat` instead.
└ @ nothing cholesky.jl:27
┌ Warning: Deprecated syntax `parametric method syntax Base.ldltfact!{T <: AbstractFloat}(::Type{Positive{T}}, A::AbstractMatrix{T}, pivot::Type{Val{true}}; tol = default_tol(A), blocksize = default_blocksize(T))` around /home/vagrant/.julia/v0.7/PositiveFactorizations/src/cholesky.jl:60.
│ Use `Base.ldltfact!(#s6::Type{Positive{T}}, A::AbstractMatrix{T}, pivot::Type{Val{true}}; tol = default_tol(A), blocksize = default_blocksize(T)) where T <: AbstractFloat` instead.
└ @ nothing cholesky.jl:60
┌ Warning: Deprecated syntax `parametric method syntax Base.ldltfact!{T <: AbstractFloat}(::Type{Positive}, A::AbstractMatrix{T}, pivot = Val{false}; tol = default_tol(A), blocksize = default_blocksize(T))` around /home/vagrant/.julia/v0.7/PositiveFactorizations/src/cholesky.jl:79.
│ Use `Base.ldltfact!(#s6::Type{Positive}, A::AbstractMatrix{T}, pivot = Val{false}; tol = default_tol(A), blocksize = default_blocksize(T)) where T <: AbstractFloat` instead.
└ @ nothing cholesky.jl:79
┌ Warning: Deprecated syntax `parametric method syntax update_columns!{T <: BlasFloat}(dest::StridedMatrix{T}, d::Number, c::StridedVector{T})` around /home/vagrant/.julia/v0.7/PositiveFactorizations/src/cholesky.jl:181.
│ Use `update_columns!(dest::StridedMatrix{T}, d::Number, c::StridedVector{T}) where T <: BlasFloat` instead.
└ @ nothing cholesky.jl:181
┌ Warning: Deprecated syntax `parametric method syntax update_columns!{T <: BlasFloat}(dest::StridedMatrix{T}, d::Number, x::StridedVector{T}, y::StridedVector{T})` around /home/vagrant/.julia/v0.7/PositiveFactorizations/src/cholesky.jl:187.
│ Use `update_columns!(dest::StridedMatrix{T}, d::Number, x::StridedVector{T}, y::StridedVector{T}) where T <: BlasFloat` instead.
└ @ nothing cholesky.jl:187
┌ Warning: Deprecated syntax `parametric method syntax update_columns!{T <: BlasFloat}(dest::StridedMatrix{T}, d::AbstractVector, C::StridedMatrix{T})` around /home/vagrant/.julia/v0.7/PositiveFactorizations/src/cholesky.jl:193.
│ Use `update_columns!(dest::StridedMatrix{T}, d::AbstractVector, C::StridedMatrix{T}) where T <: BlasFloat` instead.
└ @ nothing cholesky.jl:193
┌ Warning: Deprecated syntax `parametric method syntax floattype{T <: AbstractFloat}(::Type{T})` around /home/vagrant/.julia/v0.7/PositiveFactorizations/src/cholesky.jl:269.
│ Use `floattype(#unused#::Type{T}) where T <: AbstractFloat` instead.
└ @ nothing cholesky.jl:269
┌ Warning: Deprecated syntax `parametric method syntax floattype{T <: Integer}(::Type{T})` around /home/vagrant/.julia/v0.7/PositiveFactorizations/src/cholesky.jl:270.
│ Use `floattype(#unused#::Type{T}) where T <: Integer` instead.
└ @ nothing cholesky.jl:270
┌ Warning: Deprecated syntax `parametric method syntax default_blocksize{T}(::Type{T})` around /home/vagrant/.julia/v0.7/PositiveFactorizations/src/cholesky.jl:276.
│ Use `default_blocksize(#unused#::Type{T}) where T` instead.
└ @ nothing cholesky.jl:276
┌ Warning: Deprecated syntax `parametric method syntax Base.eigfact{T}(::Type{Positive{T}}, A::AbstractMatrix{T}, args...; tol = default_tol(A))` around /home/vagrant/.julia/v0.7/PositiveFactorizations/src/eig.jl:4.
│ Use `Base.eigfact(#s6::Type{Positive{T}}, A::AbstractMatrix{T}, args...; tol = default_tol(A)) where T` instead.
└ @ nothing eig.jl:4
┌ Warning: Deprecated syntax `parametric method syntax Base.eigfact{T}(::Type{Positive{T}}, A::AbstractMatrix, args...; tol = default_tol(A))` around /home/vagrant/.julia/v0.7/PositiveFactorizations/src/eig.jl:15.
│ Use `Base.eigfact(#s6::Type{Positive{T}}, A::AbstractMatrix, args...; tol = default_tol(A)) where T` instead.
└ @ nothing eig.jl:15
WARNING: Base.Test is deprecated, run `using Test` instead.
  likely near /home/vagrant/.julia/v0.7/PositiveFactorizations/test/runtests.jl:2
┌ Warning: `Array{T}(d::NTuple{N, Int}) where {T, N}` is deprecated, use `Array{T}(uninitialized, d)` instead.
│   caller = #ldltfact#3(::Float64, ::Int64, ::Function, ::Type{Positive{Float64}}, ::Array{Int64,2}, ::Any) at cholesky.jl:16
└ @ PositiveFactorizations cholesky.jl:16
┌ Warning: `copy!(dst::AbstractArray, src::AbstractArray)` is deprecated. You can either use `copyto!(dst, src)` or `Future.copy!(dst, src)` instead.
│   caller = #ldltfact#3(::Float64, ::Int64, ::Function, ::Type{Positive{Float64}}, ::Array{Int64,2}, ::Any) at cholesky.jl:17
└ @ PositiveFactorizations cholesky.jl:17
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(uninitialized, m)` instead.
│   caller = #ldltfact!#7 at cholesky.jl:30 [inlined]
└ @ Core cholesky.jl:30
┌ Warning: `full(F::Cholesky)` (and `full` in general) has been deprecated. To replace `full(F::Cholesky)`, consider `Matrix(F)`, `AbstractMatrix(F)` or, if those options are too narrow, `Array(F)` or `AbstractArray(F)`.
│   caller = top-level scope at runtests.jl:8
└ @ Core runtests.jl:8
┌ Warning: `full(F::Cholesky)` (and `full` in general) has been deprecated. To replace `full(F::Cholesky)`, consider `Matrix(F)`, `AbstractMatrix(F)` or, if those options are too narrow, `Array(F)` or `AbstractArray(F)`.
│   caller = top-level scope at runtests.jl:10
└ @ Core runtests.jl:10
┌ Warning: `full(F::Cholesky)` (and `full` in general) has been deprecated. To replace `full(F::Cholesky)`, consider `Matrix(F)`, `AbstractMatrix(F)` or, if those options are too narrow, `Array(F)` or `AbstractArray(F)`.
│   caller = top-level scope at runtests.jl:15
└ @ Core runtests.jl:15
┌ Warning: `eye(m::Integer)` has been deprecated in favor of `I` and `Matrix` constructors. For a direct replacement, consider `Matrix(1.0I, m, m)` or `Matrix{Float64}(I, m, m)`. If `Float64` element type is not necessary, consider the shorter `Matrix(I, m, m)` (with default `eltype(I)` `Bool`).
│   caller = top-level scope at runtests.jl:15
└ @ Core runtests.jl:15
┌ Warning: `full(F::Cholesky)` (and `full` in general) has been deprecated. To replace `full(F::Cholesky)`, consider `Matrix(F)`, `AbstractMatrix(F)` or, if those options are too narrow, `Array(F)` or `AbstractArray(F)`.
│   caller = top-level scope at runtests.jl:17
└ @ Core runtests.jl:17
┌ Warning: `eye(m::Integer)` has been deprecated in favor of `I` and `Matrix` constructors. For a direct replacement, consider `Matrix(1.0I, m, m)` or `Matrix{Float64}(I, m, m)`. If `Float64` element type is not necessary, consider the shorter `Matrix(I, m, m)` (with default `eltype(I)` `Bool`).
│   caller = top-level scope at runtests.jl:17
└ @ Core runtests.jl:17
┌ Warning: `Array{T}(d::NTuple{N, Int}) where {T, N}` is deprecated, use `Array{T}(uninitialized, d)` instead.
│   caller = #ldltfact#3(::Float64, ::Int64, ::Function, ::Type{Positive{Float64}}, ::Array{Float64,2}, ::Any) at cholesky.jl:16
└ @ PositiveFactorizations cholesky.jl:16
┌ Warning: `copy!(dst::AbstractArray, src::AbstractArray)` is deprecated. You can either use `copyto!(dst, src)` or `Future.copy!(dst, src)` instead.
│   caller = #ldltfact#3(::Float64, ::Int64, ::Function, ::Type{Positive{Float64}}, ::Array{Float64,2}, ::Any) at cholesky.jl:17
└ @ PositiveFactorizations cholesky.jl:17
┌ Warning: `full(F::Cholesky)` (and `full` in general) has been deprecated. To replace `full(F::Cholesky)`, consider `Matrix(F)`, `AbstractMatrix(F)` or, if those options are too narrow, `Array(F)` or `AbstractArray(F)`.
│   caller = top-level scope at runtests.jl:24
└ @ Core runtests.jl:24
┌ Warning: `full(F::Cholesky)` (and `full` in general) has been deprecated. To replace `full(F::Cholesky)`, consider `Matrix(F)`, `AbstractMatrix(F)` or, if those options are too narrow, `Array(F)` or `AbstractArray(F)`.
│   caller = top-level scope at runtests.jl:26
└ @ Core runtests.jl:26
┌ Warning: `full(F::Cholesky)` (and `full` in general) has been deprecated. To replace `full(F::Cholesky)`, consider `Matrix(F)`, `AbstractMatrix(F)` or, if those options are too narrow, `Array(F)` or `AbstractArray(F)`.
│   caller = top-level scope at runtests.jl:28
└ @ Core runtests.jl:28
┌ Warning: `full(F::Cholesky)` (and `full` in general) has been deprecated. To replace `full(F::Cholesky)`, consider `Matrix(F)`, `AbstractMatrix(F)` or, if those options are too narrow, `Array(F)` or `AbstractArray(F)`.
│   caller = top-level scope at runtests.jl:33
└ @ Core runtests.jl:33
┌ Warning: `eye(m::Integer)` has been deprecated in favor of `I` and `Matrix` constructors. For a direct replacement, consider `Matrix(1.0I, m, m)` or `Matrix{Float64}(I, m, m)`. If `Float64` element type is not necessary, consider the shorter `Matrix(I, m, m)` (with default `eltype(I)` `Bool`).
│   caller = top-level scope at runtests.jl:33
└ @ Core runtests.jl:33
┌ Warning: `full(F::Cholesky)` (and `full` in general) has been deprecated. To replace `full(F::Cholesky)`, consider `Matrix(F)`, `AbstractMatrix(F)` or, if those options are too narrow, `Array(F)` or `AbstractArray(F)`.
│   caller = top-level scope at runtests.jl:35
└ @ Core runtests.jl:35
┌ Warning: `eye(m::Integer)` has been deprecated in favor of `I` and `Matrix` constructors. For a direct replacement, consider `Matrix(1.0I, m, m)` or `Matrix{Float64}(I, m, m)`. If `Float64` element type is not necessary, consider the shorter `Matrix(I, m, m)` (with default `eltype(I)` `Bool`).
│   caller = top-level scope at runtests.jl:35
└ @ Core runtests.jl:35
┌ Warning: `full(F::Cholesky)` (and `full` in general) has been deprecated. To replace `full(F::Cholesky)`, consider `Matrix(F)`, `AbstractMatrix(F)` or, if those options are too narrow, `Array(F)` or `AbstractArray(F)`.
│   caller = top-level scope at runtests.jl:40
└ @ Core runtests.jl:40
┌ Warning: `full(F::Cholesky)` (and `full` in general) has been deprecated. To replace `full(F::Cholesky)`, consider `Matrix(F)`, `AbstractMatrix(F)` or, if those options are too narrow, `Array(F)` or `AbstractArray(F)`.
│   caller = top-level scope at runtests.jl:42
└ @ Core runtests.jl:42
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(uninitialized, m)` instead.
│   caller = #ldltfact!#8 at cholesky.jl:63 [inlined]
└ @ Core cholesky.jl:63
┌ Warning: `full(F::Eigen)` (and `full` in general) has been deprecated. To replace `full(F::Eigen)`, consider `Matrix(F)`, `AbstractMatrix(F)` or, if those options are too narrow, `Array(F)` or `AbstractArray(F)`.
│   caller = top-level scope
└ @ Core :0
┌ Warning: `full(F::Eigen)` (and `full` in general) has been deprecated. To replace `full(F::Eigen)`, consider `Matrix(F)`, `AbstractMatrix(F)` or, if those options are too narrow, `Array(F)` or `AbstractArray(F)`.
│   caller = top-level scope
└ @ Core :0
┌ Warning: `eye(m::Integer)` has been deprecated in favor of `I` and `Matrix` constructors. For a direct replacement, consider `Matrix(1.0I, m, m)` or `Matrix{Float64}(I, m, m)`. If `Float64` element type is not necessary, consider the shorter `Matrix(I, m, m)` (with default `eltype(I)` `Bool`).
│   caller = top-level scope
└ @ Core :0
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(uninitialized, m)` instead.
│   caller = #ldltfact!#7 at cholesky.jl:30 [inlined]
└ @ Core cholesky.jl:30
[ Info: PositiveFactorizations tests passed

>>> End of log
