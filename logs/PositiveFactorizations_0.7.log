>>> 'Pkg.add("PositiveFactorizations")' log
[ Info: Installing PositiveFactorizations v0.1.0 @ Base.Pkg.Entry entry.jl:543
[ Info: Package database updated @ Base.Pkg.Entry entry.jl:32
┌ Info: METADATA is out-of-date — you may not have the latest version of PositiveFactorizations
│ Use `Pkg.update()` to get the latest versions of your packages
└ @ Base.Pkg.Entry entry.jl:74

>>> 'Pkg.test("PositiveFactorizations")' log
Julia Version 0.7.0-DEV.3246
Commit 2138144d3a (2018-01-04 02:34 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
      Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-135-generic #184-Ubuntu SMP Wed Oct 18 11:55:51 UTC 2017 x86_64 x86_64
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
              speed         user         nice          sys         idle          irq
       #1  3507 MHz    3527617 s        119 s     174313 s     932459 s         66 s
       #2  3507 MHz     892212 s         67 s      77098 s    4317525 s          1 s
       
  Memory: 2.93927001953125 GB (840.078125 MB free)
  Uptime: 54060.0 sec
  Load Avg:  0.9853515625  1.0048828125  1.03759765625
  WORD_SIZE: 64
  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant
Packages:
  Package Directory: /home/vagrant/.julia/v0.7
  Package Status:
2 required packages:
 - JSON                          0.16.3
 - PositiveFactorizations        0.1.0
2 additional packages:
 - Compat                        0.42.0
 - Nullables                     0.0.2
[ Info: Testing PositiveFactorizations @ Base.Pkg.Entry entry.jl:723
WARNING: Base.Test is deprecated, run `using Test` instead.
  likely near /home/vagrant/.julia/v0.7/PositiveFactorizations/test/runtests.jl:2
┌ Warning: `Array{T}(d::NTuple{N, Int}) where {T, N}` is deprecated, use `Array{T}(uninitialized, d)` instead.
│   caller = #ldltfact#3(::Float64, ::Int64, ::Function, ::Type{Positive{Float64}}, ::Array{Int64,2}, ::Type) at cholesky.jl:16
└ @ PositiveFactorizations cholesky.jl:16
┌ Warning: copy!(dst::AbstractArray, src::AbstractArray) is deprecated. You can either use copyto!(dst, src) of Future.copy!(dst, src) instead.
│   caller = #ldltfact#3(::Float64, ::Int64, ::Function, ::Type{Positive{Float64}}, ::Array{Int64,2}, ::Type) at cholesky.jl:17
└ @ PositiveFactorizations cholesky.jl:17
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(uninitialized, m)` instead.
│   caller = #ldltfact!#7 at cholesky.jl:30 [inlined]
└ @ Core cholesky.jl:30
┌ Warning: `full(F::Cholesky)` (and `full` in general) has been deprecated. To replace `full(F::Cholesky)`, consider `Matrix(F)`, `AbstractMatrix(F)` or, if those options are too narrow, `Array(F)` or `AbstractArray(F)`.
│   caller = top-level scope at runtests.jl:8
└ @ Core runtests.jl:8
┌ Warning: `full(F::Cholesky)` (and `full` in general) has been deprecated. To replace `full(F::Cholesky)`, consider `Matrix(F)`, `AbstractMatrix(F)` or, if those options are too narrow, `Array(F)` or `AbstractArray(F)`.
│   caller = top-level scope at runtests.jl:10
└ @ Core runtests.jl:10
┌ Warning: `full(F::Cholesky)` (and `full` in general) has been deprecated. To replace `full(F::Cholesky)`, consider `Matrix(F)`, `AbstractMatrix(F)` or, if those options are too narrow, `Array(F)` or `AbstractArray(F)`.
│   caller = top-level scope at runtests.jl:15
└ @ Core runtests.jl:15
┌ Warning: `eye(m::Integer)` has been deprecated in favor of `I` and `Matrix` constructors. For a direct replacement, consider `Matrix(1.0I, m, m)` or `Matrix{Float64}(I, m, m)`. If `Float64` element type is not necessary, consider the shorter `Matrix(I, m, m)` (with default `eltype(I)` `Bool`).
│   caller = top-level scope at runtests.jl:15
└ @ Core runtests.jl:15
┌ Warning: `full(F::Cholesky)` (and `full` in general) has been deprecated. To replace `full(F::Cholesky)`, consider `Matrix(F)`, `AbstractMatrix(F)` or, if those options are too narrow, `Array(F)` or `AbstractArray(F)`.
│   caller = top-level scope at runtests.jl:17
└ @ Core runtests.jl:17
┌ Warning: `eye(m::Integer)` has been deprecated in favor of `I` and `Matrix` constructors. For a direct replacement, consider `Matrix(1.0I, m, m)` or `Matrix{Float64}(I, m, m)`. If `Float64` element type is not necessary, consider the shorter `Matrix(I, m, m)` (with default `eltype(I)` `Bool`).
│   caller = top-level scope at runtests.jl:17
└ @ Core runtests.jl:17
┌ Warning: `Array{T}(d::NTuple{N, Int}) where {T, N}` is deprecated, use `Array{T}(uninitialized, d)` instead.
│   caller = #ldltfact#3(::Float64, ::Int64, ::Function, ::Type{Positive{Float64}}, ::Array{Float64,2}, ::Type) at cholesky.jl:16
└ @ PositiveFactorizations cholesky.jl:16
┌ Warning: copy!(dst::AbstractArray, src::AbstractArray) is deprecated. You can either use copyto!(dst, src) of Future.copy!(dst, src) instead.
│   caller = #ldltfact#3(::Float64, ::Int64, ::Function, ::Type{Positive{Float64}}, ::Array{Float64,2}, ::Type) at cholesky.jl:17
└ @ PositiveFactorizations cholesky.jl:17
┌ Warning: `full(F::Cholesky)` (and `full` in general) has been deprecated. To replace `full(F::Cholesky)`, consider `Matrix(F)`, `AbstractMatrix(F)` or, if those options are too narrow, `Array(F)` or `AbstractArray(F)`.
│   caller = top-level scope at runtests.jl:24
└ @ Core runtests.jl:24
┌ Warning: `full(F::Cholesky)` (and `full` in general) has been deprecated. To replace `full(F::Cholesky)`, consider `Matrix(F)`, `AbstractMatrix(F)` or, if those options are too narrow, `Array(F)` or `AbstractArray(F)`.
│   caller = top-level scope at runtests.jl:26
└ @ Core runtests.jl:26
┌ Warning: `full(F::Cholesky)` (and `full` in general) has been deprecated. To replace `full(F::Cholesky)`, consider `Matrix(F)`, `AbstractMatrix(F)` or, if those options are too narrow, `Array(F)` or `AbstractArray(F)`.
│   caller = top-level scope at runtests.jl:28
└ @ Core runtests.jl:28
┌ Warning: `full(F::Cholesky)` (and `full` in general) has been deprecated. To replace `full(F::Cholesky)`, consider `Matrix(F)`, `AbstractMatrix(F)` or, if those options are too narrow, `Array(F)` or `AbstractArray(F)`.
│   caller = top-level scope at runtests.jl:33
└ @ Core runtests.jl:33
┌ Warning: `eye(m::Integer)` has been deprecated in favor of `I` and `Matrix` constructors. For a direct replacement, consider `Matrix(1.0I, m, m)` or `Matrix{Float64}(I, m, m)`. If `Float64` element type is not necessary, consider the shorter `Matrix(I, m, m)` (with default `eltype(I)` `Bool`).
│   caller = top-level scope at runtests.jl:33
└ @ Core runtests.jl:33
┌ Warning: `full(F::Cholesky)` (and `full` in general) has been deprecated. To replace `full(F::Cholesky)`, consider `Matrix(F)`, `AbstractMatrix(F)` or, if those options are too narrow, `Array(F)` or `AbstractArray(F)`.
│   caller = top-level scope at runtests.jl:35
└ @ Core runtests.jl:35
┌ Warning: `eye(m::Integer)` has been deprecated in favor of `I` and `Matrix` constructors. For a direct replacement, consider `Matrix(1.0I, m, m)` or `Matrix{Float64}(I, m, m)`. If `Float64` element type is not necessary, consider the shorter `Matrix(I, m, m)` (with default `eltype(I)` `Bool`).
│   caller = top-level scope at runtests.jl:35
└ @ Core runtests.jl:35
┌ Warning: `full(F::Cholesky)` (and `full` in general) has been deprecated. To replace `full(F::Cholesky)`, consider `Matrix(F)`, `AbstractMatrix(F)` or, if those options are too narrow, `Array(F)` or `AbstractArray(F)`.
│   caller = top-level scope at runtests.jl:40
└ @ Core runtests.jl:40
┌ Warning: `full(F::Cholesky)` (and `full` in general) has been deprecated. To replace `full(F::Cholesky)`, consider `Matrix(F)`, `AbstractMatrix(F)` or, if those options are too narrow, `Array(F)` or `AbstractArray(F)`.
│   caller = top-level scope at runtests.jl:42
└ @ Core runtests.jl:42
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(uninitialized, m)` instead.
│   caller = #ldltfact!#8 at cholesky.jl:63 [inlined]
└ @ Core cholesky.jl:63
┌ Warning: `full(F::Eigen)` (and `full` in general) has been deprecated. To replace `full(F::Eigen)`, consider `Matrix(F)`, `AbstractMatrix(F)` or, if those options are too narrow, `Array(F)` or `AbstractArray(F)`.
│   caller = top-level scope
└ @ Core :0
┌ Warning: `full(F::Eigen)` (and `full` in general) has been deprecated. To replace `full(F::Eigen)`, consider `Matrix(F)`, `AbstractMatrix(F)` or, if those options are too narrow, `Array(F)` or `AbstractArray(F)`.
│   caller = top-level scope
└ @ Core :0
┌ Warning: `eye(m::Integer)` has been deprecated in favor of `I` and `Matrix` constructors. For a direct replacement, consider `Matrix(1.0I, m, m)` or `Matrix{Float64}(I, m, m)`. If `Float64` element type is not necessary, consider the shorter `Matrix(I, m, m)` (with default `eltype(I)` `Bool`).
│   caller = top-level scope
└ @ Core :0
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(uninitialized, m)` instead.
│   caller = #ldltfact!#7 at cholesky.jl:30 [inlined]
└ @ Core cholesky.jl:30
[ Info: PositiveFactorizations tests passed @ Base.Pkg.Entry entry.jl:737

>>> End of log
