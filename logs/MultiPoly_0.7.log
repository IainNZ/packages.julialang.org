>>> 'Pkg.add("MultiPoly")' log
[ Info: Installing Combinatorics v0.5.0
[ Info: Installing DataStructures v0.7.4
[ Info: Installing IterTools v0.2.1
[ Info: Installing MultiPoly v0.1.0
[ Info: Installing Polynomials v0.2.1
[ Info: Package database updated
┌ Info: METADATA is out-of-date — you may not have the latest version of MultiPoly
└ Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("MultiPoly")' log
Julia Version 0.7.0-DEV.3583
Commit 7d3991f784 (2018-01-26 19:00 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
      Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-135-generic #184-Ubuntu SMP Wed Oct 18 11:55:51 UTC 2017 x86_64 x86_64
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
              speed         user         nice          sys         idle          irq
       #1  3500 MHz    4283179 s       7642 s     214141 s    1170436 s         78 s
       #2  3500 MHz    1032271 s        192 s      97044 s    5401650 s          3 s
       
  Memory: 2.93927001953125 GB (858.2109375 MB free)
  Uptime: 66474.0 sec
  Load Avg:  1.0458984375  1.0302734375  1.041015625
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant
Packages:
  Package Directory: /home/vagrant/.julia/v0.7
  Package Status:
2 required packages:
 - JSON                          0.16.4
 - MultiPoly                     0.1.0
6 additional packages:
 - Combinatorics                 0.5.0
 - Compat                        0.49.0
 - DataStructures                0.7.4
 - IterTools                     0.2.1
 - Nullables                     0.0.3
 - Polynomials                   0.2.1
[ Info: Testing MultiPoly
WARNING: Base.Test is deprecated, run `using Test` instead.
  likely near /home/vagrant/.julia/v0.7/MultiPoly/test/runtests.jl:1
WARNING: importing deprecated binding Base.diff into MultiPoly.
┌ Warning: Deprecated syntax `immutable` at /home/vagrant/.julia/v0.7/MultiPoly/src/mpoly.jl:1.
│ Use `struct` instead.
└ @ nothing mpoly.jl:1
┌ Warning: Deprecated syntax `parametric method syntax eltype{T}(::MPoly{T})` around /home/vagrant/.julia/v0.7/MultiPoly/src/mpoly.jl:8.
│ Use `eltype(#unused#::MPoly{T}) where T` instead.
└ @ nothing mpoly.jl:8
┌ Warning: Deprecated syntax `parametric method syntax zero{T}(::Type{MPoly{T}},; vars::Vector{Symbol} = Symbol[])` around /home/vagrant/.julia/v0.7/MultiPoly/src/mpoly.jl:14.
│ Use `zero(#s1::Type{MPoly{T}},; vars::Vector{Symbol} = Symbol[]) where T` instead.
└ @ nothing mpoly.jl:14
┌ Warning: Deprecated syntax `parametric method syntax zero{T}(p::MPoly{T})` around /home/vagrant/.julia/v0.7/MultiPoly/src/mpoly.jl:15.
│ Use `zero(p::MPoly{T}) where T` instead.
└ @ nothing mpoly.jl:15
┌ Warning: Deprecated syntax `parametric method syntax one{T}(::Type{MPoly{T}},; vars::Vector{Symbol} = Symbol[])` around /home/vagrant/.julia/v0.7/MultiPoly/src/mpoly.jl:17.
│ Use `one(#s3::Type{MPoly{T}},; vars::Vector{Symbol} = Symbol[]) where T` instead.
└ @ nothing mpoly.jl:17
┌ Warning: Deprecated syntax `parametric method syntax one{T}(p::MPoly{T})` around /home/vagrant/.julia/v0.7/MultiPoly/src/mpoly.jl:18.
│ Use `one(p::MPoly{T}) where T` instead.
└ @ nothing mpoly.jl:18
┌ Warning: Deprecated syntax `parametric method syntax generators{T}(::Type{MPoly{T}}, vars::Symbol...)` around /home/vagrant/.julia/v0.7/MultiPoly/src/mpoly.jl:21.
│ Use `generators(#unused#::Type{MPoly{T}}, vars::Symbol...) where T` instead.
└ @ nothing mpoly.jl:21
┌ Warning: Deprecated syntax `parametric method syntax generator{T}(::Type{MPoly{T}}, var::Symbol)` around /home/vagrant/.julia/v0.7/MultiPoly/src/mpoly.jl:25.
│ Use `generator(#unused#::Type{MPoly{T}}, var::Symbol) where T` instead.
└ @ nothing mpoly.jl:25
┌ Warning: Deprecated syntax `parametric method syntax call{T}(::Type{MPoly{T}}, var::Symbol)` around /home/vagrant/.julia/v0.7/MultiPoly/src/mpoly.jl:28.
│ Use `call(#unused#::Type{MPoly{T}}, var::Symbol) where T` instead.
└ @ nothing mpoly.jl:28
┌ Warning: Deprecated syntax `parametric method syntax promote_rule{T, U}(::Type{MPoly{T}}, ::Type{MPoly{U}})` around /home/vagrant/.julia/v0.7/MultiPoly/src/mpoly.jl:34.
│ Use `promote_rule(#unused#::Type{MPoly{T}}, #unused#::Type{MPoly{U}}) where {T, U}` instead.
└ @ nothing mpoly.jl:34
┌ Warning: Deprecated syntax `parametric method syntax promote_rule{T, U}(::Type{MPoly{T}}, ::Type{U})` around /home/vagrant/.julia/v0.7/MultiPoly/src/mpoly.jl:35.
│ Use `promote_rule(#unused#::Type{MPoly{T}}, #unused#::Type{U}) where {T, U}` instead.
└ @ nothing mpoly.jl:35
┌ Warning: Deprecated syntax `parametric method syntax convert{T}(P::Type{MPoly{T}}, p::MPoly)` around /home/vagrant/.julia/v0.7/MultiPoly/src/mpoly.jl:38.
│ Use `convert(P::Type{MPoly{T}}, p::MPoly) where T` instead.
└ @ nothing mpoly.jl:38
┌ Warning: Deprecated syntax `parametric method syntax convert{T}(::Type{MPoly{T}}, c::T)` around /home/vagrant/.julia/v0.7/MultiPoly/src/mpoly.jl:45.
│ Use `convert(#unused#::Type{MPoly{T}}, c::T) where T` instead.
└ @ nothing mpoly.jl:45
┌ Warning: Deprecated syntax `parametric method syntax getindex{T}(p::MPoly{T}, m::Vector{Int})` around /home/vagrant/.julia/v0.7/MultiPoly/src/mpoly.jl:50.
│ Use `getindex(p::MPoly{T}, m::Vector{Int}) where T` instead.
└ @ nothing mpoly.jl:50
┌ Warning: Deprecated syntax `parametric method syntax setindex!{T}(p::MPoly{T}, v, m::Int...)` around /home/vagrant/.julia/v0.7/MultiPoly/src/mpoly.jl:56.
│ Use `setindex!(p::MPoly{T}, v, m::Int...) where T` instead.
└ @ nothing mpoly.jl:56
┌ Warning: Deprecated syntax `parametric method syntax setindex!{T}(p::MPoly{T}, v, m::Vector{Int})` around /home/vagrant/.julia/v0.7/MultiPoly/src/mpoly.jl:64.
│ Use `setindex!(p::MPoly{T}, v, m::Vector{Int}) where T` instead.
└ @ nothing mpoly.jl:64
┌ Warning: Deprecated syntax `parametric method syntax copy{T}(p::MPoly{T})` around /home/vagrant/.julia/v0.7/MultiPoly/src/mpoly.jl:70.
│ Use `copy(p::MPoly{T}) where T` instead.
└ @ nothing mpoly.jl:70
┌ Warning: Deprecated syntax `parametric method syntax +{T, U}(p::MPoly{T}, s::U)` around /home/vagrant/.julia/v0.7/MultiPoly/src/mpolyarithmetic.jl:25.
│ Use `+(p::MPoly{T}, s::U) where {T, U}` instead.
└ @ nothing mpolyarithmetic.jl:25
┌ Warning: Deprecated syntax `parametric method syntax -{T, U}(p::MPoly{T}, s::U)` around /home/vagrant/.julia/v0.7/MultiPoly/src/mpolyarithmetic.jl:46.
│ Use `-(p::MPoly{T}, s::U) where {T, U}` instead.
└ @ nothing mpolyarithmetic.jl:46
┌ Warning: Deprecated syntax `parametric method syntax *{T, U}(s::T, p::MPoly{U})` around /home/vagrant/.julia/v0.7/MultiPoly/src/mpolyarithmetic.jl:74.
│ Use `*(s::T, p::MPoly{U}) where {T, U}` instead.
└ @ nothing mpolyarithmetic.jl:74
┌ Warning: Deprecated syntax `parametric method syntax /{T, U}(p::MPoly{T}, s::U)` around /home/vagrant/.julia/v0.7/MultiPoly/src/mpolyarithmetic.jl:98.
│ Use `/(p::MPoly{T}, s::U) where {T, U}` instead.
└ @ nothing mpolyarithmetic.jl:98
┌ Warning: Deprecated syntax `parametric method syntax real{T <: Real}(p::MPoly{Complex{T}})` around /home/vagrant/.julia/v0.7/MultiPoly/src/mpolyarithmetic.jl:116.
│ Use `real(p::MPoly{Complex{T}}) where T <: Real` instead.
└ @ nothing mpolyarithmetic.jl:116
┌ Warning: Deprecated syntax `parametric method syntax real{T <: Real}(p::MPoly{T})` around /home/vagrant/.julia/v0.7/MultiPoly/src/mpolyarithmetic.jl:123.
│ Use `real(p::MPoly{T}) where T <: Real` instead.
└ @ nothing mpolyarithmetic.jl:123
┌ Warning: Deprecated syntax `parametric method syntax imag{T <: Real}(p::MPoly{Complex{T}})` around /home/vagrant/.julia/v0.7/MultiPoly/src/mpolyarithmetic.jl:126.
│ Use `imag(p::MPoly{Complex{T}}) where T <: Real` instead.
└ @ nothing mpolyarithmetic.jl:126
┌ Warning: Deprecated syntax `parametric method syntax imag{T <: Real}(p::MPoly{T})` around /home/vagrant/.julia/v0.7/MultiPoly/src/mpolyarithmetic.jl:133.
│ Use `imag(p::MPoly{T}) where T <: Real` instead.
└ @ nothing mpolyarithmetic.jl:133
┌ Warning: Deprecated syntax `parametric method syntax print{T}(io::IO, p::MPoly{T})` around /home/vagrant/.julia/v0.7/MultiPoly/src/mpolyprinting.jl:27.
│ Use `print(io::IO, p::MPoly{T}) where T` instead.
└ @ nothing mpolyprinting.jl:27
┌ Warning: Deprecated syntax `immutable` at /home/vagrant/.julia/v0.7/MultiPoly/src/polyunion.jl:1.
│ Use `struct` instead.
└ @ nothing polyunion.jl:1
┌ Warning: Deprecated syntax `parametric method syntax evaluate{T}(p::MPoly{T}, es...)` around /home/vagrant/.julia/v0.7/MultiPoly/src/mpolyevaluation.jl:2.
│ Use `evaluate(p::MPoly{T}, es...) where T` instead.
└ @ nothing mpolyevaluation.jl:2
┌ Warning: Deprecated syntax `parametric method syntax evaluate_basis{T}(p::MPoly{T}, es...)` around /home/vagrant/.julia/v0.7/MultiPoly/src/mpolyevaluation.jl:14.
│ Use `evaluate_basis(p::MPoly{T}, es...) where T` instead.
└ @ nothing mpolyevaluation.jl:14
┌ Warning: Deprecated syntax `parametric method syntax diff{T}(p::MPoly{T}, symbol::Symbol, n::Int = 1)` around /home/vagrant/.julia/v0.7/MultiPoly/src/mpolycalculus.jl:2.
│ Use `diff(p::MPoly{T}, symbol::Symbol, n::Int = 1) where T` instead.
└ @ nothing mpolycalculus.jl:2
WARNING: Base.diff is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/MultiPoly/src/mpolycalculus.jl:1
WARNING: Base.diff is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/MultiPoly/src/mpolycalculus.jl:1
WARNING: Base.diff is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/MultiPoly/src/mpolycalculus.jl:1
┌ Warning: Deprecated syntax `parametric method syntax integrate{T}(p::MPoly{T}, symbol::Symbol, n::Int = 1)` around /home/vagrant/.julia/v0.7/MultiPoly/src/mpolycalculus.jl:21.
│ Use `integrate(p::MPoly{T}, symbol::Symbol, n::Int = 1) where T` instead.
└ @ nothing mpolycalculus.jl:21
WARNING: importing deprecated binding Base.eye into MultiPoly.
WARNING: Base.eye is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/MultiPoly/test/mpolycalculus.jl:1
WARNING: Base.eye is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/MultiPoly/test/mpolycalculus.jl:1
WARNING: Base.eye is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/MultiPoly/test/mpolycalculus.jl:1
┌ Warning: `eye(T::Type, m::Integer)` has been deprecated in favor of `I` and `Matrix` constructors. For a direct replacement, consider `Matrix{T}(I, m, m)`. If `T` element type is not necessary, consider the shorter `Matrix(I, m, m)`(with default `eltype(I)` `Bool`)
│   caller = generators(::Type{MPoly{Float64}}, ::Symbol, ::Vararg{Symbol,N} where N) at mpoly.jl:21
└ @ MultiPoly mpoly.jl:21
┌ Warning: `method_exists(f, t)` is deprecated, use `hasmethod(f, t)` instead.
│   caller = setindex!(::MPoly{Float64}, ::Float64, ::Int64, ::Int64) at mpoly.jl:57
└ @ MultiPoly mpoly.jl:57
ERROR: LoadError: LoadError: MethodError: no method matching Array(::Type{Int64}, ::Int64, ::Int64)
Closest candidates are:
  Array(!Matched::LinearAlgebra.UniformScaling, ::Integer, ::Integer) at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/LinearAlgebra/src/uniformscaling.jl:387
  Array(::Any) where T<:AbstractArray at abstractarray.jl:21
Stacktrace:
 [1] PolyUnion(::Array{MPoly{Float64},1}) at /home/vagrant/.julia/v0.7/MultiPoly/src/polyunion.jl:9
 [2] * at /home/vagrant/.julia/v0.7/MultiPoly/src/mpolyarithmetic.jl:63 [inlined]
 [3] ^(::MPoly{Float64}, ::Int64) at /home/vagrant/.julia/v0.7/MultiPoly/src/mpolyarithmetic.jl:92 (repeats 2 times)
 [4] @generated body at ./none:0 [inlined]
 [5] literal_pow(::typeof(^), ::MPoly{Float64}, ::Val{3}) at ./<missing>:0
 [6] top-level scope
 [7] include at ./boot.jl:292 [inlined]
 [8] include_relative(::Module, ::String) at ./loading.jl:1012
 [9] include(::Module, ::String) at ./sysimg.jl:26
 [10] include(::String) at ./sysimg.jl:65
 [11] top-level scope
 [12] include at ./boot.jl:292 [inlined]
 [13] include_relative(::Module, ::String) at ./loading.jl:1012
 [14] include(::Module, ::String) at ./sysimg.jl:26
 [15] process_options(::Base.JLOptions) at ./client.jl:334
 [16] _start() at ./client.jl:386
in expression starting at /home/vagrant/.julia/v0.7/MultiPoly/test/mpolycalculus.jl:3
in expression starting at /home/vagrant/.julia/v0.7/MultiPoly/test/runtests.jl:4
┌ Error: ------------------------------------------------------------
│ # Testing failed for MultiPoly
│   exception =
│    failed process: Process(`/home/vagrant/julia/bin/julia -Cnative -J/home/vagrant/julia/lib/julia/sys.so --compile=yes --depwarn=yes --code-coverage=none --color=no --compiled-modules=yes --check-bounds=yes --warn-overwrite=yes --startup-file=yes /home/vagrant/.julia/v0.7/MultiPoly/test/runtests.jl`, ProcessExited(1)) [1]
│    Stacktrace:
│     [1] error(::String, ::Base.Process, ::String, ::Int64, ::String) at ./error.jl:42
│     [2] pipeline_error(::Base.Process) at ./process.jl:698
│     [3] run(::Cmd) at ./process.jl:660
│     [4] (::getfield(Base.Pkg.Entry, Symbol("##89#92")){Bool,String,Array{AbstractString,1}})() at ./pkg/entry.jl:729
│     [5] cd(::getfield(Base.Pkg.Entry, Symbol("##89#92")){Bool,String,Array{AbstractString,1}}, ::String) at ./file.jl:70
│     [6] #test!#88(::Bool, ::Function, ::String, ::Array{AbstractString,1}, ::Array{AbstractString,1}, ::Array{AbstractString,1}) at ./pkg/entry.jl:717
│     [7] (::getfield(Base.Pkg.Entry, Symbol("#kw##test!")))(::NamedTuple{(:coverage,),Tuple{Bool}}, ::typeof(Base.Pkg.Entry.test!), ::String, ::Array{AbstractString,1}, ::Array{AbstractString,1}, ::Array{AbstractString,1}) at ./<missing>:0
│     [8] #test#96(::Bool, ::Function, ::Array{AbstractString,1}) at ./pkg/entry.jl:756
│     [9] (::getfield(Base.Pkg.Entry, Symbol("#kw##test")))(::NamedTuple{(:coverage,),Tuple{Bool}}, ::typeof(Base.Pkg.Entry.test), ::Array{AbstractString,1}) at ./<missing>:0
│     [10] (::getfield(Base.Pkg.Dir, Symbol("##4#7")){Base.Iterators.IndexValue{Symbol,Bool,Tuple{Symbol},NamedTuple{(:coverage,),Tuple{Bool}}},typeof(Base.Pkg.Entry.test),Tuple{Array{AbstractString,1}}})() at ./pkg/dir.jl:36
│     [11] cd(::getfield(Base.Pkg.Dir, Symbol("##4#7")){Base.Iterators.IndexValue{Symbol,Bool,Tuple{Symbol},NamedTuple{(:coverage,),Tuple{Bool}}},typeof(Base.Pkg.Entry.test),Tuple{Array{AbstractString,1}}}, ::String) at ./file.jl:70
│     [12] #cd#1(::Base.Iterators.IndexValue{Symbol,Bool,Tuple{Symbol},NamedTuple{(:coverage,),Tuple{Bool}}}, ::Function, ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N} where N) at ./pkg/dir.jl:36
│     [13] (::getfield(Base.Pkg.Dir, Symbol("#kw##cd")))(::NamedTuple{(:coverage,),Tuple{Bool}}, ::typeof(Base.Pkg.Dir.cd), ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N} where N) at ./<missing>:0
│     [14] #test#3(::Bool, ::Function, ::String, ::Vararg{String,N} where N) at ./pkg/pkg.jl:274
│     [15] test(::String, ::Vararg{String,N} where N) at ./pkg/pkg.jl:274
│     [16] top-level scope
│     [17] eval at ./boot.jl:295 [inlined]
│     [18] eval(::Module, ::Expr) at ./sysimg.jl:71
│     [19] process_options(::Base.JLOptions) at ./client.jl:311
│     [20] _start() at ./client.jl:386
└ @ Base.Pkg.Entry entry.jl:732
ERROR: MultiPoly had test errors

>>> End of log
