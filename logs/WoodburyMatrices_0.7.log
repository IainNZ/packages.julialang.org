>>> 'Pkg.add("WoodburyMatrices")' log
[ Info: Installing WoodburyMatrices v0.2.2 @ Base.Pkg.Entry entry.jl:543
[ Info: Removing BinDeps v0.8.2 @ Base.Pkg.Entry entry.jl:546
[ Info: Removing Cairo v0.4.0 @ Base.Pkg.Entry entry.jl:546
[ Info: Removing ColorTypes v0.6.6 @ Base.Pkg.Entry entry.jl:546
[ Info: Removing Colors v0.8.2 @ Base.Pkg.Entry entry.jl:546
[ Info: Removing DataStructures v0.7.3 @ Base.Pkg.Entry entry.jl:546
[ Info: Removing FixedPointNumbers v0.4.3 @ Base.Pkg.Entry entry.jl:546
[ Info: Removing Graphics v0.2.0 @ Base.Pkg.Entry entry.jl:546
[ Info: Removing IniFile v0.3.1 @ Base.Pkg.Entry entry.jl:546
[ Info: Removing NaNMath v0.3.0 @ Base.Pkg.Entry entry.jl:546
[ Info: Removing Reexport v0.1.0 @ Base.Pkg.Entry entry.jl:546
[ Info: Removing SHA v0.5.2 @ Base.Pkg.Entry entry.jl:546
[ Info: Removing SortingAlgorithms v0.2.0 @ Base.Pkg.Entry entry.jl:546
[ Info: Removing SpecialFunctions v0.3.6 @ Base.Pkg.Entry entry.jl:546
[ Info: Removing StatsBase v0.19.4 @ Base.Pkg.Entry entry.jl:546
[ Info: Removing Tk v0.5.2 @ Base.Pkg.Entry entry.jl:546
[ Info: Removing URIParser v0.3.0 @ Base.Pkg.Entry entry.jl:546
[ Info: Package database updated @ Base.Pkg.Entry entry.jl:32
┌ Info: METADATA is out-of-date — you may not have the latest version of WoodburyMatrices
│ Use `Pkg.update()` to get the latest versions of your packages
└ @ Base.Pkg.Entry entry.jl:74

>>> 'Pkg.test("WoodburyMatrices")' log
Julia Version 0.7.0-DEV.3246
Commit 2138144d3a (2018-01-04 02:34 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
      Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-135-generic #184-Ubuntu SMP Wed Oct 18 11:55:51 UTC 2017 x86_64 x86_64
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
              speed         user         nice          sys         idle          irq
       #1  3507 MHz    6878600 s        155 s     341907 s    1386697 s         75 s
       #2  3507 MHz    1249911 s       5804 s     128651 s    8718135 s          1 s
       
  Memory: 2.93927001953125 GB (769.1328125 MB free)
  Uptime: 102880.0 sec
  Load Avg:  1.0029296875  1.0146484375  0.99755859375
  WORD_SIZE: 64
  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant
Packages:
  Package Directory: /home/vagrant/.julia/v0.7
  Package Status:
2 required packages:
 - JSON                          0.16.3
 - WoodburyMatrices              0.2.2
3 additional packages:
 - Compat                        0.42.0
 - Nullables                     0.0.2
 - tmpPOOpwT                     0.0.0-             non-repo (unregistered)
[ Info: Testing WoodburyMatrices @ Base.Pkg.Entry entry.jl:723
WARNING: Base.Test is deprecated, run `using Test` instead.
  likely near /home/vagrant/.julia/v0.7/WoodburyMatrices/test/runtests.jl:2
┌ Warning: Deprecated syntax `implicit assignment to global variable `d``.
│ Use `global d` instead.
└ @ nothing none:0
┌ Warning: Deprecated syntax `implicit assignment to global variable `dl``.
│ Use `global dl` instead.
└ @ nothing none:0
┌ Warning: Deprecated syntax `implicit assignment to global variable `du``.
│ Use `global du` instead.
└ @ nothing none:0
┌ Warning: Deprecated syntax `implicit assignment to global variable `v``.
│ Use `global v` instead.
└ @ nothing none:0
┌ Warning: Deprecated syntax `implicit assignment to global variable `B``.
│ Use `global B` instead.
└ @ nothing none:0
┌ Warning: Deprecated syntax `implicit assignment to global variable `U``.
│ Use `global U` instead.
└ @ nothing none:0
┌ Warning: Deprecated syntax `implicit assignment to global variable `V``.
│ Use `global V` instead.
└ @ nothing none:0
┌ Warning: Deprecated syntax `implicit assignment to global variable `C``.
│ Use `global C` instead.
└ @ nothing none:0
┌ Warning: Deprecated syntax `implicit assignment to global variable `d``.
│ Use `global d` instead.
└ @ nothing none:0
┌ Warning: Deprecated syntax `implicit assignment to global variable `dl``.
│ Use `global dl` instead.
└ @ nothing none:0
┌ Warning: Deprecated syntax `implicit assignment to global variable `du``.
│ Use `global du` instead.
└ @ nothing none:0
┌ Warning: Deprecated syntax `implicit assignment to global variable `v``.
│ Use `global v` instead.
└ @ nothing none:0
┌ Warning: Deprecated syntax `implicit assignment to global variable `B``.
│ Use `global B` instead.
└ @ nothing none:0
┌ Warning: Deprecated syntax `implicit assignment to global variable `U``.
│ Use `global U` instead.
└ @ nothing none:0
┌ Warning: Deprecated syntax `implicit assignment to global variable `V``.
│ Use `global V` instead.
└ @ nothing none:0
┌ Warning: Deprecated syntax `implicit assignment to global variable `C``.
│ Use `global C` instead.
└ @ nothing none:0
WARNING: Base.Complex64 is deprecated, use ComplexF32 instead.
  likely near /home/vagrant/.julia/v0.7/WoodburyMatrices/test/runtests.jl:17
WARNING: Base.Complex128 is deprecated, use ComplexF64 instead.
  likely near /home/vagrant/.julia/v0.7/WoodburyMatrices/test/runtests.jl:17
WARNING: Base.Complex64 is deprecated, use ComplexF32 instead.
  likely near /home/vagrant/.julia/v0.7/WoodburyMatrices/test/runtests.jl:17
WARNING: Base.Complex128 is deprecated, use ComplexF64 instead.
  likely near /home/vagrant/.julia/v0.7/WoodburyMatrices/test/runtests.jl:17
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = Woodbury(::Tridiagonal{Float32,Array{Float32,1}}, ::Array{Float32,2}, ::Array{Float32,2}, ::Array{Float32,2}) at WoodburyMatrices.jl:41
└ @ WoodburyMatrices WoodburyMatrices.jl:41
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = Woodbury(::Tridiagonal{Float32,Array{Float32,1}}, ::Array{Float32,2}, ::Array{Float32,2}, ::Array{Float32,2}) at WoodburyMatrices.jl:42
└ @ WoodburyMatrices WoodburyMatrices.jl:42
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = Woodbury(::Tridiagonal{Float32,Array{Float32,1}}, ::Array{Float32,2}, ::Array{Float32,2}, ::Array{Float32,2}) at WoodburyMatrices.jl:43
└ @ WoodburyMatrices WoodburyMatrices.jl:43
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = Woodbury(::Tridiagonal{Float32,Array{Float32,1}}, ::Array{Float32,2}, ::Array{Float32,2}, ::Array{Float32,2}) at WoodburyMatrices.jl:44
└ @ WoodburyMatrices WoodburyMatrices.jl:44
┌ Warning: `full(A::Tridiagonal)` (and `full` in general) has been deprecated. To replace `full(A::Tridiagonal)`, consider `Matrix(A)` or, if that option is too narrow, `Array(A)`. Also consider `SparseMatrixCSC(A)` or, if that option is too narrow, `sparse(A)`.
│   caller = convert(::Type{Array{Float32,2}}, ::Woodbury{Float32,Tridiagonal{Float32,Array{Float32,1}},Array{Float32,2},Array{Float32,2},Array{Float32,2},Array{Float32,2}}) at WoodburyMatrices.jl:70
└ @ WoodburyMatrices WoodburyMatrices.jl:70
┌ Warning: copy!(dst::AbstractArray, src::AbstractArray) is deprecated. You can either use copyto!(dst, src) of Future.copy!(dst, src) instead.
│   caller = A_ldiv_B!(::Woodbury{Float32,Tridiagonal{Float32,Array{Float32,1}},Array{Float32,2},Array{Float32,2},Array{Float32,2},Array{Float32,2}}, ::Array{Float32,1}) at WoodburyMatrices.jl:87
└ @ WoodburyMatrices WoodburyMatrices.jl:87
┌ Warning: `A_ldiv_B!(A::LU{T, Tridiagonal{T, V}}, B::AbstractVecOrMat) where {T, V}` is deprecated, use `ldiv!(A, B)` instead.
│   caller = A_ldiv_B!(::Woodbury{Float32,Tridiagonal{Float32,Array{Float32,1}},Array{Float32,2},Array{Float32,2},Array{Float32,2},Array{Float32,2}}, ::Array{Float32,1}) at WoodburyMatrices.jl:89
└ @ WoodburyMatrices WoodburyMatrices.jl:89
┌ Warning: `A_mul_B!(y::StridedVector{T}, A::StridedVecOrMat{T}, x::StridedVector{T}) where T <: BlasFloat` is deprecated, use `mul!(y, A, x)` instead.
│   caller = A_ldiv_B!(::Woodbury{Float32,Tridiagonal{Float32,Array{Float32,1}},Array{Float32,2},Array{Float32,2},Array{Float32,2},Array{Float32,2}}, ::Array{Float32,1}) at WoodburyMatrices.jl:90
└ @ WoodburyMatrices WoodburyMatrices.jl:90
┌ Warning: `A_mul_B!(y::StridedVector{T}, A::StridedVecOrMat{T}, x::StridedVector{T}) where T <: BlasFloat` is deprecated, use `mul!(y, A, x)` instead.
│   caller = A_ldiv_B!(::Woodbury{Float32,Tridiagonal{Float32,Array{Float32,1}},Array{Float32,2},Array{Float32,2},Array{Float32,2},Array{Float32,2}}, ::Array{Float32,1}) at WoodburyMatrices.jl:91
└ @ WoodburyMatrices WoodburyMatrices.jl:91
┌ Warning: `A_mul_B!(y::StridedVector{T}, A::StridedVecOrMat{T}, x::StridedVector{T}) where T <: BlasFloat` is deprecated, use `mul!(y, A, x)` instead.
│   caller = A_ldiv_B!(::Woodbury{Float32,Tridiagonal{Float32,Array{Float32,1}},Array{Float32,2},Array{Float32,2},Array{Float32,2},Array{Float32,2}}, ::Array{Float32,1}) at WoodburyMatrices.jl:92
└ @ WoodburyMatrices WoodburyMatrices.jl:92
┌ Warning: `A_ldiv_B!(A::LU{T, Tridiagonal{T, V}}, B::AbstractVecOrMat) where {T, V}` is deprecated, use `ldiv!(A, B)` instead.
│   caller = A_ldiv_B!(::Woodbury{Float32,Tridiagonal{Float32,Array{Float32,1}},Array{Float32,2},Array{Float32,2},Array{Float32,2},Array{Float32,2}}, ::Array{Float32,1}) at WoodburyMatrices.jl:93
└ @ WoodburyMatrices WoodburyMatrices.jl:93
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = Woodbury(::Tridiagonal{Float64,Array{Float64,1}}, ::Array{Float64,2}, ::Array{Float64,2}, ::Array{Float64,2}) at WoodburyMatrices.jl:41
└ @ WoodburyMatrices WoodburyMatrices.jl:41
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = Woodbury(::Tridiagonal{Float64,Array{Float64,1}}, ::Array{Float64,2}, ::Array{Float64,2}, ::Array{Float64,2}) at WoodburyMatrices.jl:42
└ @ WoodburyMatrices WoodburyMatrices.jl:42
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = Woodbury(::Tridiagonal{Float64,Array{Float64,1}}, ::Array{Float64,2}, ::Array{Float64,2}, ::Array{Float64,2}) at WoodburyMatrices.jl:43
└ @ WoodburyMatrices WoodburyMatrices.jl:43
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = Woodbury(::Tridiagonal{Float64,Array{Float64,1}}, ::Array{Float64,2}, ::Array{Float64,2}, ::Array{Float64,2}) at WoodburyMatrices.jl:44
└ @ WoodburyMatrices WoodburyMatrices.jl:44
┌ Warning: `full(A::Tridiagonal)` (and `full` in general) has been deprecated. To replace `full(A::Tridiagonal)`, consider `Matrix(A)` or, if that option is too narrow, `Array(A)`. Also consider `SparseMatrixCSC(A)` or, if that option is too narrow, `sparse(A)`.
│   caller = convert(::Type{Array{Float64,2}}, ::Woodbury{Float64,Tridiagonal{Float64,Array{Float64,1}},Array{Float64,2},Array{Float64,2},Array{Float64,2},Array{Float64,2}}) at WoodburyMatrices.jl:70
└ @ WoodburyMatrices WoodburyMatrices.jl:70
┌ Warning: copy!(dst::AbstractArray, src::AbstractArray) is deprecated. You can either use copyto!(dst, src) of Future.copy!(dst, src) instead.
│   caller = A_ldiv_B!(::Woodbury{Float64,Tridiagonal{Float64,Array{Float64,1}},Array{Float64,2},Array{Float64,2},Array{Float64,2},Array{Float64,2}}, ::Array{Float64,1}) at WoodburyMatrices.jl:87
└ @ WoodburyMatrices WoodburyMatrices.jl:87
┌ Warning: `A_ldiv_B!(A::LU{T, Tridiagonal{T, V}}, B::AbstractVecOrMat) where {T, V}` is deprecated, use `ldiv!(A, B)` instead.
│   caller = A_ldiv_B!(::Woodbury{Float64,Tridiagonal{Float64,Array{Float64,1}},Array{Float64,2},Array{Float64,2},Array{Float64,2},Array{Float64,2}}, ::Array{Float64,1}) at WoodburyMatrices.jl:89
└ @ WoodburyMatrices WoodburyMatrices.jl:89
┌ Warning: `A_mul_B!(y::StridedVector{T}, A::StridedVecOrMat{T}, x::StridedVector{T}) where T <: BlasFloat` is deprecated, use `mul!(y, A, x)` instead.
│   caller = A_ldiv_B!(::Woodbury{Float64,Tridiagonal{Float64,Array{Float64,1}},Array{Float64,2},Array{Float64,2},Array{Float64,2},Array{Float64,2}}, ::Array{Float64,1}) at WoodburyMatrices.jl:90
└ @ WoodburyMatrices WoodburyMatrices.jl:90
┌ Warning: `A_mul_B!(y::StridedVector{T}, A::StridedVecOrMat{T}, x::StridedVector{T}) where T <: BlasFloat` is deprecated, use `mul!(y, A, x)` instead.
│   caller = A_ldiv_B!(::Woodbury{Float64,Tridiagonal{Float64,Array{Float64,1}},Array{Float64,2},Array{Float64,2},Array{Float64,2},Array{Float64,2}}, ::Array{Float64,1}) at WoodburyMatrices.jl:91
└ @ WoodburyMatrices WoodburyMatrices.jl:91
┌ Warning: `A_mul_B!(y::StridedVector{T}, A::StridedVecOrMat{T}, x::StridedVector{T}) where T <: BlasFloat` is deprecated, use `mul!(y, A, x)` instead.
│   caller = A_ldiv_B!(::Woodbury{Float64,Tridiagonal{Float64,Array{Float64,1}},Array{Float64,2},Array{Float64,2},Array{Float64,2},Array{Float64,2}}, ::Array{Float64,1}) at WoodburyMatrices.jl:92
└ @ WoodburyMatrices WoodburyMatrices.jl:92
┌ Warning: `A_ldiv_B!(A::LU{T, Tridiagonal{T, V}}, B::AbstractVecOrMat) where {T, V}` is deprecated, use `ldiv!(A, B)` instead.
│   caller = A_ldiv_B!(::Woodbury{Float64,Tridiagonal{Float64,Array{Float64,1}},Array{Float64,2},Array{Float64,2},Array{Float64,2},Array{Float64,2}}, ::Array{Float64,1}) at WoodburyMatrices.jl:93
└ @ WoodburyMatrices WoodburyMatrices.jl:93
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = Woodbury(::Tridiagonal{Complex{Float32},Array{Complex{Float32},1}}, ::Array{Complex{Float32},2}, ::Array{Complex{Float32},2}, ::Array{Complex{Float32},2}) at WoodburyMatrices.jl:41
└ @ WoodburyMatrices WoodburyMatrices.jl:41
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = Woodbury(::Tridiagonal{Complex{Float32},Array{Complex{Float32},1}}, ::Array{Complex{Float32},2}, ::Array{Complex{Float32},2}, ::Array{Complex{Float32},2}) at WoodburyMatrices.jl:42
└ @ WoodburyMatrices WoodburyMatrices.jl:42
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = Woodbury(::Tridiagonal{Complex{Float32},Array{Complex{Float32},1}}, ::Array{Complex{Float32},2}, ::Array{Complex{Float32},2}, ::Array{Complex{Float32},2}) at WoodburyMatrices.jl:43
└ @ WoodburyMatrices WoodburyMatrices.jl:43
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = Woodbury(::Tridiagonal{Complex{Float32},Array{Complex{Float32},1}}, ::Array{Complex{Float32},2}, ::Array{Complex{Float32},2}, ::Array{Complex{Float32},2}) at WoodburyMatrices.jl:44
└ @ WoodburyMatrices WoodburyMatrices.jl:44
┌ Warning: `full(A::Tridiagonal)` (and `full` in general) has been deprecated. To replace `full(A::Tridiagonal)`, consider `Matrix(A)` or, if that option is too narrow, `Array(A)`. Also consider `SparseMatrixCSC(A)` or, if that option is too narrow, `sparse(A)`.
│   caller = convert(::Type{Array{Complex{Float32},2}}, ::Woodbury{Complex{Float32},Tridiagonal{Complex{Float32},Array{Complex{Float32},1}},Array{Complex{Float32},2},Array{Complex{Float32},2},Array{Complex{Float32},2},Array{Complex{Float32},2}}) at WoodburyMatrices.jl:70
└ @ WoodburyMatrices WoodburyMatrices.jl:70
┌ Warning: copy!(dst::AbstractArray, src::AbstractArray) is deprecated. You can either use copyto!(dst, src) of Future.copy!(dst, src) instead.
│   caller = A_ldiv_B!(::Woodbury{Complex{Float32},Tridiagonal{Complex{Float32},Array{Complex{Float32},1}},Array{Complex{Float32},2},Array{Complex{Float32},2},Array{Complex{Float32},2},Array{Complex{Float32},2}}, ::Array{Complex{Float32},1}) at WoodburyMatrices.jl:87
└ @ WoodburyMatrices WoodburyMatrices.jl:87
┌ Warning: `A_ldiv_B!(A::LU{T, Tridiagonal{T, V}}, B::AbstractVecOrMat) where {T, V}` is deprecated, use `ldiv!(A, B)` instead.
│   caller = A_ldiv_B!(::Woodbury{Complex{Float32},Tridiagonal{Complex{Float32},Array{Complex{Float32},1}},Array{Complex{Float32},2},Array{Complex{Float32},2},Array{Complex{Float32},2},Array{Complex{Float32},2}}, ::Array{Complex{Float32},1}) at WoodburyMatrices.jl:89
└ @ WoodburyMatrices WoodburyMatrices.jl:89
┌ Warning: `A_mul_B!(y::StridedVector{T}, A::StridedVecOrMat{T}, x::StridedVector{T}) where T <: BlasFloat` is deprecated, use `mul!(y, A, x)` instead.
│   caller = A_ldiv_B!(::Woodbury{Complex{Float32},Tridiagonal{Complex{Float32},Array{Complex{Float32},1}},Array{Complex{Float32},2},Array{Complex{Float32},2},Array{Complex{Float32},2},Array{Complex{Float32},2}}, ::Array{Complex{Float32},1}) at WoodburyMatrices.jl:90
└ @ WoodburyMatrices WoodburyMatrices.jl:90
┌ Warning: `A_mul_B!(y::StridedVector{T}, A::StridedVecOrMat{T}, x::StridedVector{T}) where T <: BlasFloat` is deprecated, use `mul!(y, A, x)` instead.
│   caller = A_ldiv_B!(::Woodbury{Complex{Float32},Tridiagonal{Complex{Float32},Array{Complex{Float32},1}},Array{Complex{Float32},2},Array{Complex{Float32},2},Array{Complex{Float32},2},Array{Complex{Float32},2}}, ::Array{Complex{Float32},1}) at WoodburyMatrices.jl:91
└ @ WoodburyMatrices WoodburyMatrices.jl:91
┌ Warning: `A_mul_B!(y::StridedVector{T}, A::StridedVecOrMat{T}, x::StridedVector{T}) where T <: BlasFloat` is deprecated, use `mul!(y, A, x)` instead.
│   caller = A_ldiv_B!(::Woodbury{Complex{Float32},Tridiagonal{Complex{Float32},Array{Complex{Float32},1}},Array{Complex{Float32},2},Array{Complex{Float32},2},Array{Complex{Float32},2},Array{Complex{Float32},2}}, ::Array{Complex{Float32},1}) at WoodburyMatrices.jl:92
└ @ WoodburyMatrices WoodburyMatrices.jl:92
┌ Warning: `A_ldiv_B!(A::LU{T, Tridiagonal{T, V}}, B::AbstractVecOrMat) where {T, V}` is deprecated, use `ldiv!(A, B)` instead.
│   caller = A_ldiv_B!(::Woodbury{Complex{Float32},Tridiagonal{Complex{Float32},Array{Complex{Float32},1}},Array{Complex{Float32},2},Array{Complex{Float32},2},Array{Complex{Float32},2},Array{Complex{Float32},2}}, ::Array{Complex{Float32},1}) at WoodburyMatrices.jl:93
└ @ WoodburyMatrices WoodburyMatrices.jl:93
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = Woodbury(::Tridiagonal{Complex{Float64},Array{Complex{Float64},1}}, ::Array{Complex{Float64},2}, ::Array{Complex{Float64},2}, ::Array{Complex{Float64},2}) at WoodburyMatrices.jl:41
└ @ WoodburyMatrices WoodburyMatrices.jl:41
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = Woodbury(::Tridiagonal{Complex{Float64},Array{Complex{Float64},1}}, ::Array{Complex{Float64},2}, ::Array{Complex{Float64},2}, ::Array{Complex{Float64},2}) at WoodburyMatrices.jl:42
└ @ WoodburyMatrices WoodburyMatrices.jl:42
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = Woodbury(::Tridiagonal{Complex{Float64},Array{Complex{Float64},1}}, ::Array{Complex{Float64},2}, ::Array{Complex{Float64},2}, ::Array{Complex{Float64},2}) at WoodburyMatrices.jl:43
└ @ WoodburyMatrices WoodburyMatrices.jl:43
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = Woodbury(::Tridiagonal{Complex{Float64},Array{Complex{Float64},1}}, ::Array{Complex{Float64},2}, ::Array{Complex{Float64},2}, ::Array{Complex{Float64},2}) at WoodburyMatrices.jl:44
└ @ WoodburyMatrices WoodburyMatrices.jl:44
┌ Warning: `full(A::Tridiagonal)` (and `full` in general) has been deprecated. To replace `full(A::Tridiagonal)`, consider `Matrix(A)` or, if that option is too narrow, `Array(A)`. Also consider `SparseMatrixCSC(A)` or, if that option is too narrow, `sparse(A)`.
│   caller = convert(::Type{Array{Complex{Float64},2}}, ::Woodbury{Complex{Float64},Tridiagonal{Complex{Float64},Array{Complex{Float64},1}},Array{Complex{Float64},2},Array{Complex{Float64},2},Array{Complex{Float64},2},Array{Complex{Float64},2}}) at WoodburyMatrices.jl:70
└ @ WoodburyMatrices WoodburyMatrices.jl:70
┌ Warning: copy!(dst::AbstractArray, src::AbstractArray) is deprecated. You can either use copyto!(dst, src) of Future.copy!(dst, src) instead.
│   caller = A_ldiv_B!(::Woodbury{Complex{Float64},Tridiagonal{Complex{Float64},Array{Complex{Float64},1}},Array{Complex{Float64},2},Array{Complex{Float64},2},Array{Complex{Float64},2},Array{Complex{Float64},2}}, ::Array{Complex{Float64},1}) at WoodburyMatrices.jl:87
└ @ WoodburyMatrices WoodburyMatrices.jl:87
┌ Warning: `A_ldiv_B!(A::LU{T, Tridiagonal{T, V}}, B::AbstractVecOrMat) where {T, V}` is deprecated, use `ldiv!(A, B)` instead.
│   caller = A_ldiv_B!(::Woodbury{Complex{Float64},Tridiagonal{Complex{Float64},Array{Complex{Float64},1}},Array{Complex{Float64},2},Array{Complex{Float64},2},Array{Complex{Float64},2},Array{Complex{Float64},2}}, ::Array{Complex{Float64},1}) at WoodburyMatrices.jl:89
└ @ WoodburyMatrices WoodburyMatrices.jl:89
┌ Warning: `A_mul_B!(y::StridedVector{T}, A::StridedVecOrMat{T}, x::StridedVector{T}) where T <: BlasFloat` is deprecated, use `mul!(y, A, x)` instead.
│   caller = A_ldiv_B!(::Woodbury{Complex{Float64},Tridiagonal{Complex{Float64},Array{Complex{Float64},1}},Array{Complex{Float64},2},Array{Complex{Float64},2},Array{Complex{Float64},2},Array{Complex{Float64},2}}, ::Array{Complex{Float64},1}) at WoodburyMatrices.jl:90
└ @ WoodburyMatrices WoodburyMatrices.jl:90
┌ Warning: `A_mul_B!(y::StridedVector{T}, A::StridedVecOrMat{T}, x::StridedVector{T}) where T <: BlasFloat` is deprecated, use `mul!(y, A, x)` instead.
│   caller = A_ldiv_B!(::Woodbury{Complex{Float64},Tridiagonal{Complex{Float64},Array{Complex{Float64},1}},Array{Complex{Float64},2},Array{Complex{Float64},2},Array{Complex{Float64},2},Array{Complex{Float64},2}}, ::Array{Complex{Float64},1}) at WoodburyMatrices.jl:91
└ @ WoodburyMatrices WoodburyMatrices.jl:91
┌ Warning: `A_mul_B!(y::StridedVector{T}, A::StridedVecOrMat{T}, x::StridedVector{T}) where T <: BlasFloat` is deprecated, use `mul!(y, A, x)` instead.
│   caller = A_ldiv_B!(::Woodbury{Complex{Float64},Tridiagonal{Complex{Float64},Array{Complex{Float64},1}},Array{Complex{Float64},2},Array{Complex{Float64},2},Array{Complex{Float64},2},Array{Complex{Float64},2}}, ::Array{Complex{Float64},1}) at WoodburyMatrices.jl:92
└ @ WoodburyMatrices WoodburyMatrices.jl:92
┌ Warning: `A_ldiv_B!(A::LU{T, Tridiagonal{T, V}}, B::AbstractVecOrMat) where {T, V}` is deprecated, use `ldiv!(A, B)` instead.
│   caller = A_ldiv_B!(::Woodbury{Complex{Float64},Tridiagonal{Complex{Float64},Array{Complex{Float64},1}},Array{Complex{Float64},2},Array{Complex{Float64},2},Array{Complex{Float64},2},Array{Complex{Float64},2}}, ::Array{Complex{Float64},1}) at WoodburyMatrices.jl:93
└ @ WoodburyMatrices WoodburyMatrices.jl:93
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = Woodbury(::Tridiagonal{Int64,Array{Int64,1}}, ::Array{Int64,2}, ::Array{Int64,2}, ::Array{Int64,2}) at WoodburyMatrices.jl:41
└ @ WoodburyMatrices WoodburyMatrices.jl:41
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = Woodbury(::Tridiagonal{Int64,Array{Int64,1}}, ::Array{Int64,2}, ::Array{Int64,2}, ::Array{Int64,2}) at WoodburyMatrices.jl:42
└ @ WoodburyMatrices WoodburyMatrices.jl:42
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = Woodbury(::Tridiagonal{Int64,Array{Int64,1}}, ::Array{Int64,2}, ::Array{Int64,2}, ::Array{Int64,2}) at WoodburyMatrices.jl:43
└ @ WoodburyMatrices WoodburyMatrices.jl:43
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = Woodbury(::Tridiagonal{Int64,Array{Int64,1}}, ::Array{Int64,2}, ::Array{Int64,2}, ::Array{Int64,2}) at WoodburyMatrices.jl:44
└ @ WoodburyMatrices WoodburyMatrices.jl:44
┌ Warning: `full(A::Tridiagonal)` (and `full` in general) has been deprecated. To replace `full(A::Tridiagonal)`, consider `Matrix(A)` or, if that option is too narrow, `Array(A)`. Also consider `SparseMatrixCSC(A)` or, if that option is too narrow, `sparse(A)`.
│   caller = convert(::Type{Array{Int64,2}}, ::Woodbury{Int64,Tridiagonal{Int64,Array{Int64,1}},Array{Int64,2},Array{Int64,2},Array{Int64,2},Array{Float64,2}}) at WoodburyMatrices.jl:70
└ @ WoodburyMatrices WoodburyMatrices.jl:70
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = Woodbury(::Tridiagonal{Float64,Array{Float64,1}}, ::SparseMatrixCSC{Float64,Int64}, ::Array{Float64,2}, ::SparseMatrixCSC{Float64,Int64}) at WoodburyMatrices.jl:41
└ @ WoodburyMatrices WoodburyMatrices.jl:41
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = Woodbury(::Tridiagonal{Float64,Array{Float64,1}}, ::SparseMatrixCSC{Float64,Int64}, ::Array{Float64,2}, ::SparseMatrixCSC{Float64,Int64}) at WoodburyMatrices.jl:42
└ @ WoodburyMatrices WoodburyMatrices.jl:42
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = Woodbury(::Tridiagonal{Float64,Array{Float64,1}}, ::SparseMatrixCSC{Float64,Int64}, ::Array{Float64,2}, ::SparseMatrixCSC{Float64,Int64}) at WoodburyMatrices.jl:43
└ @ WoodburyMatrices WoodburyMatrices.jl:43
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = Woodbury(::Tridiagonal{Float64,Array{Float64,1}}, ::SparseMatrixCSC{Float64,Int64}, ::Array{Float64,2}, ::SparseMatrixCSC{Float64,Int64}) at WoodburyMatrices.jl:44
└ @ WoodburyMatrices WoodburyMatrices.jl:44
┌ Warning: `full(A::Tridiagonal)` (and `full` in general) has been deprecated. To replace `full(A::Tridiagonal)`, consider `Matrix(A)` or, if that option is too narrow, `Array(A)`. Also consider `SparseMatrixCSC(A)` or, if that option is too narrow, `sparse(A)`.
│   caller = convert(::Type{Array{Float64,2}}, ::Woodbury{Float64,Tridiagonal{Float64,Array{Float64,1}},SparseMatrixCSC{Float64,Int64},SparseMatrixCSC{Float64,Int64},Array{Float64,2},Array{Float64,2}}) at WoodburyMatrices.jl:70
└ @ WoodburyMatrices WoodburyMatrices.jl:70
┌ Warning: `a::Number + b::AbstractArray` is deprecated, use `broadcast(+, a, b)` instead.
│   caller = Woodbury(::Tridiagonal{Float64,Array{Float64,1}}, ::Array{Float64,2}, ::Float64, ::Array{Float64,2}) at WoodburyMatrices.jl:39
└ @ WoodburyMatrices WoodburyMatrices.jl:39
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = Woodbury(::Tridiagonal{Float64,Array{Float64,1}}, ::Array{Float64,2}, ::Float64, ::Array{Float64,2}) at WoodburyMatrices.jl:41
└ @ WoodburyMatrices WoodburyMatrices.jl:41
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = Woodbury(::Tridiagonal{Float64,Array{Float64,1}}, ::Array{Float64,2}, ::Float64, ::Array{Float64,2}) at WoodburyMatrices.jl:42
└ @ WoodburyMatrices WoodburyMatrices.jl:42
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = Woodbury(::Tridiagonal{Float64,Array{Float64,1}}, ::Array{Float64,2}, ::Float64, ::Array{Float64,2}) at WoodburyMatrices.jl:43
└ @ WoodburyMatrices WoodburyMatrices.jl:43
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = Woodbury(::Tridiagonal{Float64,Array{Float64,1}}, ::Array{Float64,2}, ::Float64, ::Array{Float64,2}) at WoodburyMatrices.jl:44
└ @ WoodburyMatrices WoodburyMatrices.jl:44
┌ Warning: `full(A::Tridiagonal)` (and `full` in general) has been deprecated. To replace `full(A::Tridiagonal)`, consider `Matrix(A)` or, if that option is too narrow, `Array(A)`. Also consider `SparseMatrixCSC(A)` or, if that option is too narrow, `sparse(A)`.
│   caller = convert(::Type{Array{Float64,2}}, ::Woodbury{Float64,Tridiagonal{Float64,Array{Float64,1}},Array{Float64,2},Array{Float64,2},Float64,Array{Float64,2}}) at WoodburyMatrices.jl:70
└ @ WoodburyMatrices WoodburyMatrices.jl:70
┌ Warning: Deprecated syntax `implicit assignment to global variable `v``.
│ Use `global v` instead.
└ @ nothing none:0
┌ Warning: Deprecated syntax `implicit assignment to global variable `v``.
│ Use `global v` instead.
└ @ nothing none:0
[ Warning: Loop variable `v` around /home/vagrant/.julia/v0.7/WoodburyMatrices/test/runtests.jl:109 overwrites a variable in an enclosing scope. In the future the variable will be local to the loop instead. @ nothing runtests.jl:109
WARNING: Base.Test is deprecated, run `using Test` instead.
  likely near /home/vagrant/.julia/v0.7/WoodburyMatrices/test/runtests_sym.jl:1
┌ Warning: Deprecated syntax `implicit assignment to global variable `B``.
│ Use `global B` instead.
└ @ nothing none:0
┌ Warning: Deprecated syntax `implicit assignment to global variable `v``.
│ Use `global v` instead.
└ @ nothing none:0
┌ Warning: Deprecated syntax `implicit assignment to global variable `v``.
│ Use `global v` instead.
└ @ nothing none:0
┌ Warning: Deprecated syntax `implicit assignment to global variable `B``.
│ Use `global B` instead.
└ @ nothing none:0
┌ Warning: Deprecated syntax `implicit assignment to global variable `v``.
│ Use `global v` instead.
└ @ nothing none:0
┌ Warning: Deprecated syntax `implicit assignment to global variable `B``.
│ Use `global B` instead.
└ @ nothing none:0
┌ Warning: Deprecated syntax `implicit assignment to global variable `ε``.
│ Use `global ε` instead.
└ @ nothing none:0
┌ Warning: Deprecated syntax `implicit assignment to global variable `W``.
│ Use `global W` instead.
└ @ nothing none:0
┌ Warning: Deprecated syntax `implicit assignment to global variable `F``.
│ Use `global F` instead.
└ @ nothing none:0
┌ Warning: Deprecated syntax `implicit assignment to global variable `v``.
│ Use `global v` instead.
└ @ nothing none:0
┌ Warning: Deprecated syntax `implicit assignment to global variable `v``.
│ Use `global v` instead.
└ @ nothing none:0
[ Warning: Loop variable `W` around /home/vagrant/.julia/v0.7/WoodburyMatrices/test/runtests_sym.jl:30 overwrites a variable in an enclosing scope. In the future the variable will be local to the loop instead. @ nothing runtests_sym.jl:30
[ Warning: Loop variable `v` around /home/vagrant/.julia/v0.7/WoodburyMatrices/test/runtests_sym.jl:49 overwrites a variable in an enclosing scope. In the future the variable will be local to the loop instead. @ nothing runtests_sym.jl:49
WARNING: Base.Complex64 is deprecated, use ComplexF32 instead.
  likely near /home/vagrant/.julia/v0.7/WoodburyMatrices/test/runtests_sym.jl:8
WARNING: Base.Complex128 is deprecated, use ComplexF64 instead.
  likely near /home/vagrant/.julia/v0.7/WoodburyMatrices/test/runtests_sym.jl:8
WARNING: Base.Complex64 is deprecated, use ComplexF32 instead.
  likely near /home/vagrant/.julia/v0.7/WoodburyMatrices/test/runtests_sym.jl:8
WARNING: Base.Complex128 is deprecated, use ComplexF64 instead.
  likely near /home/vagrant/.julia/v0.7/WoodburyMatrices/test/runtests_sym.jl:8
┌ Warning: diagm(v::AbstractVector) is deprecated, use diagm(0 => v) or Matrix(Diagonal(v)) instead
│   caller = top-level scope at <missing>:27
└ @ Core <missing>:27
┌ Warning: The no-op `full(A::AbstractArray)` fallback has been deprecated, and no more specific `full` method for Array{Float64,2} exists. Furthermore, `full` in general has been deprecated.
│ 
│ To replace `full(A)`, as appropriate consider dismabiguating with a concrete array constructor (e.g. `Array(A)`), with an abstract array constructor (e.g.`AbstractArray(A)`), instead `convert`ing to an array type (e.g `convert(Array, A)`, `convert(AbstractArray, A)`), or using another such operation that addresses your specific use case.
│   caller = full(::SymWoodbury{Float64,Array{Float64,2},Array{Float64,2},Array{Float64,2}}) at SymWoodburyMatrices.jl:143
└ @ WoodburyMatrices SymWoodburyMatrices.jl:143
Error During Test at /home/vagrant/.julia/v0.7/WoodburyMatrices/test/runtests_sym.jl:34
  Test threw an exception of type ErrorException
  Expression: W' * v ≈ W * v
  indexing not defined for SymWoodbury{Float64,Array{Float64,2},Array{Float64,2},Array{Float64,2}}
  Stacktrace:
   [1] error(::String, ::Type) at ./error.jl:42
   [2] error_if_canonical_indexing at ./abstractarray.jl:948 [inlined]
   [3] getindex at ./abstractarray.jl:937 [inlined]
   [4] _getindex at ./abstractarray.jl:973 [inlined]
   [5] getindex at ./abstractarray.jl:938 [inlined]
   [6] getindex at ./abstractarray.jl:488 [inlined]
   [7] getindex at ./abstractarray.jl:478 [inlined]
   [8] generic_matvecmul!(::Array{Float64,1}, ::Char, ::SymWoodbury{Float64,Array{Float64,2},Array{Float64,2},Array{Float64,2}}, ::Array{Float64,1}) at ./linalg/matmul.jl:475
   [9] mul! at ./linalg/matmul.jl:137 [inlined]
   [10] *(::Adjoint{Float64,SymWoodbury{Float64,Array{Float64,2},Array{Float64,2},Array{Float64,2}}}, ::Array{Float64,1}) at ./linalg/matmul.jl:130
   [11] top-level scope at ./<missing>:34
   [12] include at ./boot.jl:295 [inlined]
   [13] include_relative(::Module, ::String) at ./loading.jl:521
   [14] include(::Module, ::String) at ./sysimg.jl:26
   [15] include(::String) at ./sysimg.jl:65
   [16] top-level scope
   [17] include at ./boot.jl:295 [inlined]
   [18] include_relative(::Module, ::String) at ./loading.jl:521
   [19] include(::Module, ::String) at ./sysimg.jl:26
   [20] process_options(::Base.JLOptions) at ./client.jl:323
   [21] _start() at ./client.jl:374
ERROR: LoadError: LoadError: There was an error during testing
in expression starting at /home/vagrant/.julia/v0.7/WoodburyMatrices/test/runtests_sym.jl:8
in expression starting at /home/vagrant/.julia/v0.7/WoodburyMatrices/test/runtests.jl:116
┌ Error: ------------------------------------------------------------
│ # Testing failed for WoodburyMatrices
│   exception = ErrorException("failed process: Process(`/home/vagrant/julia/bin/julia -Cnative -J/home/vagrant/julia/lib/julia/sys.so --compile=yes --depwarn=yes --code-coverage=none --color=no --compiled-modules=yes --check-bounds=yes --warn-overwrite=yes --startup-file=yes /home/vagrant/.julia/v0.7/WoodburyMatrices/test/runtests.jl`, ProcessExited(1)) [1]")
└ @ Base.Pkg.Entry entry.jl:739
ERROR: WoodburyMatrices had test errors

>>> End of log
