>>> 'Pkg.add("FastGaussQuadrature")' log
[ Info: Installing BinDeps v0.8.2                  @ Base.Pkg.Entry entry.jl:543
[ Info: Installing FastGaussQuadrature v0.3.0      @ Base.Pkg.Entry entry.jl:543
[ Info: Installing SHA v0.5.2                      @ Base.Pkg.Entry entry.jl:543
[ Info: Installing SpecialFunctions v0.3.7         @ Base.Pkg.Entry entry.jl:543
[ Info: Installing URIParser v0.3.0                @ Base.Pkg.Entry entry.jl:543
[ Info: Building SpecialFunctions                                 @ Main none:10
WARNING: importing deprecated binding Base.Associative into BinDeps.
WARNING: Base.Associative is deprecated, use AbstractDict instead.
  likely near /home/vagrant/.julia/v0.7/SpecialFunctions/deps/binaries.jl:44
in @install at /home/vagrant/.julia/v0.7/BinDeps/src/dependencies.jl
┌ Warning: `unshift!` is deprecated, use `pushfirst!` instead.
│   caller = #_find_library#48(::Type, ::Function, ::BinDeps.LibraryDependency) at dependencies.jl:652
└                                                  @ BinDeps dependencies.jl:652
┌ Warning: `unshift!` is deprecated, use `pushfirst!` instead.
│   caller = #_find_library#48(::DataType, ::Function, ::BinDeps.LibraryDependency) at dependencies.jl:652
└                                                  @ BinDeps dependencies.jl:652
[ Info: Package database updated                    @ Base.Pkg.Entry entry.jl:32
┌ Info: METADATA is out-of-date — you may not have the latest version of FastGaussQuadrature
│ Use `Pkg.update()` to get the latest versions of your packages
└                                                   @ Base.Pkg.Entry entry.jl:74

>>> 'Pkg.test("FastGaussQuadrature")' log
Julia Version 0.7.0-DEV.3354
Commit 9b5eed2b6c (2018-01-09 08:03 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
      Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-135-generic #184-Ubuntu SMP Wed Oct 18 11:55:51 UTC 2017 x86_64 x86_64
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
              speed         user         nice          sys         idle          irq
       #1  3500 MHz    3974418 s       1350 s     202796 s     872352 s         20 s
       #2  3500 MHz     680299 s       5234 s      72908 s    5248674 s          0 s
       
  Memory: 2.93927001953125 GB (794.4140625 MB free)
  Uptime: 60901.0 sec
  Load Avg:  0.9970703125  0.9853515625  1.0087890625
  WORD_SIZE: 64
  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant
Packages:
  Package Directory: /home/vagrant/.julia/v0.7
  Package Status:
2 required packages:
 - FastGaussQuadrature           0.3.0
 - JSON                          0.16.3
6 additional packages:
 - BinDeps                       0.8.2
 - Compat                        0.44.0
 - Nullables                     0.0.2
 - SHA                           0.5.2
 - SpecialFunctions              0.3.7
 - URIParser                     0.3.0
[ Info: Testing FastGaussQuadrature                @ Base.Pkg.Entry entry.jl:723
Chebyshev tests
Legendre tests
┌ Warning: Deprecated syntax `implicit assignment to global variable `x``.
│ Use `global x` instead.
└                                                               @ nothing none:0
┌ Warning: Deprecated syntax `implicit assignment to global variable `w``.
│ Use `global w` instead.
└                                                               @ nothing none:0
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(uninitialized, m)` instead.
│   caller = besselZeroRoots(::Int64) at gausslegendre.jl:245
└                                     @ FastGaussQuadrature gausslegendre.jl:245
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(uninitialized, m)` instead.
│   caller = legpts_weights(::Int64, ::Int64, ::Array{Float64,1}) at gausslegendre.jl:112
└                                     @ FastGaussQuadrature gausslegendre.jl:112
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(uninitialized, m)` instead.
│   caller = besselJ1(::Int64) at gausslegendre.jl:284
└                                     @ FastGaussQuadrature gausslegendre.jl:284
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(uninitialized, m)` instead.
│   caller = innerRec at gausslegendre.jl:212 [inlined]
└                                                    @ Core gausslegendre.jl:212
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(uninitialized, m)` instead.
│   caller = innerRec at gausslegendre.jl:213 [inlined]
└                                                    @ Core gausslegendre.jl:213
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(uninitialized, m)` instead.
│   caller = innerRec at gausslegendre.jl:212 [inlined]
└                                                    @ Core gausslegendre.jl:212
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(uninitialized, m)` instead.
│   caller = innerRec at gausslegendre.jl:213 [inlined]
└                                                    @ Core gausslegendre.jl:213
Jacobi tests
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(uninitialized, m)` instead.
│   caller = HalfRec(::Int64, ::Float64, ::Float64, ::Int64) at gaussjacobi.jl:79
└                                        @ FastGaussQuadrature gaussjacobi.jl:79
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(uninitialized, m)` instead.
│   caller = HalfRec(::Int64, ::Float64, ::Float64, ::Int64) at gaussjacobi.jl:86
└                                        @ FastGaussQuadrature gaussjacobi.jl:86
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(uninitialized, m)` instead.
│   caller = HalfRec(::Int64, ::Float64, ::Float64, ::Int64) at gaussjacobi.jl:87
└                                        @ FastGaussQuadrature gaussjacobi.jl:87
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(uninitialized, m)` instead.
│   caller = JacobiRec(::Int64, ::Float64, ::Float64) at gaussjacobi.jl:41
└                                        @ FastGaussQuadrature gaussjacobi.jl:41
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(uninitialized, m)` instead.
│   caller = JacobiRec(::Int64, ::Float64, ::Float64) at gaussjacobi.jl:42
└                                        @ FastGaussQuadrature gaussjacobi.jl:42
┌ Warning: `ones(a::AbstractArray)` is deprecated, consider `fill(1, size(a))`, `fill!(copy(a), 1)`, or `fill!(similar(a), 1)`. Where necessary, use `fill!(similar(a), one(eltype(a)))`.
│   caller = feval_asy1(::Int64, ::Float64, ::Float64, ::Adjoint{Float64,Array{Float64,1}}, ::UnitRange{Int64}) at gaussjacobi.jl:250
└                                       @ FastGaussQuadrature gaussjacobi.jl:250
┌ Warning: `cumprod(A::AbstractArray)` is deprecated, use `cumprod(A, 1)` instead.
│   caller = feval_asy1(::Int64, ::Float64, ::Float64, ::Adjoint{Float64,Array{Float64,1}}, ::UnitRange{Int64}) at gaussjacobi.jl:251
└                                       @ FastGaussQuadrature gaussjacobi.jl:251
┌ Warning: `eye(m::Integer)` has been deprecated in favor of `I` and `Matrix` constructors. For a direct replacement, consider `Matrix(1.0I, m, m)` or `Matrix{Float64}(I, m, m)`. If `Float64` element type is not necessary, consider the shorter `Matrix(I, m, m)` (with default `eltype(I)` `Bool`).
│   caller = feval_asy1(::Int64, ::Float64, ::Float64, ::Adjoint{Float64,Array{Float64,1}}, ::UnitRange{Int64}) at gaussjacobi.jl:259
└                                       @ FastGaussQuadrature gaussjacobi.jl:259
┌ Warning: `eye(m::Integer)` has been deprecated in favor of `I` and `Matrix` constructors. For a direct replacement, consider `Matrix(1.0I, m, m)` or `Matrix{Float64}(I, m, m)`. If `Float64` element type is not necessary, consider the shorter `Matrix(I, m, m)` (with default `eltype(I)` `Bool`).
│   caller = feval_asy1(::Int64, ::Float64, ::Float64, ::Adjoint{Float64,Array{Float64,1}}, ::UnitRange{Int64}) at gaussjacobi.jl:272
└                                       @ FastGaussQuadrature gaussjacobi.jl:272
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(uninitialized, m)` instead.
│   caller = McMahon(::Float64, ::Int64) at besselroots.jl:39
└                                        @ FastGaussQuadrature besselroots.jl:39
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(uninitialized, m)` instead.
│   caller = Piessens(::Float64) at besselroots.jl:84
└                                        @ FastGaussQuadrature besselroots.jl:84
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(uninitialized, m)` instead.
│   caller = Piessens(::Float64) at besselroots.jl:118
└                                       @ FastGaussQuadrature besselroots.jl:118
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(uninitialized, m)` instead.
│   caller = innerJacobiRec(::Int64, ::Array{Float64,1}, ::Float64, ::Float64) at gaussjacobi.jl:136
└                                       @ FastGaussQuadrature gaussjacobi.jl:136
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(uninitialized, m)` instead.
│   caller = innerJacobiRec(::Int64, ::Array{Float64,1}, ::Float64, ::Float64) at gaussjacobi.jl:137
└                                       @ FastGaussQuadrature gaussjacobi.jl:137
┌ Warning: `ones(a::AbstractArray)` is deprecated, consider `fill(1, size(a))`, `fill!(copy(a), 1)`, or `fill!(similar(a), 1)`. Where necessary, use `fill!(similar(a), one(eltype(a)))`.
│   caller = top-level scope
└                                                                      @ Core :0
Radau tests
┌ Warning: `unshift!` is deprecated, use `pushfirst!` instead.
│   caller = gaussradau(::Int64) at gaussradau.jl:13
└                                         @ FastGaussQuadrature gaussradau.jl:13
┌ Warning: `unshift!` is deprecated, use `pushfirst!` instead.
│   caller = gaussradau(::Int64) at gaussradau.jl:14
└                                         @ FastGaussQuadrature gaussradau.jl:14
Lobatto tests
┌ Warning: `unshift!` is deprecated, use `pushfirst!` instead.
│   caller = gausslobatto(::Int64) at gausslobatto.jl:15
└                                       @ FastGaussQuadrature gausslobatto.jl:15
┌ Warning: `unshift!` is deprecated, use `pushfirst!` instead.
│   caller = gausslobatto(::Int64) at gausslobatto.jl:17
└                                       @ FastGaussQuadrature gausslobatto.jl:17
Bessel roots tests
┌ Warning: Deprecated syntax `implicit assignment to global variable `n``.
│ Use `global n` instead.
└                                                               @ nothing none:0
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(uninitialized, m)` instead.
│   caller = Tabulate at besselroots.jl:58 [inlined]
└                                                       @ Core besselroots.jl:58
Laguerre tests
┌ Warning: Deprecated syntax `implicit assignment to global variable `n``.
│ Use `global n` instead.
└                                                               @ nothing none:0
┌ Warning: Deprecated syntax `implicit assignment to global variable `x``.
│ Use `global x` instead.
└                                                               @ nothing none:0
┌ Warning: Deprecated syntax `implicit assignment to global variable `w``.
│ Use `global w` instead.
└                                                               @ nothing none:0
┌ Warning: Deprecated syntax `implicit assignment to global variable `x``.
│ Use `global x` instead.
└                                                               @ nothing none:0
┌ Warning: Deprecated syntax `implicit assignment to global variable `w``.
│ Use `global w` instead.
└                                                               @ nothing none:0
┌ Warning: Deprecated syntax `implicit assignment to global variable `x``.
│ Use `global x` instead.
└                                                               @ nothing none:0
┌ Warning: Deprecated syntax `implicit assignment to global variable `w``.
│ Use `global w` instead.
└                                                               @ nothing none:0
┌ Warning: Deprecated syntax `implicit assignment to global variable `x``.
│ Use `global x` instead.
└                                                               @ nothing none:0
┌ Warning: Deprecated syntax `implicit assignment to global variable `w``.
│ Use `global w` instead.
└                                                               @ nothing none:0
┌ Warning: Deprecated syntax `implicit assignment to global variable `x``.
│ Use `global x` instead.
└                                                               @ nothing none:0
┌ Warning: Deprecated syntax `implicit assignment to global variable `w``.
│ Use `global w` instead.
└                                                               @ nothing none:0
┌ Warning: Deprecated syntax `implicit assignment to global variable `x``.
│ Use `global x` instead.
└                                                               @ nothing none:0
┌ Warning: Deprecated syntax `implicit assignment to global variable `w``.
│ Use `global w` instead.
└                                                               @ nothing none:0
    α = 0.0, n = 1, Golub-Welsch
    α = 0.0, n = 2, default
    α = 0.0, n = 2, RH
    α = 0.0, n = 2, RHW
    α = 0.0, n = 2, gen
┌ Warning: `eye(m::Integer)` has been deprecated in favor of `I` and `Matrix` constructors. For a direct replacement, consider `Matrix(1.0I, m, m)` or `Matrix{Float64}(I, m, m)`. If `Float64` element type is not necessary, consider the shorter `Matrix(I, m, m)` (with default `eltype(I)` `Bool`).
│   caller = getV(::Float64, ::Float64, ::Int64, ::Int64, ::Int64) at gausslaguerre.jl:1465
└                                    @ FastGaussQuadrature gausslaguerre.jl:1465
┌ Warning: `eye(m::Integer)` has been deprecated in favor of `I` and `Matrix` constructors. For a direct replacement, consider `Matrix(1.0I, m, m)` or `Matrix{Float64}(I, m, m)`. If `Float64` element type is not necessary, consider the shorter `Matrix(I, m, m)` (with default `eltype(I)` `Bool`).
│   caller = getV(::Float64, ::Float64, ::Int64, ::Int64, ::Int64) at gausslaguerre.jl:1477
└                                    @ FastGaussQuadrature gausslaguerre.jl:1477
    α = 0.0, n = 2, genW
    α = 0.0, n = 3, default
    α = 0.0, n = 3, RH
    α = 0.0, n = 3, RHW
    α = 0.0, n = 3, gen
    α = 0.0, n = 3, genW
    α = 3.241592653589793, n = 1, Golub-Welsch
    α = 3.241592653589793, n = 2, default
    α = 3.241592653589793, n = 2, RH
    α = 3.241592653589793, n = 2, RHW
    α = 3.241592653589793, n = 2, gen
    α = 3.241592653589793, n = 2, genW
    α = 3.241592653589793, n = 3, default
    α = 3.241592653589793, n = 3, RH
    α = 3.241592653589793, n = 3, RHW
    α = 3.241592653589793, n = 3, gen
    α = 3.241592653589793, n = 3, genW
    α = 0.67, n = 2, default
    α = 0.67, n = 2, gen
    α = 0.67, n = 2, genW
    α = 0.67, n = 3, default
    α = 0.67, n = 3, gen
    α = 0.67, n = 3, genW
┌ Warning: Deprecated syntax `implicit assignment to global variable `a``.
│ Use `global a` instead.
└                                                               @ nothing none:0
    α = 0.0
┌ Warning: `eye(m::Integer, n::Integer)` has been deprecated in favor of `I` and `Matrix` constructors. For a direct replacement, consider `Matrix(1.0I, m, n)` or `Matrix{Float64}(I, m, n)`. If `Float64` element type is not necessary, consider the shorter `Matrix(I, m, n)` (with default `eltype(I)` `Bool`).
│   caller = asyAirygen(::Int64, ::Float64, ::Float64, ::Int64, ::Float64, ::Int64, ::Array{Complex{Float64},5}, ::Complex{Float64}, ::Bool, ::Complex{Float64}) at gausslaguerre.jl:1294
└                                    @ FastGaussQuadrature gausslaguerre.jl:1294
┌ Warning: `eye(m::Integer, n::Integer)` has been deprecated in favor of `I` and `Matrix` constructors. For a direct replacement, consider `Matrix(1.0I, m, n)` or `Matrix{Float64}(I, m, n)`. If `Float64` element type is not necessary, consider the shorter `Matrix(I, m, n)` (with default `eltype(I)` `Bool`).
│   caller = asyBesselgen(::Int64, ::Float64, ::Float64, ::Int64, ::Float64, ::Int64, ::Array{Complex{Float64},5}, ::Float64, ::Bool) at gausslaguerre.jl:1262
└                                    @ FastGaussQuadrature gausslaguerre.jl:1262
    α = 4.15
Test Failed at /home/vagrant/.julia/v0.7/FastGaussQuadrature/test/test_gausslaguerre.jl:140
  Expression: abs((((((((5 / 49152) * alpha ^ 8 - (35 / 49152) * alpha ^ 7) + (67 / 49152) * alpha ^ 6 + (11 / 36864) * alpha ^ 5) - (1529 / 589824) * alpha ^ 4) + (1891 / 2359296) * alpha ^ 3 + (26827 / 26542080) * alpha ^ 2) - (109 / 524288) * alpha) - 190867 / 1698693120) - UQ[1, 1, 4, 1, 2]) / abs(UQ[1, 1, 4, 1, 2]) < 6tolHot
   Evaluated: 1.8504642900508684e-13 < 1.3322676295501878e-14
ERROR: LoadError: LoadError: There was an error during testing
in expression starting at /home/vagrant/.julia/v0.7/FastGaussQuadrature/test/test_gausslaguerre.jl:97
in expression starting at /home/vagrant/.julia/v0.7/FastGaussQuadrature/test/runtests.jl:22
┌ Error: ------------------------------------------------------------
│ # Testing failed for FastGaussQuadrature
│   exception =
│    failed process: Process(`/home/vagrant/julia/bin/julia -Cnative -J/home/vagrant/julia/lib/julia/sys.so --compile=yes --depwarn=yes --code-coverage=none --color=no --compiled-modules=yes --check-bounds=yes --warn-overwrite=yes --startup-file=yes /home/vagrant/.julia/v0.7/FastGaussQuadrature/test/runtests.jl`, ProcessExited(1)) [1]
│    Stacktrace:
│     [1] error(::String, ::Base.Process, ::String, ::Int64, ::String) at ./error.jl:42
│     [2] pipeline_error(::Base.Process) at ./process.jl:707
│     [3] run(::Cmd) at ./process.jl:669
│     [4] (::getfield(Base.Pkg.Entry, Symbol("##91#94")){Bool,String,Array{AbstractString,1}})() at ./pkg/entry.jl:736
│     [5] cd(::getfield(Base.Pkg.Entry, Symbol("##91#94")){Bool,String,Array{AbstractString,1}}, ::String) at ./file.jl:70
│     [6] #test!#90(::Bool, ::Function, ::String, ::Array{AbstractString,1}, ::Array{AbstractString,1}, ::Array{AbstractString,1}) at ./pkg/entry.jl:724
│     [7] (::getfield(Base.Pkg.Entry, Symbol("#kw##test!")))(::NamedTuple{(:coverage,),Tuple{Bool}}, ::typeof(Base.Pkg.Entry.test!), ::String, ::Array{AbstractString,1}, ::Array{AbstractString,1}, ::Array{AbstractString,1}) at ./<missing>:0
│     [8] #test#98(::Bool, ::Function, ::Array{AbstractString,1}) at ./pkg/entry.jl:763
│     [9] (::getfield(Base.Pkg.Entry, Symbol("#kw##test")))(::NamedTuple{(:coverage,),Tuple{Bool}}, ::typeof(Base.Pkg.Entry.test), ::Array{AbstractString,1}) at ./<missing>:0
│     [10] (::getfield(Base.Pkg.Dir, Symbol("##4#7")){Base.Iterators.IndexValue{Symbol,Bool,Tuple{Symbol},NamedTuple{(:coverage,),Tuple{Bool}}},typeof(Base.Pkg.Entry.test),Tuple{Array{AbstractString,1}}})() at ./pkg/dir.jl:36
│     [11] cd(::getfield(Base.Pkg.Dir, Symbol("##4#7")){Base.Iterators.IndexValue{Symbol,Bool,Tuple{Symbol},NamedTuple{(:coverage,),Tuple{Bool}}},typeof(Base.Pkg.Entry.test),Tuple{Array{AbstractString,1}}}, ::String) at ./file.jl:70
│     [12] #cd#1(::Base.Iterators.IndexValue{Symbol,Bool,Tuple{Symbol},NamedTuple{(:coverage,),Tuple{Bool}}}, ::Function, ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N} where N) at ./pkg/dir.jl:36
│     [13] (::getfield(Base.Pkg.Dir, Symbol("#kw##cd")))(::NamedTuple{(:coverage,),Tuple{Bool}}, ::typeof(Base.Pkg.Dir.cd), ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N} where N) at ./<missing>:0
│     [14] #test#3(::Bool, ::Function, ::String, ::Vararg{String,N} where N) at ./pkg/pkg.jl:274
│     [15] test(::String, ::Vararg{String,N} where N) at ./pkg/pkg.jl:274
│     [16] top-level scope
│     [17] eval at ./boot.jl:296 [inlined]
│     [18] eval(::Module, ::Expr) at ./sysimg.jl:71
│     [19] process_options(::Base.JLOptions) at ./client.jl:301
│     [20] _start() at ./client.jl:375
└                                                  @ Base.Pkg.Entry entry.jl:739
ERROR: FastGaussQuadrature had test errors

>>> End of log
