>>> 'Pkg.add("HTTP")' log
[ Info: Installing BinDeps v0.8.5
[ Info: Installing HTTP v0.5.7
[ Info: Installing MbedTLS v0.5.4
[ Info: Installing SHA v0.5.3
[ Info: Installing URIParser v0.3.0
[ Info: Building MbedTLS
Using system libraries...
WARNING: importing deprecated binding Base.Associative into BinDeps.
WARNING: Base.Associative is deprecated, use AbstractDict instead.
  likely near /home/vagrant/.julia/v0.7/MbedTLS/deps/build.jl:48
in @install at /home/vagrant/.julia/v0.7/BinDeps/src/dependencies.jl
[ Info: Package database updated

>>> 'Pkg.test("HTTP")' log
Julia Version 0.7.0-DEV.3421
Commit 2042dcfc2e (2018-01-16 23:39 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
      Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-135-generic #184-Ubuntu SMP Wed Oct 18 11:55:51 UTC 2017 x86_64 x86_64
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
              speed         user         nice          sys         idle          irq
       #1  3499 MHz    1038585 s         56 s      55662 s     302111 s         12 s
       #2  3499 MHz     195376 s         93 s      19049 s    1397431 s          0 s
       
  Memory: 2.93927001953125 GB (683.72265625 MB free)
  Uptime: 16363.0 sec
  Load Avg:  0.9921875  1.00048828125  1.0400390625
  WORD_SIZE: 64
  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant
Packages:
  Package Directory: /home/vagrant/.julia/v0.7
  Package Status:
2 required packages:
 - HTTP                          0.5.7
 - JSON                          0.16.4
6 additional packages:
 - BinDeps                       0.8.5
 - Compat                        0.46.0
 - MbedTLS                       0.5.4
 - Nullables                     0.0.3
 - SHA                           0.5.3
 - URIParser                     0.3.0
[ Info: Testing HTTP
┌ Warning: Replacing module `Compat`
└ @ Base loading.jl:350
┌ Warning: `replace(s::AbstractString, pat, f)` is deprecated, use `replace(s, pat => f)` instead.
│   caller = escapeHTML(::String) at utils.jl:8
└ @ HTTP utils.jl:8
┌ Warning: `replace(s::AbstractString, pat, f)` is deprecated, use `replace(s, pat => f)` instead.
│   caller = escapeHTML(::String) at utils.jl:9
└ @ HTTP utils.jl:9
┌ Warning: `replace(s::AbstractString, pat, f)` is deprecated, use `replace(s, pat => f)` instead.
│   caller = escapeHTML(::String) at utils.jl:10
└ @ HTTP utils.jl:10
┌ Warning: `replace(s::AbstractString, pat, f)` is deprecated, use `replace(s, pat => f)` instead.
│   caller = escapeHTML(::String) at utils.jl:11
└ @ HTTP utils.jl:11
┌ Warning: `replace(s::AbstractString, pat, f)` is deprecated, use `replace(s, pat => f)` instead.
│   caller = escapeHTML(::String) at utils.jl:12
└ @ HTTP utils.jl:12
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = canonicalize!(::String) at utils.jl:166
└ @ HTTP utils.jl:166
┌ Warning: `unsafe_copy!(dest, args...)` is deprecated, use `unsafe_copyto!(dest, args...)` instead.
│   caller = write(::FIFOBuffer, ::Array{UInt8,1}, ::Int64, ::Int64) at fifobuffer.jl:252
└ @ HTTP.FIFOBuffers fifobuffer.jl:252
┌ Warning: `unsafe_copy!(dest, args...)` is deprecated, use `unsafe_copyto!(dest, args...)` instead.
│   caller = write(::FIFOBuffer, ::Array{UInt8,1}, ::Int64, ::Int64) at fifobuffer.jl:259
└ @ HTTP.FIFOBuffers fifobuffer.jl:259
┌ Warning: `unsafe_copy!(dest, args...)` is deprecated, use `unsafe_copyto!(dest, args...)` instead.
│   caller = write(::FIFOBuffer, ::Array{UInt8,1}, ::Int64, ::Int64) at fifobuffer.jl:267
└ @ HTTP.FIFOBuffers fifobuffer.jl:267
┌ Warning: `unsafe_copy!(dest, args...)` is deprecated, use `unsafe_copyto!(dest, args...)` instead.
│   caller = write(::FIFOBuffer, ::Array{UInt8,1}, ::Int64, ::Int64) at fifobuffer.jl:255
└ @ HTTP.FIFOBuffers fifobuffer.jl:255
┌ Warning: `unsafe_copy!(dest, args...)` is deprecated, use `unsafe_copyto!(dest, args...)` instead.
│   caller = write(::FIFOBuffer, ::Array{UInt8,1}, ::Int64, ::Int64) at fifobuffer.jl:282
└ @ HTTP.FIFOBuffers fifobuffer.jl:282
┌ Warning: `unsafe_copy!(dest, args...)` is deprecated, use `unsafe_copyto!(dest, args...)` instead.
│   caller = write(::FIFOBuffer, ::Array{UInt8,1}, ::Int64, ::Int64) at fifobuffer.jl:275
└ @ HTTP.FIFOBuffers fifobuffer.jl:275
TEST - sniff.jl: Empty
TEST - sniff.jl: Binary
TEST - sniff.jl: HTML document #1
HTTP.sniff: Error During Test at /home/vagrant/.julia/v0.7/HTTP/test/sniff.jl:35
  Test threw an exception of type MethodError
  Expression: HTTP.sniff(case[2]) == case[3]
  MethodError: no method matching sniff(::Base.CodeUnits{UInt8,String})
  Closest candidates are:
    sniff(!Matched::Array{UInt8,1}) at /home/vagrant/.julia/v0.7/HTTP/src/sniff.jl:44
    sniff(!Matched::FIFOBuffer) at /home/vagrant/.julia/v0.7/HTTP/src/sniff.jl:41
    sniff(!Matched::String) at /home/vagrant/.julia/v0.7/HTTP/src/sniff.jl:40
    ...
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.7/HTTP/test/sniff.jl:35 [inlined]
   [2] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1007 [inlined]
   [3] top-level scope at /home/vagrant/.julia/v0.7/HTTP/test/sniff.jl:33
TEST - sniff.jl: HTML document #2
HTTP.sniff: Error During Test at /home/vagrant/.julia/v0.7/HTTP/test/sniff.jl:35
  Test threw an exception of type MethodError
  Expression: HTTP.sniff(case[2]) == case[3]
  MethodError: no method matching sniff(::Base.CodeUnits{UInt8,String})
  Closest candidates are:
    sniff(!Matched::Array{UInt8,1}) at /home/vagrant/.julia/v0.7/HTTP/src/sniff.jl:44
    sniff(!Matched::FIFOBuffer) at /home/vagrant/.julia/v0.7/HTTP/src/sniff.jl:41
    sniff(!Matched::String) at /home/vagrant/.julia/v0.7/HTTP/src/sniff.jl:40
    ...
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.7/HTTP/test/sniff.jl:35 [inlined]
   [2] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1007 [inlined]
   [3] top-level scope at /home/vagrant/.julia/v0.7/HTTP/test/sniff.jl:33
TEST - sniff.jl: HTML document #3 (leading whitespace)
HTTP.sniff: Error During Test at /home/vagrant/.julia/v0.7/HTTP/test/sniff.jl:35
  Test threw an exception of type MethodError
  Expression: HTTP.sniff(case[2]) == case[3]
  MethodError: no method matching sniff(::Base.CodeUnits{UInt8,String})
  Closest candidates are:
    sniff(!Matched::Array{UInt8,1}) at /home/vagrant/.julia/v0.7/HTTP/src/sniff.jl:44
    sniff(!Matched::FIFOBuffer) at /home/vagrant/.julia/v0.7/HTTP/src/sniff.jl:41
    sniff(!Matched::String) at /home/vagrant/.julia/v0.7/HTTP/src/sniff.jl:40
    ...
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.7/HTTP/test/sniff.jl:35 [inlined]
   [2] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1007 [inlined]
   [3] top-level scope at /home/vagrant/.julia/v0.7/HTTP/test/sniff.jl:33
TEST - sniff.jl: HTML document #4 (leading CRLF)
HTTP.sniff: Error During Test at /home/vagrant/.julia/v0.7/HTTP/test/sniff.jl:35
  Test threw an exception of type MethodError
  Expression: HTTP.sniff(case[2]) == case[3]
  MethodError: no method matching sniff(::Base.CodeUnits{UInt8,String})
  Closest candidates are:
    sniff(!Matched::Array{UInt8,1}) at /home/vagrant/.julia/v0.7/HTTP/src/sniff.jl:44
    sniff(!Matched::FIFOBuffer) at /home/vagrant/.julia/v0.7/HTTP/src/sniff.jl:41
    sniff(!Matched::String) at /home/vagrant/.julia/v0.7/HTTP/src/sniff.jl:40
    ...
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.7/HTTP/test/sniff.jl:35 [inlined]
   [2] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1007 [inlined]
   [3] top-level scope at /home/vagrant/.julia/v0.7/HTTP/test/sniff.jl:33
TEST - sniff.jl: Plain text
HTTP.sniff: Error During Test at /home/vagrant/.julia/v0.7/HTTP/test/sniff.jl:35
  Test threw an exception of type MethodError
  Expression: HTTP.sniff(case[2]) == case[3]
  MethodError: no method matching sniff(::Base.CodeUnits{UInt8,String})
  Closest candidates are:
    sniff(!Matched::Array{UInt8,1}) at /home/vagrant/.julia/v0.7/HTTP/src/sniff.jl:44
    sniff(!Matched::FIFOBuffer) at /home/vagrant/.julia/v0.7/HTTP/src/sniff.jl:41
    sniff(!Matched::String) at /home/vagrant/.julia/v0.7/HTTP/src/sniff.jl:40
    ...
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.7/HTTP/test/sniff.jl:35 [inlined]
   [2] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1007 [inlined]
   [3] top-level scope at /home/vagrant/.julia/v0.7/HTTP/test/sniff.jl:33
TEST - sniff.jl: XML
HTTP.sniff: Error During Test at /home/vagrant/.julia/v0.7/HTTP/test/sniff.jl:35
  Test threw an exception of type MethodError
  Expression: HTTP.sniff(case[2]) == case[3]
  MethodError: no method matching sniff(::Base.CodeUnits{UInt8,String})
  Closest candidates are:
    sniff(!Matched::Array{UInt8,1}) at /home/vagrant/.julia/v0.7/HTTP/src/sniff.jl:44
    sniff(!Matched::FIFOBuffer) at /home/vagrant/.julia/v0.7/HTTP/src/sniff.jl:41
    sniff(!Matched::String) at /home/vagrant/.julia/v0.7/HTTP/src/sniff.jl:40
    ...
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.7/HTTP/test/sniff.jl:35 [inlined]
   [2] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1007 [inlined]
   [3] top-level scope at /home/vagrant/.julia/v0.7/HTTP/test/sniff.jl:33
TEST - sniff.jl: GIF 87a
HTTP.sniff: Error During Test at /home/vagrant/.julia/v0.7/HTTP/test/sniff.jl:35
  Test threw an exception of type MethodError
  Expression: HTTP.sniff(case[2]) == case[3]
  MethodError: no method matching sniff(::Base.CodeUnits{UInt8,String})
  Closest candidates are:
    sniff(!Matched::Array{UInt8,1}) at /home/vagrant/.julia/v0.7/HTTP/src/sniff.jl:44
    sniff(!Matched::FIFOBuffer) at /home/vagrant/.julia/v0.7/HTTP/src/sniff.jl:41
    sniff(!Matched::String) at /home/vagrant/.julia/v0.7/HTTP/src/sniff.jl:40
    ...
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.7/HTTP/test/sniff.jl:35 [inlined]
   [2] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1007 [inlined]
   [3] top-level scope at /home/vagrant/.julia/v0.7/HTTP/test/sniff.jl:33
TEST - sniff.jl: GIF 89a
HTTP.sniff: Error During Test at /home/vagrant/.julia/v0.7/HTTP/test/sniff.jl:35
  Test threw an exception of type MethodError
  Expression: HTTP.sniff(case[2]) == case[3]
  MethodError: no method matching sniff(::Base.CodeUnits{UInt8,String})
  Closest candidates are:
    sniff(!Matched::Array{UInt8,1}) at /home/vagrant/.julia/v0.7/HTTP/src/sniff.jl:44
    sniff(!Matched::FIFOBuffer) at /home/vagrant/.julia/v0.7/HTTP/src/sniff.jl:41
    sniff(!Matched::String) at /home/vagrant/.julia/v0.7/HTTP/src/sniff.jl:40
    ...
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.7/HTTP/test/sniff.jl:35 [inlined]
   [2] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1007 [inlined]
   [3] top-level scope at /home/vagrant/.julia/v0.7/HTTP/test/sniff.jl:33
TEST - sniff.jl: MIDI audio
TEST - sniff.jl: MP3 audio/MPEG audio
TEST - sniff.jl: WAV audio #1
TEST - sniff.jl: WAV audio #2
TEST - sniff.jl: AIFF audio #1
TEST - sniff.jl: OGG audio
TEST - sniff.jl: MP4 video
TEST - sniff.jl: AVI video #1
TEST - sniff.jl: AVI video #2
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = macro expansion at sniff.jl:252 [inlined]
└ @ Core sniff.jl:252
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = #parse#14 at uri.jl:87 [inlined]
└ @ Core uri.jl:87
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = utf8_chars at uri.jl:185 [inlined]
└ @ Core uri.jl:185
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = #parse#14 at uri.jl:87 [inlined]
└ @ Core uri.jl:87
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = utf8_chars at uri.jl:185 [inlined]
└ @ Core uri.jl:185
┌ Warning: `isalnum(c::Char)` is deprecated, use `isalpha(c) || isnumeric(c)` instead.
│   caller = issafe at uri.jl:180 [inlined]
└ @ Core uri.jl:180
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = utf8_chars at uri.jl:185 [inlined]
└ @ Core uri.jl:185
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = #parse#14 at uri.jl:87 [inlined]
└ @ Core uri.jl:87
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = #parse#14 at uri.jl:87 [inlined]
└ @ Core uri.jl:87
┌ Warning: `search(s::AbstractString, c::Char)` is deprecated, use `findfirst(equalto(c), s)` instead.
│   caller = isvalid(::HTTP.URIs.URI) at uri.jl:170
└ @ HTTP.URIs uri.jl:170
HTTP.URI: Error During Test at /home/vagrant/.julia/v0.7/HTTP/test/uri.jl:40
  Test threw an exception of type MethodError
  Expression: isvalid(u)
  MethodError: no method matching isless(::Int64, ::Nothing)
  Closest candidates are:
    isless(!Matched::Missing, ::Any) at missing.jl:56
    isless(::Real, !Matched::AbstractFloat) at operators.jl:125
    isless(::Real, !Matched::Real) at operators.jl:302
    ...
  Stacktrace:
   [1] <(::Int64, ::Nothing) at ./operators.jl:227
   [2] >(::Nothing, ::Int64) at ./operators.jl:250
   [3] isvalid(::HTTP.URIs.URI) at /home/vagrant/.julia/v0.7/HTTP/src/uri.jl:170
   [4] macro expansion at /home/vagrant/.julia/v0.7/HTTP/test/uri.jl:40 [inlined]
   [5] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1007 [inlined]
   [6] top-level scope at /home/vagrant/.julia/v0.7/HTTP/test/uri.jl:13
HTTP.URI: Error During Test at /home/vagrant/.julia/v0.7/HTTP/test/uri.jl:40
  Test threw an exception of type MethodError
  Expression: isvalid(u)
  MethodError: no method matching isless(::Int64, ::Nothing)
  Closest candidates are:
    isless(!Matched::Missing, ::Any) at missing.jl:56
    isless(::Real, !Matched::AbstractFloat) at operators.jl:125
    isless(::Real, !Matched::Real) at operators.jl:302
    ...
  Stacktrace:
   [1] <(::Int64, ::Nothing) at ./operators.jl:227
   [2] >(::Nothing, ::Int64) at ./operators.jl:250
   [3] isvalid(::HTTP.URIs.URI) at /home/vagrant/.julia/v0.7/HTTP/src/uri.jl:170
   [4] macro expansion at /home/vagrant/.julia/v0.7/HTTP/test/uri.jl:40 [inlined]
   [5] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1007 [inlined]
   [6] top-level scope at /home/vagrant/.julia/v0.7/HTTP/test/uri.jl:13
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = utf8_chars at uri.jl:185 [inlined]
└ @ Core uri.jl:185
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = #parse#14 at uri.jl:87 [inlined]
└ @ Core uri.jl:87
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = utf8_chars at uri.jl:185 [inlined]
└ @ Core uri.jl:185
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = utf8_chars at uri.jl:185 [inlined]
└ @ Core uri.jl:185
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = utf8_chars at uri.jl:185 [inlined]
└ @ Core uri.jl:185
TEST - uri.jl: proxy request
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = #parse#14 at uri.jl:87 [inlined]
└ @ Core uri.jl:87
TEST - uri.jl: proxy request with port
TEST - uri.jl: CONNECT request
TEST - uri.jl: proxy ipv6 request
TEST - uri.jl: proxy ipv6 request with port
TEST - uri.jl: CONNECT ipv6 address
TEST - uri.jl: ipv4 in ipv6 address
TEST - uri.jl: extra ? in query string
TEST - uri.jl: space URL encoded
TEST - uri.jl: URL fragment
TEST - uri.jl: complex URL fragment
TEST - uri.jl: complex URL from node js url parser doc
TEST - uri.jl: complex URL with basic auth from node js url parser doc
TEST - uri.jl: double @
TEST - uri.jl: proxy empty host
TEST - uri.jl: proxy empty port
TEST - uri.jl: CONNECT with basic auth
TEST - uri.jl: CONNECT empty host
TEST - uri.jl: CONNECT empty port
TEST - uri.jl: CONNECT with extra bits
TEST - uri.jl: space in URL
TEST - uri.jl: proxy basic auth with space url encoded
TEST - uri.jl: carriage return in URL
TEST - uri.jl: proxy double : in URL
TEST - uri.jl: proxy basic auth with double :
TEST - uri.jl: line feed in URL
TEST - uri.jl: proxy empty basic auth
TEST - uri.jl: proxy line feed in hostname
TEST - uri.jl: proxy % in hostname
TEST - uri.jl: proxy ; in hostname
TEST - uri.jl: proxy basic auth with unreservedchars
TEST - uri.jl: proxy only empty basic auth
TEST - uri.jl: proxy only basic auth
TEST - uri.jl: proxy = in URL
TEST - uri.jl: ipv6 address with Zone ID
TEST - uri.jl: ipv6 address with Zone ID, but '%' is not percent-encoded
TEST - uri.jl: ipv6 address ending with '%'
TEST - uri.jl: ipv6 address with Zone ID including bad character
TEST - uri.jl: just ipv6 Zone ID
TEST - uri.jl: tab in URL
TEST - uri.jl: form feed in URL
┌ Warning: `replace(s::AbstractString, pat, f)` is deprecated, use `replace(s, pat => f)` instead.
│   caller = sanitizeCookieName at cookies.jl:397 [inlined]
└ @ Core cookies.jl:397
┌ Warning: `replace(s::AbstractString, pat, f)` is deprecated, use `replace(s, pat => f)` instead.
│   caller = sanitizeCookieName at cookies.jl:397 [inlined]
└ @ Core cookies.jl:397
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = sanitizeCookieValue(::String) at cookies.jl:411
└ @ HTTP.Cookies cookies.jl:411
┌ Warning: `search(s::AbstractString, c::Char)` is deprecated, use `findfirst(equalto(c), s)` instead.
│   caller = readsetcookie(::String, ::String) at cookies.jl:167
└ @ HTTP.Cookies cookies.jl:167
┌ Warning: `search(s::AbstractString, c::Char)` is deprecated, use `findfirst(equalto(c), s)` instead.
│   caller = readsetcookie(::String, ::String) at cookies.jl:178
└ @ HTTP.Cookies cookies.jl:178
readsetcookies: Error During Test at /home/vagrant/.julia/v0.7/HTTP/test/cookies.jl:70
  Test threw an exception of type MethodError
  Expression: (HTTP.Cookies).readsetcookies("", [h["Set-Cookie"]]) == c
  MethodError: no method matching isless(::Int64, ::Nothing)
  Closest candidates are:
    isless(!Matched::Missing, ::Any) at missing.jl:56
    isless(::Real, !Matched::AbstractFloat) at operators.jl:125
    isless(::Real, !Matched::Real) at operators.jl:302
    ...
  Stacktrace:
   [1] <(::Int64, ::Nothing) at ./operators.jl:227
   [2] >(::Nothing, ::Int64) at ./operators.jl:250
   [3] readsetcookie(::String, ::String) at /home/vagrant/.julia/v0.7/HTTP/src/cookies.jl:179
   [4] #4 at ./<missing>:0 [inlined]
   [5] next at ./generator.jl:47 [inlined]
   [6] copyto! at ./abstractarray.jl:597 [inlined]
   [7] _collect(::Type{HTTP.Cookies.Cookie}, ::Base.Generator{Array{String,1},getfield(HTTP.Cookies, Symbol("##4#5")){String}}, ::Base.HasShape) at ./array.jl:435
   [8] collect at ./array.jl:432 [inlined]
   [9] readsetcookies(::String, ::Array{String,1}) at /home/vagrant/.julia/v0.7/HTTP/src/cookies.jl:161
   [10] macro expansion at /home/vagrant/.julia/v0.7/HTTP/test/cookies.jl:70 [inlined]
   [11] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1007 [inlined]
   [12] macro expansion at /home/vagrant/.julia/v0.7/HTTP/test/cookies.jl:51 [inlined]
   [13] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1007 [inlined]
   [14] top-level scope at /home/vagrant/.julia/v0.7/HTTP/test/cookies.jl:2
readsetcookies: Error During Test at /home/vagrant/.julia/v0.7/HTTP/test/cookies.jl:70
  Test threw an exception of type MethodError
  Expression: (HTTP.Cookies).readsetcookies("", [h["Set-Cookie"]]) == c
  MethodError: no method matching isless(::Int64, ::Nothing)
  Closest candidates are:
    isless(!Matched::Missing, ::Any) at missing.jl:56
    isless(::Real, !Matched::AbstractFloat) at operators.jl:125
    isless(::Real, !Matched::Real) at operators.jl:302
    ...
  Stacktrace:
   [1] <(::Int64, ::Nothing) at ./operators.jl:227
   [2] >(::Nothing, ::Int64) at ./operators.jl:250
   [3] readsetcookie(::String, ::String) at /home/vagrant/.julia/v0.7/HTTP/src/cookies.jl:179
   [4] #4 at ./<missing>:0 [inlined]
   [5] next at ./generator.jl:47 [inlined]
   [6] copyto! at ./abstractarray.jl:597 [inlined]
   [7] _collect(::Type{HTTP.Cookies.Cookie}, ::Base.Generator{Array{String,1},getfield(HTTP.Cookies, Symbol("##4#5")){String}}, ::Base.HasShape) at ./array.jl:435
   [8] collect at ./array.jl:432 [inlined]
   [9] readsetcookies(::String, ::Array{String,1}) at /home/vagrant/.julia/v0.7/HTTP/src/cookies.jl:161
   [10] macro expansion at /home/vagrant/.julia/v0.7/HTTP/test/cookies.jl:70 [inlined]
   [11] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1007 [inlined]
   [12] macro expansion at /home/vagrant/.julia/v0.7/HTTP/test/cookies.jl:51 [inlined]
   [13] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1007 [inlined]
   [14] top-level scope at /home/vagrant/.julia/v0.7/HTTP/test/cookies.jl:2
readsetcookies: Error During Test at /home/vagrant/.julia/v0.7/HTTP/test/cookies.jl:70
  Test threw an exception of type MethodError
  Expression: (HTTP.Cookies).readsetcookies("", [h["Set-Cookie"]]) == c
  MethodError: no method matching isless(::Int64, ::Nothing)
  Closest candidates are:
    isless(!Matched::Missing, ::Any) at missing.jl:56
    isless(::Real, !Matched::AbstractFloat) at operators.jl:125
    isless(::Real, !Matched::Real) at operators.jl:302
    ...
  Stacktrace:
   [1] <(::Int64, ::Nothing) at ./operators.jl:227
   [2] >(::Nothing, ::Int64) at ./operators.jl:250
   [3] readsetcookie(::String, ::String) at /home/vagrant/.julia/v0.7/HTTP/src/cookies.jl:179
   [4] #4 at ./<missing>:0 [inlined]
   [5] next at ./generator.jl:47 [inlined]
   [6] copyto! at ./abstractarray.jl:597 [inlined]
   [7] _collect(::Type{HTTP.Cookies.Cookie}, ::Base.Generator{Array{String,1},getfield(HTTP.Cookies, Symbol("##4#5")){String}}, ::Base.HasShape) at ./array.jl:435
   [8] collect at ./array.jl:432 [inlined]
   [9] readsetcookies(::String, ::Array{String,1}) at /home/vagrant/.julia/v0.7/HTTP/src/cookies.jl:161
   [10] macro expansion at /home/vagrant/.julia/v0.7/HTTP/test/cookies.jl:70 [inlined]
   [11] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1007 [inlined]
   [12] macro expansion at /home/vagrant/.julia/v0.7/HTTP/test/cookies.jl:51 [inlined]
   [13] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1007 [inlined]
   [14] top-level scope at /home/vagrant/.julia/v0.7/HTTP/test/cookies.jl:2
┌ Warning: `search(s::AbstractString, c::Char)` is deprecated, use `findfirst(equalto(c), s)` instead.
│   caller = readcookies(::Dict{String,String}, ::String) at cookies.jl:337
└ @ HTTP.Cookies cookies.jl:337
TEST - parser.jl - Request: curl get
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = #parse#14 at uri.jl:87 [inlined]
└ @ Core uri.jl:87
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = #parse#22(::Base.RefValue{String}, ::Bool, ::Int64, ::Int64, ::Int64, ::Task, ::Bool, ::Function, ::Type{Request}, ::String) at parser.jl:151
└ @ HTTP parser.jl:151
TEST - parser.jl - Request: firefox get
TEST - parser.jl - Request: abcdefgh
TEST - parser.jl - Request: fragment in url
TEST - parser.jl - Request: get no headers no body
TEST - parser.jl - Request: get one header no body
TEST - parser.jl - Request: get funky content length body hello
TEST - parser.jl - Request: post identity body world
TEST - parser.jl - Request: post - chunked body: all your base are belong to us
TEST - parser.jl - Request: two chunks ; triple zero ending
TEST - parser.jl - Request: chunked with trailing headers. blech.
TEST - parser.jl - Request: with excessss after the length
TEST - parser.jl - Request: with quotes
TEST - parser.jl - Request: apachebench get
TEST - parser.jl - Request: query url with question mark
TEST - parser.jl - Request: newline prefix get
TEST - parser.jl - Request: upgrade request
TEST - parser.jl - Request: connect request
TEST - parser.jl - Request: report request
TEST - parser.jl - Request: request with no http version
TEST - parser.jl - Request: m-search request
TEST - parser.jl - Request: host terminated by a query string
TEST - parser.jl - Request: host:port terminated by a query string
TEST - parser.jl - Request: host:port terminated by a space
TEST - parser.jl - Request: PATCH request
TEST - parser.jl - Request: connect caps request
TEST - parser.jl - Request: utf-8 path request
TEST - parser.jl - Request: hostname underscore
TEST - parser.jl - Request: eat CRLF between requests, no "Connection: close" header
TEST - parser.jl - Request: eat CRLF between requests even if "Connection: close" is set
TEST - parser.jl - Request: PURGE request
TEST - parser.jl - Request: SEARCH request
TEST - parser.jl - Request: host:port and basic_auth
TEST - parser.jl - Request: upgrade post request
TEST - parser.jl - Request: connect with body request
TEST - parser.jl - Request: link request
TEST - parser.jl - Request: link request
TEST - parser.jl - Request: multiple connection header values with folding
TEST - parser.jl - Request: line folding in header value
TEST - parser.jl - Request: multiple connection header values with folding and lws
TEST - parser.jl - Request: multiple connection header values with folding and lws
TEST - parser.jl - Request: line folding in header value
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = #parse#14 at uri.jl:87 [inlined]
└ @ Core uri.jl:87
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = Type at fifobuffer.jl:77 [inlined]
└ @ Core fifobuffer.jl:77
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = FIFOBuffer(::String) at fifobuffer.jl:77
└ @ HTTP.FIFOBuffers fifobuffer.jl:77
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = #parse#14 at uri.jl:87 [inlined]
└ @ Core uri.jl:87
TEST - parser.jl - Response: google 301
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/HTTP/test/parser.jl:1350
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/HTTP/test/parser.jl:1350
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = #parse#22(::Base.RefValue{String}, ::Bool, ::Int64, ::Int64, ::Int64, ::Task, ::Bool, ::Function, ::Type{Response}, ::String) at parser.jl:151
└ @ HTTP parser.jl:151
TEST - parser.jl - Response: no content-length response
TEST - parser.jl - Response: 404 no headers no body
TEST - parser.jl - Response: 301 no response phrase
TEST - parser.jl - Response: 200 trailing space on chunked body
TEST - parser.jl - Response: no carriage ret
TEST - parser.jl - Response: proxy connection
TEST - parser.jl - Response: underscore header key
TEST - parser.jl - Response: bonjourmadame.fr
TEST - parser.jl - Response: field underscore
TEST - parser.jl - Response: non-ASCII in status line
TEST - parser.jl - Response: http version 0.9
TEST - parser.jl - Response: neither content-length nor transfer-encoding response
TEST - parser.jl - Response: HTTP/1.0 with keep-alive and EOF-terminated 200 status
TEST - parser.jl - Response: HTTP/1.0 with keep-alive and a 204 status
TEST - parser.jl - Response: HTTP/1.1 with an EOF-terminated 200 status
TEST - parser.jl - Response: HTTP/1.1 with a 204 status
TEST - parser.jl - Response: HTTP/1.1 with a 204 status and keep-alive disabled
TEST - parser.jl - Response: HTTP/1.1 with chunked endocing and a 200 response
TEST - parser.jl - Response: field space
TEST - parser.jl - Response: amazon.com
TEST - parser.jl - Response: empty reason phrase after space
TEST - parser.jl - Response: Content-Length-X
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = macro expansion at parser.jl:1609 [inlined]
└ @ Core parser.jl:1609
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = macro expansion at parser.jl:1616 [inlined]
└ @ Core parser.jl:1616
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = Type at fifobuffer.jl:77 [inlined]
└ @ Core fifobuffer.jl:77
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = macro expansion at parser.jl:1651 [inlined]
└ @ Core parser.jl:1651
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = macro expansion at parser.jl:1656 [inlined]
└ @ Core parser.jl:1656
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = macro expansion at parser.jl:1661 [inlined]
└ @ Core parser.jl:1661
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = macro expansion at parser.jl:1671 [inlined]
└ @ Core parser.jl:1671
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = macro expansion at parser.jl:1676 [inlined]
└ @ Core parser.jl:1676
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = macro expansion at parser.jl:1681 [inlined]
└ @ Core parser.jl:1681
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = macro expansion at parser.jl:1690 [inlined]
└ @ Core parser.jl:1690
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = macro expansion at parser.jl:1695 [inlined]
└ @ Core parser.jl:1695
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = Type at fifobuffer.jl:77 [inlined]
└ @ Core fifobuffer.jl:77
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = Type at fifobuffer.jl:77 [inlined]
└ @ Core fifobuffer.jl:77
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = Type at fifobuffer.jl:77 [inlined]
└ @ Core fifobuffer.jl:77
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = #parse#14 at uri.jl:87 [inlined]
└ @ Core uri.jl:87
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = #parse#14 at uri.jl:87 [inlined]
└ @ Core uri.jl:87
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = #parse#14 at uri.jl:87 [inlined]
└ @ Core uri.jl:87
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = Type at fifobuffer.jl:77 [inlined]
└ @ Core fifobuffer.jl:77
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = iscompressed at sniff.jl:6 [inlined]
└ @ Core sniff.jl:6
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = #parse#14 at uri.jl:87 [inlined]
└ @ Core uri.jl:87
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = #parse#14 at uri.jl:87 [inlined]
└ @ Core uri.jl:87
running http client tests...
simple GET, HEAD, POST, DELETE, etc.
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = utf8_chars at uri.jl:185 [inlined]
└ @ Core uri.jl:185
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = #parse#14 at uri.jl:87 [inlined]
└ @ Core uri.jl:87
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = iscompressed at sniff.jl:6 [inlined]
└ @ Core sniff.jl:6
async client request
pass query to uri
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = #parse#14 at uri.jl:87 [inlined]
└ @ Core uri.jl:87
cookie requests
client streaming tests
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = sniff(::String) at sniff.jl:40
└ @ HTTP sniff.jl:40
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = sniff(::String) at sniff.jl:40
└ @ HTTP sniff.jl:40
client body posting of various types
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = iscompressed at sniff.jl:6 [inlined]
└ @ Core sniff.jl:6
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = iscompressed at sniff.jl:6 [inlined]
└ @ Core sniff.jl:6
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = iscompressed at sniff.jl:6 [inlined]
└ @ Core sniff.jl:6
client transfer-encoding chunked
client multipart body
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = utf8_chars at uri.jl:185 [inlined]
└ @ Core uri.jl:185
asynchronous client request body
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = write(::FIFOBuffer, ::String) at fifobuffer.jl:292
└ @ HTTP.FIFOBuffers fifobuffer.jl:292
client redirect following
client basic auth
high-level client request methods
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = iscompressed at sniff.jl:6 [inlined]
└ @ Core sniff.jl:6
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = utf8_chars at uri.jl:185 [inlined]
└ @ Core uri.jl:185
running https client tests...
simple GET, HEAD, POST, DELETE, etc.
HTTP.Client: Error During Test at /home/vagrant/.julia/v0.7/HTTP/test/client.jl:22
  Test threw an exception of type HTTP.ConnectError
  Expression: HTTP.status(HTTP.get("$(sch)://httpbin.org/ip")) == 200
  HTTP.ConnectError:
  Exception: ArgumentError("Sampler for this object is not defined")
  
  Stacktrace:
   [1] Type at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Random/src/Random.jl:114 [inlined]
   [2] rand at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Random/src/Random.jl:201 [inlined]
   [3] rand! at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Random/src/Random.jl:218 [inlined]
   [4] rand! at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Random/src/Random.jl:214 [inlined] (repeats 2 times)
   [5] f_rng(::MbedTLS.CtrDrbg, ::Ptr{UInt8}, ::UInt64) at /home/vagrant/.julia/v0.7/MbedTLS/src/ctr_drbg.jl:22
   [6] macro expansion at /home/vagrant/.julia/v0.7/MbedTLS/src/error.jl:3 [inlined]
   [7] handshake(::MbedTLS.SSLContext) at /home/vagrant/.julia/v0.7/MbedTLS/src/ssl.jl:163
   [8] handshake! at /home/vagrant/.julia/v0.7/MbedTLS/src/MbedTLS.jl:109 [inlined]
   [9] initTLS!(::Type{HTTP.https}, ::String, ::HTTP.RequestOptions, ::TCPSocket) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:147
   [10] macro expansion at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:196 [inlined]
   [11] macro expansion at /home/vagrant/.julia/v0.7/HTTP/src/utils.jl:198 [inlined]
   [12] connect(::HTTP.Client, ::Type, ::String, ::String, ::HTTP.RequestOptions, ::Bool) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:159
   [13] connectandsend(::HTTP.Client, ::Type{HTTP.https}, ::String, ::String, ::Request, ::HTTP.RequestOptions, ::Bool) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:231
   [14] macro expansion at /home/vagrant/.julia/v0.7/HTTP/src/utils.jl:33 [inlined]
   [15] request(::HTTP.Client, ::Request, ::HTTP.RequestOptions, ::Bool, ::Array{Response,1}, ::Int64, ::Bool) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:326
   [16] #request#43(::HTTP.RequestOptions, ::Bool, ::Array{Response,1}, ::Int64, ::Bool, ::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::HTTP.Client, ::Request) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:363
   [17] #request at ./<missing>:0 [inlined]
   [18] #request#44(::Dict{String,String}, ::FIFOBuffer, ::Bool, ::Bool, ::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::HTTP.Client, ::HTTP.Method, ::HTTP.URIs.URI) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:377
   [19] (::getfield(HTTP, Symbol("#kw##request")))(::NamedTuple{(:verbose,),Tuple{Bool}}, ::typeof(HTTP.request), ::HTTP.Client, ::HTTP.Method, ::HTTP.URIs.URI) at ./<missing>:0
   [20] #get#49(::Bool, ::String, ::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::String) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:511
   [21] get(::String) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:511
   [22] macro expansion at /home/vagrant/.julia/v0.7/HTTP/test/client.jl:22 [inlined]
   [23] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1007 [inlined]
   [24] top-level scope at /home/vagrant/.julia/v0.7/HTTP/test/client.jl:3
   [25] include at ./boot.jl:292 [inlined]
   [26] include_relative(::Module, ::String) at ./loading.jl:521
   [27] include(::Module, ::String) at ./sysimg.jl:26
   [28] include(::String) at ./sysimg.jl:65
   [29] macro expansion at /home/vagrant/.julia/v0.7/HTTP/test/runtests.jl:27 [inlined]
   [30] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1007 [inlined]
   [31] top-level scope at /home/vagrant/.julia/v0.7/HTTP/test/runtests.jl:19
   [32] include at ./boot.jl:292 [inlined]
   [33] include_relative(::Module, ::String) at ./loading.jl:521
   [34] include(::Module, ::String) at ./sysimg.jl:26
   [35] process_options(::Base.JLOptions) at ./client.jl:324
   [36] _start() at ./client.jl:375
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:203 [inlined]
   [2] macro expansion at /home/vagrant/.julia/v0.7/HTTP/src/utils.jl:198 [inlined]
   [3] connect(::HTTP.Client, ::Type, ::String, ::String, ::HTTP.RequestOptions, ::Bool) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:159
   [4] connectandsend(::HTTP.Client, ::Type{HTTP.https}, ::String, ::String, ::Request, ::HTTP.RequestOptions, ::Bool) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:231
   [5] macro expansion at /home/vagrant/.julia/v0.7/HTTP/src/utils.jl:33 [inlined]
   [6] request(::HTTP.Client, ::Request, ::HTTP.RequestOptions, ::Bool, ::Array{Response,1}, ::Int64, ::Bool) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:326
   [7] #request#43(::HTTP.RequestOptions, ::Bool, ::Array{Response,1}, ::Int64, ::Bool, ::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::HTTP.Client, ::Request) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:363
   [8] #request at ./<missing>:0 [inlined]
   [9] #request#44(::Dict{String,String}, ::FIFOBuffer, ::Bool, ::Bool, ::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::HTTP.Client, ::HTTP.Method, ::HTTP.URIs.URI) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:377
   [10] (::getfield(HTTP, Symbol("#kw##request")))(::NamedTuple{(:verbose,),Tuple{Bool}}, ::typeof(HTTP.request), ::HTTP.Client, ::HTTP.Method, ::HTTP.URIs.URI) at ./<missing>:0
   [11] #get#49(::Bool, ::String, ::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::String) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:511
   [12] get(::String) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:511
   [13] macro expansion at /home/vagrant/.julia/v0.7/HTTP/test/client.jl:22 [inlined]
   [14] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1007 [inlined]
   [15] top-level scope at /home/vagrant/.julia/v0.7/HTTP/test/client.jl:3
HTTP.Client: Error During Test at /home/vagrant/.julia/v0.7/HTTP/test/client.jl:23
  Test threw an exception of type HTTP.ConnectError
  Expression: HTTP.status(HTTP.head("$(sch)://httpbin.org/ip")) == 200
  HTTP.ConnectError:
  Exception: ArgumentError("Sampler for this object is not defined")
  
  Stacktrace:
   [1] Type at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Random/src/Random.jl:114 [inlined]
   [2] rand at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Random/src/Random.jl:201 [inlined]
   [3] rand! at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Random/src/Random.jl:218 [inlined]
   [4] rand! at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Random/src/Random.jl:214 [inlined] (repeats 2 times)
   [5] f_rng(::MbedTLS.CtrDrbg, ::Ptr{UInt8}, ::UInt64) at /home/vagrant/.julia/v0.7/MbedTLS/src/ctr_drbg.jl:22
   [6] macro expansion at /home/vagrant/.julia/v0.7/MbedTLS/src/error.jl:3 [inlined]
   [7] handshake(::MbedTLS.SSLContext) at /home/vagrant/.julia/v0.7/MbedTLS/src/ssl.jl:163
   [8] handshake! at /home/vagrant/.julia/v0.7/MbedTLS/src/MbedTLS.jl:109 [inlined]
   [9] initTLS!(::Type{HTTP.https}, ::String, ::HTTP.RequestOptions, ::TCPSocket) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:147
   [10] macro expansion at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:196 [inlined]
   [11] macro expansion at /home/vagrant/.julia/v0.7/HTTP/src/utils.jl:198 [inlined]
   [12] connect(::HTTP.Client, ::Type, ::String, ::String, ::HTTP.RequestOptions, ::Bool) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:159
   [13] connectandsend(::HTTP.Client, ::Type{HTTP.https}, ::String, ::String, ::Request, ::HTTP.RequestOptions, ::Bool) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:231
   [14] macro expansion at /home/vagrant/.julia/v0.7/HTTP/src/utils.jl:33 [inlined]
   [15] request(::HTTP.Client, ::Request, ::HTTP.RequestOptions, ::Bool, ::Array{Response,1}, ::Int64, ::Bool) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:326
   [16] #request#43(::HTTP.RequestOptions, ::Bool, ::Array{Response,1}, ::Int64, ::Bool, ::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::HTTP.Client, ::Request) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:363
   [17] #request at ./<missing>:0 [inlined]
   [18] #request#44(::Dict{String,String}, ::FIFOBuffer, ::Bool, ::Bool, ::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::HTTP.Client, ::HTTP.Method, ::HTTP.URIs.URI) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:377
   [19] (::getfield(HTTP, Symbol("#kw##request")))(::NamedTuple{(:verbose,),Tuple{Bool}}, ::typeof(HTTP.request), ::HTTP.Client, ::HTTP.Method, ::HTTP.URIs.URI) at ./<missing>:0
   [20] #head#65(::Bool, ::String, ::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::String) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:511
   [21] head(::String) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:511
   [22] macro expansion at /home/vagrant/.julia/v0.7/HTTP/test/client.jl:23 [inlined]
   [23] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1007 [inlined]
   [24] top-level scope at /home/vagrant/.julia/v0.7/HTTP/test/client.jl:3
   [25] include at ./boot.jl:292 [inlined]
   [26] include_relative(::Module, ::String) at ./loading.jl:521
   [27] include(::Module, ::String) at ./sysimg.jl:26
   [28] include(::String) at ./sysimg.jl:65
   [29] macro expansion at /home/vagrant/.julia/v0.7/HTTP/test/runtests.jl:27 [inlined]
   [30] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1007 [inlined]
   [31] top-level scope at /home/vagrant/.julia/v0.7/HTTP/test/runtests.jl:19
   [32] include at ./boot.jl:292 [inlined]
   [33] include_relative(::Module, ::String) at ./loading.jl:521
   [34] include(::Module, ::String) at ./sysimg.jl:26
   [35] process_options(::Base.JLOptions) at ./client.jl:324
   [36] _start() at ./client.jl:375
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:203 [inlined]
   [2] macro expansion at /home/vagrant/.julia/v0.7/HTTP/src/utils.jl:198 [inlined]
   [3] connect(::HTTP.Client, ::Type, ::String, ::String, ::HTTP.RequestOptions, ::Bool) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:159
   [4] connectandsend(::HTTP.Client, ::Type{HTTP.https}, ::String, ::String, ::Request, ::HTTP.RequestOptions, ::Bool) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:231
   [5] macro expansion at /home/vagrant/.julia/v0.7/HTTP/src/utils.jl:33 [inlined]
   [6] request(::HTTP.Client, ::Request, ::HTTP.RequestOptions, ::Bool, ::Array{Response,1}, ::Int64, ::Bool) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:326
   [7] #request#43(::HTTP.RequestOptions, ::Bool, ::Array{Response,1}, ::Int64, ::Bool, ::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::HTTP.Client, ::Request) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:363
   [8] #request at ./<missing>:0 [inlined]
   [9] #request#44(::Dict{String,String}, ::FIFOBuffer, ::Bool, ::Bool, ::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::HTTP.Client, ::HTTP.Method, ::HTTP.URIs.URI) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:377
   [10] (::getfield(HTTP, Symbol("#kw##request")))(::NamedTuple{(:verbose,),Tuple{Bool}}, ::typeof(HTTP.request), ::HTTP.Client, ::HTTP.Method, ::HTTP.URIs.URI) at ./<missing>:0
   [11] #head#65(::Bool, ::String, ::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::String) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:511
   [12] head(::String) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:511
   [13] macro expansion at /home/vagrant/.julia/v0.7/HTTP/test/client.jl:23 [inlined]
   [14] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1007 [inlined]
   [15] top-level scope at /home/vagrant/.julia/v0.7/HTTP/test/client.jl:3
HTTP.Client: Error During Test at /home/vagrant/.julia/v0.7/HTTP/test/client.jl:24
  Test threw an exception of type HTTP.ConnectError
  Expression: HTTP.status(HTTP.options("$(sch)://httpbin.org/ip")) == 200
  HTTP.ConnectError:
  Exception: ArgumentError("Sampler for this object is not defined")
  
  Stacktrace:
   [1] Type at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Random/src/Random.jl:114 [inlined]
   [2] rand at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Random/src/Random.jl:201 [inlined]
   [3] rand! at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Random/src/Random.jl:218 [inlined]
   [4] rand! at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Random/src/Random.jl:214 [inlined] (repeats 2 times)
   [5] f_rng(::MbedTLS.CtrDrbg, ::Ptr{UInt8}, ::UInt64) at /home/vagrant/.julia/v0.7/MbedTLS/src/ctr_drbg.jl:22
   [6] macro expansion at /home/vagrant/.julia/v0.7/MbedTLS/src/error.jl:3 [inlined]
   [7] handshake(::MbedTLS.SSLContext) at /home/vagrant/.julia/v0.7/MbedTLS/src/ssl.jl:163
   [8] handshake! at /home/vagrant/.julia/v0.7/MbedTLS/src/MbedTLS.jl:109 [inlined]
   [9] initTLS!(::Type{HTTP.https}, ::String, ::HTTP.RequestOptions, ::TCPSocket) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:147
   [10] macro expansion at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:196 [inlined]
   [11] macro expansion at /home/vagrant/.julia/v0.7/HTTP/src/utils.jl:198 [inlined]
   [12] connect(::HTTP.Client, ::Type, ::String, ::String, ::HTTP.RequestOptions, ::Bool) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:159
   [13] connectandsend(::HTTP.Client, ::Type{HTTP.https}, ::String, ::String, ::Request, ::HTTP.RequestOptions, ::Bool) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:231
   [14] macro expansion at /home/vagrant/.julia/v0.7/HTTP/src/utils.jl:33 [inlined]
   [15] request(::HTTP.Client, ::Request, ::HTTP.RequestOptions, ::Bool, ::Array{Response,1}, ::Int64, ::Bool) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:326
   [16] #request#43(::HTTP.RequestOptions, ::Bool, ::Array{Response,1}, ::Int64, ::Bool, ::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::HTTP.Client, ::Request) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:363
   [17] #request at ./<missing>:0 [inlined]
   [18] #request#44(::Dict{String,String}, ::FIFOBuffer, ::Bool, ::Bool, ::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::HTTP.Client, ::HTTP.Method, ::HTTP.URIs.URI) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:377
   [19] (::getfield(HTTP, Symbol("#kw##request")))(::NamedTuple{(:verbose,),Tuple{Bool}}, ::typeof(HTTP.request), ::HTTP.Client, ::HTTP.Method, ::HTTP.URIs.URI) at ./<missing>:0
   [20] #options#73(::Bool, ::String, ::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::String) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:511
   [21] options(::String) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:511
   [22] macro expansion at /home/vagrant/.julia/v0.7/HTTP/test/client.jl:24 [inlined]
   [23] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1007 [inlined]
   [24] top-level scope at /home/vagrant/.julia/v0.7/HTTP/test/client.jl:3
   [25] include at ./boot.jl:292 [inlined]
   [26] include_relative(::Module, ::String) at ./loading.jl:521
   [27] include(::Module, ::String) at ./sysimg.jl:26
   [28] include(::String) at ./sysimg.jl:65
   [29] macro expansion at /home/vagrant/.julia/v0.7/HTTP/test/runtests.jl:27 [inlined]
   [30] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1007 [inlined]
   [31] top-level scope at /home/vagrant/.julia/v0.7/HTTP/test/runtests.jl:19
   [32] include at ./boot.jl:292 [inlined]
   [33] include_relative(::Module, ::String) at ./loading.jl:521
   [34] include(::Module, ::String) at ./sysimg.jl:26
   [35] process_options(::Base.JLOptions) at ./client.jl:324
   [36] _start() at ./client.jl:375
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:203 [inlined]
   [2] macro expansion at /home/vagrant/.julia/v0.7/HTTP/src/utils.jl:198 [inlined]
   [3] connect(::HTTP.Client, ::Type, ::String, ::String, ::HTTP.RequestOptions, ::Bool) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:159
   [4] connectandsend(::HTTP.Client, ::Type{HTTP.https}, ::String, ::String, ::Request, ::HTTP.RequestOptions, ::Bool) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:231
   [5] macro expansion at /home/vagrant/.julia/v0.7/HTTP/src/utils.jl:33 [inlined]
   [6] request(::HTTP.Client, ::Request, ::HTTP.RequestOptions, ::Bool, ::Array{Response,1}, ::Int64, ::Bool) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:326
   [7] #request#43(::HTTP.RequestOptions, ::Bool, ::Array{Response,1}, ::Int64, ::Bool, ::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::HTTP.Client, ::Request) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:363
   [8] #request at ./<missing>:0 [inlined]
   [9] #request#44(::Dict{String,String}, ::FIFOBuffer, ::Bool, ::Bool, ::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::HTTP.Client, ::HTTP.Method, ::HTTP.URIs.URI) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:377
   [10] (::getfield(HTTP, Symbol("#kw##request")))(::NamedTuple{(:verbose,),Tuple{Bool}}, ::typeof(HTTP.request), ::HTTP.Client, ::HTTP.Method, ::HTTP.URIs.URI) at ./<missing>:0
   [11] #options#73(::Bool, ::String, ::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::String) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:511
   [12] options(::String) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:511
   [13] macro expansion at /home/vagrant/.julia/v0.7/HTTP/test/client.jl:24 [inlined]
   [14] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1007 [inlined]
   [15] top-level scope at /home/vagrant/.julia/v0.7/HTTP/test/client.jl:3
HTTP.Client: Error During Test at /home/vagrant/.julia/v0.7/HTTP/test/client.jl:25
  Test threw an exception of type HTTP.ConnectError
  Expression: HTTP.status(HTTP.post("$(sch)://httpbin.org/ip"; statusraise=false)) == 405
  HTTP.ConnectError:
  Exception: ArgumentError("Sampler for this object is not defined")
  
  Stacktrace:
   [1] Type at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Random/src/Random.jl:114 [inlined]
   [2] rand at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Random/src/Random.jl:201 [inlined]
   [3] rand! at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Random/src/Random.jl:218 [inlined]
   [4] rand! at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Random/src/Random.jl:214 [inlined] (repeats 2 times)
   [5] f_rng(::MbedTLS.CtrDrbg, ::Ptr{UInt8}, ::UInt64) at /home/vagrant/.julia/v0.7/MbedTLS/src/ctr_drbg.jl:22
   [6] macro expansion at /home/vagrant/.julia/v0.7/MbedTLS/src/error.jl:3 [inlined]
   [7] handshake(::MbedTLS.SSLContext) at /home/vagrant/.julia/v0.7/MbedTLS/src/ssl.jl:163
   [8] handshake! at /home/vagrant/.julia/v0.7/MbedTLS/src/MbedTLS.jl:109 [inlined]
   [9] initTLS!(::Type{HTTP.https}, ::String, ::HTTP.RequestOptions, ::TCPSocket) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:147
   [10] macro expansion at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:196 [inlined]
   [11] macro expansion at /home/vagrant/.julia/v0.7/HTTP/src/utils.jl:198 [inlined]
   [12] connect(::HTTP.Client, ::Type, ::String, ::String, ::HTTP.RequestOptions, ::Bool) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:159
   [13] connectandsend(::HTTP.Client, ::Type{HTTP.https}, ::String, ::String, ::Request, ::HTTP.RequestOptions, ::Bool) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:231
   [14] macro expansion at /home/vagrant/.julia/v0.7/HTTP/src/utils.jl:33 [inlined]
   [15] request(::HTTP.Client, ::Request, ::HTTP.RequestOptions, ::Bool, ::Array{Response,1}, ::Int64, ::Bool) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:326
   [16] #request#43(::HTTP.RequestOptions, ::Bool, ::Array{Response,1}, ::Int64, ::Bool, ::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::HTTP.Client, ::Request) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:363
   [17] #request at ./<missing>:0 [inlined]
   [18] #request#44(::Dict{String,String}, ::FIFOBuffer, ::Bool, ::Bool, ::Base.Iterators.IndexValue{Symbol,Bool,Tuple{Symbol},NamedTuple{(:statusraise,),Tuple{Bool}}}, ::Function, ::HTTP.Client, ::HTTP.Method, ::HTTP.URIs.URI) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:377
   [19] (::getfield(HTTP, Symbol("#kw##request")))(::NamedTuple{(:verbose, :statusraise),Tuple{Bool,Bool}}, ::typeof(HTTP.request), ::HTTP.Client, ::HTTP.Method, ::HTTP.URIs.URI) at ./<missing>:0
   [20] #post#53(::Bool, ::String, ::Base.Iterators.IndexValue{Symbol,Bool,Tuple{Symbol},NamedTuple{(:statusraise,),Tuple{Bool}}}, ::Function, ::String) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:511
   [21] (::getfield(HTTP, Symbol("#kw##post")))(::NamedTuple{(:statusraise,),Tuple{Bool}}, ::typeof(HTTP.post), ::String) at ./<missing>:0
   [22] macro expansion at /home/vagrant/.julia/v0.7/HTTP/test/client.jl:25 [inlined]
   [23] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1007 [inlined]
   [24] top-level scope at /home/vagrant/.julia/v0.7/HTTP/test/client.jl:3
   [25] include at ./boot.jl:292 [inlined]
   [26] include_relative(::Module, ::String) at ./loading.jl:521
   [27] include(::Module, ::String) at ./sysimg.jl:26
   [28] include(::String) at ./sysimg.jl:65
   [29] macro expansion at /home/vagrant/.julia/v0.7/HTTP/test/runtests.jl:27 [inlined]
   [30] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1007 [inlined]
   [31] top-level scope at /home/vagrant/.julia/v0.7/HTTP/test/runtests.jl:19
   [32] include at ./boot.jl:292 [inlined]
   [33] include_relative(::Module, ::String) at ./loading.jl:521
   [34] include(::Module, ::String) at ./sysimg.jl:26
   [35] process_options(::Base.JLOptions) at ./client.jl:324
   [36] _start() at ./client.jl:375
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:203 [inlined]
   [2] macro expansion at /home/vagrant/.julia/v0.7/HTTP/src/utils.jl:198 [inlined]
   [3] connect(::HTTP.Client, ::Type, ::String, ::String, ::HTTP.RequestOptions, ::Bool) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:159
   [4] connectandsend(::HTTP.Client, ::Type{HTTP.https}, ::String, ::String, ::Request, ::HTTP.RequestOptions, ::Bool) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:231
   [5] macro expansion at /home/vagrant/.julia/v0.7/HTTP/src/utils.jl:33 [inlined]
   [6] request(::HTTP.Client, ::Request, ::HTTP.RequestOptions, ::Bool, ::Array{Response,1}, ::Int64, ::Bool) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:326
   [7] #request#43(::HTTP.RequestOptions, ::Bool, ::Array{Response,1}, ::Int64, ::Bool, ::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::HTTP.Client, ::Request) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:363
   [8] #request at ./<missing>:0 [inlined]
   [9] #request#44(::Dict{String,String}, ::FIFOBuffer, ::Bool, ::Bool, ::Base.Iterators.IndexValue{Symbol,Bool,Tuple{Symbol},NamedTuple{(:statusraise,),Tuple{Bool}}}, ::Function, ::HTTP.Client, ::HTTP.Method, ::HTTP.URIs.URI) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:377
   [10] (::getfield(HTTP, Symbol("#kw##request")))(::NamedTuple{(:verbose, :statusraise),Tuple{Bool,Bool}}, ::typeof(HTTP.request), ::HTTP.Client, ::HTTP.Method, ::HTTP.URIs.URI) at ./<missing>:0
   [11] #post#53(::Bool, ::String, ::Base.Iterators.IndexValue{Symbol,Bool,Tuple{Symbol},NamedTuple{(:statusraise,),Tuple{Bool}}}, ::Function, ::String) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:511
   [12] (::getfield(HTTP, Symbol("#kw##post")))(::NamedTuple{(:statusraise,),Tuple{Bool}}, ::typeof(HTTP.post), ::String) at ./<missing>:0
   [13] macro expansion at /home/vagrant/.julia/v0.7/HTTP/test/client.jl:25 [inlined]
   [14] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1007 [inlined]
   [15] top-level scope at /home/vagrant/.julia/v0.7/HTTP/test/client.jl:3
HTTP.Client: Error During Test at /home/vagrant/.julia/v0.7/HTTP/test/client.jl:26
  Test threw an exception of type HTTP.ConnectError
  Expression: HTTP.status(HTTP.post("$(sch)://httpbin.org/post")) == 200
  HTTP.ConnectError:
  Exception: ArgumentError("Sampler for this object is not defined")
  
  Stacktrace:
   [1] Type at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Random/src/Random.jl:114 [inlined]
   [2] rand at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Random/src/Random.jl:201 [inlined]
   [3] rand! at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Random/src/Random.jl:218 [inlined]
   [4] rand! at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Random/src/Random.jl:214 [inlined] (repeats 2 times)
   [5] f_rng(::MbedTLS.CtrDrbg, ::Ptr{UInt8}, ::UInt64) at /home/vagrant/.julia/v0.7/MbedTLS/src/ctr_drbg.jl:22
   [6] macro expansion at /home/vagrant/.julia/v0.7/MbedTLS/src/error.jl:3 [inlined]
   [7] handshake(::MbedTLS.SSLContext) at /home/vagrant/.julia/v0.7/MbedTLS/src/ssl.jl:163
   [8] handshake! at /home/vagrant/.julia/v0.7/MbedTLS/src/MbedTLS.jl:109 [inlined]
   [9] initTLS!(::Type{HTTP.https}, ::String, ::HTTP.RequestOptions, ::TCPSocket) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:147
   [10] macro expansion at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:196 [inlined]
   [11] macro expansion at /home/vagrant/.julia/v0.7/HTTP/src/utils.jl:198 [inlined]
   [12] connect(::HTTP.Client, ::Type, ::String, ::String, ::HTTP.RequestOptions, ::Bool) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:159
   [13] connectandsend(::HTTP.Client, ::Type{HTTP.https}, ::String, ::String, ::Request, ::HTTP.RequestOptions, ::Bool) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:231
   [14] macro expansion at /home/vagrant/.julia/v0.7/HTTP/src/utils.jl:33 [inlined]
   [15] request(::HTTP.Client, ::Request, ::HTTP.RequestOptions, ::Bool, ::Array{Response,1}, ::Int64, ::Bool) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:326
   [16] #request#43(::HTTP.RequestOptions, ::Bool, ::Array{Response,1}, ::Int64, ::Bool, ::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::HTTP.Client, ::Request) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:363
   [17] #request at ./<missing>:0 [inlined]
   [18] #request#44(::Dict{String,String}, ::FIFOBuffer, ::Bool, ::Bool, ::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::HTTP.Client, ::HTTP.Method, ::HTTP.URIs.URI) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:377
   [19] (::getfield(HTTP, Symbol("#kw##request")))(::NamedTuple{(:verbose,),Tuple{Bool}}, ::typeof(HTTP.request), ::HTTP.Client, ::HTTP.Method, ::HTTP.URIs.URI) at ./<missing>:0
   [20] #post#53(::Bool, ::String, ::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::String) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:511
   [21] post(::String) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:511
   [22] macro expansion at /home/vagrant/.julia/v0.7/HTTP/test/client.jl:26 [inlined]
   [23] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1007 [inlined]
   [24] top-level scope at /home/vagrant/.julia/v0.7/HTTP/test/client.jl:3
   [25] include at ./boot.jl:292 [inlined]
   [26] include_relative(::Module, ::String) at ./loading.jl:521
   [27] include(::Module, ::String) at ./sysimg.jl:26
   [28] include(::String) at ./sysimg.jl:65
   [29] macro expansion at /home/vagrant/.julia/v0.7/HTTP/test/runtests.jl:27 [inlined]
   [30] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1007 [inlined]
   [31] top-level scope at /home/vagrant/.julia/v0.7/HTTP/test/runtests.jl:19
   [32] include at ./boot.jl:292 [inlined]
   [33] include_relative(::Module, ::String) at ./loading.jl:521
   [34] include(::Module, ::String) at ./sysimg.jl:26
   [35] process_options(::Base.JLOptions) at ./client.jl:324
   [36] _start() at ./client.jl:375
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:203 [inlined]
   [2] macro expansion at /home/vagrant/.julia/v0.7/HTTP/src/utils.jl:198 [inlined]
   [3] connect(::HTTP.Client, ::Type, ::String, ::String, ::HTTP.RequestOptions, ::Bool) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:159
   [4] connectandsend(::HTTP.Client, ::Type{HTTP.https}, ::String, ::String, ::Request, ::HTTP.RequestOptions, ::Bool) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:231
   [5] macro expansion at /home/vagrant/.julia/v0.7/HTTP/src/utils.jl:33 [inlined]
   [6] request(::HTTP.Client, ::Request, ::HTTP.RequestOptions, ::Bool, ::Array{Response,1}, ::Int64, ::Bool) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:326
   [7] #request#43(::HTTP.RequestOptions, ::Bool, ::Array{Response,1}, ::Int64, ::Bool, ::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::HTTP.Client, ::Request) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:363
   [8] #request at ./<missing>:0 [inlined]
   [9] #request#44(::Dict{String,String}, ::FIFOBuffer, ::Bool, ::Bool, ::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::HTTP.Client, ::HTTP.Method, ::HTTP.URIs.URI) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:377
   [10] (::getfield(HTTP, Symbol("#kw##request")))(::NamedTuple{(:verbose,),Tuple{Bool}}, ::typeof(HTTP.request), ::HTTP.Client, ::HTTP.Method, ::HTTP.URIs.URI) at ./<missing>:0
   [11] #post#53(::Bool, ::String, ::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::String) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:511
   [12] post(::String) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:511
   [13] macro expansion at /home/vagrant/.julia/v0.7/HTTP/test/client.jl:26 [inlined]
   [14] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1007 [inlined]
   [15] top-level scope at /home/vagrant/.julia/v0.7/HTTP/test/client.jl:3
HTTP.Client: Error During Test at /home/vagrant/.julia/v0.7/HTTP/test/client.jl:27
  Test threw an exception of type HTTP.ConnectError
  Expression: HTTP.status(HTTP.put("$(sch)://httpbin.org/put")) == 200
  HTTP.ConnectError:
  Exception: ArgumentError("Sampler for this object is not defined")
  
  Stacktrace:
   [1] Type at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Random/src/Random.jl:114 [inlined]
   [2] rand at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Random/src/Random.jl:201 [inlined]
   [3] rand! at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Random/src/Random.jl:218 [inlined]
   [4] rand! at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Random/src/Random.jl:214 [inlined] (repeats 2 times)
   [5] f_rng(::MbedTLS.CtrDrbg, ::Ptr{UInt8}, ::UInt64) at /home/vagrant/.julia/v0.7/MbedTLS/src/ctr_drbg.jl:22
   [6] macro expansion at /home/vagrant/.julia/v0.7/MbedTLS/src/error.jl:3 [inlined]
   [7] handshake(::MbedTLS.SSLContext) at /home/vagrant/.julia/v0.7/MbedTLS/src/ssl.jl:163
   [8] handshake! at /home/vagrant/.julia/v0.7/MbedTLS/src/MbedTLS.jl:109 [inlined]
   [9] initTLS!(::Type{HTTP.https}, ::String, ::HTTP.RequestOptions, ::TCPSocket) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:147
   [10] macro expansion at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:196 [inlined]
   [11] macro expansion at /home/vagrant/.julia/v0.7/HTTP/src/utils.jl:198 [inlined]
   [12] connect(::HTTP.Client, ::Type, ::String, ::String, ::HTTP.RequestOptions, ::Bool) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:159
   [13] connectandsend(::HTTP.Client, ::Type{HTTP.https}, ::String, ::String, ::Request, ::HTTP.RequestOptions, ::Bool) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:231
   [14] macro expansion at /home/vagrant/.julia/v0.7/HTTP/src/utils.jl:33 [inlined]
   [15] request(::HTTP.Client, ::Request, ::HTTP.RequestOptions, ::Bool, ::Array{Response,1}, ::Int64, ::Bool) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:326
   [16] #request#43(::HTTP.RequestOptions, ::Bool, ::Array{Response,1}, ::Int64, ::Bool, ::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::HTTP.Client, ::Request) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:363
   [17] #request at ./<missing>:0 [inlined]
   [18] #request#44(::Dict{String,String}, ::FIFOBuffer, ::Bool, ::Bool, ::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::HTTP.Client, ::HTTP.Method, ::HTTP.URIs.URI) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:377
   [19] (::getfield(HTTP, Symbol("#kw##request")))(::NamedTuple{(:verbose,),Tuple{Bool}}, ::typeof(HTTP.request), ::HTTP.Client, ::HTTP.Method, ::HTTP.URIs.URI) at ./<missing>:0
   [20] #put#57(::Bool, ::String, ::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::String) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:511
   [21] put(::String) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:511
   [22] macro expansion at /home/vagrant/.julia/v0.7/HTTP/test/client.jl:27 [inlined]
   [23] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1007 [inlined]
   [24] top-level scope at /home/vagrant/.julia/v0.7/HTTP/test/client.jl:3
   [25] include at ./boot.jl:292 [inlined]
   [26] include_relative(::Module, ::String) at ./loading.jl:521
   [27] include(::Module, ::String) at ./sysimg.jl:26
   [28] include(::String) at ./sysimg.jl:65
   [29] macro expansion at /home/vagrant/.julia/v0.7/HTTP/test/runtests.jl:27 [inlined]
   [30] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1007 [inlined]
   [31] top-level scope at /home/vagrant/.julia/v0.7/HTTP/test/runtests.jl:19
   [32] include at ./boot.jl:292 [inlined]
   [33] include_relative(::Module, ::String) at ./loading.jl:521
   [34] include(::Module, ::String) at ./sysimg.jl:26
   [35] process_options(::Base.JLOptions) at ./client.jl:324
   [36] _start() at ./client.jl:375
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:203 [inlined]
   [2] macro expansion at /home/vagrant/.julia/v0.7/HTTP/src/utils.jl:198 [inlined]
   [3] connect(::HTTP.Client, ::Type, ::String, ::String, ::HTTP.RequestOptions, ::Bool) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:159
   [4] connectandsend(::HTTP.Client, ::Type{HTTP.https}, ::String, ::String, ::Request, ::HTTP.RequestOptions, ::Bool) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:231
   [5] macro expansion at /home/vagrant/.julia/v0.7/HTTP/src/utils.jl:33 [inlined]
   [6] request(::HTTP.Client, ::Request, ::HTTP.RequestOptions, ::Bool, ::Array{Response,1}, ::Int64, ::Bool) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:326
   [7] #request#43(::HTTP.RequestOptions, ::Bool, ::Array{Response,1}, ::Int64, ::Bool, ::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::HTTP.Client, ::Request) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:363
   [8] #request at ./<missing>:0 [inlined]
   [9] #request#44(::Dict{String,String}, ::FIFOBuffer, ::Bool, ::Bool, ::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::HTTP.Client, ::HTTP.Method, ::HTTP.URIs.URI) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:377
   [10] (::getfield(HTTP, Symbol("#kw##request")))(::NamedTuple{(:verbose,),Tuple{Bool}}, ::typeof(HTTP.request), ::HTTP.Client, ::HTTP.Method, ::HTTP.URIs.URI) at ./<missing>:0
   [11] #put#57(::Bool, ::String, ::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::String) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:511
   [12] put(::String) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:511
   [13] macro expansion at /home/vagrant/.julia/v0.7/HTTP/test/client.jl:27 [inlined]
   [14] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1007 [inlined]
   [15] top-level scope at /home/vagrant/.julia/v0.7/HTTP/test/client.jl:3
HTTP.Client: Error During Test at /home/vagrant/.julia/v0.7/HTTP/test/client.jl:28
  Test threw an exception of type HTTP.ConnectError
  Expression: HTTP.status(HTTP.delete("$(sch)://httpbin.org/delete")) == 200
  HTTP.ConnectError:
  Exception: ArgumentError("Sampler for this object is not defined")
  
  Stacktrace:
   [1] Type at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Random/src/Random.jl:114 [inlined]
   [2] rand at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Random/src/Random.jl:201 [inlined]
   [3] rand! at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Random/src/Random.jl:218 [inlined]
   [4] rand! at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Random/src/Random.jl:214 [inlined] (repeats 2 times)
   [5] f_rng(::MbedTLS.CtrDrbg, ::Ptr{UInt8}, ::UInt64) at /home/vagrant/.julia/v0.7/MbedTLS/src/ctr_drbg.jl:22
   [6] macro expansion at /home/vagrant/.julia/v0.7/MbedTLS/src/error.jl:3 [inlined]
   [7] handshake(::MbedTLS.SSLContext) at /home/vagrant/.julia/v0.7/MbedTLS/src/ssl.jl:163
   [8] handshake! at /home/vagrant/.julia/v0.7/MbedTLS/src/MbedTLS.jl:109 [inlined]
   [9] initTLS!(::Type{HTTP.https}, ::String, ::HTTP.RequestOptions, ::TCPSocket) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:147
   [10] macro expansion at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:196 [inlined]
   [11] macro expansion at /home/vagrant/.julia/v0.7/HTTP/src/utils.jl:198 [inlined]
   [12] connect(::HTTP.Client, ::Type, ::String, ::String, ::HTTP.RequestOptions, ::Bool) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:159
   [13] connectandsend(::HTTP.Client, ::Type{HTTP.https}, ::String, ::String, ::Request, ::HTTP.RequestOptions, ::Bool) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:231
   [14] macro expansion at /home/vagrant/.julia/v0.7/HTTP/src/utils.jl:33 [inlined]
   [15] request(::HTTP.Client, ::Request, ::HTTP.RequestOptions, ::Bool, ::Array{Response,1}, ::Int64, ::Bool) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:326
   [16] #request#43(::HTTP.RequestOptions, ::Bool, ::Array{Response,1}, ::Int64, ::Bool, ::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::HTTP.Client, ::Request) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:363
   [17] #request at ./<missing>:0 [inlined]
   [18] #request#44(::Dict{String,String}, ::FIFOBuffer, ::Bool, ::Bool, ::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::HTTP.Client, ::HTTP.Method, ::HTTP.URIs.URI) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:377
   [19] (::getfield(HTTP, Symbol("#kw##request")))(::NamedTuple{(:verbose,),Tuple{Bool}}, ::typeof(HTTP.request), ::HTTP.Client, ::HTTP.Method, ::HTTP.URIs.URI) at ./<missing>:0
   [20] #delete#61(::Bool, ::String, ::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::String) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:511
   [21] delete(::String) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:511
   [22] macro expansion at /home/vagrant/.julia/v0.7/HTTP/test/client.jl:28 [inlined]
   [23] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1007 [inlined]
   [24] top-level scope at /home/vagrant/.julia/v0.7/HTTP/test/client.jl:3
   [25] include at ./boot.jl:292 [inlined]
   [26] include_relative(::Module, ::String) at ./loading.jl:521
   [27] include(::Module, ::String) at ./sysimg.jl:26
   [28] include(::String) at ./sysimg.jl:65
   [29] macro expansion at /home/vagrant/.julia/v0.7/HTTP/test/runtests.jl:27 [inlined]
   [30] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1007 [inlined]
   [31] top-level scope at /home/vagrant/.julia/v0.7/HTTP/test/runtests.jl:19
   [32] include at ./boot.jl:292 [inlined]
   [33] include_relative(::Module, ::String) at ./loading.jl:521
   [34] include(::Module, ::String) at ./sysimg.jl:26
   [35] process_options(::Base.JLOptions) at ./client.jl:324
   [36] _start() at ./client.jl:375
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:203 [inlined]
   [2] macro expansion at /home/vagrant/.julia/v0.7/HTTP/src/utils.jl:198 [inlined]
   [3] connect(::HTTP.Client, ::Type, ::String, ::String, ::HTTP.RequestOptions, ::Bool) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:159
   [4] connectandsend(::HTTP.Client, ::Type{HTTP.https}, ::String, ::String, ::Request, ::HTTP.RequestOptions, ::Bool) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:231
   [5] macro expansion at /home/vagrant/.julia/v0.7/HTTP/src/utils.jl:33 [inlined]
   [6] request(::HTTP.Client, ::Request, ::HTTP.RequestOptions, ::Bool, ::Array{Response,1}, ::Int64, ::Bool) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:326
   [7] #request#43(::HTTP.RequestOptions, ::Bool, ::Array{Response,1}, ::Int64, ::Bool, ::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::HTTP.Client, ::Request) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:363
   [8] #request at ./<missing>:0 [inlined]
   [9] #request#44(::Dict{String,String}, ::FIFOBuffer, ::Bool, ::Bool, ::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::HTTP.Client, ::HTTP.Method, ::HTTP.URIs.URI) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:377
   [10] (::getfield(HTTP, Symbol("#kw##request")))(::NamedTuple{(:verbose,),Tuple{Bool}}, ::typeof(HTTP.request), ::HTTP.Client, ::HTTP.Method, ::HTTP.URIs.URI) at ./<missing>:0
   [11] #delete#61(::Bool, ::String, ::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::String) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:511
   [12] delete(::String) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:511
   [13] macro expansion at /home/vagrant/.julia/v0.7/HTTP/test/client.jl:28 [inlined]
   [14] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1007 [inlined]
   [15] top-level scope at /home/vagrant/.julia/v0.7/HTTP/test/client.jl:3
HTTP.Client: Error During Test at /home/vagrant/.julia/v0.7/HTTP/test/client.jl:29
  Test threw an exception of type HTTP.ConnectError
  Expression: HTTP.status(HTTP.patch("$(sch)://httpbin.org/patch")) == 200
  HTTP.ConnectError:
  Exception: ArgumentError("Sampler for this object is not defined")
  
  Stacktrace:
   [1] Type at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Random/src/Random.jl:114 [inlined]
   [2] rand at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Random/src/Random.jl:201 [inlined]
   [3] rand! at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Random/src/Random.jl:218 [inlined]
   [4] rand! at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Random/src/Random.jl:214 [inlined] (repeats 2 times)
   [5] f_rng(::MbedTLS.CtrDrbg, ::Ptr{UInt8}, ::UInt64) at /home/vagrant/.julia/v0.7/MbedTLS/src/ctr_drbg.jl:22
   [6] macro expansion at /home/vagrant/.julia/v0.7/MbedTLS/src/error.jl:3 [inlined]
   [7] handshake(::MbedTLS.SSLContext) at /home/vagrant/.julia/v0.7/MbedTLS/src/ssl.jl:163
   [8] handshake! at /home/vagrant/.julia/v0.7/MbedTLS/src/MbedTLS.jl:109 [inlined]
   [9] initTLS!(::Type{HTTP.https}, ::String, ::HTTP.RequestOptions, ::TCPSocket) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:147
   [10] macro expansion at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:196 [inlined]
   [11] macro expansion at /home/vagrant/.julia/v0.7/HTTP/src/utils.jl:198 [inlined]
   [12] connect(::HTTP.Client, ::Type, ::String, ::String, ::HTTP.RequestOptions, ::Bool) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:159
   [13] connectandsend(::HTTP.Client, ::Type{HTTP.https}, ::String, ::String, ::Request, ::HTTP.RequestOptions, ::Bool) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:231
   [14] macro expansion at /home/vagrant/.julia/v0.7/HTTP/src/utils.jl:33 [inlined]
   [15] request(::HTTP.Client, ::Request, ::HTTP.RequestOptions, ::Bool, ::Array{Response,1}, ::Int64, ::Bool) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:326
   [16] #request#43(::HTTP.RequestOptions, ::Bool, ::Array{Response,1}, ::Int64, ::Bool, ::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::HTTP.Client, ::Request) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:363
   [17] #request at ./<missing>:0 [inlined]
   [18] #request#44(::Dict{String,String}, ::FIFOBuffer, ::Bool, ::Bool, ::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::HTTP.Client, ::HTTP.Method, ::HTTP.URIs.URI) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:377
   [19] (::getfield(HTTP, Symbol("#kw##request")))(::NamedTuple{(:verbose,),Tuple{Bool}}, ::typeof(HTTP.request), ::HTTP.Client, ::HTTP.Method, ::HTTP.URIs.URI) at ./<missing>:0
   [20] #patch#77(::Bool, ::String, ::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::String) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:511
   [21] patch(::String) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:511
   [22] macro expansion at /home/vagrant/.julia/v0.7/HTTP/test/client.jl:29 [inlined]
   [23] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1007 [inlined]
   [24] top-level scope at /home/vagrant/.julia/v0.7/HTTP/test/client.jl:3
   [25] include at ./boot.jl:292 [inlined]
   [26] include_relative(::Module, ::String) at ./loading.jl:521
   [27] include(::Module, ::String) at ./sysimg.jl:26
   [28] include(::String) at ./sysimg.jl:65
   [29] macro expansion at /home/vagrant/.julia/v0.7/HTTP/test/runtests.jl:27 [inlined]
   [30] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1007 [inlined]
   [31] top-level scope at /home/vagrant/.julia/v0.7/HTTP/test/runtests.jl:19
   [32] include at ./boot.jl:292 [inlined]
   [33] include_relative(::Module, ::String) at ./loading.jl:521
   [34] include(::Module, ::String) at ./sysimg.jl:26
   [35] process_options(::Base.JLOptions) at ./client.jl:324
   [36] _start() at ./client.jl:375
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:203 [inlined]
   [2] macro expansion at /home/vagrant/.julia/v0.7/HTTP/src/utils.jl:198 [inlined]
   [3] connect(::HTTP.Client, ::Type, ::String, ::String, ::HTTP.RequestOptions, ::Bool) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:159
   [4] connectandsend(::HTTP.Client, ::Type{HTTP.https}, ::String, ::String, ::Request, ::HTTP.RequestOptions, ::Bool) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:231
   [5] macro expansion at /home/vagrant/.julia/v0.7/HTTP/src/utils.jl:33 [inlined]
   [6] request(::HTTP.Client, ::Request, ::HTTP.RequestOptions, ::Bool, ::Array{Response,1}, ::Int64, ::Bool) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:326
   [7] #request#43(::HTTP.RequestOptions, ::Bool, ::Array{Response,1}, ::Int64, ::Bool, ::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::HTTP.Client, ::Request) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:363
   [8] #request at ./<missing>:0 [inlined]
   [9] #request#44(::Dict{String,String}, ::FIFOBuffer, ::Bool, ::Bool, ::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::HTTP.Client, ::HTTP.Method, ::HTTP.URIs.URI) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:377
   [10] (::getfield(HTTP, Symbol("#kw##request")))(::NamedTuple{(:verbose,),Tuple{Bool}}, ::typeof(HTTP.request), ::HTTP.Client, ::HTTP.Method, ::HTTP.URIs.URI) at ./<missing>:0
   [11] #patch#77(::Bool, ::String, ::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::String) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:511
   [12] patch(::String) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:511
   [13] macro expansion at /home/vagrant/.julia/v0.7/HTTP/test/client.jl:29 [inlined]
   [14] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1007 [inlined]
   [15] top-level scope at /home/vagrant/.julia/v0.7/HTTP/test/client.jl:3
async client request
HTTP.Client: Error During Test at /home/vagrant/.julia/v0.7/HTTP/test/client.jl:33
  Test threw an exception of type HTTP.ConnectError
  Expression: HTTP.status(wait(#= /home/vagrant/.julia/v0.7/HTTP/test/client.jl:33 =# @schedule(HTTP.get("$(sch)://httpbin.org/ip")))) == 200
  HTTP.ConnectError:
  Exception: ArgumentError("Sampler for this object is not defined")
  
  Stacktrace:
   [1] Type at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Random/src/Random.jl:114 [inlined]
   [2] rand at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Random/src/Random.jl:201 [inlined]
   [3] rand! at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Random/src/Random.jl:218 [inlined]
   [4] rand! at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Random/src/Random.jl:214 [inlined] (repeats 2 times)
   [5] f_rng(::MbedTLS.CtrDrbg, ::Ptr{UInt8}, ::UInt64) at /home/vagrant/.julia/v0.7/MbedTLS/src/ctr_drbg.jl:22
   [6] macro expansion at /home/vagrant/.julia/v0.7/MbedTLS/src/error.jl:3 [inlined]
   [7] handshake(::MbedTLS.SSLContext) at /home/vagrant/.julia/v0.7/MbedTLS/src/ssl.jl:163
   [8] handshake! at /home/vagrant/.julia/v0.7/MbedTLS/src/MbedTLS.jl:109 [inlined]
   [9] initTLS!(::Type{HTTP.https}, ::String, ::HTTP.RequestOptions, ::TCPSocket) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:147
   [10] macro expansion at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:196 [inlined]
   [11] macro expansion at /home/vagrant/.julia/v0.7/HTTP/src/utils.jl:198 [inlined]
   [12] connect(::HTTP.Client, ::Type, ::String, ::String, ::HTTP.RequestOptions, ::Bool) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:159
   [13] connectandsend(::HTTP.Client, ::Type{HTTP.https}, ::String, ::String, ::Request, ::HTTP.RequestOptions, ::Bool) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:231
   [14] macro expansion at /home/vagrant/.julia/v0.7/HTTP/src/utils.jl:33 [inlined]
   [15] request(::HTTP.Client, ::Request, ::HTTP.RequestOptions, ::Bool, ::Array{Response,1}, ::Int64, ::Bool) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:326
   [16] #request#43(::HTTP.RequestOptions, ::Bool, ::Array{Response,1}, ::Int64, ::Bool, ::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::HTTP.Client, ::Request) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:363
   [17] #request at ./<missing>:0 [inlined]
   [18] #request#44(::Dict{String,String}, ::FIFOBuffer, ::Bool, ::Bool, ::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::HTTP.Client, ::HTTP.Method, ::HTTP.URIs.URI) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:377
   [19] (::getfield(HTTP, Symbol("#kw##request")))(::NamedTuple{(:verbose,),Tuple{Bool}}, ::typeof(HTTP.request), ::HTTP.Client, ::HTTP.Method, ::HTTP.URIs.URI) at ./<missing>:0
   [20] #get#49(::Bool, ::String, ::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::String) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:511
   [21] get(::String) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:511
   [22] (::getfield(, Symbol("##26#35")))() at ./event.jl:92
  Stacktrace:
   [1] try_yieldto(::typeof(Base.ensure_rescheduled), ::Base.RefValue{Task}) at ./event.jl:208
   [2] wait() at ./event.jl:267
   [3] wait(::Condition) at ./event.jl:46
   [4] wait(::Task) at ./task.jl:181
   [5] macro expansion at /home/vagrant/.julia/v0.7/HTTP/test/client.jl:33 [inlined]
   [6] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1007 [inlined]
   [7] top-level scope at /home/vagrant/.julia/v0.7/HTTP/test/client.jl:3
HTTP.Client: Error During Test at /home/vagrant/.julia/v0.7/HTTP/test/client.jl:35
  Test threw an exception of type HTTP.ConnectError
  Expression: HTTP.status(HTTP.get("$(sch)://httpbin.org/encoding/utf8")) == 200
  HTTP.ConnectError:
  Exception: ArgumentError("Sampler for this object is not defined")
  
  Stacktrace:
   [1] Type at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Random/src/Random.jl:114 [inlined]
   [2] rand at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Random/src/Random.jl:201 [inlined]
   [3] rand! at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Random/src/Random.jl:218 [inlined]
   [4] rand! at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Random/src/Random.jl:214 [inlined] (repeats 2 times)
   [5] f_rng(::MbedTLS.CtrDrbg, ::Ptr{UInt8}, ::UInt64) at /home/vagrant/.julia/v0.7/MbedTLS/src/ctr_drbg.jl:22
   [6] macro expansion at /home/vagrant/.julia/v0.7/MbedTLS/src/error.jl:3 [inlined]
   [7] handshake(::MbedTLS.SSLContext) at /home/vagrant/.julia/v0.7/MbedTLS/src/ssl.jl:163
   [8] handshake! at /home/vagrant/.julia/v0.7/MbedTLS/src/MbedTLS.jl:109 [inlined]
   [9] initTLS!(::Type{HTTP.https}, ::String, ::HTTP.RequestOptions, ::TCPSocket) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:147
   [10] macro expansion at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:196 [inlined]
   [11] macro expansion at /home/vagrant/.julia/v0.7/HTTP/src/utils.jl:198 [inlined]
   [12] connect(::HTTP.Client, ::Type, ::String, ::String, ::HTTP.RequestOptions, ::Bool) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:159
   [13] connectandsend(::HTTP.Client, ::Type{HTTP.https}, ::String, ::String, ::Request, ::HTTP.RequestOptions, ::Bool) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:231
   [14] macro expansion at /home/vagrant/.julia/v0.7/HTTP/src/utils.jl:33 [inlined]
   [15] request(::HTTP.Client, ::Request, ::HTTP.RequestOptions, ::Bool, ::Array{Response,1}, ::Int64, ::Bool) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:326
   [16] #request#43(::HTTP.RequestOptions, ::Bool, ::Array{Response,1}, ::Int64, ::Bool, ::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::HTTP.Client, ::Request) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:363
   [17] #request at ./<missing>:0 [inlined]
   [18] #request#44(::Dict{String,String}, ::FIFOBuffer, ::Bool, ::Bool, ::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::HTTP.Client, ::HTTP.Method, ::HTTP.URIs.URI) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:377
   [19] (::getfield(HTTP, Symbol("#kw##request")))(::NamedTuple{(:verbose,),Tuple{Bool}}, ::typeof(HTTP.request), ::HTTP.Client, ::HTTP.Method, ::HTTP.URIs.URI) at ./<missing>:0
   [20] #get#49(::Bool, ::String, ::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::String) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:511
   [21] get(::String) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:511
   [22] macro expansion at /home/vagrant/.julia/v0.7/HTTP/test/client.jl:35 [inlined]
   [23] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1007 [inlined]
   [24] top-level scope at /home/vagrant/.julia/v0.7/HTTP/test/client.jl:3
   [25] include at ./boot.jl:292 [inlined]
   [26] include_relative(::Module, ::String) at ./loading.jl:521
   [27] include(::Module, ::String) at ./sysimg.jl:26
   [28] include(::String) at ./sysimg.jl:65
   [29] macro expansion at /home/vagrant/.julia/v0.7/HTTP/test/runtests.jl:27 [inlined]
   [30] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1007 [inlined]
   [31] top-level scope at /home/vagrant/.julia/v0.7/HTTP/test/runtests.jl:19
   [32] include at ./boot.jl:292 [inlined]
   [33] include_relative(::Module, ::String) at ./loading.jl:521
   [34] include(::Module, ::String) at ./sysimg.jl:26
   [35] process_options(::Base.JLOptions) at ./client.jl:324
   [36] _start() at ./client.jl:375
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:203 [inlined]
   [2] macro expansion at /home/vagrant/.julia/v0.7/HTTP/src/utils.jl:198 [inlined]
   [3] connect(::HTTP.Client, ::Type, ::String, ::String, ::HTTP.RequestOptions, ::Bool) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:159
   [4] connectandsend(::HTTP.Client, ::Type{HTTP.https}, ::String, ::String, ::Request, ::HTTP.RequestOptions, ::Bool) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:231
   [5] macro expansion at /home/vagrant/.julia/v0.7/HTTP/src/utils.jl:33 [inlined]
   [6] request(::HTTP.Client, ::Request, ::HTTP.RequestOptions, ::Bool, ::Array{Response,1}, ::Int64, ::Bool) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:326
   [7] #request#43(::HTTP.RequestOptions, ::Bool, ::Array{Response,1}, ::Int64, ::Bool, ::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::HTTP.Client, ::Request) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:363
   [8] #request at ./<missing>:0 [inlined]
   [9] #request#44(::Dict{String,String}, ::FIFOBuffer, ::Bool, ::Bool, ::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::HTTP.Client, ::HTTP.Method, ::HTTP.URIs.URI) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:377
   [10] (::getfield(HTTP, Symbol("#kw##request")))(::NamedTuple{(:verbose,),Tuple{Bool}}, ::typeof(HTTP.request), ::HTTP.Client, ::HTTP.Method, ::HTTP.URIs.URI) at ./<missing>:0
   [11] #get#49(::Bool, ::String, ::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::String) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:511
   [12] get(::String) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:511
   [13] macro expansion at /home/vagrant/.julia/v0.7/HTTP/test/client.jl:35 [inlined]
   [14] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1007 [inlined]
   [15] top-level scope at /home/vagrant/.julia/v0.7/HTTP/test/client.jl:3
pass query to uri
HTTP.Client: Error During Test at /home/vagrant/.julia/v0.7/HTTP/test/client.jl:1
  Got an exception of type HTTP.ConnectError outside of a @test
  HTTP.ConnectError:
  Exception: ArgumentError("Sampler for this object is not defined")
  
  Stacktrace:
   [1] Type at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Random/src/Random.jl:114 [inlined]
   [2] rand at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Random/src/Random.jl:201 [inlined]
   [3] rand! at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Random/src/Random.jl:218 [inlined]
   [4] rand! at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Random/src/Random.jl:214 [inlined] (repeats 2 times)
   [5] f_rng(::MbedTLS.CtrDrbg, ::Ptr{UInt8}, ::UInt64) at /home/vagrant/.julia/v0.7/MbedTLS/src/ctr_drbg.jl:22
   [6] macro expansion at /home/vagrant/.julia/v0.7/MbedTLS/src/error.jl:3 [inlined]
   [7] handshake(::MbedTLS.SSLContext) at /home/vagrant/.julia/v0.7/MbedTLS/src/ssl.jl:163
   [8] handshake! at /home/vagrant/.julia/v0.7/MbedTLS/src/MbedTLS.jl:109 [inlined]
   [9] initTLS!(::Type{HTTP.https}, ::String, ::HTTP.RequestOptions, ::TCPSocket) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:147
   [10] macro expansion at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:196 [inlined]
   [11] macro expansion at /home/vagrant/.julia/v0.7/HTTP/src/utils.jl:198 [inlined]
   [12] connect(::HTTP.Client, ::Type, ::String, ::String, ::HTTP.RequestOptions, ::Bool) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:159
   [13] connectandsend(::HTTP.Client, ::Type{HTTP.https}, ::String, ::String, ::Request, ::HTTP.RequestOptions, ::Bool) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:231
   [14] macro expansion at /home/vagrant/.julia/v0.7/HTTP/src/utils.jl:33 [inlined]
   [15] request(::HTTP.Client, ::Request, ::HTTP.RequestOptions, ::Bool, ::Array{Response,1}, ::Int64, ::Bool) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:326
   [16] #request#43(::HTTP.RequestOptions, ::Bool, ::Array{Response,1}, ::Int64, ::Bool, ::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::HTTP.Client, ::Request) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:363
   [17] #request at ./<missing>:0 [inlined]
   [18] #request#44(::Dict{String,String}, ::FIFOBuffer, ::Bool, ::Bool, ::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::HTTP.Client, ::HTTP.Method, ::HTTP.URIs.URI) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:377
   [19] (::getfield(HTTP, Symbol("#kw##request")))(::NamedTuple{(:verbose,),Tuple{Bool}}, ::typeof(HTTP.request), ::HTTP.Client, ::HTTP.Method, ::HTTP.URIs.URI) at ./<missing>:0
   [20] #get#49(::Bool, ::Dict{String,String}, ::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::String) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:511
   [21] (::getfield(HTTP, Symbol("#kw##get")))(::NamedTuple{(:query,),Tuple{Dict{String,String}}}, ::typeof(HTTP.get), ::String) at ./<missing>:0
   [22] macro expansion at /home/vagrant/.julia/v0.7/HTTP/test/client.jl:38 [inlined]
   [23] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1007 [inlined]
   [24] top-level scope at /home/vagrant/.julia/v0.7/HTTP/test/client.jl:3
   [25] include at ./boot.jl:292 [inlined]
   [26] include_relative(::Module, ::String) at ./loading.jl:521
   [27] include(::Module, ::String) at ./sysimg.jl:26
   [28] include(::String) at ./sysimg.jl:65
   [29] macro expansion at /home/vagrant/.julia/v0.7/HTTP/test/runtests.jl:27 [inlined]
   [30] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1007 [inlined]
   [31] top-level scope at /home/vagrant/.julia/v0.7/HTTP/test/runtests.jl:19
   [32] include at ./boot.jl:292 [inlined]
   [33] include_relative(::Module, ::String) at ./loading.jl:521
   [34] include(::Module, ::String) at ./sysimg.jl:26
   [35] process_options(::Base.JLOptions) at ./client.jl:324
   [36] _start() at ./client.jl:375
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:203 [inlined]
   [2] macro expansion at /home/vagrant/.julia/v0.7/HTTP/src/utils.jl:198 [inlined]
   [3] connect(::HTTP.Client, ::Type, ::String, ::String, ::HTTP.RequestOptions, ::Bool) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:159
   [4] connectandsend(::HTTP.Client, ::Type{HTTP.https}, ::String, ::String, ::Request, ::HTTP.RequestOptions, ::Bool) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:231
   [5] macro expansion at /home/vagrant/.julia/v0.7/HTTP/src/utils.jl:33 [inlined]
   [6] request(::HTTP.Client, ::Request, ::HTTP.RequestOptions, ::Bool, ::Array{Response,1}, ::Int64, ::Bool) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:326
   [7] #request#43(::HTTP.RequestOptions, ::Bool, ::Array{Response,1}, ::Int64, ::Bool, ::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::HTTP.Client, ::Request) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:363
   [8] #request at ./<missing>:0 [inlined]
   [9] #request#44(::Dict{String,String}, ::FIFOBuffer, ::Bool, ::Bool, ::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::HTTP.Client, ::HTTP.Method, ::HTTP.URIs.URI) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:377
   [10] (::getfield(HTTP, Symbol("#kw##request")))(::NamedTuple{(:verbose,),Tuple{Bool}}, ::typeof(HTTP.request), ::HTTP.Client, ::HTTP.Method, ::HTTP.URIs.URI) at ./<missing>:0
   [11] #get#49(::Bool, ::Dict{String,String}, ::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::String) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:511
   [12] (::getfield(HTTP, Symbol("#kw##get")))(::NamedTuple{(:query,),Tuple{Dict{String,String}}}, ::typeof(HTTP.get), ::String) at ./<missing>:0
   [13] macro expansion at /home/vagrant/.julia/v0.7/HTTP/test/client.jl:38 [inlined]
   [14] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1007 [inlined]
   [15] top-level scope at /home/vagrant/.julia/v0.7/HTTP/test/client.jl:3
   [16] include at ./boot.jl:292 [inlined]
   [17] include_relative(::Module, ::String) at ./loading.jl:521
   [18] include(::Module, ::String) at ./sysimg.jl:26
   [19] include(::String) at ./sysimg.jl:65
   [20] macro expansion at /home/vagrant/.julia/v0.7/HTTP/test/runtests.jl:27 [inlined]
   [21] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1007 [inlined]
   [22] top-level scope at /home/vagrant/.julia/v0.7/HTTP/test/runtests.jl:19
   [23] include at ./boot.jl:292 [inlined]
   [24] include_relative(::Module, ::String) at ./loading.jl:521
   [25] include(::Module, ::String) at ./sysimg.jl:26
   [26] process_options(::Base.JLOptions) at ./client.jl:324
   [27] _start() at ./client.jl:375
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/HTTP/test/server.jl:1
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/HTTP/test/server.jl:1
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/HTTP/test/server.jl:1
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/HTTP/test/server.jl:1
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/HTTP/test/server.jl:1
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/HTTP/test/server.jl:1
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/HTTP/test/server.jl:1
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/HTTP/test/server.jl:1
WARNING: importing deprecated binding Base.interrupt into Nitrogen.
[HTTP - 2018-01-17T05:39:12.617]: starting server to listen on: 127.0.0.1:8081
[HTTP - 2018-01-17T05:39:13.081]: server TCPServer is closed, shutting down...
ERROR (unhandled task failure): Base.interrupt has been moved to the standard library package Distributed.
Restart Julia and then run `using Distributed` to load it.
Stacktrace:
 [1] error(::Function, ::String, ::String, ::String, ::String, ::String, ::String) at ./error.jl:42
 [2] #interrupt#830 at ./deprecated.jl:138 [inlined]
 [3] interrupt at ./deprecated.jl:138 [inlined]
 [4] serve(::HTTP.Nitrogen.Server{HTTP.http,HTTP.Handlers.HandlerFunction{getfield(HTTP.Nitrogen, Symbol("##12#14"))}}, ::IPv4, ::Int64, ::Bool) at /home/vagrant/.julia/v0.7/HTTP/src/server.jl:294
 [5] #serve#16 at /home/vagrant/.julia/v0.7/HTTP/src/server.jl:332 [inlined]
 [6] serve at /home/vagrant/.julia/v0.7/HTTP/src/server.jl:332 [inlined] (repeats 2 times)
 [7] (::getfield(, Symbol("##44#49")))() at ./task.jl:330
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/HTTP/test/server.jl:1
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/HTTP/test/server.jl:1
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = write at fifobuffer.jl:292 [inlined]
└ @ Core fifobuffer.jl:292
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = write at fifobuffer.jl:292 [inlined]
└ @ Core fifobuffer.jl:292
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = write at fifobuffer.jl:292 [inlined]
└ @ Core fifobuffer.jl:292
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = write at fifobuffer.jl:292 [inlined]
└ @ Core fifobuffer.jl:292
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = write at fifobuffer.jl:292 [inlined]
└ @ Core fifobuffer.jl:292
[HTTP - 2018-01-17T05:39:13.86 ]: starting server to listen on: 127.0.0.1:8081
[HTTP - 2018-01-17T05:39:14.976]: throttling 127.0.0.1
[HTTP - 2018-01-17T05:39:14.976]: new tcp connection accepted, reading request...
[HTTP - 2018-01-17T05:39:15.023]: processing on connection i=0...
[HTTP - 2018-01-17T05:39:15.254]: throttling on connection i=0
[HTTP - 2018-01-17T05:39:15.257]: reading request bytes with readtimeout=180.0
[HTTP - 2018-01-17T05:39:15.267]: received request on connection i=0
HTTP.Request:

GET / HTTP/1.1
Host: 127.0.0.18081
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8,application/json; charset=utf-8
User-Agent: HTTP.jl/0.0.0


[HTTP - 2018-01-17T05:39:15.323]: responding with response on connection i=0
HTTP.Response:

HTTP/1.1 200 OK
Connection: keep-alive
Content-Type: text/html; charset=utf-8
Date: Wed, 17 Jan 2018 05:39:15
Content-Language: en
Server: Julia/0.7.0-DEV.3421
Content-Length: 0


[HTTP - 2018-01-17T05:39:15.354]: reading request bytes with readtimeout=180.0
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = write at fifobuffer.jl:292 [inlined]
└ @ Core fifobuffer.jl:292
[HTTP - 2018-01-17T05:39:17.434]: throttling 127.0.0.1
[HTTP - 2018-01-17T05:39:17.435]: new tcp connection accepted, reading request...
[HTTP - 2018-01-17T05:39:17.436]: processing on connection i=1...
[HTTP - 2018-01-17T05:39:17.437]: throttling on connection i=1
[HTTP - 2018-01-17T05:39:17.437]: reading request bytes with readtimeout=180.0
[HTTP - 2018-01-17T05:39:17.438]: error parsing request on connection i=1: invalid HTTP version
[HTTP - 2018-01-17T05:39:17.439]: reading request bytes with readtimeout=180.0
[HTTP - 2018-01-17T05:39:21.444]: throttling 127.0.0.1
[HTTP - 2018-01-17T05:39:21.445]: new tcp connection accepted, reading request...
[HTTP - 2018-01-17T05:39:21.447]: processing on connection i=2...
[HTTP - 2018-01-17T05:39:21.448]: throttling on connection i=2
[HTTP - 2018-01-17T05:39:21.448]: reading request bytes with readtimeout=180.0
[HTTP - 2018-01-17T05:39:21.449]: error parsing request on connection i=2: invalid HTTP method
[HTTP - 2018-01-17T05:39:21.45 ]: reading request bytes with readtimeout=180.0
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = write at fifobuffer.jl:292 [inlined]
└ @ Core fifobuffer.jl:292
HTTP/1.1 200 OK
Connection: keep-alive
Content-Type: text/html; charset=utf-8
Date: Wed, 17 Jan 2018 05:39:27
Content-Language: en
Server: Julia/0.7.0-DEV.3421
Content-Length: 15

Body of Request[HTTP - 2018-01-17T05:39:29.915]: starting server to listen on: 127.0.0.1:8083
ERROR (unhandled task failure): Base.interrupt has been moved to the standard library package Distributed.
Restart Julia and then run `using Distributed` to load it.
Stacktrace:
 [1] error(::Function, ::String, ::String, ::String, ::String, ::String, ::String) at ./error.jl:42
 [2] #interrupt#830 at ./deprecated.jl:138 [inlined]
 [3] interrupt at ./deprecated.jl:138 [inlined]
 [4] serve(::HTTP.Nitrogen.Server{HTTP.http,HTTP.Handlers.HandlerFunction{getfield(, Symbol("##45#50"))}}, ::IPv4, ::Int64, ::Bool) at /home/vagrant/.julia/v0.7/HTTP/src/server.jl:294
 [5] #serve#16 at /home/vagrant/.julia/v0.7/HTTP/src/server.jl:332 [inlined]
 [6] serve at /home/vagrant/.julia/v0.7/HTTP/src/server.jl:332 [inlined] (repeats 2 times)
 [7] (::getfield(, Symbol("##46#51")))() at ./task.jl:330
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = Type at fifobuffer.jl:77 [inlined]
└ @ Core fifobuffer.jl:77
Test Summary:                 |   Pass  Error  Broken   Total
HTTP                          | 607524     24       5  607553
  utils.jl                    |    173                    173
  FIFOBuffer                  |     97                     97
  HTTP.sniff                  |     12      8              20
  HTTP.isjson                 |     27                     27
  HTTP.URI                    |    111      2             113
    HTTP.parse(HTTP.URI, str) |     41                     41
  Cookies                     |     54      3              57
    String(::Cookie)          |     23                     23
    readsetcookies            |      9      3              12
    SetCookieDoubleQuotes     |      1                      1
    Cookie sanitize value     |      9                      9
    Cookie sanitize path      |      3                      3
    HTTP.readcookies          |      5                      5
  HTTP.parse                  | 606943                 606943
  types.jl                    |     12                     12
  HTTP.Handler                |     17                     17
  HTTP.Client                 |     65     11       5      81
    HTTP.Connection           |      6                      6
  HTTP.serve                  |     13                     13
ERROR: LoadError: Some tests did not pass: 607524 passed, 0 failed, 24 errored, 5 broken.
in expression starting at /home/vagrant/.julia/v0.7/HTTP/test/runtests.jl:18
┌ Error: ------------------------------------------------------------
│ # Testing failed for HTTP
│   exception =
│    failed process: Process(`/home/vagrant/julia/bin/julia -Cnative -J/home/vagrant/julia/lib/julia/sys.so --compile=yes --depwarn=yes --code-coverage=none --color=no --compiled-modules=yes --check-bounds=yes --warn-overwrite=yes --startup-file=yes /home/vagrant/.julia/v0.7/HTTP/test/runtests.jl`, ProcessExited(1)) [1]
│    Stacktrace:
│     [1] error(::String, ::Base.Process, ::String, ::Int64, ::String) at ./error.jl:42
│     [2] pipeline_error(::Base.Process) at ./process.jl:707
│     [3] run(::Cmd) at ./process.jl:669
│     [4] (::getfield(Base.Pkg.Entry, Symbol("##91#94")){Bool,String,Array{AbstractString,1}})() at ./pkg/entry.jl:730
│     [5] cd(::getfield(Base.Pkg.Entry, Symbol("##91#94")){Bool,String,Array{AbstractString,1}}, ::String) at ./file.jl:70
│     [6] #test!#90(::Bool, ::Function, ::String, ::Array{AbstractString,1}, ::Array{AbstractString,1}, ::Array{AbstractString,1}) at ./pkg/entry.jl:718
│     [7] (::getfield(Base.Pkg.Entry, Symbol("#kw##test!")))(::NamedTuple{(:coverage,),Tuple{Bool}}, ::typeof(Base.Pkg.Entry.test!), ::String, ::Array{AbstractString,1}, ::Array{AbstractString,1}, ::Array{AbstractString,1}) at ./<missing>:0
│     [8] #test#98(::Bool, ::Function, ::Array{AbstractString,1}) at ./pkg/entry.jl:757
│     [9] (::getfield(Base.Pkg.Entry, Symbol("#kw##test")))(::NamedTuple{(:coverage,),Tuple{Bool}}, ::typeof(Base.Pkg.Entry.test), ::Array{AbstractString,1}) at ./<missing>:0
│     [10] (::getfield(Base.Pkg.Dir, Symbol("##4#7")){Base.Iterators.IndexValue{Symbol,Bool,Tuple{Symbol},NamedTuple{(:coverage,),Tuple{Bool}}},typeof(Base.Pkg.Entry.test),Tuple{Array{AbstractString,1}}})() at ./pkg/dir.jl:36
│     [11] cd(::getfield(Base.Pkg.Dir, Symbol("##4#7")){Base.Iterators.IndexValue{Symbol,Bool,Tuple{Symbol},NamedTuple{(:coverage,),Tuple{Bool}}},typeof(Base.Pkg.Entry.test),Tuple{Array{AbstractString,1}}}, ::String) at ./file.jl:70
│     [12] #cd#1(::Base.Iterators.IndexValue{Symbol,Bool,Tuple{Symbol},NamedTuple{(:coverage,),Tuple{Bool}}}, ::Function, ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N} where N) at ./pkg/dir.jl:36
│     [13] (::getfield(Base.Pkg.Dir, Symbol("#kw##cd")))(::NamedTuple{(:coverage,),Tuple{Bool}}, ::typeof(Base.Pkg.Dir.cd), ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N} where N) at ./<missing>:0
│     [14] #test#3(::Bool, ::Function, ::String, ::Vararg{String,N} where N) at ./pkg/pkg.jl:274
│     [15] test(::String, ::Vararg{String,N} where N) at ./pkg/pkg.jl:274
│     [16] top-level scope
│     [17] eval at ./boot.jl:295 [inlined]
│     [18] eval(::Module, ::Expr) at ./sysimg.jl:71
│     [19] process_options(::Base.JLOptions) at ./client.jl:301
│     [20] _start() at ./client.jl:375
└ @ Base.Pkg.Entry entry.jl:733
ERROR: HTTP had test errors

>>> End of log
