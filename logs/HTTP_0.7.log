>>> 'Pkg.add("HTTP")' log
[ Info: Installing BinDeps v0.8.3                  @ Base.Pkg.Entry entry.jl:543
[ Info: Installing HTTP v0.5.7                     @ Base.Pkg.Entry entry.jl:543
[ Info: Installing MbedTLS v0.5.3                  @ Base.Pkg.Entry entry.jl:543
[ Info: Installing SHA v0.5.3                      @ Base.Pkg.Entry entry.jl:543
[ Info: Installing URIParser v0.3.0                @ Base.Pkg.Entry entry.jl:543
[ Info: Building MbedTLS                                          @ Main none:10
Using system libraries...
WARNING: importing deprecated binding Base.Associative into BinDeps.
WARNING: Base.Associative is deprecated, use AbstractDict instead.
  likely near /home/vagrant/.julia/v0.7/MbedTLS/deps/build.jl:45
in @install at /home/vagrant/.julia/v0.7/BinDeps/src/dependencies.jl
[ Info: Package database updated                    @ Base.Pkg.Entry entry.jl:32
┌ Info: METADATA is out-of-date — you may not have the latest version of HTTP
│ Use `Pkg.update()` to get the latest versions of your packages
└                                                   @ Base.Pkg.Entry entry.jl:74

>>> 'Pkg.test("HTTP")' log
Julia Version 0.7.0-DEV.3354
Commit 9b5eed2b6c (2018-01-09 08:03 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
      Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-135-generic #184-Ubuntu SMP Wed Oct 18 11:55:51 UTC 2017 x86_64 x86_64
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
              speed         user         nice          sys         idle          irq
       #1  3505 MHz    1025555 s        123 s      53583 s     336498 s          7 s
       #2  3505 MHz     209698 s         44 s      22188 s    1407427 s          0 s
       
  Memory: 2.93927001953125 GB (686.09375 MB free)
  Uptime: 16653.0 sec
  Load Avg:  1.0029296875  0.9853515625  0.998046875
  WORD_SIZE: 64
  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant
Packages:
  Package Directory: /home/vagrant/.julia/v0.7
  Package Status:
2 required packages:
 - HTTP                          0.5.7
 - JSON                          0.16.3
6 additional packages:
 - BinDeps                       0.8.3
 - Compat                        0.46.0
 - MbedTLS                       0.5.3
 - Nullables                     0.0.3
 - SHA                           0.5.3
 - URIParser                     0.3.0
[ Info: Testing HTTP                               @ Base.Pkg.Entry entry.jl:723
┌ Warning: `replace(s::AbstractString, pat, f)` is deprecated, use `replace(s, pat => f)` instead.
│   caller = escapeHTML(::String) at utils.jl:8
└                                                              @ HTTP utils.jl:8
┌ Warning: `replace(s::AbstractString, pat, f)` is deprecated, use `replace(s, pat => f)` instead.
│   caller = escapeHTML(::String) at utils.jl:9
└                                                              @ HTTP utils.jl:9
┌ Warning: `replace(s::AbstractString, pat, f)` is deprecated, use `replace(s, pat => f)` instead.
│   caller = escapeHTML(::String) at utils.jl:10
└                                                             @ HTTP utils.jl:10
┌ Warning: `replace(s::AbstractString, pat, f)` is deprecated, use `replace(s, pat => f)` instead.
│   caller = escapeHTML(::String) at utils.jl:11
└                                                             @ HTTP utils.jl:11
┌ Warning: `replace(s::AbstractString, pat, f)` is deprecated, use `replace(s, pat => f)` instead.
│   caller = escapeHTML(::String) at utils.jl:12
└                                                             @ HTTP utils.jl:12
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = canonicalize!(::String) at utils.jl:166
└                                                            @ HTTP utils.jl:166
┌ Warning: `unsafe_copy!(dest, args...)` is deprecated, use `unsafe_copyto!(dest, args...)` instead.
│   caller = write(::FIFOBuffer, ::Array{UInt8,1}, ::Int64, ::Int64) at fifobuffer.jl:252
└                                           @ HTTP.FIFOBuffers fifobuffer.jl:252
┌ Warning: `unsafe_copy!(dest, args...)` is deprecated, use `unsafe_copyto!(dest, args...)` instead.
│   caller = write(::FIFOBuffer, ::Array{UInt8,1}, ::Int64, ::Int64) at fifobuffer.jl:259
└                                           @ HTTP.FIFOBuffers fifobuffer.jl:259
┌ Warning: `unsafe_copy!(dest, args...)` is deprecated, use `unsafe_copyto!(dest, args...)` instead.
│   caller = write(::FIFOBuffer, ::Array{UInt8,1}, ::Int64, ::Int64) at fifobuffer.jl:267
└                                           @ HTTP.FIFOBuffers fifobuffer.jl:267
┌ Warning: `unsafe_copy!(dest, args...)` is deprecated, use `unsafe_copyto!(dest, args...)` instead.
│   caller = write(::FIFOBuffer, ::Array{UInt8,1}, ::Int64, ::Int64) at fifobuffer.jl:255
└                                           @ HTTP.FIFOBuffers fifobuffer.jl:255
┌ Warning: `unsafe_copy!(dest, args...)` is deprecated, use `unsafe_copyto!(dest, args...)` instead.
│   caller = write(::FIFOBuffer, ::Array{UInt8,1}, ::Int64, ::Int64) at fifobuffer.jl:282
└                                           @ HTTP.FIFOBuffers fifobuffer.jl:282
┌ Warning: `unsafe_copy!(dest, args...)` is deprecated, use `unsafe_copyto!(dest, args...)` instead.
│   caller = write(::FIFOBuffer, ::Array{UInt8,1}, ::Int64, ::Int64) at fifobuffer.jl:275
└                                           @ HTTP.FIFOBuffers fifobuffer.jl:275
TEST - sniff.jl: Empty
TEST - sniff.jl: Binary
TEST - sniff.jl: HTML document #1
HTTP.sniff: Error During Test at /home/vagrant/.julia/v0.7/HTTP/test/sniff.jl:35
  Test threw an exception of type MethodError
  Expression: HTTP.sniff(case[2]) == case[3]
  MethodError: no method matching sniff(::Base.CodeUnits{UInt8,String})
  Closest candidates are:
    sniff(!Matched::Array{UInt8,1}) at /home/vagrant/.julia/v0.7/HTTP/src/sniff.jl:44
    sniff(!Matched::FIFOBuffer) at /home/vagrant/.julia/v0.7/HTTP/src/sniff.jl:41
    sniff(!Matched::String) at /home/vagrant/.julia/v0.7/HTTP/src/sniff.jl:40
    ...
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.7/HTTP/test/sniff.jl:35 [inlined]
   [2] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1004 [inlined]
   [3] top-level scope at /home/vagrant/.julia/v0.7/HTTP/test/sniff.jl:33
TEST - sniff.jl: HTML document #2
HTTP.sniff: Error During Test at /home/vagrant/.julia/v0.7/HTTP/test/sniff.jl:35
  Test threw an exception of type MethodError
  Expression: HTTP.sniff(case[2]) == case[3]
  MethodError: no method matching sniff(::Base.CodeUnits{UInt8,String})
  Closest candidates are:
    sniff(!Matched::Array{UInt8,1}) at /home/vagrant/.julia/v0.7/HTTP/src/sniff.jl:44
    sniff(!Matched::FIFOBuffer) at /home/vagrant/.julia/v0.7/HTTP/src/sniff.jl:41
    sniff(!Matched::String) at /home/vagrant/.julia/v0.7/HTTP/src/sniff.jl:40
    ...
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.7/HTTP/test/sniff.jl:35 [inlined]
   [2] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1004 [inlined]
   [3] top-level scope at /home/vagrant/.julia/v0.7/HTTP/test/sniff.jl:33
TEST - sniff.jl: HTML document #3 (leading whitespace)
HTTP.sniff: Error During Test at /home/vagrant/.julia/v0.7/HTTP/test/sniff.jl:35
  Test threw an exception of type MethodError
  Expression: HTTP.sniff(case[2]) == case[3]
  MethodError: no method matching sniff(::Base.CodeUnits{UInt8,String})
  Closest candidates are:
    sniff(!Matched::Array{UInt8,1}) at /home/vagrant/.julia/v0.7/HTTP/src/sniff.jl:44
    sniff(!Matched::FIFOBuffer) at /home/vagrant/.julia/v0.7/HTTP/src/sniff.jl:41
    sniff(!Matched::String) at /home/vagrant/.julia/v0.7/HTTP/src/sniff.jl:40
    ...
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.7/HTTP/test/sniff.jl:35 [inlined]
   [2] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1004 [inlined]
   [3] top-level scope at /home/vagrant/.julia/v0.7/HTTP/test/sniff.jl:33
TEST - sniff.jl: HTML document #4 (leading CRLF)
HTTP.sniff: Error During Test at /home/vagrant/.julia/v0.7/HTTP/test/sniff.jl:35
  Test threw an exception of type MethodError
  Expression: HTTP.sniff(case[2]) == case[3]
  MethodError: no method matching sniff(::Base.CodeUnits{UInt8,String})
  Closest candidates are:
    sniff(!Matched::Array{UInt8,1}) at /home/vagrant/.julia/v0.7/HTTP/src/sniff.jl:44
    sniff(!Matched::FIFOBuffer) at /home/vagrant/.julia/v0.7/HTTP/src/sniff.jl:41
    sniff(!Matched::String) at /home/vagrant/.julia/v0.7/HTTP/src/sniff.jl:40
    ...
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.7/HTTP/test/sniff.jl:35 [inlined]
   [2] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1004 [inlined]
   [3] top-level scope at /home/vagrant/.julia/v0.7/HTTP/test/sniff.jl:33
TEST - sniff.jl: Plain text
HTTP.sniff: Error During Test at /home/vagrant/.julia/v0.7/HTTP/test/sniff.jl:35
  Test threw an exception of type MethodError
  Expression: HTTP.sniff(case[2]) == case[3]
  MethodError: no method matching sniff(::Base.CodeUnits{UInt8,String})
  Closest candidates are:
    sniff(!Matched::Array{UInt8,1}) at /home/vagrant/.julia/v0.7/HTTP/src/sniff.jl:44
    sniff(!Matched::FIFOBuffer) at /home/vagrant/.julia/v0.7/HTTP/src/sniff.jl:41
    sniff(!Matched::String) at /home/vagrant/.julia/v0.7/HTTP/src/sniff.jl:40
    ...
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.7/HTTP/test/sniff.jl:35 [inlined]
   [2] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1004 [inlined]
   [3] top-level scope at /home/vagrant/.julia/v0.7/HTTP/test/sniff.jl:33
TEST - sniff.jl: XML
HTTP.sniff: Error During Test at /home/vagrant/.julia/v0.7/HTTP/test/sniff.jl:35
  Test threw an exception of type MethodError
  Expression: HTTP.sniff(case[2]) == case[3]
  MethodError: no method matching sniff(::Base.CodeUnits{UInt8,String})
  Closest candidates are:
    sniff(!Matched::Array{UInt8,1}) at /home/vagrant/.julia/v0.7/HTTP/src/sniff.jl:44
    sniff(!Matched::FIFOBuffer) at /home/vagrant/.julia/v0.7/HTTP/src/sniff.jl:41
    sniff(!Matched::String) at /home/vagrant/.julia/v0.7/HTTP/src/sniff.jl:40
    ...
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.7/HTTP/test/sniff.jl:35 [inlined]
   [2] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1004 [inlined]
   [3] top-level scope at /home/vagrant/.julia/v0.7/HTTP/test/sniff.jl:33
TEST - sniff.jl: GIF 87a
HTTP.sniff: Error During Test at /home/vagrant/.julia/v0.7/HTTP/test/sniff.jl:35
  Test threw an exception of type MethodError
  Expression: HTTP.sniff(case[2]) == case[3]
  MethodError: no method matching sniff(::Base.CodeUnits{UInt8,String})
  Closest candidates are:
    sniff(!Matched::Array{UInt8,1}) at /home/vagrant/.julia/v0.7/HTTP/src/sniff.jl:44
    sniff(!Matched::FIFOBuffer) at /home/vagrant/.julia/v0.7/HTTP/src/sniff.jl:41
    sniff(!Matched::String) at /home/vagrant/.julia/v0.7/HTTP/src/sniff.jl:40
    ...
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.7/HTTP/test/sniff.jl:35 [inlined]
   [2] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1004 [inlined]
   [3] top-level scope at /home/vagrant/.julia/v0.7/HTTP/test/sniff.jl:33
TEST - sniff.jl: GIF 89a
HTTP.sniff: Error During Test at /home/vagrant/.julia/v0.7/HTTP/test/sniff.jl:35
  Test threw an exception of type MethodError
  Expression: HTTP.sniff(case[2]) == case[3]
  MethodError: no method matching sniff(::Base.CodeUnits{UInt8,String})
  Closest candidates are:
    sniff(!Matched::Array{UInt8,1}) at /home/vagrant/.julia/v0.7/HTTP/src/sniff.jl:44
    sniff(!Matched::FIFOBuffer) at /home/vagrant/.julia/v0.7/HTTP/src/sniff.jl:41
    sniff(!Matched::String) at /home/vagrant/.julia/v0.7/HTTP/src/sniff.jl:40
    ...
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.7/HTTP/test/sniff.jl:35 [inlined]
   [2] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1004 [inlined]
   [3] top-level scope at /home/vagrant/.julia/v0.7/HTTP/test/sniff.jl:33
TEST - sniff.jl: MIDI audio
TEST - sniff.jl: MP3 audio/MPEG audio
TEST - sniff.jl: WAV audio #1
TEST - sniff.jl: WAV audio #2
TEST - sniff.jl: AIFF audio #1
TEST - sniff.jl: OGG audio
TEST - sniff.jl: MP4 video
TEST - sniff.jl: AVI video #1
TEST - sniff.jl: AVI video #2
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = macro expansion at sniff.jl:252 [inlined]
└                                                            @ Core sniff.jl:252
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = #parse#14 at uri.jl:87 [inlined]
└                                                               @ Core uri.jl:87
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = utf8_chars at uri.jl:185 [inlined]
└                                                              @ Core uri.jl:185
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = #parse#14 at uri.jl:87 [inlined]
└                                                               @ Core uri.jl:87
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = utf8_chars at uri.jl:185 [inlined]
└                                                              @ Core uri.jl:185
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = utf8_chars at uri.jl:185 [inlined]
└                                                              @ Core uri.jl:185
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = #parse#14 at uri.jl:87 [inlined]
└                                                               @ Core uri.jl:87
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = #parse#14 at uri.jl:87 [inlined]
└                                                               @ Core uri.jl:87
┌ Warning: `search(s::AbstractString, c::Char)` is deprecated, use `findfirst(equalto(c), s)` instead.
│   caller = isvalid(::HTTP.URIs.URI) at uri.jl:170
└                                                         @ HTTP.URIs uri.jl:170
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = utf8_chars at uri.jl:185 [inlined]
└                                                              @ Core uri.jl:185
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = #parse#14 at uri.jl:87 [inlined]
└                                                               @ Core uri.jl:87
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = utf8_chars at uri.jl:185 [inlined]
└                                                              @ Core uri.jl:185
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = utf8_chars at uri.jl:185 [inlined]
└                                                              @ Core uri.jl:185
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = utf8_chars at uri.jl:185 [inlined]
└                                                              @ Core uri.jl:185
TEST - uri.jl: proxy request
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = #parse#14 at uri.jl:87 [inlined]
└                                                               @ Core uri.jl:87
TEST - uri.jl: proxy request with port
TEST - uri.jl: CONNECT request
TEST - uri.jl: proxy ipv6 request
TEST - uri.jl: proxy ipv6 request with port
TEST - uri.jl: CONNECT ipv6 address
TEST - uri.jl: ipv4 in ipv6 address
TEST - uri.jl: extra ? in query string
TEST - uri.jl: space URL encoded
TEST - uri.jl: URL fragment
TEST - uri.jl: complex URL fragment
TEST - uri.jl: complex URL from node js url parser doc
TEST - uri.jl: complex URL with basic auth from node js url parser doc
TEST - uri.jl: double @
TEST - uri.jl: proxy empty host
TEST - uri.jl: proxy empty port
TEST - uri.jl: CONNECT with basic auth
TEST - uri.jl: CONNECT empty host
TEST - uri.jl: CONNECT empty port
TEST - uri.jl: CONNECT with extra bits
TEST - uri.jl: space in URL
TEST - uri.jl: proxy basic auth with space url encoded
TEST - uri.jl: carriage return in URL
TEST - uri.jl: proxy double : in URL
TEST - uri.jl: proxy basic auth with double :
TEST - uri.jl: line feed in URL
TEST - uri.jl: proxy empty basic auth
TEST - uri.jl: proxy line feed in hostname
TEST - uri.jl: proxy % in hostname
TEST - uri.jl: proxy ; in hostname
TEST - uri.jl: proxy basic auth with unreservedchars
TEST - uri.jl: proxy only empty basic auth
TEST - uri.jl: proxy only basic auth
TEST - uri.jl: proxy = in URL
TEST - uri.jl: ipv6 address with Zone ID
TEST - uri.jl: ipv6 address with Zone ID, but '%' is not percent-encoded
TEST - uri.jl: ipv6 address ending with '%'
TEST - uri.jl: ipv6 address with Zone ID including bad character
TEST - uri.jl: just ipv6 Zone ID
TEST - uri.jl: tab in URL
TEST - uri.jl: form feed in URL
┌ Warning: `replace(s::AbstractString, pat, f)` is deprecated, use `replace(s, pat => f)` instead.
│   caller = sanitizeCookieName at cookies.jl:397 [inlined]
└                                                          @ Core cookies.jl:397
┌ Warning: `replace(s::AbstractString, pat, f)` is deprecated, use `replace(s, pat => f)` instead.
│   caller = sanitizeCookieName at cookies.jl:397 [inlined]
└                                                          @ Core cookies.jl:397
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = sanitizeCookieValue(::String) at cookies.jl:411
└                                                  @ HTTP.Cookies cookies.jl:411
┌ Warning: `search(s::AbstractString, c::Char)` is deprecated, use `findfirst(equalto(c), s)` instead.
│   caller = readsetcookie(::String, ::String) at cookies.jl:167
└                                                  @ HTTP.Cookies cookies.jl:167
┌ Warning: `search(s::AbstractString, c::Char)` is deprecated, use `findfirst(equalto(c), s)` instead.
│   caller = readsetcookie(::String, ::String) at cookies.jl:178
└                                                  @ HTTP.Cookies cookies.jl:178
┌ Warning: `search(s::AbstractString, c::Char)` is deprecated, use `findfirst(equalto(c), s)` instead.
│   caller = readcookies(::Dict{String,String}, ::String) at cookies.jl:337
└                                                  @ HTTP.Cookies cookies.jl:337
TEST - parser.jl - Request: curl get
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = #parse#14 at uri.jl:87 [inlined]
└                                                               @ Core uri.jl:87
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = #parse#22(::Base.RefValue{String}, ::Bool, ::Int64, ::Int64, ::Int64, ::Task, ::Bool, ::Function, ::Type{Request}, ::String) at parser.jl:151
└                                                           @ HTTP parser.jl:151
TEST - parser.jl - Request: firefox get
TEST - parser.jl - Request: abcdefgh
TEST - parser.jl - Request: fragment in url
TEST - parser.jl - Request: get no headers no body
TEST - parser.jl - Request: get one header no body
TEST - parser.jl - Request: get funky content length body hello
TEST - parser.jl - Request: post identity body world
TEST - parser.jl - Request: post - chunked body: all your base are belong to us
TEST - parser.jl - Request: two chunks ; triple zero ending
TEST - parser.jl - Request: chunked with trailing headers. blech.
TEST - parser.jl - Request: with excessss after the length
TEST - parser.jl - Request: with quotes
TEST - parser.jl - Request: apachebench get
TEST - parser.jl - Request: query url with question mark
TEST - parser.jl - Request: newline prefix get
TEST - parser.jl - Request: upgrade request
TEST - parser.jl - Request: connect request
TEST - parser.jl - Request: report request
TEST - parser.jl - Request: request with no http version
TEST - parser.jl - Request: m-search request
TEST - parser.jl - Request: host terminated by a query string
TEST - parser.jl - Request: host:port terminated by a query string
TEST - parser.jl - Request: host:port terminated by a space
TEST - parser.jl - Request: PATCH request
TEST - parser.jl - Request: connect caps request
TEST - parser.jl - Request: utf-8 path request
TEST - parser.jl - Request: hostname underscore
TEST - parser.jl - Request: eat CRLF between requests, no "Connection: close" header
TEST - parser.jl - Request: eat CRLF between requests even if "Connection: close" is set
TEST - parser.jl - Request: PURGE request
TEST - parser.jl - Request: SEARCH request
TEST - parser.jl - Request: host:port and basic_auth
TEST - parser.jl - Request: upgrade post request
TEST - parser.jl - Request: connect with body request
TEST - parser.jl - Request: link request
TEST - parser.jl - Request: link request
TEST - parser.jl - Request: multiple connection header values with folding
TEST - parser.jl - Request: line folding in header value
TEST - parser.jl - Request: multiple connection header values with folding and lws
TEST - parser.jl - Request: multiple connection header values with folding and lws
TEST - parser.jl - Request: line folding in header value
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = #parse#14 at uri.jl:87 [inlined]
└                                                               @ Core uri.jl:87
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = Type at fifobuffer.jl:77 [inlined]
└                                                        @ Core fifobuffer.jl:77
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = FIFOBuffer(::String) at fifobuffer.jl:77
└                                            @ HTTP.FIFOBuffers fifobuffer.jl:77
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = #parse#14 at uri.jl:87 [inlined]
└                                                               @ Core uri.jl:87
TEST - parser.jl - Response: google 301
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/HTTP/test/parser.jl:1350
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/HTTP/test/parser.jl:1350
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = #parse#22(::Base.RefValue{String}, ::Bool, ::Int64, ::Int64, ::Int64, ::Task, ::Bool, ::Function, ::Type{Response}, ::String) at parser.jl:151
└                                                           @ HTTP parser.jl:151
TEST - parser.jl - Response: no content-length response
TEST - parser.jl - Response: 404 no headers no body
TEST - parser.jl - Response: 301 no response phrase
TEST - parser.jl - Response: 200 trailing space on chunked body
TEST - parser.jl - Response: no carriage ret
TEST - parser.jl - Response: proxy connection
TEST - parser.jl - Response: underscore header key
TEST - parser.jl - Response: bonjourmadame.fr
TEST - parser.jl - Response: field underscore
TEST - parser.jl - Response: non-ASCII in status line
TEST - parser.jl - Response: http version 0.9
TEST - parser.jl - Response: neither content-length nor transfer-encoding response
TEST - parser.jl - Response: HTTP/1.0 with keep-alive and EOF-terminated 200 status
TEST - parser.jl - Response: HTTP/1.0 with keep-alive and a 204 status
TEST - parser.jl - Response: HTTP/1.1 with an EOF-terminated 200 status
TEST - parser.jl - Response: HTTP/1.1 with a 204 status
TEST - parser.jl - Response: HTTP/1.1 with a 204 status and keep-alive disabled
TEST - parser.jl - Response: HTTP/1.1 with chunked endocing and a 200 response
TEST - parser.jl - Response: field space
TEST - parser.jl - Response: amazon.com
TEST - parser.jl - Response: empty reason phrase after space
TEST - parser.jl - Response: Content-Length-X
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = macro expansion at parser.jl:1609 [inlined]
└                                                          @ Core parser.jl:1609
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = macro expansion at parser.jl:1616 [inlined]
└                                                          @ Core parser.jl:1616
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = Type at fifobuffer.jl:77 [inlined]
└                                                        @ Core fifobuffer.jl:77
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = macro expansion at parser.jl:1651 [inlined]
└                                                          @ Core parser.jl:1651
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = macro expansion at parser.jl:1656 [inlined]
└                                                          @ Core parser.jl:1656
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = macro expansion at parser.jl:1661 [inlined]
└                                                          @ Core parser.jl:1661
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = macro expansion at parser.jl:1671 [inlined]
└                                                          @ Core parser.jl:1671
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = macro expansion at parser.jl:1676 [inlined]
└                                                          @ Core parser.jl:1676
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = macro expansion at parser.jl:1681 [inlined]
└                                                          @ Core parser.jl:1681
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = macro expansion at parser.jl:1690 [inlined]
└                                                          @ Core parser.jl:1690
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = macro expansion at parser.jl:1695 [inlined]
└                                                          @ Core parser.jl:1695
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = Type at fifobuffer.jl:77 [inlined]
└                                                        @ Core fifobuffer.jl:77
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = Type at fifobuffer.jl:77 [inlined]
└                                                        @ Core fifobuffer.jl:77
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = Type at fifobuffer.jl:77 [inlined]
└                                                        @ Core fifobuffer.jl:77
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = #parse#14 at uri.jl:87 [inlined]
└                                                               @ Core uri.jl:87
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = #parse#14 at uri.jl:87 [inlined]
└                                                               @ Core uri.jl:87
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = #parse#14 at uri.jl:87 [inlined]
└                                                               @ Core uri.jl:87
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = Type at fifobuffer.jl:77 [inlined]
└                                                        @ Core fifobuffer.jl:77
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = iscompressed at sniff.jl:6 [inlined]
└                                                              @ Core sniff.jl:6
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = #parse#14 at uri.jl:87 [inlined]
└                                                               @ Core uri.jl:87
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = #parse#14 at uri.jl:87 [inlined]
└                                                               @ Core uri.jl:87
running http client tests...
simple GET, HEAD, POST, DELETE, etc.
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = utf8_chars at uri.jl:185 [inlined]
└                                                              @ Core uri.jl:185
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = #parse#14 at uri.jl:87 [inlined]
└                                                               @ Core uri.jl:87
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = iscompressed at sniff.jl:6 [inlined]
└                                                              @ Core sniff.jl:6
async client request
pass query to uri
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = #parse#14 at uri.jl:87 [inlined]
└                                                               @ Core uri.jl:87
cookie requests
client streaming tests
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = sniff(::String) at sniff.jl:40
└                                                             @ HTTP sniff.jl:40
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = sniff(::String) at sniff.jl:40
└                                                             @ HTTP sniff.jl:40
client body posting of various types
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = iscompressed at sniff.jl:6 [inlined]
└                                                              @ Core sniff.jl:6
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = iscompressed at sniff.jl:6 [inlined]
└                                                              @ Core sniff.jl:6
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = iscompressed at sniff.jl:6 [inlined]
└                                                              @ Core sniff.jl:6
client transfer-encoding chunked
client multipart body
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = utf8_chars at uri.jl:185 [inlined]
└                                                              @ Core uri.jl:185
asynchronous client request body
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = write(::FIFOBuffer, ::String) at fifobuffer.jl:292
└                                           @ HTTP.FIFOBuffers fifobuffer.jl:292
client redirect following
client basic auth
high-level client request methods
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = iscompressed at sniff.jl:6 [inlined]
└                                                              @ Core sniff.jl:6
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = utf8_chars at uri.jl:185 [inlined]
└                                                              @ Core uri.jl:185
running https client tests...
simple GET, HEAD, POST, DELETE, etc.
async client request
pass query to uri
cookie requests
client streaming tests
client body posting of various types
client transfer-encoding chunked
client multipart body
asynchronous client request body
client redirect following
client basic auth
high-level client request methods
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/HTTP/test/server.jl:1
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/HTTP/test/server.jl:1
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/HTTP/test/server.jl:1
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/HTTP/test/server.jl:1
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/HTTP/test/server.jl:1
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/HTTP/test/server.jl:1
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/HTTP/test/server.jl:1
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/HTTP/test/server.jl:1
WARNING: importing deprecated binding Base.interrupt into Nitrogen.
[HTTP - 2018-01-15T05:43:12.191]: starting server to listen on: 127.0.0.1:8081
[HTTP - 2018-01-15T05:43:12.711]: server TCPServer is closed, shutting down...
ERROR (unhandled task failure): Base.interrupt has been moved to the standard library package Distributed.
Restart Julia and then run `using Distributed` to load it.
Stacktrace:
 [1] error(::Function, ::String, ::String, ::String, ::String, ::String, ::String) at ./error.jl:42
 [2] #interrupt#829 at ./deprecated.jl:138 [inlined]
 [3] interrupt at ./deprecated.jl:138 [inlined]
 [4] serve(::HTTP.Nitrogen.Server{HTTP.http,HTTP.Handlers.HandlerFunction{getfield(HTTP.Nitrogen, Symbol("##12#14"))}}, ::IPv4, ::Int64, ::Bool) at /home/vagrant/.julia/v0.7/HTTP/src/server.jl:294
 [5] #serve#16 at /home/vagrant/.julia/v0.7/HTTP/src/server.jl:332 [inlined]
 [6] serve at /home/vagrant/.julia/v0.7/HTTP/src/server.jl:332 [inlined] (repeats 2 times)
 [7] (::getfield(, Symbol("##44#49")))() at ./task.jl:348
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/HTTP/test/server.jl:1
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/HTTP/test/server.jl:1
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = write at fifobuffer.jl:292 [inlined]
└                                                       @ Core fifobuffer.jl:292
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = write at fifobuffer.jl:292 [inlined]
└                                                       @ Core fifobuffer.jl:292
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = write at fifobuffer.jl:292 [inlined]
└                                                       @ Core fifobuffer.jl:292
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = write at fifobuffer.jl:292 [inlined]
└                                                       @ Core fifobuffer.jl:292
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = write at fifobuffer.jl:292 [inlined]
└                                                       @ Core fifobuffer.jl:292
[HTTP - 2018-01-15T05:43:13.403]: starting server to listen on: 127.0.0.1:8081
[HTTP - 2018-01-15T05:43:14.543]: new tcp connection accepted, reading request...
[HTTP - 2018-01-15T05:43:14.606]: processing on connection i=0...
[HTTP - 2018-01-15T05:43:14.962]: throttling on connection i=0
[HTTP - 2018-01-15T05:43:14.964]: reading request bytes with readtimeout=180.0
[HTTP - 2018-01-15T05:43:14.972]: received request on connection i=0
HTTP.Request:

GET / HTTP/1.1
Host: 127.0.0.18081
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8,application/json; charset=utf-8
User-Agent: HTTP.jl/0.0.0


[HTTP - 2018-01-15T05:43:15.036]: responding with response on connection i=0
HTTP.Response:

HTTP/1.1 200 OK
Connection: keep-alive
Content-Type: text/html; charset=utf-8
Date: Mon, 15 Jan 2018 05:43:15
Content-Language: en
Server: Julia/0.7.0-DEV.3354
Content-Length: 0


[HTTP - 2018-01-15T05:43:15.088]: reading request bytes with readtimeout=180.0
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = write at fifobuffer.jl:292 [inlined]
└                                                       @ Core fifobuffer.jl:292
[HTTP - 2018-01-15T05:43:17.433]: throttling 127.0.0.1
[HTTP - 2018-01-15T05:43:17.435]: new tcp connection accepted, reading request...
[HTTP - 2018-01-15T05:43:17.437]: processing on connection i=1...
[HTTP - 2018-01-15T05:43:17.438]: throttling on connection i=1
[HTTP - 2018-01-15T05:43:17.438]: reading request bytes with readtimeout=180.0
[HTTP - 2018-01-15T05:43:17.439]: error parsing request on connection i=1: invalid HTTP version
[HTTP - 2018-01-15T05:43:17.441]: reading request bytes with readtimeout=180.0
[HTTP - 2018-01-15T05:43:21.445]: throttling 127.0.0.1
[HTTP - 2018-01-15T05:43:21.446]: new tcp connection accepted, reading request...
[HTTP - 2018-01-15T05:43:21.448]: processing on connection i=2...
[HTTP - 2018-01-15T05:43:21.449]: throttling on connection i=2
[HTTP - 2018-01-15T05:43:21.45 ]: reading request bytes with readtimeout=180.0
[HTTP - 2018-01-15T05:43:21.45 ]: error parsing request on connection i=2: invalid HTTP method
[HTTP - 2018-01-15T05:43:21.451]: reading request bytes with readtimeout=180.0
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = write at fifobuffer.jl:292 [inlined]
└                                                       @ Core fifobuffer.jl:292
HTTP/1.1 200 OK
Connection: keep-alive
Content-Type: text/html; charset=utf-8
Date: Mon, 15 Jan 2018 05:43:27
Content-Language: en
Server: Julia/0.7.0-DEV.3354
Content-Length: 15

Body of Request[HTTP - 2018-01-15T05:43:29.963]: starting server to listen on: 127.0.0.1:8083
ERROR (unhandled task failure): Base.interrupt has been moved to the standard library package Distributed.
Restart Julia and then run `using Distributed` to load it.
Stacktrace:
 [1] error(::Function, ::String, ::String, ::String, ::String, ::String, ::String) at ./error.jl:42
 [2] #interrupt#829 at ./deprecated.jl:138 [inlined]
 [3] interrupt at ./deprecated.jl:138 [inlined]
 [4] serve(::HTTP.Nitrogen.Server{HTTP.http,HTTP.Handlers.HandlerFunction{getfield(, Symbol("##45#50"))}}, ::IPv4, ::Int64, ::Bool) at /home/vagrant/.julia/v0.7/HTTP/src/server.jl:294
 [5] #serve#16 at /home/vagrant/.julia/v0.7/HTTP/src/server.jl:332 [inlined]
 [6] serve at /home/vagrant/.julia/v0.7/HTTP/src/server.jl:332 [inlined] (repeats 2 times)
 [7] (::getfield(, Symbol("##46#51")))() at ./task.jl:348
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = Type at fifobuffer.jl:77 [inlined]
└                                                        @ Core fifobuffer.jl:77
Test Summary:  |   Pass  Error  Broken   Total
HTTP           | 607588      8      10  607606
  utils.jl     |    173                    173
  FIFOBuffer   |     97                     97
  HTTP.sniff   |     12      8              20
  HTTP.isjson  |     27                     27
  HTTP.URI     |    113                    113
  Cookies      |     57                     57
  HTTP.parse   | 606943                 606943
  types.jl     |     12                     12
  HTTP.Handler |     17                     17
  HTTP.Client  |    124             10     134
  HTTP.serve   |     13                     13
ERROR: LoadError: Some tests did not pass: 607588 passed, 0 failed, 8 errored, 10 broken.
in expression starting at /home/vagrant/.julia/v0.7/HTTP/test/runtests.jl:18
┌ Error: ------------------------------------------------------------
│ # Testing failed for HTTP
│   exception =
│    failed process: Process(`/home/vagrant/julia/bin/julia -Cnative -J/home/vagrant/julia/lib/julia/sys.so --compile=yes --depwarn=yes --code-coverage=none --color=no --compiled-modules=yes --check-bounds=yes --warn-overwrite=yes --startup-file=yes /home/vagrant/.julia/v0.7/HTTP/test/runtests.jl`, ProcessExited(1)) [1]
│    Stacktrace:
│     [1] error(::String, ::Base.Process, ::String, ::Int64, ::String) at ./error.jl:42
│     [2] pipeline_error(::Base.Process) at ./process.jl:707
│     [3] run(::Cmd) at ./process.jl:669
│     [4] (::getfield(Base.Pkg.Entry, Symbol("##91#94")){Bool,String,Array{AbstractString,1}})() at ./pkg/entry.jl:736
│     [5] cd(::getfield(Base.Pkg.Entry, Symbol("##91#94")){Bool,String,Array{AbstractString,1}}, ::String) at ./file.jl:70
│     [6] #test!#90(::Bool, ::Function, ::String, ::Array{AbstractString,1}, ::Array{AbstractString,1}, ::Array{AbstractString,1}) at ./pkg/entry.jl:724
│     [7] (::getfield(Base.Pkg.Entry, Symbol("#kw##test!")))(::NamedTuple{(:coverage,),Tuple{Bool}}, ::typeof(Base.Pkg.Entry.test!), ::String, ::Array{AbstractString,1}, ::Array{AbstractString,1}, ::Array{AbstractString,1}) at ./<missing>:0
│     [8] #test#98(::Bool, ::Function, ::Array{AbstractString,1}) at ./pkg/entry.jl:763
│     [9] (::getfield(Base.Pkg.Entry, Symbol("#kw##test")))(::NamedTuple{(:coverage,),Tuple{Bool}}, ::typeof(Base.Pkg.Entry.test), ::Array{AbstractString,1}) at ./<missing>:0
│     [10] (::getfield(Base.Pkg.Dir, Symbol("##4#7")){Base.Iterators.IndexValue{Symbol,Bool,Tuple{Symbol},NamedTuple{(:coverage,),Tuple{Bool}}},typeof(Base.Pkg.Entry.test),Tuple{Array{AbstractString,1}}})() at ./pkg/dir.jl:36
│     [11] cd(::getfield(Base.Pkg.Dir, Symbol("##4#7")){Base.Iterators.IndexValue{Symbol,Bool,Tuple{Symbol},NamedTuple{(:coverage,),Tuple{Bool}}},typeof(Base.Pkg.Entry.test),Tuple{Array{AbstractString,1}}}, ::String) at ./file.jl:70
│     [12] #cd#1(::Base.Iterators.IndexValue{Symbol,Bool,Tuple{Symbol},NamedTuple{(:coverage,),Tuple{Bool}}}, ::Function, ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N} where N) at ./pkg/dir.jl:36
│     [13] (::getfield(Base.Pkg.Dir, Symbol("#kw##cd")))(::NamedTuple{(:coverage,),Tuple{Bool}}, ::typeof(Base.Pkg.Dir.cd), ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N} where N) at ./<missing>:0
│     [14] #test#3(::Bool, ::Function, ::String, ::Vararg{String,N} where N) at ./pkg/pkg.jl:274
│     [15] test(::String, ::Vararg{String,N} where N) at ./pkg/pkg.jl:274
│     [16] top-level scope
│     [17] eval at ./boot.jl:296 [inlined]
│     [18] eval(::Module, ::Expr) at ./sysimg.jl:71
│     [19] process_options(::Base.JLOptions) at ./client.jl:301
│     [20] _start() at ./client.jl:375
└                                                  @ Base.Pkg.Entry entry.jl:739
ERROR: HTTP had test errors

>>> End of log
