>>> 'Pkg.add("HTTP")' log
[ Info: Installing BinDeps v0.8.2 @ Base.Pkg.Entry entry.jl:543
[ Info: Installing HTTP v0.5.7 @ Base.Pkg.Entry entry.jl:543
[ Info: Installing MbedTLS v0.5.2 @ Base.Pkg.Entry entry.jl:543
[ Info: Installing SHA v0.5.2 @ Base.Pkg.Entry entry.jl:543
[ Info: Installing URIParser v0.3.0 @ Base.Pkg.Entry entry.jl:543
[ Info: Building MbedTLS @ Main none:10
WARNING: importing deprecated binding Base.Void into __anon__.
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MbedTLS/deps/build.jl:5
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MbedTLS/deps/build.jl:5
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MbedTLS/deps/build.jl:28
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MbedTLS/deps/build.jl:28
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MbedTLS/deps/build.jl:28
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MbedTLS/deps/build.jl:28
Using system libraries...
WARNING: importing deprecated binding Base.Associative into BinDeps.
WARNING: Base.Associative is deprecated, use AbstractDict instead.
  likely near /home/vagrant/.julia/v0.7/MbedTLS/deps/build.jl:45
in @install at /home/vagrant/.julia/v0.7/BinDeps/src/dependencies.jl
[ Info: Package database updated @ Base.Pkg.Entry entry.jl:32
┌ Info: METADATA is out-of-date — you may not have the latest version of HTTP
│ Use `Pkg.update()` to get the latest versions of your packages
└ @ Base.Pkg.Entry entry.jl:74

>>> 'Pkg.test("HTTP")' log
Julia Version 0.7.0-DEV.3299
Commit fb527308bb (2018-01-05 19:41 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
      Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-135-generic #184-Ubuntu SMP Wed Oct 18 11:55:51 UTC 2017 x86_64 x86_64
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
              speed         user         nice          sys         idle          irq
       #1  3500 MHz    1011811 s         90 s      53162 s     336650 s          6 s
       #2  3500 MHz     184975 s         68 s      21262 s    1398856 s          0 s
       
  Memory: 2.93927001953125 GB (700.01171875 MB free)
  Uptime: 16296.0 sec
  Load Avg:  1.03076171875  0.99072265625  0.9599609375
  WORD_SIZE: 64
  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant
Packages:
  Package Directory: /home/vagrant/.julia/v0.7
  Package Status:
2 required packages:
 - HTTP                          0.5.7
 - JSON                          0.16.3
6 additional packages:
 - BinDeps                       0.8.2
 - Compat                        0.42.0
 - MbedTLS                       0.5.2
 - Nullables                     0.0.2
 - SHA                           0.5.2
 - URIParser                     0.3.0
[ Info: Testing HTTP @ Base.Pkg.Entry entry.jl:723
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/HTTP/test/runtests.jl:1
in __init__ at /home/vagrant/.julia/v0.7/MbedTLS/src/MbedTLS.jl
┌ Warning: `replace(s::AbstractString, pat, f)` is deprecated, use `replace(s, pat => f)` instead.
│   caller = escapeHTML(::String) at utils.jl:8
└ @ HTTP utils.jl:8
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/HTTP/test/utils.jl:1
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/HTTP/test/utils.jl:1
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/HTTP/test/utils.jl:1
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/HTTP/test/utils.jl:1
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/HTTP/test/utils.jl:1
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/HTTP/test/utils.jl:1
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/HTTP/test/utils.jl:1
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/HTTP/test/utils.jl:1
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/HTTP/test/utils.jl:1
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/HTTP/test/utils.jl:1
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/HTTP/test/utils.jl:1
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/HTTP/test/utils.jl:1
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/HTTP/test/utils.jl:1
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/HTTP/test/utils.jl:1
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/HTTP/test/utils.jl:1
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/HTTP/test/utils.jl:1
┌ Warning: `replace(s::AbstractString, pat, f)` is deprecated, use `replace(s, pat => f)` instead.
│   caller = escapeHTML(::String) at utils.jl:9
└ @ HTTP utils.jl:9
┌ Warning: `replace(s::AbstractString, pat, f)` is deprecated, use `replace(s, pat => f)` instead.
│   caller = escapeHTML(::String) at utils.jl:10
└ @ HTTP utils.jl:10
┌ Warning: `replace(s::AbstractString, pat, f)` is deprecated, use `replace(s, pat => f)` instead.
│   caller = escapeHTML(::String) at utils.jl:11
└ @ HTTP utils.jl:11
┌ Warning: `replace(s::AbstractString, pat, f)` is deprecated, use `replace(s, pat => f)` instead.
│   caller = escapeHTML(::String) at utils.jl:12
└ @ HTTP utils.jl:12
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = canonicalize!(::String) at utils.jl:166
└ @ HTTP utils.jl:166
┌ Warning: `unsafe_copy!(dest, args...)` is deprecated, use `unsafe_copyto!(dest, args...)` instead.
│   caller = write(::FIFOBuffer, ::Array{UInt8,1}, ::Int64, ::Int64) at fifobuffer.jl:252
└ @ HTTP.FIFOBuffers fifobuffer.jl:252
┌ Warning: `unsafe_copy!(dest, args...)` is deprecated, use `unsafe_copyto!(dest, args...)` instead.
│   caller = write(::FIFOBuffer, ::Array{UInt8,1}, ::Int64, ::Int64) at fifobuffer.jl:259
└ @ HTTP.FIFOBuffers fifobuffer.jl:259
┌ Warning: `unsafe_copy!(dest, args...)` is deprecated, use `unsafe_copyto!(dest, args...)` instead.
│   caller = write(::FIFOBuffer, ::Array{UInt8,1}, ::Int64, ::Int64) at fifobuffer.jl:267
└ @ HTTP.FIFOBuffers fifobuffer.jl:267
┌ Warning: `unsafe_copy!(dest, args...)` is deprecated, use `unsafe_copyto!(dest, args...)` instead.
│   caller = write(::FIFOBuffer, ::Array{UInt8,1}, ::Int64, ::Int64) at fifobuffer.jl:255
└ @ HTTP.FIFOBuffers fifobuffer.jl:255
┌ Warning: `unsafe_copy!(dest, args...)` is deprecated, use `unsafe_copyto!(dest, args...)` instead.
│   caller = write(::FIFOBuffer, ::Array{UInt8,1}, ::Int64, ::Int64) at fifobuffer.jl:282
└ @ HTTP.FIFOBuffers fifobuffer.jl:282
┌ Warning: `unsafe_copy!(dest, args...)` is deprecated, use `unsafe_copyto!(dest, args...)` instead.
│   caller = write(::FIFOBuffer, ::Array{UInt8,1}, ::Int64, ::Int64) at fifobuffer.jl:275
└ @ HTTP.FIFOBuffers fifobuffer.jl:275
TEST - sniff.jl: Empty
TEST - sniff.jl: Binary
TEST - sniff.jl: HTML document #1
TEST - sniff.jl: HTML document #2
TEST - sniff.jl: HTML document #3 (leading whitespace)
TEST - sniff.jl: HTML document #4 (leading CRLF)
TEST - sniff.jl: Plain text
TEST - sniff.jl: XML
TEST - sniff.jl: GIF 87a
TEST - sniff.jl: GIF 89a
TEST - sniff.jl: MIDI audio
TEST - sniff.jl: MP3 audio/MPEG audio
TEST - sniff.jl: WAV audio #1
TEST - sniff.jl: WAV audio #2
TEST - sniff.jl: AIFF audio #1
TEST - sniff.jl: OGG audio
TEST - sniff.jl: MP4 video
TEST - sniff.jl: AVI video #1
TEST - sniff.jl: AVI video #2
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = macro expansion at sniff.jl:252 [inlined]
└ @ Core sniff.jl:252
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = #parse#14 at uri.jl:87 [inlined]
└ @ Core uri.jl:87
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = utf8_chars at uri.jl:185 [inlined]
└ @ Core uri.jl:185
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = #parse#14 at uri.jl:87 [inlined]
└ @ Core uri.jl:87
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = utf8_chars at uri.jl:185 [inlined]
└ @ Core uri.jl:185
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = utf8_chars at uri.jl:185 [inlined]
└ @ Core uri.jl:185
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = #parse#14 at uri.jl:87 [inlined]
└ @ Core uri.jl:87
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = #parse#14 at uri.jl:87 [inlined]
└ @ Core uri.jl:87
┌ Warning: `search(s::AbstractString, c::Char)` is deprecated, use `findfirst(equalto(c), s)` instead.
│   caller = isvalid(::HTTP.URIs.URI) at uri.jl:170
└ @ HTTP.URIs uri.jl:170
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = utf8_chars at uri.jl:185 [inlined]
└ @ Core uri.jl:185
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = #parse#14 at uri.jl:87 [inlined]
└ @ Core uri.jl:87
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = utf8_chars at uri.jl:185 [inlined]
└ @ Core uri.jl:185
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = utf8_chars at uri.jl:185 [inlined]
└ @ Core uri.jl:185
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = utf8_chars at uri.jl:185 [inlined]
└ @ Core uri.jl:185
TEST - uri.jl: proxy request
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = #parse#14 at uri.jl:87 [inlined]
└ @ Core uri.jl:87
TEST - uri.jl: proxy request with port
TEST - uri.jl: CONNECT request
TEST - uri.jl: proxy ipv6 request
TEST - uri.jl: proxy ipv6 request with port
TEST - uri.jl: CONNECT ipv6 address
TEST - uri.jl: ipv4 in ipv6 address
TEST - uri.jl: extra ? in query string
TEST - uri.jl: space URL encoded
TEST - uri.jl: URL fragment
TEST - uri.jl: complex URL fragment
TEST - uri.jl: complex URL from node js url parser doc
TEST - uri.jl: complex URL with basic auth from node js url parser doc
TEST - uri.jl: double @
TEST - uri.jl: proxy empty host
TEST - uri.jl: proxy empty port
TEST - uri.jl: CONNECT with basic auth
TEST - uri.jl: CONNECT empty host
TEST - uri.jl: CONNECT empty port
TEST - uri.jl: CONNECT with extra bits
TEST - uri.jl: space in URL
TEST - uri.jl: proxy basic auth with space url encoded
TEST - uri.jl: carriage return in URL
TEST - uri.jl: proxy double : in URL
TEST - uri.jl: proxy basic auth with double :
TEST - uri.jl: line feed in URL
TEST - uri.jl: proxy empty basic auth
TEST - uri.jl: proxy line feed in hostname
TEST - uri.jl: proxy % in hostname
TEST - uri.jl: proxy ; in hostname
TEST - uri.jl: proxy basic auth with unreservedchars
TEST - uri.jl: proxy only empty basic auth
TEST - uri.jl: proxy only basic auth
TEST - uri.jl: proxy = in URL
TEST - uri.jl: ipv6 address with Zone ID
TEST - uri.jl: ipv6 address with Zone ID, but '%' is not percent-encoded
TEST - uri.jl: ipv6 address ending with '%'
TEST - uri.jl: ipv6 address with Zone ID including bad character
TEST - uri.jl: just ipv6 Zone ID
TEST - uri.jl: tab in URL
TEST - uri.jl: form feed in URL
┌ Warning: `replace(s::AbstractString, pat, f)` is deprecated, use `replace(s, pat => f)` instead.
│   caller = sanitizeCookieName at cookies.jl:397 [inlined]
└ @ Core cookies.jl:397
┌ Warning: `replace(s::AbstractString, pat, f)` is deprecated, use `replace(s, pat => f)` instead.
│   caller = sanitizeCookieName at cookies.jl:397 [inlined]
└ @ Core cookies.jl:397
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = sanitizeCookieValue(::String) at cookies.jl:411
└ @ HTTP.Cookies cookies.jl:411
┌ Warning: `search(s::AbstractString, c::Char)` is deprecated, use `findfirst(equalto(c), s)` instead.
│   caller = readsetcookie(::String, ::String) at cookies.jl:167
└ @ HTTP.Cookies cookies.jl:167
┌ Warning: `search(s::AbstractString, c::Char)` is deprecated, use `findfirst(equalto(c), s)` instead.
│   caller = readsetcookie(::String, ::String) at cookies.jl:178
└ @ HTTP.Cookies cookies.jl:178
┌ Warning: `search(s::AbstractString, c::Char)` is deprecated, use `findfirst(equalto(c), s)` instead.
│   caller = readcookies(::Dict{String,String}, ::String) at cookies.jl:337
└ @ HTTP.Cookies cookies.jl:337
TEST - parser.jl - Request: curl get
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = #parse#14 at uri.jl:87 [inlined]
└ @ Core uri.jl:87
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = #parse#22(::Base.RefValue{String}, ::Bool, ::Int64, ::Int64, ::Int64, ::Task, ::Bool, ::Function, ::Type{Request}, ::String) at parser.jl:151
└ @ HTTP parser.jl:151
TEST - parser.jl - Request: firefox get
TEST - parser.jl - Request: abcdefgh
TEST - parser.jl - Request: fragment in url
TEST - parser.jl - Request: get no headers no body
TEST - parser.jl - Request: get one header no body
TEST - parser.jl - Request: get funky content length body hello
TEST - parser.jl - Request: post identity body world
TEST - parser.jl - Request: post - chunked body: all your base are belong to us
TEST - parser.jl - Request: two chunks ; triple zero ending
TEST - parser.jl - Request: chunked with trailing headers. blech.
TEST - parser.jl - Request: with excessss after the length
TEST - parser.jl - Request: with quotes
TEST - parser.jl - Request: apachebench get
TEST - parser.jl - Request: query url with question mark
TEST - parser.jl - Request: newline prefix get
TEST - parser.jl - Request: upgrade request
TEST - parser.jl - Request: connect request
TEST - parser.jl - Request: report request
TEST - parser.jl - Request: request with no http version
TEST - parser.jl - Request: m-search request
TEST - parser.jl - Request: host terminated by a query string
TEST - parser.jl - Request: host:port terminated by a query string
TEST - parser.jl - Request: host:port terminated by a space
TEST - parser.jl - Request: PATCH request
TEST - parser.jl - Request: connect caps request
TEST - parser.jl - Request: utf-8 path request
TEST - parser.jl - Request: hostname underscore
TEST - parser.jl - Request: eat CRLF between requests, no "Connection: close" header
TEST - parser.jl - Request: eat CRLF between requests even if "Connection: close" is set
TEST - parser.jl - Request: PURGE request
TEST - parser.jl - Request: SEARCH request
TEST - parser.jl - Request: host:port and basic_auth
TEST - parser.jl - Request: upgrade post request
TEST - parser.jl - Request: connect with body request
TEST - parser.jl - Request: link request
TEST - parser.jl - Request: link request
TEST - parser.jl - Request: multiple connection header values with folding
TEST - parser.jl - Request: line folding in header value
TEST - parser.jl - Request: multiple connection header values with folding and lws
TEST - parser.jl - Request: multiple connection header values with folding and lws
TEST - parser.jl - Request: line folding in header value
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = #parse#14 at uri.jl:87 [inlined]
└ @ Core uri.jl:87
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = Type at fifobuffer.jl:77 [inlined]
└ @ Core fifobuffer.jl:77
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = FIFOBuffer(::String) at fifobuffer.jl:77
└ @ HTTP.FIFOBuffers fifobuffer.jl:77
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = #parse#14 at uri.jl:87 [inlined]
└ @ Core uri.jl:87
TEST - parser.jl - Response: google 301
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/HTTP/test/parser.jl:1350
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/HTTP/test/parser.jl:1350
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = #parse#22(::Base.RefValue{String}, ::Bool, ::Int64, ::Int64, ::Int64, ::Task, ::Bool, ::Function, ::Type{Response}, ::String) at parser.jl:151
└ @ HTTP parser.jl:151
TEST - parser.jl - Response: no content-length response
TEST - parser.jl - Response: 404 no headers no body
TEST - parser.jl - Response: 301 no response phrase
TEST - parser.jl - Response: 200 trailing space on chunked body
TEST - parser.jl - Response: no carriage ret
TEST - parser.jl - Response: proxy connection
TEST - parser.jl - Response: underscore header key
TEST - parser.jl - Response: bonjourmadame.fr
TEST - parser.jl - Response: field underscore
TEST - parser.jl - Response: non-ASCII in status line
TEST - parser.jl - Response: http version 0.9
TEST - parser.jl - Response: neither content-length nor transfer-encoding response
TEST - parser.jl - Response: HTTP/1.0 with keep-alive and EOF-terminated 200 status
TEST - parser.jl - Response: HTTP/1.0 with keep-alive and a 204 status
TEST - parser.jl - Response: HTTP/1.1 with an EOF-terminated 200 status
TEST - parser.jl - Response: HTTP/1.1 with a 204 status
TEST - parser.jl - Response: HTTP/1.1 with a 204 status and keep-alive disabled
TEST - parser.jl - Response: HTTP/1.1 with chunked endocing and a 200 response
TEST - parser.jl - Response: field space
TEST - parser.jl - Response: amazon.com
TEST - parser.jl - Response: empty reason phrase after space
TEST - parser.jl - Response: Content-Length-X
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = macro expansion at parser.jl:1609 [inlined]
└ @ Core parser.jl:1609
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = macro expansion at parser.jl:1616 [inlined]
└ @ Core parser.jl:1616
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = Type at fifobuffer.jl:77 [inlined]
└ @ Core fifobuffer.jl:77
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = macro expansion at parser.jl:1651 [inlined]
└ @ Core parser.jl:1651
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = macro expansion at parser.jl:1656 [inlined]
└ @ Core parser.jl:1656
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = macro expansion at parser.jl:1661 [inlined]
└ @ Core parser.jl:1661
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = macro expansion at parser.jl:1671 [inlined]
└ @ Core parser.jl:1671
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = macro expansion at parser.jl:1676 [inlined]
└ @ Core parser.jl:1676
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = macro expansion at parser.jl:1681 [inlined]
└ @ Core parser.jl:1681
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = macro expansion at parser.jl:1690 [inlined]
└ @ Core parser.jl:1690
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = macro expansion at parser.jl:1695 [inlined]
└ @ Core parser.jl:1695
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = Type at fifobuffer.jl:77 [inlined]
└ @ Core fifobuffer.jl:77
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = Type at fifobuffer.jl:77 [inlined]
└ @ Core fifobuffer.jl:77
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = Type at fifobuffer.jl:77 [inlined]
└ @ Core fifobuffer.jl:77
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = #parse#14 at uri.jl:87 [inlined]
└ @ Core uri.jl:87
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = #parse#14 at uri.jl:87 [inlined]
└ @ Core uri.jl:87
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = #parse#14 at uri.jl:87 [inlined]
└ @ Core uri.jl:87
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = Type at fifobuffer.jl:77 [inlined]
└ @ Core fifobuffer.jl:77
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = iscompressed at sniff.jl:6 [inlined]
└ @ Core sniff.jl:6
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = #parse#14 at uri.jl:87 [inlined]
└ @ Core uri.jl:87
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = #parse#14 at uri.jl:87 [inlined]
└ @ Core uri.jl:87
running http client tests...
simple GET, HEAD, POST, DELETE, etc.
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = utf8_chars at uri.jl:185 [inlined]
└ @ Core uri.jl:185
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = #parse#14 at uri.jl:87 [inlined]
└ @ Core uri.jl:87
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = iscompressed at sniff.jl:6 [inlined]
└ @ Core sniff.jl:6
async client request
pass query to uri
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = #parse#14 at uri.jl:87 [inlined]
└ @ Core uri.jl:87
cookie requests
client streaming tests
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = sniff(::String) at sniff.jl:40
└ @ HTTP sniff.jl:40
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = sniff(::String) at sniff.jl:40
└ @ HTTP sniff.jl:40
client body posting of various types
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = iscompressed at sniff.jl:6 [inlined]
└ @ Core sniff.jl:6
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = iscompressed at sniff.jl:6 [inlined]
└ @ Core sniff.jl:6
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = iscompressed at sniff.jl:6 [inlined]
└ @ Core sniff.jl:6
client transfer-encoding chunked
client multipart body
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = utf8_chars at uri.jl:185 [inlined]
└ @ Core uri.jl:185
asynchronous client request body
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = write(::FIFOBuffer, ::String) at fifobuffer.jl:292
└ @ HTTP.FIFOBuffers fifobuffer.jl:292
client redirect following
client basic auth
high-level client request methods
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = iscompressed at sniff.jl:6 [inlined]
└ @ Core sniff.jl:6
┌ Warning: Vector{UInt8}(s::String) will copy data in the future. To avoid copying, use `unsafe_wrap` or `codeunits` instead.
│   caller = utf8_chars at uri.jl:185 [inlined]
└ @ Core uri.jl:185
running https client tests...
simple GET, HEAD, POST, DELETE, etc.
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/HTTP/test/client.jl:1
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/HTTP/test/client.jl:1
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/HTTP/test/client.jl:1
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/HTTP/test/client.jl:1
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/HTTP/test/client.jl:1
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/HTTP/test/client.jl:1
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/HTTP/test/client.jl:1
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/HTTP/test/client.jl:1
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/HTTP/test/client.jl:1
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/HTTP/test/client.jl:1
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/HTTP/test/client.jl:1
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/HTTP/test/client.jl:1
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/HTTP/test/client.jl:1
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/HTTP/test/client.jl:1
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/HTTP/test/client.jl:1
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/HTTP/test/client.jl:1
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/HTTP/test/client.jl:1
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/HTTP/test/client.jl:1
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/HTTP/test/client.jl:1
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/HTTP/test/client.jl:1
HTTP.Client: Error During Test at /home/vagrant/.julia/v0.7/HTTP/test/client.jl:22
  Test threw an exception of type HTTP.ConnectError
  Expression: HTTP.status(HTTP.get("$(sch)://httpbin.org/ip")) == 200
  HTTP.ConnectError:
  Exception: ErrorException("pointer_from_objref cannot be used on immutable objects")
  
  Stacktrace:
   [1] error at ./error.jl:33 [inlined]
   [2] pointer_from_objref at ./pointer.jl:142 [inlined]
   [3] dbg! at /home/vagrant/.julia/v0.7/MbedTLS/src/ssl.jl:127 [inlined]
   [4] Type at /home/vagrant/.julia/v0.7/MbedTLS/src/MbedTLS.jl:106 [inlined]
   [5] initTLS!(::Type{HTTP.https}, ::String, ::HTTP.RequestOptions, ::TCPSocket) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:144
   [6] macro expansion at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:196 [inlined]
   [7] macro expansion at /home/vagrant/.julia/v0.7/HTTP/src/utils.jl:198 [inlined]
   [8] connect(::HTTP.Client, ::Type, ::String, ::String, ::HTTP.RequestOptions, ::Bool) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:159
   [9] connectandsend(::HTTP.Client, ::Type{HTTP.https}, ::String, ::String, ::Request, ::HTTP.RequestOptions, ::Bool) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:231
   [10] macro expansion at /home/vagrant/.julia/v0.7/HTTP/src/utils.jl:33 [inlined]
   [11] request(::HTTP.Client, ::Request, ::HTTP.RequestOptions, ::Bool, ::Array{Response,1}, ::Int64, ::Bool) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:326
   [12] #request#43(::HTTP.RequestOptions, ::Bool, ::Array{Response,1}, ::Int64, ::Bool, ::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::HTTP.Client, ::Request) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:363
   [13] #request at ./<missing>:0 [inlined]
   [14] #request#44(::Dict{String,String}, ::FIFOBuffer, ::Bool, ::Bool, ::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::HTTP.Client, ::HTTP.Method, ::HTTP.URIs.URI) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:377
   [15] (::getfield(HTTP, Symbol("#kw##request")))(::NamedTuple{(:verbose,),Tuple{Bool}}, ::typeof(HTTP.request), ::HTTP.Client, ::HTTP.Method, ::HTTP.URIs.URI) at ./<missing>:0
   [16] #get#49(::Bool, ::String, ::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::String) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:511
   [17] get(::String) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:511
   [18] macro expansion at /home/vagrant/.julia/v0.7/HTTP/test/client.jl:22 [inlined]
   [19] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:980 [inlined]
   [20] top-level scope at /home/vagrant/.julia/v0.7/HTTP/test/client.jl:3
   [21] include at ./boot.jl:295 [inlined]
   [22] include_relative(::Module, ::String) at ./loading.jl:521
   [23] include(::Module, ::String) at ./sysimg.jl:26
   [24] include(::String) at ./sysimg.jl:65
   [25] macro expansion at /home/vagrant/.julia/v0.7/HTTP/test/runtests.jl:27 [inlined]
   [26] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:980 [inlined]
   [27] top-level scope at /home/vagrant/.julia/v0.7/HTTP/test/runtests.jl:19
   [28] include at ./boot.jl:295 [inlined]
   [29] include_relative(::Module, ::String) at ./loading.jl:521
   [30] include(::Module, ::String) at ./sysimg.jl:26
   [31] process_options(::Base.JLOptions) at ./client.jl:323
   [32] _start() at ./client.jl:374
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:203 [inlined]
   [2] macro expansion at /home/vagrant/.julia/v0.7/HTTP/src/utils.jl:198 [inlined]
   [3] connect(::HTTP.Client, ::Type, ::String, ::String, ::HTTP.RequestOptions, ::Bool) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:159
   [4] connectandsend(::HTTP.Client, ::Type{HTTP.https}, ::String, ::String, ::Request, ::HTTP.RequestOptions, ::Bool) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:231
   [5] macro expansion at /home/vagrant/.julia/v0.7/HTTP/src/utils.jl:33 [inlined]
   [6] request(::HTTP.Client, ::Request, ::HTTP.RequestOptions, ::Bool, ::Array{Response,1}, ::Int64, ::Bool) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:326
   [7] #request#43(::HTTP.RequestOptions, ::Bool, ::Array{Response,1}, ::Int64, ::Bool, ::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::HTTP.Client, ::Request) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:363
   [8] #request at ./<missing>:0 [inlined]
   [9] #request#44(::Dict{String,String}, ::FIFOBuffer, ::Bool, ::Bool, ::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::HTTP.Client, ::HTTP.Method, ::HTTP.URIs.URI) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:377
   [10] (::getfield(HTTP, Symbol("#kw##request")))(::NamedTuple{(:verbose,),Tuple{Bool}}, ::typeof(HTTP.request), ::HTTP.Client, ::HTTP.Method, ::HTTP.URIs.URI) at ./<missing>:0
   [11] #get#49(::Bool, ::String, ::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::String) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:511
   [12] get(::String) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:511
   [13] macro expansion at /home/vagrant/.julia/v0.7/HTTP/test/client.jl:22 [inlined]
   [14] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:980 [inlined]
   [15] top-level scope at /home/vagrant/.julia/v0.7/HTTP/test/client.jl:3
HTTP.Client: Error During Test at /home/vagrant/.julia/v0.7/HTTP/test/client.jl:23
  Test threw an exception of type HTTP.ConnectError
  Expression: HTTP.status(HTTP.head("$(sch)://httpbin.org/ip")) == 200
  HTTP.ConnectError:
  Exception: ErrorException("pointer_from_objref cannot be used on immutable objects")
  
  Stacktrace:
   [1] error at ./error.jl:33 [inlined]
   [2] pointer_from_objref at ./pointer.jl:142 [inlined]
   [3] dbg! at /home/vagrant/.julia/v0.7/MbedTLS/src/ssl.jl:127 [inlined]
   [4] Type at /home/vagrant/.julia/v0.7/MbedTLS/src/MbedTLS.jl:106 [inlined]
   [5] initTLS!(::Type{HTTP.https}, ::String, ::HTTP.RequestOptions, ::TCPSocket) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:144
   [6] macro expansion at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:196 [inlined]
   [7] macro expansion at /home/vagrant/.julia/v0.7/HTTP/src/utils.jl:198 [inlined]
   [8] connect(::HTTP.Client, ::Type, ::String, ::String, ::HTTP.RequestOptions, ::Bool) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:159
   [9] connectandsend(::HTTP.Client, ::Type{HTTP.https}, ::String, ::String, ::Request, ::HTTP.RequestOptions, ::Bool) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:231
   [10] macro expansion at /home/vagrant/.julia/v0.7/HTTP/src/utils.jl:33 [inlined]
   [11] request(::HTTP.Client, ::Request, ::HTTP.RequestOptions, ::Bool, ::Array{Response,1}, ::Int64, ::Bool) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:326
   [12] #request#43(::HTTP.RequestOptions, ::Bool, ::Array{Response,1}, ::Int64, ::Bool, ::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::HTTP.Client, ::Request) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:363
   [13] #request at ./<missing>:0 [inlined]
   [14] #request#44(::Dict{String,String}, ::FIFOBuffer, ::Bool, ::Bool, ::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::HTTP.Client, ::HTTP.Method, ::HTTP.URIs.URI) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:377
   [15] (::getfield(HTTP, Symbol("#kw##request")))(::NamedTuple{(:verbose,),Tuple{Bool}}, ::typeof(HTTP.request), ::HTTP.Client, ::HTTP.Method, ::HTTP.URIs.URI) at ./<missing>:0
   [16] #head#65(::Bool, ::String, ::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::String) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:511
   [17] head(::String) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:511
   [18] macro expansion at /home/vagrant/.julia/v0.7/HTTP/test/client.jl:23 [inlined]
   [19] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:980 [inlined]
   [20] top-level scope at /home/vagrant/.julia/v0.7/HTTP/test/client.jl:3
   [21] include at ./boot.jl:295 [inlined]
   [22] include_relative(::Module, ::String) at ./loading.jl:521
   [23] include(::Module, ::String) at ./sysimg.jl:26
   [24] include(::String) at ./sysimg.jl:65
   [25] macro expansion at /home/vagrant/.julia/v0.7/HTTP/test/runtests.jl:27 [inlined]
   [26] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:980 [inlined]
   [27] top-level scope at /home/vagrant/.julia/v0.7/HTTP/test/runtests.jl:19
   [28] include at ./boot.jl:295 [inlined]
   [29] include_relative(::Module, ::String) at ./loading.jl:521
   [30] include(::Module, ::String) at ./sysimg.jl:26
   [31] process_options(::Base.JLOptions) at ./client.jl:323
   [32] _start() at ./client.jl:374
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:203 [inlined]
   [2] macro expansion at /home/vagrant/.julia/v0.7/HTTP/src/utils.jl:198 [inlined]
   [3] connect(::HTTP.Client, ::Type, ::String, ::String, ::HTTP.RequestOptions, ::Bool) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:159
   [4] connectandsend(::HTTP.Client, ::Type{HTTP.https}, ::String, ::String, ::Request, ::HTTP.RequestOptions, ::Bool) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:231
   [5] macro expansion at /home/vagrant/.julia/v0.7/HTTP/src/utils.jl:33 [inlined]
   [6] request(::HTTP.Client, ::Request, ::HTTP.RequestOptions, ::Bool, ::Array{Response,1}, ::Int64, ::Bool) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:326
   [7] #request#43(::HTTP.RequestOptions, ::Bool, ::Array{Response,1}, ::Int64, ::Bool, ::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::HTTP.Client, ::Request) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:363
   [8] #request at ./<missing>:0 [inlined]
   [9] #request#44(::Dict{String,String}, ::FIFOBuffer, ::Bool, ::Bool, ::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::HTTP.Client, ::HTTP.Method, ::HTTP.URIs.URI) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:377
   [10] (::getfield(HTTP, Symbol("#kw##request")))(::NamedTuple{(:verbose,),Tuple{Bool}}, ::typeof(HTTP.request), ::HTTP.Client, ::HTTP.Method, ::HTTP.URIs.URI) at ./<missing>:0
   [11] #head#65(::Bool, ::String, ::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::String) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:511
   [12] head(::String) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:511
   [13] macro expansion at /home/vagrant/.julia/v0.7/HTTP/test/client.jl:23 [inlined]
   [14] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:980 [inlined]
   [15] top-level scope at /home/vagrant/.julia/v0.7/HTTP/test/client.jl:3
HTTP.Client: Error During Test at /home/vagrant/.julia/v0.7/HTTP/test/client.jl:24
  Test threw an exception of type HTTP.ConnectError
  Expression: HTTP.status(HTTP.options("$(sch)://httpbin.org/ip")) == 200
  HTTP.ConnectError:
  Exception: ErrorException("pointer_from_objref cannot be used on immutable objects")
  
  Stacktrace:
   [1] error at ./error.jl:33 [inlined]
   [2] pointer_from_objref at ./pointer.jl:142 [inlined]
   [3] dbg! at /home/vagrant/.julia/v0.7/MbedTLS/src/ssl.jl:127 [inlined]
   [4] Type at /home/vagrant/.julia/v0.7/MbedTLS/src/MbedTLS.jl:106 [inlined]
   [5] initTLS!(::Type{HTTP.https}, ::String, ::HTTP.RequestOptions, ::TCPSocket) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:144
   [6] macro expansion at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:196 [inlined]
   [7] macro expansion at /home/vagrant/.julia/v0.7/HTTP/src/utils.jl:198 [inlined]
   [8] connect(::HTTP.Client, ::Type, ::String, ::String, ::HTTP.RequestOptions, ::Bool) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:159
   [9] connectandsend(::HTTP.Client, ::Type{HTTP.https}, ::String, ::String, ::Request, ::HTTP.RequestOptions, ::Bool) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:231
   [10] macro expansion at /home/vagrant/.julia/v0.7/HTTP/src/utils.jl:33 [inlined]
   [11] request(::HTTP.Client, ::Request, ::HTTP.RequestOptions, ::Bool, ::Array{Response,1}, ::Int64, ::Bool) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:326
   [12] #request#43(::HTTP.RequestOptions, ::Bool, ::Array{Response,1}, ::Int64, ::Bool, ::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::HTTP.Client, ::Request) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:363
   [13] #request at ./<missing>:0 [inlined]
   [14] #request#44(::Dict{String,String}, ::FIFOBuffer, ::Bool, ::Bool, ::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::HTTP.Client, ::HTTP.Method, ::HTTP.URIs.URI) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:377
   [15] (::getfield(HTTP, Symbol("#kw##request")))(::NamedTuple{(:verbose,),Tuple{Bool}}, ::typeof(HTTP.request), ::HTTP.Client, ::HTTP.Method, ::HTTP.URIs.URI) at ./<missing>:0
   [16] #options#73(::Bool, ::String, ::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::String) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:511
   [17] options(::String) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:511
   [18] macro expansion at /home/vagrant/.julia/v0.7/HTTP/test/client.jl:24 [inlined]
   [19] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:980 [inlined]
   [20] top-level scope at /home/vagrant/.julia/v0.7/HTTP/test/client.jl:3
   [21] include at ./boot.jl:295 [inlined]
   [22] include_relative(::Module, ::String) at ./loading.jl:521
   [23] include(::Module, ::String) at ./sysimg.jl:26
   [24] include(::String) at ./sysimg.jl:65
   [25] macro expansion at /home/vagrant/.julia/v0.7/HTTP/test/runtests.jl:27 [inlined]
   [26] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:980 [inlined]
   [27] top-level scope at /home/vagrant/.julia/v0.7/HTTP/test/runtests.jl:19
   [28] include at ./boot.jl:295 [inlined]
   [29] include_relative(::Module, ::String) at ./loading.jl:521
   [30] include(::Module, ::String) at ./sysimg.jl:26
   [31] process_options(::Base.JLOptions) at ./client.jl:323
   [32] _start() at ./client.jl:374
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:203 [inlined]
   [2] macro expansion at /home/vagrant/.julia/v0.7/HTTP/src/utils.jl:198 [inlined]
   [3] connect(::HTTP.Client, ::Type, ::String, ::String, ::HTTP.RequestOptions, ::Bool) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:159
   [4] connectandsend(::HTTP.Client, ::Type{HTTP.https}, ::String, ::String, ::Request, ::HTTP.RequestOptions, ::Bool) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:231
   [5] macro expansion at /home/vagrant/.julia/v0.7/HTTP/src/utils.jl:33 [inlined]
   [6] request(::HTTP.Client, ::Request, ::HTTP.RequestOptions, ::Bool, ::Array{Response,1}, ::Int64, ::Bool) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:326
   [7] #request#43(::HTTP.RequestOptions, ::Bool, ::Array{Response,1}, ::Int64, ::Bool, ::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::HTTP.Client, ::Request) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:363
   [8] #request at ./<missing>:0 [inlined]
   [9] #request#44(::Dict{String,String}, ::FIFOBuffer, ::Bool, ::Bool, ::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::HTTP.Client, ::HTTP.Method, ::HTTP.URIs.URI) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:377
   [10] (::getfield(HTTP, Symbol("#kw##request")))(::NamedTuple{(:verbose,),Tuple{Bool}}, ::typeof(HTTP.request), ::HTTP.Client, ::HTTP.Method, ::HTTP.URIs.URI) at ./<missing>:0
   [11] #options#73(::Bool, ::String, ::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::String) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:511
   [12] options(::String) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:511
   [13] macro expansion at /home/vagrant/.julia/v0.7/HTTP/test/client.jl:24 [inlined]
   [14] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:980 [inlined]
   [15] top-level scope at /home/vagrant/.julia/v0.7/HTTP/test/client.jl:3
HTTP.Client: Error During Test at /home/vagrant/.julia/v0.7/HTTP/test/client.jl:25
  Test threw an exception of type HTTP.ConnectError
  Expression: HTTP.status(HTTP.post("$(sch)://httpbin.org/ip"; statusraise=false)) == 405
  HTTP.ConnectError:
  Exception: ErrorException("pointer_from_objref cannot be used on immutable objects")
  
  Stacktrace:
   [1] error at ./error.jl:33 [inlined]
   [2] pointer_from_objref at ./pointer.jl:142 [inlined]
   [3] dbg! at /home/vagrant/.julia/v0.7/MbedTLS/src/ssl.jl:127 [inlined]
   [4] Type at /home/vagrant/.julia/v0.7/MbedTLS/src/MbedTLS.jl:106 [inlined]
   [5] initTLS!(::Type{HTTP.https}, ::String, ::HTTP.RequestOptions, ::TCPSocket) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:144
   [6] macro expansion at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:196 [inlined]
   [7] macro expansion at /home/vagrant/.julia/v0.7/HTTP/src/utils.jl:198 [inlined]
   [8] connect(::HTTP.Client, ::Type, ::String, ::String, ::HTTP.RequestOptions, ::Bool) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:159
   [9] connectandsend(::HTTP.Client, ::Type{HTTP.https}, ::String, ::String, ::Request, ::HTTP.RequestOptions, ::Bool) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:231
   [10] macro expansion at /home/vagrant/.julia/v0.7/HTTP/src/utils.jl:33 [inlined]
   [11] request(::HTTP.Client, ::Request, ::HTTP.RequestOptions, ::Bool, ::Array{Response,1}, ::Int64, ::Bool) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:326
   [12] #request#43(::HTTP.RequestOptions, ::Bool, ::Array{Response,1}, ::Int64, ::Bool, ::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::HTTP.Client, ::Request) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:363
   [13] #request at ./<missing>:0 [inlined]
   [14] #request#44(::Dict{String,String}, ::FIFOBuffer, ::Bool, ::Bool, ::Base.Iterators.IndexValue{Symbol,Bool,Tuple{Symbol},NamedTuple{(:statusraise,),Tuple{Bool}}}, ::Function, ::HTTP.Client, ::HTTP.Method, ::HTTP.URIs.URI) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:377
   [15] (::getfield(HTTP, Symbol("#kw##request")))(::NamedTuple{(:verbose, :statusraise),Tuple{Bool,Bool}}, ::typeof(HTTP.request), ::HTTP.Client, ::HTTP.Method, ::HTTP.URIs.URI) at ./<missing>:0
   [16] #post#53(::Bool, ::String, ::Base.Iterators.IndexValue{Symbol,Bool,Tuple{Symbol},NamedTuple{(:statusraise,),Tuple{Bool}}}, ::Function, ::String) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:511
   [17] (::getfield(HTTP, Symbol("#kw##post")))(::NamedTuple{(:statusraise,),Tuple{Bool}}, ::typeof(HTTP.post), ::String) at ./<missing>:0
   [18] macro expansion at /home/vagrant/.julia/v0.7/HTTP/test/client.jl:25 [inlined]
   [19] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:980 [inlined]
   [20] top-level scope at /home/vagrant/.julia/v0.7/HTTP/test/client.jl:3
   [21] include at ./boot.jl:295 [inlined]
   [22] include_relative(::Module, ::String) at ./loading.jl:521
   [23] include(::Module, ::String) at ./sysimg.jl:26
   [24] include(::String) at ./sysimg.jl:65
   [25] macro expansion at /home/vagrant/.julia/v0.7/HTTP/test/runtests.jl:27 [inlined]
   [26] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:980 [inlined]
   [27] top-level scope at /home/vagrant/.julia/v0.7/HTTP/test/runtests.jl:19
   [28] include at ./boot.jl:295 [inlined]
   [29] include_relative(::Module, ::String) at ./loading.jl:521
   [30] include(::Module, ::String) at ./sysimg.jl:26
   [31] process_options(::Base.JLOptions) at ./client.jl:323
   [32] _start() at ./client.jl:374
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:203 [inlined]
   [2] macro expansion at /home/vagrant/.julia/v0.7/HTTP/src/utils.jl:198 [inlined]
   [3] connect(::HTTP.Client, ::Type, ::String, ::String, ::HTTP.RequestOptions, ::Bool) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:159
   [4] connectandsend(::HTTP.Client, ::Type{HTTP.https}, ::String, ::String, ::Request, ::HTTP.RequestOptions, ::Bool) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:231
   [5] macro expansion at /home/vagrant/.julia/v0.7/HTTP/src/utils.jl:33 [inlined]
   [6] request(::HTTP.Client, ::Request, ::HTTP.RequestOptions, ::Bool, ::Array{Response,1}, ::Int64, ::Bool) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:326
   [7] #request#43(::HTTP.RequestOptions, ::Bool, ::Array{Response,1}, ::Int64, ::Bool, ::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::HTTP.Client, ::Request) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:363
   [8] #request at ./<missing>:0 [inlined]
   [9] #request#44(::Dict{String,String}, ::FIFOBuffer, ::Bool, ::Bool, ::Base.Iterators.IndexValue{Symbol,Bool,Tuple{Symbol},NamedTuple{(:statusraise,),Tuple{Bool}}}, ::Function, ::HTTP.Client, ::HTTP.Method, ::HTTP.URIs.URI) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:377
   [10] (::getfield(HTTP, Symbol("#kw##request")))(::NamedTuple{(:verbose, :statusraise),Tuple{Bool,Bool}}, ::typeof(HTTP.request), ::HTTP.Client, ::HTTP.Method, ::HTTP.URIs.URI) at ./<missing>:0
   [11] #post#53(::Bool, ::String, ::Base.Iterators.IndexValue{Symbol,Bool,Tuple{Symbol},NamedTuple{(:statusraise,),Tuple{Bool}}}, ::Function, ::String) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:511
   [12] (::getfield(HTTP, Symbol("#kw##post")))(::NamedTuple{(:statusraise,),Tuple{Bool}}, ::typeof(HTTP.post), ::String) at ./<missing>:0
   [13] macro expansion at /home/vagrant/.julia/v0.7/HTTP/test/client.jl:25 [inlined]
   [14] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:980 [inlined]
   [15] top-level scope at /home/vagrant/.julia/v0.7/HTTP/test/client.jl:3
HTTP.Client: Error During Test at /home/vagrant/.julia/v0.7/HTTP/test/client.jl:26
  Test threw an exception of type HTTP.ConnectError
  Expression: HTTP.status(HTTP.post("$(sch)://httpbin.org/post")) == 200
  HTTP.ConnectError:
  Exception: ErrorException("pointer_from_objref cannot be used on immutable objects")
  
  Stacktrace:
   [1] error at ./error.jl:33 [inlined]
   [2] pointer_from_objref at ./pointer.jl:142 [inlined]
   [3] dbg! at /home/vagrant/.julia/v0.7/MbedTLS/src/ssl.jl:127 [inlined]
   [4] Type at /home/vagrant/.julia/v0.7/MbedTLS/src/MbedTLS.jl:106 [inlined]
   [5] initTLS!(::Type{HTTP.https}, ::String, ::HTTP.RequestOptions, ::TCPSocket) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:144
   [6] macro expansion at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:196 [inlined]
   [7] macro expansion at /home/vagrant/.julia/v0.7/HTTP/src/utils.jl:198 [inlined]
   [8] connect(::HTTP.Client, ::Type, ::String, ::String, ::HTTP.RequestOptions, ::Bool) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:159
   [9] connectandsend(::HTTP.Client, ::Type{HTTP.https}, ::String, ::String, ::Request, ::HTTP.RequestOptions, ::Bool) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:231
   [10] macro expansion at /home/vagrant/.julia/v0.7/HTTP/src/utils.jl:33 [inlined]
   [11] request(::HTTP.Client, ::Request, ::HTTP.RequestOptions, ::Bool, ::Array{Response,1}, ::Int64, ::Bool) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:326
   [12] #request#43(::HTTP.RequestOptions, ::Bool, ::Array{Response,1}, ::Int64, ::Bool, ::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::HTTP.Client, ::Request) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:363
   [13] #request at ./<missing>:0 [inlined]
   [14] #request#44(::Dict{String,String}, ::FIFOBuffer, ::Bool, ::Bool, ::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::HTTP.Client, ::HTTP.Method, ::HTTP.URIs.URI) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:377
   [15] (::getfield(HTTP, Symbol("#kw##request")))(::NamedTuple{(:verbose,),Tuple{Bool}}, ::typeof(HTTP.request), ::HTTP.Client, ::HTTP.Method, ::HTTP.URIs.URI) at ./<missing>:0
   [16] #post#53(::Bool, ::String, ::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::String) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:511
   [17] post(::String) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:511
   [18] macro expansion at /home/vagrant/.julia/v0.7/HTTP/test/client.jl:26 [inlined]
   [19] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:980 [inlined]
   [20] top-level scope at /home/vagrant/.julia/v0.7/HTTP/test/client.jl:3
   [21] include at ./boot.jl:295 [inlined]
   [22] include_relative(::Module, ::String) at ./loading.jl:521
   [23] include(::Module, ::String) at ./sysimg.jl:26
   [24] include(::String) at ./sysimg.jl:65
   [25] macro expansion at /home/vagrant/.julia/v0.7/HTTP/test/runtests.jl:27 [inlined]
   [26] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:980 [inlined]
   [27] top-level scope at /home/vagrant/.julia/v0.7/HTTP/test/runtests.jl:19
   [28] include at ./boot.jl:295 [inlined]
   [29] include_relative(::Module, ::String) at ./loading.jl:521
   [30] include(::Module, ::String) at ./sysimg.jl:26
   [31] process_options(::Base.JLOptions) at ./client.jl:323
   [32] _start() at ./client.jl:374
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:203 [inlined]
   [2] macro expansion at /home/vagrant/.julia/v0.7/HTTP/src/utils.jl:198 [inlined]
   [3] connect(::HTTP.Client, ::Type, ::String, ::String, ::HTTP.RequestOptions, ::Bool) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:159
   [4] connectandsend(::HTTP.Client, ::Type{HTTP.https}, ::String, ::String, ::Request, ::HTTP.RequestOptions, ::Bool) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:231
   [5] macro expansion at /home/vagrant/.julia/v0.7/HTTP/src/utils.jl:33 [inlined]
   [6] request(::HTTP.Client, ::Request, ::HTTP.RequestOptions, ::Bool, ::Array{Response,1}, ::Int64, ::Bool) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:326
   [7] #request#43(::HTTP.RequestOptions, ::Bool, ::Array{Response,1}, ::Int64, ::Bool, ::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::HTTP.Client, ::Request) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:363
   [8] #request at ./<missing>:0 [inlined]
   [9] #request#44(::Dict{String,String}, ::FIFOBuffer, ::Bool, ::Bool, ::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::HTTP.Client, ::HTTP.Method, ::HTTP.URIs.URI) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:377
   [10] (::getfield(HTTP, Symbol("#kw##request")))(::NamedTuple{(:verbose,),Tuple{Bool}}, ::typeof(HTTP.request), ::HTTP.Client, ::HTTP.Method, ::HTTP.URIs.URI) at ./<missing>:0
   [11] #post#53(::Bool, ::String, ::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::String) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:511
   [12] post(::String) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:511
   [13] macro expansion at /home/vagrant/.julia/v0.7/HTTP/test/client.jl:26 [inlined]
   [14] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:980 [inlined]
   [15] top-level scope at /home/vagrant/.julia/v0.7/HTTP/test/client.jl:3
HTTP.Client: Error During Test at /home/vagrant/.julia/v0.7/HTTP/test/client.jl:27
  Test threw an exception of type HTTP.ConnectError
  Expression: HTTP.status(HTTP.put("$(sch)://httpbin.org/put")) == 200
  HTTP.ConnectError:
  Exception: ErrorException("pointer_from_objref cannot be used on immutable objects")
  
  Stacktrace:
   [1] error at ./error.jl:33 [inlined]
   [2] pointer_from_objref at ./pointer.jl:142 [inlined]
   [3] dbg! at /home/vagrant/.julia/v0.7/MbedTLS/src/ssl.jl:127 [inlined]
   [4] Type at /home/vagrant/.julia/v0.7/MbedTLS/src/MbedTLS.jl:106 [inlined]
   [5] initTLS!(::Type{HTTP.https}, ::String, ::HTTP.RequestOptions, ::TCPSocket) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:144
   [6] macro expansion at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:196 [inlined]
   [7] macro expansion at /home/vagrant/.julia/v0.7/HTTP/src/utils.jl:198 [inlined]
   [8] connect(::HTTP.Client, ::Type, ::String, ::String, ::HTTP.RequestOptions, ::Bool) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:159
   [9] connectandsend(::HTTP.Client, ::Type{HTTP.https}, ::String, ::String, ::Request, ::HTTP.RequestOptions, ::Bool) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:231
   [10] macro expansion at /home/vagrant/.julia/v0.7/HTTP/src/utils.jl:33 [inlined]
   [11] request(::HTTP.Client, ::Request, ::HTTP.RequestOptions, ::Bool, ::Array{Response,1}, ::Int64, ::Bool) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:326
   [12] #request#43(::HTTP.RequestOptions, ::Bool, ::Array{Response,1}, ::Int64, ::Bool, ::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::HTTP.Client, ::Request) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:363
   [13] #request at ./<missing>:0 [inlined]
   [14] #request#44(::Dict{String,String}, ::FIFOBuffer, ::Bool, ::Bool, ::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::HTTP.Client, ::HTTP.Method, ::HTTP.URIs.URI) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:377
   [15] (::getfield(HTTP, Symbol("#kw##request")))(::NamedTuple{(:verbose,),Tuple{Bool}}, ::typeof(HTTP.request), ::HTTP.Client, ::HTTP.Method, ::HTTP.URIs.URI) at ./<missing>:0
   [16] #put#57(::Bool, ::String, ::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::String) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:511
   [17] put(::String) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:511
   [18] macro expansion at /home/vagrant/.julia/v0.7/HTTP/test/client.jl:27 [inlined]
   [19] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:980 [inlined]
   [20] top-level scope at /home/vagrant/.julia/v0.7/HTTP/test/client.jl:3
   [21] include at ./boot.jl:295 [inlined]
   [22] include_relative(::Module, ::String) at ./loading.jl:521
   [23] include(::Module, ::String) at ./sysimg.jl:26
   [24] include(::String) at ./sysimg.jl:65
   [25] macro expansion at /home/vagrant/.julia/v0.7/HTTP/test/runtests.jl:27 [inlined]
   [26] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:980 [inlined]
   [27] top-level scope at /home/vagrant/.julia/v0.7/HTTP/test/runtests.jl:19
   [28] include at ./boot.jl:295 [inlined]
   [29] include_relative(::Module, ::String) at ./loading.jl:521
   [30] include(::Module, ::String) at ./sysimg.jl:26
   [31] process_options(::Base.JLOptions) at ./client.jl:323
   [32] _start() at ./client.jl:374
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:203 [inlined]
   [2] macro expansion at /home/vagrant/.julia/v0.7/HTTP/src/utils.jl:198 [inlined]
   [3] connect(::HTTP.Client, ::Type, ::String, ::String, ::HTTP.RequestOptions, ::Bool) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:159
   [4] connectandsend(::HTTP.Client, ::Type{HTTP.https}, ::String, ::String, ::Request, ::HTTP.RequestOptions, ::Bool) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:231
   [5] macro expansion at /home/vagrant/.julia/v0.7/HTTP/src/utils.jl:33 [inlined]
   [6] request(::HTTP.Client, ::Request, ::HTTP.RequestOptions, ::Bool, ::Array{Response,1}, ::Int64, ::Bool) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:326
   [7] #request#43(::HTTP.RequestOptions, ::Bool, ::Array{Response,1}, ::Int64, ::Bool, ::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::HTTP.Client, ::Request) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:363
   [8] #request at ./<missing>:0 [inlined]
   [9] #request#44(::Dict{String,String}, ::FIFOBuffer, ::Bool, ::Bool, ::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::HTTP.Client, ::HTTP.Method, ::HTTP.URIs.URI) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:377
   [10] (::getfield(HTTP, Symbol("#kw##request")))(::NamedTuple{(:verbose,),Tuple{Bool}}, ::typeof(HTTP.request), ::HTTP.Client, ::HTTP.Method, ::HTTP.URIs.URI) at ./<missing>:0
   [11] #put#57(::Bool, ::String, ::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::String) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:511
   [12] put(::String) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:511
   [13] macro expansion at /home/vagrant/.julia/v0.7/HTTP/test/client.jl:27 [inlined]
   [14] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:980 [inlined]
   [15] top-level scope at /home/vagrant/.julia/v0.7/HTTP/test/client.jl:3
HTTP.Client: Error During Test at /home/vagrant/.julia/v0.7/HTTP/test/client.jl:28
  Test threw an exception of type HTTP.ConnectError
  Expression: HTTP.status(HTTP.delete("$(sch)://httpbin.org/delete")) == 200
  HTTP.ConnectError:
  Exception: ErrorException("pointer_from_objref cannot be used on immutable objects")
  
  Stacktrace:
   [1] error at ./error.jl:33 [inlined]
   [2] pointer_from_objref at ./pointer.jl:142 [inlined]
   [3] dbg! at /home/vagrant/.julia/v0.7/MbedTLS/src/ssl.jl:127 [inlined]
   [4] Type at /home/vagrant/.julia/v0.7/MbedTLS/src/MbedTLS.jl:106 [inlined]
   [5] initTLS!(::Type{HTTP.https}, ::String, ::HTTP.RequestOptions, ::TCPSocket) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:144
   [6] macro expansion at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:196 [inlined]
   [7] macro expansion at /home/vagrant/.julia/v0.7/HTTP/src/utils.jl:198 [inlined]
   [8] connect(::HTTP.Client, ::Type, ::String, ::String, ::HTTP.RequestOptions, ::Bool) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:159
   [9] connectandsend(::HTTP.Client, ::Type{HTTP.https}, ::String, ::String, ::Request, ::HTTP.RequestOptions, ::Bool) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:231
   [10] macro expansion at /home/vagrant/.julia/v0.7/HTTP/src/utils.jl:33 [inlined]
   [11] request(::HTTP.Client, ::Request, ::HTTP.RequestOptions, ::Bool, ::Array{Response,1}, ::Int64, ::Bool) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:326
   [12] #request#43(::HTTP.RequestOptions, ::Bool, ::Array{Response,1}, ::Int64, ::Bool, ::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::HTTP.Client, ::Request) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:363
   [13] #request at ./<missing>:0 [inlined]
   [14] #request#44(::Dict{String,String}, ::FIFOBuffer, ::Bool, ::Bool, ::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::HTTP.Client, ::HTTP.Method, ::HTTP.URIs.URI) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:377
   [15] (::getfield(HTTP, Symbol("#kw##request")))(::NamedTuple{(:verbose,),Tuple{Bool}}, ::typeof(HTTP.request), ::HTTP.Client, ::HTTP.Method, ::HTTP.URIs.URI) at ./<missing>:0
   [16] #delete#61(::Bool, ::String, ::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::String) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:511
   [17] delete(::String) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:511
   [18] macro expansion at /home/vagrant/.julia/v0.7/HTTP/test/client.jl:28 [inlined]
   [19] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:980 [inlined]
   [20] top-level scope at /home/vagrant/.julia/v0.7/HTTP/test/client.jl:3
   [21] include at ./boot.jl:295 [inlined]
   [22] include_relative(::Module, ::String) at ./loading.jl:521
   [23] include(::Module, ::String) at ./sysimg.jl:26
   [24] include(::String) at ./sysimg.jl:65
   [25] macro expansion at /home/vagrant/.julia/v0.7/HTTP/test/runtests.jl:27 [inlined]
   [26] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:980 [inlined]
   [27] top-level scope at /home/vagrant/.julia/v0.7/HTTP/test/runtests.jl:19
   [28] include at ./boot.jl:295 [inlined]
   [29] include_relative(::Module, ::String) at ./loading.jl:521
   [30] include(::Module, ::String) at ./sysimg.jl:26
   [31] process_options(::Base.JLOptions) at ./client.jl:323
   [32] _start() at ./client.jl:374
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:203 [inlined]
   [2] macro expansion at /home/vagrant/.julia/v0.7/HTTP/src/utils.jl:198 [inlined]
   [3] connect(::HTTP.Client, ::Type, ::String, ::String, ::HTTP.RequestOptions, ::Bool) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:159
   [4] connectandsend(::HTTP.Client, ::Type{HTTP.https}, ::String, ::String, ::Request, ::HTTP.RequestOptions, ::Bool) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:231
   [5] macro expansion at /home/vagrant/.julia/v0.7/HTTP/src/utils.jl:33 [inlined]
   [6] request(::HTTP.Client, ::Request, ::HTTP.RequestOptions, ::Bool, ::Array{Response,1}, ::Int64, ::Bool) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:326
   [7] #request#43(::HTTP.RequestOptions, ::Bool, ::Array{Response,1}, ::Int64, ::Bool, ::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::HTTP.Client, ::Request) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:363
   [8] #request at ./<missing>:0 [inlined]
   [9] #request#44(::Dict{String,String}, ::FIFOBuffer, ::Bool, ::Bool, ::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::HTTP.Client, ::HTTP.Method, ::HTTP.URIs.URI) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:377
   [10] (::getfield(HTTP, Symbol("#kw##request")))(::NamedTuple{(:verbose,),Tuple{Bool}}, ::typeof(HTTP.request), ::HTTP.Client, ::HTTP.Method, ::HTTP.URIs.URI) at ./<missing>:0
   [11] #delete#61(::Bool, ::String, ::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::String) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:511
   [12] delete(::String) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:511
   [13] macro expansion at /home/vagrant/.julia/v0.7/HTTP/test/client.jl:28 [inlined]
   [14] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:980 [inlined]
   [15] top-level scope at /home/vagrant/.julia/v0.7/HTTP/test/client.jl:3
HTTP.Client: Error During Test at /home/vagrant/.julia/v0.7/HTTP/test/client.jl:29
  Test threw an exception of type HTTP.ConnectError
  Expression: HTTP.status(HTTP.patch("$(sch)://httpbin.org/patch")) == 200
  HTTP.ConnectError:
  Exception: ErrorException("pointer_from_objref cannot be used on immutable objects")
  
  Stacktrace:
   [1] error at ./error.jl:33 [inlined]
   [2] pointer_from_objref at ./pointer.jl:142 [inlined]
   [3] dbg! at /home/vagrant/.julia/v0.7/MbedTLS/src/ssl.jl:127 [inlined]
   [4] Type at /home/vagrant/.julia/v0.7/MbedTLS/src/MbedTLS.jl:106 [inlined]
   [5] initTLS!(::Type{HTTP.https}, ::String, ::HTTP.RequestOptions, ::TCPSocket) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:144
   [6] macro expansion at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:196 [inlined]
   [7] macro expansion at /home/vagrant/.julia/v0.7/HTTP/src/utils.jl:198 [inlined]
   [8] connect(::HTTP.Client, ::Type, ::String, ::String, ::HTTP.RequestOptions, ::Bool) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:159
   [9] connectandsend(::HTTP.Client, ::Type{HTTP.https}, ::String, ::String, ::Request, ::HTTP.RequestOptions, ::Bool) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:231
   [10] macro expansion at /home/vagrant/.julia/v0.7/HTTP/src/utils.jl:33 [inlined]
   [11] request(::HTTP.Client, ::Request, ::HTTP.RequestOptions, ::Bool, ::Array{Response,1}, ::Int64, ::Bool) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:326
   [12] #request#43(::HTTP.RequestOptions, ::Bool, ::Array{Response,1}, ::Int64, ::Bool, ::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::HTTP.Client, ::Request) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:363
   [13] #request at ./<missing>:0 [inlined]
   [14] #request#44(::Dict{String,String}, ::FIFOBuffer, ::Bool, ::Bool, ::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::HTTP.Client, ::HTTP.Method, ::HTTP.URIs.URI) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:377
   [15] (::getfield(HTTP, Symbol("#kw##request")))(::NamedTuple{(:verbose,),Tuple{Bool}}, ::typeof(HTTP.request), ::HTTP.Client, ::HTTP.Method, ::HTTP.URIs.URI) at ./<missing>:0
   [16] #patch#77(::Bool, ::String, ::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::String) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:511
   [17] patch(::String) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:511
   [18] macro expansion at /home/vagrant/.julia/v0.7/HTTP/test/client.jl:29 [inlined]
   [19] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:980 [inlined]
   [20] top-level scope at /home/vagrant/.julia/v0.7/HTTP/test/client.jl:3
   [21] include at ./boot.jl:295 [inlined]
   [22] include_relative(::Module, ::String) at ./loading.jl:521
   [23] include(::Module, ::String) at ./sysimg.jl:26
   [24] include(::String) at ./sysimg.jl:65
   [25] macro expansion at /home/vagrant/.julia/v0.7/HTTP/test/runtests.jl:27 [inlined]
   [26] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:980 [inlined]
   [27] top-level scope at /home/vagrant/.julia/v0.7/HTTP/test/runtests.jl:19
   [28] include at ./boot.jl:295 [inlined]
   [29] include_relative(::Module, ::String) at ./loading.jl:521
   [30] include(::Module, ::String) at ./sysimg.jl:26
   [31] process_options(::Base.JLOptions) at ./client.jl:323
   [32] _start() at ./client.jl:374
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:203 [inlined]
   [2] macro expansion at /home/vagrant/.julia/v0.7/HTTP/src/utils.jl:198 [inlined]
   [3] connect(::HTTP.Client, ::Type, ::String, ::String, ::HTTP.RequestOptions, ::Bool) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:159
   [4] connectandsend(::HTTP.Client, ::Type{HTTP.https}, ::String, ::String, ::Request, ::HTTP.RequestOptions, ::Bool) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:231
   [5] macro expansion at /home/vagrant/.julia/v0.7/HTTP/src/utils.jl:33 [inlined]
   [6] request(::HTTP.Client, ::Request, ::HTTP.RequestOptions, ::Bool, ::Array{Response,1}, ::Int64, ::Bool) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:326
   [7] #request#43(::HTTP.RequestOptions, ::Bool, ::Array{Response,1}, ::Int64, ::Bool, ::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::HTTP.Client, ::Request) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:363
   [8] #request at ./<missing>:0 [inlined]
   [9] #request#44(::Dict{String,String}, ::FIFOBuffer, ::Bool, ::Bool, ::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::HTTP.Client, ::HTTP.Method, ::HTTP.URIs.URI) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:377
   [10] (::getfield(HTTP, Symbol("#kw##request")))(::NamedTuple{(:verbose,),Tuple{Bool}}, ::typeof(HTTP.request), ::HTTP.Client, ::HTTP.Method, ::HTTP.URIs.URI) at ./<missing>:0
   [11] #patch#77(::Bool, ::String, ::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::String) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:511
   [12] patch(::String) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:511
   [13] macro expansion at /home/vagrant/.julia/v0.7/HTTP/test/client.jl:29 [inlined]
   [14] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:980 [inlined]
   [15] top-level scope at /home/vagrant/.julia/v0.7/HTTP/test/client.jl:3
async client request
HTTP.Client: Error During Test at /home/vagrant/.julia/v0.7/HTTP/test/client.jl:33
  Test threw an exception of type HTTP.ConnectError
  Expression: HTTP.status(wait(#= /home/vagrant/.julia/v0.7/HTTP/test/client.jl:33 =# @schedule(HTTP.get("$(sch)://httpbin.org/ip")))) == 200
  HTTP.ConnectError:
  Exception: ErrorException("pointer_from_objref cannot be used on immutable objects")
  
  Stacktrace:
   [1] error at ./error.jl:33 [inlined]
   [2] pointer_from_objref at ./pointer.jl:142 [inlined]
   [3] dbg! at /home/vagrant/.julia/v0.7/MbedTLS/src/ssl.jl:127 [inlined]
   [4] Type at /home/vagrant/.julia/v0.7/MbedTLS/src/MbedTLS.jl:106 [inlined]
   [5] initTLS!(::Type{HTTP.https}, ::String, ::HTTP.RequestOptions, ::TCPSocket) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:144
   [6] macro expansion at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:196 [inlined]
   [7] macro expansion at /home/vagrant/.julia/v0.7/HTTP/src/utils.jl:198 [inlined]
   [8] connect(::HTTP.Client, ::Type, ::String, ::String, ::HTTP.RequestOptions, ::Bool) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:159
   [9] connectandsend(::HTTP.Client, ::Type{HTTP.https}, ::String, ::String, ::Request, ::HTTP.RequestOptions, ::Bool) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:231
   [10] macro expansion at /home/vagrant/.julia/v0.7/HTTP/src/utils.jl:33 [inlined]
   [11] request(::HTTP.Client, ::Request, ::HTTP.RequestOptions, ::Bool, ::Array{Response,1}, ::Int64, ::Bool) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:326
   [12] #request#43(::HTTP.RequestOptions, ::Bool, ::Array{Response,1}, ::Int64, ::Bool, ::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::HTTP.Client, ::Request) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:363
   [13] #request at ./<missing>:0 [inlined]
   [14] #request#44(::Dict{String,String}, ::FIFOBuffer, ::Bool, ::Bool, ::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::HTTP.Client, ::HTTP.Method, ::HTTP.URIs.URI) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:377
   [15] (::getfield(HTTP, Symbol("#kw##request")))(::NamedTuple{(:verbose,),Tuple{Bool}}, ::typeof(HTTP.request), ::HTTP.Client, ::HTTP.Method, ::HTTP.URIs.URI) at ./<missing>:0
   [16] #get#49(::Bool, ::String, ::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::String) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:511
   [17] get(::String) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:511
   [18] (::getfield(, Symbol("##26#35")))() at ./event.jl:92
  Stacktrace:
   [1] try_yieldto(::typeof(Base.ensure_rescheduled), ::Base.RefValue{Task}) at ./event.jl:208
   [2] wait() at ./event.jl:267
   [3] wait(::Condition) at ./event.jl:46
   [4] wait(::Task) at ./task.jl:181
   [5] macro expansion at /home/vagrant/.julia/v0.7/HTTP/test/client.jl:33 [inlined]
   [6] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:980 [inlined]
   [7] top-level scope at /home/vagrant/.julia/v0.7/HTTP/test/client.jl:3
HTTP.Client: Error During Test at /home/vagrant/.julia/v0.7/HTTP/test/client.jl:35
  Test threw an exception of type HTTP.ConnectError
  Expression: HTTP.status(HTTP.get("$(sch)://httpbin.org/encoding/utf8")) == 200
  HTTP.ConnectError:
  Exception: ErrorException("pointer_from_objref cannot be used on immutable objects")
  
  Stacktrace:
   [1] error at ./error.jl:33 [inlined]
   [2] pointer_from_objref at ./pointer.jl:142 [inlined]
   [3] dbg! at /home/vagrant/.julia/v0.7/MbedTLS/src/ssl.jl:127 [inlined]
   [4] Type at /home/vagrant/.julia/v0.7/MbedTLS/src/MbedTLS.jl:106 [inlined]
   [5] initTLS!(::Type{HTTP.https}, ::String, ::HTTP.RequestOptions, ::TCPSocket) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:144
   [6] macro expansion at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:196 [inlined]
   [7] macro expansion at /home/vagrant/.julia/v0.7/HTTP/src/utils.jl:198 [inlined]
   [8] connect(::HTTP.Client, ::Type, ::String, ::String, ::HTTP.RequestOptions, ::Bool) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:159
   [9] connectandsend(::HTTP.Client, ::Type{HTTP.https}, ::String, ::String, ::Request, ::HTTP.RequestOptions, ::Bool) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:231
   [10] macro expansion at /home/vagrant/.julia/v0.7/HTTP/src/utils.jl:33 [inlined]
   [11] request(::HTTP.Client, ::Request, ::HTTP.RequestOptions, ::Bool, ::Array{Response,1}, ::Int64, ::Bool) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:326
   [12] #request#43(::HTTP.RequestOptions, ::Bool, ::Array{Response,1}, ::Int64, ::Bool, ::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::HTTP.Client, ::Request) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:363
   [13] #request at ./<missing>:0 [inlined]
   [14] #request#44(::Dict{String,String}, ::FIFOBuffer, ::Bool, ::Bool, ::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::HTTP.Client, ::HTTP.Method, ::HTTP.URIs.URI) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:377
   [15] (::getfield(HTTP, Symbol("#kw##request")))(::NamedTuple{(:verbose,),Tuple{Bool}}, ::typeof(HTTP.request), ::HTTP.Client, ::HTTP.Method, ::HTTP.URIs.URI) at ./<missing>:0
   [16] #get#49(::Bool, ::String, ::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::String) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:511
   [17] get(::String) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:511
   [18] macro expansion at /home/vagrant/.julia/v0.7/HTTP/test/client.jl:35 [inlined]
   [19] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:980 [inlined]
   [20] top-level scope at /home/vagrant/.julia/v0.7/HTTP/test/client.jl:3
   [21] include at ./boot.jl:295 [inlined]
   [22] include_relative(::Module, ::String) at ./loading.jl:521
   [23] include(::Module, ::String) at ./sysimg.jl:26
   [24] include(::String) at ./sysimg.jl:65
   [25] macro expansion at /home/vagrant/.julia/v0.7/HTTP/test/runtests.jl:27 [inlined]
   [26] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:980 [inlined]
   [27] top-level scope at /home/vagrant/.julia/v0.7/HTTP/test/runtests.jl:19
   [28] include at ./boot.jl:295 [inlined]
   [29] include_relative(::Module, ::String) at ./loading.jl:521
   [30] include(::Module, ::String) at ./sysimg.jl:26
   [31] process_options(::Base.JLOptions) at ./client.jl:323
   [32] _start() at ./client.jl:374
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:203 [inlined]
   [2] macro expansion at /home/vagrant/.julia/v0.7/HTTP/src/utils.jl:198 [inlined]
   [3] connect(::HTTP.Client, ::Type, ::String, ::String, ::HTTP.RequestOptions, ::Bool) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:159
   [4] connectandsend(::HTTP.Client, ::Type{HTTP.https}, ::String, ::String, ::Request, ::HTTP.RequestOptions, ::Bool) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:231
   [5] macro expansion at /home/vagrant/.julia/v0.7/HTTP/src/utils.jl:33 [inlined]
   [6] request(::HTTP.Client, ::Request, ::HTTP.RequestOptions, ::Bool, ::Array{Response,1}, ::Int64, ::Bool) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:326
   [7] #request#43(::HTTP.RequestOptions, ::Bool, ::Array{Response,1}, ::Int64, ::Bool, ::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::HTTP.Client, ::Request) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:363
   [8] #request at ./<missing>:0 [inlined]
   [9] #request#44(::Dict{String,String}, ::FIFOBuffer, ::Bool, ::Bool, ::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::HTTP.Client, ::HTTP.Method, ::HTTP.URIs.URI) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:377
   [10] (::getfield(HTTP, Symbol("#kw##request")))(::NamedTuple{(:verbose,),Tuple{Bool}}, ::typeof(HTTP.request), ::HTTP.Client, ::HTTP.Method, ::HTTP.URIs.URI) at ./<missing>:0
   [11] #get#49(::Bool, ::String, ::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::String) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:511
   [12] get(::String) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:511
   [13] macro expansion at /home/vagrant/.julia/v0.7/HTTP/test/client.jl:35 [inlined]
   [14] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:980 [inlined]
   [15] top-level scope at /home/vagrant/.julia/v0.7/HTTP/test/client.jl:3
pass query to uri
HTTP.Client: Error During Test at /home/vagrant/.julia/v0.7/HTTP/test/client.jl:1
  Got an exception of type HTTP.ConnectError outside of a @test
  HTTP.ConnectError:
  Exception: ErrorException("pointer_from_objref cannot be used on immutable objects")
  
  Stacktrace:
   [1] error at ./error.jl:33 [inlined]
   [2] pointer_from_objref at ./pointer.jl:142 [inlined]
   [3] dbg! at /home/vagrant/.julia/v0.7/MbedTLS/src/ssl.jl:127 [inlined]
   [4] Type at /home/vagrant/.julia/v0.7/MbedTLS/src/MbedTLS.jl:106 [inlined]
   [5] initTLS!(::Type{HTTP.https}, ::String, ::HTTP.RequestOptions, ::TCPSocket) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:144
   [6] macro expansion at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:196 [inlined]
   [7] macro expansion at /home/vagrant/.julia/v0.7/HTTP/src/utils.jl:198 [inlined]
   [8] connect(::HTTP.Client, ::Type, ::String, ::String, ::HTTP.RequestOptions, ::Bool) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:159
   [9] connectandsend(::HTTP.Client, ::Type{HTTP.https}, ::String, ::String, ::Request, ::HTTP.RequestOptions, ::Bool) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:231
   [10] macro expansion at /home/vagrant/.julia/v0.7/HTTP/src/utils.jl:33 [inlined]
   [11] request(::HTTP.Client, ::Request, ::HTTP.RequestOptions, ::Bool, ::Array{Response,1}, ::Int64, ::Bool) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:326
   [12] #request#43(::HTTP.RequestOptions, ::Bool, ::Array{Response,1}, ::Int64, ::Bool, ::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::HTTP.Client, ::Request) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:363
   [13] #request at ./<missing>:0 [inlined]
   [14] #request#44(::Dict{String,String}, ::FIFOBuffer, ::Bool, ::Bool, ::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::HTTP.Client, ::HTTP.Method, ::HTTP.URIs.URI) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:377
   [15] (::getfield(HTTP, Symbol("#kw##request")))(::NamedTuple{(:verbose,),Tuple{Bool}}, ::typeof(HTTP.request), ::HTTP.Client, ::HTTP.Method, ::HTTP.URIs.URI) at ./<missing>:0
   [16] #get#49(::Bool, ::Dict{String,String}, ::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::String) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:511
   [17] (::getfield(HTTP, Symbol("#kw##get")))(::NamedTuple{(:query,),Tuple{Dict{String,String}}}, ::typeof(HTTP.get), ::String) at ./<missing>:0
   [18] macro expansion at /home/vagrant/.julia/v0.7/HTTP/test/client.jl:38 [inlined]
   [19] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:980 [inlined]
   [20] top-level scope at /home/vagrant/.julia/v0.7/HTTP/test/client.jl:3
   [21] include at ./boot.jl:295 [inlined]
   [22] include_relative(::Module, ::String) at ./loading.jl:521
   [23] include(::Module, ::String) at ./sysimg.jl:26
   [24] include(::String) at ./sysimg.jl:65
   [25] macro expansion at /home/vagrant/.julia/v0.7/HTTP/test/runtests.jl:27 [inlined]
   [26] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:980 [inlined]
   [27] top-level scope at /home/vagrant/.julia/v0.7/HTTP/test/runtests.jl:19
   [28] include at ./boot.jl:295 [inlined]
   [29] include_relative(::Module, ::String) at ./loading.jl:521
   [30] include(::Module, ::String) at ./sysimg.jl:26
   [31] process_options(::Base.JLOptions) at ./client.jl:323
   [32] _start() at ./client.jl:374
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:203 [inlined]
   [2] macro expansion at /home/vagrant/.julia/v0.7/HTTP/src/utils.jl:198 [inlined]
   [3] connect(::HTTP.Client, ::Type, ::String, ::String, ::HTTP.RequestOptions, ::Bool) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:159
   [4] connectandsend(::HTTP.Client, ::Type{HTTP.https}, ::String, ::String, ::Request, ::HTTP.RequestOptions, ::Bool) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:231
   [5] macro expansion at /home/vagrant/.julia/v0.7/HTTP/src/utils.jl:33 [inlined]
   [6] request(::HTTP.Client, ::Request, ::HTTP.RequestOptions, ::Bool, ::Array{Response,1}, ::Int64, ::Bool) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:326
   [7] #request#43(::HTTP.RequestOptions, ::Bool, ::Array{Response,1}, ::Int64, ::Bool, ::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::HTTP.Client, ::Request) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:363
   [8] #request at ./<missing>:0 [inlined]
   [9] #request#44(::Dict{String,String}, ::FIFOBuffer, ::Bool, ::Bool, ::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::HTTP.Client, ::HTTP.Method, ::HTTP.URIs.URI) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:377
   [10] (::getfield(HTTP, Symbol("#kw##request")))(::NamedTuple{(:verbose,),Tuple{Bool}}, ::typeof(HTTP.request), ::HTTP.Client, ::HTTP.Method, ::HTTP.URIs.URI) at ./<missing>:0
   [11] #get#49(::Bool, ::Dict{String,String}, ::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::String) at /home/vagrant/.julia/v0.7/HTTP/src/client.jl:511
   [12] (::getfield(HTTP, Symbol("#kw##get")))(::NamedTuple{(:query,),Tuple{Dict{String,String}}}, ::typeof(HTTP.get), ::String) at ./<missing>:0
   [13] macro expansion at /home/vagrant/.julia/v0.7/HTTP/test/client.jl:38 [inlined]
   [14] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:980 [inlined]
   [15] top-level scope at /home/vagrant/.julia/v0.7/HTTP/test/client.jl:3
   [16] include at ./boot.jl:295 [inlined]
   [17] include_relative(::Module, ::String) at ./loading.jl:521
   [18] include(::Module, ::String) at ./sysimg.jl:26
   [19] include(::String) at ./sysimg.jl:65
   [20] macro expansion at /home/vagrant/.julia/v0.7/HTTP/test/runtests.jl:27 [inlined]
   [21] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:980 [inlined]
   [22] top-level scope at /home/vagrant/.julia/v0.7/HTTP/test/runtests.jl:19
   [23] include at ./boot.jl:295 [inlined]
   [24] include_relative(::Module, ::String) at ./loading.jl:521
   [25] include(::Module, ::String) at ./sysimg.jl:26
   [26] process_options(::Base.JLOptions) at ./client.jl:323
   [27] _start() at ./client.jl:374
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/HTTP/test/server.jl:1
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/HTTP/test/server.jl:1
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/HTTP/test/server.jl:1
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/HTTP/test/server.jl:1
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/HTTP/test/server.jl:1
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/HTTP/test/server.jl:1
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/HTTP/test/server.jl:1
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/HTTP/test/server.jl:1
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/HTTP/test/server.jl:1
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/HTTP/test/server.jl:1
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/HTTP/test/server.jl:1
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/HTTP/test/server.jl:1
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/HTTP/test/server.jl:1
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/HTTP/test/server.jl:1
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/HTTP/test/server.jl:1
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/HTTP/test/server.jl:1
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/HTTP/test/server.jl:1
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/HTTP/test/server.jl:1
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/HTTP/test/server.jl:1
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/HTTP/test/server.jl:1
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/HTTP/test/server.jl:1
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/HTTP/test/server.jl:1
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/HTTP/test/server.jl:1
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/HTTP/test/server.jl:1
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/HTTP/test/server.jl:1
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/HTTP/test/server.jl:1
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/HTTP/test/server.jl:1
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/HTTP/test/server.jl:1
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/HTTP/test/server.jl:1
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/HTTP/test/server.jl:1
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/HTTP/test/server.jl:1
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/HTTP/test/server.jl:1
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/HTTP/test/server.jl:1
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/HTTP/test/server.jl:1
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/HTTP/test/server.jl:1
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/HTTP/test/server.jl:1
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/HTTP/test/server.jl:1
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/HTTP/test/server.jl:1
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/HTTP/test/server.jl:1
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/HTTP/test/server.jl:1
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/HTTP/test/server.jl:1
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/HTTP/test/server.jl:1
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/HTTP/test/server.jl:1
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/HTTP/test/server.jl:1
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/HTTP/test/server.jl:1
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/HTTP/test/server.jl:1
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/HTTP/test/server.jl:1
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/HTTP/test/server.jl:1
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/HTTP/test/server.jl:1
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/HTTP/test/server.jl:1
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/HTTP/test/server.jl:1
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/HTTP/test/server.jl:1
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/HTTP/test/server.jl:1
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/HTTP/test/server.jl:1
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/HTTP/test/server.jl:1
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/HTTP/test/server.jl:1
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/HTTP/test/server.jl:1
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/HTTP/test/server.jl:1
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/HTTP/test/server.jl:1
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/HTTP/test/server.jl:1
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/HTTP/test/server.jl:1
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/HTTP/test/server.jl:1
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/HTTP/test/server.jl:1
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/HTTP/test/server.jl:1
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/HTTP/test/server.jl:1
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/HTTP/test/server.jl:1
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/HTTP/test/server.jl:1
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/HTTP/test/server.jl:1
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/HTTP/test/server.jl:1
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/HTTP/test/server.jl:1
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/HTTP/test/server.jl:1
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/HTTP/test/server.jl:1
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/HTTP/test/server.jl:1
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/HTTP/test/server.jl:1
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/HTTP/test/server.jl:1
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/HTTP/test/server.jl:1
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/HTTP/test/server.jl:1
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/HTTP/test/server.jl:1
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/HTTP/test/server.jl:1
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/HTTP/test/server.jl:1
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/HTTP/test/server.jl:1
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/HTTP/test/server.jl:1
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/HTTP/test/server.jl:1
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/HTTP/test/server.jl:1
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/HTTP/test/server.jl:1
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/HTTP/test/server.jl:1
HTTP.serve: Error During Test at /home/vagrant/.julia/v0.7/HTTP/test/server.jl:1
  Got an exception of type ErrorException outside of a @test
  pointer_from_objref cannot be used on immutable objects
  Stacktrace:
   [1] error at ./error.jl:33 [inlined]
   [2] pointer_from_objref at ./pointer.jl:142 [inlined]
   [3] dbg! at /home/vagrant/.julia/v0.7/MbedTLS/src/ssl.jl:127 [inlined]
   [4] Type at /home/vagrant/.julia/v0.7/MbedTLS/src/MbedTLS.jl:106 [inlined]
   [5] Type at /home/vagrant/.julia/v0.7/HTTP/src/server.jl:62 [inlined]
   [6] #Server#11(::String, ::String, ::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Type, ::HTTP.Handlers.HandlerFunction{getfield(HTTP.Nitrogen, Symbol("##12#14"))}, ::Base.PipeEndpoint) at /home/vagrant/.julia/v0.7/HTTP/src/server.jl:315
   [7] HTTP.Nitrogen.Server(::HTTP.Handlers.HandlerFunction{getfield(HTTP.Nitrogen, Symbol("##12#14"))}, ::Base.PipeEndpoint) at /home/vagrant/.julia/v0.7/HTTP/src/server.jl:312 (repeats 2 times)
   [8] macro expansion at /home/vagrant/.julia/v0.7/HTTP/test/server.jl:4 [inlined]
   [9] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:980 [inlined]
   [10] top-level scope at /home/vagrant/.julia/v0.7/HTTP/test/server.jl:4
   [11] include at ./boot.jl:295 [inlined]
   [12] include_relative(::Module, ::String) at ./loading.jl:521
   [13] include(::Module, ::String) at ./sysimg.jl:26
   [14] include(::String) at ./sysimg.jl:65
   [15] macro expansion at /home/vagrant/.julia/v0.7/HTTP/test/runtests.jl:28 [inlined]
   [16] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:980 [inlined]
   [17] top-level scope at /home/vagrant/.julia/v0.7/HTTP/test/runtests.jl:19
   [18] include at ./boot.jl:295 [inlined]
   [19] include_relative(::Module, ::String) at ./loading.jl:521
   [20] include(::Module, ::String) at ./sysimg.jl:26
   [21] process_options(::Base.JLOptions) at ./client.jl:323
   [22] _start() at ./client.jl:374
Test Summary:       |   Pass  Error  Broken   Total
HTTP                | 607524     12       5  607541
  utils.jl          |    173                    173
  FIFOBuffer        |     97                     97
  HTTP.sniff        |     20                     20
  HTTP.isjson       |     27                     27
  HTTP.URI          |    113                    113
  Cookies           |     57                     57
  HTTP.parse        | 606943                 606943
  types.jl          |     12                     12
  HTTP.Handler      |     17                     17
  HTTP.Client       |     65     11       5      81
    HTTP.Connection |      6                      6
  HTTP.serve        |             1               1
ERROR: LoadError: Some tests did not pass: 607524 passed, 0 failed, 12 errored, 5 broken.
in expression starting at /home/vagrant/.julia/v0.7/HTTP/test/runtests.jl:18
┌ Error: ------------------------------------------------------------
│ # Testing failed for HTTP
│   exception = ErrorException("failed process: Process(`/home/vagrant/julia/bin/julia -Cnative -J/home/vagrant/julia/lib/julia/sys.so --compile=yes --depwarn=yes --code-coverage=none --color=no --compiled-modules=yes --check-bounds=yes --warn-overwrite=yes --startup-file=yes /home/vagrant/.julia/v0.7/HTTP/test/runtests.jl`, ProcessExited(1)) [1]")
└ @ Base.Pkg.Entry entry.jl:739
ERROR: HTTP had test errors

>>> End of log
