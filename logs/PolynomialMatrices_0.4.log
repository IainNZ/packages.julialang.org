>>> 'Pkg.add("PolynomialMatrices")' log
INFO: Cloning cache of PolynomialMatrices from https://github.com/neveritt/PolynomialMatrices.jl.git
INFO: Installing DataStructures v0.5.3
INFO: Installing PolynomialMatrices v0.1.1
INFO: Installing Polynomials v0.1.5
INFO: Package database updated
INFO: METADATA is out-of-date — you may not have the latest version of PolynomialMatrices
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("PolynomialMatrices")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-121-generic #170-Ubuntu SMP Wed Jun 14 09:04:33 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (435.84375 MB free)
Uptime: 24872.0 sec
Load Avg:  1.0  1.0068359375  1.02392578125
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz    1229243 s        248 s      93968 s     912438 s         52 s
#2  3500 MHz     795674 s       6930 s      77859 s    1511191 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.9.1
 - PolynomialMatrices            0.1.1
3 additional packages:
 - Compat                        0.26.0
 - DataStructures                0.5.3
 - Polynomials                   0.1.5
INFO: Testing PolynomialMatrices
WARNING: New definition 
    +(#M2<:AbstractArray, PolynomialMatrices.PolyMatrix{#T<:Any, #M1<:Any, Base.Val{#W<:Any}, #N<:Any}) at /home/vagrant/.julia/v0.4/PolynomialMatrices/src/arithmetic.jl:248
is ambiguous with: 
    +(Base.Range{#S<:Any}, AbstractArray{#T<:Any, N<:Any}) at arraymath.jl:87.
To fix, define 
    +(_<:Base.Range{#S<:Any}, PolynomialMatrices.PolyMatrix{#T<:Any, #M1<:Any, Base.Val{#W<:Any}, N<:Any})
before the new definition.
WARNING: New definition 
    -(#M2<:AbstractArray, PolynomialMatrices.PolyMatrix{#T<:Any, #M1<:Any, Base.Val{#W<:Any}, #N<:Any}) at /home/vagrant/.julia/v0.4/PolynomialMatrices/src/arithmetic.jl:251
is ambiguous with: 
    -(Base.Range{#S<:Any}, AbstractArray{#T<:Any, N<:Any}) at arraymath.jl:87.
To fix, define 
    -(_<:Base.Range{#S<:Any}, PolynomialMatrices.PolyMatrix{#T<:Any, #M1<:Any, Base.Val{#W<:Any}, N<:Any})
before the new definition.
WARNING: New definition 
    *(AbstractArray{#S<:Any, 2}, PolynomialMatrices.PolyMatrix{#T<:Any, #M1<:Any, Base.Val{#W<:Any}, #N<:Any}) at /home/vagrant/.julia/v0.4/PolynomialMatrices/src/arithmetic.jl:254
is ambiguous with: 
    *(Base.LinAlg.Bidiagonal{#T<:Any}, AbstractArray{#T<:Any, 1}) at linalg/bidiag.jl:202.
To fix, define 
    *(Base.LinAlg.Bidiagonal{Polynomials.Poly{#T<:Any}}, PolynomialMatrices.PolyMatrix{#T<:Any, #M1<:Any, Base.Val{#W<:Any}, 1})
before the new definition.
WARNING: New definition 
    *(AbstractArray{#S<:Any, 2}, PolynomialMatrices.PolyMatrix{#T<:Any, #M1<:Any, Base.Val{#W<:Any}, #N<:Any}) at /home/vagrant/.julia/v0.4/PolynomialMatrices/src/arithmetic.jl:254
is ambiguous with: 
    *(PolynomialMatrices.PolyMatrix{#T<:Any, #M1<:Any, Base.Val{#W<:Any}, #N<:Any}, AbstractArray{#S<:Any, 2}) at /home/vagrant/.julia/v0.4/PolynomialMatrices/src/arithmetic.jl:253.
To fix, define 
    *(PolynomialMatrices.PolyMatrix{#T<:Any, #M1<:Any, Base.Val{#W<:Any}, 2}, PolynomialMatrices.PolyMatrix{#T<:Any, #M1<:Any, Base.Val{#W<:Any}, 2})
before the new definition.
WARNING: New definition 
    At_mul_B(PolynomialMatrices.PolyMatrix{#T1<:Any, #M1<:Any, Base.Val{#W<:Any}, #N1<:Any}, AbstractArray{#T2<:Any, #N2<:Any}) at /home/vagrant/.julia/v0.4/PolynomialMatrices/src/arithmetic.jl:309
is ambiguous with: 
    At_mul_B(AbstractArray{#T<:Any, 2}, Union{DenseArray{#S<:Any, 2}, Base.SubArray{#S<:Any, 2, A<:DenseArray, I<:Tuple{Vararg{Union{Base.Colon, Base.Range{Int64}, Int64}}}, LD<:Any}}) at linalg/matmul.jl:148.
To fix, define 
    At_mul_B(PolynomialMatrices.PolyMatrix{#T1<:Any, #M1<:Any, Base.Val{#W<:Any}, 2}, Union{DenseArray{#S<:Any, 2}, Base.SubArray{#S<:Any, 2, A<:DenseArray, I<:Tuple{Vararg{Union{Base.Colon, Base.Range{Int64}, Int64}}}, LD<:Any}})
before the new definition.
WARNING: New definition 
    A_mul_Bt(PolynomialMatrices.PolyMatrix{#T1<:Any, #M1<:Any, Base.Val{#W<:Any}, #N1<:Any}, AbstractArray{#T2<:Any, #N2<:Any}) at /home/vagrant/.julia/v0.4/PolynomialMatrices/src/arithmetic.jl:312
is ambiguous with: 
    A_mul_Bt(AbstractArray{#T<:Any, 2}, Union{DenseArray{#S<:Any, 2}, Base.SubArray{#S<:Any, 2, A<:DenseArray, I<:Tuple{Vararg{Union{Base.Colon, Base.Range{Int64}, Int64}}}, LD<:Any}}) at linalg/matmul.jl:155.
To fix, define 
    A_mul_Bt(PolynomialMatrices.PolyMatrix{#T1<:Any, #M1<:Any, Base.Val{#W<:Any}, 2}, Union{DenseArray{#S<:Any, 2}, Base.SubArray{#S<:Any, 2, A<:DenseArray, I<:Tuple{Vararg{Union{Base.Colon, Base.Range{Int64}, Int64}}}, LD<:Any}})
before the new definition.
WARNING: New definition 
    At_mul_Bt(PolynomialMatrices.PolyMatrix{#T1<:Any, #M1<:Any, Base.Val{#W<:Any}, #N1<:Any}, AbstractArray{#T2<:Any, #N2<:Any}) at /home/vagrant/.julia/v0.4/PolynomialMatrices/src/arithmetic.jl:315
is ambiguous with: 
    At_mul_Bt(AbstractArray{#T<:Any, 2}, Union{Base.SubArray{#S<:Any, 1, A<:DenseArray, I<:Tuple{Vararg{Union{Base.Colon, Base.Range{Int64}, Int64}}}, LD<:Any}, DenseArray{#S<:Any, 2}, Base.SubArray{#S<:Any, 2, A<:DenseArray, I<:Tuple{Vararg{Union{Base.Colon, Base.Range{Int64}, Int64}}}, LD<:Any}, DenseArray{#S<:Any, 1}}) at linalg/matmul.jl:172.
To fix, define 
    At_mul_Bt(PolynomialMatrices.PolyMatrix{#T1<:Any, #M1<:Any, Base.Val{#W<:Any}, 2}, Union{Base.SubArray{#S<:Any, 1, A<:DenseArray, I<:Tuple{Vararg{Union{Base.Colon, Base.Range{Int64}, Int64}}}, LD<:Any}, DenseArray{#S<:Any, 2}, Base.SubArray{#S<:Any, 2, A<:DenseArray, I<:Tuple{Vararg{Union{Base.Colon, Base.Range{Int64}, Int64}}}, LD<:Any}, DenseArray{#S<:Any, 1}})
before the new definition.
WARNING: New definition 
    Ac_mul_B(PolynomialMatrices.PolyMatrix{#T1<:Any, #M1<:Any, Base.Val{#W<:Any}, #N1<:Any}, AbstractArray{#T2<:Any, #N2<:Any}) at /home/vagrant/.julia/v0.4/PolynomialMatrices/src/arithmetic.jl:319
is ambiguous with: 
    Ac_mul_B(AbstractArray{T<:Any, 1}, AbstractArray{T<:Any, 1}) at linalg/matmul.jl:76.
To fix, define 
    Ac_mul_B(PolynomialMatrices.PolyMatrix{#T1<:Any, #M1<:Any, Base.Val{#W<:Any}, 1}, AbstractArray{T<:Any, 1})
before the new definition.
WARNING: New definition 
    A_mul_Bc(PolynomialMatrices.PolyMatrix{#T1<:Any, #M1<:Any, Base.Val{#W<:Any}, #N1<:Any}, AbstractArray{#T2<:Any, #N2<:Any}) at /home/vagrant/.julia/v0.4/PolynomialMatrices/src/arithmetic.jl:322
is ambiguous with: 
    A_mul_Bc(AbstractArray{#TA<:Any, N<:Any}, Union{Base.LinAlg.QRCompactWYQ{#TB<:Any, M<:AbstractArray{T<:Any, 2}}, Base.LinAlg.QRPackedQ{#TB<:Any, S<:AbstractArray{T<:Any, 2}}}) at linalg/qr.jl:288.
To fix, define 
    A_mul_Bc(PolynomialMatrices.PolyMatrix{#T1<:Any, #M1<:Any, Base.Val{#W<:Any}, N<:Any}, Union{Base.LinAlg.QRCompactWYQ{#TB<:Any, M<:AbstractArray{T<:Any, 2}}, Base.LinAlg.QRPackedQ{#TB<:Any, S<:AbstractArray{T<:Any, 2}}})
before the new definition.
WARNING: New definition 
    Ac_mul_Bc(PolynomialMatrices.PolyMatrix{#T1<:Any, #M1<:Any, Base.Val{#W<:Any}, #N1<:Any}, AbstractArray{#T2<:Any, #N2<:Any}) at /home/vagrant/.julia/v0.4/PolynomialMatrices/src/arithmetic.jl:325
is ambiguous with: 
    Ac_mul_Bc(AbstractArray{#T<:Any, 2}, Union{DenseArray{#S<:Any, 2}, Base.SubArray{#S<:Any, 2, A<:DenseArray, I<:Tuple{Vararg{Union{Base.Colon, Base.Range{Int64}, Int64}}}, LD<:Any}}) at linalg/matmul.jl:196.
To fix, define 
    Ac_mul_Bc(PolynomialMatrices.PolyMatrix{#T1<:Any, #M1<:Any, Base.Val{#W<:Any}, 2}, Union{DenseArray{#S<:Any, 2}, Base.SubArray{#S<:Any, 2, A<:DenseArray, I<:Tuple{Vararg{Union{Base.Colon, Base.Range{Int64}, Int64}}}, LD<:Any}})
before the new definition.
WARNING: PolyMatrix: lengt(d) == 0
WARNING: PolyMatrix: size of elements not consistent
WARNING: PolyMatrix: dimensions are not consistent
WARNING: PolyMatrix: dimensions are not consistent
WARNING: p₁≈p₂: `p₁` (Float64,s) and `p₂` (Float64,q) have different variables
WARNING: +(p1,p2): size(p1) ≠ size(p2)
WARNING: p1+p2: `p1` (Int64,s) and `p2` (Float64,x) have different variables
WARNING: +(p1,p2): size(p1) ≠ size(p2)
WARNING: +(p1,p2): size(p1) ≠ size(p2)
WARNING: p1-p2: `p1` (Int64,s) and `p2` (Float64,x) have different variables
WARNING: +(p1,p2): size(p1) ≠ size(p2)
WARNING: *(p1,p2): size(p1,2) ≠ size(p2,1)
WARNING: p1*p2: `p1` (Int64,s) and `p2` (Float64,x) have different variables
WARNING: *(p1,p2): size(p1,2) ≠ size(p2,1)
WARNING: *(p1,p2): size(p1,2) ≠ size(p2,1)
INFO: PolynomialMatrices tests passed

>>> End of log
