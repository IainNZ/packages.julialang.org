>>> 'Pkg.add("ZippedArrays")' log
WARNING: Base.Pkg is deprecated, run `using Pkg` instead
 in module Main
[ Info: Cloning cache of ZippedArrays from https://github.com/bramtayl/ZippedArrays.jl.git
[ Info: Installing ZippedArrays v0.0.1
[ Info: Package database updated
┌ Info: METADATA is out-of-date — you may not have the latest version of ZippedArrays
└ Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("ZippedArrays")' log
WARNING: Base.versioninfo is deprecated: it has been moved to the standard library package `InteractiveUtils`.
Add `using InteractiveUtils` to your imports.
 in module Main
WARNING: Base.versioninfo is deprecated: it has been moved to the standard library package `InteractiveUtils`.
Add `using InteractiveUtils` to your imports.
 in module Main
Julia Version 0.7.0-DEV.4475
Commit c1e7c93169 (2018-03-06 19:47 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
      Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-135-generic #184-Ubuntu SMP Wed Oct 18 11:55:51 UTC 2017 x86_64 x86_64
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
              speed         user         nice          sys         idle          irq
       #1  3500 MHz    4866574 s        127 s     254709 s    1278607 s         89 s
       #2  3500 MHz    1038478 s       6479 s     100988 s    6231298 s          1 s
       
  Memory: 2.93927001953125 GB (1455.765625 MB free)
  Uptime: 75275.0 sec
  Load Avg:  1.01171875  0.98876953125  1.029296875
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant
Packages:
  Package Directory: /home/vagrant/.julia/v0.7
  Package Status:
2 required packages:
 - JSON                          0.17.1
 - ZippedArrays                  0.0.1
3 additional packages:
 - Compat                        0.56.0
 - Nullables                     0.0.4
 - tmp4YVuTH                     0.0.0-             non-repo (unregistered)
WARNING: Base.Pkg is deprecated, run `using Pkg` instead
 in module Main
[ Info: Computing test dependencies for ZippedArrays...
[ Info: Installing DocStringExtensions v0.4.3
[ Info: Installing Documenter v0.14.0
[ Info: Testing ZippedArrays
Documenter: setting up build directory.
Documenter: expanding markdown templates.
Documenter: building cross-references.
Documenter: running document checks.
 > checking for missing docstrings.
 > running doctests.
┌ Warning: `link_pipe(pipe; julia_only_read=true, julia_only_write=true)` is deprecated, use `link_pipe!(pipe, reader_supports_async=julia_only_read, writer_supports_async=julia_only_write)` instead.
│   caller = ip:0x0
└ @ Core :-1
=====[Test Error]==============================

> File: /home/vagrant/.julia/v0.7/ZippedArrays/src/ZippedArrays.jl

> Code block:

```jldoctest
julia> using ZippedArrays, Base.Test

julia> array1 = [1 2 3; 4 5 6; 7 8 9]
3×3 Array{Int64,2}:
 1  2  3
 4  5  6
 7  8  9

julia> array2 = [1 4 7; 2 5 8; 3 6 9]
3×3 Array{Int64,2}:
 1  4  7
 2  5  8
 3  6  9

julia> z = @inferred ZippedArray((array1, array2))
3×3 ZippedArrays.ZippedArray{Tuple{Int64,Int64},2,Tuple{Array{Int64,2},Array{Int64,2}}}:
 (1, 1)  (2, 4)  (3, 7)
 (4, 2)  (5, 5)  (6, 8)
 (7, 3)  (8, 6)  (9, 9)

julia> z[2]
(4, 2)

julia> z[2] = (3, 3);

julia> z[2]
(3, 3)
```

> Subexpression:

    using ZippedArrays, Base.Test

> Output Diff (REQUIRES COLOR):

WARNING: Base.Test is deprecated, run `using Test` instead
  likely near /home/vagrant/.julia/v0.7/ZippedArrays/test/runtests.jl:4

=====[End Error]===============================
=====[Test Error]==============================

> File: /home/vagrant/.julia/v0.7/ZippedArrays/src/ZippedArrays.jl

> Code block:

```jldoctest
julia> using ZippedArrays, Base.Test

julia> array1 = [1 2 3; 4 5 6; 7 8 9]
3×3 Array{Int64,2}:
 1  2  3
 4  5  6
 7  8  9

julia> array2 = [1 4 7; 2 5 8; 3 6 9]
3×3 Array{Int64,2}:
 1  4  7
 2  5  8
 3  6  9

julia> z = @inferred ZippedArray((array1, array2))
3×3 ZippedArrays.ZippedArray{Tuple{Int64,Int64},2,Tuple{Array{Int64,2},Array{Int64,2}}}:
 (1, 1)  (2, 4)  (3, 7)
 (4, 2)  (5, 5)  (6, 8)
 (7, 3)  (8, 6)  (9, 9)

julia> z[2]
(4, 2)

julia> z[2] = (3, 3);

julia> z[2]
(3, 3)
```

> Subexpression:

    z = @inferred ZippedArray((array1, array2))

> Output Diff (REQUIRES COLOR):

3×3 ZippedArrays.ZippedArray{Tuple{Int64,Int64},2,Tuple{Array{Int64,2},Array{Int64,2}}}:
 ZippedArray{Tuple{Int64,Int64},2,Tuple{Array{Int64,2},Array{Int64,2}}}:
 (1, 1)  (2, 4)  (3, 7)
 (4, 2)  (5, 5)  (6, 8)
 (7, 3)  (8, 6)  (9, 9)

=====[End Error]===============================
=====[Test Error]==============================

> File: /home/vagrant/.julia/v0.7/ZippedArrays/src/ZippedArrays.jl

> Code block:

```jldoctest
julia> using ZippedArrays, Base.Test

julia> array1 = [1 2 3; 4 5 6; 7 8 9]
3×3 Array{Int64,2}:
 1  2  3
 4  5  6
 7  8  9

julia> array2 = [1 4 7; 2 5 8; 3 6 9]
3×3 Array{Int64,2}:
 1  4  7
 2  5  8
 3  6  9

julia> indexes = [ (1, 1:3), (2, 1:3), (3, 1:3) ];

julia> z = @inferred ZippedViews((array1, array2), indexes)
3-element ZippedArrays.ZippedViews{Tuple{Array{Int64,2},Array{Int64,2}},1,Array{Tuple{Int64,UnitRange{Int64}},1}}:
 ([1, 2, 3], [1, 4, 7])
 ([4, 5, 6], [2, 5, 8])
 ([7, 8, 9], [3, 6, 9])

julia> z[2]
([4, 5, 6], [2, 5, 8])

julia> z[2] = ([6, 5, 4], [8, 4, 2]);

julia> z[2]
([6, 5, 4], [8, 4, 2])
```

> Subexpression:

    using ZippedArrays, Base.Test

> Output Diff (REQUIRES COLOR):

WARNING: Base.Test is deprecated, run `using Test` instead
  likely near /home/vagrant/.julia/v0.7/ZippedArrays/test/runtests.jl:4

=====[End Error]===============================
ERROR: LoadError: AssertionError: SubArray{Int64,1,Array{Int64,2},Tuple{Int64,UnitRange{Int64}},true} is not a subtype of Array{Int64,2}
Stacktrace:
 [1] typeinfo_prefix(::IOContext{Base.GenericIOBuffer{Array{UInt8,1}}}, ::SubArray{Int64,1,Array{Int64,2},Tuple{Int64,UnitRange{Int64}},true}) at ./arrayshow.jl:479
 [2] show_vector(::IOContext{Base.GenericIOBuffer{Array{UInt8,1}}}, ::SubArray{Int64,1,Array{Int64,2},Tuple{Int64,UnitRange{Int64}},true}, ::Char, ::Char) at ./arrayshow.jl:432 (repeats 2 times)
 [3] show at ./arrayshow.jl:446 [inlined]
 [4] show_delim_array(::IOContext{Base.GenericIOBuffer{Array{UInt8,1}}}, ::Tuple{SubArray{Int64,1,Array{Int64,2},Tuple{Int64,UnitRange{Int64}},true},SubArray{Int64,1,Array{Int64,2},Tuple{Int64,UnitRange{Int64}},true}}, ::Char, ::Char, ::Char, ::Bool, ::Int64, ::Int64) at ./show.jl:687
 [5] show_delim_array at ./show.jl:673 [inlined]
 [6] show(::IOContext{Base.GenericIOBuffer{Array{UInt8,1}}}, ::Tuple{SubArray{Int64,1,Array{Int64,2},Tuple{Int64,UnitRange{Int64}},true},SubArray{Int64,1,Array{Int64,2},Tuple{Int64,UnitRange{Int64}},true}}) at ./show.jl:705
 [7] #sprint#348(::IOContext{Base.GenericIOBuffer{Array{UInt8,1}}}, ::Int64, ::Function, ::Function, ::Tuple{SubArray{Int64,1,Array{Int64,2},Tuple{Int64,UnitRange{Int64}},true},SubArray{Int64,1,Array{Int64,2},Tuple{Int64,UnitRange{Int64}},true}}, ::Vararg{Tuple{SubArray{Int64,1,Array{Int64,2},Tuple{Int64,UnitRange{Int64}},true},SubArray{Int64,1,Array{Int64,2},Tuple{Int64,UnitRange{Int64}},true}},N} where N) at ./strings/io.jl:91
 [8] #sprint at ./<missing>:0 [inlined]
 [9] alignment at ./show.jl:1766 [inlined]
 [10] alignment(::IOContext{Base.GenericIOBuffer{Array{UInt8,1}}}, ::ZippedViews{Tuple{Array{Int64,2},Array{Int64,2}},1,Array{Tuple{Int64,UnitRange{Int64}},1}}, ::Base.OneTo{Int64}, ::Base.OneTo{Int64}, ::Int64, ::Int64, ::Int64) at ./arrayshow.jl:68
 [11] print_matrix(::IOContext{Base.GenericIOBuffer{Array{UInt8,1}}}, ::ZippedViews{Tuple{Array{Int64,2},Array{Int64,2}},1,Array{Tuple{Int64,UnitRange{Int64}},1}}, ::String, ::String, ::String, ::String, ::String, ::String, ::Int64, ::Int64) at ./arrayshow.jl:187
 [12] print_matrix at ./arrayshow.jl:160 [inlined]
 [13] print_array at ./arrayshow.jl:309 [inlined]
 [14] show(::IOContext{Base.GenericIOBuffer{Array{UInt8,1}}}, ::MIME{Symbol("text/plain")}, ::ZippedViews{Tuple{Array{Int64,2},Array{Int64,2}},1,Array{Tuple{Int64,UnitRange{Int64}},1}}) at ./arrayshow.jl:345
 [15] display(::TextDisplay, ::MIME{Symbol("text/plain")}, ::ZippedViews{Tuple{Array{Int64,2},Array{Int64,2}},1,Array{Tuple{Int64,UnitRange{Int64}},1}}) at ./multimedia.jl:204
 [16] display(::TextDisplay, ::ZippedViews{Tuple{Array{Int64,2},Array{Int64,2}},1,Array{Tuple{Int64,UnitRange{Int64}},1}}) at ./multimedia.jl:205
 [17] top-level scope
in expression starting at /home/vagrant/.julia/v0.7/ZippedArrays/test/runtests.jl:4
┌ Error: ------------------------------------------------------------
│ # Testing failed for ZippedArrays
│   exception =
│    failed process: Process(`/home/vagrant/julia/bin/julia -Cnative -J/home/vagrant/julia/lib/julia/sys.so --compile=yes --depwarn=yes --code-coverage=none --color=no --compiled-modules=yes --check-bounds=yes --warn-overwrite=yes --startup-file=yes /home/vagrant/.julia/v0.7/ZippedArrays/test/runtests.jl`, ProcessExited(1)) [1]
│    Stacktrace:
│     [1] error(::String, ::Base.Process, ::String, ::Int64, ::String) at ./error.jl:42
│     [2] pipeline_error(::Base.Process) at ./process.jl:712
│     [3] #run#534(::Bool, ::Function, ::Cmd) at ./process.jl:670
│     [4] run at ./process.jl:668 [inlined]
│     [5] (::getfield(Pkg.Entry, Symbol("##56#57")){Bool,String,Array{AbstractString,1}})() at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Pkg/src/entry.jl:729
│     [6] cd(::getfield(Pkg.Entry, Symbol("##56#57")){Bool,String,Array{AbstractString,1}}, ::String) at ./file.jl:72
│     [7] #test!#55(::Bool, ::Function, ::String, ::Array{AbstractString,1}, ::Array{AbstractString,1}, ::Array{AbstractString,1}) at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Pkg/src/entry.jl:717
│     [8] (::getfield(Pkg.Entry, Symbol("#kw##test!")))(::NamedTuple{(:coverage,),Tuple{Bool}}, ::typeof(Pkg.Entry.test!), ::String, ::Array{AbstractString,1}, ::Array{AbstractString,1}, ::Array{AbstractString,1}) at ./<missing>:0
│     [9] #test#59(::Bool, ::Function, ::Array{AbstractString,1}) at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Pkg/src/entry.jl:756
│     [10] #test at ./<missing>:0 [inlined]
│     [11] #4 at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Pkg/src/dir.jl:36 [inlined]
│     [12] cd(::getfield(Pkg.Dir, Symbol("##4#7")){Base.Iterators.Pairs{Symbol,Bool,Tuple{Symbol},NamedTuple{(:coverage,),Tuple{Bool}}},typeof(Pkg.Entry.test),Tuple{Array{AbstractString,1}}}, ::String) at ./file.jl:72
│     [13] #cd#1(::Base.Iterators.Pairs{Symbol,Bool,Tuple{Symbol},NamedTuple{(:coverage,),Tuple{Bool}}}, ::Function, ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N} where N) at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Pkg/src/dir.jl:36
│     [14] (::getfield(Pkg.Dir, Symbol("#kw##cd")))(::NamedTuple{(:coverage,),Tuple{Bool}}, ::typeof(Pkg.Dir.cd), ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N} where N) at ./<missing>:0
│     [15] #test#3(::Bool, ::Function, ::String, ::Vararg{String,N} where N) at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Pkg/src/Pkg.jl:276
│     [16] test(::String, ::Vararg{String,N} where N) at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Pkg/src/Pkg.jl:276
│     [17] top-level scope
│     [18] eval at ./boot.jl:308 [inlined]
│     [19] eval(::Module, ::Expr) at ./sysimg.jl:74
│     [20] exec_options(::Base.JLOptions) at ./client.jl:304
│     [21] _start() at ./client.jl:455
└ @ Pkg.Entry entry.jl:732
[ Info: Removing DocStringExtensions v0.4.3
[ Info: Removing Documenter v0.14.0
ERROR: ZippedArrays had test errors

>>> End of log
