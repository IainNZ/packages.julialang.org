>>> 'Pkg.add("PolynomialMatrices")' log
┌ Info: Cloning cache of PolynomialMatrices from https://github.com/neveritt/PolynomialMatrices.jl.git
└                                                   @ Base.Pkg.Cache cache.jl:43
[ Info: Installing DataStructures v0.7.4           @ Base.Pkg.Entry entry.jl:543
[ Info: Installing PolynomialMatrices v0.2.0       @ Base.Pkg.Entry entry.jl:543
[ Info: Installing Polynomials v0.2.0              @ Base.Pkg.Entry entry.jl:543
[ Info: Package database updated                    @ Base.Pkg.Entry entry.jl:32
┌ Info: METADATA is out-of-date — you may not have the latest version of PolynomialMatrices
│ Use `Pkg.update()` to get the latest versions of your packages
└                                                   @ Base.Pkg.Entry entry.jl:74

>>> 'Pkg.test("PolynomialMatrices")' log
Julia Version 0.7.0-DEV.3354
Commit 9b5eed2b6c (2018-01-09 08:03 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
      Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-135-generic #184-Ubuntu SMP Wed Oct 18 11:55:51 UTC 2017 x86_64 x86_64
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
              speed         user         nice          sys         idle          irq
       #1  3500 MHz     750658 s         98 s      43547 s     279391 s         12 s
       #2  3500 MHz     143406 s         46 s      19397 s    1069395 s          0 s
       
  Memory: 2.93927001953125 GB (966.609375 MB free)
  Uptime: 12519.0 sec
  Load Avg:  1.0029296875  0.98779296875  0.96435546875
  WORD_SIZE: 64
  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant
Packages:
  Package Directory: /home/vagrant/.julia/v0.7
  Package Status:
2 required packages:
 - JSON                          0.16.3
 - PolynomialMatrices            0.2.0
4 additional packages:
 - Compat                        0.46.0
 - DataStructures                0.7.4
 - Nullables                     0.0.3
 - Polynomials                   0.2.0
[ Info: Testing PolynomialMatrices                 @ Base.Pkg.Entry entry.jl:723
WARNING: importing deprecated binding Base.filt! into PolynomialMatrices.
WARNING: importing deprecated binding Base.filt into PolynomialMatrices.
┌ Warning: Deprecated syntax `immutable` at /home/vagrant/.julia/v0.7/PolynomialMatrices/src/type.jl:9.
│ Use `struct` instead.
└                                                            @ nothing type.jl:9
┌ Warning: Deprecated syntax `parametric method syntax (::Type{PolyMatrix}){M, N, W}(coeffs::SortedDict{Int, M, ForwardOrdering}, dims::NTuple{N, Int}, ::Type{Val{W}})` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/type.jl:15.
│ Use `(::Type{PolyMatrix})(coeffs::SortedDict{Int, M, ForwardOrdering}, dims::NTuple{N, Int}, #unused#::Type{Val{W}}) where {M, N, W}` instead.
└                                                           @ nothing type.jl:15
┌ Warning: Deprecated syntax `parametric method syntax truncate!{T, M, V, N}(p::PolyMatrix{T, M, Val{V}, N}, ϵ = *(Base.rtoldefault(T), length(p), degree(p)))` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/type.jl:23.
│ Use `truncate!(p::PolyMatrix{T, M, Val{V}, N}, ϵ = *(Base.rtoldefault(T), length(p), degree(p))) where {T, M, V, N}` instead.
└                                                           @ nothing type.jl:23
┌ Warning: Deprecated syntax `parametric method syntax _truncate!{T, M, N}(coeffs::SortedDict{Int, M, ForwardOrdering}, dims::NTuple{N, Int}, ::Type{T}, ϵ::Real = *(Base.rtoldefault(real(T)), prod(dims), length(coeffs)))` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/type.jl:29.
│ Use `_truncate!(coeffs::SortedDict{Int, M, ForwardOrdering}, dims::NTuple{N, Int}, #s1::Type{T}, ϵ::Real = *(Base.rtoldefault(real(T)), prod(dims), length(coeffs))) where {T, M, N}` instead.
└                                                           @ nothing type.jl:29
┌ Warning: Deprecated syntax `parametric method syntax (p::PolyMatrix{T, M, Val{W}, N}){T, M, W, N, S}(x::S)` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/type.jl:48.
│ Use `(p::PolyMatrix{T, M, Val{W}, N})(x::S) where {T, M, W, N, S}` instead.
└                                                           @ nothing type.jl:48
┌ Warning: Deprecated syntax `parametric method syntax PolyMatrix{M <: AbstractArray}(d::Dict{Int, M}, var::SymbolLike = :x)` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/type.jl:64.
│ Use `PolyMatrix(d::Dict{Int, M}, var::SymbolLike = :x) where M <: AbstractArray` instead.
└                                                           @ nothing type.jl:64
┌ Warning: Deprecated syntax `parametric method syntax PolyMatrix{M <: AbstractArray, W}(d::Dict{Int, M}, var::Type{Val{W}})` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/type.jl:68.
│ Use `PolyMatrix(d::Dict{Int, M}, var::Type{Val{W}}) where {M <: AbstractArray, W}` instead.
└                                                           @ nothing type.jl:68
┌ Warning: Deprecated syntax `parametric method syntax PolyMatrix{M1 <: AbstractArray}(PM::M1)` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/type.jl:84.
│ Use `PolyMatrix(PM::M1) where M1 <: AbstractArray` instead.
└                                                           @ nothing type.jl:84
┌ Warning: Deprecated syntax `parametric method syntax PolyMatrix{T, N, W}(PM::AbstractArray{Poly{T}, N}, ::Type{Val{W}})` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/type.jl:90.
│ Use `PolyMatrix(PM::AbstractArray{Poly{T}, N}, #unused#::Type{Val{W}}) where {T, N, W}` instead.
└                                                           @ nothing type.jl:90
┌ Warning: Deprecated syntax `parametric method syntax PolyMatrix{T <: Number}(A::AbstractArray{T}, var::SymbolLike = :x)` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/type.jl:117.
│ Use `PolyMatrix(A::AbstractArray{T}, var::SymbolLike = :x) where T <: Number` instead.
└                                                          @ nothing type.jl:117
┌ Warning: Deprecated syntax `parametric method syntax PolyMatrix{T <: Number, W}(A::AbstractArray{T}, ::Type{Val{W}})` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/type.jl:121.
│ Use `PolyMatrix(A::AbstractArray{T}, #unused#::Type{Val{W}}) where {T <: Number, W}` instead.
└                                                          @ nothing type.jl:121
┌ Warning: Deprecated syntax `parametric method syntax PolyMatrix{M <: AbstractArray}(A::M, dims::Tuple{Int}, var::SymbolLike = :x)` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/type.jl:126.
│ Use `PolyMatrix(A::M, dims::Tuple{Int}, var::SymbolLike = :x) where M <: AbstractArray` instead.
└                                                          @ nothing type.jl:126
┌ Warning: Deprecated syntax `parametric method syntax PolyMatrix{M <: AbstractArray, W}(A::M, dims::Tuple{Int}, ::Type{Val{W}})` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/type.jl:130.
│ Use `PolyMatrix(A::M, dims::Tuple{Int}, #unused#::Type{Val{W}}) where {M <: AbstractArray, W}` instead.
└                                                          @ nothing type.jl:130
┌ Warning: Deprecated syntax `parametric method syntax PolyMatrix{M <: AbstractArray}(A::M, dims::Tuple{Int, Int}, var::SymbolLike = :x; reverse::Bool = false)` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/type.jl:147.
│ Use `PolyMatrix(A::M, dims::Tuple{Int, Int}, var::SymbolLike = :x; reverse::Bool = false) where M <: AbstractArray` instead.
└                                                          @ nothing type.jl:147
┌ Warning: Deprecated syntax `parametric method syntax PolyMatrix{M <: AbstractArray, W}(A::M, dims::Tuple{Int, Int}, ::Type{Val{W}}; reverse::Bool = false)` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/type.jl:151.
│ Use `PolyMatrix(A::M, dims::Tuple{Int, Int}, #s5::Type{Val{W}}; reverse::Bool = false) where {M <: AbstractArray, W}` instead.
└                                                          @ nothing type.jl:151
┌ Warning: Deprecated syntax `parametric method syntax PolyMatrix{M <: AbstractArray}(A::M, dims::Tuple{Int, Int, Int}, var::SymbolLike = :x)` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/type.jl:168.
│ Use `PolyMatrix(A::M, dims::Tuple{Int, Int, Int}, var::SymbolLike = :x) where M <: AbstractArray` instead.
└                                                          @ nothing type.jl:168
┌ Warning: Deprecated syntax `parametric method syntax PolyMatrix{M <: AbstractArray, W}(A::M, dims::Tuple{Int, Int, Int}, ::Type{Val{W}})` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/type.jl:172.
│ Use `PolyMatrix(A::M, dims::Tuple{Int, Int, Int}, #unused#::Type{Val{W}}) where {M <: AbstractArray, W}` instead.
└                                                          @ nothing type.jl:172
┌ Warning: Deprecated syntax `parametric method syntax length{T, M, W, N}(p::PolyMatrix{T, M, Val{W}, N})` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/methods.jl:4.
│ Use `length(p::PolyMatrix{T, M, Val{W}, N}) where {T, M, W, N}` instead.
└                                                         @ nothing methods.jl:4
┌ Warning: Deprecated syntax `parametric method syntax start{T, M, W, N}(p::PolyMatrix{T, M, Val{W}, N})` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/methods.jl:5.
│ Use `start(p::PolyMatrix{T, M, Val{W}, N}) where {T, M, W, N}` instead.
└                                                         @ nothing methods.jl:5
┌ Warning: Deprecated syntax `parametric method syntax next{T, M, W, N}(p::PolyMatrix{T, M, Val{W}, N}, state)` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/methods.jl:6.
│ Use `next(p::PolyMatrix{T, M, Val{W}, N}, state) where {T, M, W, N}` instead.
└                                                         @ nothing methods.jl:6
┌ Warning: Deprecated syntax `parametric method syntax done{T, M, W, N}(p::PolyMatrix{T, M, Val{W}, N}, state)` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/methods.jl:7.
│ Use `done(p::PolyMatrix{T, M, Val{W}, N}, state) where {T, M, W, N}` instead.
└                                                         @ nothing methods.jl:7
┌ Warning: Deprecated syntax `parametric method syntax eltype{T, M, W, N}(::PolyMatrix{T, M, Val{W}, N})` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/methods.jl:8.
│ Use `eltype(#unused#::PolyMatrix{T, M, Val{W}, N}) where {T, M, W, N}` instead.
└                                                         @ nothing methods.jl:8
┌ Warning: Deprecated syntax `parametric method syntax vartype{T, M, W, N}(p::PolyMatrix{T, M, Val{W}, N})` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/methods.jl:9.
│ Use `vartype(p::PolyMatrix{T, M, Val{W}, N}) where {T, M, W, N}` instead.
└                                                         @ nothing methods.jl:9
┌ Warning: Deprecated syntax `parametric method syntax mattype{T, M, W, N}(p::PolyMatrix{T, M, Val{W}, N})` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/methods.jl:10.
│ Use `mattype(p::PolyMatrix{T, M, Val{W}, N}) where {T, M, W, N}` instead.
└                                                        @ nothing methods.jl:10
┌ Warning: Deprecated syntax `parametric method syntax similar{T, M, W, N, N2}(p::PolyMatrix{T, M, Val{W}, N}, dims::NTuple{N2, Int})` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/methods.jl:14.
│ Use `similar(p::PolyMatrix{T, M, Val{W}, N}, dims::NTuple{N2, Int}) where {T, M, W, N, N2}` instead.
└                                                        @ nothing methods.jl:14
┌ Warning: Deprecated syntax `parametric method syntax similar{T, M, W, N, S, N2}(p::PolyMatrix{T, M, Val{W}, N}, ::Type{S} = T, dims::NTuple{N2, Int} = size(p))` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/methods.jl:21.
│ Use `similar(p::PolyMatrix{T, M, Val{W}, N}, #s7::Type{S} = T, dims::NTuple{N2, Int} = size(p)) where {T, M, W, N, S, N2}` instead.
└                                                        @ nothing methods.jl:21
┌ Warning: Deprecated syntax `parametric method syntax similar{T, M, W, N, S, N2}(p::PolyMatrix{T, M, Val{W}, N}, ::Type{Poly{S}}, dims::NTuple{N2, Int} = size(p))` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/methods.jl:28.
│ Use `similar(p::PolyMatrix{T, M, Val{W}, N}, #s7::Type{Poly{S}}, dims::NTuple{N2, Int} = size(p)) where {T, M, W, N, S, N2}` instead.
└                                                        @ nothing methods.jl:28
┌ Warning: Deprecated syntax `parametric method syntax Base.vcat{T, M, W, N}(A::PolyMatrix{T, M, Val{W}, N}...)` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/methods.jl:38.
│ Use `Base.vcat(A::PolyMatrix{T, M, Val{W}, N}...) where {T, M, W, N}` instead.
└                                                        @ nothing methods.jl:38
┌ Warning: Deprecated syntax `parametric method syntax Base.hcat{T, M, W, N}(A::PolyMatrix{T, M, Val{W}, N}...)` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/methods.jl:44.
│ Use `Base.hcat(A::PolyMatrix{T, M, Val{W}, N}...) where {T, M, W, N}` instead.
└                                                        @ nothing methods.jl:44
┌ Warning: Deprecated syntax `parametric method syntax Base.cat{T, M, W, N}(catdims, A::PolyMatrix{T, M, Val{W}, N}...)` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/methods.jl:51.
│ Use `Base.cat(catdims, A::PolyMatrix{T, M, Val{W}, N}...) where {T, M, W, N}` instead.
└                                                        @ nothing methods.jl:51
┌ Warning: Deprecated syntax `parametric method syntax Base.hvcat{T, M, W, N}(nbc::Integer, A::PolyMatrix{T, M, Val{W}, N}...)` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/methods.jl:57.
│ Use `Base.hvcat(nbc::Integer, A::PolyMatrix{T, M, Val{W}, N}...) where {T, M, W, N}` instead.
└                                                        @ nothing methods.jl:57
┌ Warning: Deprecated syntax `parametric method syntax Base.hvcat{T, M, W, N, N2}(rows::NTuple{N2, Int}, A::PolyMatrix{T, M, Val{W}, N}...)` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/methods.jl:63.
│ Use `Base.hvcat(rows::NTuple{N2, Int}, A::PolyMatrix{T, M, Val{W}, N}...) where {T, M, W, N, N2}` instead.
└                                                        @ nothing methods.jl:63
┌ Warning: Deprecated syntax `parametric method syntax variable{T, M, W, N}(p::PolyMatrix{T, M, Val{W}, N})` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/methods.jl:72.
│ Use `variable(p::PolyMatrix{T, M, Val{W}, N}) where {T, M, W, N}` instead.
└                                                        @ nothing methods.jl:72
┌ Warning: Deprecated syntax `parametric method syntax copy{T, M, W, N}(p::PolyMatrix{T, M, Val{W}, N})` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/methods.jl:76.
│ Use `copy(p::PolyMatrix{T, M, Val{W}, N}) where {T, M, W, N}` instead.
└                                                        @ nothing methods.jl:76
┌ Warning: Deprecated syntax `parametric method syntax Base.checkbounds{T, M, W, N}(p::PolyMatrix{T, M, Val{W}, N}, I...)` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/methods.jl:85.
│ Use `Base.checkbounds(p::PolyMatrix{T, M, Val{W}, N}, I...) where {T, M, W, N}` instead.
└                                                        @ nothing methods.jl:85
┌ Warning: Deprecated syntax `parametric method syntax getindex{T, M, W, N}(p::PolyMatrix{T, M, Val{W}, N}, i::Integer)` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/methods.jl:89.
│ Use `getindex(p::PolyMatrix{T, M, Val{W}, N}, i::Integer) where {T, M, W, N}` instead.
└                                                        @ nothing methods.jl:89
┌ Warning: Deprecated syntax `parametric method syntax getindex{T, M, W, N}(p::PolyMatrix{T, M, Val{W}, N}, i::Integer, j::Integer)` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/methods.jl:98.
│ Use `getindex(p::PolyMatrix{T, M, Val{W}, N}, i::Integer, j::Integer) where {T, M, W, N}` instead.
└                                                        @ nothing methods.jl:98
┌ Warning: Deprecated syntax `parametric method syntax getindex{T, M, W, N}(p::PolyMatrix{T, M, Val{W}, N}, I...)` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/methods.jl:106.
│ Use `getindex(p::PolyMatrix{T, M, Val{W}, N}, I...) where {T, M, W, N}` instead.
└                                                       @ nothing methods.jl:106
┌ Warning: Deprecated syntax `parametric method syntax _PolyMatrix{T, N}(p::Array{Poly{T}, N})` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/methods.jl:116.
│ Use `_PolyMatrix(p::Array{Poly{T}, N}) where {T, N}` instead.
└                                                       @ nothing methods.jl:116
┌ Warning: Deprecated syntax `parametric method syntax _PolyMatrix{T}(p::Poly{T})` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/methods.jl:117.
│ Use `_PolyMatrix(p::Poly{T}) where T` instead.
└                                                       @ nothing methods.jl:117
┌ Warning: Deprecated syntax `parametric method syntax setindex!{T, M, W, N, U}(Pm::PolyMatrix{T, M, Val{W}, N}, p::Poly{U}, i::Integer)` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/methods.jl:121.
│ Use `setindex!(Pm::PolyMatrix{T, M, Val{W}, N}, p::Poly{U}, i::Integer) where {T, M, W, N, U}` instead.
└                                                       @ nothing methods.jl:121
┌ Warning: Deprecated syntax `parametric method syntax setindex!{T, M, W, U}(Pm::PolyMatrix{T, M, Val{W}, 2}, p::Poly{U}, i::Integer, j::Integer)` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/methods.jl:147.
│ Use `setindex!(Pm::PolyMatrix{T, M, Val{W}, 2}, p::Poly{U}, i::Integer, j::Integer) where {T, M, W, U}` instead.
└                                                       @ nothing methods.jl:147
┌ Warning: Deprecated syntax `parametric method syntax setindex!{T, M, W, N, U}(Pm::PolyMatrix{T, M, Val{W}, N}, p::Poly{U}, I...)` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/methods.jl:173.
│ Use `setindex!(Pm::PolyMatrix{T, M, Val{W}, N}, p::Poly{U}, I...) where {T, M, W, N, U}` instead.
└                                                       @ nothing methods.jl:173
┌ Warning: Deprecated syntax `parametric method syntax setindex!{T, M, W, N, T2 <: Number}(Pm::PolyMatrix{T, M, Val{W}, N}, p::T2, i::Integer)` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/methods.jl:199.
│ Use `setindex!(Pm::PolyMatrix{T, M, Val{W}, N}, p::T2, i::Integer) where {T, M, W, N, T2 <: Number}` instead.
└                                                       @ nothing methods.jl:199
┌ Warning: Deprecated syntax `parametric method syntax setindex!{T, M, W, T2 <: Number}(Pm::PolyMatrix{T, M, Val{W}, 2}, p::T2, i::Integer, j::Integer)` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/methods.jl:217.
│ Use `setindex!(Pm::PolyMatrix{T, M, Val{W}, 2}, p::T2, i::Integer, j::Integer) where {T, M, W, T2 <: Number}` instead.
└                                                       @ nothing methods.jl:217
┌ Warning: Deprecated syntax `parametric method syntax setindex!{T, M, W, N, T2 <: Number}(Pm::PolyMatrix{T, M, Val{W}, N}, p::T2, I...)` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/methods.jl:235.
│ Use `setindex!(Pm::PolyMatrix{T, M, Val{W}, N}, p::T2, I...) where {T, M, W, N, T2 <: Number}` instead.
└                                                       @ nothing methods.jl:235
┌ Warning: Deprecated syntax `parametric method syntax insert!{T, M, W, N}(p::PolyMatrix{T, M, Val{W}, N}, k::Int, A)` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/methods.jl:252.
│ Use `insert!(p::PolyMatrix{T, M, Val{W}, N}, k::Int, A) where {T, M, W, N}` instead.
└                                                       @ nothing methods.jl:252
┌ Warning: Deprecated syntax `parametric method syntax degree{T, M, W, N}(p::PolyMatrix{T, M, Val{W}, N})` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/methods.jl:259.
│ Use `degree(p::PolyMatrix{T, M, Val{W}, N}) where {T, M, W, N}` instead.
└                                                       @ nothing methods.jl:259
┌ Warning: Deprecated syntax `parametric method syntax transpose{T, M <: AbstractMatrix, W, N}(p::PolyMatrix{T, M, Val{W}, N})` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/methods.jl:262.
│ Use `transpose(p::PolyMatrix{T, M, Val{W}, N}) where {T, M <: AbstractMatrix, W, N}` instead.
└                                                       @ nothing methods.jl:262
┌ Warning: Deprecated syntax `parametric method syntax ctranspose{T1, M1, W, N}(p::PolyMatrix{T1, M1, Val{W}, N})` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/methods.jl:270.
│ Use `ctranspose(p::PolyMatrix{T1, M1, Val{W}, N}) where {T1, M1, W, N}` instead.
└                                                       @ nothing methods.jl:270
┌ Warning: Deprecated syntax `parametric method syntax vecnorm{T1, M1, W, N}(p₁::PolyMatrix{T1, M1, Val{W}, N}, p::Real = 2)` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/methods.jl:286.
│ Use `vecnorm(p₁::PolyMatrix{T1, M1, Val{W}, N}, p::Real = 2) where {T1, M1, W, N}` instead.
└                                                       @ nothing methods.jl:286
┌ Warning: Deprecated syntax `parametric method syntax =={T1, M1, W, N, T2, M2}(p₁::PolyMatrix{T1, M1, Val{W}, N}, p₂::PolyMatrix{T2, M2, Val{W}, N})` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/methods.jl:291.
│ Use `==(p₁::PolyMatrix{T1, M1, Val{W}, N}, p₂::PolyMatrix{T2, M2, Val{W}, N}) where {T1, M1, W, N, T2, M2}` instead.
└                                                       @ nothing methods.jl:291
┌ Warning: Deprecated syntax `parametric method syntax =={T1, M1, W1, W2, N, T2, M2}(p₁::PolyMatrix{T1, M1, Val{W1}, N}, p₂::PolyMatrix{T2, M2, Val{W2}, N})` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/methods.jl:292.
│ Use `==(p₁::PolyMatrix{T1, M1, Val{W1}, N}, p₂::PolyMatrix{T2, M2, Val{W2}, N}) where {T1, M1, W1, W2, N, T2, M2}` instead.
└                                                       @ nothing methods.jl:292
┌ Warning: Deprecated syntax `parametric method syntax =={T1, M1, W, N, M2 <: AbstractArray}(p₁::PolyMatrix{T1, M1, Val{W}, N}, n::M2)` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/methods.jl:295.
│ Use `==(p₁::PolyMatrix{T1, M1, Val{W}, N}, n::M2) where {T1, M1, W, N, M2 <: AbstractArray}` instead.
└                                                       @ nothing methods.jl:295
┌ Warning: Deprecated syntax `parametric method syntax =={T1, M1, W, N, M2 <: AbstractArray}(n::M2, p₁::PolyMatrix{T1, M1, Val{W}, N})` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/methods.jl:307.
│ Use `==(n::M2, p₁::PolyMatrix{T1, M1, Val{W}, N}) where {T1, M1, W, N, M2 <: AbstractArray}` instead.
└                                                       @ nothing methods.jl:307
┌ Warning: Deprecated syntax `parametric method syntax hash{T1, M1, W, N}(p::PolyMatrix{T1, M1, Val{W}, N}, h::UInt)` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/methods.jl:309.
│ Use `hash(p::PolyMatrix{T1, M1, Val{W}, N}, h::UInt) where {T1, M1, W, N}` instead.
└                                                       @ nothing methods.jl:309
┌ Warning: Deprecated syntax `parametric method syntax isapprox{T1, M1, W, N, T2, M2}(p₁::PolyMatrix{T1, M1, Val{W}, N}, p₂::PolyMatrix{T2, M2, Val{W}, N}; rtol::Real = *(length(p₁), degree(p₁), degree(p₂), Base.rtoldefault(T1, T2)), atol::Real = 0, norm::Function = vecnorm)` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/methods.jl:315.
│ Use `isapprox(p₁::PolyMatrix{T1, M1, Val{W}, N}, p₂::PolyMatrix{T2, M2, Val{W}, N}; rtol::Real = *(length(p₁), degree(p₁), degree(p₂), Base.rtoldefault(T1, T2)), atol::Real = 0, norm::Function = vecnorm) where {T1, M1, W, N, T2, M2}` instead.
└                                                       @ nothing methods.jl:315
┌ Warning: Deprecated syntax `parametric method syntax isapprox{T1, M1, W1, W2, N, T2, M2}(p₁::PolyMatrix{T1, M1, Val{W1}, N}, p₂::PolyMatrix{T2, M2, Val{W2}, N}; rtol::Real = Base.rtoldefault(T1, T2), atol::Real = 0, norm::Function = vecnorm)` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/methods.jl:338.
│ Use `isapprox(p₁::PolyMatrix{T1, M1, Val{W1}, N}, p₂::PolyMatrix{T2, M2, Val{W2}, N}; rtol::Real = Base.rtoldefault(T1, T2), atol::Real = 0, norm::Function = vecnorm) where {T1, M1, W1, W2, N, T2, M2}` instead.
└                                                       @ nothing methods.jl:338
┌ Warning: Deprecated syntax `parametric method syntax isapprox{T1, M1, W, N, T2}(p₁::PolyMatrix{T1, M1, Val{W}, N}, n::AbstractArray{T2, N}; rtol::Real = Base.rtoldefault(T1, T2), atol::Real = 0, norm::Function = vecnorm)` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/methods.jl:345.
│ Use `isapprox(p₁::PolyMatrix{T1, M1, Val{W}, N}, n::AbstractArray{T2, N}; rtol::Real = Base.rtoldefault(T1, T2), atol::Real = 0, norm::Function = vecnorm) where {T1, M1, W, N, T2}` instead.
└                                                       @ nothing methods.jl:345
┌ Warning: Deprecated syntax `parametric method syntax isapprox{T1, M1, W, N, T2}(n::AbstractArray{T2, N}, p₁::PolyMatrix{T1, M1, Val{W}, N})` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/methods.jl:362.
│ Use `isapprox(n::AbstractArray{T2, N}, p₁::PolyMatrix{T1, M1, Val{W}, N}) where {T1, M1, W, N, T2}` instead.
└                                                       @ nothing methods.jl:362
┌ Warning: Deprecated syntax `parametric method syntax isapprox{T1, M1, W, N, T2}(p₁::PolyMatrix{T1, M1, Val{W}, N}, n::AbstractArray{Poly{T2}, N}; rtol::Real = Base.rtoldefault(T1, T2), atol::Real = 0, norm::Function = vecnorm)` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/methods.jl:367.
│ Use `isapprox(p₁::PolyMatrix{T1, M1, Val{W}, N}, n::AbstractArray{Poly{T2}, N}; rtol::Real = Base.rtoldefault(T1, T2), atol::Real = 0, norm::Function = vecnorm) where {T1, M1, W, N, T2}` instead.
└                                                       @ nothing methods.jl:367
┌ Warning: Deprecated syntax `parametric method syntax isapprox{T1, M1, W, N, T2}(n::AbstractArray{Poly{T2}, N}, p₁::PolyMatrix{T1, M1, Val{W}, N}; rtol::Real = Base.rtoldefault(T1, T2), atol::Real = 0, norm::Function = vecnorm)` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/methods.jl:373.
│ Use `isapprox(n::AbstractArray{Poly{T2}, N}, p₁::PolyMatrix{T1, M1, Val{W}, N}; rtol::Real = Base.rtoldefault(T1, T2), atol::Real = 0, norm::Function = vecnorm) where {T1, M1, W, N, T2}` instead.
└                                                       @ nothing methods.jl:373
┌ Warning: Deprecated syntax `parametric method syntax rank{T, M, W, N}(p::PolyMatrix{T, M, Val{W}, N})` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/methods.jl:378.
│ Use `rank(p::PolyMatrix{T, M, Val{W}, N}) where {T, M, W, N}` instead.
└                                                       @ nothing methods.jl:378
┌ Warning: Deprecated syntax `parametric method syntax fastrank{T, M, W, N}(p::PolyMatrix{T, M, Val{W}, N})` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/methods.jl:389.
│ Use `fastrank(p::PolyMatrix{T, M, Val{W}, N}) where {T, M, W, N}` instead.
└                                                       @ nothing methods.jl:389
┌ Warning: Deprecated syntax `parametric method syntax summary{T, M, W, N}(p::PolyMatrix{T, M, Val{W}, N})` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/methods.jl:391.
│ Use `summary(p::PolyMatrix{T, M, Val{W}, N}) where {T, M, W, N}` instead.
└                                                       @ nothing methods.jl:391
┌ Warning: Deprecated syntax `parametric method syntax promote_rule{T1, T2, M1, M2, W, N}(::Type{PolyMatrix{T1, M1, Val{W}, N}}, ::Type{PolyMatrix{T2, M2, Val{W}, N}})` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/conversions.jl:3.
│ Use `promote_rule(#unused#::Type{PolyMatrix{T1, M1, Val{W}, N}}, #unused#::Type{PolyMatrix{T2, M2, Val{W}, N}}) where {T1, T2, M1, M2, W, N}` instead.
└                                                     @ nothing conversions.jl:3
┌ Warning: Deprecated syntax `parametric method syntax _convert{T1, N, T2, M1, M2, W}(::Type{PolyMatrix{T1, M1, Val{W}, N}}, p::PolyMatrix{T2, M2, Val{W}, N})` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/conversions.jl:8.
│ Use `_convert(#unused#::Type{PolyMatrix{T1, M1, Val{W}, N}}, p::PolyMatrix{T2, M2, Val{W}, N}) where {T1, N, T2, M1, M2, W}` instead.
└                                                     @ nothing conversions.jl:8
┌ Warning: Deprecated syntax `parametric method syntax convert{T1, N, T2, M1, M2, W}(::Type{PolyMatrix{T1, M1, Val{W}, N}}, p::PolyMatrix{T2, M2, Val{W}, N})` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/conversions.jl:17.
│ Use `convert(#unused#::Type{PolyMatrix{T1, M1, Val{W}, N}}, p::PolyMatrix{T2, M2, Val{W}, N}) where {T1, N, T2, M1, M2, W}` instead.
└                                                    @ nothing conversions.jl:17
┌ Warning: Deprecated syntax `parametric method syntax promote_rule{T1, T2, M1, W, N}(::Type{PolyMatrix{T1, M1, Val{W}, N}}, ::Type{AbstractArray{T2, N}})` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/conversions.jl:28.
│ Use `promote_rule(#unused#::Type{PolyMatrix{T1, M1, Val{W}, N}}, #unused#::Type{AbstractArray{T2, N}}) where {T1, T2, M1, W, N}` instead.
└                                                    @ nothing conversions.jl:28
┌ Warning: Deprecated syntax `parametric method syntax convert{T1, T2, M1, W, N}(::Type{PolyMatrix{T1, M1, Val{W}, N}}, p::AbstractArray{T2, N})` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/conversions.jl:31.
│ Use `convert(#unused#::Type{PolyMatrix{T1, M1, Val{W}, N}}, p::AbstractArray{T2, N}) where {T1, T2, M1, W, N}` instead.
└                                                    @ nothing conversions.jl:31
┌ Warning: Deprecated syntax `parametric method syntax +{T1, M1, W, N, T2, M2}(p1::PolyMatrix{T1, M1, Val{W}, N}, p2::PolyMatrix{T2, M2, Val{W}, N})` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/arithmetic.jl:3.
│ Use `+(p1::PolyMatrix{T1, M1, Val{W}, N}, p2::PolyMatrix{T2, M2, Val{W}, N}) where {T1, M1, W, N, T2, M2}` instead.
└                                                      @ nothing arithmetic.jl:3
┌ Warning: Deprecated syntax `parametric method syntax _add{T1, M1, W, N, T2, M2}(p1::PolyMatrix{T1, M1, Val{W}, N}, p2::PolyMatrix{T2, M2, Val{W}, N})` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/arithmetic.jl:12.
│ Use `_add(p1::PolyMatrix{T1, M1, Val{W}, N}, p2::PolyMatrix{T2, M2, Val{W}, N}) where {T1, M1, W, N, T2, M2}` instead.
└                                                     @ nothing arithmetic.jl:12
┌ Warning: Deprecated syntax `parametric method syntax _add{T1, M1, W, N, T2 <: Poly}(p1::PolyMatrix{T1, M1, Val{W}, N}, p2::T2)` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/arithmetic.jl:36.
│ Use `_add(p1::PolyMatrix{T1, M1, Val{W}, N}, p2::T2) where {T1, M1, W, N, T2 <: Poly}` instead.
└                                                     @ nothing arithmetic.jl:36
┌ Warning: Deprecated syntax `parametric method syntax +{T1, M1, W1, W2, N, T2, M2}(p1::PolyMatrix{T1, M1, Val{W1}, N}, p2::PolyMatrix{T2, M2, Val{W2}, N})` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/arithmetic.jl:60.
│ Use `+(p1::PolyMatrix{T1, M1, Val{W1}, N}, p2::PolyMatrix{T2, M2, Val{W2}, N}) where {T1, M1, W1, W2, N, T2, M2}` instead.
└                                                     @ nothing arithmetic.jl:60
┌ Warning: Deprecated syntax `parametric method syntax -{T1, M1, W, N}(p::PolyMatrix{T1, M1, Val{W}, N})` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/arithmetic.jl:66.
│ Use `-(p::PolyMatrix{T1, M1, Val{W}, N}) where {T1, M1, W, N}` instead.
└                                                     @ nothing arithmetic.jl:66
┌ Warning: Deprecated syntax `parametric method syntax -{T1, M1, W, N, T2, M2}(p1::PolyMatrix{T1, M1, Val{W}, N}, p2::PolyMatrix{T2, M2, Val{W}, N})` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/arithmetic.jl:73.
│ Use `-(p1::PolyMatrix{T1, M1, Val{W}, N}, p2::PolyMatrix{T2, M2, Val{W}, N}) where {T1, M1, W, N, T2, M2}` instead.
└                                                     @ nothing arithmetic.jl:73
┌ Warning: Deprecated syntax `parametric method syntax -{T1, M1, W1, W2, N, T2, M2}(p1::PolyMatrix{T1, M1, Val{W1}, N}, p2::PolyMatrix{T2, M2, Val{W2}, N})` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/arithmetic.jl:76.
│ Use `-(p1::PolyMatrix{T1, M1, Val{W1}, N}, p2::PolyMatrix{T2, M2, Val{W2}, N}) where {T1, M1, W1, W2, N, T2, M2}` instead.
└                                                     @ nothing arithmetic.jl:76
┌ Warning: Deprecated syntax `parametric method syntax *{T1, M1, W, T2, M2}(p1::PolyMatrix{T1, M1, Val{W}, 2}, p2::PolyMatrix{T2, M2, Val{W}, 2})` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/arithmetic.jl:84.
│ Use `*(p1::PolyMatrix{T1, M1, Val{W}, 2}, p2::PolyMatrix{T2, M2, Val{W}, 2}) where {T1, M1, W, T2, M2}` instead.
└                                                     @ nothing arithmetic.jl:84
┌ Warning: Deprecated syntax `parametric method syntax *{T1, M1, W, T2, M2}(p1::PolyMatrix{T1, M1, Val{W}, 2}, p2::PolyMatrix{T2, M2, Val{W}, 1})` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/arithmetic.jl:92.
│ Use `*(p1::PolyMatrix{T1, M1, Val{W}, 2}, p2::PolyMatrix{T2, M2, Val{W}, 1}) where {T1, M1, W, T2, M2}` instead.
└                                                     @ nothing arithmetic.jl:92
┌ Warning: Deprecated syntax `parametric method syntax _mul{T1, T2}(p1::T1, p2::T2)` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/arithmetic.jl:100.
│ Use `_mul(p1::T1, p2::T2) where {T1, T2}` instead.
└                                                    @ nothing arithmetic.jl:100
┌ Warning: Deprecated syntax `parametric method syntax _mulconv{T1, M1, W, T2, M2, N}(p1::PolyMatrix{T1, M1, Val{W}, 2}, p2::PolyMatrix{T2, M2, Val{W}, N})` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/arithmetic.jl:113.
│ Use `_mulconv(p1::PolyMatrix{T1, M1, Val{W}, 2}, p2::PolyMatrix{T2, M2, Val{W}, N}) where {T1, M1, W, T2, M2, N}` instead.
└                                                    @ nothing arithmetic.jl:113
┌ Warning: Deprecated syntax `parametric method syntax _mulconv{T1, M1, W, N, T2 <: Poly}(p1::PolyMatrix{T1, M1, Val{W}, N}, p2::T2)` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/arithmetic.jl:141.
│ Use `_mulconv(p1::PolyMatrix{T1, M1, Val{W}, N}, p2::T2) where {T1, M1, W, N, T2 <: Poly}` instead.
└                                                    @ nothing arithmetic.jl:141
┌ Warning: Deprecated syntax `parametric method syntax _keys{T}(c::T)` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/arithmetic.jl:168.
│ Use `_keys(c::T) where T` instead.
└                                                    @ nothing arithmetic.jl:168
┌ Warning: Deprecated syntax `parametric method syntax _keys{T <: AbstractArray}(c::T)` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/arithmetic.jl:169.
│ Use `_keys(c::T) where T <: AbstractArray` instead.
└                                                    @ nothing arithmetic.jl:169
┌ Warning: Deprecated syntax `parametric method syntax _mulfft{T1, M1, W, T2, M2, N}(p1::PolyMatrix{T1, M1, Val{W}, 2}, p2::PolyMatrix{T2, M2, Val{W}, N})` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/arithmetic.jl:173.
│ Use `_mulfft(p1::PolyMatrix{T1, M1, Val{W}, 2}, p2::PolyMatrix{T2, M2, Val{W}, N}) where {T1, M1, W, T2, M2, N}` instead.
└                                                    @ nothing arithmetic.jl:173
┌ Warning: Deprecated syntax `parametric method syntax _mulfft{T1, M1, W, N, T2}(p1::PolyMatrix{T1, M1, Val{W}, N}, p2::Poly{T2})` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/arithmetic.jl:199.
│ Use `_mulfft(p1::PolyMatrix{T1, M1, Val{W}, N}, p2::Poly{T2}) where {T1, M1, W, N, T2}` instead.
└                                                    @ nothing arithmetic.jl:199
┌ Warning: Deprecated syntax `parametric method syntax _fftmatrix{T1, M1, W1, N, T}(p::PolyMatrix{T1, M1, Val{W1}, N}, ::Type{T}, dn::Integer)` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/arithmetic.jl:225.
│ Use `_fftmatrix(p::PolyMatrix{T1, M1, Val{W1}, N}, #unused#::Type{T}, dn::Integer) where {T1, M1, W1, N, T}` instead.
└                                                    @ nothing arithmetic.jl:225
┌ Warning: Deprecated syntax `parametric method syntax _fftmatrix{T1, T}(p::Poly{T1}, ::Type{T}, dn::Integer)` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/arithmetic.jl:233.
│ Use `_fftmatrix(p::Poly{T1}, #unused#::Type{T}, dn::Integer) where {T1, T}` instead.
└                                                    @ nothing arithmetic.jl:233
┌ Warning: Deprecated syntax `parametric method syntax *{T1, M1, W1, W2, N, T2, M2}(p1::PolyMatrix{T1, M1, Val{W1}, N}, p2::PolyMatrix{T2, M2, Val{W2}, N})` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/arithmetic.jl:242.
│ Use `*(p1::PolyMatrix{T1, M1, Val{W1}, N}, p2::PolyMatrix{T2, M2, Val{W2}, N}) where {T1, M1, W1, W2, N, T2, M2}` instead.
└                                                    @ nothing arithmetic.jl:242
┌ Warning: Deprecated syntax `parametric method syntax +{T, M1, W, N, M2 <: AbstractArray}(p1::PolyMatrix{T, M1, Val{W}, N}, p2::M2)` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/arithmetic.jl:247.
│ Use `+(p1::PolyMatrix{T, M1, Val{W}, N}, p2::M2) where {T, M1, W, N, M2 <: AbstractArray}` instead.
└                                                    @ nothing arithmetic.jl:247
┌ Warning: Deprecated syntax `parametric method syntax +{T, M1, W, N, M2 <: AbstractArray}(p1::M2, p2::PolyMatrix{T, M1, Val{W}, N})` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/arithmetic.jl:248.
│ Use `+(p1::M2, p2::PolyMatrix{T, M1, Val{W}, N}) where {T, M1, W, N, M2 <: AbstractArray}` instead.
└                                                    @ nothing arithmetic.jl:248
┌ Warning: Deprecated syntax `parametric method syntax -{T, M1, W, N, M2 <: AbstractArray}(p1::PolyMatrix{T, M1, Val{W}, N}, p2::M2)` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/arithmetic.jl:250.
│ Use `-(p1::PolyMatrix{T, M1, Val{W}, N}, p2::M2) where {T, M1, W, N, M2 <: AbstractArray}` instead.
└                                                    @ nothing arithmetic.jl:250
┌ Warning: Deprecated syntax `parametric method syntax -{T, M1, W, N, M2 <: AbstractArray}(p1::M2, p2::PolyMatrix{T, M1, Val{W}, N})` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/arithmetic.jl:251.
│ Use `-(p1::M2, p2::PolyMatrix{T, M1, Val{W}, N}) where {T, M1, W, N, M2 <: AbstractArray}` instead.
└                                                    @ nothing arithmetic.jl:251
┌ Warning: Deprecated syntax `parametric method syntax *{T, M1, W, N, S}(p1::PolyMatrix{T, M1, Val{W}, N}, p2::AbstractArray{S, 2})` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/arithmetic.jl:253.
│ Use `*(p1::PolyMatrix{T, M1, Val{W}, N}, p2::AbstractArray{S, 2}) where {T, M1, W, N, S}` instead.
└                                                    @ nothing arithmetic.jl:253
┌ Warning: Deprecated syntax `parametric method syntax *{T, M1, W, N, S}(p2::AbstractArray{S, 2}, p1::PolyMatrix{T, M1, Val{W}, N})` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/arithmetic.jl:254.
│ Use `*(p2::AbstractArray{S, 2}, p1::PolyMatrix{T, M1, Val{W}, N}) where {T, M1, W, N, S}` instead.
└                                                    @ nothing arithmetic.jl:254
┌ Warning: Deprecated syntax `parametric method syntax *{T, M1, W, N, S <: Number}(p1::PolyMatrix{T, M1, Val{W}, N}, p2::AbstractArray{S, 1})` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/arithmetic.jl:256.
│ Use `*(p1::PolyMatrix{T, M1, Val{W}, N}, p2::AbstractArray{S, 1}) where {T, M1, W, N, S <: Number}` instead.
└                                                    @ nothing arithmetic.jl:256
┌ Warning: Deprecated syntax `parametric method syntax +{T, M1, W, N, M2 <: Poly}(p1::PolyMatrix{T, M1, Val{W}, N}, p2::M2)` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/arithmetic.jl:259.
│ Use `+(p1::PolyMatrix{T, M1, Val{W}, N}, p2::M2) where {T, M1, W, N, M2 <: Poly}` instead.
└                                                    @ nothing arithmetic.jl:259
┌ Warning: Deprecated syntax `parametric method syntax +{T, M1, W, N, M2 <: Poly}(p1::M2, p2::PolyMatrix{T, M1, Val{W}, N})` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/arithmetic.jl:260.
│ Use `+(p1::M2, p2::PolyMatrix{T, M1, Val{W}, N}) where {T, M1, W, N, M2 <: Poly}` instead.
└                                                    @ nothing arithmetic.jl:260
┌ Warning: Deprecated syntax `parametric method syntax -{T, M1, W, N, M2 <: Poly}(p1::PolyMatrix{T, M1, Val{W}, N}, p2::M2)` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/arithmetic.jl:262.
│ Use `-(p1::PolyMatrix{T, M1, Val{W}, N}, p2::M2) where {T, M1, W, N, M2 <: Poly}` instead.
└                                                    @ nothing arithmetic.jl:262
┌ Warning: Deprecated syntax `parametric method syntax -{T, M1, W, N, M2 <: Poly}(p1::M2, p2::PolyMatrix{T, M1, Val{W}, N})` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/arithmetic.jl:263.
│ Use `-(p1::M2, p2::PolyMatrix{T, M1, Val{W}, N}) where {T, M1, W, N, M2 <: Poly}` instead.
└                                                    @ nothing arithmetic.jl:263
┌ Warning: Deprecated syntax `parametric method syntax *{T, M1, W, N, M2 <: Poly}(p1::PolyMatrix{T, M1, Val{W}, N}, p2::M2)` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/arithmetic.jl:265.
│ Use `*(p1::PolyMatrix{T, M1, Val{W}, N}, p2::M2) where {T, M1, W, N, M2 <: Poly}` instead.
└                                                    @ nothing arithmetic.jl:265
┌ Warning: Deprecated syntax `parametric method syntax *{T, M1, W, N, M2 <: Poly}(p1::M2, p2::PolyMatrix{T, M1, Val{W}, N})` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/arithmetic.jl:266.
│ Use `*(p1::M2, p2::PolyMatrix{T, M1, Val{W}, N}) where {T, M1, W, N, M2 <: Poly}` instead.
└                                                    @ nothing arithmetic.jl:266
┌ Warning: Deprecated syntax `parametric method syntax _add{T1, M1, W, N, T2 <: Number}(p1::PolyMatrix{T1, M1, Val{W}, N}, v2::T2)` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/arithmetic.jl:270.
│ Use `_add(p1::PolyMatrix{T1, M1, Val{W}, N}, v2::T2) where {T1, M1, W, N, T2 <: Number}` instead.
└                                                    @ nothing arithmetic.jl:270
┌ Warning: Deprecated syntax `parametric method syntax +{T, M1, W, N, M2 <: Number}(p1::PolyMatrix{T, M1, Val{W}, N}, p2::M2)` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/arithmetic.jl:283.
│ Use `+(p1::PolyMatrix{T, M1, Val{W}, N}, p2::M2) where {T, M1, W, N, M2 <: Number}` instead.
└                                                    @ nothing arithmetic.jl:283
┌ Warning: Deprecated syntax `parametric method syntax +{T, M1, W, N, M2 <: Number}(p1::M2, p2::PolyMatrix{T, M1, Val{W}, N})` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/arithmetic.jl:284.
│ Use `+(p1::M2, p2::PolyMatrix{T, M1, Val{W}, N}) where {T, M1, W, N, M2 <: Number}` instead.
└                                                    @ nothing arithmetic.jl:284
┌ Warning: Deprecated syntax `parametric method syntax -{T, M1, W, N, M2 <: Number}(p1::PolyMatrix{T, M1, Val{W}, N}, p2::M2)` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/arithmetic.jl:286.
│ Use `-(p1::PolyMatrix{T, M1, Val{W}, N}, p2::M2) where {T, M1, W, N, M2 <: Number}` instead.
└                                                    @ nothing arithmetic.jl:286
┌ Warning: Deprecated syntax `parametric method syntax -{T, M1, W, N, M2 <: Number}(p1::M2, p2::PolyMatrix{T, M1, Val{W}, N})` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/arithmetic.jl:287.
│ Use `-(p1::M2, p2::PolyMatrix{T, M1, Val{W}, N}) where {T, M1, W, N, M2 <: Number}` instead.
└                                                    @ nothing arithmetic.jl:287
┌ Warning: Deprecated syntax `parametric method syntax _mul{T1, M1, W, N, T2 <: Number}(p1::PolyMatrix{T1, M1, Val{W}, N}, v2::T2)` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/arithmetic.jl:290.
│ Use `_mul(p1::PolyMatrix{T1, M1, Val{W}, N}, v2::T2) where {T1, M1, W, N, T2 <: Number}` instead.
└                                                    @ nothing arithmetic.jl:290
┌ Warning: Deprecated syntax `parametric method syntax *{T, M1, W, N, M2 <: Number}(p1::PolyMatrix{T, M1, Val{W}, N}, p2::M2)` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/arithmetic.jl:302.
│ Use `*(p1::PolyMatrix{T, M1, Val{W}, N}, p2::M2) where {T, M1, W, N, M2 <: Number}` instead.
└                                                    @ nothing arithmetic.jl:302
┌ Warning: Deprecated syntax `parametric method syntax *{T, M1, W, N, M2 <: Number}(p1::M2, p2::PolyMatrix{T, M1, Val{W}, N})` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/arithmetic.jl:303.
│ Use `*(p1::M2, p2::PolyMatrix{T, M1, Val{W}, N}) where {T, M1, W, N, M2 <: Number}` instead.
└                                                    @ nothing arithmetic.jl:303
┌ Warning: Deprecated syntax `parametric method syntax /{T, M1, W, N, M2 <: Number}(p1::PolyMatrix{T, M1, Val{W}, N}, p2::M2)` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/arithmetic.jl:305.
│ Use `/(p1::PolyMatrix{T, M1, Val{W}, N}, p2::M2) where {T, M1, W, N, M2 <: Number}` instead.
└                                                    @ nothing arithmetic.jl:305
┌ Warning: Deprecated syntax `parametric method syntax Base.LinAlg.At_mul_B{T1, M1, W, N1, T2, N2}(p1::PolyMatrix{T1, M1, Val{W}, N1}, p2::AbstractArray{T2, N2})` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/arithmetic.jl:310.
│ Use `Base.LinAlg.At_mul_B(p1::PolyMatrix{T1, M1, Val{W}, N1}, p2::AbstractArray{T2, N2}) where {T1, M1, W, N1, T2, N2}` instead.
└                                                    @ nothing arithmetic.jl:310
┌ Warning: Deprecated syntax `parametric method syntax Base.LinAlg.A_mul_Bt{T1, M1, W, N1, T2, N2}(p1::PolyMatrix{T1, M1, Val{W}, N1}, p2::AbstractArray{T2, N2})` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/arithmetic.jl:313.
│ Use `Base.LinAlg.A_mul_Bt(p1::PolyMatrix{T1, M1, Val{W}, N1}, p2::AbstractArray{T2, N2}) where {T1, M1, W, N1, T2, N2}` instead.
└                                                    @ nothing arithmetic.jl:313
┌ Warning: Deprecated syntax `parametric method syntax Base.LinAlg.At_mul_Bt{T1, M1, W, N1, T2, N2}(p1::PolyMatrix{T1, M1, Val{W}, N1}, p2::AbstractArray{T2, N2})` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/arithmetic.jl:316.
│ Use `Base.LinAlg.At_mul_Bt(p1::PolyMatrix{T1, M1, Val{W}, N1}, p2::AbstractArray{T2, N2}) where {T1, M1, W, N1, T2, N2}` instead.
└                                                    @ nothing arithmetic.jl:316
┌ Warning: Deprecated syntax `parametric method syntax Base.LinAlg.Ac_mul_B{T1, M1, W, N1, T2, N2}(p1::PolyMatrix{T1, M1, Val{W}, N1}, p2::AbstractArray{T2, N2})` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/arithmetic.jl:320.
│ Use `Base.LinAlg.Ac_mul_B(p1::PolyMatrix{T1, M1, Val{W}, N1}, p2::AbstractArray{T2, N2}) where {T1, M1, W, N1, T2, N2}` instead.
└                                                    @ nothing arithmetic.jl:320
┌ Warning: Deprecated syntax `parametric method syntax Base.LinAlg.A_mul_Bc{T1, M1, W, N1, T2, N2}(p1::PolyMatrix{T1, M1, Val{W}, N1}, p2::AbstractArray{T2, N2})` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/arithmetic.jl:323.
│ Use `Base.LinAlg.A_mul_Bc(p1::PolyMatrix{T1, M1, Val{W}, N1}, p2::AbstractArray{T2, N2}) where {T1, M1, W, N1, T2, N2}` instead.
└                                                    @ nothing arithmetic.jl:323
┌ Warning: Deprecated syntax `parametric method syntax Base.LinAlg.Ac_mul_Bc{T1, M1, W, N1, T2, N2}(p1::PolyMatrix{T1, M1, Val{W}, N1}, p2::AbstractArray{T2, N2})` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/arithmetic.jl:326.
│ Use `Base.LinAlg.Ac_mul_Bc(p1::PolyMatrix{T1, M1, Val{W}, N1}, p2::AbstractArray{T2, N2}) where {T1, M1, W, N1, T2, N2}` instead.
└                                                    @ nothing arithmetic.jl:326
┌ Warning: Deprecated syntax `parametric method syntax Base.LinAlg.At_mul_B{T1, M1, W, N1, T2, M2, N2}(p1::PolyMatrix{T1, M1, Val{W}, N1}, p2::PolyMatrix{T2, M2, Val{W}, N2})` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/arithmetic.jl:331.
│ Use `Base.LinAlg.At_mul_B(p1::PolyMatrix{T1, M1, Val{W}, N1}, p2::PolyMatrix{T2, M2, Val{W}, N2}) where {T1, M1, W, N1, T2, M2, N2}` instead.
└                                                    @ nothing arithmetic.jl:331
┌ Warning: Deprecated syntax `parametric method syntax Base.LinAlg.A_mul_Bt{T1, M1, W, N1, T2, M2, N2}(p1::PolyMatrix{T1, M1, Val{W}, N1}, p2::PolyMatrix{T2, M2, Val{W}, N2})` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/arithmetic.jl:334.
│ Use `Base.LinAlg.A_mul_Bt(p1::PolyMatrix{T1, M1, Val{W}, N1}, p2::PolyMatrix{T2, M2, Val{W}, N2}) where {T1, M1, W, N1, T2, M2, N2}` instead.
└                                                    @ nothing arithmetic.jl:334
┌ Warning: Deprecated syntax `parametric method syntax Base.LinAlg.At_mul_Bt{T1, M1, W, N1, T2, M2, N2}(p1::PolyMatrix{T1, M1, Val{W}, N1}, p2::PolyMatrix{T2, M2, Val{W}, N2})` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/arithmetic.jl:337.
│ Use `Base.LinAlg.At_mul_Bt(p1::PolyMatrix{T1, M1, Val{W}, N1}, p2::PolyMatrix{T2, M2, Val{W}, N2}) where {T1, M1, W, N1, T2, M2, N2}` instead.
└                                                    @ nothing arithmetic.jl:337
┌ Warning: Deprecated syntax `parametric method syntax Base.LinAlg.Ac_mul_B{T1, M1, W, N1, T2, M2, N2}(p1::PolyMatrix{T1, M1, Val{W}, N1}, p2::PolyMatrix{T2, M2, Val{W}, N2})` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/arithmetic.jl:341.
│ Use `Base.LinAlg.Ac_mul_B(p1::PolyMatrix{T1, M1, Val{W}, N1}, p2::PolyMatrix{T2, M2, Val{W}, N2}) where {T1, M1, W, N1, T2, M2, N2}` instead.
└                                                    @ nothing arithmetic.jl:341
┌ Warning: Deprecated syntax `parametric method syntax Base.LinAlg.A_mul_Bc{T1, M1, W, N1, T2, M2, N2}(p1::PolyMatrix{T1, M1, Val{W}, N1}, p2::PolyMatrix{T2, M2, Val{W}, N2})` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/arithmetic.jl:344.
│ Use `Base.LinAlg.A_mul_Bc(p1::PolyMatrix{T1, M1, Val{W}, N1}, p2::PolyMatrix{T2, M2, Val{W}, N2}) where {T1, M1, W, N1, T2, M2, N2}` instead.
└                                                    @ nothing arithmetic.jl:344
┌ Warning: Deprecated syntax `parametric method syntax Base.LinAlg.Ac_mul_Bc{T1, M1, W, N1, T2, M2, N2}(p1::PolyMatrix{T1, M1, Val{W}, N1}, p2::PolyMatrix{T2, M2, Val{W}, N2})` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/arithmetic.jl:347.
│ Use `Base.LinAlg.Ac_mul_Bc(p1::PolyMatrix{T1, M1, Val{W}, N1}, p2::PolyMatrix{T2, M2, Val{W}, N2}) where {T1, M1, W, N1, T2, M2, N2}` instead.
└                                                    @ nothing arithmetic.jl:347
┌ Warning: Deprecated syntax `parametric method syntax det{T, M, W, N}(p::PolyMatrix{T, M, Val{W}, N})` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/arithmetic.jl:351.
│ Use `det(p::PolyMatrix{T, M, Val{W}, N}) where {T, M, W, N}` instead.
└                                                    @ nothing arithmetic.jl:351
┌ Warning: Deprecated syntax `parametric method syntax _truncate{T <: Real, T2}(::Type{T}, a::AbstractArray{T2})` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/arithmetic.jl:368.
│ Use `_truncate(#unused#::Type{T}, a::AbstractArray{T2}) where {T <: Real, T2}` instead.
└                                                    @ nothing arithmetic.jl:368
┌ Warning: Deprecated syntax `parametric method syntax _truncate{T <: Integer, T2}(::Type{T}, a::AbstractArray{T2})` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/arithmetic.jl:373.
│ Use `_truncate(#unused#::Type{T}, a::AbstractArray{T2}) where {T <: Integer, T2}` instead.
└                                                    @ nothing arithmetic.jl:373
┌ Warning: Deprecated syntax `parametric method syntax inv{T, M, W, N}(p::PolyMatrix{T, M, Val{W}, N})` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/arithmetic.jl:383.
│ Use `inv(p::PolyMatrix{T, M, Val{W}, N}) where {T, M, W, N}` instead.
└                                                    @ nothing arithmetic.jl:383
┌ Warning: Deprecated syntax `1./` at /home/vagrant/.julia/v0.7/PolynomialMatrices/src/reductions.jl:121.
│ Use `1 ./` instead.
└                                                    @ nothing reductions.jl:121
┌ Warning: Deprecated syntax `parametric method syntax gcrd{T1, M1, W, N, T2, M2}(p₁::PolyMatrix{T1, M1, Val{W}, N}, p₂::PolyMatrix{T2, M2, Val{W}, N}, iterative::Bool = true, dᵤ::Int = -1)` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/reductions.jl:33.
│ Use `gcrd(p₁::PolyMatrix{T1, M1, Val{W}, N}, p₂::PolyMatrix{T2, M2, Val{W}, N}, iterative::Bool = true, dᵤ::Int = -1) where {T1, M1, W, N, T2, M2}` instead.
└                                                     @ nothing reductions.jl:33
┌ Warning: Deprecated syntax `parametric method syntax gcld{T1, M1, W, N, T2, M2}(p₁::PolyMatrix{T1, M1, Val{W}, N}, p₂::PolyMatrix{T2, M2, Val{W}, N}, iterative::Bool = true, dᵤ::Int = -1)` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/reductions.jl:76.
│ Use `gcld(p₁::PolyMatrix{T1, M1, Val{W}, N}, p₂::PolyMatrix{T2, M2, Val{W}, N}, iterative::Bool = true, dᵤ::Int = -1) where {T1, M1, W, N, T2, M2}` instead.
└                                                     @ nothing reductions.jl:76
┌ Warning: Deprecated syntax `parametric method syntax hermite{T1, M, W, N}(p::PolyMatrix{T1, M, Val{W}, N}, iterative::Bool = true, dᵤ::Int = -1)` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/reductions.jl:116.
│ Use `hermite(p::PolyMatrix{T1, M, Val{W}, N}, iterative::Bool = true, dᵤ::Int = -1) where {T1, M, W, N}` instead.
└                                                    @ nothing reductions.jl:116
┌ Warning: Deprecated syntax `parametric method syntax ltriang{T1, M, W, N}(p::PolyMatrix{T1, M, Val{W}, N}, iterative::Bool = true, dᵤ::Int = -1)` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/reductions.jl:172.
│ Use `ltriang(p::PolyMatrix{T1, M, Val{W}, N}, iterative::Bool = true, dᵤ::Int = -1) where {T1, M, W, N}` instead.
└                                                    @ nothing reductions.jl:172
┌ Warning: Deprecated syntax `parametric method syntax rtriang{T1, M, W, N}(p::PolyMatrix{T1, M, Val{W}, N}, iterative::Bool = true, dᵤ::Int = -1)` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/reductions.jl:213.
│ Use `rtriang(p::PolyMatrix{T1, M, Val{W}, N}, iterative::Bool = true, dᵤ::Int = -1) where {T1, M, W, N}` instead.
└                                                    @ nothing reductions.jl:213
┌ Warning: The syntax `.'` for transposition is deprecated, and the special lowering of `.'` in multiplication (`*`), left-division (`\`), and right-division (`/`) operations, for example `A.'*B` lowering to `At_mul_B(A, B)`, `A\B.'` lowering to `A_ldiv_Bt(A, B)`, and `A.'/B.'` lowering to `At_rdiv_Bt(A, B)`, has been removed in favor of a lazy `Transpose` wrapper type and dispatch on that type. Two rewrites for `A.'` for matrix `A` exist: eager or materializing `transpose(A)`, which constructs a freshly allocated matrix of `A`'s type and containing the transpose of `A`, and lazy `Transpose(A)`, which wraps `A` in a `Transpose` view type. Which rewrite is appropriate depends on context: If `A.'` appears in a multiplication, left-division, or right-division operation that was formerly specially lowered to an `A_mul_B`-like call, then the lazy `Tranpose(A)` is the correct replacement and will result in dispatch to a method equivalent to the former `A_mul_B`-like call. For example, `A.'*B`, formerly yielding `At_mul_B(A, B)`, should be rewritten `Transpose(A)*B`, which will dispatch to a method equivalent to the former `At_mul_B(A, B)` method. If `A.'` appears outside such an operation, then `transpose(A)` is the correct rewrite. For vector `A`, `A.'` already transposed lazily to a `RowVector`, so `Transpose(A)`. which now yields a `Transpose`-wrapped vector behaviorally equivalent to the former `RowVector` is always the correct rewrite for vectors. For more information, see issue #5332 on Julia's issue tracker on GitHub.
└                                                               @ nothing none:0
┌ Warning: The syntax `.'` for transposition is deprecated, and the special lowering of `.'` in multiplication (`*`), left-division (`\`), and right-division (`/`) operations, for example `A.'*B` lowering to `At_mul_B(A, B)`, `A\B.'` lowering to `A_ldiv_Bt(A, B)`, and `A.'/B.'` lowering to `At_rdiv_Bt(A, B)`, has been removed in favor of a lazy `Transpose` wrapper type and dispatch on that type. Two rewrites for `A.'` for matrix `A` exist: eager or materializing `transpose(A)`, which constructs a freshly allocated matrix of `A`'s type and containing the transpose of `A`, and lazy `Transpose(A)`, which wraps `A` in a `Transpose` view type. Which rewrite is appropriate depends on context: If `A.'` appears in a multiplication, left-division, or right-division operation that was formerly specially lowered to an `A_mul_B`-like call, then the lazy `Tranpose(A)` is the correct replacement and will result in dispatch to a method equivalent to the former `A_mul_B`-like call. For example, `A.'*B`, formerly yielding `At_mul_B(A, B)`, should be rewritten `Transpose(A)*B`, which will dispatch to a method equivalent to the former `At_mul_B(A, B)` method. If `A.'` appears outside such an operation, then `transpose(A)` is the correct rewrite. For vector `A`, `A.'` already transposed lazily to a `RowVector`, so `Transpose(A)`. which now yields a `Transpose`-wrapped vector behaviorally equivalent to the former `RowVector` is always the correct rewrite for vectors. For more information, see issue #5332 on Julia's issue tracker on GitHub.
└                                                               @ nothing none:0
┌ Warning: The syntax `.'` for transposition is deprecated, and the special lowering of `.'` in multiplication (`*`), left-division (`\`), and right-division (`/`) operations, for example `A.'*B` lowering to `At_mul_B(A, B)`, `A\B.'` lowering to `A_ldiv_Bt(A, B)`, and `A.'/B.'` lowering to `At_rdiv_Bt(A, B)`, has been removed in favor of a lazy `Transpose` wrapper type and dispatch on that type. Two rewrites for `A.'` for matrix `A` exist: eager or materializing `transpose(A)`, which constructs a freshly allocated matrix of `A`'s type and containing the transpose of `A`, and lazy `Transpose(A)`, which wraps `A` in a `Transpose` view type. Which rewrite is appropriate depends on context: If `A.'` appears in a multiplication, left-division, or right-division operation that was formerly specially lowered to an `A_mul_B`-like call, then the lazy `Tranpose(A)` is the correct replacement and will result in dispatch to a method equivalent to the former `A_mul_B`-like call. For example, `A.'*B`, formerly yielding `At_mul_B(A, B)`, should be rewritten `Transpose(A)*B`, which will dispatch to a method equivalent to the former `At_mul_B(A, B)` method. If `A.'` appears outside such an operation, then `transpose(A)` is the correct rewrite. For vector `A`, `A.'` already transposed lazily to a `RowVector`, so `Transpose(A)`. which now yields a `Transpose`-wrapped vector behaviorally equivalent to the former `RowVector` is always the correct rewrite for vectors. For more information, see issue #5332 on Julia's issue tracker on GitHub.
└                                                               @ nothing none:0
┌ Warning: Deprecated syntax `parametric method syntax _ltriang{T1, M, W, N}(p::PolyMatrix{T1, M, Val{W}, N}, iterative::Bool = true, dᵤ::Int = -1)` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/reductions.jl:231.
│ Use `_ltriang(p::PolyMatrix{T1, M, Val{W}, N}, iterative::Bool = true, dᵤ::Int = -1) where {T1, M, W, N}` instead.
└                                                    @ nothing reductions.jl:231
┌ Warning: The syntax `.'` for transposition is deprecated, and the special lowering of `.'` in multiplication (`*`), left-division (`\`), and right-division (`/`) operations, for example `A.'*B` lowering to `At_mul_B(A, B)`, `A\B.'` lowering to `A_ldiv_Bt(A, B)`, and `A.'/B.'` lowering to `At_rdiv_Bt(A, B)`, has been removed in favor of a lazy `Transpose` wrapper type and dispatch on that type. Two rewrites for `A.'` for matrix `A` exist: eager or materializing `transpose(A)`, which constructs a freshly allocated matrix of `A`'s type and containing the transpose of `A`, and lazy `Transpose(A)`, which wraps `A` in a `Transpose` view type. Which rewrite is appropriate depends on context: If `A.'` appears in a multiplication, left-division, or right-division operation that was formerly specially lowered to an `A_mul_B`-like call, then the lazy `Tranpose(A)` is the correct replacement and will result in dispatch to a method equivalent to the former `A_mul_B`-like call. For example, `A.'*B`, formerly yielding `At_mul_B(A, B)`, should be rewritten `Transpose(A)*B`, which will dispatch to a method equivalent to the former `At_mul_B(A, B)` method. If `A.'` appears outside such an operation, then `transpose(A)` is the correct rewrite. For vector `A`, `A.'` already transposed lazily to a `RowVector`, so `Transpose(A)`. which now yields a `Transpose`-wrapped vector behaviorally equivalent to the former `RowVector` is always the correct rewrite for vectors. For more information, see issue #5332 on Julia's issue tracker on GitHub.
└                                                               @ nothing none:0
┌ Warning: The syntax `.'` for transposition is deprecated, and the special lowering of `.'` in multiplication (`*`), left-division (`\`), and right-division (`/`) operations, for example `A.'*B` lowering to `At_mul_B(A, B)`, `A\B.'` lowering to `A_ldiv_Bt(A, B)`, and `A.'/B.'` lowering to `At_rdiv_Bt(A, B)`, has been removed in favor of a lazy `Transpose` wrapper type and dispatch on that type. Two rewrites for `A.'` for matrix `A` exist: eager or materializing `transpose(A)`, which constructs a freshly allocated matrix of `A`'s type and containing the transpose of `A`, and lazy `Transpose(A)`, which wraps `A` in a `Transpose` view type. Which rewrite is appropriate depends on context: If `A.'` appears in a multiplication, left-division, or right-division operation that was formerly specially lowered to an `A_mul_B`-like call, then the lazy `Tranpose(A)` is the correct replacement and will result in dispatch to a method equivalent to the former `A_mul_B`-like call. For example, `A.'*B`, formerly yielding `At_mul_B(A, B)`, should be rewritten `Transpose(A)*B`, which will dispatch to a method equivalent to the former `At_mul_B(A, B)` method. If `A.'` appears outside such an operation, then `transpose(A)` is the correct rewrite. For vector `A`, `A.'` already transposed lazily to a `RowVector`, so `Transpose(A)`. which now yields a `Transpose`-wrapped vector behaviorally equivalent to the former `RowVector` is always the correct rewrite for vectors. For more information, see issue #5332 on Julia's issue tracker on GitHub.
└                                                               @ nothing none:0
┌ Warning: The syntax `.'` for transposition is deprecated, and the special lowering of `.'` in multiplication (`*`), left-division (`\`), and right-division (`/`) operations, for example `A.'*B` lowering to `At_mul_B(A, B)`, `A\B.'` lowering to `A_ldiv_Bt(A, B)`, and `A.'/B.'` lowering to `At_rdiv_Bt(A, B)`, has been removed in favor of a lazy `Transpose` wrapper type and dispatch on that type. Two rewrites for `A.'` for matrix `A` exist: eager or materializing `transpose(A)`, which constructs a freshly allocated matrix of `A`'s type and containing the transpose of `A`, and lazy `Transpose(A)`, which wraps `A` in a `Transpose` view type. Which rewrite is appropriate depends on context: If `A.'` appears in a multiplication, left-division, or right-division operation that was formerly specially lowered to an `A_mul_B`-like call, then the lazy `Tranpose(A)` is the correct replacement and will result in dispatch to a method equivalent to the former `A_mul_B`-like call. For example, `A.'*B`, formerly yielding `At_mul_B(A, B)`, should be rewritten `Transpose(A)*B`, which will dispatch to a method equivalent to the former `At_mul_B(A, B)` method. If `A.'` appears outside such an operation, then `transpose(A)` is the correct rewrite. For vector `A`, `A.'` already transposed lazily to a `RowVector`, so `Transpose(A)`. which now yields a `Transpose`-wrapped vector behaviorally equivalent to the former `RowVector` is always the correct rewrite for vectors. For more information, see issue #5332 on Julia's issue tracker on GitHub.
└                                                               @ nothing none:0
┌ Warning: The syntax `.'` for transposition is deprecated, and the special lowering of `.'` in multiplication (`*`), left-division (`\`), and right-division (`/`) operations, for example `A.'*B` lowering to `At_mul_B(A, B)`, `A\B.'` lowering to `A_ldiv_Bt(A, B)`, and `A.'/B.'` lowering to `At_rdiv_Bt(A, B)`, has been removed in favor of a lazy `Transpose` wrapper type and dispatch on that type. Two rewrites for `A.'` for matrix `A` exist: eager or materializing `transpose(A)`, which constructs a freshly allocated matrix of `A`'s type and containing the transpose of `A`, and lazy `Transpose(A)`, which wraps `A` in a `Transpose` view type. Which rewrite is appropriate depends on context: If `A.'` appears in a multiplication, left-division, or right-division operation that was formerly specially lowered to an `A_mul_B`-like call, then the lazy `Tranpose(A)` is the correct replacement and will result in dispatch to a method equivalent to the former `A_mul_B`-like call. For example, `A.'*B`, formerly yielding `At_mul_B(A, B)`, should be rewritten `Transpose(A)*B`, which will dispatch to a method equivalent to the former `At_mul_B(A, B)` method. If `A.'` appears outside such an operation, then `transpose(A)` is the correct rewrite. For vector `A`, `A.'` already transposed lazily to a `RowVector`, so `Transpose(A)`. which now yields a `Transpose`-wrapped vector behaviorally equivalent to the former `RowVector` is always the correct rewrite for vectors. For more information, see issue #5332 on Julia's issue tracker on GitHub.
└                                                               @ nothing none:0
┌ Warning: Use of final value of loop variable `j` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/reductions.jl:288 is deprecated. In the future the variable will be local to the loop instead.
└                                                    @ nothing reductions.jl:288
┌ Warning: Deprecated syntax `parametric method syntax col_degree{T, M, O, N}(p::PolyMatrix{T, M, O, N})` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/reductions.jl:346.
│ Use `col_degree(p::PolyMatrix{T, M, O, N}) where {T, M, O, N}` instead.
└                                                    @ nothing reductions.jl:346
┌ Warning: Deprecated syntax `parametric method syntax row_degree{T, M, O, N}(p::PolyMatrix{T, M, O, N})` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/reductions.jl:363.
│ Use `row_degree(p::PolyMatrix{T, M, O, N}) where {T, M, O, N}` instead.
└                                                    @ nothing reductions.jl:363
┌ Warning: Deprecated syntax `parametric method syntax high_col_deg_matrix{T, M, O, N}(p::PolyMatrix{T, M, O, N})` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/reductions.jl:381.
│ Use `high_col_deg_matrix(p::PolyMatrix{T, M, O, N}) where {T, M, O, N}` instead.
└                                                    @ nothing reductions.jl:381
┌ Warning: Deprecated syntax `parametric method syntax high_row_deg_matrix{T, M, O, N}(p::PolyMatrix{T, M, O, N})` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/reductions.jl:401.
│ Use `high_row_deg_matrix(p::PolyMatrix{T, M, O, N}) where {T, M, O, N}` instead.
└                                                    @ nothing reductions.jl:401
┌ Warning: Deprecated syntax `parametric method syntax is_col_proper{T, M, O}(p::PolyMatrix{T, M, O, 1})` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/reductions.jl:419.
│ Use `is_col_proper(p::PolyMatrix{T, M, O, 1}) where {T, M, O}` instead.
└                                                    @ nothing reductions.jl:419
┌ Warning: Deprecated syntax `parametric method syntax is_col_proper{T, M, O, N}(p::PolyMatrix{T, M, O, N})` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/reductions.jl:421.
│ Use `is_col_proper(p::PolyMatrix{T, M, O, N}) where {T, M, O, N}` instead.
└                                                    @ nothing reductions.jl:421
┌ Warning: Deprecated syntax `parametric method syntax colred{T, M, W, N}(p::PolyMatrix{T, M, Val{W}, N})` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/reductions.jl:438.
│ Use `colred(p::PolyMatrix{T, M, Val{W}, N}) where {T, M, W, N}` instead.
└                                                    @ nothing reductions.jl:438
┌ Warning: Deprecated syntax `parametric method syntax colred{T, M1, M2, W, N1, N2}(p1::PolyMatrix{T, M1, Val{W}, N1}, p2::PolyMatrix{T, M2, Val{W}, N2})` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/reductions.jl:511.
│ Use `colred(p1::PolyMatrix{T, M1, Val{W}, N1}, p2::PolyMatrix{T, M2, Val{W}, N2}) where {T, M1, M2, W, N1, N2}` instead.
└                                                    @ nothing reductions.jl:511
┌ Warning: Deprecated syntax `parametric method syntax rowred{T, M, W, N}(p::PolyMatrix{T, M, Val{W}, N})` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/reductions.jl:591.
│ Use `rowred(p::PolyMatrix{T, M, Val{W}, N}) where {T, M, W, N}` instead.
└                                                    @ nothing reductions.jl:591
┌ Warning: Deprecated syntax `parametric method syntax rowred{T, M1, M2, W, N1, N2}(p1::PolyMatrix{T, M1, Val{W}, N1}, p2::PolyMatrix{T, M2, Val{W}, N2})` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/reductions.jl:665.
│ Use `rowred(p1::PolyMatrix{T, M1, Val{W}, N1}, p2::PolyMatrix{T, M2, Val{W}, N2}) where {T, M1, M2, W, N1, N2}` instead.
└                                                    @ nothing reductions.jl:665
┌ Warning: Deprecated syntax `parametric method syntax _zerosi{S, G}(b::PolyMatrix{S}, a::PolyMatrix{G}, T)` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/filt.jl:2.
│ Use `_zerosi(b::PolyMatrix{S}, a::PolyMatrix{G}, T) where {S, G}` instead.
└                                                            @ nothing filt.jl:2
┌ Warning: Deprecated syntax `parametric method syntax filt{T, S, M1, M2, W, N, G}(b::PolyMatrix{T, M1, W, N}, a::PolyMatrix{S, M2, W, N}, x::AbstractArray{G}, si = _zerosi(b, a, G))` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/filt.jl:8.
│ Use `filt(b::PolyMatrix{T, M1, W, N}, a::PolyMatrix{S, M2, W, N}, x::AbstractArray{G}, si = _zerosi(b, a, G)) where {T, S, M1, M2, W, N, G}` instead.
└                                                            @ nothing filt.jl:8
┌ Warning: Deprecated syntax `parametric method syntax filt!{H, T, S, M1, M2, W, N, G}(out::AbstractArray{H}, b::PolyMatrix{T, M1, W, N}, a::PolyMatrix{S, M2, W, N}, x::AbstractArray{G}, si = _zerosi(b, a, G))` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/filt.jl:14.
│ Use `filt!(out::AbstractArray{H}, b::PolyMatrix{T, M1, W, N}, a::PolyMatrix{S, M2, W, N}, x::AbstractArray{G}, si = _zerosi(b, a, G)) where {H, T, S, M1, M2, W, N, G}` instead.
└                                                           @ nothing filt.jl:14
┌ Warning: Deprecated syntax `parametric method syntax _filt_iir!{T, S, M1, M2, W, N, G}(out::AbstractArray{T}, b::PolyMatrix{T, M1, W, N}, a::PolyMatrix{T, M2, W, N}, x::AbstractArray{S}, si::AbstractArray{G})` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/filt.jl:59.
│ Use `_filt_iir!(out::AbstractArray{T}, b::PolyMatrix{T, M1, W, N}, a::PolyMatrix{T, M2, W, N}, x::AbstractArray{S}, si::AbstractArray{G}) where {T, S, M1, M2, W, N, G}` instead.
└                                                           @ nothing filt.jl:59
┌ Warning: Deprecated syntax `parametric method syntax _filt_fir!{T, M1, W, N}(out::AbstractMatrix{T}, b::PolyMatrix{T, M1, W, N}, x, si = zeros(T, size(b, 1), degree(b)))` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/filt.jl:77.
│ Use `_filt_fir!(out::AbstractMatrix{T}, b::PolyMatrix{T, M1, W, N}, x, si = zeros(T, size(b, 1), degree(b))) where {T, M1, W, N}` instead.
└                                                           @ nothing filt.jl:77
┌ Warning: Deprecated syntax `parametric method syntax _filt_ar!{T, M1, W, N}(out::AbstractMatrix{T}, a::PolyMatrix{T, M1, W, N}, x::AbstractArray{T}, si = zeros(T, size(a, 1), degree(a)))` around /home/vagrant/.julia/v0.7/PolynomialMatrices/src/filt.jl:100.
│ Use `_filt_ar!(out::AbstractMatrix{T}, a::PolyMatrix{T, M1, W, N}, x::AbstractArray{T}, si = zeros(T, size(a, 1), degree(a))) where {T, M1, W, N}` instead.
└                                                          @ nothing filt.jl:100
WARNING: Base.Test is deprecated, run `using Test` instead.
  likely near /home/vagrant/.julia/v0.7/PolynomialMatrices/test/runtests.jl:2
┌ Warning: `warn()` is deprecated, use `@warn` instead.
│   caller = #warn#895(::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::String, ::Vararg{String,N} where N) at deprecated.jl:2734
└                                                      @ Base deprecated.jl:2734
WARNING: PolyMatrix: lengt(d) == 0
┌ Warning: DomainError now supports arguments, use `DomainError(value)` or `DomainError(value, msg)` instead.
│   caller = ip:0x0
└                                                                     @ Core :-1
WARNING: PolyMatrix: size of elements not consistent
┌ Warning: `eye(T::Type, m::Integer)` has been deprecated in favor of `I` and `Matrix` constructors. For a direct replacement, consider `Matrix{T}(I, m, m)`. If `T` element type is not necessary, consider the shorter `Matrix(I, m, m)`(with default `eltype(I)` `Bool`)
│   caller = top-level scope
└                                                                      @ Core :0
WARNING: PolyMatrix: dimensions are not consistent
WARNING: PolyMatrix: dimensions are not consistent
┌ Warning: `a::Number + b::AbstractArray` is deprecated, use `broadcast(+, a, b)` instead.
│   caller = #PolyMatrix#4(::Bool, ::Type, ::Array{Float64,2}, ::Tuple{Int64,Int64}, ::Type{Val{:x}}) at type.jl:160
└                                               @ PolynomialMatrices type.jl:160
┌ Warning: `a::Number + b::AbstractArray` is deprecated, use `broadcast(+, a, b)` instead.
│   caller = #PolyMatrix#4(::Bool, ::Type, ::Array{Float64,2}, ::Tuple{Int64,Int64}, ::Type{Val{:s}}) at type.jl:160
└                                               @ PolynomialMatrices type.jl:160
┌ Warning: `countnz(x)` is deprecated, use either `count(!iszero, x)` or `count(t -> t != 0, x)` instead.
│   caller = PolyMatrix(::Array{Poly{Float64},2}) at type.jl:84
└                                                @ PolynomialMatrices type.jl:84
┌ Warning: `eye(m::Integer)` has been deprecated in favor of `I` and `Matrix` constructors. For a direct replacement, consider `Matrix(1.0I, m, m)` or `Matrix{Float64}(I, m, m)`. If `Float64` element type is not necessary, consider the shorter `Matrix(I, m, m)` (with default `eltype(I)` `Bool`).
│   caller = top-level scope
└                                                                      @ Core :0
┌ Warning: `rtoldefault(x, y)` is deprecated, use `rtoldefault(x, y, 0)` instead.
│   caller = isapprox(::PolyMatrix{Float64,Array{Float64,2},Val{:s},2}, ::PolyMatrix{Float64,Array{Float64,2},Val{:s},2}) at methods.jl:315
└                                            @ PolynomialMatrices methods.jl:315
┌ Warning: `zeros(a::AbstractArray)` is deprecated, consider `zero(a)`, `fill(0, size(a))`, `fill!(copy(a), 0)`, or `fill!(similar(a), 0)`. Where necessary, use `fill!(similar(a), zero(eltype(a)))`.
│   caller = _add(::PolyMatrix{Float64,Array{Float64,2},Val{:s},2}, ::PolyMatrix{Float64,Array{Float64,2},Val{:s},2}) at arithmetic.jl:19
└                                          @ PolynomialMatrices arithmetic.jl:19
┌ Warning: `eye(m::Integer)` has been deprecated in favor of `I` and `Matrix` constructors. For a direct replacement, consider `Matrix(1.0I, m, m)` or `Matrix{Float64}(I, m, m)`. If `Float64` element type is not necessary, consider the shorter `Matrix(I, m, m)` (with default `eltype(I)` `Bool`).
│   caller = top-level scope
└                                                                      @ Core :0
┌ Warning: `rtoldefault(x, y)` is deprecated, use `rtoldefault(x, y, 0)` instead.
│   caller = isapprox at methods.jl:345 [inlined]
└                                                          @ Core methods.jl:345
┌ Warning: `zeros(a::AbstractArray)` is deprecated, consider `zero(a)`, `fill(0, size(a))`, `fill!(copy(a), 0)`, or `fill!(similar(a), 0)`. Where necessary, use `fill!(similar(a), zero(eltype(a)))`.
│   caller = _truncate!(::DataStructures.SortedDict{Int64,Array{Float64,2},Base.Order.ForwardOrdering}, ::Tuple{Int64,Int64}, ::Type{Float64}, ::Float64) at type.jl:41
└                                                @ PolynomialMatrices type.jl:41
┌ Warning: `a::Number + b::AbstractArray` is deprecated, use `broadcast(+, a, b)` instead.
│   caller = #PolyMatrix#4(::Bool, ::Type, ::Array{Int64,2}, ::Tuple{Int64,Int64}, ::Type{Val{:s}}) at type.jl:160
└                                               @ PolynomialMatrices type.jl:160
┌ Warning: `zeros(a::AbstractArray)` is deprecated, consider `zero(a)`, `fill(0, size(a))`, `fill!(copy(a), 0)`, or `fill!(similar(a), 0)`. Where necessary, use `fill!(similar(a), zero(eltype(a)))`.
│   caller = ==(::PolyMatrix{Int64,Array{Int64,2},Val{:s},2}, ::Array{Int64,2}) at methods.jl:305
└                                            @ PolynomialMatrices methods.jl:305
┌ Warning: `a::Number + b::AbstractArray` is deprecated, use `broadcast(+, a, b)` instead.
│   caller = #PolyMatrix#4(::Bool, ::Type, ::Array{Float64,2}, ::Tuple{Int64,Int64}, ::Type{Val{:q}}) at type.jl:160
└                                               @ PolynomialMatrices type.jl:160
┌ Warning: `rtoldefault(x, y)` is deprecated, use `rtoldefault(x, y, 0)` instead.
│   caller = isapprox(::PolyMatrix{Float64,Array{Float64,2},Val{:s},2}, ::PolyMatrix{Float64,Array{Float64,2},Val{:q},2}) at methods.jl:338
└                                            @ PolynomialMatrices methods.jl:338
WARNING: p₁≈p₂: `p₁` (Float64,s) and `p₂` (Float64,q) have different variables
┌ Warning: `countnz(x)` is deprecated, use either `count(!iszero, x)` or `count(t -> t != 0, x)` instead.
│   caller = PolyMatrix(::Array{Poly{Int64},2}) at type.jl:84
└                                                @ PolynomialMatrices type.jl:84
┌ Warning: `zeros(a::AbstractArray)` is deprecated, consider `zero(a)`, `fill(0, size(a))`, `fill!(copy(a), 0)`, or `fill!(similar(a), 0)`. Where necessary, use `fill!(similar(a), zero(eltype(a)))`.
│   caller = similar(::PolyMatrix{Int64,Array{Int64,2},Val{:x},2}, ::Type{Int64}, ::Tuple{Int64,Int64}) at methods.jl:22
└                                             @ PolynomialMatrices methods.jl:22
┌ Warning: `a::Number + b::AbstractArray` is deprecated, use `broadcast(+, a, b)` instead.
│   caller = #PolyMatrix#4(::Bool, ::Type, ::Array{Int64,2}, ::Tuple{Int64,Int64}, ::Type{Val{:x}}) at type.jl:160
└                                               @ PolynomialMatrices type.jl:160
┌ Warning: `zeros(a::AbstractArray)` is deprecated, consider `zero(a)`, `fill(0, size(a))`, `fill!(copy(a), 0)`, or `fill!(similar(a), 0)`. Where necessary, use `fill!(similar(a), zero(eltype(a)))`.
│   caller = similar(::PolyMatrix{Int64,Array{Int64,2},Val{:x},2}, ::Type{Poly{Float64}}, ::Tuple{Int64,Int64}) at methods.jl:29
└                                             @ PolynomialMatrices methods.jl:29
┌ Warning: `zeros(a::AbstractArray)` is deprecated, consider `zero(a)`, `fill(0, size(a))`, `fill!(copy(a), 0)`, or `fill!(similar(a), 0)`. Where necessary, use `fill!(similar(a), zero(eltype(a)))`.
│   caller = similar(::PolyMatrix{Int64,Array{Int64,2},Val{:x},2}, ::Type{Float64}, ::Tuple{Int64,Int64}) at methods.jl:22
└                                             @ PolynomialMatrices methods.jl:22
┌ Warning: `zeros(a::AbstractArray)` is deprecated, consider `zero(a)`, `fill(0, size(a))`, `fill!(copy(a), 0)`, or `fill!(similar(a), 0)`. Where necessary, use `fill!(similar(a), zero(eltype(a)))`.
│   caller = similar(::PolyMatrix{Int64,Array{Int64,2},Val{:x},2}, ::Type{Poly{Float64}}, ::Tuple{Int64}) at methods.jl:29
└                                             @ PolynomialMatrices methods.jl:29
┌ Warning: `zeros(a::AbstractArray)` is deprecated, consider `zero(a)`, `fill(0, size(a))`, `fill!(copy(a), 0)`, or `fill!(similar(a), 0)`. Where necessary, use `fill!(similar(a), zero(eltype(a)))`.
│   caller = _truncate!(::DataStructures.SortedDict{Int64,Array{Float64,1},Base.Order.ForwardOrdering}, ::Tuple{Int64}, ::Type{Float64}, ::Float64) at type.jl:41
└                                                @ PolynomialMatrices type.jl:41
┌ Warning: `zeros(a::AbstractArray)` is deprecated, consider `zero(a)`, `fill(0, size(a))`, `fill!(copy(a), 0)`, or `fill!(similar(a), 0)`. Where necessary, use `fill!(similar(a), zero(eltype(a)))`.
│   caller = similar(::PolyMatrix{Int64,Array{Int64,2},Val{:x},2}, ::Type{Float64}, ::Tuple{Int64}) at methods.jl:22
└                                             @ PolynomialMatrices methods.jl:22
┌ Warning: `eye(T::Type, m::Integer)` has been deprecated in favor of `I` and `Matrix` constructors. For a direct replacement, consider `Matrix{T}(I, m, m)`. If `T` element type is not necessary, consider the shorter `Matrix(I, m, m)`(with default `eltype(I)` `Bool`)
│   caller = top-level scope
└                                                                      @ Core :0
┌ Warning: `a::Number + b::AbstractArray` is deprecated, use `broadcast(+, a, b)` instead.
│   caller = #PolyMatrix#4(::Bool, ::Type, ::Array{Complex{Float64},2}, ::Tuple{Int64,Int64}, ::Type{Val{:x}}) at type.jl:160
└                                               @ PolynomialMatrices type.jl:160
┌ Warning: `ctranspose` is deprecated, use `adjoint` instead.
│   caller = ctranspose(::PolyMatrix{Complex{Float64},Array{Complex{Float64},2},Val{:x},2}) at methods.jl:272
└                                            @ PolynomialMatrices methods.jl:272
┌ Warning: `ctranspose` is deprecated, use `adjoint` instead.
│   caller = ctranspose(::PolyMatrix{Complex{Float64},Array{Complex{Float64},2},Val{:x},2}) at methods.jl:276
└                                            @ PolynomialMatrices methods.jl:276
┌ Warning: `ctranspose` is deprecated, use `adjoint` instead.
│   caller = top-level scope
└                                                                      @ Core :0
WARNING: importing deprecated binding DFT.fft into PolynomialMatrices.
Error During Test at /home/vagrant/.julia/v0.7/PolynomialMatrices/test/methods.jl:175
  Test threw an exception of type ErrorException
  Expression: rank(pm1) == fastrank(pm1) == 2
  Base.DFT.fft has been moved to the package FFTW.jl.
  Run `Pkg.add("FFTW")` to install it, restart Julia,
  and then run `using FFTW` to load it.
  Stacktrace:
   [1] error(::Function, ::String, ::String, ::String, ::String, ::String, ::String, ::String, ::String, ::String) at ./error.jl:42
   [2] #fft#6 at ./deprecated.jl:142 [inlined]
   [3] fft at ./deprecated.jl:142 [inlined]
   [4] rank(::PolyMatrix{Int64,Array{Int64,2},Val{:s},2}) at /home/vagrant/.julia/v0.7/PolynomialMatrices/src/methods.jl:384
   [5] top-level scope
   [6] include at ./boot.jl:293 [inlined]
   [7] include_relative(::Module, ::String) at ./loading.jl:521
   [8] include(::Module, ::String) at ./sysimg.jl:26
   [9] include(::String) at ./sysimg.jl:65
   [10] top-level scope
   [11] include at ./boot.jl:293 [inlined]
   [12] include_relative(::Module, ::String) at ./loading.jl:521
   [13] include(::Module, ::String) at ./sysimg.jl:26
   [14] process_options(::Base.JLOptions) at ./client.jl:324
   [15] _start() at ./client.jl:375
ERROR: LoadError: LoadError: There was an error during testing
in expression starting at /home/vagrant/.julia/v0.7/PolynomialMatrices/test/methods.jl:175
in expression starting at /home/vagrant/.julia/v0.7/PolynomialMatrices/test/runtests.jl:6
┌ Error: ------------------------------------------------------------
│ # Testing failed for PolynomialMatrices
│   exception =
│    failed process: Process(`/home/vagrant/julia/bin/julia -Cnative -J/home/vagrant/julia/lib/julia/sys.so --compile=yes --depwarn=yes --code-coverage=none --color=no --compiled-modules=yes --check-bounds=yes --warn-overwrite=yes --startup-file=yes /home/vagrant/.julia/v0.7/PolynomialMatrices/test/runtests.jl`, ProcessExited(1)) [1]
│    Stacktrace:
│     [1] error(::String, ::Base.Process, ::String, ::Int64, ::String) at ./error.jl:42
│     [2] pipeline_error(::Base.Process) at ./process.jl:707
│     [3] run(::Cmd) at ./process.jl:669
│     [4] (::getfield(Base.Pkg.Entry, Symbol("##91#94")){Bool,String,Array{AbstractString,1}})() at ./pkg/entry.jl:736
│     [5] cd(::getfield(Base.Pkg.Entry, Symbol("##91#94")){Bool,String,Array{AbstractString,1}}, ::String) at ./file.jl:70
│     [6] #test!#90(::Bool, ::Function, ::String, ::Array{AbstractString,1}, ::Array{AbstractString,1}, ::Array{AbstractString,1}) at ./pkg/entry.jl:724
│     [7] (::getfield(Base.Pkg.Entry, Symbol("#kw##test!")))(::NamedTuple{(:coverage,),Tuple{Bool}}, ::typeof(Base.Pkg.Entry.test!), ::String, ::Array{AbstractString,1}, ::Array{AbstractString,1}, ::Array{AbstractString,1}) at ./<missing>:0
│     [8] #test#98(::Bool, ::Function, ::Array{AbstractString,1}) at ./pkg/entry.jl:763
│     [9] (::getfield(Base.Pkg.Entry, Symbol("#kw##test")))(::NamedTuple{(:coverage,),Tuple{Bool}}, ::typeof(Base.Pkg.Entry.test), ::Array{AbstractString,1}) at ./<missing>:0
│     [10] (::getfield(Base.Pkg.Dir, Symbol("##4#7")){Base.Iterators.IndexValue{Symbol,Bool,Tuple{Symbol},NamedTuple{(:coverage,),Tuple{Bool}}},typeof(Base.Pkg.Entry.test),Tuple{Array{AbstractString,1}}})() at ./pkg/dir.jl:36
│     [11] cd(::getfield(Base.Pkg.Dir, Symbol("##4#7")){Base.Iterators.IndexValue{Symbol,Bool,Tuple{Symbol},NamedTuple{(:coverage,),Tuple{Bool}}},typeof(Base.Pkg.Entry.test),Tuple{Array{AbstractString,1}}}, ::String) at ./file.jl:70
│     [12] #cd#1(::Base.Iterators.IndexValue{Symbol,Bool,Tuple{Symbol},NamedTuple{(:coverage,),Tuple{Bool}}}, ::Function, ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N} where N) at ./pkg/dir.jl:36
│     [13] (::getfield(Base.Pkg.Dir, Symbol("#kw##cd")))(::NamedTuple{(:coverage,),Tuple{Bool}}, ::typeof(Base.Pkg.Dir.cd), ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N} where N) at ./<missing>:0
│     [14] #test#3(::Bool, ::Function, ::String, ::Vararg{String,N} where N) at ./pkg/pkg.jl:274
│     [15] test(::String, ::Vararg{String,N} where N) at ./pkg/pkg.jl:274
│     [16] top-level scope
│     [17] eval at ./boot.jl:296 [inlined]
│     [18] eval(::Module, ::Expr) at ./sysimg.jl:71
│     [19] process_options(::Base.JLOptions) at ./client.jl:301
│     [20] _start() at ./client.jl:375
└                                                  @ Base.Pkg.Entry entry.jl:739
ERROR: PolynomialMatrices had test errors

>>> End of log
