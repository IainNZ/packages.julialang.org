>>> 'Pkg.add("PolynomialMatrices")' log
[ Info: Installing DataStructures v0.7.3 @ Base.Pkg.Entry entry.jl:543
[ Info: Installing PolynomialMatrices v0.2.0 @ Base.Pkg.Entry entry.jl:543
[ Info: Installing Polynomials v0.1.6 @ Base.Pkg.Entry entry.jl:543
[ Info: Package database updated @ Base.Pkg.Entry entry.jl:32
┌ Info: METADATA is out-of-date — you may not have the latest version of PolynomialMatrices
│ Use `Pkg.update()` to get the latest versions of your packages
└ @ Base.Pkg.Entry entry.jl:74

>>> 'Pkg.test("PolynomialMatrices")' log
Julia Version 0.7.0-DEV.3246
Commit 2138144d3a (2018-01-04 02:34 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
      Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-135-generic #184-Ubuntu SMP Wed Oct 18 11:55:51 UTC 2017 x86_64 x86_64
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
              speed         user         nice          sys         idle          irq
       #1  3507 MHz    3444480 s        119 s     170660 s     914228 s         66 s
       #2  3507 MHz     875804 s         67 s      75713 s    4213319 s          1 s
       
  Memory: 2.93927001953125 GB (769.13671875 MB free)
  Uptime: 52817.0 sec
  Load Avg:  1.01123046875  1.0361328125  1.03466796875
  WORD_SIZE: 64
  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant
Packages:
  Package Directory: /home/vagrant/.julia/v0.7
  Package Status:
2 required packages:
 - JSON                          0.16.3
 - PolynomialMatrices            0.2.0
4 additional packages:
 - Compat                        0.42.0
 - DataStructures                0.7.3
 - Nullables                     0.0.2
 - Polynomials                   0.1.6
[ Info: Testing PolynomialMatrices @ Base.Pkg.Entry entry.jl:723
[ Warning: Replacing module `Compat` @ Base loading.jl:350
WARNING: Base.Test is deprecated, run `using Test` instead.
  likely near /home/vagrant/.julia/v0.7/PolynomialMatrices/test/runtests.jl:2
┌ Warning: `warn()` is deprecated, use `@warn` instead.
│   caller = #warn#959(::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::String, ::Vararg{String,N} where N) at deprecated.jl:3644
└ @ Base deprecated.jl:3644
WARNING: PolyMatrix: lengt(d) == 0
┌ Warning: DomainError now supports arguments, use `DomainError(value)` or `DomainError(value, msg)` instead.
│   caller = ip:0x0
└ @ Core :-1
WARNING: PolyMatrix: size of elements not consistent
┌ Warning: `eye(T::Type, m::Integer)` has been deprecated in favor of `I` and `Matrix` constructors. For a direct replacement, consider `Matrix{T}(I, m, m)`. If `T` element type is not necessary, consider the shorter `Matrix(I, m, m)`(with default `eltype(I)` `Bool`)
│   caller = top-level scope
└ @ Core :0
WARNING: PolyMatrix: dimensions are not consistent
WARNING: PolyMatrix: dimensions are not consistent
┌ Warning: `a::Number + b::AbstractArray` is deprecated, use `broadcast(+, a, b)` instead.
│   caller = #PolyMatrix#4(::Bool, ::Type, ::Array{Float64,2}, ::Tuple{Int64,Int64}, ::Type{Val{:x}}) at type.jl:160
└ @ PolynomialMatrices type.jl:160
┌ Warning: `a::Number + b::AbstractArray` is deprecated, use `broadcast(+, a, b)` instead.
│   caller = #PolyMatrix#4(::Bool, ::Type, ::Array{Float64,2}, ::Tuple{Int64,Int64}, ::Type{Val{:s}}) at type.jl:160
└ @ PolynomialMatrices type.jl:160
┌ Warning: countnz(x) is deprecated, use either count(!iszero, x) or count(t -> t != 0, x) instead.
│   caller = PolyMatrix(::Array{Poly{Float64},2}) at type.jl:84
└ @ PolynomialMatrices type.jl:84
┌ Warning: `eye(m::Integer)` has been deprecated in favor of `I` and `Matrix` constructors. For a direct replacement, consider `Matrix(1.0I, m, m)` or `Matrix{Float64}(I, m, m)`. If `Float64` element type is not necessary, consider the shorter `Matrix(I, m, m)` (with default `eltype(I)` `Bool`).
│   caller = top-level scope
└ @ Core :0
┌ Warning: `rtoldefault(x, y)` is deprecated, use `rtoldefault(x, y, 0)` instead.
│   caller = isapprox(::PolyMatrix{Float64,Array{Float64,2},Val{:s},2}, ::PolyMatrix{Float64,Array{Float64,2},Val{:s},2}) at methods.jl:315
└ @ PolynomialMatrices methods.jl:315
┌ Warning: `zeros(a::AbstractArray)` is deprecated, consider `zero(a)`, `fill(0, size(a))`, `fill!(copy(a), 0)`, or `fill!(similar(a), 0)`. Where necessary, use `fill!(similar(a), zero(eltype(a)))`.
│   caller = _add(::PolyMatrix{Float64,Array{Float64,2},Val{:s},2}, ::PolyMatrix{Float64,Array{Float64,2},Val{:s},2}) at arithmetic.jl:19
└ @ PolynomialMatrices arithmetic.jl:19
┌ Warning: `eye(m::Integer)` has been deprecated in favor of `I` and `Matrix` constructors. For a direct replacement, consider `Matrix(1.0I, m, m)` or `Matrix{Float64}(I, m, m)`. If `Float64` element type is not necessary, consider the shorter `Matrix(I, m, m)` (with default `eltype(I)` `Bool`).
│   caller = top-level scope
└ @ Core :0
┌ Warning: `rtoldefault(x, y)` is deprecated, use `rtoldefault(x, y, 0)` instead.
│   caller = isapprox at methods.jl:345 [inlined]
└ @ Core methods.jl:345
┌ Warning: `zeros(a::AbstractArray)` is deprecated, consider `zero(a)`, `fill(0, size(a))`, `fill!(copy(a), 0)`, or `fill!(similar(a), 0)`. Where necessary, use `fill!(similar(a), zero(eltype(a)))`.
│   caller = _truncate!(::DataStructures.SortedDict{Int64,Array{Float64,2},Base.Order.ForwardOrdering}, ::Tuple{Int64,Int64}, ::Type{Float64}, ::Float64) at type.jl:41
└ @ PolynomialMatrices type.jl:41
┌ Warning: `a::Number + b::AbstractArray` is deprecated, use `broadcast(+, a, b)` instead.
│   caller = #PolyMatrix#4(::Bool, ::Type, ::Array{Int64,2}, ::Tuple{Int64,Int64}, ::Type{Val{:s}}) at type.jl:160
└ @ PolynomialMatrices type.jl:160
┌ Warning: `zeros(a::AbstractArray)` is deprecated, consider `zero(a)`, `fill(0, size(a))`, `fill!(copy(a), 0)`, or `fill!(similar(a), 0)`. Where necessary, use `fill!(similar(a), zero(eltype(a)))`.
│   caller = ==(::PolyMatrix{Int64,Array{Int64,2},Val{:s},2}, ::Array{Int64,2}) at methods.jl:305
└ @ PolynomialMatrices methods.jl:305
┌ Warning: `a::Number + b::AbstractArray` is deprecated, use `broadcast(+, a, b)` instead.
│   caller = #PolyMatrix#4(::Bool, ::Type, ::Array{Float64,2}, ::Tuple{Int64,Int64}, ::Type{Val{:q}}) at type.jl:160
└ @ PolynomialMatrices type.jl:160
┌ Warning: `rtoldefault(x, y)` is deprecated, use `rtoldefault(x, y, 0)` instead.
│   caller = isapprox(::PolyMatrix{Float64,Array{Float64,2},Val{:s},2}, ::PolyMatrix{Float64,Array{Float64,2},Val{:q},2}) at methods.jl:338
└ @ PolynomialMatrices methods.jl:338
WARNING: p₁≈p₂: `p₁` (Float64,s) and `p₂` (Float64,q) have different variables
┌ Warning: countnz(x) is deprecated, use either count(!iszero, x) or count(t -> t != 0, x) instead.
│   caller = PolyMatrix(::Array{Poly{Int64},2}) at type.jl:84
└ @ PolynomialMatrices type.jl:84
┌ Warning: `zeros(a::AbstractArray)` is deprecated, consider `zero(a)`, `fill(0, size(a))`, `fill!(copy(a), 0)`, or `fill!(similar(a), 0)`. Where necessary, use `fill!(similar(a), zero(eltype(a)))`.
│   caller = similar(::PolyMatrix{Int64,Array{Int64,2},Val{:x},2}, ::Type{Int64}, ::Tuple{Int64,Int64}) at methods.jl:22
└ @ PolynomialMatrices methods.jl:22
┌ Warning: `a::Number + b::AbstractArray` is deprecated, use `broadcast(+, a, b)` instead.
│   caller = #PolyMatrix#4(::Bool, ::Type, ::Array{Int64,2}, ::Tuple{Int64,Int64}, ::Type{Val{:x}}) at type.jl:160
└ @ PolynomialMatrices type.jl:160
┌ Warning: `zeros(a::AbstractArray)` is deprecated, consider `zero(a)`, `fill(0, size(a))`, `fill!(copy(a), 0)`, or `fill!(similar(a), 0)`. Where necessary, use `fill!(similar(a), zero(eltype(a)))`.
│   caller = similar(::PolyMatrix{Int64,Array{Int64,2},Val{:x},2}, ::Type{Poly{Float64}}, ::Tuple{Int64,Int64}) at methods.jl:29
└ @ PolynomialMatrices methods.jl:29
┌ Warning: `zeros(a::AbstractArray)` is deprecated, consider `zero(a)`, `fill(0, size(a))`, `fill!(copy(a), 0)`, or `fill!(similar(a), 0)`. Where necessary, use `fill!(similar(a), zero(eltype(a)))`.
│   caller = similar(::PolyMatrix{Int64,Array{Int64,2},Val{:x},2}, ::Type{Float64}, ::Tuple{Int64,Int64}) at methods.jl:22
└ @ PolynomialMatrices methods.jl:22
┌ Warning: `zeros(a::AbstractArray)` is deprecated, consider `zero(a)`, `fill(0, size(a))`, `fill!(copy(a), 0)`, or `fill!(similar(a), 0)`. Where necessary, use `fill!(similar(a), zero(eltype(a)))`.
│   caller = similar(::PolyMatrix{Int64,Array{Int64,2},Val{:x},2}, ::Type{Poly{Float64}}, ::Tuple{Int64}) at methods.jl:29
└ @ PolynomialMatrices methods.jl:29
┌ Warning: `zeros(a::AbstractArray)` is deprecated, consider `zero(a)`, `fill(0, size(a))`, `fill!(copy(a), 0)`, or `fill!(similar(a), 0)`. Where necessary, use `fill!(similar(a), zero(eltype(a)))`.
│   caller = _truncate!(::DataStructures.SortedDict{Int64,Array{Float64,1},Base.Order.ForwardOrdering}, ::Tuple{Int64}, ::Type{Float64}, ::Float64) at type.jl:41
└ @ PolynomialMatrices type.jl:41
┌ Warning: `zeros(a::AbstractArray)` is deprecated, consider `zero(a)`, `fill(0, size(a))`, `fill!(copy(a), 0)`, or `fill!(similar(a), 0)`. Where necessary, use `fill!(similar(a), zero(eltype(a)))`.
│   caller = similar(::PolyMatrix{Int64,Array{Int64,2},Val{:x},2}, ::Type{Float64}, ::Tuple{Int64}) at methods.jl:22
└ @ PolynomialMatrices methods.jl:22
┌ Warning: `eye(T::Type, m::Integer)` has been deprecated in favor of `I` and `Matrix` constructors. For a direct replacement, consider `Matrix{T}(I, m, m)`. If `T` element type is not necessary, consider the shorter `Matrix(I, m, m)`(with default `eltype(I)` `Bool`)
│   caller = top-level scope
└ @ Core :0
┌ Warning: `a::Number + b::AbstractArray` is deprecated, use `broadcast(+, a, b)` instead.
│   caller = #PolyMatrix#4(::Bool, ::Type, ::Array{Complex{Float64},2}, ::Tuple{Int64,Int64}, ::Type{Val{:x}}) at type.jl:160
└ @ PolynomialMatrices type.jl:160
┌ Warning: `ctranspose` is deprecated, use `adjoint` instead.
│   caller = ctranspose(::PolyMatrix{Complex{Float64},Array{Complex{Float64},2},Val{:x},2}) at methods.jl:272
└ @ PolynomialMatrices methods.jl:272
┌ Warning: `ctranspose` is deprecated, use `adjoint` instead.
│   caller = ctranspose(::PolyMatrix{Complex{Float64},Array{Complex{Float64},2},Val{:x},2}) at methods.jl:276
└ @ PolynomialMatrices methods.jl:276
┌ Warning: `ctranspose` is deprecated, use `adjoint` instead.
│   caller = top-level scope
└ @ Core :0
WARNING: importing deprecated binding DFT.fft into PolynomialMatrices.
Error During Test at /home/vagrant/.julia/v0.7/PolynomialMatrices/test/methods.jl:175
  Test threw an exception of type ErrorException
  Expression: rank(pm1) == fastrank(pm1) == 2
  Base.DFT.fft has been moved to the package FFTW.jl.
  Run `Pkg.add("FFTW")` to install it, restart Julia,
  and then run `using FFTW` to load it.
  Stacktrace:
   [1] error(::Function, ::String, ::String, ::String, ::String, ::String, ::String, ::String, ::String, ::String) at ./error.jl:42
   [2] #fft#6 at ./deprecated.jl:142 [inlined]
   [3] fft at ./deprecated.jl:142 [inlined]
   [4] rank(::PolyMatrix{Int64,Array{Int64,2},Val{:s},2}) at /home/vagrant/.julia/v0.7/PolynomialMatrices/src/methods.jl:384
   [5] top-level scope
   [6] include at ./boot.jl:295 [inlined]
   [7] include_relative(::Module, ::String) at ./loading.jl:521
   [8] include(::Module, ::String) at ./sysimg.jl:26
   [9] include(::String) at ./sysimg.jl:65
   [10] top-level scope
   [11] include at ./boot.jl:295 [inlined]
   [12] include_relative(::Module, ::String) at ./loading.jl:521
   [13] include(::Module, ::String) at ./sysimg.jl:26
   [14] process_options(::Base.JLOptions) at ./client.jl:323
   [15] _start() at ./client.jl:374
ERROR: LoadError: LoadError: There was an error during testing
in expression starting at /home/vagrant/.julia/v0.7/PolynomialMatrices/test/methods.jl:175
in expression starting at /home/vagrant/.julia/v0.7/PolynomialMatrices/test/runtests.jl:6
┌ Error: ------------------------------------------------------------
│ # Testing failed for PolynomialMatrices
│   exception = ErrorException("failed process: Process(`/home/vagrant/julia/bin/julia -Cnative -J/home/vagrant/julia/lib/julia/sys.so --compile=yes --depwarn=yes --code-coverage=none --color=no --compiled-modules=yes --check-bounds=yes --warn-overwrite=yes --startup-file=yes /home/vagrant/.julia/v0.7/PolynomialMatrices/test/runtests.jl`, ProcessExited(1)) [1]")
└ @ Base.Pkg.Entry entry.jl:739
ERROR: PolynomialMatrices had test errors

>>> End of log
