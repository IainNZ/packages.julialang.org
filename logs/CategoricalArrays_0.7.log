>>> 'Pkg.add("CategoricalArrays")' log
WARNING: Base.Pkg is deprecated, run `using Pkg` instead
 in module Main
[ Info: Installing CategoricalArrays v0.3.9
[ Info: Installing Missings v0.2.9
[ Info: Installing Reexport v0.1.0
[ Info: Package database updated
┌ Info: METADATA is out-of-date — you may not have the latest version of CategoricalArrays
└ Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("CategoricalArrays")' log
WARNING: Base.versioninfo is deprecated: it has been moved to the standard library package `InteractiveUtils`.
Add `using InteractiveUtils` to your imports.
 in module Main
WARNING: Base.versioninfo is deprecated: it has been moved to the standard library package `InteractiveUtils`.
Add `using InteractiveUtils` to your imports.
 in module Main
Julia Version 0.7.0-DEV.4941
Commit 9f5351c36a (2018-04-24 14:26 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
      Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-143-generic #192-Ubuntu SMP Tue Feb 27 10:45:36 UTC 2018 x86_64 x86_64
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
              speed         user         nice          sys         idle          irq
       #1  3494 MHz    1669285 s       6610 s     122060 s     512315 s         18 s
       #2  3494 MHz     397066 s         92 s      48420 s    2204077 s          0 s
       
  Memory: 2.939197540283203 GB (761.9375 MB free)
  Uptime: 27016.0 sec
  Load Avg:  0.96923828125  0.9853515625  1.03125
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant
Packages:
  Package Directory: /home/vagrant/.julia/v0.7
  Package Status:
2 required packages:
 - CategoricalArrays             0.3.9
 - JSON                          0.17.2
4 additional packages:
 - Compat                        0.63.0
 - Missings                      0.2.9
 - Nullables                     0.0.5
 - Reexport                      0.1.0
WARNING: Base.Pkg is deprecated, run `using Pkg` instead
 in module Main
[ Info: Testing CategoricalArrays
Test Summary: | Pass  Total
01_typedef.jl |   93     93
Test Summary:    | Pass  Total
02_buildorder.jl |    6      6
Test Summary:     | Pass  Total
03_buildfields.jl |    6      6
Test Summary:      | Pass  Total
04_constructors.jl |  121    121
Test Summary: | Pass  Total
05_convert.jl |   32     32
Test Summary: | Pass  Total
06_show.jl    |   46     46
Test Summary: | Pass  Total
06_length.jl  |    2      2
Test Summary: | Pass  Total
07_levels.jl  |  306    306
Test Summary:  | Pass  Total
08_equality.jl |  110    110
┌ Warning: `contains(haystack, needle)` is deprecated, use `occursin(needle, haystack)` instead.
│   caller = macro expansion at 08_string.jl:168 [inlined]
└ @ Core 08_string.jl:168
┌ Warning: `contains(haystack, needle)` is deprecated, use `occursin(needle, haystack)` instead.
│   caller = macro expansion at 08_string.jl:169 [inlined]
└ @ Core 08_string.jl:169
┌ Warning: `contains(haystack, needle)` is deprecated, use `occursin(needle, haystack)` instead.
│   caller = macro expansion at 08_string.jl:170 [inlined]
└ @ Core 08_string.jl:170
┌ Warning: `contains(haystack, needle)` is deprecated, use `occursin(needle, haystack)` instead.
│   caller = macro expansion at 08_string.jl:172 [inlined]
└ @ Core 08_string.jl:172
┌ Warning: `contains(haystack, needle)` is deprecated, use `occursin(needle, haystack)` instead.
│   caller = macro expansion at 08_string.jl:173 [inlined]
└ @ Core 08_string.jl:173
Test Summary: | Pass  Total
08_string.jl  |  151    151
Test Summary: | Pass  Total
09_hash.jl    |   54     54
┌ Warning: Deprecated syntax `implicit assignment to global variable `pool``.
│ Use `global pool` instead.
└ @ nothing none:0
┌ Warning: Deprecated syntax `implicit assignment to global variable `v1``.
│ Use `global v1` instead.
└ @ nothing none:0
┌ Warning: Deprecated syntax `implicit assignment to global variable `v2``.
│ Use `global v2` instead.
└ @ nothing none:0
┌ Warning: Deprecated syntax `implicit assignment to global variable `v3``.
│ Use `global v3` instead.
└ @ nothing none:0
Test Summary: | Pass  Total
10_isless.jl  |  256    256
Test Summary: | Pass  Total
11_array.jl   | 8714   8714
┌ Warning: `CategoricalArray(dims::Int...; ordered=false)` is deprecated, use `CategoricalArray(undef, dims...; ordered=ordered)` instead.
│   caller = macro expansion at 12_missingarray.jl:1037 [inlined]
└ @ Core 12_missingarray.jl:1037
┌ Warning: `CategoricalArray(dims::Int...; ordered=false)` is deprecated, use `CategoricalArray(undef, dims...; ordered=ordered)` instead.
│   caller = macro expansion at 12_missingarray.jl:1046 [inlined]
└ @ Core 12_missingarray.jl:1046
┌ Warning: `CategoricalArray{T}(m::Int; ordered=false) where T` is deprecated, use `CategoricalArray{T}(undef, m; ordered=ordered)` instead.
│   caller = macro expansion at 12_missingarray.jl:1059 [inlined]
└ @ Core 12_missingarray.jl:1059
Test Summary:      |  Pass  Total
12_missingarray.jl | 12912  12912
┌ Warning: `a::AbstractArray + b::Number` is deprecated, use `broadcast(+, a, b)` instead.
│   caller = macro expansion at 13_arraycommon.jl:87 [inlined]
└ @ Core 13_arraycommon.jl:87
┌ Warning: `a::AbstractArray + b::Number` is deprecated, use `broadcast(+, a, b)` instead.
│   caller = macro expansion at 13_arraycommon.jl:88 [inlined]
└ @ Core 13_arraycommon.jl:88
┌ Warning: `copy!(dst::AbstractArray, src::AbstractArray)` is deprecated. You can either use `copyto!(dst, src)` or `Future.copy!(dst, src)` instead.
│   caller = macro expansion at 13_arraycommon.jl:188 [inlined]
└ @ Core 13_arraycommon.jl:188
┌ Warning: `copy!(dest::Union{AbstractArray, IndexStyle}, args...)` is deprecated, use `copyto!(dest, args...)` instead.
│   caller = macro expansion at 13_arraycommon.jl:203 [inlined]
└ @ Core 13_arraycommon.jl:203
┌ Warning: `copy!(dest::Union{AbstractArray, IndexStyle}, args...)` is deprecated, use `copyto!(dest, args...)` instead.
│   caller = macro expansion at 13_arraycommon.jl:212 [inlined]
└ @ Core 13_arraycommon.jl:212
┌ Warning: `copy!(dest::Union{AbstractArray, IndexStyle}, args...)` is deprecated, use `copyto!(dest, args...)` instead.
│   caller = macro expansion at 13_arraycommon.jl:214 [inlined]
└ @ Core 13_arraycommon.jl:214
┌ Warning: `copy!(dest::Union{AbstractArray, IndexStyle}, args...)` is deprecated, use `copyto!(dest, args...)` instead.
│   caller = macro expansion at 13_arraycommon.jl:217 [inlined]
└ @ Core 13_arraycommon.jl:217
┌ Warning: `copy!(dest::Union{AbstractArray, IndexStyle}, args...)` is deprecated, use `copyto!(dest, args...)` instead.
│   caller = macro expansion at 13_arraycommon.jl:219 [inlined]
└ @ Core 13_arraycommon.jl:219
┌ Warning: `copy!(dst::AbstractArray, src::AbstractArray)` is deprecated. You can either use `copyto!(dst, src)` or `Future.copy!(dst, src)` instead.
│   caller = macro expansion at 13_arraycommon.jl:221 [inlined]
└ @ Core 13_arraycommon.jl:221
┌ Warning: `copy!(dst::AbstractArray, src::AbstractArray)` is deprecated. You can either use `copyto!(dst, src)` or `Future.copy!(dst, src)` instead.
│   caller = macro expansion at 13_arraycommon.jl:223 [inlined]
└ @ Core 13_arraycommon.jl:223
┌ Warning: `copy!(dst::AbstractArray, src::AbstractArray)` is deprecated. You can either use `copyto!(dst, src)` or `Future.copy!(dst, src)` instead.
│   caller = macro expansion at 13_arraycommon.jl:231 [inlined]
└ @ Core 13_arraycommon.jl:231
┌ Warning: `copy!(dest::Union{AbstractArray, IndexStyle}, args...)` is deprecated, use `copyto!(dest, args...)` instead.
│   caller = macro expansion at 13_arraycommon.jl:233 [inlined]
└ @ Core 13_arraycommon.jl:233
┌ Warning: `copy!(dest::Union{AbstractArray, IndexStyle}, args...)` is deprecated, use `copyto!(dest, args...)` instead.
│   caller = macro expansion at 13_arraycommon.jl:235 [inlined]
└ @ Core 13_arraycommon.jl:235
┌ Warning: `copy!(dest::Union{AbstractArray, IndexStyle}, args...)` is deprecated, use `copyto!(dest, args...)` instead.
│   caller = macro expansion at 13_arraycommon.jl:240 [inlined]
└ @ Core 13_arraycommon.jl:240
┌ Warning: `copy!(dest::Union{AbstractArray, IndexStyle}, args...)` is deprecated, use `copyto!(dest, args...)` instead.
│   caller = macro expansion at 13_arraycommon.jl:242 [inlined]
└ @ Core 13_arraycommon.jl:242
┌ Warning: `copy!(dest::Union{AbstractArray, IndexStyle}, args...)` is deprecated, use `copyto!(dest, args...)` instead.
│   caller = macro expansion at 13_arraycommon.jl:244 [inlined]
└ @ Core 13_arraycommon.jl:244
┌ Warning: `copy!(dest::Union{AbstractArray, IndexStyle}, args...)` is deprecated, use `copyto!(dest, args...)` instead.
│   caller = macro expansion at 13_arraycommon.jl:246 [inlined]
└ @ Core 13_arraycommon.jl:246
┌ Warning: `copy!(dest::Union{AbstractArray, IndexStyle}, args...)` is deprecated, use `copyto!(dest, args...)` instead.
│   caller = macro expansion at 13_arraycommon.jl:248 [inlined]
└ @ Core 13_arraycommon.jl:248
┌ Warning: `copy!(dest::Union{AbstractArray, IndexStyle}, args...)` is deprecated, use `copyto!(dest, args...)` instead.
│   caller = macro expansion at 13_arraycommon.jl:250 [inlined]
└ @ Core 13_arraycommon.jl:250
┌ Warning: `copy!(dest::Union{AbstractArray, IndexStyle}, args...)` is deprecated, use `copyto!(dest, args...)` instead.
│   caller = macro expansion at 13_arraycommon.jl:252 [inlined]
└ @ Core 13_arraycommon.jl:252
┌ Warning: `CategoricalVector{T}(m::Int; ordered=false) where T` is deprecated, use `CategoricalVector{T}(undef, m; ordered=ordered)` instead.
│   caller = macro expansion at 13_arraycommon.jl:259 [inlined]
└ @ Core 13_arraycommon.jl:259
┌ Warning: `copy!(dst::AbstractArray, src::AbstractArray)` is deprecated. You can either use `copyto!(dst, src)` or `Future.copy!(dst, src)` instead.
│   caller = macro expansion at 13_arraycommon.jl:260 [inlined]
└ @ Core 13_arraycommon.jl:260
┌ Warning: `CategoricalVector{T}(m::Int; ordered=false) where T` is deprecated, use `CategoricalVector{T}(undef, m; ordered=ordered)` instead.
│   caller = macro expansion at 13_arraycommon.jl:268 [inlined]
└ @ Core 13_arraycommon.jl:268
┌ Warning: `copy!(dst::AbstractArray, src::AbstractArray)` is deprecated. You can either use `copyto!(dst, src)` or `Future.copy!(dst, src)` instead.
│   caller = macro expansion at 13_arraycommon.jl:269 [inlined]
└ @ Core 13_arraycommon.jl:269
┌ Warning: `CategoricalVector{T}(m::Int; ordered=false) where T` is deprecated, use `CategoricalVector{T}(undef, m; ordered=ordered)` instead.
│   caller = macro expansion at 13_arraycommon.jl:277 [inlined]
└ @ Core 13_arraycommon.jl:277
┌ Warning: `copy!(dst::AbstractArray, src::AbstractArray)` is deprecated. You can either use `copyto!(dst, src)` or `Future.copy!(dst, src)` instead.
│   caller = macro expansion at 13_arraycommon.jl:278 [inlined]
└ @ Core 13_arraycommon.jl:278
┌ Warning: `CategoricalVector{T}(m::Int; ordered=false) where T` is deprecated, use `CategoricalVector{T}(undef, m; ordered=ordered)` instead.
│   caller = macro expansion at 13_arraycommon.jl:286 [inlined]
└ @ Core 13_arraycommon.jl:286
┌ Warning: `copy!(dst::AbstractArray, src::AbstractArray)` is deprecated. You can either use `copyto!(dst, src)` or `Future.copy!(dst, src)` instead.
│   caller = macro expansion at 13_arraycommon.jl:287 [inlined]
└ @ Core 13_arraycommon.jl:287
┌ Warning: `CategoricalVector{T}(m::Int; ordered=false) where T` is deprecated, use `CategoricalVector{T}(undef, m; ordered=ordered)` instead.
│   caller = macro expansion at 13_arraycommon.jl:296 [inlined]
└ @ Core 13_arraycommon.jl:296
┌ Warning: `copy!(dst::AbstractArray, src::AbstractArray)` is deprecated. You can either use `copyto!(dst, src)` or `Future.copy!(dst, src)` instead.
│   caller = macro expansion at 13_arraycommon.jl:297 [inlined]
└ @ Core 13_arraycommon.jl:297
┌ Warning: `CategoricalVector{T}(m::Int; ordered=false) where T` is deprecated, use `CategoricalVector{T}(undef, m; ordered=ordered)` instead.
│   caller = macro expansion at 13_arraycommon.jl:306 [inlined]
└ @ Core 13_arraycommon.jl:306
┌ Warning: `copy!(dst::AbstractArray, src::AbstractArray)` is deprecated. You can either use `copyto!(dst, src)` or `Future.copy!(dst, src)` instead.
│   caller = macro expansion at 13_arraycommon.jl:307 [inlined]
└ @ Core 13_arraycommon.jl:307
┌ Warning: `CategoricalVector{T}(m::Int; ordered=false) where T` is deprecated, use `CategoricalVector{T}(undef, m; ordered=ordered)` instead.
│   caller = macro expansion at 13_arraycommon.jl:316 [inlined]
└ @ Core 13_arraycommon.jl:316
┌ Warning: `copy!(dst::AbstractArray, src::AbstractArray)` is deprecated. You can either use `copyto!(dst, src)` or `Future.copy!(dst, src)` instead.
│   caller = macro expansion at 13_arraycommon.jl:317 [inlined]
└ @ Core 13_arraycommon.jl:317
┌ Warning: `CategoricalVector{T}(m::Int; ordered=false) where T` is deprecated, use `CategoricalVector{T}(undef, m; ordered=ordered)` instead.
│   caller = macro expansion at 13_arraycommon.jl:326 [inlined]
└ @ Core 13_arraycommon.jl:326
┌ Warning: `copy!(dst::AbstractArray, src::AbstractArray)` is deprecated. You can either use `copyto!(dst, src)` or `Future.copy!(dst, src)` instead.
│   caller = macro expansion at 13_arraycommon.jl:327 [inlined]
└ @ Core 13_arraycommon.jl:327
┌ Warning: `CategoricalVector{T}(m::Int; ordered=false) where T` is deprecated, use `CategoricalVector{T}(undef, m; ordered=ordered)` instead.
│   caller = macro expansion at 13_arraycommon.jl:336 [inlined]
└ @ Core 13_arraycommon.jl:336
┌ Warning: `copy!(dst::AbstractArray, src::AbstractArray)` is deprecated. You can either use `copyto!(dst, src)` or `Future.copy!(dst, src)` instead.
│   caller = macro expansion at 13_arraycommon.jl:337 [inlined]
└ @ Core 13_arraycommon.jl:337
┌ Warning: `CategoricalVector{T}(m::Int; ordered=false) where T` is deprecated, use `CategoricalVector{T}(undef, m; ordered=ordered)` instead.
│   caller = macro expansion at 13_arraycommon.jl:342 [inlined]
└ @ Core 13_arraycommon.jl:342
┌ Warning: `copy!(dst::AbstractArray, src::AbstractArray)` is deprecated. You can either use `copyto!(dst, src)` or `Future.copy!(dst, src)` instead.
│   caller = macro expansion at 13_arraycommon.jl:343 [inlined]
└ @ Core 13_arraycommon.jl:343
┌ Warning: `copy!(dst::AbstractArray, src::AbstractArray)` is deprecated. You can either use `copyto!(dst, src)` or `Future.copy!(dst, src)` instead.
│   caller = macro expansion at 13_arraycommon.jl:353 [inlined]
└ @ Core 13_arraycommon.jl:353
┌ Warning: `copy!(dst::AbstractArray, src::AbstractArray)` is deprecated. You can either use `copyto!(dst, src)` or `Future.copy!(dst, src)` instead.
│   caller = macro expansion at 13_arraycommon.jl:359 [inlined]
└ @ Core 13_arraycommon.jl:359
┌ Warning: `copy!(dst::AbstractArray, src::AbstractArray)` is deprecated. You can either use `copyto!(dst, src)` or `Future.copy!(dst, src)` instead.
│   caller = macro expansion at 13_arraycommon.jl:369 [inlined]
└ @ Core 13_arraycommon.jl:369
┌ Warning: `copy!(dst::AbstractArray, src::AbstractArray)` is deprecated. You can either use `copyto!(dst, src)` or `Future.copy!(dst, src)` instead.
│   caller = macro expansion at 13_arraycommon.jl:378 [inlined]
└ @ Core 13_arraycommon.jl:378
┌ Warning: `CategoricalVector{T}(m::Int; ordered=false) where T` is deprecated, use `CategoricalVector{T}(undef, m; ordered=ordered)` instead.
│   caller = macro expansion at 13_arraycommon.jl:390 [inlined]
└ @ Core 13_arraycommon.jl:390
┌ Warning: `copy!(dst::AbstractArray, src::AbstractArray)` is deprecated. You can either use `copyto!(dst, src)` or `Future.copy!(dst, src)` instead.
│   caller = macro expansion at 13_arraycommon.jl:391 [inlined]
└ @ Core 13_arraycommon.jl:391
┌ Warning: `copy!(dst::AbstractArray, src::AbstractArray)` is deprecated. You can either use `copyto!(dst, src)` or `Future.copy!(dst, src)` instead.
│   caller = macro expansion at 13_arraycommon.jl:396 [inlined]
└ @ Core 13_arraycommon.jl:396
┌ Warning: `CategoricalVector{T}(m::Int; ordered=false) where T` is deprecated, use `CategoricalVector{T}(undef, m; ordered=ordered)` instead.
│   caller = macro expansion at 13_arraycommon.jl:402 [inlined]
└ @ Core 13_arraycommon.jl:402
┌ Warning: `copy!(dst::AbstractArray, src::AbstractArray)` is deprecated. You can either use `copyto!(dst, src)` or `Future.copy!(dst, src)` instead.
│   caller = macro expansion at 13_arraycommon.jl:403 [inlined]
└ @ Core 13_arraycommon.jl:403
┌ Warning: `CategoricalVector{T}(m::Int; ordered=false) where T` is deprecated, use `CategoricalVector{T}(undef, m; ordered=ordered)` instead.
│   caller = macro expansion at 13_arraycommon.jl:409 [inlined]
└ @ Core 13_arraycommon.jl:409
┌ Warning: `copy!(dst::AbstractArray, src::AbstractArray)` is deprecated. You can either use `copyto!(dst, src)` or `Future.copy!(dst, src)` instead.
│   caller = macro expansion at 13_arraycommon.jl:410 [inlined]
└ @ Core 13_arraycommon.jl:410
┌ Warning: `CategoricalVector{T}(m::Int; ordered=false) where T` is deprecated, use `CategoricalVector{T}(undef, m; ordered=ordered)` instead.
│   caller = macro expansion at 13_arraycommon.jl:418 [inlined]
└ @ Core 13_arraycommon.jl:418
┌ Warning: `copy!(dst::AbstractArray, src::AbstractArray)` is deprecated. You can either use `copyto!(dst, src)` or `Future.copy!(dst, src)` instead.
│   caller = macro expansion at 13_arraycommon.jl:419 [inlined]
└ @ Core 13_arraycommon.jl:419
┌ Warning: `copy!(dst::AbstractArray, src::AbstractArray)` is deprecated. You can either use `copyto!(dst, src)` or `Future.copy!(dst, src)` instead.
│   caller = macro expansion at 13_arraycommon.jl:422 [inlined]
└ @ Core 13_arraycommon.jl:422
┌ Warning: `CategoricalVector{T}(m::Int; ordered=false) where T` is deprecated, use `CategoricalVector{T}(undef, m; ordered=ordered)` instead.
│   caller = macro expansion at 13_arraycommon.jl:426 [inlined]
└ @ Core 13_arraycommon.jl:426
┌ Warning: `copy!(dst::AbstractArray, src::AbstractArray)` is deprecated. You can either use `copyto!(dst, src)` or `Future.copy!(dst, src)` instead.
│   caller = macro expansion at 13_arraycommon.jl:427 [inlined]
└ @ Core 13_arraycommon.jl:427
┌ Warning: `copy!(dst::AbstractArray, src::AbstractArray)` is deprecated. You can either use `copyto!(dst, src)` or `Future.copy!(dst, src)` instead.
│   caller = macro expansion at 13_arraycommon.jl:453 [inlined]
└ @ Core 13_arraycommon.jl:453
┌ Warning: `copy!(dst::AbstractArray, src::AbstractArray)` is deprecated. You can either use `copyto!(dst, src)` or `Future.copy!(dst, src)` instead.
│   caller = macro expansion at 13_arraycommon.jl:463 [inlined]
└ @ Core 13_arraycommon.jl:463
┌ Warning: `copy!(dst::AbstractArray, src::AbstractArray)` is deprecated. You can either use `copyto!(dst, src)` or `Future.copy!(dst, src)` instead.
│   caller = macro expansion at 13_arraycommon.jl:473 [inlined]
└ @ Core 13_arraycommon.jl:473
┌ Warning: `copy!(dst::AbstractArray, src::AbstractArray)` is deprecated. You can either use `copyto!(dst, src)` or `Future.copy!(dst, src)` instead.
│   caller = macro expansion at 13_arraycommon.jl:483 [inlined]
└ @ Core 13_arraycommon.jl:483
┌ Warning: `copy!(dst::AbstractArray, src::AbstractArray)` is deprecated. You can either use `copyto!(dst, src)` or `Future.copy!(dst, src)` instead.
│   caller = macro expansion at 13_arraycommon.jl:493 [inlined]
└ @ Core 13_arraycommon.jl:493
┌ Warning: `convert(::Type{String}, s::Symbol)` is deprecated, use `String(s)` instead.
│   caller = fill!(::CategoricalArrays.CategoricalArray{String,1,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Union{}}, ::Symbol) at array.jl:341
└ @ CategoricalArrays array.jl:341
┌ Warning: `convert(::Type{String}, s::Symbol)` is deprecated, use `String(s)` instead.
│   caller = fill!(::CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Missing}, ::Symbol) at array.jl:341
└ @ CategoricalArrays array.jl:341
┌ Warning: `CategoricalArray{T}(m::Int; ordered=false) where T` is deprecated, use `CategoricalArray{T}(undef, m; ordered=ordered)` instead.
│   caller = macro expansion at 13_arraycommon.jl:715 [inlined]
└ @ Core 13_arraycommon.jl:715
┌ Warning: `CategoricalVector{T}(m::Int; ordered=false) where T` is deprecated, use `CategoricalVector{T}(undef, m; ordered=ordered)` instead.
│   caller = macro expansion at 13_arraycommon.jl:796 [inlined]
└ @ Core 13_arraycommon.jl:796
┌ Warning: `CategoricalVector{T}(m::Int; ordered=false) where T` is deprecated, use `CategoricalVector{T}(undef, m; ordered=ordered)` instead.
│   caller = macro expansion at 13_arraycommon.jl:797 [inlined]
└ @ Core 13_arraycommon.jl:797
vcat() takes into account element type even when array is empty: Error During Test at /home/vagrant/.julia/v0.7/CategoricalArrays/test/13_arraycommon.jl:794
  Got exception ErrorException("return type CategoricalArrays.CategoricalArray{Any,1,UInt32,Any,CategoricalArrays.CategoricalValue{Any,UInt32},Missing} does not match inferred return type CategoricalArrays.CategoricalArray{Any,_1,UInt32,Any,CategoricalArrays.CategoricalValue{Any,UInt32},Missing} where _1") outside of a @test
  return type CategoricalArrays.CategoricalArray{Any,1,UInt32,Any,CategoricalArrays.CategoricalValue{Any,UInt32},Missing} does not match inferred return type CategoricalArrays.CategoricalArray{Any,_1,UInt32,Any,CategoricalArrays.CategoricalValue{Any,UInt32},Missing} where _1
  Stacktrace:
   [1] error(::String) at ./error.jl:33
   [2] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/13_arraycommon.jl:800 [inlined]
   [3] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v0.7/Test/src/Test.jl:1022 [inlined]
   [4] top-level scope at /home/vagrant/.julia/v0.7/CategoricalArrays/test/13_arraycommon.jl:796
   [5] include at ./boot.jl:314 [inlined]
   [6] include_relative(::Module, ::String) at ./loading.jl:1067
   [7] include at ./sysimg.jl:29 [inlined]
   [8] include(::String) at /home/vagrant/.julia/v0.7/CategoricalArrays/test/runtests.jl:5
   [9] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/runtests.jl:36 [inlined]
   [10] top-level scope at ./<missing>:1095
   [11] include at ./boot.jl:314 [inlined]
   [12] include_relative(::Module, ::String) at ./loading.jl:1067
   [13] include(::Module, ::String) at ./sysimg.jl:29
   [14] exec_options(::Base.JLOptions) at ./client.jl:327
   [15] _start() at ./client.jl:455
Test Summary:                                                                                                                                                                                                                       |  Pass  Error  Total
13_arraycommon.jl                                                                                                                                                                                                                   | 22346      1  22347
  mergelevels()                                                                                                                                                                                                                     |    23            23
  Testing Union{}                                                                                                                                                                                                                   |   216           216
  Testing Missing                                                                                                                                                                                                                   |   220           220
  constructors and convert() between categorical arrays, ordered_orig=true, ordered=true, R=UInt32, T=String, CVM2=CategoricalArrays.CategoricalArray{T,1,V,C,U,U1} where U1 where U where C where V where T, N=1                   |   272           272
  constructors and convert() between categorical arrays, ordered_orig=true, ordered=true, R=UInt32, T=String, CVM2=CategoricalArrays.CategoricalArray{T,2,V,C,U,U1} where U1 where U where C where V where T, N=2                   |   272           272
  constructors and convert() between categorical arrays, ordered_orig=true, ordered=true, R=UInt32, T=Union{Missing, String}, CVM2=CategoricalArrays.CategoricalArray{T,1,V,C,U,U1} where U1 where U where C where V where T, N=1   |   272           272
  constructors and convert() between categorical arrays, ordered_orig=true, ordered=true, R=UInt32, T=Union{Missing, String}, CVM2=CategoricalArrays.CategoricalArray{T,2,V,C,U,U1} where U1 where U where C where V where T, N=2   |   272           272
  constructors and convert() between categorical arrays, ordered_orig=true, ordered=true, R=UInt8, T=String, CVM2=CategoricalArrays.CategoricalArray{T,1,V,C,U,U1} where U1 where U where C where V where T, N=1                    |   272           272
  constructors and convert() between categorical arrays, ordered_orig=true, ordered=true, R=UInt8, T=String, CVM2=CategoricalArrays.CategoricalArray{T,2,V,C,U,U1} where U1 where U where C where V where T, N=2                    |   272           272
  constructors and convert() between categorical arrays, ordered_orig=true, ordered=true, R=UInt8, T=Union{Missing, String}, CVM2=CategoricalArrays.CategoricalArray{T,1,V,C,U,U1} where U1 where U where C where V where T, N=1    |   272           272
  constructors and convert() between categorical arrays, ordered_orig=true, ordered=true, R=UInt8, T=Union{Missing, String}, CVM2=CategoricalArrays.CategoricalArray{T,2,V,C,U,U1} where U1 where U where C where V where T, N=2    |   272           272
  constructors and convert() between categorical arrays, ordered_orig=true, ordered=true, R=UInt64, T=String, CVM2=CategoricalArrays.CategoricalArray{T,1,V,C,U,U1} where U1 where U where C where V where T, N=1                   |   272           272
  constructors and convert() between categorical arrays, ordered_orig=true, ordered=true, R=UInt64, T=String, CVM2=CategoricalArrays.CategoricalArray{T,2,V,C,U,U1} where U1 where U where C where V where T, N=2                   |   272           272
  constructors and convert() between categorical arrays, ordered_orig=true, ordered=true, R=UInt64, T=Union{Missing, String}, CVM2=CategoricalArrays.CategoricalArray{T,1,V,C,U,U1} where U1 where U where C where V where T, N=1   |   272           272
  constructors and convert() between categorical arrays, ordered_orig=true, ordered=true, R=UInt64, T=Union{Missing, String}, CVM2=CategoricalArrays.CategoricalArray{T,2,V,C,U,U1} where U1 where U where C where V where T, N=2   |   272           272
  constructors and convert() between categorical arrays, ordered_orig=true, ordered=true, R=Int8, T=String, CVM2=CategoricalArrays.CategoricalArray{T,1,V,C,U,U1} where U1 where U where C where V where T, N=1                     |   272           272
  constructors and convert() between categorical arrays, ordered_orig=true, ordered=true, R=Int8, T=String, CVM2=CategoricalArrays.CategoricalArray{T,2,V,C,U,U1} where U1 where U where C where V where T, N=2                     |   272           272
  constructors and convert() between categorical arrays, ordered_orig=true, ordered=true, R=Int8, T=Union{Missing, String}, CVM2=CategoricalArrays.CategoricalArray{T,1,V,C,U,U1} where U1 where U where C where V where T, N=1     |   272           272
  constructors and convert() between categorical arrays, ordered_orig=true, ordered=true, R=Int8, T=Union{Missing, String}, CVM2=CategoricalArrays.CategoricalArray{T,2,V,C,U,U1} where U1 where U where C where V where T, N=2     |   272           272
  constructors and convert() between categorical arrays, ordered_orig=true, ordered=true, R=Int64, T=String, CVM2=CategoricalArrays.CategoricalArray{T,1,V,C,U,U1} where U1 where U where C where V where T, N=1                    |   272           272
  constructors and convert() between categorical arrays, ordered_orig=true, ordered=true, R=Int64, T=String, CVM2=CategoricalArrays.CategoricalArray{T,2,V,C,U,U1} where U1 where U where C where V where T, N=2                    |   272           272
  constructors and convert() between categorical arrays, ordered_orig=true, ordered=true, R=Int64, T=Union{Missing, String}, CVM2=CategoricalArrays.CategoricalArray{T,1,V,C,U,U1} where U1 where U where C where V where T, N=1    |   272           272
  constructors and convert() between categorical arrays, ordered_orig=true, ordered=true, R=Int64, T=Union{Missing, String}, CVM2=CategoricalArrays.CategoricalArray{T,2,V,C,U,U1} where U1 where U where C where V where T, N=2    |   272           272
  constructors and convert() between categorical arrays, ordered_orig=true, ordered=false, R=UInt32, T=String, CVM2=CategoricalArrays.CategoricalArray{T,1,V,C,U,U1} where U1 where U where C where V where T, N=1                  |   272           272
  constructors and convert() between categorical arrays, ordered_orig=true, ordered=false, R=UInt32, T=String, CVM2=CategoricalArrays.CategoricalArray{T,2,V,C,U,U1} where U1 where U where C where V where T, N=2                  |   272           272
  constructors and convert() between categorical arrays, ordered_orig=true, ordered=false, R=UInt32, T=Union{Missing, String}, CVM2=CategoricalArrays.CategoricalArray{T,1,V,C,U,U1} where U1 where U where C where V where T, N=1  |   272           272
  constructors and convert() between categorical arrays, ordered_orig=true, ordered=false, R=UInt32, T=Union{Missing, String}, CVM2=CategoricalArrays.CategoricalArray{T,2,V,C,U,U1} where U1 where U where C where V where T, N=2  |   272           272
  constructors and convert() between categorical arrays, ordered_orig=true, ordered=false, R=UInt8, T=String, CVM2=CategoricalArrays.CategoricalArray{T,1,V,C,U,U1} where U1 where U where C where V where T, N=1                   |   272           272
  constructors and convert() between categorical arrays, ordered_orig=true, ordered=false, R=UInt8, T=String, CVM2=CategoricalArrays.CategoricalArray{T,2,V,C,U,U1} where U1 where U where C where V where T, N=2                   |   272           272
  constructors and convert() between categorical arrays, ordered_orig=true, ordered=false, R=UInt8, T=Union{Missing, String}, CVM2=CategoricalArrays.CategoricalArray{T,1,V,C,U,U1} where U1 where U where C where V where T, N=1   |   272           272
  constructors and convert() between categorical arrays, ordered_orig=true, ordered=false, R=UInt8, T=Union{Missing, String}, CVM2=CategoricalArrays.CategoricalArray{T,2,V,C,U,U1} where U1 where U where C where V where T, N=2   |   272           272
  constructors and convert() between categorical arrays, ordered_orig=true, ordered=false, R=UInt64, T=String, CVM2=CategoricalArrays.CategoricalArray{T,1,V,C,U,U1} where U1 where U where C where V where T, N=1                  |   272           272
  constructors and convert() between categorical arrays, ordered_orig=true, ordered=false, R=UInt64, T=String, CVM2=CategoricalArrays.CategoricalArray{T,2,V,C,U,U1} where U1 where U where C where V where T, N=2                  |   272           272
  constructors and convert() between categorical arrays, ordered_orig=true, ordered=false, R=UInt64, T=Union{Missing, String}, CVM2=CategoricalArrays.CategoricalArray{T,1,V,C,U,U1} where U1 where U where C where V where T, N=1  |   272           272
  constructors and convert() between categorical arrays, ordered_orig=true, ordered=false, R=UInt64, T=Union{Missing, String}, CVM2=CategoricalArrays.CategoricalArray{T,2,V,C,U,U1} where U1 where U where C where V where T, N=2  |   272           272
  constructors and convert() between categorical arrays, ordered_orig=true, ordered=false, R=Int8, T=String, CVM2=CategoricalArrays.CategoricalArray{T,1,V,C,U,U1} where U1 where U where C where V where T, N=1                    |   272           272
  constructors and convert() between categorical arrays, ordered_orig=true, ordered=false, R=Int8, T=String, CVM2=CategoricalArrays.CategoricalArray{T,2,V,C,U,U1} where U1 where U where C where V where T, N=2                    |   272           272
  constructors and convert() between categorical arrays, ordered_orig=true, ordered=false, R=Int8, T=Union{Missing, String}, CVM2=CategoricalArrays.CategoricalArray{T,1,V,C,U,U1} where U1 where U where C where V where T, N=1    |   272           272
  constructors and convert() between categorical arrays, ordered_orig=true, ordered=false, R=Int8, T=Union{Missing, String}, CVM2=CategoricalArrays.CategoricalArray{T,2,V,C,U,U1} where U1 where U where C where V where T, N=2    |   272           272
  constructors and convert() between categorical arrays, ordered_orig=true, ordered=false, R=Int64, T=String, CVM2=CategoricalArrays.CategoricalArray{T,1,V,C,U,U1} where U1 where U where C where V where T, N=1                   |   272           272
  constructors and convert() between categorical arrays, ordered_orig=true, ordered=false, R=Int64, T=String, CVM2=CategoricalArrays.CategoricalArray{T,2,V,C,U,U1} where U1 where U where C where V where T, N=2                   |   272           272
  constructors and convert() between categorical arrays, ordered_orig=true, ordered=false, R=Int64, T=Union{Missing, String}, CVM2=CategoricalArrays.CategoricalArray{T,1,V,C,U,U1} where U1 where U where C where V where T, N=1   |   272           272
  constructors and convert() between categorical arrays, ordered_orig=true, ordered=false, R=Int64, T=Union{Missing, String}, CVM2=CategoricalArrays.CategoricalArray{T,2,V,C,U,U1} where U1 where U where C where V where T, N=2   |   272           272
  constructors and convert() between categorical arrays, ordered_orig=false, ordered=true, R=UInt32, T=String, CVM2=CategoricalArrays.CategoricalArray{T,1,V,C,U,U1} where U1 where U where C where V where T, N=1                  |   272           272
  constructors and convert() between categorical arrays, ordered_orig=false, ordered=true, R=UInt32, T=String, CVM2=CategoricalArrays.CategoricalArray{T,2,V,C,U,U1} where U1 where U where C where V where T, N=2                  |   272           272
  constructors and convert() between categorical arrays, ordered_orig=false, ordered=true, R=UInt32, T=Union{Missing, String}, CVM2=CategoricalArrays.CategoricalArray{T,1,V,C,U,U1} where U1 where U where C where V where T, N=1  |   272           272
  constructors and convert() between categorical arrays, ordered_orig=false, ordered=true, R=UInt32, T=Union{Missing, String}, CVM2=CategoricalArrays.CategoricalArray{T,2,V,C,U,U1} where U1 where U where C where V where T, N=2  |   272           272
  constructors and convert() between categorical arrays, ordered_orig=false, ordered=true, R=UInt8, T=String, CVM2=CategoricalArrays.CategoricalArray{T,1,V,C,U,U1} where U1 where U where C where V where T, N=1                   |   272           272
  constructors and convert() between categorical arrays, ordered_orig=false, ordered=true, R=UInt8, T=String, CVM2=CategoricalArrays.CategoricalArray{T,2,V,C,U,U1} where U1 where U where C where V where T, N=2                   |   272           272
  constructors and convert() between categorical arrays, ordered_orig=false, ordered=true, R=UInt8, T=Union{Missing, String}, CVM2=CategoricalArrays.CategoricalArray{T,1,V,C,U,U1} where U1 where U where C where V where T, N=1   |   272           272
  constructors and convert() between categorical arrays, ordered_orig=false, ordered=true, R=UInt8, T=Union{Missing, String}, CVM2=CategoricalArrays.CategoricalArray{T,2,V,C,U,U1} where U1 where U where C where V where T, N=2   |   272           272
  constructors and convert() between categorical arrays, ordered_orig=false, ordered=true, R=UInt64, T=String, CVM2=CategoricalArrays.CategoricalArray{T,1,V,C,U,U1} where U1 where U where C where V where T, N=1                  |   272           272
  constructors and convert() between categorical arrays, ordered_orig=false, ordered=true, R=UInt64, T=String, CVM2=CategoricalArrays.CategoricalArray{T,2,V,C,U,U1} where U1 where U where C where V where T, N=2                  |   272           272
  constructors and convert() between categorical arrays, ordered_orig=false, ordered=true, R=UInt64, T=Union{Missing, String}, CVM2=CategoricalArrays.CategoricalArray{T,1,V,C,U,U1} where U1 where U where C where V where T, N=1  |   272           272
  constructors and convert() between categorical arrays, ordered_orig=false, ordered=true, R=UInt64, T=Union{Missing, String}, CVM2=CategoricalArrays.CategoricalArray{T,2,V,C,U,U1} where U1 where U where C where V where T, N=2  |   272           272
  constructors and convert() between categorical arrays, ordered_orig=false, ordered=true, R=Int8, T=String, CVM2=CategoricalArrays.CategoricalArray{T,1,V,C,U,U1} where U1 where U where C where V where T, N=1                    |   272           272
  constructors and convert() between categorical arrays, ordered_orig=false, ordered=true, R=Int8, T=String, CVM2=CategoricalArrays.CategoricalArray{T,2,V,C,U,U1} where U1 where U where C where V where T, N=2                    |   272           272
  constructors and convert() between categorical arrays, ordered_orig=false, ordered=true, R=Int8, T=Union{Missing, String}, CVM2=CategoricalArrays.CategoricalArray{T,1,V,C,U,U1} where U1 where U where C where V where T, N=1    |   272           272
  constructors and convert() between categorical arrays, ordered_orig=false, ordered=true, R=Int8, T=Union{Missing, String}, CVM2=CategoricalArrays.CategoricalArray{T,2,V,C,U,U1} where U1 where U where C where V where T, N=2    |   272           272
  constructors and convert() between categorical arrays, ordered_orig=false, ordered=true, R=Int64, T=String, CVM2=CategoricalArrays.CategoricalArray{T,1,V,C,U,U1} where U1 where U where C where V where T, N=1                   |   272           272
  constructors and convert() between categorical arrays, ordered_orig=false, ordered=true, R=Int64, T=String, CVM2=CategoricalArrays.CategoricalArray{T,2,V,C,U,U1} where U1 where U where C where V where T, N=2                   |   272           272
  constructors and convert() between categorical arrays, ordered_orig=false, ordered=true, R=Int64, T=Union{Missing, String}, CVM2=CategoricalArrays.CategoricalArray{T,1,V,C,U,U1} where U1 where U where C where V where T, N=1   |   272           272
  constructors and convert() between categorical arrays, ordered_orig=false, ordered=true, R=Int64, T=Union{Missing, String}, CVM2=CategoricalArrays.CategoricalArray{T,2,V,C,U,U1} where U1 where U where C where V where T, N=2   |   272           272
  constructors and convert() between categorical arrays, ordered_orig=false, ordered=false, R=UInt32, T=String, CVM2=CategoricalArrays.CategoricalArray{T,1,V,C,U,U1} where U1 where U where C where V where T, N=1                 |   272           272
  constructors and convert() between categorical arrays, ordered_orig=false, ordered=false, R=UInt32, T=String, CVM2=CategoricalArrays.CategoricalArray{T,2,V,C,U,U1} where U1 where U where C where V where T, N=2                 |   272           272
  constructors and convert() between categorical arrays, ordered_orig=false, ordered=false, R=UInt32, T=Union{Missing, String}, CVM2=CategoricalArrays.CategoricalArray{T,1,V,C,U,U1} where U1 where U where C where V where T, N=1 |   272           272
  constructors and convert() between categorical arrays, ordered_orig=false, ordered=false, R=UInt32, T=Union{Missing, String}, CVM2=CategoricalArrays.CategoricalArray{T,2,V,C,U,U1} where U1 where U where C where V where T, N=2 |   272           272
  constructors and convert() between categorical arrays, ordered_orig=false, ordered=false, R=UInt8, T=String, CVM2=CategoricalArrays.CategoricalArray{T,1,V,C,U,U1} where U1 where U where C where V where T, N=1                  |   272           272
  constructors and convert() between categorical arrays, ordered_orig=false, ordered=false, R=UInt8, T=String, CVM2=CategoricalArrays.CategoricalArray{T,2,V,C,U,U1} where U1 where U where C where V where T, N=2                  |   272           272
  constructors and convert() between categorical arrays, ordered_orig=false, ordered=false, R=UInt8, T=Union{Missing, String}, CVM2=CategoricalArrays.CategoricalArray{T,1,V,C,U,U1} where U1 where U where C where V where T, N=1  |   272           272
  constructors and convert() between categorical arrays, ordered_orig=false, ordered=false, R=UInt8, T=Union{Missing, String}, CVM2=CategoricalArrays.CategoricalArray{T,2,V,C,U,U1} where U1 where U where C where V where T, N=2  |   272           272
  constructors and convert() between categorical arrays, ordered_orig=false, ordered=false, R=UInt64, T=String, CVM2=CategoricalArrays.CategoricalArray{T,1,V,C,U,U1} where U1 where U where C where V where T, N=1                 |   272           272
  constructors and convert() between categorical arrays, ordered_orig=false, ordered=false, R=UInt64, T=String, CVM2=CategoricalArrays.CategoricalArray{T,2,V,C,U,U1} where U1 where U where C where V where T, N=2                 |   272           272
  constructors and convert() between categorical arrays, ordered_orig=false, ordered=false, R=UInt64, T=Union{Missing, String}, CVM2=CategoricalArrays.CategoricalArray{T,1,V,C,U,U1} where U1 where U where C where V where T, N=1 |   272           272
  constructors and convert() between categorical arrays, ordered_orig=false, ordered=false, R=UInt64, T=Union{Missing, String}, CVM2=CategoricalArrays.CategoricalArray{T,2,V,C,U,U1} where U1 where U where C where V where T, N=2 |   272           272
  constructors and convert() between categorical arrays, ordered_orig=false, ordered=false, R=Int8, T=String, CVM2=CategoricalArrays.CategoricalArray{T,1,V,C,U,U1} where U1 where U where C where V where T, N=1                   |   272           272
  constructors and convert() between categorical arrays, ordered_orig=false, ordered=false, R=Int8, T=String, CVM2=CategoricalArrays.CategoricalArray{T,2,V,C,U,U1} where U1 where U where C where V where T, N=2                   |   272           272
  constructors and convert() between categorical arrays, ordered_orig=false, ordered=false, R=Int8, T=Union{Missing, String}, CVM2=CategoricalArrays.CategoricalArray{T,1,V,C,U,U1} where U1 where U where C where V where T, N=1   |   272           272
  constructors and convert() between categorical arrays, ordered_orig=false, ordered=false, R=Int8, T=Union{Missing, String}, CVM2=CategoricalArrays.CategoricalArray{T,2,V,C,U,U1} where U1 where U where C where V where T, N=2   |   272           272
  constructors and convert() between categorical arrays, ordered_orig=false, ordered=false, R=Int64, T=String, CVM2=CategoricalArrays.CategoricalArray{T,1,V,C,U,U1} where U1 where U where C where V where T, N=1                  |   272           272
  constructors and convert() between categorical arrays, ordered_orig=false, ordered=false, R=Int64, T=String, CVM2=CategoricalArrays.CategoricalArray{T,2,V,C,U,U1} where U1 where U where C where V where T, N=2                  |   272           272
  constructors and convert() between categorical arrays, ordered_orig=false, ordered=false, R=Int64, T=Union{Missing, String}, CVM2=CategoricalArrays.CategoricalArray{T,1,V,C,U,U1} where U1 where U where C where V where T, N=1  |   272           272
  constructors and convert() between categorical arrays, ordered_orig=false, ordered=false, R=Int64, T=Union{Missing, String}, CVM2=CategoricalArrays.CategoricalArray{T,2,V,C,U,U1} where U1 where U where C where V where T, N=2  |   272           272
  converting from array with missings to array without missings CategoricalArray fails with missings                                                                                                                                |     2             2
  in(Int64, CategoricalArray{Int64})                                                                                                                                                                                                |     5             5
  in(Union{Missing, Int64}, CategoricalArray{Union{Missing, Int64}})                                                                                                                                                                |     5             5
  comparison                                                                                                                                                                                                                        |    34            34
  summary()                                                                                                                                                                                                                         |     2             2
  vcat() takes into account element type even when array is empty                                                                                                                                                                   |            1      1
  categorical() makes a copy of pool and refs                                                                                                                                                                                       |    32            32
  collect of CategoricalArray produces Array                                                                                                                                                                                        |     4             4
  Array(::CategoricalArray{T}) produces Array{T}                                                                                                                                                                                    |     4             4
  Array{T} constructors and convert                                                                                                                                                                                                 |     8             8
  convert(AbstractArray{T}, x)                                                                                                                                                                                                      |    12            12
  new levels can't be added through assignment when levels are ordered                                                                                                                                                              |     5             5
  float() and complex()                                                                                                                                                                                                             |     6             6
  droplevels                                                                                                                                                                                                                        |     4             4
  droplevels                                                                                                                                                                                                                        |     4             4
Test Summary:                                                                                                                                                                                                                       |  Pass  Error  Total
13_arraycommon.jl                                                                                                                                                                                                                   | 22346      1  22347
  mergelevels()                                                                                                                                                                                                                     |    23            23
  Testing Union{}                                                                                                                                                                                                                   |   216           216
  Testing Missing                                                                                                                                                                                                                   |   220           220
  constructors and convert() between categorical arrays, ordered_orig=true, ordered=true, R=UInt32, T=String, CVM2=CategoricalArrays.CategoricalArray{T,1,V,C,U,U1} where U1 where U where C where V where T, N=1                   |   272           272
  constructors and convert() between categorical arrays, ordered_orig=true, ordered=true, R=UInt32, T=String, CVM2=CategoricalArrays.CategoricalArray{T,2,V,C,U,U1} where U1 where U where C where V where T, N=2                   |   272           272
  constructors and convert() between categorical arrays, ordered_orig=true, ordered=true, R=UInt32, T=Union{Missing, String}, CVM2=CategoricalArrays.CategoricalArray{T,1,V,C,U,U1} where U1 where U where C where V where T, N=1   |   272           272
  constructors and convert() between categorical arrays, ordered_orig=true, ordered=true, R=UInt32, T=Union{Missing, String}, CVM2=CategoricalArrays.CategoricalArray{T,2,V,C,U,U1} where U1 where U where C where V where T, N=2   |   272           272
  constructors and convert() between categorical arrays, ordered_orig=true, ordered=true, R=UInt8, T=String, CVM2=CategoricalArrays.CategoricalArray{T,1,V,C,U,U1} where U1 where U where C where V where T, N=1                    |   272           272
  constructors and convert() between categorical arrays, ordered_orig=true, ordered=true, R=UInt8, T=String, CVM2=CategoricalArrays.CategoricalArray{T,2,V,C,U,U1} where U1 where U where C where V where T, N=2                    |   272           272
  constructors and convert() between categorical arrays, ordered_orig=true, ordered=true, R=UInt8, T=Union{Missing, String}, CVM2=CategoricalArrays.CategoricalArray{T,1,V,C,U,U1} where U1 where U where C where V where T, N=1    |   272           272
  constructors and convert() between categorical arrays, ordered_orig=true, ordered=true, R=UInt8, T=Union{Missing, String}, CVM2=CategoricalArrays.CategoricalArray{T,2,V,C,U,U1} where U1 where U where C where V where T, N=2    |   272           272
  constructors and convert() between categorical arrays, ordered_orig=true, ordered=true, R=UInt64, T=String, CVM2=CategoricalArrays.CategoricalArray{T,1,V,C,U,U1} where U1 where U where C where V where T, N=1                   |   272           272
  constructors and convert() between categorical arrays, ordered_orig=true, ordered=true, R=UInt64, T=String, CVM2=CategoricalArrays.CategoricalArray{T,2,V,C,U,U1} where U1 where U where C where V where T, N=2                   |   272           272
  constructors and convert() between categorical arrays, ordered_orig=true, ordered=true, R=UInt64, T=Union{Missing, String}, CVM2=CategoricalArrays.CategoricalArray{T,1,V,C,U,U1} where U1 where U where C where V where T, N=1   |   272           272
  constructors and convert() between categorical arrays, ordered_orig=true, ordered=true, R=UInt64, T=Union{Missing, String}, CVM2=CategoricalArrays.CategoricalArray{T,2,V,C,U,U1} where U1 where U where C where V where T, N=2   |   272           272
  constructors and convert() between categorical arrays, ordered_orig=true, ordered=true, R=Int8, T=String, CVM2=CategoricalArrays.CategoricalArray{T,1,V,C,U,U1} where U1 where U where C where V where T, N=1                     |   272           272
  constructors and convert() between categorical arrays, ordered_orig=true, ordered=true, R=Int8, T=String, CVM2=CategoricalArrays.CategoricalArray{T,2,V,C,U,U1} where U1 where U where C where V where T, N=2                     |   272           272
  constructors and convert() between categorical arrays, ordered_orig=true, ordered=true, R=Int8, T=Union{Missing, String}, CVM2=CategoricalArrays.CategoricalArray{T,1,V,C,U,U1} where U1 where U where C where V where T, N=1     |   272           272
  constructors and convert() between categorical arrays, ordered_orig=true, ordered=true, R=Int8, T=Union{Missing, String}, CVM2=CategoricalArrays.CategoricalArray{T,2,V,C,U,U1} where U1 where U where C where V where T, N=2     |   272           272
  constructors and convert() between categorical arrays, ordered_orig=true, ordered=true, R=Int64, T=String, CVM2=CategoricalArrays.CategoricalArray{T,1,V,C,U,U1} where U1 where U where C where V where T, N=1                    |   272           272
  constructors and convert() between categorical arrays, ordered_orig=true, ordered=true, R=Int64, T=String, CVM2=CategoricalArrays.CategoricalArray{T,2,V,C,U,U1} where U1 where U where C where V where T, N=2                    |   272           272
  constructors and convert() between categorical arrays, ordered_orig=true, ordered=true, R=Int64, T=Union{Missing, String}, CVM2=CategoricalArrays.CategoricalArray{T,1,V,C,U,U1} where U1 where U where C where V where T, N=1    |   272           272
  constructors and convert() between categorical arrays, ordered_orig=true, ordered=true, R=Int64, T=Union{Missing, String}, CVM2=CategoricalArrays.CategoricalArray{T,2,V,C,U,U1} where U1 where U where C where V where T, N=2    |   272           272
  constructors and convert() between categorical arrays, ordered_orig=true, ordered=false, R=UInt32, T=String, CVM2=CategoricalArrays.CategoricalArray{T,1,V,C,U,U1} where U1 where U where C where V where T, N=1                  |   272           272
  constructors and convert() between categorical arrays, ordered_orig=true, ordered=false, R=UInt32, T=String, CVM2=CategoricalArrays.CategoricalArray{T,2,V,C,U,U1} where U1 where U where C where V where T, N=2                  |   272           272
  constructors and convert() between categorical arrays, ordered_orig=true, ordered=false, R=UInt32, T=Union{Missing, String}, CVM2=CategoricalArrays.CategoricalArray{T,1,V,C,U,U1} where U1 where U where C where V where T, N=1  |   272           272
  constructors and convert() between categorical arrays, ordered_orig=true, ordered=false, R=UInt32, T=Union{Missing, String}, CVM2=CategoricalArrays.CategoricalArray{T,2,V,C,U,U1} where U1 where U where C where V where T, N=2  |   272           272
  constructors and convert() between categorical arrays, ordered_orig=true, ordered=false, R=UInt8, T=String, CVM2=CategoricalArrays.CategoricalArray{T,1,V,C,U,U1} where U1 where U where C where V where T, N=1                   |   272           272
  constructors and convert() between categorical arrays, ordered_orig=true, ordered=false, R=UInt8, T=String, CVM2=CategoricalArrays.CategoricalArray{T,2,V,C,U,U1} where U1 where U where C where V where T, N=2                   |   272           272
  constructors and convert() between categorical arrays, ordered_orig=true, ordered=false, R=UInt8, T=Union{Missing, String}, CVM2=CategoricalArrays.CategoricalArray{T,1,V,C,U,U1} where U1 where U where C where V where T, N=1   |   272           272
  constructors and convert() between categorical arrays, ordered_orig=true, ordered=false, R=UInt8, T=Union{Missing, String}, CVM2=CategoricalArrays.CategoricalArray{T,2,V,C,U,U1} where U1 where U where C where V where T, N=2   |   272           272
  constructors and convert() between categorical arrays, ordered_orig=true, ordered=false, R=UInt64, T=String, CVM2=CategoricalArrays.CategoricalArray{T,1,V,C,U,U1} where U1 where U where C where V where T, N=1                  |   272           272
  constructors and convert() between categorical arrays, ordered_orig=true, ordered=false, R=UInt64, T=String, CVM2=CategoricalArrays.CategoricalArray{T,2,V,C,U,U1} where U1 where U where C where V where T, N=2                  |   272           272
  constructors and convert() between categorical arrays, ordered_orig=true, ordered=false, R=UInt64, T=Union{Missing, String}, CVM2=CategoricalArrays.CategoricalArray{T,1,V,C,U,U1} where U1 where U where C where V where T, N=1  |   272           272
  constructors and convert() between categorical arrays, ordered_orig=true, ordered=false, R=UInt64, T=Union{Missing, String}, CVM2=CategoricalArrays.CategoricalArray{T,2,V,C,U,U1} where U1 where U where C where V where T, N=2  |   272           272
  constructors and convert() between categorical arrays, ordered_orig=true, ordered=false, R=Int8, T=String, CVM2=CategoricalArrays.CategoricalArray{T,1,V,C,U,U1} where U1 where U where C where V where T, N=1                    |   272           272
  constructors and convert() between categorical arrays, ordered_orig=true, ordered=false, R=Int8, T=String, CVM2=CategoricalArrays.CategoricalArray{T,2,V,C,U,U1} where U1 where U where C where V where T, N=2                    |   272           272
  constructors and convert() between categorical arrays, ordered_orig=true, ordered=false, R=Int8, T=Union{Missing, String}, CVM2=CategoricalArrays.CategoricalArray{T,1,V,C,U,U1} where U1 where U where C where V where T, N=1    |   272           272
  constructors and convert() between categorical arrays, ordered_orig=true, ordered=false, R=Int8, T=Union{Missing, String}, CVM2=CategoricalArrays.CategoricalArray{T,2,V,C,U,U1} where U1 where U where C where V where T, N=2    |   272           272
  constructors and convert() between categorical arrays, ordered_orig=true, ordered=false, R=Int64, T=String, CVM2=CategoricalArrays.CategoricalArray{T,1,V,C,U,U1} where U1 where U where C where V where T, N=1                   |   272           272
  constructors and convert() between categorical arrays, ordered_orig=true, ordered=false, R=Int64, T=String, CVM2=CategoricalArrays.CategoricalArray{T,2,V,C,U,U1} where U1 where U where C where V where T, N=2                   |   272           272
  constructors and convert() between categorical arrays, ordered_orig=true, ordered=false, R=Int64, T=Union{Missing, String}, CVM2=CategoricalArrays.CategoricalArray{T,1,V,C,U,U1} where U1 where U where C where V where T, N=1   |   272           272
  constructors and convert() between categorical arrays, ordered_orig=true, ordered=false, R=Int64, T=Union{Missing, String}, CVM2=CategoricalArrays.CategoricalArray{T,2,V,C,U,U1} where U1 where U where C where V where T, N=2   |   272           272
  constructors and convert() between categorical arrays, ordered_orig=false, ordered=true, R=UInt32, T=String, CVM2=CategoricalArrays.CategoricalArray{T,1,V,C,U,U1} where U1 where U where C where V where T, N=1                  |   272           272
  constructors and convert() between categorical arrays, ordered_orig=false, ordered=true, R=UInt32, T=String, CVM2=CategoricalArrays.CategoricalArray{T,2,V,C,U,U1} where U1 where U where C where V where T, N=2                  |   272           272
  constructors and convert() between categorical arrays, ordered_orig=false, ordered=true, R=UInt32, T=Union{Missing, String}, CVM2=CategoricalArrays.CategoricalArray{T,1,V,C,U,U1} where U1 where U where C where V where T, N=1  |   272           272
  constructors and convert() between categorical arrays, ordered_orig=false, ordered=true, R=UInt32, T=Union{Missing, String}, CVM2=CategoricalArrays.CategoricalArray{T,2,V,C,U,U1} where U1 where U where C where V where T, N=2  |   272           272
  constructors and convert() between categorical arrays, ordered_orig=false, ordered=true, R=UInt8, T=String, CVM2=CategoricalArrays.CategoricalArray{T,1,V,C,U,U1} where U1 where U where C where V where T, N=1                   |   272           272
  constructors and convert() between categorical arrays, ordered_orig=false, ordered=true, R=UInt8, T=String, CVM2=CategoricalArrays.CategoricalArray{T,2,V,C,U,U1} where U1 where U where C where V where T, N=2                   |   272           272
  constructors and convert() between categorical arrays, ordered_orig=false, ordered=true, R=UInt8, T=Union{Missing, String}, CVM2=CategoricalArrays.CategoricalArray{T,1,V,C,U,U1} where U1 where U where C where V where T, N=1   |   272           272
  constructors and convert() between categorical arrays, ordered_orig=false, ordered=true, R=UInt8, T=Union{Missing, String}, CVM2=CategoricalArrays.CategoricalArray{T,2,V,C,U,U1} where U1 where U where C where V where T, N=2   |   272           272
  constructors and convert() between categorical arrays, ordered_orig=false, ordered=true, R=UInt64, T=String, CVM2=CategoricalArrays.CategoricalArray{T,1,V,C,U,U1} where U1 where U where C where V where T, N=1                  |   272           272
  constructors and convert() between categorical arrays, ordered_orig=false, ordered=true, R=UInt64, T=String, CVM2=CategoricalArrays.CategoricalArray{T,2,V,C,U,U1} where U1 where U where C where V where T, N=2                  |   272           272
  constructors and convert() between categorical arrays, ordered_orig=false, ordered=true, R=UInt64, T=Union{Missing, String}, CVM2=CategoricalArrays.CategoricalArray{T,1,V,C,U,U1} where U1 where U where C where V where T, N=1  |   272           272
  constructors and convert() between categorical arrays, ordered_orig=false, ordered=true, R=UInt64, T=Union{Missing, String}, CVM2=CategoricalArrays.CategoricalArray{T,2,V,C,U,U1} where U1 where U where C where V where T, N=2  |   272           272
  constructors and convert() between categorical arrays, ordered_orig=false, ordered=true, R=Int8, T=String, CVM2=CategoricalArrays.CategoricalArray{T,1,V,C,U,U1} where U1 where U where C where V where T, N=1                    |   272           272
  constructors and convert() between categorical arrays, ordered_orig=false, ordered=true, R=Int8, T=String, CVM2=CategoricalArrays.CategoricalArray{T,2,V,C,U,U1} where U1 where U where C where V where T, N=2                    |   272           272
  constructors and convert() between categorical arrays, ordered_orig=false, ordered=true, R=Int8, T=Union{Missing, String}, CVM2=CategoricalArrays.CategoricalArray{T,1,V,C,U,U1} where U1 where U where C where V where T, N=1    |   272           272
  constructors and convert() between categorical arrays, ordered_orig=false, ordered=true, R=Int8, T=Union{Missing, String}, CVM2=CategoricalArrays.CategoricalArray{T,2,V,C,U,U1} where U1 where U where C where V where T, N=2    |   272           272
  constructors and convert() between categorical arrays, ordered_orig=false, ordered=true, R=Int64, T=String, CVM2=CategoricalArrays.CategoricalArray{T,1,V,C,U,U1} where U1 where U where C where V where T, N=1                   |   272           272
  constructors and convert() between categorical arrays, ordered_orig=false, ordered=true, R=Int64, T=String, CVM2=CategoricalArrays.CategoricalArray{T,2,V,C,U,U1} where U1 where U where C where V where T, N=2                   |   272           272
  constructors and convert() between categorical arrays, ordered_orig=false, ordered=true, R=Int64, T=Union{Missing, String}, CVM2=CategoricalArrays.CategoricalArray{T,1,V,C,U,U1} where U1 where U where C where V where T, N=1   |   272           272
  constructors and convert() between categorical arrays, ordered_orig=false, ordered=true, R=Int64, T=Union{Missing, String}, CVM2=CategoricalArrays.CategoricalArray{T,2,V,C,U,U1} where U1 where U where C where V where T, N=2   |   272           272
  constructors and convert() between categorical arrays, ordered_orig=false, ordered=false, R=UInt32, T=String, CVM2=CategoricalArrays.CategoricalArray{T,1,V,C,U,U1} where U1 where U where C where V where T, N=1                 |   272           272
  constructors and convert() between categorical arrays, ordered_orig=false, ordered=false, R=UInt32, T=String, CVM2=CategoricalArrays.CategoricalArray{T,2,V,C,U,U1} where U1 where U where C where V where T, N=2                 |   272           272
  constructors and convert() between categorical arrays, ordered_orig=false, ordered=false, R=UInt32, T=Union{Missing, String}, CVM2=CategoricalArrays.CategoricalArray{T,1,V,C,U,U1} where U1 where U where C where V where T, N=1 |   272           272
  constructors and convert() between categorical arrays, ordered_orig=false, ordered=false, R=UInt32, T=Union{Missing, String}, CVM2=CategoricalArrays.CategoricalArray{T,2,V,C,U,U1} where U1 where U where C where V where T, N=2 |   272           272
  constructors and convert() between categorical arrays, ordered_orig=false, ordered=false, R=UInt8, T=String, CVM2=CategoricalArrays.CategoricalArray{T,1,V,C,U,U1} where U1 where U where C where V where T, N=1                  |   272           272
  constructors and convert() between categorical arrays, ordered_orig=false, ordered=false, R=UInt8, T=String, CVM2=CategoricalArrays.CategoricalArray{T,2,V,C,U,U1} where U1 where U where C where V where T, N=2                  |   272           272
  constructors and convert() between categorical arrays, ordered_orig=false, ordered=false, R=UInt8, T=Union{Missing, String}, CVM2=CategoricalArrays.CategoricalArray{T,1,V,C,U,U1} where U1 where U where C where V where T, N=1  |   272           272
  constructors and convert() between categorical arrays, ordered_orig=false, ordered=false, R=UInt8, T=Union{Missing, String}, CVM2=CategoricalArrays.CategoricalArray{T,2,V,C,U,U1} where U1 where U where C where V where T, N=2  |   272           272
  constructors and convert() between categorical arrays, ordered_orig=false, ordered=false, R=UInt64, T=String, CVM2=CategoricalArrays.CategoricalArray{T,1,V,C,U,U1} where U1 where U where C where V where T, N=1                 |   272           272
  constructors and convert() between categorical arrays, ordered_orig=false, ordered=false, R=UInt64, T=String, CVM2=CategoricalArrays.CategoricalArray{T,2,V,C,U,U1} where U1 where U where C where V where T, N=2                 |   272           272
  constructors and convert() between categorical arrays, ordered_orig=false, ordered=false, R=UInt64, T=Union{Missing, String}, CVM2=CategoricalArrays.CategoricalArray{T,1,V,C,U,U1} where U1 where U where C where V where T, N=1 |   272           272
  constructors and convert() between categorical arrays, ordered_orig=false, ordered=false, R=UInt64, T=Union{Missing, String}, CVM2=CategoricalArrays.CategoricalArray{T,2,V,C,U,U1} where U1 where U where C where V where T, N=2 |   272           272
  constructors and convert() between categorical arrays, ordered_orig=false, ordered=false, R=Int8, T=String, CVM2=CategoricalArrays.CategoricalArray{T,1,V,C,U,U1} where U1 where U where C where V where T, N=1                   |   272           272
  constructors and convert() between categorical arrays, ordered_orig=false, ordered=false, R=Int8, T=String, CVM2=CategoricalArrays.CategoricalArray{T,2,V,C,U,U1} where U1 where U where C where V where T, N=2                   |   272           272
  constructors and convert() between categorical arrays, ordered_orig=false, ordered=false, R=Int8, T=Union{Missing, String}, CVM2=CategoricalArrays.CategoricalArray{T,1,V,C,U,U1} where U1 where U where C where V where T, N=1   |   272           272
  constructors and convert() between categorical arrays, ordered_orig=false, ordered=false, R=Int8, T=Union{Missing, String}, CVM2=CategoricalArrays.CategoricalArray{T,2,V,C,U,U1} where U1 where U where C where V where T, N=2   |   272           272
  constructors and convert() between categorical arrays, ordered_orig=false, ordered=false, R=Int64, T=String, CVM2=CategoricalArrays.CategoricalArray{T,1,V,C,U,U1} where U1 where U where C where V where T, N=1                  |   272           272
  constructors and convert() between categorical arrays, ordered_orig=false, ordered=false, R=Int64, T=String, CVM2=CategoricalArrays.CategoricalArray{T,2,V,C,U,U1} where U1 where U where C where V where T, N=2                  |   272           272
  constructors and convert() between categorical arrays, ordered_orig=false, ordered=false, R=Int64, T=Union{Missing, String}, CVM2=CategoricalArrays.CategoricalArray{T,1,V,C,U,U1} where U1 where U where C where V where T, N=1  |   272           272
  constructors and convert() between categorical arrays, ordered_orig=false, ordered=false, R=Int64, T=Union{Missing, String}, CVM2=CategoricalArrays.CategoricalArray{T,2,V,C,U,U1} where U1 where U where C where V where T, N=2  |   272           272
  converting from array with missings to array without missings CategoricalArray fails with missings                                                                                                                                |     2             2
  in(Int64, CategoricalArray{Int64})                                                                                                                                                                                                |     5             5
  in(Union{Missing, Int64}, CategoricalArray{Union{Missing, Int64}})                                                                                                                                                                |     5             5
  comparison                                                                                                                                                                                                                        |    34            34
  summary()                                                                                                                                                                                                                         |     2             2
  vcat() takes into account element type even when array is empty                                                                                                                                                                   |            1      1
  categorical() makes a copy of pool and refs                                                                                                                                                                                       |    32            32
  collect of CategoricalArray produces Array                                                                                                                                                                                        |     4             4
  Array(::CategoricalArray{T}) produces Array{T}                                                                                                                                                                                    |     4             4
  Array{T} constructors and convert                                                                                                                                                                                                 |     8             8
  convert(AbstractArray{T}, x)                                                                                                                                                                                                      |    12            12
  new levels can't be added through assignment when levels are ordered                                                                                                                                                              |     5             5
  float() and complex()                                                                                                                                                                                                             |     6             6
  droplevels                                                                                                                                                                                                                        |     4             4
  droplevels                                                                                                                                                                                                                        |     4             4
ERROR: LoadError: Some tests did not pass: 22346 passed, 0 failed, 1 errored, 0 broken.
in expression starting at /home/vagrant/.julia/v0.7/CategoricalArrays/test/runtests.jl:35
┌ Error: ------------------------------------------------------------
│ # Testing failed for CategoricalArrays
│   exception =
│    failed process: Process(`/home/vagrant/julia/bin/julia -Cnative -J/home/vagrant/julia/lib/julia/sys.so --compile=yes --depwarn=yes --code-coverage=none --color=no --compiled-modules=yes --check-bounds=yes --warn-overwrite=yes --startup-file=yes /home/vagrant/.julia/v0.7/CategoricalArrays/test/runtests.jl`, ProcessExited(1)) [1]
│    Stacktrace:
│     [1] error(::String, ::Base.Process, ::String, ::Int64, ::String) at ./error.jl:42
│     [2] pipeline_error(::Base.Process) at ./process.jl:712
│     [3] #run#533(::Bool, ::Function, ::Cmd) at ./process.jl:670
│     [4] run at ./process.jl:668 [inlined]
│     [5] (::getfield(Pkg.Entry, Symbol("##56#57")){Bool,String,Array{AbstractString,1}})() at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v0.7/Pkg/src/entry.jl:729
│     [6] cd(::getfield(Pkg.Entry, Symbol("##56#57")){Bool,String,Array{AbstractString,1}}, ::String) at ./file.jl:72
│     [7] #test!#55(::Bool, ::Function, ::String, ::Array{AbstractString,1}, ::Array{AbstractString,1}, ::Array{AbstractString,1}) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v0.7/Pkg/src/entry.jl:717
│     [8] (::getfield(Pkg.Entry, Symbol("#kw##test!")))(::NamedTuple{(:coverage,),Tuple{Bool}}, ::typeof(Pkg.Entry.test!), ::String, ::Array{AbstractString,1}, ::Array{AbstractString,1}, ::Array{AbstractString,1}) at ./<missing>:0
│     [9] #test#59(::Bool, ::Function, ::Array{AbstractString,1}) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v0.7/Pkg/src/entry.jl:756
│     [10] #test at ./<missing>:0 [inlined]
│     [11] #4 at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v0.7/Pkg/src/dir.jl:36 [inlined]
│     [12] cd(::getfield(Pkg.Dir, Symbol("##4#7")){Base.Iterators.Pairs{Symbol,Bool,Tuple{Symbol},NamedTuple{(:coverage,),Tuple{Bool}}},typeof(Pkg.Entry.test),Tuple{Array{AbstractString,1}}}, ::String) at ./file.jl:72
│     [13] #cd#1(::Base.Iterators.Pairs{Symbol,Bool,Tuple{Symbol},NamedTuple{(:coverage,),Tuple{Bool}}}, ::Function, ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N} where N) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v0.7/Pkg/src/dir.jl:36
│     [14] (::getfield(Pkg.Dir, Symbol("#kw##cd")))(::NamedTuple{(:coverage,),Tuple{Bool}}, ::typeof(Pkg.Dir.cd), ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N} where N) at ./<missing>:0
│     [15] #test#3(::Bool, ::Function, ::String, ::Vararg{String,N} where N) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v0.7/Pkg/src/Pkg.jl:278
│     [16] test(::String, ::Vararg{String,N} where N) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v0.7/Pkg/src/Pkg.jl:278
│     [17] top-level scope
│     [18] eval at ./boot.jl:317 [inlined]
│     [19] eval(::Module, ::Expr) at ./sysimg.jl:74
│     [20] exec_options(::Base.JLOptions) at ./client.jl:304
│     [21] _start() at ./client.jl:455
└ @ Pkg.Entry entry.jl:732
ERROR: CategoricalArrays had test errors

>>> End of log
