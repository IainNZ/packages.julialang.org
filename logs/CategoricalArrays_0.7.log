>>> 'Pkg.add("CategoricalArrays")' log
WARNING: Base.Pkg is deprecated, run `using Pkg` instead
 in module Main
[ Info: Installing CategoricalArrays v0.3.6
[ Info: Installing Missings v0.2.8
[ Info: Installing Reexport v0.1.0
[ Info: Package database updated
┌ Info: METADATA is out-of-date — you may not have the latest version of CategoricalArrays
└ Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("CategoricalArrays")' log
WARNING: Base.versioninfo is deprecated: it has been moved to the standard library package `InteractiveUtils`.
Add `using InteractiveUtils` to your imports.
 in module Main
WARNING: Base.versioninfo is deprecated: it has been moved to the standard library package `InteractiveUtils`.
Add `using InteractiveUtils` to your imports.
 in module Main
Julia Version 0.7.0-DEV.4737
Commit c4c93ea692 (2018-04-02 15:45 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
      Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-143-generic #192-Ubuntu SMP Tue Feb 27 10:45:36 UTC 2018 x86_64 x86_64
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
              speed         user         nice          sys         idle          irq
       #1  3500 MHz    1548966 s        294 s     120311 s     706144 s         19 s
       #2  3500 MHz     597531 s       6980 s      46719 s    2011936 s          0 s
       
  Memory: 2.939197540283203 GB (735.90234375 MB free)
  Uptime: 27436.0 sec
  Load Avg:  0.99560546875  1.00537109375  1.029296875
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant
Packages:
  Package Directory: /home/vagrant/.julia/v0.7
  Package Status:
2 required packages:
 - CategoricalArrays             0.3.6
 - JSON                          0.17.2
4 additional packages:
 - Compat                        0.63.0
 - Missings                      0.2.8
 - Nullables                     0.0.5
 - Reexport                      0.1.0
WARNING: Base.Pkg is deprecated, run `using Pkg` instead
 in module Main
[ Info: Testing CategoricalArrays
Test Summary: | Pass  Total
01_typedef.jl |   93     93
Test Summary:    | Pass  Total
02_buildorder.jl |    6      6
Test Summary:     | Pass  Total
03_buildfields.jl |    6      6
Test Summary:      | Pass  Total
04_constructors.jl |  121    121
Test Summary: | Pass  Total
05_convert.jl |   32     32
Test Summary: | Pass  Total
06_show.jl    |   46     46
Test Summary: | Pass  Total
06_length.jl  |    2      2
Test Summary: | Pass  Total
07_levels.jl  |  306    306
Test Summary:  | Pass  Total
08_equality.jl |  110    110
┌ Warning: `contains(haystack, needle)` is deprecated, use `occursin(needle, haystack)` instead.
│   caller = macro expansion at 08_string.jl:168 [inlined]
└ @ Core 08_string.jl:168
┌ Warning: `contains(haystack, needle)` is deprecated, use `occursin(needle, haystack)` instead.
│   caller = macro expansion at 08_string.jl:169 [inlined]
└ @ Core 08_string.jl:169
┌ Warning: `contains(haystack, needle)` is deprecated, use `occursin(needle, haystack)` instead.
│   caller = macro expansion at 08_string.jl:170 [inlined]
└ @ Core 08_string.jl:170
┌ Warning: `contains(haystack, needle)` is deprecated, use `occursin(needle, haystack)` instead.
│   caller = macro expansion at 08_string.jl:172 [inlined]
└ @ Core 08_string.jl:172
┌ Warning: `contains(haystack, needle)` is deprecated, use `occursin(needle, haystack)` instead.
│   caller = macro expansion at 08_string.jl:173 [inlined]
└ @ Core 08_string.jl:173
Test Summary: | Pass  Total
08_string.jl  |  151    151
Test Summary: | Pass  Total
09_hash.jl    |   54     54
┌ Warning: Deprecated syntax `implicit assignment to global variable `pool``.
│ Use `global pool` instead.
└ @ nothing none:0
┌ Warning: Deprecated syntax `implicit assignment to global variable `v1``.
│ Use `global v1` instead.
└ @ nothing none:0
┌ Warning: Deprecated syntax `implicit assignment to global variable `v2``.
│ Use `global v2` instead.
└ @ nothing none:0
┌ Warning: Deprecated syntax `implicit assignment to global variable `v3``.
│ Use `global v3` instead.
└ @ nothing none:0
Test Summary: | Pass  Total
10_isless.jl  |  256    256
Test Summary: | Pass  Total
11_array.jl   | 8684   8684
┌ Warning: `CategoricalArray(dims::Int...; ordered=false)` is deprecated, use `CategoricalArray(undef, dims...; ordered=ordered)` instead.
│   caller = macro expansion at 12_missingarray.jl:1032 [inlined]
└ @ Core 12_missingarray.jl:1032
┌ Warning: `CategoricalArray(dims::Int...; ordered=false)` is deprecated, use `CategoricalArray(undef, dims...; ordered=ordered)` instead.
│   caller = macro expansion at 12_missingarray.jl:1041 [inlined]
└ @ Core 12_missingarray.jl:1041
┌ Warning: `CategoricalArray{T}(m::Int; ordered=false) where T` is deprecated, use `CategoricalArray{T}(undef, m; ordered=ordered)` instead.
│   caller = macro expansion at 12_missingarray.jl:1054 [inlined]
└ @ Core 12_missingarray.jl:1054
Test Summary:      |  Pass  Total
12_missingarray.jl | 12852  12852
┌ Warning: `a::AbstractArray + b::Number` is deprecated, use `broadcast(+, a, b)` instead.
│   caller = macro expansion at 13_arraycommon.jl:87 [inlined]
└ @ Core 13_arraycommon.jl:87
┌ Warning: `a::AbstractArray + b::Number` is deprecated, use `broadcast(+, a, b)` instead.
│   caller = macro expansion at 13_arraycommon.jl:88 [inlined]
└ @ Core 13_arraycommon.jl:88
┌ Warning: `copy!(dst::AbstractArray, src::AbstractArray)` is deprecated. You can either use `copyto!(dst, src)` or `Future.copy!(dst, src)` instead.
│   caller = macro expansion at 13_arraycommon.jl:152 [inlined]
└ @ Core 13_arraycommon.jl:152
┌ Warning: `copy!(dest::Union{AbstractArray, IndexStyle}, args...)` is deprecated, use `copyto!(dest, args...)` instead.
│   caller = macro expansion at 13_arraycommon.jl:167 [inlined]
└ @ Core 13_arraycommon.jl:167
┌ Warning: `copy!(dest::Union{AbstractArray, IndexStyle}, args...)` is deprecated, use `copyto!(dest, args...)` instead.
│   caller = macro expansion at 13_arraycommon.jl:176 [inlined]
└ @ Core 13_arraycommon.jl:176
┌ Warning: `copy!(dest::Union{AbstractArray, IndexStyle}, args...)` is deprecated, use `copyto!(dest, args...)` instead.
│   caller = macro expansion at 13_arraycommon.jl:178 [inlined]
└ @ Core 13_arraycommon.jl:178
┌ Warning: `copy!(dest::Union{AbstractArray, IndexStyle}, args...)` is deprecated, use `copyto!(dest, args...)` instead.
│   caller = macro expansion at 13_arraycommon.jl:181 [inlined]
└ @ Core 13_arraycommon.jl:181
┌ Warning: `copy!(dest::Union{AbstractArray, IndexStyle}, args...)` is deprecated, use `copyto!(dest, args...)` instead.
│   caller = macro expansion at 13_arraycommon.jl:183 [inlined]
└ @ Core 13_arraycommon.jl:183
┌ Warning: `copy!(dst::AbstractArray, src::AbstractArray)` is deprecated. You can either use `copyto!(dst, src)` or `Future.copy!(dst, src)` instead.
│   caller = macro expansion at 13_arraycommon.jl:185 [inlined]
└ @ Core 13_arraycommon.jl:185
┌ Warning: `copy!(dst::AbstractArray, src::AbstractArray)` is deprecated. You can either use `copyto!(dst, src)` or `Future.copy!(dst, src)` instead.
│   caller = macro expansion at 13_arraycommon.jl:187 [inlined]
└ @ Core 13_arraycommon.jl:187
┌ Warning: `copy!(dst::AbstractArray, src::AbstractArray)` is deprecated. You can either use `copyto!(dst, src)` or `Future.copy!(dst, src)` instead.
│   caller = macro expansion at 13_arraycommon.jl:195 [inlined]
└ @ Core 13_arraycommon.jl:195
┌ Warning: `copy!(dest::Union{AbstractArray, IndexStyle}, args...)` is deprecated, use `copyto!(dest, args...)` instead.
│   caller = macro expansion at 13_arraycommon.jl:197 [inlined]
└ @ Core 13_arraycommon.jl:197
┌ Warning: `copy!(dest::Union{AbstractArray, IndexStyle}, args...)` is deprecated, use `copyto!(dest, args...)` instead.
│   caller = macro expansion at 13_arraycommon.jl:199 [inlined]
└ @ Core 13_arraycommon.jl:199
┌ Warning: `copy!(dest::Union{AbstractArray, IndexStyle}, args...)` is deprecated, use `copyto!(dest, args...)` instead.
│   caller = macro expansion at 13_arraycommon.jl:204 [inlined]
└ @ Core 13_arraycommon.jl:204
┌ Warning: `copy!(dest::Union{AbstractArray, IndexStyle}, args...)` is deprecated, use `copyto!(dest, args...)` instead.
│   caller = macro expansion at 13_arraycommon.jl:206 [inlined]
└ @ Core 13_arraycommon.jl:206
┌ Warning: `copy!(dest::Union{AbstractArray, IndexStyle}, args...)` is deprecated, use `copyto!(dest, args...)` instead.
│   caller = macro expansion at 13_arraycommon.jl:208 [inlined]
└ @ Core 13_arraycommon.jl:208
┌ Warning: `copy!(dest::Union{AbstractArray, IndexStyle}, args...)` is deprecated, use `copyto!(dest, args...)` instead.
│   caller = macro expansion at 13_arraycommon.jl:210 [inlined]
└ @ Core 13_arraycommon.jl:210
┌ Warning: `copy!(dest::Union{AbstractArray, IndexStyle}, args...)` is deprecated, use `copyto!(dest, args...)` instead.
│   caller = macro expansion at 13_arraycommon.jl:212 [inlined]
└ @ Core 13_arraycommon.jl:212
┌ Warning: `copy!(dest::Union{AbstractArray, IndexStyle}, args...)` is deprecated, use `copyto!(dest, args...)` instead.
│   caller = macro expansion at 13_arraycommon.jl:214 [inlined]
└ @ Core 13_arraycommon.jl:214
┌ Warning: `copy!(dest::Union{AbstractArray, IndexStyle}, args...)` is deprecated, use `copyto!(dest, args...)` instead.
│   caller = macro expansion at 13_arraycommon.jl:216 [inlined]
└ @ Core 13_arraycommon.jl:216
┌ Warning: `CategoricalVector{T}(m::Int; ordered=false) where T` is deprecated, use `CategoricalVector{T}(undef, m; ordered=ordered)` instead.
│   caller = macro expansion at 13_arraycommon.jl:223 [inlined]
└ @ Core 13_arraycommon.jl:223
┌ Warning: `copy!(dst::AbstractArray, src::AbstractArray)` is deprecated. You can either use `copyto!(dst, src)` or `Future.copy!(dst, src)` instead.
│   caller = macro expansion at 13_arraycommon.jl:224 [inlined]
└ @ Core 13_arraycommon.jl:224
┌ Warning: `CategoricalVector{T}(m::Int; ordered=false) where T` is deprecated, use `CategoricalVector{T}(undef, m; ordered=ordered)` instead.
│   caller = macro expansion at 13_arraycommon.jl:232 [inlined]
└ @ Core 13_arraycommon.jl:232
┌ Warning: `copy!(dst::AbstractArray, src::AbstractArray)` is deprecated. You can either use `copyto!(dst, src)` or `Future.copy!(dst, src)` instead.
│   caller = macro expansion at 13_arraycommon.jl:233 [inlined]
└ @ Core 13_arraycommon.jl:233
┌ Warning: `CategoricalVector{T}(m::Int; ordered=false) where T` is deprecated, use `CategoricalVector{T}(undef, m; ordered=ordered)` instead.
│   caller = macro expansion at 13_arraycommon.jl:241 [inlined]
└ @ Core 13_arraycommon.jl:241
┌ Warning: `copy!(dst::AbstractArray, src::AbstractArray)` is deprecated. You can either use `copyto!(dst, src)` or `Future.copy!(dst, src)` instead.
│   caller = macro expansion at 13_arraycommon.jl:242 [inlined]
└ @ Core 13_arraycommon.jl:242
┌ Warning: `CategoricalVector{T}(m::Int; ordered=false) where T` is deprecated, use `CategoricalVector{T}(undef, m; ordered=ordered)` instead.
│   caller = macro expansion at 13_arraycommon.jl:250 [inlined]
└ @ Core 13_arraycommon.jl:250
┌ Warning: `copy!(dst::AbstractArray, src::AbstractArray)` is deprecated. You can either use `copyto!(dst, src)` or `Future.copy!(dst, src)` instead.
│   caller = macro expansion at 13_arraycommon.jl:251 [inlined]
└ @ Core 13_arraycommon.jl:251
┌ Warning: `CategoricalVector{T}(m::Int; ordered=false) where T` is deprecated, use `CategoricalVector{T}(undef, m; ordered=ordered)` instead.
│   caller = macro expansion at 13_arraycommon.jl:260 [inlined]
└ @ Core 13_arraycommon.jl:260
┌ Warning: `copy!(dst::AbstractArray, src::AbstractArray)` is deprecated. You can either use `copyto!(dst, src)` or `Future.copy!(dst, src)` instead.
│   caller = macro expansion at 13_arraycommon.jl:261 [inlined]
└ @ Core 13_arraycommon.jl:261
┌ Warning: `CategoricalVector{T}(m::Int; ordered=false) where T` is deprecated, use `CategoricalVector{T}(undef, m; ordered=ordered)` instead.
│   caller = macro expansion at 13_arraycommon.jl:270 [inlined]
└ @ Core 13_arraycommon.jl:270
┌ Warning: `copy!(dst::AbstractArray, src::AbstractArray)` is deprecated. You can either use `copyto!(dst, src)` or `Future.copy!(dst, src)` instead.
│   caller = macro expansion at 13_arraycommon.jl:271 [inlined]
└ @ Core 13_arraycommon.jl:271
┌ Warning: `CategoricalVector{T}(m::Int; ordered=false) where T` is deprecated, use `CategoricalVector{T}(undef, m; ordered=ordered)` instead.
│   caller = macro expansion at 13_arraycommon.jl:280 [inlined]
└ @ Core 13_arraycommon.jl:280
┌ Warning: `copy!(dst::AbstractArray, src::AbstractArray)` is deprecated. You can either use `copyto!(dst, src)` or `Future.copy!(dst, src)` instead.
│   caller = macro expansion at 13_arraycommon.jl:281 [inlined]
└ @ Core 13_arraycommon.jl:281
┌ Warning: `CategoricalVector{T}(m::Int; ordered=false) where T` is deprecated, use `CategoricalVector{T}(undef, m; ordered=ordered)` instead.
│   caller = macro expansion at 13_arraycommon.jl:290 [inlined]
└ @ Core 13_arraycommon.jl:290
┌ Warning: `copy!(dst::AbstractArray, src::AbstractArray)` is deprecated. You can either use `copyto!(dst, src)` or `Future.copy!(dst, src)` instead.
│   caller = macro expansion at 13_arraycommon.jl:291 [inlined]
└ @ Core 13_arraycommon.jl:291
┌ Warning: `CategoricalVector{T}(m::Int; ordered=false) where T` is deprecated, use `CategoricalVector{T}(undef, m; ordered=ordered)` instead.
│   caller = macro expansion at 13_arraycommon.jl:300 [inlined]
└ @ Core 13_arraycommon.jl:300
┌ Warning: `copy!(dst::AbstractArray, src::AbstractArray)` is deprecated. You can either use `copyto!(dst, src)` or `Future.copy!(dst, src)` instead.
│   caller = macro expansion at 13_arraycommon.jl:301 [inlined]
└ @ Core 13_arraycommon.jl:301
┌ Warning: `CategoricalVector{T}(m::Int; ordered=false) where T` is deprecated, use `CategoricalVector{T}(undef, m; ordered=ordered)` instead.
│   caller = macro expansion at 13_arraycommon.jl:306 [inlined]
└ @ Core 13_arraycommon.jl:306
┌ Warning: `copy!(dst::AbstractArray, src::AbstractArray)` is deprecated. You can either use `copyto!(dst, src)` or `Future.copy!(dst, src)` instead.
│   caller = macro expansion at 13_arraycommon.jl:307 [inlined]
└ @ Core 13_arraycommon.jl:307
┌ Warning: `copy!(dst::AbstractArray, src::AbstractArray)` is deprecated. You can either use `copyto!(dst, src)` or `Future.copy!(dst, src)` instead.
│   caller = macro expansion at 13_arraycommon.jl:317 [inlined]
└ @ Core 13_arraycommon.jl:317
┌ Warning: `copy!(dst::AbstractArray, src::AbstractArray)` is deprecated. You can either use `copyto!(dst, src)` or `Future.copy!(dst, src)` instead.
│   caller = macro expansion at 13_arraycommon.jl:323 [inlined]
└ @ Core 13_arraycommon.jl:323
┌ Warning: `copy!(dst::AbstractArray, src::AbstractArray)` is deprecated. You can either use `copyto!(dst, src)` or `Future.copy!(dst, src)` instead.
│   caller = macro expansion at 13_arraycommon.jl:333 [inlined]
└ @ Core 13_arraycommon.jl:333
┌ Warning: `copy!(dst::AbstractArray, src::AbstractArray)` is deprecated. You can either use `copyto!(dst, src)` or `Future.copy!(dst, src)` instead.
│   caller = macro expansion at 13_arraycommon.jl:342 [inlined]
└ @ Core 13_arraycommon.jl:342
┌ Warning: `CategoricalVector{T}(m::Int; ordered=false) where T` is deprecated, use `CategoricalVector{T}(undef, m; ordered=ordered)` instead.
│   caller = macro expansion at 13_arraycommon.jl:354 [inlined]
└ @ Core 13_arraycommon.jl:354
┌ Warning: `copy!(dst::AbstractArray, src::AbstractArray)` is deprecated. You can either use `copyto!(dst, src)` or `Future.copy!(dst, src)` instead.
│   caller = macro expansion at 13_arraycommon.jl:355 [inlined]
└ @ Core 13_arraycommon.jl:355
┌ Warning: `copy!(dst::AbstractArray, src::AbstractArray)` is deprecated. You can either use `copyto!(dst, src)` or `Future.copy!(dst, src)` instead.
│   caller = macro expansion at 13_arraycommon.jl:360 [inlined]
└ @ Core 13_arraycommon.jl:360
┌ Warning: `CategoricalVector{T}(m::Int; ordered=false) where T` is deprecated, use `CategoricalVector{T}(undef, m; ordered=ordered)` instead.
│   caller = macro expansion at 13_arraycommon.jl:366 [inlined]
└ @ Core 13_arraycommon.jl:366
┌ Warning: `copy!(dst::AbstractArray, src::AbstractArray)` is deprecated. You can either use `copyto!(dst, src)` or `Future.copy!(dst, src)` instead.
│   caller = macro expansion at 13_arraycommon.jl:367 [inlined]
└ @ Core 13_arraycommon.jl:367
┌ Warning: `CategoricalVector{T}(m::Int; ordered=false) where T` is deprecated, use `CategoricalVector{T}(undef, m; ordered=ordered)` instead.
│   caller = macro expansion at 13_arraycommon.jl:373 [inlined]
└ @ Core 13_arraycommon.jl:373
┌ Warning: `copy!(dst::AbstractArray, src::AbstractArray)` is deprecated. You can either use `copyto!(dst, src)` or `Future.copy!(dst, src)` instead.
│   caller = macro expansion at 13_arraycommon.jl:374 [inlined]
└ @ Core 13_arraycommon.jl:374
┌ Warning: `CategoricalVector{T}(m::Int; ordered=false) where T` is deprecated, use `CategoricalVector{T}(undef, m; ordered=ordered)` instead.
│   caller = macro expansion at 13_arraycommon.jl:382 [inlined]
└ @ Core 13_arraycommon.jl:382
┌ Warning: `copy!(dst::AbstractArray, src::AbstractArray)` is deprecated. You can either use `copyto!(dst, src)` or `Future.copy!(dst, src)` instead.
│   caller = macro expansion at 13_arraycommon.jl:383 [inlined]
└ @ Core 13_arraycommon.jl:383
┌ Warning: `copy!(dst::AbstractArray, src::AbstractArray)` is deprecated. You can either use `copyto!(dst, src)` or `Future.copy!(dst, src)` instead.
│   caller = macro expansion at 13_arraycommon.jl:386 [inlined]
└ @ Core 13_arraycommon.jl:386
┌ Warning: `CategoricalVector{T}(m::Int; ordered=false) where T` is deprecated, use `CategoricalVector{T}(undef, m; ordered=ordered)` instead.
│   caller = macro expansion at 13_arraycommon.jl:390 [inlined]
└ @ Core 13_arraycommon.jl:390
┌ Warning: `copy!(dst::AbstractArray, src::AbstractArray)` is deprecated. You can either use `copyto!(dst, src)` or `Future.copy!(dst, src)` instead.
│   caller = macro expansion at 13_arraycommon.jl:391 [inlined]
└ @ Core 13_arraycommon.jl:391
┌ Warning: `copy!(dst::AbstractArray, src::AbstractArray)` is deprecated. You can either use `copyto!(dst, src)` or `Future.copy!(dst, src)` instead.
│   caller = macro expansion at 13_arraycommon.jl:417 [inlined]
└ @ Core 13_arraycommon.jl:417
┌ Warning: `copy!(dst::AbstractArray, src::AbstractArray)` is deprecated. You can either use `copyto!(dst, src)` or `Future.copy!(dst, src)` instead.
│   caller = macro expansion at 13_arraycommon.jl:427 [inlined]
└ @ Core 13_arraycommon.jl:427
┌ Warning: `copy!(dst::AbstractArray, src::AbstractArray)` is deprecated. You can either use `copyto!(dst, src)` or `Future.copy!(dst, src)` instead.
│   caller = macro expansion at 13_arraycommon.jl:437 [inlined]
└ @ Core 13_arraycommon.jl:437
┌ Warning: `copy!(dst::AbstractArray, src::AbstractArray)` is deprecated. You can either use `copyto!(dst, src)` or `Future.copy!(dst, src)` instead.
│   caller = macro expansion at 13_arraycommon.jl:447 [inlined]
└ @ Core 13_arraycommon.jl:447
┌ Warning: `copy!(dst::AbstractArray, src::AbstractArray)` is deprecated. You can either use `copyto!(dst, src)` or `Future.copy!(dst, src)` instead.
│   caller = macro expansion at 13_arraycommon.jl:457 [inlined]
└ @ Core 13_arraycommon.jl:457
┌ Warning: `convert(::Type{String}, s::Symbol)` is deprecated, use `String(s)` instead.
│   caller = fill!(::CategoricalArrays.CategoricalArray{String,1,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Union{}}, ::Symbol) at array.jl:341
└ @ CategoricalArrays array.jl:341
┌ Warning: `convert(::Type{String}, s::Symbol)` is deprecated, use `String(s)` instead.
│   caller = fill!(::CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Missing}, ::Symbol) at array.jl:341
└ @ CategoricalArrays array.jl:341
┌ Warning: `CategoricalArray{T}(m::Int; ordered=false) where T` is deprecated, use `CategoricalArray{T}(undef, m; ordered=ordered)` instead.
│   caller = macro expansion at 13_arraycommon.jl:679 [inlined]
└ @ Core 13_arraycommon.jl:679
┌ Warning: `CategoricalVector{T}(m::Int; ordered=false) where T` is deprecated, use `CategoricalVector{T}(undef, m; ordered=ordered)` instead.
│   caller = macro expansion at 13_arraycommon.jl:760 [inlined]
└ @ Core 13_arraycommon.jl:760
┌ Warning: `CategoricalVector{T}(m::Int; ordered=false) where T` is deprecated, use `CategoricalVector{T}(undef, m; ordered=ordered)` instead.
│   caller = macro expansion at 13_arraycommon.jl:761 [inlined]
└ @ Core 13_arraycommon.jl:761
Test Summary:     |  Pass  Total
13_arraycommon.jl | 22283  22283
Test Summary: | Pass  Total
14_view.jl    |  150    150
┌ Warning: `sprint(::typeof(showcompact), args...)` is deprecated, use `sprint(show, args...; context=:compact => true)` instead.
│   caller = #72 at extras.jl:94 [inlined]
└ @ Core extras.jl:94
┌ Warning: `sprint(::typeof(showcompact), args...)` is deprecated, use `sprint(show, args...; context=:compact => true)` instead.
│   caller = #72 at extras.jl:94 [inlined]
└ @ Core extras.jl:94
┌ Warning: `sprint(::typeof(showcompact), args...)` is deprecated, use `sprint(show, args...; context=:compact => true)` instead.
│   caller = #73 at extras.jl:95 [inlined]
└ @ Core extras.jl:95
┌ Warning: `sprint(::typeof(showcompact), args...)` is deprecated, use `sprint(show, args...; context=:compact => true)` instead.
│   caller = #73 at extras.jl:95 [inlined]
└ @ Core extras.jl:95
┌ Warning: `sprint(::typeof(showcompact), args...)` is deprecated, use `sprint(show, args...; context=:compact => true)` instead.
│   caller = #72 at extras.jl:94 [inlined]
└ @ Core extras.jl:94
┌ Warning: `sprint(::typeof(showcompact), args...)` is deprecated, use `sprint(show, args...; context=:compact => true)` instead.
│   caller = #72 at extras.jl:94 [inlined]
└ @ Core extras.jl:94
┌ Warning: `sprint(::typeof(showcompact), args...)` is deprecated, use `sprint(show, args...; context=:compact => true)` instead.
│   caller = #73 at extras.jl:95 [inlined]
└ @ Core extras.jl:95
┌ Warning: `sprint(::typeof(showcompact), args...)` is deprecated, use `sprint(show, args...; context=:compact => true)` instead.
│   caller = #73 at extras.jl:95 [inlined]
└ @ Core extras.jl:95
Test Summary: | Pass  Total
15_extras.jl  |   98     98
┌ Warning: `CategoricalArray{T}(dims::NTuple{N, Int}; ordered=false) where {T, N}` is deprecated, use `CategoricalArray{T}(undef, dims; ordered=ordered)` instead.
│   caller = top-level scope at <missing>:1111
└ @ Core <missing>:1111
┌ Warning: `CategoricalArray{T}(dims::NTuple{N, Int}; ordered=false) where {T, N}` is deprecated, use `CategoricalArray{T}(undef, dims; ordered=ordered)` instead.
│   caller = top-level scope at <missing>:1111
└ @ Core <missing>:1111
┌ Warning: `CategoricalArray{T}(dims::NTuple{N, Int}; ordered=false) where {T, N}` is deprecated, use `CategoricalArray{T}(undef, dims; ordered=ordered)` instead.
│   caller = top-level scope at <missing>:1111
└ @ Core <missing>:1111
┌ Warning: `CategoricalArray{T}(dims::NTuple{N, Int}; ordered=false) where {T, N}` is deprecated, use `CategoricalArray{T}(undef, dims; ordered=ordered)` instead.
│   caller = top-level scope at <missing>:1111
└ @ Core <missing>:1111
┌ Warning: `CategoricalArray{T}(dims::NTuple{N, Int}; ordered=false) where {T, N}` is deprecated, use `CategoricalArray{T}(undef, dims; ordered=ordered)` instead.
│   caller = top-level scope at <missing>:1111
└ @ Core <missing>:1111
┌ Warning: `CategoricalArray{T}(dims::NTuple{N, Int}; ordered=false) where {T, N}` is deprecated, use `CategoricalArray{T}(undef, dims; ordered=ordered)` instead.
│   caller = top-level scope at <missing>:1111
└ @ Core <missing>:1111
┌ Warning: `CategoricalArray{T}(dims::NTuple{N, Int}; ordered=false) where {T, N}` is deprecated, use `CategoricalArray{T}(undef, dims; ordered=ordered)` instead.
│   caller = top-level scope at <missing>:1111
└ @ Core <missing>:1111
┌ Warning: `CategoricalArray{T}(dims::NTuple{N, Int}; ordered=false) where {T, N}` is deprecated, use `CategoricalArray{T}(undef, dims; ordered=ordered)` instead.
│   caller = top-level scope at <missing>:1111
└ @ Core <missing>:1111
┌ Warning: `CategoricalArray{T}(dims::NTuple{N, Int}; ordered=false) where {T, N}` is deprecated, use `CategoricalArray{T}(undef, dims; ordered=ordered)` instead.
│   caller = top-level scope at <missing>:1111
└ @ Core <missing>:1111
┌ Warning: `CategoricalArray{T}(dims::NTuple{N, Int}; ordered=false) where {T, N}` is deprecated, use `CategoricalArray{T}(undef, dims; ordered=ordered)` instead.
│   caller = top-level scope at <missing>:1111
└ @ Core <missing>:1111
┌ Warning: `CategoricalArray{T}(dims::NTuple{N, Int}; ordered=false) where {T, N}` is deprecated, use `CategoricalArray{T}(undef, dims; ordered=ordered)` instead.
│   caller = top-level scope at <missing>:1111
└ @ Core <missing>:1111
┌ Warning: `CategoricalArray{T}(dims::NTuple{N, Int}; ordered=false) where {T, N}` is deprecated, use `CategoricalArray{T}(undef, dims; ordered=ordered)` instead.
│   caller = top-level scope at <missing>:1111
└ @ Core <missing>:1111
┌ Warning: `CategoricalArray{T}(dims::NTuple{N, Int}; ordered=false) where {T, N}` is deprecated, use `CategoricalArray{T}(undef, dims; ordered=ordered)` instead.
│   caller = top-level scope at <missing>:1111
└ @ Core <missing>:1111
┌ Warning: `CategoricalArray{T}(dims::NTuple{N, Int}; ordered=false) where {T, N}` is deprecated, use `CategoricalArray{T}(undef, dims; ordered=ordered)` instead.
│   caller = top-level scope at <missing>:1111
└ @ Core <missing>:1111
┌ Warning: `CategoricalArray{T}(dims::NTuple{N, Int}; ordered=false) where {T, N}` is deprecated, use `CategoricalArray{T}(undef, dims; ordered=ordered)` instead.
│   caller = top-level scope at <missing>:1111
└ @ Core <missing>:1111
┌ Warning: `CategoricalArray{T}(dims::NTuple{N, Int}; ordered=false) where {T, N}` is deprecated, use `CategoricalArray{T}(undef, dims; ordered=ordered)` instead.
│   caller = top-level scope at <missing>:1111
└ @ Core <missing>:1111
┌ Warning: `CategoricalVector{T}(m::Int; ordered=false) where T` is deprecated, use `CategoricalVector{T}(undef, m; ordered=ordered)` instead.
│   caller = macro expansion at 16_recode.jl:132 [inlined]
└ @ Core 16_recode.jl:132
┌ Warning: `Array{T}(d::NTuple{N, Int}) where {T, N}` is deprecated, use `Array{T}(undef, d)` instead.
│   caller = top-level scope at <missing>:1111
└ @ Core <missing>:1111
┌ Warning: `CategoricalArray{T}(dims::NTuple{N, Int}; ordered=false) where {T, N}` is deprecated, use `CategoricalArray{T}(undef, dims; ordered=ordered)` instead.
│   caller = top-level scope at <missing>:1111
└ @ Core <missing>:1111
┌ Warning: `Array{T}(d::NTuple{N, Int}) where {T, N}` is deprecated, use `Array{T}(undef, d)` instead.
│   caller = top-level scope at <missing>:1111
└ @ Core <missing>:1111
┌ Warning: `CategoricalArray{T}(dims::NTuple{N, Int}; ordered=false) where {T, N}` is deprecated, use `CategoricalArray{T}(undef, dims; ordered=ordered)` instead.
│   caller = top-level scope at <missing>:1111
└ @ Core <missing>:1111
┌ Warning: `Array{T}(d::NTuple{N, Int}) where {T, N}` is deprecated, use `Array{T}(undef, d)` instead.
│   caller = top-level scope at <missing>:1111
└ @ Core <missing>:1111
┌ Warning: `CategoricalArray{T}(dims::NTuple{N, Int}; ordered=false) where {T, N}` is deprecated, use `CategoricalArray{T}(undef, dims; ordered=ordered)` instead.
│   caller = top-level scope at <missing>:1111
└ @ Core <missing>:1111
┌ Warning: `Array{T}(d::NTuple{N, Int}) where {T, N}` is deprecated, use `Array{T}(undef, d)` instead.
│   caller = top-level scope at <missing>:1111
└ @ Core <missing>:1111
┌ Warning: `CategoricalArray{T}(dims::NTuple{N, Int}; ordered=false) where {T, N}` is deprecated, use `CategoricalArray{T}(undef, dims; ordered=ordered)` instead.
│   caller = top-level scope at <missing>:1111
└ @ Core <missing>:1111
┌ Warning: `Array{T}(d::NTuple{N, Int}) where {T, N}` is deprecated, use `Array{T}(undef, d)` instead.
│   caller = top-level scope at <missing>:1111
└ @ Core <missing>:1111
┌ Warning: `CategoricalArray{T}(dims::NTuple{N, Int}; ordered=false) where {T, N}` is deprecated, use `CategoricalArray{T}(undef, dims; ordered=ordered)` instead.
│   caller = top-level scope at <missing>:1111
└ @ Core <missing>:1111
┌ Warning: `Array{T}(d::NTuple{N, Int}) where {T, N}` is deprecated, use `Array{T}(undef, d)` instead.
│   caller = top-level scope at <missing>:1111
└ @ Core <missing>:1111
┌ Warning: `CategoricalArray{T}(dims::NTuple{N, Int}; ordered=false) where {T, N}` is deprecated, use `CategoricalArray{T}(undef, dims; ordered=ordered)` instead.
│   caller = top-level scope at <missing>:1111
└ @ Core <missing>:1111
┌ Warning: `Array{T}(d::NTuple{N, Int}) where {T, N}` is deprecated, use `Array{T}(undef, d)` instead.
│   caller = top-level scope at <missing>:1111
└ @ Core <missing>:1111
┌ Warning: `CategoricalArray{T}(dims::NTuple{N, Int}; ordered=false) where {T, N}` is deprecated, use `CategoricalArray{T}(undef, dims; ordered=ordered)` instead.
│   caller = top-level scope at <missing>:1111
└ @ Core <missing>:1111
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(undef, m)` instead.
│   caller = top-level scope at <missing>:1111
└ @ Core <missing>:1111
┌ Warning: `CategoricalArray{T}(m::Int; ordered=false) where T` is deprecated, use `CategoricalArray{T}(undef, m; ordered=ordered)` instead.
│   caller = top-level scope at <missing>:1111
└ @ Core <missing>:1111
┌ Warning: `CategoricalArray{T}(dims::NTuple{N, Int}; ordered=false) where {T, N}` is deprecated, use `CategoricalArray{T}(undef, dims; ordered=ordered)` instead.
│   caller = top-level scope at <missing>:1111
└ @ Core <missing>:1111
┌ Warning: `Array{T}(d::NTuple{N, Int}) where {T, N}` is deprecated, use `Array{T}(undef, d)` instead.
│   caller = top-level scope at <missing>:1111
└ @ Core <missing>:1111
┌ Warning: `CategoricalArray{T}(dims::NTuple{N, Int}; ordered=false) where {T, N}` is deprecated, use `CategoricalArray{T}(undef, dims; ordered=ordered)` instead.
│   caller = top-level scope at <missing>:1111
└ @ Core <missing>:1111
┌ Warning: `Array{T}(d::NTuple{N, Int}) where {T, N}` is deprecated, use `Array{T}(undef, d)` instead.
│   caller = recode at recode.jl:340 [inlined]
└ @ Core recode.jl:340
┌ Warning: `Array{T}(d::NTuple{N, Int}) where {T, N}` is deprecated, use `Array{T}(undef, d)` instead.
│   caller = recode at recode.jl:340 [inlined]
└ @ Core recode.jl:340
Test Summary: | Pass  Total
16_recode.jl  |  771    771
[ Info: CategoricalArrays tests passed

>>> End of log
