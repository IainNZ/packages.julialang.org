>>> 'Pkg.add("CategoricalArrays")' log
WARNING: Base.Pkg is deprecated, run `using Pkg` instead
 in module Main
[ Info: Installing CategoricalArrays v0.3.4
[ Info: Installing Missings v0.2.7
[ Info: Installing Reexport v0.1.0
[ Info: Package database updated

>>> 'Pkg.test("CategoricalArrays")' log
WARNING: Base.versioninfo is deprecated: it has been moved to the standard library package `InteractiveUtils`.
Add `using InteractiveUtils` to your imports.
 in module Main
WARNING: Base.versioninfo is deprecated: it has been moved to the standard library package `InteractiveUtils`.
Add `using InteractiveUtils` to your imports.
 in module Main
Julia Version 0.7.0-DEV.4062
Commit 9f8bdf459e (2018-02-22 20:17 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
      Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-135-generic #184-Ubuntu SMP Wed Oct 18 11:55:51 UTC 2017 x86_64 x86_64
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
              speed         user         nice          sys         idle          irq
       #1  3499 MHz    1324020 s       1416 s      74345 s     470355 s         10 s
       #2  3499 MHz     355714 s       6583 s      33382 s    1737484 s          0 s
       
  Memory: 2.93927001953125 GB (459.36328125 MB free)
  Uptime: 21777.0 sec
  Load Avg:  1.0830078125  1.072265625  1.1015625
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant
Packages:
  Package Directory: /home/vagrant/.julia/v0.7
  Package Status:
2 required packages:
 - CategoricalArrays             0.3.4
 - JSON                          0.16.4
4 additional packages:
 - Compat                        0.54.0
 - Missings                      0.2.7
 - Nullables                     0.0.3
 - Reexport                      0.1.0
WARNING: Base.Pkg is deprecated, run `using Pkg` instead
 in module Main
[ Info: Testing CategoricalArrays
Test Summary: | Pass  Total
01_typedef.jl |   93     93
Test Summary:    | Pass  Total
02_buildorder.jl |    6      6
Test Summary:     | Pass  Total
03_buildfields.jl |    6      6
Test Summary:      | Pass  Total
04_constructors.jl |  121    121
Test Summary: | Pass  Total
05_convert.jl |   32     32
Test Summary: | Pass  Total
06_show.jl    |   40     40
Test Summary: | Pass  Total
06_length.jl  |    2      2
Test Summary: | Pass  Total
07_levels.jl  |  306    306
Test Summary:  | Pass  Total
08_equality.jl |  110    110
┌ Warning: `normalize_string(s::AbstractString; kwargs...)` is deprecated, use `Unicode.normalize(s; kwargs...)` instead.
│   caller = macro expansion at 08_string.jl:82 [inlined]
└ @ Core 08_string.jl:82
┌ Warning: `normalize_string(s::AbstractString; kwargs...)` is deprecated, use `Unicode.normalize(s; kwargs...)` instead.
│   caller = macro expansion at 08_string.jl:83 [inlined]
└ @ Core 08_string.jl:83
┌ Warning: `normalize_string(s::AbstractString, nf::Symbol; kwargs...)` is deprecated, use `Unicode.normalize(s, nf; kwargs...)` instead.
│   caller = macro expansion at 08_string.jl:84 [inlined]
└ @ Core 08_string.jl:84
┌ Warning: `matchall(r::Regex, s::AbstractString; overlap::Bool=false)` is deprecated, use `collect((m.match for m = eachmatch(r, s, overlap=overlap)))` instead.
│   caller = macro expansion at 08_string.jl:141 [inlined]
└ @ Core 08_string.jl:141
┌ Warning: `matchall(r::Regex, s::AbstractString; overlap::Bool=false)` is deprecated, use `collect((m.match for m = eachmatch(r, s, overlap=overlap)))` instead.
│   caller = macro expansion at 08_string.jl:142 [inlined]
└ @ Core 08_string.jl:142
┌ Warning: `matchall(r::Regex, s::AbstractString; overlap::Bool=false)` is deprecated, use `collect((m.match for m = eachmatch(r, s, overlap=overlap)))` instead.
│   caller = ip:0x0
└ @ Core :-1
Test Summary: | Pass  Total
08_string.jl  |  151    151
Test Summary: | Pass  Total
09_hash.jl    |   54     54
┌ Warning: Deprecated syntax `implicit assignment to global variable `pool``.
│ Use `global pool` instead.
└ @ nothing none:0
┌ Warning: Deprecated syntax `implicit assignment to global variable `v1``.
│ Use `global v1` instead.
└ @ nothing none:0
┌ Warning: Deprecated syntax `implicit assignment to global variable `v2``.
│ Use `global v2` instead.
└ @ nothing none:0
┌ Warning: Deprecated syntax `implicit assignment to global variable `v3``.
│ Use `global v3` instead.
└ @ nothing none:0
Test Summary: | Pass  Total
10_isless.jl  |  256    256
┌ Warning: `copy!(dst::AbstractArray, src::AbstractArray)` is deprecated. You can either use `copyto!(dst, src)` or `Future.copy!(dst, src)` instead.
│   caller = convert(::Type{CategoricalArrays.CategoricalArray{String,1,UInt32,C,U,U1} where U1 where U where C}, ::Array{String,1}) at array.jl:241
└ @ CategoricalArrays array.jl:241
┌ Warning: `method_exists(f, t)` is deprecated, use `hasmethod(f, t)` instead.
│   caller = convert(::Type{CategoricalArrays.CategoricalArray{String,1,UInt32,C,U,U1} where U1 where U where C}, ::Array{String,1}) at array.jl:245
└ @ CategoricalArrays array.jl:245
┌ Warning: `copy!(dst::AbstractArray, src::AbstractArray)` is deprecated. You can either use `copyto!(dst, src)` or `Future.copy!(dst, src)` instead.
│   caller = convert(::Type{CategoricalArrays.CategoricalArray{String,1,UInt8,V,C,U} where U where C where V}, ::Array{String,1}) at array.jl:241
└ @ CategoricalArrays array.jl:241
┌ Warning: `method_exists(f, t)` is deprecated, use `hasmethod(f, t)` instead.
│   caller = convert(::Type{CategoricalArrays.CategoricalArray{String,1,UInt8,V,C,U} where U where C where V}, ::Array{String,1}) at array.jl:245
└ @ CategoricalArrays array.jl:245
┌ Warning: `shift!` is deprecated, use `popfirst!` instead.
│   caller = _unique(::Type{String}, ::Array{UInt32,1}, ::CategoricalArrays.CategoricalPool{String,UInt32,CategoricalArrays.CategoricalString{UInt32}}) at array.jl:607
└ @ CategoricalArrays array.jl:607
┌ Warning: `copy!(dst::AbstractArray, src::AbstractArray)` is deprecated. You can either use `copyto!(dst, src)` or `Future.copy!(dst, src)` instead.
│   caller = convert(::Type{CategoricalArrays.CategoricalArray{Float64,1,UInt32,C,U,U1} where U1 where U where C}, ::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}) at array.jl:241
└ @ CategoricalArrays array.jl:241
┌ Warning: `method_exists(f, t)` is deprecated, use `hasmethod(f, t)` instead.
│   caller = convert(::Type{CategoricalArrays.CategoricalArray{Float64,1,UInt32,C,U,U1} where U1 where U where C}, ::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}) at array.jl:245
└ @ CategoricalArrays array.jl:245
┌ Warning: `copy!(dst::AbstractArray, src::AbstractArray)` is deprecated. You can either use `copyto!(dst, src)` or `Future.copy!(dst, src)` instead.
│   caller = convert(::Type{CategoricalArrays.CategoricalArray{Float32,1,UInt32,V,C,U} where U where C where V}, ::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}) at array.jl:241
└ @ CategoricalArrays array.jl:241
┌ Warning: `method_exists(f, t)` is deprecated, use `hasmethod(f, t)` instead.
│   caller = convert(::Type{CategoricalArrays.CategoricalArray{Float32,1,UInt32,V,C,U} where U where C where V}, ::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}) at array.jl:245
└ @ CategoricalArrays array.jl:245
┌ Warning: `copy!(dst::AbstractArray, src::AbstractArray)` is deprecated. You can either use `copyto!(dst, src)` or `Future.copy!(dst, src)` instead.
│   caller = convert(::Type{CategoricalArrays.CategoricalArray{Float64,1,UInt8,V,C,U} where U where C where V}, ::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}) at array.jl:241
└ @ CategoricalArrays array.jl:241
┌ Warning: `method_exists(f, t)` is deprecated, use `hasmethod(f, t)` instead.
│   caller = convert(::Type{CategoricalArrays.CategoricalArray{Float64,1,UInt8,V,C,U} where U where C where V}, ::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}) at array.jl:245
└ @ CategoricalArrays array.jl:245
┌ Warning: `copy!(dst::AbstractArray, src::AbstractArray)` is deprecated. You can either use `copyto!(dst, src)` or `Future.copy!(dst, src)` instead.
│   caller = convert(::Type{CategoricalArrays.CategoricalArray{Float32,1,UInt8,V,C,U} where U where C where V}, ::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}) at array.jl:241
└ @ CategoricalArrays array.jl:241
┌ Warning: `method_exists(f, t)` is deprecated, use `hasmethod(f, t)` instead.
│   caller = convert(::Type{CategoricalArrays.CategoricalArray{Float32,1,UInt8,V,C,U} where U where C where V}, ::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}) at array.jl:245
└ @ CategoricalArrays array.jl:245
┌ Warning: `copy!(dst::AbstractArray, src::AbstractArray)` is deprecated. You can either use `copyto!(dst, src)` or `Future.copy!(dst, src)` instead.
│   caller = convert(::Type{CategoricalArrays.CategoricalArray{Float64,1,UInt32,C,U,U1} where U1 where U where C}, ::Array{Float64,1}) at array.jl:241
└ @ CategoricalArrays array.jl:241
┌ Warning: `method_exists(f, t)` is deprecated, use `hasmethod(f, t)` instead.
│   caller = convert(::Type{CategoricalArrays.CategoricalArray{Float64,1,UInt32,C,U,U1} where U1 where U where C}, ::Array{Float64,1}) at array.jl:245
└ @ CategoricalArrays array.jl:245
┌ Warning: `copy!(dst::AbstractArray, src::AbstractArray)` is deprecated. You can either use `copyto!(dst, src)` or `Future.copy!(dst, src)` instead.
│   caller = convert(::Type{CategoricalArrays.CategoricalArray{String,2,UInt32,C,U,U1} where U1 where U where C}, ::Array{String,2}) at array.jl:241
└ @ CategoricalArrays array.jl:241
┌ Warning: `method_exists(f, t)` is deprecated, use `hasmethod(f, t)` instead.
│   caller = convert(::Type{CategoricalArrays.CategoricalArray{String,2,UInt32,C,U,U1} where U1 where U where C}, ::Array{String,2}) at array.jl:245
└ @ CategoricalArrays array.jl:245
┌ Warning: `copy!(dst::AbstractArray, src::AbstractArray)` is deprecated. You can either use `copyto!(dst, src)` or `Future.copy!(dst, src)` instead.
│   caller = convert(::Type{CategoricalArrays.CategoricalArray{String,2,UInt8,V,C,U} where U where C where V}, ::Array{String,2}) at array.jl:241
└ @ CategoricalArrays array.jl:241
┌ Warning: `method_exists(f, t)` is deprecated, use `hasmethod(f, t)` instead.
│   caller = convert(::Type{CategoricalArrays.CategoricalArray{String,2,UInt8,V,C,U} where U where C where V}, ::Array{String,2}) at array.jl:245
└ @ CategoricalArrays array.jl:245
┌ Warning: `shift!` is deprecated, use `popfirst!` instead.
│   caller = _unique(::Type{String}, ::Array{UInt8,1}, ::CategoricalArrays.CategoricalPool{String,UInt8,CategoricalArrays.CategoricalString{UInt8}}) at array.jl:607
└ @ CategoricalArrays array.jl:607
┌ Warning: `copy!(dst::AbstractArray, src::AbstractArray)` is deprecated. You can either use `copyto!(dst, src)` or `Future.copy!(dst, src)` instead.
│   caller = convert(::Type{CategoricalArrays.CategoricalArray{Float64,1,UInt8,V,C,U} where U where C where V}, ::Array{Float64,1}) at array.jl:241
└ @ CategoricalArrays array.jl:241
┌ Warning: `method_exists(f, t)` is deprecated, use `hasmethod(f, t)` instead.
│   caller = convert(::Type{CategoricalArrays.CategoricalArray{Float64,1,UInt8,V,C,U} where U where C where V}, ::Array{Float64,1}) at array.jl:245
└ @ CategoricalArrays array.jl:245
┌ Warning: `copy!(dst::AbstractArray, src::AbstractArray)` is deprecated. You can either use `copyto!(dst, src)` or `Future.copy!(dst, src)` instead.
│   caller = convert(::Type{CategoricalArrays.CategoricalArray{String,1,UInt64,C,U,U1} where U1 where U where C}, ::Array{String,1}) at array.jl:241
└ @ CategoricalArrays array.jl:241
┌ Warning: `method_exists(f, t)` is deprecated, use `hasmethod(f, t)` instead.
│   caller = convert(::Type{CategoricalArrays.CategoricalArray{String,1,UInt64,C,U,U1} where U1 where U where C}, ::Array{String,1}) at array.jl:245
└ @ CategoricalArrays array.jl:245
┌ Warning: `shift!` is deprecated, use `popfirst!` instead.
│   caller = _unique(::Type{String}, ::Array{UInt64,1}, ::CategoricalArrays.CategoricalPool{String,UInt64,CategoricalArrays.CategoricalString{UInt64}}) at array.jl:607
└ @ CategoricalArrays array.jl:607
┌ Warning: `copy!(dst::AbstractArray, src::AbstractArray)` is deprecated. You can either use `copyto!(dst, src)` or `Future.copy!(dst, src)` instead.
│   caller = convert(::Type{CategoricalArrays.CategoricalArray{Float64,1,UInt64,C,U,U1} where U1 where U where C}, ::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}) at array.jl:241
└ @ CategoricalArrays array.jl:241
┌ Warning: `method_exists(f, t)` is deprecated, use `hasmethod(f, t)` instead.
│   caller = convert(::Type{CategoricalArrays.CategoricalArray{Float64,1,UInt64,C,U,U1} where U1 where U where C}, ::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}) at array.jl:245
└ @ CategoricalArrays array.jl:245
┌ Warning: `copy!(dst::AbstractArray, src::AbstractArray)` is deprecated. You can either use `copyto!(dst, src)` or `Future.copy!(dst, src)` instead.
│   caller = convert(::Type{CategoricalArrays.CategoricalArray{Float32,1,UInt64,V,C,U} where U where C where V}, ::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}) at array.jl:241
└ @ CategoricalArrays array.jl:241
┌ Warning: `method_exists(f, t)` is deprecated, use `hasmethod(f, t)` instead.
│   caller = convert(::Type{CategoricalArrays.CategoricalArray{Float32,1,UInt64,V,C,U} where U where C where V}, ::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}) at array.jl:245
└ @ CategoricalArrays array.jl:245
┌ Warning: `copy!(dst::AbstractArray, src::AbstractArray)` is deprecated. You can either use `copyto!(dst, src)` or `Future.copy!(dst, src)` instead.
│   caller = convert(::Type{CategoricalArrays.CategoricalArray{Float64,1,UInt64,C,U,U1} where U1 where U where C}, ::Array{Float64,1}) at array.jl:241
└ @ CategoricalArrays array.jl:241
┌ Warning: `method_exists(f, t)` is deprecated, use `hasmethod(f, t)` instead.
│   caller = convert(::Type{CategoricalArrays.CategoricalArray{Float64,1,UInt64,C,U,U1} where U1 where U where C}, ::Array{Float64,1}) at array.jl:245
└ @ CategoricalArrays array.jl:245
┌ Warning: `copy!(dst::AbstractArray, src::AbstractArray)` is deprecated. You can either use `copyto!(dst, src)` or `Future.copy!(dst, src)` instead.
│   caller = convert(::Type{CategoricalArrays.CategoricalArray{String,2,UInt64,C,U,U1} where U1 where U where C}, ::Array{String,2}) at array.jl:241
└ @ CategoricalArrays array.jl:241
┌ Warning: `method_exists(f, t)` is deprecated, use `hasmethod(f, t)` instead.
│   caller = convert(::Type{CategoricalArrays.CategoricalArray{String,2,UInt64,C,U,U1} where U1 where U where C}, ::Array{String,2}) at array.jl:245
└ @ CategoricalArrays array.jl:245
┌ Warning: `copy!(dst::AbstractArray, src::AbstractArray)` is deprecated. You can either use `copyto!(dst, src)` or `Future.copy!(dst, src)` instead.
│   caller = convert(::Type{CategoricalArrays.CategoricalArray{String,1,Int8,C,U,U1} where U1 where U where C}, ::Array{String,1}) at array.jl:241
└ @ CategoricalArrays array.jl:241
┌ Warning: `method_exists(f, t)` is deprecated, use `hasmethod(f, t)` instead.
│   caller = convert(::Type{CategoricalArrays.CategoricalArray{String,1,Int8,C,U,U1} where U1 where U where C}, ::Array{String,1}) at array.jl:245
└ @ CategoricalArrays array.jl:245
┌ Warning: `shift!` is deprecated, use `popfirst!` instead.
│   caller = _unique(::Type{String}, ::Array{Int8,1}, ::CategoricalArrays.CategoricalPool{String,Int8,CategoricalArrays.CategoricalString{Int8}}) at array.jl:607
└ @ CategoricalArrays array.jl:607
┌ Warning: `copy!(dst::AbstractArray, src::AbstractArray)` is deprecated. You can either use `copyto!(dst, src)` or `Future.copy!(dst, src)` instead.
│   caller = convert(::Type{CategoricalArrays.CategoricalArray{Float64,1,Int8,C,U,U1} where U1 where U where C}, ::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}) at array.jl:241
└ @ CategoricalArrays array.jl:241
┌ Warning: `method_exists(f, t)` is deprecated, use `hasmethod(f, t)` instead.
│   caller = convert(::Type{CategoricalArrays.CategoricalArray{Float64,1,Int8,C,U,U1} where U1 where U where C}, ::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}) at array.jl:245
└ @ CategoricalArrays array.jl:245
┌ Warning: `copy!(dst::AbstractArray, src::AbstractArray)` is deprecated. You can either use `copyto!(dst, src)` or `Future.copy!(dst, src)` instead.
│   caller = convert(::Type{CategoricalArrays.CategoricalArray{Float32,1,Int8,V,C,U} where U where C where V}, ::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}) at array.jl:241
└ @ CategoricalArrays array.jl:241
┌ Warning: `method_exists(f, t)` is deprecated, use `hasmethod(f, t)` instead.
│   caller = convert(::Type{CategoricalArrays.CategoricalArray{Float32,1,Int8,V,C,U} where U where C where V}, ::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}) at array.jl:245
└ @ CategoricalArrays array.jl:245
┌ Warning: `copy!(dst::AbstractArray, src::AbstractArray)` is deprecated. You can either use `copyto!(dst, src)` or `Future.copy!(dst, src)` instead.
│   caller = convert(::Type{CategoricalArrays.CategoricalArray{Float64,1,Int8,C,U,U1} where U1 where U where C}, ::Array{Float64,1}) at array.jl:241
└ @ CategoricalArrays array.jl:241
┌ Warning: `method_exists(f, t)` is deprecated, use `hasmethod(f, t)` instead.
│   caller = convert(::Type{CategoricalArrays.CategoricalArray{Float64,1,Int8,C,U,U1} where U1 where U where C}, ::Array{Float64,1}) at array.jl:245
└ @ CategoricalArrays array.jl:245
┌ Warning: `copy!(dst::AbstractArray, src::AbstractArray)` is deprecated. You can either use `copyto!(dst, src)` or `Future.copy!(dst, src)` instead.
│   caller = convert(::Type{CategoricalArrays.CategoricalArray{String,2,Int8,C,U,U1} where U1 where U where C}, ::Array{String,2}) at array.jl:241
└ @ CategoricalArrays array.jl:241
┌ Warning: `method_exists(f, t)` is deprecated, use `hasmethod(f, t)` instead.
│   caller = convert(::Type{CategoricalArrays.CategoricalArray{String,2,Int8,C,U,U1} where U1 where U where C}, ::Array{String,2}) at array.jl:245
└ @ CategoricalArrays array.jl:245
┌ Warning: `copy!(dst::AbstractArray, src::AbstractArray)` is deprecated. You can either use `copyto!(dst, src)` or `Future.copy!(dst, src)` instead.
│   caller = convert(::Type{CategoricalArrays.CategoricalArray{String,1,Int64,C,U,U1} where U1 where U where C}, ::Array{String,1}) at array.jl:241
└ @ CategoricalArrays array.jl:241
┌ Warning: `method_exists(f, t)` is deprecated, use `hasmethod(f, t)` instead.
│   caller = convert(::Type{CategoricalArrays.CategoricalArray{String,1,Int64,C,U,U1} where U1 where U where C}, ::Array{String,1}) at array.jl:245
└ @ CategoricalArrays array.jl:245
┌ Warning: `shift!` is deprecated, use `popfirst!` instead.
│   caller = _unique(::Type{String}, ::Array{Int64,1}, ::CategoricalArrays.CategoricalPool{String,Int64,CategoricalArrays.CategoricalString{Int64}}) at array.jl:607
└ @ CategoricalArrays array.jl:607
┌ Warning: `copy!(dst::AbstractArray, src::AbstractArray)` is deprecated. You can either use `copyto!(dst, src)` or `Future.copy!(dst, src)` instead.
│   caller = convert(::Type{CategoricalArrays.CategoricalArray{Float64,1,Int64,C,U,U1} where U1 where U where C}, ::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}) at array.jl:241
└ @ CategoricalArrays array.jl:241
┌ Warning: `method_exists(f, t)` is deprecated, use `hasmethod(f, t)` instead.
│   caller = convert(::Type{CategoricalArrays.CategoricalArray{Float64,1,Int64,C,U,U1} where U1 where U where C}, ::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}) at array.jl:245
└ @ CategoricalArrays array.jl:245
┌ Warning: `copy!(dst::AbstractArray, src::AbstractArray)` is deprecated. You can either use `copyto!(dst, src)` or `Future.copy!(dst, src)` instead.
│   caller = convert(::Type{CategoricalArrays.CategoricalArray{Float32,1,Int64,V,C,U} where U where C where V}, ::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}) at array.jl:241
└ @ CategoricalArrays array.jl:241
┌ Warning: `method_exists(f, t)` is deprecated, use `hasmethod(f, t)` instead.
│   caller = convert(::Type{CategoricalArrays.CategoricalArray{Float32,1,Int64,V,C,U} where U where C where V}, ::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}) at array.jl:245
└ @ CategoricalArrays array.jl:245
┌ Warning: `copy!(dst::AbstractArray, src::AbstractArray)` is deprecated. You can either use `copyto!(dst, src)` or `Future.copy!(dst, src)` instead.
│   caller = convert(::Type{CategoricalArrays.CategoricalArray{Float64,1,Int64,C,U,U1} where U1 where U where C}, ::Array{Float64,1}) at array.jl:241
└ @ CategoricalArrays array.jl:241
┌ Warning: `method_exists(f, t)` is deprecated, use `hasmethod(f, t)` instead.
│   caller = convert(::Type{CategoricalArrays.CategoricalArray{Float64,1,Int64,C,U,U1} where U1 where U where C}, ::Array{Float64,1}) at array.jl:245
└ @ CategoricalArrays array.jl:245
┌ Warning: `copy!(dst::AbstractArray, src::AbstractArray)` is deprecated. You can either use `copyto!(dst, src)` or `Future.copy!(dst, src)` instead.
│   caller = convert(::Type{CategoricalArrays.CategoricalArray{String,2,Int64,C,U,U1} where U1 where U where C}, ::Array{String,2}) at array.jl:241
└ @ CategoricalArrays array.jl:241
┌ Warning: `method_exists(f, t)` is deprecated, use `hasmethod(f, t)` instead.
│   caller = convert(::Type{CategoricalArrays.CategoricalArray{String,2,Int64,C,U,U1} where U1 where U where C}, ::Array{String,2}) at array.jl:245
└ @ CategoricalArrays array.jl:245
┌ Warning: `copy!(dst::AbstractArray, src::AbstractArray)` is deprecated. You can either use `copyto!(dst, src)` or `Future.copy!(dst, src)` instead.
│   caller = convert(::Type{CategoricalArrays.CategoricalArray{Int64,1,UInt32,V,C,U} where U where C where V}, ::Array{Int64,1}) at array.jl:241
└ @ CategoricalArrays array.jl:241
┌ Warning: `method_exists(f, t)` is deprecated, use `hasmethod(f, t)` instead.
│   caller = convert(::Type{CategoricalArrays.CategoricalArray{Int64,1,UInt32,V,C,U} where U where C where V}, ::Array{Int64,1}) at array.jl:245
└ @ CategoricalArrays array.jl:245
┌ Warning: `shift!` is deprecated, use `popfirst!` instead.
│   caller = _unique(::Type{Int64}, ::Array{UInt32,1}, ::CategoricalArrays.CategoricalPool{Int64,UInt32,CategoricalArrays.CategoricalValue{Int64,UInt32}}) at array.jl:607
└ @ CategoricalArrays array.jl:607
Test Summary: | Pass  Total
11_array.jl   | 8684   8684
┌ Warning: `copy!(dst::AbstractArray, src::AbstractArray)` is deprecated. You can either use `copyto!(dst, src)` or `Future.copy!(dst, src)` instead.
│   caller = convert(::Type{CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,C,U,U1} where U1 where U where C}, ::Array{String,1}) at array.jl:241
└ @ CategoricalArrays array.jl:241
┌ Warning: `method_exists(f, t)` is deprecated, use `hasmethod(f, t)` instead.
│   caller = convert(::Type{CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,C,U,U1} where U1 where U where C}, ::Array{String,1}) at array.jl:245
└ @ CategoricalArrays array.jl:245
┌ Warning: `copy!(dst::AbstractArray, src::AbstractArray)` is deprecated. You can either use `copyto!(dst, src)` or `Future.copy!(dst, src)` instead.
│   caller = convert(::Type{CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt8,V,C,U} where U where C where V}, ::Array{String,1}) at array.jl:241
└ @ CategoricalArrays array.jl:241
┌ Warning: `method_exists(f, t)` is deprecated, use `hasmethod(f, t)` instead.
│   caller = convert(::Type{CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt8,V,C,U} where U where C where V}, ::Array{String,1}) at array.jl:245
└ @ CategoricalArrays array.jl:245
┌ Warning: `shift!` is deprecated, use `popfirst!` instead.
│   caller = _unique(::Type{Union{Missing, String}}, ::Array{UInt32,1}, ::CategoricalArrays.CategoricalPool{String,UInt32,CategoricalArrays.CategoricalString{UInt32}}) at array.jl:607
└ @ CategoricalArrays array.jl:607
Vector with no missing values: Error During Test at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:199
  Test threw an exception of type MethodError
  Expression: levels!(x, ["e", "c"], allow_missing=true) === x
  MethodError: Cannot `convert` an object of type Nothing to an object of type UInt32
  Closest candidates are:
    convert(::Type{T<:Number}, !Matched::T<:Number) where T<:Number at number.jl:6
    convert(::Type{T<:Number}, !Matched::Number) where T<:Number at number.jl:7
    convert(::Type{T<:Integer}, !Matched::Ptr) where T<:Integer at pointer.jl:23
    ...
  Stacktrace:
   [1] setindex!(::Array{UInt32,1}, ::Nothing, ::Int64) at ./array.jl:688
   [2] #levels!#55(::Bool, ::Function, ::CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Missing}, ::Array{String,1}) at /home/vagrant/.julia/v0.7/CategoricalArrays/src/array.jl:583
   [3] (::getfield(CategoricalArrays, Symbol("#kw##levels!")))(::NamedTuple{(:allow_missing,),Tuple{Bool}}, ::typeof(CategoricalArrays.levels!), ::CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Missing}, ::Array{String,1}) at ./<missing>:0
   [4] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:199 [inlined]
   [5] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1012 [inlined]
   [6] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:13 [inlined]
   [7] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:11 [inlined]
   [9] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:10 [inlined]
   [11] top-level scope at ./<missing>:1085
Vector with no missing values: Test Failed at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:202
  Expression: x[2] === missing
   Evaluated: CategoricalArrays.CategoricalString{UInt32} "c" === missing
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:202 [inlined]
 [2] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1012 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:13 [inlined]
 [4] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [5] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:11 [inlined]
 [6] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [7] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:10 [inlined]
 [8] top-level scope at ./<missing>:1085
Vector with no missing values: Test Failed at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:203
  Expression: x[3] === missing
   Evaluated: CategoricalArrays.CategoricalString{UInt32} "c" === missing
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:203 [inlined]
 [2] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1012 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:13 [inlined]
 [4] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [5] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:11 [inlined]
 [6] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [7] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:10 [inlined]
 [8] top-level scope at ./<missing>:1085
Vector with no missing values: Test Failed at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:208
  Expression: x ≅ ["c", missing, missing, "e"]
   Evaluated: Union{Missing, CategoricalArrays.CategoricalString{UInt32}}["c", "c", "c", "e"] ≅ Union{Missing, String}["c", missing, missing, "e"]
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:208 [inlined]
 [2] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1012 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:13 [inlined]
 [4] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [5] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:11 [inlined]
 [6] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [7] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:10 [inlined]
 [8] top-level scope at ./<missing>:1085
Vector with no missing values: Test Failed at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:213
  Expression: x ≅ ["c", missing, missing, "e", "zz"]
   Evaluated: Union{Missing, CategoricalArrays.CategoricalString{UInt32}}["c", "c", "c", "e", "zz"] ≅ Union{Missing, String}["c", missing, missing, "e", "zz"]
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:213 [inlined]
 [2] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1012 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:13 [inlined]
 [4] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [5] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:11 [inlined]
 [6] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [7] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:10 [inlined]
 [8] top-level scope at ./<missing>:1085
Vector with no missing values: Test Failed at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:218
  Expression: x ≅ ["c", missing, missing, "e", "zz", "c"]
   Evaluated: Union{Missing, CategoricalArrays.CategoricalString{UInt32}}["c", "c", "c", "e", "zz", "c"] ≅ Union{Missing, String}["c", missing, missing, "e", "zz", "c"]
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:218 [inlined]
 [2] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1012 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:13 [inlined]
 [4] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [5] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:11 [inlined]
 [6] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [7] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:10 [inlined]
 [8] top-level scope at ./<missing>:1085
Vector with no missing values: Test Failed at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:223
  Expression: x ≅ ["c", missing, missing, "e", "zz", "c", missing]
   Evaluated: Union{Missing, CategoricalArrays.CategoricalString{UInt32}}["c", "c", "c", "e", "zz", "c", missing] ≅ Union{Missing, String}["c", missing, missing, "e", "zz", "c", missing]
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:223 [inlined]
 [2] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1012 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:13 [inlined]
 [4] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [5] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:11 [inlined]
 [6] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [7] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:10 [inlined]
 [8] top-level scope at ./<missing>:1085
Vector with no missing values: Test Failed at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:227
  Expression: x ≅ ["c", missing, missing, "e", "zz", "c", missing, "c", missing, missing, "e", "zz", "c", missing]
   Evaluated: Union{Missing, CategoricalArrays.CategoricalString{UInt32}}["c", "c", "c", "e", "zz", "c", missing, "c", "c", "c", "e", "zz", "c", missing] ≅ Union{Missing, String}["c", missing, missing, "e", "zz", "c", missing, "c", missing, missing, "e", "zz", "c", missing]
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:227 [inlined]
 [2] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1012 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:13 [inlined]
 [4] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [5] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:11 [inlined]
 [6] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [7] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:10 [inlined]
 [8] top-level scope at ./<missing>:1085
Vector with no missing values: Test Failed at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:238
  Expression: x ≅ ["c", missing, missing, "e", "zz", "c", missing, "c", missing, missing, "e", "zz", "c", missing, "z", "y", "x"]
   Evaluated: Union{Missing, CategoricalArrays.CategoricalString{UInt32}}["c", "c", "c", "e", "zz", "c", missing, "c", "c", "c", "e", "zz", "c", missing, "z", "y", "x"] ≅ Union{Missing, String}["c", missing, missing, "e", "zz", "c", missing, "c", missing, missing, "e", "zz", "c", missing, "z", "y", "x"]
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:238 [inlined]
 [2] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1012 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:13 [inlined]
 [4] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [5] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:11 [inlined]
 [6] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [7] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:10 [inlined]
 [8] top-level scope at ./<missing>:1085
┌ Warning: `copy!(dst::AbstractArray, src::AbstractArray)` is deprecated. You can either use `copyto!(dst, src)` or `Future.copy!(dst, src)` instead.
│   caller = convert(::Type{CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,C,U,U1} where U1 where U where C}, ::Array{Union{Missing, String},1}) at array.jl:241
└ @ CategoricalArrays array.jl:241
┌ Warning: `method_exists(f, t)` is deprecated, use `hasmethod(f, t)` instead.
│   caller = convert(::Type{CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,C,U,U1} where U1 where U where C}, ::Array{Union{Missing, String},1}) at array.jl:245
└ @ CategoricalArrays array.jl:245
┌ Warning: `copy!(dst::AbstractArray, src::AbstractArray)` is deprecated. You can either use `copyto!(dst, src)` or `Future.copy!(dst, src)` instead.
│   caller = convert(::Type{CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt8,V,C,U} where U where C where V}, ::Array{Union{Missing, String},1}) at array.jl:241
└ @ CategoricalArrays array.jl:241
┌ Warning: `method_exists(f, t)` is deprecated, use `hasmethod(f, t)` instead.
│   caller = convert(::Type{CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt8,V,C,U} where U where C where V}, ::Array{Union{Missing, String},1}) at array.jl:245
└ @ CategoricalArrays array.jl:245
Vector with no missing values: Error During Test at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:199
  Test threw an exception of type MethodError
  Expression: levels!(x, ["e", "c"], allow_missing=true) === x
  MethodError: Cannot `convert` an object of type Nothing to an object of type UInt32
  Closest candidates are:
    convert(::Type{T<:Number}, !Matched::T<:Number) where T<:Number at number.jl:6
    convert(::Type{T<:Number}, !Matched::Number) where T<:Number at number.jl:7
    convert(::Type{T<:Integer}, !Matched::Ptr) where T<:Integer at pointer.jl:23
    ...
  Stacktrace:
   [1] setindex!(::Array{UInt32,1}, ::Nothing, ::Int64) at ./array.jl:688
   [2] #levels!#55(::Bool, ::Function, ::CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Missing}, ::Array{String,1}) at /home/vagrant/.julia/v0.7/CategoricalArrays/src/array.jl:583
   [3] (::getfield(CategoricalArrays, Symbol("#kw##levels!")))(::NamedTuple{(:allow_missing,),Tuple{Bool}}, ::typeof(CategoricalArrays.levels!), ::CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Missing}, ::Array{String,1}) at ./<missing>:0
   [4] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:199 [inlined]
   [5] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1012 [inlined]
   [6] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:13 [inlined]
   [7] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:11 [inlined]
   [9] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:10 [inlined]
   [11] top-level scope at ./<missing>:1085
Vector with no missing values: Test Failed at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:202
  Expression: x[2] === missing
   Evaluated: CategoricalArrays.CategoricalString{UInt32} "c" === missing
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:202 [inlined]
 [2] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1012 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:13 [inlined]
 [4] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [5] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:11 [inlined]
 [6] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [7] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:10 [inlined]
 [8] top-level scope at ./<missing>:1085
Vector with no missing values: Test Failed at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:203
  Expression: x[3] === missing
   Evaluated: CategoricalArrays.CategoricalString{UInt32} "c" === missing
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:203 [inlined]
 [2] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1012 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:13 [inlined]
 [4] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [5] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:11 [inlined]
 [6] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [7] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:10 [inlined]
 [8] top-level scope at ./<missing>:1085
Vector with no missing values: Test Failed at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:208
  Expression: x ≅ ["c", missing, missing, "e"]
   Evaluated: Union{Missing, CategoricalArrays.CategoricalString{UInt32}}["c", "c", "c", "e"] ≅ Union{Missing, String}["c", missing, missing, "e"]
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:208 [inlined]
 [2] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1012 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:13 [inlined]
 [4] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [5] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:11 [inlined]
 [6] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [7] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:10 [inlined]
 [8] top-level scope at ./<missing>:1085
Vector with no missing values: Test Failed at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:213
  Expression: x ≅ ["c", missing, missing, "e", "zz"]
   Evaluated: Union{Missing, CategoricalArrays.CategoricalString{UInt32}}["c", "c", "c", "e", "zz"] ≅ Union{Missing, String}["c", missing, missing, "e", "zz"]
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:213 [inlined]
 [2] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1012 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:13 [inlined]
 [4] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [5] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:11 [inlined]
 [6] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [7] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:10 [inlined]
 [8] top-level scope at ./<missing>:1085
Vector with no missing values: Test Failed at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:218
  Expression: x ≅ ["c", missing, missing, "e", "zz", "c"]
   Evaluated: Union{Missing, CategoricalArrays.CategoricalString{UInt32}}["c", "c", "c", "e", "zz", "c"] ≅ Union{Missing, String}["c", missing, missing, "e", "zz", "c"]
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:218 [inlined]
 [2] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1012 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:13 [inlined]
 [4] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [5] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:11 [inlined]
 [6] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [7] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:10 [inlined]
 [8] top-level scope at ./<missing>:1085
Vector with no missing values: Test Failed at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:223
  Expression: x ≅ ["c", missing, missing, "e", "zz", "c", missing]
   Evaluated: Union{Missing, CategoricalArrays.CategoricalString{UInt32}}["c", "c", "c", "e", "zz", "c", missing] ≅ Union{Missing, String}["c", missing, missing, "e", "zz", "c", missing]
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:223 [inlined]
 [2] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1012 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:13 [inlined]
 [4] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [5] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:11 [inlined]
 [6] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [7] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:10 [inlined]
 [8] top-level scope at ./<missing>:1085
Vector with no missing values: Test Failed at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:227
  Expression: x ≅ ["c", missing, missing, "e", "zz", "c", missing, "c", missing, missing, "e", "zz", "c", missing]
   Evaluated: Union{Missing, CategoricalArrays.CategoricalString{UInt32}}["c", "c", "c", "e", "zz", "c", missing, "c", "c", "c", "e", "zz", "c", missing] ≅ Union{Missing, String}["c", missing, missing, "e", "zz", "c", missing, "c", missing, missing, "e", "zz", "c", missing]
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:227 [inlined]
 [2] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1012 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:13 [inlined]
 [4] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [5] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:11 [inlined]
 [6] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [7] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:10 [inlined]
 [8] top-level scope at ./<missing>:1085
Vector with no missing values: Test Failed at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:238
  Expression: x ≅ ["c", missing, missing, "e", "zz", "c", missing, "c", missing, missing, "e", "zz", "c", missing, "z", "y", "x"]
   Evaluated: Union{Missing, CategoricalArrays.CategoricalString{UInt32}}["c", "c", "c", "e", "zz", "c", missing, "c", "c", "c", "e", "zz", "c", missing, "z", "y", "x"] ≅ Union{Missing, String}["c", missing, missing, "e", "zz", "c", missing, "c", missing, missing, "e", "zz", "c", missing, "z", "y", "x"]
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:238 [inlined]
 [2] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1012 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:13 [inlined]
 [4] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [5] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:11 [inlined]
 [6] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [7] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:10 [inlined]
 [8] top-level scope at ./<missing>:1085
┌ Warning: `copy!(dst::AbstractArray, src::AbstractArray)` is deprecated. You can either use `copyto!(dst, src)` or `Future.copy!(dst, src)` instead.
│   caller = convert(::Type{CategoricalArrays.CategoricalArray{Union{Missing, Float64},1,UInt32,C,U,U1} where U1 where U where C}, ::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}) at array.jl:241
└ @ CategoricalArrays array.jl:241
┌ Warning: `method_exists(f, t)` is deprecated, use `hasmethod(f, t)` instead.
│   caller = convert(::Type{CategoricalArrays.CategoricalArray{Union{Missing, Float64},1,UInt32,C,U,U1} where U1 where U where C}, ::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}) at array.jl:245
└ @ CategoricalArrays array.jl:245
┌ Warning: `copy!(dst::AbstractArray, src::AbstractArray)` is deprecated. You can either use `copyto!(dst, src)` or `Future.copy!(dst, src)` instead.
│   caller = convert(::Type{CategoricalArrays.CategoricalArray{Union{Missing, Float32},1,UInt32,V,C,U} where U where C where V}, ::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}) at array.jl:241
└ @ CategoricalArrays array.jl:241
┌ Warning: `method_exists(f, t)` is deprecated, use `hasmethod(f, t)` instead.
│   caller = convert(::Type{CategoricalArrays.CategoricalArray{Union{Missing, Float32},1,UInt32,V,C,U} where U where C where V}, ::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}) at array.jl:245
└ @ CategoricalArrays array.jl:245
┌ Warning: `copy!(dst::AbstractArray, src::AbstractArray)` is deprecated. You can either use `copyto!(dst, src)` or `Future.copy!(dst, src)` instead.
│   caller = convert(::Type{CategoricalArrays.CategoricalArray{Union{Missing, Float64},1,UInt8,V,C,U} where U where C where V}, ::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}) at array.jl:241
└ @ CategoricalArrays array.jl:241
┌ Warning: `method_exists(f, t)` is deprecated, use `hasmethod(f, t)` instead.
│   caller = convert(::Type{CategoricalArrays.CategoricalArray{Union{Missing, Float64},1,UInt8,V,C,U} where U where C where V}, ::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}) at array.jl:245
└ @ CategoricalArrays array.jl:245
┌ Warning: `copy!(dst::AbstractArray, src::AbstractArray)` is deprecated. You can either use `copyto!(dst, src)` or `Future.copy!(dst, src)` instead.
│   caller = convert(::Type{CategoricalArrays.CategoricalArray{Union{Missing, Float32},1,UInt8,V,C,U} where U where C where V}, ::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}) at array.jl:241
└ @ CategoricalArrays array.jl:241
┌ Warning: `method_exists(f, t)` is deprecated, use `hasmethod(f, t)` instead.
│   caller = convert(::Type{CategoricalArrays.CategoricalArray{Union{Missing, Float32},1,UInt8,V,C,U} where U where C where V}, ::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}) at array.jl:245
└ @ CategoricalArrays array.jl:245
┌ Warning: `copy!(dst::AbstractArray, src::AbstractArray)` is deprecated. You can either use `copyto!(dst, src)` or `Future.copy!(dst, src)` instead.
│   caller = convert(::Type{CategoricalArrays.CategoricalArray{Union{Missing, Float64},1,UInt32,C,U,U1} where U1 where U where C}, ::Array{Float64,1}) at array.jl:241
└ @ CategoricalArrays array.jl:241
┌ Warning: `method_exists(f, t)` is deprecated, use `hasmethod(f, t)` instead.
│   caller = convert(::Type{CategoricalArrays.CategoricalArray{Union{Missing, Float64},1,UInt32,C,U,U1} where U1 where U where C}, ::Array{Float64,1}) at array.jl:245
└ @ CategoricalArrays array.jl:245
┌ Warning: `copy!(dst::AbstractArray, src::AbstractArray)` is deprecated. You can either use `copyto!(dst, src)` or `Future.copy!(dst, src)` instead.
│   caller = convert(::Type{CategoricalArrays.CategoricalArray{Union{Missing, String},2,UInt32,C,U,U1} where U1 where U where C}, ::Array{String,2}) at array.jl:241
└ @ CategoricalArrays array.jl:241
┌ Warning: `method_exists(f, t)` is deprecated, use `hasmethod(f, t)` instead.
│   caller = convert(::Type{CategoricalArrays.CategoricalArray{Union{Missing, String},2,UInt32,C,U,U1} where U1 where U where C}, ::Array{String,2}) at array.jl:245
└ @ CategoricalArrays array.jl:245
┌ Warning: `copy!(dst::AbstractArray, src::AbstractArray)` is deprecated. You can either use `copyto!(dst, src)` or `Future.copy!(dst, src)` instead.
│   caller = convert(::Type{CategoricalArrays.CategoricalArray{Union{Missing, String},2,UInt8,V,C,U} where U where C where V}, ::Array{String,2}) at array.jl:241
└ @ CategoricalArrays array.jl:241
┌ Warning: `method_exists(f, t)` is deprecated, use `hasmethod(f, t)` instead.
│   caller = convert(::Type{CategoricalArrays.CategoricalArray{Union{Missing, String},2,UInt8,V,C,U} where U where C where V}, ::Array{String,2}) at array.jl:245
└ @ CategoricalArrays array.jl:245
┌ Warning: `copy!(dst::AbstractArray, src::AbstractArray)` is deprecated. You can either use `copyto!(dst, src)` or `Future.copy!(dst, src)` instead.
│   caller = convert(::Type{CategoricalArrays.CategoricalArray{Union{Missing, String},2,UInt32,C,U,U1} where U1 where U where C}, ::Array{Union{Missing, String},2}) at array.jl:241
└ @ CategoricalArrays array.jl:241
┌ Warning: `method_exists(f, t)` is deprecated, use `hasmethod(f, t)` instead.
│   caller = convert(::Type{CategoricalArrays.CategoricalArray{Union{Missing, String},2,UInt32,C,U,U1} where U1 where U where C}, ::Array{Union{Missing, String},2}) at array.jl:245
└ @ CategoricalArrays array.jl:245
┌ Warning: `copy!(dst::AbstractArray, src::AbstractArray)` is deprecated. You can either use `copyto!(dst, src)` or `Future.copy!(dst, src)` instead.
│   caller = convert(::Type{CategoricalArrays.CategoricalArray{Union{Missing, String},2,UInt8,V,C,U} where U where C where V}, ::Array{Union{Missing, String},2}) at array.jl:241
└ @ CategoricalArrays array.jl:241
┌ Warning: `method_exists(f, t)` is deprecated, use `hasmethod(f, t)` instead.
│   caller = convert(::Type{CategoricalArrays.CategoricalArray{Union{Missing, String},2,UInt8,V,C,U} where U where C where V}, ::Array{Union{Missing, String},2}) at array.jl:245
└ @ CategoricalArrays array.jl:245
┌ Warning: `shift!` is deprecated, use `popfirst!` instead.
│   caller = _unique(::Type{Union{Missing, String}}, ::Array{UInt8,1}, ::CategoricalArrays.CategoricalPool{String,UInt8,CategoricalArrays.CategoricalString{UInt8}}) at array.jl:607
└ @ CategoricalArrays array.jl:607
Vector with no missing values: Error During Test at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:199
  Test threw an exception of type MethodError
  Expression: levels!(x, ["e", "c"], allow_missing=true) === x
  MethodError: Cannot `convert` an object of type Nothing to an object of type UInt8
  Closest candidates are:
    convert(::Type{T<:Number}, !Matched::T<:Number) where T<:Number at number.jl:6
    convert(::Type{T<:Number}, !Matched::Number) where T<:Number at number.jl:7
    convert(::Type{T<:Integer}, !Matched::Ptr) where T<:Integer at pointer.jl:23
    ...
  Stacktrace:
   [1] setindex!(::Array{UInt8,1}, ::Nothing, ::Int64) at ./array.jl:688
   [2] #levels!#55(::Bool, ::Function, ::CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt8,String,CategoricalArrays.CategoricalString{UInt8},Missing}, ::Array{String,1}) at /home/vagrant/.julia/v0.7/CategoricalArrays/src/array.jl:583
   [3] (::getfield(CategoricalArrays, Symbol("#kw##levels!")))(::NamedTuple{(:allow_missing,),Tuple{Bool}}, ::typeof(CategoricalArrays.levels!), ::CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt8,String,CategoricalArrays.CategoricalString{UInt8},Missing}, ::Array{String,1}) at ./<missing>:0
   [4] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:199 [inlined]
   [5] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1012 [inlined]
   [6] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:13 [inlined]
   [7] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:11 [inlined]
   [9] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:10 [inlined]
   [11] top-level scope at ./<missing>:1085
Vector with no missing values: Test Failed at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:202
  Expression: x[2] === missing
   Evaluated: CategoricalArrays.CategoricalString{UInt8} "c" === missing
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:202 [inlined]
 [2] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1012 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:13 [inlined]
 [4] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [5] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:11 [inlined]
 [6] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [7] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:10 [inlined]
 [8] top-level scope at ./<missing>:1085
Vector with no missing values: Test Failed at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:203
  Expression: x[3] === missing
   Evaluated: CategoricalArrays.CategoricalString{UInt8} "c" === missing
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:203 [inlined]
 [2] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1012 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:13 [inlined]
 [4] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [5] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:11 [inlined]
 [6] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [7] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:10 [inlined]
 [8] top-level scope at ./<missing>:1085
Vector with no missing values: Test Failed at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:208
  Expression: x ≅ ["c", missing, missing, "e"]
   Evaluated: Union{Missing, CategoricalArrays.CategoricalString{UInt8}}["c", "c", "c", "e"] ≅ Union{Missing, String}["c", missing, missing, "e"]
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:208 [inlined]
 [2] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1012 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:13 [inlined]
 [4] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [5] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:11 [inlined]
 [6] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [7] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:10 [inlined]
 [8] top-level scope at ./<missing>:1085
Vector with no missing values: Test Failed at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:213
  Expression: x ≅ ["c", missing, missing, "e", "zz"]
   Evaluated: Union{Missing, CategoricalArrays.CategoricalString{UInt8}}["c", "c", "c", "e", "zz"] ≅ Union{Missing, String}["c", missing, missing, "e", "zz"]
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:213 [inlined]
 [2] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1012 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:13 [inlined]
 [4] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [5] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:11 [inlined]
 [6] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [7] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:10 [inlined]
 [8] top-level scope at ./<missing>:1085
Vector with no missing values: Test Failed at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:218
  Expression: x ≅ ["c", missing, missing, "e", "zz", "c"]
   Evaluated: Union{Missing, CategoricalArrays.CategoricalString{UInt8}}["c", "c", "c", "e", "zz", "c"] ≅ Union{Missing, String}["c", missing, missing, "e", "zz", "c"]
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:218 [inlined]
 [2] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1012 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:13 [inlined]
 [4] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [5] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:11 [inlined]
 [6] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [7] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:10 [inlined]
 [8] top-level scope at ./<missing>:1085
Vector with no missing values: Test Failed at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:223
  Expression: x ≅ ["c", missing, missing, "e", "zz", "c", missing]
   Evaluated: Union{Missing, CategoricalArrays.CategoricalString{UInt8}}["c", "c", "c", "e", "zz", "c", missing] ≅ Union{Missing, String}["c", missing, missing, "e", "zz", "c", missing]
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:223 [inlined]
 [2] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1012 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:13 [inlined]
 [4] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [5] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:11 [inlined]
 [6] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [7] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:10 [inlined]
 [8] top-level scope at ./<missing>:1085
Vector with no missing values: Test Failed at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:227
  Expression: x ≅ ["c", missing, missing, "e", "zz", "c", missing, "c", missing, missing, "e", "zz", "c", missing]
   Evaluated: Union{Missing, CategoricalArrays.CategoricalString{UInt8}}["c", "c", "c", "e", "zz", "c", missing, "c", "c", "c", "e", "zz", "c", missing] ≅ Union{Missing, String}["c", missing, missing, "e", "zz", "c", missing, "c", missing, missing, "e", "zz", "c", missing]
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:227 [inlined]
 [2] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1012 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:13 [inlined]
 [4] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [5] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:11 [inlined]
 [6] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [7] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:10 [inlined]
 [8] top-level scope at ./<missing>:1085
Vector with no missing values: Test Failed at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:238
  Expression: x ≅ ["c", missing, missing, "e", "zz", "c", missing, "c", missing, missing, "e", "zz", "c", missing, "z", "y", "x"]
   Evaluated: Union{Missing, CategoricalArrays.CategoricalString{UInt8}}["c", "c", "c", "e", "zz", "c", missing, "c", "c", "c", "e", "zz", "c", missing, "z", "y", "x"] ≅ Union{Missing, String}["c", missing, missing, "e", "zz", "c", missing, "c", missing, missing, "e", "zz", "c", missing, "z", "y", "x"]
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:238 [inlined]
 [2] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1012 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:13 [inlined]
 [4] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [5] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:11 [inlined]
 [6] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [7] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:10 [inlined]
 [8] top-level scope at ./<missing>:1085
Vector with no missing values: Error During Test at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:199
  Test threw an exception of type MethodError
  Expression: levels!(x, ["e", "c"], allow_missing=true) === x
  MethodError: Cannot `convert` an object of type Nothing to an object of type UInt8
  Closest candidates are:
    convert(::Type{T<:Number}, !Matched::T<:Number) where T<:Number at number.jl:6
    convert(::Type{T<:Number}, !Matched::Number) where T<:Number at number.jl:7
    convert(::Type{T<:Integer}, !Matched::Ptr) where T<:Integer at pointer.jl:23
    ...
  Stacktrace:
   [1] setindex!(::Array{UInt8,1}, ::Nothing, ::Int64) at ./array.jl:688
   [2] #levels!#55(::Bool, ::Function, ::CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt8,String,CategoricalArrays.CategoricalString{UInt8},Missing}, ::Array{String,1}) at /home/vagrant/.julia/v0.7/CategoricalArrays/src/array.jl:583
   [3] (::getfield(CategoricalArrays, Symbol("#kw##levels!")))(::NamedTuple{(:allow_missing,),Tuple{Bool}}, ::typeof(CategoricalArrays.levels!), ::CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt8,String,CategoricalArrays.CategoricalString{UInt8},Missing}, ::Array{String,1}) at ./<missing>:0
   [4] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:199 [inlined]
   [5] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1012 [inlined]
   [6] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:13 [inlined]
   [7] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:11 [inlined]
   [9] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:10 [inlined]
   [11] top-level scope at ./<missing>:1085
Vector with no missing values: Test Failed at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:202
  Expression: x[2] === missing
   Evaluated: CategoricalArrays.CategoricalString{UInt8} "c" === missing
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:202 [inlined]
 [2] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1012 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:13 [inlined]
 [4] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [5] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:11 [inlined]
 [6] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [7] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:10 [inlined]
 [8] top-level scope at ./<missing>:1085
Vector with no missing values: Test Failed at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:203
  Expression: x[3] === missing
   Evaluated: CategoricalArrays.CategoricalString{UInt8} "c" === missing
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:203 [inlined]
 [2] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1012 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:13 [inlined]
 [4] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [5] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:11 [inlined]
 [6] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [7] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:10 [inlined]
 [8] top-level scope at ./<missing>:1085
Vector with no missing values: Test Failed at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:208
  Expression: x ≅ ["c", missing, missing, "e"]
   Evaluated: Union{Missing, CategoricalArrays.CategoricalString{UInt8}}["c", "c", "c", "e"] ≅ Union{Missing, String}["c", missing, missing, "e"]
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:208 [inlined]
 [2] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1012 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:13 [inlined]
 [4] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [5] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:11 [inlined]
 [6] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [7] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:10 [inlined]
 [8] top-level scope at ./<missing>:1085
Vector with no missing values: Test Failed at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:213
  Expression: x ≅ ["c", missing, missing, "e", "zz"]
   Evaluated: Union{Missing, CategoricalArrays.CategoricalString{UInt8}}["c", "c", "c", "e", "zz"] ≅ Union{Missing, String}["c", missing, missing, "e", "zz"]
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:213 [inlined]
 [2] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1012 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:13 [inlined]
 [4] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [5] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:11 [inlined]
 [6] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [7] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:10 [inlined]
 [8] top-level scope at ./<missing>:1085
Vector with no missing values: Test Failed at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:218
  Expression: x ≅ ["c", missing, missing, "e", "zz", "c"]
   Evaluated: Union{Missing, CategoricalArrays.CategoricalString{UInt8}}["c", "c", "c", "e", "zz", "c"] ≅ Union{Missing, String}["c", missing, missing, "e", "zz", "c"]
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:218 [inlined]
 [2] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1012 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:13 [inlined]
 [4] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [5] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:11 [inlined]
 [6] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [7] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:10 [inlined]
 [8] top-level scope at ./<missing>:1085
Vector with no missing values: Test Failed at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:223
  Expression: x ≅ ["c", missing, missing, "e", "zz", "c", missing]
   Evaluated: Union{Missing, CategoricalArrays.CategoricalString{UInt8}}["c", "c", "c", "e", "zz", "c", missing] ≅ Union{Missing, String}["c", missing, missing, "e", "zz", "c", missing]
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:223 [inlined]
 [2] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1012 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:13 [inlined]
 [4] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [5] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:11 [inlined]
 [6] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [7] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:10 [inlined]
 [8] top-level scope at ./<missing>:1085
Vector with no missing values: Test Failed at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:227
  Expression: x ≅ ["c", missing, missing, "e", "zz", "c", missing, "c", missing, missing, "e", "zz", "c", missing]
   Evaluated: Union{Missing, CategoricalArrays.CategoricalString{UInt8}}["c", "c", "c", "e", "zz", "c", missing, "c", "c", "c", "e", "zz", "c", missing] ≅ Union{Missing, String}["c", missing, missing, "e", "zz", "c", missing, "c", missing, missing, "e", "zz", "c", missing]
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:227 [inlined]
 [2] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1012 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:13 [inlined]
 [4] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [5] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:11 [inlined]
 [6] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [7] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:10 [inlined]
 [8] top-level scope at ./<missing>:1085
Vector with no missing values: Test Failed at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:238
  Expression: x ≅ ["c", missing, missing, "e", "zz", "c", missing, "c", missing, missing, "e", "zz", "c", missing, "z", "y", "x"]
   Evaluated: Union{Missing, CategoricalArrays.CategoricalString{UInt8}}["c", "c", "c", "e", "zz", "c", missing, "c", "c", "c", "e", "zz", "c", missing, "z", "y", "x"] ≅ Union{Missing, String}["c", missing, missing, "e", "zz", "c", missing, "c", missing, missing, "e", "zz", "c", missing, "z", "y", "x"]
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:238 [inlined]
 [2] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1012 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:13 [inlined]
 [4] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [5] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:11 [inlined]
 [6] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [7] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:10 [inlined]
 [8] top-level scope at ./<missing>:1085
┌ Warning: `copy!(dst::AbstractArray, src::AbstractArray)` is deprecated. You can either use `copyto!(dst, src)` or `Future.copy!(dst, src)` instead.
│   caller = convert(::Type{CategoricalArrays.CategoricalArray{Union{Missing, Float64},1,UInt8,V,C,U} where U where C where V}, ::Array{Float64,1}) at array.jl:241
└ @ CategoricalArrays array.jl:241
┌ Warning: `method_exists(f, t)` is deprecated, use `hasmethod(f, t)` instead.
│   caller = convert(::Type{CategoricalArrays.CategoricalArray{Union{Missing, Float64},1,UInt8,V,C,U} where U where C where V}, ::Array{Float64,1}) at array.jl:245
└ @ CategoricalArrays array.jl:245
┌ Warning: `copy!(dst::AbstractArray, src::AbstractArray)` is deprecated. You can either use `copyto!(dst, src)` or `Future.copy!(dst, src)` instead.
│   caller = convert(::Type{CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt64,C,U,U1} where U1 where U where C}, ::Array{String,1}) at array.jl:241
└ @ CategoricalArrays array.jl:241
┌ Warning: `method_exists(f, t)` is deprecated, use `hasmethod(f, t)` instead.
│   caller = convert(::Type{CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt64,C,U,U1} where U1 where U where C}, ::Array{String,1}) at array.jl:245
└ @ CategoricalArrays array.jl:245
┌ Warning: `shift!` is deprecated, use `popfirst!` instead.
│   caller = _unique(::Type{Union{Missing, String}}, ::Array{UInt64,1}, ::CategoricalArrays.CategoricalPool{String,UInt64,CategoricalArrays.CategoricalString{UInt64}}) at array.jl:607
└ @ CategoricalArrays array.jl:607
Vector with no missing values: Error During Test at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:199
  Test threw an exception of type MethodError
  Expression: levels!(x, ["e", "c"], allow_missing=true) === x
  MethodError: Cannot `convert` an object of type Nothing to an object of type UInt64
  Closest candidates are:
    convert(::Type{T<:Number}, !Matched::T<:Number) where T<:Number at number.jl:6
    convert(::Type{T<:Number}, !Matched::Number) where T<:Number at number.jl:7
    convert(::Type{T<:Integer}, !Matched::Ptr) where T<:Integer at pointer.jl:23
    ...
  Stacktrace:
   [1] setindex!(::Array{UInt64,1}, ::Nothing, ::Int64) at ./array.jl:688
   [2] #levels!#55(::Bool, ::Function, ::CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt64,String,CategoricalArrays.CategoricalString{UInt64},Missing}, ::Array{String,1}) at /home/vagrant/.julia/v0.7/CategoricalArrays/src/array.jl:583
   [3] (::getfield(CategoricalArrays, Symbol("#kw##levels!")))(::NamedTuple{(:allow_missing,),Tuple{Bool}}, ::typeof(CategoricalArrays.levels!), ::CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt64,String,CategoricalArrays.CategoricalString{UInt64},Missing}, ::Array{String,1}) at ./<missing>:0
   [4] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:199 [inlined]
   [5] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1012 [inlined]
   [6] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:13 [inlined]
   [7] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:11 [inlined]
   [9] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:10 [inlined]
   [11] top-level scope at ./<missing>:1085
Vector with no missing values: Test Failed at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:202
  Expression: x[2] === missing
   Evaluated: CategoricalArrays.CategoricalString{UInt64} "c" === missing
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:202 [inlined]
 [2] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1012 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:13 [inlined]
 [4] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [5] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:11 [inlined]
 [6] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [7] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:10 [inlined]
 [8] top-level scope at ./<missing>:1085
Vector with no missing values: Test Failed at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:203
  Expression: x[3] === missing
   Evaluated: CategoricalArrays.CategoricalString{UInt64} "c" === missing
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:203 [inlined]
 [2] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1012 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:13 [inlined]
 [4] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [5] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:11 [inlined]
 [6] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [7] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:10 [inlined]
 [8] top-level scope at ./<missing>:1085
Vector with no missing values: Test Failed at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:208
  Expression: x ≅ ["c", missing, missing, "e"]
   Evaluated: Union{Missing, CategoricalArrays.CategoricalString{UInt64}}["c", "c", "c", "e"] ≅ Union{Missing, String}["c", missing, missing, "e"]
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:208 [inlined]
 [2] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1012 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:13 [inlined]
 [4] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [5] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:11 [inlined]
 [6] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [7] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:10 [inlined]
 [8] top-level scope at ./<missing>:1085
Vector with no missing values: Test Failed at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:213
  Expression: x ≅ ["c", missing, missing, "e", "zz"]
   Evaluated: Union{Missing, CategoricalArrays.CategoricalString{UInt64}}["c", "c", "c", "e", "zz"] ≅ Union{Missing, String}["c", missing, missing, "e", "zz"]
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:213 [inlined]
 [2] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1012 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:13 [inlined]
 [4] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [5] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:11 [inlined]
 [6] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [7] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:10 [inlined]
 [8] top-level scope at ./<missing>:1085
Vector with no missing values: Test Failed at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:218
  Expression: x ≅ ["c", missing, missing, "e", "zz", "c"]
   Evaluated: Union{Missing, CategoricalArrays.CategoricalString{UInt64}}["c", "c", "c", "e", "zz", "c"] ≅ Union{Missing, String}["c", missing, missing, "e", "zz", "c"]
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:218 [inlined]
 [2] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1012 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:13 [inlined]
 [4] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [5] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:11 [inlined]
 [6] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [7] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:10 [inlined]
 [8] top-level scope at ./<missing>:1085
Vector with no missing values: Test Failed at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:223
  Expression: x ≅ ["c", missing, missing, "e", "zz", "c", missing]
   Evaluated: Union{Missing, CategoricalArrays.CategoricalString{UInt64}}["c", "c", "c", "e", "zz", "c", missing] ≅ Union{Missing, String}["c", missing, missing, "e", "zz", "c", missing]
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:223 [inlined]
 [2] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1012 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:13 [inlined]
 [4] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [5] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:11 [inlined]
 [6] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [7] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:10 [inlined]
 [8] top-level scope at ./<missing>:1085
Vector with no missing values: Test Failed at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:227
  Expression: x ≅ ["c", missing, missing, "e", "zz", "c", missing, "c", missing, missing, "e", "zz", "c", missing]
   Evaluated: Union{Missing, CategoricalArrays.CategoricalString{UInt64}}["c", "c", "c", "e", "zz", "c", missing, "c", "c", "c", "e", "zz", "c", missing] ≅ Union{Missing, String}["c", missing, missing, "e", "zz", "c", missing, "c", missing, missing, "e", "zz", "c", missing]
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:227 [inlined]
 [2] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1012 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:13 [inlined]
 [4] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [5] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:11 [inlined]
 [6] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [7] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:10 [inlined]
 [8] top-level scope at ./<missing>:1085
Vector with no missing values: Test Failed at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:238
  Expression: x ≅ ["c", missing, missing, "e", "zz", "c", missing, "c", missing, missing, "e", "zz", "c", missing, "z", "y", "x"]
   Evaluated: Union{Missing, CategoricalArrays.CategoricalString{UInt64}}["c", "c", "c", "e", "zz", "c", missing, "c", "c", "c", "e", "zz", "c", missing, "z", "y", "x"] ≅ Union{Missing, String}["c", missing, missing, "e", "zz", "c", missing, "c", missing, missing, "e", "zz", "c", missing, "z", "y", "x"]
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:238 [inlined]
 [2] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1012 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:13 [inlined]
 [4] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [5] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:11 [inlined]
 [6] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [7] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:10 [inlined]
 [8] top-level scope at ./<missing>:1085
┌ Warning: `copy!(dst::AbstractArray, src::AbstractArray)` is deprecated. You can either use `copyto!(dst, src)` or `Future.copy!(dst, src)` instead.
│   caller = convert(::Type{CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt64,C,U,U1} where U1 where U where C}, ::Array{Union{Missing, String},1}) at array.jl:241
└ @ CategoricalArrays array.jl:241
┌ Warning: `method_exists(f, t)` is deprecated, use `hasmethod(f, t)` instead.
│   caller = convert(::Type{CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt64,C,U,U1} where U1 where U where C}, ::Array{Union{Missing, String},1}) at array.jl:245
└ @ CategoricalArrays array.jl:245
Vector with no missing values: Error During Test at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:199
  Test threw an exception of type MethodError
  Expression: levels!(x, ["e", "c"], allow_missing=true) === x
  MethodError: Cannot `convert` an object of type Nothing to an object of type UInt64
  Closest candidates are:
    convert(::Type{T<:Number}, !Matched::T<:Number) where T<:Number at number.jl:6
    convert(::Type{T<:Number}, !Matched::Number) where T<:Number at number.jl:7
    convert(::Type{T<:Integer}, !Matched::Ptr) where T<:Integer at pointer.jl:23
    ...
  Stacktrace:
   [1] setindex!(::Array{UInt64,1}, ::Nothing, ::Int64) at ./array.jl:688
   [2] #levels!#55(::Bool, ::Function, ::CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt64,String,CategoricalArrays.CategoricalString{UInt64},Missing}, ::Array{String,1}) at /home/vagrant/.julia/v0.7/CategoricalArrays/src/array.jl:583
   [3] (::getfield(CategoricalArrays, Symbol("#kw##levels!")))(::NamedTuple{(:allow_missing,),Tuple{Bool}}, ::typeof(CategoricalArrays.levels!), ::CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt64,String,CategoricalArrays.CategoricalString{UInt64},Missing}, ::Array{String,1}) at ./<missing>:0
   [4] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:199 [inlined]
   [5] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1012 [inlined]
   [6] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:13 [inlined]
   [7] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:11 [inlined]
   [9] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:10 [inlined]
   [11] top-level scope at ./<missing>:1085
Vector with no missing values: Test Failed at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:202
  Expression: x[2] === missing
   Evaluated: CategoricalArrays.CategoricalString{UInt64} "c" === missing
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:202 [inlined]
 [2] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1012 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:13 [inlined]
 [4] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [5] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:11 [inlined]
 [6] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [7] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:10 [inlined]
 [8] top-level scope at ./<missing>:1085
Vector with no missing values: Test Failed at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:203
  Expression: x[3] === missing
   Evaluated: CategoricalArrays.CategoricalString{UInt64} "c" === missing
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:203 [inlined]
 [2] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1012 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:13 [inlined]
 [4] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [5] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:11 [inlined]
 [6] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [7] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:10 [inlined]
 [8] top-level scope at ./<missing>:1085
Vector with no missing values: Test Failed at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:208
  Expression: x ≅ ["c", missing, missing, "e"]
   Evaluated: Union{Missing, CategoricalArrays.CategoricalString{UInt64}}["c", "c", "c", "e"] ≅ Union{Missing, String}["c", missing, missing, "e"]
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:208 [inlined]
 [2] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1012 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:13 [inlined]
 [4] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [5] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:11 [inlined]
 [6] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [7] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:10 [inlined]
 [8] top-level scope at ./<missing>:1085
Vector with no missing values: Test Failed at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:213
  Expression: x ≅ ["c", missing, missing, "e", "zz"]
   Evaluated: Union{Missing, CategoricalArrays.CategoricalString{UInt64}}["c", "c", "c", "e", "zz"] ≅ Union{Missing, String}["c", missing, missing, "e", "zz"]
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:213 [inlined]
 [2] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1012 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:13 [inlined]
 [4] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [5] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:11 [inlined]
 [6] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [7] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:10 [inlined]
 [8] top-level scope at ./<missing>:1085
Vector with no missing values: Test Failed at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:218
  Expression: x ≅ ["c", missing, missing, "e", "zz", "c"]
   Evaluated: Union{Missing, CategoricalArrays.CategoricalString{UInt64}}["c", "c", "c", "e", "zz", "c"] ≅ Union{Missing, String}["c", missing, missing, "e", "zz", "c"]
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:218 [inlined]
 [2] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1012 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:13 [inlined]
 [4] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [5] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:11 [inlined]
 [6] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [7] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:10 [inlined]
 [8] top-level scope at ./<missing>:1085
Vector with no missing values: Test Failed at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:223
  Expression: x ≅ ["c", missing, missing, "e", "zz", "c", missing]
   Evaluated: Union{Missing, CategoricalArrays.CategoricalString{UInt64}}["c", "c", "c", "e", "zz", "c", missing] ≅ Union{Missing, String}["c", missing, missing, "e", "zz", "c", missing]
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:223 [inlined]
 [2] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1012 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:13 [inlined]
 [4] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [5] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:11 [inlined]
 [6] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [7] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:10 [inlined]
 [8] top-level scope at ./<missing>:1085
Vector with no missing values: Test Failed at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:227
  Expression: x ≅ ["c", missing, missing, "e", "zz", "c", missing, "c", missing, missing, "e", "zz", "c", missing]
   Evaluated: Union{Missing, CategoricalArrays.CategoricalString{UInt64}}["c", "c", "c", "e", "zz", "c", missing, "c", "c", "c", "e", "zz", "c", missing] ≅ Union{Missing, String}["c", missing, missing, "e", "zz", "c", missing, "c", missing, missing, "e", "zz", "c", missing]
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:227 [inlined]
 [2] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1012 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:13 [inlined]
 [4] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [5] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:11 [inlined]
 [6] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [7] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:10 [inlined]
 [8] top-level scope at ./<missing>:1085
Vector with no missing values: Test Failed at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:238
  Expression: x ≅ ["c", missing, missing, "e", "zz", "c", missing, "c", missing, missing, "e", "zz", "c", missing, "z", "y", "x"]
   Evaluated: Union{Missing, CategoricalArrays.CategoricalString{UInt64}}["c", "c", "c", "e", "zz", "c", missing, "c", "c", "c", "e", "zz", "c", missing, "z", "y", "x"] ≅ Union{Missing, String}["c", missing, missing, "e", "zz", "c", missing, "c", missing, missing, "e", "zz", "c", missing, "z", "y", "x"]
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:238 [inlined]
 [2] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1012 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:13 [inlined]
 [4] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [5] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:11 [inlined]
 [6] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [7] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:10 [inlined]
 [8] top-level scope at ./<missing>:1085
┌ Warning: `copy!(dst::AbstractArray, src::AbstractArray)` is deprecated. You can either use `copyto!(dst, src)` or `Future.copy!(dst, src)` instead.
│   caller = convert(::Type{CategoricalArrays.CategoricalArray{Union{Missing, Float64},1,UInt64,C,U,U1} where U1 where U where C}, ::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}) at array.jl:241
└ @ CategoricalArrays array.jl:241
┌ Warning: `method_exists(f, t)` is deprecated, use `hasmethod(f, t)` instead.
│   caller = convert(::Type{CategoricalArrays.CategoricalArray{Union{Missing, Float64},1,UInt64,C,U,U1} where U1 where U where C}, ::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}) at array.jl:245
└ @ CategoricalArrays array.jl:245
┌ Warning: `copy!(dst::AbstractArray, src::AbstractArray)` is deprecated. You can either use `copyto!(dst, src)` or `Future.copy!(dst, src)` instead.
│   caller = convert(::Type{CategoricalArrays.CategoricalArray{Union{Missing, Float32},1,UInt64,V,C,U} where U where C where V}, ::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}) at array.jl:241
└ @ CategoricalArrays array.jl:241
┌ Warning: `method_exists(f, t)` is deprecated, use `hasmethod(f, t)` instead.
│   caller = convert(::Type{CategoricalArrays.CategoricalArray{Union{Missing, Float32},1,UInt64,V,C,U} where U where C where V}, ::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}) at array.jl:245
└ @ CategoricalArrays array.jl:245
┌ Warning: `copy!(dst::AbstractArray, src::AbstractArray)` is deprecated. You can either use `copyto!(dst, src)` or `Future.copy!(dst, src)` instead.
│   caller = convert(::Type{CategoricalArrays.CategoricalArray{Union{Missing, Float64},1,UInt64,C,U,U1} where U1 where U where C}, ::Array{Float64,1}) at array.jl:241
└ @ CategoricalArrays array.jl:241
┌ Warning: `method_exists(f, t)` is deprecated, use `hasmethod(f, t)` instead.
│   caller = convert(::Type{CategoricalArrays.CategoricalArray{Union{Missing, Float64},1,UInt64,C,U,U1} where U1 where U where C}, ::Array{Float64,1}) at array.jl:245
└ @ CategoricalArrays array.jl:245
┌ Warning: `copy!(dst::AbstractArray, src::AbstractArray)` is deprecated. You can either use `copyto!(dst, src)` or `Future.copy!(dst, src)` instead.
│   caller = convert(::Type{CategoricalArrays.CategoricalArray{Union{Missing, String},2,UInt64,C,U,U1} where U1 where U where C}, ::Array{String,2}) at array.jl:241
└ @ CategoricalArrays array.jl:241
┌ Warning: `method_exists(f, t)` is deprecated, use `hasmethod(f, t)` instead.
│   caller = convert(::Type{CategoricalArrays.CategoricalArray{Union{Missing, String},2,UInt64,C,U,U1} where U1 where U where C}, ::Array{String,2}) at array.jl:245
└ @ CategoricalArrays array.jl:245
┌ Warning: `copy!(dst::AbstractArray, src::AbstractArray)` is deprecated. You can either use `copyto!(dst, src)` or `Future.copy!(dst, src)` instead.
│   caller = convert(::Type{CategoricalArrays.CategoricalArray{Union{Missing, String},2,UInt64,C,U,U1} where U1 where U where C}, ::Array{Union{Missing, String},2}) at array.jl:241
└ @ CategoricalArrays array.jl:241
┌ Warning: `method_exists(f, t)` is deprecated, use `hasmethod(f, t)` instead.
│   caller = convert(::Type{CategoricalArrays.CategoricalArray{Union{Missing, String},2,UInt64,C,U,U1} where U1 where U where C}, ::Array{Union{Missing, String},2}) at array.jl:245
└ @ CategoricalArrays array.jl:245
┌ Warning: `copy!(dst::AbstractArray, src::AbstractArray)` is deprecated. You can either use `copyto!(dst, src)` or `Future.copy!(dst, src)` instead.
│   caller = convert(::Type{CategoricalArrays.CategoricalArray{Union{Missing, String},1,Int8,C,U,U1} where U1 where U where C}, ::Array{String,1}) at array.jl:241
└ @ CategoricalArrays array.jl:241
┌ Warning: `method_exists(f, t)` is deprecated, use `hasmethod(f, t)` instead.
│   caller = convert(::Type{CategoricalArrays.CategoricalArray{Union{Missing, String},1,Int8,C,U,U1} where U1 where U where C}, ::Array{String,1}) at array.jl:245
└ @ CategoricalArrays array.jl:245
┌ Warning: `shift!` is deprecated, use `popfirst!` instead.
│   caller = _unique(::Type{Union{Missing, String}}, ::Array{Int8,1}, ::CategoricalArrays.CategoricalPool{String,Int8,CategoricalArrays.CategoricalString{Int8}}) at array.jl:607
└ @ CategoricalArrays array.jl:607
Vector with no missing values: Error During Test at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:199
  Test threw an exception of type MethodError
  Expression: levels!(x, ["e", "c"], allow_missing=true) === x
  MethodError: Cannot `convert` an object of type Nothing to an object of type Int8
  Closest candidates are:
    convert(::Type{T<:Number}, !Matched::T<:Number) where T<:Number at number.jl:6
    convert(::Type{T<:Number}, !Matched::Number) where T<:Number at number.jl:7
    convert(::Type{T<:Integer}, !Matched::Ptr) where T<:Integer at pointer.jl:23
    ...
  Stacktrace:
   [1] setindex!(::Array{Int8,1}, ::Nothing, ::Int64) at ./array.jl:688
   [2] #levels!#55(::Bool, ::Function, ::CategoricalArrays.CategoricalArray{Union{Missing, String},1,Int8,String,CategoricalArrays.CategoricalString{Int8},Missing}, ::Array{String,1}) at /home/vagrant/.julia/v0.7/CategoricalArrays/src/array.jl:583
   [3] (::getfield(CategoricalArrays, Symbol("#kw##levels!")))(::NamedTuple{(:allow_missing,),Tuple{Bool}}, ::typeof(CategoricalArrays.levels!), ::CategoricalArrays.CategoricalArray{Union{Missing, String},1,Int8,String,CategoricalArrays.CategoricalString{Int8},Missing}, ::Array{String,1}) at ./<missing>:0
   [4] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:199 [inlined]
   [5] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1012 [inlined]
   [6] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:13 [inlined]
   [7] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:11 [inlined]
   [9] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:10 [inlined]
   [11] top-level scope at ./<missing>:1085
Vector with no missing values: Test Failed at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:202
  Expression: x[2] === missing
   Evaluated: CategoricalArrays.CategoricalString{Int8} "c" === missing
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:202 [inlined]
 [2] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1012 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:13 [inlined]
 [4] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [5] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:11 [inlined]
 [6] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [7] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:10 [inlined]
 [8] top-level scope at ./<missing>:1085
Vector with no missing values: Test Failed at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:203
  Expression: x[3] === missing
   Evaluated: CategoricalArrays.CategoricalString{Int8} "c" === missing
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:203 [inlined]
 [2] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1012 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:13 [inlined]
 [4] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [5] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:11 [inlined]
 [6] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [7] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:10 [inlined]
 [8] top-level scope at ./<missing>:1085
Vector with no missing values: Test Failed at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:208
  Expression: x ≅ ["c", missing, missing, "e"]
   Evaluated: Union{Missing, CategoricalArrays.CategoricalString{Int8}}["c", "c", "c", "e"] ≅ Union{Missing, String}["c", missing, missing, "e"]
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:208 [inlined]
 [2] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1012 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:13 [inlined]
 [4] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [5] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:11 [inlined]
 [6] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [7] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:10 [inlined]
 [8] top-level scope at ./<missing>:1085
Vector with no missing values: Test Failed at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:213
  Expression: x ≅ ["c", missing, missing, "e", "zz"]
   Evaluated: Union{Missing, CategoricalArrays.CategoricalString{Int8}}["c", "c", "c", "e", "zz"] ≅ Union{Missing, String}["c", missing, missing, "e", "zz"]
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:213 [inlined]
 [2] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1012 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:13 [inlined]
 [4] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [5] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:11 [inlined]
 [6] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [7] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:10 [inlined]
 [8] top-level scope at ./<missing>:1085
Vector with no missing values: Test Failed at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:218
  Expression: x ≅ ["c", missing, missing, "e", "zz", "c"]
   Evaluated: Union{Missing, CategoricalArrays.CategoricalString{Int8}}["c", "c", "c", "e", "zz", "c"] ≅ Union{Missing, String}["c", missing, missing, "e", "zz", "c"]
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:218 [inlined]
 [2] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1012 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:13 [inlined]
 [4] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [5] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:11 [inlined]
 [6] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [7] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:10 [inlined]
 [8] top-level scope at ./<missing>:1085
Vector with no missing values: Test Failed at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:223
  Expression: x ≅ ["c", missing, missing, "e", "zz", "c", missing]
   Evaluated: Union{Missing, CategoricalArrays.CategoricalString{Int8}}["c", "c", "c", "e", "zz", "c", missing] ≅ Union{Missing, String}["c", missing, missing, "e", "zz", "c", missing]
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:223 [inlined]
 [2] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1012 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:13 [inlined]
 [4] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [5] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:11 [inlined]
 [6] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [7] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:10 [inlined]
 [8] top-level scope at ./<missing>:1085
Vector with no missing values: Test Failed at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:227
  Expression: x ≅ ["c", missing, missing, "e", "zz", "c", missing, "c", missing, missing, "e", "zz", "c", missing]
   Evaluated: Union{Missing, CategoricalArrays.CategoricalString{Int8}}["c", "c", "c", "e", "zz", "c", missing, "c", "c", "c", "e", "zz", "c", missing] ≅ Union{Missing, String}["c", missing, missing, "e", "zz", "c", missing, "c", missing, missing, "e", "zz", "c", missing]
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:227 [inlined]
 [2] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1012 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:13 [inlined]
 [4] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [5] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:11 [inlined]
 [6] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [7] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:10 [inlined]
 [8] top-level scope at ./<missing>:1085
Vector with no missing values: Test Failed at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:238
  Expression: x ≅ ["c", missing, missing, "e", "zz", "c", missing, "c", missing, missing, "e", "zz", "c", missing, "z", "y", "x"]
   Evaluated: Union{Missing, CategoricalArrays.CategoricalString{Int8}}["c", "c", "c", "e", "zz", "c", missing, "c", "c", "c", "e", "zz", "c", missing, "z", "y", "x"] ≅ Union{Missing, String}["c", missing, missing, "e", "zz", "c", missing, "c", missing, missing, "e", "zz", "c", missing, "z", "y", "x"]
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:238 [inlined]
 [2] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1012 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:13 [inlined]
 [4] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [5] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:11 [inlined]
 [6] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [7] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:10 [inlined]
 [8] top-level scope at ./<missing>:1085
┌ Warning: `copy!(dst::AbstractArray, src::AbstractArray)` is deprecated. You can either use `copyto!(dst, src)` or `Future.copy!(dst, src)` instead.
│   caller = convert(::Type{CategoricalArrays.CategoricalArray{Union{Missing, String},1,Int8,C,U,U1} where U1 where U where C}, ::Array{Union{Missing, String},1}) at array.jl:241
└ @ CategoricalArrays array.jl:241
┌ Warning: `method_exists(f, t)` is deprecated, use `hasmethod(f, t)` instead.
│   caller = convert(::Type{CategoricalArrays.CategoricalArray{Union{Missing, String},1,Int8,C,U,U1} where U1 where U where C}, ::Array{Union{Missing, String},1}) at array.jl:245
└ @ CategoricalArrays array.jl:245
Vector with no missing values: Error During Test at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:199
  Test threw an exception of type MethodError
  Expression: levels!(x, ["e", "c"], allow_missing=true) === x
  MethodError: Cannot `convert` an object of type Nothing to an object of type Int8
  Closest candidates are:
    convert(::Type{T<:Number}, !Matched::T<:Number) where T<:Number at number.jl:6
    convert(::Type{T<:Number}, !Matched::Number) where T<:Number at number.jl:7
    convert(::Type{T<:Integer}, !Matched::Ptr) where T<:Integer at pointer.jl:23
    ...
  Stacktrace:
   [1] setindex!(::Array{Int8,1}, ::Nothing, ::Int64) at ./array.jl:688
   [2] #levels!#55(::Bool, ::Function, ::CategoricalArrays.CategoricalArray{Union{Missing, String},1,Int8,String,CategoricalArrays.CategoricalString{Int8},Missing}, ::Array{String,1}) at /home/vagrant/.julia/v0.7/CategoricalArrays/src/array.jl:583
   [3] (::getfield(CategoricalArrays, Symbol("#kw##levels!")))(::NamedTuple{(:allow_missing,),Tuple{Bool}}, ::typeof(CategoricalArrays.levels!), ::CategoricalArrays.CategoricalArray{Union{Missing, String},1,Int8,String,CategoricalArrays.CategoricalString{Int8},Missing}, ::Array{String,1}) at ./<missing>:0
   [4] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:199 [inlined]
   [5] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1012 [inlined]
   [6] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:13 [inlined]
   [7] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:11 [inlined]
   [9] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:10 [inlined]
   [11] top-level scope at ./<missing>:1085
Vector with no missing values: Test Failed at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:202
  Expression: x[2] === missing
   Evaluated: CategoricalArrays.CategoricalString{Int8} "c" === missing
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:202 [inlined]
 [2] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1012 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:13 [inlined]
 [4] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [5] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:11 [inlined]
 [6] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [7] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:10 [inlined]
 [8] top-level scope at ./<missing>:1085
Vector with no missing values: Test Failed at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:203
  Expression: x[3] === missing
   Evaluated: CategoricalArrays.CategoricalString{Int8} "c" === missing
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:203 [inlined]
 [2] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1012 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:13 [inlined]
 [4] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [5] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:11 [inlined]
 [6] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [7] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:10 [inlined]
 [8] top-level scope at ./<missing>:1085
Vector with no missing values: Test Failed at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:208
  Expression: x ≅ ["c", missing, missing, "e"]
   Evaluated: Union{Missing, CategoricalArrays.CategoricalString{Int8}}["c", "c", "c", "e"] ≅ Union{Missing, String}["c", missing, missing, "e"]
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:208 [inlined]
 [2] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1012 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:13 [inlined]
 [4] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [5] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:11 [inlined]
 [6] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [7] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:10 [inlined]
 [8] top-level scope at ./<missing>:1085
Vector with no missing values: Test Failed at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:213
  Expression: x ≅ ["c", missing, missing, "e", "zz"]
   Evaluated: Union{Missing, CategoricalArrays.CategoricalString{Int8}}["c", "c", "c", "e", "zz"] ≅ Union{Missing, String}["c", missing, missing, "e", "zz"]
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:213 [inlined]
 [2] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1012 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:13 [inlined]
 [4] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [5] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:11 [inlined]
 [6] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [7] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:10 [inlined]
 [8] top-level scope at ./<missing>:1085
Vector with no missing values: Test Failed at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:218
  Expression: x ≅ ["c", missing, missing, "e", "zz", "c"]
   Evaluated: Union{Missing, CategoricalArrays.CategoricalString{Int8}}["c", "c", "c", "e", "zz", "c"] ≅ Union{Missing, String}["c", missing, missing, "e", "zz", "c"]
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:218 [inlined]
 [2] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1012 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:13 [inlined]
 [4] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [5] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:11 [inlined]
 [6] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [7] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:10 [inlined]
 [8] top-level scope at ./<missing>:1085
Vector with no missing values: Test Failed at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:223
  Expression: x ≅ ["c", missing, missing, "e", "zz", "c", missing]
   Evaluated: Union{Missing, CategoricalArrays.CategoricalString{Int8}}["c", "c", "c", "e", "zz", "c", missing] ≅ Union{Missing, String}["c", missing, missing, "e", "zz", "c", missing]
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:223 [inlined]
 [2] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1012 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:13 [inlined]
 [4] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [5] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:11 [inlined]
 [6] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [7] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:10 [inlined]
 [8] top-level scope at ./<missing>:1085
Vector with no missing values: Test Failed at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:227
  Expression: x ≅ ["c", missing, missing, "e", "zz", "c", missing, "c", missing, missing, "e", "zz", "c", missing]
   Evaluated: Union{Missing, CategoricalArrays.CategoricalString{Int8}}["c", "c", "c", "e", "zz", "c", missing, "c", "c", "c", "e", "zz", "c", missing] ≅ Union{Missing, String}["c", missing, missing, "e", "zz", "c", missing, "c", missing, missing, "e", "zz", "c", missing]
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:227 [inlined]
 [2] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1012 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:13 [inlined]
 [4] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [5] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:11 [inlined]
 [6] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [7] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:10 [inlined]
 [8] top-level scope at ./<missing>:1085
Vector with no missing values: Test Failed at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:238
  Expression: x ≅ ["c", missing, missing, "e", "zz", "c", missing, "c", missing, missing, "e", "zz", "c", missing, "z", "y", "x"]
   Evaluated: Union{Missing, CategoricalArrays.CategoricalString{Int8}}["c", "c", "c", "e", "zz", "c", missing, "c", "c", "c", "e", "zz", "c", missing, "z", "y", "x"] ≅ Union{Missing, String}["c", missing, missing, "e", "zz", "c", missing, "c", missing, missing, "e", "zz", "c", missing, "z", "y", "x"]
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:238 [inlined]
 [2] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1012 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:13 [inlined]
 [4] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [5] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:11 [inlined]
 [6] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [7] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:10 [inlined]
 [8] top-level scope at ./<missing>:1085
┌ Warning: `copy!(dst::AbstractArray, src::AbstractArray)` is deprecated. You can either use `copyto!(dst, src)` or `Future.copy!(dst, src)` instead.
│   caller = convert(::Type{CategoricalArrays.CategoricalArray{Union{Missing, Float64},1,Int8,C,U,U1} where U1 where U where C}, ::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}) at array.jl:241
└ @ CategoricalArrays array.jl:241
┌ Warning: `method_exists(f, t)` is deprecated, use `hasmethod(f, t)` instead.
│   caller = convert(::Type{CategoricalArrays.CategoricalArray{Union{Missing, Float64},1,Int8,C,U,U1} where U1 where U where C}, ::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}) at array.jl:245
└ @ CategoricalArrays array.jl:245
┌ Warning: `copy!(dst::AbstractArray, src::AbstractArray)` is deprecated. You can either use `copyto!(dst, src)` or `Future.copy!(dst, src)` instead.
│   caller = convert(::Type{CategoricalArrays.CategoricalArray{Union{Missing, Float32},1,Int8,V,C,U} where U where C where V}, ::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}) at array.jl:241
└ @ CategoricalArrays array.jl:241
┌ Warning: `method_exists(f, t)` is deprecated, use `hasmethod(f, t)` instead.
│   caller = convert(::Type{CategoricalArrays.CategoricalArray{Union{Missing, Float32},1,Int8,V,C,U} where U where C where V}, ::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}) at array.jl:245
└ @ CategoricalArrays array.jl:245
┌ Warning: `copy!(dst::AbstractArray, src::AbstractArray)` is deprecated. You can either use `copyto!(dst, src)` or `Future.copy!(dst, src)` instead.
│   caller = convert(::Type{CategoricalArrays.CategoricalArray{Union{Missing, Float64},1,Int8,C,U,U1} where U1 where U where C}, ::Array{Float64,1}) at array.jl:241
└ @ CategoricalArrays array.jl:241
┌ Warning: `method_exists(f, t)` is deprecated, use `hasmethod(f, t)` instead.
│   caller = convert(::Type{CategoricalArrays.CategoricalArray{Union{Missing, Float64},1,Int8,C,U,U1} where U1 where U where C}, ::Array{Float64,1}) at array.jl:245
└ @ CategoricalArrays array.jl:245
┌ Warning: `copy!(dst::AbstractArray, src::AbstractArray)` is deprecated. You can either use `copyto!(dst, src)` or `Future.copy!(dst, src)` instead.
│   caller = convert(::Type{CategoricalArrays.CategoricalArray{Union{Missing, String},2,Int8,C,U,U1} where U1 where U where C}, ::Array{String,2}) at array.jl:241
└ @ CategoricalArrays array.jl:241
┌ Warning: `method_exists(f, t)` is deprecated, use `hasmethod(f, t)` instead.
│   caller = convert(::Type{CategoricalArrays.CategoricalArray{Union{Missing, String},2,Int8,C,U,U1} where U1 where U where C}, ::Array{String,2}) at array.jl:245
└ @ CategoricalArrays array.jl:245
┌ Warning: `copy!(dst::AbstractArray, src::AbstractArray)` is deprecated. You can either use `copyto!(dst, src)` or `Future.copy!(dst, src)` instead.
│   caller = convert(::Type{CategoricalArrays.CategoricalArray{Union{Missing, String},2,Int8,C,U,U1} where U1 where U where C}, ::Array{Union{Missing, String},2}) at array.jl:241
└ @ CategoricalArrays array.jl:241
┌ Warning: `method_exists(f, t)` is deprecated, use `hasmethod(f, t)` instead.
│   caller = convert(::Type{CategoricalArrays.CategoricalArray{Union{Missing, String},2,Int8,C,U,U1} where U1 where U where C}, ::Array{Union{Missing, String},2}) at array.jl:245
└ @ CategoricalArrays array.jl:245
┌ Warning: `copy!(dst::AbstractArray, src::AbstractArray)` is deprecated. You can either use `copyto!(dst, src)` or `Future.copy!(dst, src)` instead.
│   caller = convert(::Type{CategoricalArrays.CategoricalArray{Union{Missing, String},1,Int64,C,U,U1} where U1 where U where C}, ::Array{String,1}) at array.jl:241
└ @ CategoricalArrays array.jl:241
┌ Warning: `method_exists(f, t)` is deprecated, use `hasmethod(f, t)` instead.
│   caller = convert(::Type{CategoricalArrays.CategoricalArray{Union{Missing, String},1,Int64,C,U,U1} where U1 where U where C}, ::Array{String,1}) at array.jl:245
└ @ CategoricalArrays array.jl:245
┌ Warning: `shift!` is deprecated, use `popfirst!` instead.
│   caller = _unique(::Type{Union{Missing, String}}, ::Array{Int64,1}, ::CategoricalArrays.CategoricalPool{String,Int64,CategoricalArrays.CategoricalString{Int64}}) at array.jl:607
└ @ CategoricalArrays array.jl:607
Vector with no missing values: Error During Test at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:199
  Test threw an exception of type MethodError
  Expression: levels!(x, ["e", "c"], allow_missing=true) === x
  MethodError: Cannot `convert` an object of type Nothing to an object of type Int64
  Closest candidates are:
    convert(::Type{T<:Number}, !Matched::T<:Number) where T<:Number at number.jl:6
    convert(::Type{T<:Number}, !Matched::Number) where T<:Number at number.jl:7
    convert(::Type{T<:Integer}, !Matched::Ptr) where T<:Integer at pointer.jl:23
    ...
  Stacktrace:
   [1] setindex!(::Array{Int64,1}, ::Nothing, ::Int64) at ./array.jl:688
   [2] #levels!#55(::Bool, ::Function, ::CategoricalArrays.CategoricalArray{Union{Missing, String},1,Int64,String,CategoricalArrays.CategoricalString{Int64},Missing}, ::Array{String,1}) at /home/vagrant/.julia/v0.7/CategoricalArrays/src/array.jl:583
   [3] (::getfield(CategoricalArrays, Symbol("#kw##levels!")))(::NamedTuple{(:allow_missing,),Tuple{Bool}}, ::typeof(CategoricalArrays.levels!), ::CategoricalArrays.CategoricalArray{Union{Missing, String},1,Int64,String,CategoricalArrays.CategoricalString{Int64},Missing}, ::Array{String,1}) at ./<missing>:0
   [4] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:199 [inlined]
   [5] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1012 [inlined]
   [6] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:13 [inlined]
   [7] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:11 [inlined]
   [9] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:10 [inlined]
   [11] top-level scope at ./<missing>:1085
Vector with no missing values: Test Failed at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:202
  Expression: x[2] === missing
   Evaluated: CategoricalArrays.CategoricalString{Int64} "c" === missing
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:202 [inlined]
 [2] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1012 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:13 [inlined]
 [4] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [5] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:11 [inlined]
 [6] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [7] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:10 [inlined]
 [8] top-level scope at ./<missing>:1085
Vector with no missing values: Test Failed at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:203
  Expression: x[3] === missing
   Evaluated: CategoricalArrays.CategoricalString{Int64} "c" === missing
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:203 [inlined]
 [2] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1012 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:13 [inlined]
 [4] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [5] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:11 [inlined]
 [6] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [7] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:10 [inlined]
 [8] top-level scope at ./<missing>:1085
Vector with no missing values: Test Failed at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:208
  Expression: x ≅ ["c", missing, missing, "e"]
   Evaluated: Union{Missing, CategoricalArrays.CategoricalString{Int64}}["c", "c", "c", "e"] ≅ Union{Missing, String}["c", missing, missing, "e"]
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:208 [inlined]
 [2] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1012 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:13 [inlined]
 [4] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [5] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:11 [inlined]
 [6] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [7] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:10 [inlined]
 [8] top-level scope at ./<missing>:1085
Vector with no missing values: Test Failed at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:213
  Expression: x ≅ ["c", missing, missing, "e", "zz"]
   Evaluated: Union{Missing, CategoricalArrays.CategoricalString{Int64}}["c", "c", "c", "e", "zz"] ≅ Union{Missing, String}["c", missing, missing, "e", "zz"]
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:213 [inlined]
 [2] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1012 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:13 [inlined]
 [4] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [5] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:11 [inlined]
 [6] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [7] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:10 [inlined]
 [8] top-level scope at ./<missing>:1085
Vector with no missing values: Test Failed at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:218
  Expression: x ≅ ["c", missing, missing, "e", "zz", "c"]
   Evaluated: Union{Missing, CategoricalArrays.CategoricalString{Int64}}["c", "c", "c", "e", "zz", "c"] ≅ Union{Missing, String}["c", missing, missing, "e", "zz", "c"]
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:218 [inlined]
 [2] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1012 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:13 [inlined]
 [4] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [5] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:11 [inlined]
 [6] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [7] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:10 [inlined]
 [8] top-level scope at ./<missing>:1085
Vector with no missing values: Test Failed at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:223
  Expression: x ≅ ["c", missing, missing, "e", "zz", "c", missing]
   Evaluated: Union{Missing, CategoricalArrays.CategoricalString{Int64}}["c", "c", "c", "e", "zz", "c", missing] ≅ Union{Missing, String}["c", missing, missing, "e", "zz", "c", missing]
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:223 [inlined]
 [2] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1012 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:13 [inlined]
 [4] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [5] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:11 [inlined]
 [6] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [7] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:10 [inlined]
 [8] top-level scope at ./<missing>:1085
Vector with no missing values: Test Failed at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:227
  Expression: x ≅ ["c", missing, missing, "e", "zz", "c", missing, "c", missing, missing, "e", "zz", "c", missing]
   Evaluated: Union{Missing, CategoricalArrays.CategoricalString{Int64}}["c", "c", "c", "e", "zz", "c", missing, "c", "c", "c", "e", "zz", "c", missing] ≅ Union{Missing, String}["c", missing, missing, "e", "zz", "c", missing, "c", missing, missing, "e", "zz", "c", missing]
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:227 [inlined]
 [2] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1012 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:13 [inlined]
 [4] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [5] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:11 [inlined]
 [6] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [7] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:10 [inlined]
 [8] top-level scope at ./<missing>:1085
Vector with no missing values: Test Failed at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:238
  Expression: x ≅ ["c", missing, missing, "e", "zz", "c", missing, "c", missing, missing, "e", "zz", "c", missing, "z", "y", "x"]
   Evaluated: Union{Missing, CategoricalArrays.CategoricalString{Int64}}["c", "c", "c", "e", "zz", "c", missing, "c", "c", "c", "e", "zz", "c", missing, "z", "y", "x"] ≅ Union{Missing, String}["c", missing, missing, "e", "zz", "c", missing, "c", missing, missing, "e", "zz", "c", missing, "z", "y", "x"]
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:238 [inlined]
 [2] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1012 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:13 [inlined]
 [4] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [5] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:11 [inlined]
 [6] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [7] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:10 [inlined]
 [8] top-level scope at ./<missing>:1085
┌ Warning: `copy!(dst::AbstractArray, src::AbstractArray)` is deprecated. You can either use `copyto!(dst, src)` or `Future.copy!(dst, src)` instead.
│   caller = convert(::Type{CategoricalArrays.CategoricalArray{Union{Missing, String},1,Int64,C,U,U1} where U1 where U where C}, ::Array{Union{Missing, String},1}) at array.jl:241
└ @ CategoricalArrays array.jl:241
┌ Warning: `method_exists(f, t)` is deprecated, use `hasmethod(f, t)` instead.
│   caller = convert(::Type{CategoricalArrays.CategoricalArray{Union{Missing, String},1,Int64,C,U,U1} where U1 where U where C}, ::Array{Union{Missing, String},1}) at array.jl:245
└ @ CategoricalArrays array.jl:245
Vector with no missing values: Error During Test at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:199
  Test threw an exception of type MethodError
  Expression: levels!(x, ["e", "c"], allow_missing=true) === x
  MethodError: Cannot `convert` an object of type Nothing to an object of type Int64
  Closest candidates are:
    convert(::Type{T<:Number}, !Matched::T<:Number) where T<:Number at number.jl:6
    convert(::Type{T<:Number}, !Matched::Number) where T<:Number at number.jl:7
    convert(::Type{T<:Integer}, !Matched::Ptr) where T<:Integer at pointer.jl:23
    ...
  Stacktrace:
   [1] setindex!(::Array{Int64,1}, ::Nothing, ::Int64) at ./array.jl:688
   [2] #levels!#55(::Bool, ::Function, ::CategoricalArrays.CategoricalArray{Union{Missing, String},1,Int64,String,CategoricalArrays.CategoricalString{Int64},Missing}, ::Array{String,1}) at /home/vagrant/.julia/v0.7/CategoricalArrays/src/array.jl:583
   [3] (::getfield(CategoricalArrays, Symbol("#kw##levels!")))(::NamedTuple{(:allow_missing,),Tuple{Bool}}, ::typeof(CategoricalArrays.levels!), ::CategoricalArrays.CategoricalArray{Union{Missing, String},1,Int64,String,CategoricalArrays.CategoricalString{Int64},Missing}, ::Array{String,1}) at ./<missing>:0
   [4] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:199 [inlined]
   [5] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1012 [inlined]
   [6] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:13 [inlined]
   [7] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:11 [inlined]
   [9] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:10 [inlined]
   [11] top-level scope at ./<missing>:1085
Vector with no missing values: Test Failed at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:202
  Expression: x[2] === missing
   Evaluated: CategoricalArrays.CategoricalString{Int64} "c" === missing
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:202 [inlined]
 [2] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1012 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:13 [inlined]
 [4] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [5] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:11 [inlined]
 [6] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [7] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:10 [inlined]
 [8] top-level scope at ./<missing>:1085
Vector with no missing values: Test Failed at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:203
  Expression: x[3] === missing
   Evaluated: CategoricalArrays.CategoricalString{Int64} "c" === missing
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:203 [inlined]
 [2] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1012 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:13 [inlined]
 [4] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [5] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:11 [inlined]
 [6] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [7] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:10 [inlined]
 [8] top-level scope at ./<missing>:1085
Vector with no missing values: Test Failed at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:208
  Expression: x ≅ ["c", missing, missing, "e"]
   Evaluated: Union{Missing, CategoricalArrays.CategoricalString{Int64}}["c", "c", "c", "e"] ≅ Union{Missing, String}["c", missing, missing, "e"]
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:208 [inlined]
 [2] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1012 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:13 [inlined]
 [4] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [5] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:11 [inlined]
 [6] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [7] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:10 [inlined]
 [8] top-level scope at ./<missing>:1085
Vector with no missing values: Test Failed at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:213
  Expression: x ≅ ["c", missing, missing, "e", "zz"]
   Evaluated: Union{Missing, CategoricalArrays.CategoricalString{Int64}}["c", "c", "c", "e", "zz"] ≅ Union{Missing, String}["c", missing, missing, "e", "zz"]
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:213 [inlined]
 [2] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1012 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:13 [inlined]
 [4] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [5] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:11 [inlined]
 [6] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [7] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:10 [inlined]
 [8] top-level scope at ./<missing>:1085
Vector with no missing values: Test Failed at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:218
  Expression: x ≅ ["c", missing, missing, "e", "zz", "c"]
   Evaluated: Union{Missing, CategoricalArrays.CategoricalString{Int64}}["c", "c", "c", "e", "zz", "c"] ≅ Union{Missing, String}["c", missing, missing, "e", "zz", "c"]
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:218 [inlined]
 [2] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1012 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:13 [inlined]
 [4] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [5] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:11 [inlined]
 [6] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [7] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:10 [inlined]
 [8] top-level scope at ./<missing>:1085
Vector with no missing values: Test Failed at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:223
  Expression: x ≅ ["c", missing, missing, "e", "zz", "c", missing]
   Evaluated: Union{Missing, CategoricalArrays.CategoricalString{Int64}}["c", "c", "c", "e", "zz", "c", missing] ≅ Union{Missing, String}["c", missing, missing, "e", "zz", "c", missing]
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:223 [inlined]
 [2] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1012 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:13 [inlined]
 [4] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [5] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:11 [inlined]
 [6] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [7] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:10 [inlined]
 [8] top-level scope at ./<missing>:1085
Vector with no missing values: Test Failed at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:227
  Expression: x ≅ ["c", missing, missing, "e", "zz", "c", missing, "c", missing, missing, "e", "zz", "c", missing]
   Evaluated: Union{Missing, CategoricalArrays.CategoricalString{Int64}}["c", "c", "c", "e", "zz", "c", missing, "c", "c", "c", "e", "zz", "c", missing] ≅ Union{Missing, String}["c", missing, missing, "e", "zz", "c", missing, "c", missing, missing, "e", "zz", "c", missing]
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:227 [inlined]
 [2] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1012 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:13 [inlined]
 [4] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [5] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:11 [inlined]
 [6] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [7] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:10 [inlined]
 [8] top-level scope at ./<missing>:1085
Vector with no missing values: Test Failed at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:238
  Expression: x ≅ ["c", missing, missing, "e", "zz", "c", missing, "c", missing, missing, "e", "zz", "c", missing, "z", "y", "x"]
   Evaluated: Union{Missing, CategoricalArrays.CategoricalString{Int64}}["c", "c", "c", "e", "zz", "c", missing, "c", "c", "c", "e", "zz", "c", missing, "z", "y", "x"] ≅ Union{Missing, String}["c", missing, missing, "e", "zz", "c", missing, "c", missing, missing, "e", "zz", "c", missing, "z", "y", "x"]
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:238 [inlined]
 [2] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1012 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:13 [inlined]
 [4] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [5] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:11 [inlined]
 [6] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [7] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:10 [inlined]
 [8] top-level scope at ./<missing>:1085
┌ Warning: `copy!(dst::AbstractArray, src::AbstractArray)` is deprecated. You can either use `copyto!(dst, src)` or `Future.copy!(dst, src)` instead.
│   caller = convert(::Type{CategoricalArrays.CategoricalArray{Union{Missing, Float64},1,Int64,C,U,U1} where U1 where U where C}, ::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}) at array.jl:241
└ @ CategoricalArrays array.jl:241
┌ Warning: `method_exists(f, t)` is deprecated, use `hasmethod(f, t)` instead.
│   caller = convert(::Type{CategoricalArrays.CategoricalArray{Union{Missing, Float64},1,Int64,C,U,U1} where U1 where U where C}, ::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}) at array.jl:245
└ @ CategoricalArrays array.jl:245
┌ Warning: `copy!(dst::AbstractArray, src::AbstractArray)` is deprecated. You can either use `copyto!(dst, src)` or `Future.copy!(dst, src)` instead.
│   caller = convert(::Type{CategoricalArrays.CategoricalArray{Union{Missing, Float32},1,Int64,V,C,U} where U where C where V}, ::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}) at array.jl:241
└ @ CategoricalArrays array.jl:241
┌ Warning: `method_exists(f, t)` is deprecated, use `hasmethod(f, t)` instead.
│   caller = convert(::Type{CategoricalArrays.CategoricalArray{Union{Missing, Float32},1,Int64,V,C,U} where U where C where V}, ::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}) at array.jl:245
└ @ CategoricalArrays array.jl:245
┌ Warning: `copy!(dst::AbstractArray, src::AbstractArray)` is deprecated. You can either use `copyto!(dst, src)` or `Future.copy!(dst, src)` instead.
│   caller = convert(::Type{CategoricalArrays.CategoricalArray{Union{Missing, Float64},1,Int64,C,U,U1} where U1 where U where C}, ::Array{Float64,1}) at array.jl:241
└ @ CategoricalArrays array.jl:241
┌ Warning: `method_exists(f, t)` is deprecated, use `hasmethod(f, t)` instead.
│   caller = convert(::Type{CategoricalArrays.CategoricalArray{Union{Missing, Float64},1,Int64,C,U,U1} where U1 where U where C}, ::Array{Float64,1}) at array.jl:245
└ @ CategoricalArrays array.jl:245
┌ Warning: `copy!(dst::AbstractArray, src::AbstractArray)` is deprecated. You can either use `copyto!(dst, src)` or `Future.copy!(dst, src)` instead.
│   caller = convert(::Type{CategoricalArrays.CategoricalArray{Union{Missing, String},2,Int64,C,U,U1} where U1 where U where C}, ::Array{String,2}) at array.jl:241
└ @ CategoricalArrays array.jl:241
┌ Warning: `method_exists(f, t)` is deprecated, use `hasmethod(f, t)` instead.
│   caller = convert(::Type{CategoricalArrays.CategoricalArray{Union{Missing, String},2,Int64,C,U,U1} where U1 where U where C}, ::Array{String,2}) at array.jl:245
└ @ CategoricalArrays array.jl:245
┌ Warning: `copy!(dst::AbstractArray, src::AbstractArray)` is deprecated. You can either use `copyto!(dst, src)` or `Future.copy!(dst, src)` instead.
│   caller = convert(::Type{CategoricalArrays.CategoricalArray{Union{Missing, String},2,Int64,C,U,U1} where U1 where U where C}, ::Array{Union{Missing, String},2}) at array.jl:241
└ @ CategoricalArrays array.jl:241
┌ Warning: `method_exists(f, t)` is deprecated, use `hasmethod(f, t)` instead.
│   caller = convert(::Type{CategoricalArrays.CategoricalArray{Union{Missing, String},2,Int64,C,U,U1} where U1 where U where C}, ::Array{Union{Missing, String},2}) at array.jl:245
└ @ CategoricalArrays array.jl:245
Vector with no missing values: Error During Test at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:199
  Test threw an exception of type MethodError
  Expression: levels!(x, ["e", "c"], allow_missing=true) === x
  MethodError: Cannot `convert` an object of type Nothing to an object of type UInt32
  Closest candidates are:
    convert(::Type{T<:Number}, !Matched::T<:Number) where T<:Number at number.jl:6
    convert(::Type{T<:Number}, !Matched::Number) where T<:Number at number.jl:7
    convert(::Type{T<:Integer}, !Matched::Ptr) where T<:Integer at pointer.jl:23
    ...
  Stacktrace:
   [1] setindex!(::Array{UInt32,1}, ::Nothing, ::Int64) at ./array.jl:688
   [2] #levels!#55(::Bool, ::Function, ::CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Missing}, ::Array{String,1}) at /home/vagrant/.julia/v0.7/CategoricalArrays/src/array.jl:583
   [3] (::getfield(CategoricalArrays, Symbol("#kw##levels!")))(::NamedTuple{(:allow_missing,),Tuple{Bool}}, ::typeof(CategoricalArrays.levels!), ::CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Missing}, ::Array{String,1}) at ./<missing>:0
   [4] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:199 [inlined]
   [5] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1012 [inlined]
   [6] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:13 [inlined]
   [7] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:11 [inlined]
   [9] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:10 [inlined]
   [11] top-level scope at ./<missing>:1085
Vector with no missing values: Test Failed at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:202
  Expression: x[2] === missing
   Evaluated: CategoricalArrays.CategoricalString{UInt32} "c" === missing
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:202 [inlined]
 [2] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1012 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:13 [inlined]
 [4] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [5] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:11 [inlined]
 [6] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [7] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:10 [inlined]
 [8] top-level scope at ./<missing>:1085
Vector with no missing values: Test Failed at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:203
  Expression: x[3] === missing
   Evaluated: CategoricalArrays.CategoricalString{UInt32} "c" === missing
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:203 [inlined]
 [2] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1012 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:13 [inlined]
 [4] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [5] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:11 [inlined]
 [6] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [7] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:10 [inlined]
 [8] top-level scope at ./<missing>:1085
Vector with no missing values: Test Failed at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:208
  Expression: x ≅ ["c", missing, missing, "e"]
   Evaluated: Union{Missing, CategoricalArrays.CategoricalString{UInt32}}["c", "c", "c", "e"] ≅ Union{Missing, String}["c", missing, missing, "e"]
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:208 [inlined]
 [2] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1012 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:13 [inlined]
 [4] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [5] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:11 [inlined]
 [6] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [7] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:10 [inlined]
 [8] top-level scope at ./<missing>:1085
Vector with no missing values: Test Failed at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:213
  Expression: x ≅ ["c", missing, missing, "e", "zz"]
   Evaluated: Union{Missing, CategoricalArrays.CategoricalString{UInt32}}["c", "c", "c", "e", "zz"] ≅ Union{Missing, String}["c", missing, missing, "e", "zz"]
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:213 [inlined]
 [2] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1012 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:13 [inlined]
 [4] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [5] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:11 [inlined]
 [6] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [7] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:10 [inlined]
 [8] top-level scope at ./<missing>:1085
Vector with no missing values: Test Failed at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:218
  Expression: x ≅ ["c", missing, missing, "e", "zz", "c"]
   Evaluated: Union{Missing, CategoricalArrays.CategoricalString{UInt32}}["c", "c", "c", "e", "zz", "c"] ≅ Union{Missing, String}["c", missing, missing, "e", "zz", "c"]
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:218 [inlined]
 [2] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1012 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:13 [inlined]
 [4] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [5] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:11 [inlined]
 [6] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [7] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:10 [inlined]
 [8] top-level scope at ./<missing>:1085
Vector with no missing values: Test Failed at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:223
  Expression: x ≅ ["c", missing, missing, "e", "zz", "c", missing]
   Evaluated: Union{Missing, CategoricalArrays.CategoricalString{UInt32}}["c", "c", "c", "e", "zz", "c", missing] ≅ Union{Missing, String}["c", missing, missing, "e", "zz", "c", missing]
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:223 [inlined]
 [2] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1012 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:13 [inlined]
 [4] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [5] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:11 [inlined]
 [6] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [7] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:10 [inlined]
 [8] top-level scope at ./<missing>:1085
Vector with no missing values: Test Failed at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:227
  Expression: x ≅ ["c", missing, missing, "e", "zz", "c", missing, "c", missing, missing, "e", "zz", "c", missing]
   Evaluated: Union{Missing, CategoricalArrays.CategoricalString{UInt32}}["c", "c", "c", "e", "zz", "c", missing, "c", "c", "c", "e", "zz", "c", missing] ≅ Union{Missing, String}["c", missing, missing, "e", "zz", "c", missing, "c", missing, missing, "e", "zz", "c", missing]
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:227 [inlined]
 [2] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1012 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:13 [inlined]
 [4] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [5] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:11 [inlined]
 [6] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [7] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:10 [inlined]
 [8] top-level scope at ./<missing>:1085
Vector with no missing values: Test Failed at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:238
  Expression: x ≅ ["c", missing, missing, "e", "zz", "c", missing, "c", missing, missing, "e", "zz", "c", missing, "z", "y", "x"]
   Evaluated: Union{Missing, CategoricalArrays.CategoricalString{UInt32}}["c", "c", "c", "e", "zz", "c", missing, "c", "c", "c", "e", "zz", "c", missing, "z", "y", "x"] ≅ Union{Missing, String}["c", missing, missing, "e", "zz", "c", missing, "c", missing, missing, "e", "zz", "c", missing, "z", "y", "x"]
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:238 [inlined]
 [2] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1012 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:13 [inlined]
 [4] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [5] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:11 [inlined]
 [6] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [7] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:10 [inlined]
 [8] top-level scope at ./<missing>:1085
Vector with no missing values: Error During Test at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:199
  Test threw an exception of type MethodError
  Expression: levels!(x, ["e", "c"], allow_missing=true) === x
  MethodError: Cannot `convert` an object of type Nothing to an object of type UInt32
  Closest candidates are:
    convert(::Type{T<:Number}, !Matched::T<:Number) where T<:Number at number.jl:6
    convert(::Type{T<:Number}, !Matched::Number) where T<:Number at number.jl:7
    convert(::Type{T<:Integer}, !Matched::Ptr) where T<:Integer at pointer.jl:23
    ...
  Stacktrace:
   [1] setindex!(::Array{UInt32,1}, ::Nothing, ::Int64) at ./array.jl:688
   [2] #levels!#55(::Bool, ::Function, ::CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Missing}, ::Array{String,1}) at /home/vagrant/.julia/v0.7/CategoricalArrays/src/array.jl:583
   [3] (::getfield(CategoricalArrays, Symbol("#kw##levels!")))(::NamedTuple{(:allow_missing,),Tuple{Bool}}, ::typeof(CategoricalArrays.levels!), ::CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Missing}, ::Array{String,1}) at ./<missing>:0
   [4] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:199 [inlined]
   [5] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1012 [inlined]
   [6] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:13 [inlined]
   [7] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:11 [inlined]
   [9] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:10 [inlined]
   [11] top-level scope at ./<missing>:1085
Vector with no missing values: Test Failed at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:202
  Expression: x[2] === missing
   Evaluated: CategoricalArrays.CategoricalString{UInt32} "c" === missing
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:202 [inlined]
 [2] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1012 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:13 [inlined]
 [4] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [5] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:11 [inlined]
 [6] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [7] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:10 [inlined]
 [8] top-level scope at ./<missing>:1085
Vector with no missing values: Test Failed at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:203
  Expression: x[3] === missing
   Evaluated: CategoricalArrays.CategoricalString{UInt32} "c" === missing
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:203 [inlined]
 [2] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1012 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:13 [inlined]
 [4] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [5] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:11 [inlined]
 [6] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [7] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:10 [inlined]
 [8] top-level scope at ./<missing>:1085
Vector with no missing values: Test Failed at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:208
  Expression: x ≅ ["c", missing, missing, "e"]
   Evaluated: Union{Missing, CategoricalArrays.CategoricalString{UInt32}}["c", "c", "c", "e"] ≅ Union{Missing, String}["c", missing, missing, "e"]
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:208 [inlined]
 [2] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1012 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:13 [inlined]
 [4] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [5] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:11 [inlined]
 [6] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [7] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:10 [inlined]
 [8] top-level scope at ./<missing>:1085
Vector with no missing values: Test Failed at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:213
  Expression: x ≅ ["c", missing, missing, "e", "zz"]
   Evaluated: Union{Missing, CategoricalArrays.CategoricalString{UInt32}}["c", "c", "c", "e", "zz"] ≅ Union{Missing, String}["c", missing, missing, "e", "zz"]
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:213 [inlined]
 [2] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1012 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:13 [inlined]
 [4] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [5] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:11 [inlined]
 [6] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [7] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:10 [inlined]
 [8] top-level scope at ./<missing>:1085
Vector with no missing values: Test Failed at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:218
  Expression: x ≅ ["c", missing, missing, "e", "zz", "c"]
   Evaluated: Union{Missing, CategoricalArrays.CategoricalString{UInt32}}["c", "c", "c", "e", "zz", "c"] ≅ Union{Missing, String}["c", missing, missing, "e", "zz", "c"]
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:218 [inlined]
 [2] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1012 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:13 [inlined]
 [4] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [5] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:11 [inlined]
 [6] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [7] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:10 [inlined]
 [8] top-level scope at ./<missing>:1085
Vector with no missing values: Test Failed at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:223
  Expression: x ≅ ["c", missing, missing, "e", "zz", "c", missing]
   Evaluated: Union{Missing, CategoricalArrays.CategoricalString{UInt32}}["c", "c", "c", "e", "zz", "c", missing] ≅ Union{Missing, String}["c", missing, missing, "e", "zz", "c", missing]
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:223 [inlined]
 [2] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1012 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:13 [inlined]
 [4] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [5] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:11 [inlined]
 [6] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [7] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:10 [inlined]
 [8] top-level scope at ./<missing>:1085
Vector with no missing values: Test Failed at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:227
  Expression: x ≅ ["c", missing, missing, "e", "zz", "c", missing, "c", missing, missing, "e", "zz", "c", missing]
   Evaluated: Union{Missing, CategoricalArrays.CategoricalString{UInt32}}["c", "c", "c", "e", "zz", "c", missing, "c", "c", "c", "e", "zz", "c", missing] ≅ Union{Missing, String}["c", missing, missing, "e", "zz", "c", missing, "c", missing, missing, "e", "zz", "c", missing]
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:227 [inlined]
 [2] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1012 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:13 [inlined]
 [4] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [5] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:11 [inlined]
 [6] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [7] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:10 [inlined]
 [8] top-level scope at ./<missing>:1085
Vector with no missing values: Test Failed at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:238
  Expression: x ≅ ["c", missing, missing, "e", "zz", "c", missing, "c", missing, missing, "e", "zz", "c", missing, "z", "y", "x"]
   Evaluated: Union{Missing, CategoricalArrays.CategoricalString{UInt32}}["c", "c", "c", "e", "zz", "c", missing, "c", "c", "c", "e", "zz", "c", missing, "z", "y", "x"] ≅ Union{Missing, String}["c", missing, missing, "e", "zz", "c", missing, "c", missing, missing, "e", "zz", "c", missing, "z", "y", "x"]
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:238 [inlined]
 [2] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1012 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:13 [inlined]
 [4] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [5] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:11 [inlined]
 [6] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [7] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:10 [inlined]
 [8] top-level scope at ./<missing>:1085
Vector with no missing values: Error During Test at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:199
  Test threw an exception of type MethodError
  Expression: levels!(x, ["e", "c"], allow_missing=true) === x
  MethodError: Cannot `convert` an object of type Nothing to an object of type UInt8
  Closest candidates are:
    convert(::Type{T<:Number}, !Matched::T<:Number) where T<:Number at number.jl:6
    convert(::Type{T<:Number}, !Matched::Number) where T<:Number at number.jl:7
    convert(::Type{T<:Integer}, !Matched::Ptr) where T<:Integer at pointer.jl:23
    ...
  Stacktrace:
   [1] setindex!(::Array{UInt8,1}, ::Nothing, ::Int64) at ./array.jl:688
   [2] #levels!#55(::Bool, ::Function, ::CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt8,String,CategoricalArrays.CategoricalString{UInt8},Missing}, ::Array{String,1}) at /home/vagrant/.julia/v0.7/CategoricalArrays/src/array.jl:583
   [3] (::getfield(CategoricalArrays, Symbol("#kw##levels!")))(::NamedTuple{(:allow_missing,),Tuple{Bool}}, ::typeof(CategoricalArrays.levels!), ::CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt8,String,CategoricalArrays.CategoricalString{UInt8},Missing}, ::Array{String,1}) at ./<missing>:0
   [4] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:199 [inlined]
   [5] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1012 [inlined]
   [6] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:13 [inlined]
   [7] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:11 [inlined]
   [9] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:10 [inlined]
   [11] top-level scope at ./<missing>:1085
Vector with no missing values: Test Failed at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:202
  Expression: x[2] === missing
   Evaluated: CategoricalArrays.CategoricalString{UInt8} "c" === missing
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:202 [inlined]
 [2] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1012 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:13 [inlined]
 [4] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [5] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:11 [inlined]
 [6] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [7] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:10 [inlined]
 [8] top-level scope at ./<missing>:1085
Vector with no missing values: Test Failed at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:203
  Expression: x[3] === missing
   Evaluated: CategoricalArrays.CategoricalString{UInt8} "c" === missing
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:203 [inlined]
 [2] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1012 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:13 [inlined]
 [4] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [5] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:11 [inlined]
 [6] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [7] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:10 [inlined]
 [8] top-level scope at ./<missing>:1085
Vector with no missing values: Test Failed at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:208
  Expression: x ≅ ["c", missing, missing, "e"]
   Evaluated: Union{Missing, CategoricalArrays.CategoricalString{UInt8}}["c", "c", "c", "e"] ≅ Union{Missing, String}["c", missing, missing, "e"]
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:208 [inlined]
 [2] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1012 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:13 [inlined]
 [4] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [5] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:11 [inlined]
 [6] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [7] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:10 [inlined]
 [8] top-level scope at ./<missing>:1085
Vector with no missing values: Test Failed at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:213
  Expression: x ≅ ["c", missing, missing, "e", "zz"]
   Evaluated: Union{Missing, CategoricalArrays.CategoricalString{UInt8}}["c", "c", "c", "e", "zz"] ≅ Union{Missing, String}["c", missing, missing, "e", "zz"]
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:213 [inlined]
 [2] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1012 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:13 [inlined]
 [4] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [5] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:11 [inlined]
 [6] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [7] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:10 [inlined]
 [8] top-level scope at ./<missing>:1085
Vector with no missing values: Test Failed at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:218
  Expression: x ≅ ["c", missing, missing, "e", "zz", "c"]
   Evaluated: Union{Missing, CategoricalArrays.CategoricalString{UInt8}}["c", "c", "c", "e", "zz", "c"] ≅ Union{Missing, String}["c", missing, missing, "e", "zz", "c"]
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:218 [inlined]
 [2] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1012 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:13 [inlined]
 [4] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [5] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:11 [inlined]
 [6] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [7] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:10 [inlined]
 [8] top-level scope at ./<missing>:1085
Vector with no missing values: Test Failed at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:223
  Expression: x ≅ ["c", missing, missing, "e", "zz", "c", missing]
   Evaluated: Union{Missing, CategoricalArrays.CategoricalString{UInt8}}["c", "c", "c", "e", "zz", "c", missing] ≅ Union{Missing, String}["c", missing, missing, "e", "zz", "c", missing]
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:223 [inlined]
 [2] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1012 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:13 [inlined]
 [4] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [5] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:11 [inlined]
 [6] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [7] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:10 [inlined]
 [8] top-level scope at ./<missing>:1085
Vector with no missing values: Test Failed at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:227
  Expression: x ≅ ["c", missing, missing, "e", "zz", "c", missing, "c", missing, missing, "e", "zz", "c", missing]
   Evaluated: Union{Missing, CategoricalArrays.CategoricalString{UInt8}}["c", "c", "c", "e", "zz", "c", missing, "c", "c", "c", "e", "zz", "c", missing] ≅ Union{Missing, String}["c", missing, missing, "e", "zz", "c", missing, "c", missing, missing, "e", "zz", "c", missing]
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:227 [inlined]
 [2] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1012 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:13 [inlined]
 [4] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [5] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:11 [inlined]
 [6] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [7] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:10 [inlined]
 [8] top-level scope at ./<missing>:1085
Vector with no missing values: Test Failed at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:238
  Expression: x ≅ ["c", missing, missing, "e", "zz", "c", missing, "c", missing, missing, "e", "zz", "c", missing, "z", "y", "x"]
   Evaluated: Union{Missing, CategoricalArrays.CategoricalString{UInt8}}["c", "c", "c", "e", "zz", "c", missing, "c", "c", "c", "e", "zz", "c", missing, "z", "y", "x"] ≅ Union{Missing, String}["c", missing, missing, "e", "zz", "c", missing, "c", missing, missing, "e", "zz", "c", missing, "z", "y", "x"]
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:238 [inlined]
 [2] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1012 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:13 [inlined]
 [4] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [5] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:11 [inlined]
 [6] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [7] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:10 [inlined]
 [8] top-level scope at ./<missing>:1085
Vector with no missing values: Error During Test at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:199
  Test threw an exception of type MethodError
  Expression: levels!(x, ["e", "c"], allow_missing=true) === x
  MethodError: Cannot `convert` an object of type Nothing to an object of type UInt8
  Closest candidates are:
    convert(::Type{T<:Number}, !Matched::T<:Number) where T<:Number at number.jl:6
    convert(::Type{T<:Number}, !Matched::Number) where T<:Number at number.jl:7
    convert(::Type{T<:Integer}, !Matched::Ptr) where T<:Integer at pointer.jl:23
    ...
  Stacktrace:
   [1] setindex!(::Array{UInt8,1}, ::Nothing, ::Int64) at ./array.jl:688
   [2] #levels!#55(::Bool, ::Function, ::CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt8,String,CategoricalArrays.CategoricalString{UInt8},Missing}, ::Array{String,1}) at /home/vagrant/.julia/v0.7/CategoricalArrays/src/array.jl:583
   [3] (::getfield(CategoricalArrays, Symbol("#kw##levels!")))(::NamedTuple{(:allow_missing,),Tuple{Bool}}, ::typeof(CategoricalArrays.levels!), ::CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt8,String,CategoricalArrays.CategoricalString{UInt8},Missing}, ::Array{String,1}) at ./<missing>:0
   [4] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:199 [inlined]
   [5] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1012 [inlined]
   [6] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:13 [inlined]
   [7] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:11 [inlined]
   [9] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:10 [inlined]
   [11] top-level scope at ./<missing>:1085
Vector with no missing values: Test Failed at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:202
  Expression: x[2] === missing
   Evaluated: CategoricalArrays.CategoricalString{UInt8} "c" === missing
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:202 [inlined]
 [2] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1012 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:13 [inlined]
 [4] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [5] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:11 [inlined]
 [6] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [7] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:10 [inlined]
 [8] top-level scope at ./<missing>:1085
Vector with no missing values: Test Failed at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:203
  Expression: x[3] === missing
   Evaluated: CategoricalArrays.CategoricalString{UInt8} "c" === missing
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:203 [inlined]
 [2] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1012 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:13 [inlined]
 [4] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [5] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:11 [inlined]
 [6] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [7] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:10 [inlined]
 [8] top-level scope at ./<missing>:1085
Vector with no missing values: Test Failed at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:208
  Expression: x ≅ ["c", missing, missing, "e"]
   Evaluated: Union{Missing, CategoricalArrays.CategoricalString{UInt8}}["c", "c", "c", "e"] ≅ Union{Missing, String}["c", missing, missing, "e"]
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:208 [inlined]
 [2] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1012 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:13 [inlined]
 [4] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [5] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:11 [inlined]
 [6] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [7] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:10 [inlined]
 [8] top-level scope at ./<missing>:1085
Vector with no missing values: Test Failed at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:213
  Expression: x ≅ ["c", missing, missing, "e", "zz"]
   Evaluated: Union{Missing, CategoricalArrays.CategoricalString{UInt8}}["c", "c", "c", "e", "zz"] ≅ Union{Missing, String}["c", missing, missing, "e", "zz"]
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:213 [inlined]
 [2] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1012 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:13 [inlined]
 [4] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [5] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:11 [inlined]
 [6] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [7] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:10 [inlined]
 [8] top-level scope at ./<missing>:1085
Vector with no missing values: Test Failed at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:218
  Expression: x ≅ ["c", missing, missing, "e", "zz", "c"]
   Evaluated: Union{Missing, CategoricalArrays.CategoricalString{UInt8}}["c", "c", "c", "e", "zz", "c"] ≅ Union{Missing, String}["c", missing, missing, "e", "zz", "c"]
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:218 [inlined]
 [2] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1012 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:13 [inlined]
 [4] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [5] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:11 [inlined]
 [6] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [7] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:10 [inlined]
 [8] top-level scope at ./<missing>:1085
Vector with no missing values: Test Failed at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:223
  Expression: x ≅ ["c", missing, missing, "e", "zz", "c", missing]
   Evaluated: Union{Missing, CategoricalArrays.CategoricalString{UInt8}}["c", "c", "c", "e", "zz", "c", missing] ≅ Union{Missing, String}["c", missing, missing, "e", "zz", "c", missing]
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:223 [inlined]
 [2] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1012 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:13 [inlined]
 [4] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [5] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:11 [inlined]
 [6] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [7] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:10 [inlined]
 [8] top-level scope at ./<missing>:1085
Vector with no missing values: Test Failed at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:227
  Expression: x ≅ ["c", missing, missing, "e", "zz", "c", missing, "c", missing, missing, "e", "zz", "c", missing]
   Evaluated: Union{Missing, CategoricalArrays.CategoricalString{UInt8}}["c", "c", "c", "e", "zz", "c", missing, "c", "c", "c", "e", "zz", "c", missing] ≅ Union{Missing, String}["c", missing, missing, "e", "zz", "c", missing, "c", missing, missing, "e", "zz", "c", missing]
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:227 [inlined]
 [2] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1012 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:13 [inlined]
 [4] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [5] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:11 [inlined]
 [6] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [7] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:10 [inlined]
 [8] top-level scope at ./<missing>:1085
Vector with no missing values: Test Failed at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:238
  Expression: x ≅ ["c", missing, missing, "e", "zz", "c", missing, "c", missing, missing, "e", "zz", "c", missing, "z", "y", "x"]
   Evaluated: Union{Missing, CategoricalArrays.CategoricalString{UInt8}}["c", "c", "c", "e", "zz", "c", missing, "c", "c", "c", "e", "zz", "c", missing, "z", "y", "x"] ≅ Union{Missing, String}["c", missing, missing, "e", "zz", "c", missing, "c", missing, missing, "e", "zz", "c", missing, "z", "y", "x"]
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:238 [inlined]
 [2] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1012 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:13 [inlined]
 [4] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [5] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:11 [inlined]
 [6] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [7] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:10 [inlined]
 [8] top-level scope at ./<missing>:1085
Vector with no missing values: Error During Test at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:199
  Test threw an exception of type MethodError
  Expression: levels!(x, ["e", "c"], allow_missing=true) === x
  MethodError: Cannot `convert` an object of type Nothing to an object of type UInt64
  Closest candidates are:
    convert(::Type{T<:Number}, !Matched::T<:Number) where T<:Number at number.jl:6
    convert(::Type{T<:Number}, !Matched::Number) where T<:Number at number.jl:7
    convert(::Type{T<:Integer}, !Matched::Ptr) where T<:Integer at pointer.jl:23
    ...
  Stacktrace:
   [1] setindex!(::Array{UInt64,1}, ::Nothing, ::Int64) at ./array.jl:688
   [2] #levels!#55(::Bool, ::Function, ::CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt64,String,CategoricalArrays.CategoricalString{UInt64},Missing}, ::Array{String,1}) at /home/vagrant/.julia/v0.7/CategoricalArrays/src/array.jl:583
   [3] (::getfield(CategoricalArrays, Symbol("#kw##levels!")))(::NamedTuple{(:allow_missing,),Tuple{Bool}}, ::typeof(CategoricalArrays.levels!), ::CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt64,String,CategoricalArrays.CategoricalString{UInt64},Missing}, ::Array{String,1}) at ./<missing>:0
   [4] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:199 [inlined]
   [5] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1012 [inlined]
   [6] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:13 [inlined]
   [7] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:11 [inlined]
   [9] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:10 [inlined]
   [11] top-level scope at ./<missing>:1085
Vector with no missing values: Test Failed at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:202
  Expression: x[2] === missing
   Evaluated: CategoricalArrays.CategoricalString{UInt64} "c" === missing
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:202 [inlined]
 [2] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1012 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:13 [inlined]
 [4] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [5] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:11 [inlined]
 [6] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [7] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:10 [inlined]
 [8] top-level scope at ./<missing>:1085
Vector with no missing values: Test Failed at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:203
  Expression: x[3] === missing
   Evaluated: CategoricalArrays.CategoricalString{UInt64} "c" === missing
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:203 [inlined]
 [2] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1012 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:13 [inlined]
 [4] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [5] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:11 [inlined]
 [6] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [7] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:10 [inlined]
 [8] top-level scope at ./<missing>:1085
Vector with no missing values: Test Failed at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:208
  Expression: x ≅ ["c", missing, missing, "e"]
   Evaluated: Union{Missing, CategoricalArrays.CategoricalString{UInt64}}["c", "c", "c", "e"] ≅ Union{Missing, String}["c", missing, missing, "e"]
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:208 [inlined]
 [2] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1012 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:13 [inlined]
 [4] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [5] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:11 [inlined]
 [6] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [7] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:10 [inlined]
 [8] top-level scope at ./<missing>:1085
Vector with no missing values: Test Failed at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:213
  Expression: x ≅ ["c", missing, missing, "e", "zz"]
   Evaluated: Union{Missing, CategoricalArrays.CategoricalString{UInt64}}["c", "c", "c", "e", "zz"] ≅ Union{Missing, String}["c", missing, missing, "e", "zz"]
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:213 [inlined]
 [2] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1012 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:13 [inlined]
 [4] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [5] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:11 [inlined]
 [6] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [7] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:10 [inlined]
 [8] top-level scope at ./<missing>:1085
Vector with no missing values: Test Failed at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:218
  Expression: x ≅ ["c", missing, missing, "e", "zz", "c"]
   Evaluated: Union{Missing, CategoricalArrays.CategoricalString{UInt64}}["c", "c", "c", "e", "zz", "c"] ≅ Union{Missing, String}["c", missing, missing, "e", "zz", "c"]
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:218 [inlined]
 [2] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1012 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:13 [inlined]
 [4] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [5] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:11 [inlined]
 [6] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [7] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:10 [inlined]
 [8] top-level scope at ./<missing>:1085
Vector with no missing values: Test Failed at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:223
  Expression: x ≅ ["c", missing, missing, "e", "zz", "c", missing]
   Evaluated: Union{Missing, CategoricalArrays.CategoricalString{UInt64}}["c", "c", "c", "e", "zz", "c", missing] ≅ Union{Missing, String}["c", missing, missing, "e", "zz", "c", missing]
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:223 [inlined]
 [2] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1012 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:13 [inlined]
 [4] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [5] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:11 [inlined]
 [6] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [7] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:10 [inlined]
 [8] top-level scope at ./<missing>:1085
Vector with no missing values: Test Failed at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:227
  Expression: x ≅ ["c", missing, missing, "e", "zz", "c", missing, "c", missing, missing, "e", "zz", "c", missing]
   Evaluated: Union{Missing, CategoricalArrays.CategoricalString{UInt64}}["c", "c", "c", "e", "zz", "c", missing, "c", "c", "c", "e", "zz", "c", missing] ≅ Union{Missing, String}["c", missing, missing, "e", "zz", "c", missing, "c", missing, missing, "e", "zz", "c", missing]
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:227 [inlined]
 [2] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1012 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:13 [inlined]
 [4] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [5] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:11 [inlined]
 [6] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [7] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:10 [inlined]
 [8] top-level scope at ./<missing>:1085
Vector with no missing values: Test Failed at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:238
  Expression: x ≅ ["c", missing, missing, "e", "zz", "c", missing, "c", missing, missing, "e", "zz", "c", missing, "z", "y", "x"]
   Evaluated: Union{Missing, CategoricalArrays.CategoricalString{UInt64}}["c", "c", "c", "e", "zz", "c", missing, "c", "c", "c", "e", "zz", "c", missing, "z", "y", "x"] ≅ Union{Missing, String}["c", missing, missing, "e", "zz", "c", missing, "c", missing, missing, "e", "zz", "c", missing, "z", "y", "x"]
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:238 [inlined]
 [2] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1012 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:13 [inlined]
 [4] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [5] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:11 [inlined]
 [6] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [7] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:10 [inlined]
 [8] top-level scope at ./<missing>:1085
Vector with no missing values: Error During Test at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:199
  Test threw an exception of type MethodError
  Expression: levels!(x, ["e", "c"], allow_missing=true) === x
  MethodError: Cannot `convert` an object of type Nothing to an object of type UInt64
  Closest candidates are:
    convert(::Type{T<:Number}, !Matched::T<:Number) where T<:Number at number.jl:6
    convert(::Type{T<:Number}, !Matched::Number) where T<:Number at number.jl:7
    convert(::Type{T<:Integer}, !Matched::Ptr) where T<:Integer at pointer.jl:23
    ...
  Stacktrace:
   [1] setindex!(::Array{UInt64,1}, ::Nothing, ::Int64) at ./array.jl:688
   [2] #levels!#55(::Bool, ::Function, ::CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt64,String,CategoricalArrays.CategoricalString{UInt64},Missing}, ::Array{String,1}) at /home/vagrant/.julia/v0.7/CategoricalArrays/src/array.jl:583
   [3] (::getfield(CategoricalArrays, Symbol("#kw##levels!")))(::NamedTuple{(:allow_missing,),Tuple{Bool}}, ::typeof(CategoricalArrays.levels!), ::CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt64,String,CategoricalArrays.CategoricalString{UInt64},Missing}, ::Array{String,1}) at ./<missing>:0
   [4] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:199 [inlined]
   [5] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1012 [inlined]
   [6] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:13 [inlined]
   [7] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:11 [inlined]
   [9] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:10 [inlined]
   [11] top-level scope at ./<missing>:1085
Vector with no missing values: Test Failed at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:202
  Expression: x[2] === missing
   Evaluated: CategoricalArrays.CategoricalString{UInt64} "c" === missing
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:202 [inlined]
 [2] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1012 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:13 [inlined]
 [4] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [5] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:11 [inlined]
 [6] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [7] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:10 [inlined]
 [8] top-level scope at ./<missing>:1085
Vector with no missing values: Test Failed at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:203
  Expression: x[3] === missing
   Evaluated: CategoricalArrays.CategoricalString{UInt64} "c" === missing
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:203 [inlined]
 [2] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1012 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:13 [inlined]
 [4] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [5] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:11 [inlined]
 [6] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [7] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:10 [inlined]
 [8] top-level scope at ./<missing>:1085
Vector with no missing values: Test Failed at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:208
  Expression: x ≅ ["c", missing, missing, "e"]
   Evaluated: Union{Missing, CategoricalArrays.CategoricalString{UInt64}}["c", "c", "c", "e"] ≅ Union{Missing, String}["c", missing, missing, "e"]
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:208 [inlined]
 [2] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1012 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:13 [inlined]
 [4] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [5] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:11 [inlined]
 [6] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [7] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:10 [inlined]
 [8] top-level scope at ./<missing>:1085
Vector with no missing values: Test Failed at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:213
  Expression: x ≅ ["c", missing, missing, "e", "zz"]
   Evaluated: Union{Missing, CategoricalArrays.CategoricalString{UInt64}}["c", "c", "c", "e", "zz"] ≅ Union{Missing, String}["c", missing, missing, "e", "zz"]
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:213 [inlined]
 [2] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1012 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:13 [inlined]
 [4] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [5] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:11 [inlined]
 [6] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [7] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:10 [inlined]
 [8] top-level scope at ./<missing>:1085
Vector with no missing values: Test Failed at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:218
  Expression: x ≅ ["c", missing, missing, "e", "zz", "c"]
   Evaluated: Union{Missing, CategoricalArrays.CategoricalString{UInt64}}["c", "c", "c", "e", "zz", "c"] ≅ Union{Missing, String}["c", missing, missing, "e", "zz", "c"]
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:218 [inlined]
 [2] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1012 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:13 [inlined]
 [4] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [5] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:11 [inlined]
 [6] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [7] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:10 [inlined]
 [8] top-level scope at ./<missing>:1085
Vector with no missing values: Test Failed at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:223
  Expression: x ≅ ["c", missing, missing, "e", "zz", "c", missing]
   Evaluated: Union{Missing, CategoricalArrays.CategoricalString{UInt64}}["c", "c", "c", "e", "zz", "c", missing] ≅ Union{Missing, String}["c", missing, missing, "e", "zz", "c", missing]
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:223 [inlined]
 [2] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1012 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:13 [inlined]
 [4] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [5] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:11 [inlined]
 [6] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [7] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:10 [inlined]
 [8] top-level scope at ./<missing>:1085
Vector with no missing values: Test Failed at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:227
  Expression: x ≅ ["c", missing, missing, "e", "zz", "c", missing, "c", missing, missing, "e", "zz", "c", missing]
   Evaluated: Union{Missing, CategoricalArrays.CategoricalString{UInt64}}["c", "c", "c", "e", "zz", "c", missing, "c", "c", "c", "e", "zz", "c", missing] ≅ Union{Missing, String}["c", missing, missing, "e", "zz", "c", missing, "c", missing, missing, "e", "zz", "c", missing]
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:227 [inlined]
 [2] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1012 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:13 [inlined]
 [4] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [5] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:11 [inlined]
 [6] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [7] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:10 [inlined]
 [8] top-level scope at ./<missing>:1085
Vector with no missing values: Test Failed at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:238
  Expression: x ≅ ["c", missing, missing, "e", "zz", "c", missing, "c", missing, missing, "e", "zz", "c", missing, "z", "y", "x"]
   Evaluated: Union{Missing, CategoricalArrays.CategoricalString{UInt64}}["c", "c", "c", "e", "zz", "c", missing, "c", "c", "c", "e", "zz", "c", missing, "z", "y", "x"] ≅ Union{Missing, String}["c", missing, missing, "e", "zz", "c", missing, "c", missing, missing, "e", "zz", "c", missing, "z", "y", "x"]
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:238 [inlined]
 [2] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1012 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:13 [inlined]
 [4] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [5] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:11 [inlined]
 [6] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [7] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:10 [inlined]
 [8] top-level scope at ./<missing>:1085
Vector with no missing values: Error During Test at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:199
  Test threw an exception of type MethodError
  Expression: levels!(x, ["e", "c"], allow_missing=true) === x
  MethodError: Cannot `convert` an object of type Nothing to an object of type Int8
  Closest candidates are:
    convert(::Type{T<:Number}, !Matched::T<:Number) where T<:Number at number.jl:6
    convert(::Type{T<:Number}, !Matched::Number) where T<:Number at number.jl:7
    convert(::Type{T<:Integer}, !Matched::Ptr) where T<:Integer at pointer.jl:23
    ...
  Stacktrace:
   [1] setindex!(::Array{Int8,1}, ::Nothing, ::Int64) at ./array.jl:688
   [2] #levels!#55(::Bool, ::Function, ::CategoricalArrays.CategoricalArray{Union{Missing, String},1,Int8,String,CategoricalArrays.CategoricalString{Int8},Missing}, ::Array{String,1}) at /home/vagrant/.julia/v0.7/CategoricalArrays/src/array.jl:583
   [3] (::getfield(CategoricalArrays, Symbol("#kw##levels!")))(::NamedTuple{(:allow_missing,),Tuple{Bool}}, ::typeof(CategoricalArrays.levels!), ::CategoricalArrays.CategoricalArray{Union{Missing, String},1,Int8,String,CategoricalArrays.CategoricalString{Int8},Missing}, ::Array{String,1}) at ./<missing>:0
   [4] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:199 [inlined]
   [5] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1012 [inlined]
   [6] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:13 [inlined]
   [7] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:11 [inlined]
   [9] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:10 [inlined]
   [11] top-level scope at ./<missing>:1085
Vector with no missing values: Test Failed at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:202
  Expression: x[2] === missing
   Evaluated: CategoricalArrays.CategoricalString{Int8} "c" === missing
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:202 [inlined]
 [2] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1012 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:13 [inlined]
 [4] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [5] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:11 [inlined]
 [6] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [7] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:10 [inlined]
 [8] top-level scope at ./<missing>:1085
Vector with no missing values: Test Failed at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:203
  Expression: x[3] === missing
   Evaluated: CategoricalArrays.CategoricalString{Int8} "c" === missing
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:203 [inlined]
 [2] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1012 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:13 [inlined]
 [4] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [5] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:11 [inlined]
 [6] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [7] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:10 [inlined]
 [8] top-level scope at ./<missing>:1085
Vector with no missing values: Test Failed at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:208
  Expression: x ≅ ["c", missing, missing, "e"]
   Evaluated: Union{Missing, CategoricalArrays.CategoricalString{Int8}}["c", "c", "c", "e"] ≅ Union{Missing, String}["c", missing, missing, "e"]
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:208 [inlined]
 [2] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1012 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:13 [inlined]
 [4] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [5] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:11 [inlined]
 [6] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [7] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:10 [inlined]
 [8] top-level scope at ./<missing>:1085
Vector with no missing values: Test Failed at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:213
  Expression: x ≅ ["c", missing, missing, "e", "zz"]
   Evaluated: Union{Missing, CategoricalArrays.CategoricalString{Int8}}["c", "c", "c", "e", "zz"] ≅ Union{Missing, String}["c", missing, missing, "e", "zz"]
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:213 [inlined]
 [2] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1012 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:13 [inlined]
 [4] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [5] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:11 [inlined]
 [6] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [7] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:10 [inlined]
 [8] top-level scope at ./<missing>:1085
Vector with no missing values: Test Failed at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:218
  Expression: x ≅ ["c", missing, missing, "e", "zz", "c"]
   Evaluated: Union{Missing, CategoricalArrays.CategoricalString{Int8}}["c", "c", "c", "e", "zz", "c"] ≅ Union{Missing, String}["c", missing, missing, "e", "zz", "c"]
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:218 [inlined]
 [2] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1012 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:13 [inlined]
 [4] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [5] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:11 [inlined]
 [6] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [7] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:10 [inlined]
 [8] top-level scope at ./<missing>:1085
Vector with no missing values: Test Failed at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:223
  Expression: x ≅ ["c", missing, missing, "e", "zz", "c", missing]
   Evaluated: Union{Missing, CategoricalArrays.CategoricalString{Int8}}["c", "c", "c", "e", "zz", "c", missing] ≅ Union{Missing, String}["c", missing, missing, "e", "zz", "c", missing]
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:223 [inlined]
 [2] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1012 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:13 [inlined]
 [4] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [5] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:11 [inlined]
 [6] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [7] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:10 [inlined]
 [8] top-level scope at ./<missing>:1085
Vector with no missing values: Test Failed at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:227
  Expression: x ≅ ["c", missing, missing, "e", "zz", "c", missing, "c", missing, missing, "e", "zz", "c", missing]
   Evaluated: Union{Missing, CategoricalArrays.CategoricalString{Int8}}["c", "c", "c", "e", "zz", "c", missing, "c", "c", "c", "e", "zz", "c", missing] ≅ Union{Missing, String}["c", missing, missing, "e", "zz", "c", missing, "c", missing, missing, "e", "zz", "c", missing]
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:227 [inlined]
 [2] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1012 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:13 [inlined]
 [4] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [5] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:11 [inlined]
 [6] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [7] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:10 [inlined]
 [8] top-level scope at ./<missing>:1085
Vector with no missing values: Test Failed at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:238
  Expression: x ≅ ["c", missing, missing, "e", "zz", "c", missing, "c", missing, missing, "e", "zz", "c", missing, "z", "y", "x"]
   Evaluated: Union{Missing, CategoricalArrays.CategoricalString{Int8}}["c", "c", "c", "e", "zz", "c", missing, "c", "c", "c", "e", "zz", "c", missing, "z", "y", "x"] ≅ Union{Missing, String}["c", missing, missing, "e", "zz", "c", missing, "c", missing, missing, "e", "zz", "c", missing, "z", "y", "x"]
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:238 [inlined]
 [2] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1012 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:13 [inlined]
 [4] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [5] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:11 [inlined]
 [6] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [7] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:10 [inlined]
 [8] top-level scope at ./<missing>:1085
Vector with no missing values: Error During Test at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:199
  Test threw an exception of type MethodError
  Expression: levels!(x, ["e", "c"], allow_missing=true) === x
  MethodError: Cannot `convert` an object of type Nothing to an object of type Int8
  Closest candidates are:
    convert(::Type{T<:Number}, !Matched::T<:Number) where T<:Number at number.jl:6
    convert(::Type{T<:Number}, !Matched::Number) where T<:Number at number.jl:7
    convert(::Type{T<:Integer}, !Matched::Ptr) where T<:Integer at pointer.jl:23
    ...
  Stacktrace:
   [1] setindex!(::Array{Int8,1}, ::Nothing, ::Int64) at ./array.jl:688
   [2] #levels!#55(::Bool, ::Function, ::CategoricalArrays.CategoricalArray{Union{Missing, String},1,Int8,String,CategoricalArrays.CategoricalString{Int8},Missing}, ::Array{String,1}) at /home/vagrant/.julia/v0.7/CategoricalArrays/src/array.jl:583
   [3] (::getfield(CategoricalArrays, Symbol("#kw##levels!")))(::NamedTuple{(:allow_missing,),Tuple{Bool}}, ::typeof(CategoricalArrays.levels!), ::CategoricalArrays.CategoricalArray{Union{Missing, String},1,Int8,String,CategoricalArrays.CategoricalString{Int8},Missing}, ::Array{String,1}) at ./<missing>:0
   [4] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:199 [inlined]
   [5] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1012 [inlined]
   [6] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:13 [inlined]
   [7] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:11 [inlined]
   [9] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:10 [inlined]
   [11] top-level scope at ./<missing>:1085
Vector with no missing values: Test Failed at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:202
  Expression: x[2] === missing
   Evaluated: CategoricalArrays.CategoricalString{Int8} "c" === missing
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:202 [inlined]
 [2] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1012 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:13 [inlined]
 [4] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [5] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:11 [inlined]
 [6] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [7] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:10 [inlined]
 [8] top-level scope at ./<missing>:1085
Vector with no missing values: Test Failed at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:203
  Expression: x[3] === missing
   Evaluated: CategoricalArrays.CategoricalString{Int8} "c" === missing
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:203 [inlined]
 [2] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1012 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:13 [inlined]
 [4] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [5] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:11 [inlined]
 [6] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [7] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:10 [inlined]
 [8] top-level scope at ./<missing>:1085
Vector with no missing values: Test Failed at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:208
  Expression: x ≅ ["c", missing, missing, "e"]
   Evaluated: Union{Missing, CategoricalArrays.CategoricalString{Int8}}["c", "c", "c", "e"] ≅ Union{Missing, String}["c", missing, missing, "e"]
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:208 [inlined]
 [2] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1012 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:13 [inlined]
 [4] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [5] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:11 [inlined]
 [6] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [7] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:10 [inlined]
 [8] top-level scope at ./<missing>:1085
Vector with no missing values: Test Failed at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:213
  Expression: x ≅ ["c", missing, missing, "e", "zz"]
   Evaluated: Union{Missing, CategoricalArrays.CategoricalString{Int8}}["c", "c", "c", "e", "zz"] ≅ Union{Missing, String}["c", missing, missing, "e", "zz"]
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:213 [inlined]
 [2] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1012 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:13 [inlined]
 [4] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [5] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:11 [inlined]
 [6] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [7] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:10 [inlined]
 [8] top-level scope at ./<missing>:1085
Vector with no missing values: Test Failed at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:218
  Expression: x ≅ ["c", missing, missing, "e", "zz", "c"]
   Evaluated: Union{Missing, CategoricalArrays.CategoricalString{Int8}}["c", "c", "c", "e", "zz", "c"] ≅ Union{Missing, String}["c", missing, missing, "e", "zz", "c"]
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:218 [inlined]
 [2] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1012 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:13 [inlined]
 [4] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [5] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:11 [inlined]
 [6] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [7] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:10 [inlined]
 [8] top-level scope at ./<missing>:1085
Vector with no missing values: Test Failed at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:223
  Expression: x ≅ ["c", missing, missing, "e", "zz", "c", missing]
   Evaluated: Union{Missing, CategoricalArrays.CategoricalString{Int8}}["c", "c", "c", "e", "zz", "c", missing] ≅ Union{Missing, String}["c", missing, missing, "e", "zz", "c", missing]
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:223 [inlined]
 [2] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1012 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:13 [inlined]
 [4] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [5] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:11 [inlined]
 [6] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [7] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:10 [inlined]
 [8] top-level scope at ./<missing>:1085
Vector with no missing values: Test Failed at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:227
  Expression: x ≅ ["c", missing, missing, "e", "zz", "c", missing, "c", missing, missing, "e", "zz", "c", missing]
   Evaluated: Union{Missing, CategoricalArrays.CategoricalString{Int8}}["c", "c", "c", "e", "zz", "c", missing, "c", "c", "c", "e", "zz", "c", missing] ≅ Union{Missing, String}["c", missing, missing, "e", "zz", "c", missing, "c", missing, missing, "e", "zz", "c", missing]
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:227 [inlined]
 [2] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1012 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:13 [inlined]
 [4] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [5] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:11 [inlined]
 [6] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [7] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:10 [inlined]
 [8] top-level scope at ./<missing>:1085
Vector with no missing values: Test Failed at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:238
  Expression: x ≅ ["c", missing, missing, "e", "zz", "c", missing, "c", missing, missing, "e", "zz", "c", missing, "z", "y", "x"]
   Evaluated: Union{Missing, CategoricalArrays.CategoricalString{Int8}}["c", "c", "c", "e", "zz", "c", missing, "c", "c", "c", "e", "zz", "c", missing, "z", "y", "x"] ≅ Union{Missing, String}["c", missing, missing, "e", "zz", "c", missing, "c", missing, missing, "e", "zz", "c", missing, "z", "y", "x"]
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:238 [inlined]
 [2] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1012 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:13 [inlined]
 [4] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [5] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:11 [inlined]
 [6] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [7] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:10 [inlined]
 [8] top-level scope at ./<missing>:1085
Vector with no missing values: Error During Test at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:199
  Test threw an exception of type MethodError
  Expression: levels!(x, ["e", "c"], allow_missing=true) === x
  MethodError: Cannot `convert` an object of type Nothing to an object of type Int64
  Closest candidates are:
    convert(::Type{T<:Number}, !Matched::T<:Number) where T<:Number at number.jl:6
    convert(::Type{T<:Number}, !Matched::Number) where T<:Number at number.jl:7
    convert(::Type{T<:Integer}, !Matched::Ptr) where T<:Integer at pointer.jl:23
    ...
  Stacktrace:
   [1] setindex!(::Array{Int64,1}, ::Nothing, ::Int64) at ./array.jl:688
   [2] #levels!#55(::Bool, ::Function, ::CategoricalArrays.CategoricalArray{Union{Missing, String},1,Int64,String,CategoricalArrays.CategoricalString{Int64},Missing}, ::Array{String,1}) at /home/vagrant/.julia/v0.7/CategoricalArrays/src/array.jl:583
   [3] (::getfield(CategoricalArrays, Symbol("#kw##levels!")))(::NamedTuple{(:allow_missing,),Tuple{Bool}}, ::typeof(CategoricalArrays.levels!), ::CategoricalArrays.CategoricalArray{Union{Missing, String},1,Int64,String,CategoricalArrays.CategoricalString{Int64},Missing}, ::Array{String,1}) at ./<missing>:0
   [4] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:199 [inlined]
   [5] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1012 [inlined]
   [6] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:13 [inlined]
   [7] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:11 [inlined]
   [9] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:10 [inlined]
   [11] top-level scope at ./<missing>:1085
Vector with no missing values: Test Failed at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:202
  Expression: x[2] === missing
   Evaluated: CategoricalArrays.CategoricalString{Int64} "c" === missing
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:202 [inlined]
 [2] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1012 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:13 [inlined]
 [4] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [5] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:11 [inlined]
 [6] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [7] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:10 [inlined]
 [8] top-level scope at ./<missing>:1085
Vector with no missing values: Test Failed at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:203
  Expression: x[3] === missing
   Evaluated: CategoricalArrays.CategoricalString{Int64} "c" === missing
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:203 [inlined]
 [2] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1012 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:13 [inlined]
 [4] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [5] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:11 [inlined]
 [6] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [7] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:10 [inlined]
 [8] top-level scope at ./<missing>:1085
Vector with no missing values: Test Failed at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:208
  Expression: x ≅ ["c", missing, missing, "e"]
   Evaluated: Union{Missing, CategoricalArrays.CategoricalString{Int64}}["c", "c", "c", "e"] ≅ Union{Missing, String}["c", missing, missing, "e"]
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:208 [inlined]
 [2] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1012 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:13 [inlined]
 [4] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [5] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:11 [inlined]
 [6] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [7] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:10 [inlined]
 [8] top-level scope at ./<missing>:1085
Vector with no missing values: Test Failed at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:213
  Expression: x ≅ ["c", missing, missing, "e", "zz"]
   Evaluated: Union{Missing, CategoricalArrays.CategoricalString{Int64}}["c", "c", "c", "e", "zz"] ≅ Union{Missing, String}["c", missing, missing, "e", "zz"]
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:213 [inlined]
 [2] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1012 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:13 [inlined]
 [4] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [5] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:11 [inlined]
 [6] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [7] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:10 [inlined]
 [8] top-level scope at ./<missing>:1085
Vector with no missing values: Test Failed at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:218
  Expression: x ≅ ["c", missing, missing, "e", "zz", "c"]
   Evaluated: Union{Missing, CategoricalArrays.CategoricalString{Int64}}["c", "c", "c", "e", "zz", "c"] ≅ Union{Missing, String}["c", missing, missing, "e", "zz", "c"]
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:218 [inlined]
 [2] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1012 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:13 [inlined]
 [4] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [5] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:11 [inlined]
 [6] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [7] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:10 [inlined]
 [8] top-level scope at ./<missing>:1085
Vector with no missing values: Test Failed at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:223
  Expression: x ≅ ["c", missing, missing, "e", "zz", "c", missing]
   Evaluated: Union{Missing, CategoricalArrays.CategoricalString{Int64}}["c", "c", "c", "e", "zz", "c", missing] ≅ Union{Missing, String}["c", missing, missing, "e", "zz", "c", missing]
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:223 [inlined]
 [2] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1012 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:13 [inlined]
 [4] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [5] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:11 [inlined]
 [6] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [7] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:10 [inlined]
 [8] top-level scope at ./<missing>:1085
Vector with no missing values: Test Failed at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:227
  Expression: x ≅ ["c", missing, missing, "e", "zz", "c", missing, "c", missing, missing, "e", "zz", "c", missing]
   Evaluated: Union{Missing, CategoricalArrays.CategoricalString{Int64}}["c", "c", "c", "e", "zz", "c", missing, "c", "c", "c", "e", "zz", "c", missing] ≅ Union{Missing, String}["c", missing, missing, "e", "zz", "c", missing, "c", missing, missing, "e", "zz", "c", missing]
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:227 [inlined]
 [2] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1012 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:13 [inlined]
 [4] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [5] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:11 [inlined]
 [6] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [7] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:10 [inlined]
 [8] top-level scope at ./<missing>:1085
Vector with no missing values: Test Failed at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:238
  Expression: x ≅ ["c", missing, missing, "e", "zz", "c", missing, "c", missing, missing, "e", "zz", "c", missing, "z", "y", "x"]
   Evaluated: Union{Missing, CategoricalArrays.CategoricalString{Int64}}["c", "c", "c", "e", "zz", "c", missing, "c", "c", "c", "e", "zz", "c", missing, "z", "y", "x"] ≅ Union{Missing, String}["c", missing, missing, "e", "zz", "c", missing, "c", missing, missing, "e", "zz", "c", missing, "z", "y", "x"]
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:238 [inlined]
 [2] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1012 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:13 [inlined]
 [4] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [5] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:11 [inlined]
 [6] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [7] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:10 [inlined]
 [8] top-level scope at ./<missing>:1085
Vector with no missing values: Error During Test at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:199
  Test threw an exception of type MethodError
  Expression: levels!(x, ["e", "c"], allow_missing=true) === x
  MethodError: Cannot `convert` an object of type Nothing to an object of type Int64
  Closest candidates are:
    convert(::Type{T<:Number}, !Matched::T<:Number) where T<:Number at number.jl:6
    convert(::Type{T<:Number}, !Matched::Number) where T<:Number at number.jl:7
    convert(::Type{T<:Integer}, !Matched::Ptr) where T<:Integer at pointer.jl:23
    ...
  Stacktrace:
   [1] setindex!(::Array{Int64,1}, ::Nothing, ::Int64) at ./array.jl:688
   [2] #levels!#55(::Bool, ::Function, ::CategoricalArrays.CategoricalArray{Union{Missing, String},1,Int64,String,CategoricalArrays.CategoricalString{Int64},Missing}, ::Array{String,1}) at /home/vagrant/.julia/v0.7/CategoricalArrays/src/array.jl:583
   [3] (::getfield(CategoricalArrays, Symbol("#kw##levels!")))(::NamedTuple{(:allow_missing,),Tuple{Bool}}, ::typeof(CategoricalArrays.levels!), ::CategoricalArrays.CategoricalArray{Union{Missing, String},1,Int64,String,CategoricalArrays.CategoricalString{Int64},Missing}, ::Array{String,1}) at ./<missing>:0
   [4] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:199 [inlined]
   [5] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1012 [inlined]
   [6] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:13 [inlined]
   [7] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:11 [inlined]
   [9] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:10 [inlined]
   [11] top-level scope at ./<missing>:1085
Vector with no missing values: Test Failed at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:202
  Expression: x[2] === missing
   Evaluated: CategoricalArrays.CategoricalString{Int64} "c" === missing
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:202 [inlined]
 [2] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1012 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:13 [inlined]
 [4] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [5] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:11 [inlined]
 [6] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [7] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:10 [inlined]
 [8] top-level scope at ./<missing>:1085
Vector with no missing values: Test Failed at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:203
  Expression: x[3] === missing
   Evaluated: CategoricalArrays.CategoricalString{Int64} "c" === missing
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:203 [inlined]
 [2] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1012 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:13 [inlined]
 [4] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [5] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:11 [inlined]
 [6] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [7] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:10 [inlined]
 [8] top-level scope at ./<missing>:1085
Vector with no missing values: Test Failed at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:208
  Expression: x ≅ ["c", missing, missing, "e"]
   Evaluated: Union{Missing, CategoricalArrays.CategoricalString{Int64}}["c", "c", "c", "e"] ≅ Union{Missing, String}["c", missing, missing, "e"]
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:208 [inlined]
 [2] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1012 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:13 [inlined]
 [4] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [5] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:11 [inlined]
 [6] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [7] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:10 [inlined]
 [8] top-level scope at ./<missing>:1085
Vector with no missing values: Test Failed at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:213
  Expression: x ≅ ["c", missing, missing, "e", "zz"]
   Evaluated: Union{Missing, CategoricalArrays.CategoricalString{Int64}}["c", "c", "c", "e", "zz"] ≅ Union{Missing, String}["c", missing, missing, "e", "zz"]
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:213 [inlined]
 [2] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1012 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:13 [inlined]
 [4] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [5] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:11 [inlined]
 [6] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [7] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:10 [inlined]
 [8] top-level scope at ./<missing>:1085
Vector with no missing values: Test Failed at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:218
  Expression: x ≅ ["c", missing, missing, "e", "zz", "c"]
   Evaluated: Union{Missing, CategoricalArrays.CategoricalString{Int64}}["c", "c", "c", "e", "zz", "c"] ≅ Union{Missing, String}["c", missing, missing, "e", "zz", "c"]
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:218 [inlined]
 [2] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1012 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:13 [inlined]
 [4] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [5] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:11 [inlined]
 [6] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [7] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:10 [inlined]
 [8] top-level scope at ./<missing>:1085
Vector with no missing values: Test Failed at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:223
  Expression: x ≅ ["c", missing, missing, "e", "zz", "c", missing]
   Evaluated: Union{Missing, CategoricalArrays.CategoricalString{Int64}}["c", "c", "c", "e", "zz", "c", missing] ≅ Union{Missing, String}["c", missing, missing, "e", "zz", "c", missing]
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:223 [inlined]
 [2] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1012 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:13 [inlined]
 [4] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [5] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:11 [inlined]
 [6] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [7] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:10 [inlined]
 [8] top-level scope at ./<missing>:1085
Vector with no missing values: Test Failed at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:227
  Expression: x ≅ ["c", missing, missing, "e", "zz", "c", missing, "c", missing, missing, "e", "zz", "c", missing]
   Evaluated: Union{Missing, CategoricalArrays.CategoricalString{Int64}}["c", "c", "c", "e", "zz", "c", missing, "c", "c", "c", "e", "zz", "c", missing] ≅ Union{Missing, String}["c", missing, missing, "e", "zz", "c", missing, "c", missing, missing, "e", "zz", "c", missing]
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:227 [inlined]
 [2] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1012 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:13 [inlined]
 [4] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [5] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:11 [inlined]
 [6] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [7] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:10 [inlined]
 [8] top-level scope at ./<missing>:1085
Vector with no missing values: Test Failed at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:238
  Expression: x ≅ ["c", missing, missing, "e", "zz", "c", missing, "c", missing, missing, "e", "zz", "c", missing, "z", "y", "x"]
   Evaluated: Union{Missing, CategoricalArrays.CategoricalString{Int64}}["c", "c", "c", "e", "zz", "c", missing, "c", "c", "c", "e", "zz", "c", missing, "z", "y", "x"] ≅ Union{Missing, String}["c", missing, missing, "e", "zz", "c", missing, "c", missing, missing, "e", "zz", "c", missing, "z", "y", "x"]
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:238 [inlined]
 [2] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1012 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:13 [inlined]
 [4] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [5] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:11 [inlined]
 [6] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1085 [inlined]
 [7] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:10 [inlined]
 [8] top-level scope at ./<missing>:1085
┌ Warning: `copy!(dst::AbstractArray, src::AbstractArray)` is deprecated. You can either use `copyto!(dst, src)` or `Future.copy!(dst, src)` instead.
│   caller = convert(::Type{CategoricalArrays.CategoricalArray{Missing,1,UInt32,V,C,U} where U where C where V}, ::Array{Missing,1}) at array.jl:241
└ @ CategoricalArrays array.jl:241
┌ Warning: `method_exists(f, t)` is deprecated, use `hasmethod(f, t)` instead.
│   caller = convert(::Type{CategoricalArrays.CategoricalArray{Missing,1,UInt32,V,C,U} where U where C where V}, ::Array{Missing,1}) at array.jl:245
└ @ CategoricalArrays array.jl:245
vcat with all missings and empty: Error During Test at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:1040
  Got an exception of type MethodError outside of a @test
  MethodError: no method matching getindex(::Tuple{Array{String,1},Array{Union{},1}}, ::Nothing)
  Closest candidates are:
    getindex(::Tuple, !Matched::Int64) at tuple.jl:22
    getindex(::Tuple, !Matched::Real) at tuple.jl:23
    getindex(::Tuple, !Matched::AbstractUnitRange{#s57} where #s57<:Real) at range.jl:180
    ...
  Stacktrace:
   [1] mergelevels(::Bool, ::Array{String,1}, ::Vararg{Any,N} where N) at /home/vagrant/.julia/v0.7/CategoricalArrays/src/array.jl:351
   [2] vcat(::CategoricalArrays.CategoricalArray{String,1,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Union{}}, ::CategoricalArrays.CategoricalArray{Missing,1,UInt32,Union{},CategoricalArrays.CategoricalValue{Union{},UInt32},Missing}) at /home/vagrant/.julia/v0.7/CategoricalArrays/src/array.jl:496
   [3] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:1043 [inlined]
   [4] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1012 [inlined]
   [5] top-level scope at /home/vagrant/.julia/v0.7/CategoricalArrays/test/12_missingarray.jl:1041
   [6] include at ./boot.jl:295 [inlined]
   [7] include_relative(::Module, ::String) at ./loading.jl:1074
   [8] include at ./sysimg.jl:29 [inlined]
   [9] include(::String) at /home/vagrant/.julia/v0.7/CategoricalArrays/test/runtests.jl:5
   [10] macro expansion at /home/vagrant/.julia/v0.7/CategoricalArrays/test/runtests.jl:36 [inlined]
   [11] top-level scope at ./<missing>:1085
   [12] include at ./boot.jl:295 [inlined]
   [13] include_relative(::Module, ::String) at ./loading.jl:1074
   [14] include(::Module, ::String) at ./sysimg.jl:29
   [15] exec_options(::Base.JLOptions) at ./client.jl:332
   [16] _start() at ./client.jl:448
┌ Warning: `copy!(dst::AbstractArray, src::AbstractArray)` is deprecated. You can either use `copyto!(dst, src)` or `Future.copy!(dst, src)` instead.
│   caller = convert(::Type{CategoricalArrays.CategoricalArray{Union{Missing, Int64},1,UInt32,V,C,U} where U where C where V}, ::Array{Int64,1}) at array.jl:241
└ @ CategoricalArrays array.jl:241
┌ Warning: `method_exists(f, t)` is deprecated, use `hasmethod(f, t)` instead.
│   caller = convert(::Type{CategoricalArrays.CategoricalArray{Union{Missing, Int64},1,UInt32,V,C,U} where U where C where V}, ::Array{Int64,1}) at array.jl:245
└ @ CategoricalArrays array.jl:245
┌ Warning: `shift!` is deprecated, use `popfirst!` instead.
│   caller = _unique(::Type{Union{Missing, Int64}}, ::Array{UInt32,1}, ::CategoricalArrays.CategoricalPool{Int64,UInt32,CategoricalArrays.CategoricalValue{Int64,UInt32}}) at array.jl:607
└ @ CategoricalArrays array.jl:607
Test Summary:                                                                                                                                                                             |  Pass  Fail  Error  Total
12_missingarray.jl                                                                                                                                                                        | 12664   160     21  12845
  conversion ordered=false                                                                                                                                                                |  6220    80     10   6310
    conversion reftype=UInt32                                                                                                                                                             |  1244    16      2   1262
      conversion of Array{String,1}                                                                                                                                                       |   179     8      1    188
        Vector with no missing values                                                                                                                                                     |   179     8      1    188
          categorical(Array{String,1}, compress=true) R1=UInt32 R2=UInt8                                                                                                                  |    10                  10
          categorical(Array{String,1}, compress=false) R1=UInt32 R2=UInt32                                                                                                                |    10                  10
          categorical(CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Missing}, compress=true) R1=UInt32 R2=UInt8   |    10                  10
          categorical(CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Missing}, compress=false) R1=UInt32 R2=UInt32 |    10                  10
      conversion of Array{Union{Missing, String},1}                                                                                                                                       |   179     8      1    188
        Vector with no missing values                                                                                                                                                     |   179     8      1    188
          categorical(Array{Union{Missing, String},1}, compress=true) R1=UInt32 R2=UInt8                                                                                                  |    10                  10
          categorical(Array{Union{Missing, String},1}, compress=false) R1=UInt32 R2=UInt32                                                                                                |    10                  10
          categorical(CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Missing}, compress=true) R1=UInt32 R2=UInt8   |    10                  10
          categorical(CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Missing}, compress=false) R1=UInt32 R2=UInt32 |    10                  10
      Vector with missing values                                                                                                                                                          |   106                 106
      Vector created from range                                                                                                                                                           |   156                 156
      Matrix Array{String,2} with no missing values                                                                                                                                       |   110                 110
      Matrix Array{Union{Missing, String},2} with no missing values                                                                                                                       |   110                 110
      Matrix with missing values                                                                                                                                                          |   164                 164
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Missing}                                        |    24                  24
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Missing}                                        |    24                  24
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Missing}                                        |    24                  24
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Missing}                                        |    24                  24
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Missing}                                        |    24                  24
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},2,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Missing}                                        |    24                  24
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},2,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Missing}                                        |    24                  24
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},2,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Missing}                                        |    24                  24
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},2,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Missing}                                        |    24                  24
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},2,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Missing}                                        |    24                  24
    conversion reftype=UInt8                                                                                                                                                              |  1244    16      2   1262
      conversion of Array{String,1}                                                                                                                                                       |   179     8      1    188
        Vector with no missing values                                                                                                                                                     |   179     8      1    188
          categorical(Array{String,1}, compress=true) R1=UInt32 R2=UInt8                                                                                                                  |    10                  10
          categorical(Array{String,1}, compress=false) R1=UInt32 R2=UInt32                                                                                                                |    10                  10
          categorical(CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt8,String,CategoricalArrays.CategoricalString{UInt8},Missing}, compress=true) R1=UInt8 R2=UInt8      |    10                  10
          categorical(CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt8,String,CategoricalArrays.CategoricalString{UInt8},Missing}, compress=false) R1=UInt8 R2=UInt8     |    10                  10
      conversion of Array{Union{Missing, String},1}                                                                                                                                       |   179     8      1    188
        Vector with no missing values                                                                                                                                                     |   179     8      1    188
          categorical(Array{Union{Missing, String},1}, compress=true) R1=UInt32 R2=UInt8                                                                                                  |    10                  10
          categorical(Array{Union{Missing, String},1}, compress=false) R1=UInt32 R2=UInt32                                                                                                |    10                  10
          categorical(CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt8,String,CategoricalArrays.CategoricalString{UInt8},Missing}, compress=true) R1=UInt8 R2=UInt8      |    10                  10
          categorical(CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt8,String,CategoricalArrays.CategoricalString{UInt8},Missing}, compress=false) R1=UInt8 R2=UInt8     |    10                  10
      Vector with missing values                                                                                                                                                          |   106                 106
      Vector created from range                                                                                                                                                           |   156                 156
      Matrix Array{String,2} with no missing values                                                                                                                                       |   110                 110
      Matrix Array{Union{Missing, String},2} with no missing values                                                                                                                       |   110                 110
      Matrix with missing values                                                                                                                                                          |   164                 164
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Missing}                                        |    24                  24
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Missing}                                        |    24                  24
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt8,String,CategoricalArrays.CategoricalString{UInt8},Missing}                                          |    24                  24
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Missing}                                        |    24                  24
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt8,String,CategoricalArrays.CategoricalString{UInt8},Missing}                                          |    24                  24
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},2,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Missing}                                        |    24                  24
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},2,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Missing}                                        |    24                  24
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},2,UInt8,String,CategoricalArrays.CategoricalString{UInt8},Missing}                                          |    24                  24
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},2,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Missing}                                        |    24                  24
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},2,UInt8,String,CategoricalArrays.CategoricalString{UInt8},Missing}                                          |    24                  24
    conversion reftype=UInt64                                                                                                                                                             |  1244    16      2   1262
      conversion of Array{String,1}                                                                                                                                                       |   179     8      1    188
        Vector with no missing values                                                                                                                                                     |   179     8      1    188
          categorical(Array{String,1}, compress=true) R1=UInt32 R2=UInt8                                                                                                                  |    10                  10
          categorical(Array{String,1}, compress=false) R1=UInt32 R2=UInt32                                                                                                                |    10                  10
          categorical(CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt64,String,CategoricalArrays.CategoricalString{UInt64},Missing}, compress=true) R1=UInt64 R2=UInt8   |    10                  10
          categorical(CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt64,String,CategoricalArrays.CategoricalString{UInt64},Missing}, compress=false) R1=UInt64 R2=UInt64 |    10                  10
      conversion of Array{Union{Missing, String},1}                                                                                                                                       |   179     8      1    188
        Vector with no missing values                                                                                                                                                     |   179     8      1    188
          categorical(Array{Union{Missing, String},1}, compress=true) R1=UInt32 R2=UInt8                                                                                                  |    10                  10
          categorical(Array{Union{Missing, String},1}, compress=false) R1=UInt32 R2=UInt32                                                                                                |    10                  10
          categorical(CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt64,String,CategoricalArrays.CategoricalString{UInt64},Missing}, compress=true) R1=UInt64 R2=UInt8   |    10                  10
          categorical(CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt64,String,CategoricalArrays.CategoricalString{UInt64},Missing}, compress=false) R1=UInt64 R2=UInt64 |    10                  10
      Vector with missing values                                                                                                                                                          |   106                 106
      Vector created from range                                                                                                                                                           |   156                 156
      Matrix Array{String,2} with no missing values                                                                                                                                       |   110                 110
      Matrix Array{Union{Missing, String},2} with no missing values                                                                                                                       |   110                 110
      Matrix with missing values                                                                                                                                                          |   164                 164
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Missing}                                        |    24                  24
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Missing}                                        |    24                  24
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt64,String,CategoricalArrays.CategoricalString{UInt64},Missing}                                        |    24                  24
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Missing}                                        |    24                  24
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt64,String,CategoricalArrays.CategoricalString{UInt64},Missing}                                        |    24                  24
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},2,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Missing}                                        |    24                  24
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},2,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Missing}                                        |    24                  24
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},2,UInt64,String,CategoricalArrays.CategoricalString{UInt64},Missing}                                        |    24                  24
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},2,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Missing}                                        |    24                  24
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},2,UInt64,String,CategoricalArrays.CategoricalString{UInt64},Missing}                                        |    24                  24
    conversion reftype=Int8                                                                                                                                                               |  1244    16      2   1262
      conversion of Array{String,1}                                                                                                                                                       |   179     8      1    188
        Vector with no missing values                                                                                                                                                     |   179     8      1    188
          categorical(Array{String,1}, compress=true) R1=UInt32 R2=UInt8                                                                                                                  |    10                  10
          categorical(Array{String,1}, compress=false) R1=UInt32 R2=UInt32                                                                                                                |    10                  10
          categorical(CategoricalArrays.CategoricalArray{Union{Missing, String},1,Int8,String,CategoricalArrays.CategoricalString{Int8},Missing}, compress=true) R1=Int8 R2=UInt8         |    10                  10
          categorical(CategoricalArrays.CategoricalArray{Union{Missing, String},1,Int8,String,CategoricalArrays.CategoricalString{Int8},Missing}, compress=false) R1=Int8 R2=Int8         |    10                  10
      conversion of Array{Union{Missing, String},1}                                                                                                                                       |   179     8      1    188
        Vector with no missing values                                                                                                                                                     |   179     8      1    188
          categorical(Array{Union{Missing, String},1}, compress=true) R1=UInt32 R2=UInt8                                                                                                  |    10                  10
          categorical(Array{Union{Missing, String},1}, compress=false) R1=UInt32 R2=UInt32                                                                                                |    10                  10
          categorical(CategoricalArrays.CategoricalArray{Union{Missing, String},1,Int8,String,CategoricalArrays.CategoricalString{Int8},Missing}, compress=true) R1=Int8 R2=UInt8         |    10                  10
          categorical(CategoricalArrays.CategoricalArray{Union{Missing, String},1,Int8,String,CategoricalArrays.CategoricalString{Int8},Missing}, compress=false) R1=Int8 R2=Int8         |    10                  10
      Vector with missing values                                                                                                                                                          |   106                 106
      Vector created from range                                                                                                                                                           |   156                 156
      Matrix Array{String,2} with no missing values                                                                                                                                       |   110                 110
      Matrix Array{Union{Missing, String},2} with no missing values                                                                                                                       |   110                 110
      Matrix with missing values                                                                                                                                                          |   164                 164
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Missing}                                        |    24                  24
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Missing}                                        |    24                  24
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},1,Int8,String,CategoricalArrays.CategoricalString{Int8},Missing}                                            |    24                  24
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Missing}                                        |    24                  24
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},1,Int8,String,CategoricalArrays.CategoricalString{Int8},Missing}                                            |    24                  24
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},2,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Missing}                                        |    24                  24
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},2,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Missing}                                        |    24                  24
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},2,Int8,String,CategoricalArrays.CategoricalString{Int8},Missing}                                            |    24                  24
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},2,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Missing}                                        |    24                  24
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},2,Int8,String,CategoricalArrays.CategoricalString{Int8},Missing}                                            |    24                  24
    conversion reftype=Int64                                                                                                                                                              |  1244    16      2   1262
      conversion of Array{String,1}                                                                                                                                                       |   179     8      1    188
        Vector with no missing values                                                                                                                                                     |   179     8      1    188
          categorical(Array{String,1}, compress=true) R1=UInt32 R2=UInt8                                                                                                                  |    10                  10
          categorical(Array{String,1}, compress=false) R1=UInt32 R2=UInt32                                                                                                                |    10                  10
          categorical(CategoricalArrays.CategoricalArray{Union{Missing, String},1,Int64,String,CategoricalArrays.CategoricalString{Int64},Missing}, compress=true) R1=Int64 R2=UInt8      |    10                  10
          categorical(CategoricalArrays.CategoricalArray{Union{Missing, String},1,Int64,String,CategoricalArrays.CategoricalString{Int64},Missing}, compress=false) R1=Int64 R2=Int64     |    10                  10
      conversion of Array{Union{Missing, String},1}                                                                                                                                       |   179     8      1    188
        Vector with no missing values                                                                                                                                                     |   179     8      1    188
          categorical(Array{Union{Missing, String},1}, compress=true) R1=UInt32 R2=UInt8                                                                                                  |    10                  10
          categorical(Array{Union{Missing, String},1}, compress=false) R1=UInt32 R2=UInt32                                                                                                |    10                  10
          categorical(CategoricalArrays.CategoricalArray{Union{Missing, String},1,Int64,String,CategoricalArrays.CategoricalString{Int64},Missing}, compress=true) R1=Int64 R2=UInt8      |    10                  10
          categorical(CategoricalArrays.CategoricalArray{Union{Missing, String},1,Int64,String,CategoricalArrays.CategoricalString{Int64},Missing}, compress=false) R1=Int64 R2=Int64     |    10                  10
      Vector with missing values                                                                                                                                                          |   106                 106
      Vector created from range                                                                                                                                                           |   156                 156
      Matrix Array{String,2} with no missing values                                                                                                                                       |   110                 110
      Matrix Array{Union{Missing, String},2} with no missing values                                                                                                                       |   110                 110
      Matrix with missing values                                                                                                                                                          |   164                 164
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Missing}                                        |    24                  24
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Missing}                                        |    24                  24
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},1,Int64,String,CategoricalArrays.CategoricalString{Int64},Missing}                                          |    24                  24
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Missing}                                        |    24                  24
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},1,Int64,String,CategoricalArrays.CategoricalString{Int64},Missing}                                          |    24                  24
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},2,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Missing}                                        |    24                  24
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},2,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Missing}                                        |    24                  24
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},2,Int64,String,CategoricalArrays.CategoricalString{Int64},Missing}                                          |    24                  24
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},2,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Missing}                                        |    24                  24
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},2,Int64,String,CategoricalArrays.CategoricalString{Int64},Missing}                                          |    24                  24
  conversion ordered=true                                                                                                                                                                 |  6380    80     10   6470
    conversion reftype=UInt32                                                                                                                                                             |  1276    16      2   1294
      conversion of Array{String,1}                                                                                                                                                       |   177     8      1    186
        Vector with no missing values                                                                                                                                                     |   177     8      1    186
          categorical(Array{String,1}, compress=true) R1=UInt32 R2=UInt8                                                                                                                  |    10                  10
          categorical(Array{String,1}, compress=false) R1=UInt32 R2=UInt32                                                                                                                |    10                  10
          categorical(CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Missing}, compress=true) R1=UInt32 R2=UInt8   |    10                  10
          categorical(CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Missing}, compress=false) R1=UInt32 R2=UInt32 |    10                  10
      conversion of Array{Union{Missing, String},1}                                                                                                                                       |   177     8      1    186
        Vector with no missing values                                                                                                                                                     |   177     8      1    186
          categorical(Array{Union{Missing, String},1}, compress=true) R1=UInt32 R2=UInt8                                                                                                  |    10                  10
          categorical(Array{Union{Missing, String},1}, compress=false) R1=UInt32 R2=UInt32                                                                                                |    10                  10
          categorical(CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Missing}, compress=true) R1=UInt32 R2=UInt8   |    10                  10
          categorical(CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Missing}, compress=false) R1=UInt32 R2=UInt32 |    10                  10
      Vector with missing values                                                                                                                                                          |   107                 107
      Vector created from range                                                                                                                                                           |   158                 158
      Matrix Array{String,2} with no missing values                                                                                                                                       |   111                 111
      Matrix Array{Union{Missing, String},2} with no missing values                                                                                                                       |   111                 111
      Matrix with missing values                                                                                                                                                          |   165                 165
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Missing}                                        |    27                  27
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Missing}                                        |    27                  27
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Missing}                                        |    27                  27
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Missing}                                        |    27                  27
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Missing}                                        |    27                  27
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},2,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Missing}                                        |    27                  27
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},2,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Missing}                                        |    27                  27
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},2,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Missing}                                        |    27                  27
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},2,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Missing}                                        |    27                  27
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},2,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Missing}                                        |    27                  27
    conversion reftype=UInt8                                                                                                                                                              |  1276    16      2   1294
      conversion of Array{String,1}                                                                                                                                                       |   177     8      1    186
        Vector with no missing values                                                                                                                                                     |   177     8      1    186
          categorical(Array{String,1}, compress=true) R1=UInt32 R2=UInt8                                                                                                                  |    10                  10
          categorical(Array{String,1}, compress=false) R1=UInt32 R2=UInt32                                                                                                                |    10                  10
          categorical(CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt8,String,CategoricalArrays.CategoricalString{UInt8},Missing}, compress=true) R1=UInt8 R2=UInt8      |    10                  10
          categorical(CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt8,String,CategoricalArrays.CategoricalString{UInt8},Missing}, compress=false) R1=UInt8 R2=UInt8     |    10                  10
      conversion of Array{Union{Missing, String},1}                                                                                                                                       |   177     8      1    186
        Vector with no missing values                                                                                                                                                     |   177     8      1    186
          categorical(Array{Union{Missing, String},1}, compress=true) R1=UInt32 R2=UInt8                                                                                                  |    10                  10
          categorical(Array{Union{Missing, String},1}, compress=false) R1=UInt32 R2=UInt32                                                                                                |    10                  10
          categorical(CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt8,String,CategoricalArrays.CategoricalString{UInt8},Missing}, compress=true) R1=UInt8 R2=UInt8      |    10                  10
          categorical(CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt8,String,CategoricalArrays.CategoricalString{UInt8},Missing}, compress=false) R1=UInt8 R2=UInt8     |    10                  10
      Vector with missing values                                                                                                                                                          |   107                 107
      Vector created from range                                                                                                                                                           |   158                 158
      Matrix Array{String,2} with no missing values                                                                                                                                       |   111                 111
      Matrix Array{Union{Missing, String},2} with no missing values                                                                                                                       |   111                 111
      Matrix with missing values                                                                                                                                                          |   165                 165
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Missing}                                        |    27                  27
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Missing}                                        |    27                  27
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt8,String,CategoricalArrays.CategoricalString{UInt8},Missing}                                          |    27                  27
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Missing}                                        |    27                  27
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt8,String,CategoricalArrays.CategoricalString{UInt8},Missing}                                          |    27                  27
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},2,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Missing}                                        |    27                  27
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},2,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Missing}                                        |    27                  27
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},2,UInt8,String,CategoricalArrays.CategoricalString{UInt8},Missing}                                          |    27                  27
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},2,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Missing}                                        |    27                  27
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},2,UInt8,String,CategoricalArrays.CategoricalString{UInt8},Missing}                                          |    27                  27
    conversion reftype=UInt64                                                                                                                                                             |  1276    16      2   1294
      conversion of Array{String,1}                                                                                                                                                       |   177     8      1    186
        Vector with no missing values                                                                                                                                                     |   177     8      1    186
          categorical(Array{String,1}, compress=true) R1=UInt32 R2=UInt8                                                                                                                  |    10                  10
          categorical(Array{String,1}, compress=false) R1=UInt32 R2=UInt32                                                                                                                |    10                  10
          categorical(CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt64,String,CategoricalArrays.CategoricalString{UInt64},Missing}, compress=true) R1=UInt64 R2=UInt8   |    10                  10
          categorical(CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt64,String,CategoricalArrays.CategoricalString{UInt64},Missing}, compress=false) R1=UInt64 R2=UInt64 |    10                  10
      conversion of Array{Union{Missing, String},1}                                                                                                                                       |   177     8      1    186
        Vector with no missing values                                                                                                                                                     |   177     8      1    186
          categorical(Array{Union{Missing, String},1}, compress=true) R1=UInt32 R2=UInt8                                                                                                  |    10                  10
          categorical(Array{Union{Missing, String},1}, compress=false) R1=UInt32 R2=UInt32                                                                                                |    10                  10
          categorical(CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt64,String,CategoricalArrays.CategoricalString{UInt64},Missing}, compress=true) R1=UInt64 R2=UInt8   |    10                  10
          categorical(CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt64,String,CategoricalArrays.CategoricalString{UInt64},Missing}, compress=false) R1=UInt64 R2=UInt64 |    10                  10
      Vector with missing values                                                                                                                                                          |   107                 107
      Vector created from range                                                                                                                                                           |   158                 158
      Matrix Array{String,2} with no missing values                                                                                                                                       |   111                 111
      Matrix Array{Union{Missing, String},2} with no missing values                                                                                                                       |   111                 111
      Matrix with missing values                                                                                                                                                          |   165                 165
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Missing}                                        |    27                  27
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Missing}                                        |    27                  27
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt64,String,CategoricalArrays.CategoricalString{UInt64},Missing}                                        |    27                  27
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Missing}                                        |    27                  27
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt64,String,CategoricalArrays.CategoricalString{UInt64},Missing}                                        |    27                  27
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},2,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Missing}                                        |    27                  27
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},2,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Missing}                                        |    27                  27
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},2,UInt64,String,CategoricalArrays.CategoricalString{UInt64},Missing}                                        |    27                  27
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},2,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Missing}                                        |    27                  27
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},2,UInt64,String,CategoricalArrays.CategoricalString{UInt64},Missing}                                        |    27                  27
    conversion reftype=Int8                                                                                                                                                               |  1276    16      2   1294
      conversion of Array{String,1}                                                                                                                                                       |   177     8      1    186
        Vector with no missing values                                                                                                                                                     |   177     8      1    186
          categorical(Array{String,1}, compress=true) R1=UInt32 R2=UInt8                                                                                                                  |    10                  10
          categorical(Array{String,1}, compress=false) R1=UInt32 R2=UInt32                                                                                                                |    10                  10
          categorical(CategoricalArrays.CategoricalArray{Union{Missing, String},1,Int8,String,CategoricalArrays.CategoricalString{Int8},Missing}, compress=true) R1=Int8 R2=UInt8         |    10                  10
          categorical(CategoricalArrays.CategoricalArray{Union{Missing, String},1,Int8,String,CategoricalArrays.CategoricalString{Int8},Missing}, compress=false) R1=Int8 R2=Int8         |    10                  10
      conversion of Array{Union{Missing, String},1}                                                                                                                                       |   177     8      1    186
        Vector with no missing values                                                                                                                                                     |   177     8      1    186
          categorical(Array{Union{Missing, String},1}, compress=true) R1=UInt32 R2=UInt8                                                                                                  |    10                  10
          categorical(Array{Union{Missing, String},1}, compress=false) R1=UInt32 R2=UInt32                                                                                                |    10                  10
          categorical(CategoricalArrays.CategoricalArray{Union{Missing, String},1,Int8,String,CategoricalArrays.CategoricalString{Int8},Missing}, compress=true) R1=Int8 R2=UInt8         |    10                  10
          categorical(CategoricalArrays.CategoricalArray{Union{Missing, String},1,Int8,String,CategoricalArrays.CategoricalString{Int8},Missing}, compress=false) R1=Int8 R2=Int8         |    10                  10
      Vector with missing values                                                                                                                                                          |   107                 107
      Vector created from range                                                                                                                                                           |   158                 158
      Matrix Array{String,2} with no missing values                                                                                                                                       |   111                 111
      Matrix Array{Union{Missing, String},2} with no missing values                                                                                                                       |   111                 111
      Matrix with missing values                                                                                                                                                          |   165                 165
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Missing}                                        |    27                  27
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Missing}                                        |    27                  27
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},1,Int8,String,CategoricalArrays.CategoricalString{Int8},Missing}                                            |    27                  27
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Missing}                                        |    27                  27
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},1,Int8,String,CategoricalArrays.CategoricalString{Int8},Missing}                                            |    27                  27
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},2,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Missing}                                        |    27                  27
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},2,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Missing}                                        |    27                  27
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},2,Int8,String,CategoricalArrays.CategoricalString{Int8},Missing}                                            |    27                  27
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},2,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Missing}                                        |    27                  27
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},2,Int8,String,CategoricalArrays.CategoricalString{Int8},Missing}                                            |    27                  27
    conversion reftype=Int64                                                                                                                                                              |  1276    16      2   1294
      conversion of Array{String,1}                                                                                                                                                       |   177     8      1    186
        Vector with no missing values                                                                                                                                                     |   177     8      1    186
          categorical(Array{String,1}, compress=true) R1=UInt32 R2=UInt8                                                                                                                  |    10                  10
          categorical(Array{String,1}, compress=false) R1=UInt32 R2=UInt32                                                                                                                |    10                  10
          categorical(CategoricalArrays.CategoricalArray{Union{Missing, String},1,Int64,String,CategoricalArrays.CategoricalString{Int64},Missing}, compress=true) R1=Int64 R2=UInt8      |    10                  10
          categorical(CategoricalArrays.CategoricalArray{Union{Missing, String},1,Int64,String,CategoricalArrays.CategoricalString{Int64},Missing}, compress=false) R1=Int64 R2=Int64     |    10                  10
      conversion of Array{Union{Missing, String},1}                                                                                                                                       |   177     8      1    186
        Vector with no missing values                                                                                                                                                     |   177     8      1    186
          categorical(Array{Union{Missing, String},1}, compress=true) R1=UInt32 R2=UInt8                                                                                                  |    10                  10
          categorical(Array{Union{Missing, String},1}, compress=false) R1=UInt32 R2=UInt32                                                                                                |    10                  10
          categorical(CategoricalArrays.CategoricalArray{Union{Missing, String},1,Int64,String,CategoricalArrays.CategoricalString{Int64},Missing}, compress=true) R1=Int64 R2=UInt8      |    10                  10
          categorical(CategoricalArrays.CategoricalArray{Union{Missing, String},1,Int64,String,CategoricalArrays.CategoricalString{Int64},Missing}, compress=false) R1=Int64 R2=Int64     |    10                  10
      Vector with missing values                                                                                                                                                          |   107                 107
      Vector created from range                                                                                                                                                           |   158                 158
      Matrix Array{String,2} with no missing values                                                                                                                                       |   111                 111
      Matrix Array{Union{Missing, String},2} with no missing values                                                                                                                       |   111                 111
      Matrix with missing values                                                                                                                                                          |   165                 165
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Missing}                                        |    27                  27
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Missing}                                        |    27                  27
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},1,Int64,String,CategoricalArrays.CategoricalString{Int64},Missing}                                          |    27                  27
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Missing}                                        |    27                  27
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},1,Int64,String,CategoricalArrays.CategoricalString{Int64},Missing}                                          |    27                  27
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},2,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Missing}                                        |    27                  27
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},2,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Missing}                                        |    27                  27
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},2,Int64,String,CategoricalArrays.CategoricalString{Int64},Missing}                                          |    27                  27
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},2,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Missing}                                        |    27                  27
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},2,Int64,String,CategoricalArrays.CategoricalString{Int64},Missing}                                          |    27                  27
  vcat with missings                                                                                                                                                                      |     6                   6
  vcat with all missings                                                                                                                                                                  |     5                   5
  vcat with all empty array                                                                                                                                                               |     3                   3
  vcat with all missings and empty                                                                                                                                                        |                  1      1
  unique() and levels()                                                                                                                                                                   |    23                  23
  Missings.replace should work on CategoricalArrays                                                                                                                                       |    11                  11
  Missings.replace should work on CategoricalArrays without missing values                                                                                                                |    10                  10
  Missings.replace should work on CategoricalArrays with empty pools                                                                                                                      |     3                   3
  Missings.replace should work on empty CategoricalArrays                                                                                                                                 |     3                   3
Test Summary:                                                                                                                                                                             |  Pass  Fail  Error  Total
12_missingarray.jl                                                                                                                                                                        | 12664   160     21  12845
  conversion ordered=false                                                                                                                                                                |  6220    80     10   6310
    conversion reftype=UInt32                                                                                                                                                             |  1244    16      2   1262
      conversion of Array{String,1}                                                                                                                                                       |   179     8      1    188
        Vector with no missing values                                                                                                                                                     |   179     8      1    188
          categorical(Array{String,1}, compress=true) R1=UInt32 R2=UInt8                                                                                                                  |    10                  10
          categorical(Array{String,1}, compress=false) R1=UInt32 R2=UInt32                                                                                                                |    10                  10
          categorical(CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Missing}, compress=true) R1=UInt32 R2=UInt8   |    10                  10
          categorical(CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Missing}, compress=false) R1=UInt32 R2=UInt32 |    10                  10
      conversion of Array{Union{Missing, String},1}                                                                                                                                       |   179     8      1    188
        Vector with no missing values                                                                                                                                                     |   179     8      1    188
          categorical(Array{Union{Missing, String},1}, compress=true) R1=UInt32 R2=UInt8                                                                                                  |    10                  10
          categorical(Array{Union{Missing, String},1}, compress=false) R1=UInt32 R2=UInt32                                                                                                |    10                  10
          categorical(CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Missing}, compress=true) R1=UInt32 R2=UInt8   |    10                  10
          categorical(CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Missing}, compress=false) R1=UInt32 R2=UInt32 |    10                  10
      Vector with missing values                                                                                                                                                          |   106                 106
      Vector created from range                                                                                                                                                           |   156                 156
      Matrix Array{String,2} with no missing values                                                                                                                                       |   110                 110
      Matrix Array{Union{Missing, String},2} with no missing values                                                                                                                       |   110                 110
      Matrix with missing values                                                                                                                                                          |   164                 164
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Missing}                                        |    24                  24
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Missing}                                        |    24                  24
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Missing}                                        |    24                  24
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Missing}                                        |    24                  24
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Missing}                                        |    24                  24
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},2,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Missing}                                        |    24                  24
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},2,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Missing}                                        |    24                  24
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},2,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Missing}                                        |    24                  24
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},2,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Missing}                                        |    24                  24
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},2,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Missing}                                        |    24                  24
    conversion reftype=UInt8                                                                                                                                                              |  1244    16      2   1262
      conversion of Array{String,1}                                                                                                                                                       |   179     8      1    188
        Vector with no missing values                                                                                                                                                     |   179     8      1    188
          categorical(Array{String,1}, compress=true) R1=UInt32 R2=UInt8                                                                                                                  |    10                  10
          categorical(Array{String,1}, compress=false) R1=UInt32 R2=UInt32                                                                                                                |    10                  10
          categorical(CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt8,String,CategoricalArrays.CategoricalString{UInt8},Missing}, compress=true) R1=UInt8 R2=UInt8      |    10                  10
          categorical(CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt8,String,CategoricalArrays.CategoricalString{UInt8},Missing}, compress=false) R1=UInt8 R2=UInt8     |    10                  10
      conversion of Array{Union{Missing, String},1}                                                                                                                                       |   179     8      1    188
        Vector with no missing values                                                                                                                                                     |   179     8      1    188
          categorical(Array{Union{Missing, String},1}, compress=true) R1=UInt32 R2=UInt8                                                                                                  |    10                  10
          categorical(Array{Union{Missing, String},1}, compress=false) R1=UInt32 R2=UInt32                                                                                                |    10                  10
          categorical(CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt8,String,CategoricalArrays.CategoricalString{UInt8},Missing}, compress=true) R1=UInt8 R2=UInt8      |    10                  10
          categorical(CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt8,String,CategoricalArrays.CategoricalString{UInt8},Missing}, compress=false) R1=UInt8 R2=UInt8     |    10                  10
      Vector with missing values                                                                                                                                                          |   106                 106
      Vector created from range                                                                                                                                                           |   156                 156
      Matrix Array{String,2} with no missing values                                                                                                                                       |   110                 110
      Matrix Array{Union{Missing, String},2} with no missing values                                                                                                                       |   110                 110
      Matrix with missing values                                                                                                                                                          |   164                 164
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Missing}                                        |    24                  24
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Missing}                                        |    24                  24
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt8,String,CategoricalArrays.CategoricalString{UInt8},Missing}                                          |    24                  24
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Missing}                                        |    24                  24
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt8,String,CategoricalArrays.CategoricalString{UInt8},Missing}                                          |    24                  24
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},2,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Missing}                                        |    24                  24
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},2,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Missing}                                        |    24                  24
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},2,UInt8,String,CategoricalArrays.CategoricalString{UInt8},Missing}                                          |    24                  24
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},2,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Missing}                                        |    24                  24
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},2,UInt8,String,CategoricalArrays.CategoricalString{UInt8},Missing}                                          |    24                  24
    conversion reftype=UInt64                                                                                                                                                             |  1244    16      2   1262
      conversion of Array{String,1}                                                                                                                                                       |   179     8      1    188
        Vector with no missing values                                                                                                                                                     |   179     8      1    188
          categorical(Array{String,1}, compress=true) R1=UInt32 R2=UInt8                                                                                                                  |    10                  10
          categorical(Array{String,1}, compress=false) R1=UInt32 R2=UInt32                                                                                                                |    10                  10
          categorical(CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt64,String,CategoricalArrays.CategoricalString{UInt64},Missing}, compress=true) R1=UInt64 R2=UInt8   |    10                  10
          categorical(CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt64,String,CategoricalArrays.CategoricalString{UInt64},Missing}, compress=false) R1=UInt64 R2=UInt64 |    10                  10
      conversion of Array{Union{Missing, String},1}                                                                                                                                       |   179     8      1    188
        Vector with no missing values                                                                                                                                                     |   179     8      1    188
          categorical(Array{Union{Missing, String},1}, compress=true) R1=UInt32 R2=UInt8                                                                                                  |    10                  10
          categorical(Array{Union{Missing, String},1}, compress=false) R1=UInt32 R2=UInt32                                                                                                |    10                  10
          categorical(CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt64,String,CategoricalArrays.CategoricalString{UInt64},Missing}, compress=true) R1=UInt64 R2=UInt8   |    10                  10
          categorical(CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt64,String,CategoricalArrays.CategoricalString{UInt64},Missing}, compress=false) R1=UInt64 R2=UInt64 |    10                  10
      Vector with missing values                                                                                                                                                          |   106                 106
      Vector created from range                                                                                                                                                           |   156                 156
      Matrix Array{String,2} with no missing values                                                                                                                                       |   110                 110
      Matrix Array{Union{Missing, String},2} with no missing values                                                                                                                       |   110                 110
      Matrix with missing values                                                                                                                                                          |   164                 164
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Missing}                                        |    24                  24
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Missing}                                        |    24                  24
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt64,String,CategoricalArrays.CategoricalString{UInt64},Missing}                                        |    24                  24
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Missing}                                        |    24                  24
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt64,String,CategoricalArrays.CategoricalString{UInt64},Missing}                                        |    24                  24
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},2,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Missing}                                        |    24                  24
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},2,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Missing}                                        |    24                  24
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},2,UInt64,String,CategoricalArrays.CategoricalString{UInt64},Missing}                                        |    24                  24
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},2,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Missing}                                        |    24                  24
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},2,UInt64,String,CategoricalArrays.CategoricalString{UInt64},Missing}                                        |    24                  24
    conversion reftype=Int8                                                                                                                                                               |  1244    16      2   1262
      conversion of Array{String,1}                                                                                                                                                       |   179     8      1    188
        Vector with no missing values                                                                                                                                                     |   179     8      1    188
          categorical(Array{String,1}, compress=true) R1=UInt32 R2=UInt8                                                                                                                  |    10                  10
          categorical(Array{String,1}, compress=false) R1=UInt32 R2=UInt32                                                                                                                |    10                  10
          categorical(CategoricalArrays.CategoricalArray{Union{Missing, String},1,Int8,String,CategoricalArrays.CategoricalString{Int8},Missing}, compress=true) R1=Int8 R2=UInt8         |    10                  10
          categorical(CategoricalArrays.CategoricalArray{Union{Missing, String},1,Int8,String,CategoricalArrays.CategoricalString{Int8},Missing}, compress=false) R1=Int8 R2=Int8         |    10                  10
      conversion of Array{Union{Missing, String},1}                                                                                                                                       |   179     8      1    188
        Vector with no missing values                                                                                                                                                     |   179     8      1    188
          categorical(Array{Union{Missing, String},1}, compress=true) R1=UInt32 R2=UInt8                                                                                                  |    10                  10
          categorical(Array{Union{Missing, String},1}, compress=false) R1=UInt32 R2=UInt32                                                                                                |    10                  10
          categorical(CategoricalArrays.CategoricalArray{Union{Missing, String},1,Int8,String,CategoricalArrays.CategoricalString{Int8},Missing}, compress=true) R1=Int8 R2=UInt8         |    10                  10
          categorical(CategoricalArrays.CategoricalArray{Union{Missing, String},1,Int8,String,CategoricalArrays.CategoricalString{Int8},Missing}, compress=false) R1=Int8 R2=Int8         |    10                  10
      Vector with missing values                                                                                                                                                          |   106                 106
      Vector created from range                                                                                                                                                           |   156                 156
      Matrix Array{String,2} with no missing values                                                                                                                                       |   110                 110
      Matrix Array{Union{Missing, String},2} with no missing values                                                                                                                       |   110                 110
      Matrix with missing values                                                                                                                                                          |   164                 164
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Missing}                                        |    24                  24
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Missing}                                        |    24                  24
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},1,Int8,String,CategoricalArrays.CategoricalString{Int8},Missing}                                            |    24                  24
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Missing}                                        |    24                  24
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},1,Int8,String,CategoricalArrays.CategoricalString{Int8},Missing}                                            |    24                  24
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},2,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Missing}                                        |    24                  24
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},2,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Missing}                                        |    24                  24
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},2,Int8,String,CategoricalArrays.CategoricalString{Int8},Missing}                                            |    24                  24
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},2,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Missing}                                        |    24                  24
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},2,Int8,String,CategoricalArrays.CategoricalString{Int8},Missing}                                            |    24                  24
    conversion reftype=Int64                                                                                                                                                              |  1244    16      2   1262
      conversion of Array{String,1}                                                                                                                                                       |   179     8      1    188
        Vector with no missing values                                                                                                                                                     |   179     8      1    188
          categorical(Array{String,1}, compress=true) R1=UInt32 R2=UInt8                                                                                                                  |    10                  10
          categorical(Array{String,1}, compress=false) R1=UInt32 R2=UInt32                                                                                                                |    10                  10
          categorical(CategoricalArrays.CategoricalArray{Union{Missing, String},1,Int64,String,CategoricalArrays.CategoricalString{Int64},Missing}, compress=true) R1=Int64 R2=UInt8      |    10                  10
          categorical(CategoricalArrays.CategoricalArray{Union{Missing, String},1,Int64,String,CategoricalArrays.CategoricalString{Int64},Missing}, compress=false) R1=Int64 R2=Int64     |    10                  10
      conversion of Array{Union{Missing, String},1}                                                                                                                                       |   179     8      1    188
        Vector with no missing values                                                                                                                                                     |   179     8      1    188
          categorical(Array{Union{Missing, String},1}, compress=true) R1=UInt32 R2=UInt8                                                                                                  |    10                  10
          categorical(Array{Union{Missing, String},1}, compress=false) R1=UInt32 R2=UInt32                                                                                                |    10                  10
          categorical(CategoricalArrays.CategoricalArray{Union{Missing, String},1,Int64,String,CategoricalArrays.CategoricalString{Int64},Missing}, compress=true) R1=Int64 R2=UInt8      |    10                  10
          categorical(CategoricalArrays.CategoricalArray{Union{Missing, String},1,Int64,String,CategoricalArrays.CategoricalString{Int64},Missing}, compress=false) R1=Int64 R2=Int64     |    10                  10
      Vector with missing values                                                                                                                                                          |   106                 106
      Vector created from range                                                                                                                                                           |   156                 156
      Matrix Array{String,2} with no missing values                                                                                                                                       |   110                 110
      Matrix Array{Union{Missing, String},2} with no missing values                                                                                                                       |   110                 110
      Matrix with missing values                                                                                                                                                          |   164                 164
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Missing}                                        |    24                  24
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Missing}                                        |    24                  24
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},1,Int64,String,CategoricalArrays.CategoricalString{Int64},Missing}                                          |    24                  24
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Missing}                                        |    24                  24
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},1,Int64,String,CategoricalArrays.CategoricalString{Int64},Missing}                                          |    24                  24
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},2,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Missing}                                        |    24                  24
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},2,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Missing}                                        |    24                  24
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},2,Int64,String,CategoricalArrays.CategoricalString{Int64},Missing}                                          |    24                  24
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},2,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Missing}                                        |    24                  24
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},2,Int64,String,CategoricalArrays.CategoricalString{Int64},Missing}                                          |    24                  24
  conversion ordered=true                                                                                                                                                                 |  6380    80     10   6470
    conversion reftype=UInt32                                                                                                                                                             |  1276    16      2   1294
      conversion of Array{String,1}                                                                                                                                                       |   177     8      1    186
        Vector with no missing values                                                                                                                                                     |   177     8      1    186
          categorical(Array{String,1}, compress=true) R1=UInt32 R2=UInt8                                                                                                                  |    10                  10
          categorical(Array{String,1}, compress=false) R1=UInt32 R2=UInt32                                                                                                                |    10                  10
          categorical(CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Missing}, compress=true) R1=UInt32 R2=UInt8   |    10                  10
          categorical(CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Missing}, compress=false) R1=UInt32 R2=UInt32 |    10                  10
      conversion of Array{Union{Missing, String},1}                                                                                                                                       |   177     8      1    186
        Vector with no missing values                                                                                                                                                     |   177     8      1    186
          categorical(Array{Union{Missing, String},1}, compress=true) R1=UInt32 R2=UInt8                                                                                                  |    10                  10
          categorical(Array{Union{Missing, String},1}, compress=false) R1=UInt32 R2=UInt32                                                                                                |    10                  10
          categorical(CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Missing}, compress=true) R1=UInt32 R2=UInt8   |    10                  10
          categorical(CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Missing}, compress=false) R1=UInt32 R2=UInt32 |    10                  10
      Vector with missing values                                                                                                                                                          |   107                 107
      Vector created from range                                                                                                                                                           |   158                 158
      Matrix Array{String,2} with no missing values                                                                                                                                       |   111                 111
      Matrix Array{Union{Missing, String},2} with no missing values                                                                                                                       |   111                 111
      Matrix with missing values                                                                                                                                                          |   165                 165
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Missing}                                        |    27                  27
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Missing}                                        |    27                  27
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Missing}                                        |    27                  27
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Missing}                                        |    27                  27
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Missing}                                        |    27                  27
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},2,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Missing}                                        |    27                  27
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},2,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Missing}                                        |    27                  27
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},2,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Missing}                                        |    27                  27
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},2,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Missing}                                        |    27                  27
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},2,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Missing}                                        |    27                  27
    conversion reftype=UInt8                                                                                                                                                              |  1276    16      2   1294
      conversion of Array{String,1}                                                                                                                                                       |   177     8      1    186
        Vector with no missing values                                                                                                                                                     |   177     8      1    186
          categorical(Array{String,1}, compress=true) R1=UInt32 R2=UInt8                                                                                                                  |    10                  10
          categorical(Array{String,1}, compress=false) R1=UInt32 R2=UInt32                                                                                                                |    10                  10
          categorical(CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt8,String,CategoricalArrays.CategoricalString{UInt8},Missing}, compress=true) R1=UInt8 R2=UInt8      |    10                  10
          categorical(CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt8,String,CategoricalArrays.CategoricalString{UInt8},Missing}, compress=false) R1=UInt8 R2=UInt8     |    10                  10
      conversion of Array{Union{Missing, String},1}                                                                                                                                       |   177     8      1    186
        Vector with no missing values                                                                                                                                                     |   177     8      1    186
          categorical(Array{Union{Missing, String},1}, compress=true) R1=UInt32 R2=UInt8                                                                                                  |    10                  10
          categorical(Array{Union{Missing, String},1}, compress=false) R1=UInt32 R2=UInt32                                                                                                |    10                  10
          categorical(CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt8,String,CategoricalArrays.CategoricalString{UInt8},Missing}, compress=true) R1=UInt8 R2=UInt8      |    10                  10
          categorical(CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt8,String,CategoricalArrays.CategoricalString{UInt8},Missing}, compress=false) R1=UInt8 R2=UInt8     |    10                  10
      Vector with missing values                                                                                                                                                          |   107                 107
      Vector created from range                                                                                                                                                           |   158                 158
      Matrix Array{String,2} with no missing values                                                                                                                                       |   111                 111
      Matrix Array{Union{Missing, String},2} with no missing values                                                                                                                       |   111                 111
      Matrix with missing values                                                                                                                                                          |   165                 165
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Missing}                                        |    27                  27
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Missing}                                        |    27                  27
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt8,String,CategoricalArrays.CategoricalString{UInt8},Missing}                                          |    27                  27
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Missing}                                        |    27                  27
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt8,String,CategoricalArrays.CategoricalString{UInt8},Missing}                                          |    27                  27
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},2,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Missing}                                        |    27                  27
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},2,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Missing}                                        |    27                  27
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},2,UInt8,String,CategoricalArrays.CategoricalString{UInt8},Missing}                                          |    27                  27
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},2,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Missing}                                        |    27                  27
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},2,UInt8,String,CategoricalArrays.CategoricalString{UInt8},Missing}                                          |    27                  27
    conversion reftype=UInt64                                                                                                                                                             |  1276    16      2   1294
      conversion of Array{String,1}                                                                                                                                                       |   177     8      1    186
        Vector with no missing values                                                                                                                                                     |   177     8      1    186
          categorical(Array{String,1}, compress=true) R1=UInt32 R2=UInt8                                                                                                                  |    10                  10
          categorical(Array{String,1}, compress=false) R1=UInt32 R2=UInt32                                                                                                                |    10                  10
          categorical(CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt64,String,CategoricalArrays.CategoricalString{UInt64},Missing}, compress=true) R1=UInt64 R2=UInt8   |    10                  10
          categorical(CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt64,String,CategoricalArrays.CategoricalString{UInt64},Missing}, compress=false) R1=UInt64 R2=UInt64 |    10                  10
      conversion of Array{Union{Missing, String},1}                                                                                                                                       |   177     8      1    186
        Vector with no missing values                                                                                                                                                     |   177     8      1    186
          categorical(Array{Union{Missing, String},1}, compress=true) R1=UInt32 R2=UInt8                                                                                                  |    10                  10
          categorical(Array{Union{Missing, String},1}, compress=false) R1=UInt32 R2=UInt32                                                                                                |    10                  10
          categorical(CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt64,String,CategoricalArrays.CategoricalString{UInt64},Missing}, compress=true) R1=UInt64 R2=UInt8   |    10                  10
          categorical(CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt64,String,CategoricalArrays.CategoricalString{UInt64},Missing}, compress=false) R1=UInt64 R2=UInt64 |    10                  10
      Vector with missing values                                                                                                                                                          |   107                 107
      Vector created from range                                                                                                                                                           |   158                 158
      Matrix Array{String,2} with no missing values                                                                                                                                       |   111                 111
      Matrix Array{Union{Missing, String},2} with no missing values                                                                                                                       |   111                 111
      Matrix with missing values                                                                                                                                                          |   165                 165
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Missing}                                        |    27                  27
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Missing}                                        |    27                  27
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt64,String,CategoricalArrays.CategoricalString{UInt64},Missing}                                        |    27                  27
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Missing}                                        |    27                  27
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt64,String,CategoricalArrays.CategoricalString{UInt64},Missing}                                        |    27                  27
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},2,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Missing}                                        |    27                  27
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},2,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Missing}                                        |    27                  27
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},2,UInt64,String,CategoricalArrays.CategoricalString{UInt64},Missing}                                        |    27                  27
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},2,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Missing}                                        |    27                  27
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},2,UInt64,String,CategoricalArrays.CategoricalString{UInt64},Missing}                                        |    27                  27
    conversion reftype=Int8                                                                                                                                                               |  1276    16      2   1294
      conversion of Array{String,1}                                                                                                                                                       |   177     8      1    186
        Vector with no missing values                                                                                                                                                     |   177     8      1    186
          categorical(Array{String,1}, compress=true) R1=UInt32 R2=UInt8                                                                                                                  |    10                  10
          categorical(Array{String,1}, compress=false) R1=UInt32 R2=UInt32                                                                                                                |    10                  10
          categorical(CategoricalArrays.CategoricalArray{Union{Missing, String},1,Int8,String,CategoricalArrays.CategoricalString{Int8},Missing}, compress=true) R1=Int8 R2=UInt8         |    10                  10
          categorical(CategoricalArrays.CategoricalArray{Union{Missing, String},1,Int8,String,CategoricalArrays.CategoricalString{Int8},Missing}, compress=false) R1=Int8 R2=Int8         |    10                  10
      conversion of Array{Union{Missing, String},1}                                                                                                                                       |   177     8      1    186
        Vector with no missing values                                                                                                                                                     |   177     8      1    186
          categorical(Array{Union{Missing, String},1}, compress=true) R1=UInt32 R2=UInt8                                                                                                  |    10                  10
          categorical(Array{Union{Missing, String},1}, compress=false) R1=UInt32 R2=UInt32                                                                                                |    10                  10
          categorical(CategoricalArrays.CategoricalArray{Union{Missing, String},1,Int8,String,CategoricalArrays.CategoricalString{Int8},Missing}, compress=true) R1=Int8 R2=UInt8         |    10                  10
          categorical(CategoricalArrays.CategoricalArray{Union{Missing, String},1,Int8,String,CategoricalArrays.CategoricalString{Int8},Missing}, compress=false) R1=Int8 R2=Int8         |    10                  10
      Vector with missing values                                                                                                                                                          |   107                 107
      Vector created from range                                                                                                                                                           |   158                 158
      Matrix Array{String,2} with no missing values                                                                                                                                       |   111                 111
      Matrix Array{Union{Missing, String},2} with no missing values                                                                                                                       |   111                 111
      Matrix with missing values                                                                                                                                                          |   165                 165
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Missing}                                        |    27                  27
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Missing}                                        |    27                  27
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},1,Int8,String,CategoricalArrays.CategoricalString{Int8},Missing}                                            |    27                  27
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Missing}                                        |    27                  27
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},1,Int8,String,CategoricalArrays.CategoricalString{Int8},Missing}                                            |    27                  27
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},2,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Missing}                                        |    27                  27
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},2,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Missing}                                        |    27                  27
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},2,Int8,String,CategoricalArrays.CategoricalString{Int8},Missing}                                            |    27                  27
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},2,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Missing}                                        |    27                  27
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},2,Int8,String,CategoricalArrays.CategoricalString{Int8},Missing}                                            |    27                  27
    conversion reftype=Int64                                                                                                                                                              |  1276    16      2   1294
      conversion of Array{String,1}                                                                                                                                                       |   177     8      1    186
        Vector with no missing values                                                                                                                                                     |   177     8      1    186
          categorical(Array{String,1}, compress=true) R1=UInt32 R2=UInt8                                                                                                                  |    10                  10
          categorical(Array{String,1}, compress=false) R1=UInt32 R2=UInt32                                                                                                                |    10                  10
          categorical(CategoricalArrays.CategoricalArray{Union{Missing, String},1,Int64,String,CategoricalArrays.CategoricalString{Int64},Missing}, compress=true) R1=Int64 R2=UInt8      |    10                  10
          categorical(CategoricalArrays.CategoricalArray{Union{Missing, String},1,Int64,String,CategoricalArrays.CategoricalString{Int64},Missing}, compress=false) R1=Int64 R2=Int64     |    10                  10
      conversion of Array{Union{Missing, String},1}                                                                                                                                       |   177     8      1    186
        Vector with no missing values                                                                                                                                                     |   177     8      1    186
          categorical(Array{Union{Missing, String},1}, compress=true) R1=UInt32 R2=UInt8                                                                                                  |    10                  10
          categorical(Array{Union{Missing, String},1}, compress=false) R1=UInt32 R2=UInt32                                                                                                |    10                  10
          categorical(CategoricalArrays.CategoricalArray{Union{Missing, String},1,Int64,String,CategoricalArrays.CategoricalString{Int64},Missing}, compress=true) R1=Int64 R2=UInt8      |    10                  10
          categorical(CategoricalArrays.CategoricalArray{Union{Missing, String},1,Int64,String,CategoricalArrays.CategoricalString{Int64},Missing}, compress=false) R1=Int64 R2=Int64     |    10                  10
      Vector with missing values                                                                                                                                                          |   107                 107
      Vector created from range                                                                                                                                                           |   158                 158
      Matrix Array{String,2} with no missing values                                                                                                                                       |   111                 111
      Matrix Array{Union{Missing, String},2} with no missing values                                                                                                                       |   111                 111
      Matrix with missing values                                                                                                                                                          |   165                 165
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Missing}                                        |    27                  27
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Missing}                                        |    27                  27
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},1,Int64,String,CategoricalArrays.CategoricalString{Int64},Missing}                                          |    27                  27
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Missing}                                        |    27                  27
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},1,Int64,String,CategoricalArrays.CategoricalString{Int64},Missing}                                          |    27                  27
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},2,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Missing}                                        |    27                  27
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},2,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Missing}                                        |    27                  27
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},2,Int64,String,CategoricalArrays.CategoricalString{Int64},Missing}                                          |    27                  27
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},2,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Missing}                                        |    27                  27
      Uninitialized CategoricalArrays.CategoricalArray{Union{Missing, String},2,Int64,String,CategoricalArrays.CategoricalString{Int64},Missing}                                          |    27                  27
  vcat with missings                                                                                                                                                                      |     6                   6
  vcat with all missings                                                                                                                                                                  |     5                   5
  vcat with all empty array                                                                                                                                                               |     3                   3
  vcat with all missings and empty                                                                                                                                                        |                  1      1
  unique() and levels()                                                                                                                                                                   |    23                  23
  Missings.replace should work on CategoricalArrays                                                                                                                                       |    11                  11
  Missings.replace should work on CategoricalArrays without missing values                                                                                                                |    10                  10
  Missings.replace should work on CategoricalArrays with empty pools                                                                                                                      |     3                   3
  Missings.replace should work on empty CategoricalArrays                                                                                                                                 |     3                   3
ERROR: LoadError: Some tests did not pass: 12664 passed, 160 failed, 21 errored, 0 broken.
in expression starting at /home/vagrant/.julia/v0.7/CategoricalArrays/test/runtests.jl:35
┌ Error: ------------------------------------------------------------
│ # Testing failed for CategoricalArrays
│   exception =
│    failed process: Process(`/home/vagrant/julia/bin/julia -Cnative -J/home/vagrant/julia/lib/julia/sys.so --compile=yes --depwarn=yes --code-coverage=none --color=no --compiled-modules=yes --check-bounds=yes --warn-overwrite=yes --startup-file=yes /home/vagrant/.julia/v0.7/CategoricalArrays/test/runtests.jl`, ProcessExited(1)) [1]
│    Stacktrace:
│     [1] error(::String, ::Base.Process, ::String, ::Int64, ::String) at ./error.jl:42
│     [2] pipeline_error(::Base.Process) at ./process.jl:693
│     [3] run(::Cmd) at ./process.jl:655
│     [4] (::getfield(Pkg.Entry, Symbol("##56#57")){Bool,String,Array{AbstractString,1}})() at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Pkg/src/entry.jl:731
│     [5] cd(::getfield(Pkg.Entry, Symbol("##56#57")){Bool,String,Array{AbstractString,1}}, ::String) at ./file.jl:72
│     [6] #test!#55(::Bool, ::Function, ::String, ::Array{AbstractString,1}, ::Array{AbstractString,1}, ::Array{AbstractString,1}) at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Pkg/src/entry.jl:719
│     [7] (::getfield(Pkg.Entry, Symbol("#kw##test!")))(::NamedTuple{(:coverage,),Tuple{Bool}}, ::typeof(Pkg.Entry.test!), ::String, ::Array{AbstractString,1}, ::Array{AbstractString,1}, ::Array{AbstractString,1}) at ./<missing>:0
│     [8] #test#59(::Bool, ::Function, ::Array{AbstractString,1}) at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Pkg/src/entry.jl:758
│     [9] #test at ./<missing>:0 [inlined]
│     [10] #4 at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Pkg/src/dir.jl:36 [inlined]
│     [11] cd(::getfield(Pkg.Dir, Symbol("##4#7")){Base.Iterators.Pairs{Symbol,Bool,Tuple{Symbol},NamedTuple{(:coverage,),Tuple{Bool}}},typeof(Pkg.Entry.test),Tuple{Array{AbstractString,1}}}, ::String) at ./file.jl:72
│     [12] #cd#1(::Base.Iterators.Pairs{Symbol,Bool,Tuple{Symbol},NamedTuple{(:coverage,),Tuple{Bool}}}, ::Function, ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N} where N) at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Pkg/src/dir.jl:36
│     [13] (::getfield(Pkg.Dir, Symbol("#kw##cd")))(::NamedTuple{(:coverage,),Tuple{Bool}}, ::typeof(Pkg.Dir.cd), ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N} where N) at ./<missing>:0
│     [14] #test#3(::Bool, ::Function, ::String, ::Vararg{String,N} where N) at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Pkg/src/Pkg.jl:277
│     [15] test(::String, ::Vararg{String,N} where N) at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Pkg/src/Pkg.jl:277
│     [16] top-level scope
│     [17] eval at ./boot.jl:298 [inlined]
│     [18] eval(::Module, ::Expr) at ./sysimg.jl:74
│     [19] exec_options(::Base.JLOptions) at ./client.jl:309
│     [20] _start() at ./client.jl:448
└ @ Pkg.Entry entry.jl:734
ERROR: CategoricalArrays had test errors

>>> End of log
