>>> 'Pkg.add("TimeSeries")' log
[ Info: Installing RecipesBase v0.2.3              @ Base.Pkg.Entry entry.jl:543
[ Info: Installing TimeSeries v0.11.1              @ Base.Pkg.Entry entry.jl:543
[ Info: Package database updated                    @ Base.Pkg.Entry entry.jl:32
┌ Info: METADATA is out-of-date — you may not have the latest version of TimeSeries
│ Use `Pkg.update()` to get the latest versions of your packages
└                                                   @ Base.Pkg.Entry entry.jl:74

>>> 'Pkg.test("TimeSeries")' log
Julia Version 0.7.0-DEV.3354
Commit 9b5eed2b6c (2018-01-09 08:03 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
      Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-135-generic #184-Ubuntu SMP Wed Oct 18 11:55:51 UTC 2017 x86_64 x86_64
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
              speed         user         nice          sys         idle          irq
       #1  3500 MHz    3668213 s        205 s     179984 s     710209 s         11 s
       #2  3500 MHz     511230 s       7117 s      59528 s    4856083 s          0 s
       
  Memory: 2.93927001953125 GB (652.0703125 MB free)
  Uptime: 55041.0 sec
  Load Avg:  1.10400390625  1.03857421875  0.97607421875
  WORD_SIZE: 64
  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant
Packages:
  Package Directory: /home/vagrant/.julia/v0.7
  Package Status:
2 required packages:
 - JSON                          0.16.3
 - TimeSeries                    0.11.1
4 additional packages:
 - Compat                        0.44.0
 - Nullables                     0.0.2
 - RecipesBase                   0.2.3
 - tmpheHvae                     0.0.0-             non-repo (unregistered)
┌ Info: Computing test dependencies for TimeSeries...
└                                                  @ Base.Pkg.Entry entry.jl:713
[ Info: Installing BinDeps v0.8.2                  @ Base.Pkg.Entry entry.jl:543
[ Info: Installing BufferedStreams v0.3.3          @ Base.Pkg.Entry entry.jl:543
[ Info: Installing Codecs v0.4.0                   @ Base.Pkg.Entry entry.jl:543
[ Info: Installing HttpCommon v0.3.0               @ Base.Pkg.Entry entry.jl:543
[ Info: Installing HttpParser v0.3.0               @ Base.Pkg.Entry entry.jl:543
[ Info: Installing Libz v0.2.4                     @ Base.Pkg.Entry entry.jl:543
[ Info: Installing MarketData v0.6.0               @ Base.Pkg.Entry entry.jl:543
[ Info: Installing MbedTLS v0.5.3                  @ Base.Pkg.Entry entry.jl:543
[ Info: Installing Requests v0.5.1                 @ Base.Pkg.Entry entry.jl:543
[ Info: Installing SHA v0.5.2                      @ Base.Pkg.Entry entry.jl:543
[ Info: Installing URIParser v0.3.0                @ Base.Pkg.Entry entry.jl:543
[ Info: Building HttpParser                                       @ Main none:10
┌ Warning: `is_windows` is deprecated, use `Sys.iswindows` instead.
│   caller = top-level scope
└                                                                      @ Core :0
┌ Warning: `is_unix` is deprecated, use `Sys.isunix` instead.
│   caller = top-level scope
└                                                                      @ Core :0
┌ Error: ------------------------------------------------------------
│ # Build failed for HttpParser
│   exception =
│    LoadError: TypeError: in Type{...} expression, expected UnionAll, got Type{BinDeps.MakeTargets}
│    Stacktrace:
│     [1] (::getfield(BinDeps, Symbol("##MakeTargets#2#6")))(::Dict{String,String}, ::Type, ::Array{String,1}) at /home/vagrant/.julia/v0.7/BinDeps/src/BinDeps.jl:182
│     [2] (::getfield(Core, Symbol("#kw#Type")))(::NamedTuple{(:env,),Tuple{Dict{String,String}}}, ::Type{BinDeps.MakeTargets}, ::Array{String,1}) at ./<missing>:0
│     [3] macro expansion at /home/vagrant/.julia/v0.7/BinDeps/src/BinDeps.jl:274 [inlined]
│     [4] top-level scope at /home/vagrant/.julia/v0.7/HttpParser/deps/build.jl:43
│     [5] include at ./boot.jl:293 [inlined]
│     [6] include_relative(::Module, ::String) at ./loading.jl:521
│     [7] include at ./sysimg.jl:26 [inlined]
│     [8] include(::String) at ./loading.jl:555
│     [9] top-level scope
│     [10] eval at ./boot.jl:296 [inlined]
│     [11] eval at ./sysimg.jl:71 [inlined]
│     [12] evalfile(::String, ::Array{String,1}) at ./loading.jl:550 (repeats 2 times)
│     [13] #2 at ./none:12 [inlined]
│     [14] cd(::getfield(, Symbol("##2#5")){String}, ::String) at ./file.jl:70
│     [15] (::getfield(, Symbol("##1#3")))(::IOStream) at ./none:11
│     [16] open(::getfield(, Symbol("##1#3")), ::String, ::String) at ./iostream.jl:310
│     [17] top-level scope
│     [18] eval at ./boot.jl:296 [inlined]
│     [19] eval(::Module, ::Expr) at ./sysimg.jl:71
│     [20] process_options(::Base.JLOptions) at ./client.jl:301
│     [21] _start() at ./client.jl:375
│    in expression starting at /home/vagrant/.julia/v0.7/HttpParser/deps/build.jl:274
└                                                                 @ Main none:15
[ Info: Building MbedTLS                                          @ Main none:10
Using system libraries...
WARNING: importing deprecated binding Base.Associative into BinDeps.
WARNING: Base.Associative is deprecated, use AbstractDict instead.
  likely near /home/vagrant/.julia/v0.7/MbedTLS/deps/build.jl:45
in @install at /home/vagrant/.julia/v0.7/BinDeps/src/dependencies.jl
ERROR: KeyError: key :BinDeps not found
Stacktrace:
 [1] getindex at ./abstractdict.jl:491 [inlined]
 [2] root_module(::Symbol) at ./loading.jl:375
 [3] deserialize_module(::SerializationState{IOStream}) at ./serialize.jl:840
 [4] handle_deserialize(::SerializationState{IOStream}, ::Int32) at ./serialize.jl:775
 [5] deserialize(::SerializationState{IOStream}) at ./serialize.jl:714
 [6] deserialize_datatype(::SerializationState{IOStream}, ::Bool) at ./serialize.jl:1061
 [7] handle_deserialize(::SerializationState{IOStream}, ::Int32) at ./serialize.jl:754
 [8] deserialize(::SerializationState{IOStream}, ::DataType) at ./serialize.jl:1168
 [9] handle_deserialize(::SerializationState{IOStream}, ::Int32) at ./serialize.jl:762
 [10] deserialize(::SerializationState{IOStream}, ::DataType) at ./serialize.jl:1168
 [11] handle_deserialize(::SerializationState{IOStream}, ::Int32) at ./serialize.jl:762
 [12] deserialize(::SerializationState{IOStream}) at ./serialize.jl:714
 [13] handle_deserialize(::SerializationState{IOStream}, ::Int32) at ./serialize.jl:801
 [14] deserialize at ./serialize.jl:714 [inlined]
 [15] deserialize(::IOStream) at ./serialize.jl:711
 [16] (::getfield(Base.Pkg.Entry, Symbol("##82#83")){Dict{Any,Any}})(::IOStream) at ./pkg/entry.jl:643
 [17] open(::getfield(Base.Pkg.Entry, Symbol("##82#83")){Dict{Any,Any}}, ::String, ::String) at ./iostream.jl:310
 [18] build!(::Array{String,1}, ::Dict{Any,Any}, ::Set{Any}) at ./pkg/entry.jl:640
 [19] build! at ./pkg/entry.jl:636 [inlined]
 [20] build(::Array{String,1}) at ./pkg/entry.jl:654
 [21] resolve(::Dict{String,Base.Pkg.Types.VersionSet}, ::Dict{String,Dict{VersionNumber,Base.Pkg.Types.Available}}, ::Dict{String,Tuple{VersionNumber,Bool}}, ::Dict{String,Base.Pkg.Types.Fixed}, ::Dict{String,VersionNumber}, ::Set{String}) at ./pkg/entry.jl:579
 [22] resolve at ./pkg/entry.jl:486 [inlined] (repeats 5 times)
 [23] #test!#90(::Bool, ::Function, ::String, ::Array{AbstractString,1}, ::Array{AbstractString,1}, ::Array{AbstractString,1}) at ./pkg/entry.jl:714
 [24] (::getfield(Base.Pkg.Entry, Symbol("#kw##test!")))(::NamedTuple{(:coverage,),Tuple{Bool}}, ::typeof(Base.Pkg.Entry.test!), ::String, ::Array{AbstractString,1}, ::Array{AbstractString,1}, ::Array{AbstractString,1}) at ./<missing>:0
 [25] #test#98(::Bool, ::Function, ::Array{AbstractString,1}) at ./pkg/entry.jl:763
 [26] (::getfield(Base.Pkg.Entry, Symbol("#kw##test")))(::NamedTuple{(:coverage,),Tuple{Bool}}, ::typeof(Base.Pkg.Entry.test), ::Array{AbstractString,1}) at ./<missing>:0
 [27] (::getfield(Base.Pkg.Dir, Symbol("##4#7")){Base.Iterators.IndexValue{Symbol,Bool,Tuple{Symbol},NamedTuple{(:coverage,),Tuple{Bool}}},typeof(Base.Pkg.Entry.test),Tuple{Array{AbstractString,1}}})() at ./pkg/dir.jl:36
 [28] cd(::getfield(Base.Pkg.Dir, Symbol("##4#7")){Base.Iterators.IndexValue{Symbol,Bool,Tuple{Symbol},NamedTuple{(:coverage,),Tuple{Bool}}},typeof(Base.Pkg.Entry.test),Tuple{Array{AbstractString,1}}}, ::String) at ./file.jl:70
 [29] #cd#1(::Base.Iterators.IndexValue{Symbol,Bool,Tuple{Symbol},NamedTuple{(:coverage,),Tuple{Bool}}}, ::Function, ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N} where N) at ./pkg/dir.jl:36
 [30] (::getfield(Base.Pkg.Dir, Symbol("#kw##cd")))(::NamedTuple{(:coverage,),Tuple{Bool}}, ::typeof(Base.Pkg.Dir.cd), ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N} where N) at ./<missing>:0
 [31] #test#3(::Bool, ::Function, ::String, ::Vararg{String,N} where N) at ./pkg/pkg.jl:274
 [32] test(::String, ::Vararg{String,N} where N) at ./pkg/pkg.jl:274
 [33] top-level scope

>>> End of log
