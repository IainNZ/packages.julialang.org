>>> 'Pkg.add("Elemental")' log
WARNING: Base.Pkg is deprecated, run `using Pkg` instead
 in module Main
[ Info: Cloning cache of Elemental from https://github.com/JuliaParallel/Elemental.jl.git
[ Info: Installing DistributedArrays v0.4.0
[ Info: Installing Elemental v0.2.0
[ Info: Installing Primes v0.3.0
[ Info: Building Elemental
┌ Warning: `is_windows` is deprecated, use `Sys.iswindows` instead.
│   caller = top-level scope
└ @ Core :0
WARNING: importing deprecated binding Base.LibGit2 into __anon__.
WARNING: Base.LibGit2 is deprecated, run `import LibGit2` instead
  likely near /home/vagrant/.julia/v0.7/Elemental/deps/build.jl:23
WARNING: importing deprecated binding Base.BLAS into __anon__.
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/Elemental/deps/build.jl:29
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/Elemental/deps/build.jl:30
WARNING: importing deprecated binding Base.Libdl into __anon__.
WARNING: Base.Libdl is deprecated, run `using Libdl` instead
  likely near /home/vagrant/.julia/v0.7/Elemental/deps/build.jl:31
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/Elemental/deps/build.jl:31
WARNING: importing deprecated binding Base.LinAlg into __anon__.
WARNING: Base.LinAlg is deprecated, run `using LinearAlgebra` instead
  likely near /home/vagrant/.julia/v0.7/Elemental/deps/build.jl:32
-- The C compiler identification is GNU 4.8.4
-- The CXX compiler identification is GNU 4.8.4
-- Check for working C compiler: /usr/bin/cc
-- Check for working C compiler: /usr/bin/cc -- works
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Detecting C compile features
-- Detecting C compile features - done
-- Check for working CXX compiler: /usr/bin/c++
-- Check for working CXX compiler: /usr/bin/c++ -- works
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Detecting CXX compile features
-- Detecting CXX compile features - done
-- Could NOT find PythonInterp (missing:  PYTHON_EXECUTABLE) 
-- Appending /home/vagrant/.julia/v0.7/Elemental/deps/src/Elemental/include for Elemental's source includes
-- Appending /home/vagrant/.julia/v0.7/Elemental/deps/builds/include for Elemental's binary includes
CMake Warning at CMakeLists.txt:250 (message):
  Build mode not specified, defaulting to Release build.


-- The Fortran compiler identification is GNU 4.8.4
-- Check for working Fortran compiler: /usr/bin/gfortran
-- Check for working Fortran compiler: /usr/bin/gfortran  -- works
-- Detecting Fortran compiler ABI info
-- Detecting Fortran compiler ABI info - done
-- Checking whether /usr/bin/gfortran supports Fortran 90
-- Checking whether /usr/bin/gfortran supports Fortran 90 -- yes
-- Detecting Fortran/C Interface
-- Detecting Fortran/C Interface - Found GLOBAL and MODULE mangling
-- Verifying Fortran/CXX Compiler Compatibility
-- Verifying Fortran/CXX Compiler Compatibility - Success
-- Performing Test _HAS_CXX11_FLAG
-- Performing Test _HAS_CXX11_FLAG - Success
-- Checking C++ support for "auto"
-- Checking C++ support for "auto": works
-- Checking C++ support for "class_override_final"
-- Checking C++ support for "class_override_final": works
-- Checking C++ support for "constexpr"
-- Checking C++ support for "constexpr": works
-- Checking C++ support for "cstdint_header"
-- Checking C++ support for "cstdint_header": works
-- Checking C++ support for "decltype"
-- Checking C++ support for "decltype": works
-- Checking C++ support for "defaulted_functions"
-- Checking C++ support for "defaulted_functions": works
-- Checking C++ support for "delegating_constructors"
-- Checking C++ support for "delegating_constructors": works
-- Checking C++ support for "deleted_functions"
-- Checking C++ support for "deleted_functions": works
-- Checking C++ support for "func_identifier"
-- Checking C++ support for "func_identifier": works
-- Checking C++ support for "initializer_list"
-- Checking C++ support for "initializer_list": works
-- Checking C++ support for "lambda"
-- Checking C++ support for "lambda": works
-- Checking C++ support for "long_long"
-- Checking C++ support for "long_long": works
-- Checking C++ support for "nullptr"
-- Checking C++ support for "nullptr": works
-- Checking C++ support for "rvalue_references"
-- Checking C++ support for "rvalue_references": works
-- Checking C++ support for "sizeof_member"
-- Checking C++ support for "sizeof_member": works
-- Checking C++ support for "static_assert"
-- Checking C++ support for "static_assert": works
-- Checking C++ support for "variadic_templates"
-- Checking C++ support for "variadic_templates": works
-- Found CXXFeatures: TRUE   
-- CXX11_COMPILER_FLAGS=-std=gnu++11
-- Performing Test EL_HAVE_TEMPLATE_ALIAS
-- Performing Test EL_HAVE_TEMPLATE_ALIAS - Success
-- Performing Test EL_HAVE_STEADYCLOCK
-- Performing Test EL_HAVE_STEADYCLOCK - Success
-- Performing Test EL_HAVE_NOEXCEPT
-- Performing Test EL_HAVE_NOEXCEPT - Success
-- Performing Test EL_HAVE_NORMAL_DIST
-- Performing Test EL_HAVE_NORMAL_DIST - Success
-- Performing Test EL_HAVE_UNIFORM_INT_DIST
-- Performing Test EL_HAVE_UNIFORM_INT_DIST - Success
-- Performing Test EL_HAVE_UNIFORM_REAL_DIST
-- Performing Test EL_HAVE_UNIFORM_REAL_DIST - Success
-- Performing Test HAVE___restrict__
-- Performing Test HAVE___restrict__ - Success
-- Performing Test HAVE___restrict
-- Performing Test HAVE___restrict - Success
-- Performing Test HAVE_restrict
-- Performing Test HAVE_restrict - Failed
-- Using __restrict__ keyword.
-- Could NOT find MPI_C (missing:  MPI_C_LIBRARIES MPI_C_INCLUDE_PATH) 
-- Could NOT find MPI_CXX (missing:  MPI_CXX_LIBRARIES MPI_CXX_INCLUDE_PATH) 
-- Could NOT find MPI_Fortran (missing:  MPI_Fortran_LIBRARIES MPI_Fortran_INCLUDE_PATH) 
CMake Error at cmake/detect/MPI.cmake:13 (message):
  MPI C compiler was not found and is required
Call Stack (most recent call first):
  CMakeLists.txt:326 (include)


-- Configuring incomplete, errors occurred!
See also "/home/vagrant/.julia/v0.7/Elemental/deps/builds/CMakeFiles/CMakeOutput.log".
See also "/home/vagrant/.julia/v0.7/Elemental/deps/builds/CMakeFiles/CMakeError.log".
┌ Error: ------------------------------------------------------------
│ # Build failed for Elemental
│   exception =
│    LoadError: failed process: Process(`cmake -D CMAKE_INSTALL_PREFIX=/home/vagrant/.julia/v0.7/Elemental/deps/usr -D INSTALL_PYTHON_PACKAGE=OFF -D PYTHON_EXECUTABLE= -D PYTHON_SITE_PACKAGES= -D EL_USE_64BIT_INTS=ON -D EL_USE_64BIT_BLAS_INTS=ON -D MATH_LIBS=/home/vagrant/julia/bin/../lib/julia/libopenblas64_.so -D EL_BLAS_SUFFIX=_64_ -D EL_LAPACK_SUFFIX=_64_ -D CMAKE_INSTALL_RPATH=/home/vagrant/.julia/v0.7/Elemental/deps/usr/lib /home/vagrant/.julia/v0.7/Elemental/deps/src/Elemental`, ProcessExited(1)) [1]
│    Stacktrace:
│     [1] error(::String, ::Base.Process, ::String, ::Int64, ::String) at ./error.jl:42
│     [2] pipeline_error(::Base.Process) at ./process.jl:712
│     [3] #run#541(::Bool, ::Function, ::Cmd) at ./process.jl:670
│     [4] run at ./process.jl:668 [inlined]
│     [5] (::getfield(Main.__anon__, Symbol("##3#4")))() at /home/vagrant/.julia/v0.7/Elemental/deps/build.jl:43
│     [6] cd(::getfield(Main.__anon__, Symbol("##3#4")), ::String) at ./file.jl:72
│     [7] top-level scope
│     [8] include at ./boot.jl:306 [inlined]
│     [9] include_relative(::Module, ::String) at ./loading.jl:1067
│     [10] include at ./sysimg.jl:29 [inlined]
│     [11] include(::String) at ./loading.jl:1101
│     [12] top-level scope
│     [13] eval at ./boot.jl:309 [inlined]
│     [14] eval at ./sysimg.jl:74 [inlined]
│     [15] evalfile(::String, ::Array{String,1}) at ./loading.jl:1096 (repeats 2 times)
│     [16] #6 at ./none:13 [inlined]
│     [17] cd(::getfield(Main, Symbol("##6#8")){String}, ::String) at ./file.jl:72
│     [18] (::getfield(Main, Symbol("##5#7")))(::IOStream) at ./none:12
│     [19] #open#321(::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::getfield(Main, Symbol("##5#7")), ::String, ::Vararg{String,N} where N) at ./iostream.jl:369
│     [20] open(::Function, ::String, ::String) at ./iostream.jl:367
│     [21] top-level scope
│     [22] eval at ./boot.jl:309 [inlined]
│     [23] eval(::Module, ::Expr) at ./sysimg.jl:74
│     [24] exec_options(::Base.JLOptions) at ./client.jl:304
│     [25] _start() at ./client.jl:455
│    in expression starting at /home/vagrant/.julia/v0.7/Elemental/deps/build.jl:42
└ @ Main none:16
┌ Warning: ------------------------------------------------------------
│ # Build error summary
│ 
│ Elemental had build errors.
│ 
│  - packages with build errors remain installed in /home/vagrant/.julia/v0.7
│  - build the package(s) and all dependencies with `Pkg.build("Elemental")`
│  - build a single package by running its `deps/build.jl` script
└ @ Pkg.Entry entry.jl:649
[ Info: Package database updated
┌ Info: METADATA is out-of-date — you may not have the latest version of Elemental
└ Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("Elemental")' log
Package was unable to be tested.

>>> End of log
