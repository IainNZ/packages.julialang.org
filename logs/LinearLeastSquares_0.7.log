>>> 'Pkg.add("LinearLeastSquares")' log
┌ Info: Cloning cache of LinearLeastSquares from https://github.com/davidlizeng/LinearLeastSquares.jl.git
└                                                   @ Base.Pkg.Cache cache.jl:43
[ Info: Installing LinearLeastSquares v0.2.0       @ Base.Pkg.Entry entry.jl:543
[ Info: Package database updated                    @ Base.Pkg.Entry entry.jl:32
┌ Info: METADATA is out-of-date — you may not have the latest version of LinearLeastSquares
│ Use `Pkg.update()` to get the latest versions of your packages
└                                                   @ Base.Pkg.Entry entry.jl:74

>>> 'Pkg.test("LinearLeastSquares")' log
Julia Version 0.7.0-DEV.3351
Commit 09f7213c94 (2018-01-09 01:31 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
      Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-135-generic #184-Ubuntu SMP Wed Oct 18 11:55:51 UTC 2017 x86_64 x86_64
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
              speed         user         nice          sys         idle          irq
       #1  3500 MHz    2696582 s        126 s     142098 s     726425 s         15 s
       #2  3500 MHz     574195 s       6808 s      57142 s    3506633 s          0 s
       
  Memory: 2.93927001953125 GB (666.5390625 MB free)
  Uptime: 42169.0 sec
  Load Avg:  1.0380859375  1.0224609375  1.04541015625
  WORD_SIZE: 64
  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant
Packages:
  Package Directory: /home/vagrant/.julia/v0.7
  Package Status:
2 required packages:
 - JSON                          0.16.3
 - LinearLeastSquares            0.2.0
2 additional packages:
 - Compat                        0.43.0
 - Nullables                     0.0.2
[ Info: Testing LinearLeastSquares                 @ Base.Pkg.Entry entry.jl:723
┌ Warning: Deprecated syntax `type` at /home/vagrant/.julia/v0.7/LinearLeastSquares/src/types/expressions.jl:27.
│ Use `mutable struct` instead.
└                                                    @ nothing expressions.jl:27
┌ Warning: Deprecated syntax `type` at /home/vagrant/.julia/v0.7/LinearLeastSquares/src/types/expressions.jl:56.
│ Use `mutable struct` instead.
└                                                    @ nothing expressions.jl:56
┌ Warning: Deprecated syntax `type` at /home/vagrant/.julia/v0.7/LinearLeastSquares/src/types/expressions.jl:104.
│ Use `mutable struct` instead.
└                                                   @ nothing expressions.jl:104
WARNING: importing deprecated binding Base.Void into LinearLeastSquares.
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/LinearLeastSquares/src/types/expressions.jl:12
┌ Warning: Deprecated syntax `type` at /home/vagrant/.julia/v0.7/LinearLeastSquares/src/types/constraints.jl:7.
│ Use `mutable struct` instead.
└                                                     @ nothing constraints.jl:7
┌ Warning: Deprecated syntax `type` at /home/vagrant/.julia/v0.7/LinearLeastSquares/src/types/problems.jl:6.
│ Use `mutable struct` instead.
└                                                        @ nothing problems.jl:6
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/LinearLeastSquares/src/types/problems.jl:3
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/LinearLeastSquares/src/types/problems.jl:4
┌ Warning: Deprecated syntax `function .*(...)`.
│ Use `function Base.broadcast(::typeof(*), ...)` instead.
└                                                               @ nothing none:0
┌ Warning: Deprecated syntax `function .*(...)`.
│ Use `function Base.broadcast(::typeof(*), ...)` instead.
└                                                               @ nothing none:0
┌ Warning: Deprecated syntax `function .*(...)`.
│ Use `function Base.broadcast(::typeof(*), ...)` instead.
└                                                               @ nothing none:0
┌ Warning: Deprecated syntax `function .*(...)`.
│ Use `function Base.broadcast(::typeof(*), ...)` instead.
└                                                               @ nothing none:0
┌ Warning: Deprecated syntax `function .*(...)`.
│ Use `function Base.broadcast(::typeof(*), ...)` instead.
└                                                               @ nothing none:0
┌ Warning: Deprecated syntax `function ./(...)`.
│ Use `function Base.broadcast(::typeof(/), ...)` instead.
└                                                               @ nothing none:0
┌ Warning: Deprecated syntax `parametric method syntax getindex{T <: Real}(x::Constant, inds::AbstractArray{T, 1})` around /home/vagrant/.julia/v0.7/LinearLeastSquares/src/atoms/index.jl:5.
│ Use `getindex(x::Constant, inds::AbstractArray{T, 1}) where T <: Real` instead.
└                                                           @ nothing index.jl:5
┌ Warning: Deprecated syntax `parametric method syntax getindex{T <: Real}(x::Constant, rows::AbstractArray{T, 1}, cols::AbstractArray{T, 1})` around /home/vagrant/.julia/v0.7/LinearLeastSquares/src/atoms/index.jl:6.
│ Use `getindex(x::Constant, rows::AbstractArray{T, 1}, cols::AbstractArray{T, 1}) where T <: Real` instead.
└                                                           @ nothing index.jl:6
┌ Warning: Deprecated syntax `parametric method syntax getindex{T <: Real}(x::AffineExpr, inds::AbstractArray{T, 1})` around /home/vagrant/.julia/v0.7/LinearLeastSquares/src/atoms/index.jl:9.
│ Use `getindex(x::AffineExpr, inds::AbstractArray{T, 1}) where T <: Real` instead.
└                                                           @ nothing index.jl:9
┌ Warning: Deprecated syntax `parametric method syntax getindex{T <: Real}(x::AffineExpr, rows::AbstractArray{T, 1}, cols::AbstractArray{T, 1})` around /home/vagrant/.julia/v0.7/LinearLeastSquares/src/atoms/index.jl:35.
│ Use `getindex(x::AffineExpr, rows::AbstractArray{T, 1}, cols::AbstractArray{T, 1}) where T <: Real` instead.
└                                                          @ nothing index.jl:35
┌ Warning: Deprecated syntax `parametric method syntax getindex{T <: Real}(x::AffineOrConstant, rows::Colon, cols::AbstractArray{T, 1})` around /home/vagrant/.julia/v0.7/LinearLeastSquares/src/atoms/index.jl:94.
│ Use `getindex(x::AffineOrConstant, rows::Colon, cols::AbstractArray{T, 1}) where T <: Real` instead.
└                                                          @ nothing index.jl:94
┌ Warning: Deprecated syntax `parametric method syntax getindex{T <: Real}(x::AffineOrConstant, rows::AbstractArray{T, 1}, col::Colon)` around /home/vagrant/.julia/v0.7/LinearLeastSquares/src/atoms/index.jl:95.
│ Use `getindex(x::AffineOrConstant, rows::AbstractArray{T, 1}, col::Colon) where T <: Real` instead.
└                                                          @ nothing index.jl:95
┌ Warning: Deprecated syntax `parametric method syntax getindex{T <: Real}(x::AffineOrConstant, row::Real, cols::AbstractArray{T, 1})` around /home/vagrant/.julia/v0.7/LinearLeastSquares/src/atoms/index.jl:99.
│ Use `getindex(x::AffineOrConstant, row::Real, cols::AbstractArray{T, 1}) where T <: Real` instead.
└                                                          @ nothing index.jl:99
┌ Warning: Deprecated syntax `parametric method syntax getindex{T <: Real}(x::AffineOrConstant, rows::AbstractArray{T, 1}, col::Real)` around /home/vagrant/.julia/v0.7/LinearLeastSquares/src/atoms/index.jl:100.
│ Use `getindex(x::AffineOrConstant, rows::AbstractArray{T, 1}, col::Real) where T <: Real` instead.
└                                                         @ nothing index.jl:100
WARNING: Base.Test is deprecated, run `using Test` instead.
  likely near /home/vagrant/.julia/v0.7/LinearLeastSquares/test/unit_tests/unit_tests.jl:3
┌ Warning: `info()` is deprecated, use `@info` instead.
│   caller = top-level scope
└                                                                      @ Core :0
INFO: JULIA VERSION: 0.7.0-DEV.3351
┌ Warning: `speye(n::Integer)` has been deprecated in favor of `I`, `sparse`, and `SparseMatrixCSC` constructor methods. For a direct replacement, consider `sparse(1.0I, n, n)`, `SparseMatrixCSC(1.0I, n, n)`, or `SparseMatrixCSC{Float64}(I, n, n)`. If `Float64` element type is not necessary, consider the shorter `sparse(I, n, n)` or `SparseMatrixCSC(I, n, n)` (with default `eltype(I)` of `Bool`).
│   caller = Variable(::Tuple{Int64,Int64}) at expressions.jl:87
└                                         @ LinearLeastSquares expressions.jl:87
┌ Warning: `eye(m::Integer)` has been deprecated in favor of `I` and `Matrix` constructors. For a direct replacement, consider `Matrix(1.0I, m, m)` or `Matrix{Float64}(I, m, m)`. If `Float64` element type is not necessary, consider the shorter `Matrix(I, m, m)` (with default `eltype(I)` `Bool`).
│   caller = top-level scope
└                                                                      @ Core :0
┌ Warning: The no-op `full(A::AbstractArray)` fallback has been deprecated, and no more specific `full` method for Array{Float64,2} exists. Furthermore, `full` in general has been deprecated.
│ 
│ To replace `full(A)`, as appropriate consider dismabiguating with a concrete array constructor (e.g. `Array(A)`), with an abstract array constructor (e.g.`AbstractArray(A)`), instead `convert`ing to an array type (e.g `convert(Array, A)`, `convert(AbstractArray, A)`), or using another such operation that addresses your specific use case.
│   caller = evaluate(::AffineExpr) at expressions.jl:23
└                                         @ LinearLeastSquares expressions.jl:23
┌ Warning: `info()` is deprecated, use `@info` instead.
│   caller = top-level scope
└                                                                      @ Core :0
INFO: All add/subtract tests passed
┌ Warning: `eye(m::Integer)` has been deprecated in favor of `I` and `Matrix` constructors. For a direct replacement, consider `Matrix(1.0I, m, m)` or `Matrix{Float64}(I, m, m)`. If `Float64` element type is not necessary, consider the shorter `Matrix(I, m, m)` (with default `eltype(I)` `Bool`).
│   caller = top-level scope
└                                                                      @ Core :0
┌ Warning: `speye(n::Integer)` has been deprecated in favor of `I`, `sparse`, and `SparseMatrixCSC` constructor methods. For a direct replacement, consider `sparse(1.0I, n, n)`, `SparseMatrixCSC(1.0I, n, n)`, or `SparseMatrixCSC{Float64}(I, n, n)`. If `Float64` element type is not necessary, consider the shorter `sparse(I, n, n)` or `SparseMatrixCSC(I, n, n)` (with default `eltype(I)` of `Bool`).
│   caller = *(::Constant, ::AffineExpr) at multiply_divide.jl:51
└                                     @ LinearLeastSquares multiply_divide.jl:51
┌ Warning: `speye(n::Integer)` has been deprecated in favor of `I`, `sparse`, and `SparseMatrixCSC` constructor methods. For a direct replacement, consider `sparse(1.0I, n, n)`, `SparseMatrixCSC(1.0I, n, n)`, or `SparseMatrixCSC{Float64}(I, n, n)`. If `Float64` element type is not necessary, consider the shorter `sparse(I, n, n)` or `SparseMatrixCSC(I, n, n)` (with default `eltype(I)` of `Bool`).
│   caller = *(::AffineExpr, ::Constant) at multiply_divide.jl:73
└                                     @ LinearLeastSquares multiply_divide.jl:73
┌ Warning: `info()` is deprecated, use `@info` instead.
│   caller = top-level scope
└                                                                      @ Core :0
INFO: All multiply/divide tests passed
┌ Warning: `info()` is deprecated, use `@info` instead.
│   caller = top-level scope
└                                                                      @ Core :0
INFO: All stack tests passed
┌ Warning: `diagm(v::AbstractVector)` is deprecated, use `diagm(0 => v)` or `Matrix(Diagonal(v))` instead.
│   caller = (::getfield(LinearLeastSquares, Symbol("##45#46")){AffineExpr})() at diag.jl:61
└                                                @ LinearLeastSquares diag.jl:61
┌ Warning: `full(S::SparseMatrixCSC)` (and `full` in general) has been deprecated. To replace `full(S::SparseMatrixCSC)`, consider `Matrix(S)` or, if that option is too narrow, `Array(S)`.
│   caller = (::getfield(LinearLeastSquares, Symbol("##43#44")){AffineExpr,Int64})() at diag.jl:34
└                                                @ LinearLeastSquares diag.jl:34
┌ Warning: The no-op `full(A::AbstractArray)` fallback has been deprecated, and no more specific `full` method for Array{Float64,1} exists. Furthermore, `full` in general has been deprecated.
│ 
│ To replace `full(A)`, as appropriate consider dismabiguating with a concrete array constructor (e.g. `Array(A)`), with an abstract array constructor (e.g.`AbstractArray(A)`), instead `convert`ing to an array type (e.g `convert(Array, A)`, `convert(AbstractArray, A)`), or using another such operation that addresses your specific use case.
│   caller = evaluate(::AffineExpr) at expressions.jl:21
└                                         @ LinearLeastSquares expressions.jl:21
┌ Warning: `info()` is deprecated, use `@info` instead.
│   caller = top-level scope
└                                                                      @ Core :0
INFO: All diag tests passed
┌ Warning: `info()` is deprecated, use `@info` instead.
│   caller = top-level scope
└                                                                      @ Core :0
INFO: All repmat tests passed
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(uninitialized, m)` instead.
│   caller = getindex(::AffineExpr, ::UnitRange{Int64}, ::UnitRange{Int64}) at index.jl:70
└                                               @ LinearLeastSquares index.jl:70
┌ Warning: `info()` is deprecated, use `@info` instead.
│   caller = top-level scope
└                                                                      @ Core :0
INFO: All index tests passed
┌ Warning: `info()` is deprecated, use `@info` instead.
│   caller = top-level scope
└                                                                      @ Core :0
INFO: All reshape tests passed
ERROR: LoadError: LoadError: LoadError: MethodError: no method matching adjoint(::AffineExpr)
Closest candidates are:
  adjoint(!Matched::Number) at number.jl:196
  adjoint(!Matched::Adjoint) at linalg/adjtrans.jl:84
  adjoint(!Matched::Transpose{#s520,S} where S where #s520<:Real) at linalg/adjtrans.jl:86
  ...
Stacktrace:
 [1] top-level scope
 [2] include at ./boot.jl:293 [inlined]
 [3] include_relative(::Module, ::String) at ./loading.jl:521
 [4] include(::Module, ::String) at ./sysimg.jl:26
 [5] include(::String) at ./sysimg.jl:65
 [6] top-level scope
 [7] include at ./boot.jl:293 [inlined]
 [8] include_relative(::Module, ::String) at ./loading.jl:521
 [9] include(::Module, ::String) at ./sysimg.jl:26
 [10] include(::String) at ./sysimg.jl:65
 [11] top-level scope
 [12] include at ./boot.jl:293 [inlined]
 [13] include_relative(::Module, ::String) at ./loading.jl:521
 [14] include(::Module, ::String) at ./sysimg.jl:26
 [15] process_options(::Base.JLOptions) at ./client.jl:324
 [16] _start() at ./client.jl:375
in expression starting at /home/vagrant/.julia/v0.7/LinearLeastSquares/test/unit_tests/transpose.jl:2
in expression starting at /home/vagrant/.julia/v0.7/LinearLeastSquares/test/unit_tests/unit_tests.jl:14
in expression starting at /home/vagrant/.julia/v0.7/LinearLeastSquares/test/runtests.jl:1
┌ Error: ------------------------------------------------------------
│ # Testing failed for LinearLeastSquares
│   exception =
│    failed process: Process(`/home/vagrant/julia/bin/julia -Cnative -J/home/vagrant/julia/lib/julia/sys.so --compile=yes --depwarn=yes --code-coverage=none --color=no --compiled-modules=yes --check-bounds=yes --warn-overwrite=yes --startup-file=yes /home/vagrant/.julia/v0.7/LinearLeastSquares/test/runtests.jl`, ProcessExited(1)) [1]
│    Stacktrace:
│     [1] error(::String, ::Base.Process, ::String, ::Int64, ::String) at ./error.jl:42
│     [2] pipeline_error(::Base.Process) at ./process.jl:707
│     [3] run(::Cmd) at ./process.jl:669
│     [4] (::getfield(Base.Pkg.Entry, Symbol("##91#94")){Bool,String,Array{AbstractString,1}})() at ./pkg/entry.jl:736
│     [5] cd(::getfield(Base.Pkg.Entry, Symbol("##91#94")){Bool,String,Array{AbstractString,1}}, ::String) at ./file.jl:70
│     [6] #test!#90(::Bool, ::Function, ::String, ::Array{AbstractString,1}, ::Array{AbstractString,1}, ::Array{AbstractString,1}) at ./pkg/entry.jl:724
│     [7] (::getfield(Base.Pkg.Entry, Symbol("#kw##test!")))(::NamedTuple{(:coverage,),Tuple{Bool}}, ::typeof(Base.Pkg.Entry.test!), ::String, ::Array{AbstractString,1}, ::Array{AbstractString,1}, ::Array{AbstractString,1}) at ./<missing>:0
│     [8] #test#98(::Bool, ::Function, ::Array{AbstractString,1}) at ./pkg/entry.jl:763
│     [9] (::getfield(Base.Pkg.Entry, Symbol("#kw##test")))(::NamedTuple{(:coverage,),Tuple{Bool}}, ::typeof(Base.Pkg.Entry.test), ::Array{AbstractString,1}) at ./<missing>:0
│     [10] (::getfield(Base.Pkg.Dir, Symbol("##4#7")){Base.Iterators.IndexValue{Symbol,Bool,Tuple{Symbol},NamedTuple{(:coverage,),Tuple{Bool}}},typeof(Base.Pkg.Entry.test),Tuple{Array{AbstractString,1}}})() at ./pkg/dir.jl:36
│     [11] cd(::getfield(Base.Pkg.Dir, Symbol("##4#7")){Base.Iterators.IndexValue{Symbol,Bool,Tuple{Symbol},NamedTuple{(:coverage,),Tuple{Bool}}},typeof(Base.Pkg.Entry.test),Tuple{Array{AbstractString,1}}}, ::String) at ./file.jl:70
│     [12] #cd#1(::Base.Iterators.IndexValue{Symbol,Bool,Tuple{Symbol},NamedTuple{(:coverage,),Tuple{Bool}}}, ::Function, ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N} where N) at ./pkg/dir.jl:36
│     [13] (::getfield(Base.Pkg.Dir, Symbol("#kw##cd")))(::NamedTuple{(:coverage,),Tuple{Bool}}, ::typeof(Base.Pkg.Dir.cd), ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N} where N) at ./<missing>:0
│     [14] #test#3(::Bool, ::Function, ::String, ::Vararg{String,N} where N) at ./pkg/pkg.jl:274
│     [15] test(::String, ::Vararg{String,N} where N) at ./pkg/pkg.jl:274
│     [16] top-level scope
│     [17] eval at ./boot.jl:296 [inlined]
│     [18] eval(::Module, ::Expr) at ./sysimg.jl:71
│     [19] process_options(::Base.JLOptions) at ./client.jl:301
│     [20] _start() at ./client.jl:375
└                                                  @ Base.Pkg.Entry entry.jl:739
ERROR: LinearLeastSquares had test errors

>>> End of log
