>>> 'Pkg.add("SimilaritySearch")' log
[ Info: Cloning cache of SimilaritySearch from https://github.com/sadit/SimilaritySearch.jl.git
[ Info: Installing SimilaritySearch v0.1.7
[ Info: Package database updated
┌ Info: METADATA is out-of-date — you may not have the latest version of SimilaritySearch
└ Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("SimilaritySearch")' log
Julia Version 0.7.0-DEV.3421
Commit 2042dcfc2e (2018-01-16 23:39 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
      Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-135-generic #184-Ubuntu SMP Wed Oct 18 11:55:51 UTC 2017 x86_64 x86_64
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
              speed         user         nice          sys         idle          irq
       #1  3499 MHz    2657641 s        764 s     137906 s     707554 s         22 s
       #2  3499 MHz     544213 s       5822 s      50882 s    3457524 s          0 s
       
  Memory: 2.93927001953125 GB (480.10546875 MB free)
  Uptime: 41187.0 sec
  Load Avg:  0.94580078125  0.94482421875  0.95166015625
  WORD_SIZE: 64
  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant
Packages:
  Package Directory: /home/vagrant/.julia/v0.7
  Package Status:
2 required packages:
 - JSON                          0.16.4
 - SimilaritySearch              0.1.7
3 additional packages:
 - Compat                        0.46.0
 - Nullables                     0.0.3
 - tmpueiSOW                     0.0.0-             non-repo (unregistered)
[ Info: Testing SimilaritySearch
┌ Warning: Deprecated syntax `parametric method syntax DenseCosine{T}(vec::Vector{T})` around /home/vagrant/.julia/v0.7/SimilaritySearch/src/distances/cos.jl:14.
│ Use `DenseCosine(vec::Vector{T}) where T` instead.
└ @ nothing cos.jl:14
WARNING: importing deprecated binding Base.clear! into SimilaritySearch.
WARNING: Base.Test is deprecated, run `using Test` instead.
  likely near /home/vagrant/.julia/v0.7/SimilaritySearch/test/testbits.jl:2
Test Summary: | Pass  Total
bit ops       |    3      3
WARNING: Base.Test is deprecated, run `using Test` instead.
  likely near /home/vagrant/.julia/v0.7/SimilaritySearch/test/testresults.jl:2
Test Summary:              | Pass  Total
Result set implementations |    3      3
WARNING: Base.Test is deprecated, run `using Test` instead.
  likely near /home/vagrant/.julia/v0.7/SimilaritySearch/test/testdistances.jl:2
(recall_lower_bound, dist) = (1.0, L2Distance(0))
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #Performance#24(::Int64, ::Type, ::Array{Array{Float32,1},1}, ::L2Distance, ::Array{Array{Float32,1},1}) at performance.jl:33
└ @ SimilaritySearch performance.jl:33
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #_probe#31(::Bool, ::Function, ::Performance{Array{Float32,1}}, ::Sequential{Array{Float32,1},L2Distance}) at performance.jl:85
└ @ SimilaritySearch performance.jl:85
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #_probe#31(::Bool, ::Function, ::Performance{Array{Float32,1}}, ::Sequential{Array{Float32,1},L2Distance}) at performance.jl:86
└ @ SimilaritySearch performance.jl:86
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #_probe#31(::Bool, ::Function, ::Performance{Array{Float32,1}}, ::Sequential{Array{Float32,1},L2Distance}) at performance.jl:87
└ @ SimilaritySearch performance.jl:87
┌ Warning: `fieldnames(v)` is deprecated, use `fieldnames(typeof(v))` instead.
│   caller = #_probe#31(::Bool, ::Function, ::Performance{Array{Float32,1}}, ::Sequential{Array{Float32,1},L2Distance}) at performance.jl:89
└ @ SimilaritySearch performance.jl:89
(dist, p) = (L2Distance(200200), PerformanceResult(1.0, 9.367942810058594e-5, 1001.0))
┌ Warning: `info()` is deprecated, use `@info` instead.
│   caller = Laesa(::Array{Array{Float32,1},1}, ::L2Distance, ::Array{Array{Float32,1},1}) at laesa.jl:26
└ @ SimilaritySearch laesa.jl:26
INFO: Creating a pivot table with 16 pivots and distance=L2Distance(200200)
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = Laesa(::Array{Array{Float32,1},1}, ::L2Distance, ::Array{Array{Float32,1},1}) at laesa.jl:27
└ @ SimilaritySearch laesa.jl:27
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = push!(::Laesa{Array{Float32,1},L2Distance}, ::Array{Float32,1}) at laesa.jl:66
└ @ SimilaritySearch laesa.jl:66
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #_probe#31(::Bool, ::Function, ::Performance{Array{Float32,1}}, ::Laesa{Array{Float32,1},L2Distance}) at performance.jl:85
└ @ SimilaritySearch performance.jl:85
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #_probe#31(::Bool, ::Function, ::Performance{Array{Float32,1}}, ::Laesa{Array{Float32,1},L2Distance}) at performance.jl:86
└ @ SimilaritySearch performance.jl:86
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #_probe#31(::Bool, ::Function, ::Performance{Array{Float32,1}}, ::Laesa{Array{Float32,1},L2Distance}) at performance.jl:87
└ @ SimilaritySearch performance.jl:87
┌ Warning: `fieldnames(v)` is deprecated, use `fieldnames(typeof(v))` instead.
│   caller = #_probe#31(::Bool, ::Function, ::Performance{Array{Float32,1}}, ::Laesa{Array{Float32,1},L2Distance}) at performance.jl:89
└ @ SimilaritySearch performance.jl:89
(dist, p) = (L2Distance(325489), PerformanceResult(1.0, 0.00029866933822631837, 91.73))
(recall_lower_bound, dist) = (1.0, L1Distance(0))
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #Performance#24(::Int64, ::Type, ::Array{Array{Float32,1},1}, ::L1Distance, ::Array{Array{Float32,1},1}) at performance.jl:33
└ @ SimilaritySearch performance.jl:33
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #_probe#31(::Bool, ::Function, ::Performance{Array{Float32,1}}, ::Sequential{Array{Float32,1},L1Distance}) at performance.jl:85
└ @ SimilaritySearch performance.jl:85
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #_probe#31(::Bool, ::Function, ::Performance{Array{Float32,1}}, ::Sequential{Array{Float32,1},L1Distance}) at performance.jl:86
└ @ SimilaritySearch performance.jl:86
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #_probe#31(::Bool, ::Function, ::Performance{Array{Float32,1}}, ::Sequential{Array{Float32,1},L1Distance}) at performance.jl:87
└ @ SimilaritySearch performance.jl:87
┌ Warning: `fieldnames(v)` is deprecated, use `fieldnames(typeof(v))` instead.
│   caller = #_probe#31(::Bool, ::Function, ::Performance{Array{Float32,1}}, ::Sequential{Array{Float32,1},L1Distance}) at performance.jl:89
└ @ SimilaritySearch performance.jl:89
(dist, p) = (L1Distance(200200), PerformanceResult(1.0, 9.89532470703125e-5, 1001.0))
┌ Warning: `info()` is deprecated, use `@info` instead.
│   caller = Laesa(::Array{Array{Float32,1},1}, ::L1Distance, ::Array{Array{Float32,1},1}) at laesa.jl:26
└ @ SimilaritySearch laesa.jl:26
INFO: Creating a pivot table with 16 pivots and distance=L1Distance(200200)
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = Laesa(::Array{Array{Float32,1},1}, ::L1Distance, ::Array{Array{Float32,1},1}) at laesa.jl:27
└ @ SimilaritySearch laesa.jl:27
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = push!(::Laesa{Array{Float32,1},L1Distance}, ::Array{Float32,1}) at laesa.jl:66
└ @ SimilaritySearch laesa.jl:66
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #_probe#31(::Bool, ::Function, ::Performance{Array{Float32,1}}, ::Laesa{Array{Float32,1},L1Distance}) at performance.jl:85
└ @ SimilaritySearch performance.jl:85
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #_probe#31(::Bool, ::Function, ::Performance{Array{Float32,1}}, ::Laesa{Array{Float32,1},L1Distance}) at performance.jl:86
└ @ SimilaritySearch performance.jl:86
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #_probe#31(::Bool, ::Function, ::Performance{Array{Float32,1}}, ::Laesa{Array{Float32,1},L1Distance}) at performance.jl:87
└ @ SimilaritySearch performance.jl:87
┌ Warning: `fieldnames(v)` is deprecated, use `fieldnames(typeof(v))` instead.
│   caller = #_probe#31(::Bool, ::Function, ::Performance{Array{Float32,1}}, ::Laesa{Array{Float32,1},L1Distance}) at performance.jl:89
└ @ SimilaritySearch performance.jl:89
(dist, p) = (L1Distance(324180), PerformanceResult(1.0, 0.0002811002731323242, 78.64))
(recall_lower_bound, dist) = (1.0, LInfDistance(0))
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #Performance#24(::Int64, ::Type, ::Array{Array{Float32,1},1}, ::LInfDistance, ::Array{Array{Float32,1},1}) at performance.jl:33
└ @ SimilaritySearch performance.jl:33
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #_probe#31(::Bool, ::Function, ::Performance{Array{Float32,1}}, ::Sequential{Array{Float32,1},LInfDistance}) at performance.jl:85
└ @ SimilaritySearch performance.jl:85
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #_probe#31(::Bool, ::Function, ::Performance{Array{Float32,1}}, ::Sequential{Array{Float32,1},LInfDistance}) at performance.jl:86
└ @ SimilaritySearch performance.jl:86
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #_probe#31(::Bool, ::Function, ::Performance{Array{Float32,1}}, ::Sequential{Array{Float32,1},LInfDistance}) at performance.jl:87
└ @ SimilaritySearch performance.jl:87
┌ Warning: `fieldnames(v)` is deprecated, use `fieldnames(typeof(v))` instead.
│   caller = #_probe#31(::Bool, ::Function, ::Performance{Array{Float32,1}}, ::Sequential{Array{Float32,1},LInfDistance}) at performance.jl:89
└ @ SimilaritySearch performance.jl:89
(dist, p) = (LInfDistance(200200), PerformanceResult(1.0, 0.00010113716125488281, 1001.0))
┌ Warning: `info()` is deprecated, use `@info` instead.
│   caller = Laesa(::Array{Array{Float32,1},1}, ::LInfDistance, ::Array{Array{Float32,1},1}) at laesa.jl:26
└ @ SimilaritySearch laesa.jl:26
INFO: Creating a pivot table with 16 pivots and distance=LInfDistance(200200)
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = Laesa(::Array{Array{Float32,1},1}, ::LInfDistance, ::Array{Array{Float32,1},1}) at laesa.jl:27
└ @ SimilaritySearch laesa.jl:27
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = push!(::Laesa{Array{Float32,1},LInfDistance}, ::Array{Float32,1}) at laesa.jl:66
└ @ SimilaritySearch laesa.jl:66
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #_probe#31(::Bool, ::Function, ::Performance{Array{Float32,1}}, ::Laesa{Array{Float32,1},LInfDistance}) at performance.jl:85
└ @ SimilaritySearch performance.jl:85
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #_probe#31(::Bool, ::Function, ::Performance{Array{Float32,1}}, ::Laesa{Array{Float32,1},LInfDistance}) at performance.jl:86
└ @ SimilaritySearch performance.jl:86
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #_probe#31(::Bool, ::Function, ::Performance{Array{Float32,1}}, ::Laesa{Array{Float32,1},LInfDistance}) at performance.jl:87
└ @ SimilaritySearch performance.jl:87
┌ Warning: `fieldnames(v)` is deprecated, use `fieldnames(typeof(v))` instead.
│   caller = #_probe#31(::Bool, ::Function, ::Performance{Array{Float32,1}}, ::Laesa{Array{Float32,1},LInfDistance}) at performance.jl:89
└ @ SimilaritySearch performance.jl:89
(dist, p) = (LInfDistance(324698), PerformanceResult(1.0, 0.0004774761199951172, 83.82))
(recall_lower_bound, dist) = (0.1, L2SquaredDistance(0))
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #Performance#24(::Int64, ::Type, ::Array{Array{Float32,1},1}, ::L2SquaredDistance, ::Array{Array{Float32,1},1}) at performance.jl:33
└ @ SimilaritySearch performance.jl:33
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #_probe#31(::Bool, ::Function, ::Performance{Array{Float32,1}}, ::Sequential{Array{Float32,1},L2SquaredDistance}) at performance.jl:85
└ @ SimilaritySearch performance.jl:85
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #_probe#31(::Bool, ::Function, ::Performance{Array{Float32,1}}, ::Sequential{Array{Float32,1},L2SquaredDistance}) at performance.jl:86
└ @ SimilaritySearch performance.jl:86
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #_probe#31(::Bool, ::Function, ::Performance{Array{Float32,1}}, ::Sequential{Array{Float32,1},L2SquaredDistance}) at performance.jl:87
└ @ SimilaritySearch performance.jl:87
┌ Warning: `fieldnames(v)` is deprecated, use `fieldnames(typeof(v))` instead.
│   caller = #_probe#31(::Bool, ::Function, ::Performance{Array{Float32,1}}, ::Sequential{Array{Float32,1},L2SquaredDistance}) at performance.jl:89
└ @ SimilaritySearch performance.jl:89
(dist, p) = (L2SquaredDistance(200200), PerformanceResult(1.0, 0.0001833176612854004, 1001.0))
┌ Warning: `info()` is deprecated, use `@info` instead.
│   caller = Laesa(::Array{Array{Float32,1},1}, ::L2SquaredDistance, ::Array{Array{Float32,1},1}) at laesa.jl:26
└ @ SimilaritySearch laesa.jl:26
INFO: Creating a pivot table with 16 pivots and distance=L2SquaredDistance(200200)
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = Laesa(::Array{Array{Float32,1},1}, ::L2SquaredDistance, ::Array{Array{Float32,1},1}) at laesa.jl:27
└ @ SimilaritySearch laesa.jl:27
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = push!(::Laesa{Array{Float32,1},L2SquaredDistance}, ::Array{Float32,1}) at laesa.jl:66
└ @ SimilaritySearch laesa.jl:66
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #_probe#31(::Bool, ::Function, ::Performance{Array{Float32,1}}, ::Laesa{Array{Float32,1},L2SquaredDistance}) at performance.jl:85
└ @ SimilaritySearch performance.jl:85
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #_probe#31(::Bool, ::Function, ::Performance{Array{Float32,1}}, ::Laesa{Array{Float32,1},L2SquaredDistance}) at performance.jl:86
└ @ SimilaritySearch performance.jl:86
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #_probe#31(::Bool, ::Function, ::Performance{Array{Float32,1}}, ::Laesa{Array{Float32,1},L2SquaredDistance}) at performance.jl:87
└ @ SimilaritySearch performance.jl:87
┌ Warning: `fieldnames(v)` is deprecated, use `fieldnames(typeof(v))` instead.
│   caller = #_probe#31(::Bool, ::Function, ::Performance{Array{Float32,1}}, ::Laesa{Array{Float32,1},L2SquaredDistance}) at performance.jl:89
└ @ SimilaritySearch performance.jl:89
(dist, p) = (L2SquaredDistance(320209), PerformanceResult(0.4239999999999998, 0.00044844388961791994, 38.93))
(recall_lower_bound, dist) = (1.0, LpDistance(0, 3.0f0))
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #Performance#24(::Int64, ::Type, ::Array{Array{Float32,1},1}, ::LpDistance, ::Array{Array{Float32,1},1}) at performance.jl:33
└ @ SimilaritySearch performance.jl:33
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #_probe#31(::Bool, ::Function, ::Performance{Array{Float32,1}}, ::Sequential{Array{Float32,1},LpDistance}) at performance.jl:85
└ @ SimilaritySearch performance.jl:85
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #_probe#31(::Bool, ::Function, ::Performance{Array{Float32,1}}, ::Sequential{Array{Float32,1},LpDistance}) at performance.jl:86
└ @ SimilaritySearch performance.jl:86
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #_probe#31(::Bool, ::Function, ::Performance{Array{Float32,1}}, ::Sequential{Array{Float32,1},LpDistance}) at performance.jl:87
└ @ SimilaritySearch performance.jl:87
┌ Warning: `fieldnames(v)` is deprecated, use `fieldnames(typeof(v))` instead.
│   caller = #_probe#31(::Bool, ::Function, ::Performance{Array{Float32,1}}, ::Sequential{Array{Float32,1},LpDistance}) at performance.jl:89
└ @ SimilaritySearch performance.jl:89
(dist, p) = (LpDistance(200200, 3.0f0), PerformanceResult(1.0, 0.0002701306343078613, 1001.0))
┌ Warning: `info()` is deprecated, use `@info` instead.
│   caller = Laesa(::Array{Array{Float32,1},1}, ::LpDistance, ::Array{Array{Float32,1},1}) at laesa.jl:26
└ @ SimilaritySearch laesa.jl:26
INFO: Creating a pivot table with 16 pivots and distance=LpDistance(200200, 3.0f0)
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = Laesa(::Array{Array{Float32,1},1}, ::LpDistance, ::Array{Array{Float32,1},1}) at laesa.jl:27
└ @ SimilaritySearch laesa.jl:27
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = push!(::Laesa{Array{Float32,1},LpDistance}, ::Array{Float32,1}) at laesa.jl:66
└ @ SimilaritySearch laesa.jl:66
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #_probe#31(::Bool, ::Function, ::Performance{Array{Float32,1}}, ::Laesa{Array{Float32,1},LpDistance}) at performance.jl:85
└ @ SimilaritySearch performance.jl:85
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #_probe#31(::Bool, ::Function, ::Performance{Array{Float32,1}}, ::Laesa{Array{Float32,1},LpDistance}) at performance.jl:86
└ @ SimilaritySearch performance.jl:86
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #_probe#31(::Bool, ::Function, ::Performance{Array{Float32,1}}, ::Laesa{Array{Float32,1},LpDistance}) at performance.jl:87
└ @ SimilaritySearch performance.jl:87
┌ Warning: `fieldnames(v)` is deprecated, use `fieldnames(typeof(v))` instead.
│   caller = #_probe#31(::Bool, ::Function, ::Performance{Array{Float32,1}}, ::Laesa{Array{Float32,1},LpDistance}) at performance.jl:89
└ @ SimilaritySearch performance.jl:89
(dist, p) = (LpDistance(325493, 3.0f0), PerformanceResult(1.0, 0.00045264482498168945, 91.77))
(recall_lower_bound, dist) = (0.1, LpDistance(0, 0.5f0))
(dist, p) = (LpDistance(200200, 0.5f0), PerformanceResult(1.0, 7.597446441650391e-5, 1001.0))
INFO: Creating a pivot table with 16 pivots and distance=LpDistance(200200, 0.5f0)
(dist, p) = (LpDistance(321745, 0.5f0), PerformanceResult(0.6530000000000002, 2.811431884765625e-5, 54.29))
┌ Warning: `info()` is deprecated, use `@info` instead.
│   caller = macro expansion at testdistances.jl:83 [inlined]
└ @ Core testdistances.jl:83
INFO: inserting items into the index
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #Performance#24(::Int64, ::Type, ::Array{Array{Int64,1},1}, ::JaccardDistance, ::Array{Array{Int64,1},1}) at performance.jl:33
└ @ SimilaritySearch performance.jl:33
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #_probe#31(::Bool, ::Function, ::Performance{Array{Int64,1}}, ::Sequential{Array{Int64,1},JaccardDistance}) at performance.jl:85
└ @ SimilaritySearch performance.jl:85
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #_probe#31(::Bool, ::Function, ::Performance{Array{Int64,1}}, ::Sequential{Array{Int64,1},JaccardDistance}) at performance.jl:86
└ @ SimilaritySearch performance.jl:86
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #_probe#31(::Bool, ::Function, ::Performance{Array{Int64,1}}, ::Sequential{Array{Int64,1},JaccardDistance}) at performance.jl:87
└ @ SimilaritySearch performance.jl:87
┌ Warning: `fieldnames(v)` is deprecated, use `fieldnames(typeof(v))` instead.
│   caller = #_probe#31(::Bool, ::Function, ::Performance{Array{Int64,1}}, ::Sequential{Array{Int64,1},JaccardDistance}) at performance.jl:89
└ @ SimilaritySearch performance.jl:89
┌ Warning: `info()` is deprecated, use `@info` instead.
│   caller = macro expansion at testdistances.jl:83 [inlined]
└ @ Core testdistances.jl:83
INFO: inserting items into the index
┌ Warning: `info()` is deprecated, use `@info` instead.
│   caller = Laesa(::Array{Array{Int64,1},1}, ::JaccardDistance, ::Array{Array{Int64,1},1}) at laesa.jl:26
└ @ SimilaritySearch laesa.jl:26
INFO: Creating a pivot table with 1 pivots and distance=JaccardDistance(0)
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = Laesa(::Array{Array{Int64,1},1}, ::JaccardDistance, ::Array{Array{Int64,1},1}) at laesa.jl:27
└ @ SimilaritySearch laesa.jl:27
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #_probe#31(::Bool, ::Function, ::Performance{Array{Int64,1}}, ::Laesa{Array{Int64,1},JaccardDistance}) at performance.jl:85
└ @ SimilaritySearch performance.jl:85
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #_probe#31(::Bool, ::Function, ::Performance{Array{Int64,1}}, ::Laesa{Array{Int64,1},JaccardDistance}) at performance.jl:86
└ @ SimilaritySearch performance.jl:86
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #_probe#31(::Bool, ::Function, ::Performance{Array{Int64,1}}, ::Laesa{Array{Int64,1},JaccardDistance}) at performance.jl:87
└ @ SimilaritySearch performance.jl:87
┌ Warning: `fieldnames(v)` is deprecated, use `fieldnames(typeof(v))` instead.
│   caller = #_probe#31(::Bool, ::Function, ::Performance{Array{Int64,1}}, ::Laesa{Array{Int64,1},JaccardDistance}) at performance.jl:89
└ @ SimilaritySearch performance.jl:89
┌ Warning: `info()` is deprecated, use `@info` instead.
│   caller = macro expansion at testdistances.jl:83 [inlined]
└ @ Core testdistances.jl:83
INFO: inserting items into the index
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #Performance#24(::Int64, ::Type, ::Array{Array{Int64,1},1}, ::DiceDistance, ::Array{Array{Int64,1},1}) at performance.jl:33
└ @ SimilaritySearch performance.jl:33
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #_probe#31(::Bool, ::Function, ::Performance{Array{Int64,1}}, ::Sequential{Array{Int64,1},DiceDistance}) at performance.jl:85
└ @ SimilaritySearch performance.jl:85
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #_probe#31(::Bool, ::Function, ::Performance{Array{Int64,1}}, ::Sequential{Array{Int64,1},DiceDistance}) at performance.jl:86
└ @ SimilaritySearch performance.jl:86
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #_probe#31(::Bool, ::Function, ::Performance{Array{Int64,1}}, ::Sequential{Array{Int64,1},DiceDistance}) at performance.jl:87
└ @ SimilaritySearch performance.jl:87
┌ Warning: `fieldnames(v)` is deprecated, use `fieldnames(typeof(v))` instead.
│   caller = #_probe#31(::Bool, ::Function, ::Performance{Array{Int64,1}}, ::Sequential{Array{Int64,1},DiceDistance}) at performance.jl:89
└ @ SimilaritySearch performance.jl:89
┌ Warning: `info()` is deprecated, use `@info` instead.
│   caller = macro expansion at testdistances.jl:83 [inlined]
└ @ Core testdistances.jl:83
INFO: inserting items into the index
┌ Warning: `info()` is deprecated, use `@info` instead.
│   caller = Laesa(::Array{Array{Int64,1},1}, ::DiceDistance, ::Array{Array{Int64,1},1}) at laesa.jl:26
└ @ SimilaritySearch laesa.jl:26
INFO: Creating a pivot table with 1 pivots and distance=DiceDistance(0)
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = Laesa(::Array{Array{Int64,1},1}, ::DiceDistance, ::Array{Array{Int64,1},1}) at laesa.jl:27
└ @ SimilaritySearch laesa.jl:27
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #_probe#31(::Bool, ::Function, ::Performance{Array{Int64,1}}, ::Laesa{Array{Int64,1},DiceDistance}) at performance.jl:85
└ @ SimilaritySearch performance.jl:85
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #_probe#31(::Bool, ::Function, ::Performance{Array{Int64,1}}, ::Laesa{Array{Int64,1},DiceDistance}) at performance.jl:86
└ @ SimilaritySearch performance.jl:86
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #_probe#31(::Bool, ::Function, ::Performance{Array{Int64,1}}, ::Laesa{Array{Int64,1},DiceDistance}) at performance.jl:87
└ @ SimilaritySearch performance.jl:87
┌ Warning: `fieldnames(v)` is deprecated, use `fieldnames(typeof(v))` instead.
│   caller = #_probe#31(::Bool, ::Function, ::Performance{Array{Int64,1}}, ::Laesa{Array{Int64,1},DiceDistance}) at performance.jl:89
└ @ SimilaritySearch performance.jl:89
┌ Warning: `info()` is deprecated, use `@info` instead.
│   caller = macro expansion at testdistances.jl:83 [inlined]
└ @ Core testdistances.jl:83
INFO: inserting items into the index
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #Performance#24(::Int64, ::Type, ::Array{Array{Int64,1},1}, ::IntersectionDistance, ::Array{Array{Int64,1},1}) at performance.jl:33
└ @ SimilaritySearch performance.jl:33
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #_probe#31(::Bool, ::Function, ::Performance{Array{Int64,1}}, ::Sequential{Array{Int64,1},IntersectionDistance}) at performance.jl:85
└ @ SimilaritySearch performance.jl:85
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #_probe#31(::Bool, ::Function, ::Performance{Array{Int64,1}}, ::Sequential{Array{Int64,1},IntersectionDistance}) at performance.jl:86
└ @ SimilaritySearch performance.jl:86
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #_probe#31(::Bool, ::Function, ::Performance{Array{Int64,1}}, ::Sequential{Array{Int64,1},IntersectionDistance}) at performance.jl:87
└ @ SimilaritySearch performance.jl:87
┌ Warning: `fieldnames(v)` is deprecated, use `fieldnames(typeof(v))` instead.
│   caller = #_probe#31(::Bool, ::Function, ::Performance{Array{Int64,1}}, ::Sequential{Array{Int64,1},IntersectionDistance}) at performance.jl:89
└ @ SimilaritySearch performance.jl:89
┌ Warning: `info()` is deprecated, use `@info` instead.
│   caller = macro expansion at testdistances.jl:83 [inlined]
└ @ Core testdistances.jl:83
INFO: inserting items into the index
┌ Warning: `info()` is deprecated, use `@info` instead.
│   caller = Laesa(::Array{Array{Int64,1},1}, ::IntersectionDistance, ::Array{Array{Int64,1},1}) at laesa.jl:26
└ @ SimilaritySearch laesa.jl:26
INFO: Creating a pivot table with 1 pivots and distance=IntersectionDistance(0)
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = Laesa(::Array{Array{Int64,1},1}, ::IntersectionDistance, ::Array{Array{Int64,1},1}) at laesa.jl:27
└ @ SimilaritySearch laesa.jl:27
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #_probe#31(::Bool, ::Function, ::Performance{Array{Int64,1}}, ::Laesa{Array{Int64,1},IntersectionDistance}) at performance.jl:85
└ @ SimilaritySearch performance.jl:85
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #_probe#31(::Bool, ::Function, ::Performance{Array{Int64,1}}, ::Laesa{Array{Int64,1},IntersectionDistance}) at performance.jl:86
└ @ SimilaritySearch performance.jl:86
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #_probe#31(::Bool, ::Function, ::Performance{Array{Int64,1}}, ::Laesa{Array{Int64,1},IntersectionDistance}) at performance.jl:87
└ @ SimilaritySearch performance.jl:87
┌ Warning: `fieldnames(v)` is deprecated, use `fieldnames(typeof(v))` instead.
│   caller = #_probe#31(::Bool, ::Function, ::Performance{Array{Int64,1}}, ::Laesa{Array{Int64,1},IntersectionDistance}) at performance.jl:89
└ @ SimilaritySearch performance.jl:89
┌ Warning: `info()` is deprecated, use `@info` instead.
│   caller = macro expansion at testdistances.jl:83 [inlined]
└ @ Core testdistances.jl:83
INFO: inserting items into the index
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #Performance#24(::Int64, ::Type, ::Array{Array{Int64,1},1}, ::CommonPrefixDistance, ::Array{Array{Int64,1},1}) at performance.jl:33
└ @ SimilaritySearch performance.jl:33
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #_probe#31(::Bool, ::Function, ::Performance{Array{Int64,1}}, ::Sequential{Array{Int64,1},CommonPrefixDistance}) at performance.jl:85
└ @ SimilaritySearch performance.jl:85
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #_probe#31(::Bool, ::Function, ::Performance{Array{Int64,1}}, ::Sequential{Array{Int64,1},CommonPrefixDistance}) at performance.jl:86
└ @ SimilaritySearch performance.jl:86
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #_probe#31(::Bool, ::Function, ::Performance{Array{Int64,1}}, ::Sequential{Array{Int64,1},CommonPrefixDistance}) at performance.jl:87
└ @ SimilaritySearch performance.jl:87
┌ Warning: `fieldnames(v)` is deprecated, use `fieldnames(typeof(v))` instead.
│   caller = #_probe#31(::Bool, ::Function, ::Performance{Array{Int64,1}}, ::Sequential{Array{Int64,1},CommonPrefixDistance}) at performance.jl:89
└ @ SimilaritySearch performance.jl:89
┌ Warning: `info()` is deprecated, use `@info` instead.
│   caller = macro expansion at testdistances.jl:83 [inlined]
└ @ Core testdistances.jl:83
INFO: inserting items into the index
┌ Warning: `info()` is deprecated, use `@info` instead.
│   caller = Laesa(::Array{Array{Int64,1},1}, ::CommonPrefixDistance, ::Array{Array{Int64,1},1}) at laesa.jl:26
└ @ SimilaritySearch laesa.jl:26
INFO: Creating a pivot table with 1 pivots and distance=CommonPrefixDistance(0)
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = Laesa(::Array{Array{Int64,1},1}, ::CommonPrefixDistance, ::Array{Array{Int64,1},1}) at laesa.jl:27
└ @ SimilaritySearch laesa.jl:27
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #_probe#31(::Bool, ::Function, ::Performance{Array{Int64,1}}, ::Laesa{Array{Int64,1},CommonPrefixDistance}) at performance.jl:85
└ @ SimilaritySearch performance.jl:85
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #_probe#31(::Bool, ::Function, ::Performance{Array{Int64,1}}, ::Laesa{Array{Int64,1},CommonPrefixDistance}) at performance.jl:86
└ @ SimilaritySearch performance.jl:86
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #_probe#31(::Bool, ::Function, ::Performance{Array{Int64,1}}, ::Laesa{Array{Int64,1},CommonPrefixDistance}) at performance.jl:87
└ @ SimilaritySearch performance.jl:87
┌ Warning: `fieldnames(v)` is deprecated, use `fieldnames(typeof(v))` instead.
│   caller = #_probe#31(::Bool, ::Function, ::Performance{Array{Int64,1}}, ::Laesa{Array{Int64,1},CommonPrefixDistance}) at performance.jl:89
└ @ SimilaritySearch performance.jl:89
┌ Warning: `info()` is deprecated, use `@info` instead.
│   caller = macro expansion at testdistances.jl:83 [inlined]
└ @ Core testdistances.jl:83
INFO: inserting items into the index
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #Performance#24(::Int64, ::Type, ::Array{Array{Int64,1},1}, ::GenericLevenshtein, ::Array{Array{Int64,1},1}) at performance.jl:33
└ @ SimilaritySearch performance.jl:33
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #_probe#31(::Bool, ::Function, ::Performance{Array{Int64,1}}, ::Sequential{Array{Int64,1},GenericLevenshtein}) at performance.jl:85
└ @ SimilaritySearch performance.jl:85
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #_probe#31(::Bool, ::Function, ::Performance{Array{Int64,1}}, ::Sequential{Array{Int64,1},GenericLevenshtein}) at performance.jl:86
└ @ SimilaritySearch performance.jl:86
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #_probe#31(::Bool, ::Function, ::Performance{Array{Int64,1}}, ::Sequential{Array{Int64,1},GenericLevenshtein}) at performance.jl:87
└ @ SimilaritySearch performance.jl:87
┌ Warning: `fieldnames(v)` is deprecated, use `fieldnames(typeof(v))` instead.
│   caller = #_probe#31(::Bool, ::Function, ::Performance{Array{Int64,1}}, ::Sequential{Array{Int64,1},GenericLevenshtein}) at performance.jl:89
└ @ SimilaritySearch performance.jl:89
┌ Warning: `info()` is deprecated, use `@info` instead.
│   caller = macro expansion at testdistances.jl:83 [inlined]
└ @ Core testdistances.jl:83
INFO: inserting items into the index
┌ Warning: `info()` is deprecated, use `@info` instead.
│   caller = Laesa(::Array{Array{Int64,1},1}, ::GenericLevenshtein, ::Array{Array{Int64,1},1}) at laesa.jl:26
└ @ SimilaritySearch laesa.jl:26
INFO: Creating a pivot table with 1 pivots and distance=GenericLevenshtein(0, 1, 1, 1)
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = Laesa(::Array{Array{Int64,1},1}, ::GenericLevenshtein, ::Array{Array{Int64,1},1}) at laesa.jl:27
└ @ SimilaritySearch laesa.jl:27
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #_probe#31(::Bool, ::Function, ::Performance{Array{Int64,1}}, ::Laesa{Array{Int64,1},GenericLevenshtein}) at performance.jl:85
└ @ SimilaritySearch performance.jl:85
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #_probe#31(::Bool, ::Function, ::Performance{Array{Int64,1}}, ::Laesa{Array{Int64,1},GenericLevenshtein}) at performance.jl:86
└ @ SimilaritySearch performance.jl:86
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #_probe#31(::Bool, ::Function, ::Performance{Array{Int64,1}}, ::Laesa{Array{Int64,1},GenericLevenshtein}) at performance.jl:87
└ @ SimilaritySearch performance.jl:87
┌ Warning: `fieldnames(v)` is deprecated, use `fieldnames(typeof(v))` instead.
│   caller = #_probe#31(::Bool, ::Function, ::Performance{Array{Int64,1}}, ::Laesa{Array{Int64,1},GenericLevenshtein}) at performance.jl:89
└ @ SimilaritySearch performance.jl:89
INFO: inserting items into the index
INFO: inserting items into the index
INFO: Creating a pivot table with 1 pivots and distance=GenericLevenshtein(0, 1, 1, 2)
┌ Warning: `info()` is deprecated, use `@info` instead.
│   caller = macro expansion at testdistances.jl:83 [inlined]
└ @ Core testdistances.jl:83
INFO: inserting items into the index
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #Performance#24(::Int64, ::Type, ::Array{Array{Int64,1},1}, ::HammingDistance, ::Array{Array{Int64,1},1}) at performance.jl:33
└ @ SimilaritySearch performance.jl:33
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #_probe#31(::Bool, ::Function, ::Performance{Array{Int64,1}}, ::Sequential{Array{Int64,1},HammingDistance}) at performance.jl:85
└ @ SimilaritySearch performance.jl:85
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #_probe#31(::Bool, ::Function, ::Performance{Array{Int64,1}}, ::Sequential{Array{Int64,1},HammingDistance}) at performance.jl:86
└ @ SimilaritySearch performance.jl:86
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #_probe#31(::Bool, ::Function, ::Performance{Array{Int64,1}}, ::Sequential{Array{Int64,1},HammingDistance}) at performance.jl:87
└ @ SimilaritySearch performance.jl:87
┌ Warning: `fieldnames(v)` is deprecated, use `fieldnames(typeof(v))` instead.
│   caller = #_probe#31(::Bool, ::Function, ::Performance{Array{Int64,1}}, ::Sequential{Array{Int64,1},HammingDistance}) at performance.jl:89
└ @ SimilaritySearch performance.jl:89
┌ Warning: `info()` is deprecated, use `@info` instead.
│   caller = macro expansion at testdistances.jl:83 [inlined]
└ @ Core testdistances.jl:83
INFO: inserting items into the index
┌ Warning: `info()` is deprecated, use `@info` instead.
│   caller = Laesa(::Array{Array{Int64,1},1}, ::HammingDistance, ::Array{Array{Int64,1},1}) at laesa.jl:26
└ @ SimilaritySearch laesa.jl:26
INFO: Creating a pivot table with 1 pivots and distance=HammingDistance(0)
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = Laesa(::Array{Array{Int64,1},1}, ::HammingDistance, ::Array{Array{Int64,1},1}) at laesa.jl:27
└ @ SimilaritySearch laesa.jl:27
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #_probe#31(::Bool, ::Function, ::Performance{Array{Int64,1}}, ::Laesa{Array{Int64,1},HammingDistance}) at performance.jl:85
└ @ SimilaritySearch performance.jl:85
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #_probe#31(::Bool, ::Function, ::Performance{Array{Int64,1}}, ::Laesa{Array{Int64,1},HammingDistance}) at performance.jl:86
└ @ SimilaritySearch performance.jl:86
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #_probe#31(::Bool, ::Function, ::Performance{Array{Int64,1}}, ::Laesa{Array{Int64,1},HammingDistance}) at performance.jl:87
└ @ SimilaritySearch performance.jl:87
┌ Warning: `fieldnames(v)` is deprecated, use `fieldnames(typeof(v))` instead.
│   caller = #_probe#31(::Bool, ::Function, ::Performance{Array{Int64,1}}, ::Laesa{Array{Int64,1},HammingDistance}) at performance.jl:89
└ @ SimilaritySearch performance.jl:89
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #Performance#24(::Int64, ::Type, ::Array{DenseCosine{Float32},1}, ::AngleDistance, ::Array{DenseCosine{Float32},1}) at performance.jl:33
└ @ SimilaritySearch performance.jl:33
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #_probe#31(::Bool, ::Function, ::Performance{DenseCosine{Float32}}, ::Sequential{DenseCosine{Float32},AngleDistance}) at performance.jl:85
└ @ SimilaritySearch performance.jl:85
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #_probe#31(::Bool, ::Function, ::Performance{DenseCosine{Float32}}, ::Sequential{DenseCosine{Float32},AngleDistance}) at performance.jl:86
└ @ SimilaritySearch performance.jl:86
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #_probe#31(::Bool, ::Function, ::Performance{DenseCosine{Float32}}, ::Sequential{DenseCosine{Float32},AngleDistance}) at performance.jl:87
└ @ SimilaritySearch performance.jl:87
┌ Warning: `fieldnames(v)` is deprecated, use `fieldnames(typeof(v))` instead.
│   caller = #_probe#31(::Bool, ::Function, ::Performance{DenseCosine{Float32}}, ::Sequential{DenseCosine{Float32},AngleDistance}) at performance.jl:89
└ @ SimilaritySearch performance.jl:89
p = PerformanceResult(1.0, 5.94329833984375e-5, 1001.0)
p = PerformanceResult(1.0, 5.838155746459961e-5, 1001.0)
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #Performance#24(::Int64, ::Type, ::Array{DenseCosine{Float32},1}, ::CosineDistance, ::Array{DenseCosine{Float32},1}) at performance.jl:33
└ @ SimilaritySearch performance.jl:33
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #_probe#31(::Bool, ::Function, ::Performance{DenseCosine{Float32}}, ::Sequential{DenseCosine{Float32},CosineDistance}) at performance.jl:85
└ @ SimilaritySearch performance.jl:85
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #_probe#31(::Bool, ::Function, ::Performance{DenseCosine{Float32}}, ::Sequential{DenseCosine{Float32},CosineDistance}) at performance.jl:86
└ @ SimilaritySearch performance.jl:86
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #_probe#31(::Bool, ::Function, ::Performance{DenseCosine{Float32}}, ::Sequential{DenseCosine{Float32},CosineDistance}) at performance.jl:87
└ @ SimilaritySearch performance.jl:87
┌ Warning: `fieldnames(v)` is deprecated, use `fieldnames(typeof(v))` instead.
│   caller = #_probe#31(::Bool, ::Function, ::Performance{DenseCosine{Float32}}, ::Sequential{DenseCosine{Float32},CosineDistance}) at performance.jl:89
└ @ SimilaritySearch performance.jl:89
p = PerformanceResult(1.0, 2.8469562530517577e-5, 1001.0)
p = PerformanceResult(1.0, 2.7210712432861327e-5, 1001.0)
(p1, p2, p3, p4) = (PerformanceResult(1.0, 5.94329833984375e-5, 1001.0), PerformanceResult(1.0, 5.838155746459961e-5, 1001.0), PerformanceResult(1.0, 2.8469562530517577e-5, 1001.0), PerformanceResult(1.0, 2.7210712432861327e-5, 1001.0))
WARNING: importing deprecated binding Base.shuffle! into SimilaritySearch.
┌ Warning: `info()` is deprecated, use `@info` instead.
│   caller = select_sss(::Array{Array{UInt32,1},1}, ::BinHammingDistance, ::Float64, ::Bool) at pivotselection.jl:75
└ @ SimilaritySearch pivotselection.jl:75
INFO: select_sss: db=Array{Array{UInt32,1},1}, alpha=0.35, distance=BinHammingDistance(0), shuffle_db=false
┌ Warning: `info()` is deprecated, use `@info` instead.
│   caller = select_sss(::Array{Array{UInt32,1},1}, ::BinHammingDistance, ::Float64, ::Bool) at pivotselection.jl:83
└ @ SimilaritySearch pivotselection.jl:83
INFO: the maximum distance estimated as 126.0, now selecting pivots
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = select_sss(::Array{Array{UInt32,1},1}, ::BinHammingDistance, ::Float64, ::Bool) at pivotselection.jl:90
└ @ SimilaritySearch pivotselection.jl:90
┌ Warning: `info()` is deprecated, use `@info` instead.
│   caller = Laesa(::Array{Array{UInt32,1},1}, ::BinHammingDistance, ::Array{Array{UInt32,1},1}) at laesa.jl:26
└ @ SimilaritySearch laesa.jl:26
INFO: Creating a pivot table with 1000 pivots and distance=BinHammingDistance(499516)
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = Laesa(::Array{Array{UInt32,1},1}, ::BinHammingDistance, ::Array{Array{UInt32,1},1}) at laesa.jl:27
└ @ SimilaritySearch laesa.jl:27
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = push!(::Laesa{Array{UInt32,1},BinHammingDistance}, ::Array{UInt32,1}) at laesa.jl:66
└ @ SimilaritySearch laesa.jl:66
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #Performance#24(::Int64, ::Type, ::Array{Array{UInt32,1},1}, ::BinHammingDistance, ::Array{Array{UInt32,1},1}) at performance.jl:33
└ @ SimilaritySearch performance.jl:33
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #_probe#31(::Bool, ::Function, ::Performance{Array{UInt32,1}}, ::Laesa{Array{UInt32,1},BinHammingDistance}) at performance.jl:85
└ @ SimilaritySearch performance.jl:85
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #_probe#31(::Bool, ::Function, ::Performance{Array{UInt32,1}}, ::Laesa{Array{UInt32,1},BinHammingDistance}) at performance.jl:86
└ @ SimilaritySearch performance.jl:86
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #_probe#31(::Bool, ::Function, ::Performance{Array{UInt32,1}}, ::Laesa{Array{UInt32,1},BinHammingDistance}) at performance.jl:87
└ @ SimilaritySearch performance.jl:87
┌ Warning: `fieldnames(v)` is deprecated, use `fieldnames(typeof(v))` instead.
│   caller = #_probe#31(::Bool, ::Function, ::Performance{Array{UInt32,1}}, ::Laesa{Array{UInt32,1},BinHammingDistance}) at performance.jl:89
└ @ SimilaritySearch performance.jl:89
p = PerformanceResult(1.0, 0.003166935443878174, 1062.19)
indexing vectors with Sequential with BinHammingDistance: Error During Test at /home/vagrant/.julia/v0.7/SimilaritySearch/test/testdistances.jl:5
  Got an exception of type ErrorException outside of a @test
  Base.shuffle! has been moved to the standard library package Random.
  Restart Julia and then run `using Random` to load it.
  Stacktrace:
   [1] error(::Function, ::String, ::String, ::String, ::String, ::String, ::String) at ./error.jl:42
   [2] #shuffle!#892 at ./deprecated.jl:138 [inlined]
   [3] shuffle! at ./deprecated.jl:138 [inlined]
   [4] select_tournament at /home/vagrant/.julia/v0.7/SimilaritySearch/src/indexes/pivotselection.jl:42 [inlined]
   [5] LaesaTournament at /home/vagrant/.julia/v0.7/SimilaritySearch/src/indexes/pivotselectiontables.jl:24 [inlined]
   [6] #42 at /home/vagrant/.julia/v0.7/SimilaritySearch/test/testdistances.jl:154 [inlined]
   [7] macro expansion at /home/vagrant/.julia/v0.7/SimilaritySearch/test/testdistances.jl:12 [inlined]
   [8] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1007 [inlined]
   [9] test_binhamming(::getfield(, Symbol("##42#50")), ::Int64, ::String, ::getfield(, Symbol("##43#51"))) at /home/vagrant/.julia/v0.7/SimilaritySearch/test/testdistances.jl:6
   [10] macro expansion at /home/vagrant/.julia/v0.7/SimilaritySearch/test/testdistances.jl:154 [inlined]
   [11] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1007 [inlined]
   [12] top-level scope at /home/vagrant/.julia/v0.7/SimilaritySearch/test/testdistances.jl:139
   [13] include at ./boot.jl:292 [inlined]
   [14] include_relative(::Module, ::String) at ./loading.jl:521
   [15] include(::Module, ::String) at ./sysimg.jl:26
   [16] include(::String) at ./sysimg.jl:65
   [17] top-level scope
   [18] include at ./boot.jl:292 [inlined]
   [19] include_relative(::Module, ::String) at ./loading.jl:521
   [20] include(::Module, ::String) at ./sysimg.jl:26
   [21] process_options(::Base.JLOptions) at ./client.jl:324
   [22] _start() at ./client.jl:375
indexing vectors with Sequential with BinHammingDistance: Error During Test at /home/vagrant/.julia/v0.7/SimilaritySearch/test/testdistances.jl:155
  Test threw an exception of type ErrorException
  Expression: p.recall > 0.99
  type DefaultTestSet has no field recall
  Stacktrace:
   [1] getproperty(::Test.DefaultTestSet, ::Symbol) at ./sysimg.jl:8
   [2] macro expansion at /home/vagrant/.julia/v0.7/SimilaritySearch/test/testdistances.jl:155 [inlined]
   [3] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1007 [inlined]
   [4] top-level scope at /home/vagrant/.julia/v0.7/SimilaritySearch/test/testdistances.jl:139
[ Info: SimilaritySearch tests passed

>>> End of log
