>>> 'Pkg.add("LazyContext")' log
WARNING: Base.Pkg is deprecated, run `using Pkg` instead
 in module Main
[ Info: Cloning cache of LazyContext from https://github.com/bramtayl/LazyContext.jl.git
[ Info: Installing LazyContext v0.1.3
[ Info: Installing MacroTools v0.4.0
[ Info: Package database updated
┌ Info: METADATA is out-of-date — you may not have the latest version of LazyContext
└ Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("LazyContext")' log
WARNING: Base.versioninfo is deprecated: it has been moved to the standard library package `InteractiveUtils`.
Add `using InteractiveUtils` to your imports.
 in module Main
WARNING: Base.versioninfo is deprecated: it has been moved to the standard library package `InteractiveUtils`.
Add `using InteractiveUtils` to your imports.
 in module Main
Julia Version 0.7.0-DEV.4983
Commit 7e2ce0e543 (2018-05-02 20:11 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
      Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-143-generic #192-Ubuntu SMP Tue Feb 27 10:45:36 UTC 2018 x86_64 x86_64
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
              speed         user         nice          sys         idle          irq
       #1  3499 MHz    2713924 s        330 s     216171 s     693547 s         24 s
       #2  3499 MHz     575502 s       7296 s      74228 s    3541018 s          0 s
       
  Memory: 2.939197540283203 GB (892.31640625 MB free)
  Uptime: 42719.0 sec
  Load Avg:  1.05517578125  1.01953125  0.970703125
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant
Packages:
  Package Directory: /home/vagrant/.julia/v0.7
  Package Status:
2 required packages:
 - JSON                          0.17.2
 - LazyContext                   0.1.3
3 additional packages:
 - Compat                        0.64.0
 - MacroTools                    0.4.0
 - Nullables                     0.0.5
WARNING: Base.Pkg is deprecated, run `using Pkg` instead
 in module Main
[ Info: Computing test dependencies for LazyContext...
[ Info: Installing DocStringExtensions v0.4.4
[ Info: Installing Documenter v0.17.0
[ Info: Testing LazyContext
┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `occursin(r, s)` instead.
│   caller = isbinding at match.jl:14 [inlined]
└ @ Core match.jl:14
┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `occursin(r, s)` instead.
│   caller = isslurp at match.jl:29 [inlined]
└ @ Core match.jl:29
┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `occursin(r, s)` instead.
│   caller = isslurp(::Symbol) at match.jl:29
└ @ MacroTools match.jl:29
┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `occursin(r, s)` instead.
│   caller = isbinding at match.jl:14 [inlined]
└ @ Core match.jl:14
┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `occursin(r, s)` instead.
│   caller = isbinding at match.jl:14 [inlined]
└ @ Core match.jl:14
┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `occursin(r, s)` instead.
│   caller = isslurp at match.jl:29 [inlined]
└ @ Core match.jl:29
┌ Warning: `contains(haystack, needle)` is deprecated, use `occursin(needle, haystack)` instead.
│   caller = istb(::Symbol) at types.jl:7
└ @ MacroTools types.jl:7
┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `occursin(r, s)` instead.
│   caller = isbinding at match.jl:14 [inlined]
└ @ Core match.jl:14
Documenter: setting up build directory.
Documenter: expanding markdown templates.
Documenter: building cross-references.
Documenter: running document checks.
 > checking for missing docstrings.
 > running doctests.
=====[Test Error]==============================

> Location: src/index.md:5-23

> Code block:

```jldoctest
julia> using LazyContext

julia> with(d::WithContext, e::WithContext) = begin
            d_evaluated = evaluate!(d)
            e_copy = copy(e)
            merge!(e_copy.environment, d_evaluated)
            evaluate!(e_copy)
        end;

julia> @new_environment;

julia> @evaluate begin
            import with
            d = Dict(:a => 1, :b => 2)
            @with d a + b
        end
3
```

> Subexpression:

    @evaluate begin
         import with
         d = Dict(:a => 1, :b => 2)
         @with d a + b
     end

> Output Diff (REQUIRES COLOR):

┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `occursin(r, s)` instead.
│   caller = isbinding at match.jl:14 [inlined]
└ @ Core match.jl:14
┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `occursin(r, s)` instead.
│   caller = isslurp at match.jl:29 [inlined]
└ @ Core match.jl:29
┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `occursin(r, s)` instead.
│   caller = isslurp(::Symbol) at match.jl:29
└ @ MacroTools match.jl:29
┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `occursin(r, s)` instead.
│   caller = isbinding at match.jl:14 [inlined]
└ @ Core match.jl:14
3

=====[End Error]===============================
=====[Test Error]==============================

> Location: /home/vagrant/.julia/v0.7/LazyContext/src/environment.jl:156-173

> Code block:

```jldoctest
julia> using LazyContext

julia> w = WithContext(:(a + b));

julia> evaluate(w)
ERROR: UndefVarError: a not defined
[...]

julia> blank_environment = Environment();

julia> blank_environment[:a] = 1; blank_environment[:b] = 2;

julia> x = WithContext(w, environment = blank_environment);

julia> evaluate(x)
3
```

> Subexpression:

    evaluate(w)

> Output Diff (REQUIRES COLOR):

┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `occursin(r, s)` instead.
│   caller = isbinding at match.jl:14 [inlined]
└ @ Core match.jl:14
┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `occursin(r, s)` instead.
│   caller = isslurp at match.jl:29 [inlined]
└ @ Core match.jl:29
┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `occursin(r, s)` instead.
│   caller = isbinding at match.jl:14 [inlined]
└ @ Core match.jl:14
ERROR: UndefVarError: a not defined
[...]Stacktrace:
 [1] top-level scope
 [2] eval at ./boot.jl:317 [inlined]
 [3] eval at /home/vagrant/.julia/v0.7/LazyContext/src/LazyContext.jl:1 [inlined]
 [4] evaluate(::WithContext{Environment,Expr}) at /home/vagrant/.julia/v0.7/LazyContext/src/eval.jl:121
 [5] top-level scope

=====[End Error]===============================
=====[Test Error]==============================

> Location: /home/vagrant/.julia/v0.7/LazyContext/src/environment.jl:156-173

> Code block:

```jldoctest
julia> using LazyContext

julia> w = WithContext(:(a + b));

julia> evaluate(w)
ERROR: UndefVarError: a not defined
[...]

julia> blank_environment = Environment();

julia> blank_environment[:a] = 1; blank_environment[:b] = 2;

julia> x = WithContext(w, environment = blank_environment);

julia> evaluate(x)
3
```

> Subexpression:

    evaluate(x)

> Output Diff (REQUIRES COLOR):

┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `occursin(r, s)` instead.
│   caller = isbinding at match.jl:14 [inlined]
└ @ Core match.jl:14
┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `occursin(r, s)` instead.
│   caller = isslurp at match.jl:29 [inlined]
└ @ Core match.jl:29
┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `occursin(r, s)` instead.
│   caller = isbinding at match.jl:14 [inlined]
└ @ Core match.jl:14
3

=====[End Error]===============================
=====[Test Error]==============================

> Location: /home/vagrant/.julia/v0.7/LazyContext/src/eval.jl:16-25

> Code block:

```jldoctest
julia> using LazyContext; @new_environment;

julia> ENVIRONMENT[:a] = 1;

julia> ENVIRONMENT[:b] = 2;

julia> w = WithContext(ENVIRONMENT, :(a + b), @__MODULE__) |> evaluate!
3
```

> Subexpression:

    w = WithContext(ENVIRONMENT, :(a + b), @__MODULE__) |> evaluate!

> Output Diff (REQUIRES COLOR):

┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `occursin(r, s)` instead.
│   caller = isbinding at match.jl:14 [inlined]
└ @ Core match.jl:14
┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `occursin(r, s)` instead.
│   caller = isslurp at match.jl:29 [inlined]
└ @ Core match.jl:29
┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `occursin(r, s)` instead.
│   caller = isbinding at match.jl:14 [inlined]
└ @ Core match.jl:14
3

=====[End Error]===============================
=====[Test Error]==============================

> Location: /home/vagrant/.julia/v0.7/LazyContext/src/eval.jl:42-51

> Code block:

```jldoctest
julia> using LazyContext; @new_environment;

julia> ENVIRONMENT[:a] = 1;

julia> WithContext(ENVIRONMENT, :(a = 2), @__MODULE__) |> evaluate;

julia> ENVIRONMENT[:a]
1
```

> Subexpression:

    WithContext(ENVIRONMENT, :(a = 2), @__MODULE__) |> evaluate;

> Output Diff (REQUIRES COLOR):

┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `occursin(r, s)` instead.
│   caller = isbinding at match.jl:14 [inlined]
└ @ Core match.jl:14
┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `occursin(r, s)` instead.
│   caller = isslurp at match.jl:29 [inlined]
└ @ Core match.jl:29
┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `occursin(r, s)` instead.
│   caller = isslurp(::Symbol) at match.jl:29
└ @ MacroTools match.jl:29
┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `occursin(r, s)` instead.
│   caller = isbinding at match.jl:14 [inlined]
└ @ Core match.jl:14

=====[End Error]===============================
=====[Test Error]==============================

> Location: /home/vagrant/.julia/v0.7/LazyContext/src/eval.jl:56-66

> Code block:

```jldoctest
julia> using LazyContext; @new_environment;

julia> e = quote
            a = 1
            ENVIRONMENT[:a]
        end;

julia> WithContext(ENVIRONMENT, e, @__MODULE__) |> evaluate
:a
```

> Subexpression:

    WithContext(ENVIRONMENT, e, @__MODULE__) |> evaluate

> Output Diff (REQUIRES COLOR):

┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `occursin(r, s)` instead.
│   caller = isbinding at match.jl:14 [inlined]
└ @ Core match.jl:14
┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `occursin(r, s)` instead.
│   caller = isslurp at match.jl:29 [inlined]
└ @ Core match.jl:29
┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `occursin(r, s)` instead.
│   caller = isslurp(::Symbol) at match.jl:29
└ @ MacroTools match.jl:29
┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `occursin(r, s)` instead.
│   caller = isbinding at match.jl:14 [inlined]
└ @ Core match.jl:14
┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `occursin(r, s)` instead.
│   caller = isbinding at match.jl:14 [inlined]
└ @ Core match.jl:14
:a

=====[End Error]===============================
=====[Test Error]==============================

> Location: /home/vagrant/.julia/v0.7/LazyContext/src/eval.jl:81-88

> Code block:

```jldoctest
julia> using LazyContext; @new_environment;

julia> ENVIRONMENT[:a] = 1;

julia> WithContext(ENVIRONMENT, :(@fastmath a + 1), @__MODULE__) |> evaluate
2
```

> Subexpression:

    WithContext(ENVIRONMENT, :(@fastmath a + 1), @__MODULE__) |> evaluate

> Output Diff (REQUIRES COLOR):

┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `occursin(r, s)` instead.
│   caller = isbinding at match.jl:14 [inlined]
└ @ Core match.jl:14
┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `occursin(r, s)` instead.
│   caller = isslurp at match.jl:29 [inlined]
└ @ Core match.jl:29
┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `occursin(r, s)` instead.
│   caller = isbinding at match.jl:14 [inlined]
└ @ Core match.jl:14
2

=====[End Error]===============================
=====[Test Error]==============================

> Location: /home/vagrant/.julia/v0.7/LazyContext/src/eval.jl:91-103

> Code block:

```jldoctest
julia> using LazyContext; @new_environment;

julia> e = quote
            function plus(a, b)
                a + b
            end
            plus(1, 2)
        end;

julia> WithContext(ENVIRONMENT, e, @__MODULE__) |> evaluate
3
```

> Subexpression:

    WithContext(ENVIRONMENT, e, @__MODULE__) |> evaluate

> Output Diff (REQUIRES COLOR):

┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `occursin(r, s)` instead.
│   caller = isbinding at match.jl:14 [inlined]
└ @ Core match.jl:14
┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `occursin(r, s)` instead.
│   caller = isslurp at match.jl:29 [inlined]
└ @ Core match.jl:29
┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `occursin(r, s)` instead.
│   caller = isslurp(::Symbol) at match.jl:29
└ @ MacroTools match.jl:29
┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `occursin(r, s)` instead.
│   caller = isbinding(::Symbol) at match.jl:14
└ @ MacroTools match.jl:14
┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `occursin(r, s)` instead.
│   caller = isbinding at match.jl:14 [inlined]
└ @ Core match.jl:14
3

=====[End Error]===============================
=====[Test Error]==============================

> Location: /home/vagrant/.julia/v0.7/LazyContext/src/eval.jl

> Code block:

```jldoctest
julia> using LazyContext; @new_environment;

julia> e = quote
            macro A(a, b)
                :($a + $b)
            end
        end;

julia> WithContext(ENVIRONMENT, e, @__MODULE__) |> evaluate
@A (macro with 1 method)
```

> Subexpression:

    WithContext(ENVIRONMENT, e, @__MODULE__) |> evaluate

> Output Diff (REQUIRES COLOR):

┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `occursin(r, s)` instead.
│   caller = isbinding at match.jl:14 [inlined]
└ @ Core match.jl:14
┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `occursin(r, s)` instead.
│   caller = isslurp at match.jl:29 [inlined]
└ @ Core match.jl:29
┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `occursin(r, s)` instead.
│   caller = isslurp(::Symbol) at match.jl:29
└ @ MacroTools match.jl:29
┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `occursin(r, s)` instead.
│   caller = isbinding(::Symbol) at match.jl:14
└ @ MacroTools match.jl:14
┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `occursin(r, s)` instead.
│   caller = isbinding at match.jl:14 [inlined]
└ @ Core match.jl:14
@A (macro with 1 method)

=====[End Error]===============================
=====[Test Error]==============================

> Location: /home/vagrant/.julia/v0.7/LazyContext/src/eval.jl:131-143

> Code block:

```jldoctest
julia> using LazyContext; @new_environment;

julia> @evaluate a = 1;

julia> @evaluate a
1

julia> ENVIRONMENT[:a] = 2;

julia> @evaluate a
2
```

> Subexpression:

    @evaluate a = 1;

> Output Diff (REQUIRES COLOR):

┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `occursin(r, s)` instead.
│   caller = isbinding at match.jl:14 [inlined]
└ @ Core match.jl:14
┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `occursin(r, s)` instead.
│   caller = isslurp at match.jl:29 [inlined]
└ @ Core match.jl:29
┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `occursin(r, s)` instead.
│   caller = isslurp(::Symbol) at match.jl:29
└ @ MacroTools match.jl:29
┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `occursin(r, s)` instead.
│   caller = isbinding at match.jl:14 [inlined]
└ @ Core match.jl:14

=====[End Error]===============================
=====[Test Error]==============================

> Location: /home/vagrant/.julia/v0.7/LazyContext/src/eval.jl:159-181

> Code block:

```jldoctest
julia> using LazyContext; @new_environment;

julia> @evaluate begin
            simple = x -> x + 1
            simple(1)
        end
2

julia> @evaluate begin
           test_function = (a, b...; c = 1) -> +(a, c, b...)
           test_function(1, 2, 3; c = 4)
       end
10

julia> @evaluate begin
            minus = function (a, b)
                a - b
            end
            minus(2, 1)
        end
1
```

> Subexpression:

    @evaluate begin
         simple = x -> x + 1
         simple(1)
     end

> Output Diff (REQUIRES COLOR):

┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `occursin(r, s)` instead.
│   caller = isbinding at match.jl:14 [inlined]
└ @ Core match.jl:14
┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `occursin(r, s)` instead.
│   caller = isslurp at match.jl:29 [inlined]
└ @ Core match.jl:29
┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `occursin(r, s)` instead.
│   caller = isslurp(::Symbol) at match.jl:29
└ @ MacroTools match.jl:29
┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `occursin(r, s)` instead.
│   caller = isbinding at match.jl:14 [inlined]
└ @ Core match.jl:14
┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `occursin(r, s)` instead.
│   caller = isbinding(::Symbol) at match.jl:14
└ @ MacroTools match.jl:14
┌ Warning: `unshift!` is deprecated, use `pushfirst!` instead.
│   caller = #new_environment#8 at parse.jl:74 [inlined]
└ @ Core parse.jl:74
2

=====[End Error]===============================
=====[Test Error]==============================

> Location: /home/vagrant/.julia/v0.7/LazyContext/src/eval.jl:159-181

> Code block:

```jldoctest
julia> using LazyContext; @new_environment;

julia> @evaluate begin
            simple = x -> x + 1
            simple(1)
        end
2

julia> @evaluate begin
           test_function = (a, b...; c = 1) -> +(a, c, b...)
           test_function(1, 2, 3; c = 4)
       end
10

julia> @evaluate begin
            minus = function (a, b)
                a - b
            end
            minus(2, 1)
        end
1
```

> Subexpression:

    @evaluate begin
        test_function = (a, b...; c = 1) -> +(a, c, b...)
        test_function(1, 2, 3; c = 4)
    end

> Output Diff (REQUIRES COLOR):

┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `occursin(r, s)` instead.
│   caller = isbinding at match.jl:14 [inlined]
└ @ Core match.jl:14
┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `occursin(r, s)` instead.
│   caller = isslurp at match.jl:29 [inlined]
└ @ Core match.jl:29
┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `occursin(r, s)` instead.
│   caller = isslurp(::Symbol) at match.jl:29
└ @ MacroTools match.jl:29
┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `occursin(r, s)` instead.
│   caller = isbinding at match.jl:14 [inlined]
└ @ Core match.jl:14
┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `occursin(r, s)` instead.
│   caller = isbinding(::Symbol) at match.jl:14
└ @ MacroTools match.jl:14
┌ Warning: `unshift!` is deprecated, use `pushfirst!` instead.
│   caller = #new_environment#8 at parse.jl:74 [inlined]
└ @ Core parse.jl:74
┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `occursin(r, s)` instead.
│   caller = isbinding at match.jl:14 [inlined]
└ @ Core match.jl:14
10

=====[End Error]===============================
=====[Test Error]==============================

> Location: /home/vagrant/.julia/v0.7/LazyContext/src/eval.jl:159-181

> Code block:

```jldoctest
julia> using LazyContext; @new_environment;

julia> @evaluate begin
            simple = x -> x + 1
            simple(1)
        end
2

julia> @evaluate begin
           test_function = (a, b...; c = 1) -> +(a, c, b...)
           test_function(1, 2, 3; c = 4)
       end
10

julia> @evaluate begin
            minus = function (a, b)
                a - b
            end
            minus(2, 1)
        end
1
```

> Subexpression:

    @evaluate begin
         minus = function (a, b)
             a - b
         end
         minus(2, 1)
     end

> Output Diff (REQUIRES COLOR):

┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `occursin(r, s)` instead.
│   caller = isbinding at match.jl:14 [inlined]
└ @ Core match.jl:14
┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `occursin(r, s)` instead.
│   caller = isslurp at match.jl:29 [inlined]
└ @ Core match.jl:29
┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `occursin(r, s)` instead.
│   caller = isslurp(::Symbol) at match.jl:29
└ @ MacroTools match.jl:29
┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `occursin(r, s)` instead.
│   caller = isbinding at match.jl:14 [inlined]
└ @ Core match.jl:14
┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `occursin(r, s)` instead.
│   caller = isbinding(::Symbol) at match.jl:14
└ @ MacroTools match.jl:14
┌ Warning: `unshift!` is deprecated, use `pushfirst!` instead.
│   caller = #new_environment#8 at parse.jl:74 [inlined]
└ @ Core parse.jl:74
1

=====[End Error]===============================
=====[Test Error]==============================

> Location: /home/vagrant/.julia/v0.7/LazyContext/src/eval.jl:185-204

> Code block:

```jldoctest
julia> using LazyContext; @new_environment;

julia> @evaluate begin
            function plus(a, b)::Int
                a + b
            end
            plus(1, 2)
        end
3

julia> @evaluate begin
            minus(a, b)::Int = 1
            minus(2, 1)
        end
1

julia> minus(4, plus(1, 2))
1
```

> Subexpression:

    @evaluate begin
         function plus(a, b)::Int
             a + b
         end
         plus(1, 2)
     end

> Output Diff (REQUIRES COLOR):

┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `occursin(r, s)` instead.
│   caller = isbinding at match.jl:14 [inlined]
└ @ Core match.jl:14
┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `occursin(r, s)` instead.
│   caller = isslurp at match.jl:29 [inlined]
└ @ Core match.jl:29
┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `occursin(r, s)` instead.
│   caller = isslurp(::Symbol) at match.jl:29
└ @ MacroTools match.jl:29
┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `occursin(r, s)` instead.
│   caller = isbinding(::Symbol) at match.jl:14
└ @ MacroTools match.jl:14
┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `occursin(r, s)` instead.
│   caller = isbinding at match.jl:14 [inlined]
└ @ Core match.jl:14
┌ Warning: `unshift!` is deprecated, use `pushfirst!` instead.
│   caller = #new_environment#8 at parse.jl:74 [inlined]
└ @ Core parse.jl:74
3

=====[End Error]===============================
=====[Test Error]==============================

> Location: /home/vagrant/.julia/v0.7/LazyContext/src/eval.jl:185-204

> Code block:

```jldoctest
julia> using LazyContext; @new_environment;

julia> @evaluate begin
            function plus(a, b)::Int
                a + b
            end
            plus(1, 2)
        end
3

julia> @evaluate begin
            minus(a, b)::Int = 1
            minus(2, 1)
        end
1

julia> minus(4, plus(1, 2))
1
```

> Subexpression:

    @evaluate begin
         minus(a, b)::Int = 1
         minus(2, 1)
     end

> Output Diff (REQUIRES COLOR):

┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `occursin(r, s)` instead.
│   caller = isbinding at match.jl:14 [inlined]
└ @ Core match.jl:14
┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `occursin(r, s)` instead.
│   caller = isslurp at match.jl:29 [inlined]
└ @ Core match.jl:29
┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `occursin(r, s)` instead.
│   caller = isslurp(::Symbol) at match.jl:29
└ @ MacroTools match.jl:29
┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `occursin(r, s)` instead.
│   caller = isbinding(::Symbol) at match.jl:14
└ @ MacroTools match.jl:14
┌ Warning: `unshift!` is deprecated, use `pushfirst!` instead.
│   caller = #new_environment#8 at parse.jl:74 [inlined]
└ @ Core parse.jl:74
┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `occursin(r, s)` instead.
│   caller = isbinding at match.jl:14 [inlined]
└ @ Core match.jl:14
1

=====[End Error]===============================
=====[Test Error]==============================

> Location: /home/vagrant/.julia/v0.7/LazyContext/src/eval.jl:209-221

> Code block:

```jldoctest
julia> using LazyContext; @new_environment;

julia> @evaluate begin
           a = 1
           function test(b)
               merge!(ENVIRONMENT, Dict(:a => 2))
               a + b + PARENT[:a]
           end
           test(3)
       end
6
```

> Subexpression:

    @evaluate begin
        a = 1
        function test(b)
            merge!(ENVIRONMENT, Dict(:a => 2))
            a + b + PARENT[:a]
        end
        test(3)
    end

> Output Diff (REQUIRES COLOR):

┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `occursin(r, s)` instead.
│   caller = isbinding at match.jl:14 [inlined]
└ @ Core match.jl:14
┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `occursin(r, s)` instead.
│   caller = isslurp at match.jl:29 [inlined]
└ @ Core match.jl:29
┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `occursin(r, s)` instead.
│   caller = isslurp(::Symbol) at match.jl:29
└ @ MacroTools match.jl:29
┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `occursin(r, s)` instead.
│   caller = isbinding at match.jl:14 [inlined]
└ @ Core match.jl:14
┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `occursin(r, s)` instead.
│   caller = isbinding(::Symbol) at match.jl:14
└ @ MacroTools match.jl:14
┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `occursin(r, s)` instead.
│   caller = isbinding at match.jl:14 [inlined]
└ @ Core match.jl:14
┌ Warning: `unshift!` is deprecated, use `pushfirst!` instead.
│   caller = #new_environment#8 at parse.jl:74 [inlined]
└ @ Core parse.jl:74
6

=====[End Error]===============================
=====[Test Error]==============================

> Location: /home/vagrant/.julia/v0.7/LazyContext/src/eval.jl:226-238

> Code block:

```jldoctest
julia> using LazyContext; @new_environment;

julia> @evaluate begin
           a = 1
           test(b) = a + b
           first_result = test(2)
           a = 2
           second_result = test(2)
           first_result, second_result
       end
(3, 4)
```

> Subexpression:

    @evaluate begin
        a = 1
        test(b) = a + b
        first_result = test(2)
        a = 2
        second_result = test(2)
        first_result, second_result
    end

> Output Diff (REQUIRES COLOR):

┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `occursin(r, s)` instead.
│   caller = isbinding at match.jl:14 [inlined]
└ @ Core match.jl:14
┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `occursin(r, s)` instead.
│   caller = isslurp at match.jl:29 [inlined]
└ @ Core match.jl:29
┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `occursin(r, s)` instead.
│   caller = isslurp(::Symbol) at match.jl:29
└ @ MacroTools match.jl:29
┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `occursin(r, s)` instead.
│   caller = isbinding at match.jl:14 [inlined]
└ @ Core match.jl:14
┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `occursin(r, s)` instead.
│   caller = isbinding(::Symbol) at match.jl:14
└ @ MacroTools match.jl:14
┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `occursin(r, s)` instead.
│   caller = isbinding at match.jl:14 [inlined]
└ @ Core match.jl:14
┌ Warning: `unshift!` is deprecated, use `pushfirst!` instead.
│   caller = #new_environment#8 at parse.jl:74 [inlined]
└ @ Core parse.jl:74
(3, 4)

=====[End Error]===============================
=====[Test Error]==============================

> Location: /home/vagrant/.julia/v0.7/LazyContext/src/eval.jl:243-255

> Code block:

```jldoctest
julia> using LazyContext; @new_environment;

julia> @evaluate begin
            a = 1
            result = let b = 2
                a = 3
                a + b
            end
            a, result
        end
(1, 5)
```

> Subexpression:

    @evaluate begin
         a = 1
         result = let b = 2
             a = 3
             a + b
         end
         a, result
     end

> Output Diff (REQUIRES COLOR):

(1, 5)┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `occursin(r, s)` instead.
│   caller = isbinding at match.jl:14 [inlined]
└ @ Core match.jl:14
┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `occursin(r, s)` instead.
│   caller = isslurp at match.jl:29 [inlined]
└ @ Core match.jl:29
┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `occursin(r, s)` instead.
│   caller = isslurp(::Symbol) at match.jl:29
└ @ MacroTools match.jl:29
┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `occursin(r, s)` instead.
│   caller = isbinding at match.jl:14 [inlined]
└ @ Core match.jl:14
┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `occursin(r, s)` instead.
│   caller = isbinding at match.jl:14 [inlined]
└ @ Core match.jl:14
┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `occursin(r, s)` instead.
│   caller = isbinding(::Symbol) at match.jl:14
└ @ MacroTools match.jl:14
┌ Warning: `unshift!` is deprecated, use `pushfirst!` instead.
│   caller = #new_environment#8 at parse.jl:74 [inlined]
└ @ Core parse.jl:74
ERROR: syntax: invalid let syntax

=====[End Error]===============================
=====[Test Error]==============================

> Location: /home/vagrant/.julia/v0.7/LazyContext/src/eval.jl:259-272

> Code block:

```jldoctest
julia> using LazyContext; @new_environment;

julia> @evaluate begin
            c = Matrix{Int}(2, 2)
            for a in 1:2, b in 1:2
                c[a, b] = a + b
            end
            c
        end
2×2 Array{Int64,2}:
 2  3
 3  4
```

> Subexpression:

    @evaluate begin
         c = Matrix{Int}(2, 2)
         for a in 1:2, b in 1:2
             c[a, b] = a + b
         end
         c
     end

> Output Diff (REQUIRES COLOR):

┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `occursin(r, s)` instead.
│   caller = isbinding at match.jl:14 [inlined]
└ @ Core match.jl:14
┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `occursin(r, s)` instead.
│   caller = isslurp at match.jl:29 [inlined]
└ @ Core match.jl:29
┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `occursin(r, s)` instead.
│   caller = isslurp(::Symbol) at match.jl:29
└ @ MacroTools match.jl:29
┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `occursin(r, s)` instead.
│   caller = isbinding at match.jl:14 [inlined]
└ @ Core match.jl:14
┌ Warning: `Array{T, 2}(m::Int, n::Int) where T` is deprecated, use `Array{T, 2}(undef, m, n)` instead.
│   caller = top-level scope at none:2
└ @ Core none:2
2×2 Array{Int64,2}:
 2  3
 3  4

=====[End Error]===============================
=====[Test Error]==============================

> Location: /home/vagrant/.julia/v0.7/LazyContext/src/eval.jl:276-287

> Code block:

```jldoctest
julia> using LazyContext; @new_environment;

julia> @evaluate begin
            b = 0
            for a in 1:3
                b = a + b
            end
            a, b
        end
(3, 6)
```

> Subexpression:

    @evaluate begin
         b = 0
         for a in 1:3
             b = a + b
         end
         a, b
     end

> Output Diff (REQUIRES COLOR):

┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `occursin(r, s)` instead.
│   caller = isbinding at match.jl:14 [inlined]
└ @ Core match.jl:14
┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `occursin(r, s)` instead.
│   caller = isslurp at match.jl:29 [inlined]
└ @ Core match.jl:29
┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `occursin(r, s)` instead.
│   caller = isslurp(::Symbol) at match.jl:29
└ @ MacroTools match.jl:29
┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `occursin(r, s)` instead.
│   caller = isbinding at match.jl:14 [inlined]
└ @ Core match.jl:14
┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `occursin(r, s)` instead.
│   caller = isbinding at match.jl:14 [inlined]
└ @ Core match.jl:14
(3, 6)

=====[End Error]===============================
=====[Test Error]==============================

> Location: /home/vagrant/.julia/v0.7/LazyContext/src/eval.jl:290-295

> Code block:

```jldoctest
julia> using LazyContext; @new_environment;

julia> @evaluate sum(a for a in 0:2 if a > 0)
3
```

> Subexpression:

    @evaluate sum(a for a in 0:2 if a > 0)

> Output Diff (REQUIRES COLOR):

┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `occursin(r, s)` instead.
│   caller = isbinding at match.jl:14 [inlined]
└ @ Core match.jl:14
┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `occursin(r, s)` instead.
│   caller = isslurp at match.jl:29 [inlined]
└ @ Core match.jl:29
┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `occursin(r, s)` instead.
│   caller = isbinding at match.jl:14 [inlined]
└ @ Core match.jl:14
┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `occursin(r, s)` instead.
│   caller = isslurp(::Symbol) at match.jl:29
└ @ MacroTools match.jl:29
┌ Warning: `unshift!` is deprecated, use `pushfirst!` instead.
│   caller = #new_environment#8(::Symbol, ::Function, ::WithContext{Symbol,Symbol}, ::Array{Any,1}) at parse.jl:74
└ @ LazyContext parse.jl:74
3

=====[End Error]===============================
=====[Test Error]==============================

> Location: /home/vagrant/.julia/v0.7/LazyContext/src/eval.jl:301-313

> Code block:

```jldoctest
julia> using LazyContext; @new_environment;

julia> e = @evaluate begin
           a = 1
           b = 2
           @identity a + b
       end
WithContext(a + b)

julia> evaluate!(e)
3
```

> Subexpression:

    e = @evaluate begin
        a = 1
        b = 2
        @identity a + b
    end

> Output Diff (REQUIRES COLOR):

┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `occursin(r, s)` instead.
│   caller = isbinding at match.jl:14 [inlined]
└ @ Core match.jl:14
┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `occursin(r, s)` instead.
│   caller = isslurp at match.jl:29 [inlined]
└ @ Core match.jl:29
┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `occursin(r, s)` instead.
│   caller = isslurp(::Symbol) at match.jl:29
└ @ MacroTools match.jl:29
┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `occursin(r, s)` instead.
│   caller = isbinding at match.jl:14 [inlined]
└ @ Core match.jl:14
WithContext(a + b)

=====[End Error]===============================
=====[Test Error]==============================

> Location: /home/vagrant/.julia/v0.7/LazyContext/src/eval.jl:301-313

> Code block:

```jldoctest
julia> using LazyContext; @new_environment;

julia> e = @evaluate begin
           a = 1
           b = 2
           @identity a + b
       end
WithContext(a + b)

julia> evaluate!(e)
3
```

> Subexpression:

    evaluate!(e)

> Output Diff (REQUIRES COLOR):

┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `occursin(r, s)` instead.
│   caller = isbinding at match.jl:14 [inlined]
└ @ Core match.jl:14
┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `occursin(r, s)` instead.
│   caller = isslurp at match.jl:29 [inlined]
└ @ Core match.jl:29
┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `occursin(r, s)` instead.
│   caller = isbinding at match.jl:14 [inlined]
└ @ Core match.jl:14
3

=====[End Error]===============================
=====[Test Error]==============================

> Location: /home/vagrant/.julia/v0.7/LazyContext/src/eval.jl:317-346

> Code block:

```jldoctest
julia> using LazyContext; @new_environment;

julia> @evaluate begin
            struct A
                a::Int
                b
                A(a, b) = if a > b
                    new(a, b)
                else
                    new(b, a)
                end
            end
            A(1, 2).a
        end
2

julia> @evaluate begin
            abstract type B end
            mutable struct C <: B
                a
                b
                function C(a, b)
                    new(a + b, a - b)
                end
            end
            C(1, 2).a
        end
3
```

> Subexpression:

    @evaluate begin
         struct A
             a::Int
             b
             A(a, b) = if a > b
                 new(a, b)
             else
                 new(b, a)
             end
         end
         A(1, 2).a
     end

> Output Diff (REQUIRES COLOR):

┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `occursin(r, s)` instead.
│   caller = isbinding at match.jl:14 [inlined]
└ @ Core match.jl:14
┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `occursin(r, s)` instead.
│   caller = isslurp at match.jl:29 [inlined]
└ @ Core match.jl:29
┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `occursin(r, s)` instead.
│   caller = isslurp(::Symbol) at match.jl:29
└ @ MacroTools match.jl:29
┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `occursin(r, s)` instead.
│   caller = isbinding(::Symbol) at match.jl:14
└ @ MacroTools match.jl:14
┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `occursin(r, s)` instead.
│   caller = isbinding at match.jl:14 [inlined]
└ @ Core match.jl:14
┌ Warning: `unshift!` is deprecated, use `pushfirst!` instead.
│   caller = #new_environment#8 at parse.jl:74 [inlined]
└ @ Core parse.jl:74
2

=====[End Error]===============================
=====[Test Error]==============================

> Location: /home/vagrant/.julia/v0.7/LazyContext/src/eval.jl:317-346

> Code block:

```jldoctest
julia> using LazyContext; @new_environment;

julia> @evaluate begin
            struct A
                a::Int
                b
                A(a, b) = if a > b
                    new(a, b)
                else
                    new(b, a)
                end
            end
            A(1, 2).a
        end
2

julia> @evaluate begin
            abstract type B end
            mutable struct C <: B
                a
                b
                function C(a, b)
                    new(a + b, a - b)
                end
            end
            C(1, 2).a
        end
3
```

> Subexpression:

    @evaluate begin
         abstract type B end
         mutable struct C <: B
             a
             b
             function C(a, b)
                 new(a + b, a - b)
             end
         end
         C(1, 2).a
     end

> Output Diff (REQUIRES COLOR):

┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `occursin(r, s)` instead.
│   caller = isbinding at match.jl:14 [inlined]
└ @ Core match.jl:14
┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `occursin(r, s)` instead.
│   caller = isslurp at match.jl:29 [inlined]
└ @ Core match.jl:29
┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `occursin(r, s)` instead.
│   caller = isslurp(::Symbol) at match.jl:29
└ @ MacroTools match.jl:29
┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `occursin(r, s)` instead.
│   caller = isbinding at match.jl:14 [inlined]
└ @ Core match.jl:14
┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `occursin(r, s)` instead.
│   caller = isbinding(::Symbol) at match.jl:14
└ @ MacroTools match.jl:14
┌ Warning: `unshift!` is deprecated, use `pushfirst!` instead.
│   caller = #new_environment#8 at parse.jl:74 [inlined]
└ @ Core parse.jl:74
3

=====[End Error]===============================
=====[Test Error]==============================

> Location: /home/vagrant/.julia/v0.7/LazyContext/src/eval.jl:351-360

> Code block:

```jldoctest
julia> using LazyContext; @new_environment;

julia> @evaluate begin
            primitive type D 64 end
        end;

julia> typeof(D)
DataType
```

> Subexpression:

    @evaluate begin
         primitive type D 64 end
     end;

> Output Diff (REQUIRES COLOR):

┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `occursin(r, s)` instead.
│   caller = isbinding at match.jl:14 [inlined]
└ @ Core match.jl:14
┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `occursin(r, s)` instead.
│   caller = isslurp at match.jl:29 [inlined]
└ @ Core match.jl:29
┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `occursin(r, s)` instead.
│   caller = isslurp(::Symbol) at match.jl:29
└ @ MacroTools match.jl:29
┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `occursin(r, s)` instead.
│   caller = isbinding at match.jl:14 [inlined]
└ @ Core match.jl:14

=====[End Error]===============================
=====[Test Error]==============================

> Location: /home/vagrant/.julia/v0.7/LazyContext/src/eval.jl:365-376

> Code block:

```jldoctest
julia> using LazyContext; @new_environment;

julia> @evaluate begin
            module F
                a = 1
            end
            F.a
        end
ERROR: syntax: module expression not at top level
[...]
```

> Subexpression:

    @evaluate begin
         module F
             a = 1
         end
         F.a
     end

> Output Diff (REQUIRES COLOR):

┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `occursin(r, s)` instead.
│   caller = isbinding at match.jl:14 [inlined]
└ @ Core match.jl:14
┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `occursin(r, s)` instead.
│   caller = isslurp at match.jl:29 [inlined]
└ @ Core match.jl:29
┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `occursin(r, s)` instead.
│   caller = isslurp(::Symbol) at match.jl:29
└ @ MacroTools match.jl:29
┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `occursin(r, s)` instead.
│   caller = isbinding(::Symbol) at match.jl:14
└ @ MacroTools match.jl:14
┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `occursin(r, s)` instead.
│   caller = isbinding at match.jl:14 [inlined]
└ @ Core match.jl:14
ERROR: syntax: module "module" expression not at top level
[...]level

=====[End Error]===============================
=====[Test Error]==============================

> Location: /home/vagrant/.julia/v0.7/LazyContext/src/eval.jl:382-396

> Code block:

```jldoctest
julia> using LazyContext; @new_environment;

julia> import MacroTools

julia> plus(a, b) = a + b;

julia> @evaluate import MacroTools, plus;

julia> MacroTools.prettify == @evaluate MacroTools.prettify
true

julia> plus(1, 2) == @evaluate plus(1, 2)
true
```

> Subexpression:

    @evaluate import MacroTools, plus;

> Output Diff (REQUIRES COLOR):

┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `occursin(r, s)` instead.
│   caller = isbinding at match.jl:14 [inlined]
└ @ Core match.jl:14
┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `occursin(r, s)` instead.
│   caller = isslurp at match.jl:29 [inlined]
└ @ Core match.jl:29
┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `occursin(r, s)` instead.
│   caller = isslurp(::Symbol) at match.jl:29
└ @ MacroTools match.jl:29
┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `occursin(r, s)` instead.
│   caller = isbinding at match.jl:14 [inlined]
└ @ Core match.jl:14
ERROR: TypeError: in import, expected Symbol, got Expr

=====[End Error]===============================
=====[Test Error]==============================

> Location: /home/vagrant/.julia/v0.7/LazyContext/src/eval.jl:382-396

> Code block:

```jldoctest
julia> using LazyContext; @new_environment;

julia> import MacroTools

julia> plus(a, b) = a + b;

julia> @evaluate import MacroTools, plus;

julia> MacroTools.prettify == @evaluate MacroTools.prettify
true

julia> plus(1, 2) == @evaluate plus(1, 2)
true
```

> Subexpression:

    MacroTools.prettify == @evaluate MacroTools.prettify

> Output Diff (REQUIRES COLOR):

true┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `occursin(r, s)` instead.
│   caller = isbinding at match.jl:14 [inlined]
└ @ Core match.jl:14
┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `occursin(r, s)` instead.
│   caller = isslurp at match.jl:29 [inlined]
└ @ Core match.jl:29
┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `occursin(r, s)` instead.
│   caller = isbinding at match.jl:14 [inlined]
└ @ Core match.jl:14
ERROR: KeyError: key :MacroTools not found
Stacktrace:
 [1] getindex at ./dict.jl:741 [inlined]
 [2] getindex(::Environment, ::Symbol) at /home/vagrant/.julia/v0.7/LazyContext/src/environment.jl:91
 [3] top-level scope

=====[End Error]===============================
=====[Test Error]==============================

> Location: /home/vagrant/.julia/v0.7/LazyContext/src/eval.jl:382-396

> Code block:

```jldoctest
julia> using LazyContext; @new_environment;

julia> import MacroTools

julia> plus(a, b) = a + b;

julia> @evaluate import MacroTools, plus;

julia> MacroTools.prettify == @evaluate MacroTools.prettify
true

julia> plus(1, 2) == @evaluate plus(1, 2)
true
```

> Subexpression:

    plus(1, 2) == @evaluate plus(1, 2)

> Output Diff (REQUIRES COLOR):

true┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `occursin(r, s)` instead.
│   caller = isbinding at match.jl:14 [inlined]
└ @ Core match.jl:14
┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `occursin(r, s)` instead.
│   caller = isslurp at match.jl:29 [inlined]
└ @ Core match.jl:29
┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `occursin(r, s)` instead.
│   caller = isbinding at match.jl:14 [inlined]
└ @ Core match.jl:14
ERROR: KeyError: key :plus not found
Stacktrace:
 [1] getindex at ./dict.jl:741 [inlined]
 [2] getindex(::Environment, ::Symbol) at /home/vagrant/.julia/v0.7/LazyContext/src/environment.jl:91
 [3] top-level scope

=====[End Error]===============================
=====[Test Error]==============================

> Location: /home/vagrant/.julia/v0.7/LazyContext/src/eval.jl:398-412

> Code block:

```jldoctest
julia> using LazyContext; @new_environment;

julia> import MacroTools

julia> test_dict = Dict(:a => 1, :b => 2);

julia> @evaluate using MacroTools, test_dict;

julia> MacroTools.prettify == @evaluate prettify
true

julia> @evaluate a + b
3
```

> Subexpression:

    @evaluate using MacroTools, test_dict;

> Output Diff (REQUIRES COLOR):

┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `occursin(r, s)` instead.
│   caller = isbinding at match.jl:14 [inlined]
└ @ Core match.jl:14
┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `occursin(r, s)` instead.
│   caller = isslurp at match.jl:29 [inlined]
└ @ Core match.jl:29
┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `occursin(r, s)` instead.
│   caller = isslurp(::Symbol) at match.jl:29
└ @ MacroTools match.jl:29
┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `occursin(r, s)` instead.
│   caller = isbinding at match.jl:14 [inlined]
└ @ Core match.jl:14
ERROR: TypeError: in using, expected Symbol, got Expr

=====[End Error]===============================
=====[Test Error]==============================

> Location: /home/vagrant/.julia/v0.7/LazyContext/src/eval.jl:398-412

> Code block:

```jldoctest
julia> using LazyContext; @new_environment;

julia> import MacroTools

julia> test_dict = Dict(:a => 1, :b => 2);

julia> @evaluate using MacroTools, test_dict;

julia> MacroTools.prettify == @evaluate prettify
true

julia> @evaluate a + b
3
```

> Subexpression:

    MacroTools.prettify == @evaluate prettify

> Output Diff (REQUIRES COLOR):

trueERROR: KeyError: key :prettify not found
Stacktrace:
 [1] getindex at ./dict.jl:741 [inlined]
 [2] getindex(::Environment, ::Symbol) at /home/vagrant/.julia/v0.7/LazyContext/src/environment.jl:91
 [3] top-level scope

=====[End Error]===============================
=====[Test Error]==============================

> Location: /home/vagrant/.julia/v0.7/LazyContext/src/eval.jl:398-412

> Code block:

```jldoctest
julia> using LazyContext; @new_environment;

julia> import MacroTools

julia> test_dict = Dict(:a => 1, :b => 2);

julia> @evaluate using MacroTools, test_dict;

julia> MacroTools.prettify == @evaluate prettify
true

julia> @evaluate a + b
3
```

> Subexpression:

    @evaluate a + b

> Output Diff (REQUIRES COLOR):

3┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `occursin(r, s)` instead.
│   caller = isbinding at match.jl:14 [inlined]
└ @ Core match.jl:14
┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `occursin(r, s)` instead.
│   caller = isslurp at match.jl:29 [inlined]
└ @ Core match.jl:29
┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `occursin(r, s)` instead.
│   caller = isbinding at match.jl:14 [inlined]
└ @ Core match.jl:14
ERROR: KeyError: key :a not found
Stacktrace:
 [1] getindex at ./dict.jl:741 [inlined]
 [2] getindex(::Environment, ::Symbol) at /home/vagrant/.julia/v0.7/LazyContext/src/environment.jl:91
 [3] top-level scope

=====[End Error]===============================
=====[Test Error]==============================

> Location: /home/vagrant/.julia/v0.7/LazyContext/src/eval.jl:416-424

> Code block:

```jldoctest
julia> using LazyContext; @new_environment;

julia> @evaluate begin
            b = 2
            convert(Float64, b)::Float64
        end
2.0
```

> Subexpression:

    @evaluate begin
         b = 2
         convert(Float64, b)::Float64
     end

> Output Diff (REQUIRES COLOR):

┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `occursin(r, s)` instead.
│   caller = isbinding at match.jl:14 [inlined]
└ @ Core match.jl:14
┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `occursin(r, s)` instead.
│   caller = isslurp at match.jl:29 [inlined]
└ @ Core match.jl:29
┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `occursin(r, s)` instead.
│   caller = isslurp(::Symbol) at match.jl:29
└ @ MacroTools match.jl:29
┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `occursin(r, s)` instead.
│   caller = isbinding at match.jl:14 [inlined]
└ @ Core match.jl:14
┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `occursin(r, s)` instead.
│   caller = isbinding at match.jl:14 [inlined]
└ @ Core match.jl:14
2.0

=====[End Error]===============================
=====[Test Error]==============================

> Location: /home/vagrant/.julia/v0.7/LazyContext/src/eval.jl:427-432

> Code block:

```jldoctest
julia> using LazyContext; @new_environment;

julia> @evaluate global a
ERROR: global expressions not supported
```

> Subexpression:

    @evaluate global a

> Output Diff (REQUIRES COLOR):

ERROR: LoadError: global expressions not supportedsupported
Stacktrace:
 [1] error at ./error.jl:33 [inlined]
 [2] parse!(::WithContext{Symbol,Expr}) at /home/vagrant/.julia/v0.7/LazyContext/src/parse.jl:180
 [3] parse_barrier(::WithContext{Environment,Expr}) at /home/vagrant/.julia/v0.7/LazyContext/src/eval.jl:5
 [4] @evaluate(::LineNumberNode, ::Module, ::Any) at /home/vagrant/.julia/v0.7/LazyContext/src/eval.jl:439
in expression starting at none:1

=====[End Error]===============================
 > checking footnote links.
 > checking external URLs:
   - index.md
Documenter: populating indices.
ERROR: LoadError: `makedocs` encountered an error. Terminating build
Stacktrace:
 [1] error at ./error.jl:33 [inlined]
 [2] runner(::Type{Documenter.Builder.RenderDocument}, ::Documenter.Documents.Document) at /home/vagrant/.julia/v0.7/Documenter/src/Builder.jl:202
 [3] dispatch(::Type{Documenter.Builder.DocumentPipeline}, ::Documenter.Documents.Document, ::Vararg{Documenter.Documents.Document,N} where N) at /home/vagrant/.julia/v0.7/Documenter/src/Selectors.jl:168
 [4] #2 at /home/vagrant/.julia/v0.7/Documenter/src/Documenter.jl:205 [inlined]
 [5] cd(::getfield(Documenter, Symbol("##2#3")){Documenter.Documents.Document}, ::String) at ./file.jl:72
 [6] #makedocs#1 at /home/vagrant/.julia/v0.7/Documenter/src/Documenter.jl:204 [inlined]
 [7] (::getfield(Documenter, Symbol("#kw##makedocs")))(::NamedTuple{(:modules, :format, :sitename, :root, :pages, :strict, :linkcheck, :authors),Tuple{Array{Module,1},Symbol,String,String,Array{Any,1},Bool,Bool,String}}, ::typeof(Documenter.makedocs)) at ./<missing>:0
 [8] top-level scope
 [9] include at ./boot.jl:314 [inlined]
 [10] include_relative(::Module, ::String) at ./loading.jl:1067
 [11] include(::Module, ::String) at ./sysimg.jl:29
 [12] exec_options(::Base.JLOptions) at ./client.jl:327
 [13] _start() at ./client.jl:455
in expression starting at /home/vagrant/.julia/v0.7/LazyContext/test/runtests.jl:4
┌ Error: ------------------------------------------------------------
│ # Testing failed for LazyContext
│   exception =
│    failed process: Process(`/home/vagrant/julia/bin/julia -Cnative -J/home/vagrant/julia/lib/julia/sys.so --compile=yes --depwarn=yes --code-coverage=none --color=no --compiled-modules=yes --check-bounds=yes --warn-overwrite=yes --startup-file=yes /home/vagrant/.julia/v0.7/LazyContext/test/runtests.jl`, ProcessExited(1)) [1]
│    Stacktrace:
│     [1] error(::String, ::Base.Process, ::String, ::Int64, ::String) at ./error.jl:42
│     [2] pipeline_error(::Base.Process) at ./process.jl:712
│     [3] #run#533(::Bool, ::Function, ::Cmd) at ./process.jl:670
│     [4] run at ./process.jl:668 [inlined]
│     [5] (::getfield(Pkg.Entry, Symbol("##56#57")){Bool,String,Array{AbstractString,1}})() at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v0.7/Pkg/src/entry.jl:729
│     [6] cd(::getfield(Pkg.Entry, Symbol("##56#57")){Bool,String,Array{AbstractString,1}}, ::String) at ./file.jl:72
│     [7] #test!#55(::Bool, ::Function, ::String, ::Array{AbstractString,1}, ::Array{AbstractString,1}, ::Array{AbstractString,1}) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v0.7/Pkg/src/entry.jl:717
│     [8] (::getfield(Pkg.Entry, Symbol("#kw##test!")))(::NamedTuple{(:coverage,),Tuple{Bool}}, ::typeof(Pkg.Entry.test!), ::String, ::Array{AbstractString,1}, ::Array{AbstractString,1}, ::Array{AbstractString,1}) at ./<missing>:0
│     [9] #test#59(::Bool, ::Function, ::Array{AbstractString,1}) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v0.7/Pkg/src/entry.jl:756
│     [10] #test at ./<missing>:0 [inlined]
│     [11] #4 at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v0.7/Pkg/src/dir.jl:36 [inlined]
│     [12] cd(::getfield(Pkg.Dir, Symbol("##4#7")){Base.Iterators.Pairs{Symbol,Bool,Tuple{Symbol},NamedTuple{(:coverage,),Tuple{Bool}}},typeof(Pkg.Entry.test),Tuple{Array{AbstractString,1}}}, ::String) at ./file.jl:72
│     [13] #cd#1(::Base.Iterators.Pairs{Symbol,Bool,Tuple{Symbol},NamedTuple{(:coverage,),Tuple{Bool}}}, ::Function, ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N} where N) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v0.7/Pkg/src/dir.jl:36
│     [14] (::getfield(Pkg.Dir, Symbol("#kw##cd")))(::NamedTuple{(:coverage,),Tuple{Bool}}, ::typeof(Pkg.Dir.cd), ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N} where N) at ./<missing>:0
│     [15] #test#3(::Bool, ::Function, ::String, ::Vararg{String,N} where N) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v0.7/Pkg/src/Pkg.jl:278
│     [16] test(::String, ::Vararg{String,N} where N) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v0.7/Pkg/src/Pkg.jl:278
│     [17] top-level scope
│     [18] eval at ./boot.jl:317 [inlined]
│     [19] eval(::Module, ::Expr) at ./sysimg.jl:74
│     [20] exec_options(::Base.JLOptions) at ./client.jl:304
│     [21] _start() at ./client.jl:455
└ @ Pkg.Entry entry.jl:732
[ Info: Removing DocStringExtensions v0.4.4
[ Info: Removing Documenter v0.17.0
ERROR: LazyContext had test errors

>>> End of log
