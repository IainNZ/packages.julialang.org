>>> 'Pkg.add("CUDAnativelib")' log
[ Info: Cloning cache of CUDAnativelib from https://github.com/JuliaGPU/CUDAnativelib.jl.git
[ Info: Cloning cache of Cxx from https://github.com/Keno/Cxx.jl.git
[ Info: Installing CUDAapi v0.2.1
[ Info: Installing CUDAdrv v0.6.1
[ Info: Installing CUDAnative v0.5.3
[ Info: Installing CUDAnativelib v0.0.1
[ Info: Installing Cxx v0.2.0
[ Info: Installing LLVM v0.9.5
[ Info: Installing Reexport v0.1.0
[ Info: Building CUDAdrv
WARNING: both CUDAapi and Base export "@debug"; uses of it in module __anon__ must be qualified
┌ Error: ------------------------------------------------------------
│ # Build failed for CUDAdrv
│   exception =
│    LoadError: LoadError: UndefVarError: @debug not defined
│    Stacktrace:
│     [1] top-level scope
│     [2] include at ./boot.jl:292 [inlined]
│     [3] include_relative(::Module, ::String) at ./loading.jl:1011
│     [4] include at ./sysimg.jl:26 [inlined]
│     [5] include(::String) at ./loading.jl:1045
│     [6] top-level scope
│     [7] eval at ./boot.jl:295 [inlined]
│     [8] eval at ./sysimg.jl:71 [inlined]
│     [9] evalfile(::String, ::Array{String,1}) at ./loading.jl:1040 (repeats 2 times)
│     [10] #2 at ./none:14 [inlined]
│     [11] cd(::getfield(, Symbol("##2#5")){String}, ::String) at ./file.jl:70
│     [12] (::getfield(, Symbol("##1#3")))(::IOStream) at ./none:13
│     [13] open(::getfield(, Symbol("##1#3")), ::String, ::String) at ./iostream.jl:310
│     [14] top-level scope
│     [15] eval at ./boot.jl:295 [inlined]
│     [16] eval(::Module, ::Expr) at ./sysimg.jl:71
│     [17] process_options(::Base.JLOptions) at ./client.jl:311
│     [18] _start() at ./client.jl:386
│    in expression starting at /home/vagrant/.julia/v0.7/CUDAdrv/deps/build.jl:86
│    in expression starting at /home/vagrant/.julia/v0.7/CUDAdrv/deps/build.jl:46
└ @ Main none:17
[ Info: Building LLVM
[ Info: Building CUDAnative
┌ Warning: `using A.B` will only be allowed for modules, not single bindings. Use `using A: B` instead
│   caller = ip:0x0
└ @ Core :-1
WARNING: both CUDAapi and Base export "@debug"; uses of it in module CUDAdrv must be qualified
ERROR: LoadError: LoadError: LoadError: UndefVarError: @debug not defined
Stacktrace:
 [1] top-level scope
 [2] include at ./boot.jl:292 [inlined]
 [3] include_relative(::Module, ::String) at ./loading.jl:1011
 [4] include at ./sysimg.jl:26 [inlined]
 [5] include(::String) at /home/vagrant/.julia/v0.7/CUDAdrv/src/CUDAdrv.jl:3
 [6] top-level scope
 [7] include at ./boot.jl:292 [inlined]
 [8] include_relative(::Module, ::String) at ./loading.jl:1011
 [9] include(::Module, ::String) at ./sysimg.jl:26
 [10] top-level scope
 [11] eval at ./boot.jl:295 [inlined]
 [12] top-level scope at ./<missing>:3
in expression starting at /home/vagrant/.julia/v0.7/CUDAdrv/src/init.jl:21
in expression starting at /home/vagrant/.julia/v0.7/CUDAdrv/src/init.jl:13
in expression starting at /home/vagrant/.julia/v0.7/CUDAdrv/src/CUDAdrv.jl:25
┌ Error: ------------------------------------------------------------
│ # Build failed for CUDAnative
│   exception =
│    LoadError: Failed to precompile CUDAdrv to /home/vagrant/.julia/lib/v0.7/CUDAdrv.ji.
│    Stacktrace:
│     [1] error at ./error.jl:33 [inlined]
│     [2] compilecache(::Base.PkgId) at ./loading.jl:1155
│     [3] _require(::Base.PkgId) at ./loading.jl:919
│     [4] require(::Module, ::Symbol) at ./loading.jl:819
│     [5] include at ./boot.jl:292 [inlined]
│     [6] include_relative(::Module, ::String) at ./loading.jl:1011
│     [7] include at ./sysimg.jl:26 [inlined]
│     [8] include(::String) at ./loading.jl:1045
│     [9] top-level scope
│     [10] eval at ./boot.jl:295 [inlined]
│     [11] eval at ./sysimg.jl:71 [inlined]
│     [12] evalfile(::String, ::Array{String,1}) at ./loading.jl:1040 (repeats 2 times)
│     [13] #2 at ./none:14 [inlined]
│     [14] cd(::getfield(, Symbol("##2#5")){String}, ::String) at ./file.jl:70
│     [15] (::getfield(, Symbol("##1#3")))(::IOStream) at ./none:13
│     [16] open(::getfield(, Symbol("##1#3")), ::String, ::String) at ./iostream.jl:310
│     [17] top-level scope
│     [18] eval at ./boot.jl:295 [inlined]
│     [19] eval(::Module, ::Expr) at ./sysimg.jl:71
│     [20] process_options(::Base.JLOptions) at ./client.jl:311
│     [21] _start() at ./client.jl:386
│    in expression starting at /home/vagrant/.julia/v0.7/CUDAnative/deps/build.jl:2
└ @ Main none:17
[ Info: Building Cxx
┌ Error: ------------------------------------------------------------
│ # Build failed for Cxx
│   exception =
│    LoadError: UndefVarError: JULIA_HOME not defined
│    Stacktrace:
│     [1] top-level scope
│     [2] include at ./boot.jl:292 [inlined]
│     [3] include_relative(::Module, ::String) at ./loading.jl:1011
│     [4] include at ./sysimg.jl:26 [inlined]
│     [5] include(::String) at ./loading.jl:1045
│     [6] top-level scope
│     [7] eval at ./boot.jl:295 [inlined]
│     [8] eval at ./sysimg.jl:71 [inlined]
│     [9] evalfile(::String, ::Array{String,1}) at ./loading.jl:1040 (repeats 2 times)
│     [10] #2 at ./none:14 [inlined]
│     [11] cd(::getfield(, Symbol("##2#5")){String}, ::String) at ./file.jl:70
│     [12] (::getfield(, Symbol("##1#3")))(::IOStream) at ./none:13
│     [13] open(::getfield(, Symbol("##1#3")), ::String, ::String) at ./iostream.jl:310
│     [14] top-level scope
│     [15] eval at ./boot.jl:295 [inlined]
│     [16] eval(::Module, ::Expr) at ./sysimg.jl:71
│     [17] process_options(::Base.JLOptions) at ./client.jl:311
│     [18] _start() at ./client.jl:386
│    in expression starting at /home/vagrant/.julia/v0.7/Cxx/deps/build.jl:18
└ @ Main none:17
┌ Warning: ------------------------------------------------------------
│ # Build error summary
│ 
│ CUDAnative, CUDAdrv and Cxx had build errors.
│ 
│  - packages with build errors remain installed in /home/vagrant/.julia/v0.7
│  - build the package(s) and all dependencies with `Pkg.build("CUDAnative", "CUDAdrv", "Cxx")`
│  - build a single package by running its `deps/build.jl` script
└ @ Base.Pkg.Entry entry.jl:649
[ Info: Package database updated

>>> 'Pkg.test("CUDAnativelib")' log
Package was unable to be tested.

>>> End of log
