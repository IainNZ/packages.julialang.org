>>> 'Pkg.add("LazyCall")' log
INFO: Cloning cache of LazyCall from https://github.com/bramtayl/LazyCall.jl.git
INFO: Installing DataStructures v0.7.4
INFO: Installing LazyCall v0.2.0
INFO: Installing MacroTools v0.4.0
INFO: Package database updated

>>> 'Pkg.test("LazyCall")' log
Julia Version 0.6.2
Commit d386e40c17 (2017-12-13 18:08 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-135-generic #184-Ubuntu SMP Wed Oct 18 11:55:51 UTC 2017 x86_64 x86_64
Memory: 2.93927001953125 GB (1078.046875 MB free)
Uptime: 44538.0 sec
Load Avg:  0.9970703125  0.9853515625  1.02392578125
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz    2706534 s       7518 s     138026 s     940254 s         27 s
#2  3500 MHz     603435 s        106 s      60358 s    3717580 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.6
2 required packages:
 - JSON                          0.16.4
 - LazyCall                      0.2.0
19 additional packages:
 - BinDeps                       0.8.6
 - Cairo                         0.5.0
 - ColorTypes                    0.6.7
 - Colors                        0.8.2
 - Compat                        0.54.0
 - DataStructures                0.7.4
 - FixedPointNumbers             0.4.6
 - Graphics                      0.2.0
 - Gtk                           0.13.1
 - MacroTools                    0.4.0
 - NaNMath                       0.3.1
 - NodeJS                        0.2.0
 - Nullables                     0.0.3
 - Reexport                      0.1.0
 - Requires                      0.4.3
 - Rsvg                          0.2.0
 - SHA                           0.5.6
 - URIParser                     0.3.0
 - VegaLite                      0.1.0              ecb31725 (dirty)
INFO: Computing test dependencies for LazyCall...
INFO: Installing DocStringExtensions v0.4.3
INFO: Installing Documenter v0.13.2
INFO: Testing LazyCall
Documenter: setting up build directory.
Documenter: expanding markdown templates.
Documenter: building cross-references.
Documenter: running document checks.
 > checking for missing docstrings.
 !! 137 docstrings potentially missing:

    DataStructures.counter :: Tuple{Any}
    DataStructures.SortedSet :: Union{Tuple{K}, Tuple{}} where K
    DataStructures.SortedSet :: Union{Tuple{K}, Tuple{O}, Tuple{O}} where O<:Base.Order.Ordering where K
    DataStructures.SortedSet
    DataStructures.SortedSet :: Tuple{}
    DataStructures.SortedSet :: Union{Tuple{O}, Tuple{O}} where O<:Base.Order.Ordering
    Base.similar :: Union{Tuple{DataStructures.SortedSet{K,Ord}}, Tuple{K}, Tuple{Ord}} where Ord<:Base.Order.Ordering where K
    Base.similar :: Union{Tuple{DataStructures.SortedDict{K,D,Ord}}, Tuple{D}, Tuple{K}, Tuple{Ord}} where Ord<:Base.Order.Ordering where D where K
    Base.similar :: Union{Tuple{DataStructures.SortedMultiDict{K,D,Ord}}, Tuple{D}, Tuple{K}, Tuple{Ord}} where Ord<:Base.Order.Ordering where D where K
    Base.union :: Tuple{DataStructures.SortedSet,Vararg{Any,N} where N}
    DataStructures.dequeue! :: Tuple{DataStructures.Queue}
    DataStructures.dequeue! :: Tuple{DataStructures.PriorityQueue}
    Base.find :: Tuple{DataStructures.SortedDict,Any}
    Base.setindex! :: Union{Tuple{DataStructures.SortedDict{K,D,Ord},Any,Any}, Tuple{D}, Tuple{K}, Tuple{Ord}} where Ord<:Base.Order.Ordering where D where K
    MacroTools.@>> :: Tuple
    Base.keytype :: Union{Tuple{DataStructures.SortedMultiDict{K,D,Ord}}, Tuple{D}, Tuple{K}, Tuple{Ord}} where Ord<:Base.Order.Ordering where D where K
    Base.keytype :: Union{Tuple{DataStructures.SortedDict{K,D,Ord}}, Tuple{D}, Tuple{K}, Tuple{Ord}} where Ord<:Base.Order.Ordering where D where K
    Base.keytype :: Union{Tuple{DataStructures.SortedSet{K,Ord}}, Tuple{K}, Tuple{Ord}} where Ord<:Base.Order.Ordering where K
    DataStructures.nsmallest :: Union{Tuple{Int64,AbstractArray{T,1}}, Tuple{T}} where T
    DataStructures.front :: Tuple{DataStructures.Deque}
    DataStructures.CircularBuffer
    Base.get! :: Union{Tuple{D}, Tuple{K}, Tuple{Union{Function, Type},DataStructures.SortedDict{K,D,Ord} where Ord<:Base.Order.Ordering,Any}} where D where K
    DataStructures.CircularDeque
    MacroTools.rmlines :: Tuple{Any}
    DataStructures.packcopy :: Union{Tuple{DataStructures.SortedSet{K,Ord}}, Tuple{K}, Tuple{Ord}} where Ord<:Base.Order.Ordering where K
    DataStructures.packcopy :: Union{Tuple{DataStructures.SortedDict{K,D,Ord}}, Tuple{D}, Tuple{K}, Tuple{Ord}} where Ord<:Base.Order.Ordering where D where K
    DataStructures.packcopy :: Union{Tuple{DataStructures.SortedMultiDict{K,D,Ord}}, Tuple{D}, Tuple{K}, Tuple{Ord}} where Ord<:Base.Order.Ordering where D where K
    Base.setdiff :: Union{Tuple{DataStructures.SortedSet{K,Ord},DataStructures.SortedSet{K,Ord}}, Tuple{K}, Tuple{Ord}} where Ord<:Base.Order.Ordering where K
    Base.getkey :: Union{Tuple{DataStructures.SortedDict{K,D,Ord},Any,Any}, Tuple{D}, Tuple{K}, Tuple{Ord}} where Ord<:Base.Order.Ordering where D where K
    MacroTools.unblock :: Tuple{Any}
    DataStructures.find_root :: Union{Tuple{DataStructures.DisjointSets{T},T}, Tuple{T}} where T
    MacroTools.alias_gensyms :: Tuple{Any}
    Base.merge! :: Tuple{DataStructures.Accumulator,DataStructures.Accumulator}
    Base.merge! :: Union{Tuple{DataStructures.SortedDict{K,D,Ord},Vararg{Associative{K,D},N} where N}, Tuple{D}, Tuple{K}, Tuple{Ord}} where Ord<:Base.Order.Ordering where D where K
    Base.merge! :: Union{Tuple{DataStructures.SortedMultiDict{K,D,Ord},Vararg{Union{Associative, DataStructures.SortedMultiDict},N} where N}, Tuple{D}, Tuple{K}, Tuple{Ord}} where Ord<:Base.Order.Ordering where D where K
    DataStructures.reset! :: Tuple{DataStructures.Accumulator,Any}
    DataStructures.top_with_handle :: Tuple{DataStructures.MutableBinaryHeap}
    Base.valtype :: Union{Tuple{DataStructures.SortedMultiDict{K,D,Ord}}, Tuple{D}, Tuple{K}, Tuple{Ord}} where Ord<:Base.Order.Ordering where D where K
    Base.union! :: Union{Tuple{DataStructures.SortedSet{K,Ord},Any}, Tuple{K}, Tuple{Ord}} where Ord<:Base.Order.Ordering where K
    DataStructures.heappop! :: Union{Tuple{AbstractArray,Base.Order.Ordering}, Tuple{AbstractArray}}
    Base.insert! :: Union{Tuple{DataStructures.SortedDict{K,D,Ord},Any,Any}, Tuple{D}, Tuple{K}, Tuple{Ord}} where Ord<:Base.Order.Ordering where D where K
    Base.insert! :: Union{Tuple{DataStructures.SortedMultiDict{K,D,Ord},Any,Any}, Tuple{D}, Tuple{K}, Tuple{Ord}} where Ord<:Base.Order.Ordering where D where K
    Base.insert! :: Tuple{DataStructures.SortedSet,Any}
    DataStructures.dequeue_pair! :: Tuple{DataStructures.PriorityQueue}
    Base.first :: Tuple{DataStructures.SortedMultiDict}
    Base.first :: Tuple{DataStructures.SortedDict}
    Base.first :: Tuple{DataStructures.SortedSet}
    MacroTools.splitdef :: Tuple{Any}
    DataStructures.Queue :: Union{Tuple{Type{T}}, Tuple{T}} where T
    MacroTools.splitarg :: Tuple{Any}
    MacroTools.isdef :: Tuple{Any}
    DataStructures.packdeepcopy :: Union{Tuple{DataStructures.SortedDict{K,D,Ord}}, Tuple{D}, Tuple{K}, Tuple{Ord}} where Ord<:Base.Order.Ordering where D where K
    DataStructures.packdeepcopy :: Union{Tuple{DataStructures.SortedSet{K,Ord}}, Tuple{K}, Tuple{Ord}} where Ord<:Base.Order.Ordering where K
    DataStructures.packdeepcopy :: Union{Tuple{DataStructures.SortedMultiDict{K,D,Ord}}, Tuple{D}, Tuple{K}, Tuple{Ord}} where Ord<:Base.Order.Ordering where D where K
    DataStructures.heapify :: Union{Tuple{AbstractArray,Base.Order.Ordering}, Tuple{AbstractArray}}
    DataStructures.PriorityQueue
    DataStructures.dec! :: Tuple{DataStructures.Accumulator,Any,Number}
    DataStructures.inc! :: Tuple{DataStructures.Accumulator,Any,Number}
    DataStructures.peek :: Tuple{DataStructures.PriorityQueue}
    MacroTools.combinedef :: Tuple{Dict}
    Base.symdiff :: Union{Tuple{DataStructures.SortedSet{K,Ord},DataStructures.SortedSet{K,Ord}}, Tuple{K}, Tuple{Ord}} where Ord<:Base.Order.Ordering where K
    DataStructures.deque :: Union{Tuple{Type{T}}, Tuple{T}} where T
    Base.getindex :: Tuple{DataStructures.SortedDict,Any}
    Base.intersect :: Union{Tuple{DataStructures.SortedSet{K,Ord},Vararg{DataStructures.SortedSet{K,Ord},N} where N}, Tuple{K}, Tuple{Ord}} where Ord<:Base.Order.Ordering where K
    DataStructures.update! :: Union{Tuple{DataStructures.MutableBinaryHeap{T,Comp} where Comp,Int64,T}, Tuple{T}} where T
    DataStructures.isordered :: Union{Tuple{T}, Tuple{Type{T}}} where T<:Associative
    DataStructures.ordtype :: Union{Tuple{DataStructures.SortedDict{K,D,Ord}}, Tuple{D}, Tuple{K}, Tuple{Ord}} where Ord<:Base.Order.Ordering where D where K
    DataStructures.ordtype :: Union{Tuple{DataStructures.SortedMultiDict{K,D,Ord}}, Tuple{D}, Tuple{K}, Tuple{Ord}} where Ord<:Base.Order.Ordering where D where K
    DataStructures.ordtype :: Union{Tuple{DataStructures.SortedSet{K,Ord}}, Tuple{K}, Tuple{Ord}} where Ord<:Base.Order.Ordering where K
    Base.issubset :: Tuple{Any,DataStructures.SortedSet}
    MacroTools.prewalk :: Tuple{Any,Any}
    MacroTools.namify :: Tuple{Symbol}
    MacroTools.postwalk :: Tuple{Any,Any}
    DataStructures.isheap :: Union{Tuple{AbstractArray,Base.Order.Ordering}, Tuple{AbstractArray}}
    DataStructures.in_same_set :: Tuple{DataStructures.IntDisjointSets,Integer,Integer}
    MacroTools.@expand :: Tuple{Any}
    Base.merge :: Union{Tuple{DataStructures.SortedMultiDict{K,D,Ord},Vararg{Union{Associative, DataStructures.SortedMultiDict},N} where N}, Tuple{D}, Tuple{K}, Tuple{Ord}} where Ord<:Base.Order.Ordering where D where K
    Base.merge :: Tuple{DataStructures.Accumulator,Vararg{DataStructures.Accumulator,N} where N}
    Base.merge :: Union{Tuple{DataStructures.SortedDict{K,D,Ord},Vararg{Associative{K,D},N} where N}, Tuple{D}, Tuple{K}, Tuple{Ord}} where Ord<:Base.Order.Ordering where D where K
    MacroTools.@> :: Tuple
    Base.haskey :: Tuple{DataStructures.SortedDict,Any}
    Base.haskey :: Tuple{DataStructures.SortedMultiDict,Any}
    Base.haskey :: Tuple{DataStructures.SortedSet,Any}
    DataStructures.SortedMultiDict :: Tuple{Base.Order.Ordering,Vararg{Pair,N} where N}
    DataStructures.SortedMultiDict :: Union{Tuple{Any}, Tuple{D}, Tuple{K}} where D where K
    DataStructures.SortedMultiDict :: Union{Tuple{O}, Tuple{O}} where O<:Base.Order.Ordering
    DataStructures.SortedMultiDict :: Tuple{}
    DataStructures.SortedMultiDict :: Union{Tuple{D}, Tuple{K}, Tuple{Ord,Any}, Tuple{Ord}} where Ord<:Base.Order.Ordering where D where K
    DataStructures.SortedMultiDict :: Tuple{Vararg{Pair,N} where N}
    Base.in :: Union{Tuple{D}, Tuple{K}, Tuple{Ord}, Tuple{Pair,DataStructures.SortedDict{K,D,Ord}}} where Ord<:Base.Order.Ordering where D where K
    Base.in :: Tuple{Pair,DataStructures.SortedMultiDict}
    DataStructures.OrderedDict
    Base.eltype :: Union{Tuple{DataStructures.SortedMultiDict{K,D,Ord}}, Tuple{D}, Tuple{K}, Tuple{Ord}} where Ord<:Base.Order.Ordering where D where K
    Base.eltype :: Union{Tuple{DataStructures.SortedDict{K,D,Ord}}, Tuple{D}, Tuple{K}, Tuple{Ord}} where Ord<:Base.Order.Ordering where D where K
    Base.eltype :: Union{Tuple{DataStructures.SortedSet{K,Ord}}, Tuple{K}, Tuple{Ord}} where Ord<:Base.Order.Ordering where K
    DataStructures.compare :: Tuple{Union{DataStructures.SortedDict, DataStructures.SortedMultiDict, DataStructures.SortedSet},DataStructures.Tokens.IntSemiToken,DataStructures.Tokens.IntSemiToken}
    Base.delete! :: Tuple{DataStructures.SortedDict,Any}
    Base.delete! :: Tuple{DataStructures.SortedSet,Any}
    DataStructures.heapify! :: Union{Tuple{AbstractArray,Base.Order.Ordering}, Tuple{AbstractArray}}
    MacroTools.gatherwheres :: Tuple{Any}
    MacroTools.@esc :: Tuple
    DataStructures.orderobject :: Tuple{DataStructures.SortedMultiDict}
    DataStructures.orderobject :: Tuple{DataStructures.SortedDict}
    DataStructures.orderobject :: Tuple{DataStructures.SortedSet}
    DataStructures.enqueue! :: Tuple{DataStructures.Queue,Any}
    DataStructures.enqueue! :: Tuple{DataStructures.PriorityQueue,Any,Any}
    DataStructures.enqueue! :: Union{Tuple{DataStructures.PriorityQueue{K,V,O} where O<:Base.Order.Ordering,Pair{K,V}}, Tuple{K}, Tuple{V}} where V where K
    DataStructures.SortedDict :: Tuple{Base.Order.Ordering,Vararg{Pair,N} where N}
    DataStructures.SortedDict :: Union{Tuple{Any}, Tuple{D}, Tuple{K}} where D where K
    DataStructures.SortedDict :: Union{Tuple{D}, Tuple{K}, Tuple{Ord,Vararg{Pair,N} where N}, Tuple{Ord}} where Ord<:Base.Order.Ordering where D where K
    DataStructures.SortedDict :: Union{Tuple{Ord}, Tuple{Ord}} where Ord<:Base.Order.Ordering
    DataStructures.SortedDict :: Union{Tuple{Any,Base.Order.Ordering}, Tuple{Any}}
    DataStructures.SortedDict :: Tuple{}
    DataStructures.SortedDict :: Tuple{Vararg{Pair,N} where N}
    DataStructures.heappush! :: Union{Tuple{AbstractArray,Any,Base.Order.Ordering}, Tuple{AbstractArray,Any}}
    Base.pop! :: Tuple{DataStructures.SortedDict,Any}
    Base.pop! :: Tuple{DataStructures.SortedSet,Any}
    Base.pop! :: Tuple{DataStructures.SortedSet}
    MacroTools.inexpr :: Tuple{Any,Any}
    DataStructures.nlargest :: Union{Tuple{Int64,AbstractArray{T,1}}, Tuple{T}} where T
    Base.setdiff! :: Tuple{DataStructures.SortedSet,Any}
    Base.push! :: Union{Tuple{DataStructures.SortedMultiDict{K,D,Ord} where Ord<:Base.Order.Ordering,Pair}, Tuple{D}, Tuple{K}} where D where K
    Base.push! :: Union{Tuple{DataStructures.SortedDict{K,D,Ord} where Ord<:Base.Order.Ordering,Pair}, Tuple{D}, Tuple{K}} where D where K
    Base.push! :: Tuple{DataStructures.SortedSet,Any}
    Base.get :: Union{Tuple{D}, Tuple{K}, Tuple{Union{Function, Type},DataStructures.SortedDict{K,D,Ord} where Ord<:Base.Order.Ordering,Any}} where D where K
    MacroTools.combinearg :: NTuple{4,Any}
    MacroTools.prettify :: Tuple{Any}
    Base.isequal :: Tuple{DataStructures.SortedDict,DataStructures.SortedDict}
    Base.isequal :: Tuple{DataStructures.SortedSet,DataStructures.SortedSet}
    Base.isequal :: Tuple{DataStructures.SortedMultiDict,DataStructures.SortedMultiDict}
    DataStructures.back :: Tuple{DataStructures.Deque}
    MacroTools.@q :: Tuple{Any}
    DataStructures.top :: Tuple{DataStructures.BinaryHeap}
    MacroTools.isexpr :: Tuple{Expr}
    Base.last :: Tuple{DataStructures.SortedMultiDict}
    Base.last :: Tuple{DataStructures.SortedDict}
    Base.last :: Tuple{DataStructures.SortedSet}

 > running doctests.
 > checking footnote links.
Documenter: populating indices.
ERROR: LoadError: `makedocs` encountered an error. Terminating build
Stacktrace:
 [1] runner(::Type{Documenter.Builder.RenderDocument}, ::Documenter.Documents.Document) at /home/vagrant/.julia/v0.6/Documenter/src/Builder.jl:202
 [2] dispatch(::Type{Documenter.Builder.DocumentPipeline}, ::Documenter.Documents.Document, ::Vararg{Documenter.Documents.Document,N} where N) at /home/vagrant/.julia/v0.6/Documenter/src/Selectors.jl:167
 [3] cd(::Documenter.##2#3{Documenter.Documents.Document}, ::String) at ./file.jl:70
 [4] #makedocs#1(::Bool, ::Array{Any,1}, ::Function) at /home/vagrant/.julia/v0.6/Documenter/src/Documenter.jl:202
 [5] (::Documenter.#kw##makedocs)(::Array{Any,1}, ::Documenter.#makedocs) at ./<missing>:0
 [6] include_from_node1(::String) at ./loading.jl:576
 [7] include(::String) at ./sysimg.jl:14
 [8] process_options(::Base.JLOptions) at ./client.jl:305
 [9] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/LazyCall/test/runtests.jl, in expression starting on line 4
==============================[ ERROR: LazyCall ]===============================

failed process: Process(`/home/vagrant/julia/bin/julia -Cx86-64 -J/home/vagrant/julia/lib/julia/sys.so --compile=yes --depwarn=yes --check-bounds=yes --code-coverage=none --color=no --compilecache=yes /home/vagrant/.julia/v0.6/LazyCall/test/runtests.jl`, ProcessExited(1)) [1]

================================================================================
INFO: Removing DocStringExtensions v0.4.3
INFO: Removing Documenter v0.13.2
ERROR: LazyCall had test errors

>>> End of log
