>>> 'Pkg.add("Arrowhead")' log
INFO: Cloning cache of Arrowhead from git://github.com/ivanslapnicar/Arrowhead.jl.git
INFO: Cloning cache of DoubleDouble from git://github.com/simonbyrne/DoubleDouble.jl.git
INFO: Installing Arrowhead v0.0.1
INFO: Installing DoubleDouble v0.1.0
INFO: Package database updated

>>> 'using Arrowhead' log
Julia Version 0.3.4
Commit 3392026* (2014-12-26 10:42 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E5-2650 0 @ 2.00GHz
  WORD_SIZE: 64
  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Sandybridge)
  LAPACK: libopenblas
  LIBM: libopenlibm
  LLVM: libLLVM-3.3

>>> test log
There are four tests for arrowhead matrices, a random matrix test and three
tests from the arrowhead paper [1] (see README for details)

tols = [100.0,100.0,100.0,100.0,100.0] => [100.0,100.0,100.0,100.0,100.0]

1st test - Random SymArrow matrix

A = Arrowhead.GenSymArrow(10,10) => [0.04888102816209727 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.7137599362320899
 0.0 0.7326680702310822 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.43618246762695234
 0.0 0.0 0.47781078940147315 0.0 0.0 0.0 0.0 0.0 0.0 0.5265353354701516
 0.0 0.0 0.0 0.9662105755303405 0.0 0.0 0.0 0.0 0.0 0.8439130916631643
 0.0 0.0 0.0 0.0 0.4844593248513662 0.0 0.0 0.0 0.0 0.816963406268945
 0.0 0.0 0.0 0.0 0.0 0.8621003414038162 0.0 0.0 0.0 0.24666656279819077
 0.0 0.0 0.0 0.0 0.0 0.0 0.924164450055917 0.0 0.0 0.6772476614063272
 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.9126974000291617 0.0 0.7994261007599359
 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.5896170031556867 0.4366665321332621
 0.7137599362320899 0.43618246762695234 0.5265353354701516 0.8439130916631643 0.816963406268945 0.24666656279819077 0.6772476614063272 0.7994261007599359 0.4366665321332621 0.7451075749941602]
(U,Lambda) = eig(full(A)) => ([-1.2493449179296583,0.14464347883381112,0.47971258157979957,0.5620092564108856,0.6558116715355964,0.7636915959914534,0.8647505432622491,0.9190815149059444,0.9487766407779814,2.6545841924470466],
[-0.3780836462275676 -0.8949827297271826 0.005081180246389458 -0.06759641446114703 0.10141640941485483 0.058822577044215354 0.009139964203104945 0.004462336446054103 -0.013199293237380236 0.193495529410284
 -0.15133790552354792 0.08906979561555547 -0.005288640356473024 0.12420437168300535 -0.4894217923128701 0.8282470482768532 0.03450134668008065 0.012729766565928537 -0.033588209942453276 0.16031622719486935
... truncated ...
(Ua,Lambdaa,Sind,Kb,Kz,Knu,Krho,Qout) = dpr1eigall(A,tols) => (
[-0.7999999999999988 0.20889321381638568 0.5222329678004558 0.20889316064388422
 -3.360000040319997e-8 -0.9351941398441738 0.34815531248360626 0.06480585768707446
 -3.359999959679996e-8 -0.06480586264549802 -0.348155311616842 0.9351941398232515
 -0.5999999999999995 -0.2785242290885133 -0.6963106237339411 -0.2785242701918447],

[10.33333333333335,2.0000001148912534,2.0,1.9999998851087477],[1,2,2,3],[3.7999999999999416,1.3913043861207293e7,1.3913043861207293e7,1.3913043298649127e7],[1.0000000999999998,4.000000099999999e7,4.000000099999999e7,4.000000099999999e7],[6.000000000000014,1.4518971715911815,9.74999965042207,1.4518971502576907],[0.0,0.0,0.0,0.0],[0,1,1,1])

 There is one test for SVD of HalfArrow matrices

HalfArrow with entries varying in magnitude

A = HalfArrow(sort(exp(20 * (rand(8) - 0.5)),rev=true),exp(20 * (rand(8) - 0.5))) => [1067.2387431085733 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0008352538617595956
 0.0 194.9571017159447 0.0 0.0 0.0 0.0 0.0 0.0 3819.6570211085773
 0.0 0.0 169.13392366743392 0.0 0.0 0.0 0.0 0.0 353.85783648223384
 0.0 0.0 0.0 21.50337312148373 0.0 0.0 0.0 0.0 9.341641053802076e-5
 0.0 0.0 0.0 0.0 19.788319049287978 0.0 0.0 0.0 14.394883097639129
 0.0 0.0 0.0 0.0 0.0 0.01832737811672729 0.0 0.0 329.14844507567955
 0.0 0.0 0.0 0.0 0.0 0.0 0.01452347897641857 0.0 0.31942061838159735
 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.010649464900505855 250.92874371235143]
Remedy 3 
Remedy 3 
Remedy 3 
(Ua,Lambdaa,Va,Sind,Kb,Kz,Knu,Krho,Qout) = ahsvdall(A,tols) => (
[-2.337803961464045e-7 0.9999999999999727 1.698884927245456e-10 3.3208194308600736e-15 7.390923740224601e-10 2.0552636384341707e-10 1.0583469868765671e-18 1.900525853742262e-16
 -0.9900178077951403 -2.3154402962452456e-7 0.09253763289214385 4.60506443379293e-7 0.10243221414936654 0.028445882855265017 1.4503706456789688e-10 2.6045020609478596e-8
 -0.09165860488263053 -2.1268903121572924e-8 -0.9957038498136658 5.6913893561118225e-8 0.012657033035900758 0.003513279371105599 1.7852544481196705e-11 3.205869411838703e-9
 -2.415170543743103e-8 -5.476070775691632e-15 -7.474684196557484e-10 -0.9999999999912605 4.166115116079825e-6 3.4875339152166527e-7 2.915700713774743e-16 5.235867318001602e-14
 -0.0037216087046275225 -8.437756856648291e-10 -0.00011489192003475663 -9.201131428277155e-7 -0.30071459761074837 0.9537069084427644 5.305463354206754e-11 9.527281685958077e-9
 -0.0850947916244249 -1.9286851647068094e-8 -0.0025912189470017983 -3.2222002847585595e-6 -0.7539944891325405 -0.23807538814777926 0.003801460328234298 0.6062591284490468
 -8.257985528459591e-5 -1.8716837862163522e-11 -2.5146366850301463e-6 -3.1269688335329942e-9 -0.0007317103305456092 -0.00023103910806288828 -0.9999858792301194 0.0052579212177444315
 -0.06487264174543926 -1.4703473540357182e-8 -0.001975434852388614 -2.456466960453688e-6 -0.574812966749522 -0.181498423090348 -0.003713521204740404 -0.7952497868196313],

[3863.159175248434,1067.2387431085472,169.37101960786896,21.503373121493564,20.97151557342686,19.681177945893978,0.014523494847295947,0.013970934029323253],
[-6.458431683200529e-8 0.9999999999999973 1.0704994388280244e-9 1.6481633534690158e-13 3.7612351550421096e-8 1.1144947666594579e-8 7.77711508092827e-14 1.4518104653103788e-11
 -0.049961959551537635 -4.229714600103954e-8 0.10651685719360376 4.175112481911347e-6 0.9522386459379909 0.2817781990722124 1.946914709362125e-6 0.00036344468605310244
 -0.004012927963467974 -3.3706544672247594e-9 -0.9943100025001588 4.476539599064553e-7 0.10207815700562745 0.030192030507956144 2.0790250055511754e-7 3.881066729337018e-5
 -1.3443482651937288e-10 -1.1033519340421231e-16 -9.4898716212467e-11 -0.9999999999908032 4.27177175128117e-6 3.810429602277865e-7 4.3169637210666297e-13 8.058788934029812e-11
 -1.9063252918912095e-5 -1.5644955340858675e-11 -1.3423299777593228e-5 -8.467272705935948e-7 -0.2837485149542473 0.9588987323653948 7.228714759168013e-8 1.3494365464648104e-5
 -4.0370182824906777e-7 -3.3120745016009025e-13 -2.8039182579688207e-7 -2.746289275312296e-9 -0.0006589291103867816 -0.00022169900962565437 0.004797109894266244 0.7953040405517854
 -3.1045751357744366e-10 -2.5470739602686934e-16 -2.1562881957563324e-10 -2.1119694039229032e-12 -5.067339823533284e-7 -1.704924185893e-7 -0.9999847864729398 0.005465869934343638
 -1.7883263151503927e-7 -1.467189290068946e-13 -1.242085226413263e-7 -1.2165560503833572e-9 -0.00029189356831755176 -9.820860781359223e-5 -0.0027229681383837308 -0.6061860054664264
 -0.9987430593717904 -6.253614626535786e-8 -0.0013333722109523174 -2.1050722158852384e-7 -0.048040315338699145 -0.014235522256334242 -9.937144744183727e-8 -1.8550388653098616e-5],

[1,1,3,4,4,5,7,7],[1.0,1.0,1.673485310864379,3121.1821975219978,3121.1821975219978,1699.579280177181,641.9167635961815,641.9167635961815],[835378.6139350624,835378.6139350624,12.442392179689207,3.707094536499306e8,3.707094536499306e8,2614.245575655577,1.6052024775971666e8,1.6052024775971666e8],[2.4728378328684638e14,1.0000001082200645,1.0961869916668585,1.0000056839476625,5.342361590357287e10,1.2529832123101055,1.0074920864291375,34408.61093126677],[1.0,0.0,0.0,0.0,6177.295675882287,0.0,0.0,1302.5581253429439],[0,0,0,1,3,1,0,0])
N1 = norm(Ua' * Ua - eye(8)) => 2.8095146801172903e-16
N2 = norm(Va' * Va - eye(8)) => 4.997260969005759e-16
INFO: Testing Arrowhead
INFO: Arrowhead tests passed
INFO: No packages to install, update or remove

>>> end of log
