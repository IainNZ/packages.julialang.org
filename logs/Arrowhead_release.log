>>> 'Pkg.add("Arrowhead")' log
INFO: Cloning cache of Arrowhead from git://github.com/ivanslapnicar/Arrowhead.jl.git
INFO: Cloning cache of DoubleDouble from git://github.com/simonbyrne/DoubleDouble.jl.git
INFO: Installing Arrowhead v0.0.1
INFO: Installing DoubleDouble v0.1.0
INFO: Package database updated

>>> 'using Arrowhead' log
Julia Version 0.3.1
Commit c03f413* (2014-09-21 21:30 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E5-2650 0 @ 2.00GHz
  WORD_SIZE: 64
  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Sandybridge)
  LAPACK: libopenblas
  LIBM: libopenlibm
  LLVM: libLLVM-3.3

>>> test log
There are four tests for arrowhead matrices, a random matrix test and three
tests from the arrowhead paper [1] (see README for details)

tols = [100.0,100.0,100.0,100.0,100.0] => [100.0,100.0,100.0,100.0,100.0]

1st test - Random SymArrow matrix

A = Arrowhead.GenSymArrow(10,10) => [0.737948227143062 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.6830845638537097
 0.0 0.8961602433540414 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.5523820112046789
 0.0 0.0 0.016336587734390173 0.0 0.0 0.0 0.0 0.0 0.0 0.30795475917302406
 0.0 0.0 0.0 0.39048083430194924 0.0 0.0 0.0 0.0 0.0 0.8255089154963706
 0.0 0.0 0.0 0.0 0.12273620784622286 0.0 0.0 0.0 0.0 0.8086055088492563
 0.0 0.0 0.0 0.0 0.0 0.6141807465575013 0.0 0.0 0.0 0.9459750603472403
 0.0 0.0 0.0 0.0 0.0 0.0 0.2562623875512289 0.0 0.0 0.8270312030312066
 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.5570874887334636 0.0 0.6474702277623259
 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.297816757894962 0.8977555292006585
 0.6830845638537097 0.5523820112046789 0.30795475917302406 0.8255089154963706 0.8086055088492563 0.9459750603472403 0.8270312030312066 0.6474702277623259 0.8977555292006585 0.38287394597376045]
(U,Lambda) = eig(full(A)) => ([-1.8410942541506548,0.021881063492518393,0.15733185080380396,0.2734800831219917,0.352291191843753,0.4890817396888587,0.5788815938353351,0.7103547144677294,0.872134349804409,2.657541094182849],
[-0.18739027151961124 -0.016906698093891122 -0.044977907981033606 -0.02396854174942363 0.06059277276171929 -0.16758855974473869 0.10531588295915492 -0.9014980938311797 -0.2110736290458801 0.24880074712074524
 -0.14277606679495336 -0.011197665133896096 -0.028583144937646708 -0.014457645517834572 0.034745038252010085 -0.08285098440004579 0.04269698114335877 -0.10826254335205165 0.9532945018550001 0.21926665569505183
... truncated ...
 4.0 2.0e-7 2.0e-7 5.0]
(Ua,Lambdaa,Sind,Kb,Kz,Knu,Krho,Qout) = dpr1eigall(A,tols) => (
[-0.7999999999999988 0.20889321381638568 0.5222329678004558 0.20889316064388422
 -3.360000040319997e-8 -0.9351941398441738 0.34815531248360626 0.06480585768707446
 -3.359999959679996e-8 -0.06480586264549802 -0.348155311616842 0.9351941398232515
 -0.5999999999999995 -0.2785242290885133 -0.6963106237339411 -0.2785242701918447],

[10.33333333333335,2.0000001148912534,2.0,1.9999998851087477],[1,2,2,3],[3.7999999999999416,1.3913043861207293e7,1.3913043861207293e7,1.3913043298649127e7],[1.0000000999999998,4.000000099999999e7,4.000000099999999e7,4.000000099999999e7],[6.000000000000014,1.4518971715911815,9.74999965042207,1.4518971502576907],[0.0,0.0,0.0,0.0],[0,1,1,1])

 There is one test for SVD of HalfArrow matrices

HalfArrow with entries varying in magnitude

A = HalfArrow(sort(exp(20 * (rand(8) - 0.5)),rev=true),exp(20 * (rand(8) - 0.5))) => [778.400108972017 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0030408594426617674
 0.0 504.2968908491788 0.0 0.0 0.0 0.0 0.0 0.0 0.00027215772634770895
 0.0 0.0 407.14686561212807 0.0 0.0 0.0 0.0 0.0 3292.492262789863
 0.0 0.0 0.0 222.3016144813886 0.0 0.0 0.0 0.0 0.00021637661173447392
 0.0 0.0 0.0 0.0 31.875173050123465 0.0 0.0 0.0 98.99113303243122
 0.0 0.0 0.0 0.0 0.0 22.643749690763933 0.0 0.0 1.2984410823696013
 0.0 0.0 0.0 0.0 0.0 0.0 0.13700855289087358 0.0 1106.741626097979
 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0057105620274549 0.0026677276623795778]
Remedy 3 
Remedy 3 
(Ua,Lambdaa,Va,Sind,Kb,Kz,Knu,Krho,Qout) = ahsvdall(A,tols) => (
[-9.094877292039874e-7 0.9999999999995836 1.8639642903525395e-14 1.7090467739384525e-14 7.378575171281656e-8 4.311770112173801e-10 2.8320646950507104e-12 2.0482326839107147e-19
 -7.900845075478604e-8 -9.17053192569784e-14 0.9999999999999969 4.154304289057168e-15 1.637741873003873e-8 9.215402176577275e-11 6.046018957913277e-13 4.3675391713545687e-20
 -0.9488046194455777 -8.862327855809189e-7 -8.013669477296762e-8 8.850549715363203e-8 0.31585891814830486 0.0017140063959820914 1.1233443338613492e-5 8.106087613025758e-13
 -6.175782199656334e-8 -4.606446389632513e-14 -2.275901369247187e-15 -0.9999999999999939 9.469016551083386e-8 3.833654274875349e-10 2.4945923852691633e-12 1.7869557747342913e-19
 -0.02814198951143268 -1.938793066555795e-8 -8.422513455547563e-10 -6.396569554542291e-9 -0.08993771532634764 0.9955497092007988 0.00011089824127850115 3.9763071891752314e-12
 -0.0003691159976466132 -2.5409505603435004e-10 -1.1025685771961054e-11 -8.303870562304178e-11 -0.0011431261204039316 -0.00022509771889733815 0.9999992531732561 1.0335091038124119e-13
 -0.31460719365113005 -2.1639765708412663e-7 -9.378926891531766e-9 -7.004467841007856e-8 -0.9445332415778369 -0.09422201453612096 -0.0012170572376617081 2.4104312117444052e-6
 -7.583398800668841e-7 -5.216122574688781e-13 -2.2607282746387547e-14 -1.6883801145229697e-13 -2.276732507736071e-6 -2.2711172469437043e-7 -2.933528951243134e-9 -0.9999999999970949],

[3496.313710637327,778.4001089717856,504.2968908491782,222.30161448139015,129.42493153697012,31.74111054353704,22.643733525257453,0.005710562036987719],
[-2.0248335993627073e-7 0.999999999999881 2.8770948880672235e-14 5.984311891640952e-14 4.4376950014018273e-7 1.0573928472271938e-8 9.735494655880565e-11 2.7919222907123042e-14
 -1.1395921351458512e-8 -5.94125140048019e-14 0.999999999999998 9.424145395886542e-15 6.381368139518342e-8 1.464126045368924e-9 1.3465043470370867e-11 3.856952101229479e-15
 -0.1104886056735331 -4.635493966317714e-7 -6.469880082423026e-8 1.6209839878855685e-7 0.9936336606288665 0.021985756635895075 0.00020198353068615353 5.779410402415758e-8
 -3.926668106160209e-9 -1.3155451260020169e-14 -1.0032513742690608e-15 -0.999999999999987 1.6264081748851781e-7 2.684932946814595e-9 2.4490303867061082e-11 6.956288210465121e-15
 -0.0002565647307112383 -7.939280042814784e-10 -5.323631352564969e-11 -9.171852483116148e-10 -0.022150139124788172 0.9997545365417886 0.00015610944316067147 2.2194922134541396e-8
 -2.390566450641223e-6 -7.391654728957661e-12 -4.950712037286205e-13 -8.458362613154113e-12 -0.0001999974921988409 -0.00016058216979150729 0.9999999670791316 4.0981117617275156e-10
 -1.2328377799754974e-5 -3.8088804850291123e-11 -2.548088684255588e-12 -4.316981704815672e-11 -0.0009998779296162095 -0.0004067035349739928 -7.363946883202812e-6 5.783138157418568e-5
 -1.2386036498496172e-12 -3.8266941592434595e-18 -2.5600056779661467e-19 -4.337170196625796e-18 -1.0045531452829806e-10 -4.0859805117736764e-11 -7.398117018433767e-13 -0.9999999983277638
 -0.9938773576418334 -1.5219808369448555e-7 -4.273593050319183e-9 -1.4069263154630435e-8 -0.11045578322085578 -0.0027022166571136334 -2.4899859371921694e-5 -7.146771023762251e-9],

[1,1,2,4,5,5,6,8],[1.0,1.0,1.0000000000009925,8.035072602404814,19.695662951484717,19.695662951484717,19.451880257456562,11330.565406535912],[566339.2019654996,566339.2019654996,9.767173448096074e6,2.78690988619327e7,424.84157720091406,424.84157720091406,45593.74493881949,8.799449709230931e10],[3.2250358107893926e13,1.0000006165867237,1.000000069028699,1.000000177136518,1890.6435100954322,1.0247653453517689,1.0003902913046887,1.000057915582845],[1.0,0.0,0.0,0.0,38.337415959456365,0.0,0.0,0.0],[0,0,0,0,0,0,0,1])
N1 = norm($(Expr(:', :Ua)) * Ua - eye(8)) => 2.84473895607164e-15
N2 = norm($(Expr(:', :Va)) * Va - eye(8)) => 4.440892098500661e-16
INFO: Testing Arrowhead
INFO: Arrowhead tests passed
INFO: No packages to install, update or remove

>>> end of log
