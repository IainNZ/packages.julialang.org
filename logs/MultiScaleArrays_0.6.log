>>> 'Pkg.add("MultiScaleArrays")' log
INFO: Installing DiffEqBase v3.12.0
INFO: Installing FunctionWrappers v0.1.0
INFO: Installing IteratorInterfaceExtensions v0.0.2
INFO: Installing LinearMaps v1.0.4
INFO: Installing MacroTools v0.4.0
INFO: Installing MultiScaleArrays v0.6.0
INFO: Installing NamedTuples v4.0.1
INFO: Installing RecipesBase v0.2.3
INFO: Installing RecursiveArrayTools v0.14.6
INFO: Installing SimpleTraits v0.6.0
INFO: Installing StaticArrays v0.7.0
INFO: Installing TableTraits v0.2.0
INFO: Building DiffEqBase
INFO: ~~~ DifferentialEquations.jl *BREAKING* changes  ~~~

We have changed the front-end API on how
users may define equations of motion and 
problems, for all problem types that can
be used in the DifferentialEquations.jl.
These are *BREAKING* changes, and they
also have *NO WARNINGS*!

Please see our latest documentation here:
http://docs.juliadiffeq.org/latest/

or the blogpost that describes the changes:
http://juliadiffeq.org/2018/01/24/Parameters.html

In short, the mutated argument is the first argument,
and parameters are now directly passed
into the equations of motion function. For all
types now mutation goes first, then dependent variables, 
then parameters, then independent variables. 

`f(mutated, dependent variables, p/integrator, independent variables)`

For example, this means that the ODE syntax will be `f(u,p,t)` (for the
out-of-place) and `f(du,u,p,t)` (for the in-place). Notice
that this change also removes the need for ParameterizedFunctions
as now parameters are part of the equations of motion.

For more details please visit the above links!
INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of MultiScaleArrays
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("MultiScaleArrays")' log
Julia Version 0.6.2
Commit d386e40c17 (2017-12-13 18:08 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-143-generic #192-Ubuntu SMP Tue Feb 27 10:45:36 UTC 2018 x86_64 x86_64
Memory: 2.939197540283203 GB (631.62890625 MB free)
Uptime: 83432.0 sec
Load Avg:  1.0029296875  1.01416015625  0.96923828125
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz    5031533 s       1353 s     349472 s    1777362 s         64 s
#2  3499 MHz    1161752 s       5309 s     140039 s    6877487 s          2 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.6
2 required packages:
 - JSON                          0.17.2
 - MultiScaleArrays              0.6.0
28 additional packages:
 - BinDeps                       0.8.8
 - Cairo                         0.5.1
 - ColorTypes                    0.6.7
 - Colors                        0.8.2
 - Compat                        0.64.0
 - DiffEqBase                    3.12.0
 - FixedPointNumbers             0.4.6
 - FunctionWrappers              0.1.0
 - Graphics                      0.3.0
 - Gtk                           0.13.1
 - IteratorInterfaceExtensions   0.0.2
 - LinearMaps                    1.0.4
 - MacroTools                    0.4.0
 - NaNMath                       0.3.1
 - NamedTuples                   4.0.1
 - NodeJS                        0.4.0
 - Nullables                     0.0.5
 - RecipesBase                   0.2.3
 - RecursiveArrayTools           0.14.6
 - Reexport                      0.1.0
 - Requires                      0.4.3
 - Rsvg                          0.2.0
 - SHA                           0.5.7
 - SimpleTraits                  0.6.0
 - StaticArrays                  0.7.0
 - TableTraits                   0.2.0
 - URIParser                     0.3.1
 - VegaLite                      0.1.0              ecb31725 (dirty)
INFO: Computing test dependencies for MultiScaleArrays...
INFO: Installing Calculus v0.3.1
INFO: Installing CommonSubexpressions v0.1.0
INFO: Installing DataStructures v0.8.1
INFO: Installing DiffBase v0.3.2
INFO: Installing DiffEqDiffTools v0.4.1
INFO: Installing DiffEqNoiseProcess v1.0.2
INFO: Installing DiffEqOperators v1.2.0
INFO: Installing DiffResults v0.0.3
INFO: Installing DiffRules v0.0.4
INFO: Installing Distances v0.6.0
INFO: Installing Expokit v0.0.1
INFO: Installing ForwardDiff v0.7.5
INFO: Installing GenericSVD v0.1.0
INFO: Installing Juno v0.4.0
INFO: Installing LineSearches v5.1.0
INFO: Installing Media v0.3.0
INFO: Installing Missings v0.2.9
INFO: Installing MuladdMacro v0.0.2
INFO: Installing NLSolversBase v6.0.0
INFO: Installing NLsolve v1.1.0
INFO: Installing OrdinaryDiffEq v3.12.0
INFO: Installing Parameters v0.8.1
INFO: Installing RandomNumbers v0.1.1
INFO: Installing ResettableStacks v0.3.1
INFO: Installing Roots v0.5.0
INFO: Installing SpecialFunctions v0.4.0
INFO: Installing StochasticDiffEq v4.4.2
INFO: Building DiffEqBase
INFO: ~~~ DifferentialEquations.jl *BREAKING* changes  ~~~

We have changed the front-end API on how
users may define equations of motion and 
problems, for all problem types that can
be used in the DifferentialEquations.jl.
These are *BREAKING* changes, and they
also have *NO WARNINGS*!

Please see our latest documentation here:
http://docs.juliadiffeq.org/latest/

or the blogpost that describes the changes:
http://juliadiffeq.org/2018/01/24/Parameters.html

In short, the mutated argument is the first argument,
and parameters are now directly passed
into the equations of motion function. For all
types now mutation goes first, then dependent variables, 
then parameters, then independent variables. 

`f(mutated, dependent variables, p/integrator, independent variables)`

For example, this means that the ODE syntax will be `f(u,p,t)` (for the
out-of-place) and `f(du,u,p,t)` (for the in-place). Notice
that this change also removes the need for ParameterizedFunctions
as now parameters are part of the equations of motion.

For more details please visit the above links!
INFO: Building RandomNumbers
WARNING: AES-NI will not be compiled.
INFO: Building SpecialFunctions
INFO: Testing MultiScaleArrays
WARNING: Method definition (::Type{NLSolversBase.OnceDifferentiable{TF, TDF, TX} where TX where TDF where TF})(Any, AbstractArray{T, N} where N where T, AbstractArray{T, N} where N where T) in module NLSolversBase at /home/vagrant/.julia/v0.6/NLSolversBase/src/objective_types/oncedifferentiable.jl:114 overwritten in module NLsolve at /home/vagrant/.julia/v0.6/NLsolve/src/objectives/autodiff.jl:2.
WARNING: Method definition (::Type{NLSolversBase.OnceDifferentiable{TF, TDF, TX} where TX where TDF where TF})(Any, AbstractArray{T, N} where N where T, AbstractArray{T, N} where N where T) in module NLSolversBase at /home/vagrant/.julia/v0.6/NLSolversBase/src/objective_types/oncedifferentiable.jl:114 overwritten in module NLsolve at /home/vagrant/.julia/v0.6/NLsolve/src/objectives/autodiff.jl:2.
WARNING: Method definition (::Type{NLSolversBase.OnceDifferentiable{TF, TDF, TX} where TX where TDF where TF})(Any, AbstractArray{T, N} where N where T, AbstractArray{T, N} where N where T) in module NLSolversBase at /home/vagrant/.julia/v0.6/NLSolversBase/src/objective_types/oncedifferentiable.jl:114 overwritten in module NLsolve at /home/vagrant/.julia/v0.6/NLsolve/src/objectives/autodiff.jl:2.
WARNING: Method definition (::Type{NLSolversBase.OnceDifferentiable{TF, TDF, TX} where TX where TDF where TF})(Any, AbstractArray{T, N} where N where T, AbstractArray{T, N} where N where T) in module NLSolversBase at /home/vagrant/.julia/v0.6/NLSolversBase/src/objective_types/oncedifferentiable.jl:114 overwritten in module NLsolve at /home/vagrant/.julia/v0.6/NLsolve/src/objectives/autodiff.jl:2.
Test Summary:       | Pass  Total
Bisect Search Tests |   33     33
  0.591190 seconds (266.94 k allocations: 14.630 MiB, 1.82% gc time)
 17.479982 seconds (15.55 M allocations: 681.187 MiB, 1.14% gc time)
  1.960039 seconds (686.42 k allocations: 32.316 MiB, 0.59% gc time)
 18.576133 seconds (23.18 M allocations: 5.170 GiB, 3.58% gc time)
  8.060893 seconds (12.72 M allocations: 4.736 GiB, 8.01% gc time)
  0.053643 seconds (4.29 k allocations: 189.736 KiB)
  0.008222 seconds (1.21 k allocations: 64.892 KiB)
  0.000011 seconds (5 allocations: 176 bytes)
  0.000012 seconds (5 allocations: 176 bytes)
Test Summary:               | Pass  Total
Indexing and Creation Tests |   98     98
 49.756455 seconds (53.10 M allocations: 10.656 GiB, 3.15% gc time)
Test Summary:   | Pass  Total
Values Indexing |   55     55
  0.031731 seconds (8.78 k allocations: 542.766 KiB)
Test Summary:     | Pass  Total
Get Indices Tests |   19     19
  0.125814 seconds (17.12 k allocations: 992.583 KiB)
Test Summary:          |
Additional Fields Test | No tests
  9.212613 seconds (2.43 M allocations: 113.793 MiB, 0.56% gc time)
Do the ODE Part
Dynamic DiffEq Tests: Error During Test
  Got an exception of type LoadError outside of a @test
  LoadError: MethodError: no method matching resize!(::Embryo{Tissue{Population{Cell{ForwardDiff.Dual{ForwardDiff.Tag{DiffEqDiffTools.UJacobianWrapper{##23#24,Float64,Void},Float64},Float64,10}},ForwardDiff.Dual{ForwardDiff.Tag{DiffEqDiffTools.UJacobianWrapper{##23#24,Float64,Void},Float64},Float64,10}},ForwardDiff.Dual{ForwardDiff.Tag{DiffEqDiffTools.UJacobianWrapper{##23#24,Float64,Void},Float64},Float64,10}},ForwardDiff.Dual{ForwardDiff.Tag{DiffEqDiffTools.UJacobianWrapper{##23#24,Float64,Void},Float64},Float64,10}}, ::Int64)
  Closest candidates are:
    resize!(!Matched::Array{T,1} where T, ::Integer) at array.jl:772
    resize!(!Matched::BitArray{1}, ::Integer) at bitarray.jl:825
    resize!(!Matched::OrdinaryDiffEq.ODEIntegrator, ::Int64) at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/integrators/integrator_interface.jl:77
    ...
  Stacktrace:
   [1] resize_non_user_cache!(::OrdinaryDiffEq.ODEIntegrator{OrdinaryDiffEq.Rosenbrock23{0,true,DiffEqBase.LinSolveFactorize{Base.LinAlg.#lufact!},DataType},Embryo{Tissue{Population{Cell{Float64},Float64},Float64},Float64},Float64,Void,Float64,Float64,Float64,Array{Array{Float64,1},1},DiffEqBase.ODESolution{Float64,2,Array{Embryo{Tissue{Population{Cell{Float64},Float64},Float64},Float64},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Embryo{Tissue{Population{Cell{Float64},Float64},Float64},Float64},Float64,true,Void,##23#24,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Rosenbrock23{0,true,DiffEqBase.LinSolveFactorize{Base.LinAlg.#lufact!},DataType},OrdinaryDiffEq.InterpolationData{##23#24,Array{Embryo{Tissue{Population{Cell{Float64},Float64},Float64},Float64},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Rosenbrock23Cache{Embryo{Tissue{Population{Cell{Float64},Float64},Float64},Float64},Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,2},OrdinaryDiffEq.Rosenbrock23ConstantCache{Float64,Base.#identity,Base.#identity},DiffEqDiffTools.TimeGradientWrapper{##23#24,Embryo{Tissue{Population{Cell{Float64},Float64},Float64},Float64},Void},DiffEqDiffTools.UJacobianWrapper{##23#24,Float64,Void},DiffEqBase.LinSolveFactorize{Base.LinAlg.#lufact!},ForwardDiff.JacobianConfig{ForwardDiff.Tag{DiffEqDiffTools.UJacobianWrapper{##23#24,Float64,Void},Float64},Float64,10,Tuple{Array{ForwardDiff.Dual{ForwardDiff.Tag{DiffEqDiffTools.UJacobianWrapper{##23#24,Float64,Void},Float64},Float64,10},1},Embryo{Tissue{Population{Cell{ForwardDiff.Dual{ForwardDiff.Tag{DiffEqDiffTools.UJacobianWrapper{##23#24,Float64,Void},Float64},Float64,10}},ForwardDiff.Dual{ForwardDiff.Tag{DiffEqDiffTools.UJacobianWrapper{##23#24,Float64,Void},Float64},Float64,10}},ForwardDiff.Dual{ForwardDiff.Tag{DiffEqDiffTools.UJacobianWrapper{##23#24,Float64,Void},Float64},Float64,10}},ForwardDiff.Dual{ForwardDiff.Tag{DiffEqDiffTools.UJacobianWrapper{##23#24,Float64,Void},Float64},Float64,10}}}},ForwardDiff.DerivativeConfig{ForwardDiff.Tag{DiffEqDiffTools.TimeGradientWrapper{##23#24,Embryo{Tissue{Population{Cell{Float64},Float64},Float64},Float64},Void},Float64},Array{ForwardDiff.Dual{ForwardDiff.Tag{DiffEqDiffTools.TimeGradientWrapper{##23#24,Embryo{Tissue{Population{Cell{Float64},Float64},Float64},Float64},Void},Float64},Float64,1},1}}}}},##23#24,Void,OrdinaryDiffEq.Rosenbrock23Cache{Embryo{Tissue{Population{Cell{Float64},Float64},Float64},Float64},Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,2},OrdinaryDiffEq.Rosenbrock23ConstantCache{Float64,Base.#identity,Base.#identity},DiffEqDiffTools.TimeGradientWrapper{##23#24,Embryo{Tissue{Population{Cell{Float64},Float64},Float64},Float64},Void},DiffEqDiffTools.UJacobianWrapper{##23#24,Float64,Void},DiffEqBase.LinSolveFactorize{Base.LinAlg.#lufact!},ForwardDiff.JacobianConfig{ForwardDiff.Tag{DiffEqDiffTools.UJacobianWrapper{##23#24,Float64,Void},Float64},Float64,10,Tuple{Array{ForwardDiff.Dual{ForwardDiff.Tag{DiffEqDiffTools.UJacobianWrapper{##23#24,Float64,Void},Float64},Float64,10},1},Embryo{Tissue{Population{Cell{ForwardDiff.Dual{ForwardDiff.Tag{DiffEqDiffTools.UJacobianWrapper{##23#24,Float64,Void},Float64},Float64,10}},ForwardDiff.Dual{ForwardDiff.Tag{DiffEqDiffTools.UJacobianWrapper{##23#24,Float64,Void},Float64},Float64,10}},ForwardDiff.Dual{ForwardDiff.Tag{DiffEqDiffTools.UJacobianWrapper{##23#24,Float64,Void},Float64},Float64,10}},ForwardDiff.Dual{ForwardDiff.Tag{DiffEqDiffTools.UJacobianWrapper{##23#24,Float64,Void},Float64},Float64,10}}}},ForwardDiff.DerivativeConfig{ForwardDiff.Tag{DiffEqDiffTools.TimeGradientWrapper{##23#24,Embryo{Tissue{Population{Cell{Float64},Float64},Float64},Float64},Void},Float64},Array{ForwardDiff.Dual{ForwardDiff.Tag{DiffEqDiffTools.TimeGradientWrapper{##23#24,Embryo{Tissue{Population{Cell{Float64},Float64},Float64},Float64},Void},Float64},Float64,1},1}}},OrdinaryDiffEq.DEOptions{Float64,Float64,Float64,Float64,DiffEqBase.#ODE_DEFAULT_NORM,DiffEqBase.CallbackSet{Tuple{},Tuple{DiffEqBase.DiscreteCallback{##25#26,##27#28,DiffEqBase.#INITIALIZE_DEFAULT}}},DiffEqBase.#ODE_DEFAULT_ISOUTOFDOMAIN,DiffEqBase.#ODE_DEFAULT_PROG_MESSAGE,DiffEqBase.#ODE_DEFAULT_UNSTABLE_CHECK,DataStructures.BinaryHeap{Float64,DataStructures.LessThan},DataStructures.BinaryHeap{Float64,DataStructures.LessThan},Void,Void,Int64,Array{Float64,1},Array{Float64,1},Array{Float64,1}},Array{Float64,1}}, ::OrdinaryDiffEq.Rosenbrock23Cache{Embryo{Tissue{Population{Cell{Float64},Float64},Float64},Float64},Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,2},OrdinaryDiffEq.Rosenbrock23ConstantCache{Float64,Base.#identity,Base.#identity},DiffEqDiffTools.TimeGradientWrapper{##23#24,Embryo{Tissue{Population{Cell{Float64},Float64},Float64},Float64},Void},DiffEqDiffTools.UJacobianWrapper{##23#24,Float64,Void},DiffEqBase.LinSolveFactorize{Base.LinAlg.#lufact!},ForwardDiff.JacobianConfig{ForwardDiff.Tag{DiffEqDiffTools.UJacobianWrapper{##23#24,Float64,Void},Float64},Float64,10,Tuple{Array{ForwardDiff.Dual{ForwardDiff.Tag{DiffEqDiffTools.UJacobianWrapper{##23#24,Float64,Void},Float64},Float64,10},1},Embryo{Tissue{Population{Cell{ForwardDiff.Dual{ForwardDiff.Tag{DiffEqDiffTools.UJacobianWrapper{##23#24,Float64,Void},Float64},Float64,10}},ForwardDiff.Dual{ForwardDiff.Tag{DiffEqDiffTools.UJacobianWrapper{##23#24,Float64,Void},Float64},Float64,10}},ForwardDiff.Dual{ForwardDiff.Tag{DiffEqDiffTools.UJacobianWrapper{##23#24,Float64,Void},Float64},Float64,10}},ForwardDiff.Dual{ForwardDiff.Tag{DiffEqDiffTools.UJacobianWrapper{##23#24,Float64,Void},Float64},Float64,10}}}},ForwardDiff.DerivativeConfig{ForwardDiff.Tag{DiffEqDiffTools.TimeGradientWrapper{##23#24,Embryo{Tissue{Population{Cell{Float64},Float64},Float64},Float64},Void},Float64},Array{ForwardDiff.Dual{ForwardDiff.Tag{DiffEqDiffTools.TimeGradientWrapper{##23#24,Embryo{Tissue{Population{Cell{Float64},Float64},Float64},Float64},Void},Float64},Float64,1},1}}}, ::Int64) at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/integrators/integrator_interface.jl:107
   [2] addat_non_user_cache!(::OrdinaryDiffEq.ODEIntegrator{OrdinaryDiffEq.Rosenbrock23{0,true,DiffEqBase.LinSolveFactorize{Base.LinAlg.#lufact!},DataType},Embryo{Tissue{Population{Cell{Float64},Float64},Float64},Float64},Float64,Void,Float64,Float64,Float64,Array{Array{Float64,1},1},DiffEqBase.ODESolution{Float64,2,Array{Embryo{Tissue{Population{Cell{Float64},Float64},Float64},Float64},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Embryo{Tissue{Population{Cell{Float64},Float64},Float64},Float64},Float64,true,Void,##23#24,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Rosenbrock23{0,true,DiffEqBase.LinSolveFactorize{Base.LinAlg.#lufact!},DataType},OrdinaryDiffEq.InterpolationData{##23#24,Array{Embryo{Tissue{Population{Cell{Float64},Float64},Float64},Float64},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Rosenbrock23Cache{Embryo{Tissue{Population{Cell{Float64},Float64},Float64},Float64},Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,2},OrdinaryDiffEq.Rosenbrock23ConstantCache{Float64,Base.#identity,Base.#identity},DiffEqDiffTools.TimeGradientWrapper{##23#24,Embryo{Tissue{Population{Cell{Float64},Float64},Float64},Float64},Void},DiffEqDiffTools.UJacobianWrapper{##23#24,Float64,Void},DiffEqBase.LinSolveFactorize{Base.LinAlg.#lufact!},ForwardDiff.JacobianConfig{ForwardDiff.Tag{DiffEqDiffTools.UJacobianWrapper{##23#24,Float64,Void},Float64},Float64,10,Tuple{Array{ForwardDiff.Dual{ForwardDiff.Tag{DiffEqDiffTools.UJacobianWrapper{##23#24,Float64,Void},Float64},Float64,10},1},Embryo{Tissue{Population{Cell{ForwardDiff.Dual{ForwardDiff.Tag{DiffEqDiffTools.UJacobianWrapper{##23#24,Float64,Void},Float64},Float64,10}},ForwardDiff.Dual{ForwardDiff.Tag{DiffEqDiffTools.UJacobianWrapper{##23#24,Float64,Void},Float64},Float64,10}},ForwardDiff.Dual{ForwardDiff.Tag{DiffEqDiffTools.UJacobianWrapper{##23#24,Float64,Void},Float64},Float64,10}},ForwardDiff.Dual{ForwardDiff.Tag{DiffEqDiffTools.UJacobianWrapper{##23#24,Float64,Void},Float64},Float64,10}}}},ForwardDiff.DerivativeConfig{ForwardDiff.Tag{DiffEqDiffTools.TimeGradientWrapper{##23#24,Embryo{Tissue{Population{Cell{Float64},Float64},Float64},Float64},Void},Float64},Array{ForwardDiff.Dual{ForwardDiff.Tag{DiffEqDiffTools.TimeGradientWrapper{##23#24,Embryo{Tissue{Population{Cell{Float64},Float64},Float64},Float64},Void},Float64},Float64,1},1}}}}},##23#24,Void,OrdinaryDiffEq.Rosenbrock23Cache{Embryo{Tissue{Population{Cell{Float64},Float64},Float64},Float64},Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,2},OrdinaryDiffEq.Rosenbrock23ConstantCache{Float64,Base.#identity,Base.#identity},DiffEqDiffTools.TimeGradientWrapper{##23#24,Embryo{Tissue{Population{Cell{Float64},Float64},Float64},Float64},Void},DiffEqDiffTools.UJacobianWrapper{##23#24,Float64,Void},DiffEqBase.LinSolveFactorize{Base.LinAlg.#lufact!},ForwardDiff.JacobianConfig{ForwardDiff.Tag{DiffEqDiffTools.UJacobianWrapper{##23#24,Float64,Void},Float64},Float64,10,Tuple{Array{ForwardDiff.Dual{ForwardDiff.Tag{DiffEqDiffTools.UJacobianWrapper{##23#24,Float64,Void},Float64},Float64,10},1},Embryo{Tissue{Population{Cell{ForwardDiff.Dual{ForwardDiff.Tag{DiffEqDiffTools.UJacobianWrapper{##23#24,Float64,Void},Float64},Float64,10}},ForwardDiff.Dual{ForwardDiff.Tag{DiffEqDiffTools.UJacobianWrapper{##23#24,Float64,Void},Float64},Float64,10}},ForwardDiff.Dual{ForwardDiff.Tag{DiffEqDiffTools.UJacobianWrapper{##23#24,Float64,Void},Float64},Float64,10}},ForwardDiff.Dual{ForwardDiff.Tag{DiffEqDiffTools.UJacobianWrapper{##23#24,Float64,Void},Float64},Float64,10}}}},ForwardDiff.DerivativeConfig{ForwardDiff.Tag{DiffEqDiffTools.TimeGradientWrapper{##23#24,Embryo{Tissue{Population{Cell{Float64},Float64},Float64},Float64},Void},Float64},Array{ForwardDiff.Dual{ForwardDiff.Tag{DiffEqDiffTools.TimeGradientWrapper{##23#24,Embryo{Tissue{Population{Cell{Float64},Float64},Float64},Float64},Void},Float64},Float64,1},1}}},OrdinaryDiffEq.DEOptions{Float64,Float64,Float64,Float64,DiffEqBase.#ODE_DEFAULT_NORM,DiffEqBase.CallbackSet{Tuple{},Tuple{DiffEqBase.DiscreteCallback{##25#26,##27#28,DiffEqBase.#INITIALIZE_DEFAULT}}},DiffEqBase.#ODE_DEFAULT_ISOUTOFDOMAIN,DiffEqBase.#ODE_DEFAULT_PROG_MESSAGE,DiffEqBase.#ODE_DEFAULT_UNSTABLE_CHECK,DataStructures.BinaryHeap{Float64,DataStructures.LessThan},DataStructures.BinaryHeap{Float64,DataStructures.LessThan},Void,Void,Int64,Array{Float64,1},Array{Float64,1},Array{Float64,1}},Array{Float64,1}}, ::UnitRange{Int64}) at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/integrators/integrator_interface.jl:87
   [3] add_node!(::OrdinaryDiffEq.ODEIntegrator{OrdinaryDiffEq.Rosenbrock23{0,true,DiffEqBase.LinSolveFactorize{Base.LinAlg.#lufact!},DataType},Embryo{Tissue{Population{Cell{Float64},Float64},Float64},Float64},Float64,Void,Float64,Float64,Float64,Array{Array{Float64,1},1},DiffEqBase.ODESolution{Float64,2,Array{Embryo{Tissue{Population{Cell{Float64},Float64},Float64},Float64},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Embryo{Tissue{Population{Cell{Float64},Float64},Float64},Float64},Float64,true,Void,##23#24,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Rosenbrock23{0,true,DiffEqBase.LinSolveFactorize{Base.LinAlg.#lufact!},DataType},OrdinaryDiffEq.InterpolationData{##23#24,Array{Embryo{Tissue{Population{Cell{Float64},Float64},Float64},Float64},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Rosenbrock23Cache{Embryo{Tissue{Population{Cell{Float64},Float64},Float64},Float64},Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,2},OrdinaryDiffEq.Rosenbrock23ConstantCache{Float64,Base.#identity,Base.#identity},DiffEqDiffTools.TimeGradientWrapper{##23#24,Embryo{Tissue{Population{Cell{Float64},Float64},Float64},Float64},Void},DiffEqDiffTools.UJacobianWrapper{##23#24,Float64,Void},DiffEqBase.LinSolveFactorize{Base.LinAlg.#lufact!},ForwardDiff.JacobianConfig{ForwardDiff.Tag{DiffEqDiffTools.UJacobianWrapper{##23#24,Float64,Void},Float64},Float64,10,Tuple{Array{ForwardDiff.Dual{ForwardDiff.Tag{DiffEqDiffTools.UJacobianWrapper{##23#24,Float64,Void},Float64},Float64,10},1},Embryo{Tissue{Population{Cell{ForwardDiff.Dual{ForwardDiff.Tag{DiffEqDiffTools.UJacobianWrapper{##23#24,Float64,Void},Float64},Float64,10}},ForwardDiff.Dual{ForwardDiff.Tag{DiffEqDiffTools.UJacobianWrapper{##23#24,Float64,Void},Float64},Float64,10}},ForwardDiff.Dual{ForwardDiff.Tag{DiffEqDiffTools.UJacobianWrapper{##23#24,Float64,Void},Float64},Float64,10}},ForwardDiff.Dual{ForwardDiff.Tag{DiffEqDiffTools.UJacobianWrapper{##23#24,Float64,Void},Float64},Float64,10}}}},ForwardDiff.DerivativeConfig{ForwardDiff.Tag{DiffEqDiffTools.TimeGradientWrapper{##23#24,Embryo{Tissue{Population{Cell{Float64},Float64},Float64},Float64},Void},Float64},Array{ForwardDiff.Dual{ForwardDiff.Tag{DiffEqDiffTools.TimeGradientWrapper{##23#24,Embryo{Tissue{Population{Cell{Float64},Float64},Float64},Float64},Void},Float64},Float64,1},1}}}}},##23#24,Void,OrdinaryDiffEq.Rosenbrock23Cache{Embryo{Tissue{Population{Cell{Float64},Float64},Float64},Float64},Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,2},OrdinaryDiffEq.Rosenbrock23ConstantCache{Float64,Base.#identity,Base.#identity},DiffEqDiffTools.TimeGradientWrapper{##23#24,Embryo{Tissue{Population{Cell{Float64},Float64},Float64},Float64},Void},DiffEqDiffTools.UJacobianWrapper{##23#24,Float64,Void},DiffEqBase.LinSolveFactorize{Base.LinAlg.#lufact!},ForwardDiff.JacobianConfig{ForwardDiff.Tag{DiffEqDiffTools.UJacobianWrapper{##23#24,Float64,Void},Float64},Float64,10,Tuple{Array{ForwardDiff.Dual{ForwardDiff.Tag{DiffEqDiffTools.UJacobianWrapper{##23#24,Float64,Void},Float64},Float64,10},1},Embryo{Tissue{Population{Cell{ForwardDiff.Dual{ForwardDiff.Tag{DiffEqDiffTools.UJacobianWrapper{##23#24,Float64,Void},Float64},Float64,10}},ForwardDiff.Dual{ForwardDiff.Tag{DiffEqDiffTools.UJacobianWrapper{##23#24,Float64,Void},Float64},Float64,10}},ForwardDiff.Dual{ForwardDiff.Tag{DiffEqDiffTools.UJacobianWrapper{##23#24,Float64,Void},Float64},Float64,10}},ForwardDiff.Dual{ForwardDiff.Tag{DiffEqDiffTools.UJacobianWrapper{##23#24,Float64,Void},Float64},Float64,10}}}},ForwardDiff.DerivativeConfig{ForwardDiff.Tag{DiffEqDiffTools.TimeGradientWrapper{##23#24,Embryo{Tissue{Population{Cell{Float64},Float64},Float64},Float64},Void},Float64},Array{ForwardDiff.Dual{ForwardDiff.Tag{DiffEqDiffTools.TimeGradientWrapper{##23#24,Embryo{Tissue{Population{Cell{Float64},Float64},Float64},Float64},Void},Float64},Float64,1},1}}},OrdinaryDiffEq.DEOptions{Float64,Float64,Float64,Float64,DiffEqBase.#ODE_DEFAULT_NORM,DiffEqBase.CallbackSet{Tuple{},Tuple{DiffEqBase.DiscreteCallback{##25#26,##27#28,DiffEqBase.#INITIALIZE_DEFAULT}}},DiffEqBase.#ODE_DEFAULT_ISOUTOFDOMAIN,DiffEqBase.#ODE_DEFAULT_PROG_MESSAGE,DiffEqBase.#ODE_DEFAULT_UNSTABLE_CHECK,DataStructures.BinaryHeap{Float64,DataStructures.LessThan},DataStructures.BinaryHeap{Float64,DataStructures.LessThan},Void,Void,Int64,Array{Float64,1},Array{Float64,1},Array{Float64,1}},Array{Float64,1}}, ::Cell{Float64}, ::Int64, ::Int64, ::Vararg{Int64,N} where N) at /home/vagrant/.julia/v0.6/MultiScaleArrays/src/diffeq.jl:17
   [4] (::##27#28)(::OrdinaryDiffEq.ODEIntegrator{OrdinaryDiffEq.Rosenbrock23{0,true,DiffEqBase.LinSolveFactorize{Base.LinAlg.#lufact!},DataType},Embryo{Tissue{Population{Cell{Float64},Float64},Float64},Float64},Float64,Void,Float64,Float64,Float64,Array{Array{Float64,1},1},DiffEqBase.ODESolution{Float64,2,Array{Embryo{Tissue{Population{Cell{Float64},Float64},Float64},Float64},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Embryo{Tissue{Population{Cell{Float64},Float64},Float64},Float64},Float64,true,Void,##23#24,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Rosenbrock23{0,true,DiffEqBase.LinSolveFactorize{Base.LinAlg.#lufact!},DataType},OrdinaryDiffEq.InterpolationData{##23#24,Array{Embryo{Tissue{Population{Cell{Float64},Float64},Float64},Float64},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Rosenbrock23Cache{Embryo{Tissue{Population{Cell{Float64},Float64},Float64},Float64},Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,2},OrdinaryDiffEq.Rosenbrock23ConstantCache{Float64,Base.#identity,Base.#identity},DiffEqDiffTools.TimeGradientWrapper{##23#24,Embryo{Tissue{Population{Cell{Float64},Float64},Float64},Float64},Void},DiffEqDiffTools.UJacobianWrapper{##23#24,Float64,Void},DiffEqBase.LinSolveFactorize{Base.LinAlg.#lufact!},ForwardDiff.JacobianConfig{ForwardDiff.Tag{DiffEqDiffTools.UJacobianWrapper{##23#24,Float64,Void},Float64},Float64,10,Tuple{Array{ForwardDiff.Dual{ForwardDiff.Tag{DiffEqDiffTools.UJacobianWrapper{##23#24,Float64,Void},Float64},Float64,10},1},Embryo{Tissue{Population{Cell{ForwardDiff.Dual{ForwardDiff.Tag{DiffEqDiffTools.UJacobianWrapper{##23#24,Float64,Void},Float64},Float64,10}},ForwardDiff.Dual{ForwardDiff.Tag{DiffEqDiffTools.UJacobianWrapper{##23#24,Float64,Void},Float64},Float64,10}},ForwardDiff.Dual{ForwardDiff.Tag{DiffEqDiffTools.UJacobianWrapper{##23#24,Float64,Void},Float64},Float64,10}},ForwardDiff.Dual{ForwardDiff.Tag{DiffEqDiffTools.UJacobianWrapper{##23#24,Float64,Void},Float64},Float64,10}}}},ForwardDiff.DerivativeConfig{ForwardDiff.Tag{DiffEqDiffTools.TimeGradientWrapper{##23#24,Embryo{Tissue{Population{Cell{Float64},Float64},Float64},Float64},Void},Float64},Array{ForwardDiff.Dual{ForwardDiff.Tag{DiffEqDiffTools.TimeGradientWrapper{##23#24,Embryo{Tissue{Population{Cell{Float64},Float64},Float64},Float64},Void},Float64},Float64,1},1}}}}},##23#24,Void,OrdinaryDiffEq.Rosenbrock23Cache{Embryo{Tissue{Population{Cell{Float64},Float64},Float64},Float64},Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,2},OrdinaryDiffEq.Rosenbrock23ConstantCache{Float64,Base.#identity,Base.#identity},DiffEqDiffTools.TimeGradientWrapper{##23#24,Embryo{Tissue{Population{Cell{Float64},Float64},Float64},Float64},Void},DiffEqDiffTools.UJacobianWrapper{##23#24,Float64,Void},DiffEqBase.LinSolveFactorize{Base.LinAlg.#lufact!},ForwardDiff.JacobianConfig{ForwardDiff.Tag{DiffEqDiffTools.UJacobianWrapper{##23#24,Float64,Void},Float64},Float64,10,Tuple{Array{ForwardDiff.Dual{ForwardDiff.Tag{DiffEqDiffTools.UJacobianWrapper{##23#24,Float64,Void},Float64},Float64,10},1},Embryo{Tissue{Population{Cell{ForwardDiff.Dual{ForwardDiff.Tag{DiffEqDiffTools.UJacobianWrapper{##23#24,Float64,Void},Float64},Float64,10}},ForwardDiff.Dual{ForwardDiff.Tag{DiffEqDiffTools.UJacobianWrapper{##23#24,Float64,Void},Float64},Float64,10}},ForwardDiff.Dual{ForwardDiff.Tag{DiffEqDiffTools.UJacobianWrapper{##23#24,Float64,Void},Float64},Float64,10}},ForwardDiff.Dual{ForwardDiff.Tag{DiffEqDiffTools.UJacobianWrapper{##23#24,Float64,Void},Float64},Float64,10}}}},ForwardDiff.DerivativeConfig{ForwardDiff.Tag{DiffEqDiffTools.TimeGradientWrapper{##23#24,Embryo{Tissue{Population{Cell{Float64},Float64},Float64},Float64},Void},Float64},Array{ForwardDiff.Dual{ForwardDiff.Tag{DiffEqDiffTools.TimeGradientWrapper{##23#24,Embryo{Tissue{Population{Cell{Float64},Float64},Float64},Float64},Void},Float64},Float64,1},1}}},OrdinaryDiffEq.DEOptions{Float64,Float64,Float64,Float64,DiffEqBase.#ODE_DEFAULT_NORM,DiffEqBase.CallbackSet{Tuple{},Tuple{DiffEqBase.DiscreteCallback{##25#26,##27#28,DiffEqBase.#INITIALIZE_DEFAULT}}},DiffEqBase.#ODE_DEFAULT_ISOUTOFDOMAIN,DiffEqBase.#ODE_DEFAULT_PROG_MESSAGE,DiffEqBase.#ODE_DEFAULT_UNSTABLE_CHECK,DataStructures.BinaryHeap{Float64,DataStructures.LessThan},DataStructures.BinaryHeap{Float64,DataStructures.LessThan},Void,Void,Int64,Array{Float64,1},Array{Float64,1},Array{Float64,1}},Array{Float64,1}}) at /home/vagrant/.julia/v0.6/MultiScaleArrays/test/dynamic_diffeq.jl:55
   [5] apply_discrete_callback! at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/callbacks.jl:195 [inlined]
   [6] handle_callbacks!(::OrdinaryDiffEq.ODEIntegrator{OrdinaryDiffEq.Rosenbrock23{0,true,DiffEqBase.LinSolveFactorize{Base.LinAlg.#lufact!},DataType},Embryo{Tissue{Population{Cell{Float64},Float64},Float64},Float64},Float64,Void,Float64,Float64,Float64,Array{Array{Float64,1},1},DiffEqBase.ODESolution{Float64,2,Array{Embryo{Tissue{Population{Cell{Float64},Float64},Float64},Float64},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Embryo{Tissue{Population{Cell{Float64},Float64},Float64},Float64},Float64,true,Void,##23#24,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Rosenbrock23{0,true,DiffEqBase.LinSolveFactorize{Base.LinAlg.#lufact!},DataType},OrdinaryDiffEq.InterpolationData{##23#24,Array{Embryo{Tissue{Population{Cell{Float64},Float64},Float64},Float64},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Rosenbrock23Cache{Embryo{Tissue{Population{Cell{Float64},Float64},Float64},Float64},Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,2},OrdinaryDiffEq.Rosenbrock23ConstantCache{Float64,Base.#identity,Base.#identity},DiffEqDiffTools.TimeGradientWrapper{##23#24,Embryo{Tissue{Population{Cell{Float64},Float64},Float64},Float64},Void},DiffEqDiffTools.UJacobianWrapper{##23#24,Float64,Void},DiffEqBase.LinSolveFactorize{Base.LinAlg.#lufact!},ForwardDiff.JacobianConfig{ForwardDiff.Tag{DiffEqDiffTools.UJacobianWrapper{##23#24,Float64,Void},Float64},Float64,10,Tuple{Array{ForwardDiff.Dual{ForwardDiff.Tag{DiffEqDiffTools.UJacobianWrapper{##23#24,Float64,Void},Float64},Float64,10},1},Embryo{Tissue{Population{Cell{ForwardDiff.Dual{ForwardDiff.Tag{DiffEqDiffTools.UJacobianWrapper{##23#24,Float64,Void},Float64},Float64,10}},ForwardDiff.Dual{ForwardDiff.Tag{DiffEqDiffTools.UJacobianWrapper{##23#24,Float64,Void},Float64},Float64,10}},ForwardDiff.Dual{ForwardDiff.Tag{DiffEqDiffTools.UJacobianWrapper{##23#24,Float64,Void},Float64},Float64,10}},ForwardDiff.Dual{ForwardDiff.Tag{DiffEqDiffTools.UJacobianWrapper{##23#24,Float64,Void},Float64},Float64,10}}}},ForwardDiff.DerivativeConfig{ForwardDiff.Tag{DiffEqDiffTools.TimeGradientWrapper{##23#24,Embryo{Tissue{Population{Cell{Float64},Float64},Float64},Float64},Void},Float64},Array{ForwardDiff.Dual{ForwardDiff.Tag{DiffEqDiffTools.TimeGradientWrapper{##23#24,Embryo{Tissue{Population{Cell{Float64},Float64},Float64},Float64},Void},Float64},Float64,1},1}}}}},##23#24,Void,OrdinaryDiffEq.Rosenbrock23Cache{Embryo{Tissue{Population{Cell{Float64},Float64},Float64},Float64},Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,2},OrdinaryDiffEq.Rosenbrock23ConstantCache{Float64,Base.#identity,Base.#identity},DiffEqDiffTools.TimeGradientWrapper{##23#24,Embryo{Tissue{Population{Cell{Float64},Float64},Float64},Float64},Void},DiffEqDiffTools.UJacobianWrapper{##23#24,Float64,Void},DiffEqBase.LinSolveFactorize{Base.LinAlg.#lufact!},ForwardDiff.JacobianConfig{ForwardDiff.Tag{DiffEqDiffTools.UJacobianWrapper{##23#24,Float64,Void},Float64},Float64,10,Tuple{Array{ForwardDiff.Dual{ForwardDiff.Tag{DiffEqDiffTools.UJacobianWrapper{##23#24,Float64,Void},Float64},Float64,10},1},Embryo{Tissue{Population{Cell{ForwardDiff.Dual{ForwardDiff.Tag{DiffEqDiffTools.UJacobianWrapper{##23#24,Float64,Void},Float64},Float64,10}},ForwardDiff.Dual{ForwardDiff.Tag{DiffEqDiffTools.UJacobianWrapper{##23#24,Float64,Void},Float64},Float64,10}},ForwardDiff.Dual{ForwardDiff.Tag{DiffEqDiffTools.UJacobianWrapper{##23#24,Float64,Void},Float64},Float64,10}},ForwardDiff.Dual{ForwardDiff.Tag{DiffEqDiffTools.UJacobianWrapper{##23#24,Float64,Void},Float64},Float64,10}}}},ForwardDiff.DerivativeConfig{ForwardDiff.Tag{DiffEqDiffTools.TimeGradientWrapper{##23#24,Embryo{Tissue{Population{Cell{Float64},Float64},Float64},Float64},Void},Float64},Array{ForwardDiff.Dual{ForwardDiff.Tag{DiffEqDiffTools.TimeGradientWrapper{##23#24,Embryo{Tissue{Population{Cell{Float64},Float64},Float64},Float64},Void},Float64},Float64,1},1}}},OrdinaryDiffEq.DEOptions{Float64,Float64,Float64,Float64,DiffEqBase.#ODE_DEFAULT_NORM,DiffEqBase.CallbackSet{Tuple{},Tuple{DiffEqBase.DiscreteCallback{##25#26,##27#28,DiffEqBase.#INITIALIZE_DEFAULT}}},DiffEqBase.#ODE_DEFAULT_ISOUTOFDOMAIN,DiffEqBase.#ODE_DEFAULT_PROG_MESSAGE,DiffEqBase.#ODE_DEFAULT_UNSTABLE_CHECK,DataStructures.BinaryHeap{Float64,DataStructures.LessThan},DataStructures.BinaryHeap{Float64,DataStructures.LessThan},Void,Void,Int64,Array{Float64,1},Array{Float64,1},Array{Float64,1}},Array{Float64,1}}) at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/integrators/integrator_utils.jl:306
   [7] loopfooter!(::OrdinaryDiffEq.ODEIntegrator{OrdinaryDiffEq.Rosenbrock23{0,true,DiffEqBase.LinSolveFactorize{Base.LinAlg.#lufact!},DataType},Embryo{Tissue{Population{Cell{Float64},Float64},Float64},Float64},Float64,Void,Float64,Float64,Float64,Array{Array{Float64,1},1},DiffEqBase.ODESolution{Float64,2,Array{Embryo{Tissue{Population{Cell{Float64},Float64},Float64},Float64},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Embryo{Tissue{Population{Cell{Float64},Float64},Float64},Float64},Float64,true,Void,##23#24,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Rosenbrock23{0,true,DiffEqBase.LinSolveFactorize{Base.LinAlg.#lufact!},DataType},OrdinaryDiffEq.InterpolationData{##23#24,Array{Embryo{Tissue{Population{Cell{Float64},Float64},Float64},Float64},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Rosenbrock23Cache{Embryo{Tissue{Population{Cell{Float64},Float64},Float64},Float64},Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,2},OrdinaryDiffEq.Rosenbrock23ConstantCache{Float64,Base.#identity,Base.#identity},DiffEqDiffTools.TimeGradientWrapper{##23#24,Embryo{Tissue{Population{Cell{Float64},Float64},Float64},Float64},Void},DiffEqDiffTools.UJacobianWrapper{##23#24,Float64,Void},DiffEqBase.LinSolveFactorize{Base.LinAlg.#lufact!},ForwardDiff.JacobianConfig{ForwardDiff.Tag{DiffEqDiffTools.UJacobianWrapper{##23#24,Float64,Void},Float64},Float64,10,Tuple{Array{ForwardDiff.Dual{ForwardDiff.Tag{DiffEqDiffTools.UJacobianWrapper{##23#24,Float64,Void},Float64},Float64,10},1},Embryo{Tissue{Population{Cell{ForwardDiff.Dual{ForwardDiff.Tag{DiffEqDiffTools.UJacobianWrapper{##23#24,Float64,Void},Float64},Float64,10}},ForwardDiff.Dual{ForwardDiff.Tag{DiffEqDiffTools.UJacobianWrapper{##23#24,Float64,Void},Float64},Float64,10}},ForwardDiff.Dual{ForwardDiff.Tag{DiffEqDiffTools.UJacobianWrapper{##23#24,Float64,Void},Float64},Float64,10}},ForwardDiff.Dual{ForwardDiff.Tag{DiffEqDiffTools.UJacobianWrapper{##23#24,Float64,Void},Float64},Float64,10}}}},ForwardDiff.DerivativeConfig{ForwardDiff.Tag{DiffEqDiffTools.TimeGradientWrapper{##23#24,Embryo{Tissue{Population{Cell{Float64},Float64},Float64},Float64},Void},Float64},Array{ForwardDiff.Dual{ForwardDiff.Tag{DiffEqDiffTools.TimeGradientWrapper{##23#24,Embryo{Tissue{Population{Cell{Float64},Float64},Float64},Float64},Void},Float64},Float64,1},1}}}}},##23#24,Void,OrdinaryDiffEq.Rosenbrock23Cache{Embryo{Tissue{Population{Cell{Float64},Float64},Float64},Float64},Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,2},OrdinaryDiffEq.Rosenbrock23ConstantCache{Float64,Base.#identity,Base.#identity},DiffEqDiffTools.TimeGradientWrapper{##23#24,Embryo{Tissue{Population{Cell{Float64},Float64},Float64},Float64},Void},DiffEqDiffTools.UJacobianWrapper{##23#24,Float64,Void},DiffEqBase.LinSolveFactorize{Base.LinAlg.#lufact!},ForwardDiff.JacobianConfig{ForwardDiff.Tag{DiffEqDiffTools.UJacobianWrapper{##23#24,Float64,Void},Float64},Float64,10,Tuple{Array{ForwardDiff.Dual{ForwardDiff.Tag{DiffEqDiffTools.UJacobianWrapper{##23#24,Float64,Void},Float64},Float64,10},1},Embryo{Tissue{Population{Cell{ForwardDiff.Dual{ForwardDiff.Tag{DiffEqDiffTools.UJacobianWrapper{##23#24,Float64,Void},Float64},Float64,10}},ForwardDiff.Dual{ForwardDiff.Tag{DiffEqDiffTools.UJacobianWrapper{##23#24,Float64,Void},Float64},Float64,10}},ForwardDiff.Dual{ForwardDiff.Tag{DiffEqDiffTools.UJacobianWrapper{##23#24,Float64,Void},Float64},Float64,10}},ForwardDiff.Dual{ForwardDiff.Tag{DiffEqDiffTools.UJacobianWrapper{##23#24,Float64,Void},Float64},Float64,10}}}},ForwardDiff.DerivativeConfig{ForwardDiff.Tag{DiffEqDiffTools.TimeGradientWrapper{##23#24,Embryo{Tissue{Population{Cell{Float64},Float64},Float64},Float64},Void},Float64},Array{ForwardDiff.Dual{ForwardDiff.Tag{DiffEqDiffTools.TimeGradientWrapper{##23#24,Embryo{Tissue{Population{Cell{Float64},Float64},Float64},Float64},Void},Float64},Float64,1},1}}},OrdinaryDiffEq.DEOptions{Float64,Float64,Float64,Float64,DiffEqBase.#ODE_DEFAULT_NORM,DiffEqBase.CallbackSet{Tuple{},Tuple{DiffEqBase.DiscreteCallback{##25#26,##27#28,DiffEqBase.#INITIALIZE_DEFAULT}}},DiffEqBase.#ODE_DEFAULT_ISOUTOFDOMAIN,DiffEqBase.#ODE_DEFAULT_PROG_MESSAGE,DiffEqBase.#ODE_DEFAULT_UNSTABLE_CHECK,DataStructures.BinaryHeap{Float64,DataStructures.LessThan},DataStructures.BinaryHeap{Float64,DataStructures.LessThan},Void,Void,Int64,Array{Float64,1},Array{Float64,1},Array{Float64,1}},Array{Float64,1}}) at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/integrators/integrator_utils.jl:264
   [8] solve!(::OrdinaryDiffEq.ODEIntegrator{OrdinaryDiffEq.Rosenbrock23{0,true,DiffEqBase.LinSolveFactorize{Base.LinAlg.#lufact!},DataType},Embryo{Tissue{Population{Cell{Float64},Float64},Float64},Float64},Float64,Void,Float64,Float64,Float64,Array{Array{Float64,1},1},DiffEqBase.ODESolution{Float64,2,Array{Embryo{Tissue{Population{Cell{Float64},Float64},Float64},Float64},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Embryo{Tissue{Population{Cell{Float64},Float64},Float64},Float64},Float64,true,Void,##23#24,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Rosenbrock23{0,true,DiffEqBase.LinSolveFactorize{Base.LinAlg.#lufact!},DataType},OrdinaryDiffEq.InterpolationData{##23#24,Array{Embryo{Tissue{Population{Cell{Float64},Float64},Float64},Float64},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Rosenbrock23Cache{Embryo{Tissue{Population{Cell{Float64},Float64},Float64},Float64},Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,2},OrdinaryDiffEq.Rosenbrock23ConstantCache{Float64,Base.#identity,Base.#identity},DiffEqDiffTools.TimeGradientWrapper{##23#24,Embryo{Tissue{Population{Cell{Float64},Float64},Float64},Float64},Void},DiffEqDiffTools.UJacobianWrapper{##23#24,Float64,Void},DiffEqBase.LinSolveFactorize{Base.LinAlg.#lufact!},ForwardDiff.JacobianConfig{ForwardDiff.Tag{DiffEqDiffTools.UJacobianWrapper{##23#24,Float64,Void},Float64},Float64,10,Tuple{Array{ForwardDiff.Dual{ForwardDiff.Tag{DiffEqDiffTools.UJacobianWrapper{##23#24,Float64,Void},Float64},Float64,10},1},Embryo{Tissue{Population{Cell{ForwardDiff.Dual{ForwardDiff.Tag{DiffEqDiffTools.UJacobianWrapper{##23#24,Float64,Void},Float64},Float64,10}},ForwardDiff.Dual{ForwardDiff.Tag{DiffEqDiffTools.UJacobianWrapper{##23#24,Float64,Void},Float64},Float64,10}},ForwardDiff.Dual{ForwardDiff.Tag{DiffEqDiffTools.UJacobianWrapper{##23#24,Float64,Void},Float64},Float64,10}},ForwardDiff.Dual{ForwardDiff.Tag{DiffEqDiffTools.UJacobianWrapper{##23#24,Float64,Void},Float64},Float64,10}}}},ForwardDiff.DerivativeConfig{ForwardDiff.Tag{DiffEqDiffTools.TimeGradientWrapper{##23#24,Embryo{Tissue{Population{Cell{Float64},Float64},Float64},Float64},Void},Float64},Array{ForwardDiff.Dual{ForwardDiff.Tag{DiffEqDiffTools.TimeGradientWrapper{##23#24,Embryo{Tissue{Population{Cell{Float64},Float64},Float64},Float64},Void},Float64},Float64,1},1}}}}},##23#24,Void,OrdinaryDiffEq.Rosenbrock23Cache{Embryo{Tissue{Population{Cell{Float64},Float64},Float64},Float64},Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,2},OrdinaryDiffEq.Rosenbrock23ConstantCache{Float64,Base.#identity,Base.#identity},DiffEqDiffTools.TimeGradientWrapper{##23#24,Embryo{Tissue{Population{Cell{Float64},Float64},Float64},Float64},Void},DiffEqDiffTools.UJacobianWrapper{##23#24,Float64,Void},DiffEqBase.LinSolveFactorize{Base.LinAlg.#lufact!},ForwardDiff.JacobianConfig{ForwardDiff.Tag{DiffEqDiffTools.UJacobianWrapper{##23#24,Float64,Void},Float64},Float64,10,Tuple{Array{ForwardDiff.Dual{ForwardDiff.Tag{DiffEqDiffTools.UJacobianWrapper{##23#24,Float64,Void},Float64},Float64,10},1},Embryo{Tissue{Population{Cell{ForwardDiff.Dual{ForwardDiff.Tag{DiffEqDiffTools.UJacobianWrapper{##23#24,Float64,Void},Float64},Float64,10}},ForwardDiff.Dual{ForwardDiff.Tag{DiffEqDiffTools.UJacobianWrapper{##23#24,Float64,Void},Float64},Float64,10}},ForwardDiff.Dual{ForwardDiff.Tag{DiffEqDiffTools.UJacobianWrapper{##23#24,Float64,Void},Float64},Float64,10}},ForwardDiff.Dual{ForwardDiff.Tag{DiffEqDiffTools.UJacobianWrapper{##23#24,Float64,Void},Float64},Float64,10}}}},ForwardDiff.DerivativeConfig{ForwardDiff.Tag{DiffEqDiffTools.TimeGradientWrapper{##23#24,Embryo{Tissue{Population{Cell{Float64},Float64},Float64},Float64},Void},Float64},Array{ForwardDiff.Dual{ForwardDiff.Tag{DiffEqDiffTools.TimeGradientWrapper{##23#24,Embryo{Tissue{Population{Cell{Float64},Float64},Float64},Float64},Void},Float64},Float64,1},1}}},OrdinaryDiffEq.DEOptions{Float64,Float64,Float64,Float64,DiffEqBase.#ODE_DEFAULT_NORM,DiffEqBase.CallbackSet{Tuple{},Tuple{DiffEqBase.DiscreteCallback{##25#26,##27#28,DiffEqBase.#INITIALIZE_DEFAULT}}},DiffEqBase.#ODE_DEFAULT_ISOUTOFDOMAIN,DiffEqBase.#ODE_DEFAULT_PROG_MESSAGE,DiffEqBase.#ODE_DEFAULT_UNSTABLE_CHECK,DataStructures.BinaryHeap{Float64,DataStructures.LessThan},DataStructures.BinaryHeap{Float64,DataStructures.LessThan},Void,Void,Int64,Array{Float64,1},Array{Float64,1},Array{Float64,1}},Array{Float64,1}}) at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/solve.jl:338
   [9] #solve#1419(::Array{Any,1}, ::Function, ::DiffEqBase.ODEProblem{Embryo{Tissue{Population{Cell{Float64},Float64},Float64},Float64},Float64,true,Void,##23#24,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem}, ::OrdinaryDiffEq.Rosenbrock23{0,true,DiffEqBase.LinSolveFactorize{Base.LinAlg.#lufact!},DataType}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/solve.jl:7
   [10] (::DiffEqBase.#kw##solve)(::Array{Any,1}, ::DiffEqBase.#solve, ::DiffEqBase.ODEProblem{Embryo{Tissue{Population{Cell{Float64},Float64},Float64},Float64},Float64,true,Void,##23#24,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem}, ::OrdinaryDiffEq.Rosenbrock23{0,true,DiffEqBase.LinSolveFactorize{Base.LinAlg.#lufact!},DataType}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at ./<missing>:0 (repeats 2 times)
   [11] include_from_node1(::String) at ./loading.jl:576
   [12] include(::String) at ./sysimg.jl:14
   [13] macro expansion at /home/vagrant/.julia/v0.6/MultiScaleArrays/test/runtests.jl:9 [inlined]
   [14] macro expansion at ./test.jl:860 [inlined]
   [15] macro expansion at ./util.jl:237 [inlined]
   [16] anonymous at ./<missing>:?
   [17] include_from_node1(::String) at ./loading.jl:576
   [18] include(::String) at ./sysimg.jl:14
   [19] process_options(::Base.JLOptions) at ./client.jl:305
   [20] _start() at ./client.jl:371
  while loading /home/vagrant/.julia/v0.6/MultiScaleArrays/test/dynamic_diffeq.jl, in expression starting on line 67
Test Summary:        | Error  Total
Dynamic DiffEq Tests |     1      1
ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 1 errored, 0 broken.
while loading /home/vagrant/.julia/v0.6/MultiScaleArrays/test/runtests.jl, in expression starting on line 9
==========================[ ERROR: MultiScaleArrays ]===========================

failed process: Process(`/home/vagrant/julia/bin/julia -Cx86-64 -J/home/vagrant/julia/lib/julia/sys.so --compile=yes --depwarn=yes --check-bounds=yes --code-coverage=none --color=no --compilecache=yes /home/vagrant/.julia/v0.6/MultiScaleArrays/test/runtests.jl`, ProcessExited(1)) [1]

================================================================================
INFO: Removing Calculus v0.3.1
INFO: Removing CommonSubexpressions v0.1.0
INFO: Removing DataStructures v0.8.1
INFO: Removing DiffBase v0.3.2
INFO: Removing DiffEqDiffTools v0.4.1
INFO: Removing DiffEqNoiseProcess v1.0.2
INFO: Removing DiffEqOperators v1.2.0
INFO: Removing DiffResults v0.0.3
INFO: Removing DiffRules v0.0.4
INFO: Removing Distances v0.6.0
INFO: Removing Expokit v0.0.1
INFO: Removing ForwardDiff v0.7.5
INFO: Removing GenericSVD v0.1.0
INFO: Removing Juno v0.4.0
INFO: Removing LineSearches v5.1.0
INFO: Removing Media v0.3.0
INFO: Removing Missings v0.2.9
INFO: Removing MuladdMacro v0.0.2
INFO: Removing NLSolversBase v6.0.0
INFO: Removing NLsolve v1.1.0
INFO: Removing OrdinaryDiffEq v3.12.0
INFO: Removing Parameters v0.8.1
INFO: Removing RandomNumbers v0.1.1
INFO: Removing ResettableStacks v0.3.1
INFO: Removing Roots v0.5.0
INFO: Removing SpecialFunctions v0.4.0
INFO: Removing StochasticDiffEq v4.4.2
ERROR: MultiScaleArrays had test errors

>>> End of log
