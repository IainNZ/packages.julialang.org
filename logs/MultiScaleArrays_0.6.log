>>> 'Pkg.add("MultiScaleArrays")' log
INFO: Cloning cache of MultiScaleArrays from https://github.com/JuliaDiffEq/MultiScaleArrays.jl.git
INFO: Installing DiffEqBase v1.23.1
INFO: Installing Hiccup v0.1.1
INFO: Installing Juno v0.3.1
INFO: Installing LinearMaps v1.0.1
INFO: Installing MacroTools v0.3.7
INFO: Installing Media v0.3.0
INFO: Installing MultiScaleArrays v0.4.0
INFO: Installing RecipesBase v0.2.2
INFO: Installing RecursiveArrayTools v0.12.3
INFO: Installing SimpleTraits v0.5.1
INFO: Installing StaticArrays v0.6.2
INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of MultiScaleArrays
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("MultiScaleArrays")' log
Julia Version 0.6.0
Commit 9036443 (2017-06-19 13:05 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-132-generic #181-Ubuntu SMP Wed Sep 13 13:25:03 UTC 2017 x86_64 x86_64
Memory: 2.93927001953125 GB (669.15234375 MB free)
Uptime: 21271.0 sec
Load Avg:  0.978515625  0.998046875  1.0400390625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3504 MHz    1403087 s         65 s      66294 s     285400 s          7 s
#2  3504 MHz     223226 s       6086 s      36416 s    1834647 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.6
2 required packages:
 - JSON                          0.14.0
 - MultiScaleArrays              0.4.0
11 additional packages:
 - Compat                        0.32.0
 - DiffEqBase                    1.23.1
 - Hiccup                        0.1.1
 - Juno                          0.3.1
 - LinearMaps                    1.0.1
 - MacroTools                    0.3.7
 - Media                         0.3.0
 - RecipesBase                   0.2.2
 - RecursiveArrayTools           0.12.3
 - SimpleTraits                  0.5.1
 - StaticArrays                  0.6.2
INFO: Computing test dependencies for MultiScaleArrays...
INFO: Cloning cache of DiffEqNoiseProcess from https://github.com/JuliaDiffEq/DiffEqNoiseProcess.jl.git
INFO: Cloning cache of RandomNumbers from https://github.com/sunoru/RandomNumbers.jl.git
INFO: Cloning cache of ResettableStacks from https://github.com/JuliaDiffEq/ResettableStacks.jl.git
INFO: Cloning cache of StochasticDiffEq from https://github.com/JuliaDiffEq/StochasticDiffEq.jl.git
INFO: Installing BinDeps v0.6.0
INFO: Installing Calculus v0.2.2
INFO: Installing CommonSubexpressions v0.0.1
INFO: Installing DataStructures v0.7.2
INFO: Installing DiffBase v0.3.2
INFO: Installing DiffEqDiffTools v0.0.2
INFO: Installing DiffEqNoiseProcess v0.5.0
INFO: Installing DiffResults v0.0.1
INFO: Installing DiffRules v0.0.1
INFO: Installing Distances v0.5.0
INFO: Installing ForwardDiff v0.6.0
INFO: Installing GenericSVD v0.1.0
INFO: Installing LineSearches v2.2.1
INFO: Installing MuladdMacro v0.0.2
INFO: Installing NLSolversBase v2.1.3
INFO: Installing NLsolve v0.11.0
INFO: Installing NaNMath v0.2.6
INFO: Installing OrdinaryDiffEq v2.19.1
INFO: Installing Parameters v0.7.3
INFO: Installing RandomNumbers v0.1.0
INFO: Installing Reexport v0.0.3
INFO: Installing ResettableStacks v0.2.0
INFO: Installing Roots v0.4.1
INFO: Installing SHA v0.5.1
INFO: Installing SpecialFunctions v0.3.3
INFO: Installing StochasticDiffEq v2.11.1
INFO: Installing URIParser v0.2.0
INFO: Building RandomNumbers
WARNING: AES-NI will not be compiled.
INFO: Building SpecialFunctions
INFO: Testing MultiScaleArrays
Test Summary:       | Pass  Total
Bisect Search Tests |   33     33
  0.547496 seconds (156.87 k allocations: 8.601 MiB, 2.20% gc time)
 18.054284 seconds (16.53 M allocations: 705.528 MiB, 1.29% gc time)
  2.085638 seconds (621.40 k allocations: 32.316 MiB, 0.79% gc time)
 18.629926 seconds (15.46 M allocations: 1.224 GiB, 2.18% gc time)
  4.073560 seconds (2.28 M allocations: 524.009 MiB, 1.99% gc time)
  0.072588 seconds (4.01 k allocations: 178.814 KiB)
  0.012173 seconds (1.15 k allocations: 62.485 KiB)
  0.000013 seconds (5 allocations: 176 bytes)
  0.000009 seconds (5 allocations: 176 bytes)
Test Summary:               | Pass  Total
Indexing and Creation Tests |   98     98
 46.062014 seconds (35.73 M allocations: 2.508 GiB, 1.62% gc time)
Test Summary:     | Pass  Total
Get Indices Tests |   19     19
  0.136780 seconds (18.27 k allocations: 1.045 MiB)
Do the ODE Part
Do the SDE Part
SRIW1 = StochasticDiffEq.SRIW1
SRI = StochasticDiffEq.SRI
SRA = StochasticDiffEq.SRA
SRA1 = StochasticDiffEq.SRA1
RKMil = StochasticDiffEq.RKMil
Dynamic DiffEq Tests: Error During Test
  Got an exception of type LoadError outside of a @test
  LoadError: MethodError: Base.Broadcast.promote_containertype(::Type{Array}, ::Type{Embryo{Tissue{Population{Cell{Float64},Float64},Float64},Float64}}) is ambiguous. Candidates:
    promote_containertype(::Type{S}, ::Type{T}) where {T<:MultiScaleArrays.AbstractMultiScaleArray, S<:AbstractArray} in MultiScaleArrays at /home/vagrant/.julia/v0.6/MultiScaleArrays/src/math.jl:11
    promote_containertype(::Type{#s2} where #s2, ::Type{T}) where T<:MultiScaleArrays.AbstractMultiScaleArray in MultiScaleArrays at /home/vagrant/.julia/v0.6/MultiScaleArrays/src/math.jl:13
    promote_containertype(::Type{Array}, ct) in Base.Broadcast at broadcast.jl:37
  Possible fix, define
    promote_containertype(::Type{Array}, ::Type{T<:MultiScaleArrays.AbstractMultiScaleArray})
  Stacktrace:
   [1] broadcast! at ./broadcast.jl:204 [inlined]
   [2] perform_step! at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/integrators/low_order.jl:146 [inlined]
   [3] perform_step! at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/integrators/low_order.jl:142 [inlined]
   [4] solve!(::StochasticDiffEq.SDEIntegrator{StochasticDiffEq.RKMil{:Ito},Embryo{Tissue{Population{Cell{Float64},Float64},Float64},Float64},Float64,Float64,Float64,Float64,DiffEqNoiseProcess.NoiseProcess{Float64,2,Float64,Array{Float64,1},Void,Void,DiffEqNoiseProcess.#INPLACE_WHITE_NOISE_DIST,DiffEqNoiseProcess.#INPLACE_WHITE_NOISE_BRIDGE,true,DataStructures.Stack{Tuple{Float64,Array{Float64,1},Void}},ResettableStacks.ResettableStack{Tuple{Float64,Array{Float64,1},Void}},DiffEqNoiseProcess.RSWM{:RSwM1,Float64},RandomNumbers.Xorshifts.Xoroshiro128Plus},Embryo{Tissue{Population{Cell{Float64},Float64},Float64},Float64},DiffEqBase.RODESolution{Float64,2,Array{Embryo{Tissue{Population{Cell{Float64},Float64},Float64},Float64},1},Void,Void,Array{Float64,1},DiffEqNoiseProcess.NoiseProcess{Float64,2,Float64,Array{Float64,1},Void,Void,DiffEqNoiseProcess.#INPLACE_WHITE_NOISE_DIST,DiffEqNoiseProcess.#INPLACE_WHITE_NOISE_BRIDGE,true,DataStructures.Stack{Tuple{Float64,Array{Float64,1},Void}},ResettableStacks.ResettableStack{Tuple{Float64,Array{Float64,1},Void}},DiffEqNoiseProcess.RSWM{:RSwM1,Float64},RandomNumbers.Xorshifts.Xoroshiro128Plus},DiffEqBase.SDEProblem{Embryo{Tissue{Population{Cell{Float64},Float64},Float64},Float64},Float64,true,Void,##19#20,##27#28,Void,UniformScaling{Int64},Void},StochasticDiffEq.RKMil{:Ito},StochasticDiffEq.LinearInterpolationData{Array{Embryo{Tissue{Population{Cell{Float64},Float64},Float64},Float64},1},Array{Float64,1}}},StochasticDiffEq.RKMilCache{Embryo{Tissue{Population{Cell{Float64},Float64},Float64},Float64},Array{Float64,1}},Void,##19#20,##27#28,StochasticDiffEq.SDEOptions{Float64,Float64,DiffEqBase.#ODE_DEFAULT_NORM,DiffEqBase.CallbackSet{Tuple{},Tuple{DiffEqBase.DiscreteCallback{##21#22,##23#24,DiffEqBase.#INITIALIZE_DEFAULT}}},DiffEqBase.#ODE_DEFAULT_ISOUTOFDOMAIN,DiffEqBase.#ODE_DEFAULT_PROG_MESSAGE,DiffEqBase.#ODE_DEFAULT_UNSTABLE_CHECK,DataStructures.BinaryHeap{Float64,DataStructures.LessThan},Void,Void,Float64,Float64,Float64,Float64},Void}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/solve.jl:402
   [5] #solve#74(::Array{Any,1}, ::Function, ::DiffEqBase.SDEProblem{Embryo{Tissue{Population{Cell{Float64},Float64},Float64},Float64},Float64,true,Void,##19#20,##27#28,Void,UniformScaling{Int64},Void}, ::StochasticDiffEq.RKMil{:Ito}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/solve.jl:7
   [6] (::DiffEqBase.#kw##solve)(::Array{Any,1}, ::DiffEqBase.#solve, ::DiffEqBase.SDEProblem{Embryo{Tissue{Population{Cell{Float64},Float64},Float64},Float64},Float64,true,Void,##19#20,##27#28,Void,UniformScaling{Int64},Void}, ::StochasticDiffEq.RKMil{:Ito}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at ./<missing>:0 (repeats 2 times)
   [7] include_from_node1(::String) at ./loading.jl:569
   [8] include(::String) at ./sysimg.jl:14
   [9] macro expansion at /home/vagrant/.julia/v0.6/MultiScaleArrays/test/runtests.jl:7 [inlined]
   [10] macro expansion at ./test.jl:860 [inlined]
   [11] macro expansion at ./util.jl:237 [inlined]
   [12] anonymous at ./<missing>:?
   [13] include_from_node1(::String) at ./loading.jl:569
   [14] include(::String) at ./sysimg.jl:14
   [15] process_options(::Base.JLOptions) at ./client.jl:305
   [16] _start() at ./client.jl:371
  while loading /home/vagrant/.julia/v0.6/MultiScaleArrays/test/dynamic_diffeq.jl, in expression starting on line 110
Test Summary:        | Error  Broken  Total
Dynamic DiffEq Tests |     1       6      7
ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 1 errored, 6 broken.
while loading /home/vagrant/.julia/v0.6/MultiScaleArrays/test/runtests.jl, in expression starting on line 7
==========================[ ERROR: MultiScaleArrays ]===========================

failed process: Process(`/home/vagrant/julia/bin/julia -Cx86-64 -J/home/vagrant/julia/lib/julia/sys.so --compile=yes --depwarn=yes --check-bounds=yes --code-coverage=none --color=no --compilecache=yes /home/vagrant/.julia/v0.6/MultiScaleArrays/test/runtests.jl`, ProcessExited(1)) [1]

================================================================================
INFO: Removing BinDeps v0.6.0
INFO: Removing Calculus v0.2.2
INFO: Removing CommonSubexpressions v0.0.1
INFO: Removing DataStructures v0.7.2
INFO: Removing DiffBase v0.3.2
INFO: Removing DiffEqDiffTools v0.0.2
INFO: Removing DiffEqNoiseProcess v0.5.0
INFO: Removing DiffResults v0.0.1
INFO: Removing DiffRules v0.0.1
INFO: Removing Distances v0.5.0
INFO: Removing ForwardDiff v0.6.0
INFO: Removing GenericSVD v0.1.0
INFO: Removing LineSearches v2.2.1
INFO: Removing MuladdMacro v0.0.2
INFO: Removing NLSolversBase v2.1.3
INFO: Removing NLsolve v0.11.0
INFO: Removing NaNMath v0.2.6
INFO: Removing OrdinaryDiffEq v2.19.1
INFO: Removing Parameters v0.7.3
INFO: Removing RandomNumbers v0.1.0
INFO: Removing Reexport v0.0.3
INFO: Removing ResettableStacks v0.2.0
INFO: Removing Roots v0.4.1
INFO: Removing SHA v0.5.1
INFO: Removing SpecialFunctions v0.3.3
INFO: Removing StochasticDiffEq v2.11.1
INFO: Removing URIParser v0.2.0
ERROR: MultiScaleArrays had test errors

>>> End of log
