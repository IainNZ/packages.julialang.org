>>> 'Pkg.add("OnlineStatsBase")' log
WARNING: Base.Pkg is deprecated, run `using Pkg` instead
 in module Main
[ Info: Installing BinDeps v0.8.7
[ Info: Installing DataStructures v0.7.4
[ Info: Installing LearnBase v0.1.6
[ Info: Installing Missings v0.2.9
[ Info: Installing OnlineStatsBase v0.7.0
[ Info: Installing SHA v0.5.6
[ Info: Installing SortingAlgorithms v0.2.0
[ Info: Installing SpecialFunctions v0.4.0
[ Info: Installing StatsBase v0.20.1
[ Info: Installing URIParser v0.3.1
[ Info: Building SpecialFunctions
WARNING: importing deprecated binding Base.Associative into BinDeps.
WARNING: Base.Associative is deprecated, use AbstractDict instead.
  likely near /home/vagrant/.julia/v0.7/SpecialFunctions/deps/binaries.jl:44
in @install at /home/vagrant/.julia/v0.7/BinDeps/src/dependencies.jl
┌ Warning: `contains(haystack, needle)` is deprecated, use `occursin(needle, haystack)` instead.
│   caller = read_sonames() at dependencies.jl:402
└ @ BinDeps dependencies.jl:402
┌ Warning: `contains(haystack, needle)` is deprecated, use `occursin(needle, haystack)` instead.
│   caller = read_sonames() at dependencies.jl:405
└ @ BinDeps dependencies.jl:405
[ Info: Package database updated
┌ Info: METADATA is out-of-date — you may not have the latest version of OnlineStatsBase
└ Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("OnlineStatsBase")' log
WARNING: Base.versioninfo is deprecated: it has been moved to the standard library package `InteractiveUtils`.
Add `using InteractiveUtils` to your imports.
 in module Main
WARNING: Base.versioninfo is deprecated: it has been moved to the standard library package `InteractiveUtils`.
Add `using InteractiveUtils` to your imports.
 in module Main
Julia Version 0.7.0-DEV.4854
Commit 18ac6e6aa4 (2018-04-10 22:31 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
      Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-143-generic #192-Ubuntu SMP Tue Feb 27 10:45:36 UTC 2018 x86_64 x86_64
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
              speed         user         nice          sys         idle          irq
       #1  3494 MHz    5857378 s       6821 s     434497 s    1608444 s        111 s
       #2  3494 MHz    1539131 s        172 s     161987 s    7335118 s          2 s
       
  Memory: 2.939197540283203 GB (735.5703125 MB free)
  Uptime: 92252.0 sec
  Load Avg:  1.1298828125  1.04296875  0.9970703125
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant
Packages:
  Package Directory: /home/vagrant/.julia/v0.7
  Package Status:
2 required packages:
 - JSON                          0.17.2
 - OnlineStatsBase               0.7.0
11 additional packages:
 - BinDeps                       0.8.7
 - Compat                        0.63.0
 - DataStructures                0.7.4
 - LearnBase                     0.1.6
 - Missings                      0.2.9
 - Nullables                     0.0.5
 - SHA                           0.5.6
 - SortingAlgorithms             0.2.0
 - SpecialFunctions              0.4.0
 - StatsBase                     0.20.1
 - URIParser                     0.3.1
WARNING: Base.Pkg is deprecated, run `using Pkg` instead
 in module Main
[ Info: Testing OnlineStatsBase
FakeStat: n=0 | value=0
┌ Warning: broadcast will default to iterating over its arguments in the future. Wrap arguments of
│ type `x::FakeStat` with `Ref(x)` to ensure they broadcast as "scalar" elements.
│   caller = ==(::FakeStat, ::FakeStat) at OnlineStatsBase.jl:29
└ @ OnlineStatsBase OnlineStatsBase.jl:29
┌ Warning: broadcast will default to iterating over its arguments in the future. Wrap arguments of
│ type `x::FakeStat` with `Ref(x)` to ensure they broadcast as "scalar" elements.
│   caller = ==(::FakeStat, ::FakeStat) at OnlineStatsBase.jl:29
└ @ OnlineStatsBase OnlineStatsBase.jl:29
Test Summary: | Pass  Total
FakeStat      |    6      6
  > EqualWeight
┌ Warning: broadcast will default to iterating over its arguments in the future. Wrap arguments of
│ type `x::EqualWeight` with `Ref(x)` to ensure they broadcast as "scalar" elements.
│   caller = ==(::EqualWeight, ::EqualWeight) at weight.jl:8
└ @ OnlineStatsBase weight.jl:8
┌ Warning: broadcast will default to iterating over its arguments in the future. Wrap arguments of
│ type `x::EqualWeight` with `Ref(x)` to ensure they broadcast as "scalar" elements.
│   caller = ==(::EqualWeight, ::EqualWeight) at weight.jl:8
└ @ OnlineStatsBase weight.jl:8
  > ExponentialWeight(λ = 0.1)
┌ Warning: broadcast will default to iterating over its arguments in the future. Wrap arguments of
│ type `x::ExponentialWeight` with `Ref(x)` to ensure they broadcast as "scalar" elements.
│   caller = ==(::ExponentialWeight, ::ExponentialWeight) at weight.jl:8
└ @ OnlineStatsBase weight.jl:8
┌ Warning: broadcast will default to iterating over its arguments in the future. Wrap arguments of
│ type `x::ExponentialWeight` with `Ref(x)` to ensure they broadcast as "scalar" elements.
│   caller = ==(::ExponentialWeight, ::ExponentialWeight) at weight.jl:8
└ @ OnlineStatsBase weight.jl:8
  > LearningRate(r = 0.6)
┌ Warning: broadcast will default to iterating over its arguments in the future. Wrap arguments of
│ type `x::LearningRate` with `Ref(x)` to ensure they broadcast as "scalar" elements.
│   caller = ==(::LearningRate, ::LearningRate) at weight.jl:8
└ @ OnlineStatsBase weight.jl:8
┌ Warning: broadcast will default to iterating over its arguments in the future. Wrap arguments of
│ type `x::LearningRate` with `Ref(x)` to ensure they broadcast as "scalar" elements.
│   caller = ==(::LearningRate, ::LearningRate) at weight.jl:8
└ @ OnlineStatsBase weight.jl:8
  > LearningRate2(c = 0.5)
┌ Warning: broadcast will default to iterating over its arguments in the future. Wrap arguments of
│ type `x::LearningRate2` with `Ref(x)` to ensure they broadcast as "scalar" elements.
│   caller = ==(::LearningRate2, ::LearningRate2) at weight.jl:8
└ @ OnlineStatsBase weight.jl:8
┌ Warning: broadcast will default to iterating over its arguments in the future. Wrap arguments of
│ type `x::LearningRate2` with `Ref(x)` to ensure they broadcast as "scalar" elements.
│   caller = ==(::LearningRate2, ::LearningRate2) at weight.jl:8
└ @ OnlineStatsBase weight.jl:8
  > HarmonicWeight(a = 4.0)
┌ Warning: broadcast will default to iterating over its arguments in the future. Wrap arguments of
│ type `x::HarmonicWeight` with `Ref(x)` to ensure they broadcast as "scalar" elements.
│   caller = ==(::HarmonicWeight, ::HarmonicWeight) at weight.jl:8
└ @ OnlineStatsBase weight.jl:8
┌ Warning: broadcast will default to iterating over its arguments in the future. Wrap arguments of
│ type `x::HarmonicWeight` with `Ref(x)` to ensure they broadcast as "scalar" elements.
│   caller = ==(::HarmonicWeight, ::HarmonicWeight) at weight.jl:8
└ @ OnlineStatsBase weight.jl:8
  > max(0.1, EqualWeight)
┌ Warning: broadcast will default to iterating over its arguments in the future. Wrap arguments of
│ type `x::OnlineStatsBase.Bounded{EqualWeight}` with `Ref(x)` to ensure they broadcast as "scalar" elements.
│   caller = ==(::OnlineStatsBase.Bounded{EqualWeight}, ::OnlineStatsBase.Bounded{EqualWeight}) at weight.jl:8
└ @ OnlineStatsBase weight.jl:8
┌ Warning: broadcast will default to iterating over its arguments in the future. Wrap arguments of
│ type `x::OnlineStatsBase.Bounded{EqualWeight}` with `Ref(x)` to ensure they broadcast as "scalar" elements.
│   caller = ==(::OnlineStatsBase.Bounded{EqualWeight}, ::OnlineStatsBase.Bounded{EqualWeight}) at weight.jl:8
└ @ OnlineStatsBase weight.jl:8
  > max(0.1, LearningRate(r = 0.6))
┌ Warning: broadcast will default to iterating over its arguments in the future. Wrap arguments of
│ type `x::OnlineStatsBase.Bounded{LearningRate}` with `Ref(x)` to ensure they broadcast as "scalar" elements.
│   caller = ==(::OnlineStatsBase.Bounded{LearningRate}, ::OnlineStatsBase.Bounded{LearningRate}) at weight.jl:8
└ @ OnlineStatsBase weight.jl:8
┌ Warning: broadcast will default to iterating over its arguments in the future. Wrap arguments of
│ type `x::OnlineStatsBase.Bounded{LearningRate}` with `Ref(x)` to ensure they broadcast as "scalar" elements.
│   caller = ==(::OnlineStatsBase.Bounded{LearningRate}, ::OnlineStatsBase.Bounded{LearningRate}) at weight.jl:8
└ @ OnlineStatsBase weight.jl:8
  > 0.1 * EqualWeight
┌ Warning: broadcast will default to iterating over its arguments in the future. Wrap arguments of
│ type `x::OnlineStatsBase.Scaled{EqualWeight}` with `Ref(x)` to ensure they broadcast as "scalar" elements.
│   caller = ==(::OnlineStatsBase.Scaled{EqualWeight}, ::OnlineStatsBase.Scaled{EqualWeight}) at weight.jl:8
└ @ OnlineStatsBase weight.jl:8
┌ Warning: broadcast will default to iterating over its arguments in the future. Wrap arguments of
│ type `x::OnlineStatsBase.Scaled{EqualWeight}` with `Ref(x)` to ensure they broadcast as "scalar" elements.
│   caller = ==(::OnlineStatsBase.Scaled{EqualWeight}, ::OnlineStatsBase.Scaled{EqualWeight}) at weight.jl:8
└ @ OnlineStatsBase weight.jl:8
  > 0.1 * EqualWeight
  > max(0.1, 0.5 * EqualWeight)
┌ Warning: broadcast will default to iterating over its arguments in the future. Wrap arguments of
│ type `x::OnlineStatsBase.Bounded{OnlineStatsBase.Scaled{EqualWeight}}` with `Ref(x)` to ensure they broadcast as "scalar" elements.
│   caller = ==(::OnlineStatsBase.Bounded{OnlineStatsBase.Scaled{EqualWeight}}, ::OnlineStatsBase.Bounded{OnlineStatsBase.Scaled{EqualWeight}}) at weight.jl:8
└ @ OnlineStatsBase weight.jl:8
┌ Warning: broadcast will default to iterating over its arguments in the future. Wrap arguments of
│ type `x::OnlineStatsBase.Bounded{OnlineStatsBase.Scaled{EqualWeight}}` with `Ref(x)` to ensure they broadcast as "scalar" elements.
│   caller = ==(::OnlineStatsBase.Bounded{OnlineStatsBase.Scaled{EqualWeight}}, ::OnlineStatsBase.Bounded{OnlineStatsBase.Scaled{EqualWeight}}) at weight.jl:8
└ @ OnlineStatsBase weight.jl:8
Test Summary: | Pass  Total
Weight        |  318    318
[ Info: OnlineStatsBase tests passed

>>> End of log
