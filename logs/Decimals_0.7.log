>>> 'Pkg.add("Decimals")' log
[ Info: Cloning cache of Decimals from https://github.com/tinybike/Decimals.jl.git @ Base.Pkg.Cache cache.jl:43
[ Info: Installing Decimals v0.2.1 @ Base.Pkg.Entry entry.jl:543
[ Info: Package database updated @ Base.Pkg.Entry entry.jl:32
┌ Info: METADATA is out-of-date — you may not have the latest version of Decimals
│ Use `Pkg.update()` to get the latest versions of your packages
└ @ Base.Pkg.Entry entry.jl:74

>>> 'Pkg.test("Decimals")' log
Julia Version 0.7.0-DEV.3246
Commit 2138144d3a (2018-01-04 02:34 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
      Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-135-generic #184-Ubuntu SMP Wed Oct 18 11:55:51 UTC 2017 x86_64 x86_64
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
              speed         user         nice          sys         idle          irq
       #1  3499 MHz    2997568 s        113 s     152936 s     827502 s         50 s
       #2  3499 MHz     674691 s         48 s      67892 s    3818939 s          0 s
       
  Memory: 2.93927001953125 GB (768.77734375 MB free)
  Uptime: 46386.0 sec
  Load Avg:  0.8427734375  0.955078125  0.947265625
  WORD_SIZE: 64
  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant
Packages:
  Package Directory: /home/vagrant/.julia/v0.7
  Package Status:
2 required packages:
 - Decimals                      0.2.1
 - JSON                          0.16.3
2 additional packages:
 - Compat                        0.42.0
 - Nullables                     0.0.2
[ Info: Testing Decimals @ Base.Pkg.Entry entry.jl:723
┌ Warning: `info()` is deprecated, use `@info` instead.
│   caller = macro expansion at test_deprecated.jl:5 [inlined]
└ @ Core test_deprecated.jl:5
INFO: The following deprecation warnings are expected
┌ Warning: `inv(x::Array{Decimal})` is deprecated, use `map(inv, x)` instead.
│   caller = macro expansion at test_deprecated.jl:7 [inlined]
└ @ Core test_deprecated.jl:7
┌ Warning: `x::Number + y::Array{Decimal}` is deprecated, use `x .+ y` instead.
│   caller = macro expansion at test_deprecated.jl:9 [inlined]
└ @ Core test_deprecated.jl:9
┌ Warning: `x::Array{Decimal} + y::Number` is deprecated, use `x .+ y` instead.
│   caller = macro expansion at test_deprecated.jl:10 [inlined]
└ @ Core test_deprecated.jl:10
┌ Warning: `x::Number - y::Array{Decimal}` is deprecated, use `x .- y` instead.
│   caller = macro expansion at test_deprecated.jl:11 [inlined]
└ @ Core test_deprecated.jl:11
┌ Warning: `x::Array{Decimal} - y::Number` is deprecated, use `x .- y` instead.
│   caller = macro expansion at test_deprecated.jl:12 [inlined]
└ @ Core test_deprecated.jl:12
┌ Warning: `x::Array{<:Number} + y::Array{Decimal}` is deprecated, use `x .+ y` instead.
│   caller = macro expansion at test_deprecated.jl:13 [inlined]
└ @ Core test_deprecated.jl:13
┌ Warning: `x::Array{Decimal} + y::Array{<:Number}` is deprecated, use `x .+ y` instead.
│   caller = macro expansion at test_deprecated.jl:14 [inlined]
└ @ Core test_deprecated.jl:14
┌ Warning: `x::Array{<:Number} - y::Array{Decimal}` is deprecated, use `x .- y` instead.
│   caller = macro expansion at test_deprecated.jl:15 [inlined]
└ @ Core test_deprecated.jl:15
┌ Warning: `x::Array{Decimal} - y::Array{<:Number}` is deprecated, use `x .- y` instead.
│   caller = macro expansion at test_deprecated.jl:16 [inlined]
└ @ Core test_deprecated.jl:16
┌ Warning: `number(x::Array{Decimal})` is deprecated, use `map(number, x)` instead.
│   caller = macro expansion at test_deprecated.jl:18 [inlined]
└ @ Core test_deprecated.jl:18
┌ Warning: `isint(x::Integer)` is deprecated, use `isinteger(x)` instead.
│   caller = macro expansion at broadcast.jl:419 [inlined]
└ @ Core broadcast.jl:419
┌ Warning: `float(x::Decimal)` is deprecated, use `Float64(x)` instead.
│   caller = (::getfield(, Symbol("##18#24")))(::Decimal) at <missing>:0
└ @ Main <missing>:0
┌ Warning: `isint(x::AbstractFloat)` is deprecated, use `isinteger(x)` instead.
│   caller = (::getfield(, Symbol("##18#24")))(::Decimal) at <missing>:0
└ @ Main <missing>:0
┌ Warning: `isint(x::AbstractString)` is deprecated, use `isinteger(float(x))` instead.
│   caller = #19 at <missing>:0 [inlined]
└ @ Core <missing>:0
┌ Warning: `float(x::AbstractString)` is deprecated, use `parse(Float64, x)` instead.
│   caller = isint(::String) at deprecated.jl:57
└ @ Decimals deprecated.jl:57
┌ Warning: `float(x::Array{Decimal})` is deprecated, use `map(float, x)` instead.
│   caller = macro expansion at test_deprecated.jl:23 [inlined]
└ @ Core test_deprecated.jl:23
┌ Warning: `float(x::Decimal)` is deprecated, use `Float64(x)` instead.
│   caller = next at generator.jl:47 [inlined]
└ @ Core generator.jl:47
┌ Warning: `float(x::Decimal)` is deprecated, use `Float64(x)` instead.
│   caller = next at generator.jl:47 [inlined]
└ @ Core generator.jl:47
┌ Warning: `decimal(x::Array)` is deprecated, use `map(decimal, x)` instead.
│   caller = macro expansion at test_deprecated.jl:23 [inlined]
└ @ Core test_deprecated.jl:23
Test Summary: | Pass  Total
Decimals      |  142    142
[ Info: Decimals tests passed @ Base.Pkg.Entry entry.jl:737

>>> End of log
