>>> 'Pkg.add("DiffEqFinancial")' log
INFO: Installing DataStructures v0.5.3
INFO: Installing DiffEqBase v1.12.0
INFO: Installing DiffEqFinancial v0.2.0
INFO: Installing DiffEqNoiseProcess v0.2.0
INFO: Installing Hiccup v0.1.1
INFO: Installing Juno v0.2.7
INFO: Installing LinearMaps v0.3.0
INFO: Installing MacroTools v0.3.6
INFO: Installing Media v0.2.7
INFO: Installing RecipesBase v0.2.0
INFO: Installing RecursiveArrayTools v0.9.0
INFO: Installing ResettableStacks v0.1.0
INFO: Installing SimpleTraits v0.5.0
INFO: Installing StaticArrays v0.5.1
INFO: Package database updated

>>> 'Pkg.test("DiffEqFinancial")' log
Julia Version 0.6.0-rc3.0
Commit ad290e9 (2017-06-07 11:53 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-119-generic #166-Ubuntu SMP Wed May 3 12:18:55 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1731.05859375 MB free)
Uptime: 44855.0 sec
Load Avg:  0.99609375  0.9716796875  1.04541015625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3495 MHz    2902204 s       6580 s     143511 s     795195 s         39 s
#2  3495 MHz     918331 s         68 s     109626 s    3343801 s          1 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.6
2 required packages:
 - DiffEqFinancial               0.2.0
 - JSON                          0.12.0
14 additional packages:
 - Compat                        0.26.0
 - DataStructures                0.5.3
 - DiffEqBase                    1.12.0
 - DiffEqNoiseProcess            0.2.0
 - Hiccup                        0.1.1
 - Juno                          0.2.7
 - LinearMaps                    0.3.0
 - MacroTools                    0.3.6
 - Media                         0.2.7
 - RecipesBase                   0.2.0
 - RecursiveArrayTools           0.9.0
 - ResettableStacks              0.1.0
 - SimpleTraits                  0.5.0
 - StaticArrays                  0.5.1
INFO: Computing test dependencies for DiffEqFinancial...
INFO: Installing Calculus v0.2.2
INFO: Installing Combinatorics v0.4.0
INFO: Installing CommonSubexpressions v0.0.1
INFO: Installing DiffBase v0.2.0
INFO: Installing Distances v0.4.1
INFO: Installing ForwardDiff v0.5.0
INFO: Installing Iterators v0.3.1
INFO: Installing LineSearches v2.1.1
INFO: Installing NLSolversBase v2.1.3
INFO: Installing NLsolve v0.10.1
INFO: Installing NaNMath v0.2.5
INFO: Installing Parameters v0.7.2
INFO: Installing PolynomialFactors v0.0.6
INFO: Installing Polynomials v0.1.5
INFO: Installing Primes v0.1.3
INFO: Installing RealInterface v0.0.2
INFO: Installing Reexport v0.0.3
INFO: Installing Roots v0.3.1
INFO: Installing SpecialFunctions v0.1.1
INFO: Installing StochasticDiffEq v2.5.1
INFO: Testing DiffEqFinancial
WARNING: Method definition macroexpand(Module, Any) in module Compat at /home/vagrant/.julia/v0.6/Compat/src/Compat.jl:1491 overwritten in module MacroTools at /home/vagrant/.julia/v0.6/MacroTools/src/utils.jl:64.
ERROR: LoadError: Bridging distribution is unknown. Cannot use adapativity
Stacktrace:
 [1] reject_step!(::DiffEqNoiseProcess.NoiseProcess{Float64,2,Float64,Array{Float64,1},Array{Float64,1},Array{Array{Float64,1},1},DiffEqNoiseProcess.##38#41{Array{Float64,2},Array{Float64,1}},DiffEqNoiseProcess.##40#43,true,DataStructures.Stack{Tuple{Float64,Array{Float64,1},Array{Float64,1}}},ResettableStacks.ResettableStack{Tuple{Float64,Array{Float64,1},Array{Float64,1}}},DiffEqNoiseProcess.RSWM{:RSwM3,Float64}}, ::Float64) at /home/vagrant/.julia/v0.6/DiffEqNoiseProcess/src/noise_interfaces/noise_process_interface.jl:296
 [2] loopheader! at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/integrators/integrator_utils.jl:15 [inlined]
 [3] solve!(::StochasticDiffEq.SDEIntegrator{StochasticDiffEq.SRIW1,Array{Float64,1},Float64,Float64,Float64,Float64,DiffEqNoiseProcess.NoiseProcess{Float64,2,Float64,Array{Float64,1},Array{Float64,1},Array{Array{Float64,1},1},DiffEqNoiseProcess.##38#41{Array{Float64,2},Array{Float64,1}},DiffEqNoiseProcess.##40#43,true,DataStructures.Stack{Tuple{Float64,Array{Float64,1},Array{Float64,1}}},ResettableStacks.ResettableStack{Tuple{Float64,Array{Float64,1},Array{Float64,1}}},DiffEqNoiseProcess.RSWM{:RSwM3,Float64}},Array{Float64,1},DiffEqBase.RODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},DiffEqNoiseProcess.NoiseProcess{Float64,2,Float64,Array{Float64,1},Array{Float64,1},Array{Array{Float64,1},1},DiffEqNoiseProcess.##38#41{Array{Float64,2},Array{Float64,1}},DiffEqNoiseProcess.##40#43,true,DataStructures.Stack{Tuple{Float64,Array{Float64,1},Array{Float64,1}}},ResettableStacks.ResettableStack{Tuple{Float64,Array{Float64,1},Array{Float64,1}}},DiffEqNoiseProcess.RSWM{:RSwM3,Float64}},DiffEqFinancial.HestonProblem{Array{Float64,1},Float64,true,DiffEqNoiseProcess.NoiseProcess{Float64,2,Float64,Array{Float64,1},Array{Float64,1},Array{Array{Float64,1},1},DiffEqNoiseProcess.##38#41{Array{Float64,2},Array{Float64,1}},DiffEqNoiseProcess.##40#43,true,DataStructures.Stack{Tuple{Float64,Array{Float64,1},Array{Float64,1}}},ResettableStacks.ResettableStack{Tuple{Float64,Array{Float64,1},Array{Float64,1}}},DiffEqNoiseProcess.RSWM{:RSwM3,Float64}},DiffEqFinancial.##2#4{Float64,Float64,Float64},DiffEqFinancial.##3#5{Float64},DiffEqBase.CallbackSet{Tuple{},Tuple{}},Void,UniformScaling{Int64}},StochasticDiffEq.SRIW1,StochasticDiffEq.LinearInterpolationData{Array{Array{Float64,1},1},Array{Float64,1}}},StochasticDiffEq.SRIW1Cache{Array{Float64,1},Array{Float64,1},Array{Float64,1}},Void,DiffEqFinancial.##2#4{Float64,Float64,Float64},DiffEqFinancial.##3#5{Float64},StochasticDiffEq.SDEOptions{Float64,Float64,Float64,Float64,DiffEqBase.#ODE_DEFAULT_NORM,DiffEqBase.CallbackSet{Tuple{},Tuple{}},DiffEqBase.#ODE_DEFAULT_ISOUTOFDOMAIN,DiffEqBase.#ODE_DEFAULT_PROG_MESSAGE,DiffEqBase.#ODE_DEFAULT_UNSTABLE_CHECK,DataStructures.BinaryHeap{Float64,DataStructures.LessThan},Void,Void},DiffEqNoiseProcess.NoiseProcess{Float64,2,Float64,Array{Float64,1},Array{Float64,1},Array{Array{Float64,1},1},DiffEqNoiseProcess.##38#41{Array{Float64,2},Array{Float64,1}},DiffEqNoiseProcess.##40#43,true,DataStructures.Stack{Tuple{Float64,Array{Float64,1},Array{Float64,1}}},ResettableStacks.ResettableStack{Tuple{Float64,Array{Float64,1},Array{Float64,1}}},DiffEqNoiseProcess.RSWM{:RSwM3,Float64}}}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/solve.jl:351
 [4] #solve#50(::Array{Any,1}, ::Function, ::DiffEqFinancial.HestonProblem{Array{Float64,1},Float64,true,DiffEqNoiseProcess.NoiseProcess{Float64,2,Float64,Array{Float64,1},Array{Float64,1},Array{Array{Float64,1},1},DiffEqNoiseProcess.##38#41{Array{Float64,2},Array{Float64,1}},DiffEqNoiseProcess.##40#43,true,DataStructures.Stack{Tuple{Float64,Array{Float64,1},Array{Float64,1}}},ResettableStacks.ResettableStack{Tuple{Float64,Array{Float64,1},Array{Float64,1}}},DiffEqNoiseProcess.RSWM{:RSwM3,Float64}},DiffEqFinancial.##2#4{Float64,Float64,Float64},DiffEqFinancial.##3#5{Float64},DiffEqBase.CallbackSet{Tuple{},Tuple{}},Void,UniformScaling{Int64}}, ::StochasticDiffEq.SRIW1, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/solve.jl:7
 [5] solve(::DiffEqFinancial.HestonProblem{Array{Float64,1},Float64,true,DiffEqNoiseProcess.NoiseProcess{Float64,2,Float64,Array{Float64,1},Array{Float64,1},Array{Array{Float64,1},1},DiffEqNoiseProcess.##38#41{Array{Float64,2},Array{Float64,1}},DiffEqNoiseProcess.##40#43,true,DataStructures.Stack{Tuple{Float64,Array{Float64,1},Array{Float64,1}}},ResettableStacks.ResettableStack{Tuple{Float64,Array{Float64,1},Array{Float64,1}}},DiffEqNoiseProcess.RSWM{:RSwM3,Float64}},DiffEqFinancial.##2#4{Float64,Float64,Float64},DiffEqFinancial.##3#5{Float64},DiffEqBase.CallbackSet{Tuple{},Tuple{}},Void,UniformScaling{Int64}}, ::StochasticDiffEq.SRIW1) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/solve.jl:6
 [6] include_from_node1(::String) at ./loading.jl:569
 [7] include(::String) at ./sysimg.jl:14
 [8] process_options(::Base.JLOptions) at ./client.jl:305
 [9] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/DiffEqFinancial/test/runtests.jl, in expression starting on line 8
===========================[ ERROR: DiffEqFinancial ]===========================

failed process: Process(`/home/vagrant/julia/bin/julia -Cx86-64 -J/home/vagrant/julia/lib/julia/sys.so --compile=yes --depwarn=yes --check-bounds=yes --code-coverage=none --color=no --compilecache=yes /home/vagrant/.julia/v0.6/DiffEqFinancial/test/runtests.jl`, ProcessExited(1)) [1]

================================================================================
INFO: Removing Calculus v0.2.2
INFO: Removing Combinatorics v0.4.0
INFO: Removing CommonSubexpressions v0.0.1
INFO: Removing DiffBase v0.2.0
INFO: Removing Distances v0.4.1
INFO: Removing ForwardDiff v0.5.0
INFO: Removing Iterators v0.3.1
INFO: Removing LineSearches v2.1.1
INFO: Removing NLSolversBase v2.1.3
INFO: Removing NLsolve v0.10.1
INFO: Removing NaNMath v0.2.5
INFO: Removing Parameters v0.7.2
INFO: Removing PolynomialFactors v0.0.6
INFO: Removing Polynomials v0.1.5
INFO: Removing Primes v0.1.3
INFO: Removing RealInterface v0.0.2
INFO: Removing Reexport v0.0.3
INFO: Removing Roots v0.3.1
INFO: Removing SpecialFunctions v0.1.1
INFO: Removing StochasticDiffEq v2.5.1
ERROR: DiffEqFinancial had test errors

>>> End of log
