>>> 'Pkg.add("TransformUtils")' log
INFO: Installing TransformUtils v0.0.5
INFO: Package database updated

>>> 'Pkg.test("TransformUtils")' log
Julia Version 0.5.1
Commit 6445c82 (2017-03-05 13:25 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-116-generic #163-Ubuntu SMP Fri Mar 31 14:13:22 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (900.0234375 MB free)
Uptime: 44441.0 sec
Load Avg:  0.99560546875  0.998046875  1.03955078125
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3509 MHz    2640741 s       7186 s     302253 s     960081 s        103 s
#2  3509 MHz     793684 s        558 s     121966 s    3419479 s          1 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.7.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.5
2 required packages:
 - JSON                          0.9.0
 - TransformUtils                0.0.5
1 additional packages:
 - Compat                        0.23.0
INFO: Testing TransformUtils
[TEST] constructors SO3, Quaternion, AngleAxis... [SUCCESS]
[TEST] comparison functions for SO3, Quaternion, AngleAxis... [SUCCESS]
[TEST] trivial case quaterion -> SO3 -> Euler -> quaternion... [SUCCESS]
[TEST] convert functions 
WARNING: Need better coverage on convert function tests
[TEST] compare SO3 and quaternion rotations... dAA = TransformUtils.AngleAxis(0.7853981633974483,[1.0,0.0,0.0])
dAA = TransformUtils.so3([0.0 0.06269 -0.184553; -0.06269 0.0 -0.0507212; 0.184553 0.0507212 0.0])
dAA = TransformUtils.so3([0.0 0.087746 -0.0885352; -0.087746 0.0 0.0282049; 0.0885352 -0.0282049 0.0])
dAA = TransformUtils.so3([0.0 -0.0510246 -0.0958537; 0.0510246 0.0 0.0396404; 0.0958537 -0.0396404 0.0])
dAA = TransformUtils.Quaternion(0.9979758347071177,[0.0487571,-0.0305558,0.02708])
dAA = TransformUtils.SO3([0.990512 0.13053 0.0429908; -0.129958 0.991393 -0.0158595; -0.0446909 0.0101221 0.99895])
[SUCCESS]
[TEST] basic SE3 mechanics... [SUCCESS]
[TEST] SE3 ⊕ and ⊖ mechanics... Compare operations on two different SE3 transforms
xi = TransformUtils.SE3(TransformUtils.SO3([0.985591 0.133052 -0.104441; -0.14116 0.987181 -0.0744843; 0.0931914 0.0881539 0.991738]),[0.653085,0.573662,0.619049])
xj = TransformUtils.SE3(TransformUtils.SO3([0.987491 0.0651587 -0.143585; -0.0482616 0.99182 0.118172; 0.150111 -0.109764 0.982557]),[-0.819794,-1.33115,-1.21792])
Dx = TransformUtils.SE3(TransformUtils.SO3([0.994063 -0.0860143 -0.0666316; 0.0969777 0.978099 0.184169; 0.0493311 -0.189538 0.980633]),[-1.35396,-2.2383,-1.52609])
[SUCCESS]
[TEST] previous discovered issues
TransformUtils.convert(Euler,q) = TransformUtils.Euler(0.7853981633974484,0.0,1.5707963267948963,TransformUtils.Quaternion(1.0,[0.0,0.0,0.0]))
INFO: TransformUtils tests passed

>>> End of log
