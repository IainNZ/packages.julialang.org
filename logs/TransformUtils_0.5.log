>>> 'Pkg.add("TransformUtils")' log
INFO: Installing TransformUtils v0.0.6
INFO: Package database updated
INFO: METADATA is out-of-date — you may not have the latest version of TransformUtils
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("TransformUtils")' log
Julia Version 0.5.2
Commit f4c6c9d (2017-05-06 16:34 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-121-generic #170-Ubuntu SMP Wed Jun 14 09:04:33 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (807.5703125 MB free)
Uptime: 49377.0 sec
Load Avg:  0.994140625  1.01416015625  1.0400390625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz    3048988 s       3098 s     314718 s    1000591 s        106 s
#2  3500 MHz     988228 s       3716 s     135026 s    3695250 s          3 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.7.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.5
2 required packages:
 - JSON                          0.13.0
 - TransformUtils                0.0.6
1 additional packages:
 - Compat                        0.28.0
INFO: Testing TransformUtils
[TEST] constructors SO3, Quaternion, AngleAxis... [SUCCESS]
[TEST] comparison functions for SO3, Quaternion, AngleAxis... [SUCCESS]
[TEST] trivial case quaterion -> SO3 -> Euler -> quaternion... [SUCCESS]
[TEST] convert functions 
WARNING: Need better coverage on convert function tests
[TEST] compare SO3 and quaternion rotations... dAA = TransformUtils.AngleAxis(0.7853981633974483,[1.0,0.0,0.0])
dAA = TransformUtils.so3([0.0 0.0240209 0.153428; -0.0240209 0.0 0.0447156; -0.153428 -0.0447156 0.0])
dAA = TransformUtils.so3([0.0 -0.0453296 0.0925475; 0.0453296 0.0 -0.0839698; -0.0925475 0.0839698 0.0])
dAA = TransformUtils.so3([0.0 0.0346254 0.0331167; -0.0346254 0.0 0.10387; -0.0331167 -0.10387 0.0])
dAA = TransformUtils.Quaternion(0.9973064773055199,[-0.0411466,-0.0365287,-0.0485016])
dAA = TransformUtils.SO3([0.998058 -0.0601705 -0.01612; 0.0607177 0.997508 0.0359287; 0.013918 -0.0368377 0.999224])
[SUCCESS]
[TEST] basic SE3 mechanics... [SUCCESS]
[TEST] SE3 ⊕ and ⊖ mechanics... Compare operations on two different SE3 transforms
xi = TransformUtils.SE3(TransformUtils.SO3([0.991472 -0.0251017 -0.127881; 0.00260853 0.984901 -0.173102; 0.130295 0.171292 0.976567]),[-1.15029,0.237329,0.253795])
xj = TransformUtils.SE3(TransformUtils.SO3([0.962146 0.0326919 -0.270567; -0.123026 0.937971 -0.324152; 0.243187 0.345168 0.906487]),[0.0557796,-0.374424,-0.574288])
Dx = TransformUtils.SE3(TransformUtils.SO3([0.985306 0.0798336 -0.150994; -0.103664 0.982112 -0.157192; 0.135744 0.170535 0.975957]),[1.08629,-0.774634,-0.857016])
[SUCCESS]
[TEST] previous discovered issues
TransformUtils.convert(Euler,q) = TransformUtils.Euler(0.7853981633974484,0.0,1.5707963267948963,TransformUtils.Quaternion(1.0,[0.0,0.0,0.0]))
INFO: TransformUtils tests passed

>>> End of log
