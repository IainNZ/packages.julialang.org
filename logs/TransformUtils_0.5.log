>>> 'Pkg.add("TransformUtils")' log
INFO: Installing TransformUtils v0.0.6
INFO: Package database updated
INFO: METADATA is out-of-date — you may not have the latest version of TransformUtils
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("TransformUtils")' log
Julia Version 0.5.2
Commit f4c6c9d (2017-05-06 16:34 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-121-generic #170-Ubuntu SMP Wed Jun 14 09:04:33 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (411.25390625 MB free)
Uptime: 49815.0 sec
Load Avg:  0.99560546875  0.97705078125  0.95458984375
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz    3122035 s         84 s     287437 s     983329 s        116 s
#2  3499 MHz    1047914 s       7210 s     133447 s    3656582 s          2 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.7.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.5
2 required packages:
 - JSON                          0.13.0
 - TransformUtils                0.0.6
1 additional packages:
 - Compat                        0.26.0
INFO: Testing TransformUtils
[TEST] constructors SO3, Quaternion, AngleAxis... [SUCCESS]
[TEST] comparison functions for SO3, Quaternion, AngleAxis... [SUCCESS]
[TEST] trivial case quaterion -> SO3 -> Euler -> quaternion... [SUCCESS]
[TEST] convert functions 
WARNING: Need better coverage on convert function tests
[TEST] compare SO3 and quaternion rotations... dAA = TransformUtils.AngleAxis(0.7853981633974483,[1.0,0.0,0.0])
dAA = TransformUtils.so3([0.0 -0.0505062 -0.249695; 0.0505062 0.0 -0.128069; 0.249695 0.128069 0.0])
dAA = TransformUtils.so3([0.0 -0.106716 0.0462515; 0.106716 0.0 -0.0418259; -0.0462515 0.0418259 0.0])
dAA = TransformUtils.so3([0.0 0.00711706 0.0684872; -0.00711706 0.0 0.0664215; -0.0684872 -0.0664215 0.0])
dAA = TransformUtils.Quaternion(0.996693884586041,[0.0180003,0.0166697,-0.0774559])
dAA = TransformUtils.SO3([0.999988 0.000460968 0.00479886; 4.03425e-5 0.994583 -0.103944; -0.00482078 0.103943 0.994572])
[SUCCESS]
[TEST] basic SE3 mechanics... [SUCCESS]
[TEST] SE3 ⊕ and ⊖ mechanics... Compare operations on two different SE3 transforms
xi = TransformUtils.SE3(TransformUtils.SO3([0.896442 0.126136 0.42483; -0.156068 0.987081 0.0362481; -0.414769 -0.0987968 0.904547]),[-0.505996,1.25001,-0.755112])
xj = TransformUtils.SE3(TransformUtils.SO3([0.996388 0.0607827 -0.0592935; -0.0676378 0.990291 -0.121445; 0.051336 0.125017 0.990826]),[-0.00890773,-0.227221,-0.210839])
Dx = TransformUtils.SE3(TransformUtils.SO3([0.882468 -0.151918 -0.445163; 0.0538451 0.972813 -0.225246; 0.46728 0.174802 0.866657]),[0.450412,-1.44922,0.649952])
[SUCCESS]
[TEST] previous discovered issues
TransformUtils.convert(Euler,q) = TransformUtils.Euler(0.7853981633974484,0.0,1.5707963267948963,TransformUtils.Quaternion(1.0,[0.0,0.0,0.0]))
INFO: TransformUtils tests passed

>>> End of log
