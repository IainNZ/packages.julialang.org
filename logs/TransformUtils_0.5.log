>>> 'Pkg.add("TransformUtils")' log
INFO: Installing TransformUtils v0.0.6
INFO: Package database updated

>>> 'Pkg.test("TransformUtils")' log
Julia Version 0.5.2
Commit f4c6c9d (2017-05-06 16:34 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-119-generic #166-Ubuntu SMP Wed May 3 12:18:55 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (874.36328125 MB free)
Uptime: 47922.0 sec
Load Avg:  0.92431640625  0.9892578125  1.00048828125
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz    3039391 s         70 s     255856 s     923919 s        107 s
#2  3500 MHz    1044906 s       6604 s     118956 s    3484611 s          2 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.7.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.5
2 required packages:
 - JSON                          0.12.0
 - TransformUtils                0.0.6
1 additional packages:
 - Compat                        0.26.0
INFO: Testing TransformUtils
[TEST] constructors SO3, Quaternion, AngleAxis... [SUCCESS]
[TEST] comparison functions for SO3, Quaternion, AngleAxis... [SUCCESS]
[TEST] trivial case quaterion -> SO3 -> Euler -> quaternion... [SUCCESS]
[TEST] convert functions 
WARNING: Need better coverage on convert function tests
[TEST] compare SO3 and quaternion rotations... dAA = TransformUtils.AngleAxis(0.7853981633974483,[1.0,0.0,0.0])
dAA = TransformUtils.so3([0.0 0.174685 -0.0550438; -0.174685 0.0 0.0664147; 0.0550438 -0.0664147 0.0])
dAA = TransformUtils.so3([0.0 0.0803437 0.037812; -0.0803437 0.0 -0.0442995; -0.037812 0.0442995 0.0])
dAA = TransformUtils.so3([0.0 -0.0339138 0.0014076; 0.0339138 0.0 -0.0705514; -0.0014076 0.0705514 0.0])
dAA = TransformUtils.Quaternion(0.9993491663397404,[0.0135179,0.0329618,-0.00565949])
dAA = TransformUtils.SO3([0.999369 -0.0101711 -0.034032; 0.01551 0.986913 0.160504; 0.0319541 -0.160931 0.986448])
[SUCCESS]
[TEST] basic SE3 mechanics... [SUCCESS]
[TEST] SE3 ⊕ and ⊖ mechanics... Compare operations on two different SE3 transforms
xi = TransformUtils.SE3(TransformUtils.SO3([0.983002 -0.179836 -0.0369527; 0.183593 0.963382 0.19542; 0.000456037 -0.198882 0.980023]),[-0.599529,0.701613,-0.00621165])
xj = TransformUtils.SE3(TransformUtils.SO3([0.959883 -0.259518 0.106187; 0.1945 0.88901 0.414525; -0.201978 -0.377242 0.903822]),[1.35242,0.0275293,-0.22918])
Dx = TransformUtils.SE3(TransformUtils.SO3([0.979184 -0.092063 0.180898; 0.0549259 0.978154 0.200495; -0.195404 -0.186386 0.962849]),[1.79491,-0.956086,-0.422373])
[SUCCESS]
[TEST] previous discovered issues
TransformUtils.convert(Euler,q) = TransformUtils.Euler(0.7853981633974484,0.0,1.5707963267948963,TransformUtils.Quaternion(1.0,[0.0,0.0,0.0]))
INFO: TransformUtils tests passed

>>> End of log
