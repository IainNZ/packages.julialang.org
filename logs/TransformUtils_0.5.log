>>> 'Pkg.add("TransformUtils")' log
INFO: Installing TransformUtils v0.0.6
INFO: Package database updated
INFO: METADATA is out-of-date — you may not have the latest version of TransformUtils
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("TransformUtils")' log
Julia Version 0.5.2
Commit f4c6c9d (2017-05-06 16:34 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-121-generic #170-Ubuntu SMP Wed Jun 14 09:04:33 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (402.19921875 MB free)
Uptime: 50753.0 sec
Load Avg:  1.15576171875  1.0478515625  1.04931640625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz    3168640 s       2394 s     299940 s    1012460 s         98 s
#2  3499 MHz    1089254 s       3890 s     132936 s    3710717 s          2 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.7.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.5
2 required packages:
 - JSON                          0.12.0
 - TransformUtils                0.0.6
1 additional packages:
 - Compat                        0.26.0
INFO: Testing TransformUtils
[TEST] constructors SO3, Quaternion, AngleAxis... [SUCCESS]
[TEST] comparison functions for SO3, Quaternion, AngleAxis... [SUCCESS]
[TEST] trivial case quaterion -> SO3 -> Euler -> quaternion... [SUCCESS]
[TEST] convert functions 
WARNING: Need better coverage on convert function tests
[TEST] compare SO3 and quaternion rotations... dAA = TransformUtils.AngleAxis(0.7853981633974483,[1.0,0.0,0.0])
dAA = TransformUtils.so3([0.0 0.0644476 -0.00459997; -0.0644476 0.0 0.0272778; 0.00459997 -0.0272778 0.0])
dAA = TransformUtils.so3([0.0 0.0254178 0.04856; -0.0254178 0.0 -0.0154027; -0.04856 0.0154027 0.0])
dAA = TransformUtils.so3([0.0 0.124415 -0.0500397; -0.124415 0.0 0.0689123; 0.0500397 -0.0689123 0.0])
dAA = TransformUtils.Quaternion(0.9960153938929714,[0.0546503,-0.069979,0.00834355])
dAA = TransformUtils.SO3([0.979997 -0.18226 0.0799213; 0.181806 0.983249 0.0129895; -0.0809499 0.00180046 0.996717])
[SUCCESS]
[TEST] basic SE3 mechanics... [SUCCESS]
[TEST] SE3 ⊕ and ⊖ mechanics... Compare operations on two different SE3 transforms
xi = TransformUtils.SE3(TransformUtils.SO3([0.989758 -0.13542 0.0451791; 0.127183 0.980197 0.151786; -0.0648393 -0.144486 0.98738]),[-0.751222,0.697995,0.115454])
xj = TransformUtils.SE3(TransformUtils.SO3([0.99694 0.0578833 0.0525297; -0.0570515 0.998223 -0.0171994; -0.053432 0.0141498 0.998471]),[-0.667119,0.155787,-0.0436233])
Dx = TransformUtils.SE3(TransformUtils.SO3([0.982938 0.18333 -0.014936; -0.183207 0.968572 -0.168237; -0.0163764 0.168103 0.985633]),[0.0245958,-0.519875,-0.23557])
[SUCCESS]
[TEST] previous discovered issues
TransformUtils.convert(Euler,q) = TransformUtils.Euler(0.7853981633974484,0.0,1.5707963267948963,TransformUtils.Quaternion(1.0,[0.0,0.0,0.0]))
INFO: TransformUtils tests passed

>>> End of log
