>>> 'Pkg.add("TransformUtils")' log
INFO: Installing TransformUtils v0.0.6
INFO: Package database updated
INFO: METADATA is out-of-date — you may not have the latest version of TransformUtils
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("TransformUtils")' log
Julia Version 0.5.2
Commit f4c6c9d (2017-05-06 16:34 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-121-generic #170-Ubuntu SMP Wed Jun 14 09:04:33 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (824.5234375 MB free)
Uptime: 48743.0 sec
Load Avg:  1.03076171875  1.02685546875  1.04541015625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz    3129686 s       5226 s     252538 s     918601 s         84 s
#2  3500 MHz    1055023 s       1689 s     121641 s    3581596 s          3 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.7.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.5
2 required packages:
 - JSON                          0.13.0
 - TransformUtils                0.0.6
1 additional packages:
 - Compat                        0.27.0
INFO: Testing TransformUtils
[TEST] constructors SO3, Quaternion, AngleAxis... [SUCCESS]
[TEST] comparison functions for SO3, Quaternion, AngleAxis... [SUCCESS]
[TEST] trivial case quaterion -> SO3 -> Euler -> quaternion... [SUCCESS]
[TEST] convert functions 
WARNING: Need better coverage on convert function tests
[TEST] compare SO3 and quaternion rotations... dAA = TransformUtils.AngleAxis(0.7853981633974483,[1.0,0.0,0.0])
dAA = TransformUtils.so3([0.0 -0.0463741 -0.0243262; 0.0463741 0.0 -0.119407; 0.0243262 0.119407 0.0])
dAA = TransformUtils.so3([0.0 0.0384858 0.019063; -0.0384858 0.0 -0.0496298; -0.019063 0.0496298 0.0])
dAA = TransformUtils.so3([0.0 0.146436 0.0266494; -0.146436 0.0 0.126914; -0.0266494 -0.126914 0.0])
dAA = TransformUtils.Quaternion(0.9922883520983397,[-0.0399756,0.0120206,-0.11671])
dAA = TransformUtils.SO3([0.9994 0.0260423 -0.0228408; -0.0261644 0.999645 -0.00506091; 0.0227009 0.00565549 0.999726])
[SUCCESS]
[TEST] basic SE3 mechanics... [SUCCESS]
[TEST] SE3 ⊕ and ⊖ mechanics... Compare operations on two different SE3 transforms
xi = TransformUtils.SE3(TransformUtils.SO3([0.986565 0.138421 -0.0867667; -0.153382 0.967661 -0.200264; 0.0562401 0.210882 0.975892]),[0.51913,-0.833634,1.18789])
xj = TransformUtils.SE3(TransformUtils.SO3([0.842187 0.427106 -0.329092; -0.330114 0.891028 0.311599; 0.426316 -0.153787 0.891406]),[2.03305,0.682112,1.12249])
Dx = TransformUtils.SE3(TransformUtils.SO3([0.905482 0.276051 -0.322331; -0.11296 0.888903 0.443951; 0.409074 -0.365579 0.836068]),[1.25742,1.6625,-0.498727])
[SUCCESS]
[TEST] previous discovered issues
TransformUtils.convert(Euler,q) = TransformUtils.Euler(0.7853981633974484,0.0,1.5707963267948963,TransformUtils.Quaternion(1.0,[0.0,0.0,0.0]))
INFO: TransformUtils tests passed

>>> End of log
