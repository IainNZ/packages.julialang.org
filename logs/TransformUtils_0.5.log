>>> 'Pkg.add("TransformUtils")' log
INFO: Installing TransformUtils v0.0.6
INFO: Package database updated
INFO: METADATA is out-of-date — you may not have the latest version of TransformUtils
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("TransformUtils")' log
Julia Version 0.5.2
Commit f4c6c9d (2017-05-06 16:34 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-121-generic #170-Ubuntu SMP Wed Jun 14 09:04:33 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (862.26171875 MB free)
Uptime: 48791.0 sec
Load Avg:  1.01416015625  1.03076171875  1.0078125
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz    3120821 s       6695 s     264921 s     874696 s        100 s
#2  3499 MHz     986578 s         40 s     126573 s    3634351 s          1 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.7.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.5
2 required packages:
 - JSON                          0.12.0
 - TransformUtils                0.0.6
1 additional packages:
 - Compat                        0.26.0
INFO: Testing TransformUtils
[TEST] constructors SO3, Quaternion, AngleAxis... [SUCCESS]
[TEST] comparison functions for SO3, Quaternion, AngleAxis... [SUCCESS]
[TEST] trivial case quaterion -> SO3 -> Euler -> quaternion... [SUCCESS]
[TEST] convert functions 
WARNING: Need better coverage on convert function tests
[TEST] compare SO3 and quaternion rotations... dAA = TransformUtils.AngleAxis(0.7853981633974483,[1.0,0.0,0.0])
dAA = TransformUtils.so3([0.0 0.0782451 -0.103777; -0.0782451 0.0 0.0423653; 0.103777 -0.0423653 0.0])
dAA = TransformUtils.so3([0.0 -0.126281 0.114867; 0.126281 0.0 0.0799154; -0.114867 -0.0799154 0.0])
dAA = TransformUtils.so3([0.0 0.0998906 -0.172622; -0.0998906 0.0 0.251633; 0.172622 -0.251633 0.0])
dAA = TransformUtils.Quaternion(0.9976174725860979,[-0.0439556,0.0397205,0.0353492])
dAA = TransformUtils.SO3([0.99355 -0.073906 -0.0860039; 0.0681623 0.99536 -0.0679095; 0.0906238 0.0616093 0.993978])
[SUCCESS]
[TEST] basic SE3 mechanics... [SUCCESS]
[TEST] SE3 ⊕ and ⊖ mechanics... Compare operations on two different SE3 transforms
xi = TransformUtils.SE3(TransformUtils.SO3([0.991271 -0.0152096 0.130964; 0.00590179 0.997447 0.0711686; -0.131712 -0.0697744 0.988829]),[0.545893,-0.685638,1.77355])
xj = TransformUtils.SE3(TransformUtils.SO3([0.952638 0.0205024 -0.303414; 0.0106874 0.994851 0.10078; 0.303918 -0.0992496 0.947514]),[-1.64193,-0.62232,-0.529584])
Dx = TransformUtils.SE3(TransformUtils.SO3([0.904356 0.0392672 -0.424969; -0.0250349 0.998925 0.0390253; 0.426045 -0.0246537 0.904366]),[-1.865,0.257132,-2.55943])
[SUCCESS]
[TEST] previous discovered issues
TransformUtils.convert(Euler,q) = TransformUtils.Euler(0.7853981633974484,0.0,1.5707963267948963,TransformUtils.Quaternion(1.0,[0.0,0.0,0.0]))
INFO: TransformUtils tests passed

>>> End of log
