>>> 'Pkg.add("TransformUtils")' log
INFO: Installing TransformUtils v0.0.6
INFO: Package database updated

>>> 'Pkg.test("TransformUtils")' log
Julia Version 0.5.2
Commit f4c6c9d (2017-05-06 16:34 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-119-generic #166-Ubuntu SMP Wed May 3 12:18:55 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (547.96875 MB free)
Uptime: 46706.0 sec
Load Avg:  1.1025390625  1.015625  0.97509765625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3503 MHz    2860266 s       5476 s     297059 s     950290 s        117 s
#2  3503 MHz     844536 s       2260 s     124168 s    3584562 s          1 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.7.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.5
2 required packages:
 - JSON                          0.12.0
 - TransformUtils                0.0.6
1 additional packages:
 - Compat                        0.25.2
INFO: Testing TransformUtils
[TEST] constructors SO3, Quaternion, AngleAxis... [SUCCESS]
[TEST] comparison functions for SO3, Quaternion, AngleAxis... [SUCCESS]
[TEST] trivial case quaterion -> SO3 -> Euler -> quaternion... [SUCCESS]
[TEST] convert functions 
WARNING: Need better coverage on convert function tests
[TEST] compare SO3 and quaternion rotations... dAA = TransformUtils.AngleAxis(0.7853981633974483,[1.0,0.0,0.0])
dAA = TransformUtils.so3([0.0 0.0969007 0.0751267; -0.0969007 0.0 0.160815; -0.0751267 -0.160815 0.0])
dAA = TransformUtils.so3([0.0 0.0449685 -0.134506; -0.0449685 0.0 -0.13751; 0.134506 0.13751 0.0])
dAA = TransformUtils.so3([0.0 0.0114626 0.205751; -0.0114626 0.0 -0.186404; -0.205751 0.186404 0.0])
dAA = TransformUtils.Quaternion(0.9975566780296474,[-0.011412,0.038901,-0.056896])
dAA = TransformUtils.SO3([0.985222 -0.033843 -0.167904; 0.0588398 0.987501 0.146216; 0.160857 -0.153934 0.9749])
[SUCCESS]
[TEST] basic SE3 mechanics... [SUCCESS]
[TEST] SE3 ⊕ and ⊖ mechanics... Compare operations on two different SE3 transforms
xi = TransformUtils.SE3(TransformUtils.SO3([0.951881 0.27031 -0.144415; -0.297496 0.928183 -0.223545; 0.0736171 0.255752 0.963936]),[1.58021,-0.400673,-1.20568])
xj = TransformUtils.SE3(TransformUtils.SO3([0.95295 0.245253 0.178149; -0.151224 0.893987 -0.421804; -0.262712 0.375018 0.889013]),[0.535078,-1.22872,0.692889])
Dx = TransformUtils.SE3(TransformUtils.SO3([0.932743 -0.00489768 0.360508; 0.0500392 0.991989 -0.11599; -0.357052 0.126228 0.925516]),[-0.608732,-0.565524,2.16614])
[SUCCESS]
[TEST] previous discovered issues
TransformUtils.convert(Euler,q) = TransformUtils.Euler(0.7853981633974484,0.0,1.5707963267948963,TransformUtils.Quaternion(1.0,[0.0,0.0,0.0]))
INFO: TransformUtils tests passed

>>> End of log
