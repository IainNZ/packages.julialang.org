>>> 'Pkg.add("TransformUtils")' log
INFO: Installing TransformUtils v0.0.6
INFO: Package database updated
INFO: METADATA is out-of-date — you may not have the latest version of TransformUtils
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("TransformUtils")' log
Julia Version 0.5.2
Commit f4c6c9d (2017-05-06 16:34 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-119-generic #166-Ubuntu SMP Wed May 3 12:18:55 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (923.08984375 MB free)
Uptime: 46029.0 sec
Load Avg:  0.96435546875  1.0  1.029296875
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz    2708901 s       1518 s     265714 s    1099901 s        109 s
#2  3500 MHz     977457 s       4149 s     113863 s    3383082 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.7.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.5
2 required packages:
 - JSON                          0.12.0
 - TransformUtils                0.0.6
1 additional packages:
 - Compat                        0.25.2
INFO: Testing TransformUtils
[TEST] constructors SO3, Quaternion, AngleAxis... [SUCCESS]
[TEST] comparison functions for SO3, Quaternion, AngleAxis... [SUCCESS]
[TEST] trivial case quaterion -> SO3 -> Euler -> quaternion... [SUCCESS]
[TEST] convert functions 
WARNING: Need better coverage on convert function tests
[TEST] compare SO3 and quaternion rotations... dAA = TransformUtils.AngleAxis(0.7853981633974483,[1.0,0.0,0.0])
dAA = TransformUtils.so3([0.0 -0.013943 -0.144902; 0.013943 0.0 0.0299884; 0.144902 -0.0299884 0.0])
dAA = TransformUtils.so3([0.0 0.0252723 -0.0409809; -0.0252723 0.0 0.0485533; 0.0409809 -0.0485533 0.0])
dAA = TransformUtils.so3([0.0 -0.0950218 0.0824626; 0.0950218 0.0 0.0639542; -0.0824626 -0.0639542 0.0])
dAA = TransformUtils.Quaternion(0.9904961837038317,[-0.0973938,0.0717428,0.0654578])
dAA = TransformUtils.SO3([0.997634 -0.0430654 -0.0535903; 0.0306375 0.976305 -0.214219; 0.0615459 0.21207 0.975315])
[SUCCESS]
[TEST] basic SE3 mechanics... [SUCCESS]
[TEST] SE3 ⊕ and ⊖ mechanics... Compare operations on two different SE3 transforms
xi = TransformUtils.SE3(TransformUtils.SO3([0.85307 -0.503559 -0.136748; 0.52081 0.837807 0.163819; 0.0320759 -0.210969 0.976966]),[-0.250725,1.06325,0.504923])
xj = TransformUtils.SE3(TransformUtils.SO3([0.937208 0.00651256 -0.34871; -0.074453 0.980515 -0.181791; 0.340731 0.196338 0.919431]),[0.067326,-1.05335,-0.070491])
Dx = TransformUtils.SE3(TransformUtils.SO3([0.771657 0.522515 -0.362661; -0.606201 0.776781 -0.170681; 0.192524 0.351552 0.916158]),[-0.849483,-1.81206,-0.952392])
[SUCCESS]
[TEST] previous discovered issues
TransformUtils.convert(Euler,q) = TransformUtils.Euler(0.7853981633974484,0.0,1.5707963267948963,TransformUtils.Quaternion(1.0,[0.0,0.0,0.0]))
INFO: TransformUtils tests passed

>>> End of log
