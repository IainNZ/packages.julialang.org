>>> 'Pkg.add("TransformUtils")' log
INFO: Installing TransformUtils v0.0.6
INFO: Package database updated
INFO: METADATA is out-of-date — you may not have the latest version of TransformUtils
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("TransformUtils")' log
Julia Version 0.5.2
Commit f4c6c9d (2017-05-06 16:34 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-119-generic #166-Ubuntu SMP Wed May 3 12:18:55 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (580.88671875 MB free)
Uptime: 44960.0 sec
Load Avg:  0.94970703125  1.0009765625  1.033203125
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz    2806863 s       4245 s     221286 s     886711 s         79 s
#2  3499 MHz     730061 s       2692 s     103807 s    3558890 s          2 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.7.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.5
2 required packages:
 - JSON                          0.12.0
 - TransformUtils                0.0.6
1 additional packages:
 - Compat                        0.25.2
INFO: Testing TransformUtils
[TEST] constructors SO3, Quaternion, AngleAxis... [SUCCESS]
[TEST] comparison functions for SO3, Quaternion, AngleAxis... [SUCCESS]
[TEST] trivial case quaterion -> SO3 -> Euler -> quaternion... [SUCCESS]
[TEST] convert functions 
WARNING: Need better coverage on convert function tests
[TEST] compare SO3 and quaternion rotations... dAA = TransformUtils.AngleAxis(0.7853981633974483,[1.0,0.0,0.0])
dAA = TransformUtils.so3([0.0 0.0223769 0.192394; -0.0223769 0.0 -0.0401447; -0.192394 0.0401447 0.0])
dAA = TransformUtils.so3([0.0 -0.153697 -0.0409212; 0.153697 0.0 -0.0285733; 0.0409212 0.0285733 0.0])
dAA = TransformUtils.so3([0.0 -0.147253 -0.0979403; 0.147253 0.0 -0.0811435; 0.0979403 0.0811435 0.0])
dAA = TransformUtils.Quaternion(0.9937912112684036,[-0.0820468,-0.0656198,-0.036625])
dAA = TransformUtils.SO3([0.997627 0.0345635 -0.059541; -0.0414355 0.992107 -0.118347; 0.0549806 0.120533 0.991186])
[SUCCESS]
[TEST] basic SE3 mechanics... [SUCCESS]
[TEST] SE3 ⊕ and ⊖ mechanics... Compare operations on two different SE3 transforms
xi = TransformUtils.SE3(TransformUtils.SO3([0.996915 -0.0563178 -0.0546783; 0.0603437 0.995355 0.0750082; 0.0502001 -0.0780763 0.995683]),[-1.30114,-0.202061,-0.0457049])
xj = TransformUtils.SE3(TransformUtils.SO3([0.90901 0.208604 0.360813; -0.142615 0.96915 -0.201019; -0.391615 0.131271 0.910717]),[1.25563,-0.674119,0.561907])
Dx = TransformUtils.SE3(TransformUtils.SO3([0.87794 0.273032 0.393287; -0.16257 0.942652 -0.291511; -0.450325 0.191993 0.871978]),[2.5509,-0.661297,0.42978])
[SUCCESS]
[TEST] previous discovered issues
TransformUtils.convert(Euler,q) = TransformUtils.Euler(0.7853981633974484,0.0,1.5707963267948963,TransformUtils.Quaternion(1.0,[0.0,0.0,0.0]))
INFO: TransformUtils tests passed

>>> End of log
