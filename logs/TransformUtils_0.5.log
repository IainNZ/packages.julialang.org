>>> 'Pkg.add("TransformUtils")' log
INFO: Installing TransformUtils v0.0.6
INFO: Package database updated
INFO: METADATA is out-of-date — you may not have the latest version of TransformUtils
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("TransformUtils")' log
Julia Version 0.5.2
Commit f4c6c9d (2017-05-06 16:34 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-128-generic #177-Ubuntu SMP Tue Aug 8 11:40:23 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (416.8828125 MB free)
Uptime: 52639.0 sec
Load Avg:  1.041015625  0.9638671875  0.99169921875
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz    3216102 s       6354 s     281315 s    1134064 s         96 s
#2  3500 MHz     996167 s         94 s     121040 s    4021766 s          2 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.7.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.5
2 required packages:
 - JSON                          0.13.0
 - TransformUtils                0.0.6
1 additional packages:
 - Compat                        0.30.0
INFO: Testing TransformUtils
[TEST] constructors SO3, Quaternion, AngleAxis... [SUCCESS]
[TEST] comparison functions for SO3, Quaternion, AngleAxis... [SUCCESS]
[TEST] trivial case quaterion -> SO3 -> Euler -> quaternion... [SUCCESS]
[TEST] convert functions 
WARNING: Need better coverage on convert function tests
[TEST] compare SO3 and quaternion rotations... dAA = TransformUtils.AngleAxis(0.7853981633974483,[1.0,0.0,0.0])
dAA = TransformUtils.so3([0.0 0.0389403 -0.028927; -0.0389403 0.0 -0.0788006; 0.028927 0.0788006 0.0])
dAA = TransformUtils.so3([0.0 -0.119998 -0.00381084; 0.119998 0.0 -0.106824; 0.00381084 0.106824 0.0])
dAA = TransformUtils.so3([0.0 0.0530518 0.0793571; -0.0530518 0.0 0.159734; -0.0793571 -0.159734 0.0])
dAA = TransformUtils.Quaternion(0.9894066381850037,[-0.0919563,0.0790622,0.0797979])
dAA = TransformUtils.SO3([0.986866 -0.0689048 0.146111; 0.0947185 0.979492 -0.177828; -0.130862 0.189332 0.973154])
[SUCCESS]
[TEST] basic SE3 mechanics... [SUCCESS]
[TEST] SE3 ⊕ and ⊖ mechanics... Compare operations on two different SE3 transforms
xi = TransformUtils.SE3(TransformUtils.SO3([0.945386 -0.155263 0.286598; 0.129717 0.985849 0.106186; -0.299029 -0.06321 0.952148]),[-0.161968,-0.358408,0.830917])
xj = TransformUtils.SE3(TransformUtils.SO3([0.577887 -0.558045 0.59551; 0.343053 0.828191 0.443187; -0.740514 -0.05182 0.67004]),[0.843188,-0.259128,-0.313766])
Dx = TransformUtils.SE3(TransformUtils.SO3([0.812261 -0.404642 0.420114; 0.295282 0.90639 0.302101; -0.50303 -0.121333 0.855709]),[1.30543,0.0141668,-0.79129])
[SUCCESS]
[TEST] previous discovered issues
TransformUtils.convert(Euler,q) = TransformUtils.Euler(0.7853981633974484,0.0,1.5707963267948963,TransformUtils.Quaternion(1.0,[0.0,0.0,0.0]))
INFO: TransformUtils tests passed

>>> End of log
