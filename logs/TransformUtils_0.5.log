>>> 'Pkg.add("TransformUtils")' log
INFO: Installing TransformUtils v0.0.6
INFO: Package database updated
INFO: METADATA is out-of-date — you may not have the latest version of TransformUtils
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("TransformUtils")' log
Julia Version 0.5.2
Commit f4c6c9d (2017-05-06 16:34 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-129-generic #178-Ubuntu SMP Fri Aug 11 12:48:20 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (838.23828125 MB free)
Uptime: 51455.0 sec
Load Avg:  0.98046875  0.96728515625  0.970703125
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz    3108349 s       1235 s     252984 s    1197687 s         88 s
#2  3500 MHz    1029279 s       4963 s     116885 s    3863180 s          2 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.7.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.5
2 required packages:
 - JSON                          0.13.0
 - TransformUtils                0.0.6
1 additional packages:
 - Compat                        0.31.0
INFO: Testing TransformUtils
[TEST] constructors SO3, Quaternion, AngleAxis... [SUCCESS]
[TEST] comparison functions for SO3, Quaternion, AngleAxis... [SUCCESS]
[TEST] trivial case quaterion -> SO3 -> Euler -> quaternion... [SUCCESS]
[TEST] convert functions 
WARNING: Need better coverage on convert function tests
[TEST] compare SO3 and quaternion rotations... dAA = TransformUtils.AngleAxis(0.7853981633974483,[1.0,0.0,0.0])
dAA = TransformUtils.so3([0.0 -0.0199091 0.0145018; 0.0199091 0.0 0.029173; -0.0145018 -0.029173 0.0])
dAA = TransformUtils.so3([0.0 0.00815829 0.0206636; -0.00815829 0.0 -0.313444; -0.0206636 0.313444 0.0])
dAA = TransformUtils.so3([0.0 -0.174759 0.00167026; 0.174759 0.0 0.217926; -0.00167026 -0.217926 0.0])
dAA = TransformUtils.Quaternion(0.9976193209420527,[0.0584806,-0.0105599,0.0349886])
dAA = TransformUtils.SO3([0.960302 0.241186 0.140175; -0.249567 0.967293 0.0453909; -0.124642 -0.078572 0.989086])
[SUCCESS]
[TEST] basic SE3 mechanics... [SUCCESS]
[TEST] SE3 ⊕ and ⊖ mechanics... Compare operations on two different SE3 transforms
xi = TransformUtils.SE3(TransformUtils.SO3([0.902464 -0.396239 -0.168976; 0.424046 0.886196 0.186661; 0.0757836 -0.240108 0.967783]),[0.497582,0.922199,0.758321])
xj = TransformUtils.SE3(TransformUtils.SO3([0.827882 -0.267592 0.492956; 0.409101 0.889325 -0.2043; -0.383729 0.370805 0.845728]),[0.525061,-0.741674,2.44274])
Dx = TransformUtils.SE3(TransformUtils.SO3([0.891531 0.163723 0.422335; 0.126641 0.805113 -0.579444; -0.434896 0.570077 0.697049]),[-0.553108,-1.88985,1.31493])
[SUCCESS]
[TEST] previous discovered issues
TransformUtils.convert(Euler,q) = TransformUtils.Euler(0.7853981633974484,0.0,1.5707963267948963,TransformUtils.Quaternion(1.0,[0.0,0.0,0.0]))
INFO: TransformUtils tests passed

>>> End of log
