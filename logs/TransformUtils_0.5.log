>>> 'Pkg.add("TransformUtils")' log
INFO: Installing TransformUtils v0.0.6
INFO: Package database updated

>>> 'Pkg.test("TransformUtils")' log
Julia Version 0.5.2
Commit f4c6c9d (2017-05-06 16:34 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-128-generic #177-Ubuntu SMP Tue Aug 8 11:40:23 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (828.74609375 MB free)
Uptime: 51492.0 sec
Load Avg:  0.99169921875  1.001953125  1.00390625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz    3224669 s       5321 s     311363 s     991165 s        109 s
#2  3500 MHz    1067699 s       1594 s     133663 s    3794194 s          3 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.7.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.5
2 required packages:
 - JSON                          0.13.0
 - TransformUtils                0.0.6
1 additional packages:
 - Compat                        0.30.0
INFO: Testing TransformUtils
[TEST] constructors SO3, Quaternion, AngleAxis... [SUCCESS]
[TEST] comparison functions for SO3, Quaternion, AngleAxis... [SUCCESS]
[TEST] trivial case quaterion -> SO3 -> Euler -> quaternion... [SUCCESS]
[TEST] convert functions 
WARNING: Need better coverage on convert function tests
[TEST] compare SO3 and quaternion rotations... dAA = TransformUtils.AngleAxis(0.7853981633974483,[1.0,0.0,0.0])
dAA = TransformUtils.so3([0.0 -0.068225 -0.0359755; 0.068225 0.0 -0.0543673; 0.0359755 0.0543673 0.0])
dAA = TransformUtils.so3([0.0 0.119083 0.0829423; -0.119083 0.0 -0.0725804; -0.0829423 0.0725804 0.0])
dAA = TransformUtils.so3([0.0 -0.157223 -0.0473552; 0.157223 0.0 0.125947; 0.0473552 -0.125947 0.0])
dAA = TransformUtils.Quaternion(0.9947286405584993,[-0.0635964,0.0140818,-0.0791968])
dAA = TransformUtils.SO3([0.992506 -0.0128982 -0.121517; 0.000260837 0.994635 -0.103443; 0.1222 0.102636 0.987184])
[SUCCESS]
[TEST] basic SE3 mechanics... [SUCCESS]
[TEST] SE3 ⊕ and ⊖ mechanics... Compare operations on two different SE3 transforms
xi = TransformUtils.SE3(TransformUtils.SO3([0.868676 0.153493 0.471001; -0.130755 0.988112 -0.080859; -0.477813 0.00865443 0.878419]),[-0.914831,0.695939,0.127983])
xj = TransformUtils.SE3(TransformUtils.SO3([0.944046 0.0315332 0.328304; -0.109989 0.968536 0.22325; -0.310934 -0.246868 0.917811]),[0.293623,1.18689,0.93964])
Dx = TransformUtils.SE3(TransformUtils.SO3([0.98302 0.0187075 -0.182543; 0.0335324 0.959725 0.278931; 0.180409 -0.280316 0.942802]),[0.59774,0.677624,1.24246])
[SUCCESS]
[TEST] previous discovered issues
TransformUtils.convert(Euler,q) = TransformUtils.Euler(0.7853981633974484,0.0,1.5707963267948963,TransformUtils.Quaternion(1.0,[0.0,0.0,0.0]))
INFO: TransformUtils tests passed

>>> End of log
