>>> 'Pkg.add("TransformUtils")' log
INFO: Installing TransformUtils v0.0.6
INFO: Package database updated
INFO: METADATA is out-of-date — you may not have the latest version of TransformUtils
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("TransformUtils")' log
Julia Version 0.5.2
Commit f4c6c9d (2017-05-06 16:34 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-119-generic #166-Ubuntu SMP Wed May 3 12:18:55 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (882.1015625 MB free)
Uptime: 43722.0 sec
Load Avg:  0.94775390625  0.9990234375  1.03466796875
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz    2656623 s         71 s     207606 s     966074 s         89 s
#2  3499 MHz     747193 s       6582 s     102250 s    3424641 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.7.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.5
2 required packages:
 - JSON                          0.12.0
 - TransformUtils                0.0.6
1 additional packages:
 - Compat                        0.25.2
INFO: Testing TransformUtils
[TEST] constructors SO3, Quaternion, AngleAxis... [SUCCESS]
[TEST] comparison functions for SO3, Quaternion, AngleAxis... [SUCCESS]
[TEST] trivial case quaterion -> SO3 -> Euler -> quaternion... [SUCCESS]
[TEST] convert functions 
WARNING: Need better coverage on convert function tests
[TEST] compare SO3 and quaternion rotations... dAA = TransformUtils.AngleAxis(0.7853981633974483,[1.0,0.0,0.0])
dAA = TransformUtils.so3([0.0 -0.148348 -0.178222; 0.148348 0.0 -0.102406; 0.178222 0.102406 0.0])
dAA = TransformUtils.so3([0.0 0.0273015 0.102469; -0.0273015 0.0 -0.0565324; -0.102469 0.0565324 0.0])
dAA = TransformUtils.so3([0.0 -0.0669846 0.175249; 0.0669846 0.0 0.0969745; -0.175249 -0.0969745 0.0])
dAA = TransformUtils.Quaternion(0.9993093100329522,[-0.0337971,-0.00280793,-0.0151912])
dAA = TransformUtils.SO3([0.996473 -0.0587767 -0.059886; 0.0653839 0.991198 0.115119; 0.0525925 -0.118628 0.991545])
[SUCCESS]
[TEST] basic SE3 mechanics... [SUCCESS]
[TEST] SE3 ⊕ and ⊖ mechanics... Compare operations on two different SE3 transforms
xi = TransformUtils.SE3(TransformUtils.SO3([0.937894 0.331874 -0.101069; -0.335836 0.941599 -0.0246014; 0.0870023 0.0570163 0.994575]),[0.301506,-1.3523,0.379212])
xj = TransformUtils.SE3(TransformUtils.SO3([0.973245 -0.144295 -0.17881; 0.113446 0.978515 -0.172157; 0.19981 0.147265 0.968705]),[0.158558,0.648215,0.817945])
Dx = TransformUtils.SE3(TransformUtils.SO3([0.892085 -0.451141 -0.025609; 0.441208 0.881878 -0.166213; 0.0975696 0.136977 0.985757]),[-0.767744,1.86126,0.401585])
[SUCCESS]
[TEST] previous discovered issues
TransformUtils.convert(Euler,q) = TransformUtils.Euler(0.7853981633974484,0.0,1.5707963267948963,TransformUtils.Quaternion(1.0,[0.0,0.0,0.0]))
INFO: TransformUtils tests passed

>>> End of log
