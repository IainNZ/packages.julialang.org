>>> 'Pkg.add("TransformUtils")' log
INFO: Installing TransformUtils v0.0.6
INFO: Package database updated
INFO: METADATA is out-of-date — you may not have the latest version of TransformUtils
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("TransformUtils")' log
Julia Version 0.5.2
Commit f4c6c9d (2017-05-06 16:34 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-128-generic #177-Ubuntu SMP Tue Aug 8 11:40:23 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (412.25 MB free)
Uptime: 51536.0 sec
Load Avg:  0.98876953125  1.01318359375  1.03466796875
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz    3243755 s        108 s     294310 s    1027277 s         91 s
#2  3499 MHz    1098480 s       6031 s     134570 s    3782918 s          2 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.7.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.5
2 required packages:
 - JSON                          0.13.0
 - TransformUtils                0.0.6
1 additional packages:
 - Compat                        0.30.0
INFO: Testing TransformUtils
[TEST] constructors SO3, Quaternion, AngleAxis... [SUCCESS]
[TEST] comparison functions for SO3, Quaternion, AngleAxis... [SUCCESS]
[TEST] trivial case quaterion -> SO3 -> Euler -> quaternion... [SUCCESS]
[TEST] convert functions 
WARNING: Need better coverage on convert function tests
[TEST] compare SO3 and quaternion rotations... dAA = TransformUtils.AngleAxis(0.7853981633974483,[1.0,0.0,0.0])
dAA = TransformUtils.so3([0.0 -0.0534347 -0.017139; 0.0534347 0.0 0.0191733; 0.017139 -0.0191733 0.0])
dAA = TransformUtils.so3([0.0 -0.000959754 -0.0341072; 0.000959754 0.0 0.017291; 0.0341072 -0.017291 0.0])
dAA = TransformUtils.so3([0.0 -0.131284 -0.00158328; 0.131284 0.0 -0.0676872; 0.00158328 0.0676872 0.0])
dAA = TransformUtils.Quaternion(0.997121515518705,[-0.0372828,0.065713,-0.00636187])
dAA = TransformUtils.SO3([0.991925 0.108626 -0.0654644; -0.116984 0.983014 -0.141416; 0.048991 0.147932 0.987783])
[SUCCESS]
[TEST] basic SE3 mechanics... [SUCCESS]
[TEST] SE3 ⊕ and ⊖ mechanics... Compare operations on two different SE3 transforms
xi = TransformUtils.SE3(TransformUtils.SO3([0.957698 -0.142535 -0.249996; 0.100265 0.979558 -0.174394; 0.269743 0.141951 0.952412]),[0.493604,0.0316499,-0.735974])
xj = TransformUtils.SE3(TransformUtils.SO3([0.862935 -0.385127 0.327138; 0.447493 0.883147 -0.140717; -0.234717 0.267822 0.934441]),[0.237263,0.102422,-1.3237])
Dx = TransformUtils.SE3(TransformUtils.SO3([0.807986 -0.208044 0.55125; 0.282029 0.958005 -0.0518241; -0.517318 0.197341 0.832729]),[-0.396936,0.0224352,-0.508011])
[SUCCESS]
[TEST] previous discovered issues
TransformUtils.convert(Euler,q) = TransformUtils.Euler(0.7853981633974484,0.0,1.5707963267948963,TransformUtils.Quaternion(1.0,[0.0,0.0,0.0]))
INFO: TransformUtils tests passed

>>> End of log
