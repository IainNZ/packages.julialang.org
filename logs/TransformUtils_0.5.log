>>> 'Pkg.add("TransformUtils")' log
INFO: Installing TransformUtils v0.0.6
INFO: Package database updated

>>> 'Pkg.test("TransformUtils")' log
Julia Version 0.5.2
Commit f4c6c9d (2017-05-06 16:34 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-128-generic #177-Ubuntu SMP Tue Aug 8 11:40:23 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (848.6484375 MB free)
Uptime: 49974.0 sec
Load Avg:  0.99267578125  1.0302734375  1.00830078125
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz    3221822 s         68 s     282202 s     884911 s        104 s
#2  3499 MHz    1041840 s       7880 s     124158 s    3708140 s          2 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.7.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.5
2 required packages:
 - JSON                          0.13.0
 - TransformUtils                0.0.6
1 additional packages:
 - Compat                        0.30.0
INFO: Testing TransformUtils
[TEST] constructors SO3, Quaternion, AngleAxis... [SUCCESS]
[TEST] comparison functions for SO3, Quaternion, AngleAxis... [SUCCESS]
[TEST] trivial case quaterion -> SO3 -> Euler -> quaternion... [SUCCESS]
[TEST] convert functions 
WARNING: Need better coverage on convert function tests
[TEST] compare SO3 and quaternion rotations... dAA = TransformUtils.AngleAxis(0.7853981633974483,[1.0,0.0,0.0])
dAA = TransformUtils.so3([0.0 0.0933832 0.156496; -0.0933832 0.0 0.0150408; -0.156496 -0.0150408 0.0])
dAA = TransformUtils.so3([0.0 0.0116357 -0.000913521; -0.0116357 0.0 -0.0434737; 0.000913521 0.0434737 0.0])
dAA = TransformUtils.so3([0.0 -0.053273 -0.0933074; 0.053273 0.0 0.14165; 0.0933074 -0.14165 0.0])
dAA = TransformUtils.Quaternion(0.9929711871142338,[0.107667,-0.0276374,-0.0406472])
dAA = TransformUtils.SO3([0.993904 -0.0805738 0.0752564; 0.0800584 0.996742 0.00984565; -0.0758045 -0.00376072 0.997116])
[SUCCESS]
[TEST] basic SE3 mechanics... [SUCCESS]
[TEST] SE3 ⊕ and ⊖ mechanics... Compare operations on two different SE3 transforms
xi = TransformUtils.SE3(TransformUtils.SO3([0.961007 0.24119 0.135249; -0.230946 0.969057 -0.0871412; -0.152081 0.0525082 0.986972]),[-1.64337,-0.128613,1.4578])
xj = TransformUtils.SE3(TransformUtils.SO3([0.886771 -0.0774016 -0.455683; -0.177292 0.853509 -0.48999; 0.426855 0.515298 0.743144]),[0.0297731,0.773696,0.745557])
Dx = TransformUtils.SE3(TransformUtils.SO3([0.828221 -0.349865 -0.437772; 0.0644871 0.835487 -0.545713; 0.556678 0.423741 0.71453]),[1.50784,1.24053,-0.555301])
[SUCCESS]
[TEST] previous discovered issues
TransformUtils.convert(Euler,q) = TransformUtils.Euler(0.7853981633974484,0.0,1.5707963267948963,TransformUtils.Quaternion(1.0,[0.0,0.0,0.0]))
INFO: TransformUtils tests passed

>>> End of log
