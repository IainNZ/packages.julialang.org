>>> 'Pkg.add("TransformUtils")' log
INFO: Installing TransformUtils v0.0.6
INFO: Package database updated
INFO: METADATA is out-of-date — you may not have the latest version of TransformUtils
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("TransformUtils")' log
Julia Version 0.5.2
Commit f4c6c9d (2017-05-06 16:34 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-121-generic #170-Ubuntu SMP Wed Jun 14 09:04:33 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (934.359375 MB free)
Uptime: 50535.0 sec
Load Avg:  1.009765625  1.03076171875  1.0185546875
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz    3162166 s       2531 s     315850 s     988929 s         85 s
#2  3499 MHz    1058725 s       4454 s     138022 s    3711613 s          2 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.7.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.5
2 required packages:
 - JSON                          0.12.0
 - TransformUtils                0.0.6
1 additional packages:
 - Compat                        0.26.0
INFO: Testing TransformUtils
[TEST] constructors SO3, Quaternion, AngleAxis... [SUCCESS]
[TEST] comparison functions for SO3, Quaternion, AngleAxis... [SUCCESS]
[TEST] trivial case quaterion -> SO3 -> Euler -> quaternion... [SUCCESS]
[TEST] convert functions 
WARNING: Need better coverage on convert function tests
[TEST] compare SO3 and quaternion rotations... dAA = TransformUtils.AngleAxis(0.7853981633974483,[1.0,0.0,0.0])
dAA = TransformUtils.so3([0.0 -0.124063 -0.0934079; 0.124063 0.0 0.103873; 0.0934079 -0.103873 0.0])
dAA = TransformUtils.so3([0.0 0.0902295 0.0973472; -0.0902295 0.0 -0.194447; -0.0973472 0.194447 0.0])
dAA = TransformUtils.so3([0.0 0.0632388 0.0380268; -0.0632388 0.0 0.0816715; -0.0380268 -0.0816715 0.0])
dAA = TransformUtils.Quaternion(0.9977566791414373,[-0.0452789,0.0262703,-0.0417289])
dAA = TransformUtils.SO3([0.987526 0.0380834 -0.152783; -0.0451693 0.998046 -0.0431781; 0.15084 0.0495406 0.987316])
[SUCCESS]
[TEST] basic SE3 mechanics... [SUCCESS]
[TEST] SE3 ⊕ and ⊖ mechanics... Compare operations on two different SE3 transforms
xi = TransformUtils.SE3(TransformUtils.SO3([0.982407 0.186433 0.0109348; -0.183054 0.949696 0.254105; 0.0369887 -0.251636 0.967115]),[-0.740951,0.0364717,-1.32372])
xj = TransformUtils.SE3(TransformUtils.SO3([0.949951 0.281832 -0.134772; -0.270533 0.957888 0.0962419; 0.156221 -0.0549649 0.986192]),[0.0849182,-0.142041,1.86949])
Dx = TransformUtils.SE3(TransformUtils.SO3([0.988539 0.0994962 -0.11354; -0.119133 0.976076 -0.181887; 0.0927271 0.193328 0.976742]),[0.962129,-0.81909,3.05187])
[SUCCESS]
[TEST] previous discovered issues
TransformUtils.convert(Euler,q) = TransformUtils.Euler(0.7853981633974484,0.0,1.5707963267948963,TransformUtils.Quaternion(1.0,[0.0,0.0,0.0]))
INFO: TransformUtils tests passed

>>> End of log
