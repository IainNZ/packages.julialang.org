>>> 'Pkg.add("TransformUtils")' log
INFO: Installing TransformUtils v0.0.6
INFO: Package database updated
INFO: METADATA is out-of-date — you may not have the latest version of TransformUtils
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("TransformUtils")' log
Julia Version 0.5.2
Commit f4c6c9d (2017-05-06 16:34 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-121-generic #170-Ubuntu SMP Wed Jun 14 09:04:33 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (837.7109375 MB free)
Uptime: 50996.0 sec
Load Avg:  1.208984375  1.05126953125  0.9814453125
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz    3203204 s       1300 s     284608 s    1027684 s         98 s
#2  3500 MHz    1120994 s       5425 s     134989 s    3704632 s          2 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.7.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.5
2 required packages:
 - JSON                          0.13.0
 - TransformUtils                0.0.6
1 additional packages:
 - Compat                        0.28.0
INFO: Testing TransformUtils
[TEST] constructors SO3, Quaternion, AngleAxis... [SUCCESS]
[TEST] comparison functions for SO3, Quaternion, AngleAxis... [SUCCESS]
[TEST] trivial case quaterion -> SO3 -> Euler -> quaternion... [SUCCESS]
[TEST] convert functions 
WARNING: Need better coverage on convert function tests
[TEST] compare SO3 and quaternion rotations... dAA = TransformUtils.AngleAxis(0.7853981633974483,[1.0,0.0,0.0])
dAA = TransformUtils.so3([0.0 0.137917 0.0838085; -0.137917 0.0 -0.122763; -0.0838085 0.122763 0.0])
dAA = TransformUtils.so3([0.0 -0.0589945 -0.0702584; 0.0589945 0.0 -0.0232346; 0.0702584 0.0232346 0.0])
dAA = TransformUtils.so3([0.0 0.131982 0.131841; -0.131982 0.0 -0.185063; -0.131841 0.185063 0.0])
dAA = TransformUtils.Quaternion(0.9979176044974647,[-0.0372756,-0.00872607,0.0519118])
dAA = TransformUtils.SO3([0.988146 0.140914 0.0609078; -0.148393 0.978408 0.143868; -0.0393196 -0.151201 0.987721])
[SUCCESS]
[TEST] basic SE3 mechanics... [SUCCESS]
[TEST] SE3 ⊕ and ⊖ mechanics... Compare operations on two different SE3 transforms
xi = TransformUtils.SE3(TransformUtils.SO3([0.943729 0.247005 0.219918; -0.279504 0.951148 0.131132; -0.176785 -0.185221 0.966665]),[0.0736325,-1.48196,-0.897785])
xj = TransformUtils.SE3(TransformUtils.SO3([0.761236 -0.121645 -0.636963; 0.401128 0.860111 0.315128; 0.509525 -0.495391 0.703543]),[2.18017,0.785721,1.16386])
Dx = TransformUtils.SE3(TransformUtils.SO3([0.516207 -0.267627 -0.813576; 0.475187 0.879802 0.0120896; 0.71255 -0.392841 0.581333]),[0.989709,2.29537,2.75356])
[SUCCESS]
[TEST] previous discovered issues
TransformUtils.convert(Euler,q) = TransformUtils.Euler(0.7853981633974484,0.0,1.5707963267948963,TransformUtils.Quaternion(1.0,[0.0,0.0,0.0]))
INFO: TransformUtils tests passed

>>> End of log
