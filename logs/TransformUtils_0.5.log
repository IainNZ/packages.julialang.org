>>> 'Pkg.add("TransformUtils")' log
INFO: Installing TransformUtils v0.0.6
INFO: Package database updated
INFO: METADATA is out-of-date — you may not have the latest version of TransformUtils
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("TransformUtils")' log
Julia Version 0.5.2
Commit f4c6c9d (2017-05-06 16:34 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-121-generic #170-Ubuntu SMP Wed Jun 14 09:04:33 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (861.0546875 MB free)
Uptime: 47284.0 sec
Load Avg:  0.88720703125  0.953125  0.96484375
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz    3011085 s       2174 s     259917 s     903577 s        148 s
#2  3499 MHz    1053513 s       4706 s     131798 s    3413518 s          1 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.7.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.5
2 required packages:
 - JSON                          0.12.0
 - TransformUtils                0.0.6
1 additional packages:
 - Compat                        0.26.0
INFO: Testing TransformUtils
[TEST] constructors SO3, Quaternion, AngleAxis... [SUCCESS]
[TEST] comparison functions for SO3, Quaternion, AngleAxis... [SUCCESS]
[TEST] trivial case quaterion -> SO3 -> Euler -> quaternion... [SUCCESS]
[TEST] convert functions 
WARNING: Need better coverage on convert function tests
[TEST] compare SO3 and quaternion rotations... dAA = TransformUtils.AngleAxis(0.7853981633974483,[1.0,0.0,0.0])
dAA = TransformUtils.so3([0.0 0.0989489 0.0466537; -0.0989489 0.0 -0.0513421; -0.0466537 0.0513421 0.0])
dAA = TransformUtils.so3([0.0 0.096947 -0.0922281; -0.096947 0.0 -0.0701325; 0.0922281 0.0701325 0.0])
dAA = TransformUtils.so3([0.0 -0.161639 -0.0716727; 0.161639 0.0 0.0263233; 0.0716727 -0.0263233 0.0])
dAA = TransformUtils.Quaternion(0.9991635574101876,[-0.00934697,0.0384815,-0.0101978])
dAA = TransformUtils.SO3([0.970236 -0.23437 -0.0609296; 0.235258 0.971902 0.00773666; 0.0574043 -0.0218406 0.998112])
[SUCCESS]
[TEST] basic SE3 mechanics... [SUCCESS]
[TEST] SE3 ⊕ and ⊖ mechanics... Compare operations on two different SE3 transforms
xi = TransformUtils.SE3(TransformUtils.SO3([0.959989 -0.122512 0.251817; 0.181096 0.957486 -0.224556; -0.213601 0.261174 0.941362]),[-0.93835,-0.840517,-0.589488])
xj = TransformUtils.SE3(TransformUtils.SO3([0.949114 0.187421 -0.253093; -0.272585 0.891385 -0.36212; 0.157734 0.412683 0.897114]),[2.33349,-1.4931,0.723206])
Dx = TransformUtils.SE3(TransformUtils.SO3([0.828083 0.253199 -0.500169; -0.336078 0.938309 -0.0814147; 0.448699 0.235514 0.862092]),[2.74236,-0.682832,2.20617])
[SUCCESS]
[TEST] previous discovered issues
TransformUtils.convert(Euler,q) = TransformUtils.Euler(0.7853981633974484,0.0,1.5707963267948963,TransformUtils.Quaternion(1.0,[0.0,0.0,0.0]))
INFO: TransformUtils tests passed

>>> End of log
