>>> 'Pkg.add("TransformUtils")' log
INFO: Installing TransformUtils v0.0.6
INFO: Package database updated
INFO: METADATA is out-of-date — you may not have the latest version of TransformUtils
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("TransformUtils")' log
Julia Version 0.5.2
Commit f4c6c9d (2017-05-06 16:34 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-128-generic #177-Ubuntu SMP Tue Aug 8 11:40:23 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (765.41015625 MB free)
Uptime: 51061.0 sec
Load Avg:  1.00341796875  0.98876953125  0.9609375
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz    3284586 s       6535 s     304948 s     900318 s         88 s
#2  3500 MHz    1015983 s         92 s     132754 s    3836987 s          3 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.7.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.5
2 required packages:
 - JSON                          0.13.0
 - TransformUtils                0.0.6
1 additional packages:
 - Compat                        0.30.0
INFO: Testing TransformUtils
[TEST] constructors SO3, Quaternion, AngleAxis... [SUCCESS]
[TEST] comparison functions for SO3, Quaternion, AngleAxis... [SUCCESS]
[TEST] trivial case quaterion -> SO3 -> Euler -> quaternion... [SUCCESS]
[TEST] convert functions 
WARNING: Need better coverage on convert function tests
[TEST] compare SO3 and quaternion rotations... dAA = TransformUtils.AngleAxis(0.7853981633974483,[1.0,0.0,0.0])
dAA = TransformUtils.so3([0.0 0.121599 0.0213667; -0.121599 0.0 0.0214665; -0.0213667 -0.0214665 0.0])
dAA = TransformUtils.so3([0.0 0.0389094 -0.0465207; -0.0389094 0.0 -0.0369183; 0.0465207 0.0369183 0.0])
dAA = TransformUtils.so3([0.0 0.0234058 -0.0674708; -0.0234058 0.0 0.032701; 0.0674708 -0.032701 0.0])
dAA = TransformUtils.Quaternion(0.9976577608035782,[0.00621134,0.0156798,-0.0662914])
dAA = TransformUtils.SO3([0.988721 0.128349 -0.0771814; -0.115936 0.982154 0.148096; 0.094812 -0.137477 0.985957])
[SUCCESS]
[TEST] basic SE3 mechanics... [SUCCESS]
[TEST] SE3 ⊕ and ⊖ mechanics... Compare operations on two different SE3 transforms
xi = TransformUtils.SE3(TransformUtils.SO3([0.966167 -0.154496 -0.206524; 0.17047 0.983421 0.0618233; 0.193549 -0.0949379 0.976486]),[-0.970194,0.582077,-0.351245])
xj = TransformUtils.SE3(TransformUtils.SO3([0.947409 0.0708052 -0.312094; -0.160206 0.949156 -0.270994; 0.277038 0.306741 0.910582]),[1.32079,1.61858,0.323076])
Dx = TransformUtils.SE3(TransformUtils.SO3([0.941666 0.289582 -0.171489; -0.330222 0.89336 -0.304732; 0.064956 0.343585 0.936872]),[2.52068,0.601358,0.249402])
[SUCCESS]
[TEST] previous discovered issues
TransformUtils.convert(Euler,q) = TransformUtils.Euler(0.7853981633974484,0.0,1.5707963267948963,TransformUtils.Quaternion(1.0,[0.0,0.0,0.0]))
INFO: TransformUtils tests passed

>>> End of log
