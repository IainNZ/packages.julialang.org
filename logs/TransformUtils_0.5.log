>>> 'Pkg.add("TransformUtils")' log
INFO: Installing TransformUtils v0.0.6
INFO: Package database updated
INFO: METADATA is out-of-date — you may not have the latest version of TransformUtils
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("TransformUtils")' log
Julia Version 0.5.2
Commit f4c6c9d (2017-05-06 16:34 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-121-generic #170-Ubuntu SMP Wed Jun 14 09:04:33 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (865.9375 MB free)
Uptime: 49441.0 sec
Load Avg:  0.99072265625  1.0146484375  0.970703125
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3510 MHz    3115324 s       6561 s     274798 s     966971 s         95 s
#2  3510 MHz    1070635 s         94 s     131488 s    3611813 s          1 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.7.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.5
2 required packages:
 - JSON                          0.12.0
 - TransformUtils                0.0.6
1 additional packages:
 - Compat                        0.26.0
INFO: Testing TransformUtils
[TEST] constructors SO3, Quaternion, AngleAxis... [SUCCESS]
[TEST] comparison functions for SO3, Quaternion, AngleAxis... [SUCCESS]
[TEST] trivial case quaterion -> SO3 -> Euler -> quaternion... [SUCCESS]
[TEST] convert functions 
WARNING: Need better coverage on convert function tests
[TEST] compare SO3 and quaternion rotations... dAA = TransformUtils.AngleAxis(0.7853981633974483,[1.0,0.0,0.0])
dAA = TransformUtils.so3([0.0 0.0326189 0.0818673; -0.0326189 0.0 -0.00914455; -0.0818673 0.00914455 0.0])
dAA = TransformUtils.so3([0.0 -0.122693 -0.0624538; 0.122693 0.0 0.0509417; 0.0624538 -0.0509417 0.0])
dAA = TransformUtils.so3([0.0 0.0640739 -0.0334558; -0.0640739 0.0 0.0510786; 0.0334558 -0.0510786 0.0])
dAA = TransformUtils.Quaternion(0.9996830562969051,[0.0211512,0.0031653,-0.0132814])
dAA = TransformUtils.SO3([0.9868 -0.108313 0.120388; 0.0985849 0.991574 0.0840349; -0.128476 -0.0710572 0.989164])
[SUCCESS]
[TEST] basic SE3 mechanics... [SUCCESS]
[TEST] SE3 ⊕ and ⊖ mechanics... Compare operations on two different SE3 transforms
xi = TransformUtils.SE3(TransformUtils.SO3([0.989714 -0.080522 0.118249; 0.0664059 0.990693 0.118815; -0.126715 -0.109741 0.98585]),[-1.04672,0.636037,0.25333])
xj = TransformUtils.SE3(TransformUtils.SO3([0.945833 0.108165 0.306105; -0.18213 0.957305 0.224491; -0.268753 -0.268082 0.925151]),[-0.430822,1.04651,0.616038])
Dx = TransformUtils.SE3(TransformUtils.SO3([0.958065 0.204593 0.200633; -0.227102 0.969105 0.0962265; -0.174747 -0.137755 0.974929]),[0.590864,0.317254,0.479175])
[SUCCESS]
[TEST] previous discovered issues
TransformUtils.convert(Euler,q) = TransformUtils.Euler(0.7853981633974484,0.0,1.5707963267948963,TransformUtils.Quaternion(1.0,[0.0,0.0,0.0]))
INFO: TransformUtils tests passed

>>> End of log
