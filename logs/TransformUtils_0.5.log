>>> 'Pkg.add("TransformUtils")' log
INFO: Installing TransformUtils v0.0.6
INFO: Package database updated
INFO: METADATA is out-of-date — you may not have the latest version of TransformUtils
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("TransformUtils")' log
Julia Version 0.5.2
Commit f4c6c9d (2017-05-06 16:34 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-117-generic #164-Ubuntu SMP Fri Apr 7 11:05:26 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (891.31640625 MB free)
Uptime: 45537.0 sec
Load Avg:  1.1181640625  1.04931640625  1.0400390625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3504 MHz    2701340 s        537 s     229326 s    1055672 s        100 s
#2  3504 MHz     887555 s       6269 s     108500 s    3445202 s          3 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.7.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.5
2 required packages:
 - JSON                          0.12.0
 - TransformUtils                0.0.6
1 additional packages:
 - Compat                        0.25.1
INFO: Testing TransformUtils
[TEST] constructors SO3, Quaternion, AngleAxis... [SUCCESS]
[TEST] comparison functions for SO3, Quaternion, AngleAxis... [SUCCESS]
[TEST] trivial case quaterion -> SO3 -> Euler -> quaternion... [SUCCESS]
[TEST] convert functions 
WARNING: Need better coverage on convert function tests
[TEST] compare SO3 and quaternion rotations... dAA = TransformUtils.AngleAxis(0.7853981633974483,[1.0,0.0,0.0])
dAA = TransformUtils.so3([0.0 0.0207924 0.189216; -0.0207924 0.0 -0.0754893; -0.189216 0.0754893 0.0])
dAA = TransformUtils.so3([0.0 -0.0434581 -0.0399127; 0.0434581 0.0 0.132802; 0.0399127 -0.132802 0.0])
dAA = TransformUtils.so3([0.0 0.0903786 -0.0544584; -0.0903786 0.0 -0.0317653; 0.0544584 0.0317653 0.0])
dAA = TransformUtils.Quaternion(0.9923302794031676,[-0.0237631,-0.115191,-0.0380399])
dAA = TransformUtils.SO3([0.999587 -0.0281194 0.00585026; 0.0286108 0.99273 -0.116911; -0.00252026 0.11703 0.993125])
[SUCCESS]
[TEST] basic SE3 mechanics... [SUCCESS]
[TEST] SE3 ⊕ and ⊖ mechanics... Compare operations on two different SE3 transforms
xi = TransformUtils.SE3(TransformUtils.SO3([0.987103 -0.155765 -0.0369518; 0.159906 0.948352 0.27397; -0.00763165 -0.276345 0.961028]),[0.462342,-0.107922,-0.985837])
xj = TransformUtils.SE3(TransformUtils.SO3([0.960323 0.0209365 -0.278102; -0.0197444 0.99978 0.00708719; 0.278189 -0.00131505 0.960525]),[-0.565313,0.763229,-1.32933])
Dx = TransformUtils.SE3(TransformUtils.SO3([0.942657 0.180548 -0.280712; -0.245186 0.945245 -0.215397; 0.226453 0.271872 0.93531]),[-0.872477,1.08115,-0.0534679])
[SUCCESS]
[TEST] previous discovered issues
TransformUtils.convert(Euler,q) = TransformUtils.Euler(0.7853981633974484,0.0,1.5707963267948963,TransformUtils.Quaternion(1.0,[0.0,0.0,0.0]))
INFO: TransformUtils tests passed

>>> End of log
