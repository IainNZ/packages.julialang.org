>>> 'Pkg.add("TransformUtils")' log
INFO: Installing TransformUtils v0.0.6
INFO: Package database updated
INFO: METADATA is out-of-date — you may not have the latest version of TransformUtils
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("TransformUtils")' log
Julia Version 0.5.2
Commit f4c6c9d (2017-05-06 16:34 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-128-generic #177-Ubuntu SMP Tue Aug 8 11:40:23 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (418.0625 MB free)
Uptime: 52377.0 sec
Load Avg:  0.978515625  0.96728515625  0.9755859375
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz    3299350 s       1141 s     316526 s    1007597 s         87 s
#2  3500 MHz    1113470 s       5034 s     135909 s    3857896 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.7.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.5
2 required packages:
 - JSON                          0.13.0
 - TransformUtils                0.0.6
1 additional packages:
 - Compat                        0.31.0
INFO: Testing TransformUtils
[TEST] constructors SO3, Quaternion, AngleAxis... [SUCCESS]
[TEST] comparison functions for SO3, Quaternion, AngleAxis... [SUCCESS]
[TEST] trivial case quaterion -> SO3 -> Euler -> quaternion... [SUCCESS]
[TEST] convert functions 
WARNING: Need better coverage on convert function tests
[TEST] compare SO3 and quaternion rotations... dAA = TransformUtils.AngleAxis(0.7853981633974483,[1.0,0.0,0.0])
dAA = TransformUtils.so3([0.0 -0.107233 0.0322437; 0.107233 0.0 0.179993; -0.0322437 -0.179993 0.0])
dAA = TransformUtils.so3([0.0 0.0015935 0.0228683; -0.0015935 0.0 -0.186732; -0.0228683 0.186732 0.0])
dAA = TransformUtils.so3([0.0 0.0210818 -0.0586801; -0.0210818 0.0 -0.0379559; 0.0586801 0.0379559 0.0])
dAA = TransformUtils.Quaternion(0.9928071537984073,[0.0505283,-0.107832,0.0123777])
dAA = TransformUtils.SO3([0.999122 -0.00936706 0.0408467; 0.0016705 0.982827 0.184523; -0.0418736 -0.184293 0.981979])
[SUCCESS]
[TEST] basic SE3 mechanics... [SUCCESS]
[TEST] SE3 ⊕ and ⊖ mechanics... Compare operations on two different SE3 transforms
xi = TransformUtils.SE3(TransformUtils.SO3([0.996465 -0.0339578 -0.0768399; 0.0644798 0.895459 0.440448; 0.0538503 -0.443846 0.894484]),[-0.942278,0.490646,-1.70547])
xj = TransformUtils.SE3(TransformUtils.SO3([0.997638 0.0624975 -0.0285196; -0.0673672 0.971327 -0.228001; 0.0134523 0.229384 0.973243]),[2.12795,-0.430122,0.102001])
Dx = TransformUtils.SE3(TransformUtils.SO3([0.990491 0.13726 0.00928922; -0.100173 0.765851 -0.635168; -0.0942973 0.628198 0.772318]),[3.09733,-1.73101,0.975288])
[SUCCESS]
[TEST] previous discovered issues
TransformUtils.convert(Euler,q) = TransformUtils.Euler(0.7853981633974484,0.0,1.5707963267948963,TransformUtils.Quaternion(1.0,[0.0,0.0,0.0]))
INFO: TransformUtils tests passed

>>> End of log
