>>> 'Pkg.add("TransformUtils")' log
INFO: Installing TransformUtils v0.0.6
INFO: Package database updated
INFO: METADATA is out-of-date — you may not have the latest version of TransformUtils
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("TransformUtils")' log
Julia Version 0.5.2
Commit f4c6c9d (2017-05-06 16:34 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-121-generic #170-Ubuntu SMP Wed Jun 14 09:04:33 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (796.70703125 MB free)
Uptime: 50817.0 sec
Load Avg:  1.00537109375  0.99560546875  0.96533203125
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3502 MHz    3196660 s       7218 s     310912 s     980452 s        123 s
#2  3502 MHz    1086981 s        360 s     135699 s    3726254 s          4 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.7.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.5
2 required packages:
 - JSON                          0.13.0
 - TransformUtils                0.0.6
1 additional packages:
 - Compat                        0.28.0
INFO: Testing TransformUtils
[TEST] constructors SO3, Quaternion, AngleAxis... [SUCCESS]
[TEST] comparison functions for SO3, Quaternion, AngleAxis... [SUCCESS]
[TEST] trivial case quaterion -> SO3 -> Euler -> quaternion... [SUCCESS]
[TEST] convert functions 
WARNING: Need better coverage on convert function tests
[TEST] compare SO3 and quaternion rotations... dAA = TransformUtils.AngleAxis(0.7853981633974483,[1.0,0.0,0.0])
dAA = TransformUtils.so3([0.0 -0.225024 -0.153781; 0.225024 0.0 0.135784; 0.153781 -0.135784 0.0])
dAA = TransformUtils.so3([0.0 0.0971691 -0.159413; -0.0971691 0.0 -0.0520354; 0.159413 0.0520354 0.0])
dAA = TransformUtils.so3([0.0 -0.0567005 -0.0764741; 0.0567005 0.0 0.0876882; 0.0764741 -0.0876882 0.0])
dAA = TransformUtils.Quaternion(0.9997398557383632,[-0.0205262,-0.00696377,0.00709938])
dAA = TransformUtils.SO3([0.999121 0.0385039 -0.0165944; -0.0390987 0.998545 -0.0371479; 0.0151399 0.0377641 0.999172])
[SUCCESS]
[TEST] basic SE3 mechanics... [SUCCESS]
[TEST] SE3 ⊕ and ⊖ mechanics... Compare operations on two different SE3 transforms
xi = TransformUtils.SE3(TransformUtils.SO3([0.978938 0.141056 0.147594; -0.0603189 0.890495 -0.450978; -0.195045 0.432577 0.880247]),[-1.19028,1.28142,0.0350825])
xj = TransformUtils.SE3(TransformUtils.SO3([0.979234 -0.202729 0.000981055; 0.202714 0.979078 -0.0177221; 0.00263226 0.017553 0.999842]),[1.97477,-1.40054,1.37234])
Dx = TransformUtils.SE3(TransformUtils.SO3([0.945869 -0.260939 -0.192985; 0.319782 0.85086 0.416865; 0.0554265 -0.456013 0.888246]),[2.99933,-1.36335,2.85377])
[SUCCESS]
[TEST] previous discovered issues
TransformUtils.convert(Euler,q) = TransformUtils.Euler(0.7853981633974484,0.0,1.5707963267948963,TransformUtils.Quaternion(1.0,[0.0,0.0,0.0]))
INFO: TransformUtils tests passed

>>> End of log
