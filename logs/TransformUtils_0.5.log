>>> 'Pkg.add("TransformUtils")' log
INFO: Installing TransformUtils v0.0.6
INFO: Package database updated

>>> 'Pkg.test("TransformUtils")' log
Julia Version 0.5.2
Commit f4c6c9d (2017-05-06 16:34 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-128-generic #177-Ubuntu SMP Tue Aug 8 11:40:23 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (732.87890625 MB free)
Uptime: 51904.0 sec
Load Avg:  0.9931640625  1.00341796875  1.0302734375
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3510 MHz    3221603 s       7641 s     319244 s    1038369 s         97 s
#2  3510 MHz    1087664 s        132 s     139400 s    3837024 s          2 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.7.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.5
2 required packages:
 - JSON                          0.13.0
 - TransformUtils                0.0.6
1 additional packages:
 - Compat                        0.30.0
INFO: Testing TransformUtils
[TEST] constructors SO3, Quaternion, AngleAxis... [SUCCESS]
[TEST] comparison functions for SO3, Quaternion, AngleAxis... [SUCCESS]
[TEST] trivial case quaterion -> SO3 -> Euler -> quaternion... [SUCCESS]
[TEST] convert functions 
WARNING: Need better coverage on convert function tests
[TEST] compare SO3 and quaternion rotations... dAA = TransformUtils.AngleAxis(0.7853981633974483,[1.0,0.0,0.0])
dAA = TransformUtils.so3([0.0 0.0273114 -0.105418; -0.0273114 0.0 0.144111; 0.105418 -0.144111 0.0])
dAA = TransformUtils.so3([0.0 -0.0409657 -0.0380429; 0.0409657 0.0 0.0259574; 0.0380429 -0.0259574 0.0])
dAA = TransformUtils.so3([0.0 0.0219887 0.0323752; -0.0219887 0.0 0.0476481; -0.0323752 -0.0476481 0.0])
dAA = TransformUtils.Quaternion(0.9924985084350234,[-0.034243,-0.0171671,0.116101])
dAA = TransformUtils.SO3([0.99765 -0.0676898 0.0106507; 0.0668712 0.995691 0.0642397; -0.0149532 -0.0633765 0.997878])
[SUCCESS]
[TEST] basic SE3 mechanics... [SUCCESS]
[TEST] SE3 ⊕ and ⊖ mechanics... Compare operations on two different SE3 transforms
xi = TransformUtils.SE3(TransformUtils.SO3([0.988007 -0.084756 0.129067; 0.117799 0.95415 -0.275174; -0.0998271 0.287077 0.952692]),[-0.229545,0.0421989,0.578597])
xj = TransformUtils.SE3(TransformUtils.SO3([0.964784 0.254156 0.0677923; -0.206841 0.892242 -0.401399; -0.162505 0.373241 0.913391]),[0.382067,0.0628879,-1.21849])
Dx = TransformUtils.SE3(TransformUtils.SO3([0.945071 0.318953 -0.0714862; -0.32578 0.936941 -0.126527; 0.0266223 0.142865 0.989384]),[0.786112,-0.548001,-1.63882])
[SUCCESS]
[TEST] previous discovered issues
TransformUtils.convert(Euler,q) = TransformUtils.Euler(0.7853981633974484,0.0,1.5707963267948963,TransformUtils.Quaternion(1.0,[0.0,0.0,0.0]))
INFO: TransformUtils tests passed

>>> End of log
