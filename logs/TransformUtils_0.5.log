>>> 'Pkg.add("TransformUtils")' log
INFO: Installing TransformUtils v0.0.6
INFO: Package database updated
INFO: METADATA is out-of-date — you may not have the latest version of TransformUtils
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("TransformUtils")' log
Julia Version 0.5.2
Commit f4c6c9d (2017-05-06 16:34 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-128-generic #177-Ubuntu SMP Tue Aug 8 11:40:23 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (850.94921875 MB free)
Uptime: 51635.0 sec
Load Avg:  0.9833984375  0.9873046875  1.0283203125
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz    3217689 s       6745 s     288852 s    1040952 s        107 s
#2  3500 MHz    1118686 s         51 s     130720 s    3770661 s          2 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.7.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.5
2 required packages:
 - JSON                          0.13.0
 - TransformUtils                0.0.6
1 additional packages:
 - Compat                        0.31.0
INFO: Testing TransformUtils
[TEST] constructors SO3, Quaternion, AngleAxis... [SUCCESS]
[TEST] comparison functions for SO3, Quaternion, AngleAxis... [SUCCESS]
[TEST] trivial case quaterion -> SO3 -> Euler -> quaternion... [SUCCESS]
[TEST] convert functions 
WARNING: Need better coverage on convert function tests
[TEST] compare SO3 and quaternion rotations... dAA = TransformUtils.AngleAxis(0.7853981633974483,[1.0,0.0,0.0])
dAA = TransformUtils.so3([0.0 0.106541 -0.0107556; -0.106541 0.0 0.122027; 0.0107556 -0.122027 0.0])
dAA = TransformUtils.so3([0.0 -0.142288 0.149722; 0.142288 0.0 0.0874442; -0.149722 -0.0874442 0.0])
dAA = TransformUtils.so3([0.0 0.0369494 -0.100833; -0.0369494 0.0 0.0992475; 0.100833 -0.0992475 0.0])
dAA = TransformUtils.Quaternion(0.9979030199717126,[-0.0246671,0.0333529,-0.0496858])
dAA = TransformUtils.SO3([0.895226 -0.355109 0.269199; 0.329505 0.934222 0.136587; -0.299995 -0.0335735 0.95335])
[SUCCESS]
[TEST] basic SE3 mechanics... [SUCCESS]
[TEST] SE3 ⊕ and ⊖ mechanics... Compare operations on two different SE3 transforms
xi = TransformUtils.SE3(TransformUtils.SO3([0.990192 -0.123081 -0.0661115; 0.110303 0.979119 -0.170762; 0.0857485 0.161795 0.983092]),[-1.2518,-1.24001,-0.641058])
xj = TransformUtils.SE3(TransformUtils.SO3([0.993886 -0.0691672 -0.0860634; 0.0863762 0.9726 0.215842; 0.0687761 -0.221956 0.972628]),[0.0579208,0.634319,-1.79862])
Dx = TransformUtils.SE3(TransformUtils.SO3([0.999563 0.0197597 0.0219902; -0.0266279 0.924893 0.379294; -0.0128438 -0.379714 0.925015]),[1.40436,1.4867,-1.54464])
[SUCCESS]
[TEST] previous discovered issues
TransformUtils.convert(Euler,q) = TransformUtils.Euler(0.7853981633974484,0.0,1.5707963267948963,TransformUtils.Quaternion(1.0,[0.0,0.0,0.0]))
INFO: TransformUtils tests passed

>>> End of log
