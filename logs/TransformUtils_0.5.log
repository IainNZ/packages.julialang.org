>>> 'Pkg.add("TransformUtils")' log
INFO: Installing TransformUtils v0.0.6
INFO: Package database updated
INFO: METADATA is out-of-date — you may not have the latest version of TransformUtils
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("TransformUtils")' log
Julia Version 0.5.2
Commit f4c6c9d (2017-05-06 16:34 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-119-generic #166-Ubuntu SMP Wed May 3 12:18:55 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (872.6015625 MB free)
Uptime: 45958.0 sec
Load Avg:  0.99853515625  1.00830078125  1.029296875
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz    2784256 s       5390 s     227030 s    1001741 s         86 s
#2  3499 MHz     820864 s       2395 s     103593 s    3571818 s          2 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.7.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.5
2 required packages:
 - JSON                          0.12.0
 - TransformUtils                0.0.6
1 additional packages:
 - Compat                        0.25.2
INFO: Testing TransformUtils
[TEST] constructors SO3, Quaternion, AngleAxis... [SUCCESS]
[TEST] comparison functions for SO3, Quaternion, AngleAxis... [SUCCESS]
[TEST] trivial case quaterion -> SO3 -> Euler -> quaternion... [SUCCESS]
[TEST] convert functions 
WARNING: Need better coverage on convert function tests
[TEST] compare SO3 and quaternion rotations... dAA = TransformUtils.AngleAxis(0.7853981633974483,[1.0,0.0,0.0])
dAA = TransformUtils.so3([0.0 0.093509 0.00901099; -0.093509 0.0 0.115173; -0.00901099 -0.115173 0.0])
dAA = TransformUtils.so3([0.0 -0.221638 -0.0576263; 0.221638 0.0 0.00348509; 0.0576263 -0.00348509 0.0])
dAA = TransformUtils.so3([0.0 0.175524 0.162119; -0.175524 0.0 0.0388327; -0.162119 -0.0388327 0.0])
dAA = TransformUtils.Quaternion(0.9993147074062043,[-0.0350152,-0.00727413,-0.00954653])
dAA = TransformUtils.SO3([0.990599 0.0756641 0.113971; -0.109059 0.939743 0.324021; -0.0825866 -0.333404 0.93916])
[SUCCESS]
[TEST] basic SE3 mechanics... [SUCCESS]
[TEST] SE3 ⊕ and ⊖ mechanics... Compare operations on two different SE3 transforms
xi = TransformUtils.SE3(TransformUtils.SO3([0.959555 0.137812 -0.245483; -0.206415 0.937362 -0.280616; 0.191434 0.319938 0.927897]),[-0.402897,0.107045,0.522777])
xj = TransformUtils.SE3(TransformUtils.SO3([0.93263 0.00426053 0.360809; -0.00209841 0.999977 -0.00638398; -0.360828 0.00519676 0.932618]),[-0.503367,-0.929322,-2.24442])
Dx = TransformUtils.SE3(TransformUtils.SO3([0.826268 -0.201327 0.526069; 0.0111182 0.939591 0.34212; -0.563167 -0.276834 0.778592]),[-0.41222,-1.87063,-2.25219])
[SUCCESS]
[TEST] previous discovered issues
TransformUtils.convert(Euler,q) = TransformUtils.Euler(0.7853981633974484,0.0,1.5707963267948963,TransformUtils.Quaternion(1.0,[0.0,0.0,0.0]))
INFO: TransformUtils tests passed

>>> End of log
