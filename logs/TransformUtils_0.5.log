>>> 'Pkg.add("TransformUtils")' log
INFO: Installing TransformUtils v0.0.6
INFO: Package database updated
INFO: METADATA is out-of-date — you may not have the latest version of TransformUtils
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("TransformUtils")' log
Julia Version 0.5.2
Commit f4c6c9d (2017-05-06 16:34 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-121-generic #170-Ubuntu SMP Wed Jun 14 09:04:33 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (416.640625 MB free)
Uptime: 50092.0 sec
Load Avg:  0.98779296875  1.0263671875  1.060546875
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz    3154410 s        826 s     287324 s     999659 s         88 s
#2  3500 MHz    1112283 s       5948 s     134252 s    3637043 s          1 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.7.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.5
2 required packages:
 - JSON                          0.13.0
 - TransformUtils                0.0.6
1 additional packages:
 - Compat                        0.29.0
INFO: Testing TransformUtils
[TEST] constructors SO3, Quaternion, AngleAxis... [SUCCESS]
[TEST] comparison functions for SO3, Quaternion, AngleAxis... [SUCCESS]
[TEST] trivial case quaterion -> SO3 -> Euler -> quaternion... [SUCCESS]
[TEST] convert functions 
WARNING: Need better coverage on convert function tests
[TEST] compare SO3 and quaternion rotations... dAA = TransformUtils.AngleAxis(0.7853981633974483,[1.0,0.0,0.0])
dAA = TransformUtils.so3([0.0 0.104171 0.0474611; -0.104171 0.0 -0.0575321; -0.0474611 0.0575321 0.0])
dAA = TransformUtils.so3([0.0 -0.0231113 0.0356683; 0.0231113 0.0 -0.0751751; -0.0356683 0.0751751 0.0])
dAA = TransformUtils.so3([0.0 -0.0163761 -0.0128615; 0.0163761 0.0 0.00986868; 0.0128615 -0.00986868 0.0])
dAA = TransformUtils.Quaternion(0.9936841409658311,[-0.0680596,-0.0844018,-0.0289147])
dAA = TransformUtils.SO3([0.999147 -0.0367971 -0.0187278; 0.0394662 0.984422 0.171333; 0.0121315 -0.171926 0.985035])
[SUCCESS]
[TEST] basic SE3 mechanics... [SUCCESS]
[TEST] SE3 ⊕ and ⊖ mechanics... Compare operations on two different SE3 transforms
xi = TransformUtils.SE3(TransformUtils.SO3([0.960267 0.278735 -0.0139227; -0.278359 0.952997 -0.11964; -0.0200795 0.118762 0.99272]),[0.387431,-0.28284,0.0843641])
xj = TransformUtils.SE3(TransformUtils.SO3([0.785124 0.546249 -0.291879; -0.270948 0.726724 0.631237; 0.556927 -0.416515 0.718573]),[0.178743,-1.10058,1.26042])
Dx = TransformUtils.SE3(TransformUtils.SO3([0.818166 0.330618 -0.47042; 0.0267707 0.795358 0.605549; 0.574358 -0.508033 0.641884]),[0.00361303,-0.697798,1.26823])
[SUCCESS]
[TEST] previous discovered issues
TransformUtils.convert(Euler,q) = TransformUtils.Euler(0.7853981633974484,0.0,1.5707963267948963,TransformUtils.Quaternion(1.0,[0.0,0.0,0.0]))
INFO: TransformUtils tests passed

>>> End of log
