>>> 'Pkg.add("TransformUtils")' log
INFO: Installing TransformUtils v0.0.6
INFO: Package database updated
INFO: METADATA is out-of-date — you may not have the latest version of TransformUtils
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("TransformUtils")' log
Julia Version 0.5.2
Commit f4c6c9d (2017-05-06 16:34 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-119-generic #166-Ubuntu SMP Wed May 3 12:18:55 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (864.48046875 MB free)
Uptime: 49169.0 sec
Load Avg:  1.05908203125  1.05029296875  1.013671875
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz    2796328 s       7089 s     282403 s    1288575 s        119 s
#2  3499 MHz     960208 s         42 s     130928 s    3692284 s          3 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.7.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.5
2 required packages:
 - JSON                          0.12.0
 - TransformUtils                0.0.6
1 additional packages:
 - Compat                        0.25.2
INFO: Testing TransformUtils
[TEST] constructors SO3, Quaternion, AngleAxis... [SUCCESS]
[TEST] comparison functions for SO3, Quaternion, AngleAxis... [SUCCESS]
[TEST] trivial case quaterion -> SO3 -> Euler -> quaternion... [SUCCESS]
[TEST] convert functions 
WARNING: Need better coverage on convert function tests
[TEST] compare SO3 and quaternion rotations... dAA = TransformUtils.AngleAxis(0.7853981633974483,[1.0,0.0,0.0])
dAA = TransformUtils.so3([0.0 0.00985063 0.0621576; -0.00985063 0.0 -0.0256446; -0.0621576 0.0256446 0.0])
dAA = TransformUtils.so3([0.0 -0.181044 -0.0447825; 0.181044 0.0 0.0120336; 0.0447825 -0.0120336 0.0])
dAA = TransformUtils.so3([0.0 -0.0130908 -0.00621744; 0.0130908 0.0 -0.00855415; 0.00621744 0.00855415 0.0])
dAA = TransformUtils.Quaternion(0.9991534120693482,[-0.0146272,-0.0365504,-0.0119405])
dAA = TransformUtils.SO3([0.974081 0.225752 -0.0142143; -0.225075 0.973582 0.0384504; 0.022519 -0.0342545 0.999159])
[SUCCESS]
[TEST] basic SE3 mechanics... [SUCCESS]
[TEST] SE3 ⊕ and ⊖ mechanics... Compare operations on two different SE3 transforms
xi = TransformUtils.SE3(TransformUtils.SO3([0.996573 -0.00261494 0.0826819; 0.00174921 0.999943 0.0105413; -0.0827048 -0.0103605 0.99652]),[-0.31268,-1.04004,-0.424826])
xj = TransformUtils.SE3(TransformUtils.SO3([0.983603 0.0298347 -0.177864; 0.0314965 0.942649 0.332297; 0.177577 -0.33245 0.926252]),[0.55293,0.571096,-1.88333])
Dx = TransformUtils.SE3(TransformUtils.SO3([0.9656 0.0588765 -0.253279; 0.0270829 0.945961 0.323146; 0.258618 -0.31889 0.911826]),[0.986087,1.62389,-1.36488])
[SUCCESS]
[TEST] previous discovered issues
TransformUtils.convert(Euler,q) = TransformUtils.Euler(0.7853981633974484,0.0,1.5707963267948963,TransformUtils.Quaternion(1.0,[0.0,0.0,0.0]))
INFO: TransformUtils tests passed

>>> End of log
