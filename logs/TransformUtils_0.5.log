>>> 'Pkg.add("TransformUtils")' log
INFO: Installing TransformUtils v0.0.6
INFO: Package database updated
INFO: METADATA is out-of-date — you may not have the latest version of TransformUtils
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("TransformUtils")' log
Julia Version 0.5.2
Commit f4c6c9d (2017-05-06 16:34 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-129-generic #178-Ubuntu SMP Fri Aug 11 12:48:20 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (926.70703125 MB free)
Uptime: 52448.0 sec
Load Avg:  0.98486328125  0.98291015625  0.9775390625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz    3260244 s       6982 s     328102 s    1037748 s        114 s
#2  3500 MHz    1141730 s        161 s     139160 s    3830928 s          1 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.7.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.5
2 required packages:
 - JSON                          0.13.0
 - TransformUtils                0.0.6
1 additional packages:
 - Compat                        0.31.0
INFO: Testing TransformUtils
[TEST] constructors SO3, Quaternion, AngleAxis... [SUCCESS]
[TEST] comparison functions for SO3, Quaternion, AngleAxis... [SUCCESS]
[TEST] trivial case quaterion -> SO3 -> Euler -> quaternion... [SUCCESS]
[TEST] convert functions 
WARNING: Need better coverage on convert function tests
[TEST] compare SO3 and quaternion rotations... dAA = TransformUtils.AngleAxis(0.7853981633974483,[1.0,0.0,0.0])
dAA = TransformUtils.so3([0.0 0.115513 -0.195376; -0.115513 0.0 0.0771974; 0.195376 -0.0771974 0.0])
dAA = TransformUtils.so3([0.0 -0.0419792 -0.0110844; 0.0419792 0.0 0.0794368; 0.0110844 -0.0794368 0.0])
dAA = TransformUtils.so3([0.0 -0.0339144 -0.0542962; 0.0339144 0.0 -0.213226; 0.0542962 0.213226 0.0])
dAA = TransformUtils.Quaternion(0.9949360858789487,[-0.0750118,0.033112,-0.0581293])
dAA = TransformUtils.SO3([0.986927 0.106539 0.120934; -0.114104 0.991807 0.0574383; -0.113824 -0.0704864 0.990997])
[SUCCESS]
[TEST] basic SE3 mechanics... [SUCCESS]
[TEST] SE3 ⊕ and ⊖ mechanics... Compare operations on two different SE3 transforms
xi = TransformUtils.SE3(TransformUtils.SO3([0.965032 -0.124621 0.230614; 0.138198 0.989443 -0.0436228; -0.222743 0.0739677 0.972067]),[-1.66134,-1.33236,-0.237571])
xj = TransformUtils.SE3(TransformUtils.SO3([0.959859 -0.216098 0.17881; 0.2163 0.97615 0.0186065; -0.178566 0.0208169 0.983708]),[-2.22298,0.708963,-0.361078])
Dx = TransformUtils.SE3(TransformUtils.SO3([0.995961 -0.0782767 -0.0439852; 0.0811897 0.994315 0.0688893; 0.0383427 -0.0721822 0.996654]),[-0.232385,2.08063,-0.338627])
[SUCCESS]
[TEST] previous discovered issues
TransformUtils.convert(Euler,q) = TransformUtils.Euler(0.7853981633974484,0.0,1.5707963267948963,TransformUtils.Quaternion(1.0,[0.0,0.0,0.0]))
INFO: TransformUtils tests passed

>>> End of log
