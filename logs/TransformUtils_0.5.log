>>> 'Pkg.add("TransformUtils")' log
INFO: Installing TransformUtils v0.0.6
INFO: Package database updated
INFO: METADATA is out-of-date — you may not have the latest version of TransformUtils
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("TransformUtils")' log
Julia Version 0.5.2
Commit f4c6c9d (2017-05-06 16:34 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-117-generic #164-Ubuntu SMP Fri Apr 7 11:05:26 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (851.01953125 MB free)
Uptime: 45916.0 sec
Load Avg:  0.94287109375  1.02001953125  1.0380859375
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3501 MHz    2816846 s       4487 s     250792 s     941937 s         87 s
#2  3501 MHz     793688 s       2705 s     113430 s    3575537 s          1 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.7.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.5
2 required packages:
 - JSON                          0.11.0
 - TransformUtils                0.0.6
1 additional packages:
 - Compat                        0.25.0
INFO: Testing TransformUtils
[TEST] constructors SO3, Quaternion, AngleAxis... [SUCCESS]
[TEST] comparison functions for SO3, Quaternion, AngleAxis... [SUCCESS]
[TEST] trivial case quaterion -> SO3 -> Euler -> quaternion... [SUCCESS]
[TEST] convert functions 
WARNING: Need better coverage on convert function tests
[TEST] compare SO3 and quaternion rotations... dAA = TransformUtils.AngleAxis(0.7853981633974483,[1.0,0.0,0.0])
dAA = TransformUtils.so3([0.0 -0.116019 -0.0206181; 0.116019 0.0 0.0997488; 0.0206181 -0.0997488 0.0])
dAA = TransformUtils.so3([0.0 -0.0638824 -0.14357; 0.0638824 0.0 -0.0188856; 0.14357 0.0188856 0.0])
dAA = TransformUtils.so3([0.0 0.158231 0.234926; -0.158231 0.0 0.109404; -0.234926 -0.109404 0.0])
dAA = TransformUtils.Quaternion(0.9997432583292737,[-0.00123761,-0.00346159,0.0223585])
dAA = TransformUtils.SO3([0.993953 -0.102742 0.0387402; 0.100047 0.992788 0.0660495; -0.0452469 -0.0617743 0.997064])
[SUCCESS]
[TEST] basic SE3 mechanics... [SUCCESS]
[TEST] SE3 ⊕ and ⊖ mechanics... Compare operations on two different SE3 transforms
xi = TransformUtils.SE3(TransformUtils.SO3([0.996505 0.0806764 -0.021671; -0.0833246 0.941495 -0.326563; -0.00594279 0.327228 0.944927]),[-0.0432287,0.34532,0.633588])
xj = TransformUtils.SE3(TransformUtils.SO3([0.89469 0.430558 0.118948; -0.44425 0.885458 0.136403; -0.0465941 -0.174881 0.983486]),[1.13498,-0.552764,-0.052925])
Dx = TransformUtils.SE3(TransformUtils.SO3([0.928857 0.356312 0.101322; -0.361326 0.811165 0.459843; 0.0816588 -0.463739 0.882201]),[1.25301,-0.975134,-0.380956])
[SUCCESS]
[TEST] previous discovered issues
TransformUtils.convert(Euler,q) = TransformUtils.Euler(0.7853981633974484,0.0,1.5707963267948963,TransformUtils.Quaternion(1.0,[0.0,0.0,0.0]))
INFO: TransformUtils tests passed

>>> End of log
