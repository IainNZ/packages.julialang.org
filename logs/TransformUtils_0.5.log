>>> 'Pkg.add("TransformUtils")' log
INFO: Installing TransformUtils v0.0.6
INFO: Package database updated
INFO: METADATA is out-of-date — you may not have the latest version of TransformUtils
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("TransformUtils")' log
Julia Version 0.5.2
Commit f4c6c9d (2017-05-06 16:34 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-121-generic #170-Ubuntu SMP Wed Jun 14 09:04:33 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (411.70703125 MB free)
Uptime: 49292.0 sec
Load Avg:  0.96728515625  0.9853515625  1.029296875
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3503 MHz    3200748 s       6186 s     281611 s     839441 s         81 s
#2  3503 MHz     977112 s         42 s     124387 s    3715946 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.7.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.5
2 required packages:
 - JSON                          0.13.0
 - TransformUtils                0.0.6
1 additional packages:
 - Compat                        0.27.0
INFO: Testing TransformUtils
[TEST] constructors SO3, Quaternion, AngleAxis... [SUCCESS]
[TEST] comparison functions for SO3, Quaternion, AngleAxis... [SUCCESS]
[TEST] trivial case quaterion -> SO3 -> Euler -> quaternion... [SUCCESS]
[TEST] convert functions 
WARNING: Need better coverage on convert function tests
[TEST] compare SO3 and quaternion rotations... dAA = TransformUtils.AngleAxis(0.7853981633974483,[1.0,0.0,0.0])
dAA = TransformUtils.so3([0.0 -0.064457 -0.124086; 0.064457 0.0 0.0121487; 0.124086 -0.0121487 0.0])
dAA = TransformUtils.so3([0.0 -0.0142416 0.0519651; 0.0142416 0.0 0.0748443; -0.0519651 -0.0748443 0.0])
dAA = TransformUtils.so3([0.0 -0.0678708 -0.181963; 0.0678708 0.0 0.129322; 0.181963 -0.129322 0.0])
dAA = TransformUtils.Quaternion(0.9985055436072323,[0.0435485,0.014481,0.0296734])
dAA = TransformUtils.SO3([0.997636 0.0569475 0.0384608; -0.0561432 0.998187 -0.0216786; -0.0396256 0.019468 0.999025])
[SUCCESS]
[TEST] basic SE3 mechanics... [SUCCESS]
[TEST] SE3 ⊕ and ⊖ mechanics... Compare operations on two different SE3 transforms
xi = TransformUtils.SE3(TransformUtils.SO3([0.997042 0.0765691 0.00667488; -0.0639693 0.874834 -0.48018; -0.0426064 0.478333 0.877144]),[-1.84648,0.778631,-0.245606])
xj = TransformUtils.SE3(TransformUtils.SO3([0.969404 -0.0321832 0.243354; 0.00440333 0.993489 0.113847; -0.245433 -0.109292 0.963233]),[1.51792,2.18182,0.58326])
Dx = TransformUtils.SE3(TransformUtils.SO3([0.976711 -0.0909842 0.194311; -0.0393203 0.814396 0.578976; -0.210924 -0.573133 0.791852]),[3.22937,1.88164,0.0757104])
[SUCCESS]
[TEST] previous discovered issues
TransformUtils.convert(Euler,q) = TransformUtils.Euler(0.7853981633974484,0.0,1.5707963267948963,TransformUtils.Quaternion(1.0,[0.0,0.0,0.0]))
INFO: TransformUtils tests passed

>>> End of log
