>>> 'Pkg.add("TransformUtils")' log
INFO: Installing TransformUtils v0.0.6
INFO: Package database updated
INFO: METADATA is out-of-date — you may not have the latest version of TransformUtils
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("TransformUtils")' log
Julia Version 0.5.2
Commit f4c6c9d (2017-05-06 16:34 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-121-generic #170-Ubuntu SMP Wed Jun 14 09:04:33 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (406.39453125 MB free)
Uptime: 50072.0 sec
Load Avg:  0.94921875  0.9501953125  1.01123046875
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz    3140639 s       2464 s     334265 s     959756 s         84 s
#2  3500 MHz    1072305 s       4562 s     144309 s    3659620 s          1 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.7.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.5
2 required packages:
 - JSON                          0.12.0
 - TransformUtils                0.0.6
1 additional packages:
 - Compat                        0.26.0
INFO: Testing TransformUtils
[TEST] constructors SO3, Quaternion, AngleAxis... [SUCCESS]
[TEST] comparison functions for SO3, Quaternion, AngleAxis... [SUCCESS]
[TEST] trivial case quaterion -> SO3 -> Euler -> quaternion... [SUCCESS]
[TEST] convert functions 
WARNING: Need better coverage on convert function tests
[TEST] compare SO3 and quaternion rotations... dAA = TransformUtils.AngleAxis(0.7853981633974483,[1.0,0.0,0.0])
dAA = TransformUtils.so3([0.0 -0.115934 0.0704335; 0.115934 0.0 0.163431; -0.0704335 -0.163431 0.0])
dAA = TransformUtils.so3([0.0 -0.0469889 -0.00213451; 0.0469889 0.0 0.186111; 0.00213451 -0.186111 0.0])
dAA = TransformUtils.so3([0.0 -0.00503591 -0.0515979; 0.00503591 0.0 -0.0691046; 0.0515979 0.0691046 0.0])
dAA = TransformUtils.Quaternion(0.9980051142355809,[0.0184468,-0.0554983,-0.0237792])
dAA = TransformUtils.SO3([0.99877 -0.0419187 0.0264808; 0.0430803 0.998061 -0.0449357; -0.0245458 0.0460212 0.998639])
[SUCCESS]
[TEST] basic SE3 mechanics... [SUCCESS]
[TEST] SE3 ⊕ and ⊖ mechanics... Compare operations on two different SE3 transforms
xi = TransformUtils.SE3(TransformUtils.SO3([0.910395 -0.398217 -0.112268; 0.410145 0.904317 0.118282; 0.054424 -0.15373 0.986613]),[0.425402,-0.880292,0.333229])
xj = TransformUtils.SE3(TransformUtils.SO3([0.986762 -0.0459954 0.155519; 0.0688662 0.987027 -0.145036; -0.14683 0.153826 0.977128]),[-0.0395399,-0.454823,1.38734])
Dx = TransformUtils.SE3(TransformUtils.SO3([0.918597 0.371322 0.135277; -0.308096 0.887254 -0.343303; -0.247501 0.273679 0.929432]),[-0.191408,0.407859,1.14252])
[SUCCESS]
[TEST] previous discovered issues
TransformUtils.convert(Euler,q) = TransformUtils.Euler(0.7853981633974484,0.0,1.5707963267948963,TransformUtils.Quaternion(1.0,[0.0,0.0,0.0]))
INFO: TransformUtils tests passed

>>> End of log
