>>> 'Pkg.add("TransformUtils")' log
INFO: Installing TransformUtils v0.0.5
INFO: Package database updated
INFO: METADATA is out-of-date — you may not have the latest version of TransformUtils
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("TransformUtils")' log
Julia Version 0.5.1
Commit 6445c82 (2017-03-05 13:25 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-116-generic #163-Ubuntu SMP Fri Mar 31 14:13:22 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (888.6328125 MB free)
Uptime: 43315.0 sec
Load Avg:  0.96630859375  1.009765625  0.98046875
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz    2595004 s       6826 s     221051 s     972180 s         85 s
#2  3499 MHz     837600 s        100 s     104596 s    3291083 s          4 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.7.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.5
2 required packages:
 - JSON                          0.9.1
 - TransformUtils                0.0.5
1 additional packages:
 - Compat                        0.24.0
INFO: Testing TransformUtils
[TEST] constructors SO3, Quaternion, AngleAxis... [SUCCESS]
[TEST] comparison functions for SO3, Quaternion, AngleAxis... [SUCCESS]
[TEST] trivial case quaterion -> SO3 -> Euler -> quaternion... [SUCCESS]
[TEST] convert functions 
WARNING: Need better coverage on convert function tests
[TEST] compare SO3 and quaternion rotations... dAA = TransformUtils.AngleAxis(0.7853981633974483,[1.0,0.0,0.0])
dAA = TransformUtils.so3([0.0 0.0144694 -0.0133598; -0.0144694 0.0 0.0828917; 0.0133598 -0.0828917 0.0])
dAA = TransformUtils.so3([0.0 -0.00928651 -0.00501773; 0.00928651 0.0 -0.071328; 0.00501773 0.071328 0.0])
dAA = TransformUtils.so3([0.0 0.0204284 0.0535331; -0.0204284 0.0 0.103053; -0.0535331 -0.103053 0.0])
dAA = TransformUtils.Quaternion(0.9989917071737541,[-0.0262596,-0.00912499,0.0352525])
dAA = TransformUtils.SO3([0.994307 0.00682696 -0.106336; -0.00256109 0.999188 0.0402019; 0.106524 -0.0397007 0.993517])
[SUCCESS]
[TEST] basic SE3 mechanics... [SUCCESS]
[TEST] SE3 ⊕ and ⊖ mechanics... Compare operations on two different SE3 transforms
xi = TransformUtils.SE3(TransformUtils.SO3([0.932469 -0.361231 -0.00372502; 0.347857 0.900631 -0.260497; 0.0974547 0.24161 0.965467]),[-0.754086,-0.468297,-1.07432])
xj = TransformUtils.SE3(TransformUtils.SO3([0.998758 0.049753 -0.00247528; -0.0497869 0.995316 -0.0828644; -0.00165907 0.0828848 0.996558]),[0.986078,-1.60804,-0.039189])
Dx = TransformUtils.SE3(TransformUtils.SO3([0.913831 0.400699 0.0659861; -0.406024 0.898466 0.167042; 0.00764719 -0.17944 0.983739]),[1.32706,-1.40499,1.2898])
[SUCCESS]
[TEST] previous discovered issues
TransformUtils.convert(Euler,q) = TransformUtils.Euler(0.7853981633974484,0.0,1.5707963267948963,TransformUtils.Quaternion(1.0,[0.0,0.0,0.0]))
INFO: TransformUtils tests passed

>>> End of log
