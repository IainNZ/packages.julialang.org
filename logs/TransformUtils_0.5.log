>>> 'Pkg.add("TransformUtils")' log
INFO: Installing TransformUtils v0.0.6
INFO: Package database updated
INFO: METADATA is out-of-date — you may not have the latest version of TransformUtils
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("TransformUtils")' log
Julia Version 0.5.2
Commit f4c6c9d (2017-05-06 16:34 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-119-generic #166-Ubuntu SMP Wed May 3 12:18:55 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (907.9765625 MB free)
Uptime: 44579.0 sec
Load Avg:  0.919921875  0.95556640625  0.95458984375
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3496 MHz    2745351 s       1134 s     245368 s     924362 s         82 s
#2  3496 MHz     797166 s       5422 s     109494 s    3435374 s          1 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.7.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.5
2 required packages:
 - JSON                          0.12.0
 - TransformUtils                0.0.6
1 additional packages:
 - Compat                        0.26.0
INFO: Testing TransformUtils
[TEST] constructors SO3, Quaternion, AngleAxis... [SUCCESS]
[TEST] comparison functions for SO3, Quaternion, AngleAxis... [SUCCESS]
[TEST] trivial case quaterion -> SO3 -> Euler -> quaternion... [SUCCESS]
[TEST] convert functions 
WARNING: Need better coverage on convert function tests
[TEST] compare SO3 and quaternion rotations... dAA = TransformUtils.AngleAxis(0.7853981633974483,[1.0,0.0,0.0])
dAA = TransformUtils.so3([0.0 0.0349385 -0.0596416; -0.0349385 0.0 -0.0945519; 0.0596416 0.0945519 0.0])
dAA = TransformUtils.so3([0.0 0.177998 -0.166438; -0.177998 0.0 0.0926593; 0.166438 -0.0926593 0.0])
dAA = TransformUtils.so3([0.0 -0.065097 -0.038972; 0.065097 0.0 -0.0981289; 0.038972 0.0981289 0.0])
dAA = TransformUtils.Quaternion(0.994120410770293,[-0.0448406,0.0827233,0.0535796])
dAA = TransformUtils.SO3([0.999953 -0.00953248 0.00148695; 0.00962541 0.996201 -0.0865474; -0.000656293 0.0865577 0.996247])
[SUCCESS]
[TEST] basic SE3 mechanics... [SUCCESS]
[TEST] SE3 ⊕ and ⊖ mechanics... Compare operations on two different SE3 transforms
xi = TransformUtils.SE3(TransformUtils.SO3([0.967981 -0.00124586 0.251021; -0.0193467 0.996643 0.0795506; -0.250278 -0.0818599 0.964707]),[0.146037,-1.67656,-0.682851])
xj = TransformUtils.SE3(TransformUtils.SO3([0.922698 0.149449 -0.355378; -0.0718367 0.972311 0.222375; 0.378772 -0.179656 0.907885]),[1.88168,-0.158921,-1.19223])
Dx = TransformUtils.SE3(TransformUtils.SO3([0.799746 0.170816 -0.575525; -0.103751 0.983568 0.147752; 0.591306 -0.0584525 0.804326]),[1.7782,1.55208,0.0650076])
[SUCCESS]
[TEST] previous discovered issues
TransformUtils.convert(Euler,q) = TransformUtils.Euler(0.7853981633974484,0.0,1.5707963267948963,TransformUtils.Quaternion(1.0,[0.0,0.0,0.0]))
INFO: TransformUtils tests passed

>>> End of log
