>>> 'Pkg.add("TransformUtils")' log
INFO: Installing TransformUtils v0.0.6
INFO: Package database updated
INFO: METADATA is out-of-date — you may not have the latest version of TransformUtils
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("TransformUtils")' log
Julia Version 0.5.2
Commit f4c6c9d (2017-05-06 16:34 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-121-generic #170-Ubuntu SMP Wed Jun 14 09:04:33 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (872.50390625 MB free)
Uptime: 49443.0 sec
Load Avg:  1.1064453125  1.04052734375  0.98681640625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz    3164902 s       6795 s     243851 s     916889 s         93 s
#2  3500 MHz    1005550 s         81 s     124167 s    3699005 s          1 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.7.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.5
2 required packages:
 - JSON                          0.13.0
 - TransformUtils                0.0.6
1 additional packages:
 - Compat                        0.26.0
INFO: Testing TransformUtils
[TEST] constructors SO3, Quaternion, AngleAxis... [SUCCESS]
[TEST] comparison functions for SO3, Quaternion, AngleAxis... [SUCCESS]
[TEST] trivial case quaterion -> SO3 -> Euler -> quaternion... [SUCCESS]
[TEST] convert functions 
WARNING: Need better coverage on convert function tests
[TEST] compare SO3 and quaternion rotations... dAA = TransformUtils.AngleAxis(0.7853981633974483,[1.0,0.0,0.0])
dAA = TransformUtils.so3([0.0 0.0599615 -0.0994019; -0.0599615 0.0 0.0488632; 0.0994019 -0.0488632 0.0])
dAA = TransformUtils.so3([0.0 -0.131515 -0.00141101; 0.131515 0.0 -0.0394001; 0.00141101 0.0394001 0.0])
dAA = TransformUtils.so3([0.0 0.0928752 -0.111922; -0.0928752 0.0 -0.15639; 0.111922 0.15639 0.0])
dAA = TransformUtils.Quaternion(0.9986040696230565,[-0.0247428,-0.00811193,-0.0459555])
dAA = TransformUtils.SO3([0.998113 -0.0106763 0.0604755; 0.0148584 0.997497 -0.0691326; -0.0595861 0.0699006 0.995773])
[SUCCESS]
[TEST] basic SE3 mechanics... [SUCCESS]
[TEST] SE3 ⊕ and ⊖ mechanics... Compare operations on two different SE3 transforms
xi = TransformUtils.SE3(TransformUtils.SO3([0.985743 -0.102277 -0.133603; 0.119818 0.984164 0.130635; 0.118126 -0.14478 0.982387]),[-0.0302478,0.959422,-1.25632])
xj = TransformUtils.SE3(TransformUtils.SO3([0.959587 -0.130787 0.249172; 0.110423 0.989422 0.0940834; -0.258842 -0.0627668 0.963878]),[-0.826738,0.219434,1.02772])
Dx = TransformUtils.SE3(TransformUtils.SO3([0.928561 -0.0177862 0.370753; 0.0480064 0.996217 -0.0724416; -0.368061 0.085065 0.925902]),[-0.603994,-0.97749,2.25355])
[SUCCESS]
[TEST] previous discovered issues
TransformUtils.convert(Euler,q) = TransformUtils.Euler(0.7853981633974484,0.0,1.5707963267948963,TransformUtils.Quaternion(1.0,[0.0,0.0,0.0]))
INFO: TransformUtils tests passed

>>> End of log
