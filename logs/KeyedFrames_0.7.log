>>> 'Pkg.add("KeyedFrames")' log
WARNING: Base.Pkg is deprecated, run `using Pkg` instead
 in module Main
[ Info: Cloning cache of KeyedFrames from https://github.com/invenia/KeyedFrames.jl.git
[ Info: Installing BinDeps v0.8.7
[ Info: Installing BinaryProvider v0.2.8
[ Info: Installing CategoricalArrays v0.3.7
[ Info: Installing CodecZlib v0.4.3
[ Info: Installing DataFrames v0.11.5
[ Info: Installing DataStreams v0.3.4
[ Info: Installing DataStructures v0.7.4
[ Info: Installing KeyedFrames v0.1.1
[ Info: Installing Missings v0.2.9
[ Info: Installing NamedTuples v4.0.0
[ Info: Installing Reexport v0.1.0
[ Info: Installing SHA v0.5.6
[ Info: Installing SortingAlgorithms v0.2.0
[ Info: Installing SpecialFunctions v0.4.0
[ Info: Installing StatsBase v0.20.1
[ Info: Installing TranscodingStreams v0.5.2
[ Info: Installing URIParser v0.3.1
[ Info: Installing WeakRefStrings v0.4.3
[ Info: Building CodecZlib
┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `occursin(r, s)` instead.
│   caller = valid_dl_path(::String, ::BinaryProvider.Linux) at PlatformNames.jl:387
└ @ BinaryProvider PlatformNames.jl:387
WARNING: importing deprecated binding Base.Libdl into Sys.
WARNING: Base.Libdl is deprecated, run `using Libdl` instead
  likely near /home/vagrant/.julia/v0.7/CodecZlib/deps/build.jl:98
[ Info: Building SpecialFunctions
WARNING: importing deprecated binding Base.Associative into BinDeps.
WARNING: Base.Associative is deprecated, use AbstractDict instead.
  likely near /home/vagrant/.julia/v0.7/SpecialFunctions/deps/binaries.jl:44
in @install at /home/vagrant/.julia/v0.7/BinDeps/src/dependencies.jl
┌ Warning: `contains(haystack, needle)` is deprecated, use `occursin(needle, haystack)` instead.
│   caller = read_sonames() at dependencies.jl:402
└ @ BinDeps dependencies.jl:402
┌ Warning: `contains(haystack, needle)` is deprecated, use `occursin(needle, haystack)` instead.
│   caller = read_sonames() at dependencies.jl:405
└ @ BinDeps dependencies.jl:405
[ Info: Package database updated
┌ Info: METADATA is out-of-date — you may not have the latest version of KeyedFrames
└ Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("KeyedFrames")' log
WARNING: Base.versioninfo is deprecated: it has been moved to the standard library package `InteractiveUtils`.
Add `using InteractiveUtils` to your imports.
 in module Main
WARNING: Base.versioninfo is deprecated: it has been moved to the standard library package `InteractiveUtils`.
Add `using InteractiveUtils` to your imports.
 in module Main
Julia Version 0.7.0-DEV.4863
Commit 3666ffad81 (2018-04-12 19:02 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
      Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-143-generic #192-Ubuntu SMP Tue Feb 27 10:45:36 UTC 2018 x86_64 x86_64
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
              speed         user         nice          sys         idle          irq
       #1  3500 MHz    2519569 s       7304 s     196983 s     715245 s         24 s
       #2  3500 MHz     596590 s        111 s      75028 s    3291378 s          0 s
       
  Memory: 2.939197540283203 GB (803.42578125 MB free)
  Uptime: 40439.0 sec
  Load Avg:  0.93505859375  0.9697265625  0.95458984375
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant
Packages:
  Package Directory: /home/vagrant/.julia/v0.7
  Package Status:
2 required packages:
 - JSON                          0.17.2
 - KeyedFrames                   0.1.1
19 additional packages:
 - BinDeps                       0.8.7
 - BinaryProvider                0.2.8
 - CategoricalArrays             0.3.7
 - CodecZlib                     0.4.3
 - Compat                        0.63.0
 - DataFrames                    0.11.5
 - DataStreams                   0.3.4
 - DataStructures                0.7.4
 - Missings                      0.2.9
 - NamedTuples                   4.0.0
 - Nullables                     0.0.5
 - Reexport                      0.1.0
 - SHA                           0.5.6
 - SortingAlgorithms             0.2.0
 - SpecialFunctions              0.4.0
 - StatsBase                     0.20.1
 - TranscodingStreams            0.5.2
 - URIParser                     0.3.1
 - WeakRefStrings                0.4.3
WARNING: Base.Pkg is deprecated, run `using Pkg` instead
 in module Main
[ Info: Testing KeyedFrames
┌ Warning: `using A: B` will only be allowed for single bindings, not modules. Use `using A.B` instead
│   caller = ip:0x0
└ @ Core :-1
┌ Warning: Deprecated syntax `multiple line breaks between doc string and object` at /home/vagrant/.julia/v0.7/DataFrames/src/abstractdataframe/abstractdataframe.jl:133.
│ Use `at most one line break` instead.
└ @ nothing abstractdataframe.jl:133
┌ Warning: Deprecated syntax `multiple line breaks between doc string and object` at /home/vagrant/.julia/v0.7/DataFrames/src/abstractdataframe/abstractdataframe.jl:906.
│ Use `at most one line break` instead.
└ @ nothing abstractdataframe.jl:906
┌ Warning: `isdefined(:symbol)` is deprecated, use `@isdefined symbol` instead
│   caller = ip:0x0
└ @ Core :-1
WARNING: importing deprecated binding Base.Void into DataFrames.
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/DataFrames/src/dataframe/dataframe.jl:604
WARNING: importing deprecated binding Base.Associative into DataFrames.
WARNING: Base.Associative is deprecated, use AbstractDict instead.
  likely near /home/vagrant/.julia/v0.7/DataFrames/src/dataframe/dataframe.jl:930
WARNING: Base.Associative is deprecated, use AbstractDict instead.
  likely near /home/vagrant/.julia/v0.7/DataFrames/src/dataframe/dataframe.jl:949
WARNING: Base.Associative is deprecated, use AbstractDict instead.
  likely near /home/vagrant/.julia/v0.7/DataFrames/src/dataframe/dataframe.jl:966
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:85
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:85
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:92
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:92
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/DataFrames/src/abstractdataframe/join.jl:133
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/DataFrames/src/abstractdataframe/join.jl:133
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/DataFrames/src/abstractdataframe/join.jl:133
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/DataFrames/src/abstractdataframe/join.jl:133
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/DataFrames/src/abstractdataframe/join.jl:133
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/DataFrames/src/abstractdataframe/join.jl:133
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/DataFrames/src/abstractdataframe/join.jl:133
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/DataFrames/src/abstractdataframe/join.jl:133
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/DataFrames/src/abstractdataframe/join.jl:185
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(undef, m)` instead.
│   caller = top-level scope at show.jl:33
└ @ Core show.jl:33
┌ Warning: `IOBuffer(data::AbstractVector{UInt8}, read::Bool, write::Bool=false, maxsize::Integer=typemax(Int))` is deprecated, use `IOBuffer(data, read=read, write=write, maxsize=maxsize)` instead.
│   caller = Base.GenericIOBuffer{Array{UInt8,1}}(::Array{UInt8,1}, ::Bool, ::Bool) at deprecated.jl:56
└ @ Base deprecated.jl:56
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(undef, m)` instead.
│   caller = top-level scope
└ @ Core :0
WARNING: Base.Test is deprecated, run `using Test` instead
  likely near /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:3
┌ Warning: Constructors no longer fall back to `convert`. A constructor `DataFrame(::KeyedFrame)` should be defined instead.
│   caller = deepcopy(::KeyedFrame) at KeyedFrames.jl:58
└ @ KeyedFrames KeyedFrames.jl:58
┌ Warning: Constructors no longer fall back to `convert`. A constructor `DataFrame(::KeyedFrame)` should be defined instead.
│   caller = macro expansion at runtests.jl:71 [inlined]
└ @ Core runtests.jl:71
┌ Warning: Constructors no longer fall back to `convert`. A constructor `DataFrame(::KeyedFrame)` should be defined instead.
│   caller = macro expansion at runtests.jl:71 [inlined]
└ @ Core runtests.jl:71
┌ Warning: Constructors no longer fall back to `convert`. A constructor `DataFrame(::KeyedFrame)` should be defined instead.
│   caller = macro expansion at runtests.jl:78 [inlined]
└ @ Core runtests.jl:78
┌ Warning: Constructors no longer fall back to `convert`. A constructor `DataFrame(::KeyedFrame)` should be defined instead.
│   caller = copy(::KeyedFrame) at KeyedFrames.jl:57
└ @ KeyedFrames KeyedFrames.jl:57
┌ Warning: if appropriate you should implement `lastindex(a, n)` for type KeyedFrame`, which might just return `last(axes(a, n))`
│   caller = macro expansion at runtests.jl:168 [inlined]
└ @ Core runtests.jl:168
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(undef, m)` instead.
│   caller = getmaxwidths(::KeyedFrame, ::UnitRange{Int64}, ::UnitRange{Int64}, ::Symbol) at show.jl:94
└ @ DataFrames show.jl:94
┌ Warning: `showcompact(io, x)` is deprecated, use `show(IOContext(io, :compact => true), x)` instead.
│   caller = ourshowcompact at show.jl:57 [inlined]
└ @ Core show.jl:57
┌ Warning: `showcompact(io, x)` is deprecated, use `show(IOContext(io, :compact => true), x)` instead.
│   caller = ourshowcompact(::IOContext{Base.GenericIOBuffer{Array{UInt8,1}}}, ::Int64) at show.jl:57
└ @ DataFrames show.jl:57
head/tail: Error During Test at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:168
  Test threw exception MethodError(axes, (10×3 KeyedFrame
│ Row │ a  │ b  │ c  │
├─────┼────┼────┼────┤
│ 1   │ 1  │ 2  │ 3  │
│ 2   │ 2  │ 3  │ 4  │
│ 3   │ 3  │ 4  │ 5  │
│ 4   │ 4  │ 5  │ 6  │
│ 5   │ 5  │ 6  │ 7  │
│ 6   │ 6  │ 7  │ 8  │
│ 7   │ 7  │ 8  │ 9  │
│ 8   │ 8  │ 9  │ 10 │
│ 9   │ 9  │ 10 │ 11 │
│ 10  │ 10 │ 11 │ 12 │, 1), 0x0000000000006ae8)
  Expression: isequal(tail(kf1, 1), kf1[end, :])
  MethodError: no method matching axes(::KeyedFrame, ::Int64)
  Closest candidates are:
    axes(!Matched::Core.SimpleVector, ::Any) at essentials.jl:539
    axes(!Matched::Number, ::Any) at number.jl:50
    axes(!Matched::LinearAlgebra.RowVector, ::Any) at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/LinearAlgebra/src/deprecated.jl:501
    ...
  Stacktrace:
   [1] lastindex(::KeyedFrame, ::Int64) at ./deprecated.jl:1404
   [2] macro expansion at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:168 [inlined]
   [3] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1022 [inlined]
   [4] macro expansion at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:162 [inlined]
   [5] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1022 [inlined]
   [6] top-level scope at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:6
┌ Warning: if appropriate you should implement `lastindex(a, n)` for type KeyedFrame`, which might just return `last(axes(a, n))`
│   caller = macro expansion at runtests.jl:169 [inlined]
└ @ Core runtests.jl:169
head/tail: Error During Test at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:169
  Test threw exception MethodError(axes, (10×3 KeyedFrame
│ Row │ a  │ b  │ c  │
├─────┼────┼────┼────┤
│ 1   │ 1  │ 2  │ 3  │
│ 2   │ 2  │ 3  │ 4  │
│ 3   │ 3  │ 4  │ 5  │
│ 4   │ 4  │ 5  │ 6  │
│ 5   │ 5  │ 6  │ 7  │
│ 6   │ 6  │ 7  │ 8  │
│ 7   │ 7  │ 8  │ 9  │
│ 8   │ 8  │ 9  │ 10 │
│ 9   │ 9  │ 10 │ 11 │
│ 10  │ 10 │ 11 │ 12 │, 1), 0x0000000000006ae8)
  Expression: isequal(tail(kf1, 3), kf1[end - 2:end, :])
  MethodError: no method matching axes(::KeyedFrame, ::Int64)
  Closest candidates are:
    axes(!Matched::Core.SimpleVector, ::Any) at essentials.jl:539
    axes(!Matched::Number, ::Any) at number.jl:50
    axes(!Matched::LinearAlgebra.RowVector, ::Any) at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/LinearAlgebra/src/deprecated.jl:501
    ...
  Stacktrace:
   [1] lastindex(::KeyedFrame, ::Int64) at ./deprecated.jl:1404
   [2] macro expansion at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:169 [inlined]
   [3] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1022 [inlined]
   [4] macro expansion at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:162 [inlined]
   [5] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1022 [inlined]
   [6] top-level scope at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:6
┌ Warning: if appropriate you should implement `lastindex(a, n)` for type KeyedFrame`, which might just return `last(axes(a, n))`
│   caller = macro expansion at runtests.jl:170 [inlined]
└ @ Core runtests.jl:170
head/tail: Error During Test at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:170
  Test threw exception MethodError(axes, (10×3 KeyedFrame
│ Row │ a  │ b  │ c  │
├─────┼────┼────┼────┤
│ 1   │ 1  │ 2  │ 3  │
│ 2   │ 2  │ 3  │ 4  │
│ 3   │ 3  │ 4  │ 5  │
│ 4   │ 4  │ 5  │ 6  │
│ 5   │ 5  │ 6  │ 7  │
│ 6   │ 6  │ 7  │ 8  │
│ 7   │ 7  │ 8  │ 9  │
│ 8   │ 8  │ 9  │ 10 │
│ 9   │ 9  │ 10 │ 11 │
│ 10  │ 10 │ 11 │ 12 │, 1), 0x0000000000006ae8)
  Expression: isequal(tail(kf1, 6), kf1[end - 5:end, :])
  MethodError: no method matching axes(::KeyedFrame, ::Int64)
  Closest candidates are:
    axes(!Matched::Core.SimpleVector, ::Any) at essentials.jl:539
    axes(!Matched::Number, ::Any) at number.jl:50
    axes(!Matched::LinearAlgebra.RowVector, ::Any) at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/LinearAlgebra/src/deprecated.jl:501
    ...
  Stacktrace:
   [1] lastindex(::KeyedFrame, ::Int64) at ./deprecated.jl:1404
   [2] macro expansion at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:170 [inlined]
   [3] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1022 [inlined]
   [4] macro expansion at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:162 [inlined]
   [5] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1022 [inlined]
   [6] top-level scope at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:6
┌ Warning: `copy!(dst::AbstractArray, src::AbstractArray)` is deprecated. You can either use `copyto!(dst, src)` or `Future.copy!(dst, src)` instead.
│   caller = sort!(::DataFrame, ::Base.Sort.MergeSortAlg, ::DataFrames.DFPerm{Base.Order.ForwardOrdering,DataFrame}) at sort.jl:23
└ @ DataFrames sort.jl:23
┌ Warning: `copy!(dst::AbstractArray, src::AbstractArray)` is deprecated. You can either use `copyto!(dst, src)` or `Future.copy!(dst, src)` instead.
│   caller = sort!(::DataFrame, ::Base.Sort.MergeSortAlg, ::DataFrames.DFPerm{Base.Order.ReverseOrdering{Base.Order.ForwardOrdering},DataFrame}) at sort.jl:23
└ @ DataFrames sort.jl:23
┌ Warning: `copy!(dst::AbstractArray, src::AbstractArray)` is deprecated. You can either use `copyto!(dst, src)` or `Future.copy!(dst, src)` instead.
│   caller = sort!(::DataFrame, ::Base.Sort.MergeSortAlg, ::Base.Order.Perm{Base.Order.ForwardOrdering,Array{Int64,1}}) at sort.jl:23
└ @ DataFrames sort.jl:23
┌ Warning: `copy!(dst::AbstractArray, src::AbstractArray)` is deprecated. You can either use `copyto!(dst, src)` or `Future.copy!(dst, src)` instead.
│   caller = sort!(::DataFrame, ::Base.Sort.MergeSortAlg, ::Base.Order.Perm{Base.Order.ReverseOrdering{Base.Order.ForwardOrdering},Array{Int64,1}}) at sort.jl:23
└ @ DataFrames sort.jl:23
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(undef, m)` instead.
│   caller = eltypes(::DataFrame) at abstractdataframe.jl:219
└ @ DataFrames abstractdataframe.jl:219
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(undef, m)` instead.
│   caller = eltypes at abstractdataframe.jl:219 [inlined]
└ @ Core abstractdataframe.jl:219
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(undef, m)` instead.
│   caller = deleterows!(::DataFrame, ::Array{Int64,1}) at dataframe.jl:791
└ @ DataFrames dataframe.jl:791
unique: Error During Test at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:266
  Test threw exception DimensionMismatch("all inputs to eachindex must have the same indices, got Base.OneTo(5) and Base.OneTo(0)")
  Expression: nonunique(kf4) == [false, false, false, false, true]
  DimensionMismatch("all inputs to eachindex must have the same indices, got Base.OneTo(5) and Base.OneTo(0)")
  Stacktrace:
   [1] throw_eachindex_mismatch(::IndexLinear, ::Array{UInt64,1}, ::Vararg{Any,N} where N) at ./errorshow.jl:556
   [2] eachindex at ./abstractarray.jl:875 [inlined]
   [3] eachindex at ./abstractarray.jl:865 [inlined]
   [4] row_group_slots(::Tuple{Array{Int64,1},Array{Int64,1}}, ::Array{UInt64,1}, ::Array{Bool,1}, ::Nothing, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:105
   [5] row_group_slots(::DataFrame, ::Nothing, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:89
   [6] row_group_slots at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:88 [inlined]
   [7] nonunique(::DataFrame) at /home/vagrant/.julia/v0.7/DataFrames/src/abstractdataframe/abstractdataframe.jl:659
   [8] nonunique at /home/vagrant/.julia/v0.7/DataFrames/src/abstractdataframe/abstractdataframe.jl:670 [inlined]
   [9] nonunique(::KeyedFrame) at /home/vagrant/.julia/v0.7/KeyedFrames/src/KeyedFrames.jl:173
   [10] macro expansion at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:266 [inlined]
   [11] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1022 [inlined]
   [12] macro expansion at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:264 [inlined]
   [13] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1022 [inlined]
   [14] top-level scope at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:6
unique: Error During Test at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:267
  Test threw exception DimensionMismatch("all inputs to eachindex must have the same indices, got Base.OneTo(5) and Base.OneTo(0)")
  Expression: nonunique(kf4, :a) == [false, false, false, true, true]
  DimensionMismatch("all inputs to eachindex must have the same indices, got Base.OneTo(5) and Base.OneTo(0)")
  Stacktrace:
   [1] throw_eachindex_mismatch(::IndexLinear, ::Array{UInt64,1}, ::Vararg{Any,N} where N) at ./errorshow.jl:556
   [2] eachindex at ./abstractarray.jl:875 [inlined]
   [3] eachindex at ./abstractarray.jl:865 [inlined]
   [4] row_group_slots(::Tuple{Array{Int64,1}}, ::Array{UInt64,1}, ::Array{Bool,1}, ::Nothing, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:105
   [5] row_group_slots(::DataFrame, ::Nothing, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:89
   [6] row_group_slots at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:88 [inlined]
   [7] nonunique(::DataFrame) at /home/vagrant/.julia/v0.7/DataFrames/src/abstractdataframe/abstractdataframe.jl:659
   [8] nonunique at /home/vagrant/.julia/v0.7/DataFrames/src/abstractdataframe/abstractdataframe.jl:670 [inlined]
   [9] nonunique at /home/vagrant/.julia/v0.7/KeyedFrames/src/KeyedFrames.jl:173 [inlined]
   [10] nonunique(::KeyedFrame, ::Symbol) at /home/vagrant/.julia/v0.7/DataFrames/src/abstractdataframe/abstractdataframe.jl:669
   [11] macro expansion at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:267 [inlined]
   [12] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1022 [inlined]
   [13] macro expansion at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:264 [inlined]
   [14] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1022 [inlined]
   [15] top-level scope at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:6
unique: Error During Test at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:271
  Test threw exception DimensionMismatch("all inputs to eachindex must have the same indices, got Base.OneTo(5) and Base.OneTo(0)")
  Expression: isequal(unique(kf4), expected)
  DimensionMismatch("all inputs to eachindex must have the same indices, got Base.OneTo(5) and Base.OneTo(0)")
  Stacktrace:
   [1] throw_eachindex_mismatch(::IndexLinear, ::Array{UInt64,1}, ::Vararg{Any,N} where N) at ./errorshow.jl:556
   [2] eachindex at ./abstractarray.jl:875 [inlined]
   [3] eachindex at ./abstractarray.jl:865 [inlined]
   [4] row_group_slots(::Tuple{Array{Int64,1},Array{Int64,1}}, ::Array{UInt64,1}, ::Array{Bool,1}, ::Nothing, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:105
   [5] row_group_slots(::DataFrame, ::Nothing, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:89
   [6] row_group_slots at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:88 [inlined]
   [7] nonunique(::DataFrame) at /home/vagrant/.julia/v0.7/DataFrames/src/abstractdataframe/abstractdataframe.jl:659
   [8] nonunique at /home/vagrant/.julia/v0.7/DataFrames/src/abstractdataframe/abstractdataframe.jl:670 [inlined]
   [9] unique(::DataFrame, ::Array{Symbol,1}) at /home/vagrant/.julia/v0.7/DataFrames/src/abstractdataframe/abstractdataframe.jl:681
   [10] unique at /home/vagrant/.julia/v0.7/KeyedFrames/src/KeyedFrames.jl:165 [inlined] (repeats 2 times)
   [11] macro expansion at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:271 [inlined]
   [12] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1022 [inlined]
   [13] macro expansion at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:264 [inlined]
   [14] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1022 [inlined]
   [15] top-level scope at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:6
unique: Error During Test at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:263
  Got exception DimensionMismatch("all inputs to eachindex must have the same indices, got Base.OneTo(5) and Base.OneTo(0)") outside of a @test
  DimensionMismatch("all inputs to eachindex must have the same indices, got Base.OneTo(5) and Base.OneTo(0)")
  Stacktrace:
   [1] throw_eachindex_mismatch(::IndexLinear, ::Array{UInt64,1}, ::Vararg{Any,N} where N) at ./errorshow.jl:556
   [2] eachindex at ./abstractarray.jl:875 [inlined]
   [3] eachindex at ./abstractarray.jl:865 [inlined]
   [4] row_group_slots(::Tuple{Array{Int64,1},Array{Int64,1}}, ::Array{UInt64,1}, ::Array{Bool,1}, ::Nothing, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:105
   [5] row_group_slots(::DataFrame, ::Nothing, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:89
   [6] row_group_slots at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:88 [inlined]
   [7] nonunique(::DataFrame) at /home/vagrant/.julia/v0.7/DataFrames/src/abstractdataframe/abstractdataframe.jl:659
   [8] nonunique at /home/vagrant/.julia/v0.7/DataFrames/src/abstractdataframe/abstractdataframe.jl:670 [inlined]
   [9] unique! at /home/vagrant/.julia/v0.7/DataFrames/src/abstractdataframe/abstractdataframe.jl:677 [inlined]
   [10] unique! at /home/vagrant/.julia/v0.7/KeyedFrames/src/KeyedFrames.jl:169 [inlined] (repeats 2 times)
   [11] macro expansion at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:273 [inlined]
   [12] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1022 [inlined]
   [13] macro expansion at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:264 [inlined]
   [14] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1022 [inlined]
   [15] top-level scope at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:6
   [16] include at ./boot.jl:314 [inlined]
   [17] include_relative(::Module, ::String) at ./loading.jl:1067
   [18] include(::Module, ::String) at ./sysimg.jl:29
   [19] exec_options(::Base.JLOptions) at ./client.jl:327
   [20] _start() at ./client.jl:455
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(undef, m)` instead.
│   caller = group_rows(::DataFrame, ::Bool) at utils.jl:140
└ @ DataFrames utils.jl:140
join: Error During Test at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:286
  Test threw exception DimensionMismatch("all inputs to eachindex must have the same indices, got Base.OneTo(5) and Base.OneTo(0)")
  Expression: isequal(join(kf1, kf2), expected)
  DimensionMismatch("all inputs to eachindex must have the same indices, got Base.OneTo(5) and Base.OneTo(0)")
  Stacktrace:
   [1] throw_eachindex_mismatch(::IndexLinear, ::Array{UInt64,1}, ::Vararg{Any,N} where N) at ./errorshow.jl:556
   [2] eachindex at ./abstractarray.jl:875 [inlined]
   [3] eachindex at ./abstractarray.jl:865 [inlined]
   [4] row_group_slots(::Tuple{Array{Int64,1}}, ::Array{UInt64,1}, ::Array{Bool,1}, ::Array{Int64,1}, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:105
   [5] row_group_slots(::DataFrame, ::Array{Int64,1}, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:89
   [6] group_rows(::DataFrame, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:141
   [7] group_rows(::DataFrame) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:140
   [8] #join#138(::Array{Symbol,1}, ::Symbol, ::Bool, ::Function, ::DataFrame, ::DataFrame) at /home/vagrant/.julia/v0.7/DataFrames/src/abstractdataframe/join.jl:294
   [9] (::getfield(Base, Symbol("#kw##join")))(::NamedTuple{(:on, :kind),Tuple{Array{Symbol,1},Symbol}}, ::typeof(join), ::DataFrame, ::DataFrame) at ./<missing>:0
   [10] #join#5(::Nothing, ::Symbol, ::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::KeyedFrame, ::KeyedFrame) at /home/vagrant/.julia/v0.7/KeyedFrames/src/KeyedFrames.jl:179
   [11] join(::KeyedFrame, ::KeyedFrame) at /home/vagrant/.julia/v0.7/KeyedFrames/src/KeyedFrames.jl:179
   [12] macro expansion at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:286 [inlined]
   [13] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1022 [inlined]
   [14] macro expansion at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:285 [inlined]
   [15] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1022 [inlined]
   [16] top-level scope at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:6
join: Error During Test at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:287
  Test threw exception DimensionMismatch("all inputs to eachindex must have the same indices, got Base.OneTo(5) and Base.OneTo(0)")
  Expression: isequal(join(kf1, df2), expected)
  DimensionMismatch("all inputs to eachindex must have the same indices, got Base.OneTo(5) and Base.OneTo(0)")
  Stacktrace:
   [1] throw_eachindex_mismatch(::IndexLinear, ::Array{UInt64,1}, ::Vararg{Any,N} where N) at ./errorshow.jl:556
   [2] eachindex at ./abstractarray.jl:875 [inlined]
   [3] eachindex at ./abstractarray.jl:865 [inlined]
   [4] row_group_slots(::Tuple{Array{Int64,1}}, ::Array{UInt64,1}, ::Array{Bool,1}, ::Array{Int64,1}, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:105
   [5] row_group_slots(::DataFrame, ::Array{Int64,1}, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:89
   [6] group_rows(::DataFrame, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:141
   [7] group_rows(::DataFrame) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:140
   [8] #join#138(::Array{Symbol,1}, ::Symbol, ::Bool, ::Function, ::DataFrame, ::DataFrame) at /home/vagrant/.julia/v0.7/DataFrames/src/abstractdataframe/join.jl:294
   [9] (::getfield(Base, Symbol("#kw##join")))(::NamedTuple{(:on,),Tuple{Array{Symbol,1}}}, ::typeof(join), ::DataFrame, ::DataFrame) at ./<missing>:0
   [10] #join#6(::Nothing, ::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::KeyedFrame, ::DataFrame) at /home/vagrant/.julia/v0.7/KeyedFrames/src/KeyedFrames.jl:199
   [11] join(::KeyedFrame, ::DataFrame) at /home/vagrant/.julia/v0.7/KeyedFrames/src/KeyedFrames.jl:199
   [12] macro expansion at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:287 [inlined]
   [13] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1022 [inlined]
   [14] macro expansion at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:285 [inlined]
   [15] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1022 [inlined]
   [16] top-level scope at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:6
join: Error During Test at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:288
  Test threw exception DimensionMismatch("all inputs to eachindex must have the same indices, got Base.OneTo(5) and Base.OneTo(0)")
  Expression: isequal(join(df1, kf2), DataFrame(expected))
  DimensionMismatch("all inputs to eachindex must have the same indices, got Base.OneTo(5) and Base.OneTo(0)")
  Stacktrace:
   [1] throw_eachindex_mismatch(::IndexLinear, ::Array{UInt64,1}, ::Vararg{Any,N} where N) at ./errorshow.jl:556
   [2] eachindex at ./abstractarray.jl:875 [inlined]
   [3] eachindex at ./abstractarray.jl:865 [inlined]
   [4] row_group_slots(::Tuple{Array{Int64,1}}, ::Array{UInt64,1}, ::Array{Bool,1}, ::Array{Int64,1}, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:105
   [5] row_group_slots(::DataFrame, ::Array{Int64,1}, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:89
   [6] group_rows(::DataFrame, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:141
   [7] group_rows(::DataFrame) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:140
   [8] #join#138(::Array{Symbol,1}, ::Symbol, ::Bool, ::Function, ::DataFrame, ::DataFrame) at /home/vagrant/.julia/v0.7/DataFrames/src/abstractdataframe/join.jl:294
   [9] (::getfield(Base, Symbol("#kw##join")))(::NamedTuple{(:on,),Tuple{Array{Symbol,1}}}, ::typeof(join), ::DataFrame, ::DataFrame) at ./<missing>:0
   [10] #join#7 at /home/vagrant/.julia/v0.7/KeyedFrames/src/KeyedFrames.jl:207 [inlined]
   [11] join(::DataFrame, ::KeyedFrame) at /home/vagrant/.julia/v0.7/KeyedFrames/src/KeyedFrames.jl:207
   [12] macro expansion at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:288 [inlined]
   [13] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1022 [inlined]
   [14] macro expansion at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:285 [inlined]
   [15] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1022 [inlined]
   [16] top-level scope at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:6
join: Error During Test at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:290
  Test threw exception DimensionMismatch("all inputs to eachindex must have the same indices, got Base.OneTo(10) and Base.OneTo(0)")
  Expression: isequal(join(kf1, kf2; kind=:right), expected)
  DimensionMismatch("all inputs to eachindex must have the same indices, got Base.OneTo(10) and Base.OneTo(0)")
  Stacktrace:
   [1] throw_eachindex_mismatch(::IndexLinear, ::Array{UInt64,1}, ::Vararg{Any,N} where N) at ./errorshow.jl:556
   [2] eachindex at ./abstractarray.jl:875 [inlined]
   [3] eachindex at ./abstractarray.jl:865 [inlined]
   [4] row_group_slots(::Tuple{Array{Int64,1}}, ::Array{UInt64,1}, ::Array{Bool,1}, ::Array{Int64,1}, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:105
   [5] row_group_slots(::DataFrame, ::Array{Int64,1}, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:89
   [6] group_rows(::DataFrame, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:141
   [7] group_rows(::DataFrame) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:140
   [8] #join#138(::Array{Symbol,1}, ::Symbol, ::Bool, ::Function, ::DataFrame, ::DataFrame) at /home/vagrant/.julia/v0.7/DataFrames/src/abstractdataframe/join.jl:304
   [9] (::getfield(Base, Symbol("#kw##join")))(::NamedTuple{(:on, :kind),Tuple{Array{Symbol,1},Symbol}}, ::typeof(join), ::DataFrame, ::DataFrame) at ./<missing>:0
   [10] #join#5(::Nothing, ::Symbol, ::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::KeyedFrame, ::KeyedFrame) at /home/vagrant/.julia/v0.7/KeyedFrames/src/KeyedFrames.jl:179
   [11] (::getfield(Base, Symbol("#kw##join")))(::NamedTuple{(:kind,),Tuple{Symbol}}, ::typeof(join), ::KeyedFrame, ::KeyedFrame) at ./<missing>:0
   [12] macro expansion at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:290 [inlined]
   [13] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1022 [inlined]
   [14] macro expansion at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:285 [inlined]
   [15] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1022 [inlined]
   [16] top-level scope at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:6
join: Error During Test at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:291
  Test threw exception DimensionMismatch("all inputs to eachindex must have the same indices, got Base.OneTo(10) and Base.OneTo(0)")
  Expression: isequal(join(kf1, df2; kind=:right), expected)
  DimensionMismatch("all inputs to eachindex must have the same indices, got Base.OneTo(10) and Base.OneTo(0)")
  Stacktrace:
   [1] throw_eachindex_mismatch(::IndexLinear, ::Array{UInt64,1}, ::Vararg{Any,N} where N) at ./errorshow.jl:556
   [2] eachindex at ./abstractarray.jl:875 [inlined]
   [3] eachindex at ./abstractarray.jl:865 [inlined]
   [4] row_group_slots(::Tuple{Array{Int64,1}}, ::Array{UInt64,1}, ::Array{Bool,1}, ::Array{Int64,1}, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:105
   [5] row_group_slots(::DataFrame, ::Array{Int64,1}, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:89
   [6] group_rows(::DataFrame, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:141
   [7] group_rows(::DataFrame) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:140
   [8] #join#138(::Array{Symbol,1}, ::Symbol, ::Bool, ::Function, ::DataFrame, ::DataFrame) at /home/vagrant/.julia/v0.7/DataFrames/src/abstractdataframe/join.jl:304
   [9] (::getfield(Base, Symbol("#kw##join")))(::NamedTuple{(:on, :kind),Tuple{Array{Symbol,1},Symbol}}, ::typeof(join), ::DataFrame, ::DataFrame) at ./<missing>:0
   [10] #join#6(::Nothing, ::Base.Iterators.Pairs{Symbol,Symbol,Tuple{Symbol},NamedTuple{(:kind,),Tuple{Symbol}}}, ::Function, ::KeyedFrame, ::DataFrame) at /home/vagrant/.julia/v0.7/KeyedFrames/src/KeyedFrames.jl:199
   [11] (::getfield(Base, Symbol("#kw##join")))(::NamedTuple{(:kind,),Tuple{Symbol}}, ::typeof(join), ::KeyedFrame, ::DataFrame) at ./<missing>:0
   [12] macro expansion at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:291 [inlined]
   [13] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1022 [inlined]
   [14] macro expansion at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:285 [inlined]
   [15] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1022 [inlined]
   [16] top-level scope at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:6
join: Error During Test at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:292
  Test threw exception DimensionMismatch("all inputs to eachindex must have the same indices, got Base.OneTo(10) and Base.OneTo(0)")
  Expression: isequal(join(df1, kf2; kind=:right), DataFrame(expected))
  DimensionMismatch("all inputs to eachindex must have the same indices, got Base.OneTo(10) and Base.OneTo(0)")
  Stacktrace:
   [1] throw_eachindex_mismatch(::IndexLinear, ::Array{UInt64,1}, ::Vararg{Any,N} where N) at ./errorshow.jl:556
   [2] eachindex at ./abstractarray.jl:875 [inlined]
   [3] eachindex at ./abstractarray.jl:865 [inlined]
   [4] row_group_slots(::Tuple{Array{Int64,1}}, ::Array{UInt64,1}, ::Array{Bool,1}, ::Array{Int64,1}, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:105
   [5] row_group_slots(::DataFrame, ::Array{Int64,1}, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:89
   [6] group_rows(::DataFrame, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:141
   [7] group_rows(::DataFrame) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:140
   [8] #join#138(::Array{Symbol,1}, ::Symbol, ::Bool, ::Function, ::DataFrame, ::DataFrame) at /home/vagrant/.julia/v0.7/DataFrames/src/abstractdataframe/join.jl:304
   [9] (::getfield(Base, Symbol("#kw##join")))(::NamedTuple{(:on, :kind),Tuple{Array{Symbol,1},Symbol}}, ::typeof(join), ::DataFrame, ::DataFrame) at ./<missing>:0
   [10] #join#7 at /home/vagrant/.julia/v0.7/KeyedFrames/src/KeyedFrames.jl:207 [inlined]
   [11] (::getfield(Base, Symbol("#kw##join")))(::NamedTuple{(:kind,),Tuple{Symbol}}, ::typeof(join), ::DataFrame, ::KeyedFrame) at ./<missing>:0
   [12] macro expansion at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:292 [inlined]
   [13] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1022 [inlined]
   [14] macro expansion at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:285 [inlined]
   [15] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1022 [inlined]
   [16] top-level scope at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:6
join: Error During Test at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:295
  Test threw exception DimensionMismatch("all inputs to eachindex must have the same indices, got Base.OneTo(10) and Base.OneTo(0)")
  Expression: isequal(join(kf2, kf1; kind=:left), expected)
  DimensionMismatch("all inputs to eachindex must have the same indices, got Base.OneTo(10) and Base.OneTo(0)")
  Stacktrace:
   [1] throw_eachindex_mismatch(::IndexLinear, ::Array{UInt64,1}, ::Vararg{Any,N} where N) at ./errorshow.jl:556
   [2] eachindex at ./abstractarray.jl:875 [inlined]
   [3] eachindex at ./abstractarray.jl:865 [inlined]
   [4] row_group_slots(::Tuple{Array{Int64,1}}, ::Array{UInt64,1}, ::Array{Bool,1}, ::Array{Int64,1}, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:105
   [5] row_group_slots(::DataFrame, ::Array{Int64,1}, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:89
   [6] group_rows(::DataFrame, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:141
   [7] group_rows(::DataFrame) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:140
   [8] #join#138(::Array{Symbol,1}, ::Symbol, ::Bool, ::Function, ::DataFrame, ::DataFrame) at /home/vagrant/.julia/v0.7/DataFrames/src/abstractdataframe/join.jl:299
   [9] (::getfield(Base, Symbol("#kw##join")))(::NamedTuple{(:on, :kind),Tuple{Array{Symbol,1},Symbol}}, ::typeof(join), ::DataFrame, ::DataFrame) at ./<missing>:0
   [10] #join#5(::Nothing, ::Symbol, ::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::KeyedFrame, ::KeyedFrame) at /home/vagrant/.julia/v0.7/KeyedFrames/src/KeyedFrames.jl:179
   [11] (::getfield(Base, Symbol("#kw##join")))(::NamedTuple{(:kind,),Tuple{Symbol}}, ::typeof(join), ::KeyedFrame, ::KeyedFrame) at ./<missing>:0
   [12] macro expansion at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:295 [inlined]
   [13] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1022 [inlined]
   [14] macro expansion at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:285 [inlined]
   [15] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1022 [inlined]
   [16] top-level scope at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:6
join: Error During Test at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:297
  Test threw exception DimensionMismatch("all inputs to eachindex must have the same indices, got Base.OneTo(10) and Base.OneTo(0)")
  Expression: isequal(join(kf2, df1; kind=:left), expected)
  DimensionMismatch("all inputs to eachindex must have the same indices, got Base.OneTo(10) and Base.OneTo(0)")
  Stacktrace:
   [1] throw_eachindex_mismatch(::IndexLinear, ::Array{UInt64,1}, ::Vararg{Any,N} where N) at ./errorshow.jl:556
   [2] eachindex at ./abstractarray.jl:875 [inlined]
   [3] eachindex at ./abstractarray.jl:865 [inlined]
   [4] row_group_slots(::Tuple{Array{Int64,1}}, ::Array{UInt64,1}, ::Array{Bool,1}, ::Array{Int64,1}, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:105
   [5] row_group_slots(::DataFrame, ::Array{Int64,1}, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:89
   [6] group_rows(::DataFrame, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:141
   [7] group_rows(::DataFrame) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:140
   [8] #join#138(::Array{Symbol,1}, ::Symbol, ::Bool, ::Function, ::DataFrame, ::DataFrame) at /home/vagrant/.julia/v0.7/DataFrames/src/abstractdataframe/join.jl:299
   [9] (::getfield(Base, Symbol("#kw##join")))(::NamedTuple{(:on, :kind),Tuple{Array{Symbol,1},Symbol}}, ::typeof(join), ::DataFrame, ::DataFrame) at ./<missing>:0
   [10] #join#6(::Nothing, ::Base.Iterators.Pairs{Symbol,Symbol,Tuple{Symbol},NamedTuple{(:kind,),Tuple{Symbol}}}, ::Function, ::KeyedFrame, ::DataFrame) at /home/vagrant/.julia/v0.7/KeyedFrames/src/KeyedFrames.jl:199
   [11] (::getfield(Base, Symbol("#kw##join")))(::NamedTuple{(:kind,),Tuple{Symbol}}, ::typeof(join), ::KeyedFrame, ::DataFrame) at ./<missing>:0
   [12] macro expansion at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:297 [inlined]
   [13] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1022 [inlined]
   [14] macro expansion at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:285 [inlined]
   [15] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1022 [inlined]
   [16] top-level scope at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:6
join: Error During Test at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:298
  Test threw exception DimensionMismatch("all inputs to eachindex must have the same indices, got Base.OneTo(10) and Base.OneTo(0)")
  Expression: isequal(join(df2, kf1; kind=:left), DataFrame(expected))
  DimensionMismatch("all inputs to eachindex must have the same indices, got Base.OneTo(10) and Base.OneTo(0)")
  Stacktrace:
   [1] throw_eachindex_mismatch(::IndexLinear, ::Array{UInt64,1}, ::Vararg{Any,N} where N) at ./errorshow.jl:556
   [2] eachindex at ./abstractarray.jl:875 [inlined]
   [3] eachindex at ./abstractarray.jl:865 [inlined]
   [4] row_group_slots(::Tuple{Array{Int64,1}}, ::Array{UInt64,1}, ::Array{Bool,1}, ::Array{Int64,1}, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:105
   [5] row_group_slots(::DataFrame, ::Array{Int64,1}, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:89
   [6] group_rows(::DataFrame, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:141
   [7] group_rows(::DataFrame) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:140
   [8] #join#138(::Array{Symbol,1}, ::Symbol, ::Bool, ::Function, ::DataFrame, ::DataFrame) at /home/vagrant/.julia/v0.7/DataFrames/src/abstractdataframe/join.jl:299
   [9] (::getfield(Base, Symbol("#kw##join")))(::NamedTuple{(:on, :kind),Tuple{Array{Symbol,1},Symbol}}, ::typeof(join), ::DataFrame, ::DataFrame) at ./<missing>:0
   [10] #join#7 at /home/vagrant/.julia/v0.7/KeyedFrames/src/KeyedFrames.jl:207 [inlined]
   [11] (::getfield(Base, Symbol("#kw##join")))(::NamedTuple{(:kind,),Tuple{Symbol}}, ::typeof(join), ::DataFrame, ::KeyedFrame) at ./<missing>:0
   [12] macro expansion at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:298 [inlined]
   [13] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1022 [inlined]
   [14] macro expansion at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:285 [inlined]
   [15] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1022 [inlined]
   [16] top-level scope at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:6
join: Error During Test at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:303
  Test threw exception DimensionMismatch("all inputs to eachindex must have the same indices, got Base.OneTo(5) and Base.OneTo(0)")
  Expression: isequal(join(kf1, kf2; kind=:outer), expected)
  DimensionMismatch("all inputs to eachindex must have the same indices, got Base.OneTo(5) and Base.OneTo(0)")
  Stacktrace:
   [1] throw_eachindex_mismatch(::IndexLinear, ::Array{UInt64,1}, ::Vararg{Any,N} where N) at ./errorshow.jl:556
   [2] eachindex at ./abstractarray.jl:875 [inlined]
   [3] eachindex at ./abstractarray.jl:865 [inlined]
   [4] row_group_slots(::Tuple{Array{Int64,1}}, ::Array{UInt64,1}, ::Array{Bool,1}, ::Array{Int64,1}, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:105
   [5] row_group_slots(::DataFrame, ::Array{Int64,1}, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:89
   [6] group_rows(::DataFrame, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:141
   [7] group_rows(::DataFrame) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:140
   [8] #join#138(::Array{Symbol,1}, ::Symbol, ::Bool, ::Function, ::DataFrame, ::DataFrame) at /home/vagrant/.julia/v0.7/DataFrames/src/abstractdataframe/join.jl:309
   [9] (::getfield(Base, Symbol("#kw##join")))(::NamedTuple{(:on, :kind),Tuple{Array{Symbol,1},Symbol}}, ::typeof(join), ::DataFrame, ::DataFrame) at ./<missing>:0
   [10] #join#5(::Nothing, ::Symbol, ::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::KeyedFrame, ::KeyedFrame) at /home/vagrant/.julia/v0.7/KeyedFrames/src/KeyedFrames.jl:179
   [11] (::getfield(Base, Symbol("#kw##join")))(::NamedTuple{(:kind,),Tuple{Symbol}}, ::typeof(join), ::KeyedFrame, ::KeyedFrame) at ./<missing>:0
   [12] macro expansion at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:303 [inlined]
   [13] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1022 [inlined]
   [14] macro expansion at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:285 [inlined]
   [15] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1022 [inlined]
   [16] top-level scope at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:6
join: Error During Test at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:304
  Test threw exception DimensionMismatch("all inputs to eachindex must have the same indices, got Base.OneTo(5) and Base.OneTo(0)")
  Expression: isequal(join(kf1, df2; kind=:outer), expected)
  DimensionMismatch("all inputs to eachindex must have the same indices, got Base.OneTo(5) and Base.OneTo(0)")
  Stacktrace:
   [1] throw_eachindex_mismatch(::IndexLinear, ::Array{UInt64,1}, ::Vararg{Any,N} where N) at ./errorshow.jl:556
   [2] eachindex at ./abstractarray.jl:875 [inlined]
   [3] eachindex at ./abstractarray.jl:865 [inlined]
   [4] row_group_slots(::Tuple{Array{Int64,1}}, ::Array{UInt64,1}, ::Array{Bool,1}, ::Array{Int64,1}, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:105
   [5] row_group_slots(::DataFrame, ::Array{Int64,1}, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:89
   [6] group_rows(::DataFrame, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:141
   [7] group_rows(::DataFrame) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:140
   [8] #join#138(::Array{Symbol,1}, ::Symbol, ::Bool, ::Function, ::DataFrame, ::DataFrame) at /home/vagrant/.julia/v0.7/DataFrames/src/abstractdataframe/join.jl:309
   [9] (::getfield(Base, Symbol("#kw##join")))(::NamedTuple{(:on, :kind),Tuple{Array{Symbol,1},Symbol}}, ::typeof(join), ::DataFrame, ::DataFrame) at ./<missing>:0
   [10] #join#6(::Nothing, ::Base.Iterators.Pairs{Symbol,Symbol,Tuple{Symbol},NamedTuple{(:kind,),Tuple{Symbol}}}, ::Function, ::KeyedFrame, ::DataFrame) at /home/vagrant/.julia/v0.7/KeyedFrames/src/KeyedFrames.jl:199
   [11] (::getfield(Base, Symbol("#kw##join")))(::NamedTuple{(:kind,),Tuple{Symbol}}, ::typeof(join), ::KeyedFrame, ::DataFrame) at ./<missing>:0
   [12] macro expansion at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:304 [inlined]
   [13] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1022 [inlined]
   [14] macro expansion at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:285 [inlined]
   [15] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1022 [inlined]
   [16] top-level scope at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:6
join: Error During Test at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:305
  Test threw exception DimensionMismatch("all inputs to eachindex must have the same indices, got Base.OneTo(5) and Base.OneTo(0)")
  Expression: isequal(join(df1, kf2; kind=:outer), DataFrame(expected))
  DimensionMismatch("all inputs to eachindex must have the same indices, got Base.OneTo(5) and Base.OneTo(0)")
  Stacktrace:
   [1] throw_eachindex_mismatch(::IndexLinear, ::Array{UInt64,1}, ::Vararg{Any,N} where N) at ./errorshow.jl:556
   [2] eachindex at ./abstractarray.jl:875 [inlined]
   [3] eachindex at ./abstractarray.jl:865 [inlined]
   [4] row_group_slots(::Tuple{Array{Int64,1}}, ::Array{UInt64,1}, ::Array{Bool,1}, ::Array{Int64,1}, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:105
   [5] row_group_slots(::DataFrame, ::Array{Int64,1}, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:89
   [6] group_rows(::DataFrame, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:141
   [7] group_rows(::DataFrame) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:140
   [8] #join#138(::Array{Symbol,1}, ::Symbol, ::Bool, ::Function, ::DataFrame, ::DataFrame) at /home/vagrant/.julia/v0.7/DataFrames/src/abstractdataframe/join.jl:309
   [9] (::getfield(Base, Symbol("#kw##join")))(::NamedTuple{(:on, :kind),Tuple{Array{Symbol,1},Symbol}}, ::typeof(join), ::DataFrame, ::DataFrame) at ./<missing>:0
   [10] #join#7 at /home/vagrant/.julia/v0.7/KeyedFrames/src/KeyedFrames.jl:207 [inlined]
   [11] (::getfield(Base, Symbol("#kw##join")))(::NamedTuple{(:kind,),Tuple{Symbol}}, ::typeof(join), ::DataFrame, ::KeyedFrame) at ./<missing>:0
   [12] macro expansion at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:305 [inlined]
   [13] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1022 [inlined]
   [14] macro expansion at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:285 [inlined]
   [15] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1022 [inlined]
   [16] top-level scope at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:6
join: Error During Test at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:307
  Test threw exception DimensionMismatch("all inputs to eachindex must have the same indices, got Base.OneTo(5) and Base.OneTo(0)")
  Expression: isequal(join(kf1, kf2; kind=:left), expected)
  DimensionMismatch("all inputs to eachindex must have the same indices, got Base.OneTo(5) and Base.OneTo(0)")
  Stacktrace:
   [1] throw_eachindex_mismatch(::IndexLinear, ::Array{UInt64,1}, ::Vararg{Any,N} where N) at ./errorshow.jl:556
   [2] eachindex at ./abstractarray.jl:875 [inlined]
   [3] eachindex at ./abstractarray.jl:865 [inlined]
   [4] row_group_slots(::Tuple{Array{Int64,1}}, ::Array{UInt64,1}, ::Array{Bool,1}, ::Array{Int64,1}, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:105
   [5] row_group_slots(::DataFrame, ::Array{Int64,1}, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:89
   [6] group_rows(::DataFrame, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:141
   [7] group_rows(::DataFrame) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:140
   [8] #join#138(::Array{Symbol,1}, ::Symbol, ::Bool, ::Function, ::DataFrame, ::DataFrame) at /home/vagrant/.julia/v0.7/DataFrames/src/abstractdataframe/join.jl:299
   [9] (::getfield(Base, Symbol("#kw##join")))(::NamedTuple{(:on, :kind),Tuple{Array{Symbol,1},Symbol}}, ::typeof(join), ::DataFrame, ::DataFrame) at ./<missing>:0
   [10] #join#5(::Nothing, ::Symbol, ::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::KeyedFrame, ::KeyedFrame) at /home/vagrant/.julia/v0.7/KeyedFrames/src/KeyedFrames.jl:179
   [11] (::getfield(Base, Symbol("#kw##join")))(::NamedTuple{(:kind,),Tuple{Symbol}}, ::typeof(join), ::KeyedFrame, ::KeyedFrame) at ./<missing>:0
   [12] macro expansion at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:307 [inlined]
   [13] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1022 [inlined]
   [14] macro expansion at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:285 [inlined]
   [15] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1022 [inlined]
   [16] top-level scope at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:6
join: Error During Test at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:308
  Test threw exception DimensionMismatch("all inputs to eachindex must have the same indices, got Base.OneTo(5) and Base.OneTo(0)")
  Expression: isequal(join(kf1, df2; kind=:left), expected)
  DimensionMismatch("all inputs to eachindex must have the same indices, got Base.OneTo(5) and Base.OneTo(0)")
  Stacktrace:
   [1] throw_eachindex_mismatch(::IndexLinear, ::Array{UInt64,1}, ::Vararg{Any,N} where N) at ./errorshow.jl:556
   [2] eachindex at ./abstractarray.jl:875 [inlined]
   [3] eachindex at ./abstractarray.jl:865 [inlined]
   [4] row_group_slots(::Tuple{Array{Int64,1}}, ::Array{UInt64,1}, ::Array{Bool,1}, ::Array{Int64,1}, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:105
   [5] row_group_slots(::DataFrame, ::Array{Int64,1}, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:89
   [6] group_rows(::DataFrame, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:141
   [7] group_rows(::DataFrame) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:140
   [8] #join#138(::Array{Symbol,1}, ::Symbol, ::Bool, ::Function, ::DataFrame, ::DataFrame) at /home/vagrant/.julia/v0.7/DataFrames/src/abstractdataframe/join.jl:299
   [9] (::getfield(Base, Symbol("#kw##join")))(::NamedTuple{(:on, :kind),Tuple{Array{Symbol,1},Symbol}}, ::typeof(join), ::DataFrame, ::DataFrame) at ./<missing>:0
   [10] #join#6(::Nothing, ::Base.Iterators.Pairs{Symbol,Symbol,Tuple{Symbol},NamedTuple{(:kind,),Tuple{Symbol}}}, ::Function, ::KeyedFrame, ::DataFrame) at /home/vagrant/.julia/v0.7/KeyedFrames/src/KeyedFrames.jl:199
   [11] (::getfield(Base, Symbol("#kw##join")))(::NamedTuple{(:kind,),Tuple{Symbol}}, ::typeof(join), ::KeyedFrame, ::DataFrame) at ./<missing>:0
   [12] macro expansion at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:308 [inlined]
   [13] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1022 [inlined]
   [14] macro expansion at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:285 [inlined]
   [15] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1022 [inlined]
   [16] top-level scope at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:6
join: Error During Test at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:309
  Test threw exception DimensionMismatch("all inputs to eachindex must have the same indices, got Base.OneTo(5) and Base.OneTo(0)")
  Expression: isequal(join(df1, kf2; kind=:left), DataFrame(expected))
  DimensionMismatch("all inputs to eachindex must have the same indices, got Base.OneTo(5) and Base.OneTo(0)")
  Stacktrace:
   [1] throw_eachindex_mismatch(::IndexLinear, ::Array{UInt64,1}, ::Vararg{Any,N} where N) at ./errorshow.jl:556
   [2] eachindex at ./abstractarray.jl:875 [inlined]
   [3] eachindex at ./abstractarray.jl:865 [inlined]
   [4] row_group_slots(::Tuple{Array{Int64,1}}, ::Array{UInt64,1}, ::Array{Bool,1}, ::Array{Int64,1}, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:105
   [5] row_group_slots(::DataFrame, ::Array{Int64,1}, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:89
   [6] group_rows(::DataFrame, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:141
   [7] group_rows(::DataFrame) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:140
   [8] #join#138(::Array{Symbol,1}, ::Symbol, ::Bool, ::Function, ::DataFrame, ::DataFrame) at /home/vagrant/.julia/v0.7/DataFrames/src/abstractdataframe/join.jl:299
   [9] (::getfield(Base, Symbol("#kw##join")))(::NamedTuple{(:on, :kind),Tuple{Array{Symbol,1},Symbol}}, ::typeof(join), ::DataFrame, ::DataFrame) at ./<missing>:0
   [10] #join#7 at /home/vagrant/.julia/v0.7/KeyedFrames/src/KeyedFrames.jl:207 [inlined]
   [11] (::getfield(Base, Symbol("#kw##join")))(::NamedTuple{(:kind,),Tuple{Symbol}}, ::typeof(join), ::DataFrame, ::KeyedFrame) at ./<missing>:0
   [12] macro expansion at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:309 [inlined]
   [13] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1022 [inlined]
   [14] macro expansion at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:285 [inlined]
   [15] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1022 [inlined]
   [16] top-level scope at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:6
join: Error During Test at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:314
  Test threw exception DimensionMismatch("all inputs to eachindex must have the same indices, got Base.OneTo(5) and Base.OneTo(0)")
  Expression: isequal(join(kf2, kf1; kind=:right), expected)
  DimensionMismatch("all inputs to eachindex must have the same indices, got Base.OneTo(5) and Base.OneTo(0)")
  Stacktrace:
   [1] throw_eachindex_mismatch(::IndexLinear, ::Array{UInt64,1}, ::Vararg{Any,N} where N) at ./errorshow.jl:556
   [2] eachindex at ./abstractarray.jl:875 [inlined]
   [3] eachindex at ./abstractarray.jl:865 [inlined]
   [4] row_group_slots(::Tuple{Array{Int64,1}}, ::Array{UInt64,1}, ::Array{Bool,1}, ::Array{Int64,1}, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:105
   [5] row_group_slots(::DataFrame, ::Array{Int64,1}, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:89
   [6] group_rows(::DataFrame, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:141
   [7] group_rows(::DataFrame) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:140
   [8] #join#138(::Array{Symbol,1}, ::Symbol, ::Bool, ::Function, ::DataFrame, ::DataFrame) at /home/vagrant/.julia/v0.7/DataFrames/src/abstractdataframe/join.jl:304
   [9] (::getfield(Base, Symbol("#kw##join")))(::NamedTuple{(:on, :kind),Tuple{Array{Symbol,1},Symbol}}, ::typeof(join), ::DataFrame, ::DataFrame) at ./<missing>:0
   [10] #join#5(::Nothing, ::Symbol, ::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::KeyedFrame, ::KeyedFrame) at /home/vagrant/.julia/v0.7/KeyedFrames/src/KeyedFrames.jl:179
   [11] (::getfield(Base, Symbol("#kw##join")))(::NamedTuple{(:kind,),Tuple{Symbol}}, ::typeof(join), ::KeyedFrame, ::KeyedFrame) at ./<missing>:0
   [12] macro expansion at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:314 [inlined]
   [13] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1022 [inlined]
   [14] macro expansion at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:285 [inlined]
   [15] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1022 [inlined]
   [16] top-level scope at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:6
join: Error During Test at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:318
  Test threw exception DimensionMismatch("all inputs to eachindex must have the same indices, got Base.OneTo(5) and Base.OneTo(0)")
  Expression: isequal(join(kf2, df1; kind=:right), expected)
  DimensionMismatch("all inputs to eachindex must have the same indices, got Base.OneTo(5) and Base.OneTo(0)")
  Stacktrace:
   [1] throw_eachindex_mismatch(::IndexLinear, ::Array{UInt64,1}, ::Vararg{Any,N} where N) at ./errorshow.jl:556
   [2] eachindex at ./abstractarray.jl:875 [inlined]
   [3] eachindex at ./abstractarray.jl:865 [inlined]
   [4] row_group_slots(::Tuple{Array{Int64,1}}, ::Array{UInt64,1}, ::Array{Bool,1}, ::Array{Int64,1}, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:105
   [5] row_group_slots(::DataFrame, ::Array{Int64,1}, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:89
   [6] group_rows(::DataFrame, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:141
   [7] group_rows(::DataFrame) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:140
   [8] #join#138(::Array{Symbol,1}, ::Symbol, ::Bool, ::Function, ::DataFrame, ::DataFrame) at /home/vagrant/.julia/v0.7/DataFrames/src/abstractdataframe/join.jl:304
   [9] (::getfield(Base, Symbol("#kw##join")))(::NamedTuple{(:on, :kind),Tuple{Array{Symbol,1},Symbol}}, ::typeof(join), ::DataFrame, ::DataFrame) at ./<missing>:0
   [10] #join#6(::Nothing, ::Base.Iterators.Pairs{Symbol,Symbol,Tuple{Symbol},NamedTuple{(:kind,),Tuple{Symbol}}}, ::Function, ::KeyedFrame, ::DataFrame) at /home/vagrant/.julia/v0.7/KeyedFrames/src/KeyedFrames.jl:199
   [11] (::getfield(Base, Symbol("#kw##join")))(::NamedTuple{(:kind,),Tuple{Symbol}}, ::typeof(join), ::KeyedFrame, ::DataFrame) at ./<missing>:0
   [12] macro expansion at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:318 [inlined]
   [13] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1022 [inlined]
   [14] macro expansion at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:285 [inlined]
   [15] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1022 [inlined]
   [16] top-level scope at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:6
join: Error During Test at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:320
  Test threw exception DimensionMismatch("all inputs to eachindex must have the same indices, got Base.OneTo(5) and Base.OneTo(0)")
  Expression: isequal(join(df2, kf1; kind=:right), DataFrame(expected))
  DimensionMismatch("all inputs to eachindex must have the same indices, got Base.OneTo(5) and Base.OneTo(0)")
  Stacktrace:
   [1] throw_eachindex_mismatch(::IndexLinear, ::Array{UInt64,1}, ::Vararg{Any,N} where N) at ./errorshow.jl:556
   [2] eachindex at ./abstractarray.jl:875 [inlined]
   [3] eachindex at ./abstractarray.jl:865 [inlined]
   [4] row_group_slots(::Tuple{Array{Int64,1}}, ::Array{UInt64,1}, ::Array{Bool,1}, ::Array{Int64,1}, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:105
   [5] row_group_slots(::DataFrame, ::Array{Int64,1}, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:89
   [6] group_rows(::DataFrame, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:141
   [7] group_rows(::DataFrame) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:140
   [8] #join#138(::Array{Symbol,1}, ::Symbol, ::Bool, ::Function, ::DataFrame, ::DataFrame) at /home/vagrant/.julia/v0.7/DataFrames/src/abstractdataframe/join.jl:304
   [9] (::getfield(Base, Symbol("#kw##join")))(::NamedTuple{(:on, :kind),Tuple{Array{Symbol,1},Symbol}}, ::typeof(join), ::DataFrame, ::DataFrame) at ./<missing>:0
   [10] #join#7 at /home/vagrant/.julia/v0.7/KeyedFrames/src/KeyedFrames.jl:207 [inlined]
   [11] (::getfield(Base, Symbol("#kw##join")))(::NamedTuple{(:kind,),Tuple{Symbol}}, ::typeof(join), ::DataFrame, ::KeyedFrame) at ./<missing>:0
   [12] macro expansion at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:320 [inlined]
   [13] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1022 [inlined]
   [14] macro expansion at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:285 [inlined]
   [15] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1022 [inlined]
   [16] top-level scope at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:6
join: Error During Test at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:323
  Test threw exception DimensionMismatch("all inputs to eachindex must have the same indices, got Base.OneTo(5) and Base.OneTo(0)")
  Expression: isequal(join(kf1, kf2; kind=:semi), expected)
  DimensionMismatch("all inputs to eachindex must have the same indices, got Base.OneTo(5) and Base.OneTo(0)")
  Stacktrace:
   [1] throw_eachindex_mismatch(::IndexLinear, ::Array{UInt64,1}, ::Vararg{Any,N} where N) at ./errorshow.jl:556
   [2] eachindex at ./abstractarray.jl:875 [inlined]
   [3] eachindex at ./abstractarray.jl:865 [inlined]
   [4] row_group_slots(::Tuple{Array{Int64,1}}, ::Array{UInt64,1}, ::Array{Bool,1}, ::Array{Int64,1}, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:105
   [5] row_group_slots(::DataFrame, ::Array{Int64,1}, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:89
   [6] group_rows(::DataFrame, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:141
   [7] group_rows(::DataFrame) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:140
   [8] #join#138(::Array{Symbol,1}, ::Symbol, ::Bool, ::Function, ::DataFrame, ::DataFrame) at /home/vagrant/.julia/v0.7/DataFrames/src/abstractdataframe/join.jl:315
   [9] (::getfield(Base, Symbol("#kw##join")))(::NamedTuple{(:on, :kind),Tuple{Array{Symbol,1},Symbol}}, ::typeof(join), ::DataFrame, ::DataFrame) at ./<missing>:0
   [10] #join#5(::Nothing, ::Symbol, ::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::KeyedFrame, ::KeyedFrame) at /home/vagrant/.julia/v0.7/KeyedFrames/src/KeyedFrames.jl:179
   [11] (::getfield(Base, Symbol("#kw##join")))(::NamedTuple{(:kind,),Tuple{Symbol}}, ::typeof(join), ::KeyedFrame, ::KeyedFrame) at ./<missing>:0
   [12] macro expansion at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:323 [inlined]
   [13] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1022 [inlined]
   [14] macro expansion at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:285 [inlined]
   [15] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1022 [inlined]
   [16] top-level scope at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:6
join: Error During Test at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:324
  Test threw exception DimensionMismatch("all inputs to eachindex must have the same indices, got Base.OneTo(5) and Base.OneTo(0)")
  Expression: isequal(join(kf1, df2; kind=:semi), expected)
  DimensionMismatch("all inputs to eachindex must have the same indices, got Base.OneTo(5) and Base.OneTo(0)")
  Stacktrace:
   [1] throw_eachindex_mismatch(::IndexLinear, ::Array{UInt64,1}, ::Vararg{Any,N} where N) at ./errorshow.jl:556
   [2] eachindex at ./abstractarray.jl:875 [inlined]
   [3] eachindex at ./abstractarray.jl:865 [inlined]
   [4] row_group_slots(::Tuple{Array{Int64,1}}, ::Array{UInt64,1}, ::Array{Bool,1}, ::Array{Int64,1}, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:105
   [5] row_group_slots(::DataFrame, ::Array{Int64,1}, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:89
   [6] group_rows(::DataFrame, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:141
   [7] group_rows(::DataFrame) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:140
   [8] #join#138(::Array{Symbol,1}, ::Symbol, ::Bool, ::Function, ::DataFrame, ::DataFrame) at /home/vagrant/.julia/v0.7/DataFrames/src/abstractdataframe/join.jl:315
   [9] (::getfield(Base, Symbol("#kw##join")))(::NamedTuple{(:on, :kind),Tuple{Array{Symbol,1},Symbol}}, ::typeof(join), ::DataFrame, ::DataFrame) at ./<missing>:0
   [10] #join#6(::Nothing, ::Base.Iterators.Pairs{Symbol,Symbol,Tuple{Symbol},NamedTuple{(:kind,),Tuple{Symbol}}}, ::Function, ::KeyedFrame, ::DataFrame) at /home/vagrant/.julia/v0.7/KeyedFrames/src/KeyedFrames.jl:199
   [11] (::getfield(Base, Symbol("#kw##join")))(::NamedTuple{(:kind,),Tuple{Symbol}}, ::typeof(join), ::KeyedFrame, ::DataFrame) at ./<missing>:0
   [12] macro expansion at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:324 [inlined]
   [13] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1022 [inlined]
   [14] macro expansion at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:285 [inlined]
   [15] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1022 [inlined]
   [16] top-level scope at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:6
join: Error During Test at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:325
  Test threw exception DimensionMismatch("all inputs to eachindex must have the same indices, got Base.OneTo(5) and Base.OneTo(0)")
  Expression: isequal(join(df1, kf2; kind=:semi), DataFrame(expected))
  DimensionMismatch("all inputs to eachindex must have the same indices, got Base.OneTo(5) and Base.OneTo(0)")
  Stacktrace:
   [1] throw_eachindex_mismatch(::IndexLinear, ::Array{UInt64,1}, ::Vararg{Any,N} where N) at ./errorshow.jl:556
   [2] eachindex at ./abstractarray.jl:875 [inlined]
   [3] eachindex at ./abstractarray.jl:865 [inlined]
   [4] row_group_slots(::Tuple{Array{Int64,1}}, ::Array{UInt64,1}, ::Array{Bool,1}, ::Array{Int64,1}, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:105
   [5] row_group_slots(::DataFrame, ::Array{Int64,1}, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:89
   [6] group_rows(::DataFrame, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:141
   [7] group_rows(::DataFrame) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:140
   [8] #join#138(::Array{Symbol,1}, ::Symbol, ::Bool, ::Function, ::DataFrame, ::DataFrame) at /home/vagrant/.julia/v0.7/DataFrames/src/abstractdataframe/join.jl:315
   [9] (::getfield(Base, Symbol("#kw##join")))(::NamedTuple{(:on, :kind),Tuple{Array{Symbol,1},Symbol}}, ::typeof(join), ::DataFrame, ::DataFrame) at ./<missing>:0
   [10] #join#7 at /home/vagrant/.julia/v0.7/KeyedFrames/src/KeyedFrames.jl:207 [inlined]
   [11] (::getfield(Base, Symbol("#kw##join")))(::NamedTuple{(:kind,),Tuple{Symbol}}, ::typeof(join), ::DataFrame, ::KeyedFrame) at ./<missing>:0
   [12] macro expansion at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:325 [inlined]
   [13] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1022 [inlined]
   [14] macro expansion at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:285 [inlined]
   [15] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1022 [inlined]
   [16] top-level scope at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:6
join: Error During Test at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:328
  Test threw exception DimensionMismatch("all inputs to eachindex must have the same indices, got Base.OneTo(10) and Base.OneTo(0)")
  Expression: isequal(join(kf2, kf1; kind=:semi), expected)
  DimensionMismatch("all inputs to eachindex must have the same indices, got Base.OneTo(10) and Base.OneTo(0)")
  Stacktrace:
   [1] throw_eachindex_mismatch(::IndexLinear, ::Array{UInt64,1}, ::Vararg{Any,N} where N) at ./errorshow.jl:556
   [2] eachindex at ./abstractarray.jl:875 [inlined]
   [3] eachindex at ./abstractarray.jl:865 [inlined]
   [4] row_group_slots(::Tuple{Array{Int64,1}}, ::Array{UInt64,1}, ::Array{Bool,1}, ::Array{Int64,1}, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:105
   [5] row_group_slots(::DataFrame, ::Array{Int64,1}, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:89
   [6] group_rows(::DataFrame, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:141
   [7] group_rows(::DataFrame) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:140
   [8] #join#138(::Array{Symbol,1}, ::Symbol, ::Bool, ::Function, ::DataFrame, ::DataFrame) at /home/vagrant/.julia/v0.7/DataFrames/src/abstractdataframe/join.jl:315
   [9] (::getfield(Base, Symbol("#kw##join")))(::NamedTuple{(:on, :kind),Tuple{Array{Symbol,1},Symbol}}, ::typeof(join), ::DataFrame, ::DataFrame) at ./<missing>:0
   [10] #join#5(::Nothing, ::Symbol, ::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::KeyedFrame, ::KeyedFrame) at /home/vagrant/.julia/v0.7/KeyedFrames/src/KeyedFrames.jl:179
   [11] (::getfield(Base, Symbol("#kw##join")))(::NamedTuple{(:kind,),Tuple{Symbol}}, ::typeof(join), ::KeyedFrame, ::KeyedFrame) at ./<missing>:0
   [12] macro expansion at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:328 [inlined]
   [13] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1022 [inlined]
   [14] macro expansion at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:285 [inlined]
   [15] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1022 [inlined]
   [16] top-level scope at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:6
join: Error During Test at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:329
  Test threw exception DimensionMismatch("all inputs to eachindex must have the same indices, got Base.OneTo(10) and Base.OneTo(0)")
  Expression: isequal(join(kf2, df1; kind=:semi), expected)
  DimensionMismatch("all inputs to eachindex must have the same indices, got Base.OneTo(10) and Base.OneTo(0)")
  Stacktrace:
   [1] throw_eachindex_mismatch(::IndexLinear, ::Array{UInt64,1}, ::Vararg{Any,N} where N) at ./errorshow.jl:556
   [2] eachindex at ./abstractarray.jl:875 [inlined]
   [3] eachindex at ./abstractarray.jl:865 [inlined]
   [4] row_group_slots(::Tuple{Array{Int64,1}}, ::Array{UInt64,1}, ::Array{Bool,1}, ::Array{Int64,1}, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:105
   [5] row_group_slots(::DataFrame, ::Array{Int64,1}, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:89
   [6] group_rows(::DataFrame, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:141
   [7] group_rows(::DataFrame) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:140
   [8] #join#138(::Array{Symbol,1}, ::Symbol, ::Bool, ::Function, ::DataFrame, ::DataFrame) at /home/vagrant/.julia/v0.7/DataFrames/src/abstractdataframe/join.jl:315
   [9] (::getfield(Base, Symbol("#kw##join")))(::NamedTuple{(:on, :kind),Tuple{Array{Symbol,1},Symbol}}, ::typeof(join), ::DataFrame, ::DataFrame) at ./<missing>:0
   [10] #join#6(::Nothing, ::Base.Iterators.Pairs{Symbol,Symbol,Tuple{Symbol},NamedTuple{(:kind,),Tuple{Symbol}}}, ::Function, ::KeyedFrame, ::DataFrame) at /home/vagrant/.julia/v0.7/KeyedFrames/src/KeyedFrames.jl:199
   [11] (::getfield(Base, Symbol("#kw##join")))(::NamedTuple{(:kind,),Tuple{Symbol}}, ::typeof(join), ::KeyedFrame, ::DataFrame) at ./<missing>:0
   [12] macro expansion at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:329 [inlined]
   [13] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1022 [inlined]
   [14] macro expansion at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:285 [inlined]
   [15] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1022 [inlined]
   [16] top-level scope at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:6
join: Error During Test at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:330
  Test threw exception DimensionMismatch("all inputs to eachindex must have the same indices, got Base.OneTo(10) and Base.OneTo(0)")
  Expression: isequal(join(df2, kf1; kind=:semi), DataFrame(expected))
  DimensionMismatch("all inputs to eachindex must have the same indices, got Base.OneTo(10) and Base.OneTo(0)")
  Stacktrace:
   [1] throw_eachindex_mismatch(::IndexLinear, ::Array{UInt64,1}, ::Vararg{Any,N} where N) at ./errorshow.jl:556
   [2] eachindex at ./abstractarray.jl:875 [inlined]
   [3] eachindex at ./abstractarray.jl:865 [inlined]
   [4] row_group_slots(::Tuple{Array{Int64,1}}, ::Array{UInt64,1}, ::Array{Bool,1}, ::Array{Int64,1}, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:105
   [5] row_group_slots(::DataFrame, ::Array{Int64,1}, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:89
   [6] group_rows(::DataFrame, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:141
   [7] group_rows(::DataFrame) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:140
   [8] #join#138(::Array{Symbol,1}, ::Symbol, ::Bool, ::Function, ::DataFrame, ::DataFrame) at /home/vagrant/.julia/v0.7/DataFrames/src/abstractdataframe/join.jl:315
   [9] (::getfield(Base, Symbol("#kw##join")))(::NamedTuple{(:on, :kind),Tuple{Array{Symbol,1},Symbol}}, ::typeof(join), ::DataFrame, ::DataFrame) at ./<missing>:0
   [10] #join#7 at /home/vagrant/.julia/v0.7/KeyedFrames/src/KeyedFrames.jl:207 [inlined]
   [11] (::getfield(Base, Symbol("#kw##join")))(::NamedTuple{(:kind,),Tuple{Symbol}}, ::typeof(join), ::DataFrame, ::KeyedFrame) at ./<missing>:0
   [12] macro expansion at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:330 [inlined]
   [13] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1022 [inlined]
   [14] macro expansion at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:285 [inlined]
   [15] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1022 [inlined]
   [16] top-level scope at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:6
join: Error During Test at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:333
  Test threw exception DimensionMismatch("all inputs to eachindex must have the same indices, got Base.OneTo(5) and Base.OneTo(0)")
  Expression: isequal(join(kf1, kf2; kind=:anti), expected)
  DimensionMismatch("all inputs to eachindex must have the same indices, got Base.OneTo(5) and Base.OneTo(0)")
  Stacktrace:
   [1] throw_eachindex_mismatch(::IndexLinear, ::Array{UInt64,1}, ::Vararg{Any,N} where N) at ./errorshow.jl:556
   [2] eachindex at ./abstractarray.jl:875 [inlined]
   [3] eachindex at ./abstractarray.jl:865 [inlined]
   [4] row_group_slots(::Tuple{Array{Int64,1}}, ::Array{UInt64,1}, ::Array{Bool,1}, ::Array{Int64,1}, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:105
   [5] row_group_slots(::DataFrame, ::Array{Int64,1}, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:89
   [6] group_rows(::DataFrame, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:141
   [7] group_rows(::DataFrame) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:140
   [8] #join#138(::Array{Symbol,1}, ::Symbol, ::Bool, ::Function, ::DataFrame, ::DataFrame) at /home/vagrant/.julia/v0.7/DataFrames/src/abstractdataframe/join.jl:329
   [9] (::getfield(Base, Symbol("#kw##join")))(::NamedTuple{(:on, :kind),Tuple{Array{Symbol,1},Symbol}}, ::typeof(join), ::DataFrame, ::DataFrame) at ./<missing>:0
   [10] #join#5(::Nothing, ::Symbol, ::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::KeyedFrame, ::KeyedFrame) at /home/vagrant/.julia/v0.7/KeyedFrames/src/KeyedFrames.jl:179
   [11] (::getfield(Base, Symbol("#kw##join")))(::NamedTuple{(:kind,),Tuple{Symbol}}, ::typeof(join), ::KeyedFrame, ::KeyedFrame) at ./<missing>:0
   [12] macro expansion at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:333 [inlined]
   [13] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1022 [inlined]
   [14] macro expansion at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:285 [inlined]
   [15] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1022 [inlined]
   [16] top-level scope at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:6
join: Error During Test at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:334
  Test threw exception DimensionMismatch("all inputs to eachindex must have the same indices, got Base.OneTo(5) and Base.OneTo(0)")
  Expression: isequal(join(kf1, df2; kind=:anti), expected)
  DimensionMismatch("all inputs to eachindex must have the same indices, got Base.OneTo(5) and Base.OneTo(0)")
  Stacktrace:
   [1] throw_eachindex_mismatch(::IndexLinear, ::Array{UInt64,1}, ::Vararg{Any,N} where N) at ./errorshow.jl:556
   [2] eachindex at ./abstractarray.jl:875 [inlined]
   [3] eachindex at ./abstractarray.jl:865 [inlined]
   [4] row_group_slots(::Tuple{Array{Int64,1}}, ::Array{UInt64,1}, ::Array{Bool,1}, ::Array{Int64,1}, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:105
   [5] row_group_slots(::DataFrame, ::Array{Int64,1}, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:89
   [6] group_rows(::DataFrame, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:141
   [7] group_rows(::DataFrame) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:140
   [8] #join#138(::Array{Symbol,1}, ::Symbol, ::Bool, ::Function, ::DataFrame, ::DataFrame) at /home/vagrant/.julia/v0.7/DataFrames/src/abstractdataframe/join.jl:329
   [9] (::getfield(Base, Symbol("#kw##join")))(::NamedTuple{(:on, :kind),Tuple{Array{Symbol,1},Symbol}}, ::typeof(join), ::DataFrame, ::DataFrame) at ./<missing>:0
   [10] #join#6(::Nothing, ::Base.Iterators.Pairs{Symbol,Symbol,Tuple{Symbol},NamedTuple{(:kind,),Tuple{Symbol}}}, ::Function, ::KeyedFrame, ::DataFrame) at /home/vagrant/.julia/v0.7/KeyedFrames/src/KeyedFrames.jl:199
   [11] (::getfield(Base, Symbol("#kw##join")))(::NamedTuple{(:kind,),Tuple{Symbol}}, ::typeof(join), ::KeyedFrame, ::DataFrame) at ./<missing>:0
   [12] macro expansion at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:334 [inlined]
   [13] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1022 [inlined]
   [14] macro expansion at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:285 [inlined]
   [15] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1022 [inlined]
   [16] top-level scope at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:6
join: Error During Test at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:335
  Test threw exception DimensionMismatch("all inputs to eachindex must have the same indices, got Base.OneTo(5) and Base.OneTo(0)")
  Expression: isequal(join(df1, kf2; kind=:anti), DataFrame(expected))
  DimensionMismatch("all inputs to eachindex must have the same indices, got Base.OneTo(5) and Base.OneTo(0)")
  Stacktrace:
   [1] throw_eachindex_mismatch(::IndexLinear, ::Array{UInt64,1}, ::Vararg{Any,N} where N) at ./errorshow.jl:556
   [2] eachindex at ./abstractarray.jl:875 [inlined]
   [3] eachindex at ./abstractarray.jl:865 [inlined]
   [4] row_group_slots(::Tuple{Array{Int64,1}}, ::Array{UInt64,1}, ::Array{Bool,1}, ::Array{Int64,1}, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:105
   [5] row_group_slots(::DataFrame, ::Array{Int64,1}, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:89
   [6] group_rows(::DataFrame, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:141
   [7] group_rows(::DataFrame) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:140
   [8] #join#138(::Array{Symbol,1}, ::Symbol, ::Bool, ::Function, ::DataFrame, ::DataFrame) at /home/vagrant/.julia/v0.7/DataFrames/src/abstractdataframe/join.jl:329
   [9] (::getfield(Base, Symbol("#kw##join")))(::NamedTuple{(:on, :kind),Tuple{Array{Symbol,1},Symbol}}, ::typeof(join), ::DataFrame, ::DataFrame) at ./<missing>:0
   [10] #join#7 at /home/vagrant/.julia/v0.7/KeyedFrames/src/KeyedFrames.jl:207 [inlined]
   [11] (::getfield(Base, Symbol("#kw##join")))(::NamedTuple{(:kind,),Tuple{Symbol}}, ::typeof(join), ::DataFrame, ::KeyedFrame) at ./<missing>:0
   [12] macro expansion at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:335 [inlined]
   [13] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1022 [inlined]
   [14] macro expansion at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:285 [inlined]
   [15] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1022 [inlined]
   [16] top-level scope at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:6
join: Error During Test at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:338
  Test threw exception DimensionMismatch("all inputs to eachindex must have the same indices, got Base.OneTo(10) and Base.OneTo(0)")
  Expression: isequal(join(kf2, kf1; kind=:anti), expected)
  DimensionMismatch("all inputs to eachindex must have the same indices, got Base.OneTo(10) and Base.OneTo(0)")
  Stacktrace:
   [1] throw_eachindex_mismatch(::IndexLinear, ::Array{UInt64,1}, ::Vararg{Any,N} where N) at ./errorshow.jl:556
   [2] eachindex at ./abstractarray.jl:875 [inlined]
   [3] eachindex at ./abstractarray.jl:865 [inlined]
   [4] row_group_slots(::Tuple{Array{Int64,1}}, ::Array{UInt64,1}, ::Array{Bool,1}, ::Array{Int64,1}, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:105
   [5] row_group_slots(::DataFrame, ::Array{Int64,1}, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:89
   [6] group_rows(::DataFrame, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:141
   [7] group_rows(::DataFrame) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:140
   [8] #join#138(::Array{Symbol,1}, ::Symbol, ::Bool, ::Function, ::DataFrame, ::DataFrame) at /home/vagrant/.julia/v0.7/DataFrames/src/abstractdataframe/join.jl:329
   [9] (::getfield(Base, Symbol("#kw##join")))(::NamedTuple{(:on, :kind),Tuple{Array{Symbol,1},Symbol}}, ::typeof(join), ::DataFrame, ::DataFrame) at ./<missing>:0
   [10] #join#5(::Nothing, ::Symbol, ::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::KeyedFrame, ::KeyedFrame) at /home/vagrant/.julia/v0.7/KeyedFrames/src/KeyedFrames.jl:179
   [11] (::getfield(Base, Symbol("#kw##join")))(::NamedTuple{(:kind,),Tuple{Symbol}}, ::typeof(join), ::KeyedFrame, ::KeyedFrame) at ./<missing>:0
   [12] macro expansion at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:338 [inlined]
   [13] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1022 [inlined]
   [14] macro expansion at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:285 [inlined]
   [15] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1022 [inlined]
   [16] top-level scope at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:6
join: Error During Test at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:339
  Test threw exception DimensionMismatch("all inputs to eachindex must have the same indices, got Base.OneTo(10) and Base.OneTo(0)")
  Expression: isequal(join(kf2, df1; kind=:anti), expected)
  DimensionMismatch("all inputs to eachindex must have the same indices, got Base.OneTo(10) and Base.OneTo(0)")
  Stacktrace:
   [1] throw_eachindex_mismatch(::IndexLinear, ::Array{UInt64,1}, ::Vararg{Any,N} where N) at ./errorshow.jl:556
   [2] eachindex at ./abstractarray.jl:875 [inlined]
   [3] eachindex at ./abstractarray.jl:865 [inlined]
   [4] row_group_slots(::Tuple{Array{Int64,1}}, ::Array{UInt64,1}, ::Array{Bool,1}, ::Array{Int64,1}, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:105
   [5] row_group_slots(::DataFrame, ::Array{Int64,1}, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:89
   [6] group_rows(::DataFrame, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:141
   [7] group_rows(::DataFrame) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:140
   [8] #join#138(::Array{Symbol,1}, ::Symbol, ::Bool, ::Function, ::DataFrame, ::DataFrame) at /home/vagrant/.julia/v0.7/DataFrames/src/abstractdataframe/join.jl:329
   [9] (::getfield(Base, Symbol("#kw##join")))(::NamedTuple{(:on, :kind),Tuple{Array{Symbol,1},Symbol}}, ::typeof(join), ::DataFrame, ::DataFrame) at ./<missing>:0
   [10] #join#6(::Nothing, ::Base.Iterators.Pairs{Symbol,Symbol,Tuple{Symbol},NamedTuple{(:kind,),Tuple{Symbol}}}, ::Function, ::KeyedFrame, ::DataFrame) at /home/vagrant/.julia/v0.7/KeyedFrames/src/KeyedFrames.jl:199
   [11] (::getfield(Base, Symbol("#kw##join")))(::NamedTuple{(:kind,),Tuple{Symbol}}, ::typeof(join), ::KeyedFrame, ::DataFrame) at ./<missing>:0
   [12] macro expansion at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:339 [inlined]
   [13] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1022 [inlined]
   [14] macro expansion at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:285 [inlined]
   [15] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1022 [inlined]
   [16] top-level scope at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:6
join: Error During Test at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:340
  Test threw exception DimensionMismatch("all inputs to eachindex must have the same indices, got Base.OneTo(10) and Base.OneTo(0)")
  Expression: isequal(join(df2, kf1; kind=:anti), DataFrame(expected))
  DimensionMismatch("all inputs to eachindex must have the same indices, got Base.OneTo(10) and Base.OneTo(0)")
  Stacktrace:
   [1] throw_eachindex_mismatch(::IndexLinear, ::Array{UInt64,1}, ::Vararg{Any,N} where N) at ./errorshow.jl:556
   [2] eachindex at ./abstractarray.jl:875 [inlined]
   [3] eachindex at ./abstractarray.jl:865 [inlined]
   [4] row_group_slots(::Tuple{Array{Int64,1}}, ::Array{UInt64,1}, ::Array{Bool,1}, ::Array{Int64,1}, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:105
   [5] row_group_slots(::DataFrame, ::Array{Int64,1}, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:89
   [6] group_rows(::DataFrame, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:141
   [7] group_rows(::DataFrame) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:140
   [8] #join#138(::Array{Symbol,1}, ::Symbol, ::Bool, ::Function, ::DataFrame, ::DataFrame) at /home/vagrant/.julia/v0.7/DataFrames/src/abstractdataframe/join.jl:329
   [9] (::getfield(Base, Symbol("#kw##join")))(::NamedTuple{(:on, :kind),Tuple{Array{Symbol,1},Symbol}}, ::typeof(join), ::DataFrame, ::DataFrame) at ./<missing>:0
   [10] #join#7 at /home/vagrant/.julia/v0.7/KeyedFrames/src/KeyedFrames.jl:207 [inlined]
   [11] (::getfield(Base, Symbol("#kw##join")))(::NamedTuple{(:kind,),Tuple{Symbol}}, ::typeof(join), ::DataFrame, ::KeyedFrame) at ./<missing>:0
   [12] macro expansion at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:340 [inlined]
   [13] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1022 [inlined]
   [14] macro expansion at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:285 [inlined]
   [15] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1022 [inlined]
   [16] top-level scope at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:6
join: Error During Test at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:345
  Test threw exception DimensionMismatch("all inputs to eachindex must have the same indices, got Base.OneTo(3) and Base.OneTo(0)")
  Expression: isequal(join(kf2, kf3), expected)
  DimensionMismatch("all inputs to eachindex must have the same indices, got Base.OneTo(3) and Base.OneTo(0)")
  Stacktrace:
   [1] throw_eachindex_mismatch(::IndexLinear, ::Array{UInt64,1}, ::Vararg{Any,N} where N) at ./errorshow.jl:556
   [2] eachindex at ./abstractarray.jl:875 [inlined]
   [3] eachindex at ./abstractarray.jl:865 [inlined]
   [4] row_group_slots(::Tuple{Array{Int64,1}}, ::Array{UInt64,1}, ::Array{Bool,1}, ::Array{Int64,1}, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:105
   [5] row_group_slots(::DataFrame, ::Array{Int64,1}, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:89
   [6] group_rows(::DataFrame, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:141
   [7] group_rows(::DataFrame) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:140
   [8] #join#138(::Array{Symbol,1}, ::Symbol, ::Bool, ::Function, ::DataFrame, ::DataFrame) at /home/vagrant/.julia/v0.7/DataFrames/src/abstractdataframe/join.jl:294
   [9] (::getfield(Base, Symbol("#kw##join")))(::NamedTuple{(:on, :kind),Tuple{Array{Symbol,1},Symbol}}, ::typeof(join), ::DataFrame, ::DataFrame) at ./<missing>:0
   [10] #join#5(::Nothing, ::Symbol, ::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::KeyedFrame, ::KeyedFrame) at /home/vagrant/.julia/v0.7/KeyedFrames/src/KeyedFrames.jl:179
   [11] join(::KeyedFrame, ::KeyedFrame) at /home/vagrant/.julia/v0.7/KeyedFrames/src/KeyedFrames.jl:179
   [12] macro expansion at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:345 [inlined]
   [13] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1022 [inlined]
   [14] macro expansion at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:285 [inlined]
   [15] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1022 [inlined]
   [16] top-level scope at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:6
join: Error During Test at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:355
  Test threw exception DimensionMismatch("all inputs to eachindex must have the same indices, got Base.OneTo(3) and Base.OneTo(0)")
  Expression: isequal(join(kf2, kf3; on=[:a => :a, :d => :e], kind=:outer), expected)
  DimensionMismatch("all inputs to eachindex must have the same indices, got Base.OneTo(3) and Base.OneTo(0)")
  Stacktrace:
   [1] throw_eachindex_mismatch(::IndexLinear, ::Array{UInt64,1}, ::Vararg{Any,N} where N) at ./errorshow.jl:556
   [2] eachindex at ./abstractarray.jl:875 [inlined]
   [3] eachindex at ./abstractarray.jl:865 [inlined]
   [4] row_group_slots(::Tuple{Array{Int64,1},Array{Int64,1}}, ::Array{UInt64,1}, ::Array{Bool,1}, ::Array{Int64,1}, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:105
   [5] row_group_slots(::DataFrame, ::Array{Int64,1}, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:89
   [6] group_rows(::DataFrame, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:141
   [7] group_rows(::DataFrame) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:140
   [8] #join#138(::Array{Pair{Symbol,Symbol},1}, ::Symbol, ::Bool, ::Function, ::DataFrame, ::DataFrame) at /home/vagrant/.julia/v0.7/DataFrames/src/abstractdataframe/join.jl:309
   [9] (::getfield(Base, Symbol("#kw##join")))(::NamedTuple{(:on, :kind),Tuple{Array{Pair{Symbol,Symbol},1},Symbol}}, ::typeof(join), ::DataFrame, ::DataFrame) at ./<missing>:0
   [10] #join#5(::Array{Pair{Symbol,Symbol},1}, ::Symbol, ::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::KeyedFrame, ::KeyedFrame) at /home/vagrant/.julia/v0.7/KeyedFrames/src/KeyedFrames.jl:179
   [11] (::getfield(Base, Symbol("#kw##join")))(::NamedTuple{(:on, :kind),Tuple{Array{Pair{Symbol,Symbol},1},Symbol}}, ::typeof(join), ::KeyedFrame, ::KeyedFrame) at ./<missing>:0
   [12] macro expansion at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:355 [inlined]
   [13] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1022 [inlined]
   [14] macro expansion at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:285 [inlined]
   [15] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1022 [inlined]
   [16] top-level scope at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:6
Test Summary:     | Pass  Error  Total
KeyedFrames       |  127     39    166
  constructor     |    9             9
  equality        |   23            23
  copy            |    4             4
  convert         |    9             9
  size            |    9             9
  names/index/key |    9             9
  getindex        |   18            18
  setindex!       |    7             7
  head/tail       |    5      3      8
  sort            |   12            12
  push!           |    1             1
  append!         |    2             2
  deleterows!     |    3             3
  delete!         |   12            12
  unique          |           4      4
  join            |          32     32
  permute!        |    4             4
ERROR: LoadError: Some tests did not pass: 127 passed, 0 failed, 39 errored, 0 broken.
in expression starting at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:5
┌ Error: ------------------------------------------------------------
│ # Testing failed for KeyedFrames
│   exception =
│    failed process: Process(`/home/vagrant/julia/bin/julia -Cnative -J/home/vagrant/julia/lib/julia/sys.so --compile=yes --depwarn=yes --code-coverage=none --color=no --compiled-modules=yes --check-bounds=yes --warn-overwrite=yes --startup-file=yes /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl`, ProcessExited(1)) [1]
│    Stacktrace:
│     [1] error(::String, ::Base.Process, ::String, ::Int64, ::String) at ./error.jl:42
│     [2] pipeline_error(::Base.Process) at ./process.jl:712
│     [3] #run#544(::Bool, ::Function, ::Cmd) at ./process.jl:670
│     [4] run at ./process.jl:668 [inlined]
│     [5] (::getfield(Pkg.Entry, Symbol("##56#57")){Bool,String,Array{AbstractString,1}})() at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Pkg/src/entry.jl:729
│     [6] cd(::getfield(Pkg.Entry, Symbol("##56#57")){Bool,String,Array{AbstractString,1}}, ::String) at ./file.jl:72
│     [7] #test!#55(::Bool, ::Function, ::String, ::Array{AbstractString,1}, ::Array{AbstractString,1}, ::Array{AbstractString,1}) at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Pkg/src/entry.jl:717
│     [8] (::getfield(Pkg.Entry, Symbol("#kw##test!")))(::NamedTuple{(:coverage,),Tuple{Bool}}, ::typeof(Pkg.Entry.test!), ::String, ::Array{AbstractString,1}, ::Array{AbstractString,1}, ::Array{AbstractString,1}) at ./<missing>:0
│     [9] #test#59(::Bool, ::Function, ::Array{AbstractString,1}) at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Pkg/src/entry.jl:756
│     [10] #test at ./<missing>:0 [inlined]
│     [11] #4 at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Pkg/src/dir.jl:36 [inlined]
│     [12] cd(::getfield(Pkg.Dir, Symbol("##4#7")){Base.Iterators.Pairs{Symbol,Bool,Tuple{Symbol},NamedTuple{(:coverage,),Tuple{Bool}}},typeof(Pkg.Entry.test),Tuple{Array{AbstractString,1}}}, ::String) at ./file.jl:72
│     [13] #cd#1(::Base.Iterators.Pairs{Symbol,Bool,Tuple{Symbol},NamedTuple{(:coverage,),Tuple{Bool}}}, ::Function, ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N} where N) at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Pkg/src/dir.jl:36
│     [14] (::getfield(Pkg.Dir, Symbol("#kw##cd")))(::NamedTuple{(:coverage,),Tuple{Bool}}, ::typeof(Pkg.Dir.cd), ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N} where N) at ./<missing>:0
│     [15] #test#3(::Bool, ::Function, ::String, ::Vararg{String,N} where N) at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Pkg/src/Pkg.jl:278
│     [16] test(::String, ::Vararg{String,N} where N) at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Pkg/src/Pkg.jl:278
│     [17] top-level scope
│     [18] eval at ./boot.jl:317 [inlined]
│     [19] eval(::Module, ::Expr) at ./sysimg.jl:74
│     [20] exec_options(::Base.JLOptions) at ./client.jl:304
│     [21] _start() at ./client.jl:455
└ @ Pkg.Entry entry.jl:732
ERROR: KeyedFrames had test errors

>>> End of log
