>>> 'Pkg.add("KeyedFrames")' log
WARNING: Base.Pkg is deprecated, run `using Pkg` instead.
 in module Main
[ Info: Cloning cache of KeyedFrames from https://github.com/invenia/KeyedFrames.jl.git
[ Info: Installing BinDeps v0.8.6
[ Info: Installing CategoricalArrays v0.3.3
[ Info: Installing CodecZlib v0.4.2
[ Info: Installing DataFrames v0.11.5
[ Info: Installing DataStreams v0.3.4
[ Info: Installing DataStructures v0.7.4
[ Info: Installing KeyedFrames v0.1.0
[ Info: Installing Missings v0.2.6
[ Info: Installing NamedTuples v4.0.0
[ Info: Installing Reexport v0.1.0
[ Info: Installing SHA v0.5.6
[ Info: Installing SortingAlgorithms v0.2.0
[ Info: Installing SpecialFunctions v0.3.8
[ Info: Installing StatsBase v0.19.5
[ Info: Installing TranscodingStreams v0.4.1
[ Info: Installing URIParser v0.3.0
[ Info: Installing WeakRefStrings v0.4.1
[ Info: Building SpecialFunctions
┌ Warning: `isalnum(c::Char)` is deprecated, use `isalpha(c) || isnumeric(c)` instead.
│   caller = is_userinfo_char at parser.jl:4 [inlined]
└ @ Core parser.jl:4
┌ Warning: `isalnum(c::Char)` is deprecated, use `isalpha(c) || isnumeric(c)` instead.
│   caller = is_host_char at parser.jl:8 [inlined]
└ @ Core parser.jl:8
┌ Warning: `isalnum(c::Char)` is deprecated, use `isalpha(c) || isnumeric(c)` instead.
│   caller = is_host_char at parser.jl:8 [inlined]
└ @ Core parser.jl:8
WARNING: importing deprecated binding Base.Associative into BinDeps.
WARNING: Base.Associative is deprecated, use AbstractDict instead.
  likely near /home/vagrant/.julia/v0.7/SpecialFunctions/deps/binaries.jl:44
in @install at /home/vagrant/.julia/v0.7/BinDeps/src/dependencies.jl
[ Info: Package database updated
┌ Info: METADATA is out-of-date — you may not have the latest version of KeyedFrames
└ Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("KeyedFrames")' log
WARNING: Base.versioninfo is deprecated: it has been moved to the standard library package `InteractiveUtils`.
Add a `using InteractiveUtils` to your imports..
 in module Main
WARNING: Base.versioninfo is deprecated: it has been moved to the standard library package `InteractiveUtils`.
Add a `using InteractiveUtils` to your imports..
 in module Main
Julia Version 0.7.0-DEV.3703
Commit 358ccc2b20 (2018-02-02 20:43 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
      Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-135-generic #184-Ubuntu SMP Wed Oct 18 11:55:51 UTC 2017 x86_64 x86_64
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
              speed         user         nice          sys         idle          irq
       #1  3502 MHz    2390860 s       5602 s     130730 s     536235 s         26 s
       #2  3502 MHz     449038 s       1916 s      52463 s    3055063 s          0 s
       
  Memory: 2.93927001953125 GB (1085.4765625 MB free)
  Uptime: 36216.0 sec
  Load Avg:  1.0556640625  1.001953125  0.98681640625
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant
Packages:
  Package Directory: /home/vagrant/.julia/v0.7
  Package Status:
2 required packages:
 - JSON                          0.16.4
 - KeyedFrames                   0.1.0
18 additional packages:
 - BinDeps                       0.8.6
 - CategoricalArrays             0.3.3
 - CodecZlib                     0.4.2
 - Compat                        0.51.0
 - DataFrames                    0.11.5
 - DataStreams                   0.3.4
 - DataStructures                0.7.4
 - Missings                      0.2.6
 - NamedTuples                   4.0.0
 - Nullables                     0.0.3
 - Reexport                      0.1.0
 - SHA                           0.5.6
 - SortingAlgorithms             0.2.0
 - SpecialFunctions              0.3.8
 - StatsBase                     0.19.5
 - TranscodingStreams            0.4.1
 - URIParser                     0.3.0
 - WeakRefStrings                0.4.1
WARNING: Base.Pkg is deprecated, run `using Pkg` instead.
 in module Main
[ Info: Testing KeyedFrames
┌ Warning: `using A: B` will only be allowed for single bindings, not modules. Use `using A.B` instead
│   caller = ip:0x0
└ @ Core :-1
┌ Warning: `isdefined(:symbol)` is deprecated, use `@isdefined symbol` instead
│   caller = ip:0x0
└ @ Core :-1
WARNING: importing deprecated binding Base.Void into DataFrames.
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/DataFrames/src/dataframe/dataframe.jl:604
WARNING: importing deprecated binding Base.Associative into DataFrames.
WARNING: Base.Associative is deprecated, use AbstractDict instead.
  likely near /home/vagrant/.julia/v0.7/DataFrames/src/dataframe/dataframe.jl:930
WARNING: Base.Associative is deprecated, use AbstractDict instead.
  likely near /home/vagrant/.julia/v0.7/DataFrames/src/dataframe/dataframe.jl:949
WARNING: Base.Associative is deprecated, use AbstractDict instead.
  likely near /home/vagrant/.julia/v0.7/DataFrames/src/dataframe/dataframe.jl:966
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:85
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:85
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:92
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:92
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/DataFrames/src/abstractdataframe/join.jl:133
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/DataFrames/src/abstractdataframe/join.jl:133
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/DataFrames/src/abstractdataframe/join.jl:133
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/DataFrames/src/abstractdataframe/join.jl:133
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/DataFrames/src/abstractdataframe/join.jl:133
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/DataFrames/src/abstractdataframe/join.jl:133
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/DataFrames/src/abstractdataframe/join.jl:133
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/DataFrames/src/abstractdataframe/join.jl:133
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/DataFrames/src/abstractdataframe/join.jl:185
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = top-level scope at show.jl:33
└ @ Core show.jl:33
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = top-level scope
└ @ Core :0
WARNING: Base.Test is deprecated, run `using Test` instead.
  likely near /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:3
┌ Warning: Constructors no longer fall back to `convert`. A constructor `DataFrame(::KeyedFrame)` should be defined instead.
│   caller = deepcopy(::KeyedFrame) at KeyedFrames.jl:58
└ @ KeyedFrames KeyedFrames.jl:58
┌ Warning: Constructors no longer fall back to `convert`. A constructor `DataFrame(::KeyedFrame)` should be defined instead.
│   caller = macro expansion at runtests.jl:71 [inlined]
└ @ Core runtests.jl:71
┌ Warning: Constructors no longer fall back to `convert`. A constructor `DataFrame(::KeyedFrame)` should be defined instead.
│   caller = macro expansion at runtests.jl:71 [inlined]
└ @ Core runtests.jl:71
┌ Warning: Constructors no longer fall back to `convert`. A constructor `DataFrame(::KeyedFrame)` should be defined instead.
│   caller = macro expansion at runtests.jl:78 [inlined]
└ @ Core runtests.jl:78
┌ Warning: Constructors no longer fall back to `convert`. A constructor `DataFrame(::KeyedFrame)` should be defined instead.
│   caller = copy(::KeyedFrame) at KeyedFrames.jl:57
└ @ KeyedFrames KeyedFrames.jl:57
┌ Warning: if appropriate you should implement `lastindex(a, n)` for type KeyedFrame`, which might just return `last(axes(a, n))`
│   caller = macro expansion at runtests.jl:167 [inlined]
└ @ Core runtests.jl:167
head/tail: Error During Test at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:167
  Test threw an exception of type MethodError
  Expression: isequal(tail(kf1, 1), kf1[end, :])
  MethodError: no method matching axes(::KeyedFrame, ::Int64)
  Closest candidates are:
    axes(!Matched::SimpleVector, ::Any) at essentials.jl:536
    axes(!Matched::Number, ::Any) at number.jl:50
    axes(!Matched::LinearAlgebra.RowVector, ::Any) at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/LinearAlgebra/src/deprecated.jl:503
    ...
  Stacktrace:
   [1] lastindex(::KeyedFrame, ::Int64) at ./deprecated.jl:1390
   [2] macro expansion at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:167 [inlined]
   [3] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1008 [inlined]
   [4] macro expansion at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:161 [inlined]
   [5] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1008 [inlined]
   [6] top-level scope at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:6
┌ Warning: if appropriate you should implement `lastindex(a, n)` for type KeyedFrame`, which might just return `last(axes(a, n))`
│   caller = macro expansion at runtests.jl:168 [inlined]
└ @ Core runtests.jl:168
head/tail: Error During Test at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:168
  Test threw an exception of type MethodError
  Expression: isequal(tail(kf1, 3), kf1[end - 2:end, :])
  MethodError: no method matching axes(::KeyedFrame, ::Int64)
  Closest candidates are:
    axes(!Matched::SimpleVector, ::Any) at essentials.jl:536
    axes(!Matched::Number, ::Any) at number.jl:50
    axes(!Matched::LinearAlgebra.RowVector, ::Any) at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/LinearAlgebra/src/deprecated.jl:503
    ...
  Stacktrace:
   [1] lastindex(::KeyedFrame, ::Int64) at ./deprecated.jl:1390
   [2] macro expansion at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:168 [inlined]
   [3] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1008 [inlined]
   [4] macro expansion at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:161 [inlined]
   [5] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1008 [inlined]
   [6] top-level scope at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:6
┌ Warning: if appropriate you should implement `lastindex(a, n)` for type KeyedFrame`, which might just return `last(axes(a, n))`
│   caller = macro expansion at runtests.jl:169 [inlined]
└ @ Core runtests.jl:169
head/tail: Error During Test at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:169
  Test threw an exception of type MethodError
  Expression: isequal(tail(kf1, 6), kf1[end - 5:end, :])
  MethodError: no method matching axes(::KeyedFrame, ::Int64)
  Closest candidates are:
    axes(!Matched::SimpleVector, ::Any) at essentials.jl:536
    axes(!Matched::Number, ::Any) at number.jl:50
    axes(!Matched::LinearAlgebra.RowVector, ::Any) at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/LinearAlgebra/src/deprecated.jl:503
    ...
  Stacktrace:
   [1] lastindex(::KeyedFrame, ::Int64) at ./deprecated.jl:1390
   [2] macro expansion at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:169 [inlined]
   [3] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1008 [inlined]
   [4] macro expansion at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:161 [inlined]
   [5] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1008 [inlined]
   [6] top-level scope at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:6
┌ Warning: `copy!(dst::AbstractArray, src::AbstractArray)` is deprecated. You can either use `copyto!(dst, src)` or `Future.copy!(dst, src)` instead.
│   caller = sort!(::DataFrame, ::Base.Sort.MergeSortAlg, ::DataFrames.DFPerm{Base.Order.ForwardOrdering,DataFrame}) at sort.jl:23
└ @ DataFrames sort.jl:23
┌ Warning: `copy!(dst::AbstractArray, src::AbstractArray)` is deprecated. You can either use `copyto!(dst, src)` or `Future.copy!(dst, src)` instead.
│   caller = sort!(::DataFrame, ::Base.Sort.MergeSortAlg, ::DataFrames.DFPerm{Base.Order.ReverseOrdering{Base.Order.ForwardOrdering},DataFrame}) at sort.jl:23
└ @ DataFrames sort.jl:23
┌ Warning: `copy!(dst::AbstractArray, src::AbstractArray)` is deprecated. You can either use `copyto!(dst, src)` or `Future.copy!(dst, src)` instead.
│   caller = sort!(::DataFrame, ::Base.Sort.MergeSortAlg, ::Base.Order.Perm{Base.Order.ForwardOrdering,Array{Int64,1}}) at sort.jl:23
└ @ DataFrames sort.jl:23
┌ Warning: `copy!(dst::AbstractArray, src::AbstractArray)` is deprecated. You can either use `copyto!(dst, src)` or `Future.copy!(dst, src)` instead.
│   caller = sort!(::DataFrame, ::Base.Sort.MergeSortAlg, ::Base.Order.Perm{Base.Order.ReverseOrdering{Base.Order.ForwardOrdering},Array{Int64,1}}) at sort.jl:23
└ @ DataFrames sort.jl:23
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = eltypes(::DataFrame) at abstractdataframe.jl:219
└ @ DataFrames abstractdataframe.jl:219
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = eltypes at abstractdataframe.jl:219 [inlined]
└ @ Core abstractdataframe.jl:219
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = deleterows!(::DataFrame, ::Array{Int64,1}) at dataframe.jl:791
└ @ DataFrames dataframe.jl:791
unique: Error During Test at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:242
  Test threw an exception of type DimensionMismatch
  Expression: nonunique(kf4) == [false, false, false, false, true]
  DimensionMismatch("all inputs to eachindex must have the same indices, got Base.OneTo(5) and Base.OneTo(0)")
  Stacktrace:
   [1] throw_eachindex_mismatch(::IndexLinear, ::Array{UInt64,1}, ::Vararg{Any,N} where N) at ./errorshow.jl:556
   [2] eachindex at ./abstractarray.jl:859 [inlined]
   [3] eachindex at ./abstractarray.jl:849 [inlined]
   [4] row_group_slots(::Tuple{Array{Int64,1},Array{Int64,1}}, ::Array{UInt64,1}, ::Array{Bool,1}, ::Nothing, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:105
   [5] row_group_slots(::DataFrame, ::Nothing, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:89
   [6] row_group_slots at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:88 [inlined]
   [7] nonunique(::DataFrame) at /home/vagrant/.julia/v0.7/DataFrames/src/abstractdataframe/abstractdataframe.jl:659
   [8] nonunique at /home/vagrant/.julia/v0.7/DataFrames/src/abstractdataframe/abstractdataframe.jl:670 [inlined]
   [9] nonunique(::KeyedFrame) at /home/vagrant/.julia/v0.7/KeyedFrames/src/KeyedFrames.jl:159
   [10] macro expansion at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:242 [inlined]
   [11] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1008 [inlined]
   [12] macro expansion at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:240 [inlined]
   [13] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1008 [inlined]
   [14] top-level scope at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:6
unique: Error During Test at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:243
  Test threw an exception of type DimensionMismatch
  Expression: nonunique(kf4, :a) == [false, false, false, true, true]
  DimensionMismatch("all inputs to eachindex must have the same indices, got Base.OneTo(5) and Base.OneTo(0)")
  Stacktrace:
   [1] throw_eachindex_mismatch(::IndexLinear, ::Array{UInt64,1}, ::Vararg{Any,N} where N) at ./errorshow.jl:556
   [2] eachindex at ./abstractarray.jl:859 [inlined]
   [3] eachindex at ./abstractarray.jl:849 [inlined]
   [4] row_group_slots(::Tuple{Array{Int64,1}}, ::Array{UInt64,1}, ::Array{Bool,1}, ::Nothing, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:105
   [5] row_group_slots(::DataFrame, ::Nothing, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:89
   [6] row_group_slots at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:88 [inlined]
   [7] nonunique(::DataFrame) at /home/vagrant/.julia/v0.7/DataFrames/src/abstractdataframe/abstractdataframe.jl:659
   [8] nonunique at /home/vagrant/.julia/v0.7/DataFrames/src/abstractdataframe/abstractdataframe.jl:670 [inlined]
   [9] nonunique at /home/vagrant/.julia/v0.7/KeyedFrames/src/KeyedFrames.jl:159 [inlined]
   [10] nonunique(::KeyedFrame, ::Symbol) at /home/vagrant/.julia/v0.7/DataFrames/src/abstractdataframe/abstractdataframe.jl:669
   [11] macro expansion at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:243 [inlined]
   [12] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1008 [inlined]
   [13] macro expansion at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:240 [inlined]
   [14] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1008 [inlined]
   [15] top-level scope at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:6
unique: Error During Test at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:247
  Test threw an exception of type DimensionMismatch
  Expression: isequal(unique(kf4), expected)
  DimensionMismatch("all inputs to eachindex must have the same indices, got Base.OneTo(5) and Base.OneTo(0)")
  Stacktrace:
   [1] throw_eachindex_mismatch(::IndexLinear, ::Array{UInt64,1}, ::Vararg{Any,N} where N) at ./errorshow.jl:556
   [2] eachindex at ./abstractarray.jl:859 [inlined]
   [3] eachindex at ./abstractarray.jl:849 [inlined]
   [4] row_group_slots(::Tuple{Array{Int64,1},Array{Int64,1}}, ::Array{UInt64,1}, ::Array{Bool,1}, ::Nothing, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:105
   [5] row_group_slots(::DataFrame, ::Nothing, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:89
   [6] row_group_slots at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:88 [inlined]
   [7] nonunique(::DataFrame) at /home/vagrant/.julia/v0.7/DataFrames/src/abstractdataframe/abstractdataframe.jl:659
   [8] nonunique at /home/vagrant/.julia/v0.7/DataFrames/src/abstractdataframe/abstractdataframe.jl:670 [inlined]
   [9] unique(::DataFrame, ::Array{Symbol,1}) at /home/vagrant/.julia/v0.7/DataFrames/src/abstractdataframe/abstractdataframe.jl:681
   [10] unique at /home/vagrant/.julia/v0.7/KeyedFrames/src/KeyedFrames.jl:151 [inlined] (repeats 2 times)
   [11] macro expansion at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:247 [inlined]
   [12] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1008 [inlined]
   [13] macro expansion at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:240 [inlined]
   [14] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1008 [inlined]
   [15] top-level scope at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:6
unique: Error During Test at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:239
  Got an exception of type DimensionMismatch outside of a @test
  DimensionMismatch("all inputs to eachindex must have the same indices, got Base.OneTo(5) and Base.OneTo(0)")
  Stacktrace:
   [1] throw_eachindex_mismatch(::IndexLinear, ::Array{UInt64,1}, ::Vararg{Any,N} where N) at ./errorshow.jl:556
   [2] eachindex at ./abstractarray.jl:859 [inlined]
   [3] eachindex at ./abstractarray.jl:849 [inlined]
   [4] row_group_slots(::Tuple{Array{Int64,1},Array{Int64,1}}, ::Array{UInt64,1}, ::Array{Bool,1}, ::Nothing, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:105
   [5] row_group_slots(::DataFrame, ::Nothing, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:89
   [6] row_group_slots at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:88 [inlined]
   [7] nonunique(::DataFrame) at /home/vagrant/.julia/v0.7/DataFrames/src/abstractdataframe/abstractdataframe.jl:659
   [8] nonunique at /home/vagrant/.julia/v0.7/DataFrames/src/abstractdataframe/abstractdataframe.jl:670 [inlined]
   [9] unique! at /home/vagrant/.julia/v0.7/DataFrames/src/abstractdataframe/abstractdataframe.jl:677 [inlined]
   [10] unique! at /home/vagrant/.julia/v0.7/KeyedFrames/src/KeyedFrames.jl:155 [inlined] (repeats 2 times)
   [11] macro expansion at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:249 [inlined]
   [12] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1008 [inlined]
   [13] macro expansion at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:240 [inlined]
   [14] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1008 [inlined]
   [15] top-level scope at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:6
   [16] include at ./boot.jl:296 [inlined]
   [17] include_relative(::Module, ::String) at ./loading.jl:1012
   [18] include(::Module, ::String) at ./sysimg.jl:26
   [19] exec_options(::Base.JLOptions) at ./client.jl:332
   [20] _start() at ./client.jl:447
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = group_rows(::DataFrame, ::Bool) at utils.jl:140
└ @ DataFrames utils.jl:140
join: Error During Test at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:262
  Test threw an exception of type DimensionMismatch
  Expression: isequal(join(kf1, kf2), expected)
  DimensionMismatch("all inputs to eachindex must have the same indices, got Base.OneTo(5) and Base.OneTo(0)")
  Stacktrace:
   [1] throw_eachindex_mismatch(::IndexLinear, ::Array{UInt64,1}, ::Vararg{Any,N} where N) at ./errorshow.jl:556
   [2] eachindex at ./abstractarray.jl:859 [inlined]
   [3] eachindex at ./abstractarray.jl:849 [inlined]
   [4] row_group_slots(::Tuple{Array{Int64,1}}, ::Array{UInt64,1}, ::Array{Bool,1}, ::Array{Int64,1}, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:105
   [5] row_group_slots(::DataFrame, ::Array{Int64,1}, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:89
   [6] group_rows(::DataFrame, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:141
   [7] group_rows(::DataFrame) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:140
   [8] #join#138(::Array{Symbol,1}, ::Symbol, ::Bool, ::Function, ::DataFrame, ::DataFrame) at /home/vagrant/.julia/v0.7/DataFrames/src/abstractdataframe/join.jl:294
   [9] (::getfield(Base, Symbol("#kw##join")))(::NamedTuple{(:on, :kind),Tuple{Array{Symbol,1},Symbol}}, ::typeof(join), ::DataFrame, ::DataFrame) at ./<missing>:0
   [10] #join#3(::Nothing, ::Symbol, ::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::KeyedFrame, ::KeyedFrame) at /home/vagrant/.julia/v0.7/KeyedFrames/src/KeyedFrames.jl:165
   [11] join(::KeyedFrame, ::KeyedFrame) at /home/vagrant/.julia/v0.7/KeyedFrames/src/KeyedFrames.jl:165
   [12] macro expansion at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:262 [inlined]
   [13] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1008 [inlined]
   [14] macro expansion at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:261 [inlined]
   [15] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1008 [inlined]
   [16] top-level scope at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:6
join: Error During Test at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:263
  Test threw an exception of type DimensionMismatch
  Expression: isequal(join(kf1, df2), expected)
  DimensionMismatch("all inputs to eachindex must have the same indices, got Base.OneTo(5) and Base.OneTo(0)")
  Stacktrace:
   [1] throw_eachindex_mismatch(::IndexLinear, ::Array{UInt64,1}, ::Vararg{Any,N} where N) at ./errorshow.jl:556
   [2] eachindex at ./abstractarray.jl:859 [inlined]
   [3] eachindex at ./abstractarray.jl:849 [inlined]
   [4] row_group_slots(::Tuple{Array{Int64,1}}, ::Array{UInt64,1}, ::Array{Bool,1}, ::Array{Int64,1}, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:105
   [5] row_group_slots(::DataFrame, ::Array{Int64,1}, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:89
   [6] group_rows(::DataFrame, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:141
   [7] group_rows(::DataFrame) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:140
   [8] #join#138(::Array{Symbol,1}, ::Symbol, ::Bool, ::Function, ::DataFrame, ::DataFrame) at /home/vagrant/.julia/v0.7/DataFrames/src/abstractdataframe/join.jl:294
   [9] (::getfield(Base, Symbol("#kw##join")))(::NamedTuple{(:on,),Tuple{Array{Symbol,1}}}, ::typeof(join), ::DataFrame, ::DataFrame) at ./<missing>:0
   [10] #join#4(::Nothing, ::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::KeyedFrame, ::DataFrame) at /home/vagrant/.julia/v0.7/KeyedFrames/src/KeyedFrames.jl:185
   [11] join(::KeyedFrame, ::DataFrame) at /home/vagrant/.julia/v0.7/KeyedFrames/src/KeyedFrames.jl:185
   [12] macro expansion at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:263 [inlined]
   [13] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1008 [inlined]
   [14] macro expansion at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:261 [inlined]
   [15] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1008 [inlined]
   [16] top-level scope at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:6
join: Error During Test at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:264
  Test threw an exception of type DimensionMismatch
  Expression: isequal(join(df1, kf2), DataFrame(expected))
  DimensionMismatch("all inputs to eachindex must have the same indices, got Base.OneTo(5) and Base.OneTo(0)")
  Stacktrace:
   [1] throw_eachindex_mismatch(::IndexLinear, ::Array{UInt64,1}, ::Vararg{Any,N} where N) at ./errorshow.jl:556
   [2] eachindex at ./abstractarray.jl:859 [inlined]
   [3] eachindex at ./abstractarray.jl:849 [inlined]
   [4] row_group_slots(::Tuple{Array{Int64,1}}, ::Array{UInt64,1}, ::Array{Bool,1}, ::Array{Int64,1}, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:105
   [5] row_group_slots(::DataFrame, ::Array{Int64,1}, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:89
   [6] group_rows(::DataFrame, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:141
   [7] group_rows(::DataFrame) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:140
   [8] #join#138(::Array{Symbol,1}, ::Symbol, ::Bool, ::Function, ::DataFrame, ::DataFrame) at /home/vagrant/.julia/v0.7/DataFrames/src/abstractdataframe/join.jl:294
   [9] (::getfield(Base, Symbol("#kw##join")))(::NamedTuple{(:on,),Tuple{Array{Symbol,1}}}, ::typeof(join), ::DataFrame, ::DataFrame) at ./<missing>:0
   [10] #join#5(::Nothing, ::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::DataFrame, ::KeyedFrame) at /home/vagrant/.julia/v0.7/KeyedFrames/src/KeyedFrames.jl:193
   [11] join(::DataFrame, ::KeyedFrame) at /home/vagrant/.julia/v0.7/KeyedFrames/src/KeyedFrames.jl:193
   [12] macro expansion at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:264 [inlined]
   [13] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1008 [inlined]
   [14] macro expansion at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:261 [inlined]
   [15] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1008 [inlined]
   [16] top-level scope at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:6
join: Error During Test at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:266
  Test threw an exception of type DimensionMismatch
  Expression: isequal(join(kf1, kf2; kind=:right), expected)
  DimensionMismatch("all inputs to eachindex must have the same indices, got Base.OneTo(10) and Base.OneTo(0)")
  Stacktrace:
   [1] throw_eachindex_mismatch(::IndexLinear, ::Array{UInt64,1}, ::Vararg{Any,N} where N) at ./errorshow.jl:556
   [2] eachindex at ./abstractarray.jl:859 [inlined]
   [3] eachindex at ./abstractarray.jl:849 [inlined]
   [4] row_group_slots(::Tuple{Array{Int64,1}}, ::Array{UInt64,1}, ::Array{Bool,1}, ::Array{Int64,1}, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:105
   [5] row_group_slots(::DataFrame, ::Array{Int64,1}, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:89
   [6] group_rows(::DataFrame, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:141
   [7] group_rows(::DataFrame) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:140
   [8] #join#138(::Array{Symbol,1}, ::Symbol, ::Bool, ::Function, ::DataFrame, ::DataFrame) at /home/vagrant/.julia/v0.7/DataFrames/src/abstractdataframe/join.jl:304
   [9] (::getfield(Base, Symbol("#kw##join")))(::NamedTuple{(:on, :kind),Tuple{Array{Symbol,1},Symbol}}, ::typeof(join), ::DataFrame, ::DataFrame) at ./<missing>:0
   [10] #join#3(::Nothing, ::Symbol, ::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::KeyedFrame, ::KeyedFrame) at /home/vagrant/.julia/v0.7/KeyedFrames/src/KeyedFrames.jl:165
   [11] (::getfield(Base, Symbol("#kw##join")))(::NamedTuple{(:kind,),Tuple{Symbol}}, ::typeof(join), ::KeyedFrame, ::KeyedFrame) at ./<missing>:0
   [12] macro expansion at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:266 [inlined]
   [13] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1008 [inlined]
   [14] macro expansion at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:261 [inlined]
   [15] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1008 [inlined]
   [16] top-level scope at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:6
join: Error During Test at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:267
  Test threw an exception of type DimensionMismatch
  Expression: isequal(join(kf1, df2; kind=:right), expected)
  DimensionMismatch("all inputs to eachindex must have the same indices, got Base.OneTo(10) and Base.OneTo(0)")
  Stacktrace:
   [1] throw_eachindex_mismatch(::IndexLinear, ::Array{UInt64,1}, ::Vararg{Any,N} where N) at ./errorshow.jl:556
   [2] eachindex at ./abstractarray.jl:859 [inlined]
   [3] eachindex at ./abstractarray.jl:849 [inlined]
   [4] row_group_slots(::Tuple{Array{Int64,1}}, ::Array{UInt64,1}, ::Array{Bool,1}, ::Array{Int64,1}, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:105
   [5] row_group_slots(::DataFrame, ::Array{Int64,1}, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:89
   [6] group_rows(::DataFrame, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:141
   [7] group_rows(::DataFrame) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:140
   [8] #join#138(::Array{Symbol,1}, ::Symbol, ::Bool, ::Function, ::DataFrame, ::DataFrame) at /home/vagrant/.julia/v0.7/DataFrames/src/abstractdataframe/join.jl:304
   [9] (::getfield(Base, Symbol("#kw##join")))(::NamedTuple{(:on, :kind),Tuple{Array{Symbol,1},Symbol}}, ::typeof(join), ::DataFrame, ::DataFrame) at ./<missing>:0
   [10] #join#4(::Nothing, ::Base.Iterators.Pairs{Symbol,Symbol,Tuple{Symbol},NamedTuple{(:kind,),Tuple{Symbol}}}, ::Function, ::KeyedFrame, ::DataFrame) at /home/vagrant/.julia/v0.7/KeyedFrames/src/KeyedFrames.jl:185
   [11] (::getfield(Base, Symbol("#kw##join")))(::NamedTuple{(:kind,),Tuple{Symbol}}, ::typeof(join), ::KeyedFrame, ::DataFrame) at ./<missing>:0
   [12] macro expansion at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:267 [inlined]
   [13] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1008 [inlined]
   [14] macro expansion at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:261 [inlined]
   [15] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1008 [inlined]
   [16] top-level scope at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:6
join: Error During Test at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:268
  Test threw an exception of type DimensionMismatch
  Expression: isequal(join(df1, kf2; kind=:right), DataFrame(expected))
  DimensionMismatch("all inputs to eachindex must have the same indices, got Base.OneTo(10) and Base.OneTo(0)")
  Stacktrace:
   [1] throw_eachindex_mismatch(::IndexLinear, ::Array{UInt64,1}, ::Vararg{Any,N} where N) at ./errorshow.jl:556
   [2] eachindex at ./abstractarray.jl:859 [inlined]
   [3] eachindex at ./abstractarray.jl:849 [inlined]
   [4] row_group_slots(::Tuple{Array{Int64,1}}, ::Array{UInt64,1}, ::Array{Bool,1}, ::Array{Int64,1}, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:105
   [5] row_group_slots(::DataFrame, ::Array{Int64,1}, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:89
   [6] group_rows(::DataFrame, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:141
   [7] group_rows(::DataFrame) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:140
   [8] #join#138(::Array{Symbol,1}, ::Symbol, ::Bool, ::Function, ::DataFrame, ::DataFrame) at /home/vagrant/.julia/v0.7/DataFrames/src/abstractdataframe/join.jl:304
   [9] (::getfield(Base, Symbol("#kw##join")))(::NamedTuple{(:on, :kind),Tuple{Array{Symbol,1},Symbol}}, ::typeof(join), ::DataFrame, ::DataFrame) at ./<missing>:0
   [10] #join#5(::Nothing, ::Base.Iterators.Pairs{Symbol,Symbol,Tuple{Symbol},NamedTuple{(:kind,),Tuple{Symbol}}}, ::Function, ::DataFrame, ::KeyedFrame) at /home/vagrant/.julia/v0.7/KeyedFrames/src/KeyedFrames.jl:193
   [11] (::getfield(Base, Symbol("#kw##join")))(::NamedTuple{(:kind,),Tuple{Symbol}}, ::typeof(join), ::DataFrame, ::KeyedFrame) at ./<missing>:0
   [12] macro expansion at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:268 [inlined]
   [13] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1008 [inlined]
   [14] macro expansion at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:261 [inlined]
   [15] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1008 [inlined]
   [16] top-level scope at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:6
join: Error During Test at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:271
  Test threw an exception of type DimensionMismatch
  Expression: isequal(join(kf2, kf1; kind=:left), expected)
  DimensionMismatch("all inputs to eachindex must have the same indices, got Base.OneTo(10) and Base.OneTo(0)")
  Stacktrace:
   [1] throw_eachindex_mismatch(::IndexLinear, ::Array{UInt64,1}, ::Vararg{Any,N} where N) at ./errorshow.jl:556
   [2] eachindex at ./abstractarray.jl:859 [inlined]
   [3] eachindex at ./abstractarray.jl:849 [inlined]
   [4] row_group_slots(::Tuple{Array{Int64,1}}, ::Array{UInt64,1}, ::Array{Bool,1}, ::Array{Int64,1}, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:105
   [5] row_group_slots(::DataFrame, ::Array{Int64,1}, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:89
   [6] group_rows(::DataFrame, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:141
   [7] group_rows(::DataFrame) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:140
   [8] #join#138(::Array{Symbol,1}, ::Symbol, ::Bool, ::Function, ::DataFrame, ::DataFrame) at /home/vagrant/.julia/v0.7/DataFrames/src/abstractdataframe/join.jl:299
   [9] (::getfield(Base, Symbol("#kw##join")))(::NamedTuple{(:on, :kind),Tuple{Array{Symbol,1},Symbol}}, ::typeof(join), ::DataFrame, ::DataFrame) at ./<missing>:0
   [10] #join#3(::Nothing, ::Symbol, ::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::KeyedFrame, ::KeyedFrame) at /home/vagrant/.julia/v0.7/KeyedFrames/src/KeyedFrames.jl:165
   [11] (::getfield(Base, Symbol("#kw##join")))(::NamedTuple{(:kind,),Tuple{Symbol}}, ::typeof(join), ::KeyedFrame, ::KeyedFrame) at ./<missing>:0
   [12] macro expansion at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:271 [inlined]
   [13] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1008 [inlined]
   [14] macro expansion at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:261 [inlined]
   [15] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1008 [inlined]
   [16] top-level scope at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:6
join: Error During Test at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:273
  Test threw an exception of type DimensionMismatch
  Expression: isequal(join(kf2, df1; kind=:left), expected)
  DimensionMismatch("all inputs to eachindex must have the same indices, got Base.OneTo(10) and Base.OneTo(0)")
  Stacktrace:
   [1] throw_eachindex_mismatch(::IndexLinear, ::Array{UInt64,1}, ::Vararg{Any,N} where N) at ./errorshow.jl:556
   [2] eachindex at ./abstractarray.jl:859 [inlined]
   [3] eachindex at ./abstractarray.jl:849 [inlined]
   [4] row_group_slots(::Tuple{Array{Int64,1}}, ::Array{UInt64,1}, ::Array{Bool,1}, ::Array{Int64,1}, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:105
   [5] row_group_slots(::DataFrame, ::Array{Int64,1}, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:89
   [6] group_rows(::DataFrame, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:141
   [7] group_rows(::DataFrame) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:140
   [8] #join#138(::Array{Symbol,1}, ::Symbol, ::Bool, ::Function, ::DataFrame, ::DataFrame) at /home/vagrant/.julia/v0.7/DataFrames/src/abstractdataframe/join.jl:299
   [9] (::getfield(Base, Symbol("#kw##join")))(::NamedTuple{(:on, :kind),Tuple{Array{Symbol,1},Symbol}}, ::typeof(join), ::DataFrame, ::DataFrame) at ./<missing>:0
   [10] #join#4(::Nothing, ::Base.Iterators.Pairs{Symbol,Symbol,Tuple{Symbol},NamedTuple{(:kind,),Tuple{Symbol}}}, ::Function, ::KeyedFrame, ::DataFrame) at /home/vagrant/.julia/v0.7/KeyedFrames/src/KeyedFrames.jl:185
   [11] (::getfield(Base, Symbol("#kw##join")))(::NamedTuple{(:kind,),Tuple{Symbol}}, ::typeof(join), ::KeyedFrame, ::DataFrame) at ./<missing>:0
   [12] macro expansion at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:273 [inlined]
   [13] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1008 [inlined]
   [14] macro expansion at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:261 [inlined]
   [15] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1008 [inlined]
   [16] top-level scope at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:6
join: Error During Test at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:274
  Test threw an exception of type DimensionMismatch
  Expression: isequal(join(df2, kf1; kind=:left), DataFrame(expected))
  DimensionMismatch("all inputs to eachindex must have the same indices, got Base.OneTo(10) and Base.OneTo(0)")
  Stacktrace:
   [1] throw_eachindex_mismatch(::IndexLinear, ::Array{UInt64,1}, ::Vararg{Any,N} where N) at ./errorshow.jl:556
   [2] eachindex at ./abstractarray.jl:859 [inlined]
   [3] eachindex at ./abstractarray.jl:849 [inlined]
   [4] row_group_slots(::Tuple{Array{Int64,1}}, ::Array{UInt64,1}, ::Array{Bool,1}, ::Array{Int64,1}, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:105
   [5] row_group_slots(::DataFrame, ::Array{Int64,1}, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:89
   [6] group_rows(::DataFrame, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:141
   [7] group_rows(::DataFrame) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:140
   [8] #join#138(::Array{Symbol,1}, ::Symbol, ::Bool, ::Function, ::DataFrame, ::DataFrame) at /home/vagrant/.julia/v0.7/DataFrames/src/abstractdataframe/join.jl:299
   [9] (::getfield(Base, Symbol("#kw##join")))(::NamedTuple{(:on, :kind),Tuple{Array{Symbol,1},Symbol}}, ::typeof(join), ::DataFrame, ::DataFrame) at ./<missing>:0
   [10] #join#5(::Nothing, ::Base.Iterators.Pairs{Symbol,Symbol,Tuple{Symbol},NamedTuple{(:kind,),Tuple{Symbol}}}, ::Function, ::DataFrame, ::KeyedFrame) at /home/vagrant/.julia/v0.7/KeyedFrames/src/KeyedFrames.jl:193
   [11] (::getfield(Base, Symbol("#kw##join")))(::NamedTuple{(:kind,),Tuple{Symbol}}, ::typeof(join), ::DataFrame, ::KeyedFrame) at ./<missing>:0
   [12] macro expansion at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:274 [inlined]
   [13] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1008 [inlined]
   [14] macro expansion at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:261 [inlined]
   [15] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1008 [inlined]
   [16] top-level scope at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:6
join: Error During Test at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:279
  Test threw an exception of type DimensionMismatch
  Expression: isequal(join(kf1, kf2; kind=:outer), expected)
  DimensionMismatch("all inputs to eachindex must have the same indices, got Base.OneTo(5) and Base.OneTo(0)")
  Stacktrace:
   [1] throw_eachindex_mismatch(::IndexLinear, ::Array{UInt64,1}, ::Vararg{Any,N} where N) at ./errorshow.jl:556
   [2] eachindex at ./abstractarray.jl:859 [inlined]
   [3] eachindex at ./abstractarray.jl:849 [inlined]
   [4] row_group_slots(::Tuple{Array{Int64,1}}, ::Array{UInt64,1}, ::Array{Bool,1}, ::Array{Int64,1}, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:105
   [5] row_group_slots(::DataFrame, ::Array{Int64,1}, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:89
   [6] group_rows(::DataFrame, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:141
   [7] group_rows(::DataFrame) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:140
   [8] #join#138(::Array{Symbol,1}, ::Symbol, ::Bool, ::Function, ::DataFrame, ::DataFrame) at /home/vagrant/.julia/v0.7/DataFrames/src/abstractdataframe/join.jl:309
   [9] (::getfield(Base, Symbol("#kw##join")))(::NamedTuple{(:on, :kind),Tuple{Array{Symbol,1},Symbol}}, ::typeof(join), ::DataFrame, ::DataFrame) at ./<missing>:0
   [10] #join#3(::Nothing, ::Symbol, ::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::KeyedFrame, ::KeyedFrame) at /home/vagrant/.julia/v0.7/KeyedFrames/src/KeyedFrames.jl:165
   [11] (::getfield(Base, Symbol("#kw##join")))(::NamedTuple{(:kind,),Tuple{Symbol}}, ::typeof(join), ::KeyedFrame, ::KeyedFrame) at ./<missing>:0
   [12] macro expansion at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:279 [inlined]
   [13] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1008 [inlined]
   [14] macro expansion at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:261 [inlined]
   [15] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1008 [inlined]
   [16] top-level scope at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:6
join: Error During Test at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:280
  Test threw an exception of type DimensionMismatch
  Expression: isequal(join(kf1, df2; kind=:outer), expected)
  DimensionMismatch("all inputs to eachindex must have the same indices, got Base.OneTo(5) and Base.OneTo(0)")
  Stacktrace:
   [1] throw_eachindex_mismatch(::IndexLinear, ::Array{UInt64,1}, ::Vararg{Any,N} where N) at ./errorshow.jl:556
   [2] eachindex at ./abstractarray.jl:859 [inlined]
   [3] eachindex at ./abstractarray.jl:849 [inlined]
   [4] row_group_slots(::Tuple{Array{Int64,1}}, ::Array{UInt64,1}, ::Array{Bool,1}, ::Array{Int64,1}, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:105
   [5] row_group_slots(::DataFrame, ::Array{Int64,1}, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:89
   [6] group_rows(::DataFrame, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:141
   [7] group_rows(::DataFrame) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:140
   [8] #join#138(::Array{Symbol,1}, ::Symbol, ::Bool, ::Function, ::DataFrame, ::DataFrame) at /home/vagrant/.julia/v0.7/DataFrames/src/abstractdataframe/join.jl:309
   [9] (::getfield(Base, Symbol("#kw##join")))(::NamedTuple{(:on, :kind),Tuple{Array{Symbol,1},Symbol}}, ::typeof(join), ::DataFrame, ::DataFrame) at ./<missing>:0
   [10] #join#4(::Nothing, ::Base.Iterators.Pairs{Symbol,Symbol,Tuple{Symbol},NamedTuple{(:kind,),Tuple{Symbol}}}, ::Function, ::KeyedFrame, ::DataFrame) at /home/vagrant/.julia/v0.7/KeyedFrames/src/KeyedFrames.jl:185
   [11] (::getfield(Base, Symbol("#kw##join")))(::NamedTuple{(:kind,),Tuple{Symbol}}, ::typeof(join), ::KeyedFrame, ::DataFrame) at ./<missing>:0
   [12] macro expansion at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:280 [inlined]
   [13] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1008 [inlined]
   [14] macro expansion at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:261 [inlined]
   [15] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1008 [inlined]
   [16] top-level scope at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:6
join: Error During Test at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:281
  Test threw an exception of type DimensionMismatch
  Expression: isequal(join(df1, kf2; kind=:outer), DataFrame(expected))
  DimensionMismatch("all inputs to eachindex must have the same indices, got Base.OneTo(5) and Base.OneTo(0)")
  Stacktrace:
   [1] throw_eachindex_mismatch(::IndexLinear, ::Array{UInt64,1}, ::Vararg{Any,N} where N) at ./errorshow.jl:556
   [2] eachindex at ./abstractarray.jl:859 [inlined]
   [3] eachindex at ./abstractarray.jl:849 [inlined]
   [4] row_group_slots(::Tuple{Array{Int64,1}}, ::Array{UInt64,1}, ::Array{Bool,1}, ::Array{Int64,1}, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:105
   [5] row_group_slots(::DataFrame, ::Array{Int64,1}, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:89
   [6] group_rows(::DataFrame, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:141
   [7] group_rows(::DataFrame) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:140
   [8] #join#138(::Array{Symbol,1}, ::Symbol, ::Bool, ::Function, ::DataFrame, ::DataFrame) at /home/vagrant/.julia/v0.7/DataFrames/src/abstractdataframe/join.jl:309
   [9] (::getfield(Base, Symbol("#kw##join")))(::NamedTuple{(:on, :kind),Tuple{Array{Symbol,1},Symbol}}, ::typeof(join), ::DataFrame, ::DataFrame) at ./<missing>:0
   [10] #join#5(::Nothing, ::Base.Iterators.Pairs{Symbol,Symbol,Tuple{Symbol},NamedTuple{(:kind,),Tuple{Symbol}}}, ::Function, ::DataFrame, ::KeyedFrame) at /home/vagrant/.julia/v0.7/KeyedFrames/src/KeyedFrames.jl:193
   [11] (::getfield(Base, Symbol("#kw##join")))(::NamedTuple{(:kind,),Tuple{Symbol}}, ::typeof(join), ::DataFrame, ::KeyedFrame) at ./<missing>:0
   [12] macro expansion at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:281 [inlined]
   [13] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1008 [inlined]
   [14] macro expansion at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:261 [inlined]
   [15] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1008 [inlined]
   [16] top-level scope at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:6
join: Error During Test at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:283
  Test threw an exception of type DimensionMismatch
  Expression: isequal(join(kf1, kf2; kind=:left), expected)
  DimensionMismatch("all inputs to eachindex must have the same indices, got Base.OneTo(5) and Base.OneTo(0)")
  Stacktrace:
   [1] throw_eachindex_mismatch(::IndexLinear, ::Array{UInt64,1}, ::Vararg{Any,N} where N) at ./errorshow.jl:556
   [2] eachindex at ./abstractarray.jl:859 [inlined]
   [3] eachindex at ./abstractarray.jl:849 [inlined]
   [4] row_group_slots(::Tuple{Array{Int64,1}}, ::Array{UInt64,1}, ::Array{Bool,1}, ::Array{Int64,1}, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:105
   [5] row_group_slots(::DataFrame, ::Array{Int64,1}, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:89
   [6] group_rows(::DataFrame, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:141
   [7] group_rows(::DataFrame) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:140
   [8] #join#138(::Array{Symbol,1}, ::Symbol, ::Bool, ::Function, ::DataFrame, ::DataFrame) at /home/vagrant/.julia/v0.7/DataFrames/src/abstractdataframe/join.jl:299
   [9] (::getfield(Base, Symbol("#kw##join")))(::NamedTuple{(:on, :kind),Tuple{Array{Symbol,1},Symbol}}, ::typeof(join), ::DataFrame, ::DataFrame) at ./<missing>:0
   [10] #join#3(::Nothing, ::Symbol, ::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::KeyedFrame, ::KeyedFrame) at /home/vagrant/.julia/v0.7/KeyedFrames/src/KeyedFrames.jl:165
   [11] (::getfield(Base, Symbol("#kw##join")))(::NamedTuple{(:kind,),Tuple{Symbol}}, ::typeof(join), ::KeyedFrame, ::KeyedFrame) at ./<missing>:0
   [12] macro expansion at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:283 [inlined]
   [13] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1008 [inlined]
   [14] macro expansion at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:261 [inlined]
   [15] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1008 [inlined]
   [16] top-level scope at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:6
join: Error During Test at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:284
  Test threw an exception of type DimensionMismatch
  Expression: isequal(join(kf1, df2; kind=:left), expected)
  DimensionMismatch("all inputs to eachindex must have the same indices, got Base.OneTo(5) and Base.OneTo(0)")
  Stacktrace:
   [1] throw_eachindex_mismatch(::IndexLinear, ::Array{UInt64,1}, ::Vararg{Any,N} where N) at ./errorshow.jl:556
   [2] eachindex at ./abstractarray.jl:859 [inlined]
   [3] eachindex at ./abstractarray.jl:849 [inlined]
   [4] row_group_slots(::Tuple{Array{Int64,1}}, ::Array{UInt64,1}, ::Array{Bool,1}, ::Array{Int64,1}, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:105
   [5] row_group_slots(::DataFrame, ::Array{Int64,1}, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:89
   [6] group_rows(::DataFrame, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:141
   [7] group_rows(::DataFrame) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:140
   [8] #join#138(::Array{Symbol,1}, ::Symbol, ::Bool, ::Function, ::DataFrame, ::DataFrame) at /home/vagrant/.julia/v0.7/DataFrames/src/abstractdataframe/join.jl:299
   [9] (::getfield(Base, Symbol("#kw##join")))(::NamedTuple{(:on, :kind),Tuple{Array{Symbol,1},Symbol}}, ::typeof(join), ::DataFrame, ::DataFrame) at ./<missing>:0
   [10] #join#4(::Nothing, ::Base.Iterators.Pairs{Symbol,Symbol,Tuple{Symbol},NamedTuple{(:kind,),Tuple{Symbol}}}, ::Function, ::KeyedFrame, ::DataFrame) at /home/vagrant/.julia/v0.7/KeyedFrames/src/KeyedFrames.jl:185
   [11] (::getfield(Base, Symbol("#kw##join")))(::NamedTuple{(:kind,),Tuple{Symbol}}, ::typeof(join), ::KeyedFrame, ::DataFrame) at ./<missing>:0
   [12] macro expansion at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:284 [inlined]
   [13] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1008 [inlined]
   [14] macro expansion at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:261 [inlined]
   [15] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1008 [inlined]
   [16] top-level scope at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:6
join: Error During Test at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:285
  Test threw an exception of type DimensionMismatch
  Expression: isequal(join(df1, kf2; kind=:left), DataFrame(expected))
  DimensionMismatch("all inputs to eachindex must have the same indices, got Base.OneTo(5) and Base.OneTo(0)")
  Stacktrace:
   [1] throw_eachindex_mismatch(::IndexLinear, ::Array{UInt64,1}, ::Vararg{Any,N} where N) at ./errorshow.jl:556
   [2] eachindex at ./abstractarray.jl:859 [inlined]
   [3] eachindex at ./abstractarray.jl:849 [inlined]
   [4] row_group_slots(::Tuple{Array{Int64,1}}, ::Array{UInt64,1}, ::Array{Bool,1}, ::Array{Int64,1}, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:105
   [5] row_group_slots(::DataFrame, ::Array{Int64,1}, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:89
   [6] group_rows(::DataFrame, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:141
   [7] group_rows(::DataFrame) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:140
   [8] #join#138(::Array{Symbol,1}, ::Symbol, ::Bool, ::Function, ::DataFrame, ::DataFrame) at /home/vagrant/.julia/v0.7/DataFrames/src/abstractdataframe/join.jl:299
   [9] (::getfield(Base, Symbol("#kw##join")))(::NamedTuple{(:on, :kind),Tuple{Array{Symbol,1},Symbol}}, ::typeof(join), ::DataFrame, ::DataFrame) at ./<missing>:0
   [10] #join#5(::Nothing, ::Base.Iterators.Pairs{Symbol,Symbol,Tuple{Symbol},NamedTuple{(:kind,),Tuple{Symbol}}}, ::Function, ::DataFrame, ::KeyedFrame) at /home/vagrant/.julia/v0.7/KeyedFrames/src/KeyedFrames.jl:193
   [11] (::getfield(Base, Symbol("#kw##join")))(::NamedTuple{(:kind,),Tuple{Symbol}}, ::typeof(join), ::DataFrame, ::KeyedFrame) at ./<missing>:0
   [12] macro expansion at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:285 [inlined]
   [13] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1008 [inlined]
   [14] macro expansion at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:261 [inlined]
   [15] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1008 [inlined]
   [16] top-level scope at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:6
join: Error During Test at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:290
  Test threw an exception of type DimensionMismatch
  Expression: isequal(join(kf2, kf1; kind=:right), expected)
  DimensionMismatch("all inputs to eachindex must have the same indices, got Base.OneTo(5) and Base.OneTo(0)")
  Stacktrace:
   [1] throw_eachindex_mismatch(::IndexLinear, ::Array{UInt64,1}, ::Vararg{Any,N} where N) at ./errorshow.jl:556
   [2] eachindex at ./abstractarray.jl:859 [inlined]
   [3] eachindex at ./abstractarray.jl:849 [inlined]
   [4] row_group_slots(::Tuple{Array{Int64,1}}, ::Array{UInt64,1}, ::Array{Bool,1}, ::Array{Int64,1}, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:105
   [5] row_group_slots(::DataFrame, ::Array{Int64,1}, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:89
   [6] group_rows(::DataFrame, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:141
   [7] group_rows(::DataFrame) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:140
   [8] #join#138(::Array{Symbol,1}, ::Symbol, ::Bool, ::Function, ::DataFrame, ::DataFrame) at /home/vagrant/.julia/v0.7/DataFrames/src/abstractdataframe/join.jl:304
   [9] (::getfield(Base, Symbol("#kw##join")))(::NamedTuple{(:on, :kind),Tuple{Array{Symbol,1},Symbol}}, ::typeof(join), ::DataFrame, ::DataFrame) at ./<missing>:0
   [10] #join#3(::Nothing, ::Symbol, ::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::KeyedFrame, ::KeyedFrame) at /home/vagrant/.julia/v0.7/KeyedFrames/src/KeyedFrames.jl:165
   [11] (::getfield(Base, Symbol("#kw##join")))(::NamedTuple{(:kind,),Tuple{Symbol}}, ::typeof(join), ::KeyedFrame, ::KeyedFrame) at ./<missing>:0
   [12] macro expansion at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:290 [inlined]
   [13] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1008 [inlined]
   [14] macro expansion at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:261 [inlined]
   [15] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1008 [inlined]
   [16] top-level scope at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:6
join: Error During Test at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:294
  Test threw an exception of type DimensionMismatch
  Expression: isequal(join(kf2, df1; kind=:right), expected)
  DimensionMismatch("all inputs to eachindex must have the same indices, got Base.OneTo(5) and Base.OneTo(0)")
  Stacktrace:
   [1] throw_eachindex_mismatch(::IndexLinear, ::Array{UInt64,1}, ::Vararg{Any,N} where N) at ./errorshow.jl:556
   [2] eachindex at ./abstractarray.jl:859 [inlined]
   [3] eachindex at ./abstractarray.jl:849 [inlined]
   [4] row_group_slots(::Tuple{Array{Int64,1}}, ::Array{UInt64,1}, ::Array{Bool,1}, ::Array{Int64,1}, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:105
   [5] row_group_slots(::DataFrame, ::Array{Int64,1}, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:89
   [6] group_rows(::DataFrame, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:141
   [7] group_rows(::DataFrame) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:140
   [8] #join#138(::Array{Symbol,1}, ::Symbol, ::Bool, ::Function, ::DataFrame, ::DataFrame) at /home/vagrant/.julia/v0.7/DataFrames/src/abstractdataframe/join.jl:304
   [9] (::getfield(Base, Symbol("#kw##join")))(::NamedTuple{(:on, :kind),Tuple{Array{Symbol,1},Symbol}}, ::typeof(join), ::DataFrame, ::DataFrame) at ./<missing>:0
   [10] #join#4(::Nothing, ::Base.Iterators.Pairs{Symbol,Symbol,Tuple{Symbol},NamedTuple{(:kind,),Tuple{Symbol}}}, ::Function, ::KeyedFrame, ::DataFrame) at /home/vagrant/.julia/v0.7/KeyedFrames/src/KeyedFrames.jl:185
   [11] (::getfield(Base, Symbol("#kw##join")))(::NamedTuple{(:kind,),Tuple{Symbol}}, ::typeof(join), ::KeyedFrame, ::DataFrame) at ./<missing>:0
   [12] macro expansion at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:294 [inlined]
   [13] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1008 [inlined]
   [14] macro expansion at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:261 [inlined]
   [15] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1008 [inlined]
   [16] top-level scope at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:6
join: Error During Test at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:296
  Test threw an exception of type DimensionMismatch
  Expression: isequal(join(df2, kf1; kind=:right), DataFrame(expected))
  DimensionMismatch("all inputs to eachindex must have the same indices, got Base.OneTo(5) and Base.OneTo(0)")
  Stacktrace:
   [1] throw_eachindex_mismatch(::IndexLinear, ::Array{UInt64,1}, ::Vararg{Any,N} where N) at ./errorshow.jl:556
   [2] eachindex at ./abstractarray.jl:859 [inlined]
   [3] eachindex at ./abstractarray.jl:849 [inlined]
   [4] row_group_slots(::Tuple{Array{Int64,1}}, ::Array{UInt64,1}, ::Array{Bool,1}, ::Array{Int64,1}, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:105
   [5] row_group_slots(::DataFrame, ::Array{Int64,1}, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:89
   [6] group_rows(::DataFrame, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:141
   [7] group_rows(::DataFrame) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:140
   [8] #join#138(::Array{Symbol,1}, ::Symbol, ::Bool, ::Function, ::DataFrame, ::DataFrame) at /home/vagrant/.julia/v0.7/DataFrames/src/abstractdataframe/join.jl:304
   [9] (::getfield(Base, Symbol("#kw##join")))(::NamedTuple{(:on, :kind),Tuple{Array{Symbol,1},Symbol}}, ::typeof(join), ::DataFrame, ::DataFrame) at ./<missing>:0
   [10] #join#5(::Nothing, ::Base.Iterators.Pairs{Symbol,Symbol,Tuple{Symbol},NamedTuple{(:kind,),Tuple{Symbol}}}, ::Function, ::DataFrame, ::KeyedFrame) at /home/vagrant/.julia/v0.7/KeyedFrames/src/KeyedFrames.jl:193
   [11] (::getfield(Base, Symbol("#kw##join")))(::NamedTuple{(:kind,),Tuple{Symbol}}, ::typeof(join), ::DataFrame, ::KeyedFrame) at ./<missing>:0
   [12] macro expansion at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:296 [inlined]
   [13] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1008 [inlined]
   [14] macro expansion at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:261 [inlined]
   [15] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1008 [inlined]
   [16] top-level scope at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:6
join: Error During Test at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:299
  Test threw an exception of type DimensionMismatch
  Expression: isequal(join(kf1, kf2; kind=:semi), expected)
  DimensionMismatch("all inputs to eachindex must have the same indices, got Base.OneTo(5) and Base.OneTo(0)")
  Stacktrace:
   [1] throw_eachindex_mismatch(::IndexLinear, ::Array{UInt64,1}, ::Vararg{Any,N} where N) at ./errorshow.jl:556
   [2] eachindex at ./abstractarray.jl:859 [inlined]
   [3] eachindex at ./abstractarray.jl:849 [inlined]
   [4] row_group_slots(::Tuple{Array{Int64,1}}, ::Array{UInt64,1}, ::Array{Bool,1}, ::Array{Int64,1}, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:105
   [5] row_group_slots(::DataFrame, ::Array{Int64,1}, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:89
   [6] group_rows(::DataFrame, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:141
   [7] group_rows(::DataFrame) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:140
   [8] #join#138(::Array{Symbol,1}, ::Symbol, ::Bool, ::Function, ::DataFrame, ::DataFrame) at /home/vagrant/.julia/v0.7/DataFrames/src/abstractdataframe/join.jl:315
   [9] (::getfield(Base, Symbol("#kw##join")))(::NamedTuple{(:on, :kind),Tuple{Array{Symbol,1},Symbol}}, ::typeof(join), ::DataFrame, ::DataFrame) at ./<missing>:0
   [10] #join#3(::Nothing, ::Symbol, ::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::KeyedFrame, ::KeyedFrame) at /home/vagrant/.julia/v0.7/KeyedFrames/src/KeyedFrames.jl:165
   [11] (::getfield(Base, Symbol("#kw##join")))(::NamedTuple{(:kind,),Tuple{Symbol}}, ::typeof(join), ::KeyedFrame, ::KeyedFrame) at ./<missing>:0
   [12] macro expansion at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:299 [inlined]
   [13] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1008 [inlined]
   [14] macro expansion at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:261 [inlined]
   [15] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1008 [inlined]
   [16] top-level scope at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:6
join: Error During Test at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:300
  Test threw an exception of type DimensionMismatch
  Expression: isequal(join(kf1, df2; kind=:semi), expected)
  DimensionMismatch("all inputs to eachindex must have the same indices, got Base.OneTo(5) and Base.OneTo(0)")
  Stacktrace:
   [1] throw_eachindex_mismatch(::IndexLinear, ::Array{UInt64,1}, ::Vararg{Any,N} where N) at ./errorshow.jl:556
   [2] eachindex at ./abstractarray.jl:859 [inlined]
   [3] eachindex at ./abstractarray.jl:849 [inlined]
   [4] row_group_slots(::Tuple{Array{Int64,1}}, ::Array{UInt64,1}, ::Array{Bool,1}, ::Array{Int64,1}, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:105
   [5] row_group_slots(::DataFrame, ::Array{Int64,1}, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:89
   [6] group_rows(::DataFrame, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:141
   [7] group_rows(::DataFrame) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:140
   [8] #join#138(::Array{Symbol,1}, ::Symbol, ::Bool, ::Function, ::DataFrame, ::DataFrame) at /home/vagrant/.julia/v0.7/DataFrames/src/abstractdataframe/join.jl:315
   [9] (::getfield(Base, Symbol("#kw##join")))(::NamedTuple{(:on, :kind),Tuple{Array{Symbol,1},Symbol}}, ::typeof(join), ::DataFrame, ::DataFrame) at ./<missing>:0
   [10] #join#4(::Nothing, ::Base.Iterators.Pairs{Symbol,Symbol,Tuple{Symbol},NamedTuple{(:kind,),Tuple{Symbol}}}, ::Function, ::KeyedFrame, ::DataFrame) at /home/vagrant/.julia/v0.7/KeyedFrames/src/KeyedFrames.jl:185
   [11] (::getfield(Base, Symbol("#kw##join")))(::NamedTuple{(:kind,),Tuple{Symbol}}, ::typeof(join), ::KeyedFrame, ::DataFrame) at ./<missing>:0
   [12] macro expansion at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:300 [inlined]
   [13] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1008 [inlined]
   [14] macro expansion at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:261 [inlined]
   [15] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1008 [inlined]
   [16] top-level scope at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:6
join: Error During Test at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:301
  Test threw an exception of type DimensionMismatch
  Expression: isequal(join(df1, kf2; kind=:semi), DataFrame(expected))
  DimensionMismatch("all inputs to eachindex must have the same indices, got Base.OneTo(5) and Base.OneTo(0)")
  Stacktrace:
   [1] throw_eachindex_mismatch(::IndexLinear, ::Array{UInt64,1}, ::Vararg{Any,N} where N) at ./errorshow.jl:556
   [2] eachindex at ./abstractarray.jl:859 [inlined]
   [3] eachindex at ./abstractarray.jl:849 [inlined]
   [4] row_group_slots(::Tuple{Array{Int64,1}}, ::Array{UInt64,1}, ::Array{Bool,1}, ::Array{Int64,1}, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:105
   [5] row_group_slots(::DataFrame, ::Array{Int64,1}, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:89
   [6] group_rows(::DataFrame, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:141
   [7] group_rows(::DataFrame) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:140
   [8] #join#138(::Array{Symbol,1}, ::Symbol, ::Bool, ::Function, ::DataFrame, ::DataFrame) at /home/vagrant/.julia/v0.7/DataFrames/src/abstractdataframe/join.jl:315
   [9] (::getfield(Base, Symbol("#kw##join")))(::NamedTuple{(:on, :kind),Tuple{Array{Symbol,1},Symbol}}, ::typeof(join), ::DataFrame, ::DataFrame) at ./<missing>:0
   [10] #join#5(::Nothing, ::Base.Iterators.Pairs{Symbol,Symbol,Tuple{Symbol},NamedTuple{(:kind,),Tuple{Symbol}}}, ::Function, ::DataFrame, ::KeyedFrame) at /home/vagrant/.julia/v0.7/KeyedFrames/src/KeyedFrames.jl:193
   [11] (::getfield(Base, Symbol("#kw##join")))(::NamedTuple{(:kind,),Tuple{Symbol}}, ::typeof(join), ::DataFrame, ::KeyedFrame) at ./<missing>:0
   [12] macro expansion at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:301 [inlined]
   [13] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1008 [inlined]
   [14] macro expansion at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:261 [inlined]
   [15] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1008 [inlined]
   [16] top-level scope at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:6
join: Error During Test at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:304
  Test threw an exception of type DimensionMismatch
  Expression: isequal(join(kf2, kf1; kind=:semi), expected)
  DimensionMismatch("all inputs to eachindex must have the same indices, got Base.OneTo(10) and Base.OneTo(0)")
  Stacktrace:
   [1] throw_eachindex_mismatch(::IndexLinear, ::Array{UInt64,1}, ::Vararg{Any,N} where N) at ./errorshow.jl:556
   [2] eachindex at ./abstractarray.jl:859 [inlined]
   [3] eachindex at ./abstractarray.jl:849 [inlined]
   [4] row_group_slots(::Tuple{Array{Int64,1}}, ::Array{UInt64,1}, ::Array{Bool,1}, ::Array{Int64,1}, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:105
   [5] row_group_slots(::DataFrame, ::Array{Int64,1}, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:89
   [6] group_rows(::DataFrame, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:141
   [7] group_rows(::DataFrame) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:140
   [8] #join#138(::Array{Symbol,1}, ::Symbol, ::Bool, ::Function, ::DataFrame, ::DataFrame) at /home/vagrant/.julia/v0.7/DataFrames/src/abstractdataframe/join.jl:315
   [9] (::getfield(Base, Symbol("#kw##join")))(::NamedTuple{(:on, :kind),Tuple{Array{Symbol,1},Symbol}}, ::typeof(join), ::DataFrame, ::DataFrame) at ./<missing>:0
   [10] #join#3(::Nothing, ::Symbol, ::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::KeyedFrame, ::KeyedFrame) at /home/vagrant/.julia/v0.7/KeyedFrames/src/KeyedFrames.jl:165
   [11] (::getfield(Base, Symbol("#kw##join")))(::NamedTuple{(:kind,),Tuple{Symbol}}, ::typeof(join), ::KeyedFrame, ::KeyedFrame) at ./<missing>:0
   [12] macro expansion at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:304 [inlined]
   [13] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1008 [inlined]
   [14] macro expansion at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:261 [inlined]
   [15] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1008 [inlined]
   [16] top-level scope at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:6
join: Error During Test at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:305
  Test threw an exception of type DimensionMismatch
  Expression: isequal(join(kf2, df1; kind=:semi), expected)
  DimensionMismatch("all inputs to eachindex must have the same indices, got Base.OneTo(10) and Base.OneTo(0)")
  Stacktrace:
   [1] throw_eachindex_mismatch(::IndexLinear, ::Array{UInt64,1}, ::Vararg{Any,N} where N) at ./errorshow.jl:556
   [2] eachindex at ./abstractarray.jl:859 [inlined]
   [3] eachindex at ./abstractarray.jl:849 [inlined]
   [4] row_group_slots(::Tuple{Array{Int64,1}}, ::Array{UInt64,1}, ::Array{Bool,1}, ::Array{Int64,1}, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:105
   [5] row_group_slots(::DataFrame, ::Array{Int64,1}, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:89
   [6] group_rows(::DataFrame, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:141
   [7] group_rows(::DataFrame) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:140
   [8] #join#138(::Array{Symbol,1}, ::Symbol, ::Bool, ::Function, ::DataFrame, ::DataFrame) at /home/vagrant/.julia/v0.7/DataFrames/src/abstractdataframe/join.jl:315
   [9] (::getfield(Base, Symbol("#kw##join")))(::NamedTuple{(:on, :kind),Tuple{Array{Symbol,1},Symbol}}, ::typeof(join), ::DataFrame, ::DataFrame) at ./<missing>:0
   [10] #join#4(::Nothing, ::Base.Iterators.Pairs{Symbol,Symbol,Tuple{Symbol},NamedTuple{(:kind,),Tuple{Symbol}}}, ::Function, ::KeyedFrame, ::DataFrame) at /home/vagrant/.julia/v0.7/KeyedFrames/src/KeyedFrames.jl:185
   [11] (::getfield(Base, Symbol("#kw##join")))(::NamedTuple{(:kind,),Tuple{Symbol}}, ::typeof(join), ::KeyedFrame, ::DataFrame) at ./<missing>:0
   [12] macro expansion at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:305 [inlined]
   [13] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1008 [inlined]
   [14] macro expansion at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:261 [inlined]
   [15] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1008 [inlined]
   [16] top-level scope at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:6
join: Error During Test at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:306
  Test threw an exception of type DimensionMismatch
  Expression: isequal(join(df2, kf1; kind=:semi), DataFrame(expected))
  DimensionMismatch("all inputs to eachindex must have the same indices, got Base.OneTo(10) and Base.OneTo(0)")
  Stacktrace:
   [1] throw_eachindex_mismatch(::IndexLinear, ::Array{UInt64,1}, ::Vararg{Any,N} where N) at ./errorshow.jl:556
   [2] eachindex at ./abstractarray.jl:859 [inlined]
   [3] eachindex at ./abstractarray.jl:849 [inlined]
   [4] row_group_slots(::Tuple{Array{Int64,1}}, ::Array{UInt64,1}, ::Array{Bool,1}, ::Array{Int64,1}, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:105
   [5] row_group_slots(::DataFrame, ::Array{Int64,1}, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:89
   [6] group_rows(::DataFrame, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:141
   [7] group_rows(::DataFrame) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:140
   [8] #join#138(::Array{Symbol,1}, ::Symbol, ::Bool, ::Function, ::DataFrame, ::DataFrame) at /home/vagrant/.julia/v0.7/DataFrames/src/abstractdataframe/join.jl:315
   [9] (::getfield(Base, Symbol("#kw##join")))(::NamedTuple{(:on, :kind),Tuple{Array{Symbol,1},Symbol}}, ::typeof(join), ::DataFrame, ::DataFrame) at ./<missing>:0
   [10] #join#5(::Nothing, ::Base.Iterators.Pairs{Symbol,Symbol,Tuple{Symbol},NamedTuple{(:kind,),Tuple{Symbol}}}, ::Function, ::DataFrame, ::KeyedFrame) at /home/vagrant/.julia/v0.7/KeyedFrames/src/KeyedFrames.jl:193
   [11] (::getfield(Base, Symbol("#kw##join")))(::NamedTuple{(:kind,),Tuple{Symbol}}, ::typeof(join), ::DataFrame, ::KeyedFrame) at ./<missing>:0
   [12] macro expansion at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:306 [inlined]
   [13] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1008 [inlined]
   [14] macro expansion at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:261 [inlined]
   [15] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1008 [inlined]
   [16] top-level scope at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:6
join: Error During Test at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:309
  Test threw an exception of type DimensionMismatch
  Expression: isequal(join(kf1, kf2; kind=:anti), expected)
  DimensionMismatch("all inputs to eachindex must have the same indices, got Base.OneTo(5) and Base.OneTo(0)")
  Stacktrace:
   [1] throw_eachindex_mismatch(::IndexLinear, ::Array{UInt64,1}, ::Vararg{Any,N} where N) at ./errorshow.jl:556
   [2] eachindex at ./abstractarray.jl:859 [inlined]
   [3] eachindex at ./abstractarray.jl:849 [inlined]
   [4] row_group_slots(::Tuple{Array{Int64,1}}, ::Array{UInt64,1}, ::Array{Bool,1}, ::Array{Int64,1}, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:105
   [5] row_group_slots(::DataFrame, ::Array{Int64,1}, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:89
   [6] group_rows(::DataFrame, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:141
   [7] group_rows(::DataFrame) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:140
   [8] #join#138(::Array{Symbol,1}, ::Symbol, ::Bool, ::Function, ::DataFrame, ::DataFrame) at /home/vagrant/.julia/v0.7/DataFrames/src/abstractdataframe/join.jl:329
   [9] (::getfield(Base, Symbol("#kw##join")))(::NamedTuple{(:on, :kind),Tuple{Array{Symbol,1},Symbol}}, ::typeof(join), ::DataFrame, ::DataFrame) at ./<missing>:0
   [10] #join#3(::Nothing, ::Symbol, ::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::KeyedFrame, ::KeyedFrame) at /home/vagrant/.julia/v0.7/KeyedFrames/src/KeyedFrames.jl:165
   [11] (::getfield(Base, Symbol("#kw##join")))(::NamedTuple{(:kind,),Tuple{Symbol}}, ::typeof(join), ::KeyedFrame, ::KeyedFrame) at ./<missing>:0
   [12] macro expansion at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:309 [inlined]
   [13] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1008 [inlined]
   [14] macro expansion at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:261 [inlined]
   [15] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1008 [inlined]
   [16] top-level scope at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:6
join: Error During Test at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:310
  Test threw an exception of type DimensionMismatch
  Expression: isequal(join(kf1, df2; kind=:anti), expected)
  DimensionMismatch("all inputs to eachindex must have the same indices, got Base.OneTo(5) and Base.OneTo(0)")
  Stacktrace:
   [1] throw_eachindex_mismatch(::IndexLinear, ::Array{UInt64,1}, ::Vararg{Any,N} where N) at ./errorshow.jl:556
   [2] eachindex at ./abstractarray.jl:859 [inlined]
   [3] eachindex at ./abstractarray.jl:849 [inlined]
   [4] row_group_slots(::Tuple{Array{Int64,1}}, ::Array{UInt64,1}, ::Array{Bool,1}, ::Array{Int64,1}, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:105
   [5] row_group_slots(::DataFrame, ::Array{Int64,1}, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:89
   [6] group_rows(::DataFrame, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:141
   [7] group_rows(::DataFrame) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:140
   [8] #join#138(::Array{Symbol,1}, ::Symbol, ::Bool, ::Function, ::DataFrame, ::DataFrame) at /home/vagrant/.julia/v0.7/DataFrames/src/abstractdataframe/join.jl:329
   [9] (::getfield(Base, Symbol("#kw##join")))(::NamedTuple{(:on, :kind),Tuple{Array{Symbol,1},Symbol}}, ::typeof(join), ::DataFrame, ::DataFrame) at ./<missing>:0
   [10] #join#4(::Nothing, ::Base.Iterators.Pairs{Symbol,Symbol,Tuple{Symbol},NamedTuple{(:kind,),Tuple{Symbol}}}, ::Function, ::KeyedFrame, ::DataFrame) at /home/vagrant/.julia/v0.7/KeyedFrames/src/KeyedFrames.jl:185
   [11] (::getfield(Base, Symbol("#kw##join")))(::NamedTuple{(:kind,),Tuple{Symbol}}, ::typeof(join), ::KeyedFrame, ::DataFrame) at ./<missing>:0
   [12] macro expansion at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:310 [inlined]
   [13] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1008 [inlined]
   [14] macro expansion at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:261 [inlined]
   [15] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1008 [inlined]
   [16] top-level scope at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:6
join: Error During Test at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:311
  Test threw an exception of type DimensionMismatch
  Expression: isequal(join(df1, kf2; kind=:anti), DataFrame(expected))
  DimensionMismatch("all inputs to eachindex must have the same indices, got Base.OneTo(5) and Base.OneTo(0)")
  Stacktrace:
   [1] throw_eachindex_mismatch(::IndexLinear, ::Array{UInt64,1}, ::Vararg{Any,N} where N) at ./errorshow.jl:556
   [2] eachindex at ./abstractarray.jl:859 [inlined]
   [3] eachindex at ./abstractarray.jl:849 [inlined]
   [4] row_group_slots(::Tuple{Array{Int64,1}}, ::Array{UInt64,1}, ::Array{Bool,1}, ::Array{Int64,1}, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:105
   [5] row_group_slots(::DataFrame, ::Array{Int64,1}, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:89
   [6] group_rows(::DataFrame, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:141
   [7] group_rows(::DataFrame) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:140
   [8] #join#138(::Array{Symbol,1}, ::Symbol, ::Bool, ::Function, ::DataFrame, ::DataFrame) at /home/vagrant/.julia/v0.7/DataFrames/src/abstractdataframe/join.jl:329
   [9] (::getfield(Base, Symbol("#kw##join")))(::NamedTuple{(:on, :kind),Tuple{Array{Symbol,1},Symbol}}, ::typeof(join), ::DataFrame, ::DataFrame) at ./<missing>:0
   [10] #join#5(::Nothing, ::Base.Iterators.Pairs{Symbol,Symbol,Tuple{Symbol},NamedTuple{(:kind,),Tuple{Symbol}}}, ::Function, ::DataFrame, ::KeyedFrame) at /home/vagrant/.julia/v0.7/KeyedFrames/src/KeyedFrames.jl:193
   [11] (::getfield(Base, Symbol("#kw##join")))(::NamedTuple{(:kind,),Tuple{Symbol}}, ::typeof(join), ::DataFrame, ::KeyedFrame) at ./<missing>:0
   [12] macro expansion at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:311 [inlined]
   [13] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1008 [inlined]
   [14] macro expansion at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:261 [inlined]
   [15] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1008 [inlined]
   [16] top-level scope at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:6
join: Error During Test at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:314
  Test threw an exception of type DimensionMismatch
  Expression: isequal(join(kf2, kf1; kind=:anti), expected)
  DimensionMismatch("all inputs to eachindex must have the same indices, got Base.OneTo(10) and Base.OneTo(0)")
  Stacktrace:
   [1] throw_eachindex_mismatch(::IndexLinear, ::Array{UInt64,1}, ::Vararg{Any,N} where N) at ./errorshow.jl:556
   [2] eachindex at ./abstractarray.jl:859 [inlined]
   [3] eachindex at ./abstractarray.jl:849 [inlined]
   [4] row_group_slots(::Tuple{Array{Int64,1}}, ::Array{UInt64,1}, ::Array{Bool,1}, ::Array{Int64,1}, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:105
   [5] row_group_slots(::DataFrame, ::Array{Int64,1}, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:89
   [6] group_rows(::DataFrame, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:141
   [7] group_rows(::DataFrame) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:140
   [8] #join#138(::Array{Symbol,1}, ::Symbol, ::Bool, ::Function, ::DataFrame, ::DataFrame) at /home/vagrant/.julia/v0.7/DataFrames/src/abstractdataframe/join.jl:329
   [9] (::getfield(Base, Symbol("#kw##join")))(::NamedTuple{(:on, :kind),Tuple{Array{Symbol,1},Symbol}}, ::typeof(join), ::DataFrame, ::DataFrame) at ./<missing>:0
   [10] #join#3(::Nothing, ::Symbol, ::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::KeyedFrame, ::KeyedFrame) at /home/vagrant/.julia/v0.7/KeyedFrames/src/KeyedFrames.jl:165
   [11] (::getfield(Base, Symbol("#kw##join")))(::NamedTuple{(:kind,),Tuple{Symbol}}, ::typeof(join), ::KeyedFrame, ::KeyedFrame) at ./<missing>:0
   [12] macro expansion at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:314 [inlined]
   [13] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1008 [inlined]
   [14] macro expansion at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:261 [inlined]
   [15] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1008 [inlined]
   [16] top-level scope at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:6
join: Error During Test at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:315
  Test threw an exception of type DimensionMismatch
  Expression: isequal(join(kf2, df1; kind=:anti), expected)
  DimensionMismatch("all inputs to eachindex must have the same indices, got Base.OneTo(10) and Base.OneTo(0)")
  Stacktrace:
   [1] throw_eachindex_mismatch(::IndexLinear, ::Array{UInt64,1}, ::Vararg{Any,N} where N) at ./errorshow.jl:556
   [2] eachindex at ./abstractarray.jl:859 [inlined]
   [3] eachindex at ./abstractarray.jl:849 [inlined]
   [4] row_group_slots(::Tuple{Array{Int64,1}}, ::Array{UInt64,1}, ::Array{Bool,1}, ::Array{Int64,1}, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:105
   [5] row_group_slots(::DataFrame, ::Array{Int64,1}, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:89
   [6] group_rows(::DataFrame, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:141
   [7] group_rows(::DataFrame) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:140
   [8] #join#138(::Array{Symbol,1}, ::Symbol, ::Bool, ::Function, ::DataFrame, ::DataFrame) at /home/vagrant/.julia/v0.7/DataFrames/src/abstractdataframe/join.jl:329
   [9] (::getfield(Base, Symbol("#kw##join")))(::NamedTuple{(:on, :kind),Tuple{Array{Symbol,1},Symbol}}, ::typeof(join), ::DataFrame, ::DataFrame) at ./<missing>:0
   [10] #join#4(::Nothing, ::Base.Iterators.Pairs{Symbol,Symbol,Tuple{Symbol},NamedTuple{(:kind,),Tuple{Symbol}}}, ::Function, ::KeyedFrame, ::DataFrame) at /home/vagrant/.julia/v0.7/KeyedFrames/src/KeyedFrames.jl:185
   [11] (::getfield(Base, Symbol("#kw##join")))(::NamedTuple{(:kind,),Tuple{Symbol}}, ::typeof(join), ::KeyedFrame, ::DataFrame) at ./<missing>:0
   [12] macro expansion at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:315 [inlined]
   [13] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1008 [inlined]
   [14] macro expansion at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:261 [inlined]
   [15] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1008 [inlined]
   [16] top-level scope at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:6
join: Error During Test at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:316
  Test threw an exception of type DimensionMismatch
  Expression: isequal(join(df2, kf1; kind=:anti), DataFrame(expected))
  DimensionMismatch("all inputs to eachindex must have the same indices, got Base.OneTo(10) and Base.OneTo(0)")
  Stacktrace:
   [1] throw_eachindex_mismatch(::IndexLinear, ::Array{UInt64,1}, ::Vararg{Any,N} where N) at ./errorshow.jl:556
   [2] eachindex at ./abstractarray.jl:859 [inlined]
   [3] eachindex at ./abstractarray.jl:849 [inlined]
   [4] row_group_slots(::Tuple{Array{Int64,1}}, ::Array{UInt64,1}, ::Array{Bool,1}, ::Array{Int64,1}, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:105
   [5] row_group_slots(::DataFrame, ::Array{Int64,1}, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:89
   [6] group_rows(::DataFrame, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:141
   [7] group_rows(::DataFrame) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:140
   [8] #join#138(::Array{Symbol,1}, ::Symbol, ::Bool, ::Function, ::DataFrame, ::DataFrame) at /home/vagrant/.julia/v0.7/DataFrames/src/abstractdataframe/join.jl:329
   [9] (::getfield(Base, Symbol("#kw##join")))(::NamedTuple{(:on, :kind),Tuple{Array{Symbol,1},Symbol}}, ::typeof(join), ::DataFrame, ::DataFrame) at ./<missing>:0
   [10] #join#5(::Nothing, ::Base.Iterators.Pairs{Symbol,Symbol,Tuple{Symbol},NamedTuple{(:kind,),Tuple{Symbol}}}, ::Function, ::DataFrame, ::KeyedFrame) at /home/vagrant/.julia/v0.7/KeyedFrames/src/KeyedFrames.jl:193
   [11] (::getfield(Base, Symbol("#kw##join")))(::NamedTuple{(:kind,),Tuple{Symbol}}, ::typeof(join), ::DataFrame, ::KeyedFrame) at ./<missing>:0
   [12] macro expansion at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:316 [inlined]
   [13] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1008 [inlined]
   [14] macro expansion at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:261 [inlined]
   [15] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1008 [inlined]
   [16] top-level scope at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:6
join: Error During Test at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:321
  Test threw an exception of type DimensionMismatch
  Expression: isequal(join(kf2, kf3), expected)
  DimensionMismatch("all inputs to eachindex must have the same indices, got Base.OneTo(3) and Base.OneTo(0)")
  Stacktrace:
   [1] throw_eachindex_mismatch(::IndexLinear, ::Array{UInt64,1}, ::Vararg{Any,N} where N) at ./errorshow.jl:556
   [2] eachindex at ./abstractarray.jl:859 [inlined]
   [3] eachindex at ./abstractarray.jl:849 [inlined]
   [4] row_group_slots(::Tuple{Array{Int64,1}}, ::Array{UInt64,1}, ::Array{Bool,1}, ::Array{Int64,1}, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:105
   [5] row_group_slots(::DataFrame, ::Array{Int64,1}, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:89
   [6] group_rows(::DataFrame, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:141
   [7] group_rows(::DataFrame) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:140
   [8] #join#138(::Array{Symbol,1}, ::Symbol, ::Bool, ::Function, ::DataFrame, ::DataFrame) at /home/vagrant/.julia/v0.7/DataFrames/src/abstractdataframe/join.jl:294
   [9] (::getfield(Base, Symbol("#kw##join")))(::NamedTuple{(:on, :kind),Tuple{Array{Symbol,1},Symbol}}, ::typeof(join), ::DataFrame, ::DataFrame) at ./<missing>:0
   [10] #join#3(::Nothing, ::Symbol, ::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::KeyedFrame, ::KeyedFrame) at /home/vagrant/.julia/v0.7/KeyedFrames/src/KeyedFrames.jl:165
   [11] join(::KeyedFrame, ::KeyedFrame) at /home/vagrant/.julia/v0.7/KeyedFrames/src/KeyedFrames.jl:165
   [12] macro expansion at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:321 [inlined]
   [13] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1008 [inlined]
   [14] macro expansion at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:261 [inlined]
   [15] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1008 [inlined]
   [16] top-level scope at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:6
join: Error During Test at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:331
  Test threw an exception of type DimensionMismatch
  Expression: isequal(join(kf2, kf3; on=[:a => :a, :d => :e], kind=:outer), expected)
  DimensionMismatch("all inputs to eachindex must have the same indices, got Base.OneTo(3) and Base.OneTo(0)")
  Stacktrace:
   [1] throw_eachindex_mismatch(::IndexLinear, ::Array{UInt64,1}, ::Vararg{Any,N} where N) at ./errorshow.jl:556
   [2] eachindex at ./abstractarray.jl:859 [inlined]
   [3] eachindex at ./abstractarray.jl:849 [inlined]
   [4] row_group_slots(::Tuple{Array{Int64,1},Array{Int64,1}}, ::Array{UInt64,1}, ::Array{Bool,1}, ::Array{Int64,1}, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:105
   [5] row_group_slots(::DataFrame, ::Array{Int64,1}, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:89
   [6] group_rows(::DataFrame, ::Bool) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:141
   [7] group_rows(::DataFrame) at /home/vagrant/.julia/v0.7/DataFrames/src/dataframerow/utils.jl:140
   [8] #join#138(::Array{Pair{Symbol,Symbol},1}, ::Symbol, ::Bool, ::Function, ::DataFrame, ::DataFrame) at /home/vagrant/.julia/v0.7/DataFrames/src/abstractdataframe/join.jl:309
   [9] (::getfield(Base, Symbol("#kw##join")))(::NamedTuple{(:on, :kind),Tuple{Array{Pair{Symbol,Symbol},1},Symbol}}, ::typeof(join), ::DataFrame, ::DataFrame) at ./<missing>:0
   [10] #join#3(::Array{Pair{Symbol,Symbol},1}, ::Symbol, ::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::KeyedFrame, ::KeyedFrame) at /home/vagrant/.julia/v0.7/KeyedFrames/src/KeyedFrames.jl:165
   [11] (::getfield(Base, Symbol("#kw##join")))(::NamedTuple{(:on, :kind),Tuple{Array{Pair{Symbol,Symbol},1},Symbol}}, ::typeof(join), ::KeyedFrame, ::KeyedFrame) at ./<missing>:0
   [12] macro expansion at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:331 [inlined]
   [13] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1008 [inlined]
   [14] macro expansion at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:261 [inlined]
   [15] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1008 [inlined]
   [16] top-level scope at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:6
Test Summary: | Pass  Error  Total
KeyedFrames   |  112     39    151
  constructor |    9             9
  equality    |   23            23
  copy        |    4             4
  convert     |    9             9
  size        |    9             9
  index/key   |    6             6
  getindex    |   18            18
  setindex!   |    7             7
  head/tail   |    5      3      8
  sort        |   12            12
  push!       |    1             1
  append!     |    2             2
  deleterows! |    3             3
  unique      |           4      4
  join        |          32     32
  permute!    |    4             4
ERROR: LoadError: Some tests did not pass: 112 passed, 0 failed, 39 errored, 0 broken.
in expression starting at /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl:5
┌ Error: ------------------------------------------------------------
│ # Testing failed for KeyedFrames
│   exception =
│    failed process: Process(`/home/vagrant/julia/bin/julia -Cnative -J/home/vagrant/julia/lib/julia/sys.so --compile=yes --depwarn=yes --code-coverage=none --color=no --compiled-modules=yes --check-bounds=yes --warn-overwrite=yes --startup-file=yes /home/vagrant/.julia/v0.7/KeyedFrames/test/runtests.jl`, ProcessExited(1)) [1]
│    Stacktrace:
│     [1] error(::String, ::Base.Process, ::String, ::Int64, ::String) at ./error.jl:42
│     [2] pipeline_error(::Base.Process) at ./process.jl:698
│     [3] run(::Cmd) at ./process.jl:660
│     [4] (::getfield(Pkg.Entry, Symbol("##89#92")){Bool,String,Array{AbstractString,1}})() at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Pkg/src/entry.jl:731
│     [5] cd(::getfield(Pkg.Entry, Symbol("##89#92")){Bool,String,Array{AbstractString,1}}, ::String) at ./file.jl:70
│     [6] #test!#88(::Bool, ::Function, ::String, ::Array{AbstractString,1}, ::Array{AbstractString,1}, ::Array{AbstractString,1}) at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Pkg/src/entry.jl:719
│     [7] (::getfield(Pkg.Entry, Symbol("#kw##test!")))(::NamedTuple{(:coverage,),Tuple{Bool}}, ::typeof(Pkg.Entry.test!), ::String, ::Array{AbstractString,1}, ::Array{AbstractString,1}, ::Array{AbstractString,1}) at ./<missing>:0
│     [8] #test#96(::Bool, ::Function, ::Array{AbstractString,1}) at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Pkg/src/entry.jl:758
│     [9] (::getfield(Pkg.Entry, Symbol("#kw##test")))(::NamedTuple{(:coverage,),Tuple{Bool}}, ::typeof(Pkg.Entry.test), ::Array{AbstractString,1}) at ./<missing>:0
│     [10] (::getfield(Pkg.Dir, Symbol("##4#7")){Base.Iterators.Pairs{Symbol,Bool,Tuple{Symbol},NamedTuple{(:coverage,),Tuple{Bool}}},typeof(Pkg.Entry.test),Tuple{Array{AbstractString,1}}})() at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Pkg/src/dir.jl:36
│     [11] cd(::getfield(Pkg.Dir, Symbol("##4#7")){Base.Iterators.Pairs{Symbol,Bool,Tuple{Symbol},NamedTuple{(:coverage,),Tuple{Bool}}},typeof(Pkg.Entry.test),Tuple{Array{AbstractString,1}}}, ::String) at ./file.jl:70
│     [12] #cd#1(::Base.Iterators.Pairs{Symbol,Bool,Tuple{Symbol},NamedTuple{(:coverage,),Tuple{Bool}}}, ::Function, ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N} where N) at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Pkg/src/dir.jl:36
│     [13] (::getfield(Pkg.Dir, Symbol("#kw##cd")))(::NamedTuple{(:coverage,),Tuple{Bool}}, ::typeof(Pkg.Dir.cd), ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N} where N) at ./<missing>:0
│     [14] #test#3(::Bool, ::Function, ::String, ::Vararg{String,N} where N) at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Pkg/src/Pkg.jl:275
│     [15] test(::String, ::Vararg{String,N} where N) at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Pkg/src/Pkg.jl:275
│     [16] top-level scope
│     [17] eval at ./boot.jl:299 [inlined]
│     [18] eval(::Module, ::Expr) at ./sysimg.jl:71
│     [19] exec_options(::Base.JLOptions) at ./client.jl:309
│     [20] _start() at ./client.jl:447
└ @ Pkg.Entry entry.jl:734
ERROR: KeyedFrames had test errors

>>> End of log
