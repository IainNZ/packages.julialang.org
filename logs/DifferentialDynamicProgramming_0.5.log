>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from https://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.1.0
INFO: Installing Requires v0.3.0
INFO: Package database updated

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.5.2
Commit f4c6c9d (2017-05-06 16:34 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-121-generic #170-Ubuntu SMP Wed Jun 14 09:04:33 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1676.65625 MB free)
Uptime: 30764.0 sec
Load Avg:  0.94091796875  0.95556640625  0.99267578125
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3507 MHz    1813970 s       1638 s     157150 s     702649 s         44 s
#2  3507 MHz     755459 s       5590 s      81801 s    2122032 s          2 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.7.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.5
2 required packages:
 - DifferentialDynamicProgramming 0.1.0
 - JSON                          0.13.0
2 additional packages:
 - Compat                        0.29.0
 - Requires                      0.3.0
INFO: Testing DifferentialDynamicProgramming
WARNING: Method definition require(Symbol) in module Base at loading.jl:345 overwritten in module DifferentialDynamicProgramming at /home/vagrant/.julia/v0.5/Requires/src/require.jl:12.
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 59280.553   
RESULT: Gradient norm smaller than tolerance.
iterations 22  gradient 2.89283e-12  final value -34.3786      factorizations 21
  4.336301 seconds (1.66 M allocations: 171.925 MB, 0.81% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

---------- begin iLQG ----------
iteration     cost    reduction     expected    gradient    log10(lambda)
1           50.0892     26.2        26.2        0.113       0.0         
2           23.894      11.3        11.3        0.0861      -0.2        
3           12.557      5.23        5.23        0.0812      -0.6        
4           7.3222      2.37        2.37        0.0932      -1.2        
5           4.95113     0.97        0.97        0.138       -2.0        
6           3.98083     0.206       0.206       0.146       -3.1        
7           3.77519     0.00821     0.00821     0.0516      -4.3        
8           3.76698     8.34e-06    8.34e-06    0.00192     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

            final cost:   3.766973    

            final grad:   3.191277e-06

            final lambda: 4.4841551e-08

            time / iter:  213   ms

            total time:   1.92  seconds, of which

            derivs:     2.6 %

            back pass:  64.9%

            fwd pass:   9.6 %

            other:      22.8% (graphics etc.)
 =========== end iLQG ===========
 12.882251 seconds (6.26 M allocations: 429.226 MB, 1.44% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
