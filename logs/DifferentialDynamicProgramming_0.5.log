>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from https://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.1.0
INFO: Installing Requires v0.3.0
INFO: Package database updated

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.5.2
Commit f4c6c9d (2017-05-06 16:34 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-121-generic #170-Ubuntu SMP Wed Jun 14 09:04:33 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1670.51953125 MB free)
Uptime: 30434.0 sec
Load Avg:  0.93505859375  0.98046875  1.029296875
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3501 MHz    1896079 s       2190 s     163838 s     620876 s         32 s
#2  3501 MHz     759512 s       5799 s      84488 s    2116856 s          1 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.7.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.5
2 required packages:
 - DifferentialDynamicProgramming 0.1.0
 - JSON                          0.12.0
2 additional packages:
 - Compat                        0.26.0
 - Requires                      0.3.0
INFO: Testing DifferentialDynamicProgramming
WARNING: Method definition require(Symbol) in module Base at loading.jl:345 overwritten in module DifferentialDynamicProgramming at /home/vagrant/.julia/v0.5/Requires/src/require.jl:12.
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 68947.388   
RESULT: Gradient norm smaller than tolerance.
iterations 19  gradient 3.09395e-12  final value -23.5531      factorizations 18
  6.442022 seconds (1.65 M allocations: 155.772 MB, 0.56% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

---------- begin iLQG ----------
iteration     cost    reduction     expected    gradient    log10(lambda)
1           49.1558     19.5        19.5        0.1         0.0         
2           29.6479     10.5        10.5        0.0877      -0.2        
3           19.1303     6.85        6.85        0.101       -0.6        
4           12.2763     4.23        4.23        0.135       -1.2        
5           8.04297     1.96        1.96        0.172       -2.0        
6           6.07818     0.427       0.427       0.192       -3.1        
7           5.65164     0.0216      0.0216      0.056       -4.3        
8           5.63009     2.37e-05    2.37e-05    0.00213     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

            final cost:   5.630067    

            final grad:   3.413437e-06

            final lambda: 4.4841551e-08

            time / iter:  213   ms

            total time:   1.92  seconds, of which

            derivs:     1.7 %

            back pass:  63.7%

            fwd pass:   7.9 %

            other:      26.7% (graphics etc.)
 =========== end iLQG ===========
 12.592937 seconds (6.26 M allocations: 429.226 MB, 1.58% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
