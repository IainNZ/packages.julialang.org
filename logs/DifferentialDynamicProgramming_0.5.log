>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from https://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.1.0
INFO: Installing Requires v0.3.0
INFO: Package database updated

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.5.2
Commit f4c6c9d (2017-05-06 16:34 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-121-generic #170-Ubuntu SMP Wed Jun 14 09:04:33 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1710.03515625 MB free)
Uptime: 30698.0 sec
Load Avg:  0.9150390625  0.96533203125  1.01611328125
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz    1845194 s       4619 s     150832 s     720014 s         36 s
#2  3500 MHz     841964 s       3421 s      80453 s    2049785 s          1 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.7.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.5
2 required packages:
 - DifferentialDynamicProgramming 0.1.0
 - JSON                          0.12.0
2 additional packages:
 - Compat                        0.26.0
 - Requires                      0.3.0
INFO: Testing DifferentialDynamicProgramming
WARNING: Method definition require(Symbol) in module Base at loading.jl:345 overwritten in module DifferentialDynamicProgramming at /home/vagrant/.julia/v0.5/Requires/src/require.jl:12.
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 61345.389   
RESULT: Gradient norm smaller than tolerance.
iterations 17  gradient 2.87394e-12  final value -34.3777      factorizations 16
  4.738719 seconds (1.65 M allocations: 143.439 MB, 0.69% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

---------- begin iLQG ----------
iteration     cost    reduction     expected    gradient    log10(lambda)
1           50.8512     20.6        20.6        0.0967      0.0         
2           30.2499     10.8        10.8        0.0863      -0.2        
3           19.4859     6.02        6.02        0.0994      -0.6        
4           13.4622     3.04        3.04        0.126       -1.2        
5           10.421      2.24        2.24        0.222       -2.0        
6           8.18017     1.11        1.11        0.338       -3.1        
7           7.07443     0.0761      0.0761      0.0836      -4.3        
8           6.99837     8.52e-05    8.52e-05    0.00292     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

            final cost:   6.998282    

            final grad:   4.429907e-06

            final lambda: 4.4841551e-08

            time / iter:  163   ms

            total time:   1.46  seconds, of which

            derivs:     2.5 %

            back pass:  64.7%

            fwd pass:   7.2 %

            other:      25.6% (graphics etc.)
 =========== end iLQG ===========
  9.585307 seconds (6.26 M allocations: 429.226 MB, 1.72% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
