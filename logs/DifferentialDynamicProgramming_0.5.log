>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from https://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.1.0
INFO: Installing Requires v0.3.0
INFO: Package database updated

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.5.2
Commit f4c6c9d (2017-05-06 16:34 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-128-generic #177-Ubuntu SMP Tue Aug 8 11:40:23 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1668.19140625 MB free)
Uptime: 29645.0 sec
Load Avg:  1.0322265625  0.9853515625  1.00634765625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz    1776319 s       1798 s     147354 s     691563 s         43 s
#2  3500 MHz     741982 s       4790 s      77506 s    2026968 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.7.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.5
2 required packages:
 - DifferentialDynamicProgramming 0.1.0
 - JSON                          0.13.0
2 additional packages:
 - Compat                        0.30.0
 - Requires                      0.3.0
INFO: Testing DifferentialDynamicProgramming
WARNING: Method definition require(Symbol) in module Base at loading.jl:345 overwritten in module DifferentialDynamicProgramming at /home/vagrant/.julia/v0.5/Requires/src/require.jl:12.
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 68040.365   
RESULT: Gradient norm smaller than tolerance.
iterations 18  gradient 3.16746e-12  final value -38.5149      factorizations 17
  4.253658 seconds (1.65 M allocations: 151.769 MB, 0.74% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

---------- begin iLQG ----------
iteration     cost    reduction     expected    gradient    log10(lambda)
1           51.2167     30.1        30.1        0.123       0.0         
2           21.1544     10.4        10.4        0.0811      -0.2        
3           10.761      4.3         4.3         0.0696      -0.6        
4           6.46172     2.09        2.09        0.0866      -1.2        
5           4.3692      0.899       0.899       0.136       -2.0        
6           3.46979     0.269       0.269       0.152       -3.1        
7           3.20066     0.0244      0.0244      0.0569      -4.3        
8           3.17624     3.42e-05    3.42e-05    0.0024      -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

            final cost:   3.176203    

            final grad:   4.046696e-06

            final lambda: 4.4841551e-08

            time / iter:  159   ms

            total time:   1.43  seconds, of which

            derivs:     2.2 %

            back pass:  61.8%

            fwd pass:   8.3 %

            other:      27.7% (graphics etc.)
 =========== end iLQG ===========
 13.045468 seconds (6.26 M allocations: 429.226 MB, 1.41% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
