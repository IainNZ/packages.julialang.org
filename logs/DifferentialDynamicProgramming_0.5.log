>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from https://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.1.0
INFO: Installing Requires v0.3.0
INFO: Package database updated

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.5.2
Commit f4c6c9d (2017-05-06 16:34 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-121-generic #170-Ubuntu SMP Wed Jun 14 09:04:33 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1675.25 MB free)
Uptime: 30131.0 sec
Load Avg:  0.9501953125  0.9453125  0.99267578125
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz    1911112 s       6277 s     179093 s     527442 s         37 s
#2  3500 MHz     679386 s        196 s      87694 s    2155027 s          1 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.7.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.5
2 required packages:
 - DifferentialDynamicProgramming 0.1.0
 - JSON                          0.13.0
2 additional packages:
 - Compat                        0.28.0
 - Requires                      0.3.0
INFO: Testing DifferentialDynamicProgramming
WARNING: Method definition require(Symbol) in module Base at loading.jl:345 overwritten in module DifferentialDynamicProgramming at /home/vagrant/.julia/v0.5/Requires/src/require.jl:12.
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 67750.114   
RESULT: Gradient norm smaller than tolerance.
iterations 16  gradient 3.15768e-12  final value -38.3423      factorizations 15
  5.651541 seconds (1.65 M allocations: 138.947 MB, 0.54% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

---------- begin iLQG ----------
iteration     cost    reduction     expected    gradient    log10(lambda)
1           50.5164     24.6        24.6        0.113       0.0         
2           25.8832     10.9        10.9        0.0873      -0.2        
3           14.9458     5.52        5.52        0.0903      -0.6        
4           9.42147     2.8         2.8         0.108       -1.2        
5           6.6228      1.31        1.31        0.151       -2.0        
6           5.31355     0.238       0.238       0.168       -3.1        
7           5.0755      0.00718     0.00718     0.0505      -4.3        
8           5.06832     6.41e-06    6.41e-06    0.00182     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

            final cost:   5.068314    

            final grad:   3.014022e-06

            final lambda: 4.4841551e-08

            time / iter:  221   ms

            total time:   1.99  seconds, of which

            derivs:     2.5 %

            back pass:  66.8%

            fwd pass:   9.3 %

            other:      21.4% (graphics etc.)
 =========== end iLQG ===========
 13.708870 seconds (6.26 M allocations: 429.226 MB, 1.39% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
