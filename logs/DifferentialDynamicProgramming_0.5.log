>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from https://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.1.0
INFO: Installing Requires v0.3.0
INFO: Package database updated

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.5.2
Commit f4c6c9d (2017-05-06 16:34 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-128-generic #177-Ubuntu SMP Tue Aug 8 11:40:23 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1669.0859375 MB free)
Uptime: 30190.0 sec
Load Avg:  0.9521484375  0.97998046875  1.0185546875
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz    1789332 s       1678 s     170688 s     721794 s         40 s
#2  3499 MHz     814283 s       4899 s      83344 s    2022146 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.7.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.5
2 required packages:
 - DifferentialDynamicProgramming 0.1.0
 - JSON                          0.13.0
2 additional packages:
 - Compat                        0.30.0
 - Requires                      0.3.0
INFO: Testing DifferentialDynamicProgramming
WARNING: Method definition require(Symbol) in module Base at loading.jl:345 overwritten in module DifferentialDynamicProgramming at /home/vagrant/.julia/v0.5/Requires/src/require.jl:12.
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 71232.852   
RESULT: Gradient norm smaller than tolerance.
iterations 22  gradient 2.99127e-12  final value -24.3601      factorizations 20
  6.623713 seconds (1.66 M allocations: 170.738 MB, 0.54% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

---------- begin iLQG ----------
iteration     cost    reduction     expected    gradient    log10(lambda)
1           51.2838     19.5        19.5        0.0952      0.0         
2           31.7691     11.3        11.3        0.0862      -0.2        
3           20.4633     7.49        7.49        0.0961      -0.6        
4           12.9752     5.43        5.43        0.146       -1.2        
5           7.54289     2.92        2.92        0.222       -2.0        
6           4.62129     0.73        0.73        0.226       -3.1        
7           3.89092     0.0393      0.0393      0.0835      -4.3        
8           3.85162     4.07e-05    4.07e-05    0.00301     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

            final cost:   3.851576    

            final grad:   4.356785e-06

            final lambda: 4.4841551e-08

            time / iter:  192   ms

            total time:   1.72  seconds, of which

            derivs:     2.2 %

            back pass:  65.7%

            fwd pass:   9.4 %

            other:      22.7% (graphics etc.)
 =========== end iLQG ===========
 13.081731 seconds (6.26 M allocations: 429.226 MB, 1.45% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
