>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from https://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.1.0
INFO: Installing Requires v0.3.0
INFO: Package database updated

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.5.1
Commit 6445c82 (2017-03-05 13:25 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-116-generic #163-Ubuntu SMP Fri Mar 31 14:13:22 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1754.8203125 MB free)
Uptime: 27243.0 sec
Load Avg:  1.05029296875  0.97607421875  1.0185546875
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz    1691311 s       7994 s     150760 s     559815 s         47 s
#2  3499 MHz     710239 s         66 s      79908 s    1858361 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.7.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.5
2 required packages:
 - DifferentialDynamicProgramming 0.1.0
 - JSON                          0.9.0
2 additional packages:
 - Compat                        0.23.0
 - Requires                      0.3.0
INFO: Testing DifferentialDynamicProgramming
WARNING: Method definition require(Symbol) in module Base at loading.jl:345 overwritten in module DifferentialDynamicProgramming at /home/vagrant/.julia/v0.5/Requires/src/require.jl:12.
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 62607.085   
RESULT: Gradient norm smaller than tolerance.
iterations 19  gradient 2.91389e-12  final value -27.8557      factorizations 18
  4.710628 seconds (1.65 M allocations: 156.629 MB, 0.71% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

---------- begin iLQG ----------
iteration     cost    reduction     expected    gradient    log10(lambda)
1           48.9589     27.2        27.2        0.117       0.0         
2           21.754      9.52        9.52        0.0802      -0.2        
3           12.2306     3.56        3.56        0.065       -0.6        
4           8.66841     1.61        1.61        0.0831      -1.2        
5           7.06117     0.509       0.509       0.126       -2.0        
6           6.55191     0.0818      0.0818      0.115       -3.1        
7           6.47016     0.00542     0.00542     0.0438      -4.3        
8           6.46474     7.47e-06    7.47e-06    0.00176     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

            final cost:   6.464734    

            final grad:   3.026153e-06

            final lambda: 4.4841551e-08

            time / iter:  247   ms

            total time:   2.23  seconds, of which

            derivs:     2.4 %

            back pass:  66.0%

            fwd pass:   8.8 %

            other:      22.9% (graphics etc.)
 =========== end iLQG ===========
 14.242742 seconds (6.25 M allocations: 428.841 MB, 1.51% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
