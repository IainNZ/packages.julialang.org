>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from https://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.1.0
INFO: Installing Requires v0.3.0
INFO: Package database updated

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.5.2
Commit f4c6c9d (2017-05-06 16:34 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-128-generic #177-Ubuntu SMP Tue Aug 8 11:40:23 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1712.8515625 MB free)
Uptime: 29425.0 sec
Load Avg:  1.1572265625  1.05078125  1.052734375
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz    1766220 s       7230 s     154569 s     679935 s         35 s
#2  3499 MHz     797430 s         96 s      80448 s    1952206 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.7.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.5
2 required packages:
 - DifferentialDynamicProgramming 0.1.0
 - JSON                          0.13.0
2 additional packages:
 - Compat                        0.30.0
 - Requires                      0.3.0
INFO: Testing DifferentialDynamicProgramming
WARNING: Method definition require(Symbol) in module Base at loading.jl:345 overwritten in module DifferentialDynamicProgramming at /home/vagrant/.julia/v0.5/Requires/src/require.jl:12.
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 60638.993   
RESULT: Gradient norm smaller than tolerance.
iterations 17  gradient 3.15129e-12  final value -33.564       factorizations 16
  5.594797 seconds (1.65 M allocations: 145.073 MB, 0.57% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

---------- begin iLQG ----------
iteration     cost    reduction     expected    gradient    log10(lambda)
1           50.3264     31.2        31.2        0.125       0.0         
2           19.1267     8.66        8.66        0.0761      -0.2        
3           10.4674     3.05        3.05        0.0544      -0.6        
4           7.41471     2.07        2.07        0.0814      -1.2        
5           5.34193     1.39        1.39        0.143       -2.0        
6           3.9499      0.499       0.499       0.153       -3.1        
7           3.45076     0.0339      0.0339      0.0565      -4.3        
8           3.41687     3.86e-05    3.86e-05    0.00218     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

            final cost:   3.416836    

            final grad:   3.572339e-06

            final lambda: 4.4841551e-08

            time / iter:  236   ms

            total time:   2.12  seconds, of which

            derivs:     2.4 %

            back pass:  65.7%

            fwd pass:   8.5 %

            other:      23.5% (graphics etc.)
 =========== end iLQG ===========
 13.112151 seconds (6.26 M allocations: 429.226 MB, 1.58% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
