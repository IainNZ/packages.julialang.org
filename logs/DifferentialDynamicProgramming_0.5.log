>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from https://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.1.0
INFO: Installing Requires v0.3.0
INFO: Package database updated

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.5.2
Commit f4c6c9d (2017-05-06 16:34 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-128-generic #177-Ubuntu SMP Tue Aug 8 11:40:23 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1668.984375 MB free)
Uptime: 29292.0 sec
Load Avg:  1.04833984375  0.9931640625  1.029296875
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz    1746986 s       2115 s     154541 s     692091 s         32 s
#2  3500 MHz     797768 s       4117 s      81006 s    1934886 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.7.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.5
2 required packages:
 - DifferentialDynamicProgramming 0.1.0
 - JSON                          0.13.0
2 additional packages:
 - Compat                        0.30.0
 - Requires                      0.3.0
INFO: Testing DifferentialDynamicProgramming
WARNING: Method definition require(Symbol) in module Base at loading.jl:345 overwritten in module DifferentialDynamicProgramming at /home/vagrant/.julia/v0.5/Requires/src/require.jl:12.
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 69924.054   
RESULT: Gradient norm smaller than tolerance.
iterations 18  gradient 2.80829e-12  final value -30.9732      factorizations 17
  6.644459 seconds (1.65 M allocations: 149.443 MB, 0.62% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

---------- begin iLQG ----------
iteration     cost    reduction     expected    gradient    log10(lambda)
1           50.4981     29.3        29.3        0.118       0.0         
2           21.2428     9.72        9.72        0.0792      -0.2        
3           11.5206     3.54        3.54        0.0644      -0.6        
4           7.98437     1.81        1.81        0.0778      -1.2        
5           6.17861     0.853       0.853       0.137       -2.0        
6           5.32561     0.191       0.191       0.142       -3.1        
7           5.13451     0.00864     0.00864     0.0507      -4.3        
8           5.12587     8.3e-06    8.3e-06    0.00193     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

            final cost:   5.125862    

            final grad:   3.14412e-06

            final lambda: 4.4841551e-08

            time / iter:  176   ms

            total time:   1.59  seconds, of which

            derivs:     2.2 %

            back pass:  64.1%

            fwd pass:   8.6 %

            other:      25.1% (graphics etc.)
 =========== end iLQG ===========
 16.597431 seconds (6.26 M allocations: 429.226 MB, 1.50% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
