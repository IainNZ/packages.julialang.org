>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from https://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.1.0
INFO: Installing Requires v0.3.0
INFO: Package database updated

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.5.2
Commit f4c6c9d (2017-05-06 16:34 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-119-generic #166-Ubuntu SMP Wed May 3 12:18:55 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1689.23046875 MB free)
Uptime: 29105.0 sec
Load Avg:  1.013671875  1.00830078125  1.0400390625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz    1782668 s       5997 s     143962 s     629074 s         42 s
#2  3499 MHz     741702 s        761 s      76986 s    1996457 s          1 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.7.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.5
2 required packages:
 - DifferentialDynamicProgramming 0.1.0
 - JSON                          0.12.0
2 additional packages:
 - Compat                        0.26.0
 - Requires                      0.3.0
INFO: Testing DifferentialDynamicProgramming
WARNING: Method definition require(Symbol) in module Base at loading.jl:345 overwritten in module DifferentialDynamicProgramming at /home/vagrant/.julia/v0.5/Requires/src/require.jl:12.
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 67221.102   
RESULT: Gradient norm smaller than tolerance.
iterations 17  gradient 2.78622e-12  final value -21.5007      factorizations 16
  5.892278 seconds (1.65 M allocations: 146.256 MB, 0.60% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

---------- begin iLQG ----------
iteration     cost    reduction     expected    gradient    log10(lambda)
1           48.7786     19.9        19.9        0.0988      0.0         
2           28.916      10.9        10.9        0.086       -0.2        
3           18.0333     6.17        6.17        0.0938      -0.6        
4           11.8638     3.73        3.73        0.118       -1.2        
5           8.12962     2.35        2.35        0.182       -2.0        
6           5.77506     0.864       0.864       0.2         -3.1        
7           4.91133     0.0654      0.0654      0.0655      -4.3        
8           4.84596     8.08e-05    8.08e-05    0.00262     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

            final cost:   4.845875    

            final grad:   4.193149e-06

            final lambda: 4.4841551e-08

            time / iter:  187   ms

            total time:   1.69  seconds, of which

            derivs:     2.2 %

            back pass:  63.7%

            fwd pass:   6.6 %

            other:      27.5% (graphics etc.)
 =========== end iLQG ===========
 10.400424 seconds (6.26 M allocations: 429.226 MB, 1.89% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
