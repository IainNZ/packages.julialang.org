>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from https://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.1.0
INFO: Installing Requires v0.3.0
INFO: Package database updated

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.5.1
Commit 6445c82 (2017-03-05 13:25 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-116-generic #163-Ubuntu SMP Fri Mar 31 14:13:22 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1795.70703125 MB free)
Uptime: 27264.0 sec
Load Avg:  1.0283203125  1.03466796875  1.04541015625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3503 MHz    1632530 s       3898 s     133036 s     644731 s         38 s
#2  3503 MHz     729126 s       9916 s      75343 s    1815918 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.7.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.5
2 required packages:
 - DifferentialDynamicProgramming 0.1.0
 - JSON                          0.9.0
2 additional packages:
 - Compat                        0.23.0
 - Requires                      0.3.0
INFO: Testing DifferentialDynamicProgramming
WARNING: Method definition require(Symbol) in module Base at loading.jl:345 overwritten in module DifferentialDynamicProgramming at /home/vagrant/.julia/v0.5/Requires/src/require.jl:12.
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 67515.784   
RESULT: Gradient norm smaller than tolerance.
iterations 21  gradient 3.30114e-12  final value -40.5671      factorizations 20
  4.945448 seconds (1.66 M allocations: 167.092 MB, 0.74% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

---------- begin iLQG ----------
iteration     cost    reduction     expected    gradient    log10(lambda)
1           50.2364     23.3        23.3        0.1         0.0         
2           26.9269     10.9        10.9        0.0827      -0.2        
3           15.995      4.51        4.51        0.0805      -0.6        
4           11.4875     1.57        1.57        0.0894      -1.2        
5           9.91949     0.881       0.881       0.144       -2.0        
6           9.03808     0.414       0.414       0.162       -3.1        
7           8.6242      0.0365      0.0365      0.0571      -4.3        
8           8.58773     5.19e-05    5.19e-05    0.0025      -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

            final cost:   8.587678    

            final grad:   4.342939e-06

            final lambda: 4.4841551e-08

            time / iter:  191   ms

            total time:   1.72  seconds, of which

            derivs:     1.8 %

            back pass:  60.0%

            fwd pass:   6.5 %

            other:      31.8% (graphics etc.)
 =========== end iLQG ===========
 13.724488 seconds (6.25 M allocations: 428.842 MB, 1.45% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
