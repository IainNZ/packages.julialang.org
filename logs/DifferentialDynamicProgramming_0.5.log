>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from https://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.1.0
INFO: Installing Requires v0.3.0
INFO: Package database updated

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.5.1
Commit 6445c82 (2017-03-05 13:25 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-116-generic #163-Ubuntu SMP Fri Mar 31 14:13:22 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1710.30078125 MB free)
Uptime: 26965.0 sec
Load Avg:  1.0234375  1.0146484375  1.0361328125
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz    1686816 s       4872 s     132727 s     534248 s         30 s
#2  3500 MHz     668456 s       1762 s      76060 s    1873292 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.7.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.5
2 required packages:
 - DifferentialDynamicProgramming 0.1.0
 - JSON                          0.9.0
2 additional packages:
 - Compat                        0.23.0
 - Requires                      0.3.0
INFO: Testing DifferentialDynamicProgramming
WARNING: Method definition require(Symbol) in module Base at loading.jl:345 overwritten in module DifferentialDynamicProgramming at /home/vagrant/.julia/v0.5/Requires/src/require.jl:12.
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 70893.431   
RESULT: Gradient norm smaller than tolerance.
iterations 15  gradient 3.13749e-12  final value -35.7852      factorizations 14
  4.543266 seconds (1.65 M allocations: 131.388 MB, 0.71% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

---------- begin iLQG ----------
iteration     cost    reduction     expected    gradient    log10(lambda)
1           50.4013     31.8        31.8        0.125       0.0         
2           18.5985     9.87        9.87        0.0781      -0.2        
3           8.72897     4.03        4.03        0.0671      -0.6        
4           4.69844     2.09        2.09        0.0754      -1.2        
5           2.60706     0.758       0.758       0.109       -2.0        
6           1.84905     0.0999      0.0999      0.11        -3.1        
7           1.74914     0.00379     0.00379     0.0415      -4.3        
8           1.74535     4.57e-06    4.57e-06    0.00176     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

            final cost:   1.745346    

            final grad:   2.993243e-06

            final lambda: 4.4841551e-08

            time / iter:  219   ms

            total time:   1.97  seconds, of which

            derivs:     2.6 %

            back pass:  66.9%

            fwd pass:   8.5 %

            other:      22.1% (graphics etc.)
 =========== end iLQG ===========
 14.698911 seconds (6.25 M allocations: 428.841 MB, 1.44% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
