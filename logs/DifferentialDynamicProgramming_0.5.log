>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from https://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.1.0
INFO: Installing Requires v0.3.0
INFO: Package database updated

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.5.2
Commit f4c6c9d (2017-05-06 16:34 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-128-generic #177-Ubuntu SMP Tue Aug 8 11:40:23 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1671.4609375 MB free)
Uptime: 29529.0 sec
Load Avg:  0.9970703125  0.98779296875  1.03466796875
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3493 MHz    1797403 s         75 s     141008 s     675541 s         34 s
#2  3493 MHz     811952 s       6418 s      79321 s    1973377 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.7.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.5
2 required packages:
 - DifferentialDynamicProgramming 0.1.0
 - JSON                          0.13.0
2 additional packages:
 - Compat                        0.30.0
 - Requires                      0.3.0
INFO: Testing DifferentialDynamicProgramming
WARNING: Method definition require(Symbol) in module Base at loading.jl:345 overwritten in module DifferentialDynamicProgramming at /home/vagrant/.julia/v0.5/Requires/src/require.jl:12.
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 65707.771   
RESULT: Gradient norm smaller than tolerance.
iterations 19  gradient 2.92347e-12  final value -25.0846      factorizations 18
  5.176684 seconds (1.65 M allocations: 154.905 MB, 0.58% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

---------- begin iLQG ----------
iteration     cost    reduction     expected    gradient    log10(lambda)
1           49.2403     28.3        28.3        0.121       0.0         
2           20.9878     9.34        9.34        0.079       -0.2        
3           11.6522     3.91        3.91        0.0718      -0.6        
4           7.74001     2.05        2.05        0.0978      -1.2        
5           5.68781     1.06        1.06        0.139       -2.0        
6           4.62366     0.319       0.319       0.16        -3.1        
7           4.3047      0.0167      0.0167      0.0581      -4.3        
8           4.28802     1.78e-05    1.78e-05    0.00218     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

            final cost:   4.288007    

            final grad:   3.486873e-06

            final lambda: 4.4841551e-08

            time / iter:  177   ms

            total time:   1.60  seconds, of which

            derivs:     3.3 %

            back pass:  65.5%

            fwd pass:   7.0 %

            other:      24.2% (graphics etc.)
 =========== end iLQG ===========
 13.132644 seconds (6.26 M allocations: 429.226 MB, 1.35% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
