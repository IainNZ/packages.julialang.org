>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from https://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.1.0
INFO: Installing Requires v0.3.0
INFO: Package database updated

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.5.2
Commit f4c6c9d (2017-05-06 16:34 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-125-generic #174-Ubuntu SMP Mon Jul 10 18:51:24 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1667.515625 MB free)
Uptime: 31066.0 sec
Load Avg:  0.9892578125  0.9921875  1.029296875
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz    1884629 s       6484 s     182378 s     677399 s         38 s
#2  3500 MHz     798381 s         88 s      87496 s    2114944 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.7.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.5
2 required packages:
 - DifferentialDynamicProgramming 0.1.0
 - JSON                          0.13.0
2 additional packages:
 - Compat                        0.29.0
 - Requires                      0.3.0
INFO: Testing DifferentialDynamicProgramming
WARNING: Method definition require(Symbol) in module Base at loading.jl:345 overwritten in module DifferentialDynamicProgramming at /home/vagrant/.julia/v0.5/Requires/src/require.jl:12.
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 69864.289   
RESULT: Gradient norm smaller than tolerance.
iterations 19  gradient 3.07009e-12  final value -23.8378      factorizations 18
  5.750330 seconds (1.65 M allocations: 155.775 MB, 0.61% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

---------- begin iLQG ----------
iteration     cost    reduction     expected    gradient    log10(lambda)
1           49.998      20.2        20.2        0.0996      0.0         
2           29.8359     9.92        9.92        0.085       -0.2        
3           19.9153     5.21        5.21        0.0895      -0.6        
4           14.7044     3.77        3.77        0.142       -1.2        
5           10.9302     3           3           0.282       -2.0        
6           7.92901     1.03        1.03        0.309       -3.1        
7           6.89701     0.0653      0.0653      0.0895      -4.3        
8           6.83173     7.26e-05    7.26e-05    0.00295     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

            final cost:   6.831658    

            final grad:   4.442642e-06

            final lambda: 4.4841551e-08

            time / iter:  141   ms

            total time:   1.27  seconds, of which

            derivs:     2.4 %

            back pass:  65.4%

            fwd pass:   8.2 %

            other:      24.0% (graphics etc.)
 =========== end iLQG ===========
 11.491442 seconds (6.26 M allocations: 429.226 MB, 1.57% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
