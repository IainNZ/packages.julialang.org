>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from https://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.1.0
INFO: Installing Requires v0.3.0
INFO: Package database updated

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.5.2
Commit f4c6c9d (2017-05-06 16:34 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-119-generic #166-Ubuntu SMP Wed May 3 12:18:55 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1706.5 MB free)
Uptime: 28471.0 sec
Load Avg:  1.015625  1.00146484375  1.03466796875
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3504 MHz    1726217 s       4913 s     151882 s     643321 s         25 s
#2  3504 MHz     732130 s       2385 s      78208 s    1970404 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.7.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.5
2 required packages:
 - DifferentialDynamicProgramming 0.1.0
 - JSON                          0.12.0
2 additional packages:
 - Compat                        0.25.2
 - Requires                      0.3.0
INFO: Testing DifferentialDynamicProgramming
WARNING: Method definition require(Symbol) in module Base at loading.jl:345 overwritten in module DifferentialDynamicProgramming at /home/vagrant/.julia/v0.5/Requires/src/require.jl:12.
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 66698.222   
RESULT: Gradient norm smaller than tolerance.
iterations 16  gradient 3.21486e-12  final value -39.9905      factorizations 15
  5.552898 seconds (1.65 M allocations: 137.020 MB, 0.77% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

---------- begin iLQG ----------
iteration     cost    reduction     expected    gradient    log10(lambda)
1           49.3057     26.7        26.7        0.118       0.0         
2           22.6088     9.65        9.65        0.0818      -0.2        
3           12.9635     3.64        3.64        0.0699      -0.6        
4           9.32712     1.51        1.51        0.073       -1.2        
5           7.81688     0.552       0.552       0.125       -2.0        
6           7.2652      0.0818      0.0818      0.124       -3.1        
7           7.18343     0.00359     0.00359     0.0437      -4.3        
8           7.17984     4.92e-06    4.92e-06    0.00181     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

            final cost:   7.179836    

            final grad:   3.095006e-06

            final lambda: 4.4841551e-08

            time / iter:  240   ms

            total time:   2.16  seconds, of which

            derivs:     2.2 %

            back pass:  65.8%

            fwd pass:   9.3 %

            other:      22.7% (graphics etc.)
 =========== end iLQG ===========
 11.691576 seconds (6.26 M allocations: 429.226 MB, 1.72% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
