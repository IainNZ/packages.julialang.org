>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from https://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.1.0
INFO: Installing Requires v0.3.0
INFO: Package database updated

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.5.1
Commit 6445c82 (2017-03-05 13:25 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-117-generic #164-Ubuntu SMP Fri Apr 7 11:05:26 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1685.0078125 MB free)
Uptime: 26986.0 sec
Load Avg:  1.0546875  1.02734375  1.04541015625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz    1665892 s       7520 s     143218 s     549692 s         36 s
#2  3499 MHz     696047 s        106 s      77088 s    1834406 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.7.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.5
2 required packages:
 - DifferentialDynamicProgramming 0.1.0
 - JSON                          0.9.1
2 additional packages:
 - Compat                        0.24.0
 - Requires                      0.3.0
INFO: Testing DifferentialDynamicProgramming
WARNING: Method definition require(Symbol) in module Base at loading.jl:345 overwritten in module DifferentialDynamicProgramming at /home/vagrant/.julia/v0.5/Requires/src/require.jl:12.
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 68036.633   
RESULT: Gradient norm smaller than tolerance.
iterations 19  gradient 3.20866e-12  final value -38.5843      factorizations 18
  6.570956 seconds (1.65 M allocations: 153.929 MB, 0.55% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

---------- begin iLQG ----------
iteration     cost    reduction     expected    gradient    log10(lambda)
1           50.8371     29.7        29.7        0.122       0.0         
2           21.1312     9.44        9.44        0.0778      -0.2        
3           11.6898     3.89        3.89        0.0649      -0.6        
4           7.80452     2.14        2.14        0.0899      -1.2        
5           5.66181     1.35        1.35        0.147       -2.0        
6           4.30845     0.362       0.362       0.165       -3.1        
7           3.94608     0.0127      0.0127      0.0542      -4.3        
8           3.93337     1.05e-05    1.05e-05    0.00202     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

            final cost:   3.93336     

            final grad:   3.205323e-06

            final lambda: 4.4841551e-08

            time / iter:  208   ms

            total time:   1.87  seconds, of which

            derivs:     3.0 %

            back pass:  66.6%

            fwd pass:   6.5 %

            other:      23.9% (graphics etc.)
 =========== end iLQG ===========
 11.439213 seconds (6.25 M allocations: 428.842 MB, 1.51% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
