>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from https://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.1.0
INFO: Installing Requires v0.3.0
INFO: Package database updated

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.5.2
Commit f4c6c9d (2017-05-06 16:34 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-119-generic #166-Ubuntu SMP Wed May 3 12:18:55 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1707.3828125 MB free)
Uptime: 28815.0 sec
Load Avg:  0.94140625  1.00341796875  1.0400390625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz    1760889 s        123 s     153878 s     634960 s         37 s
#2  3499 MHz     737629 s       6030 s      81218 s    1961085 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.7.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.5
2 required packages:
 - DifferentialDynamicProgramming 0.1.0
 - JSON                          0.12.0
2 additional packages:
 - Compat                        0.25.2
 - Requires                      0.3.0
INFO: Testing DifferentialDynamicProgramming
WARNING: Method definition require(Symbol) in module Base at loading.jl:345 overwritten in module DifferentialDynamicProgramming at /home/vagrant/.julia/v0.5/Requires/src/require.jl:12.
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 65392.929   
RESULT: Gradient norm smaller than tolerance.
iterations 12  gradient 2.82573e-12  final value -30.7307      factorizations 11
  5.955153 seconds (1.65 M allocations: 117.029 MB, 0.61% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

---------- begin iLQG ----------
iteration     cost    reduction     expected    gradient    log10(lambda)
1           50.7982     25.9        25.9        0.112       0.0         
2           24.8514     9.83        9.83        0.0808      -0.2        
3           15.0237     4.66        4.66        0.0789      -0.6        
4           10.361      3.06        3.06        0.116       -1.2        
5           7.29921     1.33        1.33        0.174       -2.0        
6           5.96506     0.262       0.262       0.158       -3.1        
7           5.70317     0.0145      0.0145      0.054       -4.3        
8           5.68872     1.66e-05    1.66e-05    0.00206     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

            final cost:   5.688702    

            final grad:   3.380465e-06

            final lambda: 4.4841551e-08

            time / iter:  219   ms

            total time:   1.97  seconds, of which

            derivs:     1.6 %

            back pass:  66.3%

            fwd pass:   8.5 %

            other:      23.6% (graphics etc.)
 =========== end iLQG ===========
 12.428976 seconds (6.26 M allocations: 429.226 MB, 1.44% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
