>>> 'Pkg.add("MMTF")' log
WARNING: Base.Pkg is deprecated, run `using Pkg` instead
 in module Main
[ Info: Cloning cache of MMTF from https://github.com/BioJulia/MMTF.jl.git
[ Info: Installing BinaryProvider v0.3.0
[ Info: Installing CodecZlib v0.4.3
[ Info: Installing MMTF v0.0.1
[ Info: Installing MsgPack v0.1.1
[ Info: Installing SHA v0.5.7
[ Info: Installing TranscodingStreams v0.5.2
[ Info: Building CodecZlib
┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `occursin(r, s)` instead.
│   caller = valid_dl_path(::String, ::BinaryProvider.Linux) at PlatformNames.jl:376
└ @ BinaryProvider PlatformNames.jl:376
WARNING: importing deprecated binding Base.Libdl into Sys.
WARNING: Base.Libdl is deprecated, run `using Libdl` instead
  likely near /home/vagrant/.julia/v0.7/CodecZlib/deps/build.jl:98
[ Info: Package database updated
┌ Info: METADATA is out-of-date — you may not have the latest version of MMTF
└ Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("MMTF")' log
WARNING: Base.versioninfo is deprecated: it has been moved to the standard library package `InteractiveUtils`.
Add `using InteractiveUtils` to your imports.
 in module Main
WARNING: Base.versioninfo is deprecated: it has been moved to the standard library package `InteractiveUtils`.
Add `using InteractiveUtils` to your imports.
 in module Main
Julia Version 0.7.0-DEV.4896
Commit 69e559d496 (2018-04-18 22:02 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
      Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-143-generic #192-Ubuntu SMP Tue Feb 27 10:45:36 UTC 2018 x86_64 x86_64
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
              speed         user         nice          sys         idle          irq
       #1  3500 MHz    4305092 s       7091 s     312244 s    1142352 s         46 s
       #2  3500 MHz     977647 s         92 s     116718 s    5560611 s          2 s
       
  Memory: 2.939197540283203 GB (865.78125 MB free)
  Uptime: 67676.0 sec
  Load Avg:  0.9970703125  0.9853515625  0.95458984375
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant
Packages:
  Package Directory: /home/vagrant/.julia/v0.7
  Package Status:
2 required packages:
 - JSON                          0.17.2
 - MMTF                          0.0.1
7 additional packages:
 - BinaryProvider                0.3.0
 - CodecZlib                     0.4.3
 - Compat                        0.63.0
 - MsgPack                       0.1.1
 - Nullables                     0.0.5
 - SHA                           0.5.7
 - TranscodingStreams            0.5.2
WARNING: Base.Pkg is deprecated, run `using Pkg` instead
 in module Main
[ Info: Testing MMTF
WARNING: Base.Test is deprecated, run `using Test` instead
  likely near /home/vagrant/.julia/v0.7/MMTF/test/runtests.jl:3
┌ Warning: Deprecated syntax `immutable` at /home/vagrant/.julia/v0.7/MsgPack/src/MsgPack.jl:44.
│ Use `struct` instead.
└ @ nothing MsgPack.jl:44
WARNING: importing deprecated binding Base.Void into MsgPack.
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/MsgPack/src/MsgPack.jl:177
Codecs - Decoding Test: Error During Test at /home/vagrant/.julia/v0.7/MMTF/test/runtests.jl:6
  Got exception MethodError(MMTF.deltarecursivefloatdecode, (UInt8[0x7f, 0xff, 0x44, 0xab, 0x01, 0x8f, 0xff, 0xca], 1000), 0x0000000000006b0e) outside of a @test
  MethodError: no method matching deltarecursivefloatdecode(::Base.CodeUnits{UInt8,String}, ::Int64)
  Closest candidates are:
    deltarecursivefloatdecode(!Matched::Array{UInt8,1}, ::Any) at /home/vagrant/.julia/v0.7/MMTF/src/codec.jl:86
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.7/MMTF/test/runtests.jl:22 [inlined]
   [2] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1022 [inlined]
   [3] top-level scope at /home/vagrant/.julia/v0.7/MMTF/test/runtests.jl:8
   [4] include at ./boot.jl:314 [inlined]
   [5] include_relative(::Module, ::String) at ./loading.jl:1067
   [6] include(::Module, ::String) at ./sysimg.jl:29
   [7] exec_options(::Base.JLOptions) at ./client.jl:327
   [8] _start() at ./client.jl:455
Test Summary:          | Pass  Error  Total
Codecs - Decoding Test |    2      1      3
ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 1 errored, 0 broken.
in expression starting at /home/vagrant/.julia/v0.7/MMTF/test/runtests.jl:6
┌ Error: ------------------------------------------------------------
│ # Testing failed for MMTF
│   exception =
│    failed process: Process(`/home/vagrant/julia/bin/julia -Cnative -J/home/vagrant/julia/lib/julia/sys.so --compile=yes --depwarn=yes --code-coverage=none --color=no --compiled-modules=yes --check-bounds=yes --warn-overwrite=yes --startup-file=yes /home/vagrant/.julia/v0.7/MMTF/test/runtests.jl`, ProcessExited(1)) [1]
│    Stacktrace:
│     [1] error(::String, ::Base.Process, ::String, ::Int64, ::String) at ./error.jl:42
│     [2] pipeline_error(::Base.Process) at ./process.jl:712
│     [3] #run#542(::Bool, ::Function, ::Cmd) at ./process.jl:670
│     [4] run at ./process.jl:668 [inlined]
│     [5] (::getfield(Pkg.Entry, Symbol("##56#57")){Bool,String,Array{AbstractString,1}})() at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Pkg/src/entry.jl:729
│     [6] cd(::getfield(Pkg.Entry, Symbol("##56#57")){Bool,String,Array{AbstractString,1}}, ::String) at ./file.jl:72
│     [7] #test!#55(::Bool, ::Function, ::String, ::Array{AbstractString,1}, ::Array{AbstractString,1}, ::Array{AbstractString,1}) at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Pkg/src/entry.jl:717
│     [8] (::getfield(Pkg.Entry, Symbol("#kw##test!")))(::NamedTuple{(:coverage,),Tuple{Bool}}, ::typeof(Pkg.Entry.test!), ::String, ::Array{AbstractString,1}, ::Array{AbstractString,1}, ::Array{AbstractString,1}) at ./<missing>:0
│     [9] #test#59(::Bool, ::Function, ::Array{AbstractString,1}) at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Pkg/src/entry.jl:756
│     [10] #test at ./<missing>:0 [inlined]
│     [11] #4 at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Pkg/src/dir.jl:36 [inlined]
│     [12] cd(::getfield(Pkg.Dir, Symbol("##4#7")){Base.Iterators.Pairs{Symbol,Bool,Tuple{Symbol},NamedTuple{(:coverage,),Tuple{Bool}}},typeof(Pkg.Entry.test),Tuple{Array{AbstractString,1}}}, ::String) at ./file.jl:72
│     [13] #cd#1(::Base.Iterators.Pairs{Symbol,Bool,Tuple{Symbol},NamedTuple{(:coverage,),Tuple{Bool}}}, ::Function, ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N} where N) at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Pkg/src/dir.jl:36
│     [14] (::getfield(Pkg.Dir, Symbol("#kw##cd")))(::NamedTuple{(:coverage,),Tuple{Bool}}, ::typeof(Pkg.Dir.cd), ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N} where N) at ./<missing>:0
│     [15] #test#3(::Bool, ::Function, ::String, ::Vararg{String,N} where N) at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Pkg/src/Pkg.jl:278
│     [16] test(::String, ::Vararg{String,N} where N) at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Pkg/src/Pkg.jl:278
│     [17] top-level scope
│     [18] eval at ./boot.jl:317 [inlined]
│     [19] eval(::Module, ::Expr) at ./sysimg.jl:74
│     [20] exec_options(::Base.JLOptions) at ./client.jl:304
│     [21] _start() at ./client.jl:455
└ @ Pkg.Entry entry.jl:732
ERROR: MMTF had test errors

>>> End of log
