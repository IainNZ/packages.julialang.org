>>> 'Pkg.add("PathDistribution")' log
┌ Info: Cloning cache of PathDistribution from https://github.com/chkwon/PathDistribution.jl.git
└                                                   @ Base.Pkg.Cache cache.jl:43
[ Info: Installing PathDistribution v0.0.1         @ Base.Pkg.Entry entry.jl:543
[ Info: Package database updated                    @ Base.Pkg.Entry entry.jl:32

>>> 'Pkg.test("PathDistribution")' log
Julia Version 0.7.0-DEV.3354
Commit 9b5eed2b6c (2018-01-09 08:03 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
      Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-135-generic #184-Ubuntu SMP Wed Oct 18 11:55:51 UTC 2017 x86_64 x86_64
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
              speed         user         nice          sys         idle          irq
       #1  3500 MHz     240772 s         94 s      16220 s     152452 s          4 s
       #2  3500 MHz      53162 s         82 s       8501 s     395391 s          0 s
       
  Memory: 2.93927001953125 GB (1110.87109375 MB free)
  Uptime: 4657.0 sec
  Load Avg:  0.9970703125  0.984375  0.95458984375
  WORD_SIZE: 64
  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant
Packages:
  Package Directory: /home/vagrant/.julia/v0.7
  Package Status:
2 required packages:
 - JSON                          0.16.3
 - PathDistribution              0.0.1
2 additional packages:
 - Compat                        0.45.0
 - Nullables                     0.0.3
[ Info: Testing PathDistribution                   @ Base.Pkg.Entry entry.jl:723
┌ Warning: Deprecated syntax `type` at /home/vagrant/.julia/v0.7/PathDistribution/src/monte_carlo.jl:1.
│ Use `mutable struct` instead.
└                                                     @ nothing monte_carlo.jl:1
┌ Warning: Deprecated syntax `parametric method syntax monte_carlo_path_sampling{T <: Integer}(origin::T, destination::T, adj_mtx::Array{T, 2}, link_length_dict::Dict, N1 = 5000, N2 = 10000)` around /home/vagrant/.julia/v0.7/PathDistribution/src/monte_carlo.jl:15.
│ Use `monte_carlo_path_sampling(origin::T, destination::T, adj_mtx::Array{T, 2}, link_length_dict::Dict, N1 = 5000, N2 = 10000) where T <: Integer` instead.
└                                                    @ nothing monte_carlo.jl:15
┌ Warning: Deprecated syntax `parametric method syntax monte_carlo_path_sampling{T <: Integer}(origin::T, destination::T, adj_mtx::Array{T, 2}, N1 = 5000, N2 = 10000)` around /home/vagrant/.julia/v0.7/PathDistribution/src/monte_carlo.jl:31.
│ Use `monte_carlo_path_sampling(origin::T, destination::T, adj_mtx::Array{T, 2}, N1 = 5000, N2 = 10000) where T <: Integer` instead.
└                                                    @ nothing monte_carlo.jl:31
┌ Warning: Deprecated syntax `parametric method syntax monte_carlo_path_number{T <: Integer}(origin::T, destination::T, adj_mtx::Array{T, 2}, N1 = 5000, N2 = 10000)` around /home/vagrant/.julia/v0.7/PathDistribution/src/monte_carlo.jl:37.
│ Use `monte_carlo_path_number(origin::T, destination::T, adj_mtx::Array{T, 2}, N1 = 5000, N2 = 10000) where T <: Integer` instead.
└                                                    @ nothing monte_carlo.jl:37
┌ Warning: Deprecated syntax `parametric method syntax monte_carlo_path_sampling{T <: Integer}(origin::T, destination::T, start_node::Array{T, 1}, end_node::Array{T, 1}, link_length, N1 = 5000, N2 = 10000)` around /home/vagrant/.julia/v0.7/PathDistribution/src/monte_carlo.jl:47.
│ Use `monte_carlo_path_sampling(origin::T, destination::T, start_node::Array{T, 1}, end_node::Array{T, 1}, link_length, N1 = 5000, N2 = 10000) where T <: Integer` instead.
└                                                    @ nothing monte_carlo.jl:47
┌ Warning: Deprecated syntax `type` at /home/vagrant/.julia/v0.7/PathDistribution/src/path_enumeration.jl:3.
│ Use `mutable struct` instead.
└                                                @ nothing path_enumeration.jl:3
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = path_enumeration(::Int64, ::Int64, ::Array{Int64,2}) at path_enumeration.jl:12
└                                      @ PathDistribution path_enumeration.jl:12
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = path_enumeration at path_enumeration.jl:27 [inlined]
└                                                  @ Core path_enumeration.jl:27
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = actual_cumulative_count(::Array{PathEnum,1}, ::Symbol) at path_enumeration.jl:61
└                                      @ PathDistribution path_enumeration.jl:61
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(uninitialized, m)` instead.
│   caller = length_distribution_vector(::Array{PathSample,1}, ::Array{Int64,2}, ::Int64, ::Int64) at monte_carlo.jl:158
└                                          @ PathDistribution monte_carlo.jl:158
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = estimate_cumulative_count(::Array{PathSample,1}, ::Symbol) at monte_carlo.jl:67
└                                           @ PathDistribution monte_carlo.jl:67
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = estimate_cumulative_count(::Array{PathSample,1}, ::Symbol) at monte_carlo.jl:68
└                                           @ PathDistribution monte_carlo.jl:68
===== Case 1 of Roberts & Kroese (2007) =====
The total number of paths:
- Full enumeration      : 397
- Monte Carlo estimation: 396.92699248216553
- Monte Carlo estimation: 397.4338170180378
- Monte Carlo estimation: 383.4652290134956
- Monte Carlo estimation: 393.3992175196163
- Monte Carlo estimation: 398.7339563584851
- Monte Carlo estimation: 398.9035777136879
ERROR: LoadError: MethodError: no method matching round(::Type{Int64}, ::Array{Float64,1})
Closest candidates are:
  round(::Type{T<:Integer}, !Matched::Integer) where T<:Integer at int.jl:524
  round(::Type{T<:Integer}, !Matched::Float16) where T<:Integer at float.jl:356
  round(::Type{T<:Union{Signed, Unsigned}}, !Matched::BigFloat) where T<:Union{Signed, Unsigned} at mpfr.jl:229
  ...
Stacktrace:
 [1] top-level scope
 [2] include at ./boot.jl:293 [inlined]
 [3] include_relative(::Module, ::String) at ./loading.jl:521
 [4] include(::Module, ::String) at ./sysimg.jl:26
 [5] process_options(::Base.JLOptions) at ./client.jl:324
 [6] _start() at ./client.jl:375
in expression starting at /home/vagrant/.julia/v0.7/PathDistribution/test/runtests.jl:103
┌ Error: ------------------------------------------------------------
│ # Testing failed for PathDistribution
│   exception =
│    failed process: Process(`/home/vagrant/julia/bin/julia -Cnative -J/home/vagrant/julia/lib/julia/sys.so --compile=yes --depwarn=yes --code-coverage=none --color=no --compiled-modules=yes --check-bounds=yes --warn-overwrite=yes --startup-file=yes /home/vagrant/.julia/v0.7/PathDistribution/test/runtests.jl`, ProcessExited(1)) [1]
│    Stacktrace:
│     [1] error(::String, ::Base.Process, ::String, ::Int64, ::String) at ./error.jl:42
│     [2] pipeline_error(::Base.Process) at ./process.jl:707
│     [3] run(::Cmd) at ./process.jl:669
│     [4] (::getfield(Base.Pkg.Entry, Symbol("##91#94")){Bool,String,Array{AbstractString,1}})() at ./pkg/entry.jl:736
│     [5] cd(::getfield(Base.Pkg.Entry, Symbol("##91#94")){Bool,String,Array{AbstractString,1}}, ::String) at ./file.jl:70
│     [6] #test!#90(::Bool, ::Function, ::String, ::Array{AbstractString,1}, ::Array{AbstractString,1}, ::Array{AbstractString,1}) at ./pkg/entry.jl:724
│     [7] (::getfield(Base.Pkg.Entry, Symbol("#kw##test!")))(::NamedTuple{(:coverage,),Tuple{Bool}}, ::typeof(Base.Pkg.Entry.test!), ::String, ::Array{AbstractString,1}, ::Array{AbstractString,1}, ::Array{AbstractString,1}) at ./<missing>:0
│     [8] #test#98(::Bool, ::Function, ::Array{AbstractString,1}) at ./pkg/entry.jl:763
│     [9] (::getfield(Base.Pkg.Entry, Symbol("#kw##test")))(::NamedTuple{(:coverage,),Tuple{Bool}}, ::typeof(Base.Pkg.Entry.test), ::Array{AbstractString,1}) at ./<missing>:0
│     [10] (::getfield(Base.Pkg.Dir, Symbol("##4#7")){Base.Iterators.IndexValue{Symbol,Bool,Tuple{Symbol},NamedTuple{(:coverage,),Tuple{Bool}}},typeof(Base.Pkg.Entry.test),Tuple{Array{AbstractString,1}}})() at ./pkg/dir.jl:36
│     [11] cd(::getfield(Base.Pkg.Dir, Symbol("##4#7")){Base.Iterators.IndexValue{Symbol,Bool,Tuple{Symbol},NamedTuple{(:coverage,),Tuple{Bool}}},typeof(Base.Pkg.Entry.test),Tuple{Array{AbstractString,1}}}, ::String) at ./file.jl:70
│     [12] #cd#1(::Base.Iterators.IndexValue{Symbol,Bool,Tuple{Symbol},NamedTuple{(:coverage,),Tuple{Bool}}}, ::Function, ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N} where N) at ./pkg/dir.jl:36
│     [13] (::getfield(Base.Pkg.Dir, Symbol("#kw##cd")))(::NamedTuple{(:coverage,),Tuple{Bool}}, ::typeof(Base.Pkg.Dir.cd), ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N} where N) at ./<missing>:0
│     [14] #test#3(::Bool, ::Function, ::String, ::Vararg{String,N} where N) at ./pkg/pkg.jl:274
│     [15] test(::String, ::Vararg{String,N} where N) at ./pkg/pkg.jl:274
│     [16] top-level scope
│     [17] eval at ./boot.jl:296 [inlined]
│     [18] eval(::Module, ::Expr) at ./sysimg.jl:71
│     [19] process_options(::Base.JLOptions) at ./client.jl:301
│     [20] _start() at ./client.jl:375
└                                                  @ Base.Pkg.Entry entry.jl:739
ERROR: PathDistribution had test errors

>>> End of log
