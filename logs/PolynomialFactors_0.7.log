>>> 'Pkg.add("PolynomialFactors")' log
[ Info: Cloning cache of PolynomialFactors from https://github.com/jverzani/PolynomialFactors.jl.git @ Base.Pkg.Cache cache.jl:43
[ Info: Installing Combinatorics v0.5.0 @ Base.Pkg.Entry entry.jl:543
[ Info: Installing IterTools v0.2.0 @ Base.Pkg.Entry entry.jl:543
[ Info: Installing PolynomialFactors v0.0.6 @ Base.Pkg.Entry entry.jl:543
[ Info: Installing Polynomials v0.1.6 @ Base.Pkg.Entry entry.jl:543
[ Info: Installing Primes v0.2.0 @ Base.Pkg.Entry entry.jl:543
[ Info: Package database updated @ Base.Pkg.Entry entry.jl:32
┌ Info: METADATA is out-of-date — you may not have the latest version of PolynomialFactors
│ Use `Pkg.update()` to get the latest versions of your packages
└ @ Base.Pkg.Entry entry.jl:74

>>> 'Pkg.test("PolynomialFactors")' log
Julia Version 0.7.0-DEV.3246
Commit 2138144d3a (2018-01-04 02:34 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
      Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-135-generic #184-Ubuntu SMP Wed Oct 18 11:55:51 UTC 2017 x86_64 x86_64
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
              speed         user         nice          sys         idle          irq
       #1  3507 MHz    3439241 s        116 s     170431 s     908434 s         66 s
       #2  3507 MHz     870690 s         67 s      75514 s    4206853 s          1 s
       
  Memory: 2.93927001953125 GB (770.40625 MB free)
  Uptime: 52693.0 sec
  Load Avg:  1.091796875  1.052734375  1.03466796875
  WORD_SIZE: 64
  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant
Packages:
  Package Directory: /home/vagrant/.julia/v0.7
  Package Status:
2 required packages:
 - JSON                          0.16.3
 - PolynomialFactors             0.0.6
6 additional packages:
 - Combinatorics                 0.5.0
 - Compat                        0.42.0
 - IterTools                     0.2.0
 - Nullables                     0.0.2
 - Polynomials                   0.1.6
 - Primes                        0.2.0
[ Info: Testing PolynomialFactors @ Base.Pkg.Entry entry.jl:723
[ Warning: Syntax `&argument` around /home/vagrant/.julia/v0.7/PolynomialFactors/src/utils.jl:20 is deprecated. Remove the `&` and use a `Ref` argument type instead. @ nothing utils.jl:20
[ Warning: Syntax `&argument` around /home/vagrant/.julia/v0.7/PolynomialFactors/src/utils.jl:20 is deprecated. Remove the `&` and use a `Ref` argument type instead. @ nothing utils.jl:20
WARNING: importing deprecated binding Base.Void into PolynomialFactors.
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/PolynomialFactors/src/utils.jl:18
┌ Warning: Deprecated syntax `parametric method syntax lc{T <: Number}(a::T)` around /home/vagrant/.julia/v0.7/PolynomialFactors/src/utils.jl:28.
│ Use `lc(a::T) where T <: Number` instead.
└ @ nothing utils.jl:28
┌ Warning: Deprecated syntax `parametric method syntax normal{T <: Number}(a::T)` around /home/vagrant/.julia/v0.7/PolynomialFactors/src/utils.jl:29.
│ Use `normal(a::T) where T <: Number` instead.
└ @ nothing utils.jl:29
┌ Warning: Deprecated syntax `parametric method syntax EEA{R}(f::R, g::R)` around /home/vagrant/.julia/v0.7/PolynomialFactors/src/utils.jl:46.
│ Use `EEA(f::R, g::R) where R` instead.
└ @ nothing utils.jl:46
┌ Warning: Deprecated syntax `parametric method syntax bezout{R}(a::R, b::R)` around /home/vagrant/.julia/v0.7/PolynomialFactors/src/utils.jl:78.
│ Use `bezout(a::R, b::R) where R` instead.
└ @ nothing utils.jl:78
[ Warning: Deprecated syntax ``const` declaration on local variable` around /home/vagrant/.julia/v0.7/PolynomialFactors/src/utils.jl:79. @ nothing utils.jl:79
[ Warning: Deprecated syntax ``const` declaration on local variable` around /home/vagrant/.julia/v0.7/PolynomialFactors/src/utils.jl:79. @ nothing utils.jl:79
┌ Warning: Deprecated syntax `parametric method syntax chinese_remainder_theorem{R}(ms::Vector{R}, vs::Vector{R})` around /home/vagrant/.julia/v0.7/PolynomialFactors/src/utils.jl:106.
│ Use `chinese_remainder_theorem(ms::Vector{R}, vs::Vector{R}) where R` instead.
└ @ nothing utils.jl:106
┌ Warning: Deprecated syntax `parametric method syntax poly_reverse{T}(p::Poly{T}, k = degree(p))` around /home/vagrant/.julia/v0.7/PolynomialFactors/src/polyutils.jl:14.
│ Use `poly_reverse(p::Poly{T}, k = degree(p)) where T` instead.
└ @ nothing polyutils.jl:14
┌ Warning: Deprecated syntax `parametric method syntax poly_monic_over_Zp{T <: Integer}(a::Poly{T}, p)` around /home/vagrant/.julia/v0.7/PolynomialFactors/src/polyutils.jl:36.
│ Use `poly_monic_over_Zp(a::Poly{T}, p) where T <: Integer` instead.
└ @ nothing polyutils.jl:36
┌ Warning: Deprecated syntax `parametric method syntax content{T}(p::Poly{T})` around /home/vagrant/.julia/v0.7/PolynomialFactors/src/polyutils.jl:45.
│ Use `content(p::Poly{T}) where T` instead.
└ @ nothing polyutils.jl:45
┌ Warning: Deprecated syntax `parametric method syntax primitive{T}(p::Poly{T})` around /home/vagrant/.julia/v0.7/PolynomialFactors/src/polyutils.jl:48.
│ Use `primitive(p::Poly{T}) where T` instead.
└ @ nothing polyutils.jl:48
┌ Warning: Deprecated syntax `parametric method syntax isprimitive{T}(p::Poly{T})` around /home/vagrant/.julia/v0.7/PolynomialFactors/src/polyutils.jl:54.
│ Use `isprimitive(p::Poly{T}) where T` instead.
└ @ nothing polyutils.jl:54
┌ Warning: Deprecated syntax `parametric method syntax normal{T}(a::Poly{T})` around /home/vagrant/.julia/v0.7/PolynomialFactors/src/polyutils.jl:64.
│ Use `normal(a::Poly{T}) where T` instead.
└ @ nothing polyutils.jl:64
┌ Warning: Deprecated syntax `parametric method syntax synthetic_division{T}(p::Poly{T}, c::Number)` around /home/vagrant/.julia/v0.7/PolynomialFactors/src/polyutils.jl:71.
│ Use `synthetic_division(p::Poly{T}, c::Number) where T` instead.
└ @ nothing polyutils.jl:71
┌ Warning: Deprecated syntax `parametric method syntax deflate{T}(p::Poly{T}, c::T)` around /home/vagrant/.julia/v0.7/PolynomialFactors/src/polyutils.jl:87.
│ Use `deflate(p::Poly{T}, c::T) where T` instead.
└ @ nothing polyutils.jl:87
┌ Warning: Deprecated syntax `parametric method syntax deflate{T, S}(p::Poly{T}, fac::Poly{S})` around /home/vagrant/.julia/v0.7/PolynomialFactors/src/polyutils.jl:103.
│ Use `deflate(p::Poly{T}, fac::Poly{S}) where {T, S}` instead.
└ @ nothing polyutils.jl:103
┌ Warning: Deprecated syntax `parametric method syntax deflate_over_Zp{T}(f::Poly{T}, g::Poly{T}, p)` around /home/vagrant/.julia/v0.7/PolynomialFactors/src/polyutils.jl:116.
│ Use `deflate_over_Zp(f::Poly{T}, g::Poly{T}, p) where T` instead.
└ @ nothing polyutils.jl:116
[ Warning: Deprecated syntax ``const` declaration on local variable` around /home/vagrant/.julia/v0.7/PolynomialFactors/src/polyutils.jl:116. @ nothing polyutils.jl:116
┌ Warning: Deprecated syntax `parametric method syntax newton_inversion{T}(f::Poly{T}, l::Int)` around /home/vagrant/.julia/v0.7/PolynomialFactors/src/polyutils.jl:185.
│ Use `newton_inversion(f::Poly{T}, l::Int) where T` instead.
└ @ nothing polyutils.jl:185
┌ Warning: Deprecated syntax `parametric method syntax poly_fast_divrem_over_Zp{T <: Integer, S <: Integer}(a::Poly{T}, b::Poly{T}, p::S)` around /home/vagrant/.julia/v0.7/PolynomialFactors/src/polyutils.jl:210.
│ Use `poly_fast_divrem_over_Zp(a::Poly{T}, b::Poly{T}, p::S) where {T <: Integer, S <: Integer}` instead.
└ @ nothing polyutils.jl:210
┌ Warning: Deprecated syntax `parametric method syntax exact_divrem{T <: Integer}(a::Poly{T}, b::Poly{T})` around /home/vagrant/.julia/v0.7/PolynomialFactors/src/polyutils.jl:288.
│ Use `exact_divrem(a::Poly{T}, b::Poly{T}) where T <: Integer` instead.
└ @ nothing polyutils.jl:288
┌ Warning: Deprecated syntax `parametric method syntax square_free{T <: Integer}(f::Poly{T})` around /home/vagrant/.julia/v0.7/PolynomialFactors/src/polyutils.jl:338.
│ Use `square_free(f::Poly{T}) where T <: Integer` instead.
└ @ nothing polyutils.jl:338
┌ Warning: Deprecated syntax `parametric method syntax _bi2up{T}(as::Vector{T}, k, n)` around /home/vagrant/.julia/v0.7/PolynomialFactors/src/polyutils.jl:353.
│ Use `_bi2up(as::Vector{T}, k, n) where T` instead.
└ @ nothing polyutils.jl:353
┌ Warning: Deprecated syntax `parametric method syntax bi2norm{T}(as::Vector{T})` around /home/vagrant/.julia/v0.7/PolynomialFactors/src/polyutils.jl:364.
│ Use `bi2norm(as::Vector{T}) where T` instead.
└ @ nothing polyutils.jl:364
┌ Warning: Deprecated syntax `parametric method syntax beauzamy_bound{T}(p::Poly{T})` around /home/vagrant/.julia/v0.7/PolynomialFactors/src/polyutils.jl:372.
│ Use `beauzamy_bound(p::Poly{T}) where T` instead.
└ @ nothing polyutils.jl:372
┌ Warning: Deprecated syntax `parametric method syntax landau_mignotte{T}(p::Poly{T})` around /home/vagrant/.julia/v0.7/PolynomialFactors/src/polyutils.jl:378.
│ Use `landau_mignotte(p::Poly{T}) where T` instead.
└ @ nothing polyutils.jl:378
┌ Warning: Deprecated syntax `parametric method syntax poly_powermod_over_Zp{S <: Integer}(a::Poly{BigInt}, n::S, m::Poly{BigInt}, p::Integer)` around /home/vagrant/.julia/v0.7/PolynomialFactors/src/zx.jl:64.
│ Use `poly_powermod_over_Zp(a::Poly{BigInt}, n::S, m::Poly{BigInt}, p::Integer) where S <: Integer` instead.
└ @ nothing zx.jl:64
[ Warning: Deprecated syntax ``const` declaration on local variable` around /home/vagrant/.julia/v0.7/PolynomialFactors/src/zx.jl:65. @ nothing zx.jl:65
[ Warning: Deprecated syntax ``const` declaration on local variable` around /home/vagrant/.julia/v0.7/PolynomialFactors/src/zx.jl:66. @ nothing zx.jl:66
┌ Warning: Deprecated syntax `parametric method syntax poly_div_over_Zp{T <: Integer}(a::Poly{T}, b::Poly{T}, p::Integer)` around /home/vagrant/.julia/v0.7/PolynomialFactors/src/zx.jl:117.
│ Use `poly_div_over_Zp(a::Poly{T}, b::Poly{T}, p::Integer) where T <: Integer` instead.
└ @ nothing zx.jl:117
┌ Warning: Deprecated syntax `parametric method syntax poly_rem_over_Zp{T <: Integer}(a::Poly{T}, b::Poly{T}, p::Integer)` around /home/vagrant/.julia/v0.7/PolynomialFactors/src/zx.jl:118.
│ Use `poly_rem_over_Zp(a::Poly{T}, b::Poly{T}, p::Integer) where T <: Integer` instead.
└ @ nothing zx.jl:118
┌ Warning: Deprecated syntax `parametric method syntax poly_divides_over_Zp{T}(g::Poly{T}, h::Poly{T}, p::Integer)` around /home/vagrant/.julia/v0.7/PolynomialFactors/src/zx.jl:119.
│ Use `poly_divides_over_Zp(g::Poly{T}, h::Poly{T}, p::Integer) where T` instead.
└ @ nothing zx.jl:119
┌ Warning: Deprecated syntax `parametric method syntax poly_normal_over_Zp{T}(f::Poly{T}, p::T)` around /home/vagrant/.julia/v0.7/PolynomialFactors/src/zx.jl:124.
│ Use `poly_normal_over_Zp(f::Poly{T}, p::T) where T` instead.
└ @ nothing zx.jl:124
┌ Warning: Deprecated syntax `parametric method syntax poly_EEA_over_Zp{T}(f::Poly{T}, g::Poly{T}, p::T)` around /home/vagrant/.julia/v0.7/PolynomialFactors/src/zx.jl:132.
│ Use `poly_EEA_over_Zp(f::Poly{T}, g::Poly{T}, p::T) where T` instead.
└ @ nothing zx.jl:132
[ Warning: Deprecated syntax ``const` declaration on local variable` around /home/vagrant/.julia/v0.7/PolynomialFactors/src/zx.jl:132. @ nothing zx.jl:132
[ Warning: Deprecated syntax ``const` declaration on local variable` around /home/vagrant/.julia/v0.7/PolynomialFactors/src/zx.jl:132. @ nothing zx.jl:132
┌ Warning: Deprecated syntax `parametric method syntax poly_bezout_over_Zp{T}(f::Poly{T}, g::Poly{T}, p::T)` around /home/vagrant/.julia/v0.7/PolynomialFactors/src/zx.jl:162.
│ Use `poly_bezout_over_Zp(f::Poly{T}, g::Poly{T}, p::T) where T` instead.
└ @ nothing zx.jl:162
[ Warning: Deprecated syntax ``const` declaration on local variable` around /home/vagrant/.julia/v0.7/PolynomialFactors/src/zx.jl:162. @ nothing zx.jl:162
[ Warning: Deprecated syntax ``const` declaration on local variable` around /home/vagrant/.julia/v0.7/PolynomialFactors/src/zx.jl:162. @ nothing zx.jl:162
┌ Warning: Deprecated syntax `parametric method syntax poly_gcd_over_Zp{T <: Integer, S <: Integer}(a::Poly{T}, b::Poly{T}, p::S)` around /home/vagrant/.julia/v0.7/PolynomialFactors/src/zx.jl:175.
│ Use `poly_gcd_over_Zp(a::Poly{T}, b::Poly{T}, p::S) where {T <: Integer, S <: Integer}` instead.
└ @ nothing zx.jl:175
┌ Warning: Deprecated syntax `parametric method syntax modular_gcd_small_prime{T <: Integer}(p::Poly{T}, q::Poly{T})` around /home/vagrant/.julia/v0.7/PolynomialFactors/src/zx.jl:189.
│ Use `modular_gcd_small_prime(p::Poly{T}, q::Poly{T}) where T <: Integer` instead.
└ @ nothing zx.jl:189
┌ Warning: Deprecated syntax `parametric method syntax egcd{T <: Integer}(p::Poly{T}, q::Poly{T})` around /home/vagrant/.julia/v0.7/PolynomialFactors/src/zx.jl:251.
│ Use `egcd(p::Poly{T}, q::Poly{T}) where T <: Integer` instead.
└ @ nothing zx.jl:251
┌ Warning: Deprecated syntax `parametric method syntax reduce_BU!{T}(i, B::Matrix{T}, U)` around /home/vagrant/.julia/v0.7/PolynomialFactors/src/lll.jl:9.
│ Use `reduce_BU!(i, B::Matrix{T}, U) where T` instead.
└ @ nothing lll.jl:9
┌ Warning: Deprecated syntax `parametric method syntax LLLBR!{T}(B::Matrix{T}, c = 2)` around /home/vagrant/.julia/v0.7/PolynomialFactors/src/lll.jl:33.
│ Use `LLLBR!(B::Matrix{T}, c = 2) where T` instead.
└ @ nothing lll.jl:33
[ Warning: Deprecated syntax ``const` declaration on local variable` around /home/vagrant/.julia/v0.7/PolynomialFactors/src/lll.jl:36. @ nothing lll.jl:36
[ Warning: Deprecated syntax ``const` declaration on local variable` around /home/vagrant/.julia/v0.7/PolynomialFactors/src/lll.jl:36. @ nothing lll.jl:36
┌ Warning: Deprecated syntax `parametric method syntax short_vector{T}(u::Poly{T}, m, j, d)` around /home/vagrant/.julia/v0.7/PolynomialFactors/src/lll.jl:84.
│ Use `short_vector(u::Poly{T}, m, j, d) where T` instead.
└ @ nothing lll.jl:84
┌ Warning: Deprecated syntax `parametric method syntax identify_factor{T}(u::Poly{T}, fstar::Poly{T}, Ts::Vector{Poly{T}}, p::T, l::T, b, B)` around /home/vagrant/.julia/v0.7/PolynomialFactors/src/lll.jl:101.
│ Use `identify_factor(u::Poly{T}, fstar::Poly{T}, Ts::Vector{Poly{T}}, p::T, l::T, b, B) where T` instead.
└ @ nothing lll.jl:101
┌ Warning: Deprecated syntax `parametric method syntax _poly_fish_out{T}(S::Vector{Poly{T}}, k, p, l, b, B)` around /home/vagrant/.julia/v0.7/PolynomialFactors/src/lll.jl:166.
│ Use `_poly_fish_out(S::Vector{Poly{T}}, k, p, l, b, B) where T` instead.
└ @ nothing lll.jl:166
┌ Warning: Deprecated syntax `type` at /home/vagrant/.julia/v0.7/PolynomialFactors/src/factor.jl:189.
│ Use `mutable struct` instead.
└ @ nothing factor.jl:189
┌ Warning: Deprecated syntax `type` at /home/vagrant/.julia/v0.7/PolynomialFactors/src/factor.jl:197.
│ Use `mutable struct` instead.
└ @ nothing factor.jl:197
┌ Warning: Deprecated syntax `parametric method syntax poly_factor_over_Zp{R, S}(a::Poly{R}, m::S, d = 1)` around /home/vagrant/.julia/v0.7/PolynomialFactors/src/factor.jl:16.
│ Use `poly_factor_over_Zp(a::Poly{R}, m::S, d = 1) where {R, S}` instead.
└ @ nothing factor.jl:16
┌ Warning: Deprecated syntax `parametric method syntax equal_degree_factorization_over_Zp{T <: Integer}(f::Poly{T}, p::T, d::Integer, MAXSTEPS = 32)` around /home/vagrant/.julia/v0.7/PolynomialFactors/src/factor.jl:48.
│ Use `equal_degree_factorization_over_Zp(f::Poly{T}, p::T, d::Integer, MAXSTEPS = 32) where T <: Integer` instead.
└ @ nothing factor.jl:48
┌ Warning: Deprecated syntax `parametric method syntax equal_degree_splitting_over_Zp{T}(f::Poly{T}, p::Integer, d::Integer, MAXSTEPS = 16)` around /home/vagrant/.julia/v0.7/PolynomialFactors/src/factor.jl:74.
│ Use `equal_degree_splitting_over_Zp(f::Poly{T}, p::Integer, d::Integer, MAXSTEPS = 16) where T` instead.
└ @ nothing factor.jl:74
┌ Warning: Deprecated syntax `parametric method syntax _equal_degree_splitting_call{T}(f::Poly{T}, p::T, d::Integer)` around /home/vagrant/.julia/v0.7/PolynomialFactors/src/factor.jl:96.
│ Use `_equal_degree_splitting_call(f::Poly{T}, p::T, d::Integer) where T` instead.
└ @ nothing factor.jl:96
┌ Warning: Deprecated syntax `parametric method syntax _partition_by{T}(S::Vector{T}, inds)` around /home/vagrant/.julia/v0.7/PolynomialFactors/src/factor.jl:132.
│ Use `_partition_by(S::Vector{T}, inds) where T` instead.
└ @ nothing factor.jl:132
┌ Warning: Deprecated syntax `parametric method syntax hensel_step{T}(f::Poly{T}, g::Poly, h::Poly, s::Poly, t::Poly, m)` around /home/vagrant/.julia/v0.7/PolynomialFactors/src/factor.jl:156.
│ Use `hensel_step(f::Poly{T}, g::Poly, h::Poly, s::Poly, t::Poly, m) where T` instead.
└ @ nothing factor.jl:156
[ Warning: Deprecated syntax ``const` declaration on local variable` around /home/vagrant/.julia/v0.7/PolynomialFactors/src/factor.jl:163. @ nothing factor.jl:163
┌ Warning: Deprecated syntax `parametric method syntax hensel_lift{T}(f, facs, m::T, a0, l)` around /home/vagrant/.julia/v0.7/PolynomialFactors/src/factor.jl:246.
│ Use `hensel_lift(f, facs, m::T, a0, l) where T` instead.
└ @ nothing factor.jl:246
┌ Warning: Deprecated syntax `parametric method syntax find_zassenhaus_bounds{T <: Integer}(f::Poly{T})` around /home/vagrant/.julia/v0.7/PolynomialFactors/src/factor.jl:259.
│ Use `find_zassenhaus_bounds(f::Poly{T}) where T <: Integer` instead.
└ @ nothing factor.jl:259
┌ Warning: Deprecated syntax `parametric method syntax factor_zassenhaus_variables{T <: Integer}(f::Poly{T})` around /home/vagrant/.julia/v0.7/PolynomialFactors/src/factor.jl:272.
│ Use `factor_zassenhaus_variables(f::Poly{T}) where T <: Integer` instead.
└ @ nothing factor.jl:272
┌ Warning: Deprecated syntax `parametric method syntax factor_square_free_zassenhaus{T <: Integer}(f::Poly{T})` around /home/vagrant/.julia/v0.7/PolynomialFactors/src/factor.jl:310.
│ Use `factor_square_free_zassenhaus(f::Poly{T}) where T <: Integer` instead.
└ @ nothing factor.jl:310
┌ Warning: Deprecated syntax `parametric method syntax factor_zassenhaus{T <: Integer}(f::Poly{T})` around /home/vagrant/.julia/v0.7/PolynomialFactors/src/factor.jl:347.
│ Use `factor_zassenhaus(f::Poly{T}) where T <: Integer` instead.
└ @ nothing factor.jl:347
┌ Warning: Deprecated syntax `parametric method syntax poly_check_five_good_ps{T}(f::Poly{T}, lambda, k = 5)` around /home/vagrant/.julia/v0.7/PolynomialFactors/src/factor.jl:366.
│ Use `poly_check_five_good_ps(f::Poly{T}, lambda, k = 5) where T` instead.
└ @ nothing factor.jl:366
┌ Warning: Deprecated syntax `parametric method syntax find_term_exhaust{T}(f, S::Vector{Poly{T}}, k, p, l, b, B)` around /home/vagrant/.julia/v0.7/PolynomialFactors/src/factor.jl:406.
│ Use `find_term_exhaust(f, S::Vector{Poly{T}}, k, p, l, b, B) where T` instead.
└ @ nothing factor.jl:406
┌ Warning: Deprecated syntax `parametric method syntax beauzamy_trevisan_wang_factor_square_free{T <: Integer}(f::Poly{T})` around /home/vagrant/.julia/v0.7/PolynomialFactors/src/factor.jl:448.
│ Use `beauzamy_trevisan_wang_factor_square_free(f::Poly{T}) where T <: Integer` instead.
└ @ nothing factor.jl:448
┌ Warning: Deprecated syntax `parametric method syntax factor_btw{T <: Integer}(f::Poly{T})` around /home/vagrant/.julia/v0.7/PolynomialFactors/src/factor.jl:501.
│ Use `factor_btw(f::Poly{T}) where T <: Integer` instead.
└ @ nothing factor.jl:501
┌ Warning: Deprecated syntax `parametric method syntax Qx_to_Zx{T}(f::Poly{Rational{T}})` around /home/vagrant/.julia/v0.7/PolynomialFactors/src/factor.jl:521.
│ Use `Qx_to_Zx(f::Poly{Rational{T}}) where T` instead.
└ @ nothing factor.jl:521
┌ Warning: Deprecated syntax `parametric method syntax factor{R <: Integer}(f::Poly{R})` around /home/vagrant/.julia/v0.7/PolynomialFactors/src/factor.jl:603.
│ Use `factor(f::Poly{R}) where R <: Integer` instead.
└ @ nothing factor.jl:603
┌ Warning: Deprecated syntax `parametric method syntax factor{T <: Integer}(p::Poly{Rational{T}})` around /home/vagrant/.julia/v0.7/PolynomialFactors/src/factor.jl:607.
│ Use `factor(p::Poly{Rational{T}}) where T <: Integer` instead.
└ @ nothing factor.jl:607
┌ Warning: Deprecated syntax `parametric method syntax rational_roots{T <: Integer}(f::Poly{T})` around /home/vagrant/.julia/v0.7/PolynomialFactors/src/factor.jl:627.
│ Use `rational_roots(f::Poly{T}) where T <: Integer` instead.
└ @ nothing factor.jl:627
┌ Warning: Deprecated syntax `parametric method syntax rational_roots{T <: Integer}(f::Poly{Rational{T}})` around /home/vagrant/.julia/v0.7/PolynomialFactors/src/factor.jl:633.
│ Use `rational_roots(f::Poly{Rational{T}}) where T <: Integer` instead.
└ @ nothing factor.jl:633
┌ Warning: Deprecated syntax `parametric method syntax factormod{T <: Integer, S <: Integer}(f::Poly{T}, p::S)` around /home/vagrant/.julia/v0.7/PolynomialFactors/src/factor.jl:641.
│ Use `factormod(f::Poly{T}, p::S) where {T <: Integer, S <: Integer}` instead.
└ @ nothing factor.jl:641
WARNING: Base.Test is deprecated, run `using Test` instead.
  likely near /home/vagrant/.julia/v0.7/PolynomialFactors/test/runtests.jl:2
WARNING: Base.Test is deprecated, run `using Test` instead.
  likely near /home/vagrant/.julia/v0.7/PolynomialFactors/test/test-utils.jl:3
Testing utils.jl

signal (11): Segmentation fault
in expression starting at /home/vagrant/.julia/v0.7/PolynomialFactors/test/test-utils.jl:12
_ZN4llvm5Value16DoPHITranslationEPKNS_10BasicBlockES3_ at /home/vagrant/julia/bin/../lib/julia/libLLVM-3.9.so (unknown line)
Allocations: 10529456 (Pool: 10528362; Big: 1094); GC: 25
┌ Error: ------------------------------------------------------------
│ # Testing failed for PolynomialFactors
│   exception = ErrorException("failed process: Process(`/home/vagrant/julia/bin/julia -Cnative -J/home/vagrant/julia/lib/julia/sys.so --compile=yes --depwarn=yes --code-coverage=none --color=no --compiled-modules=yes --check-bounds=yes --warn-overwrite=yes --startup-file=yes /home/vagrant/.julia/v0.7/PolynomialFactors/test/runtests.jl`, ProcessSignaled(11)) [0]")
└ @ Base.Pkg.Entry entry.jl:739
ERROR: PolynomialFactors had test errors

>>> End of log
