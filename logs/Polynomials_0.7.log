>>> 'Pkg.add("Polynomials")' log
[ Info: Installing Polynomials v0.1.6 @ Base.Pkg.Entry entry.jl:543
[ Info: Package database updated @ Base.Pkg.Entry entry.jl:32
┌ Info: METADATA is out-of-date — you may not have the latest version of Polynomials
│ Use `Pkg.update()` to get the latest versions of your packages
└ @ Base.Pkg.Entry entry.jl:74

>>> 'Pkg.test("Polynomials")' log
Julia Version 0.7.0-DEV.3246
Commit 2138144d3a (2018-01-04 02:34 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
      Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-135-generic #184-Ubuntu SMP Wed Oct 18 11:55:51 UTC 2017 x86_64 x86_64
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
              speed         user         nice          sys         idle          irq
       #1  3507 MHz    3461845 s        119 s     171261 s     915467 s         66 s
       #2  3507 MHz     876922 s         67 s      75870 s    4235157 s          1 s
       
  Memory: 2.93927001953125 GB (763.59765625 MB free)
  Uptime: 53051.0 sec
  Load Avg:  1.0029296875  1.0146484375  1.03466796875
  WORD_SIZE: 64
  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant
Packages:
  Package Directory: /home/vagrant/.julia/v0.7
  Package Status:
2 required packages:
 - JSON                          0.16.3
 - Polynomials                   0.1.6
2 additional packages:
 - Compat                        0.42.0
 - Nullables                     0.0.2
[ Info: Testing Polynomials @ Base.Pkg.Entry entry.jl:723
┌ Warning: Deprecated syntax `1./` at /home/vagrant/.julia/v0.7/Polynomials/test/runtests.jl:119.
│ Use `1 ./` instead.
└ @ nothing runtests.jl:119
┌ Warning: Deprecated syntax `immutable` at /home/vagrant/.julia/v0.7/Polynomials/test/runtests.jl:216.
│ Use `struct` instead.
└ @ nothing runtests.jl:216
WARNING: Base.Test is deprecated, run `using Test` instead.
  likely near /home/vagrant/.julia/v0.7/Polynomials/test/runtests.jl:3
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = _polyint(::Poly{Int64}, ::Int64) at Polynomials.jl:513
└ @ Polynomials Polynomials.jl:513
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = _polyder(::Poly{Float64}, ::Int64) at Polynomials.jl:574
└ @ Polynomials Polynomials.jl:574
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = _polyder(::Poly{Rational{Int64}}, ::Int64) at Polynomials.jl:574
└ @ Polynomials Polynomials.jl:574
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = _polyder(::Poly{Int64}, ::Int64) at Polynomials.jl:574
└ @ Polynomials Polynomials.jl:574
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = _polyint(::Poly{Float32}, ::Int64) at Polynomials.jl:513
└ @ Polynomials Polynomials.jl:513
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = _polyint(::Poly{Rational}, ::Int64) at Polynomials.jl:513
└ @ Polynomials Polynomials.jl:513
┌ Warning: `diagm(v::AbstractVector, k::Integer)` is deprecated, use `diagm(k => v)` instead.
│   caller = roots(::Poly{Int64}) at Polynomials.jl:642
└ @ Polynomials Polynomials.jl:642
┌ Warning: `diagm(v::AbstractVector, k::Integer)` is deprecated, use `diagm(k => v)` instead.
│   caller = roots(::Poly{Float64}) at Polynomials.jl:642
└ @ Polynomials Polynomials.jl:642
Test for the exponential function.
Test for the sine function.
┌ Warning: `rtoldefault(x, y)` is deprecated, use `rtoldefault(x, y, 0)` instead.
│   caller = isapprox(::Poly{Rational{BigInt}}, ::Poly{Rational{BigInt}}) at Polynomials.jl:413
└ @ Polynomials Polynomials.jl:413
Test for the cosine function.
Test for the summation of a factorially divergent series.
The approximate sum of the divergent series is:  0.596347366095526
WARNING: Base.γ is deprecated, use MathConstants.γ instead.
  likely near /home/vagrant/.julia/v0.7/Polynomials/test/runtests.jl:140
The approximate sum of the convergent series is: 0.5963473623231946
WARNING: Base.γ is deprecated, use MathConstants.γ instead.
  likely near /home/vagrant/.julia/v0.7/Polynomials/test/runtests.jl:141
Test for setindex!()
┌ Warning: `rtoldefault(x, y)` is deprecated, use `rtoldefault(x, y, 0)` instead.
│   caller = isapprox(::Poly{Int64}, ::Poly{Int64}) at Polynomials.jl:413
└ @ Polynomials Polynomials.jl:413
Test for element-wise operations
┌ Warning: `a::AbstractArray + b::Number` is deprecated, use `broadcast(+, a, b)` instead.
│   caller = top-level scope
└ @ Core :0
┌ Warning: `a::AbstractArray - b::Number` is deprecated, use `broadcast(-, a, b)` instead.
│   caller = top-level scope
└ @ Core :0
┌ Warning: `rtoldefault(x, y)` is deprecated, use `rtoldefault(x, y, 0)` instead.
│   caller = isapprox(::Poly{Int64}, ::Poly{Int64}) at Polynomials.jl:413
└ @ Polynomials Polynomials.jl:413
┌ Warning: `rtoldefault(x, y)` is deprecated, use `rtoldefault(x, y, 0)` instead.
│   caller = isapprox(::Poly{Int64}, ::Poly{Float64}) at Polynomials.jl:413
└ @ Polynomials Polynomials.jl:413
┌ Warning: `rtoldefault(x, y)` is deprecated, use `rtoldefault(x, y, 0)` instead.
│   caller = isapprox(::Poly{Int64}, ::Float64) at Polynomials.jl:422
└ @ Polynomials Polynomials.jl:422
┌ Warning: `rtoldefault(x, y)` is deprecated, use `rtoldefault(x, y, 0)` instead.
│   caller = isapprox(::Float64, ::Poly{Int64}) at Polynomials.jl:427
└ @ Polynomials Polynomials.jl:427
┌ Warning: `speye(m::Integer, n::Integer)` has been deprecated in favor of `I`, `sparse`, and `SparseMatrixCSC` constructor methods. For a direct replacement, consider `sparse(1.0I, m, n)`, `SparseMatrixCSC(1.0I, m, n)`, or `SparseMatrixCSC{Float64}(I, m, n)`. If `Float64` element type is not  necessary, consider the shorter `sparse(I, m, n)` or `SparseMatrixCSC(I, m, n)` (with default `eltype(I)` of `Bool`).
│   caller = top-level scope
└ @ Core :0
┌ Warning: `zeros(a::AbstractArray)` is deprecated, consider `zero(a)`, `fill(0, size(a))`, `fill!(copy(a), 0)`, or `fill!(similar(a), 0)`. Where necessary, use `fill!(similar(a), zero(eltype(a)))`.
│   caller = next(::Poly{Int64}, ::Int64) at Polynomials.jl:144
└ @ Polynomials Polynomials.jl:144
┌ Warning: `zeros(a::AbstractArray)` is deprecated, consider `zero(a)`, `fill(0, size(a))`, `fill!(copy(a), 0)`, or `fill!(similar(a), 0)`. Where necessary, use `fill!(similar(a), zero(eltype(a)))`.
│   caller = next at Polynomials.jl:144 [inlined]
└ @ Core Polynomials.jl:144
┌ Warning: `zeros(a::AbstractArray)` is deprecated, consider `zero(a)`, `fill(0, size(a))`, `fill!(copy(a), 0)`, or `fill!(similar(a), 0)`. Where necessary, use `fill!(similar(a), zero(eltype(a)))`.
│   caller = next at Polynomials.jl:144 [inlined]
└ @ Core Polynomials.jl:144
┌ Warning: `zeros(a::AbstractArray)` is deprecated, consider `zero(a)`, `fill(0, size(a))`, `fill!(copy(a), 0)`, or `fill!(similar(a), 0)`. Where necessary, use `fill!(similar(a), zero(eltype(a)))`.
│   caller = next at Polynomials.jl:144 [inlined]
└ @ Core Polynomials.jl:144
┌ Warning: `rtoldefault(x, y)` is deprecated, use `rtoldefault(x, y, 0)` instead.
│   caller = isapprox(::Poly{Float64}, ::Poly{Float64}) at Polynomials.jl:413
└ @ Polynomials Polynomials.jl:413
[ Info: Polynomials tests passed @ Base.Pkg.Entry entry.jl:737

>>> End of log
