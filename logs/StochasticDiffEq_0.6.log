>>> 'Pkg.add("StochasticDiffEq")' log
INFO: Installing Calculus v0.2.2
INFO: Installing Combinatorics v0.4.0
INFO: Installing DataStructures v0.5.3
INFO: Installing DiffBase v0.2.0
INFO: Installing DiffEqBase v1.7.0
INFO: Installing DiffEqNoiseProcess v0.1.1
INFO: Installing Distances v0.4.1
INFO: Installing ForwardDiff v0.4.2
INFO: Installing Hiccup v0.1.1
INFO: Installing Iterators v0.3.1
INFO: Installing Juno v0.2.7
INFO: Installing LineSearches v0.1.5
INFO: Installing MacroTools v0.3.6
INFO: Installing Media v0.2.7
INFO: Installing NLsolve v0.9.1
INFO: Installing NaNMath v0.2.4
INFO: Installing Optim v0.7.8
INFO: Installing Parameters v0.7.2
INFO: Installing PolynomialFactors v0.0.5
INFO: Installing Polynomials v0.1.5
INFO: Installing PositiveFactorizations v0.0.4
INFO: Installing Primes v0.1.3
INFO: Installing Ranges v0.0.1
INFO: Installing RecipesBase v0.1.0
INFO: Installing RecursiveArrayTools v0.7.1
INFO: Installing ResettableStacks v0.1.0
INFO: Installing Roots v0.3.1
INFO: Installing SimpleTraits v0.5.0
INFO: Installing SpecialFunctions v0.1.1
INFO: Installing StaticArrays v0.5.0
INFO: Installing StochasticDiffEq v2.2.1
INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of StochasticDiffEq
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("StochasticDiffEq")' log
Julia Version 0.6.0-rc2.0
Commit 68e911b (2017-05-18 02:31 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-119-generic #166-Ubuntu SMP Wed May 3 12:18:55 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (604.0859375 MB free)
Uptime: 63229.0 sec
Load Avg:  0.98974609375  1.0126953125  0.9814453125
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz    4210619 s         75 s     167698 s     861543 s         47 s
#2  3499 MHz     633797 s       6494 s      80150 s    5494001 s          1 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.6
2 required packages:
 - JSON                          0.12.0
 - StochasticDiffEq              2.2.1
31 additional packages:
 - Calculus                      0.2.2
 - Combinatorics                 0.4.0
 - Compat                        0.25.2
 - DataStructures                0.5.3
 - DiffBase                      0.2.0
 - DiffEqBase                    1.7.0
 - DiffEqNoiseProcess            0.1.1
 - Distances                     0.4.1
 - ForwardDiff                   0.4.2
 - Hiccup                        0.1.1
 - Iterators                     0.3.1
 - Juno                          0.2.7
 - LineSearches                  0.1.5
 - MacroTools                    0.3.6
 - Media                         0.2.7
 - NLsolve                       0.9.1
 - NaNMath                       0.2.4
 - Optim                         0.7.8
 - Parameters                    0.7.2
 - PolynomialFactors             0.0.5
 - Polynomials                   0.1.5
 - PositiveFactorizations        0.0.4
 - Primes                        0.1.3
 - Ranges                        0.0.1
 - RecipesBase                   0.1.0
 - RecursiveArrayTools           0.7.1
 - ResettableStacks              0.1.0
 - Roots                         0.3.1
 - SimpleTraits                  0.5.0
 - SpecialFunctions              0.1.1
 - StaticArrays                  0.5.0
INFO: Computing test dependencies for StochasticDiffEq...
INFO: Installing BinDeps v0.6.0
INFO: Installing Blosc v0.2.1
INFO: Installing ChunkedArrays v0.1.1
INFO: Installing Conda v0.5.3
INFO: Installing DiffEqDevTools v0.8.1
INFO: Installing DiffEqPDEBase v0.3.2
INFO: Installing DiffEqProblemLibrary v0.7.0
INFO: Installing Distributions v0.13.0
INFO: Installing EllipsisNotation v0.1.0
INFO: Installing FileIO v0.3.1
INFO: Installing HDF5 v0.8.1
INFO: Installing JLD v0.6.10
INFO: Installing LegacyStrings v0.2.1
INFO: Installing PDMats v0.6.0
INFO: Installing ParameterizedFunctions v2.0.0
INFO: Installing QuadGK v0.1.2
INFO: Installing Rmath v0.1.6
INFO: Installing SHA v0.3.2
INFO: Installing SpecialMatrices v0.1.3
INFO: Installing StatsBase v0.15.0
INFO: Installing StatsFuns v0.5.0
INFO: Installing SymEngine v0.2.0
INFO: Installing URIParser v0.1.8
INFO: Installing VectorizedRoutines v0.0.2
INFO: Building Blosc
INFO: Building Conda
INFO: Building Rmath
INFO: Building SymEngine
INFO: Building HDF5
INFO: Testing StochasticDiffEq
Test Summary:    | Pass  Total
First Rand Tests |    4      4
  5.936807 seconds (5.56 M allocations: 689.077 MiB, 2.68% gc time)
Solve and Plot
Convergence Test on Linear
Test Summary:    | Pass  Total
Linear SDE Tests |    1      1
 10.024968 seconds (10.10 M allocations: 837.484 MiB, 3.23% gc time)
Test Summary:     |
Linear RODE Tests | No tests
  4.060194 seconds (2.63 M allocations: 530.934 MiB, 5.25% gc time)
Solve and Plot
Convergence Test on 2D Linear
Test Summary:                    | Pass  Total
Two-dimensional Linear SDE Tests |    4      4
 11.084695 seconds (13.22 M allocations: 1.491 GiB, 11.13% gc time)
Solve and Plot
Convergence Test on MultiDimAdditive
Test Summary:      | Pass  Total
Additive SDE Tests |    2      2
  6.037211 seconds (3.53 M allocations: 503.400 MiB, 5.42% gc time)
Test Summary:       | Pass  Total
Rossler Order Tests |    2      2
  0.412365 seconds (267.03 k allocations: 13.429 MiB, 2.65% gc time)
Test Summary:     | Pass  Total
Convergence Tests |   14     14
 16.703137 seconds (20.26 M allocations: 1.898 GiB, 5.67% gc time)
Test Summary: | Pass  Total
Split Tests   |    2      2
  3.873413 seconds (2.37 M allocations: 438.277 MiB, 6.33% gc time)
Test Summary:                  | Pass  Total
Stratonovich Convergence Tests |    2      2
  6.118219 seconds (18.17 M allocations: 1.176 GiB, 17.01% gc time)
WARNING: Method definition (::Type{SpecialMatrices.Hankel{T} where T})(Array{T, 1}) in module SpecialMatrices at /home/vagrant/.julia/v0.6/SpecialMatrices/src/hankel.jl:4 overwritten at /home/vagrant/.julia/v0.6/SpecialMatrices/src/hankel.jl:6.
WARNING: Array{T}(::Type{T}, m::Int, n::Int) is deprecated, use Array{T}(m, n) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] Array(::Type{Float64}, ::Int64, ::Int64) at ./deprecated.jl:51
 [3] trust_region_(::NLsolve.DifferentiableMultivariateFunction, ::Array{Float64,1}, ::Float64, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::Float64, ::Bool) at /home/vagrant/.julia/v0.6/NLsolve/src/trust_region.jl:82
 [4] #nlsolve#17(::Symbol, ::Float64, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::Function, ::Float64, ::Bool, ::NLsolve.#nlsolve, ::NLsolve.DifferentiableMultivariateFunction, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/NLsolve/src/nlsolve_func_defs.jl:24
 [5] NLSOLVEJL_SETUP at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/misc_utils.jl:51 [inlined]
 [6] perform_step! at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/integrators/iif.jl:46 [inlined]
 [7] perform_step! at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/integrators/iif.jl:28 [inlined]
 [8] solve!(::StochasticDiffEq.SDEIntegrator{StochasticDiffEq.IIF1M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}},Float64,Float64,Float64,Float64,Float64,DiffEqNoiseProcess.NoiseProcess{Float64,1,Float64,Float64,Void,Void,DiffEqNoiseProcess.#WHITE_NOISE_DIST,DiffEqNoiseProcess.#WHITE_NOISE_BRIDGE,false,DataStructures.Stack{Tuple{Float64,Float64,Void}},ResettableStacks.ResettableStack{Tuple{Float64,Float64,Void}},DiffEqNoiseProcess.RSWM{:RSwM3,Float64}},Float64,DiffEqBase.RODESolution{Float64,1,Array{Float64,1},Array{Float64,1},Dict{Symbol,Float64},Array{Float64,1},DiffEqNoiseProcess.NoiseProcess{Float64,1,Float64,Float64,Void,Void,DiffEqNoiseProcess.#WHITE_NOISE_DIST,DiffEqNoiseProcess.#WHITE_NOISE_BRIDGE,false,DataStructures.Stack{Tuple{Float64,Float64,Void}},ResettableStacks.ResettableStack{Tuple{Float64,Float64,Void}},DiffEqNoiseProcess.RSWM{:RSwM3,Float64}},DiffEqBase.SplitSDEProblem{Float64,Float64,false,Void,Tuple{##47#48,##51#52},##53#54,Void,UniformScaling{Int64},Void},StochasticDiffEq.IIF1M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}},StochasticDiffEq.LinearInterpolationData{Array{Float64,1},Array{Float64,1}}},StochasticDiffEq.IIF1MConstantCache{Array{Float64,1},StochasticDiffEq.RHS_IIF1M_Scalar{Tuple{##47#48,##51#52},Float64,Float64},NLsolve.DifferentiableMultivariateFunction},Void,Tuple{##47#48,##51#52},##53#54,StochasticDiffEq.SDEOptions{Float64,Float64,Float64,Float64,DiffEqBase.#ODE_DEFAULT_NORM,DiffEqBase.CallbackSet{Tuple{},Tuple{}},DiffEqBase.#ODE_DEFAULT_ISOUTOFDOMAIN,DiffEqBase.#ODE_DEFAULT_PROG_MESSAGE,DiffEqBase.#ODE_DEFAULT_UNSTABLE_CHECK,DataStructures.BinaryHeap{Float64,DataStructures.LessThan},Void,Void},Void}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/solve.jl:354
 [9] #solve#46(::Array{Any,1}, ::Function, ::DiffEqBase.SplitSDEProblem{Float64,Float64,false,Void,Tuple{##47#48,##51#52},##53#54,Void,UniformScaling{Int64},Void}, ::StochasticDiffEq.IIF1M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/solve.jl:8
 [10] (::DiffEqBase.#kw##solve)(::Array{Any,1}, ::DiffEqBase.#solve, ::DiffEqBase.SplitSDEProblem{Float64,Float64,false,Void,Tuple{##47#48,##51#52},##53#54,Void,UniformScaling{Int64},Void}, ::StochasticDiffEq.IIF1M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at ./<missing>:0 (repeats 2 times)
 [11] include_from_node1(::String) at ./loading.jl:569
 [12] include(::String) at ./sysimg.jl:14
 [13] macro expansion at /home/vagrant/.julia/v0.6/StochasticDiffEq/test/runtests.jl:17 [inlined]
 [14] macro expansion at ./test.jl:856 [inlined]
 [15] macro expansion at ./util.jl:237 [inlined]
 [16] anonymous at ./<missing>:?
 [17] include_from_node1(::String) at ./loading.jl:569
 [18] include(::String) at ./sysimg.jl:14
 [19] process_options(::Base.JLOptions) at ./client.jl:305
 [20] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/StochasticDiffEq/test/iif_methods.jl, in expression starting on line 17
WARNING: !(B::BitArray) is deprecated, use .!(B) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] !(::BitArray{1}) at ./deprecated.jl:51
 [3] check_isfinite(::Array{Float64,1}) at /home/vagrant/.julia/v0.6/NLsolve/src/utils.jl:32
 [4] trust_region_(::NLsolve.DifferentiableMultivariateFunction, ::Array{Float64,1}, ::Float64, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::Float64, ::Bool) at /home/vagrant/.julia/v0.6/NLsolve/src/trust_region.jl:91
 [5] #nlsolve#17(::Symbol, ::Float64, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::Function, ::Float64, ::Bool, ::NLsolve.#nlsolve, ::NLsolve.DifferentiableMultivariateFunction, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/NLsolve/src/nlsolve_func_defs.jl:24
 [6] NLSOLVEJL_SETUP at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/misc_utils.jl:51 [inlined]
 [7] perform_step! at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/integrators/iif.jl:46 [inlined]
 [8] perform_step! at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/integrators/iif.jl:28 [inlined]
 [9] solve!(::StochasticDiffEq.SDEIntegrator{StochasticDiffEq.IIF1M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}},Float64,Float64,Float64,Float64,Float64,DiffEqNoiseProcess.NoiseProcess{Float64,1,Float64,Float64,Void,Void,DiffEqNoiseProcess.#WHITE_NOISE_DIST,DiffEqNoiseProcess.#WHITE_NOISE_BRIDGE,false,DataStructures.Stack{Tuple{Float64,Float64,Void}},ResettableStacks.ResettableStack{Tuple{Float64,Float64,Void}},DiffEqNoiseProcess.RSWM{:RSwM3,Float64}},Float64,DiffEqBase.RODESolution{Float64,1,Array{Float64,1},Array{Float64,1},Dict{Symbol,Float64},Array{Float64,1},DiffEqNoiseProcess.NoiseProcess{Float64,1,Float64,Float64,Void,Void,DiffEqNoiseProcess.#WHITE_NOISE_DIST,DiffEqNoiseProcess.#WHITE_NOISE_BRIDGE,false,DataStructures.Stack{Tuple{Float64,Float64,Void}},ResettableStacks.ResettableStack{Tuple{Float64,Float64,Void}},DiffEqNoiseProcess.RSWM{:RSwM3,Float64}},DiffEqBase.SplitSDEProblem{Float64,Float64,false,Void,Tuple{##47#48,##51#52},##53#54,Void,UniformScaling{Int64},Void},StochasticDiffEq.IIF1M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}},StochasticDiffEq.LinearInterpolationData{Array{Float64,1},Array{Float64,1}}},StochasticDiffEq.IIF1MConstantCache{Array{Float64,1},StochasticDiffEq.RHS_IIF1M_Scalar{Tuple{##47#48,##51#52},Float64,Float64},NLsolve.DifferentiableMultivariateFunction},Void,Tuple{##47#48,##51#52},##53#54,StochasticDiffEq.SDEOptions{Float64,Float64,Float64,Float64,DiffEqBase.#ODE_DEFAULT_NORM,DiffEqBase.CallbackSet{Tuple{},Tuple{}},DiffEqBase.#ODE_DEFAULT_ISOUTOFDOMAIN,DiffEqBase.#ODE_DEFAULT_PROG_MESSAGE,DiffEqBase.#ODE_DEFAULT_UNSTABLE_CHECK,DataStructures.BinaryHeap{Float64,DataStructures.LessThan},Void,Void},Void}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/solve.jl:354
 [10] #solve#46(::Array{Any,1}, ::Function, ::DiffEqBase.SplitSDEProblem{Float64,Float64,false,Void,Tuple{##47#48,##51#52},##53#54,Void,UniformScaling{Int64},Void}, ::StochasticDiffEq.IIF1M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/solve.jl:8
 [11] (::DiffEqBase.#kw##solve)(::Array{Any,1}, ::DiffEqBase.#solve, ::DiffEqBase.SplitSDEProblem{Float64,Float64,false,Void,Tuple{##47#48,##51#52},##53#54,Void,UniformScaling{Int64},Void}, ::StochasticDiffEq.IIF1M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at ./<missing>:0 (repeats 2 times)
 [12] include_from_node1(::String) at ./loading.jl:569
 [13] include(::String) at ./sysimg.jl:14
 [14] macro expansion at /home/vagrant/.julia/v0.6/StochasticDiffEq/test/runtests.jl:17 [inlined]
 [15] macro expansion at ./test.jl:856 [inlined]
 [16] macro expansion at ./util.jl:237 [inlined]
 [17] anonymous at ./<missing>:?
 [18] include_from_node1(::String) at ./loading.jl:569
 [19] include(::String) at ./sysimg.jl:14
 [20] process_options(::Base.JLOptions) at ./client.jl:305
 [21] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/StochasticDiffEq/test/iif_methods.jl, in expression starting on line 17
WARNING: Array{T}(::Type{T}, m::Int) is deprecated, use Array{T}(m) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] Array(::Type{NLsolve.SolverState}, ::Int64) at ./deprecated.jl:51
 [3] Type at /home/vagrant/.julia/v0.6/NLsolve/src/solver_state_results.jl:20 [inlined]
 [4] trust_region_(::NLsolve.DifferentiableMultivariateFunction, ::Array{Float64,1}, ::Float64, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::Float64, ::Bool) at /home/vagrant/.julia/v0.6/NLsolve/src/trust_region.jl:99
 [5] #nlsolve#17(::Symbol, ::Float64, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::Function, ::Float64, ::Bool, ::NLsolve.#nlsolve, ::NLsolve.DifferentiableMultivariateFunction, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/NLsolve/src/nlsolve_func_defs.jl:24
 [6] NLSOLVEJL_SETUP at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/misc_utils.jl:51 [inlined]
 [7] perform_step! at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/integrators/iif.jl:46 [inlined]
 [8] perform_step! at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/integrators/iif.jl:28 [inlined]
 [9] solve!(::StochasticDiffEq.SDEIntegrator{StochasticDiffEq.IIF1M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}},Float64,Float64,Float64,Float64,Float64,DiffEqNoiseProcess.NoiseProcess{Float64,1,Float64,Float64,Void,Void,DiffEqNoiseProcess.#WHITE_NOISE_DIST,DiffEqNoiseProcess.#WHITE_NOISE_BRIDGE,false,DataStructures.Stack{Tuple{Float64,Float64,Void}},ResettableStacks.ResettableStack{Tuple{Float64,Float64,Void}},DiffEqNoiseProcess.RSWM{:RSwM3,Float64}},Float64,DiffEqBase.RODESolution{Float64,1,Array{Float64,1},Array{Float64,1},Dict{Symbol,Float64},Array{Float64,1},DiffEqNoiseProcess.NoiseProcess{Float64,1,Float64,Float64,Void,Void,DiffEqNoiseProcess.#WHITE_NOISE_DIST,DiffEqNoiseProcess.#WHITE_NOISE_BRIDGE,false,DataStructures.Stack{Tuple{Float64,Float64,Void}},ResettableStacks.ResettableStack{Tuple{Float64,Float64,Void}},DiffEqNoiseProcess.RSWM{:RSwM3,Float64}},DiffEqBase.SplitSDEProblem{Float64,Float64,false,Void,Tuple{##47#48,##51#52},##53#54,Void,UniformScaling{Int64},Void},StochasticDiffEq.IIF1M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}},StochasticDiffEq.LinearInterpolationData{Array{Float64,1},Array{Float64,1}}},StochasticDiffEq.IIF1MConstantCache{Array{Float64,1},StochasticDiffEq.RHS_IIF1M_Scalar{Tuple{##47#48,##51#52},Float64,Float64},NLsolve.DifferentiableMultivariateFunction},Void,Tuple{##47#48,##51#52},##53#54,StochasticDiffEq.SDEOptions{Float64,Float64,Float64,Float64,DiffEqBase.#ODE_DEFAULT_NORM,DiffEqBase.CallbackSet{Tuple{},Tuple{}},DiffEqBase.#ODE_DEFAULT_ISOUTOFDOMAIN,DiffEqBase.#ODE_DEFAULT_PROG_MESSAGE,DiffEqBase.#ODE_DEFAULT_UNSTABLE_CHECK,DataStructures.BinaryHeap{Float64,DataStructures.LessThan},Void,Void},Void}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/solve.jl:354
 [10] #solve#46(::Array{Any,1}, ::Function, ::DiffEqBase.SplitSDEProblem{Float64,Float64,false,Void,Tuple{##47#48,##51#52},##53#54,Void,UniformScaling{Int64},Void}, ::StochasticDiffEq.IIF1M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/solve.jl:8
 [11] (::DiffEqBase.#kw##solve)(::Array{Any,1}, ::DiffEqBase.#solve, ::DiffEqBase.SplitSDEProblem{Float64,Float64,false,Void,Tuple{##47#48,##51#52},##53#54,Void,UniformScaling{Int64},Void}, ::StochasticDiffEq.IIF1M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at ./<missing>:0 (repeats 2 times)
 [12] include_from_node1(::String) at ./loading.jl:569
 [13] include(::String) at ./sysimg.jl:14
 [14] macro expansion at /home/vagrant/.julia/v0.6/StochasticDiffEq/test/runtests.jl:17 [inlined]
 [15] macro expansion at ./test.jl:856 [inlined]
 [16] macro expansion at ./util.jl:237 [inlined]
 [17] anonymous at ./<missing>:?
 [18] include_from_node1(::String) at ./loading.jl:569
 [19] include(::String) at ./sysimg.jl:14
 [20] process_options(::Base.JLOptions) at ./client.jl:305
 [21] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/StochasticDiffEq/test/iif_methods.jl, in expression starting on line 17
IIF scalar
WARNING: Array{T}(::Type{T}, m::Int, n::Int) is deprecated, use Array{T}(m, n) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] Array(::Type{Float64}, ::Int64, ::Int64) at ./deprecated.jl:51
 [3] trust_region_(::NLsolve.DifferentiableMultivariateFunction, ::Array{Float64,1}, ::Float64, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::Float64, ::Bool) at /home/vagrant/.julia/v0.6/NLsolve/src/trust_region.jl:82
 [4] #nlsolve#17(::Symbol, ::Float64, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::Function, ::Float64, ::Bool, ::NLsolve.#nlsolve, ::NLsolve.DifferentiableMultivariateFunction, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/NLsolve/src/nlsolve_func_defs.jl:24
 [5] NLSOLVEJL_SETUP at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/misc_utils.jl:51 [inlined]
 [6] perform_step! at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/integrators/iif.jl:46 [inlined]
 [7] perform_step! at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/integrators/iif.jl:28 [inlined]
 [8] solve!(::StochasticDiffEq.SDEIntegrator{StochasticDiffEq.IIF1M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}},Float64,Float64,Float64,Float64,Float64,DiffEqNoiseProcess.NoiseProcess{Float64,1,Float64,Float64,Void,Void,DiffEqNoiseProcess.#WHITE_NOISE_DIST,DiffEqNoiseProcess.#WHITE_NOISE_BRIDGE,false,DataStructures.Stack{Tuple{Float64,Float64,Void}},ResettableStacks.ResettableStack{Tuple{Float64,Float64,Void}},DiffEqNoiseProcess.RSWM{:RSwM3,Float64}},Float64,DiffEqBase.RODESolution{Float64,1,Array{Float64,1},Array{Float64,1},Dict{Symbol,Float64},Array{Float64,1},DiffEqNoiseProcess.NoiseProcess{Float64,1,Float64,Float64,Void,Void,DiffEqNoiseProcess.#WHITE_NOISE_DIST,DiffEqNoiseProcess.#WHITE_NOISE_BRIDGE,false,DataStructures.Stack{Tuple{Float64,Float64,Void}},ResettableStacks.ResettableStack{Tuple{Float64,Float64,Void}},DiffEqNoiseProcess.RSWM{:RSwM3,Float64}},DiffEqBase.SplitSDEProblem{Float64,Float64,false,Void,Tuple{##47#48,##51#52},##53#54,Void,UniformScaling{Int64},Void},StochasticDiffEq.IIF1M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}},StochasticDiffEq.LinearInterpolationData{Array{Float64,1},Array{Float64,1}}},StochasticDiffEq.IIF1MConstantCache{Array{Float64,1},StochasticDiffEq.RHS_IIF1M_Scalar{Tuple{##47#48,##51#52},Float64,Float64},NLsolve.DifferentiableMultivariateFunction},Void,Tuple{##47#48,##51#52},##53#54,StochasticDiffEq.SDEOptions{Float64,Float64,Float64,Float64,DiffEqBase.#ODE_DEFAULT_NORM,DiffEqBase.CallbackSet{Tuple{},Tuple{}},DiffEqBase.#ODE_DEFAULT_ISOUTOFDOMAIN,DiffEqBase.#ODE_DEFAULT_PROG_MESSAGE,DiffEqBase.#ODE_DEFAULT_UNSTABLE_CHECK,DataStructures.BinaryHeap{Float64,DataStructures.LessThan},Void,Void},Void}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/solve.jl:354
 [9] #solve#46(::Array{Any,1}, ::Function, ::DiffEqBase.SplitSDEProblem{Float64,Float64,false,Void,Tuple{##47#48,##51#52},##53#54,Void,UniformScaling{Int64},Void}, ::StochasticDiffEq.IIF1M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/solve.jl:8
 [10] (::DiffEqBase.#kw##solve)(::Array{Any,1}, ::DiffEqBase.#solve, ::DiffEqBase.SplitSDEProblem{Float64,Float64,false,Void,Tuple{##47#48,##51#52},##53#54,Void,UniformScaling{Int64},Void}, ::StochasticDiffEq.IIF1M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at ./<missing>:0
 [11] (::DiffEqDevTools.##17#26{Bool,Int64,Bool,Bool,Array{Any,1},Array{Float64,1},DiffEqBase.SplitSDEProblem{Float64,Float64,false,Void,Tuple{##47#48,##51#52},##53#54,Void,UniformScaling{Int64},Void},StochasticDiffEq.IIF1M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}}})(::Int64) at /home/vagrant/.julia/v0.6/DiffEqDevTools/src/convergence.jl:36
 [12] (::Base.##558#563{DiffEqDevTools.##17#26{Bool,Int64,Bool,Bool,Array{Any,1},Array{Float64,1},DiffEqBase.SplitSDEProblem{Float64,Float64,false,Void,Tuple{##47#48,##51#52},##53#54,Void,UniformScaling{Int64},Void},StochasticDiffEq.IIF1M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}}}})(::Base.RefValue{Any}, ::Tuple{Int64}) at ./asyncmap.jl:100
 [13] macro expansion at ./asyncmap.jl:235 [inlined]
 [14] (::Base.##574#575{Base.##558#563{DiffEqDevTools.##17#26{Bool,Int64,Bool,Bool,Array{Any,1},Array{Float64,1},DiffEqBase.SplitSDEProblem{Float64,Float64,false,Void,Tuple{##47#48,##51#52},##53#54,Void,UniformScaling{Int64},Void},StochasticDiffEq.IIF1M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}}}},Channel{Any},Void})() at ./event.jl:73
while loading /home/vagrant/.julia/v0.6/StochasticDiffEq/test/iif_methods.jl, in expression starting on line 26
WARNING: !(B::BitArray) is deprecated, use .!(B) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] !(::BitArray{1}) at ./deprecated.jl:51
 [3] check_isfinite(::Array{Float64,1}) at /home/vagrant/.julia/v0.6/NLsolve/src/utils.jl:32
 [4] trust_region_(::NLsolve.DifferentiableMultivariateFunction, ::Array{Float64,1}, ::Float64, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::Float64, ::Bool) at /home/vagrant/.julia/v0.6/NLsolve/src/trust_region.jl:91
 [5] #nlsolve#17(::Symbol, ::Float64, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::Function, ::Float64, ::Bool, ::NLsolve.#nlsolve, ::NLsolve.DifferentiableMultivariateFunction, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/NLsolve/src/nlsolve_func_defs.jl:24
 [6] NLSOLVEJL_SETUP at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/misc_utils.jl:51 [inlined]
 [7] perform_step! at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/integrators/iif.jl:46 [inlined]
 [8] perform_step! at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/integrators/iif.jl:28 [inlined]
 [9] solve!(::StochasticDiffEq.SDEIntegrator{StochasticDiffEq.IIF1M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}},Float64,Float64,Float64,Float64,Float64,DiffEqNoiseProcess.NoiseProcess{Float64,1,Float64,Float64,Void,Void,DiffEqNoiseProcess.#WHITE_NOISE_DIST,DiffEqNoiseProcess.#WHITE_NOISE_BRIDGE,false,DataStructures.Stack{Tuple{Float64,Float64,Void}},ResettableStacks.ResettableStack{Tuple{Float64,Float64,Void}},DiffEqNoiseProcess.RSWM{:RSwM3,Float64}},Float64,DiffEqBase.RODESolution{Float64,1,Array{Float64,1},Array{Float64,1},Dict{Symbol,Float64},Array{Float64,1},DiffEqNoiseProcess.NoiseProcess{Float64,1,Float64,Float64,Void,Void,DiffEqNoiseProcess.#WHITE_NOISE_DIST,DiffEqNoiseProcess.#WHITE_NOISE_BRIDGE,false,DataStructures.Stack{Tuple{Float64,Float64,Void}},ResettableStacks.ResettableStack{Tuple{Float64,Float64,Void}},DiffEqNoiseProcess.RSWM{:RSwM3,Float64}},DiffEqBase.SplitSDEProblem{Float64,Float64,false,Void,Tuple{##47#48,##51#52},##53#54,Void,UniformScaling{Int64},Void},StochasticDiffEq.IIF1M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}},StochasticDiffEq.LinearInterpolationData{Array{Float64,1},Array{Float64,1}}},StochasticDiffEq.IIF1MConstantCache{Array{Float64,1},StochasticDiffEq.RHS_IIF1M_Scalar{Tuple{##47#48,##51#52},Float64,Float64},NLsolve.DifferentiableMultivariateFunction},Void,Tuple{##47#48,##51#52},##53#54,StochasticDiffEq.SDEOptions{Float64,Float64,Float64,Float64,DiffEqBase.#ODE_DEFAULT_NORM,DiffEqBase.CallbackSet{Tuple{},Tuple{}},DiffEqBase.#ODE_DEFAULT_ISOUTOFDOMAIN,DiffEqBase.#ODE_DEFAULT_PROG_MESSAGE,DiffEqBase.#ODE_DEFAULT_UNSTABLE_CHECK,DataStructures.BinaryHeap{Float64,DataStructures.LessThan},Void,Void},Void}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/solve.jl:354
 [10] #solve#46(::Array{Any,1}, ::Function, ::DiffEqBase.SplitSDEProblem{Float64,Float64,false,Void,Tuple{##47#48,##51#52},##53#54,Void,UniformScaling{Int64},Void}, ::StochasticDiffEq.IIF1M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/solve.jl:8
 [11] (::DiffEqBase.#kw##solve)(::Array{Any,1}, ::DiffEqBase.#solve, ::DiffEqBase.SplitSDEProblem{Float64,Float64,false,Void,Tuple{##47#48,##51#52},##53#54,Void,UniformScaling{Int64},Void}, ::StochasticDiffEq.IIF1M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at ./<missing>:0
 [12] (::DiffEqDevTools.##17#26{Bool,Int64,Bool,Bool,Array{Any,1},Array{Float64,1},DiffEqBase.SplitSDEProblem{Float64,Float64,false,Void,Tuple{##47#48,##51#52},##53#54,Void,UniformScaling{Int64},Void},StochasticDiffEq.IIF1M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}}})(::Int64) at /home/vagrant/.julia/v0.6/DiffEqDevTools/src/convergence.jl:36
 [13] (::Base.##558#563{DiffEqDevTools.##17#26{Bool,Int64,Bool,Bool,Array{Any,1},Array{Float64,1},DiffEqBase.SplitSDEProblem{Float64,Float64,false,Void,Tuple{##47#48,##51#52},##53#54,Void,UniformScaling{Int64},Void},StochasticDiffEq.IIF1M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}}}})(::Base.RefValue{Any}, ::Tuple{Int64}) at ./asyncmap.jl:100
 [14] macro expansion at ./asyncmap.jl:235 [inlined]
 [15] (::Base.##574#575{Base.##558#563{DiffEqDevTools.##17#26{Bool,Int64,Bool,Bool,Array{Any,1},Array{Float64,1},DiffEqBase.SplitSDEProblem{Float64,Float64,false,Void,Tuple{##47#48,##51#52},##53#54,Void,UniformScaling{Int64},Void},StochasticDiffEq.IIF1M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}}}},Channel{Any},Void})() at ./event.jl:73
while loading /home/vagrant/.julia/v0.6/StochasticDiffEq/test/iif_methods.jl, in expression starting on line 26
WARNING: Array{T}(::Type{T}, m::Int) is deprecated, use Array{T}(m) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] Array(::Type{NLsolve.SolverState}, ::Int64) at ./deprecated.jl:51
 [3] Type at /home/vagrant/.julia/v0.6/NLsolve/src/solver_state_results.jl:20 [inlined]
 [4] trust_region_(::NLsolve.DifferentiableMultivariateFunction, ::Array{Float64,1}, ::Float64, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::Float64, ::Bool) at /home/vagrant/.julia/v0.6/NLsolve/src/trust_region.jl:99
 [5] #nlsolve#17(::Symbol, ::Float64, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::Function, ::Float64, ::Bool, ::NLsolve.#nlsolve, ::NLsolve.DifferentiableMultivariateFunction, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/NLsolve/src/nlsolve_func_defs.jl:24
 [6] NLSOLVEJL_SETUP at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/misc_utils.jl:51 [inlined]
 [7] perform_step! at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/integrators/iif.jl:46 [inlined]
 [8] perform_step! at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/integrators/iif.jl:28 [inlined]
 [9] solve!(::StochasticDiffEq.SDEIntegrator{StochasticDiffEq.IIF1M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}},Float64,Float64,Float64,Float64,Float64,DiffEqNoiseProcess.NoiseProcess{Float64,1,Float64,Float64,Void,Void,DiffEqNoiseProcess.#WHITE_NOISE_DIST,DiffEqNoiseProcess.#WHITE_NOISE_BRIDGE,false,DataStructures.Stack{Tuple{Float64,Float64,Void}},ResettableStacks.ResettableStack{Tuple{Float64,Float64,Void}},DiffEqNoiseProcess.RSWM{:RSwM3,Float64}},Float64,DiffEqBase.RODESolution{Float64,1,Array{Float64,1},Array{Float64,1},Dict{Symbol,Float64},Array{Float64,1},DiffEqNoiseProcess.NoiseProcess{Float64,1,Float64,Float64,Void,Void,DiffEqNoiseProcess.#WHITE_NOISE_DIST,DiffEqNoiseProcess.#WHITE_NOISE_BRIDGE,false,DataStructures.Stack{Tuple{Float64,Float64,Void}},ResettableStacks.ResettableStack{Tuple{Float64,Float64,Void}},DiffEqNoiseProcess.RSWM{:RSwM3,Float64}},DiffEqBase.SplitSDEProblem{Float64,Float64,false,Void,Tuple{##47#48,##51#52},##53#54,Void,UniformScaling{Int64},Void},StochasticDiffEq.IIF1M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}},StochasticDiffEq.LinearInterpolationData{Array{Float64,1},Array{Float64,1}}},StochasticDiffEq.IIF1MConstantCache{Array{Float64,1},StochasticDiffEq.RHS_IIF1M_Scalar{Tuple{##47#48,##51#52},Float64,Float64},NLsolve.DifferentiableMultivariateFunction},Void,Tuple{##47#48,##51#52},##53#54,StochasticDiffEq.SDEOptions{Float64,Float64,Float64,Float64,DiffEqBase.#ODE_DEFAULT_NORM,DiffEqBase.CallbackSet{Tuple{},Tuple{}},DiffEqBase.#ODE_DEFAULT_ISOUTOFDOMAIN,DiffEqBase.#ODE_DEFAULT_PROG_MESSAGE,DiffEqBase.#ODE_DEFAULT_UNSTABLE_CHECK,DataStructures.BinaryHeap{Float64,DataStructures.LessThan},Void,Void},Void}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/solve.jl:354
 [10] #solve#46(::Array{Any,1}, ::Function, ::DiffEqBase.SplitSDEProblem{Float64,Float64,false,Void,Tuple{##47#48,##51#52},##53#54,Void,UniformScaling{Int64},Void}, ::StochasticDiffEq.IIF1M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/solve.jl:8
 [11] (::DiffEqBase.#kw##solve)(::Array{Any,1}, ::DiffEqBase.#solve, ::DiffEqBase.SplitSDEProblem{Float64,Float64,false,Void,Tuple{##47#48,##51#52},##53#54,Void,UniformScaling{Int64},Void}, ::StochasticDiffEq.IIF1M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at ./<missing>:0
 [12] (::DiffEqDevTools.##17#26{Bool,Int64,Bool,Bool,Array{Any,1},Array{Float64,1},DiffEqBase.SplitSDEProblem{Float64,Float64,false,Void,Tuple{##47#48,##51#52},##53#54,Void,UniformScaling{Int64},Void},StochasticDiffEq.IIF1M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}}})(::Int64) at /home/vagrant/.julia/v0.6/DiffEqDevTools/src/convergence.jl:36
 [13] (::Base.##558#563{DiffEqDevTools.##17#26{Bool,Int64,Bool,Bool,Array{Any,1},Array{Float64,1},DiffEqBase.SplitSDEProblem{Float64,Float64,false,Void,Tuple{##47#48,##51#52},##53#54,Void,UniformScaling{Int64},Void},StochasticDiffEq.IIF1M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}}}})(::Base.RefValue{Any}, ::Tuple{Int64}) at ./asyncmap.jl:100
 [14] macro expansion at ./asyncmap.jl:235 [inlined]
 [15] (::Base.##574#575{Base.##558#563{DiffEqDevTools.##17#26{Bool,Int64,Bool,Bool,Array{Any,1},Array{Float64,1},DiffEqBase.SplitSDEProblem{Float64,Float64,false,Void,Tuple{##47#48,##51#52},##53#54,Void,UniformScaling{Int64},Void},StochasticDiffEq.IIF1M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}}}},Channel{Any},Void})() at ./event.jl:73
while loading /home/vagrant/.julia/v0.6/StochasticDiffEq/test/iif_methods.jl, in expression starting on line 26
WARNING: Array{T}(::Type{T}, m::Int, n::Int) is deprecated, use Array{T}(m, n) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] Array(::Type{Float64}, ::Int64, ::Int64) at ./deprecated.jl:51
 [3] trust_region_(::NLsolve.DifferentiableMultivariateFunction, ::Array{Float64,1}, ::Float64, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::Float64, ::Bool) at /home/vagrant/.julia/v0.6/NLsolve/src/trust_region.jl:82
 [4] #nlsolve#17(::Symbol, ::Float64, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::Function, ::Float64, ::Bool, ::NLsolve.#nlsolve, ::NLsolve.DifferentiableMultivariateFunction, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/NLsolve/src/nlsolve_func_defs.jl:24
 [5] NLSOLVEJL_SETUP at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/misc_utils.jl:51 [inlined]
 [6] perform_step! at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/integrators/iif.jl:46 [inlined]
 [7] perform_step! at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/integrators/iif.jl:28 [inlined]
 [8] solve!(::StochasticDiffEq.SDEIntegrator{StochasticDiffEq.IIF1M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}},Float64,Float64,Float64,Float64,Float64,DiffEqNoiseProcess.NoiseProcess{Float64,1,Float64,Float64,Void,Void,DiffEqNoiseProcess.#WHITE_NOISE_DIST,DiffEqNoiseProcess.#WHITE_NOISE_BRIDGE,false,DataStructures.Stack{Tuple{Float64,Float64,Void}},ResettableStacks.ResettableStack{Tuple{Float64,Float64,Void}},DiffEqNoiseProcess.RSWM{:RSwM3,Float64}},Float64,DiffEqBase.RODESolution{Float64,1,Array{Float64,1},Array{Float64,1},Dict{Symbol,Float64},Array{Float64,1},DiffEqNoiseProcess.NoiseProcess{Float64,1,Float64,Float64,Void,Void,DiffEqNoiseProcess.#WHITE_NOISE_DIST,DiffEqNoiseProcess.#WHITE_NOISE_BRIDGE,false,DataStructures.Stack{Tuple{Float64,Float64,Void}},ResettableStacks.ResettableStack{Tuple{Float64,Float64,Void}},DiffEqNoiseProcess.RSWM{:RSwM3,Float64}},DiffEqBase.SplitSDEProblem{Float64,Float64,false,Void,Tuple{##57#58,##51#52},##55#56,Void,UniformScaling{Int64},Void},StochasticDiffEq.IIF1M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}},StochasticDiffEq.LinearInterpolationData{Array{Float64,1},Array{Float64,1}}},StochasticDiffEq.IIF1MConstantCache{Array{Float64,1},StochasticDiffEq.RHS_IIF1M_Scalar{Tuple{##57#58,##51#52},Float64,Float64},NLsolve.DifferentiableMultivariateFunction},Void,Tuple{##57#58,##51#52},##55#56,StochasticDiffEq.SDEOptions{Float64,Float64,Float64,Float64,DiffEqBase.#ODE_DEFAULT_NORM,DiffEqBase.CallbackSet{Tuple{},Tuple{}},DiffEqBase.#ODE_DEFAULT_ISOUTOFDOMAIN,DiffEqBase.#ODE_DEFAULT_PROG_MESSAGE,DiffEqBase.#ODE_DEFAULT_UNSTABLE_CHECK,DataStructures.BinaryHeap{Float64,DataStructures.LessThan},Void,Void},Void}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/solve.jl:354
 [9] #solve#46(::Array{Any,1}, ::Function, ::DiffEqBase.SplitSDEProblem{Float64,Float64,false,Void,Tuple{##57#58,##51#52},##55#56,Void,UniformScaling{Int64},Void}, ::StochasticDiffEq.IIF1M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/solve.jl:8
 [10] (::DiffEqBase.#kw##solve)(::Array{Any,1}, ::DiffEqBase.#solve, ::DiffEqBase.SplitSDEProblem{Float64,Float64,false,Void,Tuple{##57#58,##51#52},##55#56,Void,UniformScaling{Int64},Void}, ::StochasticDiffEq.IIF1M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at ./<missing>:0
 [11] (::DiffEqDevTools.##17#26{Bool,Int64,Bool,Bool,Array{Any,1},Array{Float64,1},DiffEqBase.SplitSDEProblem{Float64,Float64,false,Void,Tuple{##57#58,##51#52},##55#56,Void,UniformScaling{Int64},Void},StochasticDiffEq.IIF1M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}}})(::Int64) at /home/vagrant/.julia/v0.6/DiffEqDevTools/src/convergence.jl:36
 [12] (::Base.##558#563{DiffEqDevTools.##17#26{Bool,Int64,Bool,Bool,Array{Any,1},Array{Float64,1},DiffEqBase.SplitSDEProblem{Float64,Float64,false,Void,Tuple{##57#58,##51#52},##55#56,Void,UniformScaling{Int64},Void},StochasticDiffEq.IIF1M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}}}})(::Base.RefValue{Any}, ::Tuple{Int64}) at ./asyncmap.jl:100
 [13] macro expansion at ./asyncmap.jl:235 [inlined]
 [14] (::Base.##574#575{Base.##558#563{DiffEqDevTools.##17#26{Bool,Int64,Bool,Bool,Array{Any,1},Array{Float64,1},DiffEqBase.SplitSDEProblem{Float64,Float64,false,Void,Tuple{##57#58,##51#52},##55#56,Void,UniformScaling{Int64},Void},StochasticDiffEq.IIF1M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}}}},Channel{Any},Void})() at ./event.jl:73
while loading /home/vagrant/.julia/v0.6/StochasticDiffEq/test/iif_methods.jl, in expression starting on line 28
WARNING: !(B::BitArray) is deprecated, use .!(B) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] !(::BitArray{1}) at ./deprecated.jl:51
 [3] check_isfinite(::Array{Float64,1}) at /home/vagrant/.julia/v0.6/NLsolve/src/utils.jl:32
 [4] trust_region_(::NLsolve.DifferentiableMultivariateFunction, ::Array{Float64,1}, ::Float64, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::Float64, ::Bool) at /home/vagrant/.julia/v0.6/NLsolve/src/trust_region.jl:91
 [5] #nlsolve#17(::Symbol, ::Float64, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::Function, ::Float64, ::Bool, ::NLsolve.#nlsolve, ::NLsolve.DifferentiableMultivariateFunction, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/NLsolve/src/nlsolve_func_defs.jl:24
 [6] NLSOLVEJL_SETUP at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/misc_utils.jl:51 [inlined]
 [7] perform_step! at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/integrators/iif.jl:46 [inlined]
 [8] perform_step! at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/integrators/iif.jl:28 [inlined]
 [9] solve!(::StochasticDiffEq.SDEIntegrator{StochasticDiffEq.IIF1M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}},Float64,Float64,Float64,Float64,Float64,DiffEqNoiseProcess.NoiseProcess{Float64,1,Float64,Float64,Void,Void,DiffEqNoiseProcess.#WHITE_NOISE_DIST,DiffEqNoiseProcess.#WHITE_NOISE_BRIDGE,false,DataStructures.Stack{Tuple{Float64,Float64,Void}},ResettableStacks.ResettableStack{Tuple{Float64,Float64,Void}},DiffEqNoiseProcess.RSWM{:RSwM3,Float64}},Float64,DiffEqBase.RODESolution{Float64,1,Array{Float64,1},Array{Float64,1},Dict{Symbol,Float64},Array{Float64,1},DiffEqNoiseProcess.NoiseProcess{Float64,1,Float64,Float64,Void,Void,DiffEqNoiseProcess.#WHITE_NOISE_DIST,DiffEqNoiseProcess.#WHITE_NOISE_BRIDGE,false,DataStructures.Stack{Tuple{Float64,Float64,Void}},ResettableStacks.ResettableStack{Tuple{Float64,Float64,Void}},DiffEqNoiseProcess.RSWM{:RSwM3,Float64}},DiffEqBase.SplitSDEProblem{Float64,Float64,false,Void,Tuple{##57#58,##51#52},##55#56,Void,UniformScaling{Int64},Void},StochasticDiffEq.IIF1M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}},StochasticDiffEq.LinearInterpolationData{Array{Float64,1},Array{Float64,1}}},StochasticDiffEq.IIF1MConstantCache{Array{Float64,1},StochasticDiffEq.RHS_IIF1M_Scalar{Tuple{##57#58,##51#52},Float64,Float64},NLsolve.DifferentiableMultivariateFunction},Void,Tuple{##57#58,##51#52},##55#56,StochasticDiffEq.SDEOptions{Float64,Float64,Float64,Float64,DiffEqBase.#ODE_DEFAULT_NORM,DiffEqBase.CallbackSet{Tuple{},Tuple{}},DiffEqBase.#ODE_DEFAULT_ISOUTOFDOMAIN,DiffEqBase.#ODE_DEFAULT_PROG_MESSAGE,DiffEqBase.#ODE_DEFAULT_UNSTABLE_CHECK,DataStructures.BinaryHeap{Float64,DataStructures.LessThan},Void,Void},Void}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/solve.jl:354
 [10] #solve#46(::Array{Any,1}, ::Function, ::DiffEqBase.SplitSDEProblem{Float64,Float64,false,Void,Tuple{##57#58,##51#52},##55#56,Void,UniformScaling{Int64},Void}, ::StochasticDiffEq.IIF1M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/solve.jl:8
 [11] (::DiffEqBase.#kw##solve)(::Array{Any,1}, ::DiffEqBase.#solve, ::DiffEqBase.SplitSDEProblem{Float64,Float64,false,Void,Tuple{##57#58,##51#52},##55#56,Void,UniformScaling{Int64},Void}, ::StochasticDiffEq.IIF1M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at ./<missing>:0
 [12] (::DiffEqDevTools.##17#26{Bool,Int64,Bool,Bool,Array{Any,1},Array{Float64,1},DiffEqBase.SplitSDEProblem{Float64,Float64,false,Void,Tuple{##57#58,##51#52},##55#56,Void,UniformScaling{Int64},Void},StochasticDiffEq.IIF1M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}}})(::Int64) at /home/vagrant/.julia/v0.6/DiffEqDevTools/src/convergence.jl:36
 [13] (::Base.##558#563{DiffEqDevTools.##17#26{Bool,Int64,Bool,Bool,Array{Any,1},Array{Float64,1},DiffEqBase.SplitSDEProblem{Float64,Float64,false,Void,Tuple{##57#58,##51#52},##55#56,Void,UniformScaling{Int64},Void},StochasticDiffEq.IIF1M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}}}})(::Base.RefValue{Any}, ::Tuple{Int64}) at ./asyncmap.jl:100
 [14] macro expansion at ./asyncmap.jl:235 [inlined]
 [15] (::Base.##574#575{Base.##558#563{DiffEqDevTools.##17#26{Bool,Int64,Bool,Bool,Array{Any,1},Array{Float64,1},DiffEqBase.SplitSDEProblem{Float64,Float64,false,Void,Tuple{##57#58,##51#52},##55#56,Void,UniformScaling{Int64},Void},StochasticDiffEq.IIF1M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}}}},Channel{Any},Void})() at ./event.jl:73
while loading /home/vagrant/.julia/v0.6/StochasticDiffEq/test/iif_methods.jl, in expression starting on line 28
WARNING: Array{T}(::Type{T}, m::Int) is deprecated, use Array{T}(m) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] Array(::Type{NLsolve.SolverState}, ::Int64) at ./deprecated.jl:51
 [3] Type at /home/vagrant/.julia/v0.6/NLsolve/src/solver_state_results.jl:20 [inlined]
 [4] trust_region_(::NLsolve.DifferentiableMultivariateFunction, ::Array{Float64,1}, ::Float64, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::Float64, ::Bool) at /home/vagrant/.julia/v0.6/NLsolve/src/trust_region.jl:99
 [5] #nlsolve#17(::Symbol, ::Float64, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::Function, ::Float64, ::Bool, ::NLsolve.#nlsolve, ::NLsolve.DifferentiableMultivariateFunction, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/NLsolve/src/nlsolve_func_defs.jl:24
 [6] NLSOLVEJL_SETUP at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/misc_utils.jl:51 [inlined]
 [7] perform_step! at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/integrators/iif.jl:46 [inlined]
 [8] perform_step! at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/integrators/iif.jl:28 [inlined]
 [9] solve!(::StochasticDiffEq.SDEIntegrator{StochasticDiffEq.IIF1M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}},Float64,Float64,Float64,Float64,Float64,DiffEqNoiseProcess.NoiseProcess{Float64,1,Float64,Float64,Void,Void,DiffEqNoiseProcess.#WHITE_NOISE_DIST,DiffEqNoiseProcess.#WHITE_NOISE_BRIDGE,false,DataStructures.Stack{Tuple{Float64,Float64,Void}},ResettableStacks.ResettableStack{Tuple{Float64,Float64,Void}},DiffEqNoiseProcess.RSWM{:RSwM3,Float64}},Float64,DiffEqBase.RODESolution{Float64,1,Array{Float64,1},Array{Float64,1},Dict{Symbol,Float64},Array{Float64,1},DiffEqNoiseProcess.NoiseProcess{Float64,1,Float64,Float64,Void,Void,DiffEqNoiseProcess.#WHITE_NOISE_DIST,DiffEqNoiseProcess.#WHITE_NOISE_BRIDGE,false,DataStructures.Stack{Tuple{Float64,Float64,Void}},ResettableStacks.ResettableStack{Tuple{Float64,Float64,Void}},DiffEqNoiseProcess.RSWM{:RSwM3,Float64}},DiffEqBase.SplitSDEProblem{Float64,Float64,false,Void,Tuple{##57#58,##51#52},##55#56,Void,UniformScaling{Int64},Void},StochasticDiffEq.IIF1M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}},StochasticDiffEq.LinearInterpolationData{Array{Float64,1},Array{Float64,1}}},StochasticDiffEq.IIF1MConstantCache{Array{Float64,1},StochasticDiffEq.RHS_IIF1M_Scalar{Tuple{##57#58,##51#52},Float64,Float64},NLsolve.DifferentiableMultivariateFunction},Void,Tuple{##57#58,##51#52},##55#56,StochasticDiffEq.SDEOptions{Float64,Float64,Float64,Float64,DiffEqBase.#ODE_DEFAULT_NORM,DiffEqBase.CallbackSet{Tuple{},Tuple{}},DiffEqBase.#ODE_DEFAULT_ISOUTOFDOMAIN,DiffEqBase.#ODE_DEFAULT_PROG_MESSAGE,DiffEqBase.#ODE_DEFAULT_UNSTABLE_CHECK,DataStructures.BinaryHeap{Float64,DataStructures.LessThan},Void,Void},Void}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/solve.jl:354
 [10] #solve#46(::Array{Any,1}, ::Function, ::DiffEqBase.SplitSDEProblem{Float64,Float64,false,Void,Tuple{##57#58,##51#52},##55#56,Void,UniformScaling{Int64},Void}, ::StochasticDiffEq.IIF1M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/solve.jl:8
 [11] (::DiffEqBase.#kw##solve)(::Array{Any,1}, ::DiffEqBase.#solve, ::DiffEqBase.SplitSDEProblem{Float64,Float64,false,Void,Tuple{##57#58,##51#52},##55#56,Void,UniformScaling{Int64},Void}, ::StochasticDiffEq.IIF1M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at ./<missing>:0
 [12] (::DiffEqDevTools.##17#26{Bool,Int64,Bool,Bool,Array{Any,1},Array{Float64,1},DiffEqBase.SplitSDEProblem{Float64,Float64,false,Void,Tuple{##57#58,##51#52},##55#56,Void,UniformScaling{Int64},Void},StochasticDiffEq.IIF1M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}}})(::Int64) at /home/vagrant/.julia/v0.6/DiffEqDevTools/src/convergence.jl:36
 [13] (::Base.##558#563{DiffEqDevTools.##17#26{Bool,Int64,Bool,Bool,Array{Any,1},Array{Float64,1},DiffEqBase.SplitSDEProblem{Float64,Float64,false,Void,Tuple{##57#58,##51#52},##55#56,Void,UniformScaling{Int64},Void},StochasticDiffEq.IIF1M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}}}})(::Base.RefValue{Any}, ::Tuple{Int64}) at ./asyncmap.jl:100
 [14] macro expansion at ./asyncmap.jl:235 [inlined]
 [15] (::Base.##574#575{Base.##558#563{DiffEqDevTools.##17#26{Bool,Int64,Bool,Bool,Array{Any,1},Array{Float64,1},DiffEqBase.SplitSDEProblem{Float64,Float64,false,Void,Tuple{##57#58,##51#52},##55#56,Void,UniformScaling{Int64},Void},StochasticDiffEq.IIF1M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}}}},Channel{Any},Void})() at ./event.jl:73
while loading /home/vagrant/.julia/v0.6/StochasticDiffEq/test/iif_methods.jl, in expression starting on line 28
IIF no noise scalar
WARNING: Array{T}(::Type{T}, m::Int, n::Int) is deprecated, use Array{T}(m, n) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] Array(::Type{Float64}, ::Int64, ::Int64) at ./deprecated.jl:51
 [3] trust_region_(::NLsolve.DifferentiableMultivariateFunction, ::Array{Float64,1}, ::Float64, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::Float64, ::Bool) at /home/vagrant/.julia/v0.6/NLsolve/src/trust_region.jl:82
 [4] #nlsolve#17(::Symbol, ::Float64, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::Function, ::Float64, ::Bool, ::NLsolve.#nlsolve, ::NLsolve.DifferentiableMultivariateFunction, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/NLsolve/src/nlsolve_func_defs.jl:24
 [5] NLSOLVEJL_SETUP at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/misc_utils.jl:51 [inlined]
 [6] perform_step! at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/integrators/iif.jl:46 [inlined]
 [7] perform_step! at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/integrators/iif.jl:28 [inlined]
 [8] solve!(::StochasticDiffEq.SDEIntegrator{StochasticDiffEq.IIF2M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}},Float64,Float64,Float64,Float64,Float64,DiffEqNoiseProcess.NoiseProcess{Float64,1,Float64,Float64,Void,Void,DiffEqNoiseProcess.#WHITE_NOISE_DIST,DiffEqNoiseProcess.#WHITE_NOISE_BRIDGE,false,DataStructures.Stack{Tuple{Float64,Float64,Void}},ResettableStacks.ResettableStack{Tuple{Float64,Float64,Void}},DiffEqNoiseProcess.RSWM{:RSwM3,Float64}},Float64,DiffEqBase.RODESolution{Float64,1,Array{Float64,1},Array{Float64,1},Dict{Symbol,Float64},Array{Float64,1},DiffEqNoiseProcess.NoiseProcess{Float64,1,Float64,Float64,Void,Void,DiffEqNoiseProcess.#WHITE_NOISE_DIST,DiffEqNoiseProcess.#WHITE_NOISE_BRIDGE,false,DataStructures.Stack{Tuple{Float64,Float64,Void}},ResettableStacks.ResettableStack{Tuple{Float64,Float64,Void}},DiffEqNoiseProcess.RSWM{:RSwM3,Float64}},DiffEqBase.SplitSDEProblem{Float64,Float64,false,Void,Tuple{##47#48,##51#52},##53#54,Void,UniformScaling{Int64},Void},StochasticDiffEq.IIF2M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}},StochasticDiffEq.LinearInterpolationData{Array{Float64,1},Array{Float64,1}}},StochasticDiffEq.IIF2MConstantCache{Array{Float64,1},StochasticDiffEq.RHS_IIF2M_Scalar{Tuple{##47#48,##51#52},Float64,Float64},NLsolve.DifferentiableMultivariateFunction},Void,Tuple{##47#48,##51#52},##53#54,StochasticDiffEq.SDEOptions{Float64,Float64,Float64,Float64,DiffEqBase.#ODE_DEFAULT_NORM,DiffEqBase.CallbackSet{Tuple{},Tuple{}},DiffEqBase.#ODE_DEFAULT_ISOUTOFDOMAIN,DiffEqBase.#ODE_DEFAULT_PROG_MESSAGE,DiffEqBase.#ODE_DEFAULT_UNSTABLE_CHECK,DataStructures.BinaryHeap{Float64,DataStructures.LessThan},Void,Void},Void}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/solve.jl:354
 [9] #solve#46(::Array{Any,1}, ::Function, ::DiffEqBase.SplitSDEProblem{Float64,Float64,false,Void,Tuple{##47#48,##51#52},##53#54,Void,UniformScaling{Int64},Void}, ::StochasticDiffEq.IIF2M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/solve.jl:8
 [10] (::DiffEqBase.#kw##solve)(::Array{Any,1}, ::DiffEqBase.#solve, ::DiffEqBase.SplitSDEProblem{Float64,Float64,false,Void,Tuple{##47#48,##51#52},##53#54,Void,UniformScaling{Int64},Void}, ::StochasticDiffEq.IIF2M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at ./<missing>:0
 [11] (::DiffEqDevTools.##17#26{Bool,Int64,Bool,Bool,Array{Any,1},Array{Float64,1},DiffEqBase.SplitSDEProblem{Float64,Float64,false,Void,Tuple{##47#48,##51#52},##53#54,Void,UniformScaling{Int64},Void},StochasticDiffEq.IIF2M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}}})(::Int64) at /home/vagrant/.julia/v0.6/DiffEqDevTools/src/convergence.jl:36
 [12] (::Base.##558#563{DiffEqDevTools.##17#26{Bool,Int64,Bool,Bool,Array{Any,1},Array{Float64,1},DiffEqBase.SplitSDEProblem{Float64,Float64,false,Void,Tuple{##47#48,##51#52},##53#54,Void,UniformScaling{Int64},Void},StochasticDiffEq.IIF2M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}}}})(::Base.RefValue{Any}, ::Tuple{Int64}) at ./asyncmap.jl:100
 [13] macro expansion at ./asyncmap.jl:235 [inlined]
 [14] (::Base.##574#575{Base.##558#563{DiffEqDevTools.##17#26{Bool,Int64,Bool,Bool,Array{Any,1},Array{Float64,1},DiffEqBase.SplitSDEProblem{Float64,Float64,false,Void,Tuple{##47#48,##51#52},##53#54,Void,UniformScaling{Int64},Void},StochasticDiffEq.IIF2M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}}}},Channel{Any},Void})() at ./event.jl:73
while loading /home/vagrant/.julia/v0.6/StochasticDiffEq/test/iif_methods.jl, in expression starting on line 34
WARNING: !(B::BitArray) is deprecated, use .!(B) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] !(::BitArray{1}) at ./deprecated.jl:51
 [3] check_isfinite(::Array{Float64,1}) at /home/vagrant/.julia/v0.6/NLsolve/src/utils.jl:32
 [4] trust_region_(::NLsolve.DifferentiableMultivariateFunction, ::Array{Float64,1}, ::Float64, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::Float64, ::Bool) at /home/vagrant/.julia/v0.6/NLsolve/src/trust_region.jl:91
 [5] #nlsolve#17(::Symbol, ::Float64, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::Function, ::Float64, ::Bool, ::NLsolve.#nlsolve, ::NLsolve.DifferentiableMultivariateFunction, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/NLsolve/src/nlsolve_func_defs.jl:24
 [6] NLSOLVEJL_SETUP at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/misc_utils.jl:51 [inlined]
 [7] perform_step! at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/integrators/iif.jl:46 [inlined]
 [8] perform_step! at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/integrators/iif.jl:28 [inlined]
 [9] solve!(::StochasticDiffEq.SDEIntegrator{StochasticDiffEq.IIF2M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}},Float64,Float64,Float64,Float64,Float64,DiffEqNoiseProcess.NoiseProcess{Float64,1,Float64,Float64,Void,Void,DiffEqNoiseProcess.#WHITE_NOISE_DIST,DiffEqNoiseProcess.#WHITE_NOISE_BRIDGE,false,DataStructures.Stack{Tuple{Float64,Float64,Void}},ResettableStacks.ResettableStack{Tuple{Float64,Float64,Void}},DiffEqNoiseProcess.RSWM{:RSwM3,Float64}},Float64,DiffEqBase.RODESolution{Float64,1,Array{Float64,1},Array{Float64,1},Dict{Symbol,Float64},Array{Float64,1},DiffEqNoiseProcess.NoiseProcess{Float64,1,Float64,Float64,Void,Void,DiffEqNoiseProcess.#WHITE_NOISE_DIST,DiffEqNoiseProcess.#WHITE_NOISE_BRIDGE,false,DataStructures.Stack{Tuple{Float64,Float64,Void}},ResettableStacks.ResettableStack{Tuple{Float64,Float64,Void}},DiffEqNoiseProcess.RSWM{:RSwM3,Float64}},DiffEqBase.SplitSDEProblem{Float64,Float64,false,Void,Tuple{##47#48,##51#52},##53#54,Void,UniformScaling{Int64},Void},StochasticDiffEq.IIF2M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}},StochasticDiffEq.LinearInterpolationData{Array{Float64,1},Array{Float64,1}}},StochasticDiffEq.IIF2MConstantCache{Array{Float64,1},StochasticDiffEq.RHS_IIF2M_Scalar{Tuple{##47#48,##51#52},Float64,Float64},NLsolve.DifferentiableMultivariateFunction},Void,Tuple{##47#48,##51#52},##53#54,StochasticDiffEq.SDEOptions{Float64,Float64,Float64,Float64,DiffEqBase.#ODE_DEFAULT_NORM,DiffEqBase.CallbackSet{Tuple{},Tuple{}},DiffEqBase.#ODE_DEFAULT_ISOUTOFDOMAIN,DiffEqBase.#ODE_DEFAULT_PROG_MESSAGE,DiffEqBase.#ODE_DEFAULT_UNSTABLE_CHECK,DataStructures.BinaryHeap{Float64,DataStructures.LessThan},Void,Void},Void}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/solve.jl:354
 [10] #solve#46(::Array{Any,1}, ::Function, ::DiffEqBase.SplitSDEProblem{Float64,Float64,false,Void,Tuple{##47#48,##51#52},##53#54,Void,UniformScaling{Int64},Void}, ::StochasticDiffEq.IIF2M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/solve.jl:8
 [11] (::DiffEqBase.#kw##solve)(::Array{Any,1}, ::DiffEqBase.#solve, ::DiffEqBase.SplitSDEProblem{Float64,Float64,false,Void,Tuple{##47#48,##51#52},##53#54,Void,UniformScaling{Int64},Void}, ::StochasticDiffEq.IIF2M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at ./<missing>:0
 [12] (::DiffEqDevTools.##17#26{Bool,Int64,Bool,Bool,Array{Any,1},Array{Float64,1},DiffEqBase.SplitSDEProblem{Float64,Float64,false,Void,Tuple{##47#48,##51#52},##53#54,Void,UniformScaling{Int64},Void},StochasticDiffEq.IIF2M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}}})(::Int64) at /home/vagrant/.julia/v0.6/DiffEqDevTools/src/convergence.jl:36
 [13] (::Base.##558#563{DiffEqDevTools.##17#26{Bool,Int64,Bool,Bool,Array{Any,1},Array{Float64,1},DiffEqBase.SplitSDEProblem{Float64,Float64,false,Void,Tuple{##47#48,##51#52},##53#54,Void,UniformScaling{Int64},Void},StochasticDiffEq.IIF2M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}}}})(::Base.RefValue{Any}, ::Tuple{Int64}) at ./asyncmap.jl:100
 [14] macro expansion at ./asyncmap.jl:235 [inlined]
 [15] (::Base.##574#575{Base.##558#563{DiffEqDevTools.##17#26{Bool,Int64,Bool,Bool,Array{Any,1},Array{Float64,1},DiffEqBase.SplitSDEProblem{Float64,Float64,false,Void,Tuple{##47#48,##51#52},##53#54,Void,UniformScaling{Int64},Void},StochasticDiffEq.IIF2M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}}}},Channel{Any},Void})() at ./event.jl:73
while loading /home/vagrant/.julia/v0.6/StochasticDiffEq/test/iif_methods.jl, in expression starting on line 34
WARNING: Array{T}(::Type{T}, m::Int) is deprecated, use Array{T}(m) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] Array(::Type{NLsolve.SolverState}, ::Int64) at ./deprecated.jl:51
 [3] Type at /home/vagrant/.julia/v0.6/NLsolve/src/solver_state_results.jl:20 [inlined]
 [4] trust_region_(::NLsolve.DifferentiableMultivariateFunction, ::Array{Float64,1}, ::Float64, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::Float64, ::Bool) at /home/vagrant/.julia/v0.6/NLsolve/src/trust_region.jl:99
 [5] #nlsolve#17(::Symbol, ::Float64, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::Function, ::Float64, ::Bool, ::NLsolve.#nlsolve, ::NLsolve.DifferentiableMultivariateFunction, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/NLsolve/src/nlsolve_func_defs.jl:24
 [6] NLSOLVEJL_SETUP at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/misc_utils.jl:51 [inlined]
 [7] perform_step! at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/integrators/iif.jl:46 [inlined]
 [8] perform_step! at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/integrators/iif.jl:28 [inlined]
 [9] solve!(::StochasticDiffEq.SDEIntegrator{StochasticDiffEq.IIF2M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}},Float64,Float64,Float64,Float64,Float64,DiffEqNoiseProcess.NoiseProcess{Float64,1,Float64,Float64,Void,Void,DiffEqNoiseProcess.#WHITE_NOISE_DIST,DiffEqNoiseProcess.#WHITE_NOISE_BRIDGE,false,DataStructures.Stack{Tuple{Float64,Float64,Void}},ResettableStacks.ResettableStack{Tuple{Float64,Float64,Void}},DiffEqNoiseProcess.RSWM{:RSwM3,Float64}},Float64,DiffEqBase.RODESolution{Float64,1,Array{Float64,1},Array{Float64,1},Dict{Symbol,Float64},Array{Float64,1},DiffEqNoiseProcess.NoiseProcess{Float64,1,Float64,Float64,Void,Void,DiffEqNoiseProcess.#WHITE_NOISE_DIST,DiffEqNoiseProcess.#WHITE_NOISE_BRIDGE,false,DataStructures.Stack{Tuple{Float64,Float64,Void}},ResettableStacks.ResettableStack{Tuple{Float64,Float64,Void}},DiffEqNoiseProcess.RSWM{:RSwM3,Float64}},DiffEqBase.SplitSDEProblem{Float64,Float64,false,Void,Tuple{##47#48,##51#52},##53#54,Void,UniformScaling{Int64},Void},StochasticDiffEq.IIF2M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}},StochasticDiffEq.LinearInterpolationData{Array{Float64,1},Array{Float64,1}}},StochasticDiffEq.IIF2MConstantCache{Array{Float64,1},StochasticDiffEq.RHS_IIF2M_Scalar{Tuple{##47#48,##51#52},Float64,Float64},NLsolve.DifferentiableMultivariateFunction},Void,Tuple{##47#48,##51#52},##53#54,StochasticDiffEq.SDEOptions{Float64,Float64,Float64,Float64,DiffEqBase.#ODE_DEFAULT_NORM,DiffEqBase.CallbackSet{Tuple{},Tuple{}},DiffEqBase.#ODE_DEFAULT_ISOUTOFDOMAIN,DiffEqBase.#ODE_DEFAULT_PROG_MESSAGE,DiffEqBase.#ODE_DEFAULT_UNSTABLE_CHECK,DataStructures.BinaryHeap{Float64,DataStructures.LessThan},Void,Void},Void}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/solve.jl:354
 [10] #solve#46(::Array{Any,1}, ::Function, ::DiffEqBase.SplitSDEProblem{Float64,Float64,false,Void,Tuple{##47#48,##51#52},##53#54,Void,UniformScaling{Int64},Void}, ::StochasticDiffEq.IIF2M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/solve.jl:8
 [11] (::DiffEqBase.#kw##solve)(::Array{Any,1}, ::DiffEqBase.#solve, ::DiffEqBase.SplitSDEProblem{Float64,Float64,false,Void,Tuple{##47#48,##51#52},##53#54,Void,UniformScaling{Int64},Void}, ::StochasticDiffEq.IIF2M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at ./<missing>:0
 [12] (::DiffEqDevTools.##17#26{Bool,Int64,Bool,Bool,Array{Any,1},Array{Float64,1},DiffEqBase.SplitSDEProblem{Float64,Float64,false,Void,Tuple{##47#48,##51#52},##53#54,Void,UniformScaling{Int64},Void},StochasticDiffEq.IIF2M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}}})(::Int64) at /home/vagrant/.julia/v0.6/DiffEqDevTools/src/convergence.jl:36
 [13] (::Base.##558#563{DiffEqDevTools.##17#26{Bool,Int64,Bool,Bool,Array{Any,1},Array{Float64,1},DiffEqBase.SplitSDEProblem{Float64,Float64,false,Void,Tuple{##47#48,##51#52},##53#54,Void,UniformScaling{Int64},Void},StochasticDiffEq.IIF2M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}}}})(::Base.RefValue{Any}, ::Tuple{Int64}) at ./asyncmap.jl:100
 [14] macro expansion at ./asyncmap.jl:235 [inlined]
 [15] (::Base.##574#575{Base.##558#563{DiffEqDevTools.##17#26{Bool,Int64,Bool,Bool,Array{Any,1},Array{Float64,1},DiffEqBase.SplitSDEProblem{Float64,Float64,false,Void,Tuple{##47#48,##51#52},##53#54,Void,UniformScaling{Int64},Void},StochasticDiffEq.IIF2M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}}}},Channel{Any},Void})() at ./event.jl:73
while loading /home/vagrant/.julia/v0.6/StochasticDiffEq/test/iif_methods.jl, in expression starting on line 34
WARNING: Array{T}(::Type{T}, m::Int, n::Int) is deprecated, use Array{T}(m, n) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] Array(::Type{Float64}, ::Int64, ::Int64) at ./deprecated.jl:51
 [3] trust_region_(::NLsolve.DifferentiableMultivariateFunction, ::Array{Float64,1}, ::Float64, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::Float64, ::Bool) at /home/vagrant/.julia/v0.6/NLsolve/src/trust_region.jl:82
 [4] #nlsolve#17(::Symbol, ::Float64, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::Function, ::Float64, ::Bool, ::NLsolve.#nlsolve, ::NLsolve.DifferentiableMultivariateFunction, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/NLsolve/src/nlsolve_func_defs.jl:24
 [5] NLSOLVEJL_SETUP at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/misc_utils.jl:51 [inlined]
 [6] perform_step! at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/integrators/iif.jl:46 [inlined]
 [7] perform_step! at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/integrators/iif.jl:28 [inlined]
 [8] solve!(::StochasticDiffEq.SDEIntegrator{StochasticDiffEq.IIF2M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}},Float64,Float64,Float64,Float64,Float64,DiffEqNoiseProcess.NoiseProcess{Float64,1,Float64,Float64,Void,Void,DiffEqNoiseProcess.#WHITE_NOISE_DIST,DiffEqNoiseProcess.#WHITE_NOISE_BRIDGE,false,DataStructures.Stack{Tuple{Float64,Float64,Void}},ResettableStacks.ResettableStack{Tuple{Float64,Float64,Void}},DiffEqNoiseProcess.RSWM{:RSwM3,Float64}},Float64,DiffEqBase.RODESolution{Float64,1,Array{Float64,1},Array{Float64,1},Dict{Symbol,Float64},Array{Float64,1},DiffEqNoiseProcess.NoiseProcess{Float64,1,Float64,Float64,Void,Void,DiffEqNoiseProcess.#WHITE_NOISE_DIST,DiffEqNoiseProcess.#WHITE_NOISE_BRIDGE,false,DataStructures.Stack{Tuple{Float64,Float64,Void}},ResettableStacks.ResettableStack{Tuple{Float64,Float64,Void}},DiffEqNoiseProcess.RSWM{:RSwM3,Float64}},DiffEqBase.SplitSDEProblem{Float64,Float64,false,Void,Tuple{##57#58,##51#52},##55#56,Void,UniformScaling{Int64},Void},StochasticDiffEq.IIF2M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}},StochasticDiffEq.LinearInterpolationData{Array{Float64,1},Array{Float64,1}}},StochasticDiffEq.IIF2MConstantCache{Array{Float64,1},StochasticDiffEq.RHS_IIF2M_Scalar{Tuple{##57#58,##51#52},Float64,Float64},NLsolve.DifferentiableMultivariateFunction},Void,Tuple{##57#58,##51#52},##55#56,StochasticDiffEq.SDEOptions{Float64,Float64,Float64,Float64,DiffEqBase.#ODE_DEFAULT_NORM,DiffEqBase.CallbackSet{Tuple{},Tuple{}},DiffEqBase.#ODE_DEFAULT_ISOUTOFDOMAIN,DiffEqBase.#ODE_DEFAULT_PROG_MESSAGE,DiffEqBase.#ODE_DEFAULT_UNSTABLE_CHECK,DataStructures.BinaryHeap{Float64,DataStructures.LessThan},Void,Void},Void}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/solve.jl:354
 [9] #solve#46(::Array{Any,1}, ::Function, ::DiffEqBase.SplitSDEProblem{Float64,Float64,false,Void,Tuple{##57#58,##51#52},##55#56,Void,UniformScaling{Int64},Void}, ::StochasticDiffEq.IIF2M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/solve.jl:8
 [10] (::DiffEqBase.#kw##solve)(::Array{Any,1}, ::DiffEqBase.#solve, ::DiffEqBase.SplitSDEProblem{Float64,Float64,false,Void,Tuple{##57#58,##51#52},##55#56,Void,UniformScaling{Int64},Void}, ::StochasticDiffEq.IIF2M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at ./<missing>:0
 [11] (::DiffEqDevTools.##17#26{Bool,Int64,Bool,Bool,Array{Any,1},Array{Float64,1},DiffEqBase.SplitSDEProblem{Float64,Float64,false,Void,Tuple{##57#58,##51#52},##55#56,Void,UniformScaling{Int64},Void},StochasticDiffEq.IIF2M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}}})(::Int64) at /home/vagrant/.julia/v0.6/DiffEqDevTools/src/convergence.jl:36
 [12] (::Base.##558#563{DiffEqDevTools.##17#26{Bool,Int64,Bool,Bool,Array{Any,1},Array{Float64,1},DiffEqBase.SplitSDEProblem{Float64,Float64,false,Void,Tuple{##57#58,##51#52},##55#56,Void,UniformScaling{Int64},Void},StochasticDiffEq.IIF2M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}}}})(::Base.RefValue{Any}, ::Tuple{Int64}) at ./asyncmap.jl:100
 [13] macro expansion at ./asyncmap.jl:235 [inlined]
 [14] (::Base.##574#575{Base.##558#563{DiffEqDevTools.##17#26{Bool,Int64,Bool,Bool,Array{Any,1},Array{Float64,1},DiffEqBase.SplitSDEProblem{Float64,Float64,false,Void,Tuple{##57#58,##51#52},##55#56,Void,UniformScaling{Int64},Void},StochasticDiffEq.IIF2M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}}}},Channel{Any},Void})() at ./event.jl:73
while loading /home/vagrant/.julia/v0.6/StochasticDiffEq/test/iif_methods.jl, in expression starting on line 36
WARNING: !(B::BitArray) is deprecated, use .!(B) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] !(::BitArray{1}) at ./deprecated.jl:51
 [3] check_isfinite(::Array{Float64,1}) at /home/vagrant/.julia/v0.6/NLsolve/src/utils.jl:32
 [4] trust_region_(::NLsolve.DifferentiableMultivariateFunction, ::Array{Float64,1}, ::Float64, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::Float64, ::Bool) at /home/vagrant/.julia/v0.6/NLsolve/src/trust_region.jl:91
 [5] #nlsolve#17(::Symbol, ::Float64, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::Function, ::Float64, ::Bool, ::NLsolve.#nlsolve, ::NLsolve.DifferentiableMultivariateFunction, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/NLsolve/src/nlsolve_func_defs.jl:24
 [6] NLSOLVEJL_SETUP at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/misc_utils.jl:51 [inlined]
 [7] perform_step! at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/integrators/iif.jl:46 [inlined]
 [8] perform_step! at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/integrators/iif.jl:28 [inlined]
 [9] solve!(::StochasticDiffEq.SDEIntegrator{StochasticDiffEq.IIF2M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}},Float64,Float64,Float64,Float64,Float64,DiffEqNoiseProcess.NoiseProcess{Float64,1,Float64,Float64,Void,Void,DiffEqNoiseProcess.#WHITE_NOISE_DIST,DiffEqNoiseProcess.#WHITE_NOISE_BRIDGE,false,DataStructures.Stack{Tuple{Float64,Float64,Void}},ResettableStacks.ResettableStack{Tuple{Float64,Float64,Void}},DiffEqNoiseProcess.RSWM{:RSwM3,Float64}},Float64,DiffEqBase.RODESolution{Float64,1,Array{Float64,1},Array{Float64,1},Dict{Symbol,Float64},Array{Float64,1},DiffEqNoiseProcess.NoiseProcess{Float64,1,Float64,Float64,Void,Void,DiffEqNoiseProcess.#WHITE_NOISE_DIST,DiffEqNoiseProcess.#WHITE_NOISE_BRIDGE,false,DataStructures.Stack{Tuple{Float64,Float64,Void}},ResettableStacks.ResettableStack{Tuple{Float64,Float64,Void}},DiffEqNoiseProcess.RSWM{:RSwM3,Float64}},DiffEqBase.SplitSDEProblem{Float64,Float64,false,Void,Tuple{##57#58,##51#52},##55#56,Void,UniformScaling{Int64},Void},StochasticDiffEq.IIF2M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}},StochasticDiffEq.LinearInterpolationData{Array{Float64,1},Array{Float64,1}}},StochasticDiffEq.IIF2MConstantCache{Array{Float64,1},StochasticDiffEq.RHS_IIF2M_Scalar{Tuple{##57#58,##51#52},Float64,Float64},NLsolve.DifferentiableMultivariateFunction},Void,Tuple{##57#58,##51#52},##55#56,StochasticDiffEq.SDEOptions{Float64,Float64,Float64,Float64,DiffEqBase.#ODE_DEFAULT_NORM,DiffEqBase.CallbackSet{Tuple{},Tuple{}},DiffEqBase.#ODE_DEFAULT_ISOUTOFDOMAIN,DiffEqBase.#ODE_DEFAULT_PROG_MESSAGE,DiffEqBase.#ODE_DEFAULT_UNSTABLE_CHECK,DataStructures.BinaryHeap{Float64,DataStructures.LessThan},Void,Void},Void}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/solve.jl:354
 [10] #solve#46(::Array{Any,1}, ::Function, ::DiffEqBase.SplitSDEProblem{Float64,Float64,false,Void,Tuple{##57#58,##51#52},##55#56,Void,UniformScaling{Int64},Void}, ::StochasticDiffEq.IIF2M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/solve.jl:8
 [11] (::DiffEqBase.#kw##solve)(::Array{Any,1}, ::DiffEqBase.#solve, ::DiffEqBase.SplitSDEProblem{Float64,Float64,false,Void,Tuple{##57#58,##51#52},##55#56,Void,UniformScaling{Int64},Void}, ::StochasticDiffEq.IIF2M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at ./<missing>:0
 [12] (::DiffEqDevTools.##17#26{Bool,Int64,Bool,Bool,Array{Any,1},Array{Float64,1},DiffEqBase.SplitSDEProblem{Float64,Float64,false,Void,Tuple{##57#58,##51#52},##55#56,Void,UniformScaling{Int64},Void},StochasticDiffEq.IIF2M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}}})(::Int64) at /home/vagrant/.julia/v0.6/DiffEqDevTools/src/convergence.jl:36
 [13] (::Base.##558#563{DiffEqDevTools.##17#26{Bool,Int64,Bool,Bool,Array{Any,1},Array{Float64,1},DiffEqBase.SplitSDEProblem{Float64,Float64,false,Void,Tuple{##57#58,##51#52},##55#56,Void,UniformScaling{Int64},Void},StochasticDiffEq.IIF2M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}}}})(::Base.RefValue{Any}, ::Tuple{Int64}) at ./asyncmap.jl:100
 [14] macro expansion at ./asyncmap.jl:235 [inlined]
 [15] (::Base.##574#575{Base.##558#563{DiffEqDevTools.##17#26{Bool,Int64,Bool,Bool,Array{Any,1},Array{Float64,1},DiffEqBase.SplitSDEProblem{Float64,Float64,false,Void,Tuple{##57#58,##51#52},##55#56,Void,UniformScaling{Int64},Void},StochasticDiffEq.IIF2M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}}}},Channel{Any},Void})() at ./event.jl:73
while loading /home/vagrant/.julia/v0.6/StochasticDiffEq/test/iif_methods.jl, in expression starting on line 36
WARNING: Array{T}(::Type{T}, m::Int) is deprecated, use Array{T}(m) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] Array(::Type{NLsolve.SolverState}, ::Int64) at ./deprecated.jl:51
 [3] Type at /home/vagrant/.julia/v0.6/NLsolve/src/solver_state_results.jl:20 [inlined]
 [4] trust_region_(::NLsolve.DifferentiableMultivariateFunction, ::Array{Float64,1}, ::Float64, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::Float64, ::Bool) at /home/vagrant/.julia/v0.6/NLsolve/src/trust_region.jl:99
 [5] #nlsolve#17(::Symbol, ::Float64, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::Function, ::Float64, ::Bool, ::NLsolve.#nlsolve, ::NLsolve.DifferentiableMultivariateFunction, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/NLsolve/src/nlsolve_func_defs.jl:24
 [6] NLSOLVEJL_SETUP at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/misc_utils.jl:51 [inlined]
 [7] perform_step! at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/integrators/iif.jl:46 [inlined]
 [8] perform_step! at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/integrators/iif.jl:28 [inlined]
 [9] solve!(::StochasticDiffEq.SDEIntegrator{StochasticDiffEq.IIF2M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}},Float64,Float64,Float64,Float64,Float64,DiffEqNoiseProcess.NoiseProcess{Float64,1,Float64,Float64,Void,Void,DiffEqNoiseProcess.#WHITE_NOISE_DIST,DiffEqNoiseProcess.#WHITE_NOISE_BRIDGE,false,DataStructures.Stack{Tuple{Float64,Float64,Void}},ResettableStacks.ResettableStack{Tuple{Float64,Float64,Void}},DiffEqNoiseProcess.RSWM{:RSwM3,Float64}},Float64,DiffEqBase.RODESolution{Float64,1,Array{Float64,1},Array{Float64,1},Dict{Symbol,Float64},Array{Float64,1},DiffEqNoiseProcess.NoiseProcess{Float64,1,Float64,Float64,Void,Void,DiffEqNoiseProcess.#WHITE_NOISE_DIST,DiffEqNoiseProcess.#WHITE_NOISE_BRIDGE,false,DataStructures.Stack{Tuple{Float64,Float64,Void}},ResettableStacks.ResettableStack{Tuple{Float64,Float64,Void}},DiffEqNoiseProcess.RSWM{:RSwM3,Float64}},DiffEqBase.SplitSDEProblem{Float64,Float64,false,Void,Tuple{##57#58,##51#52},##55#56,Void,UniformScaling{Int64},Void},StochasticDiffEq.IIF2M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}},StochasticDiffEq.LinearInterpolationData{Array{Float64,1},Array{Float64,1}}},StochasticDiffEq.IIF2MConstantCache{Array{Float64,1},StochasticDiffEq.RHS_IIF2M_Scalar{Tuple{##57#58,##51#52},Float64,Float64},NLsolve.DifferentiableMultivariateFunction},Void,Tuple{##57#58,##51#52},##55#56,StochasticDiffEq.SDEOptions{Float64,Float64,Float64,Float64,DiffEqBase.#ODE_DEFAULT_NORM,DiffEqBase.CallbackSet{Tuple{},Tuple{}},DiffEqBase.#ODE_DEFAULT_ISOUTOFDOMAIN,DiffEqBase.#ODE_DEFAULT_PROG_MESSAGE,DiffEqBase.#ODE_DEFAULT_UNSTABLE_CHECK,DataStructures.BinaryHeap{Float64,DataStructures.LessThan},Void,Void},Void}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/solve.jl:354
 [10] #solve#46(::Array{Any,1}, ::Function, ::DiffEqBase.SplitSDEProblem{Float64,Float64,false,Void,Tuple{##57#58,##51#52},##55#56,Void,UniformScaling{Int64},Void}, ::StochasticDiffEq.IIF2M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/solve.jl:8
 [11] (::DiffEqBase.#kw##solve)(::Array{Any,1}, ::DiffEqBase.#solve, ::DiffEqBase.SplitSDEProblem{Float64,Float64,false,Void,Tuple{##57#58,##51#52},##55#56,Void,UniformScaling{Int64},Void}, ::StochasticDiffEq.IIF2M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at ./<missing>:0
 [12] (::DiffEqDevTools.##17#26{Bool,Int64,Bool,Bool,Array{Any,1},Array{Float64,1},DiffEqBase.SplitSDEProblem{Float64,Float64,false,Void,Tuple{##57#58,##51#52},##55#56,Void,UniformScaling{Int64},Void},StochasticDiffEq.IIF2M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}}})(::Int64) at /home/vagrant/.julia/v0.6/DiffEqDevTools/src/convergence.jl:36
 [13] (::Base.##558#563{DiffEqDevTools.##17#26{Bool,Int64,Bool,Bool,Array{Any,1},Array{Float64,1},DiffEqBase.SplitSDEProblem{Float64,Float64,false,Void,Tuple{##57#58,##51#52},##55#56,Void,UniformScaling{Int64},Void},StochasticDiffEq.IIF2M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}}}})(::Base.RefValue{Any}, ::Tuple{Int64}) at ./asyncmap.jl:100
 [14] macro expansion at ./asyncmap.jl:235 [inlined]
 [15] (::Base.##574#575{Base.##558#563{DiffEqDevTools.##17#26{Bool,Int64,Bool,Bool,Array{Any,1},Array{Float64,1},DiffEqBase.SplitSDEProblem{Float64,Float64,false,Void,Tuple{##57#58,##51#52},##55#56,Void,UniformScaling{Int64},Void},StochasticDiffEq.IIF2M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}}}},Channel{Any},Void})() at ./event.jl:73
while loading /home/vagrant/.julia/v0.6/StochasticDiffEq/test/iif_methods.jl, in expression starting on line 36
WARNING: Array{T}(::Type{T}, m::Int, n::Int) is deprecated, use Array{T}(m, n) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] Array(::Type{Float64}, ::Int64, ::Int64) at ./deprecated.jl:51
 [3] trust_region_(::NLsolve.DifferentiableMultivariateFunction, ::Array{Float64,1}, ::Float64, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::Float64, ::Bool) at /home/vagrant/.julia/v0.6/NLsolve/src/trust_region.jl:82
 [4] #nlsolve#17(::Symbol, ::Float64, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::Function, ::Float64, ::Bool, ::NLsolve.#nlsolve, ::NLsolve.DifferentiableMultivariateFunction, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/NLsolve/src/nlsolve_func_defs.jl:24
 [5] NLSOLVEJL_SETUP at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/misc_utils.jl:51 [inlined]
 [6] perform_step! at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/integrators/iif.jl:128 [inlined]
 [7] perform_step! at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/integrators/iif.jl:87 [inlined]
 [8] solve!(::StochasticDiffEq.SDEIntegrator{StochasticDiffEq.IIF1M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}},Array{Float64,1},Float64,Float64,Float64,Float64,DiffEqNoiseProcess.NoiseProcess{Float64,2,Float64,Array{Float64,1},Void,Void,DiffEqNoiseProcess.#INPLACE_WHITE_NOISE_DIST,DiffEqNoiseProcess.#INPLACE_WHITE_NOISE_BRIDGE,true,DataStructures.Stack{Tuple{Float64,Array{Float64,1},Void}},ResettableStacks.ResettableStack{Tuple{Float64,Array{Float64,1},Void}},DiffEqNoiseProcess.RSWM{:RSwM3,Float64}},Array{Float64,1},DiffEqBase.RODESolution{Float64,2,Array{Array{Float64,1},1},Array{Array{Float64,1},1},Dict{Symbol,Float64},Array{Float64,1},DiffEqNoiseProcess.NoiseProcess{Float64,2,Float64,Array{Float64,1},Void,Void,DiffEqNoiseProcess.#INPLACE_WHITE_NOISE_DIST,DiffEqNoiseProcess.#INPLACE_WHITE_NOISE_BRIDGE,true,DataStructures.Stack{Tuple{Float64,Array{Float64,1},Void}},ResettableStacks.ResettableStack{Tuple{Float64,Array{Float64,1},Void}},DiffEqNoiseProcess.RSWM{:RSwM3,Float64}},DiffEqBase.SplitSDEProblem{Array{Float64,1},Float64,true,Void,Tuple{##69#70,##71#72},##67#68,Void,UniformScaling{Int64},Array{Float64,2}},StochasticDiffEq.IIF1M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}},StochasticDiffEq.LinearInterpolationData{Array{Array{Float64,1},1},Array{Float64,1}}},StochasticDiffEq.IIF1MCache{Array{Float64,1},Array{Float64,1},StochasticDiffEq.DiffCache{Float64,ForwardDiff.Dual{2,Float64}},StochasticDiffEq.RHS_IIF1{Tuple{##69#70,##71#72},Array{Float64,1},Float64,StochasticDiffEq.DiffCache{Float64,ForwardDiff.Dual{2,Float64}},Tuple{Int64},Base.OneTo{Int64}},NLsolve.DifferentiableMultivariateFunction,Array{Float64,1},Array{Float64,2},Array{Float64,1},Array{Float64,1}},Void,Tuple{##69#70,##71#72},##67#68,StochasticDiffEq.SDEOptions{Float64,Float64,Float64,Float64,DiffEqBase.#ODE_DEFAULT_NORM,DiffEqBase.CallbackSet{Tuple{},Tuple{}},DiffEqBase.#ODE_DEFAULT_ISOUTOFDOMAIN,DiffEqBase.#ODE_DEFAULT_PROG_MESSAGE,DiffEqBase.#ODE_DEFAULT_UNSTABLE_CHECK,DataStructures.BinaryHeap{Float64,DataStructures.LessThan},Void,Void},Void}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/solve.jl:354
 [9] #solve#46(::Array{Any,1}, ::Function, ::DiffEqBase.SplitSDEProblem{Array{Float64,1},Float64,true,Void,Tuple{##69#70,##71#72},##67#68,Void,UniformScaling{Int64},Array{Float64,2}}, ::StochasticDiffEq.IIF1M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/solve.jl:8
 [10] (::DiffEqBase.#kw##solve)(::Array{Any,1}, ::DiffEqBase.#solve, ::DiffEqBase.SplitSDEProblem{Array{Float64,1},Float64,true,Void,Tuple{##69#70,##71#72},##67#68,Void,UniformScaling{Int64},Array{Float64,2}}, ::StochasticDiffEq.IIF1M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at ./<missing>:0 (repeats 2 times)
 [11] include_from_node1(::String) at ./loading.jl:569
 [12] include(::String) at ./sysimg.jl:14
 [13] macro expansion at /home/vagrant/.julia/v0.6/StochasticDiffEq/test/runtests.jl:17 [inlined]
 [14] macro expansion at ./test.jl:856 [inlined]
 [15] macro expansion at ./util.jl:237 [inlined]
 [16] anonymous at ./<missing>:?
 [17] include_from_node1(::String) at ./loading.jl:569
 [18] include(::String) at ./sysimg.jl:14
 [19] process_options(::Base.JLOptions) at ./client.jl:305
 [20] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/StochasticDiffEq/test/iif_methods.jl, in expression starting on line 86
WARNING: !(B::BitArray) is deprecated, use .!(B) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] !(::BitArray{1}) at ./deprecated.jl:51
 [3] check_isfinite(::Array{Float64,1}) at /home/vagrant/.julia/v0.6/NLsolve/src/utils.jl:32
 [4] trust_region_(::NLsolve.DifferentiableMultivariateFunction, ::Array{Float64,1}, ::Float64, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::Float64, ::Bool) at /home/vagrant/.julia/v0.6/NLsolve/src/trust_region.jl:91
 [5] #nlsolve#17(::Symbol, ::Float64, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::Function, ::Float64, ::Bool, ::NLsolve.#nlsolve, ::NLsolve.DifferentiableMultivariateFunction, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/NLsolve/src/nlsolve_func_defs.jl:24
 [6] NLSOLVEJL_SETUP at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/misc_utils.jl:51 [inlined]
 [7] perform_step! at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/integrators/iif.jl:128 [inlined]
 [8] perform_step! at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/integrators/iif.jl:87 [inlined]
 [9] solve!(::StochasticDiffEq.SDEIntegrator{StochasticDiffEq.IIF1M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}},Array{Float64,1},Float64,Float64,Float64,Float64,DiffEqNoiseProcess.NoiseProcess{Float64,2,Float64,Array{Float64,1},Void,Void,DiffEqNoiseProcess.#INPLACE_WHITE_NOISE_DIST,DiffEqNoiseProcess.#INPLACE_WHITE_NOISE_BRIDGE,true,DataStructures.Stack{Tuple{Float64,Array{Float64,1},Void}},ResettableStacks.ResettableStack{Tuple{Float64,Array{Float64,1},Void}},DiffEqNoiseProcess.RSWM{:RSwM3,Float64}},Array{Float64,1},DiffEqBase.RODESolution{Float64,2,Array{Array{Float64,1},1},Array{Array{Float64,1},1},Dict{Symbol,Float64},Array{Float64,1},DiffEqNoiseProcess.NoiseProcess{Float64,2,Float64,Array{Float64,1},Void,Void,DiffEqNoiseProcess.#INPLACE_WHITE_NOISE_DIST,DiffEqNoiseProcess.#INPLACE_WHITE_NOISE_BRIDGE,true,DataStructures.Stack{Tuple{Float64,Array{Float64,1},Void}},ResettableStacks.ResettableStack{Tuple{Float64,Array{Float64,1},Void}},DiffEqNoiseProcess.RSWM{:RSwM3,Float64}},DiffEqBase.SplitSDEProblem{Array{Float64,1},Float64,true,Void,Tuple{##69#70,##71#72},##67#68,Void,UniformScaling{Int64},Array{Float64,2}},StochasticDiffEq.IIF1M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}},StochasticDiffEq.LinearInterpolationData{Array{Array{Float64,1},1},Array{Float64,1}}},StochasticDiffEq.IIF1MCache{Array{Float64,1},Array{Float64,1},StochasticDiffEq.DiffCache{Float64,ForwardDiff.Dual{2,Float64}},StochasticDiffEq.RHS_IIF1{Tuple{##69#70,##71#72},Array{Float64,1},Float64,StochasticDiffEq.DiffCache{Float64,ForwardDiff.Dual{2,Float64}},Tuple{Int64},Base.OneTo{Int64}},NLsolve.DifferentiableMultivariateFunction,Array{Float64,1},Array{Float64,2},Array{Float64,1},Array{Float64,1}},Void,Tuple{##69#70,##71#72},##67#68,StochasticDiffEq.SDEOptions{Float64,Float64,Float64,Float64,DiffEqBase.#ODE_DEFAULT_NORM,DiffEqBase.CallbackSet{Tuple{},Tuple{}},DiffEqBase.#ODE_DEFAULT_ISOUTOFDOMAIN,DiffEqBase.#ODE_DEFAULT_PROG_MESSAGE,DiffEqBase.#ODE_DEFAULT_UNSTABLE_CHECK,DataStructures.BinaryHeap{Float64,DataStructures.LessThan},Void,Void},Void}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/solve.jl:354
 [10] #solve#46(::Array{Any,1}, ::Function, ::DiffEqBase.SplitSDEProblem{Array{Float64,1},Float64,true,Void,Tuple{##69#70,##71#72},##67#68,Void,UniformScaling{Int64},Array{Float64,2}}, ::StochasticDiffEq.IIF1M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/solve.jl:8
 [11] (::DiffEqBase.#kw##solve)(::Array{Any,1}, ::DiffEqBase.#solve, ::DiffEqBase.SplitSDEProblem{Array{Float64,1},Float64,true,Void,Tuple{##69#70,##71#72},##67#68,Void,UniformScaling{Int64},Array{Float64,2}}, ::StochasticDiffEq.IIF1M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at ./<missing>:0 (repeats 2 times)
 [12] include_from_node1(::String) at ./loading.jl:569
 [13] include(::String) at ./sysimg.jl:14
 [14] macro expansion at /home/vagrant/.julia/v0.6/StochasticDiffEq/test/runtests.jl:17 [inlined]
 [15] macro expansion at ./test.jl:856 [inlined]
 [16] macro expansion at ./util.jl:237 [inlined]
 [17] anonymous at ./<missing>:?
 [18] include_from_node1(::String) at ./loading.jl:569
 [19] include(::String) at ./sysimg.jl:14
 [20] process_options(::Base.JLOptions) at ./client.jl:305
 [21] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/StochasticDiffEq/test/iif_methods.jl, in expression starting on line 86
WARNING: Array{T}(::Type{T}, m::Int) is deprecated, use Array{T}(m) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] Array(::Type{NLsolve.SolverState}, ::Int64) at ./deprecated.jl:51
 [3] Type at /home/vagrant/.julia/v0.6/NLsolve/src/solver_state_results.jl:20 [inlined]
 [4] trust_region_(::NLsolve.DifferentiableMultivariateFunction, ::Array{Float64,1}, ::Float64, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::Float64, ::Bool) at /home/vagrant/.julia/v0.6/NLsolve/src/trust_region.jl:99
 [5] #nlsolve#17(::Symbol, ::Float64, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::Function, ::Float64, ::Bool, ::NLsolve.#nlsolve, ::NLsolve.DifferentiableMultivariateFunction, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/NLsolve/src/nlsolve_func_defs.jl:24
 [6] NLSOLVEJL_SETUP at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/misc_utils.jl:51 [inlined]
 [7] perform_step! at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/integrators/iif.jl:128 [inlined]
 [8] perform_step! at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/integrators/iif.jl:87 [inlined]
 [9] solve!(::StochasticDiffEq.SDEIntegrator{StochasticDiffEq.IIF1M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}},Array{Float64,1},Float64,Float64,Float64,Float64,DiffEqNoiseProcess.NoiseProcess{Float64,2,Float64,Array{Float64,1},Void,Void,DiffEqNoiseProcess.#INPLACE_WHITE_NOISE_DIST,DiffEqNoiseProcess.#INPLACE_WHITE_NOISE_BRIDGE,true,DataStructures.Stack{Tuple{Float64,Array{Float64,1},Void}},ResettableStacks.ResettableStack{Tuple{Float64,Array{Float64,1},Void}},DiffEqNoiseProcess.RSWM{:RSwM3,Float64}},Array{Float64,1},DiffEqBase.RODESolution{Float64,2,Array{Array{Float64,1},1},Array{Array{Float64,1},1},Dict{Symbol,Float64},Array{Float64,1},DiffEqNoiseProcess.NoiseProcess{Float64,2,Float64,Array{Float64,1},Void,Void,DiffEqNoiseProcess.#INPLACE_WHITE_NOISE_DIST,DiffEqNoiseProcess.#INPLACE_WHITE_NOISE_BRIDGE,true,DataStructures.Stack{Tuple{Float64,Array{Float64,1},Void}},ResettableStacks.ResettableStack{Tuple{Float64,Array{Float64,1},Void}},DiffEqNoiseProcess.RSWM{:RSwM3,Float64}},DiffEqBase.SplitSDEProblem{Array{Float64,1},Float64,true,Void,Tuple{##69#70,##71#72},##67#68,Void,UniformScaling{Int64},Array{Float64,2}},StochasticDiffEq.IIF1M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}},StochasticDiffEq.LinearInterpolationData{Array{Array{Float64,1},1},Array{Float64,1}}},StochasticDiffEq.IIF1MCache{Array{Float64,1},Array{Float64,1},StochasticDiffEq.DiffCache{Float64,ForwardDiff.Dual{2,Float64}},StochasticDiffEq.RHS_IIF1{Tuple{##69#70,##71#72},Array{Float64,1},Float64,StochasticDiffEq.DiffCache{Float64,ForwardDiff.Dual{2,Float64}},Tuple{Int64},Base.OneTo{Int64}},NLsolve.DifferentiableMultivariateFunction,Array{Float64,1},Array{Float64,2},Array{Float64,1},Array{Float64,1}},Void,Tuple{##69#70,##71#72},##67#68,StochasticDiffEq.SDEOptions{Float64,Float64,Float64,Float64,DiffEqBase.#ODE_DEFAULT_NORM,DiffEqBase.CallbackSet{Tuple{},Tuple{}},DiffEqBase.#ODE_DEFAULT_ISOUTOFDOMAIN,DiffEqBase.#ODE_DEFAULT_PROG_MESSAGE,DiffEqBase.#ODE_DEFAULT_UNSTABLE_CHECK,DataStructures.BinaryHeap{Float64,DataStructures.LessThan},Void,Void},Void}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/solve.jl:354
 [10] #solve#46(::Array{Any,1}, ::Function, ::DiffEqBase.SplitSDEProblem{Array{Float64,1},Float64,true,Void,Tuple{##69#70,##71#72},##67#68,Void,UniformScaling{Int64},Array{Float64,2}}, ::StochasticDiffEq.IIF1M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/solve.jl:8
 [11] (::DiffEqBase.#kw##solve)(::Array{Any,1}, ::DiffEqBase.#solve, ::DiffEqBase.SplitSDEProblem{Array{Float64,1},Float64,true,Void,Tuple{##69#70,##71#72},##67#68,Void,UniformScaling{Int64},Array{Float64,2}}, ::StochasticDiffEq.IIF1M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at ./<missing>:0 (repeats 2 times)
 [12] include_from_node1(::String) at ./loading.jl:569
 [13] include(::String) at ./sysimg.jl:14
 [14] macro expansion at /home/vagrant/.julia/v0.6/StochasticDiffEq/test/runtests.jl:17 [inlined]
 [15] macro expansion at ./test.jl:856 [inlined]
 [16] macro expansion at ./util.jl:237 [inlined]
 [17] anonymous at ./<missing>:?
 [18] include_from_node1(::String) at ./loading.jl:569
 [19] include(::String) at ./sysimg.jl:14
 [20] process_options(::Base.JLOptions) at ./client.jl:305
 [21] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/StochasticDiffEq/test/iif_methods.jl, in expression starting on line 86
IIF
WARNING: Array{T}(::Type{T}, m::Int, n::Int) is deprecated, use Array{T}(m, n) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] Array(::Type{Float64}, ::Int64, ::Int64) at ./deprecated.jl:51
 [3] trust_region_(::NLsolve.DifferentiableMultivariateFunction, ::Array{Float64,1}, ::Float64, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::Float64, ::Bool) at /home/vagrant/.julia/v0.6/NLsolve/src/trust_region.jl:82
 [4] #nlsolve#17(::Symbol, ::Float64, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::Function, ::Float64, ::Bool, ::NLsolve.#nlsolve, ::NLsolve.DifferentiableMultivariateFunction, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/NLsolve/src/nlsolve_func_defs.jl:24
 [5] NLSOLVEJL_SETUP at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/misc_utils.jl:51 [inlined]
 [6] perform_step! at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/integrators/iif.jl:128 [inlined]
 [7] perform_step! at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/integrators/iif.jl:87 [inlined]
 [8] solve!(::StochasticDiffEq.SDEIntegrator{StochasticDiffEq.IIF1M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}},Array{Float64,1},Float64,Float64,Float64,Float64,DiffEqNoiseProcess.NoiseProcess{Float64,2,Float64,Array{Float64,1},Void,Void,DiffEqNoiseProcess.#INPLACE_WHITE_NOISE_DIST,DiffEqNoiseProcess.#INPLACE_WHITE_NOISE_BRIDGE,true,DataStructures.Stack{Tuple{Float64,Array{Float64,1},Void}},ResettableStacks.ResettableStack{Tuple{Float64,Array{Float64,1},Void}},DiffEqNoiseProcess.RSWM{:RSwM3,Float64}},Array{Float64,1},DiffEqBase.RODESolution{Float64,2,Array{Array{Float64,1},1},Array{Array{Float64,1},1},Dict{Symbol,Float64},Array{Float64,1},DiffEqNoiseProcess.NoiseProcess{Float64,2,Float64,Array{Float64,1},Void,Void,DiffEqNoiseProcess.#INPLACE_WHITE_NOISE_DIST,DiffEqNoiseProcess.#INPLACE_WHITE_NOISE_BRIDGE,true,DataStructures.Stack{Tuple{Float64,Array{Float64,1},Void}},ResettableStacks.ResettableStack{Tuple{Float64,Array{Float64,1},Void}},DiffEqNoiseProcess.RSWM{:RSwM3,Float64}},DiffEqBase.SplitSDEProblem{Array{Float64,1},Float64,true,Void,Tuple{##69#70,##71#72},##67#68,Void,UniformScaling{Int64},Array{Float64,2}},StochasticDiffEq.IIF1M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}},StochasticDiffEq.LinearInterpolationData{Array{Array{Float64,1},1},Array{Float64,1}}},StochasticDiffEq.IIF1MCache{Array{Float64,1},Array{Float64,1},StochasticDiffEq.DiffCache{Float64,ForwardDiff.Dual{2,Float64}},StochasticDiffEq.RHS_IIF1{Tuple{##69#70,##71#72},Array{Float64,1},Float64,StochasticDiffEq.DiffCache{Float64,ForwardDiff.Dual{2,Float64}},Tuple{Int64},Base.OneTo{Int64}},NLsolve.DifferentiableMultivariateFunction,Array{Float64,1},Array{Float64,2},Array{Float64,1},Array{Float64,1}},Void,Tuple{##69#70,##71#72},##67#68,StochasticDiffEq.SDEOptions{Float64,Float64,Float64,Float64,DiffEqBase.#ODE_DEFAULT_NORM,DiffEqBase.CallbackSet{Tuple{},Tuple{}},DiffEqBase.#ODE_DEFAULT_ISOUTOFDOMAIN,DiffEqBase.#ODE_DEFAULT_PROG_MESSAGE,DiffEqBase.#ODE_DEFAULT_UNSTABLE_CHECK,DataStructures.BinaryHeap{Float64,DataStructures.LessThan},Void,Void},Void}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/solve.jl:354
 [9] #solve#46(::Array{Any,1}, ::Function, ::DiffEqBase.SplitSDEProblem{Array{Float64,1},Float64,true,Void,Tuple{##69#70,##71#72},##67#68,Void,UniformScaling{Int64},Array{Float64,2}}, ::StochasticDiffEq.IIF1M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/solve.jl:8
 [10] (::DiffEqBase.#kw##solve)(::Array{Any,1}, ::DiffEqBase.#solve, ::DiffEqBase.SplitSDEProblem{Array{Float64,1},Float64,true,Void,Tuple{##69#70,##71#72},##67#68,Void,UniformScaling{Int64},Array{Float64,2}}, ::StochasticDiffEq.IIF1M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at ./<missing>:0
 [11] (::DiffEqDevTools.##17#26{Bool,Int64,Bool,Bool,Array{Any,1},Array{Float64,1},DiffEqBase.SplitSDEProblem{Array{Float64,1},Float64,true,Void,Tuple{##69#70,##71#72},##67#68,Void,UniformScaling{Int64},Array{Float64,2}},StochasticDiffEq.IIF1M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}}})(::Int64) at /home/vagrant/.julia/v0.6/DiffEqDevTools/src/convergence.jl:36
 [12] (::Base.##558#563{DiffEqDevTools.##17#26{Bool,Int64,Bool,Bool,Array{Any,1},Array{Float64,1},DiffEqBase.SplitSDEProblem{Array{Float64,1},Float64,true,Void,Tuple{##69#70,##71#72},##67#68,Void,UniformScaling{Int64},Array{Float64,2}},StochasticDiffEq.IIF1M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}}}})(::Base.RefValue{Any}, ::Tuple{Int64}) at ./asyncmap.jl:100
 [13] macro expansion at ./asyncmap.jl:235 [inlined]
 [14] (::Base.##574#575{Base.##558#563{DiffEqDevTools.##17#26{Bool,Int64,Bool,Bool,Array{Any,1},Array{Float64,1},DiffEqBase.SplitSDEProblem{Array{Float64,1},Float64,true,Void,Tuple{##69#70,##71#72},##67#68,Void,UniformScaling{Int64},Array{Float64,2}},StochasticDiffEq.IIF1M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}}}},Channel{Any},Void})() at ./event.jl:73
while loading /home/vagrant/.julia/v0.6/StochasticDiffEq/test/iif_methods.jl, in expression starting on line 92
WARNING: !(B::BitArray) is deprecated, use .!(B) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] !(::BitArray{1}) at ./deprecated.jl:51
 [3] check_isfinite(::Array{Float64,1}) at /home/vagrant/.julia/v0.6/NLsolve/src/utils.jl:32
 [4] trust_region_(::NLsolve.DifferentiableMultivariateFunction, ::Array{Float64,1}, ::Float64, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::Float64, ::Bool) at /home/vagrant/.julia/v0.6/NLsolve/src/trust_region.jl:91
 [5] #nlsolve#17(::Symbol, ::Float64, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::Function, ::Float64, ::Bool, ::NLsolve.#nlsolve, ::NLsolve.DifferentiableMultivariateFunction, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/NLsolve/src/nlsolve_func_defs.jl:24
 [6] NLSOLVEJL_SETUP at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/misc_utils.jl:51 [inlined]
 [7] perform_step! at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/integrators/iif.jl:128 [inlined]
 [8] perform_step! at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/integrators/iif.jl:87 [inlined]
 [9] solve!(::StochasticDiffEq.SDEIntegrator{StochasticDiffEq.IIF1M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}},Array{Float64,1},Float64,Float64,Float64,Float64,DiffEqNoiseProcess.NoiseProcess{Float64,2,Float64,Array{Float64,1},Void,Void,DiffEqNoiseProcess.#INPLACE_WHITE_NOISE_DIST,DiffEqNoiseProcess.#INPLACE_WHITE_NOISE_BRIDGE,true,DataStructures.Stack{Tuple{Float64,Array{Float64,1},Void}},ResettableStacks.ResettableStack{Tuple{Float64,Array{Float64,1},Void}},DiffEqNoiseProcess.RSWM{:RSwM3,Float64}},Array{Float64,1},DiffEqBase.RODESolution{Float64,2,Array{Array{Float64,1},1},Array{Array{Float64,1},1},Dict{Symbol,Float64},Array{Float64,1},DiffEqNoiseProcess.NoiseProcess{Float64,2,Float64,Array{Float64,1},Void,Void,DiffEqNoiseProcess.#INPLACE_WHITE_NOISE_DIST,DiffEqNoiseProcess.#INPLACE_WHITE_NOISE_BRIDGE,true,DataStructures.Stack{Tuple{Float64,Array{Float64,1},Void}},ResettableStacks.ResettableStack{Tuple{Float64,Array{Float64,1},Void}},DiffEqNoiseProcess.RSWM{:RSwM3,Float64}},DiffEqBase.SplitSDEProblem{Array{Float64,1},Float64,true,Void,Tuple{##69#70,##71#72},##67#68,Void,UniformScaling{Int64},Array{Float64,2}},StochasticDiffEq.IIF1M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}},StochasticDiffEq.LinearInterpolationData{Array{Array{Float64,1},1},Array{Float64,1}}},StochasticDiffEq.IIF1MCache{Array{Float64,1},Array{Float64,1},StochasticDiffEq.DiffCache{Float64,ForwardDiff.Dual{2,Float64}},StochasticDiffEq.RHS_IIF1{Tuple{##69#70,##71#72},Array{Float64,1},Float64,StochasticDiffEq.DiffCache{Float64,ForwardDiff.Dual{2,Float64}},Tuple{Int64},Base.OneTo{Int64}},NLsolve.DifferentiableMultivariateFunction,Array{Float64,1},Array{Float64,2},Array{Float64,1},Array{Float64,1}},Void,Tuple{##69#70,##71#72},##67#68,StochasticDiffEq.SDEOptions{Float64,Float64,Float64,Float64,DiffEqBase.#ODE_DEFAULT_NORM,DiffEqBase.CallbackSet{Tuple{},Tuple{}},DiffEqBase.#ODE_DEFAULT_ISOUTOFDOMAIN,DiffEqBase.#ODE_DEFAULT_PROG_MESSAGE,DiffEqBase.#ODE_DEFAULT_UNSTABLE_CHECK,DataStructures.BinaryHeap{Float64,DataStructures.LessThan},Void,Void},Void}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/solve.jl:354
 [10] #solve#46(::Array{Any,1}, ::Function, ::DiffEqBase.SplitSDEProblem{Array{Float64,1},Float64,true,Void,Tuple{##69#70,##71#72},##67#68,Void,UniformScaling{Int64},Array{Float64,2}}, ::StochasticDiffEq.IIF1M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/solve.jl:8
 [11] (::DiffEqBase.#kw##solve)(::Array{Any,1}, ::DiffEqBase.#solve, ::DiffEqBase.SplitSDEProblem{Array{Float64,1},Float64,true,Void,Tuple{##69#70,##71#72},##67#68,Void,UniformScaling{Int64},Array{Float64,2}}, ::StochasticDiffEq.IIF1M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at ./<missing>:0
 [12] (::DiffEqDevTools.##17#26{Bool,Int64,Bool,Bool,Array{Any,1},Array{Float64,1},DiffEqBase.SplitSDEProblem{Array{Float64,1},Float64,true,Void,Tuple{##69#70,##71#72},##67#68,Void,UniformScaling{Int64},Array{Float64,2}},StochasticDiffEq.IIF1M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}}})(::Int64) at /home/vagrant/.julia/v0.6/DiffEqDevTools/src/convergence.jl:36
 [13] (::Base.##558#563{DiffEqDevTools.##17#26{Bool,Int64,Bool,Bool,Array{Any,1},Array{Float64,1},DiffEqBase.SplitSDEProblem{Array{Float64,1},Float64,true,Void,Tuple{##69#70,##71#72},##67#68,Void,UniformScaling{Int64},Array{Float64,2}},StochasticDiffEq.IIF1M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}}}})(::Base.RefValue{Any}, ::Tuple{Int64}) at ./asyncmap.jl:100
 [14] macro expansion at ./asyncmap.jl:235 [inlined]
 [15] (::Base.##574#575{Base.##558#563{DiffEqDevTools.##17#26{Bool,Int64,Bool,Bool,Array{Any,1},Array{Float64,1},DiffEqBase.SplitSDEProblem{Array{Float64,1},Float64,true,Void,Tuple{##69#70,##71#72},##67#68,Void,UniformScaling{Int64},Array{Float64,2}},StochasticDiffEq.IIF1M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}}}},Channel{Any},Void})() at ./event.jl:73
while loading /home/vagrant/.julia/v0.6/StochasticDiffEq/test/iif_methods.jl, in expression starting on line 92
WARNING: Array{T}(::Type{T}, m::Int) is deprecated, use Array{T}(m) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] Array(::Type{NLsolve.SolverState}, ::Int64) at ./deprecated.jl:51
 [3] Type at /home/vagrant/.julia/v0.6/NLsolve/src/solver_state_results.jl:20 [inlined]
 [4] trust_region_(::NLsolve.DifferentiableMultivariateFunction, ::Array{Float64,1}, ::Float64, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::Float64, ::Bool) at /home/vagrant/.julia/v0.6/NLsolve/src/trust_region.jl:99
 [5] #nlsolve#17(::Symbol, ::Float64, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::Function, ::Float64, ::Bool, ::NLsolve.#nlsolve, ::NLsolve.DifferentiableMultivariateFunction, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/NLsolve/src/nlsolve_func_defs.jl:24
 [6] NLSOLVEJL_SETUP at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/misc_utils.jl:51 [inlined]
 [7] perform_step! at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/integrators/iif.jl:128 [inlined]
 [8] perform_step! at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/integrators/iif.jl:87 [inlined]
 [9] solve!(::StochasticDiffEq.SDEIntegrator{StochasticDiffEq.IIF1M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}},Array{Float64,1},Float64,Float64,Float64,Float64,DiffEqNoiseProcess.NoiseProcess{Float64,2,Float64,Array{Float64,1},Void,Void,DiffEqNoiseProcess.#INPLACE_WHITE_NOISE_DIST,DiffEqNoiseProcess.#INPLACE_WHITE_NOISE_BRIDGE,true,DataStructures.Stack{Tuple{Float64,Array{Float64,1},Void}},ResettableStacks.ResettableStack{Tuple{Float64,Array{Float64,1},Void}},DiffEqNoiseProcess.RSWM{:RSwM3,Float64}},Array{Float64,1},DiffEqBase.RODESolution{Float64,2,Array{Array{Float64,1},1},Array{Array{Float64,1},1},Dict{Symbol,Float64},Array{Float64,1},DiffEqNoiseProcess.NoiseProcess{Float64,2,Float64,Array{Float64,1},Void,Void,DiffEqNoiseProcess.#INPLACE_WHITE_NOISE_DIST,DiffEqNoiseProcess.#INPLACE_WHITE_NOISE_BRIDGE,true,DataStructures.Stack{Tuple{Float64,Array{Float64,1},Void}},ResettableStacks.ResettableStack{Tuple{Float64,Array{Float64,1},Void}},DiffEqNoiseProcess.RSWM{:RSwM3,Float64}},DiffEqBase.SplitSDEProblem{Array{Float64,1},Float64,true,Void,Tuple{##69#70,##71#72},##67#68,Void,UniformScaling{Int64},Array{Float64,2}},StochasticDiffEq.IIF1M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}},StochasticDiffEq.LinearInterpolationData{Array{Array{Float64,1},1},Array{Float64,1}}},StochasticDiffEq.IIF1MCache{Array{Float64,1},Array{Float64,1},StochasticDiffEq.DiffCache{Float64,ForwardDiff.Dual{2,Float64}},StochasticDiffEq.RHS_IIF1{Tuple{##69#70,##71#72},Array{Float64,1},Float64,StochasticDiffEq.DiffCache{Float64,ForwardDiff.Dual{2,Float64}},Tuple{Int64},Base.OneTo{Int64}},NLsolve.DifferentiableMultivariateFunction,Array{Float64,1},Array{Float64,2},Array{Float64,1},Array{Float64,1}},Void,Tuple{##69#70,##71#72},##67#68,StochasticDiffEq.SDEOptions{Float64,Float64,Float64,Float64,DiffEqBase.#ODE_DEFAULT_NORM,DiffEqBase.CallbackSet{Tuple{},Tuple{}},DiffEqBase.#ODE_DEFAULT_ISOUTOFDOMAIN,DiffEqBase.#ODE_DEFAULT_PROG_MESSAGE,DiffEqBase.#ODE_DEFAULT_UNSTABLE_CHECK,DataStructures.BinaryHeap{Float64,DataStructures.LessThan},Void,Void},Void}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/solve.jl:354
 [10] #solve#46(::Array{Any,1}, ::Function, ::DiffEqBase.SplitSDEProblem{Array{Float64,1},Float64,true,Void,Tuple{##69#70,##71#72},##67#68,Void,UniformScaling{Int64},Array{Float64,2}}, ::StochasticDiffEq.IIF1M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/solve.jl:8
 [11] (::DiffEqBase.#kw##solve)(::Array{Any,1}, ::DiffEqBase.#solve, ::DiffEqBase.SplitSDEProblem{Array{Float64,1},Float64,true,Void,Tuple{##69#70,##71#72},##67#68,Void,UniformScaling{Int64},Array{Float64,2}}, ::StochasticDiffEq.IIF1M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at ./<missing>:0
 [12] (::DiffEqDevTools.##17#26{Bool,Int64,Bool,Bool,Array{Any,1},Array{Float64,1},DiffEqBase.SplitSDEProblem{Array{Float64,1},Float64,true,Void,Tuple{##69#70,##71#72},##67#68,Void,UniformScaling{Int64},Array{Float64,2}},StochasticDiffEq.IIF1M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}}})(::Int64) at /home/vagrant/.julia/v0.6/DiffEqDevTools/src/convergence.jl:36
 [13] (::Base.##558#563{DiffEqDevTools.##17#26{Bool,Int64,Bool,Bool,Array{Any,1},Array{Float64,1},DiffEqBase.SplitSDEProblem{Array{Float64,1},Float64,true,Void,Tuple{##69#70,##71#72},##67#68,Void,UniformScaling{Int64},Array{Float64,2}},StochasticDiffEq.IIF1M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}}}})(::Base.RefValue{Any}, ::Tuple{Int64}) at ./asyncmap.jl:100
 [14] macro expansion at ./asyncmap.jl:235 [inlined]
 [15] (::Base.##574#575{Base.##558#563{DiffEqDevTools.##17#26{Bool,Int64,Bool,Bool,Array{Any,1},Array{Float64,1},DiffEqBase.SplitSDEProblem{Array{Float64,1},Float64,true,Void,Tuple{##69#70,##71#72},##67#68,Void,UniformScaling{Int64},Array{Float64,2}},StochasticDiffEq.IIF1M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}}}},Channel{Any},Void})() at ./event.jl:73
while loading /home/vagrant/.julia/v0.6/StochasticDiffEq/test/iif_methods.jl, in expression starting on line 92
WARNING: Array{T}(::Type{T}, m::Int, n::Int) is deprecated, use Array{T}(m, n) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] Array(::Type{Float64}, ::Int64, ::Int64) at ./deprecated.jl:51
 [3] trust_region_(::NLsolve.DifferentiableMultivariateFunction, ::Array{Float64,1}, ::Float64, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::Float64, ::Bool) at /home/vagrant/.julia/v0.6/NLsolve/src/trust_region.jl:82
 [4] #nlsolve#17(::Symbol, ::Float64, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::Function, ::Float64, ::Bool, ::NLsolve.#nlsolve, ::NLsolve.DifferentiableMultivariateFunction, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/NLsolve/src/nlsolve_func_defs.jl:24
 [5] NLSOLVEJL_SETUP at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/misc_utils.jl:51 [inlined]
 [6] perform_step! at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/integrators/iif.jl:128 [inlined]
 [7] perform_step! at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/integrators/iif.jl:87 [inlined]
 [8] solve!(::StochasticDiffEq.SDEIntegrator{StochasticDiffEq.IIF2M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}},Array{Float64,1},Float64,Float64,Float64,Float64,DiffEqNoiseProcess.NoiseProcess{Float64,2,Float64,Array{Float64,1},Void,Void,DiffEqNoiseProcess.#INPLACE_WHITE_NOISE_DIST,DiffEqNoiseProcess.#INPLACE_WHITE_NOISE_BRIDGE,true,DataStructures.Stack{Tuple{Float64,Array{Float64,1},Void}},ResettableStacks.ResettableStack{Tuple{Float64,Array{Float64,1},Void}},DiffEqNoiseProcess.RSWM{:RSwM3,Float64}},Array{Float64,1},DiffEqBase.RODESolution{Float64,2,Array{Array{Float64,1},1},Array{Array{Float64,1},1},Dict{Symbol,Float64},Array{Float64,1},DiffEqNoiseProcess.NoiseProcess{Float64,2,Float64,Array{Float64,1},Void,Void,DiffEqNoiseProcess.#INPLACE_WHITE_NOISE_DIST,DiffEqNoiseProcess.#INPLACE_WHITE_NOISE_BRIDGE,true,DataStructures.Stack{Tuple{Float64,Array{Float64,1},Void}},ResettableStacks.ResettableStack{Tuple{Float64,Array{Float64,1},Void}},DiffEqNoiseProcess.RSWM{:RSwM3,Float64}},DiffEqBase.SplitSDEProblem{Array{Float64,1},Float64,true,Void,Tuple{##69#70,##71#72},##67#68,Void,UniformScaling{Int64},Array{Float64,2}},StochasticDiffEq.IIF2M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}},StochasticDiffEq.LinearInterpolationData{Array{Array{Float64,1},1},Array{Float64,1}}},StochasticDiffEq.IIF2MCache{Array{Float64,1},Array{Float64,1},StochasticDiffEq.DiffCache{Float64,ForwardDiff.Dual{2,Float64}},StochasticDiffEq.RHS_IIF2{Tuple{##69#70,##71#72},Array{Float64,1},Float64,StochasticDiffEq.DiffCache{Float64,ForwardDiff.Dual{2,Float64}},Tuple{Int64},Base.OneTo{Int64}},NLsolve.DifferentiableMultivariateFunction,Array{Float64,1},Array{Float64,2},Array{Float64,1},Array{Float64,1}},Void,Tuple{##69#70,##71#72},##67#68,StochasticDiffEq.SDEOptions{Float64,Float64,Float64,Float64,DiffEqBase.#ODE_DEFAULT_NORM,DiffEqBase.CallbackSet{Tuple{},Tuple{}},DiffEqBase.#ODE_DEFAULT_ISOUTOFDOMAIN,DiffEqBase.#ODE_DEFAULT_PROG_MESSAGE,DiffEqBase.#ODE_DEFAULT_UNSTABLE_CHECK,DataStructures.BinaryHeap{Float64,DataStructures.LessThan},Void,Void},Void}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/solve.jl:354
 [9] #solve#46(::Array{Any,1}, ::Function, ::DiffEqBase.SplitSDEProblem{Array{Float64,1},Float64,true,Void,Tuple{##69#70,##71#72},##67#68,Void,UniformScaling{Int64},Array{Float64,2}}, ::StochasticDiffEq.IIF2M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/solve.jl:8
 [10] (::DiffEqBase.#kw##solve)(::Array{Any,1}, ::DiffEqBase.#solve, ::DiffEqBase.SplitSDEProblem{Array{Float64,1},Float64,true,Void,Tuple{##69#70,##71#72},##67#68,Void,UniformScaling{Int64},Array{Float64,2}}, ::StochasticDiffEq.IIF2M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at ./<missing>:0
 [11] (::DiffEqDevTools.##17#26{Bool,Int64,Bool,Bool,Array{Any,1},Array{Float64,1},DiffEqBase.SplitSDEProblem{Array{Float64,1},Float64,true,Void,Tuple{##69#70,##71#72},##67#68,Void,UniformScaling{Int64},Array{Float64,2}},StochasticDiffEq.IIF2M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}}})(::Int64) at /home/vagrant/.julia/v0.6/DiffEqDevTools/src/convergence.jl:36
 [12] (::Base.##558#563{DiffEqDevTools.##17#26{Bool,Int64,Bool,Bool,Array{Any,1},Array{Float64,1},DiffEqBase.SplitSDEProblem{Array{Float64,1},Float64,true,Void,Tuple{##69#70,##71#72},##67#68,Void,UniformScaling{Int64},Array{Float64,2}},StochasticDiffEq.IIF2M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}}}})(::Base.RefValue{Any}, ::Tuple{Int64}) at ./asyncmap.jl:100
 [13] macro expansion at ./asyncmap.jl:235 [inlined]
 [14] (::Base.##574#575{Base.##558#563{DiffEqDevTools.##17#26{Bool,Int64,Bool,Bool,Array{Any,1},Array{Float64,1},DiffEqBase.SplitSDEProblem{Array{Float64,1},Float64,true,Void,Tuple{##69#70,##71#72},##67#68,Void,UniformScaling{Int64},Array{Float64,2}},StochasticDiffEq.IIF2M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}}}},Channel{Any},Void})() at ./event.jl:73
while loading /home/vagrant/.julia/v0.6/StochasticDiffEq/test/iif_methods.jl, in expression starting on line 95
WARNING: !(B::BitArray) is deprecated, use .!(B) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] !(::BitArray{1}) at ./deprecated.jl:51
 [3] check_isfinite(::Array{Float64,1}) at /home/vagrant/.julia/v0.6/NLsolve/src/utils.jl:32
 [4] trust_region_(::NLsolve.DifferentiableMultivariateFunction, ::Array{Float64,1}, ::Float64, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::Float64, ::Bool) at /home/vagrant/.julia/v0.6/NLsolve/src/trust_region.jl:91
 [5] #nlsolve#17(::Symbol, ::Float64, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::Function, ::Float64, ::Bool, ::NLsolve.#nlsolve, ::NLsolve.DifferentiableMultivariateFunction, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/NLsolve/src/nlsolve_func_defs.jl:24
 [6] NLSOLVEJL_SETUP at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/misc_utils.jl:51 [inlined]
 [7] perform_step! at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/integrators/iif.jl:128 [inlined]
 [8] perform_step! at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/integrators/iif.jl:87 [inlined]
 [9] solve!(::StochasticDiffEq.SDEIntegrator{StochasticDiffEq.IIF2M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}},Array{Float64,1},Float64,Float64,Float64,Float64,DiffEqNoiseProcess.NoiseProcess{Float64,2,Float64,Array{Float64,1},Void,Void,DiffEqNoiseProcess.#INPLACE_WHITE_NOISE_DIST,DiffEqNoiseProcess.#INPLACE_WHITE_NOISE_BRIDGE,true,DataStructures.Stack{Tuple{Float64,Array{Float64,1},Void}},ResettableStacks.ResettableStack{Tuple{Float64,Array{Float64,1},Void}},DiffEqNoiseProcess.RSWM{:RSwM3,Float64}},Array{Float64,1},DiffEqBase.RODESolution{Float64,2,Array{Array{Float64,1},1},Array{Array{Float64,1},1},Dict{Symbol,Float64},Array{Float64,1},DiffEqNoiseProcess.NoiseProcess{Float64,2,Float64,Array{Float64,1},Void,Void,DiffEqNoiseProcess.#INPLACE_WHITE_NOISE_DIST,DiffEqNoiseProcess.#INPLACE_WHITE_NOISE_BRIDGE,true,DataStructures.Stack{Tuple{Float64,Array{Float64,1},Void}},ResettableStacks.ResettableStack{Tuple{Float64,Array{Float64,1},Void}},DiffEqNoiseProcess.RSWM{:RSwM3,Float64}},DiffEqBase.SplitSDEProblem{Array{Float64,1},Float64,true,Void,Tuple{##69#70,##71#72},##67#68,Void,UniformScaling{Int64},Array{Float64,2}},StochasticDiffEq.IIF2M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}},StochasticDiffEq.LinearInterpolationData{Array{Array{Float64,1},1},Array{Float64,1}}},StochasticDiffEq.IIF2MCache{Array{Float64,1},Array{Float64,1},StochasticDiffEq.DiffCache{Float64,ForwardDiff.Dual{2,Float64}},StochasticDiffEq.RHS_IIF2{Tuple{##69#70,##71#72},Array{Float64,1},Float64,StochasticDiffEq.DiffCache{Float64,ForwardDiff.Dual{2,Float64}},Tuple{Int64},Base.OneTo{Int64}},NLsolve.DifferentiableMultivariateFunction,Array{Float64,1},Array{Float64,2},Array{Float64,1},Array{Float64,1}},Void,Tuple{##69#70,##71#72},##67#68,StochasticDiffEq.SDEOptions{Float64,Float64,Float64,Float64,DiffEqBase.#ODE_DEFAULT_NORM,DiffEqBase.CallbackSet{Tuple{},Tuple{}},DiffEqBase.#ODE_DEFAULT_ISOUTOFDOMAIN,DiffEqBase.#ODE_DEFAULT_PROG_MESSAGE,DiffEqBase.#ODE_DEFAULT_UNSTABLE_CHECK,DataStructures.BinaryHeap{Float64,DataStructures.LessThan},Void,Void},Void}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/solve.jl:354
 [10] #solve#46(::Array{Any,1}, ::Function, ::DiffEqBase.SplitSDEProblem{Array{Float64,1},Float64,true,Void,Tuple{##69#70,##71#72},##67#68,Void,UniformScaling{Int64},Array{Float64,2}}, ::StochasticDiffEq.IIF2M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/solve.jl:8
 [11] (::DiffEqBase.#kw##solve)(::Array{Any,1}, ::DiffEqBase.#solve, ::DiffEqBase.SplitSDEProblem{Array{Float64,1},Float64,true,Void,Tuple{##69#70,##71#72},##67#68,Void,UniformScaling{Int64},Array{Float64,2}}, ::StochasticDiffEq.IIF2M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at ./<missing>:0
 [12] (::DiffEqDevTools.##17#26{Bool,Int64,Bool,Bool,Array{Any,1},Array{Float64,1},DiffEqBase.SplitSDEProblem{Array{Float64,1},Float64,true,Void,Tuple{##69#70,##71#72},##67#68,Void,UniformScaling{Int64},Array{Float64,2}},StochasticDiffEq.IIF2M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}}})(::Int64) at /home/vagrant/.julia/v0.6/DiffEqDevTools/src/convergence.jl:36
 [13] (::Base.##558#563{DiffEqDevTools.##17#26{Bool,Int64,Bool,Bool,Array{Any,1},Array{Float64,1},DiffEqBase.SplitSDEProblem{Array{Float64,1},Float64,true,Void,Tuple{##69#70,##71#72},##67#68,Void,UniformScaling{Int64},Array{Float64,2}},StochasticDiffEq.IIF2M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}}}})(::Base.RefValue{Any}, ::Tuple{Int64}) at ./asyncmap.jl:100
 [14] macro expansion at ./asyncmap.jl:235 [inlined]
 [15] (::Base.##574#575{Base.##558#563{DiffEqDevTools.##17#26{Bool,Int64,Bool,Bool,Array{Any,1},Array{Float64,1},DiffEqBase.SplitSDEProblem{Array{Float64,1},Float64,true,Void,Tuple{##69#70,##71#72},##67#68,Void,UniformScaling{Int64},Array{Float64,2}},StochasticDiffEq.IIF2M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}}}},Channel{Any},Void})() at ./event.jl:73
while loading /home/vagrant/.julia/v0.6/StochasticDiffEq/test/iif_methods.jl, in expression starting on line 95
WARNING: Array{T}(::Type{T}, m::Int) is deprecated, use Array{T}(m) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] Array(::Type{NLsolve.SolverState}, ::Int64) at ./deprecated.jl:51
 [3] Type at /home/vagrant/.julia/v0.6/NLsolve/src/solver_state_results.jl:20 [inlined]
 [4] trust_region_(::NLsolve.DifferentiableMultivariateFunction, ::Array{Float64,1}, ::Float64, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::Float64, ::Bool) at /home/vagrant/.julia/v0.6/NLsolve/src/trust_region.jl:99
 [5] #nlsolve#17(::Symbol, ::Float64, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::Function, ::Float64, ::Bool, ::NLsolve.#nlsolve, ::NLsolve.DifferentiableMultivariateFunction, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/NLsolve/src/nlsolve_func_defs.jl:24
 [6] NLSOLVEJL_SETUP at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/misc_utils.jl:51 [inlined]
 [7] perform_step! at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/integrators/iif.jl:128 [inlined]
 [8] perform_step! at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/integrators/iif.jl:87 [inlined]
 [9] solve!(::StochasticDiffEq.SDEIntegrator{StochasticDiffEq.IIF2M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}},Array{Float64,1},Float64,Float64,Float64,Float64,DiffEqNoiseProcess.NoiseProcess{Float64,2,Float64,Array{Float64,1},Void,Void,DiffEqNoiseProcess.#INPLACE_WHITE_NOISE_DIST,DiffEqNoiseProcess.#INPLACE_WHITE_NOISE_BRIDGE,true,DataStructures.Stack{Tuple{Float64,Array{Float64,1},Void}},ResettableStacks.ResettableStack{Tuple{Float64,Array{Float64,1},Void}},DiffEqNoiseProcess.RSWM{:RSwM3,Float64}},Array{Float64,1},DiffEqBase.RODESolution{Float64,2,Array{Array{Float64,1},1},Array{Array{Float64,1},1},Dict{Symbol,Float64},Array{Float64,1},DiffEqNoiseProcess.NoiseProcess{Float64,2,Float64,Array{Float64,1},Void,Void,DiffEqNoiseProcess.#INPLACE_WHITE_NOISE_DIST,DiffEqNoiseProcess.#INPLACE_WHITE_NOISE_BRIDGE,true,DataStructures.Stack{Tuple{Float64,Array{Float64,1},Void}},ResettableStacks.ResettableStack{Tuple{Float64,Array{Float64,1},Void}},DiffEqNoiseProcess.RSWM{:RSwM3,Float64}},DiffEqBase.SplitSDEProblem{Array{Float64,1},Float64,true,Void,Tuple{##69#70,##71#72},##67#68,Void,UniformScaling{Int64},Array{Float64,2}},StochasticDiffEq.IIF2M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}},StochasticDiffEq.LinearInterpolationData{Array{Array{Float64,1},1},Array{Float64,1}}},StochasticDiffEq.IIF2MCache{Array{Float64,1},Array{Float64,1},StochasticDiffEq.DiffCache{Float64,ForwardDiff.Dual{2,Float64}},StochasticDiffEq.RHS_IIF2{Tuple{##69#70,##71#72},Array{Float64,1},Float64,StochasticDiffEq.DiffCache{Float64,ForwardDiff.Dual{2,Float64}},Tuple{Int64},Base.OneTo{Int64}},NLsolve.DifferentiableMultivariateFunction,Array{Float64,1},Array{Float64,2},Array{Float64,1},Array{Float64,1}},Void,Tuple{##69#70,##71#72},##67#68,StochasticDiffEq.SDEOptions{Float64,Float64,Float64,Float64,DiffEqBase.#ODE_DEFAULT_NORM,DiffEqBase.CallbackSet{Tuple{},Tuple{}},DiffEqBase.#ODE_DEFAULT_ISOUTOFDOMAIN,DiffEqBase.#ODE_DEFAULT_PROG_MESSAGE,DiffEqBase.#ODE_DEFAULT_UNSTABLE_CHECK,DataStructures.BinaryHeap{Float64,DataStructures.LessThan},Void,Void},Void}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/solve.jl:354
 [10] #solve#46(::Array{Any,1}, ::Function, ::DiffEqBase.SplitSDEProblem{Array{Float64,1},Float64,true,Void,Tuple{##69#70,##71#72},##67#68,Void,UniformScaling{Int64},Array{Float64,2}}, ::StochasticDiffEq.IIF2M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/solve.jl:8
 [11] (::DiffEqBase.#kw##solve)(::Array{Any,1}, ::DiffEqBase.#solve, ::DiffEqBase.SplitSDEProblem{Array{Float64,1},Float64,true,Void,Tuple{##69#70,##71#72},##67#68,Void,UniformScaling{Int64},Array{Float64,2}}, ::StochasticDiffEq.IIF2M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at ./<missing>:0
 [12] (::DiffEqDevTools.##17#26{Bool,Int64,Bool,Bool,Array{Any,1},Array{Float64,1},DiffEqBase.SplitSDEProblem{Array{Float64,1},Float64,true,Void,Tuple{##69#70,##71#72},##67#68,Void,UniformScaling{Int64},Array{Float64,2}},StochasticDiffEq.IIF2M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}}})(::Int64) at /home/vagrant/.julia/v0.6/DiffEqDevTools/src/convergence.jl:36
 [13] (::Base.##558#563{DiffEqDevTools.##17#26{Bool,Int64,Bool,Bool,Array{Any,1},Array{Float64,1},DiffEqBase.SplitSDEProblem{Array{Float64,1},Float64,true,Void,Tuple{##69#70,##71#72},##67#68,Void,UniformScaling{Int64},Array{Float64,2}},StochasticDiffEq.IIF2M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}}}})(::Base.RefValue{Any}, ::Tuple{Int64}) at ./asyncmap.jl:100
 [14] macro expansion at ./asyncmap.jl:235 [inlined]
 [15] (::Base.##574#575{Base.##558#563{DiffEqDevTools.##17#26{Bool,Int64,Bool,Bool,Array{Any,1},Array{Float64,1},DiffEqBase.SplitSDEProblem{Array{Float64,1},Float64,true,Void,Tuple{##69#70,##71#72},##67#68,Void,UniformScaling{Int64},Array{Float64,2}},StochasticDiffEq.IIF2M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}}}},Channel{Any},Void})() at ./event.jl:73
while loading /home/vagrant/.julia/v0.6/StochasticDiffEq/test/iif_methods.jl, in expression starting on line 95
IIF no noise
WARNING: Array{T}(::Type{T}, m::Int, n::Int) is deprecated, use Array{T}(m, n) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] Array(::Type{Float64}, ::Int64, ::Int64) at ./deprecated.jl:51
 [3] trust_region_(::NLsolve.DifferentiableMultivariateFunction, ::Array{Float64,1}, ::Float64, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::Float64, ::Bool) at /home/vagrant/.julia/v0.6/NLsolve/src/trust_region.jl:82
 [4] #nlsolve#17(::Symbol, ::Float64, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::Function, ::Float64, ::Bool, ::NLsolve.#nlsolve, ::NLsolve.DifferentiableMultivariateFunction, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/NLsolve/src/nlsolve_func_defs.jl:24
 [5] NLSOLVEJL_SETUP at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/misc_utils.jl:51 [inlined]
 [6] perform_step! at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/integrators/iif.jl:128 [inlined]
 [7] perform_step! at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/integrators/iif.jl:87 [inlined]
 [8] solve!(::StochasticDiffEq.SDEIntegrator{StochasticDiffEq.IIF1M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}},Array{Float64,1},Float64,Float64,Float64,Float64,DiffEqNoiseProcess.NoiseProcess{Float64,2,Float64,Array{Float64,1},Void,Void,DiffEqNoiseProcess.#INPLACE_WHITE_NOISE_DIST,DiffEqNoiseProcess.#INPLACE_WHITE_NOISE_BRIDGE,true,DataStructures.Stack{Tuple{Float64,Array{Float64,1},Void}},ResettableStacks.ResettableStack{Tuple{Float64,Array{Float64,1},Void}},DiffEqNoiseProcess.RSWM{:RSwM3,Float64}},Array{Float64,1},DiffEqBase.RODESolution{Float64,2,Array{Array{Float64,1},1},Array{Array{Float64,1},1},Dict{Symbol,Float64},Array{Float64,1},DiffEqNoiseProcess.NoiseProcess{Float64,2,Float64,Array{Float64,1},Void,Void,DiffEqNoiseProcess.#INPLACE_WHITE_NOISE_DIST,DiffEqNoiseProcess.#INPLACE_WHITE_NOISE_BRIDGE,true,DataStructures.Stack{Tuple{Float64,Array{Float64,1},Void}},ResettableStacks.ResettableStack{Tuple{Float64,Array{Float64,1},Void}},DiffEqNoiseProcess.RSWM{:RSwM3,Float64}},DiffEqBase.SplitSDEProblem{Array{Float64,1},Float64,true,Void,Tuple{##73#74,##75#76},##77#78,Void,UniformScaling{Int64},Array{Float64,2}},StochasticDiffEq.IIF1M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}},StochasticDiffEq.LinearInterpolationData{Array{Array{Float64,1},1},Array{Float64,1}}},StochasticDiffEq.IIF1MCache{Array{Float64,1},Array{Float64,1},StochasticDiffEq.DiffCache{Float64,ForwardDiff.Dual{2,Float64}},StochasticDiffEq.RHS_IIF1{Tuple{##73#74,##75#76},Array{Float64,1},Float64,StochasticDiffEq.DiffCache{Float64,ForwardDiff.Dual{2,Float64}},Tuple{Int64},Base.OneTo{Int64}},NLsolve.DifferentiableMultivariateFunction,Array{Float64,1},Array{Float64,2},Array{Float64,1},Array{Float64,1}},Void,Tuple{##73#74,##75#76},##77#78,StochasticDiffEq.SDEOptions{Float64,Float64,Float64,Float64,DiffEqBase.#ODE_DEFAULT_NORM,DiffEqBase.CallbackSet{Tuple{},Tuple{}},DiffEqBase.#ODE_DEFAULT_ISOUTOFDOMAIN,DiffEqBase.#ODE_DEFAULT_PROG_MESSAGE,DiffEqBase.#ODE_DEFAULT_UNSTABLE_CHECK,DataStructures.BinaryHeap{Float64,DataStructures.LessThan},Void,Void},Void}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/solve.jl:354
 [9] #solve#46(::Array{Any,1}, ::Function, ::DiffEqBase.SplitSDEProblem{Array{Float64,1},Float64,true,Void,Tuple{##73#74,##75#76},##77#78,Void,UniformScaling{Int64},Array{Float64,2}}, ::StochasticDiffEq.IIF1M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/solve.jl:8
 [10] (::DiffEqBase.#kw##solve)(::Array{Any,1}, ::DiffEqBase.#solve, ::DiffEqBase.SplitSDEProblem{Array{Float64,1},Float64,true,Void,Tuple{##73#74,##75#76},##77#78,Void,UniformScaling{Int64},Array{Float64,2}}, ::StochasticDiffEq.IIF1M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at ./<missing>:0
 [11] (::DiffEqDevTools.##17#26{Bool,Int64,Bool,Bool,Array{Any,1},Array{Float64,1},DiffEqBase.SplitSDEProblem{Array{Float64,1},Float64,true,Void,Tuple{##73#74,##75#76},##77#78,Void,UniformScaling{Int64},Array{Float64,2}},StochasticDiffEq.IIF1M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}}})(::Int64) at /home/vagrant/.julia/v0.6/DiffEqDevTools/src/convergence.jl:36
 [12] (::Base.##558#563{DiffEqDevTools.##17#26{Bool,Int64,Bool,Bool,Array{Any,1},Array{Float64,1},DiffEqBase.SplitSDEProblem{Array{Float64,1},Float64,true,Void,Tuple{##73#74,##75#76},##77#78,Void,UniformScaling{Int64},Array{Float64,2}},StochasticDiffEq.IIF1M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}}}})(::Base.RefValue{Any}, ::Tuple{Int64}) at ./asyncmap.jl:100
 [13] macro expansion at ./asyncmap.jl:235 [inlined]
 [14] (::Base.##574#575{Base.##558#563{DiffEqDevTools.##17#26{Bool,Int64,Bool,Bool,Array{Any,1},Array{Float64,1},DiffEqBase.SplitSDEProblem{Array{Float64,1},Float64,true,Void,Tuple{##73#74,##75#76},##77#78,Void,UniformScaling{Int64},Array{Float64,2}},StochasticDiffEq.IIF1M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}}}},Channel{Any},Void})() at ./event.jl:73
while loading /home/vagrant/.julia/v0.6/StochasticDiffEq/test/iif_methods.jl, in expression starting on line 99
WARNING: !(B::BitArray) is deprecated, use .!(B) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] !(::BitArray{1}) at ./deprecated.jl:51
 [3] check_isfinite(::Array{Float64,1}) at /home/vagrant/.julia/v0.6/NLsolve/src/utils.jl:32
 [4] trust_region_(::NLsolve.DifferentiableMultivariateFunction, ::Array{Float64,1}, ::Float64, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::Float64, ::Bool) at /home/vagrant/.julia/v0.6/NLsolve/src/trust_region.jl:91
 [5] #nlsolve#17(::Symbol, ::Float64, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::Function, ::Float64, ::Bool, ::NLsolve.#nlsolve, ::NLsolve.DifferentiableMultivariateFunction, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/NLsolve/src/nlsolve_func_defs.jl:24
 [6] NLSOLVEJL_SETUP at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/misc_utils.jl:51 [inlined]
 [7] perform_step! at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/integrators/iif.jl:128 [inlined]
 [8] perform_step! at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/integrators/iif.jl:87 [inlined]
 [9] solve!(::StochasticDiffEq.SDEIntegrator{StochasticDiffEq.IIF1M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}},Array{Float64,1},Float64,Float64,Float64,Float64,DiffEqNoiseProcess.NoiseProcess{Float64,2,Float64,Array{Float64,1},Void,Void,DiffEqNoiseProcess.#INPLACE_WHITE_NOISE_DIST,DiffEqNoiseProcess.#INPLACE_WHITE_NOISE_BRIDGE,true,DataStructures.Stack{Tuple{Float64,Array{Float64,1},Void}},ResettableStacks.ResettableStack{Tuple{Float64,Array{Float64,1},Void}},DiffEqNoiseProcess.RSWM{:RSwM3,Float64}},Array{Float64,1},DiffEqBase.RODESolution{Float64,2,Array{Array{Float64,1},1},Array{Array{Float64,1},1},Dict{Symbol,Float64},Array{Float64,1},DiffEqNoiseProcess.NoiseProcess{Float64,2,Float64,Array{Float64,1},Void,Void,DiffEqNoiseProcess.#INPLACE_WHITE_NOISE_DIST,DiffEqNoiseProcess.#INPLACE_WHITE_NOISE_BRIDGE,true,DataStructures.Stack{Tuple{Float64,Array{Float64,1},Void}},ResettableStacks.ResettableStack{Tuple{Float64,Array{Float64,1},Void}},DiffEqNoiseProcess.RSWM{:RSwM3,Float64}},DiffEqBase.SplitSDEProblem{Array{Float64,1},Float64,true,Void,Tuple{##73#74,##75#76},##77#78,Void,UniformScaling{Int64},Array{Float64,2}},StochasticDiffEq.IIF1M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}},StochasticDiffEq.LinearInterpolationData{Array{Array{Float64,1},1},Array{Float64,1}}},StochasticDiffEq.IIF1MCache{Array{Float64,1},Array{Float64,1},StochasticDiffEq.DiffCache{Float64,ForwardDiff.Dual{2,Float64}},StochasticDiffEq.RHS_IIF1{Tuple{##73#74,##75#76},Array{Float64,1},Float64,StochasticDiffEq.DiffCache{Float64,ForwardDiff.Dual{2,Float64}},Tuple{Int64},Base.OneTo{Int64}},NLsolve.DifferentiableMultivariateFunction,Array{Float64,1},Array{Float64,2},Array{Float64,1},Array{Float64,1}},Void,Tuple{##73#74,##75#76},##77#78,StochasticDiffEq.SDEOptions{Float64,Float64,Float64,Float64,DiffEqBase.#ODE_DEFAULT_NORM,DiffEqBase.CallbackSet{Tuple{},Tuple{}},DiffEqBase.#ODE_DEFAULT_ISOUTOFDOMAIN,DiffEqBase.#ODE_DEFAULT_PROG_MESSAGE,DiffEqBase.#ODE_DEFAULT_UNSTABLE_CHECK,DataStructures.BinaryHeap{Float64,DataStructures.LessThan},Void,Void},Void}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/solve.jl:354
 [10] #solve#46(::Array{Any,1}, ::Function, ::DiffEqBase.SplitSDEProblem{Array{Float64,1},Float64,true,Void,Tuple{##73#74,##75#76},##77#78,Void,UniformScaling{Int64},Array{Float64,2}}, ::StochasticDiffEq.IIF1M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/solve.jl:8
 [11] (::DiffEqBase.#kw##solve)(::Array{Any,1}, ::DiffEqBase.#solve, ::DiffEqBase.SplitSDEProblem{Array{Float64,1},Float64,true,Void,Tuple{##73#74,##75#76},##77#78,Void,UniformScaling{Int64},Array{Float64,2}}, ::StochasticDiffEq.IIF1M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at ./<missing>:0
 [12] (::DiffEqDevTools.##17#26{Bool,Int64,Bool,Bool,Array{Any,1},Array{Float64,1},DiffEqBase.SplitSDEProblem{Array{Float64,1},Float64,true,Void,Tuple{##73#74,##75#76},##77#78,Void,UniformScaling{Int64},Array{Float64,2}},StochasticDiffEq.IIF1M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}}})(::Int64) at /home/vagrant/.julia/v0.6/DiffEqDevTools/src/convergence.jl:36
 [13] (::Base.##558#563{DiffEqDevTools.##17#26{Bool,Int64,Bool,Bool,Array{Any,1},Array{Float64,1},DiffEqBase.SplitSDEProblem{Array{Float64,1},Float64,true,Void,Tuple{##73#74,##75#76},##77#78,Void,UniformScaling{Int64},Array{Float64,2}},StochasticDiffEq.IIF1M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}}}})(::Base.RefValue{Any}, ::Tuple{Int64}) at ./asyncmap.jl:100
 [14] macro expansion at ./asyncmap.jl:235 [inlined]
 [15] (::Base.##574#575{Base.##558#563{DiffEqDevTools.##17#26{Bool,Int64,Bool,Bool,Array{Any,1},Array{Float64,1},DiffEqBase.SplitSDEProblem{Array{Float64,1},Float64,true,Void,Tuple{##73#74,##75#76},##77#78,Void,UniformScaling{Int64},Array{Float64,2}},StochasticDiffEq.IIF1M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}}}},Channel{Any},Void})() at ./event.jl:73
while loading /home/vagrant/.julia/v0.6/StochasticDiffEq/test/iif_methods.jl, in expression starting on line 99
WARNING: Array{T}(::Type{T}, m::Int) is deprecated, use Array{T}(m) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] Array(::Type{NLsolve.SolverState}, ::Int64) at ./deprecated.jl:51
 [3] Type at /home/vagrant/.julia/v0.6/NLsolve/src/solver_state_results.jl:20 [inlined]
 [4] trust_region_(::NLsolve.DifferentiableMultivariateFunction, ::Array{Float64,1}, ::Float64, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::Float64, ::Bool) at /home/vagrant/.julia/v0.6/NLsolve/src/trust_region.jl:99
 [5] #nlsolve#17(::Symbol, ::Float64, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::Function, ::Float64, ::Bool, ::NLsolve.#nlsolve, ::NLsolve.DifferentiableMultivariateFunction, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/NLsolve/src/nlsolve_func_defs.jl:24
 [6] NLSOLVEJL_SETUP at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/misc_utils.jl:51 [inlined]
 [7] perform_step! at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/integrators/iif.jl:128 [inlined]
 [8] perform_step! at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/integrators/iif.jl:87 [inlined]
 [9] solve!(::StochasticDiffEq.SDEIntegrator{StochasticDiffEq.IIF1M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}},Array{Float64,1},Float64,Float64,Float64,Float64,DiffEqNoiseProcess.NoiseProcess{Float64,2,Float64,Array{Float64,1},Void,Void,DiffEqNoiseProcess.#INPLACE_WHITE_NOISE_DIST,DiffEqNoiseProcess.#INPLACE_WHITE_NOISE_BRIDGE,true,DataStructures.Stack{Tuple{Float64,Array{Float64,1},Void}},ResettableStacks.ResettableStack{Tuple{Float64,Array{Float64,1},Void}},DiffEqNoiseProcess.RSWM{:RSwM3,Float64}},Array{Float64,1},DiffEqBase.RODESolution{Float64,2,Array{Array{Float64,1},1},Array{Array{Float64,1},1},Dict{Symbol,Float64},Array{Float64,1},DiffEqNoiseProcess.NoiseProcess{Float64,2,Float64,Array{Float64,1},Void,Void,DiffEqNoiseProcess.#INPLACE_WHITE_NOISE_DIST,DiffEqNoiseProcess.#INPLACE_WHITE_NOISE_BRIDGE,true,DataStructures.Stack{Tuple{Float64,Array{Float64,1},Void}},ResettableStacks.ResettableStack{Tuple{Float64,Array{Float64,1},Void}},DiffEqNoiseProcess.RSWM{:RSwM3,Float64}},DiffEqBase.SplitSDEProblem{Array{Float64,1},Float64,true,Void,Tuple{##73#74,##75#76},##77#78,Void,UniformScaling{Int64},Array{Float64,2}},StochasticDiffEq.IIF1M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}},StochasticDiffEq.LinearInterpolationData{Array{Array{Float64,1},1},Array{Float64,1}}},StochasticDiffEq.IIF1MCache{Array{Float64,1},Array{Float64,1},StochasticDiffEq.DiffCache{Float64,ForwardDiff.Dual{2,Float64}},StochasticDiffEq.RHS_IIF1{Tuple{##73#74,##75#76},Array{Float64,1},Float64,StochasticDiffEq.DiffCache{Float64,ForwardDiff.Dual{2,Float64}},Tuple{Int64},Base.OneTo{Int64}},NLsolve.DifferentiableMultivariateFunction,Array{Float64,1},Array{Float64,2},Array{Float64,1},Array{Float64,1}},Void,Tuple{##73#74,##75#76},##77#78,StochasticDiffEq.SDEOptions{Float64,Float64,Float64,Float64,DiffEqBase.#ODE_DEFAULT_NORM,DiffEqBase.CallbackSet{Tuple{},Tuple{}},DiffEqBase.#ODE_DEFAULT_ISOUTOFDOMAIN,DiffEqBase.#ODE_DEFAULT_PROG_MESSAGE,DiffEqBase.#ODE_DEFAULT_UNSTABLE_CHECK,DataStructures.BinaryHeap{Float64,DataStructures.LessThan},Void,Void},Void}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/solve.jl:354
 [10] #solve#46(::Array{Any,1}, ::Function, ::DiffEqBase.SplitSDEProblem{Array{Float64,1},Float64,true,Void,Tuple{##73#74,##75#76},##77#78,Void,UniformScaling{Int64},Array{Float64,2}}, ::StochasticDiffEq.IIF1M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/solve.jl:8
 [11] (::DiffEqBase.#kw##solve)(::Array{Any,1}, ::DiffEqBase.#solve, ::DiffEqBase.SplitSDEProblem{Array{Float64,1},Float64,true,Void,Tuple{##73#74,##75#76},##77#78,Void,UniformScaling{Int64},Array{Float64,2}}, ::StochasticDiffEq.IIF1M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at ./<missing>:0
 [12] (::DiffEqDevTools.##17#26{Bool,Int64,Bool,Bool,Array{Any,1},Array{Float64,1},DiffEqBase.SplitSDEProblem{Array{Float64,1},Float64,true,Void,Tuple{##73#74,##75#76},##77#78,Void,UniformScaling{Int64},Array{Float64,2}},StochasticDiffEq.IIF1M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}}})(::Int64) at /home/vagrant/.julia/v0.6/DiffEqDevTools/src/convergence.jl:36
 [13] (::Base.##558#563{DiffEqDevTools.##17#26{Bool,Int64,Bool,Bool,Array{Any,1},Array{Float64,1},DiffEqBase.SplitSDEProblem{Array{Float64,1},Float64,true,Void,Tuple{##73#74,##75#76},##77#78,Void,UniformScaling{Int64},Array{Float64,2}},StochasticDiffEq.IIF1M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}}}})(::Base.RefValue{Any}, ::Tuple{Int64}) at ./asyncmap.jl:100
 [14] macro expansion at ./asyncmap.jl:235 [inlined]
 [15] (::Base.##574#575{Base.##558#563{DiffEqDevTools.##17#26{Bool,Int64,Bool,Bool,Array{Any,1},Array{Float64,1},DiffEqBase.SplitSDEProblem{Array{Float64,1},Float64,true,Void,Tuple{##73#74,##75#76},##77#78,Void,UniformScaling{Int64},Array{Float64,2}},StochasticDiffEq.IIF1M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}}}},Channel{Any},Void})() at ./event.jl:73
while loading /home/vagrant/.julia/v0.6/StochasticDiffEq/test/iif_methods.jl, in expression starting on line 99
WARNING: Array{T}(::Type{T}, m::Int, n::Int) is deprecated, use Array{T}(m, n) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] Array(::Type{Float64}, ::Int64, ::Int64) at ./deprecated.jl:51
 [3] trust_region_(::NLsolve.DifferentiableMultivariateFunction, ::Array{Float64,1}, ::Float64, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::Float64, ::Bool) at /home/vagrant/.julia/v0.6/NLsolve/src/trust_region.jl:82
 [4] #nlsolve#17(::Symbol, ::Float64, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::Function, ::Float64, ::Bool, ::NLsolve.#nlsolve, ::NLsolve.DifferentiableMultivariateFunction, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/NLsolve/src/nlsolve_func_defs.jl:24
 [5] NLSOLVEJL_SETUP at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/misc_utils.jl:51 [inlined]
 [6] perform_step! at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/integrators/iif.jl:128 [inlined]
 [7] perform_step! at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/integrators/iif.jl:87 [inlined]
 [8] solve!(::StochasticDiffEq.SDEIntegrator{StochasticDiffEq.IIF2M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}},Array{Float64,1},Float64,Float64,Float64,Float64,DiffEqNoiseProcess.NoiseProcess{Float64,2,Float64,Array{Float64,1},Void,Void,DiffEqNoiseProcess.#INPLACE_WHITE_NOISE_DIST,DiffEqNoiseProcess.#INPLACE_WHITE_NOISE_BRIDGE,true,DataStructures.Stack{Tuple{Float64,Array{Float64,1},Void}},ResettableStacks.ResettableStack{Tuple{Float64,Array{Float64,1},Void}},DiffEqNoiseProcess.RSWM{:RSwM3,Float64}},Array{Float64,1},DiffEqBase.RODESolution{Float64,2,Array{Array{Float64,1},1},Array{Array{Float64,1},1},Dict{Symbol,Float64},Array{Float64,1},DiffEqNoiseProcess.NoiseProcess{Float64,2,Float64,Array{Float64,1},Void,Void,DiffEqNoiseProcess.#INPLACE_WHITE_NOISE_DIST,DiffEqNoiseProcess.#INPLACE_WHITE_NOISE_BRIDGE,true,DataStructures.Stack{Tuple{Float64,Array{Float64,1},Void}},ResettableStacks.ResettableStack{Tuple{Float64,Array{Float64,1},Void}},DiffEqNoiseProcess.RSWM{:RSwM3,Float64}},DiffEqBase.SplitSDEProblem{Array{Float64,1},Float64,true,Void,Tuple{##73#74,##75#76},##77#78,Void,UniformScaling{Int64},Array{Float64,2}},StochasticDiffEq.IIF2M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}},StochasticDiffEq.LinearInterpolationData{Array{Array{Float64,1},1},Array{Float64,1}}},StochasticDiffEq.IIF2MCache{Array{Float64,1},Array{Float64,1},StochasticDiffEq.DiffCache{Float64,ForwardDiff.Dual{2,Float64}},StochasticDiffEq.RHS_IIF2{Tuple{##73#74,##75#76},Array{Float64,1},Float64,StochasticDiffEq.DiffCache{Float64,ForwardDiff.Dual{2,Float64}},Tuple{Int64},Base.OneTo{Int64}},NLsolve.DifferentiableMultivariateFunction,Array{Float64,1},Array{Float64,2},Array{Float64,1},Array{Float64,1}},Void,Tuple{##73#74,##75#76},##77#78,StochasticDiffEq.SDEOptions{Float64,Float64,Float64,Float64,DiffEqBase.#ODE_DEFAULT_NORM,DiffEqBase.CallbackSet{Tuple{},Tuple{}},DiffEqBase.#ODE_DEFAULT_ISOUTOFDOMAIN,DiffEqBase.#ODE_DEFAULT_PROG_MESSAGE,DiffEqBase.#ODE_DEFAULT_UNSTABLE_CHECK,DataStructures.BinaryHeap{Float64,DataStructures.LessThan},Void,Void},Void}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/solve.jl:354
 [9] #solve#46(::Array{Any,1}, ::Function, ::DiffEqBase.SplitSDEProblem{Array{Float64,1},Float64,true,Void,Tuple{##73#74,##75#76},##77#78,Void,UniformScaling{Int64},Array{Float64,2}}, ::StochasticDiffEq.IIF2M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/solve.jl:8
 [10] (::DiffEqBase.#kw##solve)(::Array{Any,1}, ::DiffEqBase.#solve, ::DiffEqBase.SplitSDEProblem{Array{Float64,1},Float64,true,Void,Tuple{##73#74,##75#76},##77#78,Void,UniformScaling{Int64},Array{Float64,2}}, ::StochasticDiffEq.IIF2M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at ./<missing>:0
 [11] (::DiffEqDevTools.##17#26{Bool,Int64,Bool,Bool,Array{Any,1},Array{Float64,1},DiffEqBase.SplitSDEProblem{Array{Float64,1},Float64,true,Void,Tuple{##73#74,##75#76},##77#78,Void,UniformScaling{Int64},Array{Float64,2}},StochasticDiffEq.IIF2M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}}})(::Int64) at /home/vagrant/.julia/v0.6/DiffEqDevTools/src/convergence.jl:36
 [12] (::Base.##558#563{DiffEqDevTools.##17#26{Bool,Int64,Bool,Bool,Array{Any,1},Array{Float64,1},DiffEqBase.SplitSDEProblem{Array{Float64,1},Float64,true,Void,Tuple{##73#74,##75#76},##77#78,Void,UniformScaling{Int64},Array{Float64,2}},StochasticDiffEq.IIF2M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}}}})(::Base.RefValue{Any}, ::Tuple{Int64}) at ./asyncmap.jl:100
 [13] macro expansion at ./asyncmap.jl:235 [inlined]
 [14] (::Base.##574#575{Base.##558#563{DiffEqDevTools.##17#26{Bool,Int64,Bool,Bool,Array{Any,1},Array{Float64,1},DiffEqBase.SplitSDEProblem{Array{Float64,1},Float64,true,Void,Tuple{##73#74,##75#76},##77#78,Void,UniformScaling{Int64},Array{Float64,2}},StochasticDiffEq.IIF2M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}}}},Channel{Any},Void})() at ./event.jl:73
while loading /home/vagrant/.julia/v0.6/StochasticDiffEq/test/iif_methods.jl, in expression starting on line 102
WARNING: !(B::BitArray) is deprecated, use .!(B) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] !(::BitArray{1}) at ./deprecated.jl:51
 [3] check_isfinite(::Array{Float64,1}) at /home/vagrant/.julia/v0.6/NLsolve/src/utils.jl:32
 [4] trust_region_(::NLsolve.DifferentiableMultivariateFunction, ::Array{Float64,1}, ::Float64, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::Float64, ::Bool) at /home/vagrant/.julia/v0.6/NLsolve/src/trust_region.jl:91
 [5] #nlsolve#17(::Symbol, ::Float64, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::Function, ::Float64, ::Bool, ::NLsolve.#nlsolve, ::NLsolve.DifferentiableMultivariateFunction, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/NLsolve/src/nlsolve_func_defs.jl:24
 [6] NLSOLVEJL_SETUP at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/misc_utils.jl:51 [inlined]
 [7] perform_step! at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/integrators/iif.jl:128 [inlined]
 [8] perform_step! at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/integrators/iif.jl:87 [inlined]
 [9] solve!(::StochasticDiffEq.SDEIntegrator{StochasticDiffEq.IIF2M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}},Array{Float64,1},Float64,Float64,Float64,Float64,DiffEqNoiseProcess.NoiseProcess{Float64,2,Float64,Array{Float64,1},Void,Void,DiffEqNoiseProcess.#INPLACE_WHITE_NOISE_DIST,DiffEqNoiseProcess.#INPLACE_WHITE_NOISE_BRIDGE,true,DataStructures.Stack{Tuple{Float64,Array{Float64,1},Void}},ResettableStacks.ResettableStack{Tuple{Float64,Array{Float64,1},Void}},DiffEqNoiseProcess.RSWM{:RSwM3,Float64}},Array{Float64,1},DiffEqBase.RODESolution{Float64,2,Array{Array{Float64,1},1},Array{Array{Float64,1},1},Dict{Symbol,Float64},Array{Float64,1},DiffEqNoiseProcess.NoiseProcess{Float64,2,Float64,Array{Float64,1},Void,Void,DiffEqNoiseProcess.#INPLACE_WHITE_NOISE_DIST,DiffEqNoiseProcess.#INPLACE_WHITE_NOISE_BRIDGE,true,DataStructures.Stack{Tuple{Float64,Array{Float64,1},Void}},ResettableStacks.ResettableStack{Tuple{Float64,Array{Float64,1},Void}},DiffEqNoiseProcess.RSWM{:RSwM3,Float64}},DiffEqBase.SplitSDEProblem{Array{Float64,1},Float64,true,Void,Tuple{##73#74,##75#76},##77#78,Void,UniformScaling{Int64},Array{Float64,2}},StochasticDiffEq.IIF2M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}},StochasticDiffEq.LinearInterpolationData{Array{Array{Float64,1},1},Array{Float64,1}}},StochasticDiffEq.IIF2MCache{Array{Float64,1},Array{Float64,1},StochasticDiffEq.DiffCache{Float64,ForwardDiff.Dual{2,Float64}},StochasticDiffEq.RHS_IIF2{Tuple{##73#74,##75#76},Array{Float64,1},Float64,StochasticDiffEq.DiffCache{Float64,ForwardDiff.Dual{2,Float64}},Tuple{Int64},Base.OneTo{Int64}},NLsolve.DifferentiableMultivariateFunction,Array{Float64,1},Array{Float64,2},Array{Float64,1},Array{Float64,1}},Void,Tuple{##73#74,##75#76},##77#78,StochasticDiffEq.SDEOptions{Float64,Float64,Float64,Float64,DiffEqBase.#ODE_DEFAULT_NORM,DiffEqBase.CallbackSet{Tuple{},Tuple{}},DiffEqBase.#ODE_DEFAULT_ISOUTOFDOMAIN,DiffEqBase.#ODE_DEFAULT_PROG_MESSAGE,DiffEqBase.#ODE_DEFAULT_UNSTABLE_CHECK,DataStructures.BinaryHeap{Float64,DataStructures.LessThan},Void,Void},Void}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/solve.jl:354
 [10] #solve#46(::Array{Any,1}, ::Function, ::DiffEqBase.SplitSDEProblem{Array{Float64,1},Float64,true,Void,Tuple{##73#74,##75#76},##77#78,Void,UniformScaling{Int64},Array{Float64,2}}, ::StochasticDiffEq.IIF2M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/solve.jl:8
 [11] (::DiffEqBase.#kw##solve)(::Array{Any,1}, ::DiffEqBase.#solve, ::DiffEqBase.SplitSDEProblem{Array{Float64,1},Float64,true,Void,Tuple{##73#74,##75#76},##77#78,Void,UniformScaling{Int64},Array{Float64,2}}, ::StochasticDiffEq.IIF2M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at ./<missing>:0
 [12] (::DiffEqDevTools.##17#26{Bool,Int64,Bool,Bool,Array{Any,1},Array{Float64,1},DiffEqBase.SplitSDEProblem{Array{Float64,1},Float64,true,Void,Tuple{##73#74,##75#76},##77#78,Void,UniformScaling{Int64},Array{Float64,2}},StochasticDiffEq.IIF2M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}}})(::Int64) at /home/vagrant/.julia/v0.6/DiffEqDevTools/src/convergence.jl:36
 [13] (::Base.##558#563{DiffEqDevTools.##17#26{Bool,Int64,Bool,Bool,Array{Any,1},Array{Float64,1},DiffEqBase.SplitSDEProblem{Array{Float64,1},Float64,true,Void,Tuple{##73#74,##75#76},##77#78,Void,UniformScaling{Int64},Array{Float64,2}},StochasticDiffEq.IIF2M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}}}})(::Base.RefValue{Any}, ::Tuple{Int64}) at ./asyncmap.jl:100
 [14] macro expansion at ./asyncmap.jl:235 [inlined]
 [15] (::Base.##574#575{Base.##558#563{DiffEqDevTools.##17#26{Bool,Int64,Bool,Bool,Array{Any,1},Array{Float64,1},DiffEqBase.SplitSDEProblem{Array{Float64,1},Float64,true,Void,Tuple{##73#74,##75#76},##77#78,Void,UniformScaling{Int64},Array{Float64,2}},StochasticDiffEq.IIF2M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}}}},Channel{Any},Void})() at ./event.jl:73
while loading /home/vagrant/.julia/v0.6/StochasticDiffEq/test/iif_methods.jl, in expression starting on line 102
WARNING: Array{T}(::Type{T}, m::Int) is deprecated, use Array{T}(m) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] Array(::Type{NLsolve.SolverState}, ::Int64) at ./deprecated.jl:51
 [3] Type at /home/vagrant/.julia/v0.6/NLsolve/src/solver_state_results.jl:20 [inlined]
 [4] trust_region_(::NLsolve.DifferentiableMultivariateFunction, ::Array{Float64,1}, ::Float64, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::Float64, ::Bool) at /home/vagrant/.julia/v0.6/NLsolve/src/trust_region.jl:99
 [5] #nlsolve#17(::Symbol, ::Float64, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::Function, ::Float64, ::Bool, ::NLsolve.#nlsolve, ::NLsolve.DifferentiableMultivariateFunction, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/NLsolve/src/nlsolve_func_defs.jl:24
 [6] NLSOLVEJL_SETUP at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/misc_utils.jl:51 [inlined]
 [7] perform_step! at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/integrators/iif.jl:128 [inlined]
 [8] perform_step! at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/integrators/iif.jl:87 [inlined]
 [9] solve!(::StochasticDiffEq.SDEIntegrator{StochasticDiffEq.IIF2M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}},Array{Float64,1},Float64,Float64,Float64,Float64,DiffEqNoiseProcess.NoiseProcess{Float64,2,Float64,Array{Float64,1},Void,Void,DiffEqNoiseProcess.#INPLACE_WHITE_NOISE_DIST,DiffEqNoiseProcess.#INPLACE_WHITE_NOISE_BRIDGE,true,DataStructures.Stack{Tuple{Float64,Array{Float64,1},Void}},ResettableStacks.ResettableStack{Tuple{Float64,Array{Float64,1},Void}},DiffEqNoiseProcess.RSWM{:RSwM3,Float64}},Array{Float64,1},DiffEqBase.RODESolution{Float64,2,Array{Array{Float64,1},1},Array{Array{Float64,1},1},Dict{Symbol,Float64},Array{Float64,1},DiffEqNoiseProcess.NoiseProcess{Float64,2,Float64,Array{Float64,1},Void,Void,DiffEqNoiseProcess.#INPLACE_WHITE_NOISE_DIST,DiffEqNoiseProcess.#INPLACE_WHITE_NOISE_BRIDGE,true,DataStructures.Stack{Tuple{Float64,Array{Float64,1},Void}},ResettableStacks.ResettableStack{Tuple{Float64,Array{Float64,1},Void}},DiffEqNoiseProcess.RSWM{:RSwM3,Float64}},DiffEqBase.SplitSDEProblem{Array{Float64,1},Float64,true,Void,Tuple{##73#74,##75#76},##77#78,Void,UniformScaling{Int64},Array{Float64,2}},StochasticDiffEq.IIF2M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}},StochasticDiffEq.LinearInterpolationData{Array{Array{Float64,1},1},Array{Float64,1}}},StochasticDiffEq.IIF2MCache{Array{Float64,1},Array{Float64,1},StochasticDiffEq.DiffCache{Float64,ForwardDiff.Dual{2,Float64}},StochasticDiffEq.RHS_IIF2{Tuple{##73#74,##75#76},Array{Float64,1},Float64,StochasticDiffEq.DiffCache{Float64,ForwardDiff.Dual{2,Float64}},Tuple{Int64},Base.OneTo{Int64}},NLsolve.DifferentiableMultivariateFunction,Array{Float64,1},Array{Float64,2},Array{Float64,1},Array{Float64,1}},Void,Tuple{##73#74,##75#76},##77#78,StochasticDiffEq.SDEOptions{Float64,Float64,Float64,Float64,DiffEqBase.#ODE_DEFAULT_NORM,DiffEqBase.CallbackSet{Tuple{},Tuple{}},DiffEqBase.#ODE_DEFAULT_ISOUTOFDOMAIN,DiffEqBase.#ODE_DEFAULT_PROG_MESSAGE,DiffEqBase.#ODE_DEFAULT_UNSTABLE_CHECK,DataStructures.BinaryHeap{Float64,DataStructures.LessThan},Void,Void},Void}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/solve.jl:354
 [10] #solve#46(::Array{Any,1}, ::Function, ::DiffEqBase.SplitSDEProblem{Array{Float64,1},Float64,true,Void,Tuple{##73#74,##75#76},##77#78,Void,UniformScaling{Int64},Array{Float64,2}}, ::StochasticDiffEq.IIF2M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/solve.jl:8
 [11] (::DiffEqBase.#kw##solve)(::Array{Any,1}, ::DiffEqBase.#solve, ::DiffEqBase.SplitSDEProblem{Array{Float64,1},Float64,true,Void,Tuple{##73#74,##75#76},##77#78,Void,UniformScaling{Int64},Array{Float64,2}}, ::StochasticDiffEq.IIF2M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at ./<missing>:0
 [12] (::DiffEqDevTools.##17#26{Bool,Int64,Bool,Bool,Array{Any,1},Array{Float64,1},DiffEqBase.SplitSDEProblem{Array{Float64,1},Float64,true,Void,Tuple{##73#74,##75#76},##77#78,Void,UniformScaling{Int64},Array{Float64,2}},StochasticDiffEq.IIF2M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}}})(::Int64) at /home/vagrant/.julia/v0.6/DiffEqDevTools/src/convergence.jl:36
 [13] (::Base.##558#563{DiffEqDevTools.##17#26{Bool,Int64,Bool,Bool,Array{Any,1},Array{Float64,1},DiffEqBase.SplitSDEProblem{Array{Float64,1},Float64,true,Void,Tuple{##73#74,##75#76},##77#78,Void,UniformScaling{Int64},Array{Float64,2}},StochasticDiffEq.IIF2M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}}}})(::Base.RefValue{Any}, ::Tuple{Int64}) at ./asyncmap.jl:100
 [14] macro expansion at ./asyncmap.jl:235 [inlined]
 [15] (::Base.##574#575{Base.##558#563{DiffEqDevTools.##17#26{Bool,Int64,Bool,Bool,Array{Any,1},Array{Float64,1},DiffEqBase.SplitSDEProblem{Array{Float64,1},Float64,true,Void,Tuple{##73#74,##75#76},##77#78,Void,UniformScaling{Int64},Array{Float64,2}},StochasticDiffEq.IIF2M{StochasticDiffEq.NLSOLVEJL_SETUP{0,true}}}},Channel{Any},Void})() at ./event.jl:73
while loading /home/vagrant/.julia/v0.6/StochasticDiffEq/test/iif_methods.jl, in expression starting on line 102
Test Summary:         | Pass  Total
IIF Convergence Tests |    8      8
 67.782645 seconds (48.38 M allocations: 5.610 GiB, 3.49% gc time)
Solve and Plot
Solve and Plot
Test Summary:     | Pass  Total
Number Type Tests |    1      1
  0.743563 seconds (710.33 k allocations: 110.985 MiB, 4.91% gc time)
Test Summary:      |
Static Array Tests | No tests
  5.192706 seconds (3.16 M allocations: 404.801 MiB, 3.38% gc time)
Test Summary:    | Pass  Total
Noise Type Tests | 1002   1002
  2.168824 seconds (1.33 M allocations: 225.879 MiB, 3.44% gc time)
Test Summary: | Pass  Total
tdir Tests    |    4      4
  1.898704 seconds (1.29 M allocations: 222.784 MiB, 3.54% gc time)
(t, u) = (0.0625, 0.45999020443190336)
(t, u) = (0.125, 0.5274207742173617)
(t, u) = (0.1875, 0.49172279165511035)
(t, u) = (0.25, 0.5001411476884418)
(t, u) = (0.3125, 0.7034489167370348)
(t, u) = (0.33, 0.8804388810830539)
(t, u) = (0.3925, 1.011862291173324)
(t, u) = (0.455, 0.8841117728030992)
(t, u) = (0.5175000000000001, 0.8042228867017203)
(t, u) = (0.5800000000000001, 1.1414553614240215)
(t, u) = (0.6425000000000001, 1.1379837848866956)
(t, u) = (0.7050000000000001, 1.1568535753484408)
(t, u) = (0.7675000000000001, 1.45305044217191)
(t, u) = (0.8300000000000001, 2.0315480872126437)
(t, u) = (0.8925000000000001, 2.1003670372549927)
(t, u) = (0.9550000000000001, 2.192992334060294)
(t, u) = (1.0, 2.1250268505766368)
Test Summary: | Pass  Total
tstops Tests  |    2      2
  1.205915 seconds (630.86 k allocations: 110.913 MiB, 2.74% gc time)
Test Summary: | Pass  Total
saveat Tests  |    3      3
  3.047659 seconds (2.21 M allocations: 468.188 MiB, 5.15% gc time)
Test Summary: |
Oval2         | No tests
  0.185690 seconds (85.14 k allocations: 4.971 MiB)
  0.894670 seconds (584.12 k allocations: 109.466 MiB, 4.75% gc time)
  0.005492 seconds (2.81 k allocations: 178.446 KiB)
Test Summary:   | Pass  Total
Composite Tests |    3      3
  3.275713 seconds (2.31 M allocations: 434.613 MiB, 4.78% gc time)
Test Summary: | Pass  Total
Events Tests  |    1      1
  5.584536 seconds (3.44 M allocations: 414.730 MiB, 3.20% gc time)
Test Summary: |
Cache Tests   | No tests
  8.043230 seconds (4.91 M allocations: 721.114 MiB, 5.08% gc time)
Test Summary:             | Pass  Total
Adaptive SDE Linear Tests |   16     16
  4.922400 seconds (6.39 M allocations: 1.550 GiB, 8.93% gc time)
1e-1
1e-2
1e-3
Final error for the solutions were:
          0.16164258833502448
          0.007802320039917973
          0.007792991468789
          0.0007289614721403236
          2.806020470047868e-5
          
Test Summary:                           | Pass  Total
Multiple Dimension Linear Adaptive Test |    3      3
  0.257052 seconds (376.26 k allocations: 100.811 MiB, 9.86% gc time)
Solve and Plot
Test Summary:     |
Autostepsize Test | No tests
  0.003184 seconds (2.31 k allocations: 274.031 KiB)
Plot 1
Plot 2
Plot 3
Plot 4
Test Summary:                  |
Additive Lorenz Attractor Test | No tests
  1.852145 seconds (1.91 M allocations: 277.082 MiB, 6.43% gc time)
elapsed time: 171.526490981 seconds
INFO: StochasticDiffEq tests passed
INFO: Removing BinDeps v0.6.0
INFO: Removing Blosc v0.2.1
INFO: Removing ChunkedArrays v0.1.1
INFO: Removing Conda v0.5.3
INFO: Removing DiffEqDevTools v0.8.1
INFO: Removing DiffEqPDEBase v0.3.2
INFO: Removing DiffEqProblemLibrary v0.7.0
INFO: Removing Distributions v0.13.0
INFO: Removing EllipsisNotation v0.1.0
INFO: Removing FileIO v0.3.1
INFO: Removing HDF5 v0.8.1
INFO: Removing JLD v0.6.10
INFO: Removing LegacyStrings v0.2.1
INFO: Removing PDMats v0.6.0
INFO: Removing ParameterizedFunctions v2.0.0
INFO: Removing QuadGK v0.1.2
INFO: Removing Rmath v0.1.6
INFO: Removing SHA v0.3.2
INFO: Removing SpecialMatrices v0.1.3
INFO: Removing StatsBase v0.15.0
INFO: Removing StatsFuns v0.5.0
INFO: Removing SymEngine v0.2.0
INFO: Removing URIParser v0.1.8
INFO: Removing VectorizedRoutines v0.0.2

>>> End of log
