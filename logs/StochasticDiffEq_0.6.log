>>> 'Pkg.add("StochasticDiffEq")' log
INFO: Installing Calculus v0.2.2
INFO: Installing Combinatorics v0.4.0
INFO: Installing DataStructures v0.5.3
INFO: Installing DiffBase v0.2.0
INFO: Installing DiffEqBase v0.15.0
INFO: Installing ForwardDiff v0.4.2
INFO: Installing Hiccup v0.1.1
INFO: Installing Iterators v0.3.1
INFO: Installing Juno v0.2.7
INFO: Installing MacroTools v0.3.6
INFO: Installing Media v0.2.7
INFO: Installing NaNMath v0.2.4
INFO: Installing Parameters v0.7.2
INFO: Installing PolynomialFactors v0.0.4
INFO: Installing Polynomials v0.1.5
INFO: Installing Primes v0.1.3
INFO: Installing Ranges v0.0.1
INFO: Installing RecipesBase v0.1.0
INFO: Installing RecursiveArrayTools v0.3.0
INFO: Installing ResettableStacks v0.1.0
INFO: Installing Roots v0.3.0
INFO: Installing SimpleTraits v0.5.0
INFO: Installing SpecialFunctions v0.1.1
INFO: Installing StochasticDiffEq v1.4.0
INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of StochasticDiffEq
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("StochasticDiffEq")' log
Julia Version 0.6.0-pre.beta.0
Commit bd84fa1 (2017-03-31 12:58 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-117-generic #164-Ubuntu SMP Fri Apr 7 11:05:26 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (643.20703125 MB free)
Uptime: 42336.0 sec
Load Avg:  0.9970703125  1.041015625  1.0966796875
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz    2348156 s       1420 s     181414 s    1206152 s        189 s
#2  3500 MHz     722754 s       5146 s      99592 s    3282303 s          6 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.6
2 required packages:
 - JSON                          0.10.0
 - StochasticDiffEq              1.4.0
24 additional packages:
 - Calculus                      0.2.2
 - Combinatorics                 0.4.0
 - Compat                        0.24.0
 - DataStructures                0.5.3
 - DiffBase                      0.2.0
 - DiffEqBase                    0.15.0
 - ForwardDiff                   0.4.2
 - Hiccup                        0.1.1
 - Iterators                     0.3.1
 - Juno                          0.2.7
 - MacroTools                    0.3.6
 - Media                         0.2.7
 - NaNMath                       0.2.4
 - Parameters                    0.7.2
 - PolynomialFactors             0.0.4
 - Polynomials                   0.1.5
 - Primes                        0.1.3
 - Ranges                        0.0.1
 - RecipesBase                   0.1.0
 - RecursiveArrayTools           0.3.0
 - ResettableStacks              0.1.0
 - Roots                         0.3.0
 - SimpleTraits                  0.5.0
 - SpecialFunctions              0.1.1
INFO: Computing test dependencies for StochasticDiffEq...
INFO: Cloning cache of HypothesisTests from https://github.com/JuliaStats/HypothesisTests.jl.git
INFO: Installing BinDeps v0.4.7
INFO: Installing Blosc v0.2.0
INFO: Installing ChunkedArrays v0.1.1
INFO: Installing Conda v0.5.3
INFO: Installing DiffEqDevTools v0.7.1
INFO: Installing DiffEqPDEBase v0.2.0
INFO: Installing DiffEqProblemLibrary v0.5.0
INFO: Installing Distributions v0.12.5
INFO: Installing EllipsisNotation v0.1.0
INFO: Installing FileIO v0.3.1
INFO: Installing HDF5 v0.8.0
INFO: Installing HypothesisTests v0.5.1
INFO: Installing JLD v0.6.10
INFO: Installing LegacyStrings v0.2.1
INFO: Installing PDMats v0.6.0
INFO: Installing ParameterizedFunctions v1.3.0
INFO: Installing QuadGK v0.1.2
INFO: Installing Rmath v0.1.6
INFO: Installing SHA v0.3.2
INFO: Installing StatsBase v0.14.0
INFO: Installing StatsFuns v0.5.0
INFO: Installing SymEngine v0.1.5
INFO: Installing URIParser v0.1.8
INFO: Installing VectorizedRoutines v0.0.2
INFO: Building Blosc
INFO: Building Conda
INFO: Building Rmath
INFO: Building SymEngine
INFO: Building HDF5
INFO: Testing StochasticDiffEq

WARNING: deprecated syntax "abstract AbstractVectorOfArray{T,N}<:AbstractArray{T,N}" at /home/vagrant/.julia/v0.6/RecursiveArrayTools/src/vector_of_array.jl:2.
Use "abstract type AbstractVectorOfArray{T,N}<:AbstractArray{T,N} end" instead.
WARNING: Method definition (::Type{RecursiveArrayTools.ArrayPartition{T} where T})(Any) in module RecursiveArrayTools at /home/vagrant/.julia/v0.6/RecursiveArrayTools/src/array_partition.jl:2 overwritten at /home/vagrant/.julia/v0.6/RecursiveArrayTools/src/array_partition.jl:6.

WARNING: deprecated syntax "function Base..+(...)".
Use "function Base.broadcast(::typeof(Base.+), ...)" instead.

WARNING: deprecated syntax "function Base..+(...)".
Use "function Base.broadcast(::typeof(Base.+), ...)" instead.

WARNING: deprecated syntax "function Base..+(...)".
Use "function Base.broadcast(::typeof(Base.+), ...)" instead.

WARNING: deprecated syntax "function Base..-(...)".
Use "function Base.broadcast(::typeof(Base.-), ...)" instead.

WARNING: deprecated syntax "function Base..-(...)".
Use "function Base.broadcast(::typeof(Base.-), ...)" instead.

WARNING: deprecated syntax "function Base..-(...)".
Use "function Base.broadcast(::typeof(Base.-), ...)" instead.

WARNING: deprecated syntax "function Base..*(...)".
Use "function Base.broadcast(::typeof(Base.*), ...)" instead.

WARNING: deprecated syntax "function Base..*(...)".
Use "function Base.broadcast(::typeof(Base.*), ...)" instead.

WARNING: deprecated syntax "function Base..*(...)".
Use "function Base.broadcast(::typeof(Base.*), ...)" instead.

WARNING: deprecated syntax "function Base../(...)".
Use "function Base.broadcast(::typeof(Base./), ...)" instead.

WARNING: deprecated syntax "function Base../(...)".
Use "function Base.broadcast(::typeof(Base./), ...)" instead.

WARNING: deprecated syntax "function Base..\(...)".
Use "function Base.broadcast(::typeof(Base.\), ...)" instead.
WARNING: Method definition (::Type{RecursiveArrayTools.ArrayPartition{T} where T})(Any) in module RecursiveArrayTools at /home/vagrant/.julia/v0.6/RecursiveArrayTools/src/array_partition.jl:2 overwritten at /home/vagrant/.julia/v0.6/RecursiveArrayTools/src/array_partition.jl:6.
WARNING: Method definition (::Type{RecursiveArrayTools.ArrayPartition{T} where T})(Any) in module RecursiveArrayTools at /home/vagrant/.julia/v0.6/RecursiveArrayTools/src/array_partition.jl:2 overwritten at /home/vagrant/.julia/v0.6/RecursiveArrayTools/src/array_partition.jl:6.
WARNING: Method definition (::Type{RecursiveArrayTools.ArrayPartition{T} where T})(Any) in module RecursiveArrayTools at /home/vagrant/.julia/v0.6/RecursiveArrayTools/src/array_partition.jl:2 overwritten at /home/vagrant/.julia/v0.6/RecursiveArrayTools/src/array_partition.jl:6.
WARNING: Method definition (::Type{RecursiveArrayTools.ArrayPartition{T} where T})(Any) in module RecursiveArrayTools at /home/vagrant/.julia/v0.6/RecursiveArrayTools/src/array_partition.jl:2 overwritten at /home/vagrant/.julia/v0.6/RecursiveArrayTools/src/array_partition.jl:6.
WARNING: Method definition (::Type{RecursiveArrayTools.ArrayPartition{T} where T})(Any) in module RecursiveArrayTools at /home/vagrant/.julia/v0.6/RecursiveArrayTools/src/array_partition.jl:2 overwritten at /home/vagrant/.julia/v0.6/RecursiveArrayTools/src/array_partition.jl:6.
WARNING: round{T}(::Type{T}, x::AbstractArray) is deprecated, use round.(T, x) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] round(::Type{Int64}, ::Array{Int64,2}) at ./deprecated.jl:51
 [3] #findboundary#90(::Array{Any,1}, ::Function, ::Array{Int64,2}) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/fem_boundary.jl:22
 [4] DiffEqPDEBase.FEMMesh(::Array{Rational{Int64},2}, ::Array{Int64,2}, ::Rational{Int64}, ::Tuple{Float64,Float64}, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/meshes.jl:34
 [5] parabolic_squaremesh(::Array{Int64,2}, ::Rational{Int64}, ::Rational{Int64}, ::Tuple{Float64,Float64}, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/meshes.jl:137
 [6] include_from_node1(::String) at ./loading.jl:539
 [7] include(::String) at ./sysimg.jl:14
 [8] include_from_node1(::String) at ./loading.jl:539
 [9] eval(::Module, ::Any) at ./boot.jl:235
 [10] require(::Symbol) at ./loading.jl:453
 [11] include_from_node1(::String) at ./loading.jl:539
 [12] include(::String) at ./sysimg.jl:14
 [13] process_options(::Base.JLOptions) at ./client.jl:305
 [14] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/DiffEqProblemLibrary/src/fem_premade_problems.jl, in expression starting on line 12
WARNING: round{T}(::Type{T}, x::AbstractArray) is deprecated, use round.(T, x) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] round(::Type{Int64}, ::Array{Int64,1}) at ./deprecated.jl:51
 [3] setboundary(::Array{Rational{Int64},2}, ::Array{Int64,2}, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/fem_boundary.jl:74
 [4] DiffEqPDEBase.FEMMesh(::Array{Rational{Int64},2}, ::Array{Int64,2}, ::Rational{Int64}, ::Tuple{Float64,Float64}, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/meshes.jl:35
 [5] parabolic_squaremesh(::Array{Int64,2}, ::Rational{Int64}, ::Rational{Int64}, ::Tuple{Float64,Float64}, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/meshes.jl:137
 [6] include_from_node1(::String) at ./loading.jl:539
 [7] include(::String) at ./sysimg.jl:14
 [8] include_from_node1(::String) at ./loading.jl:539
 [9] eval(::Module, ::Any) at ./boot.jl:235
 [10] require(::Symbol) at ./loading.jl:453
 [11] include_from_node1(::String) at ./loading.jl:539
 [12] include(::String) at ./sysimg.jl:14
 [13] process_options(::Base.JLOptions) at ./client.jl:305
 [14] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/DiffEqProblemLibrary/src/fem_premade_problems.jl, in expression starting on line 12
WARNING: round{T}(::Type{T}, x::AbstractArray) is deprecated, use round.(T, x) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] round(::Type{Int64}, ::Array{Int64,1}) at ./deprecated.jl:51
 [3] setboundary(::Array{Rational{Int64},2}, ::Array{Int64,2}, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/fem_boundary.jl:74
 [4] DiffEqPDEBase.FEMMesh(::Array{Rational{Int64},2}, ::Array{Int64,2}, ::Rational{Int64}, ::Tuple{Float64,Float64}, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/meshes.jl:35
 [5] parabolic_squaremesh(::Array{Int64,2}, ::Rational{Int64}, ::Rational{Int64}, ::Tuple{Float64,Float64}, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/meshes.jl:137
 [6] include_from_node1(::String) at ./loading.jl:539
 [7] include(::String) at ./sysimg.jl:14
 [8] include_from_node1(::String) at ./loading.jl:539
 [9] eval(::Module, ::Any) at ./boot.jl:235
 [10] require(::Symbol) at ./loading.jl:453
 [11] include_from_node1(::String) at ./loading.jl:539
 [12] include(::String) at ./sysimg.jl:14
 [13] process_options(::Base.JLOptions) at ./client.jl:305
 [14] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/DiffEqProblemLibrary/src/fem_premade_problems.jl, in expression starting on line 12
WARNING: round{T}(::Type{T}, x::AbstractArray) is deprecated, use round.(T, x) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] round(::Type{Int64}, ::Array{Int64,2}) at ./deprecated.jl:51
 [3] #findboundary#90(::Array{Any,1}, ::Function, ::Array{Int64,2}) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/fem_boundary.jl:22
 [4] DiffEqPDEBase.FEMMesh(::Array{Rational{Int64},2}, ::Array{Int64,2}, ::Rational{Int64}, ::Tuple{Float64,Float64}, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/meshes.jl:34
 [5] parabolic_squaremesh(::Array{Int64,2}, ::Rational{Int64}, ::Rational{Int64}, ::Tuple{Float64,Float64}, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/meshes.jl:137
 [6] #242 at ./<missing>:0 [inlined]
 [7] next at ./generator.jl:44 [inlined]
 [8] collect(::Base.Generator{Base.OneTo{Int64},DiffEqProblemLibrary.##242#243}) at ./array.jl:418
 [9] include_from_node1(::String) at ./loading.jl:539
 [10] include(::String) at ./sysimg.jl:14
 [11] include_from_node1(::String) at ./loading.jl:539
 [12] eval(::Module, ::Any) at ./boot.jl:235
 [13] require(::Symbol) at ./loading.jl:453
 [14] include_from_node1(::String) at ./loading.jl:539
 [15] include(::String) at ./sysimg.jl:14
 [16] process_options(::Base.JLOptions) at ./client.jl:305
 [17] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/DiffEqProblemLibrary/src/fem_premade_problems.jl, in expression starting on line 27
WARNING: round{T}(::Type{T}, x::AbstractArray) is deprecated, use round.(T, x) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] round(::Type{Int64}, ::Array{Int64,1}) at ./deprecated.jl:51
 [3] setboundary(::Array{Rational{Int64},2}, ::Array{Int64,2}, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/fem_boundary.jl:74
 [4] DiffEqPDEBase.FEMMesh(::Array{Rational{Int64},2}, ::Array{Int64,2}, ::Rational{Int64}, ::Tuple{Float64,Float64}, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/meshes.jl:35
 [5] parabolic_squaremesh(::Array{Int64,2}, ::Rational{Int64}, ::Rational{Int64}, ::Tuple{Float64,Float64}, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/meshes.jl:137
 [6] #242 at ./<missing>:0 [inlined]
 [7] next at ./generator.jl:44 [inlined]
 [8] collect(::Base.Generator{Base.OneTo{Int64},DiffEqProblemLibrary.##242#243}) at ./array.jl:418
 [9] include_from_node1(::String) at ./loading.jl:539
 [10] include(::String) at ./sysimg.jl:14
 [11] include_from_node1(::String) at ./loading.jl:539
 [12] eval(::Module, ::Any) at ./boot.jl:235
 [13] require(::Symbol) at ./loading.jl:453
 [14] include_from_node1(::String) at ./loading.jl:539
 [15] include(::String) at ./sysimg.jl:14
 [16] process_options(::Base.JLOptions) at ./client.jl:305
 [17] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/DiffEqProblemLibrary/src/fem_premade_problems.jl, in expression starting on line 27
WARNING: round{T}(::Type{T}, x::AbstractArray) is deprecated, use round.(T, x) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] round(::Type{Int64}, ::Array{Int64,1}) at ./deprecated.jl:51
 [3] setboundary(::Array{Rational{Int64},2}, ::Array{Int64,2}, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/fem_boundary.jl:74
 [4] DiffEqPDEBase.FEMMesh(::Array{Rational{Int64},2}, ::Array{Int64,2}, ::Rational{Int64}, ::Tuple{Float64,Float64}, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/meshes.jl:35
 [5] parabolic_squaremesh(::Array{Int64,2}, ::Rational{Int64}, ::Rational{Int64}, ::Tuple{Float64,Float64}, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/meshes.jl:137
 [6] #242 at ./<missing>:0 [inlined]
 [7] next at ./generator.jl:44 [inlined]
 [8] collect(::Base.Generator{Base.OneTo{Int64},DiffEqProblemLibrary.##242#243}) at ./array.jl:418
 [9] include_from_node1(::String) at ./loading.jl:539
 [10] include(::String) at ./sysimg.jl:14
 [11] include_from_node1(::String) at ./loading.jl:539
 [12] eval(::Module, ::Any) at ./boot.jl:235
 [13] require(::Symbol) at ./loading.jl:453
 [14] include_from_node1(::String) at ./loading.jl:539
 [15] include(::String) at ./sysimg.jl:14
 [16] process_options(::Base.JLOptions) at ./client.jl:305
 [17] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/DiffEqProblemLibrary/src/fem_premade_problems.jl, in expression starting on line 27
WARNING: round{T}(::Type{T}, x::AbstractArray) is deprecated, use round.(T, x) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] round(::Type{Int64}, ::Array{Int64,1}) at ./deprecated.jl:51
 [3] setboundary(::Array{Rational{Int64},2}, ::Array{Int64,2}, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/fem_boundary.jl:74
 [4] DiffEqPDEBase.FEMMesh(::Array{Rational{Int64},2}, ::Array{Int64,2}, ::Rational{Int64}, ::Tuple{Float64,Float64}, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/meshes.jl:35
 [5] parabolic_squaremesh(::Array{Int64,2}, ::Rational{Int64}, ::Rational{Int64}, ::Tuple{Float64,Float64}, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/meshes.jl:137
 [6] #242 at ./<missing>:0 [inlined]
 [7] next at ./generator.jl:44 [inlined]
 [8] collect_to!(::Array{DiffEqPDEBase.HeatProblem{true,false,DiffEqPDEBase.FEMMesh{Array{Rational{Int64},2},Array{Float64,1},Rational{Int64},Tuple{Float64,Float64}},DiffEqProblemLibrary.##192#216,DiffEqProblemLibrary.##190#191,DiffEqProblemLibrary.#analytic_moving,DiffEqPDEBase.##9#11{Int64},Array{Float64,1},DiffEqPDEBase.##10#12{Int64},DiffEqProblemLibrary.#analytic_moving,Float64},1}, ::Base.Generator{Base.OneTo{Int64},DiffEqProblemLibrary.##242#243}, ::Int64, ::Int64) at ./array.jl:451
 [9] collect(::Base.Generator{Base.OneTo{Int64},DiffEqProblemLibrary.##242#243}) at ./array.jl:419
 [10] include_from_node1(::String) at ./loading.jl:539
 [11] include(::String) at ./sysimg.jl:14
 [12] include_from_node1(::String) at ./loading.jl:539
 [13] eval(::Module, ::Any) at ./boot.jl:235
 [14] require(::Symbol) at ./loading.jl:453
 [15] include_from_node1(::String) at ./loading.jl:539
 [16] include(::String) at ./sysimg.jl:14
 [17] process_options(::Base.JLOptions) at ./client.jl:305
 [18] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/DiffEqProblemLibrary/src/fem_premade_problems.jl, in expression starting on line 27
WARNING: round{T}(::Type{T}, x::AbstractArray) is deprecated, use round.(T, x) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] round(::Type{Int64}, ::Array{Int64,1}) at ./deprecated.jl:51
 [3] setboundary(::Array{Rational{Int64},2}, ::Array{Int64,2}, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/fem_boundary.jl:74
 [4] DiffEqPDEBase.FEMMesh(::Array{Rational{Int64},2}, ::Array{Int64,2}, ::Rational{Int64}, ::Tuple{Float64,Float64}, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/meshes.jl:35
 [5] parabolic_squaremesh(::Array{Int64,2}, ::Rational{Int64}, ::Rational{Int64}, ::Tuple{Float64,Float64}, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/meshes.jl:137
 [6] #242 at ./<missing>:0 [inlined]
 [7] next at ./generator.jl:44 [inlined]
 [8] collect_to!(::Array{DiffEqPDEBase.HeatProblem{true,false,DiffEqPDEBase.FEMMesh{Array{Rational{Int64},2},Array{Float64,1},Rational{Int64},Tuple{Float64,Float64}},DiffEqProblemLibrary.##192#216,DiffEqProblemLibrary.##190#191,DiffEqProblemLibrary.#analytic_moving,DiffEqPDEBase.##9#11{Int64},Array{Float64,1},DiffEqPDEBase.##10#12{Int64},DiffEqProblemLibrary.#analytic_moving,Float64},1}, ::Base.Generator{Base.OneTo{Int64},DiffEqProblemLibrary.##242#243}, ::Int64, ::Int64) at ./array.jl:451
 [9] collect(::Base.Generator{Base.OneTo{Int64},DiffEqProblemLibrary.##242#243}) at ./array.jl:419
 [10] include_from_node1(::String) at ./loading.jl:539
 [11] include(::String) at ./sysimg.jl:14
 [12] include_from_node1(::String) at ./loading.jl:539
 [13] eval(::Module, ::Any) at ./boot.jl:235
 [14] require(::Symbol) at ./loading.jl:453
 [15] include_from_node1(::String) at ./loading.jl:539
 [16] include(::String) at ./sysimg.jl:14
 [17] process_options(::Base.JLOptions) at ./client.jl:305
 [18] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/DiffEqProblemLibrary/src/fem_premade_problems.jl, in expression starting on line 27
WARNING: round{T}(::Type{T}, x::AbstractArray) is deprecated, use round.(T, x) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] round(::Type{Int64}, ::Array{Int64,1}) at ./deprecated.jl:51
 [3] setboundary(::Array{Rational{Int64},2}, ::Array{Int64,2}, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/fem_boundary.jl:74
 [4] DiffEqPDEBase.FEMMesh(::Array{Rational{Int64},2}, ::Array{Int64,2}, ::Rational{Int64}, ::Tuple{Float64,Float64}, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/meshes.jl:35
 [5] parabolic_squaremesh(::Array{Int64,2}, ::Rational{Int64}, ::Rational{Int64}, ::Tuple{Float64,Float64}, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/meshes.jl:137
 [6] #242 at ./<missing>:0 [inlined]
 [7] next at ./generator.jl:44 [inlined]
 [8] collect_to!(::Array{DiffEqPDEBase.HeatProblem{true,false,DiffEqPDEBase.FEMMesh{Array{Rational{Int64},2},Array{Float64,1},Rational{Int64},Tuple{Float64,Float64}},DiffEqProblemLibrary.##192#216,DiffEqProblemLibrary.##190#191,DiffEqProblemLibrary.#analytic_moving,DiffEqPDEBase.##9#11{Int64},Array{Float64,1},DiffEqPDEBase.##10#12{Int64},DiffEqProblemLibrary.#analytic_moving,Float64},1}, ::Base.Generator{Base.OneTo{Int64},DiffEqProblemLibrary.##242#243}, ::Int64, ::Int64) at ./array.jl:451
 [9] collect(::Base.Generator{Base.OneTo{Int64},DiffEqProblemLibrary.##242#243}) at ./array.jl:419
 [10] include_from_node1(::String) at ./loading.jl:539
 [11] include(::String) at ./sysimg.jl:14
 [12] include_from_node1(::String) at ./loading.jl:539
 [13] eval(::Module, ::Any) at ./boot.jl:235
 [14] require(::Symbol) at ./loading.jl:453
 [15] include_from_node1(::String) at ./loading.jl:539
 [16] include(::String) at ./sysimg.jl:14
 [17] process_options(::Base.JLOptions) at ./client.jl:305
 [18] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/DiffEqProblemLibrary/src/fem_premade_problems.jl, in expression starting on line 27
WARNING: round{T}(::Type{T}, x::AbstractArray) is deprecated, use round.(T, x) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] round(::Type{Int64}, ::Array{Int64,1}) at ./deprecated.jl:51
 [3] setboundary(::Array{Rational{Int64},2}, ::Array{Int64,2}, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/fem_boundary.jl:74
 [4] DiffEqPDEBase.FEMMesh(::Array{Rational{Int64},2}, ::Array{Int64,2}, ::Rational{Int64}, ::Tuple{Float64,Float64}, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/meshes.jl:35
 [5] parabolic_squaremesh(::Array{Int64,2}, ::Rational{Int64}, ::Rational{Int64}, ::Tuple{Float64,Float64}, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/meshes.jl:137
 [6] #242 at ./<missing>:0 [inlined]
 [7] next at ./generator.jl:44 [inlined]
 [8] collect_to!(::Array{DiffEqPDEBase.HeatProblem{true,false,DiffEqPDEBase.FEMMesh{Array{Rational{Int64},2},Array{Float64,1},Rational{Int64},Tuple{Float64,Float64}},DiffEqProblemLibrary.##192#216,DiffEqProblemLibrary.##190#191,DiffEqProblemLibrary.#analytic_moving,DiffEqPDEBase.##9#11{Int64},Array{Float64,1},DiffEqPDEBase.##10#12{Int64},DiffEqProblemLibrary.#analytic_moving,Float64},1}, ::Base.Generator{Base.OneTo{Int64},DiffEqProblemLibrary.##242#243}, ::Int64, ::Int64) at ./array.jl:451
 [9] collect(::Base.Generator{Base.OneTo{Int64},DiffEqProblemLibrary.##242#243}) at ./array.jl:419
 [10] include_from_node1(::String) at ./loading.jl:539
 [11] include(::String) at ./sysimg.jl:14
 [12] include_from_node1(::String) at ./loading.jl:539
 [13] eval(::Module, ::Any) at ./boot.jl:235
 [14] require(::Symbol) at ./loading.jl:453
 [15] include_from_node1(::String) at ./loading.jl:539
 [16] include(::String) at ./sysimg.jl:14
 [17] process_options(::Base.JLOptions) at ./client.jl:305
 [18] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/DiffEqProblemLibrary/src/fem_premade_problems.jl, in expression starting on line 27
WARNING: round{T}(::Type{T}, x::AbstractArray) is deprecated, use round.(T, x) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] round(::Type{Int64}, ::Array{Int64,1}) at ./deprecated.jl:51
 [3] setboundary(::Array{Rational{Int64},2}, ::Array{Int64,2}, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/fem_boundary.jl:74
 [4] DiffEqPDEBase.FEMMesh(::Array{Rational{Int64},2}, ::Array{Int64,2}, ::Rational{Int64}, ::Tuple{Float64,Float64}, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/meshes.jl:35
 [5] parabolic_squaremesh(::Array{Int64,2}, ::Rational{Int64}, ::Rational{Int64}, ::Tuple{Float64,Float64}, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/meshes.jl:137
 [6] #242 at ./<missing>:0 [inlined]
 [7] next at ./generator.jl:44 [inlined]
 [8] collect_to!(::Array{DiffEqPDEBase.HeatProblem{true,false,DiffEqPDEBase.FEMMesh{Array{Rational{Int64},2},Array{Float64,1},Rational{Int64},Tuple{Float64,Float64}},DiffEqProblemLibrary.##192#216,DiffEqProblemLibrary.##190#191,DiffEqProblemLibrary.#analytic_moving,DiffEqPDEBase.##9#11{Int64},Array{Float64,1},DiffEqPDEBase.##10#12{Int64},DiffEqProblemLibrary.#analytic_moving,Float64},1}, ::Base.Generator{Base.OneTo{Int64},DiffEqProblemLibrary.##242#243}, ::Int64, ::Int64) at ./array.jl:451
 [9] collect(::Base.Generator{Base.OneTo{Int64},DiffEqProblemLibrary.##242#243}) at ./array.jl:419
 [10] include_from_node1(::String) at ./loading.jl:539
 [11] include(::String) at ./sysimg.jl:14
 [12] include_from_node1(::String) at ./loading.jl:539
 [13] eval(::Module, ::Any) at ./boot.jl:235
 [14] require(::Symbol) at ./loading.jl:453
 [15] include_from_node1(::String) at ./loading.jl:539
 [16] include(::String) at ./sysimg.jl:14
 [17] process_options(::Base.JLOptions) at ./client.jl:305
 [18] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/DiffEqProblemLibrary/src/fem_premade_problems.jl, in expression starting on line 27
WARNING: round{T}(::Type{T}, x::AbstractArray) is deprecated, use round.(T, x) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] round(::Type{Int64}, ::Array{Int64,1}) at ./deprecated.jl:51
 [3] setboundary(::Array{Rational{Int64},2}, ::Array{Int64,2}, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/fem_boundary.jl:74
 [4] DiffEqPDEBase.FEMMesh(::Array{Rational{Int64},2}, ::Array{Int64,2}, ::Rational{Int64}, ::Tuple{Float64,Float64}, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/meshes.jl:35
 [5] parabolic_squaremesh(::Array{Int64,2}, ::Rational{Int64}, ::Rational{Int64}, ::Tuple{Float64,Float64}, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/meshes.jl:137
 [6] #242 at ./<missing>:0 [inlined]
 [7] next at ./generator.jl:44 [inlined]
 [8] collect_to!(::Array{DiffEqPDEBase.HeatProblem{true,false,DiffEqPDEBase.FEMMesh{Array{Rational{Int64},2},Array{Float64,1},Rational{Int64},Tuple{Float64,Float64}},DiffEqProblemLibrary.##192#216,DiffEqProblemLibrary.##190#191,DiffEqProblemLibrary.#analytic_moving,DiffEqPDEBase.##9#11{Int64},Array{Float64,1},DiffEqPDEBase.##10#12{Int64},DiffEqProblemLibrary.#analytic_moving,Float64},1}, ::Base.Generator{Base.OneTo{Int64},DiffEqProblemLibrary.##242#243}, ::Int64, ::Int64) at ./array.jl:451
 [9] collect(::Base.Generator{Base.OneTo{Int64},DiffEqProblemLibrary.##242#243}) at ./array.jl:419
 [10] include_from_node1(::String) at ./loading.jl:539
 [11] include(::String) at ./sysimg.jl:14
 [12] include_from_node1(::String) at ./loading.jl:539
 [13] eval(::Module, ::Any) at ./boot.jl:235
 [14] require(::Symbol) at ./loading.jl:453
 [15] include_from_node1(::String) at ./loading.jl:539
 [16] include(::String) at ./sysimg.jl:14
 [17] process_options(::Base.JLOptions) at ./client.jl:305
 [18] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/DiffEqProblemLibrary/src/fem_premade_problems.jl, in expression starting on line 27
WARNING: round{T}(::Type{T}, x::AbstractArray) is deprecated, use round.(T, x) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] round(::Type{Int64}, ::Array{Int64,2}) at ./deprecated.jl:51
 [3] #findboundary#90(::Array{Any,1}, ::Function, ::Array{Int64,2}) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/fem_boundary.jl:22
 [4] DiffEqPDEBase.FEMMesh(::Array{Rational{Int64},2}, ::Array{Int64,2}, ::Rational{Int64}, ::Tuple{Float64,Float64}, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/meshes.jl:34
 [5] parabolic_squaremesh(::Array{Int64,2}, ::Rational{Int64}, ::Rational{Int64}, ::Tuple{Float64,Float64}, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/meshes.jl:137
 [6] #244 at ./<missing>:0 [inlined]
 [7] next at ./generator.jl:44 [inlined]
 [8] collect(::Base.Generator{Base.OneTo{Int64},DiffEqProblemLibrary.##244#245}) at ./array.jl:418
 [9] include_from_node1(::String) at ./loading.jl:539
 [10] include(::String) at ./sysimg.jl:14
 [11] include_from_node1(::String) at ./loading.jl:539
 [12] eval(::Module, ::Any) at ./boot.jl:235
 [13] require(::Symbol) at ./loading.jl:453
 [14] include_from_node1(::String) at ./loading.jl:539
 [15] include(::String) at ./sysimg.jl:14
 [16] process_options(::Base.JLOptions) at ./client.jl:305
 [17] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/DiffEqProblemLibrary/src/fem_premade_problems.jl, in expression starting on line 30
WARNING: round{T}(::Type{T}, x::AbstractArray) is deprecated, use round.(T, x) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] round(::Type{Int64}, ::Array{Int64,1}) at ./deprecated.jl:51
 [3] setboundary(::Array{Rational{Int64},2}, ::Array{Int64,2}, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/fem_boundary.jl:74
 [4] DiffEqPDEBase.FEMMesh(::Array{Rational{Int64},2}, ::Array{Int64,2}, ::Rational{Int64}, ::Tuple{Float64,Float64}, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/meshes.jl:35
 [5] parabolic_squaremesh(::Array{Int64,2}, ::Rational{Int64}, ::Rational{Int64}, ::Tuple{Float64,Float64}, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/meshes.jl:137
 [6] #244 at ./<missing>:0 [inlined]
 [7] next at ./generator.jl:44 [inlined]
 [8] collect(::Base.Generator{Base.OneTo{Int64},DiffEqProblemLibrary.##244#245}) at ./array.jl:418
 [9] include_from_node1(::String) at ./loading.jl:539
 [10] include(::String) at ./sysimg.jl:14
 [11] include_from_node1(::String) at ./loading.jl:539
 [12] eval(::Module, ::Any) at ./boot.jl:235
 [13] require(::Symbol) at ./loading.jl:453
 [14] include_from_node1(::String) at ./loading.jl:539
 [15] include(::String) at ./sysimg.jl:14
 [16] process_options(::Base.JLOptions) at ./client.jl:305
 [17] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/DiffEqProblemLibrary/src/fem_premade_problems.jl, in expression starting on line 30
WARNING: round{T}(::Type{T}, x::AbstractArray) is deprecated, use round.(T, x) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] round(::Type{Int64}, ::Array{Int64,1}) at ./deprecated.jl:51
 [3] setboundary(::Array{Rational{Int64},2}, ::Array{Int64,2}, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/fem_boundary.jl:74
 [4] DiffEqPDEBase.FEMMesh(::Array{Rational{Int64},2}, ::Array{Int64,2}, ::Rational{Int64}, ::Tuple{Float64,Float64}, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/meshes.jl:35
 [5] parabolic_squaremesh(::Array{Int64,2}, ::Rational{Int64}, ::Rational{Int64}, ::Tuple{Float64,Float64}, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/meshes.jl:137
 [6] #244 at ./<missing>:0 [inlined]
 [7] next at ./generator.jl:44 [inlined]
 [8] collect(::Base.Generator{Base.OneTo{Int64},DiffEqProblemLibrary.##244#245}) at ./array.jl:418
 [9] include_from_node1(::String) at ./loading.jl:539
 [10] include(::String) at ./sysimg.jl:14
 [11] include_from_node1(::String) at ./loading.jl:539
 [12] eval(::Module, ::Any) at ./boot.jl:235
 [13] require(::Symbol) at ./loading.jl:453
 [14] include_from_node1(::String) at ./loading.jl:539
 [15] include(::String) at ./sysimg.jl:14
 [16] process_options(::Base.JLOptions) at ./client.jl:305
 [17] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/DiffEqProblemLibrary/src/fem_premade_problems.jl, in expression starting on line 30
WARNING: round{T}(::Type{T}, x::AbstractArray) is deprecated, use round.(T, x) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] round(::Type{Int64}, ::Array{Int64,1}) at ./deprecated.jl:51
 [3] setboundary(::Array{Rational{Int64},2}, ::Array{Int64,2}, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/fem_boundary.jl:74
 [4] DiffEqPDEBase.FEMMesh(::Array{Rational{Int64},2}, ::Array{Int64,2}, ::Rational{Int64}, ::Tuple{Float64,Float64}, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/meshes.jl:35
 [5] parabolic_squaremesh(::Array{Int64,2}, ::Rational{Int64}, ::Rational{Int64}, ::Tuple{Float64,Float64}, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/meshes.jl:137
 [6] #244 at ./<missing>:0 [inlined]
 [7] next at ./generator.jl:44 [inlined]
 [8] collect_to!(::Array{DiffEqPDEBase.HeatProblem{true,false,DiffEqPDEBase.FEMMesh{Array{Rational{Int64},2},Array{Float64,1},Rational{Int64},Tuple{Float64,Float64}},DiffEqProblemLibrary.##192#216,DiffEqProblemLibrary.##190#191,DiffEqProblemLibrary.#analytic_moving,DiffEqPDEBase.##9#11{Int64},Array{Float64,1},DiffEqPDEBase.##10#12{Int64},DiffEqProblemLibrary.#analytic_moving,Float64},1}, ::Base.Generator{Base.OneTo{Int64},DiffEqProblemLibrary.##244#245}, ::Int64, ::Int64) at ./array.jl:451
 [9] collect(::Base.Generator{Base.OneTo{Int64},DiffEqProblemLibrary.##244#245}) at ./array.jl:419
 [10] include_from_node1(::String) at ./loading.jl:539
 [11] include(::String) at ./sysimg.jl:14
 [12] include_from_node1(::String) at ./loading.jl:539
 [13] eval(::Module, ::Any) at ./boot.jl:235
 [14] require(::Symbol) at ./loading.jl:453
 [15] include_from_node1(::String) at ./loading.jl:539
 [16] include(::String) at ./sysimg.jl:14
 [17] process_options(::Base.JLOptions) at ./client.jl:305
 [18] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/DiffEqProblemLibrary/src/fem_premade_problems.jl, in expression starting on line 30
WARNING: round{T}(::Type{T}, x::AbstractArray) is deprecated, use round.(T, x) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] round(::Type{Int64}, ::Array{Int64,1}) at ./deprecated.jl:51
 [3] setboundary(::Array{Rational{Int64},2}, ::Array{Int64,2}, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/fem_boundary.jl:74
 [4] DiffEqPDEBase.FEMMesh(::Array{Rational{Int64},2}, ::Array{Int64,2}, ::Rational{Int64}, ::Tuple{Float64,Float64}, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/meshes.jl:35
 [5] parabolic_squaremesh(::Array{Int64,2}, ::Rational{Int64}, ::Rational{Int64}, ::Tuple{Float64,Float64}, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/meshes.jl:137
 [6] #244 at ./<missing>:0 [inlined]
 [7] next at ./generator.jl:44 [inlined]
 [8] collect_to!(::Array{DiffEqPDEBase.HeatProblem{true,false,DiffEqPDEBase.FEMMesh{Array{Rational{Int64},2},Array{Float64,1},Rational{Int64},Tuple{Float64,Float64}},DiffEqProblemLibrary.##192#216,DiffEqProblemLibrary.##190#191,DiffEqProblemLibrary.#analytic_moving,DiffEqPDEBase.##9#11{Int64},Array{Float64,1},DiffEqPDEBase.##10#12{Int64},DiffEqProblemLibrary.#analytic_moving,Float64},1}, ::Base.Generator{Base.OneTo{Int64},DiffEqProblemLibrary.##244#245}, ::Int64, ::Int64) at ./array.jl:451
 [9] collect(::Base.Generator{Base.OneTo{Int64},DiffEqProblemLibrary.##244#245}) at ./array.jl:419
 [10] include_from_node1(::String) at ./loading.jl:539
 [11] include(::String) at ./sysimg.jl:14
 [12] include_from_node1(::String) at ./loading.jl:539
 [13] eval(::Module, ::Any) at ./boot.jl:235
 [14] require(::Symbol) at ./loading.jl:453
 [15] include_from_node1(::String) at ./loading.jl:539
 [16] include(::String) at ./sysimg.jl:14
 [17] process_options(::Base.JLOptions) at ./client.jl:305
 [18] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/DiffEqProblemLibrary/src/fem_premade_problems.jl, in expression starting on line 30
WARNING: round{T}(::Type{T}, x::AbstractArray) is deprecated, use round.(T, x) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] round(::Type{Int64}, ::Array{Int64,1}) at ./deprecated.jl:51
 [3] setboundary(::Array{Rational{Int64},2}, ::Array{Int64,2}, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/fem_boundary.jl:74
 [4] DiffEqPDEBase.FEMMesh(::Array{Rational{Int64},2}, ::Array{Int64,2}, ::Rational{Int64}, ::Tuple{Float64,Float64}, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/meshes.jl:35
 [5] parabolic_squaremesh(::Array{Int64,2}, ::Rational{Int64}, ::Rational{Int64}, ::Tuple{Float64,Float64}, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/meshes.jl:137
 [6] #244 at ./<missing>:0 [inlined]
 [7] next at ./generator.jl:44 [inlined]
 [8] collect_to!(::Array{DiffEqPDEBase.HeatProblem{true,false,DiffEqPDEBase.FEMMesh{Array{Rational{Int64},2},Array{Float64,1},Rational{Int64},Tuple{Float64,Float64}},DiffEqProblemLibrary.##192#216,DiffEqProblemLibrary.##190#191,DiffEqProblemLibrary.#analytic_moving,DiffEqPDEBase.##9#11{Int64},Array{Float64,1},DiffEqPDEBase.##10#12{Int64},DiffEqProblemLibrary.#analytic_moving,Float64},1}, ::Base.Generator{Base.OneTo{Int64},DiffEqProblemLibrary.##244#245}, ::Int64, ::Int64) at ./array.jl:451
 [9] collect(::Base.Generator{Base.OneTo{Int64},DiffEqProblemLibrary.##244#245}) at ./array.jl:419
 [10] include_from_node1(::String) at ./loading.jl:539
 [11] include(::String) at ./sysimg.jl:14
 [12] include_from_node1(::String) at ./loading.jl:539
 [13] eval(::Module, ::Any) at ./boot.jl:235
 [14] require(::Symbol) at ./loading.jl:453
 [15] include_from_node1(::String) at ./loading.jl:539
 [16] include(::String) at ./sysimg.jl:14
 [17] process_options(::Base.JLOptions) at ./client.jl:305
 [18] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/DiffEqProblemLibrary/src/fem_premade_problems.jl, in expression starting on line 30
WARNING: round{T}(::Type{T}, x::AbstractArray) is deprecated, use round.(T, x) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] round(::Type{Int64}, ::Array{Int64,1}) at ./deprecated.jl:51
 [3] setboundary(::Array{Rational{Int64},2}, ::Array{Int64,2}, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/fem_boundary.jl:74
 [4] DiffEqPDEBase.FEMMesh(::Array{Rational{Int64},2}, ::Array{Int64,2}, ::Rational{Int64}, ::Tuple{Float64,Float64}, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/meshes.jl:35
 [5] parabolic_squaremesh(::Array{Int64,2}, ::Rational{Int64}, ::Rational{Int64}, ::Tuple{Float64,Float64}, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/meshes.jl:137
 [6] #244 at ./<missing>:0 [inlined]
 [7] next at ./generator.jl:44 [inlined]
 [8] collect_to!(::Array{DiffEqPDEBase.HeatProblem{true,false,DiffEqPDEBase.FEMMesh{Array{Rational{Int64},2},Array{Float64,1},Rational{Int64},Tuple{Float64,Float64}},DiffEqProblemLibrary.##192#216,DiffEqProblemLibrary.##190#191,DiffEqProblemLibrary.#analytic_moving,DiffEqPDEBase.##9#11{Int64},Array{Float64,1},DiffEqPDEBase.##10#12{Int64},DiffEqProblemLibrary.#analytic_moving,Float64},1}, ::Base.Generator{Base.OneTo{Int64},DiffEqProblemLibrary.##244#245}, ::Int64, ::Int64) at ./array.jl:451
 [9] collect(::Base.Generator{Base.OneTo{Int64},DiffEqProblemLibrary.##244#245}) at ./array.jl:419
 [10] include_from_node1(::String) at ./loading.jl:539
 [11] include(::String) at ./sysimg.jl:14
 [12] include_from_node1(::String) at ./loading.jl:539
 [13] eval(::Module, ::Any) at ./boot.jl:235
 [14] require(::Symbol) at ./loading.jl:453
 [15] include_from_node1(::String) at ./loading.jl:539
 [16] include(::String) at ./sysimg.jl:14
 [17] process_options(::Base.JLOptions) at ./client.jl:305
 [18] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/DiffEqProblemLibrary/src/fem_premade_problems.jl, in expression starting on line 30
WARNING: round{T}(::Type{T}, x::AbstractArray) is deprecated, use round.(T, x) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] round(::Type{Int64}, ::Array{Int64,1}) at ./deprecated.jl:51
 [3] setboundary(::Array{Rational{Int64},2}, ::Array{Int64,2}, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/fem_boundary.jl:74
 [4] DiffEqPDEBase.FEMMesh(::Array{Rational{Int64},2}, ::Array{Int64,2}, ::Rational{Int64}, ::Tuple{Float64,Float64}, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/meshes.jl:35
 [5] parabolic_squaremesh(::Array{Int64,2}, ::Rational{Int64}, ::Rational{Int64}, ::Tuple{Float64,Float64}, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/meshes.jl:137
 [6] #244 at ./<missing>:0 [inlined]
 [7] next at ./generator.jl:44 [inlined]
 [8] collect_to!(::Array{DiffEqPDEBase.HeatProblem{true,false,DiffEqPDEBase.FEMMesh{Array{Rational{Int64},2},Array{Float64,1},Rational{Int64},Tuple{Float64,Float64}},DiffEqProblemLibrary.##192#216,DiffEqProblemLibrary.##190#191,DiffEqProblemLibrary.#analytic_moving,DiffEqPDEBase.##9#11{Int64},Array{Float64,1},DiffEqPDEBase.##10#12{Int64},DiffEqProblemLibrary.#analytic_moving,Float64},1}, ::Base.Generator{Base.OneTo{Int64},DiffEqProblemLibrary.##244#245}, ::Int64, ::Int64) at ./array.jl:451
 [9] collect(::Base.Generator{Base.OneTo{Int64},DiffEqProblemLibrary.##244#245}) at ./array.jl:419
 [10] include_from_node1(::String) at ./loading.jl:539
 [11] include(::String) at ./sysimg.jl:14
 [12] include_from_node1(::String) at ./loading.jl:539
 [13] eval(::Module, ::Any) at ./boot.jl:235
 [14] require(::Symbol) at ./loading.jl:453
 [15] include_from_node1(::String) at ./loading.jl:539
 [16] include(::String) at ./sysimg.jl:14
 [17] process_options(::Base.JLOptions) at ./client.jl:305
 [18] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/DiffEqProblemLibrary/src/fem_premade_problems.jl, in expression starting on line 30
WARNING: round{T}(::Type{T}, x::AbstractArray) is deprecated, use round.(T, x) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] round(::Type{Int64}, ::Array{Int64,1}) at ./deprecated.jl:51
 [3] setboundary(::Array{Rational{Int64},2}, ::Array{Int64,2}, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/fem_boundary.jl:74
 [4] DiffEqPDEBase.FEMMesh(::Array{Rational{Int64},2}, ::Array{Int64,2}, ::Rational{Int64}, ::Tuple{Float64,Float64}, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/meshes.jl:35
 [5] parabolic_squaremesh(::Array{Int64,2}, ::Rational{Int64}, ::Rational{Int64}, ::Tuple{Float64,Float64}, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/meshes.jl:137
 [6] #244 at ./<missing>:0 [inlined]
 [7] next at ./generator.jl:44 [inlined]
 [8] collect_to!(::Array{DiffEqPDEBase.HeatProblem{true,false,DiffEqPDEBase.FEMMesh{Array{Rational{Int64},2},Array{Float64,1},Rational{Int64},Tuple{Float64,Float64}},DiffEqProblemLibrary.##192#216,DiffEqProblemLibrary.##190#191,DiffEqProblemLibrary.#analytic_moving,DiffEqPDEBase.##9#11{Int64},Array{Float64,1},DiffEqPDEBase.##10#12{Int64},DiffEqProblemLibrary.#analytic_moving,Float64},1}, ::Base.Generator{Base.OneTo{Int64},DiffEqProblemLibrary.##244#245}, ::Int64, ::Int64) at ./array.jl:451
 [9] collect(::Base.Generator{Base.OneTo{Int64},DiffEqProblemLibrary.##244#245}) at ./array.jl:419
 [10] include_from_node1(::String) at ./loading.jl:539
 [11] include(::String) at ./sysimg.jl:14
 [12] include_from_node1(::String) at ./loading.jl:539
 [13] eval(::Module, ::Any) at ./boot.jl:235
 [14] require(::Symbol) at ./loading.jl:453
 [15] include_from_node1(::String) at ./loading.jl:539
 [16] include(::String) at ./sysimg.jl:14
 [17] process_options(::Base.JLOptions) at ./client.jl:305
 [18] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/DiffEqProblemLibrary/src/fem_premade_problems.jl, in expression starting on line 30
WARNING: round{T}(::Type{T}, x::AbstractArray) is deprecated, use round.(T, x) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] round(::Type{Int64}, ::Array{Int64,2}) at ./deprecated.jl:51
 [3] #findboundary#90(::Array{Any,1}, ::Function, ::Array{Int64,2}) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/fem_boundary.jl:22
 [4] DiffEqPDEBase.FEMMesh(::Array{Rational{Int64},2}, ::Array{Int64,2}, ::Rational{Int64}, ::Tuple{Float64,Float64}, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/meshes.jl:34
 [5] parabolic_squaremesh(::Array{Int64,2}, ::Rational{Int64}, ::Rational{Int64}, ::Tuple{Float64,Float64}, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/meshes.jl:137
 [6] #248 at ./<missing>:0 [inlined]
 [7] next at ./generator.jl:44 [inlined]
 [8] collect(::Base.Generator{Base.OneTo{Int64},DiffEqProblemLibrary.##248#249}) at ./array.jl:418
 [9] include_from_node1(::String) at ./loading.jl:539
 [10] include(::String) at ./sysimg.jl:14
 [11] include_from_node1(::String) at ./loading.jl:539
 [12] eval(::Module, ::Any) at ./boot.jl:235
 [13] require(::Symbol) at ./loading.jl:453
 [14] include_from_node1(::String) at ./loading.jl:539
 [15] include(::String) at ./sysimg.jl:14
 [16] process_options(::Base.JLOptions) at ./client.jl:305
 [17] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/DiffEqProblemLibrary/src/fem_premade_problems.jl, in expression starting on line 36
WARNING: round{T}(::Type{T}, x::AbstractArray) is deprecated, use round.(T, x) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] round(::Type{Int64}, ::Array{Int64,1}) at ./deprecated.jl:51
 [3] setboundary(::Array{Rational{Int64},2}, ::Array{Int64,2}, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/fem_boundary.jl:74
 [4] DiffEqPDEBase.FEMMesh(::Array{Rational{Int64},2}, ::Array{Int64,2}, ::Rational{Int64}, ::Tuple{Float64,Float64}, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/meshes.jl:35
 [5] parabolic_squaremesh(::Array{Int64,2}, ::Rational{Int64}, ::Rational{Int64}, ::Tuple{Float64,Float64}, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/meshes.jl:137
 [6] #248 at ./<missing>:0 [inlined]
 [7] next at ./generator.jl:44 [inlined]
 [8] collect(::Base.Generator{Base.OneTo{Int64},DiffEqProblemLibrary.##248#249}) at ./array.jl:418
 [9] include_from_node1(::String) at ./loading.jl:539
 [10] include(::String) at ./sysimg.jl:14
 [11] include_from_node1(::String) at ./loading.jl:539
 [12] eval(::Module, ::Any) at ./boot.jl:235
 [13] require(::Symbol) at ./loading.jl:453
 [14] include_from_node1(::String) at ./loading.jl:539
 [15] include(::String) at ./sysimg.jl:14
 [16] process_options(::Base.JLOptions) at ./client.jl:305
 [17] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/DiffEqProblemLibrary/src/fem_premade_problems.jl, in expression starting on line 36
WARNING: round{T}(::Type{T}, x::AbstractArray) is deprecated, use round.(T, x) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] round(::Type{Int64}, ::Array{Int64,1}) at ./deprecated.jl:51
 [3] setboundary(::Array{Rational{Int64},2}, ::Array{Int64,2}, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/fem_boundary.jl:74
 [4] DiffEqPDEBase.FEMMesh(::Array{Rational{Int64},2}, ::Array{Int64,2}, ::Rational{Int64}, ::Tuple{Float64,Float64}, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/meshes.jl:35
 [5] parabolic_squaremesh(::Array{Int64,2}, ::Rational{Int64}, ::Rational{Int64}, ::Tuple{Float64,Float64}, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/meshes.jl:137
 [6] #248 at ./<missing>:0 [inlined]
 [7] next at ./generator.jl:44 [inlined]
 [8] collect(::Base.Generator{Base.OneTo{Int64},DiffEqProblemLibrary.##248#249}) at ./array.jl:418
 [9] include_from_node1(::String) at ./loading.jl:539
 [10] include(::String) at ./sysimg.jl:14
 [11] include_from_node1(::String) at ./loading.jl:539
 [12] eval(::Module, ::Any) at ./boot.jl:235
 [13] require(::Symbol) at ./loading.jl:453
 [14] include_from_node1(::String) at ./loading.jl:539
 [15] include(::String) at ./sysimg.jl:14
 [16] process_options(::Base.JLOptions) at ./client.jl:305
 [17] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/DiffEqProblemLibrary/src/fem_premade_problems.jl, in expression starting on line 36
WARNING: round{T}(::Type{T}, x::AbstractArray) is deprecated, use round.(T, x) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] round(::Type{Int64}, ::Array{Int64,1}) at ./deprecated.jl:51
 [3] setboundary(::Array{Rational{Int64},2}, ::Array{Int64,2}, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/fem_boundary.jl:74
 [4] DiffEqPDEBase.FEMMesh(::Array{Rational{Int64},2}, ::Array{Int64,2}, ::Rational{Int64}, ::Tuple{Float64,Float64}, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/meshes.jl:35
 [5] parabolic_squaremesh(::Array{Int64,2}, ::Rational{Int64}, ::Rational{Int64}, ::Tuple{Float64,Float64}, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/meshes.jl:137
 [6] #248 at ./<missing>:0 [inlined]
 [7] next at ./generator.jl:44 [inlined]
 [8] collect_to!(::Array{DiffEqPDEBase.HeatProblem{true,false,DiffEqPDEBase.FEMMesh{Array{Rational{Int64},2},Array{Float64,1},Rational{Int64},Tuple{Float64,Float64}},DiffEqProblemLibrary.##192#216,DiffEqProblemLibrary.##190#191,DiffEqProblemLibrary.#analytic_moving,DiffEqPDEBase.##9#11{Int64},Array{Float64,1},DiffEqPDEBase.##10#12{Int64},DiffEqProblemLibrary.#analytic_moving,Float64},1}, ::Base.Generator{Base.OneTo{Int64},DiffEqProblemLibrary.##248#249}, ::Int64, ::Int64) at ./array.jl:451
 [9] collect(::Base.Generator{Base.OneTo{Int64},DiffEqProblemLibrary.##248#249}) at ./array.jl:419
 [10] include_from_node1(::String) at ./loading.jl:539
 [11] include(::String) at ./sysimg.jl:14
 [12] include_from_node1(::String) at ./loading.jl:539
 [13] eval(::Module, ::Any) at ./boot.jl:235
 [14] require(::Symbol) at ./loading.jl:453
 [15] include_from_node1(::String) at ./loading.jl:539
 [16] include(::String) at ./sysimg.jl:14
 [17] process_options(::Base.JLOptions) at ./client.jl:305
 [18] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/DiffEqProblemLibrary/src/fem_premade_problems.jl, in expression starting on line 36
WARNING: round{T}(::Type{T}, x::AbstractArray) is deprecated, use round.(T, x) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] round(::Type{Int64}, ::Array{Int64,1}) at ./deprecated.jl:51
 [3] setboundary(::Array{Rational{Int64},2}, ::Array{Int64,2}, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/fem_boundary.jl:74
 [4] DiffEqPDEBase.FEMMesh(::Array{Rational{Int64},2}, ::Array{Int64,2}, ::Rational{Int64}, ::Tuple{Float64,Float64}, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/meshes.jl:35
 [5] parabolic_squaremesh(::Array{Int64,2}, ::Rational{Int64}, ::Rational{Int64}, ::Tuple{Float64,Float64}, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/meshes.jl:137
 [6] #248 at ./<missing>:0 [inlined]
 [7] next at ./generator.jl:44 [inlined]
 [8] collect_to!(::Array{DiffEqPDEBase.HeatProblem{true,false,DiffEqPDEBase.FEMMesh{Array{Rational{Int64},2},Array{Float64,1},Rational{Int64},Tuple{Float64,Float64}},DiffEqProblemLibrary.##192#216,DiffEqProblemLibrary.##190#191,DiffEqProblemLibrary.#analytic_moving,DiffEqPDEBase.##9#11{Int64},Array{Float64,1},DiffEqPDEBase.##10#12{Int64},DiffEqProblemLibrary.#analytic_moving,Float64},1}, ::Base.Generator{Base.OneTo{Int64},DiffEqProblemLibrary.##248#249}, ::Int64, ::Int64) at ./array.jl:451
 [9] collect(::Base.Generator{Base.OneTo{Int64},DiffEqProblemLibrary.##248#249}) at ./array.jl:419
 [10] include_from_node1(::String) at ./loading.jl:539
 [11] include(::String) at ./sysimg.jl:14
 [12] include_from_node1(::String) at ./loading.jl:539
 [13] eval(::Module, ::Any) at ./boot.jl:235
 [14] require(::Symbol) at ./loading.jl:453
 [15] include_from_node1(::String) at ./loading.jl:539
 [16] include(::String) at ./sysimg.jl:14
 [17] process_options(::Base.JLOptions) at ./client.jl:305
 [18] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/DiffEqProblemLibrary/src/fem_premade_problems.jl, in expression starting on line 36
WARNING: round{T}(::Type{T}, x::AbstractArray) is deprecated, use round.(T, x) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] round(::Type{Int64}, ::Array{Int64,2}) at ./deprecated.jl:51
 [3] #findboundary#90(::Array{Any,1}, ::Function, ::Array{Int64,2}) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/fem_boundary.jl:22
 [4] DiffEqPDEBase.FEMMesh(::Array{Rational{Int64},2}, ::Array{Int64,2}, ::Rational{Int64}, ::Tuple{Float64,Float64}, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/meshes.jl:34
 [5] parabolic_squaremesh(::Array{Int64,2}, ::Rational{Int64}, ::Rational{Int64}, ::Tuple{Float64,Float64}, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/meshes.jl:137
 [6] include_from_node1(::String) at ./loading.jl:539
 [7] include(::String) at ./sysimg.jl:14
 [8] include_from_node1(::String) at ./loading.jl:539
 [9] eval(::Module, ::Any) at ./boot.jl:235
 [10] require(::Symbol) at ./loading.jl:453
 [11] include_from_node1(::String) at ./loading.jl:539
 [12] include(::String) at ./sysimg.jl:14
 [13] process_options(::Base.JLOptions) at ./client.jl:305
 [14] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/DiffEqProblemLibrary/src/fem_premade_problems.jl, in expression starting on line 42
WARNING: round{T}(::Type{T}, x::AbstractArray) is deprecated, use round.(T, x) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] round(::Type{Int64}, ::Array{Int64,1}) at ./deprecated.jl:51
 [3] setboundary(::Array{Rational{Int64},2}, ::Array{Int64,2}, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/fem_boundary.jl:74
 [4] DiffEqPDEBase.FEMMesh(::Array{Rational{Int64},2}, ::Array{Int64,2}, ::Rational{Int64}, ::Tuple{Float64,Float64}, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/meshes.jl:35
 [5] parabolic_squaremesh(::Array{Int64,2}, ::Rational{Int64}, ::Rational{Int64}, ::Tuple{Float64,Float64}, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/meshes.jl:137
 [6] include_from_node1(::String) at ./loading.jl:539
 [7] include(::String) at ./sysimg.jl:14
 [8] include_from_node1(::String) at ./loading.jl:539
 [9] eval(::Module, ::Any) at ./boot.jl:235
 [10] require(::Symbol) at ./loading.jl:453
 [11] include_from_node1(::String) at ./loading.jl:539
 [12] include(::String) at ./sysimg.jl:14
 [13] process_options(::Base.JLOptions) at ./client.jl:305
 [14] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/DiffEqProblemLibrary/src/fem_premade_problems.jl, in expression starting on line 42
WARNING: round{T}(::Type{T}, x::AbstractArray) is deprecated, use round.(T, x) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] round(::Type{Int64}, ::Array{Int64,1}) at ./deprecated.jl:51
 [3] setboundary(::Array{Rational{Int64},2}, ::Array{Int64,2}, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/fem_boundary.jl:74
 [4] DiffEqPDEBase.FEMMesh(::Array{Rational{Int64},2}, ::Array{Int64,2}, ::Rational{Int64}, ::Tuple{Float64,Float64}, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/meshes.jl:35
 [5] parabolic_squaremesh(::Array{Int64,2}, ::Rational{Int64}, ::Rational{Int64}, ::Tuple{Float64,Float64}, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/meshes.jl:137
 [6] include_from_node1(::String) at ./loading.jl:539
 [7] include(::String) at ./sysimg.jl:14
 [8] include_from_node1(::String) at ./loading.jl:539
 [9] eval(::Module, ::Any) at ./boot.jl:235
 [10] require(::Symbol) at ./loading.jl:453
 [11] include_from_node1(::String) at ./loading.jl:539
 [12] include(::String) at ./sysimg.jl:14
 [13] process_options(::Base.JLOptions) at ./client.jl:305
 [14] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/DiffEqProblemLibrary/src/fem_premade_problems.jl, in expression starting on line 42
WARNING: round{T}(::Type{T}, x::AbstractArray) is deprecated, use round.(T, x) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] round(::Type{Int64}, ::Array{Int64,2}) at ./deprecated.jl:51
 [3] #findboundary#90(::Array{Any,1}, ::Function, ::Array{Int64,2}) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/fem_boundary.jl:22
 [4] DiffEqPDEBase.FEMMesh(::Array{Rational{Int64},2}, ::Array{Int64,2}, ::Rational{Int64}, ::Tuple{Float64,Float64}, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/meshes.jl:34
 [5] parabolic_squaremesh(::Array{Int64,2}, ::Rational{Int64}, ::Rational{Int64}, ::Tuple{Float64,Float64}, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/meshes.jl:137
 [6] include_from_node1(::String) at ./loading.jl:539
 [7] include(::String) at ./sysimg.jl:14
 [8] include_from_node1(::String) at ./loading.jl:539
 [9] eval(::Module, ::Any) at ./boot.jl:235
 [10] require(::Symbol) at ./loading.jl:453
 [11] include_from_node1(::String) at ./loading.jl:539
 [12] include(::String) at ./sysimg.jl:14
 [13] process_options(::Base.JLOptions) at ./client.jl:305
 [14] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/DiffEqProblemLibrary/src/fem_premade_problems.jl, in expression starting on line 59
WARNING: round{T}(::Type{T}, x::AbstractArray) is deprecated, use round.(T, x) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] round(::Type{Int64}, ::Array{Int64,1}) at ./deprecated.jl:51
 [3] setboundary(::Array{Rational{Int64},2}, ::Array{Int64,2}, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/fem_boundary.jl:74
 [4] DiffEqPDEBase.FEMMesh(::Array{Rational{Int64},2}, ::Array{Int64,2}, ::Rational{Int64}, ::Tuple{Float64,Float64}, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/meshes.jl:35
 [5] parabolic_squaremesh(::Array{Int64,2}, ::Rational{Int64}, ::Rational{Int64}, ::Tuple{Float64,Float64}, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/meshes.jl:137
 [6] include_from_node1(::String) at ./loading.jl:539
 [7] include(::String) at ./sysimg.jl:14
 [8] include_from_node1(::String) at ./loading.jl:539
 [9] eval(::Module, ::Any) at ./boot.jl:235
 [10] require(::Symbol) at ./loading.jl:453
 [11] include_from_node1(::String) at ./loading.jl:539
 [12] include(::String) at ./sysimg.jl:14
 [13] process_options(::Base.JLOptions) at ./client.jl:305
 [14] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/DiffEqProblemLibrary/src/fem_premade_problems.jl, in expression starting on line 59
WARNING: round{T}(::Type{T}, x::AbstractArray) is deprecated, use round.(T, x) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] round(::Type{Int64}, ::Array{Int64,1}) at ./deprecated.jl:51
 [3] setboundary(::Array{Rational{Int64},2}, ::Array{Int64,2}, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/fem_boundary.jl:74
 [4] DiffEqPDEBase.FEMMesh(::Array{Rational{Int64},2}, ::Array{Int64,2}, ::Rational{Int64}, ::Tuple{Float64,Float64}, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/meshes.jl:35
 [5] parabolic_squaremesh(::Array{Int64,2}, ::Rational{Int64}, ::Rational{Int64}, ::Tuple{Float64,Float64}, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/meshes.jl:137
 [6] include_from_node1(::String) at ./loading.jl:539
 [7] include(::String) at ./sysimg.jl:14
 [8] include_from_node1(::String) at ./loading.jl:539
 [9] eval(::Module, ::Any) at ./boot.jl:235
 [10] require(::Symbol) at ./loading.jl:453
 [11] include_from_node1(::String) at ./loading.jl:539
 [12] include(::String) at ./sysimg.jl:14
 [13] process_options(::Base.JLOptions) at ./client.jl:305
 [14] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/DiffEqProblemLibrary/src/fem_premade_problems.jl, in expression starting on line 59
WARNING: round{T}(::Type{T}, x::AbstractArray) is deprecated, use round.(T, x) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] round(::Type{Int64}, ::Array{Int64,2}) at ./deprecated.jl:51
 [3] #findboundary#90(::Array{Any,1}, ::Function, ::Array{Int64,2}) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/fem_boundary.jl:22
 [4] DiffEqPDEBase.FEMMesh(::Array{Rational{Int64},2}, ::Array{Int64,2}, ::Rational{Int64}, ::Tuple{Float64,Float64}, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/meshes.jl:34
 [5] parabolic_squaremesh(::Array{Int64,2}, ::Rational{Int64}, ::Rational{Int64}, ::Tuple{Float64,Float64}, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/meshes.jl:137
 [6] include_from_node1(::String) at ./loading.jl:539
 [7] include(::String) at ./sysimg.jl:14
 [8] include_from_node1(::String) at ./loading.jl:539
 [9] eval(::Module, ::Any) at ./boot.jl:235
 [10] require(::Symbol) at ./loading.jl:453
 [11] include_from_node1(::String) at ./loading.jl:539
 [12] include(::String) at ./sysimg.jl:14
 [13] process_options(::Base.JLOptions) at ./client.jl:305
 [14] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/DiffEqProblemLibrary/src/fem_premade_problems.jl, in expression starting on line 77
WARNING: round{T}(::Type{T}, x::AbstractArray) is deprecated, use round.(T, x) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] round(::Type{Int64}, ::Array{Int64,1}) at ./deprecated.jl:51
 [3] setboundary(::Array{Rational{Int64},2}, ::Array{Int64,2}, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/fem_boundary.jl:74
 [4] DiffEqPDEBase.FEMMesh(::Array{Rational{Int64},2}, ::Array{Int64,2}, ::Rational{Int64}, ::Tuple{Float64,Float64}, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/meshes.jl:35
 [5] parabolic_squaremesh(::Array{Int64,2}, ::Rational{Int64}, ::Rational{Int64}, ::Tuple{Float64,Float64}, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/meshes.jl:137
 [6] include_from_node1(::String) at ./loading.jl:539
 [7] include(::String) at ./sysimg.jl:14
 [8] include_from_node1(::String) at ./loading.jl:539
 [9] eval(::Module, ::Any) at ./boot.jl:235
 [10] require(::Symbol) at ./loading.jl:453
 [11] include_from_node1(::String) at ./loading.jl:539
 [12] include(::String) at ./sysimg.jl:14
 [13] process_options(::Base.JLOptions) at ./client.jl:305
 [14] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/DiffEqProblemLibrary/src/fem_premade_problems.jl, in expression starting on line 77
WARNING: round{T}(::Type{T}, x::AbstractArray) is deprecated, use round.(T, x) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] round(::Type{Int64}, ::Array{Int64,1}) at ./deprecated.jl:51
 [3] setboundary(::Array{Rational{Int64},2}, ::Array{Int64,2}, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/fem_boundary.jl:74
 [4] DiffEqPDEBase.FEMMesh(::Array{Rational{Int64},2}, ::Array{Int64,2}, ::Rational{Int64}, ::Tuple{Float64,Float64}, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/meshes.jl:35
 [5] parabolic_squaremesh(::Array{Int64,2}, ::Rational{Int64}, ::Rational{Int64}, ::Tuple{Float64,Float64}, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/meshes.jl:137
 [6] include_from_node1(::String) at ./loading.jl:539
 [7] include(::String) at ./sysimg.jl:14
 [8] include_from_node1(::String) at ./loading.jl:539
 [9] eval(::Module, ::Any) at ./boot.jl:235
 [10] require(::Symbol) at ./loading.jl:453
 [11] include_from_node1(::String) at ./loading.jl:539
 [12] include(::String) at ./sysimg.jl:14
 [13] process_options(::Base.JLOptions) at ./client.jl:305
 [14] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/DiffEqProblemLibrary/src/fem_premade_problems.jl, in expression starting on line 77
WARNING: A::AbstractArray & B::AbstractArray is deprecated, use A .& B instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] &(::BitArray{1}, ::BitArray{1}) at ./deprecated.jl:51
 [3] (::DiffEqProblemLibrary.##270#273)(::Array{Rational{Int64},2}) at /home/vagrant/.julia/v0.6/DiffEqProblemLibrary/src/fem_premade_problems.jl:73
 [4] include_from_node1(::String) at ./loading.jl:539
 [5] include(::String) at ./sysimg.jl:14
 [6] include_from_node1(::String) at ./loading.jl:539
 [7] eval(::Module, ::Any) at ./boot.jl:235
 [8] require(::Symbol) at ./loading.jl:453
 [9] include_from_node1(::String) at ./loading.jl:539
 [10] include(::String) at ./sysimg.jl:14
 [11] process_options(::Base.JLOptions) at ./client.jl:305
 [12] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/DiffEqProblemLibrary/src/fem_premade_problems.jl, in expression starting on line 78
WARNING: round{T}(::Type{T}, x::AbstractArray) is deprecated, use round.(T, x) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] round(::Type{Int64}, ::Array{Int64,2}) at ./deprecated.jl:51
 [3] #findboundary#90(::Array{Any,1}, ::Function, ::Array{Int64,2}) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/fem_boundary.jl:22
 [4] DiffEqPDEBase.FEMMesh(::Array{Rational{Int64},2}, ::Array{Int64,2}, ::Rational{Int64}, ::Tuple{Float64,Float64}, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/meshes.jl:34
 [5] parabolic_squaremesh(::Array{Int64,2}, ::Rational{Int64}, ::Rational{Int64}, ::Tuple{Float64,Float64}, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/meshes.jl:137
 [6] include_from_node1(::String) at ./loading.jl:539
 [7] include(::String) at ./sysimg.jl:14
 [8] include_from_node1(::String) at ./loading.jl:539
 [9] eval(::Module, ::Any) at ./boot.jl:235
 [10] require(::Symbol) at ./loading.jl:453
 [11] include_from_node1(::String) at ./loading.jl:539
 [12] include(::String) at ./sysimg.jl:14
 [13] process_options(::Base.JLOptions) at ./client.jl:305
 [14] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/DiffEqProblemLibrary/src/fem_premade_problems.jl, in expression starting on line 87
WARNING: round{T}(::Type{T}, x::AbstractArray) is deprecated, use round.(T, x) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] round(::Type{Int64}, ::Array{Int64,1}) at ./deprecated.jl:51
 [3] setboundary(::Array{Rational{Int64},2}, ::Array{Int64,2}, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/fem_boundary.jl:74
 [4] DiffEqPDEBase.FEMMesh(::Array{Rational{Int64},2}, ::Array{Int64,2}, ::Rational{Int64}, ::Tuple{Float64,Float64}, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/meshes.jl:35
 [5] parabolic_squaremesh(::Array{Int64,2}, ::Rational{Int64}, ::Rational{Int64}, ::Tuple{Float64,Float64}, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/meshes.jl:137
 [6] include_from_node1(::String) at ./loading.jl:539
 [7] include(::String) at ./sysimg.jl:14
 [8] include_from_node1(::String) at ./loading.jl:539
 [9] eval(::Module, ::Any) at ./boot.jl:235
 [10] require(::Symbol) at ./loading.jl:453
 [11] include_from_node1(::String) at ./loading.jl:539
 [12] include(::String) at ./sysimg.jl:14
 [13] process_options(::Base.JLOptions) at ./client.jl:305
 [14] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/DiffEqProblemLibrary/src/fem_premade_problems.jl, in expression starting on line 87
WARNING: round{T}(::Type{T}, x::AbstractArray) is deprecated, use round.(T, x) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] round(::Type{Int64}, ::Array{Int64,1}) at ./deprecated.jl:51
 [3] setboundary(::Array{Rational{Int64},2}, ::Array{Int64,2}, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/fem_boundary.jl:74
 [4] DiffEqPDEBase.FEMMesh(::Array{Rational{Int64},2}, ::Array{Int64,2}, ::Rational{Int64}, ::Tuple{Float64,Float64}, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/meshes.jl:35
 [5] parabolic_squaremesh(::Array{Int64,2}, ::Rational{Int64}, ::Rational{Int64}, ::Tuple{Float64,Float64}, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/meshes.jl:137
 [6] include_from_node1(::String) at ./loading.jl:539
 [7] include(::String) at ./sysimg.jl:14
 [8] include_from_node1(::String) at ./loading.jl:539
 [9] eval(::Module, ::Any) at ./boot.jl:235
 [10] require(::Symbol) at ./loading.jl:453
 [11] include_from_node1(::String) at ./loading.jl:539
 [12] include(::String) at ./sysimg.jl:14
 [13] process_options(::Base.JLOptions) at ./client.jl:305
 [14] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/DiffEqProblemLibrary/src/fem_premade_problems.jl, in expression starting on line 87
WARNING: A::AbstractArray & B::AbstractArray is deprecated, use A .& B instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] &(::BitArray{1}, ::BitArray{1}) at ./deprecated.jl:51
 [3] (::DiffEqProblemLibrary.##270#273)(::Array{Rational{Int64},2}) at /home/vagrant/.julia/v0.6/DiffEqProblemLibrary/src/fem_premade_problems.jl:73
 [4] include_from_node1(::String) at ./loading.jl:539
 [5] include(::String) at ./sysimg.jl:14
 [6] include_from_node1(::String) at ./loading.jl:539
 [7] eval(::Module, ::Any) at ./boot.jl:235
 [8] require(::Symbol) at ./loading.jl:453
 [9] include_from_node1(::String) at ./loading.jl:539
 [10] include(::String) at ./sysimg.jl:14
 [11] process_options(::Base.JLOptions) at ./client.jl:305
 [12] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/DiffEqProblemLibrary/src/fem_premade_problems.jl, in expression starting on line 88
WARNING: round{T}(::Type{T}, x::AbstractArray) is deprecated, use round.(T, x) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] round(::Type{Int64}, ::Array{Int64,2}) at ./deprecated.jl:51
 [3] #findboundary#90(::Array{Any,1}, ::Function, ::Array{Int64,2}) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/fem_boundary.jl:22
 [4] DiffEqPDEBase.FEMMesh(::Array{Rational{Int64},2}, ::Array{Int64,2}, ::Rational{Int64}, ::Tuple{Float64,Float64}, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/meshes.jl:34
 [5] parabolic_squaremesh(::Array{Int64,2}, ::Rational{Int64}, ::Rational{Int64}, ::Tuple{Float64,Float64}, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/meshes.jl:137
 [6] include_from_node1(::String) at ./loading.jl:539
 [7] include(::String) at ./sysimg.jl:14
 [8] include_from_node1(::String) at ./loading.jl:539
 [9] eval(::Module, ::Any) at ./boot.jl:235
 [10] require(::Symbol) at ./loading.jl:453
 [11] include_from_node1(::String) at ./loading.jl:539
 [12] include(::String) at ./sysimg.jl:14
 [13] process_options(::Base.JLOptions) at ./client.jl:305
 [14] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/DiffEqProblemLibrary/src/fem_premade_problems.jl, in expression starting on line 100
WARNING: round{T}(::Type{T}, x::AbstractArray) is deprecated, use round.(T, x) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] round(::Type{Int64}, ::Array{Int64,1}) at ./deprecated.jl:51
 [3] setboundary(::Array{Rational{Int64},2}, ::Array{Int64,2}, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/fem_boundary.jl:74
 [4] DiffEqPDEBase.FEMMesh(::Array{Rational{Int64},2}, ::Array{Int64,2}, ::Rational{Int64}, ::Tuple{Float64,Float64}, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/meshes.jl:35
 [5] parabolic_squaremesh(::Array{Int64,2}, ::Rational{Int64}, ::Rational{Int64}, ::Tuple{Float64,Float64}, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/meshes.jl:137
 [6] include_from_node1(::String) at ./loading.jl:539
 [7] include(::String) at ./sysimg.jl:14
 [8] include_from_node1(::String) at ./loading.jl:539
 [9] eval(::Module, ::Any) at ./boot.jl:235
 [10] require(::Symbol) at ./loading.jl:453
 [11] include_from_node1(::String) at ./loading.jl:539
 [12] include(::String) at ./sysimg.jl:14
 [13] process_options(::Base.JLOptions) at ./client.jl:305
 [14] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/DiffEqProblemLibrary/src/fem_premade_problems.jl, in expression starting on line 100
WARNING: round{T}(::Type{T}, x::AbstractArray) is deprecated, use round.(T, x) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] round(::Type{Int64}, ::Array{Int64,1}) at ./deprecated.jl:51
 [3] setboundary(::Array{Rational{Int64},2}, ::Array{Int64,2}, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/fem_boundary.jl:74
 [4] DiffEqPDEBase.FEMMesh(::Array{Rational{Int64},2}, ::Array{Int64,2}, ::Rational{Int64}, ::Tuple{Float64,Float64}, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/meshes.jl:35
 [5] parabolic_squaremesh(::Array{Int64,2}, ::Rational{Int64}, ::Rational{Int64}, ::Tuple{Float64,Float64}, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/meshes.jl:137
 [6] include_from_node1(::String) at ./loading.jl:539
 [7] include(::String) at ./sysimg.jl:14
 [8] include_from_node1(::String) at ./loading.jl:539
 [9] eval(::Module, ::Any) at ./boot.jl:235
 [10] require(::Symbol) at ./loading.jl:453
 [11] include_from_node1(::String) at ./loading.jl:539
 [12] include(::String) at ./sysimg.jl:14
 [13] process_options(::Base.JLOptions) at ./client.jl:305
 [14] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/DiffEqProblemLibrary/src/fem_premade_problems.jl, in expression starting on line 100
WARNING: round{T}(::Type{T}, x::AbstractArray) is deprecated, use round.(T, x) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] round(::Type{Int64}, ::Array{Int64,2}) at ./deprecated.jl:51
 [3] #findboundary#90(::Array{Any,1}, ::Function, ::Array{Int64,2}) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/fem_boundary.jl:22
 [4] DiffEqPDEBase.FEMMesh(::Array{Float64,2}, ::Array{Int64,2}, ::Float64, ::Tuple{Float64,Float64}, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/meshes.jl:34
 [5] parabolic_squaremesh(::Array{Int64,2}, ::Float64, ::Float64, ::Tuple{Float64,Float64}, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/meshes.jl:137
 [6] include_from_node1(::String) at ./loading.jl:539
 [7] include(::String) at ./sysimg.jl:14
 [8] include_from_node1(::String) at ./loading.jl:539
 [9] eval(::Module, ::Any) at ./boot.jl:235
 [10] require(::Symbol) at ./loading.jl:453
 [11] include_from_node1(::String) at ./loading.jl:539
 [12] include(::String) at ./sysimg.jl:14
 [13] process_options(::Base.JLOptions) at ./client.jl:305
 [14] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/DiffEqProblemLibrary/src/fem_premade_problems.jl, in expression starting on line 113
WARNING: round{T}(::Type{T}, x::AbstractArray) is deprecated, use round.(T, x) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] round(::Type{Int64}, ::Array{Int64,1}) at ./deprecated.jl:51
 [3] setboundary(::Array{Float64,2}, ::Array{Int64,2}, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/fem_boundary.jl:74
 [4] DiffEqPDEBase.FEMMesh(::Array{Float64,2}, ::Array{Int64,2}, ::Float64, ::Tuple{Float64,Float64}, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/meshes.jl:35
 [5] parabolic_squaremesh(::Array{Int64,2}, ::Float64, ::Float64, ::Tuple{Float64,Float64}, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/meshes.jl:137
 [6] include_from_node1(::String) at ./loading.jl:539
 [7] include(::String) at ./sysimg.jl:14
 [8] include_from_node1(::String) at ./loading.jl:539
 [9] eval(::Module, ::Any) at ./boot.jl:235
 [10] require(::Symbol) at ./loading.jl:453
 [11] include_from_node1(::String) at ./loading.jl:539
 [12] include(::String) at ./sysimg.jl:14
 [13] process_options(::Base.JLOptions) at ./client.jl:305
 [14] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/DiffEqProblemLibrary/src/fem_premade_problems.jl, in expression starting on line 113
WARNING: round{T}(::Type{T}, x::AbstractArray) is deprecated, use round.(T, x) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] round(::Type{Int64}, ::Array{Int64,1}) at ./deprecated.jl:51
 [3] setboundary(::Array{Float64,2}, ::Array{Int64,2}, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/fem_boundary.jl:74
 [4] DiffEqPDEBase.FEMMesh(::Array{Float64,2}, ::Array{Int64,2}, ::Float64, ::Tuple{Float64,Float64}, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/meshes.jl:35
 [5] parabolic_squaremesh(::Array{Int64,2}, ::Float64, ::Float64, ::Tuple{Float64,Float64}, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/meshes.jl:137
 [6] include_from_node1(::String) at ./loading.jl:539
 [7] include(::String) at ./sysimg.jl:14
 [8] include_from_node1(::String) at ./loading.jl:539
 [9] eval(::Module, ::Any) at ./boot.jl:235
 [10] require(::Symbol) at ./loading.jl:453
 [11] include_from_node1(::String) at ./loading.jl:539
 [12] include(::String) at ./sysimg.jl:14
 [13] process_options(::Base.JLOptions) at ./client.jl:305
 [14] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/DiffEqProblemLibrary/src/fem_premade_problems.jl, in expression starting on line 113
WARNING: round{T}(::Type{T}, x::AbstractArray) is deprecated, use round.(T, x) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] round(::Type{Int64}, ::Array{Int64,2}) at ./deprecated.jl:51
 [3] #findboundary#90(::Array{Any,1}, ::Function, ::Array{Int64,2}) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/fem_boundary.jl:22
 [4] DiffEqPDEBase.FEMMesh(::Array{Float64,2}, ::Array{Int64,2}, ::Float64, ::Tuple{Float64,Float64}, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/meshes.jl:34
 [5] parabolic_squaremesh(::Array{Int64,2}, ::Float64, ::Float64, ::Tuple{Float64,Float64}, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/meshes.jl:137
 [6] include_from_node1(::String) at ./loading.jl:539
 [7] include(::String) at ./sysimg.jl:14
 [8] include_from_node1(::String) at ./loading.jl:539
 [9] eval(::Module, ::Any) at ./boot.jl:235
 [10] require(::Symbol) at ./loading.jl:453
 [11] include_from_node1(::String) at ./loading.jl:539
 [12] include(::String) at ./sysimg.jl:14
 [13] process_options(::Base.JLOptions) at ./client.jl:305
 [14] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/DiffEqProblemLibrary/src/fem_premade_problems.jl, in expression starting on line 125
WARNING: round{T}(::Type{T}, x::AbstractArray) is deprecated, use round.(T, x) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] round(::Type{Int64}, ::Array{Int64,1}) at ./deprecated.jl:51
 [3] setboundary(::Array{Float64,2}, ::Array{Int64,2}, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/fem_boundary.jl:74
 [4] DiffEqPDEBase.FEMMesh(::Array{Float64,2}, ::Array{Int64,2}, ::Float64, ::Tuple{Float64,Float64}, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/meshes.jl:35
 [5] parabolic_squaremesh(::Array{Int64,2}, ::Float64, ::Float64, ::Tuple{Float64,Float64}, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/meshes.jl:137
 [6] include_from_node1(::String) at ./loading.jl:539
 [7] include(::String) at ./sysimg.jl:14
 [8] include_from_node1(::String) at ./loading.jl:539
 [9] eval(::Module, ::Any) at ./boot.jl:235
 [10] require(::Symbol) at ./loading.jl:453
 [11] include_from_node1(::String) at ./loading.jl:539
 [12] include(::String) at ./sysimg.jl:14
 [13] process_options(::Base.JLOptions) at ./client.jl:305
 [14] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/DiffEqProblemLibrary/src/fem_premade_problems.jl, in expression starting on line 125
WARNING: round{T}(::Type{T}, x::AbstractArray) is deprecated, use round.(T, x) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] round(::Type{Int64}, ::Array{Int64,1}) at ./deprecated.jl:51
 [3] setboundary(::Array{Float64,2}, ::Array{Int64,2}, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/fem_boundary.jl:74
 [4] DiffEqPDEBase.FEMMesh(::Array{Float64,2}, ::Array{Int64,2}, ::Float64, ::Tuple{Float64,Float64}, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/meshes.jl:35
 [5] parabolic_squaremesh(::Array{Int64,2}, ::Float64, ::Float64, ::Tuple{Float64,Float64}, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/meshes.jl:137
 [6] include_from_node1(::String) at ./loading.jl:539
 [7] include(::String) at ./sysimg.jl:14
 [8] include_from_node1(::String) at ./loading.jl:539
 [9] eval(::Module, ::Any) at ./boot.jl:235
 [10] require(::Symbol) at ./loading.jl:453
 [11] include_from_node1(::String) at ./loading.jl:539
 [12] include(::String) at ./sysimg.jl:14
 [13] process_options(::Base.JLOptions) at ./client.jl:305
 [14] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/DiffEqProblemLibrary/src/fem_premade_problems.jl, in expression starting on line 125
WARNING: round{T}(::Type{T}, x::AbstractArray) is deprecated, use round.(T, x) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] round(::Type{Int64}, ::Array{Int64,2}) at ./deprecated.jl:51
 [3] #findboundary#90(::Array{Any,1}, ::Function, ::Array{Int64,2}) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/fem_boundary.jl:22
 [4] DiffEqPDEBase.FEMMesh(::Array{Rational{Int64},2}, ::Array{Int64,2}, ::Rational{Int64}, ::Tuple{Float64,Float64}, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/meshes.jl:34
 [5] parabolic_squaremesh(::Array{Int64,2}, ::Rational{Int64}, ::Rational{Int64}, ::Tuple{Float64,Float64}, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/meshes.jl:137
 [6] include_from_node1(::String) at ./loading.jl:539
 [7] include(::String) at ./sysimg.jl:14
 [8] include_from_node1(::String) at ./loading.jl:539
 [9] eval(::Module, ::Any) at ./boot.jl:235
 [10] require(::Symbol) at ./loading.jl:453
 [11] include_from_node1(::String) at ./loading.jl:539
 [12] include(::String) at ./sysimg.jl:14
 [13] process_options(::Base.JLOptions) at ./client.jl:305
 [14] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/DiffEqProblemLibrary/src/fem_premade_problems.jl, in expression starting on line 206
WARNING: round{T}(::Type{T}, x::AbstractArray) is deprecated, use round.(T, x) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] round(::Type{Int64}, ::Array{Int64,1}) at ./deprecated.jl:51
 [3] setboundary(::Array{Rational{Int64},2}, ::Array{Int64,2}, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/fem_boundary.jl:74
 [4] DiffEqPDEBase.FEMMesh(::Array{Rational{Int64},2}, ::Array{Int64,2}, ::Rational{Int64}, ::Tuple{Float64,Float64}, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/meshes.jl:35
 [5] parabolic_squaremesh(::Array{Int64,2}, ::Rational{Int64}, ::Rational{Int64}, ::Tuple{Float64,Float64}, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/meshes.jl:137
 [6] include_from_node1(::String) at ./loading.jl:539
 [7] include(::String) at ./sysimg.jl:14
 [8] include_from_node1(::String) at ./loading.jl:539
 [9] eval(::Module, ::Any) at ./boot.jl:235
 [10] require(::Symbol) at ./loading.jl:453
 [11] include_from_node1(::String) at ./loading.jl:539
 [12] include(::String) at ./sysimg.jl:14
 [13] process_options(::Base.JLOptions) at ./client.jl:305
 [14] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/DiffEqProblemLibrary/src/fem_premade_problems.jl, in expression starting on line 206
WARNING: round{T}(::Type{T}, x::AbstractArray) is deprecated, use round.(T, x) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] round(::Type{Int64}, ::Array{Int64,1}) at ./deprecated.jl:51
 [3] setboundary(::Array{Rational{Int64},2}, ::Array{Int64,2}, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/fem_boundary.jl:74
 [4] DiffEqPDEBase.FEMMesh(::Array{Rational{Int64},2}, ::Array{Int64,2}, ::Rational{Int64}, ::Tuple{Float64,Float64}, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/meshes.jl:35
 [5] parabolic_squaremesh(::Array{Int64,2}, ::Rational{Int64}, ::Rational{Int64}, ::Tuple{Float64,Float64}, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/meshes.jl:137
 [6] include_from_node1(::String) at ./loading.jl:539
 [7] include(::String) at ./sysimg.jl:14
 [8] include_from_node1(::String) at ./loading.jl:539
 [9] eval(::Module, ::Any) at ./boot.jl:235
 [10] require(::Symbol) at ./loading.jl:453
 [11] include_from_node1(::String) at ./loading.jl:539
 [12] include(::String) at ./sysimg.jl:14
 [13] process_options(::Base.JLOptions) at ./client.jl:305
 [14] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/DiffEqProblemLibrary/src/fem_premade_problems.jl, in expression starting on line 206
WARNING: round{T}(::Type{T}, x::AbstractArray) is deprecated, use round.(T, x) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] round(::Type{Int64}, ::Array{Int64,2}) at ./deprecated.jl:51
 [3] #findboundary#90(::Array{Any,1}, ::Function, ::Array{Int64,2}) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/fem_boundary.jl:22
 [4] DiffEqPDEBase.FEMMesh(::Array{Rational{Int64},2}, ::Array{Int64,2}, ::Rational{Int64}, ::Tuple{Float64,Float64}, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/meshes.jl:34
 [5] parabolic_squaremesh(::Array{Int64,2}, ::Rational{Int64}, ::Rational{Int64}, ::Tuple{Float64,Float64}, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/meshes.jl:137
 [6] include_from_node1(::String) at ./loading.jl:539
 [7] include(::String) at ./sysimg.jl:14
 [8] include_from_node1(::String) at ./loading.jl:539
 [9] eval(::Module, ::Any) at ./boot.jl:235
 [10] require(::Symbol) at ./loading.jl:453
 [11] include_from_node1(::String) at ./loading.jl:539
 [12] include(::String) at ./sysimg.jl:14
 [13] process_options(::Base.JLOptions) at ./client.jl:305
 [14] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/DiffEqProblemLibrary/src/fem_premade_problems.jl, in expression starting on line 216
WARNING: round{T}(::Type{T}, x::AbstractArray) is deprecated, use round.(T, x) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] round(::Type{Int64}, ::Array{Int64,1}) at ./deprecated.jl:51
 [3] setboundary(::Array{Rational{Int64},2}, ::Array{Int64,2}, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/fem_boundary.jl:74
 [4] DiffEqPDEBase.FEMMesh(::Array{Rational{Int64},2}, ::Array{Int64,2}, ::Rational{Int64}, ::Tuple{Float64,Float64}, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/meshes.jl:35
 [5] parabolic_squaremesh(::Array{Int64,2}, ::Rational{Int64}, ::Rational{Int64}, ::Tuple{Float64,Float64}, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/meshes.jl:137
 [6] include_from_node1(::String) at ./loading.jl:539
 [7] include(::String) at ./sysimg.jl:14
 [8] include_from_node1(::String) at ./loading.jl:539
 [9] eval(::Module, ::Any) at ./boot.jl:235
 [10] require(::Symbol) at ./loading.jl:453
 [11] include_from_node1(::String) at ./loading.jl:539
 [12] include(::String) at ./sysimg.jl:14
 [13] process_options(::Base.JLOptions) at ./client.jl:305
 [14] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/DiffEqProblemLibrary/src/fem_premade_problems.jl, in expression starting on line 216
WARNING: round{T}(::Type{T}, x::AbstractArray) is deprecated, use round.(T, x) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] round(::Type{Int64}, ::Array{Int64,1}) at ./deprecated.jl:51
 [3] setboundary(::Array{Rational{Int64},2}, ::Array{Int64,2}, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/fem_boundary.jl:74
 [4] DiffEqPDEBase.FEMMesh(::Array{Rational{Int64},2}, ::Array{Int64,2}, ::Rational{Int64}, ::Tuple{Float64,Float64}, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/meshes.jl:35
 [5] parabolic_squaremesh(::Array{Int64,2}, ::Rational{Int64}, ::Rational{Int64}, ::Tuple{Float64,Float64}, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/meshes.jl:137
 [6] include_from_node1(::String) at ./loading.jl:539
 [7] include(::String) at ./sysimg.jl:14
 [8] include_from_node1(::String) at ./loading.jl:539
 [9] eval(::Module, ::Any) at ./boot.jl:235
 [10] require(::Symbol) at ./loading.jl:453
 [11] include_from_node1(::String) at ./loading.jl:539
 [12] include(::String) at ./sysimg.jl:14
 [13] process_options(::Base.JLOptions) at ./client.jl:305
 [14] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/DiffEqProblemLibrary/src/fem_premade_problems.jl, in expression starting on line 216
WARNING: round{T}(::Type{T}, x::AbstractArray) is deprecated, use round.(T, x) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] round(::Type{Int64}, ::Array{Int64,2}) at ./deprecated.jl:51
 [3] #findboundary#90(::Array{Any,1}, ::Function, ::Array{Int64,2}) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/fem_boundary.jl:22
 [4] DiffEqPDEBase.FEMMesh(::Array{Rational{Int64},2}, ::Array{Int64,2}, ::Void, ::Void, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/meshes.jl:34
 [5] notime_squaremesh(::Array{Int64,2}, ::Rational{Int64}, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/meshes.jl:116
 [6] include_from_node1(::String) at ./loading.jl:539
 [7] include(::String) at ./sysimg.jl:14
 [8] include_from_node1(::String) at ./loading.jl:539
 [9] eval(::Module, ::Any) at ./boot.jl:235
 [10] require(::Symbol) at ./loading.jl:453
 [11] include_from_node1(::String) at ./loading.jl:539
 [12] include(::String) at ./sysimg.jl:14
 [13] process_options(::Base.JLOptions) at ./client.jl:305
 [14] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/DiffEqProblemLibrary/src/fem_premade_problems.jl, in expression starting on line 226
WARNING: round{T}(::Type{T}, x::AbstractArray) is deprecated, use round.(T, x) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] round(::Type{Int64}, ::Array{Int64,1}) at ./deprecated.jl:51
 [3] setboundary(::Array{Rational{Int64},2}, ::Array{Int64,2}, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/fem_boundary.jl:74
 [4] DiffEqPDEBase.FEMMesh(::Array{Rational{Int64},2}, ::Array{Int64,2}, ::Void, ::Void, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/meshes.jl:35
 [5] notime_squaremesh(::Array{Int64,2}, ::Rational{Int64}, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/meshes.jl:116
 [6] include_from_node1(::String) at ./loading.jl:539
 [7] include(::String) at ./sysimg.jl:14
 [8] include_from_node1(::String) at ./loading.jl:539
 [9] eval(::Module, ::Any) at ./boot.jl:235
 [10] require(::Symbol) at ./loading.jl:453
 [11] include_from_node1(::String) at ./loading.jl:539
 [12] include(::String) at ./sysimg.jl:14
 [13] process_options(::Base.JLOptions) at ./client.jl:305
 [14] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/DiffEqProblemLibrary/src/fem_premade_problems.jl, in expression starting on line 226
WARNING: round{T}(::Type{T}, x::AbstractArray) is deprecated, use round.(T, x) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] round(::Type{Int64}, ::Array{Int64,1}) at ./deprecated.jl:51
 [3] setboundary(::Array{Rational{Int64},2}, ::Array{Int64,2}, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/fem_boundary.jl:74
 [4] DiffEqPDEBase.FEMMesh(::Array{Rational{Int64},2}, ::Array{Int64,2}, ::Void, ::Void, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/meshes.jl:35
 [5] notime_squaremesh(::Array{Int64,2}, ::Rational{Int64}, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/meshes.jl:116
 [6] include_from_node1(::String) at ./loading.jl:539
 [7] include(::String) at ./sysimg.jl:14
 [8] include_from_node1(::String) at ./loading.jl:539
 [9] eval(::Module, ::Any) at ./boot.jl:235
 [10] require(::Symbol) at ./loading.jl:453
 [11] include_from_node1(::String) at ./loading.jl:539
 [12] include(::String) at ./sysimg.jl:14
 [13] process_options(::Base.JLOptions) at ./client.jl:305
 [14] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/DiffEqProblemLibrary/src/fem_premade_problems.jl, in expression starting on line 226
WARNING: round{T}(::Type{T}, x::AbstractArray) is deprecated, use round.(T, x) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] round(::Type{Int64}, ::Array{Int64,2}) at ./deprecated.jl:51
 [3] #findboundary#90(::Array{Any,1}, ::Function, ::Array{Int64,2}) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/fem_boundary.jl:22
 [4] DiffEqPDEBase.FEMMesh(::Array{Rational{Int64},2}, ::Array{Int64,2}, ::Void, ::Void, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/meshes.jl:34
 [5] notime_squaremesh(::Array{Int64,2}, ::Rational{Int64}, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/meshes.jl:116
 [6] #314 at ./<missing>:0 [inlined]
 [7] next at ./generator.jl:44 [inlined]
 [8] collect(::Base.Generator{Array{Rational{Int64},1},DiffEqProblemLibrary.##314#315}) at ./array.jl:418
 [9] include_from_node1(::String) at ./loading.jl:539
 [10] include(::String) at ./sysimg.jl:14
 [11] include_from_node1(::String) at ./loading.jl:539
 [12] eval(::Module, ::Any) at ./boot.jl:235
 [13] require(::Symbol) at ./loading.jl:453
 [14] include_from_node1(::String) at ./loading.jl:539
 [15] include(::String) at ./sysimg.jl:14
 [16] process_options(::Base.JLOptions) at ./client.jl:305
 [17] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/DiffEqProblemLibrary/src/fem_premade_problems.jl, in expression starting on line 233
WARNING: round{T}(::Type{T}, x::AbstractArray) is deprecated, use round.(T, x) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] round(::Type{Int64}, ::Array{Int64,1}) at ./deprecated.jl:51
 [3] setboundary(::Array{Rational{Int64},2}, ::Array{Int64,2}, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/fem_boundary.jl:74
 [4] DiffEqPDEBase.FEMMesh(::Array{Rational{Int64},2}, ::Array{Int64,2}, ::Void, ::Void, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/meshes.jl:35
 [5] notime_squaremesh(::Array{Int64,2}, ::Rational{Int64}, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/meshes.jl:116
 [6] #314 at ./<missing>:0 [inlined]
 [7] next at ./generator.jl:44 [inlined]
 [8] collect(::Base.Generator{Array{Rational{Int64},1},DiffEqProblemLibrary.##314#315}) at ./array.jl:418
 [9] include_from_node1(::String) at ./loading.jl:539
 [10] include(::String) at ./sysimg.jl:14
 [11] include_from_node1(::String) at ./loading.jl:539
 [12] eval(::Module, ::Any) at ./boot.jl:235
 [13] require(::Symbol) at ./loading.jl:453
 [14] include_from_node1(::String) at ./loading.jl:539
 [15] include(::String) at ./sysimg.jl:14
 [16] process_options(::Base.JLOptions) at ./client.jl:305
 [17] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/DiffEqProblemLibrary/src/fem_premade_problems.jl, in expression starting on line 233
WARNING: round{T}(::Type{T}, x::AbstractArray) is deprecated, use round.(T, x) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] round(::Type{Int64}, ::Array{Int64,1}) at ./deprecated.jl:51
 [3] setboundary(::Array{Rational{Int64},2}, ::Array{Int64,2}, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/fem_boundary.jl:74
 [4] DiffEqPDEBase.FEMMesh(::Array{Rational{Int64},2}, ::Array{Int64,2}, ::Void, ::Void, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/meshes.jl:35
 [5] notime_squaremesh(::Array{Int64,2}, ::Rational{Int64}, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/meshes.jl:116
 [6] #314 at ./<missing>:0 [inlined]
 [7] next at ./generator.jl:44 [inlined]
 [8] collect(::Base.Generator{Array{Rational{Int64},1},DiffEqProblemLibrary.##314#315}) at ./array.jl:418
 [9] include_from_node1(::String) at ./loading.jl:539
 [10] include(::String) at ./sysimg.jl:14
 [11] include_from_node1(::String) at ./loading.jl:539
 [12] eval(::Module, ::Any) at ./boot.jl:235
 [13] require(::Symbol) at ./loading.jl:453
 [14] include_from_node1(::String) at ./loading.jl:539
 [15] include(::String) at ./sysimg.jl:14
 [16] process_options(::Base.JLOptions) at ./client.jl:305
 [17] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/DiffEqProblemLibrary/src/fem_premade_problems.jl, in expression starting on line 233
WARNING: round{T}(::Type{T}, x::AbstractArray) is deprecated, use round.(T, x) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] round(::Type{Int64}, ::Array{Int64,1}) at ./deprecated.jl:51
 [3] setboundary(::Array{Rational{Int64},2}, ::Array{Int64,2}, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/fem_boundary.jl:74
 [4] DiffEqPDEBase.FEMMesh(::Array{Rational{Int64},2}, ::Array{Int64,2}, ::Void, ::Void, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/meshes.jl:35
 [5] notime_squaremesh(::Array{Int64,2}, ::Rational{Int64}, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/meshes.jl:116
 [6] #314 at ./<missing>:0 [inlined]
 [7] next at ./generator.jl:44 [inlined]
 [8] collect_to!(::Array{DiffEqPDEBase.PoissonProblem{true,false,DiffEqPDEBase.FEMMesh{Array{Rational{Int64},2},Array{Float64,1},Void,Void},DiffEqProblemLibrary.##296#298,DiffEqProblemLibrary.##300#302,DiffEqProblemLibrary.##304#308,DiffEqProblemLibrary.##300#302,DiffEqPDEBase.##33#35{Int64},Array{Float64,2},DiffEqPDEBase.##34#36{Int64},Float64},1}, ::Base.Generator{Array{Rational{Int64},1},DiffEqProblemLibrary.##314#315}, ::Int64, ::Int64) at ./array.jl:451
 [9] collect(::Base.Generator{Array{Rational{Int64},1},DiffEqProblemLibrary.##314#315}) at ./array.jl:419
 [10] include_from_node1(::String) at ./loading.jl:539
 [11] include(::String) at ./sysimg.jl:14
 [12] include_from_node1(::String) at ./loading.jl:539
 [13] eval(::Module, ::Any) at ./boot.jl:235
 [14] require(::Symbol) at ./loading.jl:453
 [15] include_from_node1(::String) at ./loading.jl:539
 [16] include(::String) at ./sysimg.jl:14
 [17] process_options(::Base.JLOptions) at ./client.jl:305
 [18] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/DiffEqProblemLibrary/src/fem_premade_problems.jl, in expression starting on line 233
WARNING: round{T}(::Type{T}, x::AbstractArray) is deprecated, use round.(T, x) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] round(::Type{Int64}, ::Array{Int64,1}) at ./deprecated.jl:51
 [3] setboundary(::Array{Rational{Int64},2}, ::Array{Int64,2}, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/fem_boundary.jl:74
 [4] DiffEqPDEBase.FEMMesh(::Array{Rational{Int64},2}, ::Array{Int64,2}, ::Void, ::Void, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/meshes.jl:35
 [5] notime_squaremesh(::Array{Int64,2}, ::Rational{Int64}, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/meshes.jl:116
 [6] #314 at ./<missing>:0 [inlined]
 [7] next at ./generator.jl:44 [inlined]
 [8] collect_to!(::Array{DiffEqPDEBase.PoissonProblem{true,false,DiffEqPDEBase.FEMMesh{Array{Rational{Int64},2},Array{Float64,1},Void,Void},DiffEqProblemLibrary.##296#298,DiffEqProblemLibrary.##300#302,DiffEqProblemLibrary.##304#308,DiffEqProblemLibrary.##300#302,DiffEqPDEBase.##33#35{Int64},Array{Float64,2},DiffEqPDEBase.##34#36{Int64},Float64},1}, ::Base.Generator{Array{Rational{Int64},1},DiffEqProblemLibrary.##314#315}, ::Int64, ::Int64) at ./array.jl:451
 [9] collect(::Base.Generator{Array{Rational{Int64},1},DiffEqProblemLibrary.##314#315}) at ./array.jl:419
 [10] include_from_node1(::String) at ./loading.jl:539
 [11] include(::String) at ./sysimg.jl:14
 [12] include_from_node1(::String) at ./loading.jl:539
 [13] eval(::Module, ::Any) at ./boot.jl:235
 [14] require(::Symbol) at ./loading.jl:453
 [15] include_from_node1(::String) at ./loading.jl:539
 [16] include(::String) at ./sysimg.jl:14
 [17] process_options(::Base.JLOptions) at ./client.jl:305
 [18] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/DiffEqProblemLibrary/src/fem_premade_problems.jl, in expression starting on line 233
WARNING: round{T}(::Type{T}, x::AbstractArray) is deprecated, use round.(T, x) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] round(::Type{Int64}, ::Array{Int64,1}) at ./deprecated.jl:51
 [3] setboundary(::Array{Rational{Int64},2}, ::Array{Int64,2}, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/fem_boundary.jl:74
 [4] DiffEqPDEBase.FEMMesh(::Array{Rational{Int64},2}, ::Array{Int64,2}, ::Void, ::Void, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/meshes.jl:35
 [5] notime_squaremesh(::Array{Int64,2}, ::Rational{Int64}, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/meshes.jl:116
 [6] #314 at ./<missing>:0 [inlined]
 [7] next at ./generator.jl:44 [inlined]
 [8] collect_to!(::Array{DiffEqPDEBase.PoissonProblem{true,false,DiffEqPDEBase.FEMMesh{Array{Rational{Int64},2},Array{Float64,1},Void,Void},DiffEqProblemLibrary.##296#298,DiffEqProblemLibrary.##300#302,DiffEqProblemLibrary.##304#308,DiffEqProblemLibrary.##300#302,DiffEqPDEBase.##33#35{Int64},Array{Float64,2},DiffEqPDEBase.##34#36{Int64},Float64},1}, ::Base.Generator{Array{Rational{Int64},1},DiffEqProblemLibrary.##314#315}, ::Int64, ::Int64) at ./array.jl:451
 [9] collect(::Base.Generator{Array{Rational{Int64},1},DiffEqProblemLibrary.##314#315}) at ./array.jl:419
 [10] include_from_node1(::String) at ./loading.jl:539
 [11] include(::String) at ./sysimg.jl:14
 [12] include_from_node1(::String) at ./loading.jl:539
 [13] eval(::Module, ::Any) at ./boot.jl:235
 [14] require(::Symbol) at ./loading.jl:453
 [15] include_from_node1(::String) at ./loading.jl:539
 [16] include(::String) at ./sysimg.jl:14
 [17] process_options(::Base.JLOptions) at ./client.jl:305
 [18] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/DiffEqProblemLibrary/src/fem_premade_problems.jl, in expression starting on line 233
WARNING: round{T}(::Type{T}, x::AbstractArray) is deprecated, use round.(T, x) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] round(::Type{Int64}, ::Array{Int64,1}) at ./deprecated.jl:51
 [3] setboundary(::Array{Rational{Int64},2}, ::Array{Int64,2}, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/fem_boundary.jl:74
 [4] DiffEqPDEBase.FEMMesh(::Array{Rational{Int64},2}, ::Array{Int64,2}, ::Void, ::Void, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/meshes.jl:35
 [5] notime_squaremesh(::Array{Int64,2}, ::Rational{Int64}, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/meshes.jl:116
 [6] #314 at ./<missing>:0 [inlined]
 [7] next at ./generator.jl:44 [inlined]
 [8] collect_to!(::Array{DiffEqPDEBase.PoissonProblem{true,false,DiffEqPDEBase.FEMMesh{Array{Rational{Int64},2},Array{Float64,1},Void,Void},DiffEqProblemLibrary.##296#298,DiffEqProblemLibrary.##300#302,DiffEqProblemLibrary.##304#308,DiffEqProblemLibrary.##300#302,DiffEqPDEBase.##33#35{Int64},Array{Float64,2},DiffEqPDEBase.##34#36{Int64},Float64},1}, ::Base.Generator{Array{Rational{Int64},1},DiffEqProblemLibrary.##314#315}, ::Int64, ::Int64) at ./array.jl:451
 [9] collect(::Base.Generator{Array{Rational{Int64},1},DiffEqProblemLibrary.##314#315}) at ./array.jl:419
 [10] include_from_node1(::String) at ./loading.jl:539
 [11] include(::String) at ./sysimg.jl:14
 [12] include_from_node1(::String) at ./loading.jl:539
 [13] eval(::Module, ::Any) at ./boot.jl:235
 [14] require(::Symbol) at ./loading.jl:453
 [15] include_from_node1(::String) at ./loading.jl:539
 [16] include(::String) at ./sysimg.jl:14
 [17] process_options(::Base.JLOptions) at ./client.jl:305
 [18] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/DiffEqProblemLibrary/src/fem_premade_problems.jl, in expression starting on line 233
WARNING: round{T}(::Type{T}, x::AbstractArray) is deprecated, use round.(T, x) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] round(::Type{Int64}, ::Array{Int64,2}) at ./deprecated.jl:51
 [3] #findboundary#90(::Array{Any,1}, ::Function, ::Array{Int64,2}) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/fem_boundary.jl:22
 [4] DiffEqPDEBase.FEMMesh(::Array{Rational{Int64},2}, ::Array{Int64,2}, ::Void, ::Void, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/meshes.jl:34
 [5] notime_squaremesh(::Array{Int64,2}, ::Rational{Int64}, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/meshes.jl:116
 [6] include_from_node1(::String) at ./loading.jl:539
 [7] include(::String) at ./sysimg.jl:14
 [8] include_from_node1(::String) at ./loading.jl:539
 [9] eval(::Module, ::Any) at ./boot.jl:235
 [10] require(::Symbol) at ./loading.jl:453
 [11] include_from_node1(::String) at ./loading.jl:539
 [12] include(::String) at ./sysimg.jl:14
 [13] process_options(::Base.JLOptions) at ./client.jl:305
 [14] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/DiffEqProblemLibrary/src/fem_premade_problems.jl, in expression starting on line 238
WARNING: round{T}(::Type{T}, x::AbstractArray) is deprecated, use round.(T, x) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] round(::Type{Int64}, ::Array{Int64,1}) at ./deprecated.jl:51
 [3] setboundary(::Array{Rational{Int64},2}, ::Array{Int64,2}, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/fem_boundary.jl:74
 [4] DiffEqPDEBase.FEMMesh(::Array{Rational{Int64},2}, ::Array{Int64,2}, ::Void, ::Void, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/meshes.jl:35
 [5] notime_squaremesh(::Array{Int64,2}, ::Rational{Int64}, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/meshes.jl:116
 [6] include_from_node1(::String) at ./loading.jl:539
 [7] include(::String) at ./sysimg.jl:14
 [8] include_from_node1(::String) at ./loading.jl:539
 [9] eval(::Module, ::Any) at ./boot.jl:235
 [10] require(::Symbol) at ./loading.jl:453
 [11] include_from_node1(::String) at ./loading.jl:539
 [12] include(::String) at ./sysimg.jl:14
 [13] process_options(::Base.JLOptions) at ./client.jl:305
 [14] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/DiffEqProblemLibrary/src/fem_premade_problems.jl, in expression starting on line 238
WARNING: round{T}(::Type{T}, x::AbstractArray) is deprecated, use round.(T, x) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] round(::Type{Int64}, ::Array{Int64,1}) at ./deprecated.jl:51
 [3] setboundary(::Array{Rational{Int64},2}, ::Array{Int64,2}, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/fem_boundary.jl:74
 [4] DiffEqPDEBase.FEMMesh(::Array{Rational{Int64},2}, ::Array{Int64,2}, ::Void, ::Void, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/meshes.jl:35
 [5] notime_squaremesh(::Array{Int64,2}, ::Rational{Int64}, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/meshes.jl:116
 [6] include_from_node1(::String) at ./loading.jl:539
 [7] include(::String) at ./sysimg.jl:14
 [8] include_from_node1(::String) at ./loading.jl:539
 [9] eval(::Module, ::Any) at ./boot.jl:235
 [10] require(::Symbol) at ./loading.jl:453
 [11] include_from_node1(::String) at ./loading.jl:539
 [12] include(::String) at ./sysimg.jl:14
 [13] process_options(::Base.JLOptions) at ./client.jl:305
 [14] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/DiffEqProblemLibrary/src/fem_premade_problems.jl, in expression starting on line 238
WARNING: round{T}(::Type{T}, x::AbstractArray) is deprecated, use round.(T, x) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] round(::Type{Int64}, ::Array{Int64,2}) at ./deprecated.jl:51
 [3] #findboundary#90(::Array{Any,1}, ::Function, ::Array{Int64,2}) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/fem_boundary.jl:22
 [4] DiffEqPDEBase.FEMMesh(::Array{Rational{Int64},2}, ::Array{Int64,2}, ::Void, ::Void, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/meshes.jl:34
 [5] notime_squaremesh(::Array{Int64,2}, ::Rational{Int64}, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/meshes.jl:116
 [6] include_from_node1(::String) at ./loading.jl:539
 [7] include(::String) at ./sysimg.jl:14
 [8] include_from_node1(::String) at ./loading.jl:539
 [9] eval(::Module, ::Any) at ./boot.jl:235
 [10] require(::Symbol) at ./loading.jl:453
 [11] include_from_node1(::String) at ./loading.jl:539
 [12] include(::String) at ./sysimg.jl:14
 [13] process_options(::Base.JLOptions) at ./client.jl:305
 [14] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/DiffEqProblemLibrary/src/fem_premade_problems.jl, in expression starting on line 247
WARNING: round{T}(::Type{T}, x::AbstractArray) is deprecated, use round.(T, x) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] round(::Type{Int64}, ::Array{Int64,1}) at ./deprecated.jl:51
 [3] setboundary(::Array{Rational{Int64},2}, ::Array{Int64,2}, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/fem_boundary.jl:74
 [4] DiffEqPDEBase.FEMMesh(::Array{Rational{Int64},2}, ::Array{Int64,2}, ::Void, ::Void, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/meshes.jl:35
 [5] notime_squaremesh(::Array{Int64,2}, ::Rational{Int64}, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/meshes.jl:116
 [6] include_from_node1(::String) at ./loading.jl:539
 [7] include(::String) at ./sysimg.jl:14
 [8] include_from_node1(::String) at ./loading.jl:539
 [9] eval(::Module, ::Any) at ./boot.jl:235
 [10] require(::Symbol) at ./loading.jl:453
 [11] include_from_node1(::String) at ./loading.jl:539
 [12] include(::String) at ./sysimg.jl:14
 [13] process_options(::Base.JLOptions) at ./client.jl:305
 [14] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/DiffEqProblemLibrary/src/fem_premade_problems.jl, in expression starting on line 247
WARNING: round{T}(::Type{T}, x::AbstractArray) is deprecated, use round.(T, x) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] round(::Type{Int64}, ::Array{Int64,1}) at ./deprecated.jl:51
 [3] setboundary(::Array{Rational{Int64},2}, ::Array{Int64,2}, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/fem_boundary.jl:74
 [4] DiffEqPDEBase.FEMMesh(::Array{Rational{Int64},2}, ::Array{Int64,2}, ::Void, ::Void, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/meshes.jl:35
 [5] notime_squaremesh(::Array{Int64,2}, ::Rational{Int64}, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/meshes.jl:116
 [6] include_from_node1(::String) at ./loading.jl:539
 [7] include(::String) at ./sysimg.jl:14
 [8] include_from_node1(::String) at ./loading.jl:539
 [9] eval(::Module, ::Any) at ./boot.jl:235
 [10] require(::Symbol) at ./loading.jl:453
 [11] include_from_node1(::String) at ./loading.jl:539
 [12] include(::String) at ./sysimg.jl:14
 [13] process_options(::Base.JLOptions) at ./client.jl:305
 [14] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/DiffEqProblemLibrary/src/fem_premade_problems.jl, in expression starting on line 247
WARNING: round{T}(::Type{T}, x::AbstractArray) is deprecated, use round.(T, x) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] round(::Type{Int64}, ::Array{Int64,2}) at ./deprecated.jl:51
 [3] #findboundary#90(::Array{Any,1}, ::Function, ::Array{Int64,2}) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/fem_boundary.jl:22
 [4] DiffEqPDEBase.FEMMesh(::Array{Rational{Int64},2}, ::Array{Int64,2}, ::Void, ::Void, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/meshes.jl:34
 [5] notime_squaremesh(::Array{Int64,2}, ::Rational{Int64}, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/meshes.jl:116
 [6] include_from_node1(::String) at ./loading.jl:539
 [7] include(::String) at ./sysimg.jl:14
 [8] include_from_node1(::String) at ./loading.jl:539
 [9] eval(::Module, ::Any) at ./boot.jl:235
 [10] require(::Symbol) at ./loading.jl:453
 [11] include_from_node1(::String) at ./loading.jl:539
 [12] include(::String) at ./sysimg.jl:14
 [13] process_options(::Base.JLOptions) at ./client.jl:305
 [14] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/DiffEqProblemLibrary/src/fem_premade_problems.jl, in expression starting on line 258
WARNING: round{T}(::Type{T}, x::AbstractArray) is deprecated, use round.(T, x) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] round(::Type{Int64}, ::Array{Int64,1}) at ./deprecated.jl:51
 [3] setboundary(::Array{Rational{Int64},2}, ::Array{Int64,2}, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/fem_boundary.jl:74
 [4] DiffEqPDEBase.FEMMesh(::Array{Rational{Int64},2}, ::Array{Int64,2}, ::Void, ::Void, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/meshes.jl:35
 [5] notime_squaremesh(::Array{Int64,2}, ::Rational{Int64}, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/meshes.jl:116
 [6] include_from_node1(::String) at ./loading.jl:539
 [7] include(::String) at ./sysimg.jl:14
 [8] include_from_node1(::String) at ./loading.jl:539
 [9] eval(::Module, ::Any) at ./boot.jl:235
 [10] require(::Symbol) at ./loading.jl:453
 [11] include_from_node1(::String) at ./loading.jl:539
 [12] include(::String) at ./sysimg.jl:14
 [13] process_options(::Base.JLOptions) at ./client.jl:305
 [14] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/DiffEqProblemLibrary/src/fem_premade_problems.jl, in expression starting on line 258
WARNING: round{T}(::Type{T}, x::AbstractArray) is deprecated, use round.(T, x) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] round(::Type{Int64}, ::Array{Int64,1}) at ./deprecated.jl:51
 [3] setboundary(::Array{Rational{Int64},2}, ::Array{Int64,2}, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/fem_boundary.jl:74
 [4] DiffEqPDEBase.FEMMesh(::Array{Rational{Int64},2}, ::Array{Int64,2}, ::Void, ::Void, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/meshes.jl:35
 [5] notime_squaremesh(::Array{Int64,2}, ::Rational{Int64}, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/meshes.jl:116
 [6] include_from_node1(::String) at ./loading.jl:539
 [7] include(::String) at ./sysimg.jl:14
 [8] include_from_node1(::String) at ./loading.jl:539
 [9] eval(::Module, ::Any) at ./boot.jl:235
 [10] require(::Symbol) at ./loading.jl:453
 [11] include_from_node1(::String) at ./loading.jl:539
 [12] include(::String) at ./sysimg.jl:14
 [13] process_options(::Base.JLOptions) at ./client.jl:305
 [14] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/DiffEqProblemLibrary/src/fem_premade_problems.jl, in expression starting on line 258
WARNING: round{T}(::Type{T}, x::AbstractArray) is deprecated, use round.(T, x) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] round(::Type{Int64}, ::Array{Int64,2}) at ./deprecated.jl:51
 [3] #findboundary#90(::Array{Any,1}, ::Function, ::Array{Int64,2}) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/fem_boundary.jl:22
 [4] DiffEqPDEBase.FEMMesh(::Array{Rational{Int64},2}, ::Array{Int64,2}, ::Void, ::Void, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/meshes.jl:34
 [5] notime_squaremesh(::Array{Int64,2}, ::Rational{Int64}, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/meshes.jl:116
 [6] include_from_node1(::String) at ./loading.jl:539
 [7] include(::String) at ./sysimg.jl:14
 [8] include_from_node1(::String) at ./loading.jl:539
 [9] eval(::Module, ::Any) at ./boot.jl:235
 [10] require(::Symbol) at ./loading.jl:453
 [11] include_from_node1(::String) at ./loading.jl:539
 [12] include(::String) at ./sysimg.jl:14
 [13] process_options(::Base.JLOptions) at ./client.jl:305
 [14] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/DiffEqProblemLibrary/src/fem_premade_problems.jl, in expression starting on line 270
WARNING: round{T}(::Type{T}, x::AbstractArray) is deprecated, use round.(T, x) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] round(::Type{Int64}, ::Array{Int64,1}) at ./deprecated.jl:51
 [3] setboundary(::Array{Rational{Int64},2}, ::Array{Int64,2}, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/fem_boundary.jl:74
 [4] DiffEqPDEBase.FEMMesh(::Array{Rational{Int64},2}, ::Array{Int64,2}, ::Void, ::Void, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/meshes.jl:35
 [5] notime_squaremesh(::Array{Int64,2}, ::Rational{Int64}, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/meshes.jl:116
 [6] include_from_node1(::String) at ./loading.jl:539
 [7] include(::String) at ./sysimg.jl:14
 [8] include_from_node1(::String) at ./loading.jl:539
 [9] eval(::Module, ::Any) at ./boot.jl:235
 [10] require(::Symbol) at ./loading.jl:453
 [11] include_from_node1(::String) at ./loading.jl:539
 [12] include(::String) at ./sysimg.jl:14
 [13] process_options(::Base.JLOptions) at ./client.jl:305
 [14] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/DiffEqProblemLibrary/src/fem_premade_problems.jl, in expression starting on line 270
WARNING: round{T}(::Type{T}, x::AbstractArray) is deprecated, use round.(T, x) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] round(::Type{Int64}, ::Array{Int64,1}) at ./deprecated.jl:51
 [3] setboundary(::Array{Rational{Int64},2}, ::Array{Int64,2}, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/fem_boundary.jl:74
 [4] DiffEqPDEBase.FEMMesh(::Array{Rational{Int64},2}, ::Array{Int64,2}, ::Void, ::Void, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/meshes.jl:35
 [5] notime_squaremesh(::Array{Int64,2}, ::Rational{Int64}, ::Symbol) at /home/vagrant/.julia/v0.6/DiffEqPDEBase/src/mesh_tools/meshes.jl:116
 [6] include_from_node1(::String) at ./loading.jl:539
 [7] include(::String) at ./sysimg.jl:14
 [8] include_from_node1(::String) at ./loading.jl:539
 [9] eval(::Module, ::Any) at ./boot.jl:235
 [10] require(::Symbol) at ./loading.jl:453
 [11] include_from_node1(::String) at ./loading.jl:539
 [12] include(::String) at ./sysimg.jl:14
 [13] process_options(::Base.JLOptions) at ./client.jl:305
 [14] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/DiffEqProblemLibrary/src/fem_premade_problems.jl, in expression starting on line 270
Solve and Plot
Convergence Test on Linear
Test Summary:    | Pass  Total
Linear SDE Tests |    1      1
 31.615622 seconds (18.46 M allocations: 1.270 GiB, 3.12% gc time)
Test Summary:     |
Linear RODE Tests | No tests
  6.924923 seconds (2.97 M allocations: 235.699 MiB, 1.88% gc time)
Solve and Plot
Convergence Test on 2D Linear
Test Summary:                    | Pass  Total
Two-dimensional Linear SDE Tests |    4      4
 25.716690 seconds (12.47 M allocations: 864.610 MiB, 2.45% gc time)
Solve and Plot
Convergence Test on MultiDimAdditive
Test Summary:      | Pass  Total
Additive SDE Tests |    2      2
 17.493161 seconds (6.52 M allocations: 507.411 MiB, 1.43% gc time)
Test Summary:       | Pass  Total
Rossler Order Tests |    2      2
  0.930525 seconds (340.85 k allocations: 15.814 MiB, 2.30% gc time)
Test Summary:     | Pass  Total
Convergence Tests |   14     14
 38.484684 seconds (21.64 M allocations: 1.720 GiB, 2.93% gc time)
Test Summary:                  | Pass  Total
Stratonovich Convergence Tests |    2      2
  8.719193 seconds (10.81 M allocations: 673.901 MiB, 6.55% gc time)
Solve and Plot
Solve and Plot
Test Summary:     | Pass  Total
Number Type Tests |    1      1
  1.790012 seconds (784.26 k allocations: 82.884 MiB, 2.54% gc time)
Test Summary:    | Pass  Total
Noise Type Tests | 1002   1002
  7.791336 seconds (3.02 M allocations: 236.084 MiB, 4.57% gc time)
Test Summary: | Pass  Total
tdir Tests    |    2      2
  2.629372 seconds (1.56 M allocations: 118.980 MiB, 2.05% gc time)
(t, u) = (0.0625, 0.5315625)
(t, u) = (0.125, 0.4955841885959702)
(t, u) = (0.1875, 0.6970395501971495)
(t, u) = (0.25, 0.8010868800265734)
(t, u) = (0.3125, 0.728700174539274)
(t, u) = (0.33, 0.716066738468708)
(t, u) = (0.3925, 0.8994060381783094)
(t, u) = (0.455, 0.9298735322035697)
(t, u) = (0.5175000000000001, 0.9048014419878475)
(t, u) = (0.5800000000000001, 1.219739206326499)
(t, u) = (0.6425000000000001, 1.239483924192983)
(t, u) = (0.7050000000000001, 1.359590746602997)
(t, u) = (0.7675000000000001, 1.334440151729255)
(t, u) = (0.8300000000000001, 1.7472591831927882)
(t, u) = (0.8925000000000001, 1.9262174208765106)
(t, u) = (0.9550000000000001, 1.9556216128025343)
(t, u) = (1.0, 2.2025658047699497)
Test Summary: | Pass  Total
tstops Tests  |    2      2
  2.028593 seconds (872.34 k allocations: 86.700 MiB, 2.27% gc time)
Test Summary: | Pass  Total
saveat Tests  |    3      3
  6.557627 seconds (3.34 M allocations: 327.165 MiB, 2.98% gc time)
WARNING: big(x::AbstractArray{$(Expr(:<:, :AbstractFloat))}) is deprecated, use big.(x) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] big(::Array{Float64,1}) at ./deprecated.jl:51
 [3] #oval2ModelExample#175(::Bool, ::Bool, ::Int64, ::Function) at /home/vagrant/.julia/v0.6/DiffEqProblemLibrary/src/sde_premade_problems.jl:314
 [4] (::DiffEqProblemLibrary.#kw##oval2ModelExample)(::Array{Any,1}, ::DiffEqProblemLibrary.#oval2ModelExample) at ./<missing>:0
 [5] include_from_node1(::String) at ./loading.jl:539
 [6] include(::String) at ./sysimg.jl:14
 [7] macro expansion at /home/vagrant/.julia/v0.6/StochasticDiffEq/test/runtests.jl:21 [inlined]
 [8] macro expansion at ./test.jl:853 [inlined]
 [9] macro expansion at ./util.jl:237 [inlined]
 [10] anonymous at ./<missing>:?
 [11] include_from_node1(::String) at ./loading.jl:539
 [12] include(::String) at ./sysimg.jl:14
 [13] process_options(::Base.JLOptions) at ./client.jl:305
 [14] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/StochasticDiffEq/test/oval2_test.jl, in expression starting on line 7
Test Summary: |
Oval2         | No tests
  0.750041 seconds (321.55 k allocations: 15.768 MiB, 1.73% gc time)
  2.458044 seconds (1.25 M allocations: 107.423 MiB, 2.90% gc time)
  0.012347 seconds (2.10 k allocations: 163.305 KiB)
WARNING: max{T1 <: Real, T2 <: Real}(x::AbstractArray{T1}, y::AbstractArray{T2}) is deprecated, use max.(x, y) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] max(::Array{Float64,2}, ::Array{Float64,2}) at ./deprecated.jl:51
 [3] sde_determine_initdt(::Array{Float64,2}, ::Float64, ::Float64, ::Float64, ::Float64, ::Float64, ::StochasticDiffEq.#ODE_DEFAULT_NORM, ::DiffEqBase.SDEProblem{Array{Float64,2},Float64,true,true,:White,DiffEqProblemLibrary.##122#123,DiffEqProblemLibrary.##124#125,DiffEqBase.#white_noise_func_wrapper!,DiffEqBase.CallbackSet{Tuple{},Tuple{}},Void}, ::Rational{Int64}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/initdt.jl:15
 [4] #init#59(::Float64, ::Int64, ::Bool, ::Array{Float64,1}, ::Array{Float64,1}, ::Array{Float64,1}, ::Void, ::Bool, ::Void, ::Bool, ::Bool, ::Bool, ::Bool, ::Rational{Int64}, ::Float64, ::Float64, ::Rational{Int64}, ::Rational{Int64}, ::Rational{Int64}, ::Bool, ::Rational{Int64}, ::Rational{Int64}, ::Rational{Int64}, ::Float64, ::Float64, ::Float64, ::StochasticDiffEq.#ODE_DEFAULT_NORM, ::StochasticDiffEq.#ODE_DEFAULT_UNSTABLE_CHECK, ::StochasticDiffEq.#ODE_DEFAULT_ISOUTOFDOMAIN, ::Bool, ::Bool, ::Bool, ::Bool, ::Int64, ::Bool, ::StochasticDiffEq.#ODE_DEFAULT_PROG_MESSAGE, ::String, ::Void, ::DiffEqBase.CallbackSet{Tuple{},Tuple{}}, ::Bool, ::Bool, ::Bool, ::Array{Any,1}, ::DiffEqBase.#init, ::DiffEqBase.SDEProblem{Array{Float64,2},Float64,true,true,:White,DiffEqProblemLibrary.##122#123,DiffEqProblemLibrary.##124#125,DiffEqBase.#white_noise_func_wrapper!,DiffEqBase.CallbackSet{Tuple{},Tuple{}},Void}, ::StochasticDiffEq.StochasticCompositeAlgorithm{Tuple{StochasticDiffEq.SRI{StochasticDiffEq.RosslerSRI{Float64,Float64},StochasticDiffEq.RSWM{:RSwM3,Float64}},StochasticDiffEq.SRI{StochasticDiffEq.RosslerSRI{Float64,Float64},StochasticDiffEq.RSWM{:RSwM3,Float64}}},#choice_function,StochasticDiffEq.RSWM{:RSwM3,Float64}}, ::Array{Array{Float64,2},1}, ::Array{Float64,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/solve.jl:112
 [5] init(::DiffEqBase.SDEProblem{Array{Float64,2},Float64,true,true,:White,DiffEqProblemLibrary.##122#123,DiffEqProblemLibrary.##124#125,DiffEqBase.#white_noise_func_wrapper!,DiffEqBase.CallbackSet{Tuple{},Tuple{}},Void}, ::StochasticDiffEq.StochasticCompositeAlgorithm{Tuple{StochasticDiffEq.SRI{StochasticDiffEq.RosslerSRI{Float64,Float64},StochasticDiffEq.RSWM{:RSwM3,Float64}},StochasticDiffEq.SRI{StochasticDiffEq.RosslerSRI{Float64,Float64},StochasticDiffEq.RSWM{:RSwM3,Float64}}},#choice_function,StochasticDiffEq.RSWM{:RSwM3,Float64}}, ::Array{Array{Float64,2},1}, ::Array{Float64,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/solve.jl:51 (repeats 2 times)
 [6] include_from_node1(::String) at ./loading.jl:539
 [7] include(::String) at ./sysimg.jl:14
 [8] macro expansion at /home/vagrant/.julia/v0.6/StochasticDiffEq/test/runtests.jl:22 [inlined]
 [9] macro expansion at ./test.jl:853 [inlined]
 [10] macro expansion at ./util.jl:237 [inlined]
 [11] anonymous at ./<missing>:?
 [12] include_from_node1(::String) at ./loading.jl:539
 [13] include(::String) at ./sysimg.jl:14
 [14] process_options(::Base.JLOptions) at ./client.jl:305
 [15] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/StochasticDiffEq/test/composite_algorithm_test.jl, in expression starting on line 16
WARNING: max{T1 <: Real, T2 <: Real}(x::AbstractArray{T1}, y::AbstractArray{T2}) is deprecated, use max.(x, y) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] max(::Array{Float64,2}, ::Array{Float64,2}) at ./deprecated.jl:51
 [3] sde_determine_initdt(::Array{Float64,2}, ::Float64, ::Float64, ::Float64, ::Float64, ::Float64, ::StochasticDiffEq.#ODE_DEFAULT_NORM, ::DiffEqBase.SDEProblem{Array{Float64,2},Float64,true,true,:White,DiffEqProblemLibrary.##122#123,DiffEqProblemLibrary.##124#125,DiffEqBase.#white_noise_func_wrapper!,DiffEqBase.CallbackSet{Tuple{},Tuple{}},Void}, ::Rational{Int64}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/initdt.jl:32
 [4] #init#59(::Float64, ::Int64, ::Bool, ::Array{Float64,1}, ::Array{Float64,1}, ::Array{Float64,1}, ::Void, ::Bool, ::Void, ::Bool, ::Bool, ::Bool, ::Bool, ::Rational{Int64}, ::Float64, ::Float64, ::Rational{Int64}, ::Rational{Int64}, ::Rational{Int64}, ::Bool, ::Rational{Int64}, ::Rational{Int64}, ::Rational{Int64}, ::Float64, ::Float64, ::Float64, ::StochasticDiffEq.#ODE_DEFAULT_NORM, ::StochasticDiffEq.#ODE_DEFAULT_UNSTABLE_CHECK, ::StochasticDiffEq.#ODE_DEFAULT_ISOUTOFDOMAIN, ::Bool, ::Bool, ::Bool, ::Bool, ::Int64, ::Bool, ::StochasticDiffEq.#ODE_DEFAULT_PROG_MESSAGE, ::String, ::Void, ::DiffEqBase.CallbackSet{Tuple{},Tuple{}}, ::Bool, ::Bool, ::Bool, ::Array{Any,1}, ::DiffEqBase.#init, ::DiffEqBase.SDEProblem{Array{Float64,2},Float64,true,true,:White,DiffEqProblemLibrary.##122#123,DiffEqProblemLibrary.##124#125,DiffEqBase.#white_noise_func_wrapper!,DiffEqBase.CallbackSet{Tuple{},Tuple{}},Void}, ::StochasticDiffEq.StochasticCompositeAlgorithm{Tuple{StochasticDiffEq.SRI{StochasticDiffEq.RosslerSRI{Float64,Float64},StochasticDiffEq.RSWM{:RSwM3,Float64}},StochasticDiffEq.SRI{StochasticDiffEq.RosslerSRI{Float64,Float64},StochasticDiffEq.RSWM{:RSwM3,Float64}}},#choice_function,StochasticDiffEq.RSWM{:RSwM3,Float64}}, ::Array{Array{Float64,2},1}, ::Array{Float64,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/solve.jl:112
 [5] init(::DiffEqBase.SDEProblem{Array{Float64,2},Float64,true,true,:White,DiffEqProblemLibrary.##122#123,DiffEqProblemLibrary.##124#125,DiffEqBase.#white_noise_func_wrapper!,DiffEqBase.CallbackSet{Tuple{},Tuple{}},Void}, ::StochasticDiffEq.StochasticCompositeAlgorithm{Tuple{StochasticDiffEq.SRI{StochasticDiffEq.RosslerSRI{Float64,Float64},StochasticDiffEq.RSWM{:RSwM3,Float64}},StochasticDiffEq.SRI{StochasticDiffEq.RosslerSRI{Float64,Float64},StochasticDiffEq.RSWM{:RSwM3,Float64}}},#choice_function,StochasticDiffEq.RSWM{:RSwM3,Float64}}, ::Array{Array{Float64,2},1}, ::Array{Float64,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/solve.jl:51 (repeats 2 times)
 [6] include_from_node1(::String) at ./loading.jl:539
 [7] include(::String) at ./sysimg.jl:14
 [8] macro expansion at /home/vagrant/.julia/v0.6/StochasticDiffEq/test/runtests.jl:22 [inlined]
 [9] macro expansion at ./test.jl:853 [inlined]
 [10] macro expansion at ./util.jl:237 [inlined]
 [11] anonymous at ./<missing>:?
 [12] include_from_node1(::String) at ./loading.jl:539
 [13] include(::String) at ./sysimg.jl:14
 [14] process_options(::Base.JLOptions) at ./client.jl:305
 [15] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/StochasticDiffEq/test/composite_algorithm_test.jl, in expression starting on line 16
WARNING: max{T1 <: Real, T2 <: Real}(x::AbstractArray{T1}, y::AbstractArray{T2}) is deprecated, use max.(x, y) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] max(::Array{Float64,2}, ::Array{Float64,2}) at ./deprecated.jl:51
 [3] sde_determine_initdt(::Array{Float64,2}, ::Float64, ::Float64, ::Float64, ::Float64, ::Float64, ::StochasticDiffEq.#ODE_DEFAULT_NORM, ::DiffEqBase.SDEProblem{Array{Float64,2},Float64,true,true,:White,DiffEqProblemLibrary.##122#123,DiffEqProblemLibrary.##124#125,DiffEqBase.#white_noise_func_wrapper!,DiffEqBase.CallbackSet{Tuple{},Tuple{}},Void}, ::Rational{Int64}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/initdt.jl:33
 [4] #init#59(::Float64, ::Int64, ::Bool, ::Array{Float64,1}, ::Array{Float64,1}, ::Array{Float64,1}, ::Void, ::Bool, ::Void, ::Bool, ::Bool, ::Bool, ::Bool, ::Rational{Int64}, ::Float64, ::Float64, ::Rational{Int64}, ::Rational{Int64}, ::Rational{Int64}, ::Bool, ::Rational{Int64}, ::Rational{Int64}, ::Rational{Int64}, ::Float64, ::Float64, ::Float64, ::StochasticDiffEq.#ODE_DEFAULT_NORM, ::StochasticDiffEq.#ODE_DEFAULT_UNSTABLE_CHECK, ::StochasticDiffEq.#ODE_DEFAULT_ISOUTOFDOMAIN, ::Bool, ::Bool, ::Bool, ::Bool, ::Int64, ::Bool, ::StochasticDiffEq.#ODE_DEFAULT_PROG_MESSAGE, ::String, ::Void, ::DiffEqBase.CallbackSet{Tuple{},Tuple{}}, ::Bool, ::Bool, ::Bool, ::Array{Any,1}, ::DiffEqBase.#init, ::DiffEqBase.SDEProblem{Array{Float64,2},Float64,true,true,:White,DiffEqProblemLibrary.##122#123,DiffEqProblemLibrary.##124#125,DiffEqBase.#white_noise_func_wrapper!,DiffEqBase.CallbackSet{Tuple{},Tuple{}},Void}, ::StochasticDiffEq.StochasticCompositeAlgorithm{Tuple{StochasticDiffEq.SRI{StochasticDiffEq.RosslerSRI{Float64,Float64},StochasticDiffEq.RSWM{:RSwM3,Float64}},StochasticDiffEq.SRI{StochasticDiffEq.RosslerSRI{Float64,Float64},StochasticDiffEq.RSWM{:RSwM3,Float64}}},#choice_function,StochasticDiffEq.RSWM{:RSwM3,Float64}}, ::Array{Array{Float64,2},1}, ::Array{Float64,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/solve.jl:112
 [5] init(::DiffEqBase.SDEProblem{Array{Float64,2},Float64,true,true,:White,DiffEqProblemLibrary.##122#123,DiffEqProblemLibrary.##124#125,DiffEqBase.#white_noise_func_wrapper!,DiffEqBase.CallbackSet{Tuple{},Tuple{}},Void}, ::StochasticDiffEq.StochasticCompositeAlgorithm{Tuple{StochasticDiffEq.SRI{StochasticDiffEq.RosslerSRI{Float64,Float64},StochasticDiffEq.RSWM{:RSwM3,Float64}},StochasticDiffEq.SRI{StochasticDiffEq.RosslerSRI{Float64,Float64},StochasticDiffEq.RSWM{:RSwM3,Float64}}},#choice_function,StochasticDiffEq.RSWM{:RSwM3,Float64}}, ::Array{Array{Float64,2},1}, ::Array{Float64,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/solve.jl:51 (repeats 2 times)
 [6] include_from_node1(::String) at ./loading.jl:539
 [7] include(::String) at ./sysimg.jl:14
 [8] macro expansion at /home/vagrant/.julia/v0.6/StochasticDiffEq/test/runtests.jl:22 [inlined]
 [9] macro expansion at ./test.jl:853 [inlined]
 [10] macro expansion at ./util.jl:237 [inlined]
 [11] anonymous at ./<missing>:?
 [12] include_from_node1(::String) at ./loading.jl:539
 [13] include(::String) at ./sysimg.jl:14
 [14] process_options(::Base.JLOptions) at ./client.jl:305
 [15] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/StochasticDiffEq/test/composite_algorithm_test.jl, in expression starting on line 16
WARNING: max{T1 <: Real, T2 <: Real}(x::AbstractArray{T1}, y::AbstractArray{T2}) is deprecated, use max.(x, y) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] max(::Array{Float64,2}, ::Array{Float64,2}) at ./deprecated.jl:51
 [3] sde_determine_initdt(::Array{Float64,2}, ::Float64, ::Float64, ::Float64, ::Float64, ::Float64, ::StochasticDiffEq.#ODE_DEFAULT_NORM, ::DiffEqBase.SDEProblem{Array{Float64,2},Float64,true,true,:White,DiffEqProblemLibrary.##122#123,DiffEqProblemLibrary.##124#125,DiffEqBase.#white_noise_func_wrapper!,DiffEqBase.CallbackSet{Tuple{},Tuple{}},Void}, ::Rational{Int64}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/initdt.jl:15
 [4] #init#59(::Float64, ::Int64, ::Bool, ::Array{Float64,1}, ::Array{Float64,1}, ::Array{Float64,1}, ::Void, ::Bool, ::Void, ::Bool, ::Bool, ::Bool, ::Bool, ::Rational{Int64}, ::Float64, ::Float64, ::Rational{Int64}, ::Rational{Int64}, ::Rational{Int64}, ::Bool, ::Rational{Int64}, ::Rational{Int64}, ::Rational{Int64}, ::Float64, ::Float64, ::Float64, ::StochasticDiffEq.#ODE_DEFAULT_NORM, ::StochasticDiffEq.#ODE_DEFAULT_UNSTABLE_CHECK, ::StochasticDiffEq.#ODE_DEFAULT_ISOUTOFDOMAIN, ::Bool, ::Bool, ::Bool, ::Bool, ::Int64, ::Bool, ::StochasticDiffEq.#ODE_DEFAULT_PROG_MESSAGE, ::String, ::Void, ::DiffEqBase.CallbackSet{Tuple{},Tuple{}}, ::Bool, ::Bool, ::Bool, ::Array{Any,1}, ::DiffEqBase.#init, ::DiffEqBase.SDEProblem{Array{Float64,2},Float64,true,true,:White,DiffEqProblemLibrary.##122#123,DiffEqProblemLibrary.##124#125,DiffEqBase.#white_noise_func_wrapper!,DiffEqBase.CallbackSet{Tuple{},Tuple{}},Void}, ::StochasticDiffEq.SRI{StochasticDiffEq.RosslerSRI{Float64,Float64},StochasticDiffEq.RSWM{:RSwM3,Float64}}, ::Array{Array{Float64,2},1}, ::Array{Float64,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/solve.jl:112
 [5] init(::DiffEqBase.SDEProblem{Array{Float64,2},Float64,true,true,:White,DiffEqProblemLibrary.##122#123,DiffEqProblemLibrary.##124#125,DiffEqBase.#white_noise_func_wrapper!,DiffEqBase.CallbackSet{Tuple{},Tuple{}},Void}, ::StochasticDiffEq.SRI{StochasticDiffEq.RosslerSRI{Float64,Float64},StochasticDiffEq.RSWM{:RSwM3,Float64}}, ::Array{Array{Float64,2},1}, ::Array{Float64,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/solve.jl:51 (repeats 2 times)
 [6] include_from_node1(::String) at ./loading.jl:539
 [7] include(::String) at ./sysimg.jl:14
 [8] macro expansion at /home/vagrant/.julia/v0.6/StochasticDiffEq/test/runtests.jl:22 [inlined]
 [9] macro expansion at ./test.jl:853 [inlined]
 [10] macro expansion at ./util.jl:237 [inlined]
 [11] anonymous at ./<missing>:?
 [12] include_from_node1(::String) at ./loading.jl:539
 [13] include(::String) at ./sysimg.jl:14
 [14] process_options(::Base.JLOptions) at ./client.jl:305
 [15] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/StochasticDiffEq/test/composite_algorithm_test.jl, in expression starting on line 18
WARNING: max{T1 <: Real, T2 <: Real}(x::AbstractArray{T1}, y::AbstractArray{T2}) is deprecated, use max.(x, y) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] max(::Array{Float64,2}, ::Array{Float64,2}) at ./deprecated.jl:51
 [3] sde_determine_initdt(::Array{Float64,2}, ::Float64, ::Float64, ::Float64, ::Float64, ::Float64, ::StochasticDiffEq.#ODE_DEFAULT_NORM, ::DiffEqBase.SDEProblem{Array{Float64,2},Float64,true,true,:White,DiffEqProblemLibrary.##122#123,DiffEqProblemLibrary.##124#125,DiffEqBase.#white_noise_func_wrapper!,DiffEqBase.CallbackSet{Tuple{},Tuple{}},Void}, ::Rational{Int64}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/initdt.jl:32
 [4] #init#59(::Float64, ::Int64, ::Bool, ::Array{Float64,1}, ::Array{Float64,1}, ::Array{Float64,1}, ::Void, ::Bool, ::Void, ::Bool, ::Bool, ::Bool, ::Bool, ::Rational{Int64}, ::Float64, ::Float64, ::Rational{Int64}, ::Rational{Int64}, ::Rational{Int64}, ::Bool, ::Rational{Int64}, ::Rational{Int64}, ::Rational{Int64}, ::Float64, ::Float64, ::Float64, ::StochasticDiffEq.#ODE_DEFAULT_NORM, ::StochasticDiffEq.#ODE_DEFAULT_UNSTABLE_CHECK, ::StochasticDiffEq.#ODE_DEFAULT_ISOUTOFDOMAIN, ::Bool, ::Bool, ::Bool, ::Bool, ::Int64, ::Bool, ::StochasticDiffEq.#ODE_DEFAULT_PROG_MESSAGE, ::String, ::Void, ::DiffEqBase.CallbackSet{Tuple{},Tuple{}}, ::Bool, ::Bool, ::Bool, ::Array{Any,1}, ::DiffEqBase.#init, ::DiffEqBase.SDEProblem{Array{Float64,2},Float64,true,true,:White,DiffEqProblemLibrary.##122#123,DiffEqProblemLibrary.##124#125,DiffEqBase.#white_noise_func_wrapper!,DiffEqBase.CallbackSet{Tuple{},Tuple{}},Void}, ::StochasticDiffEq.SRI{StochasticDiffEq.RosslerSRI{Float64,Float64},StochasticDiffEq.RSWM{:RSwM3,Float64}}, ::Array{Array{Float64,2},1}, ::Array{Float64,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/solve.jl:112
 [5] init(::DiffEqBase.SDEProblem{Array{Float64,2},Float64,true,true,:White,DiffEqProblemLibrary.##122#123,DiffEqProblemLibrary.##124#125,DiffEqBase.#white_noise_func_wrapper!,DiffEqBase.CallbackSet{Tuple{},Tuple{}},Void}, ::StochasticDiffEq.SRI{StochasticDiffEq.RosslerSRI{Float64,Float64},StochasticDiffEq.RSWM{:RSwM3,Float64}}, ::Array{Array{Float64,2},1}, ::Array{Float64,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/solve.jl:51 (repeats 2 times)
 [6] include_from_node1(::String) at ./loading.jl:539
 [7] include(::String) at ./sysimg.jl:14
 [8] macro expansion at /home/vagrant/.julia/v0.6/StochasticDiffEq/test/runtests.jl:22 [inlined]
 [9] macro expansion at ./test.jl:853 [inlined]
 [10] macro expansion at ./util.jl:237 [inlined]
 [11] anonymous at ./<missing>:?
 [12] include_from_node1(::String) at ./loading.jl:539
 [13] include(::String) at ./sysimg.jl:14
 [14] process_options(::Base.JLOptions) at ./client.jl:305
 [15] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/StochasticDiffEq/test/composite_algorithm_test.jl, in expression starting on line 18
WARNING: max{T1 <: Real, T2 <: Real}(x::AbstractArray{T1}, y::AbstractArray{T2}) is deprecated, use max.(x, y) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] max(::Array{Float64,2}, ::Array{Float64,2}) at ./deprecated.jl:51
 [3] sde_determine_initdt(::Array{Float64,2}, ::Float64, ::Float64, ::Float64, ::Float64, ::Float64, ::StochasticDiffEq.#ODE_DEFAULT_NORM, ::DiffEqBase.SDEProblem{Array{Float64,2},Float64,true,true,:White,DiffEqProblemLibrary.##122#123,DiffEqProblemLibrary.##124#125,DiffEqBase.#white_noise_func_wrapper!,DiffEqBase.CallbackSet{Tuple{},Tuple{}},Void}, ::Rational{Int64}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/initdt.jl:33
 [4] #init#59(::Float64, ::Int64, ::Bool, ::Array{Float64,1}, ::Array{Float64,1}, ::Array{Float64,1}, ::Void, ::Bool, ::Void, ::Bool, ::Bool, ::Bool, ::Bool, ::Rational{Int64}, ::Float64, ::Float64, ::Rational{Int64}, ::Rational{Int64}, ::Rational{Int64}, ::Bool, ::Rational{Int64}, ::Rational{Int64}, ::Rational{Int64}, ::Float64, ::Float64, ::Float64, ::StochasticDiffEq.#ODE_DEFAULT_NORM, ::StochasticDiffEq.#ODE_DEFAULT_UNSTABLE_CHECK, ::StochasticDiffEq.#ODE_DEFAULT_ISOUTOFDOMAIN, ::Bool, ::Bool, ::Bool, ::Bool, ::Int64, ::Bool, ::StochasticDiffEq.#ODE_DEFAULT_PROG_MESSAGE, ::String, ::Void, ::DiffEqBase.CallbackSet{Tuple{},Tuple{}}, ::Bool, ::Bool, ::Bool, ::Array{Any,1}, ::DiffEqBase.#init, ::DiffEqBase.SDEProblem{Array{Float64,2},Float64,true,true,:White,DiffEqProblemLibrary.##122#123,DiffEqProblemLibrary.##124#125,DiffEqBase.#white_noise_func_wrapper!,DiffEqBase.CallbackSet{Tuple{},Tuple{}},Void}, ::StochasticDiffEq.SRI{StochasticDiffEq.RosslerSRI{Float64,Float64},StochasticDiffEq.RSWM{:RSwM3,Float64}}, ::Array{Array{Float64,2},1}, ::Array{Float64,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/solve.jl:112
 [5] init(::DiffEqBase.SDEProblem{Array{Float64,2},Float64,true,true,:White,DiffEqProblemLibrary.##122#123,DiffEqProblemLibrary.##124#125,DiffEqBase.#white_noise_func_wrapper!,DiffEqBase.CallbackSet{Tuple{},Tuple{}},Void}, ::StochasticDiffEq.SRI{StochasticDiffEq.RosslerSRI{Float64,Float64},StochasticDiffEq.RSWM{:RSwM3,Float64}}, ::Array{Array{Float64,2},1}, ::Array{Float64,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/solve.jl:51 (repeats 2 times)
 [6] include_from_node1(::String) at ./loading.jl:539
 [7] include(::String) at ./sysimg.jl:14
 [8] macro expansion at /home/vagrant/.julia/v0.6/StochasticDiffEq/test/runtests.jl:22 [inlined]
 [9] macro expansion at ./test.jl:853 [inlined]
 [10] macro expansion at ./util.jl:237 [inlined]
 [11] anonymous at ./<missing>:?
 [12] include_from_node1(::String) at ./loading.jl:539
 [13] include(::String) at ./sysimg.jl:14
 [14] process_options(::Base.JLOptions) at ./client.jl:305
 [15] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/StochasticDiffEq/test/composite_algorithm_test.jl, in expression starting on line 18
Test Summary:   | Pass  Total
Composite Tests |    3      3
 12.747250 seconds (4.71 M allocations: 415.185 MiB, 1.93% gc time)
WARNING: max{T1 <: Real, T2 <: Real}(x::AbstractArray{T1}, y::AbstractArray{T2}) is deprecated, use max.(x, y) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] max(::Array{Float64,1}, ::Array{Float64,1}) at ./deprecated.jl:51
 [3] sde_determine_initdt(::Array{Float64,1}, ::Float64, ::Float64, ::Float64, ::Float64, ::Float64, ::StochasticDiffEq.#ODE_DEFAULT_NORM, ::DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:White,##35#36,##43#44,DiffEqBase.#white_noise_func_wrapper!,DiffEqBase.CallbackSet{Tuple{},Tuple{}},Void}, ::Rational{Int64}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/initdt.jl:15
 [4] #init#59(::Float64, ::Int64, ::Bool, ::Array{Float64,1}, ::Array{Float64,1}, ::Array{Float64,1}, ::Void, ::Bool, ::Void, ::Bool, ::Bool, ::Bool, ::Bool, ::Rational{Int64}, ::Float64, ::Float64, ::Rational{Int64}, ::Rational{Int64}, ::Rational{Int64}, ::Bool, ::Rational{Int64}, ::Rational{Int64}, ::Rational{Int64}, ::Float64, ::Float64, ::Float64, ::StochasticDiffEq.#ODE_DEFAULT_NORM, ::StochasticDiffEq.#ODE_DEFAULT_UNSTABLE_CHECK, ::StochasticDiffEq.#ODE_DEFAULT_ISOUTOFDOMAIN, ::Bool, ::Bool, ::Bool, ::Bool, ::Int64, ::Bool, ::StochasticDiffEq.#ODE_DEFAULT_PROG_MESSAGE, ::String, ::Void, ::DiffEqBase.ContinuousCallback{##39#40,Void,##41#42,DiffEqBase.#INITIALIZE_DEFAULT,Float64,Int64,Void}, ::Bool, ::Bool, ::Bool, ::Array{Any,1}, ::DiffEqBase.#init, ::DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:White,##35#36,##43#44,DiffEqBase.#white_noise_func_wrapper!,DiffEqBase.CallbackSet{Tuple{},Tuple{}},Void}, ::StochasticDiffEq.SRIW1{StochasticDiffEq.RSWM{:RSwM3,Float64}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/solve.jl:112
 [5] (::DiffEqBase.#kw##init)(::Array{Any,1}, ::DiffEqBase.#init, ::DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:White,##35#36,##43#44,DiffEqBase.#white_noise_func_wrapper!,DiffEqBase.CallbackSet{Tuple{},Tuple{}},Void}, ::StochasticDiffEq.SRIW1{StochasticDiffEq.RSWM{:RSwM3,Float64}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at ./<missing>:0
 [6] #solve#58(::Array{Any,1}, ::Function, ::DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:White,##35#36,##43#44,DiffEqBase.#white_noise_func_wrapper!,DiffEqBase.CallbackSet{Tuple{},Tuple{}},Void}, ::StochasticDiffEq.SRIW1{StochasticDiffEq.RSWM{:RSwM3,Float64}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/solve.jl:10
 [7] (::DiffEqBase.#kw##solve)(::Array{Any,1}, ::DiffEqBase.#solve, ::DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:White,##35#36,##43#44,DiffEqBase.#white_noise_func_wrapper!,DiffEqBase.CallbackSet{Tuple{},Tuple{}},Void}, ::StochasticDiffEq.SRIW1{StochasticDiffEq.RSWM{:RSwM3,Float64}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at ./<missing>:0 (repeats 2 times)
 [8] include_from_node1(::String) at ./loading.jl:539
 [9] include(::String) at ./sysimg.jl:14
 [10] macro expansion at /home/vagrant/.julia/v0.6/StochasticDiffEq/test/runtests.jl:23 [inlined]
 [11] macro expansion at ./test.jl:853 [inlined]
 [12] macro expansion at ./util.jl:237 [inlined]
 [13] anonymous at ./<missing>:?
 [14] include_from_node1(::String) at ./loading.jl:539
 [15] include(::String) at ./sysimg.jl:14
 [16] process_options(::Base.JLOptions) at ./client.jl:305
 [17] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/StochasticDiffEq/test/events_test.jl, in expression starting on line 36
WARNING: max{T1 <: Real, T2 <: Real}(x::AbstractArray{T1}, y::AbstractArray{T2}) is deprecated, use max.(x, y) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] max(::Array{Float64,1}, ::Array{Float64,1}) at ./deprecated.jl:51
 [3] sde_determine_initdt(::Array{Float64,1}, ::Float64, ::Float64, ::Float64, ::Float64, ::Float64, ::StochasticDiffEq.#ODE_DEFAULT_NORM, ::DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:White,##35#36,##43#44,DiffEqBase.#white_noise_func_wrapper!,DiffEqBase.CallbackSet{Tuple{},Tuple{}},Void}, ::Rational{Int64}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/initdt.jl:32
 [4] #init#59(::Float64, ::Int64, ::Bool, ::Array{Float64,1}, ::Array{Float64,1}, ::Array{Float64,1}, ::Void, ::Bool, ::Void, ::Bool, ::Bool, ::Bool, ::Bool, ::Rational{Int64}, ::Float64, ::Float64, ::Rational{Int64}, ::Rational{Int64}, ::Rational{Int64}, ::Bool, ::Rational{Int64}, ::Rational{Int64}, ::Rational{Int64}, ::Float64, ::Float64, ::Float64, ::StochasticDiffEq.#ODE_DEFAULT_NORM, ::StochasticDiffEq.#ODE_DEFAULT_UNSTABLE_CHECK, ::StochasticDiffEq.#ODE_DEFAULT_ISOUTOFDOMAIN, ::Bool, ::Bool, ::Bool, ::Bool, ::Int64, ::Bool, ::StochasticDiffEq.#ODE_DEFAULT_PROG_MESSAGE, ::String, ::Void, ::DiffEqBase.ContinuousCallback{##39#40,Void,##41#42,DiffEqBase.#INITIALIZE_DEFAULT,Float64,Int64,Void}, ::Bool, ::Bool, ::Bool, ::Array{Any,1}, ::DiffEqBase.#init, ::DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:White,##35#36,##43#44,DiffEqBase.#white_noise_func_wrapper!,DiffEqBase.CallbackSet{Tuple{},Tuple{}},Void}, ::StochasticDiffEq.SRIW1{StochasticDiffEq.RSWM{:RSwM3,Float64}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/solve.jl:112
 [5] (::DiffEqBase.#kw##init)(::Array{Any,1}, ::DiffEqBase.#init, ::DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:White,##35#36,##43#44,DiffEqBase.#white_noise_func_wrapper!,DiffEqBase.CallbackSet{Tuple{},Tuple{}},Void}, ::StochasticDiffEq.SRIW1{StochasticDiffEq.RSWM{:RSwM3,Float64}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at ./<missing>:0
 [6] #solve#58(::Array{Any,1}, ::Function, ::DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:White,##35#36,##43#44,DiffEqBase.#white_noise_func_wrapper!,DiffEqBase.CallbackSet{Tuple{},Tuple{}},Void}, ::StochasticDiffEq.SRIW1{StochasticDiffEq.RSWM{:RSwM3,Float64}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/solve.jl:10
 [7] (::DiffEqBase.#kw##solve)(::Array{Any,1}, ::DiffEqBase.#solve, ::DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:White,##35#36,##43#44,DiffEqBase.#white_noise_func_wrapper!,DiffEqBase.CallbackSet{Tuple{},Tuple{}},Void}, ::StochasticDiffEq.SRIW1{StochasticDiffEq.RSWM{:RSwM3,Float64}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at ./<missing>:0 (repeats 2 times)
 [8] include_from_node1(::String) at ./loading.jl:539
 [9] include(::String) at ./sysimg.jl:14
 [10] macro expansion at /home/vagrant/.julia/v0.6/StochasticDiffEq/test/runtests.jl:23 [inlined]
 [11] macro expansion at ./test.jl:853 [inlined]
 [12] macro expansion at ./util.jl:237 [inlined]
 [13] anonymous at ./<missing>:?
 [14] include_from_node1(::String) at ./loading.jl:539
 [15] include(::String) at ./sysimg.jl:14
 [16] process_options(::Base.JLOptions) at ./client.jl:305
 [17] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/StochasticDiffEq/test/events_test.jl, in expression starting on line 36
WARNING: max{T1 <: Real, T2 <: Real}(x::AbstractArray{T1}, y::AbstractArray{T2}) is deprecated, use max.(x, y) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] max(::Array{Float64,1}, ::Array{Float64,1}) at ./deprecated.jl:51
 [3] sde_determine_initdt(::Array{Float64,1}, ::Float64, ::Float64, ::Float64, ::Float64, ::Float64, ::StochasticDiffEq.#ODE_DEFAULT_NORM, ::DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:White,##35#36,##43#44,DiffEqBase.#white_noise_func_wrapper!,DiffEqBase.CallbackSet{Tuple{},Tuple{}},Void}, ::Rational{Int64}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/initdt.jl:33
 [4] #init#59(::Float64, ::Int64, ::Bool, ::Array{Float64,1}, ::Array{Float64,1}, ::Array{Float64,1}, ::Void, ::Bool, ::Void, ::Bool, ::Bool, ::Bool, ::Bool, ::Rational{Int64}, ::Float64, ::Float64, ::Rational{Int64}, ::Rational{Int64}, ::Rational{Int64}, ::Bool, ::Rational{Int64}, ::Rational{Int64}, ::Rational{Int64}, ::Float64, ::Float64, ::Float64, ::StochasticDiffEq.#ODE_DEFAULT_NORM, ::StochasticDiffEq.#ODE_DEFAULT_UNSTABLE_CHECK, ::StochasticDiffEq.#ODE_DEFAULT_ISOUTOFDOMAIN, ::Bool, ::Bool, ::Bool, ::Bool, ::Int64, ::Bool, ::StochasticDiffEq.#ODE_DEFAULT_PROG_MESSAGE, ::String, ::Void, ::DiffEqBase.ContinuousCallback{##39#40,Void,##41#42,DiffEqBase.#INITIALIZE_DEFAULT,Float64,Int64,Void}, ::Bool, ::Bool, ::Bool, ::Array{Any,1}, ::DiffEqBase.#init, ::DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:White,##35#36,##43#44,DiffEqBase.#white_noise_func_wrapper!,DiffEqBase.CallbackSet{Tuple{},Tuple{}},Void}, ::StochasticDiffEq.SRIW1{StochasticDiffEq.RSWM{:RSwM3,Float64}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/solve.jl:112
 [5] (::DiffEqBase.#kw##init)(::Array{Any,1}, ::DiffEqBase.#init, ::DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:White,##35#36,##43#44,DiffEqBase.#white_noise_func_wrapper!,DiffEqBase.CallbackSet{Tuple{},Tuple{}},Void}, ::StochasticDiffEq.SRIW1{StochasticDiffEq.RSWM{:RSwM3,Float64}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at ./<missing>:0
 [6] #solve#58(::Array{Any,1}, ::Function, ::DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:White,##35#36,##43#44,DiffEqBase.#white_noise_func_wrapper!,DiffEqBase.CallbackSet{Tuple{},Tuple{}},Void}, ::StochasticDiffEq.SRIW1{StochasticDiffEq.RSWM{:RSwM3,Float64}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/solve.jl:10
 [7] (::DiffEqBase.#kw##solve)(::Array{Any,1}, ::DiffEqBase.#solve, ::DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:White,##35#36,##43#44,DiffEqBase.#white_noise_func_wrapper!,DiffEqBase.CallbackSet{Tuple{},Tuple{}},Void}, ::StochasticDiffEq.SRIW1{StochasticDiffEq.RSWM{:RSwM3,Float64}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at ./<missing>:0 (repeats 2 times)
 [8] include_from_node1(::String) at ./loading.jl:539
 [9] include(::String) at ./sysimg.jl:14
 [10] macro expansion at /home/vagrant/.julia/v0.6/StochasticDiffEq/test/runtests.jl:23 [inlined]
 [11] macro expansion at ./test.jl:853 [inlined]
 [12] macro expansion at ./util.jl:237 [inlined]
 [13] anonymous at ./<missing>:?
 [14] include_from_node1(::String) at ./loading.jl:539
 [15] include(::String) at ./sysimg.jl:14
 [16] process_options(::Base.JLOptions) at ./client.jl:305
 [17] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/StochasticDiffEq/test/events_test.jl, in expression starting on line 36
Test Summary: | Pass  Total
Events Tests  |    1      1
 16.371922 seconds (5.55 M allocations: 404.242 MiB, 1.39% gc time)
WARNING: max{T1 <: Real, T2 <: Real}(x::AbstractArray{T1}, y::AbstractArray{T2}) is deprecated, use max.(x, y) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] max(::Array{Float64,1}, ::Array{Float64,1}) at ./deprecated.jl:51
 [3] sde_determine_initdt(::Array{Float64,1}, ::Float64, ::Float64, ::Float64, ::Float64, ::Float64, ::StochasticDiffEq.#ODE_DEFAULT_NORM, ::DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:White,##45#46,##47#48,DiffEqBase.#white_noise_func_wrapper!,DiffEqBase.CallbackSet{Tuple{},Tuple{}},Void}, ::Rational{Int64}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/initdt.jl:15
 [4] #init#59(::Float64, ::Int64, ::Bool, ::Array{Float64,1}, ::Array{Float64,1}, ::Array{Float64,1}, ::Void, ::Bool, ::Void, ::Bool, ::Bool, ::Bool, ::Bool, ::Rational{Int64}, ::Float64, ::Float64, ::Rational{Int64}, ::Rational{Int64}, ::Rational{Int64}, ::Bool, ::Rational{Int64}, ::Rational{Int64}, ::Rational{Int64}, ::Float64, ::Float64, ::Float64, ::StochasticDiffEq.#ODE_DEFAULT_NORM, ::StochasticDiffEq.#ODE_DEFAULT_UNSTABLE_CHECK, ::StochasticDiffEq.#ODE_DEFAULT_ISOUTOFDOMAIN, ::Bool, ::Bool, ::Bool, ::Bool, ::Int64, ::Bool, ::StochasticDiffEq.#ODE_DEFAULT_PROG_MESSAGE, ::String, ::Void, ::DiffEqBase.ContinuousCallback{##49#50,##51#52,##51#52,DiffEqBase.#INITIALIZE_DEFAULT,Float64,Int64,Void}, ::Bool, ::Bool, ::Bool, ::Array{Any,1}, ::DiffEqBase.#init, ::DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:White,##45#46,##47#48,DiffEqBase.#white_noise_func_wrapper!,DiffEqBase.CallbackSet{Tuple{},Tuple{}},Void}, ::StochasticDiffEq.SRIW1{StochasticDiffEq.RSWM{:RSwM3,Float64}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/solve.jl:112
 [5] (::DiffEqBase.#kw##init)(::Array{Any,1}, ::DiffEqBase.#init, ::DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:White,##45#46,##47#48,DiffEqBase.#white_noise_func_wrapper!,DiffEqBase.CallbackSet{Tuple{},Tuple{}},Void}, ::StochasticDiffEq.SRIW1{StochasticDiffEq.RSWM{:RSwM3,Float64}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at ./<missing>:0
 [6] #solve#58(::Array{Any,1}, ::Function, ::DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:White,##45#46,##47#48,DiffEqBase.#white_noise_func_wrapper!,DiffEqBase.CallbackSet{Tuple{},Tuple{}},Void}, ::StochasticDiffEq.SRIW1{StochasticDiffEq.RSWM{:RSwM3,Float64}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/solve.jl:10
 [7] (::DiffEqBase.#kw##solve)(::Array{Any,1}, ::DiffEqBase.#solve, ::DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:White,##45#46,##47#48,DiffEqBase.#white_noise_func_wrapper!,DiffEqBase.CallbackSet{Tuple{},Tuple{}},Void}, ::StochasticDiffEq.SRIW1{StochasticDiffEq.RSWM{:RSwM3,Float64}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at ./<missing>:0 (repeats 2 times)
 [8] include_from_node1(::String) at ./loading.jl:539
 [9] include(::String) at ./sysimg.jl:14
 [10] macro expansion at /home/vagrant/.julia/v0.6/StochasticDiffEq/test/runtests.jl:24 [inlined]
 [11] macro expansion at ./test.jl:853 [inlined]
 [12] macro expansion at ./util.jl:237 [inlined]
 [13] anonymous at ./<missing>:?
 [14] include_from_node1(::String) at ./loading.jl:539
 [15] include(::String) at ./sysimg.jl:14
 [16] process_options(::Base.JLOptions) at ./client.jl:305
 [17] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/StochasticDiffEq/test/cache_test.jl, in expression starting on line 35
WARNING: max{T1 <: Real, T2 <: Real}(x::AbstractArray{T1}, y::AbstractArray{T2}) is deprecated, use max.(x, y) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] max(::Array{Float64,1}, ::Array{Float64,1}) at ./deprecated.jl:51
 [3] sde_determine_initdt(::Array{Float64,1}, ::Float64, ::Float64, ::Float64, ::Float64, ::Float64, ::StochasticDiffEq.#ODE_DEFAULT_NORM, ::DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:White,##45#46,##47#48,DiffEqBase.#white_noise_func_wrapper!,DiffEqBase.CallbackSet{Tuple{},Tuple{}},Void}, ::Rational{Int64}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/initdt.jl:32
 [4] #init#59(::Float64, ::Int64, ::Bool, ::Array{Float64,1}, ::Array{Float64,1}, ::Array{Float64,1}, ::Void, ::Bool, ::Void, ::Bool, ::Bool, ::Bool, ::Bool, ::Rational{Int64}, ::Float64, ::Float64, ::Rational{Int64}, ::Rational{Int64}, ::Rational{Int64}, ::Bool, ::Rational{Int64}, ::Rational{Int64}, ::Rational{Int64}, ::Float64, ::Float64, ::Float64, ::StochasticDiffEq.#ODE_DEFAULT_NORM, ::StochasticDiffEq.#ODE_DEFAULT_UNSTABLE_CHECK, ::StochasticDiffEq.#ODE_DEFAULT_ISOUTOFDOMAIN, ::Bool, ::Bool, ::Bool, ::Bool, ::Int64, ::Bool, ::StochasticDiffEq.#ODE_DEFAULT_PROG_MESSAGE, ::String, ::Void, ::DiffEqBase.ContinuousCallback{##49#50,##51#52,##51#52,DiffEqBase.#INITIALIZE_DEFAULT,Float64,Int64,Void}, ::Bool, ::Bool, ::Bool, ::Array{Any,1}, ::DiffEqBase.#init, ::DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:White,##45#46,##47#48,DiffEqBase.#white_noise_func_wrapper!,DiffEqBase.CallbackSet{Tuple{},Tuple{}},Void}, ::StochasticDiffEq.SRIW1{StochasticDiffEq.RSWM{:RSwM3,Float64}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/solve.jl:112
 [5] (::DiffEqBase.#kw##init)(::Array{Any,1}, ::DiffEqBase.#init, ::DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:White,##45#46,##47#48,DiffEqBase.#white_noise_func_wrapper!,DiffEqBase.CallbackSet{Tuple{},Tuple{}},Void}, ::StochasticDiffEq.SRIW1{StochasticDiffEq.RSWM{:RSwM3,Float64}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at ./<missing>:0
 [6] #solve#58(::Array{Any,1}, ::Function, ::DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:White,##45#46,##47#48,DiffEqBase.#white_noise_func_wrapper!,DiffEqBase.CallbackSet{Tuple{},Tuple{}},Void}, ::StochasticDiffEq.SRIW1{StochasticDiffEq.RSWM{:RSwM3,Float64}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/solve.jl:10
 [7] (::DiffEqBase.#kw##solve)(::Array{Any,1}, ::DiffEqBase.#solve, ::DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:White,##45#46,##47#48,DiffEqBase.#white_noise_func_wrapper!,DiffEqBase.CallbackSet{Tuple{},Tuple{}},Void}, ::StochasticDiffEq.SRIW1{StochasticDiffEq.RSWM{:RSwM3,Float64}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at ./<missing>:0 (repeats 2 times)
 [8] include_from_node1(::String) at ./loading.jl:539
 [9] include(::String) at ./sysimg.jl:14
 [10] macro expansion at /home/vagrant/.julia/v0.6/StochasticDiffEq/test/runtests.jl:24 [inlined]
 [11] macro expansion at ./test.jl:853 [inlined]
 [12] macro expansion at ./util.jl:237 [inlined]
 [13] anonymous at ./<missing>:?
 [14] include_from_node1(::String) at ./loading.jl:539
 [15] include(::String) at ./sysimg.jl:14
 [16] process_options(::Base.JLOptions) at ./client.jl:305
 [17] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/StochasticDiffEq/test/cache_test.jl, in expression starting on line 35
WARNING: max{T1 <: Real, T2 <: Real}(x::AbstractArray{T1}, y::AbstractArray{T2}) is deprecated, use max.(x, y) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] max(::Array{Float64,1}, ::Array{Float64,1}) at ./deprecated.jl:51
 [3] sde_determine_initdt(::Array{Float64,1}, ::Float64, ::Float64, ::Float64, ::Float64, ::Float64, ::StochasticDiffEq.#ODE_DEFAULT_NORM, ::DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:White,##45#46,##47#48,DiffEqBase.#white_noise_func_wrapper!,DiffEqBase.CallbackSet{Tuple{},Tuple{}},Void}, ::Rational{Int64}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/initdt.jl:33
 [4] #init#59(::Float64, ::Int64, ::Bool, ::Array{Float64,1}, ::Array{Float64,1}, ::Array{Float64,1}, ::Void, ::Bool, ::Void, ::Bool, ::Bool, ::Bool, ::Bool, ::Rational{Int64}, ::Float64, ::Float64, ::Rational{Int64}, ::Rational{Int64}, ::Rational{Int64}, ::Bool, ::Rational{Int64}, ::Rational{Int64}, ::Rational{Int64}, ::Float64, ::Float64, ::Float64, ::StochasticDiffEq.#ODE_DEFAULT_NORM, ::StochasticDiffEq.#ODE_DEFAULT_UNSTABLE_CHECK, ::StochasticDiffEq.#ODE_DEFAULT_ISOUTOFDOMAIN, ::Bool, ::Bool, ::Bool, ::Bool, ::Int64, ::Bool, ::StochasticDiffEq.#ODE_DEFAULT_PROG_MESSAGE, ::String, ::Void, ::DiffEqBase.ContinuousCallback{##49#50,##51#52,##51#52,DiffEqBase.#INITIALIZE_DEFAULT,Float64,Int64,Void}, ::Bool, ::Bool, ::Bool, ::Array{Any,1}, ::DiffEqBase.#init, ::DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:White,##45#46,##47#48,DiffEqBase.#white_noise_func_wrapper!,DiffEqBase.CallbackSet{Tuple{},Tuple{}},Void}, ::StochasticDiffEq.SRIW1{StochasticDiffEq.RSWM{:RSwM3,Float64}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/solve.jl:112
 [5] (::DiffEqBase.#kw##init)(::Array{Any,1}, ::DiffEqBase.#init, ::DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:White,##45#46,##47#48,DiffEqBase.#white_noise_func_wrapper!,DiffEqBase.CallbackSet{Tuple{},Tuple{}},Void}, ::StochasticDiffEq.SRIW1{StochasticDiffEq.RSWM{:RSwM3,Float64}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at ./<missing>:0
 [6] #solve#58(::Array{Any,1}, ::Function, ::DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:White,##45#46,##47#48,DiffEqBase.#white_noise_func_wrapper!,DiffEqBase.CallbackSet{Tuple{},Tuple{}},Void}, ::StochasticDiffEq.SRIW1{StochasticDiffEq.RSWM{:RSwM3,Float64}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/solve.jl:10
 [7] (::DiffEqBase.#kw##solve)(::Array{Any,1}, ::DiffEqBase.#solve, ::DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:White,##45#46,##47#48,DiffEqBase.#white_noise_func_wrapper!,DiffEqBase.CallbackSet{Tuple{},Tuple{}},Void}, ::StochasticDiffEq.SRIW1{StochasticDiffEq.RSWM{:RSwM3,Float64}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at ./<missing>:0 (repeats 2 times)
 [8] include_from_node1(::String) at ./loading.jl:539
 [9] include(::String) at ./sysimg.jl:14
 [10] macro expansion at /home/vagrant/.julia/v0.6/StochasticDiffEq/test/runtests.jl:24 [inlined]
 [11] macro expansion at ./test.jl:853 [inlined]
 [12] macro expansion at ./util.jl:237 [inlined]
 [13] anonymous at ./<missing>:?
 [14] include_from_node1(::String) at ./loading.jl:539
 [15] include(::String) at ./sysimg.jl:14
 [16] process_options(::Base.JLOptions) at ./client.jl:305
 [17] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/StochasticDiffEq/test/cache_test.jl, in expression starting on line 35
WARNING: max{T1 <: Real, T2 <: Real}(x::AbstractArray{T1}, y::AbstractArray{T2}) is deprecated, use max.(x, y) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] max(::Array{Float64,1}, ::Array{Float64,1}) at ./deprecated.jl:51
 [3] sde_determine_initdt(::Array{Float64,1}, ::Float64, ::Float64, ::Float64, ::Float64, ::Float64, ::StochasticDiffEq.#ODE_DEFAULT_NORM, ::DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:White,##45#46,##47#48,DiffEqBase.#white_noise_func_wrapper!,DiffEqBase.CallbackSet{Tuple{},Tuple{}},Void}, ::Rational{Int64}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/initdt.jl:15
 [4] #init#59(::Float64, ::Int64, ::Bool, ::Array{Float64,1}, ::Array{Float64,1}, ::Array{Float64,1}, ::Void, ::Bool, ::Void, ::Bool, ::Bool, ::Bool, ::Bool, ::Rational{Int64}, ::Float64, ::Float64, ::Rational{Int64}, ::Rational{Int64}, ::Rational{Int64}, ::Bool, ::Rational{Int64}, ::Rational{Int64}, ::Rational{Int64}, ::Float64, ::Float64, ::Float64, ::StochasticDiffEq.#ODE_DEFAULT_NORM, ::StochasticDiffEq.#ODE_DEFAULT_UNSTABLE_CHECK, ::StochasticDiffEq.#ODE_DEFAULT_ISOUTOFDOMAIN, ::Bool, ::Bool, ::Bool, ::Bool, ::Int64, ::Bool, ::StochasticDiffEq.#ODE_DEFAULT_PROG_MESSAGE, ::String, ::Void, ::DiffEqBase.ContinuousCallback{##49#50,##51#52,##51#52,DiffEqBase.#INITIALIZE_DEFAULT,Float64,Int64,Void}, ::Bool, ::Bool, ::Bool, ::Array{Any,1}, ::DiffEqBase.#init, ::DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:White,##45#46,##47#48,DiffEqBase.#white_noise_func_wrapper!,DiffEqBase.CallbackSet{Tuple{},Tuple{}},Void}, ::StochasticDiffEq.SRI{StochasticDiffEq.RosslerSRI{Float64,Float64},StochasticDiffEq.RSWM{:RSwM3,Float64}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/solve.jl:112
 [5] (::DiffEqBase.#kw##init)(::Array{Any,1}, ::DiffEqBase.#init, ::DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:White,##45#46,##47#48,DiffEqBase.#white_noise_func_wrapper!,DiffEqBase.CallbackSet{Tuple{},Tuple{}},Void}, ::StochasticDiffEq.SRI{StochasticDiffEq.RosslerSRI{Float64,Float64},StochasticDiffEq.RSWM{:RSwM3,Float64}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at ./<missing>:0
 [6] #solve#58(::Array{Any,1}, ::Function, ::DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:White,##45#46,##47#48,DiffEqBase.#white_noise_func_wrapper!,DiffEqBase.CallbackSet{Tuple{},Tuple{}},Void}, ::StochasticDiffEq.SRI{StochasticDiffEq.RosslerSRI{Float64,Float64},StochasticDiffEq.RSWM{:RSwM3,Float64}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/solve.jl:10
 [7] (::DiffEqBase.#kw##solve)(::Array{Any,1}, ::DiffEqBase.#solve, ::DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:White,##45#46,##47#48,DiffEqBase.#white_noise_func_wrapper!,DiffEqBase.CallbackSet{Tuple{},Tuple{}},Void}, ::StochasticDiffEq.SRI{StochasticDiffEq.RosslerSRI{Float64,Float64},StochasticDiffEq.RSWM{:RSwM3,Float64}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at ./<missing>:0 (repeats 2 times)
 [8] include_from_node1(::String) at ./loading.jl:539
 [9] include(::String) at ./sysimg.jl:14
 [10] macro expansion at /home/vagrant/.julia/v0.6/StochasticDiffEq/test/runtests.jl:24 [inlined]
 [11] macro expansion at ./test.jl:853 [inlined]
 [12] macro expansion at ./util.jl:237 [inlined]
 [13] anonymous at ./<missing>:?
 [14] include_from_node1(::String) at ./loading.jl:539
 [15] include(::String) at ./sysimg.jl:14
 [16] process_options(::Base.JLOptions) at ./client.jl:305
 [17] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/StochasticDiffEq/test/cache_test.jl, in expression starting on line 48
WARNING: max{T1 <: Real, T2 <: Real}(x::AbstractArray{T1}, y::AbstractArray{T2}) is deprecated, use max.(x, y) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] max(::Array{Float64,1}, ::Array{Float64,1}) at ./deprecated.jl:51
 [3] sde_determine_initdt(::Array{Float64,1}, ::Float64, ::Float64, ::Float64, ::Float64, ::Float64, ::StochasticDiffEq.#ODE_DEFAULT_NORM, ::DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:White,##45#46,##47#48,DiffEqBase.#white_noise_func_wrapper!,DiffEqBase.CallbackSet{Tuple{},Tuple{}},Void}, ::Rational{Int64}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/initdt.jl:32
 [4] #init#59(::Float64, ::Int64, ::Bool, ::Array{Float64,1}, ::Array{Float64,1}, ::Array{Float64,1}, ::Void, ::Bool, ::Void, ::Bool, ::Bool, ::Bool, ::Bool, ::Rational{Int64}, ::Float64, ::Float64, ::Rational{Int64}, ::Rational{Int64}, ::Rational{Int64}, ::Bool, ::Rational{Int64}, ::Rational{Int64}, ::Rational{Int64}, ::Float64, ::Float64, ::Float64, ::StochasticDiffEq.#ODE_DEFAULT_NORM, ::StochasticDiffEq.#ODE_DEFAULT_UNSTABLE_CHECK, ::StochasticDiffEq.#ODE_DEFAULT_ISOUTOFDOMAIN, ::Bool, ::Bool, ::Bool, ::Bool, ::Int64, ::Bool, ::StochasticDiffEq.#ODE_DEFAULT_PROG_MESSAGE, ::String, ::Void, ::DiffEqBase.ContinuousCallback{##49#50,##51#52,##51#52,DiffEqBase.#INITIALIZE_DEFAULT,Float64,Int64,Void}, ::Bool, ::Bool, ::Bool, ::Array{Any,1}, ::DiffEqBase.#init, ::DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:White,##45#46,##47#48,DiffEqBase.#white_noise_func_wrapper!,DiffEqBase.CallbackSet{Tuple{},Tuple{}},Void}, ::StochasticDiffEq.SRI{StochasticDiffEq.RosslerSRI{Float64,Float64},StochasticDiffEq.RSWM{:RSwM3,Float64}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/solve.jl:112
 [5] (::DiffEqBase.#kw##init)(::Array{Any,1}, ::DiffEqBase.#init, ::DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:White,##45#46,##47#48,DiffEqBase.#white_noise_func_wrapper!,DiffEqBase.CallbackSet{Tuple{},Tuple{}},Void}, ::StochasticDiffEq.SRI{StochasticDiffEq.RosslerSRI{Float64,Float64},StochasticDiffEq.RSWM{:RSwM3,Float64}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at ./<missing>:0
 [6] #solve#58(::Array{Any,1}, ::Function, ::DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:White,##45#46,##47#48,DiffEqBase.#white_noise_func_wrapper!,DiffEqBase.CallbackSet{Tuple{},Tuple{}},Void}, ::StochasticDiffEq.SRI{StochasticDiffEq.RosslerSRI{Float64,Float64},StochasticDiffEq.RSWM{:RSwM3,Float64}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/solve.jl:10
 [7] (::DiffEqBase.#kw##solve)(::Array{Any,1}, ::DiffEqBase.#solve, ::DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:White,##45#46,##47#48,DiffEqBase.#white_noise_func_wrapper!,DiffEqBase.CallbackSet{Tuple{},Tuple{}},Void}, ::StochasticDiffEq.SRI{StochasticDiffEq.RosslerSRI{Float64,Float64},StochasticDiffEq.RSWM{:RSwM3,Float64}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at ./<missing>:0 (repeats 2 times)
 [8] include_from_node1(::String) at ./loading.jl:539
 [9] include(::String) at ./sysimg.jl:14
 [10] macro expansion at /home/vagrant/.julia/v0.6/StochasticDiffEq/test/runtests.jl:24 [inlined]
 [11] macro expansion at ./test.jl:853 [inlined]
 [12] macro expansion at ./util.jl:237 [inlined]
 [13] anonymous at ./<missing>:?
 [14] include_from_node1(::String) at ./loading.jl:539
 [15] include(::String) at ./sysimg.jl:14
 [16] process_options(::Base.JLOptions) at ./client.jl:305
 [17] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/StochasticDiffEq/test/cache_test.jl, in expression starting on line 48
WARNING: max{T1 <: Real, T2 <: Real}(x::AbstractArray{T1}, y::AbstractArray{T2}) is deprecated, use max.(x, y) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] max(::Array{Float64,1}, ::Array{Float64,1}) at ./deprecated.jl:51
 [3] sde_determine_initdt(::Array{Float64,1}, ::Float64, ::Float64, ::Float64, ::Float64, ::Float64, ::StochasticDiffEq.#ODE_DEFAULT_NORM, ::DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:White,##45#46,##47#48,DiffEqBase.#white_noise_func_wrapper!,DiffEqBase.CallbackSet{Tuple{},Tuple{}},Void}, ::Rational{Int64}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/initdt.jl:33
 [4] #init#59(::Float64, ::Int64, ::Bool, ::Array{Float64,1}, ::Array{Float64,1}, ::Array{Float64,1}, ::Void, ::Bool, ::Void, ::Bool, ::Bool, ::Bool, ::Bool, ::Rational{Int64}, ::Float64, ::Float64, ::Rational{Int64}, ::Rational{Int64}, ::Rational{Int64}, ::Bool, ::Rational{Int64}, ::Rational{Int64}, ::Rational{Int64}, ::Float64, ::Float64, ::Float64, ::StochasticDiffEq.#ODE_DEFAULT_NORM, ::StochasticDiffEq.#ODE_DEFAULT_UNSTABLE_CHECK, ::StochasticDiffEq.#ODE_DEFAULT_ISOUTOFDOMAIN, ::Bool, ::Bool, ::Bool, ::Bool, ::Int64, ::Bool, ::StochasticDiffEq.#ODE_DEFAULT_PROG_MESSAGE, ::String, ::Void, ::DiffEqBase.ContinuousCallback{##49#50,##51#52,##51#52,DiffEqBase.#INITIALIZE_DEFAULT,Float64,Int64,Void}, ::Bool, ::Bool, ::Bool, ::Array{Any,1}, ::DiffEqBase.#init, ::DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:White,##45#46,##47#48,DiffEqBase.#white_noise_func_wrapper!,DiffEqBase.CallbackSet{Tuple{},Tuple{}},Void}, ::StochasticDiffEq.SRI{StochasticDiffEq.RosslerSRI{Float64,Float64},StochasticDiffEq.RSWM{:RSwM3,Float64}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/solve.jl:112
 [5] (::DiffEqBase.#kw##init)(::Array{Any,1}, ::DiffEqBase.#init, ::DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:White,##45#46,##47#48,DiffEqBase.#white_noise_func_wrapper!,DiffEqBase.CallbackSet{Tuple{},Tuple{}},Void}, ::StochasticDiffEq.SRI{StochasticDiffEq.RosslerSRI{Float64,Float64},StochasticDiffEq.RSWM{:RSwM3,Float64}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at ./<missing>:0
 [6] #solve#58(::Array{Any,1}, ::Function, ::DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:White,##45#46,##47#48,DiffEqBase.#white_noise_func_wrapper!,DiffEqBase.CallbackSet{Tuple{},Tuple{}},Void}, ::StochasticDiffEq.SRI{StochasticDiffEq.RosslerSRI{Float64,Float64},StochasticDiffEq.RSWM{:RSwM3,Float64}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/solve.jl:10
 [7] (::DiffEqBase.#kw##solve)(::Array{Any,1}, ::DiffEqBase.#solve, ::DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:White,##45#46,##47#48,DiffEqBase.#white_noise_func_wrapper!,DiffEqBase.CallbackSet{Tuple{},Tuple{}},Void}, ::StochasticDiffEq.SRI{StochasticDiffEq.RosslerSRI{Float64,Float64},StochasticDiffEq.RSWM{:RSwM3,Float64}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at ./<missing>:0 (repeats 2 times)
 [8] include_from_node1(::String) at ./loading.jl:539
 [9] include(::String) at ./sysimg.jl:14
 [10] macro expansion at /home/vagrant/.julia/v0.6/StochasticDiffEq/test/runtests.jl:24 [inlined]
 [11] macro expansion at ./test.jl:853 [inlined]
 [12] macro expansion at ./util.jl:237 [inlined]
 [13] anonymous at ./<missing>:?
 [14] include_from_node1(::String) at ./loading.jl:539
 [15] include(::String) at ./sysimg.jl:14
 [16] process_options(::Base.JLOptions) at ./client.jl:305
 [17] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/StochasticDiffEq/test/cache_test.jl, in expression starting on line 48
WARNING: max{T1 <: Real, T2 <: Real}(x::AbstractArray{T1}, y::AbstractArray{T2}) is deprecated, use max.(x, y) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] max(::Array{Float64,1}, ::Array{Float64,1}) at ./deprecated.jl:51
 [3] sde_determine_initdt(::Array{Float64,1}, ::Float64, ::Float64, ::Float64, ::Float64, ::Float64, ::StochasticDiffEq.#ODE_DEFAULT_NORM, ::DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:White,##45#46,##53#54,DiffEqBase.#white_noise_func_wrapper!,DiffEqBase.CallbackSet{Tuple{},Tuple{}},Void}, ::Rational{Int64}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/initdt.jl:15
 [4] #init#59(::Float64, ::Int64, ::Bool, ::Array{Float64,1}, ::Array{Float64,1}, ::Array{Float64,1}, ::Void, ::Bool, ::Void, ::Bool, ::Bool, ::Bool, ::Bool, ::Rational{Int64}, ::Float64, ::Float64, ::Rational{Int64}, ::Rational{Int64}, ::Rational{Int64}, ::Bool, ::Rational{Int64}, ::Rational{Int64}, ::Rational{Int64}, ::Float64, ::Float64, ::Float64, ::StochasticDiffEq.#ODE_DEFAULT_NORM, ::StochasticDiffEq.#ODE_DEFAULT_UNSTABLE_CHECK, ::StochasticDiffEq.#ODE_DEFAULT_ISOUTOFDOMAIN, ::Bool, ::Bool, ::Bool, ::Bool, ::Int64, ::Bool, ::StochasticDiffEq.#ODE_DEFAULT_PROG_MESSAGE, ::String, ::Void, ::DiffEqBase.ContinuousCallback{##49#50,##51#52,##51#52,DiffEqBase.#INITIALIZE_DEFAULT,Float64,Int64,Void}, ::Bool, ::Bool, ::Bool, ::Array{Any,1}, ::DiffEqBase.#init, ::DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:White,##45#46,##53#54,DiffEqBase.#white_noise_func_wrapper!,DiffEqBase.CallbackSet{Tuple{},Tuple{}},Void}, ::StochasticDiffEq.SRA{StochasticDiffEq.RosslerSRA{Float64,Float64},StochasticDiffEq.RSWM{:RSwM3,Float64}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/solve.jl:112
 [5] (::DiffEqBase.#kw##init)(::Array{Any,1}, ::DiffEqBase.#init, ::DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:White,##45#46,##53#54,DiffEqBase.#white_noise_func_wrapper!,DiffEqBase.CallbackSet{Tuple{},Tuple{}},Void}, ::StochasticDiffEq.SRA{StochasticDiffEq.RosslerSRA{Float64,Float64},StochasticDiffEq.RSWM{:RSwM3,Float64}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at ./<missing>:0
 [6] #solve#58(::Array{Any,1}, ::Function, ::DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:White,##45#46,##53#54,DiffEqBase.#white_noise_func_wrapper!,DiffEqBase.CallbackSet{Tuple{},Tuple{}},Void}, ::StochasticDiffEq.SRA{StochasticDiffEq.RosslerSRA{Float64,Float64},StochasticDiffEq.RSWM{:RSwM3,Float64}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/solve.jl:10
 [7] (::DiffEqBase.#kw##solve)(::Array{Any,1}, ::DiffEqBase.#solve, ::DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:White,##45#46,##53#54,DiffEqBase.#white_noise_func_wrapper!,DiffEqBase.CallbackSet{Tuple{},Tuple{}},Void}, ::StochasticDiffEq.SRA{StochasticDiffEq.RosslerSRA{Float64,Float64},StochasticDiffEq.RSWM{:RSwM3,Float64}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at ./<missing>:0 (repeats 2 times)
 [8] include_from_node1(::String) at ./loading.jl:539
 [9] include(::String) at ./sysimg.jl:14
 [10] macro expansion at /home/vagrant/.julia/v0.6/StochasticDiffEq/test/runtests.jl:24 [inlined]
 [11] macro expansion at ./test.jl:853 [inlined]
 [12] macro expansion at ./util.jl:237 [inlined]
 [13] anonymous at ./<missing>:?
 [14] include_from_node1(::String) at ./loading.jl:539
 [15] include(::String) at ./sysimg.jl:14
 [16] process_options(::Base.JLOptions) at ./client.jl:305
 [17] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/StochasticDiffEq/test/cache_test.jl, in expression starting on line 58
WARNING: max{T1 <: Real, T2 <: Real}(x::AbstractArray{T1}, y::AbstractArray{T2}) is deprecated, use max.(x, y) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] max(::Array{Float64,1}, ::Array{Float64,1}) at ./deprecated.jl:51
 [3] sde_determine_initdt(::Array{Float64,1}, ::Float64, ::Float64, ::Float64, ::Float64, ::Float64, ::StochasticDiffEq.#ODE_DEFAULT_NORM, ::DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:White,##45#46,##53#54,DiffEqBase.#white_noise_func_wrapper!,DiffEqBase.CallbackSet{Tuple{},Tuple{}},Void}, ::Rational{Int64}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/initdt.jl:32
 [4] #init#59(::Float64, ::Int64, ::Bool, ::Array{Float64,1}, ::Array{Float64,1}, ::Array{Float64,1}, ::Void, ::Bool, ::Void, ::Bool, ::Bool, ::Bool, ::Bool, ::Rational{Int64}, ::Float64, ::Float64, ::Rational{Int64}, ::Rational{Int64}, ::Rational{Int64}, ::Bool, ::Rational{Int64}, ::Rational{Int64}, ::Rational{Int64}, ::Float64, ::Float64, ::Float64, ::StochasticDiffEq.#ODE_DEFAULT_NORM, ::StochasticDiffEq.#ODE_DEFAULT_UNSTABLE_CHECK, ::StochasticDiffEq.#ODE_DEFAULT_ISOUTOFDOMAIN, ::Bool, ::Bool, ::Bool, ::Bool, ::Int64, ::Bool, ::StochasticDiffEq.#ODE_DEFAULT_PROG_MESSAGE, ::String, ::Void, ::DiffEqBase.ContinuousCallback{##49#50,##51#52,##51#52,DiffEqBase.#INITIALIZE_DEFAULT,Float64,Int64,Void}, ::Bool, ::Bool, ::Bool, ::Array{Any,1}, ::DiffEqBase.#init, ::DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:White,##45#46,##53#54,DiffEqBase.#white_noise_func_wrapper!,DiffEqBase.CallbackSet{Tuple{},Tuple{}},Void}, ::StochasticDiffEq.SRA{StochasticDiffEq.RosslerSRA{Float64,Float64},StochasticDiffEq.RSWM{:RSwM3,Float64}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/solve.jl:112
 [5] (::DiffEqBase.#kw##init)(::Array{Any,1}, ::DiffEqBase.#init, ::DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:White,##45#46,##53#54,DiffEqBase.#white_noise_func_wrapper!,DiffEqBase.CallbackSet{Tuple{},Tuple{}},Void}, ::StochasticDiffEq.SRA{StochasticDiffEq.RosslerSRA{Float64,Float64},StochasticDiffEq.RSWM{:RSwM3,Float64}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at ./<missing>:0
 [6] #solve#58(::Array{Any,1}, ::Function, ::DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:White,##45#46,##53#54,DiffEqBase.#white_noise_func_wrapper!,DiffEqBase.CallbackSet{Tuple{},Tuple{}},Void}, ::StochasticDiffEq.SRA{StochasticDiffEq.RosslerSRA{Float64,Float64},StochasticDiffEq.RSWM{:RSwM3,Float64}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/solve.jl:10
 [7] (::DiffEqBase.#kw##solve)(::Array{Any,1}, ::DiffEqBase.#solve, ::DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:White,##45#46,##53#54,DiffEqBase.#white_noise_func_wrapper!,DiffEqBase.CallbackSet{Tuple{},Tuple{}},Void}, ::StochasticDiffEq.SRA{StochasticDiffEq.RosslerSRA{Float64,Float64},StochasticDiffEq.RSWM{:RSwM3,Float64}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at ./<missing>:0 (repeats 2 times)
 [8] include_from_node1(::String) at ./loading.jl:539
 [9] include(::String) at ./sysimg.jl:14
 [10] macro expansion at /home/vagrant/.julia/v0.6/StochasticDiffEq/test/runtests.jl:24 [inlined]
 [11] macro expansion at ./test.jl:853 [inlined]
 [12] macro expansion at ./util.jl:237 [inlined]
 [13] anonymous at ./<missing>:?
 [14] include_from_node1(::String) at ./loading.jl:539
 [15] include(::String) at ./sysimg.jl:14
 [16] process_options(::Base.JLOptions) at ./client.jl:305
 [17] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/StochasticDiffEq/test/cache_test.jl, in expression starting on line 58
WARNING: max{T1 <: Real, T2 <: Real}(x::AbstractArray{T1}, y::AbstractArray{T2}) is deprecated, use max.(x, y) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] max(::Array{Float64,1}, ::Array{Float64,1}) at ./deprecated.jl:51
 [3] sde_determine_initdt(::Array{Float64,1}, ::Float64, ::Float64, ::Float64, ::Float64, ::Float64, ::StochasticDiffEq.#ODE_DEFAULT_NORM, ::DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:White,##45#46,##53#54,DiffEqBase.#white_noise_func_wrapper!,DiffEqBase.CallbackSet{Tuple{},Tuple{}},Void}, ::Rational{Int64}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/initdt.jl:33
 [4] #init#59(::Float64, ::Int64, ::Bool, ::Array{Float64,1}, ::Array{Float64,1}, ::Array{Float64,1}, ::Void, ::Bool, ::Void, ::Bool, ::Bool, ::Bool, ::Bool, ::Rational{Int64}, ::Float64, ::Float64, ::Rational{Int64}, ::Rational{Int64}, ::Rational{Int64}, ::Bool, ::Rational{Int64}, ::Rational{Int64}, ::Rational{Int64}, ::Float64, ::Float64, ::Float64, ::StochasticDiffEq.#ODE_DEFAULT_NORM, ::StochasticDiffEq.#ODE_DEFAULT_UNSTABLE_CHECK, ::StochasticDiffEq.#ODE_DEFAULT_ISOUTOFDOMAIN, ::Bool, ::Bool, ::Bool, ::Bool, ::Int64, ::Bool, ::StochasticDiffEq.#ODE_DEFAULT_PROG_MESSAGE, ::String, ::Void, ::DiffEqBase.ContinuousCallback{##49#50,##51#52,##51#52,DiffEqBase.#INITIALIZE_DEFAULT,Float64,Int64,Void}, ::Bool, ::Bool, ::Bool, ::Array{Any,1}, ::DiffEqBase.#init, ::DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:White,##45#46,##53#54,DiffEqBase.#white_noise_func_wrapper!,DiffEqBase.CallbackSet{Tuple{},Tuple{}},Void}, ::StochasticDiffEq.SRA{StochasticDiffEq.RosslerSRA{Float64,Float64},StochasticDiffEq.RSWM{:RSwM3,Float64}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/solve.jl:112
 [5] (::DiffEqBase.#kw##init)(::Array{Any,1}, ::DiffEqBase.#init, ::DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:White,##45#46,##53#54,DiffEqBase.#white_noise_func_wrapper!,DiffEqBase.CallbackSet{Tuple{},Tuple{}},Void}, ::StochasticDiffEq.SRA{StochasticDiffEq.RosslerSRA{Float64,Float64},StochasticDiffEq.RSWM{:RSwM3,Float64}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at ./<missing>:0
 [6] #solve#58(::Array{Any,1}, ::Function, ::DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:White,##45#46,##53#54,DiffEqBase.#white_noise_func_wrapper!,DiffEqBase.CallbackSet{Tuple{},Tuple{}},Void}, ::StochasticDiffEq.SRA{StochasticDiffEq.RosslerSRA{Float64,Float64},StochasticDiffEq.RSWM{:RSwM3,Float64}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/solve.jl:10
 [7] (::DiffEqBase.#kw##solve)(::Array{Any,1}, ::DiffEqBase.#solve, ::DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:White,##45#46,##53#54,DiffEqBase.#white_noise_func_wrapper!,DiffEqBase.CallbackSet{Tuple{},Tuple{}},Void}, ::StochasticDiffEq.SRA{StochasticDiffEq.RosslerSRA{Float64,Float64},StochasticDiffEq.RSWM{:RSwM3,Float64}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at ./<missing>:0 (repeats 2 times)
 [8] include_from_node1(::String) at ./loading.jl:539
 [9] include(::String) at ./sysimg.jl:14
 [10] macro expansion at /home/vagrant/.julia/v0.6/StochasticDiffEq/test/runtests.jl:24 [inlined]
 [11] macro expansion at ./test.jl:853 [inlined]
 [12] macro expansion at ./util.jl:237 [inlined]
 [13] anonymous at ./<missing>:?
 [14] include_from_node1(::String) at ./loading.jl:539
 [15] include(::String) at ./sysimg.jl:14
 [16] process_options(::Base.JLOptions) at ./client.jl:305
 [17] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/StochasticDiffEq/test/cache_test.jl, in expression starting on line 58
WARNING: max{T1 <: Real, T2 <: Real}(x::AbstractArray{T1}, y::AbstractArray{T2}) is deprecated, use max.(x, y) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] max(::Array{Float64,1}, ::Array{Float64,1}) at ./deprecated.jl:51
 [3] sde_determine_initdt(::Array{Float64,1}, ::Float64, ::Float64, ::Float64, ::Float64, ::Float64, ::StochasticDiffEq.#ODE_DEFAULT_NORM, ::DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:White,##45#46,##53#54,DiffEqBase.#white_noise_func_wrapper!,DiffEqBase.CallbackSet{Tuple{},Tuple{}},Void}, ::Rational{Int64}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/initdt.jl:15
 [4] #init#59(::Float64, ::Int64, ::Bool, ::Array{Float64,1}, ::Array{Float64,1}, ::Array{Float64,1}, ::Void, ::Bool, ::Void, ::Bool, ::Bool, ::Bool, ::Bool, ::Rational{Int64}, ::Float64, ::Float64, ::Rational{Int64}, ::Rational{Int64}, ::Rational{Int64}, ::Bool, ::Rational{Int64}, ::Rational{Int64}, ::Rational{Int64}, ::Float64, ::Float64, ::Float64, ::StochasticDiffEq.#ODE_DEFAULT_NORM, ::StochasticDiffEq.#ODE_DEFAULT_UNSTABLE_CHECK, ::StochasticDiffEq.#ODE_DEFAULT_ISOUTOFDOMAIN, ::Bool, ::Bool, ::Bool, ::Bool, ::Int64, ::Bool, ::StochasticDiffEq.#ODE_DEFAULT_PROG_MESSAGE, ::String, ::Void, ::DiffEqBase.ContinuousCallback{##49#50,##51#52,##51#52,DiffEqBase.#INITIALIZE_DEFAULT,Float64,Int64,Void}, ::Bool, ::Bool, ::Bool, ::Array{Any,1}, ::DiffEqBase.#init, ::DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:White,##45#46,##53#54,DiffEqBase.#white_noise_func_wrapper!,DiffEqBase.CallbackSet{Tuple{},Tuple{}},Void}, ::StochasticDiffEq.SRA1{StochasticDiffEq.RSWM{:RSwM3,Float64}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/solve.jl:112
 [5] (::DiffEqBase.#kw##init)(::Array{Any,1}, ::DiffEqBase.#init, ::DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:White,##45#46,##53#54,DiffEqBase.#white_noise_func_wrapper!,DiffEqBase.CallbackSet{Tuple{},Tuple{}},Void}, ::StochasticDiffEq.SRA1{StochasticDiffEq.RSWM{:RSwM3,Float64}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at ./<missing>:0
 [6] #solve#58(::Array{Any,1}, ::Function, ::DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:White,##45#46,##53#54,DiffEqBase.#white_noise_func_wrapper!,DiffEqBase.CallbackSet{Tuple{},Tuple{}},Void}, ::StochasticDiffEq.SRA1{StochasticDiffEq.RSWM{:RSwM3,Float64}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/solve.jl:10
 [7] (::DiffEqBase.#kw##solve)(::Array{Any,1}, ::DiffEqBase.#solve, ::DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:White,##45#46,##53#54,DiffEqBase.#white_noise_func_wrapper!,DiffEqBase.CallbackSet{Tuple{},Tuple{}},Void}, ::StochasticDiffEq.SRA1{StochasticDiffEq.RSWM{:RSwM3,Float64}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at ./<missing>:0 (repeats 2 times)
 [8] include_from_node1(::String) at ./loading.jl:539
 [9] include(::String) at ./sysimg.jl:14
 [10] macro expansion at /home/vagrant/.julia/v0.6/StochasticDiffEq/test/runtests.jl:24 [inlined]
 [11] macro expansion at ./test.jl:853 [inlined]
 [12] macro expansion at ./util.jl:237 [inlined]
 [13] anonymous at ./<missing>:?
 [14] include_from_node1(::String) at ./loading.jl:539
 [15] include(::String) at ./sysimg.jl:14
 [16] process_options(::Base.JLOptions) at ./client.jl:305
 [17] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/StochasticDiffEq/test/cache_test.jl, in expression starting on line 59
WARNING: max{T1 <: Real, T2 <: Real}(x::AbstractArray{T1}, y::AbstractArray{T2}) is deprecated, use max.(x, y) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] max(::Array{Float64,1}, ::Array{Float64,1}) at ./deprecated.jl:51
 [3] sde_determine_initdt(::Array{Float64,1}, ::Float64, ::Float64, ::Float64, ::Float64, ::Float64, ::StochasticDiffEq.#ODE_DEFAULT_NORM, ::DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:White,##45#46,##53#54,DiffEqBase.#white_noise_func_wrapper!,DiffEqBase.CallbackSet{Tuple{},Tuple{}},Void}, ::Rational{Int64}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/initdt.jl:32
 [4] #init#59(::Float64, ::Int64, ::Bool, ::Array{Float64,1}, ::Array{Float64,1}, ::Array{Float64,1}, ::Void, ::Bool, ::Void, ::Bool, ::Bool, ::Bool, ::Bool, ::Rational{Int64}, ::Float64, ::Float64, ::Rational{Int64}, ::Rational{Int64}, ::Rational{Int64}, ::Bool, ::Rational{Int64}, ::Rational{Int64}, ::Rational{Int64}, ::Float64, ::Float64, ::Float64, ::StochasticDiffEq.#ODE_DEFAULT_NORM, ::StochasticDiffEq.#ODE_DEFAULT_UNSTABLE_CHECK, ::StochasticDiffEq.#ODE_DEFAULT_ISOUTOFDOMAIN, ::Bool, ::Bool, ::Bool, ::Bool, ::Int64, ::Bool, ::StochasticDiffEq.#ODE_DEFAULT_PROG_MESSAGE, ::String, ::Void, ::DiffEqBase.ContinuousCallback{##49#50,##51#52,##51#52,DiffEqBase.#INITIALIZE_DEFAULT,Float64,Int64,Void}, ::Bool, ::Bool, ::Bool, ::Array{Any,1}, ::DiffEqBase.#init, ::DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:White,##45#46,##53#54,DiffEqBase.#white_noise_func_wrapper!,DiffEqBase.CallbackSet{Tuple{},Tuple{}},Void}, ::StochasticDiffEq.SRA1{StochasticDiffEq.RSWM{:RSwM3,Float64}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/solve.jl:112
 [5] (::DiffEqBase.#kw##init)(::Array{Any,1}, ::DiffEqBase.#init, ::DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:White,##45#46,##53#54,DiffEqBase.#white_noise_func_wrapper!,DiffEqBase.CallbackSet{Tuple{},Tuple{}},Void}, ::StochasticDiffEq.SRA1{StochasticDiffEq.RSWM{:RSwM3,Float64}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at ./<missing>:0
 [6] #solve#58(::Array{Any,1}, ::Function, ::DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:White,##45#46,##53#54,DiffEqBase.#white_noise_func_wrapper!,DiffEqBase.CallbackSet{Tuple{},Tuple{}},Void}, ::StochasticDiffEq.SRA1{StochasticDiffEq.RSWM{:RSwM3,Float64}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/solve.jl:10
 [7] (::DiffEqBase.#kw##solve)(::Array{Any,1}, ::DiffEqBase.#solve, ::DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:White,##45#46,##53#54,DiffEqBase.#white_noise_func_wrapper!,DiffEqBase.CallbackSet{Tuple{},Tuple{}},Void}, ::StochasticDiffEq.SRA1{StochasticDiffEq.RSWM{:RSwM3,Float64}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at ./<missing>:0 (repeats 2 times)
 [8] include_from_node1(::String) at ./loading.jl:539
 [9] include(::String) at ./sysimg.jl:14
 [10] macro expansion at /home/vagrant/.julia/v0.6/StochasticDiffEq/test/runtests.jl:24 [inlined]
 [11] macro expansion at ./test.jl:853 [inlined]
 [12] macro expansion at ./util.jl:237 [inlined]
 [13] anonymous at ./<missing>:?
 [14] include_from_node1(::String) at ./loading.jl:539
 [15] include(::String) at ./sysimg.jl:14
 [16] process_options(::Base.JLOptions) at ./client.jl:305
 [17] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/StochasticDiffEq/test/cache_test.jl, in expression starting on line 59
WARNING: max{T1 <: Real, T2 <: Real}(x::AbstractArray{T1}, y::AbstractArray{T2}) is deprecated, use max.(x, y) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] max(::Array{Float64,1}, ::Array{Float64,1}) at ./deprecated.jl:51
 [3] sde_determine_initdt(::Array{Float64,1}, ::Float64, ::Float64, ::Float64, ::Float64, ::Float64, ::StochasticDiffEq.#ODE_DEFAULT_NORM, ::DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:White,##45#46,##53#54,DiffEqBase.#white_noise_func_wrapper!,DiffEqBase.CallbackSet{Tuple{},Tuple{}},Void}, ::Rational{Int64}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/initdt.jl:33
 [4] #init#59(::Float64, ::Int64, ::Bool, ::Array{Float64,1}, ::Array{Float64,1}, ::Array{Float64,1}, ::Void, ::Bool, ::Void, ::Bool, ::Bool, ::Bool, ::Bool, ::Rational{Int64}, ::Float64, ::Float64, ::Rational{Int64}, ::Rational{Int64}, ::Rational{Int64}, ::Bool, ::Rational{Int64}, ::Rational{Int64}, ::Rational{Int64}, ::Float64, ::Float64, ::Float64, ::StochasticDiffEq.#ODE_DEFAULT_NORM, ::StochasticDiffEq.#ODE_DEFAULT_UNSTABLE_CHECK, ::StochasticDiffEq.#ODE_DEFAULT_ISOUTOFDOMAIN, ::Bool, ::Bool, ::Bool, ::Bool, ::Int64, ::Bool, ::StochasticDiffEq.#ODE_DEFAULT_PROG_MESSAGE, ::String, ::Void, ::DiffEqBase.ContinuousCallback{##49#50,##51#52,##51#52,DiffEqBase.#INITIALIZE_DEFAULT,Float64,Int64,Void}, ::Bool, ::Bool, ::Bool, ::Array{Any,1}, ::DiffEqBase.#init, ::DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:White,##45#46,##53#54,DiffEqBase.#white_noise_func_wrapper!,DiffEqBase.CallbackSet{Tuple{},Tuple{}},Void}, ::StochasticDiffEq.SRA1{StochasticDiffEq.RSWM{:RSwM3,Float64}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/solve.jl:112
 [5] (::DiffEqBase.#kw##init)(::Array{Any,1}, ::DiffEqBase.#init, ::DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:White,##45#46,##53#54,DiffEqBase.#white_noise_func_wrapper!,DiffEqBase.CallbackSet{Tuple{},Tuple{}},Void}, ::StochasticDiffEq.SRA1{StochasticDiffEq.RSWM{:RSwM3,Float64}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at ./<missing>:0
 [6] #solve#58(::Array{Any,1}, ::Function, ::DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:White,##45#46,##53#54,DiffEqBase.#white_noise_func_wrapper!,DiffEqBase.CallbackSet{Tuple{},Tuple{}},Void}, ::StochasticDiffEq.SRA1{StochasticDiffEq.RSWM{:RSwM3,Float64}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/solve.jl:10
 [7] (::DiffEqBase.#kw##solve)(::Array{Any,1}, ::DiffEqBase.#solve, ::DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:White,##45#46,##53#54,DiffEqBase.#white_noise_func_wrapper!,DiffEqBase.CallbackSet{Tuple{},Tuple{}},Void}, ::StochasticDiffEq.SRA1{StochasticDiffEq.RSWM{:RSwM3,Float64}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at ./<missing>:0 (repeats 2 times)
 [8] include_from_node1(::String) at ./loading.jl:539
 [9] include(::String) at ./sysimg.jl:14
 [10] macro expansion at /home/vagrant/.julia/v0.6/StochasticDiffEq/test/runtests.jl:24 [inlined]
 [11] macro expansion at ./test.jl:853 [inlined]
 [12] macro expansion at ./util.jl:237 [inlined]
 [13] anonymous at ./<missing>:?
 [14] include_from_node1(::String) at ./loading.jl:539
 [15] include(::String) at ./sysimg.jl:14
 [16] process_options(::Base.JLOptions) at ./client.jl:305
 [17] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/StochasticDiffEq/test/cache_test.jl, in expression starting on line 59
Test Summary: |
Cache Tests   | No tests
 31.640431 seconds (10.29 M allocations: 771.549 MiB, 1.55% gc time)
WARNING: big(x::AbstractArray{$(Expr(:<:, :AbstractFloat))}) is deprecated, use big.(x) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] big(::Array{Float64,2}) at ./deprecated.jl:51
 [3] macro expansion at /home/vagrant/.julia/v0.6/StochasticDiffEq/test/adaptive/sde_linearadaptive_tests.jl:12 [inlined]
 [4] anonymous at ./<missing>:?
 [5] include_from_node1(::String) at ./loading.jl:539
 [6] include(::String) at ./sysimg.jl:14
 [7] macro expansion at /home/vagrant/.julia/v0.6/StochasticDiffEq/test/runtests.jl:27 [inlined]
 [8] macro expansion at ./test.jl:853 [inlined]
 [9] macro expansion at ./util.jl:237 [inlined]
 [10] anonymous at ./<missing>:?
 [11] include_from_node1(::String) at ./loading.jl:539
 [12] include(::String) at ./sysimg.jl:14
 [13] process_options(::Base.JLOptions) at ./client.jl:305
 [14] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/StochasticDiffEq/test/adaptive/sde_linearadaptive_tests.jl, in expression starting on line 11
WARNING: big(x::AbstractArray{$(Expr(:<:, :AbstractFloat))}) is deprecated, use big.(x) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] big(::Array{Float64,1}) at ./deprecated.jl:51
 [3] macro expansion at /home/vagrant/.julia/v0.6/StochasticDiffEq/test/adaptive/sde_linearadaptive_tests.jl:13 [inlined]
 [4] anonymous at ./<missing>:?
 [5] include_from_node1(::String) at ./loading.jl:539
 [6] include(::String) at ./sysimg.jl:14
 [7] macro expansion at /home/vagrant/.julia/v0.6/StochasticDiffEq/test/runtests.jl:27 [inlined]
 [8] macro expansion at ./test.jl:853 [inlined]
 [9] macro expansion at ./util.jl:237 [inlined]
 [10] anonymous at ./<missing>:?
 [11] include_from_node1(::String) at ./loading.jl:539
 [12] include(::String) at ./sysimg.jl:14
 [13] process_options(::Base.JLOptions) at ./client.jl:305
 [14] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/StochasticDiffEq/test/adaptive/sde_linearadaptive_tests.jl, in expression starting on line 11
Test Summary:             | Pass  Total
Adaptive SDE Linear Tests |   16     16
 12.048945 seconds (9.06 M allocations: 1.244 GiB, 4.82% gc time)
WARNING: using Distributions.probs in module Main conflicts with an existing identifier.
Test Summary:                  | Pass  Total
Adaptive SDE Distribution Test |    3      3
 14.628957 seconds (2.17 M allocations: 184.313 MiB, 0.69% gc time)
1e-1
1e-2
1e-3
Final error for the solutions were:
          0.012053095209349884
          0.01729403803810286
          0.0006209430554071516
          4.492927796752311e-5
Test Summary:                           | Pass  Total
Multiple Dimension Linear Adaptive Test |    2      2
  0.017410 seconds (17.12 k allocations: 2.897 MiB)
Solve and Plot
WARNING: max{T1 <: Real, T2 <: Real}(x::AbstractArray{T1}, y::AbstractArray{T2}) is deprecated, use max.(x, y) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] max(::Array{Float64,2}, ::Array{Float64,2}) at ./deprecated.jl:51
 [3] sde_determine_initdt(::Array{Float64,2}, ::Float64, ::Float64, ::Float64, ::Float64, ::Float64, ::StochasticDiffEq.#ODE_DEFAULT_NORM, ::DiffEqBase.SDEProblem{Array{Float64,2},Float64,true,true,:White,DiffEqProblemLibrary.##122#123,DiffEqProblemLibrary.##124#125,DiffEqBase.#white_noise_func_wrapper!,DiffEqBase.CallbackSet{Tuple{},Tuple{}},Void}, ::Rational{Int64}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/initdt.jl:15
 [4] #init#59(::Float64, ::Int64, ::Bool, ::Array{Float64,1}, ::Array{Float64,1}, ::Array{Float64,1}, ::Void, ::Bool, ::Void, ::Bool, ::Bool, ::Bool, ::Bool, ::Rational{Int64}, ::Float64, ::Float64, ::Rational{Int64}, ::Rational{Int64}, ::Rational{Int64}, ::Bool, ::Rational{Int64}, ::Rational{Int64}, ::Rational{Int64}, ::Float64, ::Float64, ::Float64, ::StochasticDiffEq.#ODE_DEFAULT_NORM, ::StochasticDiffEq.#ODE_DEFAULT_UNSTABLE_CHECK, ::StochasticDiffEq.#ODE_DEFAULT_ISOUTOFDOMAIN, ::Bool, ::Bool, ::Bool, ::Bool, ::Int64, ::Bool, ::StochasticDiffEq.#ODE_DEFAULT_PROG_MESSAGE, ::String, ::Void, ::DiffEqBase.CallbackSet{Tuple{},Tuple{}}, ::Bool, ::Bool, ::Bool, ::Array{Any,1}, ::DiffEqBase.#init, ::DiffEqBase.SDEProblem{Array{Float64,2},Float64,true,true,:White,DiffEqProblemLibrary.##122#123,DiffEqProblemLibrary.##124#125,DiffEqBase.#white_noise_func_wrapper!,DiffEqBase.CallbackSet{Tuple{},Tuple{}},Void}, ::StochasticDiffEq.SRI{StochasticDiffEq.RosslerSRI{Float64,Float64},StochasticDiffEq.RSWM{:RSwM3,Float64}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/solve.jl:112
 [5] init(::DiffEqBase.SDEProblem{Array{Float64,2},Float64,true,true,:White,DiffEqProblemLibrary.##122#123,DiffEqProblemLibrary.##124#125,DiffEqBase.#white_noise_func_wrapper!,DiffEqBase.CallbackSet{Tuple{},Tuple{}},Void}, ::StochasticDiffEq.SRI{StochasticDiffEq.RosslerSRI{Float64,Float64},StochasticDiffEq.RSWM{:RSwM3,Float64}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/solve.jl:51
 [6] #solve#58(::Array{Any,1}, ::Function, ::DiffEqBase.SDEProblem{Array{Float64,2},Float64,true,true,:White,DiffEqProblemLibrary.##122#123,DiffEqProblemLibrary.##124#125,DiffEqBase.#white_noise_func_wrapper!,DiffEqBase.CallbackSet{Tuple{},Tuple{}},Void}, ::StochasticDiffEq.SRI{StochasticDiffEq.RosslerSRI{Float64,Float64},StochasticDiffEq.RSWM{:RSwM3,Float64}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/solve.jl:10
 [7] solve(::DiffEqBase.SDEProblem{Array{Float64,2},Float64,true,true,:White,DiffEqProblemLibrary.##122#123,DiffEqProblemLibrary.##124#125,DiffEqBase.#white_noise_func_wrapper!,DiffEqBase.CallbackSet{Tuple{},Tuple{}},Void}, ::StochasticDiffEq.SRI{StochasticDiffEq.RosslerSRI{Float64,Float64},StochasticDiffEq.RSWM{:RSwM3,Float64}}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/solve.jl:10
 [8] include_from_node1(::String) at ./loading.jl:539
 [9] include(::String) at ./sysimg.jl:14
 [10] macro expansion at /home/vagrant/.julia/v0.6/StochasticDiffEq/test/runtests.jl:30 [inlined]
 [11] macro expansion at ./test.jl:853 [inlined]
 [12] macro expansion at ./util.jl:237 [inlined]
 [13] anonymous at ./<missing>:?
 [14] include_from_node1(::String) at ./loading.jl:539
 [15] include(::String) at ./sysimg.jl:14
 [16] process_options(::Base.JLOptions) at ./client.jl:305
 [17] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/StochasticDiffEq/test/adaptive/sde_autostepsize_test.jl, in expression starting on line 8
WARNING: max{T1 <: Real, T2 <: Real}(x::AbstractArray{T1}, y::AbstractArray{T2}) is deprecated, use max.(x, y) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] max(::Array{Float64,2}, ::Array{Float64,2}) at ./deprecated.jl:51
 [3] sde_determine_initdt(::Array{Float64,2}, ::Float64, ::Float64, ::Float64, ::Float64, ::Float64, ::StochasticDiffEq.#ODE_DEFAULT_NORM, ::DiffEqBase.SDEProblem{Array{Float64,2},Float64,true,true,:White,DiffEqProblemLibrary.##122#123,DiffEqProblemLibrary.##124#125,DiffEqBase.#white_noise_func_wrapper!,DiffEqBase.CallbackSet{Tuple{},Tuple{}},Void}, ::Rational{Int64}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/initdt.jl:32
 [4] #init#59(::Float64, ::Int64, ::Bool, ::Array{Float64,1}, ::Array{Float64,1}, ::Array{Float64,1}, ::Void, ::Bool, ::Void, ::Bool, ::Bool, ::Bool, ::Bool, ::Rational{Int64}, ::Float64, ::Float64, ::Rational{Int64}, ::Rational{Int64}, ::Rational{Int64}, ::Bool, ::Rational{Int64}, ::Rational{Int64}, ::Rational{Int64}, ::Float64, ::Float64, ::Float64, ::StochasticDiffEq.#ODE_DEFAULT_NORM, ::StochasticDiffEq.#ODE_DEFAULT_UNSTABLE_CHECK, ::StochasticDiffEq.#ODE_DEFAULT_ISOUTOFDOMAIN, ::Bool, ::Bool, ::Bool, ::Bool, ::Int64, ::Bool, ::StochasticDiffEq.#ODE_DEFAULT_PROG_MESSAGE, ::String, ::Void, ::DiffEqBase.CallbackSet{Tuple{},Tuple{}}, ::Bool, ::Bool, ::Bool, ::Array{Any,1}, ::DiffEqBase.#init, ::DiffEqBase.SDEProblem{Array{Float64,2},Float64,true,true,:White,DiffEqProblemLibrary.##122#123,DiffEqProblemLibrary.##124#125,DiffEqBase.#white_noise_func_wrapper!,DiffEqBase.CallbackSet{Tuple{},Tuple{}},Void}, ::StochasticDiffEq.SRI{StochasticDiffEq.RosslerSRI{Float64,Float64},StochasticDiffEq.RSWM{:RSwM3,Float64}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/solve.jl:112
 [5] init(::DiffEqBase.SDEProblem{Array{Float64,2},Float64,true,true,:White,DiffEqProblemLibrary.##122#123,DiffEqProblemLibrary.##124#125,DiffEqBase.#white_noise_func_wrapper!,DiffEqBase.CallbackSet{Tuple{},Tuple{}},Void}, ::StochasticDiffEq.SRI{StochasticDiffEq.RosslerSRI{Float64,Float64},StochasticDiffEq.RSWM{:RSwM3,Float64}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/solve.jl:51
 [6] #solve#58(::Array{Any,1}, ::Function, ::DiffEqBase.SDEProblem{Array{Float64,2},Float64,true,true,:White,DiffEqProblemLibrary.##122#123,DiffEqProblemLibrary.##124#125,DiffEqBase.#white_noise_func_wrapper!,DiffEqBase.CallbackSet{Tuple{},Tuple{}},Void}, ::StochasticDiffEq.SRI{StochasticDiffEq.RosslerSRI{Float64,Float64},StochasticDiffEq.RSWM{:RSwM3,Float64}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/solve.jl:10
 [7] solve(::DiffEqBase.SDEProblem{Array{Float64,2},Float64,true,true,:White,DiffEqProblemLibrary.##122#123,DiffEqProblemLibrary.##124#125,DiffEqBase.#white_noise_func_wrapper!,DiffEqBase.CallbackSet{Tuple{},Tuple{}},Void}, ::StochasticDiffEq.SRI{StochasticDiffEq.RosslerSRI{Float64,Float64},StochasticDiffEq.RSWM{:RSwM3,Float64}}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/solve.jl:10
 [8] include_from_node1(::String) at ./loading.jl:539
 [9] include(::String) at ./sysimg.jl:14
 [10] macro expansion at /home/vagrant/.julia/v0.6/StochasticDiffEq/test/runtests.jl:30 [inlined]
 [11] macro expansion at ./test.jl:853 [inlined]
 [12] macro expansion at ./util.jl:237 [inlined]
 [13] anonymous at ./<missing>:?
 [14] include_from_node1(::String) at ./loading.jl:539
 [15] include(::String) at ./sysimg.jl:14
 [16] process_options(::Base.JLOptions) at ./client.jl:305
 [17] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/StochasticDiffEq/test/adaptive/sde_autostepsize_test.jl, in expression starting on line 8
WARNING: max{T1 <: Real, T2 <: Real}(x::AbstractArray{T1}, y::AbstractArray{T2}) is deprecated, use max.(x, y) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] max(::Array{Float64,2}, ::Array{Float64,2}) at ./deprecated.jl:51
 [3] sde_determine_initdt(::Array{Float64,2}, ::Float64, ::Float64, ::Float64, ::Float64, ::Float64, ::StochasticDiffEq.#ODE_DEFAULT_NORM, ::DiffEqBase.SDEProblem{Array{Float64,2},Float64,true,true,:White,DiffEqProblemLibrary.##122#123,DiffEqProblemLibrary.##124#125,DiffEqBase.#white_noise_func_wrapper!,DiffEqBase.CallbackSet{Tuple{},Tuple{}},Void}, ::Rational{Int64}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/initdt.jl:33
 [4] #init#59(::Float64, ::Int64, ::Bool, ::Array{Float64,1}, ::Array{Float64,1}, ::Array{Float64,1}, ::Void, ::Bool, ::Void, ::Bool, ::Bool, ::Bool, ::Bool, ::Rational{Int64}, ::Float64, ::Float64, ::Rational{Int64}, ::Rational{Int64}, ::Rational{Int64}, ::Bool, ::Rational{Int64}, ::Rational{Int64}, ::Rational{Int64}, ::Float64, ::Float64, ::Float64, ::StochasticDiffEq.#ODE_DEFAULT_NORM, ::StochasticDiffEq.#ODE_DEFAULT_UNSTABLE_CHECK, ::StochasticDiffEq.#ODE_DEFAULT_ISOUTOFDOMAIN, ::Bool, ::Bool, ::Bool, ::Bool, ::Int64, ::Bool, ::StochasticDiffEq.#ODE_DEFAULT_PROG_MESSAGE, ::String, ::Void, ::DiffEqBase.CallbackSet{Tuple{},Tuple{}}, ::Bool, ::Bool, ::Bool, ::Array{Any,1}, ::DiffEqBase.#init, ::DiffEqBase.SDEProblem{Array{Float64,2},Float64,true,true,:White,DiffEqProblemLibrary.##122#123,DiffEqProblemLibrary.##124#125,DiffEqBase.#white_noise_func_wrapper!,DiffEqBase.CallbackSet{Tuple{},Tuple{}},Void}, ::StochasticDiffEq.SRI{StochasticDiffEq.RosslerSRI{Float64,Float64},StochasticDiffEq.RSWM{:RSwM3,Float64}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/solve.jl:112
 [5] init(::DiffEqBase.SDEProblem{Array{Float64,2},Float64,true,true,:White,DiffEqProblemLibrary.##122#123,DiffEqProblemLibrary.##124#125,DiffEqBase.#white_noise_func_wrapper!,DiffEqBase.CallbackSet{Tuple{},Tuple{}},Void}, ::StochasticDiffEq.SRI{StochasticDiffEq.RosslerSRI{Float64,Float64},StochasticDiffEq.RSWM{:RSwM3,Float64}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/solve.jl:51
 [6] #solve#58(::Array{Any,1}, ::Function, ::DiffEqBase.SDEProblem{Array{Float64,2},Float64,true,true,:White,DiffEqProblemLibrary.##122#123,DiffEqProblemLibrary.##124#125,DiffEqBase.#white_noise_func_wrapper!,DiffEqBase.CallbackSet{Tuple{},Tuple{}},Void}, ::StochasticDiffEq.SRI{StochasticDiffEq.RosslerSRI{Float64,Float64},StochasticDiffEq.RSWM{:RSwM3,Float64}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/solve.jl:10
 [7] solve(::DiffEqBase.SDEProblem{Array{Float64,2},Float64,true,true,:White,DiffEqProblemLibrary.##122#123,DiffEqProblemLibrary.##124#125,DiffEqBase.#white_noise_func_wrapper!,DiffEqBase.CallbackSet{Tuple{},Tuple{}},Void}, ::StochasticDiffEq.SRI{StochasticDiffEq.RosslerSRI{Float64,Float64},StochasticDiffEq.RSWM{:RSwM3,Float64}}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/solve.jl:10
 [8] include_from_node1(::String) at ./loading.jl:539
 [9] include(::String) at ./sysimg.jl:14
 [10] macro expansion at /home/vagrant/.julia/v0.6/StochasticDiffEq/test/runtests.jl:30 [inlined]
 [11] macro expansion at ./test.jl:853 [inlined]
 [12] macro expansion at ./util.jl:237 [inlined]
 [13] anonymous at ./<missing>:?
 [14] include_from_node1(::String) at ./loading.jl:539
 [15] include(::String) at ./sysimg.jl:14
 [16] process_options(::Base.JLOptions) at ./client.jl:305
 [17] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/StochasticDiffEq/test/adaptive/sde_autostepsize_test.jl, in expression starting on line 8
Test Summary:     |
Autostepsize Test | No tests
  0.253595 seconds (13.26 k allocations: 780.273 KiB)
Plot 1
Plot 2
Plot 3
Plot 4
Test Summary:                  |
Additive Lorenz Attractor Test | No tests
  6.454143 seconds (2.31 M allocations: 223.779 MiB, 2.23% gc time)
elapsed time: 249.234266704 seconds
INFO: StochasticDiffEq tests passed
INFO: Removing BinDeps v0.4.7
INFO: Removing Blosc v0.2.0
INFO: Removing ChunkedArrays v0.1.1
INFO: Removing Conda v0.5.3
INFO: Removing DiffEqDevTools v0.7.1
INFO: Removing DiffEqPDEBase v0.2.0
INFO: Removing DiffEqProblemLibrary v0.5.0
INFO: Removing Distributions v0.12.5
INFO: Removing EllipsisNotation v0.1.0
INFO: Removing FileIO v0.3.1
INFO: Removing HDF5 v0.8.0
INFO: Removing HypothesisTests v0.5.1
INFO: Removing JLD v0.6.10
INFO: Removing LegacyStrings v0.2.1
INFO: Removing PDMats v0.6.0
INFO: Removing ParameterizedFunctions v1.3.0
INFO: Removing QuadGK v0.1.2
INFO: Removing Rmath v0.1.6
INFO: Removing SHA v0.3.2
INFO: Removing StatsBase v0.14.0
INFO: Removing StatsFuns v0.5.0
INFO: Removing SymEngine v0.1.5
INFO: Removing URIParser v0.1.8
INFO: Removing VectorizedRoutines v0.0.2

>>> End of log
