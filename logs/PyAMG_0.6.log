>>> 'Pkg.add("PyAMG")' log
INFO: Cloning cache of PyAMG from https://github.com/cortner/PyAMG.jl.git
INFO: Installing BinDeps v0.8.7
INFO: Installing Conda v0.7.1
INFO: Installing MacroTools v0.4.0
INFO: Installing PyAMG v0.2.1
INFO: Installing PyCall v1.15.0
INFO: Installing SHA v0.5.6
INFO: Installing URIParser v0.3.1
INFO: Building Conda
INFO: Building PyCall
INFO: Using the Python distribution in the Conda package by default.
To use a different Python version, set ENV["PYTHON"]="pythoncommand" and re-run Pkg.build("PyCall").
Fetching package metadata .............
Solving package specifications: .

# All requested packages already installed.
# packages in environment at /home/vagrant/.julia/v0.6/Conda/deps/usr:
#
numpy                     1.14.1          py27_blas_openblas_200  [blas_openblas]  conda-forge
INFO: PyCall is using /home/vagrant/.julia/v0.6/Conda/deps/usr/bin/python (Python 2.7.14) at /home/vagrant/.julia/v0.6/Conda/deps/usr/bin/python, libpython = /home/vagrant/.julia/v0.6/Conda/deps/usr/lib/libpython2.7
INFO: /home/vagrant/.julia/v0.6/PyCall/deps/deps.jl has not changed
INFO: /home/vagrant/.julia/v0.6/PyCall/deps/PYTHON has not changed
INFO: Package database updated

>>> 'Pkg.test("PyAMG")' log
Julia Version 0.6.2
Commit d386e40c17 (2017-12-13 18:08 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-135-generic #184-Ubuntu SMP Wed Oct 18 11:55:51 UTC 2017 x86_64 x86_64
Memory: 2.93927001953125 GB (855.33203125 MB free)
Uptime: 24309.0 sec
Load Avg:  0.9306640625  0.95703125  0.95068359375
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz    1370182 s        958 s      75412 s     653184 s         22 s
#2  3499 MHz     355019 s       6361 s      37875 s    1984880 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.6
2 required packages:
 - JSON                          0.17.1
 - PyAMG                         0.2.1
8 additional packages:
 - BinDeps                       0.8.7
 - Compat                        0.56.0
 - Conda                         0.7.1
 - MacroTools                    0.4.0
 - Nullables                     0.0.3
 - PyCall                        1.15.0
 - SHA                           0.5.6
 - URIParser                     0.3.1
INFO: Computing test dependencies for PyAMG...
INFO: Installing IterativeSolvers v0.5.0
INFO: Installing RecipesBase v0.2.3
INFO: Testing PyAMG
INFO: Installing scipy.sparse via the Conda scipy package...
Fetching package metadata .............
Solving package specifications: .

Package plan for installation in environment /home/vagrant/.julia/v0.6/Conda/deps/usr:

The following NEW packages will be INSTALLED:

    scipy: 1.0.0-py27_blas_openblas_201 conda-forge [blas_openblas]

scipy-1.0.0-py   0% |                              | ETA:  --:--:--   0.00  B/sscipy-1.0.0-py   1% |                               | ETA:  0:00:24   1.66 MB/sscipy-1.0.0-py   2% |                               | ETA:  0:00:14   2.87 MB/sscipy-1.0.0-py   3% |                               | ETA:  0:00:10   3.90 MB/sscipy-1.0.0-py   4% |#                              | ETA:  0:00:08   4.78 MB/sscipy-1.0.0-py   5% |#                              | ETA:  0:00:07   5.55 MB/sscipy-1.0.0-py   6% |#                              | ETA:  0:00:06   6.16 MB/sscipy-1.0.0-py   7% |##                             | ETA:  0:00:05   6.76 MB/sscipy-1.0.0-py   8% |##                             | ETA:  0:00:05   7.26 MB/sscipy-1.0.0-py   9% |##                             | ETA:  0:00:04   7.67 MB/sscipy-1.0.0-py  10% |###                            | ETA:  0:00:04   8.07 MB/sscipy-1.0.0-py  11% |###                            | ETA:  0:00:04   8.43 MB/sscipy-1.0.0-py  12% |###                            | ETA:  0:00:04   8.75 MB/sscipy-1.0.0-py  13% |####                           | ETA:  0:00:03   9.00 MB/sscipy-1.0.0-py  14% |####                           | ETA:  0:00:03   9.28 MB/sscipy-1.0.0-py  15% |####                           | ETA:  0:00:03   9.53 MB/sscipy-1.0.0-py  16% |#####                          | ETA:  0:00:03   9.77 MB/sscipy-1.0.0-py  17% |#####                          | ETA:  0:00:04   8.34 MB/sscipy-1.0.0-py  18% |#####                          | ETA:  0:00:03   8.71 MB/sscipy-1.0.0-py  19% |######                         | ETA:  0:00:03   8.99 MB/sscipy-1.0.0-py  20% |######                         | ETA:  0:00:03   9.34 MB/sscipy-1.0.0-py  21% |######                         | ETA:  0:00:03   9.63 MB/sscipy-1.0.0-py  22% |#######                        | ETA:  0:00:03   9.91 MB/sscipy-1.0.0-py  23% |#######                        | ETA:  0:00:03  10.17 MB/sscipy-1.0.0-py  24% |#######                        | ETA:  0:00:02  10.42 MB/sscipy-1.0.0-py  25% |########                       | ETA:  0:00:02  10.68 MB/sscipy-1.0.0-py  26% |########                       | ETA:  0:00:02  11.03 MB/sscipy-1.0.0-py  27% |########                       | ETA:  0:00:03   9.27 MB/sscipy-1.0.0-py  28% |########                       | ETA:  0:00:03   9.55 MB/sscipy-1.0.0-py  30% |#########                      | ETA:  0:00:02   9.84 MB/sscipy-1.0.0-py  30% |#########                      | ETA:  0:00:06   4.58 MB/sscipy-1.0.0-py  31% |#########                      | ETA:  0:00:05   4.71 MB/sscipy-1.0.0-py  32% |##########                     | ETA:  0:00:05   4.85 MB/sscipy-1.0.0-py  33% |##########                     | ETA:  0:00:05   4.98 MB/sscipy-1.0.0-py  34% |##########                     | ETA:  0:00:05   5.12 MB/sscipy-1.0.0-py  35% |###########                    | ETA:  0:00:05   5.26 MB/sscipy-1.0.0-py  36% |###########                    | ETA:  0:00:04   5.40 MB/sscipy-1.0.0-py  37% |###########                    | ETA:  0:00:04   5.49 MB/sscipy-1.0.0-py  38% |############                   | ETA:  0:00:04   5.57 MB/sscipy-1.0.0-py  39% |############                   | ETA:  0:00:04   5.67 MB/sscipy-1.0.0-py  40% |############                   | ETA:  0:00:04   5.76 MB/sscipy-1.0.0-py  41% |#############                  | ETA:  0:00:04   5.85 MB/sscipy-1.0.0-py  42% |#############                  | ETA:  0:00:03   5.93 MB/sscipy-1.0.0-py  44% |#############                  | ETA:  0:00:03   6.02 MB/sscipy-1.0.0-py  45% |#############                  | ETA:  0:00:03   6.10 MB/sscipy-1.0.0-py  46% |##############                 | ETA:  0:00:03   6.18 MB/sscipy-1.0.0-py  47% |##############                 | ETA:  0:00:03   6.26 MB/sscipy-1.0.0-py  48% |##############                 | ETA:  0:00:03   6.35 MB/sscipy-1.0.0-py  49% |###############                | ETA:  0:00:03   6.42 MB/sscipy-1.0.0-py  50% |###############                | ETA:  0:00:03   6.49 MB/sscipy-1.0.0-py  51% |###############                | ETA:  0:00:03   6.56 MB/sscipy-1.0.0-py  52% |################               | ETA:  0:00:02   6.64 MB/sscipy-1.0.0-py  53% |################               | ETA:  0:00:02   6.70 MB/sscipy-1.0.0-py  54% |################               | ETA:  0:00:02   6.77 MB/sscipy-1.0.0-py  55% |#################              | ETA:  0:00:02   6.84 MB/sscipy-1.0.0-py  56% |#################              | ETA:  0:00:02   6.90 MB/sscipy-1.0.0-py  57% |#################              | ETA:  0:00:02   6.97 MB/sscipy-1.0.0-py  58% |##################             | ETA:  0:00:02   7.03 MB/sscipy-1.0.0-py  59% |##################             | ETA:  0:00:02   7.09 MB/sscipy-1.0.0-py  60% |##################             | ETA:  0:00:02   7.15 MB/sscipy-1.0.0-py  61% |###################            | ETA:  0:00:02   7.22 MB/sscipy-1.0.0-py  62% |###################            | ETA:  0:00:02   7.27 MB/sscipy-1.0.0-py  63% |###################            | ETA:  0:00:02   7.33 MB/sscipy-1.0.0-py  64% |####################           | ETA:  0:00:01   7.39 MB/sscipy-1.0.0-py  65% |####################           | ETA:  0:00:01   7.45 MB/sscipy-1.0.0-py  66% |####################           | ETA:  0:00:01   7.50 MB/sscipy-1.0.0-py  67% |#####################          | ETA:  0:00:01   7.55 MB/sscipy-1.0.0-py  68% |#####################          | ETA:  0:00:01   7.61 MB/sscipy-1.0.0-py  69% |#####################          | ETA:  0:00:01   7.67 MB/sscipy-1.0.0-py  70% |#####################          | ETA:  0:00:01   7.72 MB/sscipy-1.0.0-py  71% |######################         | ETA:  0:00:01   7.77 MB/sscipy-1.0.0-py  72% |######################         | ETA:  0:00:01   7.82 MB/sscipy-1.0.0-py  74% |######################         | ETA:  0:00:01   7.87 MB/sscipy-1.0.0-py  75% |#######################        | ETA:  0:00:01   7.93 MB/sscipy-1.0.0-py  76% |#######################        | ETA:  0:00:01   7.98 MB/sscipy-1.0.0-py  77% |#######################        | ETA:  0:00:01   8.02 MB/sscipy-1.0.0-py  78% |########################       | ETA:  0:00:01   8.07 MB/sscipy-1.0.0-py  79% |########################       | ETA:  0:00:01   8.12 MB/sscipy-1.0.0-py  80% |########################       | ETA:  0:00:00   8.17 MB/sscipy-1.0.0-py  81% |#########################      | ETA:  0:00:00   8.21 MB/sscipy-1.0.0-py  82% |#########################      | ETA:  0:00:00   8.26 MB/sscipy-1.0.0-py  83% |#########################      | ETA:  0:00:00   8.30 MB/sscipy-1.0.0-py  84% |##########################     | ETA:  0:00:00   8.35 MB/sscipy-1.0.0-py  85% |##########################     | ETA:  0:00:00   8.39 MB/sscipy-1.0.0-py  86% |##########################     | ETA:  0:00:00   8.43 MB/sscipy-1.0.0-py  87% |###########################    | ETA:  0:00:00   8.47 MB/sscipy-1.0.0-py  88% |###########################    | ETA:  0:00:00   8.51 MB/sscipy-1.0.0-py  89% |###########################    | ETA:  0:00:00   8.56 MB/sscipy-1.0.0-py  90% |############################   | ETA:  0:00:00   8.60 MB/sscipy-1.0.0-py  91% |############################   | ETA:  0:00:00   8.64 MB/sscipy-1.0.0-py  92% |############################   | ETA:  0:00:00   8.67 MB/sscipy-1.0.0-py  93% |#############################  | ETA:  0:00:00   8.71 MB/sscipy-1.0.0-py  94% |#############################  | ETA:  0:00:00   8.75 MB/sscipy-1.0.0-py  95% |#############################  | ETA:  0:00:00   8.79 MB/sscipy-1.0.0-py  96% |############################## | ETA:  0:00:00   8.82 MB/sscipy-1.0.0-py  97% |############################## | ETA:  0:00:00   8.86 MB/sscipy-1.0.0-py  98% |############################## | ETA:  0:00:00   8.90 MB/sscipy-1.0.0-py  99% |############################## | ETA:  0:00:00   8.93 MB/sscipy-1.0.0-py 100% |###############################| Time: 0:00:04   8.94 MB/s
INFO: Installing pyamg via the Conda pyamg package...
Fetching package metadata .............
Solving package specifications: .

Package plan for installation in environment /home/vagrant/.julia/v0.6/Conda/deps/usr:

The following NEW packages will be INSTALLED:

    pyamg: 3.3.2-py27_0 conda-forge

pyamg-3.3.2-py   0% |                              | ETA:  --:--:--   0.00  B/spyamg-3.3.2-py   1% |                               | ETA:  0:00:01   1.24 MB/spyamg-3.3.2-py   3% |#                              | ETA:  0:00:01   1.63 MB/spyamg-3.3.2-py   5% |#                              | ETA:  0:00:00   1.80 MB/spyamg-3.3.2-py   7% |##                             | ETA:  0:00:00   1.72 MB/spyamg-3.3.2-py   9% |##                             | ETA:  0:00:00   2.12 MB/spyamg-3.3.2-py  11% |###                            | ETA:  0:00:00   2.42 MB/spyamg-3.3.2-py  13% |####                           | ETA:  0:00:00   2.65 MB/spyamg-3.3.2-py  14% |####                           | ETA:  0:00:00   2.97 MB/spyamg-3.3.2-py  16% |#####                          | ETA:  0:00:00   3.09 MB/spyamg-3.3.2-py  18% |#####                          | ETA:  0:00:00   3.29 MB/spyamg-3.3.2-py  20% |######                         | ETA:  0:00:00   3.45 MB/spyamg-3.3.2-py  22% |######                         | ETA:  0:00:00   3.73 MB/spyamg-3.3.2-py  24% |#######                        | ETA:  0:00:00   3.91 MB/spyamg-3.3.2-py  26% |########                       | ETA:  0:00:00   4.07 MB/spyamg-3.3.2-py  28% |########                       | ETA:  0:00:00   4.12 MB/spyamg-3.3.2-py  29% |#########                      | ETA:  0:00:00   4.30 MB/spyamg-3.3.2-py  31% |#########                      | ETA:  0:00:00   4.49 MB/spyamg-3.3.2-py  33% |##########                     | ETA:  0:00:00   4.70 MB/spyamg-3.3.2-py  35% |###########                    | ETA:  0:00:00   4.88 MB/spyamg-3.3.2-py  37% |###########                    | ETA:  0:00:00   5.06 MB/spyamg-3.3.2-py  39% |############                   | ETA:  0:00:00   5.24 MB/spyamg-3.3.2-py  41% |############                   | ETA:  0:00:00   5.25 MB/spyamg-3.3.2-py  42% |#############                  | ETA:  0:00:00   5.38 MB/spyamg-3.3.2-py  44% |#############                  | ETA:  0:00:00   5.54 MB/spyamg-3.3.2-py  46% |##############                 | ETA:  0:00:00   5.68 MB/spyamg-3.3.2-py  48% |###############                | ETA:  0:00:00   5.84 MB/spyamg-3.3.2-py  50% |###############                | ETA:  0:00:00   5.97 MB/spyamg-3.3.2-py  52% |################               | ETA:  0:00:00   6.10 MB/spyamg-3.3.2-py  54% |################               | ETA:  0:00:00   6.23 MB/spyamg-3.3.2-py  56% |#################              | ETA:  0:00:00   6.37 MB/spyamg-3.3.2-py  57% |#################              | ETA:  0:00:00   6.51 MB/spyamg-3.3.2-py  59% |##################             | ETA:  0:00:00   6.59 MB/spyamg-3.3.2-py  61% |###################            | ETA:  0:00:00   6.70 MB/spyamg-3.3.2-py  63% |###################            | ETA:  0:00:00   6.80 MB/spyamg-3.3.2-py  65% |####################           | ETA:  0:00:00   6.94 MB/spyamg-3.3.2-py  67% |####################           | ETA:  0:00:00   7.03 MB/spyamg-3.3.2-py  69% |#####################          | ETA:  0:00:00   7.15 MB/spyamg-3.3.2-py  71% |######################         | ETA:  0:00:00   7.25 MB/spyamg-3.3.2-py  72% |######################         | ETA:  0:00:00   7.35 MB/spyamg-3.3.2-py  74% |#######################        | ETA:  0:00:00   7.45 MB/spyamg-3.3.2-py  76% |#######################        | ETA:  0:00:00   7.54 MB/spyamg-3.3.2-py  78% |########################       | ETA:  0:00:00   7.61 MB/spyamg-3.3.2-py  80% |########################       | ETA:  0:00:00   7.73 MB/spyamg-3.3.2-py  82% |#########################      | ETA:  0:00:00   7.82 MB/spyamg-3.3.2-py  84% |##########################     | ETA:  0:00:00   7.92 MB/spyamg-3.3.2-py  85% |##########################     | ETA:  0:00:00   8.02 MB/spyamg-3.3.2-py  87% |###########################    | ETA:  0:00:00   8.09 MB/spyamg-3.3.2-py  89% |###########################    | ETA:  0:00:00   8.14 MB/spyamg-3.3.2-py  91% |############################   | ETA:  0:00:00   8.22 MB/spyamg-3.3.2-py  93% |############################   | ETA:  0:00:00   8.33 MB/spyamg-3.3.2-py  95% |#############################  | ETA:  0:00:00   8.31 MB/spyamg-3.3.2-py  97% |############################## | ETA:  0:00:00   8.40 MB/spyamg-3.3.2-py  99% |############################## | ETA:  0:00:00   8.50 MB/spyamg-3.3.2-py 100% |###############################| Time: 0:00:00   8.55 MB/s
=================================================
Test 1: Julia `\` vs PyAMG Blackbox `solve` (2D) Laplacian
 \ :   0.168550 seconds (14.47 k allocations: 9.361 MiB)
PyAMG-Warmup:   1.883603 seconds (617.94 k allocations: 33.895 MiB, 0.79% gc time)
PyAMG:   0.355634 seconds (15.22 k allocations: 1.697 MiB)
|x_\ - x_amg|_∞ = 1.3168632850835138e-12
|A x_amg - b|_∞ = 2.8057911549694836e-9
=================================================
Test 2: Julia `\` vs PyAMG Blackbox `solve` (3D)
 \ :   0.727883 seconds (72 allocations: 93.886 MiB, 3.73% gc time)
PyAMG-Warmup:   0.959195 seconds (253 allocations: 3.224 MiB)
PyAMG:   1.339173 seconds (248 allocations: 3.223 MiB)
|x_\ - x_amg|_∞ = 1.72448166857464e-12
|A x_amg - b|_∞ = 1.8389272327112849e-9
=================================================
Test 3: RugeStubenSolver (3D)
        50 x 50 x 50 grid = 125k dofs 
Create solver:   0.438290 seconds (14.38 k allocations: 14.828 MiB)
First solve:   0.373368 seconds (34.10 k allocations: 2.687 MiB)
Second solve: (tol 1e-9)  0.345679 seconds (4.83 k allocations: 1.210 MiB)
Third solve: (tol 1e-6)  0.180589 seconds (148 allocations: 982.406 KiB)
|A x_amg - b|_∞ = 3.804971740350993e-6
=================================================
Test 4: \, ldiv, and kwargs
=================================================
Test 5: AMG as a preconditioner
        100 x 100 Dirichlet problem, TOL = 1e-4
        PyAMG vs CG vs PCG  (using IterativeSolvers)
Plain CG:
  0.029597 seconds (44 allocations: 314.875 KiB)
PyAMG-preconditionerd CG:  (see `aspreconditioner`)
  0.022618 seconds (653 allocations: 805.484 KiB)
PyAMG solver
  0.015185 seconds (181 allocations: 85.203 KiB)
|x_cg-x| = 2.525211412460893e-8 
|x_pcg-x| = 9.158169077400953e-9
|x_pyamg-x| = 9.158169179538598e-9
Test Summary: | Pass  Total
PyAMG         |    8      8
INFO: PyAMG tests passed
INFO: Removing IterativeSolvers v0.5.0
INFO: Removing RecipesBase v0.2.3

>>> End of log
