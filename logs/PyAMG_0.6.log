>>> 'Pkg.add("PyAMG")' log
INFO: Installing BinDeps v0.4.7
INFO: Installing Conda v0.5.3
INFO: Installing MacroTools v0.3.6
INFO: Installing PyAMG v0.0.9
INFO: Installing PyCall v1.12.0
INFO: Installing SHA v0.3.2
INFO: Installing URIParser v0.1.8
INFO: Building Conda
INFO: Building PyCall
INFO: Using the Python distribution in the Conda package by default.
To use a different Python version, set ENV["PYTHON"]="pythoncommand" and re-run Pkg.build("PyCall").
INFO: PyCall is using /home/vagrant/.julia/v0.6/Conda/deps/usr/bin/python (Python 2.7.13) at /home/vagrant/.julia/v0.6/Conda/deps/usr/bin/python, libpython = /home/vagrant/.julia/v0.6/Conda/deps/usr/lib/libpython2.7
INFO: /home/vagrant/.julia/v0.6/PyCall/deps/deps.jl has not changed
INFO: /home/vagrant/.julia/v0.6/PyCall/deps/PYTHON has not changed
INFO: Package database updated
INFO: METADATA is out-of-date — you may not have the latest version of PyAMG
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("PyAMG")' log
Julia Version 0.6.0-pre.beta.245
Commit d31f196 (2017-04-22 01:52 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-116-generic #163-Ubuntu SMP Fri Mar 31 14:13:22 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (843.21875 MB free)
Uptime: 43202.0 sec
Load Avg:  1.0029296875  1.021484375  0.9853515625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3498 MHz    2769008 s       1487 s     116707 s     744564 s         45 s
#2  3498 MHz     599523 s       5166 s      60815 s    3567306 s          2 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.6
2 required packages:
 - JSON                          0.9.0
 - PyAMG                         0.0.9
7 additional packages:
 - BinDeps                       0.4.7
 - Compat                        0.24.0
 - Conda                         0.5.3
 - MacroTools                    0.3.6
 - PyCall                        1.12.0
 - SHA                           0.3.2
 - URIParser                     0.1.8
INFO: Computing test dependencies for PyAMG...
INFO: Cloning cache of IterativeSolvers from https://github.com/JuliaMath/IterativeSolvers.jl.git
INFO: Installing IterativeSolvers v0.2.2
INFO: Testing PyAMG

WARNING: deprecated syntax "typealias RugeStubenSolver AMGSolver{RugeStuben}" at /home/vagrant/.julia/v0.6/PyAMG/src/PyAMG.jl:74.
Use "const RugeStubenSolver = AMGSolver{RugeStuben}" instead.

WARNING: deprecated syntax "typealias SmoothedAggregationSolver AMGSolver{SmoothedAggregation}" at /home/vagrant/.julia/v0.6/PyAMG/src/PyAMG.jl:75.
Use "const SmoothedAggregationSolver = AMGSolver{SmoothedAggregation}" instead.
=================================================
Test 1: Julia `\` vs PyAMG Blackbox `solve` (2D) Laplacian
 \ :   0.635354 seconds (267.26 k allocations: 23.073 MiB, 0.97% gc time)
PyAMG-Warmup: /home/vagrant/.julia/v0.6/Conda/deps/usr/lib/python2.7/site-packages/pyamg/strength.py:533: FutureWarning: elementwise comparison failed; returning scalar instead, but in the future will perform elementwise comparison
  if B == 'ones':
  2.563310 seconds (800.52 k allocations: 44.261 MiB, 0.68% gc time)
PyAMG:   0.254046 seconds (295 allocations: 943.609 KiB)
|x_\ - x_amg|_∞ = 1.1388889831209781e-11
|A x_amg - b|_∞ = 1.835212515288731e-8
=================================================
Test 2: Julia `\` vs PyAMG Blackbox `solve` (3D)
 \ :   0.632184 seconds (68 allocations: 93.885 MiB, 2.55% gc time)
PyAMG-Warmup:   1.492485 seconds (294 allocations: 3.226 MiB)
PyAMG:   1.434283 seconds (294 allocations: 3.226 MiB)
|x_\ - x_amg|_∞ = 8.782627403114418e-13
|A x_amg - b|_∞ = 8.30938873264131e-10
=================================================
Test 3: RugeStubenSolver (3D)
        50 x 50 x 50 grid = 125k dofs 
Create solver:   0.498304 seconds (19.66 k allocations: 15.140 MiB)
First solve:   0.328679 seconds (48.54 k allocations: 3.447 MiB)
Second solve: (tol 1e-9)  0.427795 seconds (6.22 k allocations: 1.291 MiB)
Third solve: (tol 1e-6)  0.210170 seconds (181 allocations: 983.953 KiB)
|A x_amg - b|_∞ = 2.532215134465332e-6
=================================================
Test 4: \, ldiv, and kwargs
=================================================
Test 5: AMG as a preconditioner
        100 x 100 Dirichlet problem, TOL = 1e-4
        PyAMG vs CG vs PCG  (using IterativeSolvers)

WARNING: deprecated syntax "abstract AbstractMatrixFcn{T}" at /home/vagrant/.julia/v0.6/IterativeSolvers/src/common.jl:91.
Use "abstract type AbstractMatrixFcn{T} end" instead.

WARNING: deprecated syntax "_ as an rvalue around /home/vagrant/.julia/v0.6/IterativeSolvers/src/rsvd.jl:212".
WARNING: replacing module IterativeSolvers.
Plain CG:
  0.422061 seconds (142.19 k allocations: 68.757 MiB, 3.96% gc time)
  0.041993 seconds (1.64 k allocations: 61.633 MiB, 14.06% gc time)
PyAMG-preconditionerd CG:  (see `aspreconditioner`)
  0.773102 seconds (443.01 k allocations: 26.211 MiB, 1.02% gc time)
  0.016168 seconds (567 allocations: 2.082 MiB)
PyAMG solver
  0.019247 seconds (223 allocations: 87.203 KiB)
  0.015632 seconds (222 allocations: 87.156 KiB)
|x_cg-x| = 3.5312070957405564e-6 
|x_pcg-x| = 2.7796572140519933e-6
|x_pyamg-x| = 1.0901104458602403e-7
INFO: PyAMG tests passed
INFO: Removing IterativeSolvers v0.2.2

>>> End of log
