>>> 'Pkg.add("PyAMG")' log
INFO: Installing BinDeps v0.4.7
INFO: Installing Conda v0.5.3
INFO: Installing MacroTools v0.3.6
INFO: Installing PyAMG v0.0.9
INFO: Installing PyCall v1.12.0
INFO: Installing SHA v0.3.2
INFO: Installing URIParser v0.1.8
INFO: Building Conda
INFO: Building PyCall
INFO: Using the Python distribution in the Conda package by default.
To use a different Python version, set ENV["PYTHON"]="pythoncommand" and re-run Pkg.build("PyCall").
Fetching package metadata .........
Solving package specifications: .

# All requested packages already installed.
# packages in environment at /home/vagrant/.julia/v0.6/Conda/deps/usr:
#
numpy                     1.12.1                   py27_0  
INFO: PyCall is using /home/vagrant/.julia/v0.6/Conda/deps/usr/bin/python (Python 2.7.13) at /home/vagrant/.julia/v0.6/Conda/deps/usr/bin/python, libpython = /home/vagrant/.julia/v0.6/Conda/deps/usr/lib/libpython2.7
INFO: /home/vagrant/.julia/v0.6/PyCall/deps/deps.jl has not changed
INFO: /home/vagrant/.julia/v0.6/PyCall/deps/PYTHON has not changed
INFO: Package database updated
INFO: METADATA is out-of-date — you may not have the latest version of PyAMG
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("PyAMG")' log
Julia Version 0.6.0-pre.beta.0
Commit bd84fa1 (2017-03-31 12:58 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-117-generic #164-Ubuntu SMP Fri Apr 7 11:05:26 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (709.9296875 MB free)
Uptime: 25908.0 sec
Load Avg:  1.0458984375  1.0146484375  0.97607421875
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz    1537260 s       1420 s     118465 s     608090 s        114 s
#2  3500 MHz     495041 s       5146 s      65817 s    1948762 s          3 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.6
2 required packages:
 - JSON                          0.10.0
 - PyAMG                         0.0.9
7 additional packages:
 - BinDeps                       0.4.7
 - Compat                        0.24.0
 - Conda                         0.5.3
 - MacroTools                    0.3.6
 - PyCall                        1.12.0
 - SHA                           0.3.2
 - URIParser                     0.1.8
INFO: Computing test dependencies for PyAMG...
INFO: Cloning cache of IterativeSolvers from https://github.com/JuliaMath/IterativeSolvers.jl.git
INFO: Installing IterativeSolvers v0.2.2
INFO: Testing PyAMG

WARNING: deprecated syntax "typealias RugeStubenSolver AMGSolver{RugeStuben}" at /home/vagrant/.julia/v0.6/PyAMG/src/PyAMG.jl:74.
Use "const RugeStubenSolver = AMGSolver{RugeStuben}" instead.

WARNING: deprecated syntax "typealias SmoothedAggregationSolver AMGSolver{SmoothedAggregation}" at /home/vagrant/.julia/v0.6/PyAMG/src/PyAMG.jl:75.
Use "const SmoothedAggregationSolver = AMGSolver{SmoothedAggregation}" instead.
=================================================
Test 1: Julia `\` vs PyAMG Blackbox `solve` (2D) Laplacian
 \ :   1.323104 seconds (499.49 k allocations: 31.528 MiB, 1.69% gc time)
PyAMG-Warmup: /home/vagrant/.julia/v0.6/Conda/deps/usr/lib/python2.7/site-packages/pyamg/strength.py:533: FutureWarning: elementwise comparison failed; returning scalar instead, but in the future will perform elementwise comparison
  if B == 'ones':
  3.474476 seconds (1.17 M allocations: 57.364 MiB, 0.75% gc time)
PyAMG:   0.264872 seconds (295 allocations: 943.609 KiB)
|x_\ - x_amg|_∞ = 1.2111769920331028e-12
|A x_amg - b|_∞ = 2.816028654706315e-8
=================================================
Test 2: Julia `\` vs PyAMG Blackbox `solve` (3D)
 \ :   0.673009 seconds (67 allocations: 93.885 MiB, 3.37% gc time)
PyAMG-Warmup:   1.510351 seconds (294 allocations: 3.226 MiB)
PyAMG:   1.409012 seconds (294 allocations: 3.226 MiB)
|x_\ - x_amg|_∞ = 1.8201135043582894e-12
|A x_amg - b|_∞ = 6.246878569982073e-10
=================================================
Test 3: RugeStubenSolver (3D)
        50 x 50 x 50 grid = 125k dofs 
Create solver:   0.559891 seconds (34.63 k allocations: 15.725 MiB)
First solve:   0.430828 seconds (64.82 k allocations: 4.049 MiB)
Second solve: (tol 1e-9)  0.450605 seconds (8.10 k allocations: 1.360 MiB)
Third solve: (tol 1e-6)  0.267989 seconds (187 allocations: 984.047 KiB, 2.06% gc time)
|A x_amg - b|_∞ = 2.532215134465332e-6
=================================================
Test 4: \, ldiv, and kwargs
=================================================
Test 5: AMG as a preconditioner
        100 x 100 Dirichlet problem, TOL = 1e-4
        PyAMG vs CG vs PCG  (using IterativeSolvers)

WARNING: deprecated syntax "abstract AbstractMatrixFcn{T}" at /home/vagrant/.julia/v0.6/IterativeSolvers/src/common.jl:91.
Use "abstract type AbstractMatrixFcn{T} end" instead.

WARNING: deprecated syntax "_ as an rvalue".
WARNING: replacing module IterativeSolvers.
Plain CG:
  0.563236 seconds (206.15 k allocations: 71.211 MiB, 2.92% gc time)
  0.046979 seconds (1.64 k allocations: 61.633 MiB, 12.25% gc time)
PyAMG-preconditionerd CG:  (see `aspreconditioner`)
  0.601764 seconds (473.33 k allocations: 25.038 MiB, 0.85% gc time)
  0.018252 seconds (567 allocations: 2.082 MiB)
PyAMG solver
  0.019243 seconds (223 allocations: 87.203 KiB)
  0.019059 seconds (222 allocations: 87.156 KiB)
|x_cg-x| = 3.5312070957405564e-6 
|x_pcg-x| = 2.7796572140519933e-6
|x_pyamg-x| = 1.0901104458602403e-7
INFO: PyAMG tests passed
INFO: Removing IterativeSolvers v0.2.2

>>> End of log
