>>> 'Pkg.add("PyAMG")' log
INFO: Cloning cache of PyAMG from https://github.com/cortner/PyAMG.jl.git
INFO: Installing BinDeps v0.8.6
INFO: Installing Conda v0.7.1
INFO: Installing MacroTools v0.4.0
INFO: Installing PyAMG v0.2.1
INFO: Installing PyCall v1.15.0
INFO: Installing SHA v0.5.6
INFO: Installing URIParser v0.3.0
INFO: Building Conda
INFO: Building PyCall
INFO: Using the Python distribution in the Conda package by default.
To use a different Python version, set ENV["PYTHON"]="pythoncommand" and re-run Pkg.build("PyCall").
Solving environment: ...working... done

# All requested packages already installed.

INFO: PyCall is using /home/vagrant/.julia/v0.6/Conda/deps/usr/bin/python (Python 2.7.14) at /home/vagrant/.julia/v0.6/Conda/deps/usr/bin/python, libpython = /home/vagrant/.julia/v0.6/Conda/deps/usr/lib/libpython2.7
INFO: /home/vagrant/.julia/v0.6/PyCall/deps/deps.jl has not changed
INFO: /home/vagrant/.julia/v0.6/PyCall/deps/PYTHON has not changed
INFO: Package database updated

>>> 'Pkg.test("PyAMG")' log
Julia Version 0.6.2
Commit d386e40c17 (2017-12-13 18:08 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-135-generic #184-Ubuntu SMP Wed Oct 18 11:55:51 UTC 2017 x86_64 x86_64
Memory: 2.93927001953125 GB (824.41015625 MB free)
Uptime: 24047.0 sec
Load Avg:  0.86181640625  0.93017578125  0.9443359375
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz    1366197 s       3690 s      75624 s     593815 s         25 s
#2  3500 MHz     309104 s       4082 s      38160 s    2002760 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.6
2 required packages:
 - JSON                          0.16.4
 - PyAMG                         0.2.1
8 additional packages:
 - BinDeps                       0.8.6
 - Compat                        0.54.0
 - Conda                         0.7.1
 - MacroTools                    0.4.0
 - Nullables                     0.0.3
 - PyCall                        1.15.0
 - SHA                           0.5.6
 - URIParser                     0.3.0
INFO: Computing test dependencies for PyAMG...
INFO: Installing IterativeSolvers v0.5.0
INFO: Installing RecipesBase v0.2.3
INFO: Testing PyAMG
INFO: Installing scipy.sparse via the Conda scipy package...
Solving environment: ...working... done
scipy 1.0.0:            |   0% scipy 1.0.0:            |   0% scipy 1.0.0:            |   1% scipy 1.0.0: 3          |   3% scipy 1.0.0: 6          |   6% scipy 1.0.0: 8          |   9% scipy 1.0.0: #1         |  12% scipy 1.0.0: #4         |  14% scipy 1.0.0: #6         |  17% scipy 1.0.0: #9         |  20% scipy 1.0.0: ##2        |  22% scipy 1.0.0: ##4        |  25% scipy 1.0.0: ##7        |  27% scipy 1.0.0: ###        |  30% scipy 1.0.0: ###2       |  33% scipy 1.0.0: ###5       |  35% scipy 1.0.0: ###7       |  38% scipy 1.0.0: ####       |  40% scipy 1.0.0: ####3      |  43% scipy 1.0.0: ####5      |  46% scipy 1.0.0: ####8      |  48% scipy 1.0.0: #####      |  51% scipy 1.0.0: #####3     |  54% scipy 1.0.0: #####6     |  56% scipy 1.0.0: #####8     |  59% scipy 1.0.0: ######1    |  62% scipy 1.0.0: ######4    |  64% scipy 1.0.0: ######6    |  67% scipy 1.0.0: ######9    |  70% scipy 1.0.0: #######2   |  72% scipy 1.0.0: #######4   |  75% scipy 1.0.0: #######7   |  78% scipy 1.0.0: ########4  |  85% scipy 1.0.0: ########8  |  88% scipy 1.0.0: #########1 |  92% scipy 1.0.0: #########4 |  95% scipy 1.0.0: #########7 |  97% scipy 1.0.0: #########9 |  99% scipy 1.0.0: ########## | 100% 

## Package Plan ##

  environment location: /home/vagrant/.julia/v0.6/Conda/deps/usr

  added / updated specs: 
    - scipy


The following packages will be downloaded:

    package                    |            build
    ---------------------------|-----------------
    scipy-1.0.0                |py27_blas_openblas_201        39.3 MB  conda-forge

The following NEW packages will be INSTALLED:

    scipy: 1.0.0-py27_blas_openblas_201 conda-forge [blas_openblas]


Downloading and Extracting Packages
Preparing transaction: ...working... done
Verifying transaction: ...working... done
Executing transaction: ...working... done
INFO: Installing pyamg via the Conda pyamg package...
Solving environment: ...working... done
pyamg 3.3.2:            |   0% pyamg 3.3.2:            |   1% pyamg 3.3.2: #3         |  13% pyamg 3.3.2: #####8     |  58% pyamg 3.3.2: #######5   |  75% pyamg 3.3.2: #########5 |  95% pyamg 3.3.2: ########## | 100% 

## Package Plan ##

  environment location: /home/vagrant/.julia/v0.6/Conda/deps/usr

  added / updated specs: 
    - pyamg


The following packages will be downloaded:

    package                    |            build
    ---------------------------|-----------------
    pyamg-3.3.2                |           py27_0         1.7 MB  conda-forge

The following NEW packages will be INSTALLED:

    pyamg: 3.3.2-py27_0 conda-forge


Downloading and Extracting Packages
Preparing transaction: ...working... done
Verifying transaction: ...working... done
Executing transaction: ...working... done
=================================================
Test 1: Julia `\` vs PyAMG Blackbox `solve` (2D) Laplacian
 \ :   0.275560 seconds (14.47 k allocations: 9.361 MiB, 3.94% gc time)
PyAMG-Warmup:   2.835614 seconds (617.93 k allocations: 33.777 MiB, 0.33% gc time)
PyAMG:   0.284229 seconds (15.22 k allocations: 1.697 MiB)
|x_\ - x_amg|_∞ = 1.3698805978457074e-11
|A x_amg - b|_∞ = 3.674429649436206e-8
=================================================
Test 2: Julia `\` vs PyAMG Blackbox `solve` (3D)
 \ :   0.657457 seconds (64 allocations: 93.885 MiB, 3.21% gc time)
PyAMG-Warmup:   1.202092 seconds (253 allocations: 3.224 MiB)
PyAMG:   0.992008 seconds (248 allocations: 3.223 MiB)
|x_\ - x_amg|_∞ = 1.097018309526021e-12
|A x_amg - b|_∞ = 1.4058230135560734e-9
=================================================
Test 3: RugeStubenSolver (3D)
        50 x 50 x 50 grid = 125k dofs 
Create solver:   0.311130 seconds (14.38 k allocations: 14.828 MiB)
First solve:   0.285867 seconds (34.10 k allocations: 2.687 MiB)
Second solve: (tol 1e-9)  0.295524 seconds (4.83 k allocations: 1.210 MiB)
Third solve: (tol 1e-6)  0.168049 seconds (148 allocations: 982.406 KiB)
|A x_amg - b|_∞ = 3.804971740350993e-6
=================================================
Test 4: \, ldiv, and kwargs
=================================================
Test 5: AMG as a preconditioner
        100 x 100 Dirichlet problem, TOL = 1e-4
        PyAMG vs CG vs PCG  (using IterativeSolvers)
Plain CG:
  0.018386 seconds (44 allocations: 314.875 KiB)
PyAMG-preconditionerd CG:  (see `aspreconditioner`)
  0.015612 seconds (653 allocations: 805.484 KiB)
PyAMG solver
  0.015855 seconds (181 allocations: 85.203 KiB)
|x_cg-x| = 2.525211412460893e-8 
|x_pcg-x| = 9.158169077400953e-9
|x_pyamg-x| = 9.158169179538598e-9
Test Summary: | Pass  Total
PyAMG         |    8      8
INFO: PyAMG tests passed
INFO: Removing IterativeSolvers v0.5.0
INFO: Removing RecipesBase v0.2.3

>>> End of log
