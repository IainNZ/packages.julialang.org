>>> 'Pkg.add("PyAMG")' log
INFO: Cloning cache of PyAMG from https://github.com/cortner/PyAMG.jl.git
INFO: Installing BinDeps v0.8.7
INFO: Installing Conda v0.7.1
INFO: Installing MacroTools v0.4.0
INFO: Installing PyAMG v0.2.1
INFO: Installing PyCall v1.15.0
INFO: Installing SHA v0.5.7
INFO: Installing URIParser v0.3.1
INFO: Building Conda
INFO: Building PyCall
INFO: Using the Python distribution in the Conda package by default.
To use a different Python version, set ENV["PYTHON"]="pythoncommand" and re-run Pkg.build("PyCall").
Solving environment: ...working... done

# All requested packages already installed.

INFO: PyCall is using /home/vagrant/.julia/v0.6/Conda/deps/usr/bin/python (Python 2.7.14) at /home/vagrant/.julia/v0.6/Conda/deps/usr/bin/python, libpython = /home/vagrant/.julia/v0.6/Conda/deps/usr/lib/libpython2.7
INFO: /home/vagrant/.julia/v0.6/PyCall/deps/deps.jl has not changed
INFO: /home/vagrant/.julia/v0.6/PyCall/deps/PYTHON has not changed
INFO: Package database updated
INFO: METADATA is out-of-date — you may not have the latest version of PyAMG
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("PyAMG")' log
Julia Version 0.6.2
Commit d386e40c17 (2017-12-13 18:08 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-143-generic #192-Ubuntu SMP Tue Feb 27 10:45:36 UTC 2018 x86_64 x86_64
Memory: 2.939197540283203 GB (875.33203125 MB free)
Uptime: 26640.0 sec
Load Avg:  0.9580078125  0.97265625  0.96533203125
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz    1488580 s       7107 s     104396 s     699132 s         24 s
#2  3500 MHz     323862 s       1148 s      46426 s    2239139 s          1 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.6
2 required packages:
 - JSON                          0.17.2
 - PyAMG                         0.2.1
8 additional packages:
 - BinDeps                       0.8.7
 - Compat                        0.63.0
 - Conda                         0.7.1
 - MacroTools                    0.4.0
 - Nullables                     0.0.5
 - PyCall                        1.15.0
 - SHA                           0.5.7
 - URIParser                     0.3.1
INFO: Computing test dependencies for PyAMG...
INFO: Installing IterativeSolvers v0.5.0
INFO: Installing RecipesBase v0.2.3
INFO: Testing PyAMG
INFO: Installing scipy.sparse via the Conda scipy package...
Solving environment: ...working... done
scipy 1.0.1           |   0% scipy 1.0.1           |   0% scipy 1.0.1           |   1% scipy 1.0.13          |   3% scipy 1.0.15          |   6% scipy 1.0.18          |   9% scipy 1.0.1#1         |  11% scipy 1.0.1#4         |  14% scipy 1.0.1#6         |  17% scipy 1.0.1#9         |  20% scipy 1.0.1##2        |  22% scipy 1.0.1##4        |  25% scipy 1.0.1##7        |  27% scipy 1.0.1###        |  30% scipy 1.0.1###2       |  33% scipy 1.0.1###5       |  36% scipy 1.0.1###8       |  38% scipy 1.0.1####       |  41% scipy 1.0.1####3      |  44% scipy 1.0.1####6      |  46% scipy 1.0.1####9      |  49% scipy 1.0.1#####1     |  52% scipy 1.0.1#####4     |  54% scipy 1.0.1#####7     |  57% scipy 1.0.1#####9     |  60% scipy 1.0.1######2    |  63% scipy 1.0.1######5    |  65% scipy 1.0.1######7    |  68% scipy 1.0.1#######1   |  71% scipy 1.0.1#######3   |  74% scipy 1.0.1#######6   |  77% scipy 1.0.1########2  |  82% scipy 1.0.1########5  |  85% scipy 1.0.1########8  |  88% scipy 1.0.1#########1 |  91% scipy 1.0.1#########3 |  94% scipy 1.0.1#########5 |  96% scipy 1.0.1#########7 |  97% scipy 1.0.1#########8 |  98% scipy 1.0.1#########9 |  99% scipy 1.0.1########## | 100% 

## Package Plan ##

  environment location: /home/vagrant/.julia/v0.6/Conda/deps/usr

  added / updated specs: 
    - scipy


The following packages will be downloaded:

    package                    |            build
    ---------------------------|-----------------
    scipy-1.0.1                |py27_blas_openblas_200        39.0 MB  conda-forge

The following NEW packages will be INSTALLED:

    scipy: 1.0.1-py27_blas_openblas_200 conda-forge [blas_openblas]


Downloading and Extracting Packages
Preparing transaction: ...working... done
Verifying transaction: ...working... done
Executing transaction: ...working... done
INFO: Installing pyamg via the Conda pyamg package...
Solving environment: ...working... done
pyamg 3.3.2           |   0% pyamg 3.3.2           |   1% pyamg 3.3.2#5         |  15% pyamg 3.3.2######2    |  62% pyamg 3.3.2#######9   |  79% pyamg 3.3.2#########3 |  94% pyamg 3.3.2########## | 100% 

## Package Plan ##

  environment location: /home/vagrant/.julia/v0.6/Conda/deps/usr

  added / updated specs: 
    - pyamg


The following packages will be downloaded:

    package                    |            build
    ---------------------------|-----------------
    pyamg-3.3.2                |           py27_0         1.7 MB  conda-forge

The following NEW packages will be INSTALLED:

    pyamg: 3.3.2-py27_0 conda-forge


Downloading and Extracting Packages
Preparing transaction: ...working... done
Verifying transaction: ...working... done
Executing transaction: ...working... done
=================================================
Test 1: Julia `\` vs PyAMG Blackbox `solve` (2D) Laplacian
 \ :   0.295389 seconds (14.47 k allocations: 9.361 MiB, 4.49% gc time)
PyAMG-Warmup:   3.046066 seconds (617.93 k allocations: 33.812 MiB, 0.38% gc time)
PyAMG:   0.452629 seconds (15.21 k allocations: 1.696 MiB)
|x_\ - x_amg|_∞ = 1.30039382040259e-11
|A x_amg - b|_∞ = 3.4160620998591185e-9
=================================================
Test 2: Julia `\` vs PyAMG Blackbox `solve` (3D)
 \ :   1.256196 seconds (64 allocations: 93.885 MiB, 2.13% gc time)
PyAMG-Warmup:   1.569001 seconds (253 allocations: 3.224 MiB)
PyAMG:   1.471833 seconds (248 allocations: 3.223 MiB)
|x_\ - x_amg|_∞ = 1.3969866929919306e-12
|A x_amg - b|_∞ = 1.3384600094923371e-9
=================================================
Test 3: RugeStubenSolver (3D)
        50 x 50 x 50 grid = 125k dofs 
Create solver:   0.545771 seconds (14.38 k allocations: 14.828 MiB)
First solve:   0.481151 seconds (34.10 k allocations: 2.687 MiB)
Second solve: (tol 1e-9)  0.455796 seconds (4.83 k allocations: 1.210 MiB)
Third solve: (tol 1e-6)  0.206985 seconds (148 allocations: 982.406 KiB)
|A x_amg - b|_∞ = 3.804971740350993e-6
=================================================
Test 4: \, ldiv, and kwargs
=================================================
Test 5: AMG as a preconditioner
        100 x 100 Dirichlet problem, TOL = 1e-4
        PyAMG vs CG vs PCG  (using IterativeSolvers)
Plain CG:
  0.028554 seconds (44 allocations: 314.875 KiB)
PyAMG-preconditionerd CG:  (see `aspreconditioner`)
  0.019820 seconds (653 allocations: 805.484 KiB)
PyAMG solver
  0.018707 seconds (181 allocations: 85.203 KiB)
|x_cg-x| = 2.525211412460893e-8 
|x_pcg-x| = 9.158169077400953e-9
|x_pyamg-x| = 9.158169179538598e-9
Test Summary: | Pass  Total
PyAMG         |    8      8
INFO: PyAMG tests passed
INFO: Removing IterativeSolvers v0.5.0
INFO: Removing RecipesBase v0.2.3

>>> End of log
