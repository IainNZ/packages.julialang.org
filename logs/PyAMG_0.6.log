>>> 'Pkg.add("PyAMG")' log
INFO: Installing BinDeps v0.6.0
INFO: Installing Conda v0.5.3
INFO: Installing MacroTools v0.3.7
INFO: Installing PyAMG v0.1.1
INFO: Installing PyCall v1.14.0
INFO: Installing SHA v0.3.3
INFO: Installing URIParser v0.1.8
INFO: Building Conda
INFO: Building PyCall
INFO: Using the Python distribution in the Conda package by default.
To use a different Python version, set ENV["PYTHON"]="pythoncommand" and re-run Pkg.build("PyCall").
INFO: PyCall is using /home/vagrant/.julia/v0.6/Conda/deps/usr/bin/python (Python 2.7.13) at /home/vagrant/.julia/v0.6/Conda/deps/usr/bin/python, libpython = /home/vagrant/.julia/v0.6/Conda/deps/usr/lib/libpython2.7
INFO: /home/vagrant/.julia/v0.6/PyCall/deps/deps.jl has not changed
INFO: /home/vagrant/.julia/v0.6/PyCall/deps/PYTHON has not changed
INFO: Package database updated
INFO: METADATA is out-of-date — you may not have the latest version of PyAMG
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("PyAMG")' log
Julia Version 0.6.0
Commit 9036443 (2017-06-19 13:05 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-121-generic #170-Ubuntu SMP Wed Jun 14 09:04:33 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1147.19140625 MB free)
Uptime: 45885.0 sec
Load Avg:  1.01416015625  0.99365234375  0.9599609375
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz    2974508 s        367 s     135435 s     748075 s         68 s
#2  3500 MHz     641469 s       6305 s      68724 s    3775895 s          1 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.6
2 required packages:
 - JSON                          0.13.0
 - PyAMG                         0.1.1
7 additional packages:
 - BinDeps                       0.6.0
 - Compat                        0.26.0
 - Conda                         0.5.3
 - MacroTools                    0.3.7
 - PyCall                        1.14.0
 - SHA                           0.3.3
 - URIParser                     0.1.8
INFO: Computing test dependencies for PyAMG...
INFO: Cloning cache of IterativeSolvers from https://github.com/JuliaMath/IterativeSolvers.jl.git
INFO: Cloning cache of SugarBLAS from https://github.com/lopezm94/SugarBLAS.jl.git
INFO: Installing Combinatorics v0.4.1
INFO: Installing DataStructures v0.6.0
INFO: Installing IterTools v0.1.0
INFO: Installing IterativeSolvers v0.3.1
INFO: Installing LinearMaps v1.0.0
INFO: Installing Polynomials v0.1.5
INFO: Installing RecipesBase v0.2.0
INFO: Installing SpecialFunctions v0.1.1
INFO: Installing StatsBase v0.17.0
INFO: Installing SugarBLAS v0.0.4
INFO: Installing UnicodePlots v0.2.4
INFO: Testing PyAMG

WARNING: deprecated syntax "typealias RugeStubenSolver AMGSolver{RugeStuben}" at /home/vagrant/.julia/v0.6/PyAMG/src/PyAMG.jl:74.
Use "const RugeStubenSolver = AMGSolver{RugeStuben}" instead.

WARNING: deprecated syntax "typealias SmoothedAggregationSolver AMGSolver{SmoothedAggregation}" at /home/vagrant/.julia/v0.6/PyAMG/src/PyAMG.jl:75.
Use "const SmoothedAggregationSolver = AMGSolver{SmoothedAggregation}" instead.
=================================================
Test 1: Julia `\` vs PyAMG Blackbox `solve` (2D) Laplacian
 \ :   1.011995 seconds (267.66 k allocations: 23.013 MiB, 8.92% gc time)
PyAMG-Warmup: /home/vagrant/.julia/v0.6/Conda/deps/usr/lib/python2.7/site-packages/pyamg/strength.py:533: FutureWarning: elementwise comparison failed; returning scalar instead, but in the future will perform elementwise comparison
  if B == 'ones':
  2.635233 seconds (736.34 k allocations: 40.878 MiB, 0.84% gc time)
PyAMG:   0.243806 seconds (278 allocations: 942.844 KiB)
|x_\ - x_amg|_∞ = 1.2920518821513127e-11
|A x_amg - b|_∞ = 3.064751297188195e-8
=================================================
Test 2: Julia `\` vs PyAMG Blackbox `solve` (3D)
 \ :   0.696337 seconds (68 allocations: 93.885 MiB, 2.29% gc time)
PyAMG-Warmup:   1.503273 seconds (277 allocations: 3.225 MiB)
PyAMG:   1.474663 seconds (277 allocations: 3.225 MiB)
|x_\ - x_amg|_∞ = 1.1123116316902326e-12
|A x_amg - b|_∞ = 9.864926653335715e-10
=================================================
Test 3: RugeStubenSolver (3D)
        50 x 50 x 50 grid = 125k dofs 
Create solver:   0.446308 seconds (18.07 k allocations: 15.061 MiB)
First solve:   0.343514 seconds (44.80 k allocations: 3.268 MiB)
Second solve: (tol 1e-9)  0.377961 seconds (6.20 k allocations: 1.291 MiB)
Third solve: (tol 1e-6)  0.201932 seconds (169 allocations: 983.484 KiB)
|A x_amg - b|_∞ = 2.532215049200204e-6
=================================================
Test 4: \, ldiv, and kwargs
=================================================
Test 5: AMG as a preconditioner
        100 x 100 Dirichlet problem, TOL = 1e-4
        PyAMG vs CG vs PCG  (using IterativeSolvers)
Plain CG:
  1.556197 seconds (1.14 M allocations: 84.263 MiB, 3.10% gc time)
  0.033915 seconds (848 allocations: 20.865 MiB, 20.22% gc time)
PyAMG-preconditionerd CG:  (see `aspreconditioner`)
  0.171675 seconds (50.56 k allocations: 3.658 MiB, 2.92% gc time)
  0.014199 seconds (559 allocations: 1.013 MiB)
PyAMG solver
  0.019365 seconds (211 allocations: 86.766 KiB)
  0.018103 seconds (210 allocations: 86.719 KiB)
|x_cg-x| = 3.5312070957405564e-6 
|x_pcg-x| = 2.7796572129198973e-6
|x_pyamg-x| = 1.0901104402769516e-7
INFO: PyAMG tests passed
INFO: Removing Combinatorics v0.4.1
INFO: Removing DataStructures v0.6.0
INFO: Removing IterTools v0.1.0
INFO: Removing IterativeSolvers v0.3.1
INFO: Removing LinearMaps v1.0.0
INFO: Removing Polynomials v0.1.5
INFO: Removing RecipesBase v0.2.0
INFO: Removing SpecialFunctions v0.1.1
INFO: Removing StatsBase v0.17.0
INFO: Removing SugarBLAS v0.0.4
INFO: Removing UnicodePlots v0.2.4

>>> End of log
