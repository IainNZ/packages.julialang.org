>>> 'Pkg.add("LineSearches")' log
INFO: Installing LineSearches v0.1.5
INFO: Package database updated

>>> 'Pkg.test("LineSearches")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-126-generic #175-Ubuntu SMP Thu Jul 20 17:33:56 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (723.4921875 MB free)
Uptime: 4776.0 sec
Load Avg:  1.04150390625  0.99853515625  1.04541015625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz     199036 s         67 s      18571 s     219980 s         11 s
#2  3500 MHz     146808 s        105 s      16716 s     297007 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.9.1
 - LineSearches                  0.1.5
1 additional packages:
 - Compat                        0.26.0
INFO: Computing test dependencies for LineSearches...
INFO: Installing Calculus v0.2.2
INFO: Installing DiffBase v0.0.5
INFO: Installing ForwardDiff v0.3.5
INFO: Installing NaNMath v0.2.6
INFO: Installing Optim v0.7.8
INFO: Installing PositiveFactorizations v0.0.4
INFO: Testing LineSearches
Running tests:

 * alphacalc.jl
Testing LineSearches.basic!
Testing LineSearches.hagerzhang!
Testing LineSearches.strongwolfe!
Testing LineSearches.morethuente!
Testing LineSearches.backtracking!
Testing LineSearches.bt2!
Testing LineSearches.bt3!

 * optim.jl
WARNING: New definition 
    write(Base.IO, ForwardDiff.Partials) at /home/vagrant/.julia/v0.4/ForwardDiff/src/partials.jl:57
is ambiguous with: 
    write(Base.Base64.Base64EncodePipe, AbstractArray{UInt8, 1}) at base64.jl:89.
To fix, define 
    write(Base.Base64.Base64EncodePipe, ForwardDiff.Partials{N<:Any, UInt8})
before the new definition.
WARNING: New definition 
    write(Base.IO, ForwardDiff.Partials) at /home/vagrant/.julia/v0.4/ForwardDiff/src/partials.jl:57
is ambiguous with: 
    write(Base.Base64.Base64EncodePipe, AbstractArray{UInt8, 1}) at base64.jl:89.
To fix, define 
    write(Base.Base64.Base64EncodePipe, ForwardDiff.Partials{N<:Any, UInt8})
before the new definition.
WARNING: New definition 
    write(Base.IO, ForwardDiff.Partials) at /home/vagrant/.julia/v0.4/ForwardDiff/src/partials.jl:57
is ambiguous with: 
    write(Base.Base64.Base64EncodePipe, AbstractArray{UInt8, 1}) at base64.jl:89.
To fix, define 
    write(Base.Base64.Base64EncodePipe, ForwardDiff.Partials{N<:Any, UInt8})
before the new definition.

Testing LineSearches.hagerzhang!
Exponential:	iterations = 6	f_calls = 26	g_calls = 26
Rosenbrock:	iterations = 14	f_calls = 58	g_calls = 58
Parabola:	iterations = 1	f_calls = 5	g_calls = 5
Hosaki:	iterations = 4	f_calls = 15	g_calls = 15
Large Polynomial:	iterations = 1	f_calls = 5	g_calls = 5
Polynomial:	iterations = 2	f_calls = 9	g_calls = 9
Powell:	iterations = 10	f_calls = 41	g_calls = 41
Himmelblau:	iterations = 5	f_calls = 19	g_calls = 19

Testing LineSearches.strongwolfe!
Exponential:	iterations = 15	f_calls = 31	g_calls = 31
Rosenbrock:	iterations = 14	f_calls = 38	g_calls = 36
Parabola:	iterations = 1	f_calls = 3	g_calls = 3
Hosaki:	iterations = 4	f_calls = 12	g_calls = 12
Large Polynomial:	iterations = 1	f_calls = 3	g_calls = 3
Polynomial:	iterations = 28	f_calls = 57	g_calls = 57
Powell:	iterations = 20	f_calls = 41	g_calls = 41
Himmelblau:	iterations = 5	f_calls = 20	g_calls = 18

Testing LineSearches.morethuente!
Exponential:	iterations = 15	f_calls = 31	g_calls = 31
Rosenbrock:	iterations = 14	f_calls = 31	g_calls = 31
Parabola:	iterations = 1	f_calls = 3	g_calls = 3
Hosaki:	iterations = 5	f_calls = 12	g_calls = 12
Large Polynomial:	iterations = 1	f_calls = 3	g_calls = 3
Polynomial:	iterations = 28	f_calls = 57	g_calls = 57
Powell:	iterations = 20	f_calls = 41	g_calls = 41
Himmelblau:	iterations = 6	f_calls = 14	g_calls = 14

Testing LineSearches.backtracking!
Exponential:	iterations = 15	f_calls = 31	g_calls = 16
Rosenbrock:	iterations = 14	f_calls = 33	g_calls = 15
Parabola:	iterations = 1	f_calls = 3	g_calls = 2
Hosaki:	iterations = 5	f_calls = 11	g_calls = 6
Large Polynomial:	iterations = 1	f_calls = 3	g_calls = 2
Polynomial:	iterations = 28	f_calls = 57	g_calls = 29
Powell:	iterations = 20	f_calls = 41	g_calls = 21
Himmelblau:	iterations = 6	f_calls = 14	g_calls = 7

Testing LineSearches.bt2!
Exponential:	iterations = 15	f_calls = 31	g_calls = 16
Rosenbrock:	iterations = 14	f_calls = 33	g_calls = 15
Parabola:	iterations = 1	f_calls = 3	g_calls = 2
Hosaki:	iterations = 5	f_calls = 11	g_calls = 6
Large Polynomial:	iterations = 1	f_calls = 3	g_calls = 2
Polynomial:	iterations = 28	f_calls = 57	g_calls = 29
Powell:	iterations = 20	f_calls = 41	g_calls = 21
Himmelblau:	iterations = 6	f_calls = 14	g_calls = 7

Testing LineSearches.bt3!
Exponential:	iterations = 15	f_calls = 31	g_calls = 16
Rosenbrock:	iterations = 14	f_calls = 33	g_calls = 15
Parabola:	iterations = 1	f_calls = 3	g_calls = 2
Hosaki:	iterations = 5	f_calls = 11	g_calls = 6
Large Polynomial:	iterations = 1	f_calls = 3	g_calls = 2
Polynomial:	iterations = 28	f_calls = 57	g_calls = 29
Powell:	iterations = 20	f_calls = 41	g_calls = 21
Himmelblau:	iterations = 6	f_calls = 14	g_calls = 7

 * backtracking.jl
INFO: LineSearches tests passed
INFO: Removing Calculus v0.2.2
INFO: Removing DiffBase v0.0.5
INFO: Removing ForwardDiff v0.3.5
INFO: Removing NaNMath v0.2.6
INFO: Removing Optim v0.7.8
INFO: Removing PositiveFactorizations v0.0.4

>>> End of log
