>>> 'Pkg.add("ForwardDiff")' log
INFO: Installing Calculus v0.1.14
INFO: Installing ForwardDiff v0.1.8
INFO: Installing NaNMath v0.2.1
INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of ForwardDiff
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("ForwardDiff")' log
Julia Version 0.4.5
Commit 2ac304d (2016-03-18 00:58 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
INFO: Testing ForwardDiff
Testing GradientNumbers and ForwardDiff.gradient...Done (took 9.83800555 seconds).
Testing HessianNumbers and ForwardDiff.hessian...Done (took 17.026485584 seconds).
Testing TensorNumbers and ForwardDiff.tensor...Done (took 8.069401828 seconds).
Testing ForwardDiff.derivative...Done (took 7.883825466 seconds).
Testing ForwardDiff.jacobian...Done (took 6.611643453 seconds).
Testing deprecation wrapper (deprecation warnings are expected)...
WARNING: forwarddiff_gradient!(f::Function,T::DataType; fadtype::Symbol=:dual,args...) is deprecated, use depr_inplace_fad(ForwardDiff.gradient,f) instead.
 in depwarn at deprecated.jl:73
 in forwarddiff_gradient! at deprecated.jl:50
 in include at ./boot.jl:261
 in include_from_node1 at ./loading.jl:320
 in include at ./boot.jl:261
 in include_from_node1 at ./loading.jl:320
 in process_options at ./client.jl:280
 in _start at ./client.jl:378
while loading /home/vagrant/.julia/v0.4/ForwardDiff/test/test_deprecated.jl, in expression starting on line 18
WARNING: Addendum to the deprecation warning above:
The depr_inplace_fad function is actually only meant to be used to patch over the old API for mutating functions. Instead of:
	deprecated_inplace_fad(ForwardDiff.gradient, (anonymous function))
You should use the following:
	ForwardDiff.gradient((anonymous function), mutates=true)
Be aware that mutating functions created with the new API take in the output array as the 1st argument rather than the 2nd.
WARNING: forwarddiff_gradient(f::Function,T::DataType; fadtype::Symbol=:dual,args...) is deprecated, use ForwardDiff.gradient(f,mutates=false) instead.
 in depwarn at deprecated.jl:73
 in forwarddiff_gradient at deprecated.jl:50
 in include at ./boot.jl:261
 in include_from_node1 at ./loading.jl:320
 in include at ./boot.jl:261
 in include_from_node1 at ./loading.jl:320
 in process_options at ./client.jl:280
 in _start at ./client.jl:378
while loading /home/vagrant/.julia/v0.4/ForwardDiff/test/test_deprecated.jl, in expression starting on line 22
WARNING: forwarddiff_jacobian!(f::Function,T::DataType; fadtype::Symbol=:dual,args...) is deprecated, use depr_inplace_fad(ForwardDiff.jacobian,f) instead.
 in depwarn at deprecated.jl:73
 in forwarddiff_jacobian! at deprecated.jl:50
 in include at ./boot.jl:261
 in include_from_node1 at ./loading.jl:320
 in include at ./boot.jl:261
 in include_from_node1 at ./loading.jl:320
 in process_options at ./client.jl:280
 in _start at ./client.jl:378
while loading /home/vagrant/.julia/v0.4/ForwardDiff/test/test_deprecated.jl, in expression starting on line 39
WARNING: both Calculus and ForwardDiff export "jacobian"; uses of it in module Main must be qualified
WARNING: Addendum to the deprecation warning above:
The depr_inplace_fad function is actually only meant to be used to patch over the old API for mutating functions. Instead of:
	deprecated_inplace_fad(ForwardDiff.jacobian, (anonymous function))
You should use the following:
	ForwardDiff.jacobian((anonymous function), mutates=true)
Be aware that mutating functions created with the new API take in the output array as the 1st argument rather than the 2nd.
WARNING: forwarddiff_jacobian(f::Function,T::DataType; fadtype::Symbol=:dual,args...) is deprecated, use ForwardDiff.jacobian(f,mutates=false) instead.
 in depwarn at deprecated.jl:73
 in forwarddiff_jacobian at deprecated.jl:50
 in include at ./boot.jl:261
 in include_from_node1 at ./loading.jl:320
 in include at ./boot.jl:261
 in include_from_node1 at ./loading.jl:320
 in process_options at ./client.jl:280
 in _start at ./client.jl:378
while loading /home/vagrant/.julia/v0.4/ForwardDiff/test/test_deprecated.jl, in expression starting on line 43
WARNING: forwarddiff_hessian!(f::Function,T::DataType; fadtype::Symbol=:dual,args...) is deprecated, use depr_inplace_fad(ForwardDiff.hessian,f) instead.
 in depwarn at deprecated.jl:73
 in forwarddiff_hessian! at deprecated.jl:50
 in include at ./boot.jl:261
 in include_from_node1 at ./loading.jl:320
 in include at ./boot.jl:261
 in include_from_node1 at ./loading.jl:320
 in process_options at ./client.jl:280
 in _start at ./client.jl:378
while loading /home/vagrant/.julia/v0.4/ForwardDiff/test/test_deprecated.jl, in expression starting on line 60
WARNING: both Calculus and ForwardDiff export "hessian"; uses of it in module Main must be qualified
WARNING: Addendum to the deprecation warning above:
The depr_inplace_fad function is actually only meant to be used to patch over the old API for mutating functions. Instead of:
	deprecated_inplace_fad(ForwardDiff.hessian, (anonymous function))
You should use the following:
	ForwardDiff.hessian((anonymous function), mutates=true)
Be aware that mutating functions created with the new API take in the output array as the 1st argument rather than the 2nd.
WARNING: forwarddiff_hessian(f::Function,T::DataType; fadtype::Symbol=:dual,args...) is deprecated, use ForwardDiff.hessian(f,mutates=false) instead.
 in depwarn at deprecated.jl:73
 in forwarddiff_hessian at deprecated.jl:50
 in include at ./boot.jl:261
 in include_from_node1 at ./loading.jl:320
 in include at ./boot.jl:261
 in include_from_node1 at ./loading.jl:320
 in process_options at ./client.jl:280
 in _start at ./client.jl:378
while loading /home/vagrant/.julia/v0.4/ForwardDiff/test/test_deprecated.jl, in expression starting on line 64
WARNING: forwarddiff_tensor!(f::Function,T::DataType; fadtype::Symbol=:dual,args...) is deprecated, use depr_inplace_fad(ForwardDiff.tensor,f) instead.
 in depwarn at deprecated.jl:73
 in forwarddiff_tensor! at deprecated.jl:50
 in include at ./boot.jl:261
 in include_from_node1 at ./loading.jl:320
 in include at ./boot.jl:261
 in include_from_node1 at ./loading.jl:320
 in process_options at ./client.jl:280
 in _start at ./client.jl:378
while loading /home/vagrant/.julia/v0.4/ForwardDiff/test/test_deprecated.jl, in expression starting on line 75
WARNING: Addendum to the deprecation warning above:
The depr_inplace_fad function is actually only meant to be used to patch over the old API for mutating functions. Instead of:
	deprecated_inplace_fad(ForwardDiff.tensor, (anonymous function))
You should use the following:
	ForwardDiff.tensor((anonymous function), mutates=true)
Be aware that mutating functions created with the new API take in the output array as the 1st argument rather than the 2nd.
WARNING: forwarddiff_tensor(f::Function,T::DataType; fadtype::Symbol=:dual,args...) is deprecated, use ForwardDiff.tensor(f,mutates=false) instead.
 in depwarn at deprecated.jl:73
 in forwarddiff_tensor at deprecated.jl:50
 in include at ./boot.jl:261
 in include_from_node1 at ./loading.jl:320
 in include at ./boot.jl:261
 in include_from_node1 at ./loading.jl:320
 in process_options at ./client.jl:280
 in _start at ./client.jl:378
while loading /home/vagrant/.julia/v0.4/ForwardDiff/test/test_deprecated.jl, in expression starting on line 79
Done (took 0.715914153 seconds).
Testing behavioral examples...
WARNING: imported binding for gradnum overwritten in module Main
WARNING: imported binding for hessnum overwritten in module Main
Done (took 3.991612771 seconds).
INFO: ForwardDiff tests passed

>>> End of log
