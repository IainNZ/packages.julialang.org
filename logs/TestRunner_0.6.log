>>> 'Pkg.add("TestRunner")' log
INFO: Cloning cache of TestRunner from https://github.com/gdziadkiewicz/TestRunner.jl.git
INFO: Installing FactCheck v0.4.3
INFO: Installing TestRunner v0.0.3
INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of TestRunner
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("TestRunner")' log
Julia Version 0.6.0-rc1.0
Commit 6bdb395 (2017-05-07 00:00 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-117-generic #164-Ubuntu SMP Fri Apr 7 11:05:26 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (823.5390625 MB free)
Uptime: 66337.0 sec
Load Avg:  1.05908203125  0.9501953125  0.87158203125
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3504 MHz    4325572 s       2697 s     177434 s     993900 s         49 s
#2  3504 MHz     748815 s       3745 s      87249 s    5684345 s          1 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.6
2 required packages:
 - JSON                          0.11.0
 - TestRunner                    0.0.3
2 additional packages:
 - Compat                        0.25.0
 - FactCheck                     0.4.3
INFO: Testing TestRunner

WARNING: deprecated syntax "abstract TestStructureNode" at /home/vagrant/.julia/v0.6/TestRunner/src/TestRunner.jl:11.
Use "abstract type TestStructureNode end" instead.

WARNING: deprecated syntax "abstract Result" at /home/vagrant/.julia/v0.6/FactCheck/src/FactCheck.jl:46.
Use "abstract type Result end" instead.
Test handling tests
  > File loading
WARNING: map!{F}(f::F, A::AbstractArray) is deprecated, use map!(f, A, A) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] map!(::TestRunner.#_fixLineNumbers!, ::Array{Any,1}) at ./deprecated.jl:51
 [3] _fixLineNumbers!(::Expr) at /home/vagrant/.julia/v0.6/TestRunner/src/TestRunner.jl:56
 [4] _get_file_content(::String) at /home/vagrant/.julia/v0.6/TestRunner/src/TestRunner.jl:53
 [5] (::##6#24{##5#23})() at /home/vagrant/.julia/v0.6/FactCheck/src/FactCheck.jl:272
 [6] do_fact(::##6#24{##5#23}, ::Expr, ::Symbol, ::FactCheck.ResultMetadata) at /home/vagrant/.julia/v0.6/FactCheck/src/FactCheck.jl:334
 [7] macro expansion at /home/vagrant/.julia/v0.6/FactCheck/src/FactCheck.jl:272 [inlined]
 [8] #4 at /home/vagrant/.julia/v0.6/TestRunner/test/runtests.jl:46 [inlined]
 [9] context(::##4#22, ::String) at /home/vagrant/.julia/v0.6/FactCheck/src/FactCheck.jl:475
 [10] (::##3#21)() at /home/vagrant/.julia/v0.6/TestRunner/test/runtests.jl:45
 [11] facts(::##3#21, ::String) at /home/vagrant/.julia/v0.6/FactCheck/src/FactCheck.jl:449
 [12] include_from_node1(::String) at ./loading.jl:552
 [13] include(::String) at ./sysimg.jl:14
 [14] process_options(::Base.JLOptions) at ./client.jl:305
 [15] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/TestRunner/test/runtests.jl, in expression starting on line 44
    Failure :: (line:272) :: File loading :: fact was false
      Expression: TestRunner._get_file_content(sampleTestsFilePath) --> sampleTests
        Expected: quote  # /home/vagrant/.julia/v0.6/TestRunner/test/runtests.jl, line 4:
    using FactCheck # /home/vagrant/.julia/v0.6/TestRunner/test/runtests.jl, line 6:
    facts((()->begin  # /home/vagrant/.julia/v0.6/TestRunner/test/runtests.jl, line 7:
                @fact $(Expr(:-->, 1, 1)) "First group first test" # /home/vagrant/.julia/v0.6/TestRunner/test/runtests.jl, line 8:
                @fact $(Expr(:-->, 2, 1)) "First group second failing test"
            end), "First facts group") # /home/vagrant/.julia/v0.6/TestRunner/test/runtests.jl, line 11:
    facts((()->begin  # /home/vagrant/.julia/v0.6/TestRunner/test/runtests.jl, line 12:
                @fact $(Expr(:-->, 1, 1)) "Second group first test" # /home/vagrant/.julia/v0.6/TestRunner/test/runtests.jl, line 13:
                @fact $(Expr(:-->, 2, 2))
            end), "Second facts group") # /home/vagrant/.julia/v0.6/TestRunner/test/runtests.jl, line 16:
    facts((()->begin  # /home/vagrant/.julia/v0.6/TestRunner/test/runtests.jl, line 17:
                @fact $(Expr(:-->, 1, 1)) # /home/vagrant/.julia/v0.6/TestRunner/test/runtests.jl, line 18:
                @fact $(Expr(:-->, 2, 1))
            end)) # /home/vagrant/.julia/v0.6/TestRunner/test/runtests.jl, line 20:
    facts((()->begin  # /home/vagrant/.julia/v0.6/TestRunner/test/runtests.jl, line 21:
            end))
end
        Occurred: quote  # none, line 5:
    using FactCheck # none, line 7:
    facts((()->begin  # none, line 8:
                @fact $(Expr(:-->, 1, 1)) "First group first test" # none, line 9:
                @fact $(Expr(:-->, 2, 1)) "First group second failing test"
            end), "First facts group") # none, line 12:
    facts((()->begin  # none, line 13:
                @fact $(Expr(:-->, 1, 1)) "Second group first test" # none, line 14:
                @fact $(Expr(:-->, 2, 2))
            end), "Second facts group") # none, line 17:
    facts((()->begin  # none, line 18:
                @fact $(Expr(:-->, 1, 1)) # none, line 19:
                @fact $(Expr(:-->, 2, 1))
            end)) # none, line 21:
    facts((()->begin  # none, line 22:
            end))
end
  > Structure parsing
    Failure :: (line:272) :: Structure parsing :: fact was false
      Expression: TestRunner._get_tests_structure(sampleTests) --> Vector{TestStructureNode}([FactsCollectionNode(6, "First facts group", [FactNode(7, "First group first test"), FactNode(8, "First group second failing test")]), FactsCollectionNode(11, "Second facts group", [FactNode(12, "Second group first test"), FactNode(13, "")]), FactsCollectionNode(16, "", [FactNode(17, ""), FactNode(18, "")]), FactsCollectionNode(20, "", [])])
        Expected: TestRunner.TestStructureNode[TestRunner.FactsCollectionNode(6, "First facts group", TestRunner.TestStructureNode[TestRunner.FactNode(7, "First group first test", test_not_run, "", ""), TestRunner.FactNode(8, "First group second failing test", test_not_run, "", "")]), TestRunner.FactsCollectionNode(11, "Second facts group", TestRunner.TestStructureNode[TestRunner.FactNode(12, "Second group first test", test_not_run, "", ""), TestRunner.FactNode(13, "", test_not_run, "", "")]), TestRunner.FactsCollectionNode(16, "", TestRunner.TestStructureNode[TestRunner.FactNode(17, "", test_not_run, "", ""), TestRunner.FactNode(18, "", test_not_run, "", "")]), TestRunner.FactsCollectionNode(20, "", TestRunner.TestStructureNode[])]
        Occurred: TestRunner.TestStructureNode[TestRunner.FactsCollectionNode(0, "First facts group", TestRunner.TestStructureNode[TestRunner.FactNode(0, "First group first test", test_not_run, "", ""), TestRunner.FactNode(0, "First group second failing test", test_not_run, "", "")]), TestRunner.FactsCollectionNode(0, "Second facts group", TestRunner.TestStructureNode[TestRunner.FactNode(0, "Second group first test", test_not_run, "", ""), TestRunner.FactNode(0, "", test_not_run, "", "")]), TestRunner.FactsCollectionNode(0, "", TestRunner.TestStructureNode[TestRunner.FactNode(0, "", test_not_run, "", ""), TestRunner.FactNode(0, "", test_not_run, "", "")]), TestRunner.FactsCollectionNode(0, "", TestRunner.TestStructureNode[])]
    Failure :: (line:272) :: Structure parsing :: File structure parsing :: fact was false
      Expression: get_tests_structure(sampleTestsFilePath) --> RootNode(Vector{TestStructureNode}([FactsCollectionNode(6, "First facts group", [FactNode(7, "First group first test"), FactNode(8, "First group second failing test")]), FactsCollectionNode(11, "Second facts group", [FactNode(12, "Second group first test"), FactNode(13, "")]), FactsCollectionNode(16, "", [FactNode(17, ""), FactNode(18, "")]), FactsCollectionNode(20, "", [])]))
        Expected: TestRunner.RootNode(TestRunner.TestStructureNode[TestRunner.FactsCollectionNode(6, "First facts group", TestRunner.TestStructureNode[TestRunner.FactNode(7, "First group first test", test_not_run, "", ""), TestRunner.FactNode(8, "First group second failing test", test_not_run, "", "")]), TestRunner.FactsCollectionNode(11, "Second facts group", TestRunner.TestStructureNode[TestRunner.FactNode(12, "Second group first test", test_not_run, "", ""), TestRunner.FactNode(13, "", test_not_run, "", "")]), TestRunner.FactsCollectionNode(16, "", TestRunner.TestStructureNode[TestRunner.FactNode(17, "", test_not_run, "", ""), TestRunner.FactNode(18, "", test_not_run, "", "")]), TestRunner.FactsCollectionNode(20, "", TestRunner.TestStructureNode[])])
        Occurred: TestRunner.RootNode(TestRunner.TestStructureNode[TestRunner.FactsCollectionNode(0, "First facts group", TestRunner.TestStructureNode[TestRunner.FactNode(0, "First group first test", test_not_run, "", ""), TestRunner.FactNode(0, "First group second failing test", test_not_run, "", "")]), TestRunner.FactsCollectionNode(0, "Second facts group", TestRunner.TestStructureNode[TestRunner.FactNode(0, "Second group first test", test_not_run, "", ""), TestRunner.FactNode(0, "", test_not_run, "", "")]), TestRunner.FactsCollectionNode(0, "", TestRunner.TestStructureNode[TestRunner.FactNode(0, "", test_not_run, "", ""), TestRunner.FactNode(0, "", test_not_run, "", "")]), TestRunner.FactsCollectionNode(0, "", TestRunner.TestStructureNode[])])
  > Tests running
    Failure :: (line:272) :: Tests running :: Tests running :: fact was false
      Expression: run_all_tests(sampleTestsFilePath) --> RootNode(Vector{TestStructureNode}([FactsCollectionNode(6, "First facts group", [FactNode(7, "First group first test", test_success, "    Success :: (line:7) :: Tests running :: First group first test :: fact was true\n      Expression: 1 --> 1\n        Expected: 1\n        Occurred: 1"), FactNode(8, "First group second failing test", test_failure, "    Failure :: (line:8) :: Tests running :: First group second failing test :: fact was false\n      Expression: 2 --> 1\n        Expected: 1\n        Occurred: 2")]), FactsCollectionNode(11, "Second facts group", [FactNode(12, "Second group first test", test_success, "    Success :: (line:12) :: Tests running :: Second group first test :: fact was true\n      Expression: 1 --> 1\n        Expected: 1\n        Occurred: 1"), FactNode(13, "", test_success, "    Success :: (line:13) :: Tests running :: fact was true\n      Expression: 2 --> 2\n        Expected: 2\n        Occurred: 2")]), FactsCollectionNode(16, "", [FactNode(17, "", test_success, "    Success :: (line:17) :: Tests running :: fact was true\n      Expression: 1 --> 1\n        Expected: 1\n        Occurred: 1"), FactNode(18, "", test_failure, "    Failure :: (line:18) :: Tests running :: fact was false\n      Expression: 2 --> 1\n        Expected: 1\n        Occurred: 2")]), FactsCollectionNode(20, "", [])]))
        Expected: TestRunner.RootNode(TestRunner.TestStructureNode[TestRunner.FactsCollectionNode(6, "First facts group", TestRunner.TestStructureNode[TestRunner.FactNode(7, "First group first test", test_success, "    Success :: (line:7) :: Tests running :: First group first test :: fact was true\n      Expression: 1 --> 1\n        Expected: 1\n        Occurred: 1", ""), TestRunner.FactNode(8, "First group second failing test", test_failure, "    Failure :: (line:8) :: Tests running :: First group second failing test :: fact was false\n      Expression: 2 --> 1\n        Expected: 1\n        Occurred: 2", "")]), TestRunner.FactsCollectionNode(11, "Second facts group", TestRunner.TestStructureNode[TestRunner.FactNode(12, "Second group first test", test_success, "    Success :: (line:12) :: Tests running :: Second group first test :: fact was true\n      Expression: 1 --> 1\n        Expected: 1\n        Occurred: 1", ""), TestRunner.FactNode(13, "", test_success, "    Success :: (line:13) :: Tests running :: fact was true\n      Expression: 2 --> 2\n        Expected: 2\n        Occurred: 2", "")]), TestRunner.FactsCollectionNode(16, "", TestRunner.TestStructureNode[TestRunner.FactNode(17, "", test_success, "    Success :: (line:17) :: Tests running :: fact was true\n      Expression: 1 --> 1\n        Expected: 1\n        Occurred: 1", ""), TestRunner.FactNode(18, "", test_failure, "    Failure :: (line:18) :: Tests running :: fact was false\n      Expression: 2 --> 1\n        Expected: 1\n        Occurred: 2", "")]), TestRunner.FactsCollectionNode(20, "", TestRunner.TestStructureNode[])])
        Occurred: TestRunner.RootNode(TestRunner.TestStructureNode[TestRunner.FactsCollectionNode(0, "First facts group", TestRunner.TestStructureNode[TestRunner.FactNode(0, "First group first test", test_success, "    Success :: (line:0) :: Tests running :: First group first test :: fact was true\n      Expression: 1 --> 1\n        Expected: 1\n        Occurred: 1", ""), TestRunner.FactNode(0, "First group second failing test", test_failure, "    Failure :: (line:0) :: Tests running :: First group second failing test :: fact was false\n      Expression: 2 --> 1\n        Expected: 1\n        Occurred: 2", "")]), TestRunner.FactsCollectionNode(0, "Second facts group", TestRunner.TestStructureNode[TestRunner.FactNode(0, "Second group first test", test_success, "    Success :: (line:0) :: Tests running :: Second group first test :: fact was true\n      Expression: 1 --> 1\n        Expected: 1\n        Occurred: 1", ""), TestRunner.FactNode(0, "", test_success, "    Success :: (line:0) :: Tests running :: fact was true\n      Expression: 2 --> 2\n        Expected: 2\n        Occurred: 2", "")]), TestRunner.FactsCollectionNode(0, "", TestRunner.TestStructureNode[TestRunner.FactNode(0, "", test_success, "    Success :: (line:0) :: Tests running :: fact was true\n      Expression: 1 --> 1\n        Expected: 1\n        Occurred: 1", ""), TestRunner.FactNode(0, "", test_failure, "    Failure :: (line:0) :: Tests running :: fact was false\n      Expression: 2 --> 1\n        Expected: 1\n        Occurred: 2", "")]), TestRunner.FactsCollectionNode(0, "", TestRunner.TestStructureNode[])])
  > Exception handling
  > Children acquiring
Out of 7 total facts:
  Verified: 2
  Failed:   4
  Pending:  1
JSON parsing tests
  > FactNode parsing
  > FactsCollectionNode parsing
  > ContextNode parsing
  > Tree to JSON parsing
10 facts verified.
ERROR: LoadError: FactCheck finished with 4 non-successful tests.
Stacktrace:
 [1] exitstatus() at /home/vagrant/.julia/v0.6/FactCheck/src/FactCheck.jl:568
 [2] include_from_node1(::String) at ./loading.jl:552
 [3] include(::String) at ./sysimg.jl:14
 [4] process_options(::Base.JLOptions) at ./client.jl:305
 [5] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/TestRunner/test/runtests.jl, in expression starting on line 108
=============================[ ERROR: TestRunner ]==============================

failed process: Process(`/home/vagrant/julia/bin/julia -Cx86-64 -J/home/vagrant/julia/lib/julia/sys.so --compile=yes --depwarn=yes --check-bounds=yes --code-coverage=none --color=no --compilecache=yes /home/vagrant/.julia/v0.6/TestRunner/test/runtests.jl`, ProcessExited(1)) [1]

================================================================================
ERROR: TestRunner had test errors

>>> End of log
