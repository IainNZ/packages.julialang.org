>>> 'Pkg.add("SIMD")' log
┌ Info: Cloning cache of SIMD from https://github.com/eschnett/SIMD.jl.git
└                                                   @ Base.Pkg.Cache cache.jl:43
[ Info: Installing SIMD v0.2.0                     @ Base.Pkg.Entry entry.jl:543
[ Info: Package database updated                    @ Base.Pkg.Entry entry.jl:32
┌ Info: METADATA is out-of-date — you may not have the latest version of SIMD
│ Use `Pkg.update()` to get the latest versions of your packages
└                                                   @ Base.Pkg.Entry entry.jl:74

>>> 'Pkg.test("SIMD")' log
Julia Version 0.7.0-DEV.3354
Commit 9b5eed2b6c (2018-01-09 08:03 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
      Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-135-generic #184-Ubuntu SMP Wed Oct 18 11:55:51 UTC 2017 x86_64 x86_64
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
              speed         user         nice          sys         idle          irq
       #1  3500 MHz    2387717 s        184 s     120926 s     508654 s          8 s
       #2  3500 MHz     334619 s       7115 s      41023 s    3201826 s          0 s
       
  Memory: 2.93927001953125 GB (566.3515625 MB free)
  Uptime: 36293.0 sec
  Load Avg:  0.9580078125  0.9619140625  0.9736328125
  WORD_SIZE: 64
  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant
Packages:
  Package Directory: /home/vagrant/.julia/v0.7
  Package Status:
2 required packages:
 - JSON                          0.16.3
 - SIMD                          0.2.0
3 additional packages:
 - Compat                        0.44.0
 - Nullables                     0.0.2
 - tmpheHvae                     0.0.0-             non-repo (unregistered)
[ Info: Testing SIMD                               @ Base.Pkg.Entry entry.jl:723
┌ Warning: Deprecated syntax `(l:-(+(l, N), 1)...)` at /home/vagrant/.julia/v0.7/SIMD/test/runtests.jl:338.
│ Use `(l:-(+(l, N), 1)...,)` instead.
└                                                      @ nothing runtests.jl:338
┌ Warning: Deprecated syntax `(l:-(+(l, N), 1)...)` at /home/vagrant/.julia/v0.7/SIMD/test/runtests.jl:360.
│ Use `(l:-(+(l, N), 1)...,)` instead.
└                                                      @ nothing runtests.jl:360
┌ Warning: Deprecated syntax `(1:8...)` at /home/vagrant/.julia/v0.7/SIMD/test/runtests.jl:389.
│ Use `(1:8...,)` instead.
└                                                      @ nothing runtests.jl:389
┌ Warning: Deprecated syntax `(9:16...)` at /home/vagrant/.julia/v0.7/SIMD/test/runtests.jl:390.
│ Use `(9:16...,)` instead.
└                                                      @ nothing runtests.jl:390
┌ Warning: Deprecated syntax `(2:2:16...)` at /home/vagrant/.julia/v0.7/SIMD/test/runtests.jl:392.
│ Use `(2:2:16...,)` instead.
└                                                      @ nothing runtests.jl:392
┌ Warning: Deprecated syntax `immutable` at /home/vagrant/.julia/v0.7/SIMD/src/SIMD.jl:68.
│ Use `struct` instead.
└                                                           @ nothing SIMD.jl:68
┌ Warning: Deprecated syntax `immutable` at /home/vagrant/.julia/v0.7/SIMD/src/SIMD.jl:68.
│ Use `struct` instead.
└                                                           @ nothing SIMD.jl:68
┌ Warning: Deprecated syntax `parametric method syntax (::Type{Vec{N, T}}){N, T}(elts::NTuple{N, VE{T}})` around /home/vagrant/.julia/v0.7/SIMD/src/SIMD.jl:70.
│ Use `(::Type{Vec{N, T}})(elts::NTuple{N, VE{T}}) where {N, T}` instead.
└                                                           @ nothing SIMD.jl:70
┌ Warning: Deprecated syntax `parametric method syntax Base.show{N, T}(io::IO, v::Vec{N, T})` around /home/vagrant/.julia/v0.7/SIMD/src/SIMD.jl:74.
│ Use `Base.show(io::IO, v::Vec{N, T}) where {N, T}` instead.
└                                                           @ nothing SIMD.jl:74
┌ Warning: Deprecated syntax `parametric method syntax Base.length{N, T}(::Type{Vec{N, T}})` around /home/vagrant/.julia/v0.7/SIMD/src/SIMD.jl:105.
│ Use `Base.length(#unused#::Type{Vec{N, T}}) where {N, T}` instead.
└                                                          @ nothing SIMD.jl:105
┌ Warning: Deprecated syntax `parametric method syntax Base.size{N, T}(::Type{Vec{N, T}})` around /home/vagrant/.julia/v0.7/SIMD/src/SIMD.jl:106.
│ Use `Base.size(#unused#::Type{Vec{N, T}}) where {N, T}` instead.
└                                                          @ nothing SIMD.jl:106
┌ Warning: Deprecated syntax `parametric method syntax Base.size{N, T}(::Type{Vec{N, T}}, n::Integer)` around /home/vagrant/.julia/v0.7/SIMD/src/SIMD.jl:107.
│ Use `Base.size(#unused#::Type{Vec{N, T}}, n::Integer) where {N, T}` instead.
└                                                          @ nothing SIMD.jl:107
┌ Warning: Deprecated syntax `parametric method syntax Base.length{N, T}(::Vec{N, T})` around /home/vagrant/.julia/v0.7/SIMD/src/SIMD.jl:110.
│ Use `Base.length(#unused#::Vec{N, T}) where {N, T}` instead.
└                                                          @ nothing SIMD.jl:110
┌ Warning: Deprecated syntax `parametric method syntax Base.size{N, T}(::Vec{N, T})` around /home/vagrant/.julia/v0.7/SIMD/src/SIMD.jl:111.
│ Use `Base.size(#unused#::Vec{N, T}) where {N, T}` instead.
└                                                          @ nothing SIMD.jl:111
┌ Warning: Deprecated syntax `parametric method syntax Base.size{N, T}(::Vec{N, T}, n::Integer)` around /home/vagrant/.julia/v0.7/SIMD/src/SIMD.jl:112.
│ Use `Base.size(#unused#::Vec{N, T}, n::Integer) where {N, T}` instead.
└                                                          @ nothing SIMD.jl:112
┌ Warning: Deprecated syntax `parametric method syntax (::Type{Vec{N, T}}){N, T, S <: ScalarTypes}(x::S)` around /home/vagrant/.julia/v0.7/SIMD/src/SIMD.jl:118.
│ Use `(::Type{Vec{N, T}})(x::S) where {N, T, S <: ScalarTypes}` instead.
└                                                          @ nothing SIMD.jl:118
┌ Warning: Deprecated syntax `parametric method syntax (::Type{Vec{N, T}}){N, T <: ScalarTypes}(xs::Tuple{})` around /home/vagrant/.julia/v0.7/SIMD/src/SIMD.jl:123.
│ Use `(::Type{Vec{N, T}})(xs::Tuple{}) where {N, T <: ScalarTypes}` instead.
└                                                          @ nothing SIMD.jl:123
┌ Warning: Deprecated syntax `parametric method syntax (::Type{Vec{N, T}}){N, T, S <: ScalarTypes}(xs::NTuple{N, S})` around /home/vagrant/.julia/v0.7/SIMD/src/SIMD.jl:125.
│ Use `(::Type{Vec{N, T}})(xs::NTuple{N, S}) where {N, T, S <: ScalarTypes}` instead.
└                                                          @ nothing SIMD.jl:125
┌ Warning: Deprecated syntax `parametric method syntax (::Type{Vec}){N, T <: ScalarTypes}(xs::NTuple{N, T})` around /home/vagrant/.julia/v0.7/SIMD/src/SIMD.jl:130.
│ Use `(::Type{Vec})(xs::NTuple{N, T}) where {N, T <: ScalarTypes}` instead.
└                                                          @ nothing SIMD.jl:130
┌ Warning: Deprecated syntax `parametric method syntax Base.convert{N, T}(::Type{Vec{N, T}}, v::Vec{N, T})` around /home/vagrant/.julia/v0.7/SIMD/src/SIMD.jl:133.
│ Use `Base.convert(#unused#::Type{Vec{N, T}}, v::Vec{N, T}) where {N, T}` instead.
└                                                          @ nothing SIMD.jl:133
┌ Warning: Deprecated syntax `parametric method syntax Base.convert{N, R, T}(::Type{Vec{N, R}}, v::Vec{N, T})` around /home/vagrant/.julia/v0.7/SIMD/src/SIMD.jl:134.
│ Use `Base.convert(#unused#::Type{Vec{N, R}}, v::Vec{N, T}) where {N, R, T}` instead.
└                                                          @ nothing SIMD.jl:134
┌ Warning: Deprecated syntax `parametric method syntax Base.%{N, R, T}(v::Vec{N, T}, ::Type{Vec{N, R}})` around /home/vagrant/.julia/v0.7/SIMD/src/SIMD.jl:136.
│ Use `Base.%(v::Vec{N, T}, #unused#::Type{Vec{N, R}}) where {N, R, T}` instead.
└                                                          @ nothing SIMD.jl:136
┌ Warning: Deprecated syntax `parametric method syntax Base.convert{N, R, T}(::Type{NTuple{N, R}}, v::Vec{N, T})` around /home/vagrant/.julia/v0.7/SIMD/src/SIMD.jl:144.
│ Use `Base.convert(#unused#::Type{NTuple{N, R}}, v::Vec{N, T}) where {N, R, T}` instead.
└                                                          @ nothing SIMD.jl:144
┌ Warning: Deprecated syntax `parametric method syntax Base.convert{N, T}(::Type{Tuple}, v::Vec{N, T})` around /home/vagrant/.julia/v0.7/SIMD/src/SIMD.jl:149.
│ Use `Base.convert(#unused#::Type{Tuple}, v::Vec{N, T}) where {N, T}` instead.
└                                                          @ nothing SIMD.jl:149
┌ Warning: Deprecated syntax `parametric method syntax Base.zero{N, T}(::Type{Vec{N, T}})` around /home/vagrant/.julia/v0.7/SIMD/src/SIMD.jl:157.
│ Use `Base.zero(#unused#::Type{Vec{N, T}}) where {N, T}` instead.
└                                                          @ nothing SIMD.jl:157
┌ Warning: Deprecated syntax `parametric method syntax Base.one{N, T}(::Type{Vec{N, T}})` around /home/vagrant/.julia/v0.7/SIMD/src/SIMD.jl:158.
│ Use `Base.one(#unused#::Type{Vec{N, T}}) where {N, T}` instead.
└                                                          @ nothing SIMD.jl:158
┌ Warning: Deprecated syntax `parametric method syntax exponent_bits{T <: FloatingTypes}(::Type{T})` around /home/vagrant/.julia/v0.7/SIMD/src/SIMD.jl:180.
│ Use `exponent_bits(#unused#::Type{T}) where T <: FloatingTypes` instead.
└                                                          @ nothing SIMD.jl:180
┌ Warning: Deprecated syntax `parametric method syntax sign_bits{T <: FloatingTypes}(::Type{T})` around /home/vagrant/.julia/v0.7/SIMD/src/SIMD.jl:182.
│ Use `sign_bits(#unused#::Type{T}) where T <: FloatingTypes` instead.
└                                                          @ nothing SIMD.jl:182
┌ Warning: Deprecated syntax `parametric method syntax significand_mask{T <: FloatingTypes}(::Type{T})` around /home/vagrant/.julia/v0.7/SIMD/src/SIMD.jl:184.
│ Use `significand_mask(#unused#::Type{T}) where T <: FloatingTypes` instead.
└                                                          @ nothing SIMD.jl:184
┌ Warning: Deprecated syntax `parametric method syntax exponent_mask{T <: FloatingTypes}(::Type{T})` around /home/vagrant/.julia/v0.7/SIMD/src/SIMD.jl:186.
│ Use `exponent_mask(#unused#::Type{T}) where T <: FloatingTypes` instead.
└                                                          @ nothing SIMD.jl:186
┌ Warning: Deprecated syntax `parametric method syntax sign_mask{T <: FloatingTypes}(::Type{T})` around /home/vagrant/.julia/v0.7/SIMD/src/SIMD.jl:188.
│ Use `sign_mask(#unused#::Type{T}) where T <: FloatingTypes` instead.
└                                                          @ nothing SIMD.jl:188
┌ Warning: Deprecated syntax `parametric method syntax suffix{T <: IntegerTypes}(N::Integer, ::Type{T})` around /home/vagrant/.julia/v0.7/SIMD/src/SIMD.jl:232.
│ Use `suffix(N::Integer, #unused#::Type{T}) where T <: IntegerTypes` instead.
└                                                          @ nothing SIMD.jl:232
┌ Warning: Deprecated syntax `parametric method syntax suffix{T <: FloatingTypes}(N::Integer, ::Type{T})` around /home/vagrant/.julia/v0.7/SIMD/src/SIMD.jl:233.
│ Use `suffix(N::Integer, #unused#::Type{T}) where T <: FloatingTypes` instead.
└                                                          @ nothing SIMD.jl:233
┌ Warning: Deprecated syntax `parametric method syntax llvmconst{T}(::Type{T}, val)` around /home/vagrant/.julia/v0.7/SIMD/src/SIMD.jl:237.
│ Use `llvmconst(#unused#::Type{T}, val) where T` instead.
└                                                          @ nothing SIMD.jl:237
┌ Warning: Deprecated syntax `parametric method syntax llvmconst{T}(N::Integer, ::Type{T}, val)` around /home/vagrant/.julia/v0.7/SIMD/src/SIMD.jl:247.
│ Use `llvmconst(N::Integer, #unused#::Type{T}, val) where T` instead.
└                                                          @ nothing SIMD.jl:247
┌ Warning: Deprecated syntax `parametric method syntax llvmtypedconst{T}(::Type{T}, val)` around /home/vagrant/.julia/v0.7/SIMD/src/SIMD.jl:257.
│ Use `llvmtypedconst(#unused#::Type{T}, val) where T` instead.
└                                                          @ nothing SIMD.jl:257
┌ Warning: Deprecated syntax `parametric method syntax llvmins{T <: IntegerTypes}(::Type{Val{:+}}, N, ::Type{T})` around /home/vagrant/.julia/v0.7/SIMD/src/SIMD.jl:268.
│ Use `llvmins(#unused#::Type{Val{:+}}, N, #unused#::Type{T}) where T <: IntegerTypes` instead.
└                                                          @ nothing SIMD.jl:268
┌ Warning: Deprecated syntax `parametric method syntax llvmins{T <: IntegerTypes}(::Type{Val{:-}}, N, ::Type{T})` around /home/vagrant/.julia/v0.7/SIMD/src/SIMD.jl:269.
│ Use `llvmins(#unused#::Type{Val{:-}}, N, #unused#::Type{T}) where T <: IntegerTypes` instead.
└                                                          @ nothing SIMD.jl:269
┌ Warning: Deprecated syntax `parametric method syntax llvmins{T <: IntegerTypes}(::Type{Val{:*}}, N, ::Type{T})` around /home/vagrant/.julia/v0.7/SIMD/src/SIMD.jl:270.
│ Use `llvmins(#unused#::Type{Val{:*}}, N, #unused#::Type{T}) where T <: IntegerTypes` instead.
└                                                          @ nothing SIMD.jl:270
┌ Warning: Deprecated syntax `parametric method syntax llvmins{T <: IntTypes}(::Type{Val{:div}}, N, ::Type{T})` around /home/vagrant/.julia/v0.7/SIMD/src/SIMD.jl:271.
│ Use `llvmins(#unused#::Type{Val{:div}}, N, #unused#::Type{T}) where T <: IntTypes` instead.
└                                                          @ nothing SIMD.jl:271
┌ Warning: Deprecated syntax `parametric method syntax llvmins{T <: IntTypes}(::Type{Val{:rem}}, N, ::Type{T})` around /home/vagrant/.julia/v0.7/SIMD/src/SIMD.jl:272.
│ Use `llvmins(#unused#::Type{Val{:rem}}, N, #unused#::Type{T}) where T <: IntTypes` instead.
└                                                          @ nothing SIMD.jl:272
┌ Warning: Deprecated syntax `parametric method syntax llvmins{T <: UIntTypes}(::Type{Val{:div}}, N, ::Type{T})` around /home/vagrant/.julia/v0.7/SIMD/src/SIMD.jl:273.
│ Use `llvmins(#unused#::Type{Val{:div}}, N, #unused#::Type{T}) where T <: UIntTypes` instead.
└                                                          @ nothing SIMD.jl:273
┌ Warning: Deprecated syntax `parametric method syntax llvmins{T <: UIntTypes}(::Type{Val{:rem}}, N, ::Type{T})` around /home/vagrant/.julia/v0.7/SIMD/src/SIMD.jl:274.
│ Use `llvmins(#unused#::Type{Val{:rem}}, N, #unused#::Type{T}) where T <: UIntTypes` instead.
└                                                          @ nothing SIMD.jl:274
┌ Warning: Deprecated syntax `parametric method syntax llvmins{T <: IntegerTypes}(::Type{Val{:~}}, N, ::Type{T})` around /home/vagrant/.julia/v0.7/SIMD/src/SIMD.jl:276.
│ Use `llvmins(#unused#::Type{Val{:~}}, N, #unused#::Type{T}) where T <: IntegerTypes` instead.
└                                                          @ nothing SIMD.jl:276
┌ Warning: Deprecated syntax `parametric method syntax llvmins{T <: IntegerTypes}(::Type{Val{:&}}, N, ::Type{T})` around /home/vagrant/.julia/v0.7/SIMD/src/SIMD.jl:277.
│ Use `llvmins(#unused#::Type{Val{:&}}, N, #unused#::Type{T}) where T <: IntegerTypes` instead.
└                                                          @ nothing SIMD.jl:277
┌ Warning: Deprecated syntax `parametric method syntax llvmins{T <: IntegerTypes}(::Type{Val{:|}}, N, ::Type{T})` around /home/vagrant/.julia/v0.7/SIMD/src/SIMD.jl:278.
│ Use `llvmins(#unused#::Type{Val{:|}}, N, #unused#::Type{T}) where T <: IntegerTypes` instead.
└                                                          @ nothing SIMD.jl:278
┌ Warning: Deprecated syntax `parametric method syntax llvmins{T <: IntegerTypes}(::Type{Val{:$}}, N, ::Type{T})` around /home/vagrant/.julia/v0.7/SIMD/src/SIMD.jl:279.
│ Use `llvmins(#unused#::Type{Val{:$}}, N, #unused#::Type{T}) where T <: IntegerTypes` instead.
└                                                          @ nothing SIMD.jl:279
┌ Warning: Deprecated syntax `parametric method syntax llvmins{T <: IntegerTypes}(::Type{Val{:<<}}, N, ::Type{T})` around /home/vagrant/.julia/v0.7/SIMD/src/SIMD.jl:281.
│ Use `llvmins(#unused#::Type{Val{:<<}}, N, #unused#::Type{T}) where T <: IntegerTypes` instead.
└                                                          @ nothing SIMD.jl:281
┌ Warning: Deprecated syntax `parametric method syntax llvmins{T <: IntegerTypes}(::Type{Val{:>>>}}, N, ::Type{T})` around /home/vagrant/.julia/v0.7/SIMD/src/SIMD.jl:282.
│ Use `llvmins(#unused#::Type{Val{:>>>}}, N, #unused#::Type{T}) where T <: IntegerTypes` instead.
└                                                          @ nothing SIMD.jl:282
┌ Warning: Deprecated syntax `parametric method syntax llvmins{T <: UIntTypes}(::Type{Val{:>>}}, N, ::Type{T})` around /home/vagrant/.julia/v0.7/SIMD/src/SIMD.jl:283.
│ Use `llvmins(#unused#::Type{Val{:>>}}, N, #unused#::Type{T}) where T <: UIntTypes` instead.
└                                                          @ nothing SIMD.jl:283
┌ Warning: Deprecated syntax `parametric method syntax llvmins{T <: IntTypes}(::Type{Val{:>>}}, N, ::Type{T})` around /home/vagrant/.julia/v0.7/SIMD/src/SIMD.jl:284.
│ Use `llvmins(#unused#::Type{Val{:>>}}, N, #unused#::Type{T}) where T <: IntTypes` instead.
└                                                          @ nothing SIMD.jl:284
┌ Warning: Deprecated syntax `parametric method syntax llvmins{T <: IntegerTypes}(::Type{Val{:(==)}}, N, ::Type{T})` around /home/vagrant/.julia/v0.7/SIMD/src/SIMD.jl:286.
│ Use `llvmins(#unused#::Type{Val{:(==)}}, N, #unused#::Type{T}) where T <: IntegerTypes` instead.
└                                                          @ nothing SIMD.jl:286
┌ Warning: Deprecated syntax `parametric method syntax llvmins{T <: IntegerTypes}(::Type{Val{:!=}}, N, ::Type{T})` around /home/vagrant/.julia/v0.7/SIMD/src/SIMD.jl:287.
│ Use `llvmins(#unused#::Type{Val{:!=}}, N, #unused#::Type{T}) where T <: IntegerTypes` instead.
└                                                          @ nothing SIMD.jl:287
┌ Warning: Deprecated syntax `parametric method syntax llvmins{T <: IntTypes}(::Type{Val{:>}}, N, ::Type{T})` around /home/vagrant/.julia/v0.7/SIMD/src/SIMD.jl:288.
│ Use `llvmins(#unused#::Type{Val{:>}}, N, #unused#::Type{T}) where T <: IntTypes` instead.
└                                                          @ nothing SIMD.jl:288
┌ Warning: Deprecated syntax `parametric method syntax llvmins{T <: IntTypes}(::Type{Val{:>=}}, N, ::Type{T})` around /home/vagrant/.julia/v0.7/SIMD/src/SIMD.jl:289.
│ Use `llvmins(#unused#::Type{Val{:>=}}, N, #unused#::Type{T}) where T <: IntTypes` instead.
└                                                          @ nothing SIMD.jl:289
┌ Warning: Deprecated syntax `parametric method syntax llvmins{T <: IntTypes}(::Type{Val{:<}}, N, ::Type{T})` around /home/vagrant/.julia/v0.7/SIMD/src/SIMD.jl:290.
│ Use `llvmins(#unused#::Type{Val{:<}}, N, #unused#::Type{T}) where T <: IntTypes` instead.
└                                                          @ nothing SIMD.jl:290
┌ Warning: Deprecated syntax `parametric method syntax llvmins{T <: IntTypes}(::Type{Val{:<=}}, N, ::Type{T})` around /home/vagrant/.julia/v0.7/SIMD/src/SIMD.jl:291.
│ Use `llvmins(#unused#::Type{Val{:<=}}, N, #unused#::Type{T}) where T <: IntTypes` instead.
└                                                          @ nothing SIMD.jl:291
┌ Warning: Deprecated syntax `parametric method syntax llvmins{T <: UIntTypes}(::Type{Val{:>}}, N, ::Type{T})` around /home/vagrant/.julia/v0.7/SIMD/src/SIMD.jl:292.
│ Use `llvmins(#unused#::Type{Val{:>}}, N, #unused#::Type{T}) where T <: UIntTypes` instead.
└                                                          @ nothing SIMD.jl:292
┌ Warning: Deprecated syntax `parametric method syntax llvmins{T <: UIntTypes}(::Type{Val{:>=}}, N, ::Type{T})` around /home/vagrant/.julia/v0.7/SIMD/src/SIMD.jl:293.
│ Use `llvmins(#unused#::Type{Val{:>=}}, N, #unused#::Type{T}) where T <: UIntTypes` instead.
└                                                          @ nothing SIMD.jl:293
┌ Warning: Deprecated syntax `parametric method syntax llvmins{T <: UIntTypes}(::Type{Val{:<}}, N, ::Type{T})` around /home/vagrant/.julia/v0.7/SIMD/src/SIMD.jl:294.
│ Use `llvmins(#unused#::Type{Val{:<}}, N, #unused#::Type{T}) where T <: UIntTypes` instead.
└                                                          @ nothing SIMD.jl:294
┌ Warning: Deprecated syntax `parametric method syntax llvmins{T <: UIntTypes}(::Type{Val{:<=}}, N, ::Type{T})` around /home/vagrant/.julia/v0.7/SIMD/src/SIMD.jl:295.
│ Use `llvmins(#unused#::Type{Val{:<=}}, N, #unused#::Type{T}) where T <: UIntTypes` instead.
└                                                          @ nothing SIMD.jl:295
┌ Warning: Deprecated syntax `parametric method syntax llvmins{T}(::Type{Val{:ifelse}}, N, ::Type{T})` around /home/vagrant/.julia/v0.7/SIMD/src/SIMD.jl:297.
│ Use `llvmins(#unused#::Type{Val{:ifelse}}, N, #unused#::Type{T}) where T` instead.
└                                                          @ nothing SIMD.jl:297
┌ Warning: Deprecated syntax `parametric method syntax llvmins{T <: FloatingTypes}(::Type{Val{:+}}, N, ::Type{T})` around /home/vagrant/.julia/v0.7/SIMD/src/SIMD.jl:299.
│ Use `llvmins(#unused#::Type{Val{:+}}, N, #unused#::Type{T}) where T <: FloatingTypes` instead.
└                                                          @ nothing SIMD.jl:299
┌ Warning: Deprecated syntax `parametric method syntax llvmins{T <: FloatingTypes}(::Type{Val{:-}}, N, ::Type{T})` around /home/vagrant/.julia/v0.7/SIMD/src/SIMD.jl:300.
│ Use `llvmins(#unused#::Type{Val{:-}}, N, #unused#::Type{T}) where T <: FloatingTypes` instead.
└                                                          @ nothing SIMD.jl:300
┌ Warning: Deprecated syntax `parametric method syntax llvmins{T <: FloatingTypes}(::Type{Val{:*}}, N, ::Type{T})` around /home/vagrant/.julia/v0.7/SIMD/src/SIMD.jl:301.
│ Use `llvmins(#unused#::Type{Val{:*}}, N, #unused#::Type{T}) where T <: FloatingTypes` instead.
└                                                          @ nothing SIMD.jl:301
┌ Warning: Deprecated syntax `parametric method syntax llvmins{T <: FloatingTypes}(::Type{Val{:/}}, N, ::Type{T})` around /home/vagrant/.julia/v0.7/SIMD/src/SIMD.jl:302.
│ Use `llvmins(#unused#::Type{Val{:/}}, N, #unused#::Type{T}) where T <: FloatingTypes` instead.
└                                                          @ nothing SIMD.jl:302
┌ Warning: Deprecated syntax `parametric method syntax llvmins{T <: FloatingTypes}(::Type{Val{:inv}}, N, ::Type{T})` around /home/vagrant/.julia/v0.7/SIMD/src/SIMD.jl:303.
│ Use `llvmins(#unused#::Type{Val{:inv}}, N, #unused#::Type{T}) where T <: FloatingTypes` instead.
└                                                          @ nothing SIMD.jl:303
┌ Warning: Deprecated syntax `parametric method syntax llvmins{T <: FloatingTypes}(::Type{Val{:rem}}, N, ::Type{T})` around /home/vagrant/.julia/v0.7/SIMD/src/SIMD.jl:304.
│ Use `llvmins(#unused#::Type{Val{:rem}}, N, #unused#::Type{T}) where T <: FloatingTypes` instead.
└                                                          @ nothing SIMD.jl:304
┌ Warning: Deprecated syntax `parametric method syntax llvmins{T <: FloatingTypes}(::Type{Val{:(==)}}, N, ::Type{T})` around /home/vagrant/.julia/v0.7/SIMD/src/SIMD.jl:306.
│ Use `llvmins(#unused#::Type{Val{:(==)}}, N, #unused#::Type{T}) where T <: FloatingTypes` instead.
└                                                          @ nothing SIMD.jl:306
┌ Warning: Deprecated syntax `parametric method syntax llvmins{T <: FloatingTypes}(::Type{Val{:!=}}, N, ::Type{T})` around /home/vagrant/.julia/v0.7/SIMD/src/SIMD.jl:307.
│ Use `llvmins(#unused#::Type{Val{:!=}}, N, #unused#::Type{T}) where T <: FloatingTypes` instead.
└                                                          @ nothing SIMD.jl:307
┌ Warning: Deprecated syntax `parametric method syntax llvmins{T <: FloatingTypes}(::Type{Val{:>}}, N, ::Type{T})` around /home/vagrant/.julia/v0.7/SIMD/src/SIMD.jl:308.
│ Use `llvmins(#unused#::Type{Val{:>}}, N, #unused#::Type{T}) where T <: FloatingTypes` instead.
└                                                          @ nothing SIMD.jl:308
┌ Warning: Deprecated syntax `parametric method syntax llvmins{T <: FloatingTypes}(::Type{Val{:>=}}, N, ::Type{T})` around /home/vagrant/.julia/v0.7/SIMD/src/SIMD.jl:309.
│ Use `llvmins(#unused#::Type{Val{:>=}}, N, #unused#::Type{T}) where T <: FloatingTypes` instead.
└                                                          @ nothing SIMD.jl:309
┌ Warning: Deprecated syntax `parametric method syntax llvmins{T <: FloatingTypes}(::Type{Val{:<}}, N, ::Type{T})` around /home/vagrant/.julia/v0.7/SIMD/src/SIMD.jl:310.
│ Use `llvmins(#unused#::Type{Val{:<}}, N, #unused#::Type{T}) where T <: FloatingTypes` instead.
└                                                          @ nothing SIMD.jl:310
┌ Warning: Deprecated syntax `parametric method syntax llvmins{T <: FloatingTypes}(::Type{Val{:<=}}, N, ::Type{T})` around /home/vagrant/.julia/v0.7/SIMD/src/SIMD.jl:311.
│ Use `llvmins(#unused#::Type{Val{:<=}}, N, #unused#::Type{T}) where T <: FloatingTypes` instead.
└                                                          @ nothing SIMD.jl:311
┌ Warning: Deprecated syntax `parametric method syntax llvmins{T <: FloatingTypes}(::Type{Val{:^}}, N, ::Type{T})` around /home/vagrant/.julia/v0.7/SIMD/src/SIMD.jl:313.
│ Use `llvmins(#unused#::Type{Val{:^}}, N, #unused#::Type{T}) where T <: FloatingTypes` instead.
└                                                          @ nothing SIMD.jl:313
┌ Warning: Deprecated syntax `parametric method syntax llvmins{T <: FloatingTypes}(::Type{Val{:abs}}, N, ::Type{T})` around /home/vagrant/.julia/v0.7/SIMD/src/SIMD.jl:315.
│ Use `llvmins(#unused#::Type{Val{:abs}}, N, #unused#::Type{T}) where T <: FloatingTypes` instead.
└                                                          @ nothing SIMD.jl:315
┌ Warning: Deprecated syntax `parametric method syntax llvmins{T <: FloatingTypes}(::Type{Val{:ceil}}, N, ::Type{T})` around /home/vagrant/.julia/v0.7/SIMD/src/SIMD.jl:317.
│ Use `llvmins(#unused#::Type{Val{:ceil}}, N, #unused#::Type{T}) where T <: FloatingTypes` instead.
└                                                          @ nothing SIMD.jl:317
┌ Warning: Deprecated syntax `parametric method syntax llvmins{T <: FloatingTypes}(::Type{Val{:copysign}}, N, ::Type{T})` around /home/vagrant/.julia/v0.7/SIMD/src/SIMD.jl:319.
│ Use `llvmins(#unused#::Type{Val{:copysign}}, N, #unused#::Type{T}) where T <: FloatingTypes` instead.
└                                                          @ nothing SIMD.jl:319
┌ Warning: Deprecated syntax `parametric method syntax llvmins{T <: FloatingTypes}(::Type{Val{:cos}}, N, ::Type{T})` around /home/vagrant/.julia/v0.7/SIMD/src/SIMD.jl:321.
│ Use `llvmins(#unused#::Type{Val{:cos}}, N, #unused#::Type{T}) where T <: FloatingTypes` instead.
└                                                          @ nothing SIMD.jl:321
┌ Warning: Deprecated syntax `parametric method syntax llvmins{T <: FloatingTypes}(::Type{Val{:exp}}, N, ::Type{T})` around /home/vagrant/.julia/v0.7/SIMD/src/SIMD.jl:323.
│ Use `llvmins(#unused#::Type{Val{:exp}}, N, #unused#::Type{T}) where T <: FloatingTypes` instead.
└                                                          @ nothing SIMD.jl:323
┌ Warning: Deprecated syntax `parametric method syntax llvmins{T <: FloatingTypes}(::Type{Val{:exp2}}, N, ::Type{T})` around /home/vagrant/.julia/v0.7/SIMD/src/SIMD.jl:325.
│ Use `llvmins(#unused#::Type{Val{:exp2}}, N, #unused#::Type{T}) where T <: FloatingTypes` instead.
└                                                          @ nothing SIMD.jl:325
┌ Warning: Deprecated syntax `parametric method syntax llvmins{T <: FloatingTypes}(::Type{Val{:floor}}, N, ::Type{T})` around /home/vagrant/.julia/v0.7/SIMD/src/SIMD.jl:327.
│ Use `llvmins(#unused#::Type{Val{:floor}}, N, #unused#::Type{T}) where T <: FloatingTypes` instead.
└                                                          @ nothing SIMD.jl:327
┌ Warning: Deprecated syntax `parametric method syntax llvmins{T <: FloatingTypes}(::Type{Val{:fma}}, N, ::Type{T})` around /home/vagrant/.julia/v0.7/SIMD/src/SIMD.jl:329.
│ Use `llvmins(#unused#::Type{Val{:fma}}, N, #unused#::Type{T}) where T <: FloatingTypes` instead.
└                                                          @ nothing SIMD.jl:329
┌ Warning: Deprecated syntax `parametric method syntax llvmins{T <: FloatingTypes}(::Type{Val{:log}}, N, ::Type{T})` around /home/vagrant/.julia/v0.7/SIMD/src/SIMD.jl:331.
│ Use `llvmins(#unused#::Type{Val{:log}}, N, #unused#::Type{T}) where T <: FloatingTypes` instead.
└                                                          @ nothing SIMD.jl:331
┌ Warning: Deprecated syntax `parametric method syntax llvmins{T <: FloatingTypes}(::Type{Val{:log10}}, N, ::Type{T})` around /home/vagrant/.julia/v0.7/SIMD/src/SIMD.jl:333.
│ Use `llvmins(#unused#::Type{Val{:log10}}, N, #unused#::Type{T}) where T <: FloatingTypes` instead.
└                                                          @ nothing SIMD.jl:333
┌ Warning: Deprecated syntax `parametric method syntax llvmins{T <: FloatingTypes}(::Type{Val{:log2}}, N, ::Type{T})` around /home/vagrant/.julia/v0.7/SIMD/src/SIMD.jl:335.
│ Use `llvmins(#unused#::Type{Val{:log2}}, N, #unused#::Type{T}) where T <: FloatingTypes` instead.
└                                                          @ nothing SIMD.jl:335
┌ Warning: Deprecated syntax `parametric method syntax llvmins{T <: FloatingTypes}(::Type{Val{:max}}, N, ::Type{T})` around /home/vagrant/.julia/v0.7/SIMD/src/SIMD.jl:337.
│ Use `llvmins(#unused#::Type{Val{:max}}, N, #unused#::Type{T}) where T <: FloatingTypes` instead.
└                                                          @ nothing SIMD.jl:337
┌ Warning: Deprecated syntax `parametric method syntax llvmins{T <: FloatingTypes}(::Type{Val{:min}}, N, ::Type{T})` around /home/vagrant/.julia/v0.7/SIMD/src/SIMD.jl:339.
│ Use `llvmins(#unused#::Type{Val{:min}}, N, #unused#::Type{T}) where T <: FloatingTypes` instead.
└                                                          @ nothing SIMD.jl:339
┌ Warning: Deprecated syntax `parametric method syntax llvmins{T <: FloatingTypes}(::Type{Val{:muladd}}, N, ::Type{T})` around /home/vagrant/.julia/v0.7/SIMD/src/SIMD.jl:341.
│ Use `llvmins(#unused#::Type{Val{:muladd}}, N, #unused#::Type{T}) where T <: FloatingTypes` instead.
└                                                          @ nothing SIMD.jl:341
┌ Warning: Deprecated syntax `parametric method syntax llvmins{T <: FloatingTypes}(::Type{Val{:powi}}, N, ::Type{T})` around /home/vagrant/.julia/v0.7/SIMD/src/SIMD.jl:343.
│ Use `llvmins(#unused#::Type{Val{:powi}}, N, #unused#::Type{T}) where T <: FloatingTypes` instead.
└                                                          @ nothing SIMD.jl:343
┌ Warning: Deprecated syntax `parametric method syntax llvmins{T <: FloatingTypes}(::Type{Val{:round}}, N, ::Type{T})` around /home/vagrant/.julia/v0.7/SIMD/src/SIMD.jl:345.
│ Use `llvmins(#unused#::Type{Val{:round}}, N, #unused#::Type{T}) where T <: FloatingTypes` instead.
└                                                          @ nothing SIMD.jl:345
┌ Warning: Deprecated syntax `parametric method syntax llvmins{T <: FloatingTypes}(::Type{Val{:sin}}, N, ::Type{T})` around /home/vagrant/.julia/v0.7/SIMD/src/SIMD.jl:347.
│ Use `llvmins(#unused#::Type{Val{:sin}}, N, #unused#::Type{T}) where T <: FloatingTypes` instead.
└                                                          @ nothing SIMD.jl:347
┌ Warning: Deprecated syntax `parametric method syntax llvmins{T <: FloatingTypes}(::Type{Val{:sqrt}}, N, ::Type{T})` around /home/vagrant/.julia/v0.7/SIMD/src/SIMD.jl:349.
│ Use `llvmins(#unused#::Type{Val{:sqrt}}, N, #unused#::Type{T}) where T <: FloatingTypes` instead.
└                                                          @ nothing SIMD.jl:349
┌ Warning: Deprecated syntax `parametric method syntax llvmins{T <: FloatingTypes}(::Type{Val{:trunc}}, N, ::Type{T})` around /home/vagrant/.julia/v0.7/SIMD/src/SIMD.jl:351.
│ Use `llvmins(#unused#::Type{Val{:trunc}}, N, #unused#::Type{T}) where T <: FloatingTypes` instead.
└                                                          @ nothing SIMD.jl:351
┌ Warning: Deprecated syntax `parametric method syntax setindex{N, T, I}(v::Vec{N, T}, x::Number, ::Type{Val{I}})` around /home/vagrant/.julia/v0.7/SIMD/src/SIMD.jl:436.
│ Use `setindex(v::Vec{N, T}, x::Number, #unused#::Type{Val{I}}) where {N, T, I}` instead.
└                                                          @ nothing SIMD.jl:436
┌ Warning: Deprecated syntax `parametric method syntax setindex{N, T}(v::Vec{N, T}, x::Number, i::Int)` around /home/vagrant/.julia/v0.7/SIMD/src/SIMD.jl:453.
│ Use `setindex(v::Vec{N, T}, x::Number, i::Int) where {N, T}` instead.
└                                                          @ nothing SIMD.jl:453
┌ Warning: Deprecated syntax `parametric method syntax setindex{N, T}(v::Vec{N, T}, x::Number, i)` around /home/vagrant/.julia/v0.7/SIMD/src/SIMD.jl:468.
│ Use `setindex(v::Vec{N, T}, x::Number, i) where {N, T}` instead.
└                                                          @ nothing SIMD.jl:468
┌ Warning: Deprecated syntax `parametric method syntax Base.getindex{N, T, I}(v::Vec{N, T}, ::Type{Val{I}})` around /home/vagrant/.julia/v0.7/SIMD/src/SIMD.jl:470.
│ Use `Base.getindex(v::Vec{N, T}, #unused#::Type{Val{I}}) where {N, T, I}` instead.
└                                                          @ nothing SIMD.jl:470
┌ Warning: Deprecated syntax `parametric method syntax Base.getindex{N, T}(v::Vec{N, T}, i)` around /home/vagrant/.julia/v0.7/SIMD/src/SIMD.jl:471.
│ Use `Base.getindex(v::Vec{N, T}, i) where {N, T}` instead.
└                                                          @ nothing SIMD.jl:471
┌ Warning: Deprecated syntax `parametric method syntax Base.reinterpret{N, R, N1, T1}(::Type{Vec{N, R}}, v1::Vec{N1, T1})` around /home/vagrant/.julia/v0.7/SIMD/src/SIMD.jl:477.
│ Use `Base.reinterpret(#unused#::Type{Vec{N, R}}, v1::Vec{N1, T1}) where {N, R, N1, T1}` instead.
└                                                          @ nothing SIMD.jl:477
┌ Warning: Deprecated syntax `parametric method syntax llvmwrap{Op, N, T1, R}(::Type{Val{Op}}, v1::Vec{N, T1}, ::Type{R} = T1)` around /home/vagrant/.julia/v0.7/SIMD/src/SIMD.jl:498.
│ Use `llvmwrap(#s6::Type{Val{Op}}, v1::Vec{N, T1}, #s2::Type{R} = T1) where {Op, N, T1, R}` instead.
└                                                          @ nothing SIMD.jl:498
┌ Warning: Deprecated syntax `parametric method syntax llvmwrap{Op, N}(::Type{Val{Op}}, v1::Vec{N, Bool}, ::Type{Bool} = Bool)` around /home/vagrant/.julia/v0.7/SIMD/src/SIMD.jl:533.
│ Use `llvmwrap(#s7::Type{Val{Op}}, v1::Vec{N, Bool}, #s6::Type{Bool} = Bool) where {Op, N}` instead.
└                                                          @ nothing SIMD.jl:533
┌ Warning: Deprecated syntax `parametric method syntax llvmwrap{Op, N, T1, T2, R}(::Type{Val{Op}}, v1::Vec{N, T1}, v2::Vec{N, T2}, ::Type{R} = T1)` around /home/vagrant/.julia/v0.7/SIMD/src/SIMD.jl:554.
│ Use `llvmwrap(#s7::Type{Val{Op}}, v1::Vec{N, T1}, v2::Vec{N, T2}, #s6::Type{R} = T1) where {Op, N, T1, T2, R}` instead.
└                                                          @ nothing SIMD.jl:554
┌ Warning: Deprecated syntax `parametric method syntax llvmwrap{Op, N, T1, T2}(::Type{Val{Op}}, v1::Vec{N, T1}, v2::Vec{N, T2}, ::Type{Bool})` around /home/vagrant/.julia/v0.7/SIMD/src/SIMD.jl:582.
│ Use `llvmwrap(#unused#::Type{Val{Op}}, v1::Vec{N, T1}, v2::Vec{N, T2}, #unused#::Type{Bool}) where {Op, N, T1, T2}` instead.
└                                                          @ nothing SIMD.jl:582
┌ Warning: Deprecated syntax `parametric method syntax llvmwrap{Op, N}(::Type{Val{Op}}, v1::Vec{N, Bool}, v2::Vec{N, Bool}, ::Type{Bool} = Bool)` around /home/vagrant/.julia/v0.7/SIMD/src/SIMD.jl:648.
│ Use `llvmwrap(#s7::Type{Val{Op}}, v1::Vec{N, Bool}, v2::Vec{N, Bool}, #s6::Type{Bool} = Bool) where {Op, N}` instead.
└                                                          @ nothing SIMD.jl:648
┌ Warning: Deprecated syntax `parametric method syntax llvmwrap{Op, N, T1, T2, T3, R}(::Type{Val{Op}}, v1::Vec{N, T1}, v2::Vec{N, T2}, v3::Vec{N, T3}, ::Type{R} = T1)` around /home/vagrant/.julia/v0.7/SIMD/src/SIMD.jl:670.
│ Use `llvmwrap(#s7::Type{Val{Op}}, v1::Vec{N, T1}, v2::Vec{N, T2}, v3::Vec{N, T3}, #s6::Type{R} = T1) where {Op, N, T1, T2, T3, R}` instead.
└                                                          @ nothing SIMD.jl:670
┌ Warning: Deprecated syntax `parametric method syntax llvmwrapshift{Op, N, T, I}(::Type{Val{Op}}, v1::Vec{N, T}, ::Type{Val{I}})` around /home/vagrant/.julia/v0.7/SIMD/src/SIMD.jl:701.
│ Use `llvmwrapshift(#unused#::Type{Val{Op}}, v1::Vec{N, T}, #unused#::Type{Val{I}}) where {Op, N, T, I}` instead.
└                                                          @ nothing SIMD.jl:701
┌ Warning: Deprecated syntax `parametric method syntax llvmwrapshift{Op, N, T}(::Type{Val{Op}}, v1::Vec{N, T}, x2::Unsigned)` around /home/vagrant/.julia/v0.7/SIMD/src/SIMD.jl:743.
│ Use `llvmwrapshift(#unused#::Type{Val{Op}}, v1::Vec{N, T}, x2::Unsigned) where {Op, N, T}` instead.
└                                                          @ nothing SIMD.jl:743
┌ Warning: Deprecated syntax `parametric method syntax llvmwrapshift{Op, N, T}(::Type{Val{Op}}, v1::Vec{N, T}, x2::Integer)` around /home/vagrant/.julia/v0.7/SIMD/src/SIMD.jl:773.
│ Use `llvmwrapshift(#unused#::Type{Val{Op}}, v1::Vec{N, T}, x2::Integer) where {Op, N, T}` instead.
└                                                          @ nothing SIMD.jl:773
┌ Warning: Deprecated syntax `parametric method syntax llvmwrapshift{Op, N, T, U <: UIntTypes}(::Type{Val{Op}}, v1::Vec{N, T}, v2::Vec{N, U})` around /home/vagrant/.julia/v0.7/SIMD/src/SIMD.jl:796.
│ Use `llvmwrapshift(#unused#::Type{Val{Op}}, v1::Vec{N, T}, v2::Vec{N, U}) where {Op, N, T, U <: UIntTypes}` instead.
└                                                          @ nothing SIMD.jl:796
┌ Warning: Deprecated syntax `parametric method syntax llvmwrapshift{Op, N, T, U <: IntegerTypes}(::Type{Val{Op}}, v1::Vec{N, T}, v2::Vec{N, U})` around /home/vagrant/.julia/v0.7/SIMD/src/SIMD.jl:827.
│ Use `llvmwrapshift(#unused#::Type{Val{Op}}, v1::Vec{N, T}, v2::Vec{N, U}) where {Op, N, T, U <: IntegerTypes}` instead.
└                                                          @ nothing SIMD.jl:827
┌ Warning: Deprecated syntax `parametric method syntax Base.=={N, T}(v1::Vec{N, T}, v2::Vec{N, T})` around /home/vagrant/.julia/v0.7/SIMD/src/SIMD.jl:851.
│ Use `Base.==(v1::Vec{N, T}, v2::Vec{N, T}) where {N, T}` instead.
└                                                          @ nothing SIMD.jl:851
┌ Warning: Deprecated syntax `parametric method syntax Base.!={N, T}(v1::Vec{N, T}, v2::Vec{N, T})` around /home/vagrant/.julia/v0.7/SIMD/src/SIMD.jl:851.
│ Use `Base.!=(v1::Vec{N, T}, v2::Vec{N, T}) where {N, T}` instead.
└                                                          @ nothing SIMD.jl:851
┌ Warning: Deprecated syntax `parametric method syntax Base.<{N, T}(v1::Vec{N, T}, v2::Vec{N, T})` around /home/vagrant/.julia/v0.7/SIMD/src/SIMD.jl:851.
│ Use `Base.<(v1::Vec{N, T}, v2::Vec{N, T}) where {N, T}` instead.
└                                                          @ nothing SIMD.jl:851
┌ Warning: Deprecated syntax `parametric method syntax Base.<={N, T}(v1::Vec{N, T}, v2::Vec{N, T})` around /home/vagrant/.julia/v0.7/SIMD/src/SIMD.jl:851.
│ Use `Base.<=(v1::Vec{N, T}, v2::Vec{N, T}) where {N, T}` instead.
└                                                          @ nothing SIMD.jl:851
┌ Warning: Deprecated syntax `parametric method syntax Base.>{N, T}(v1::Vec{N, T}, v2::Vec{N, T})` around /home/vagrant/.julia/v0.7/SIMD/src/SIMD.jl:851.
│ Use `Base.>(v1::Vec{N, T}, v2::Vec{N, T}) where {N, T}` instead.
└                                                          @ nothing SIMD.jl:851
┌ Warning: Deprecated syntax `parametric method syntax Base.>={N, T}(v1::Vec{N, T}, v2::Vec{N, T})` around /home/vagrant/.julia/v0.7/SIMD/src/SIMD.jl:851.
│ Use `Base.>=(v1::Vec{N, T}, v2::Vec{N, T}) where {N, T}` instead.
└                                                          @ nothing SIMD.jl:851
┌ Warning: Deprecated syntax `parametric method syntax Base.isfinite{N, T <: FloatingTypes}(v1::Vec{N, T})` around /home/vagrant/.julia/v0.7/SIMD/src/SIMD.jl:856.
│ Use `Base.isfinite(v1::Vec{N, T}) where {N, T <: FloatingTypes}` instead.
└                                                          @ nothing SIMD.jl:856
┌ Warning: Deprecated syntax `parametric method syntax Base.isinf{N, T <: FloatingTypes}(v1::Vec{N, T})` around /home/vagrant/.julia/v0.7/SIMD/src/SIMD.jl:861.
│ Use `Base.isinf(v1::Vec{N, T}) where {N, T <: FloatingTypes}` instead.
└                                                          @ nothing SIMD.jl:861
┌ Warning: Deprecated syntax `parametric method syntax Base.isnan{N, T <: FloatingTypes}(v1::Vec{N, T})` around /home/vagrant/.julia/v0.7/SIMD/src/SIMD.jl:862.
│ Use `Base.isnan(v1::Vec{N, T}) where {N, T <: FloatingTypes}` instead.
└                                                          @ nothing SIMD.jl:862
┌ Warning: Deprecated syntax `parametric method syntax Base.issubnormal{N, T <: FloatingTypes}(v1::Vec{N, T})` around /home/vagrant/.julia/v0.7/SIMD/src/SIMD.jl:864.
│ Use `Base.issubnormal(v1::Vec{N, T}) where {N, T <: FloatingTypes}` instead.
└                                                          @ nothing SIMD.jl:864
┌ Warning: Deprecated syntax `parametric method syntax Base.signbit{N, T <: FloatingTypes}(v1::Vec{N, T})` around /home/vagrant/.julia/v0.7/SIMD/src/SIMD.jl:871.
│ Use `Base.signbit(v1::Vec{N, T}) where {N, T <: FloatingTypes}` instead.
└                                                          @ nothing SIMD.jl:871
┌ Warning: Deprecated syntax `parametric method syntax Base.ifelse{N, T}(v1::Vec{N, Bool}, v2::Vec{N, T}, v3::Vec{N, T})` around /home/vagrant/.julia/v0.7/SIMD/src/SIMD.jl:879.
│ Use `Base.ifelse(v1::Vec{N, Bool}, v2::Vec{N, T}, v3::Vec{N, T}) where {N, T}` instead.
└                                                          @ nothing SIMD.jl:879
┌ Warning: Deprecated syntax `parametric method syntax Base.~{N, T <: IntegerTypes}(v1::Vec{N, T})` around /home/vagrant/.julia/v0.7/SIMD/src/SIMD.jl:913.
│ Use `Base.~(v1::Vec{N, T}) where {N, T <: IntegerTypes}` instead.
└                                                          @ nothing SIMD.jl:913
┌ Warning: Deprecated syntax `parametric method syntax Base.+{N, T <: IntegerTypes}(v1::Vec{N, T})` around /home/vagrant/.julia/v0.7/SIMD/src/SIMD.jl:913.
│ Use `Base.+(v1::Vec{N, T}) where {N, T <: IntegerTypes}` instead.
└                                                          @ nothing SIMD.jl:913
┌ Warning: Deprecated syntax `parametric method syntax Base.-{N, T <: IntegerTypes}(v1::Vec{N, T})` around /home/vagrant/.julia/v0.7/SIMD/src/SIMD.jl:913.
│ Use `Base.-(v1::Vec{N, T}) where {N, T <: IntegerTypes}` instead.
└                                                          @ nothing SIMD.jl:913
┌ Warning: Deprecated syntax `parametric method syntax Base.!{N}(v1::Vec{N, Bool})` around /home/vagrant/.julia/v0.7/SIMD/src/SIMD.jl:917.
│ Use `Base.!(v1::Vec{N, Bool}) where N` instead.
└                                                          @ nothing SIMD.jl:917
┌ Warning: Deprecated syntax `parametric method syntax Base.abs{N, T <: IntTypes}(v1::Vec{N, T})` around /home/vagrant/.julia/v0.7/SIMD/src/SIMD.jl:920.
│ Use `Base.abs(v1::Vec{N, T}) where {N, T <: IntTypes}` instead.
└                                                          @ nothing SIMD.jl:920
┌ Warning: Deprecated syntax `parametric method syntax Base.abs{N, T <: UIntTypes}(v1::Vec{N, T})` around /home/vagrant/.julia/v0.7/SIMD/src/SIMD.jl:924.
│ Use `Base.abs(v1::Vec{N, T}) where {N, T <: UIntTypes}` instead.
└                                                          @ nothing SIMD.jl:924
┌ Warning: Deprecated syntax `parametric method syntax Base.sign{N, T <: IntTypes}(v1::Vec{N, T})` around /home/vagrant/.julia/v0.7/SIMD/src/SIMD.jl:928.
│ Use `Base.sign(v1::Vec{N, T}) where {N, T <: IntTypes}` instead.
└                                                          @ nothing SIMD.jl:928
┌ Warning: Deprecated syntax `parametric method syntax Base.sign{N, T <: UIntTypes}(v1::Vec{N, T})` around /home/vagrant/.julia/v0.7/SIMD/src/SIMD.jl:931.
│ Use `Base.sign(v1::Vec{N, T}) where {N, T <: UIntTypes}` instead.
└                                                          @ nothing SIMD.jl:931
┌ Warning: Deprecated syntax `parametric method syntax Base.signbit{N, T <: IntTypes}(v1::Vec{N, T})` around /home/vagrant/.julia/v0.7/SIMD/src/SIMD.jl:933.
│ Use `Base.signbit(v1::Vec{N, T}) where {N, T <: IntTypes}` instead.
└                                                          @ nothing SIMD.jl:933
┌ Warning: Deprecated syntax `parametric method syntax Base.signbit{N, T <: UIntTypes}(v1::Vec{N, T})` around /home/vagrant/.julia/v0.7/SIMD/src/SIMD.jl:934.
│ Use `Base.signbit(v1::Vec{N, T}) where {N, T <: UIntTypes}` instead.
└                                                          @ nothing SIMD.jl:934
┌ Warning: Deprecated syntax `parametric method syntax Base.&{N, T <: IntegerTypes}(v1::Vec{N, T}, v2::Vec{N, T})` around /home/vagrant/.julia/v0.7/SIMD/src/SIMD.jl:938.
│ Use `Base.&(v1::Vec{N, T}, v2::Vec{N, T}) where {N, T <: IntegerTypes}` instead.
└                                                          @ nothing SIMD.jl:938
┌ Warning: Deprecated syntax `parametric method syntax Base.|{N, T <: IntegerTypes}(v1::Vec{N, T}, v2::Vec{N, T})` around /home/vagrant/.julia/v0.7/SIMD/src/SIMD.jl:938.
│ Use `Base.|(v1::Vec{N, T}, v2::Vec{N, T}) where {N, T <: IntegerTypes}` instead.
└                                                          @ nothing SIMD.jl:938
┌ Warning: Deprecated syntax `parametric method syntax Base.${N, T <: IntegerTypes}(v1::Vec{N, T}, v2::Vec{N, T})` around /home/vagrant/.julia/v0.7/SIMD/src/SIMD.jl:938.
│ Use `Base.$(v1::Vec{N, T}, v2::Vec{N, T}) where {N, T <: IntegerTypes}` instead.
└                                                          @ nothing SIMD.jl:938
ERROR: LoadError: UndefVarError: $ not defined
Stacktrace:
 [1] getproperty(::Module, ::Symbol) at ./sysimg.jl:14
 [2] top-level scope at /home/vagrant/.julia/v0.7/SIMD/src/SIMD.jl:938
 [3] eval at ./boot.jl:296 [inlined]
 [4] eval(::Module, ::Expr) at ./sysimg.jl:71
 [5] top-level scope at /home/vagrant/.julia/v0.7/SIMD/src/SIMD.jl:937
 [6] include at ./boot.jl:293 [inlined]
 [7] include_relative(::Module, ::String) at ./loading.jl:521
 [8] include(::Module, ::String) at ./sysimg.jl:26
 [9] top-level scope
 [10] eval at ./boot.jl:296 [inlined]
 [11] top-level scope at ./<missing>:2
in expression starting at /home/vagrant/.julia/v0.7/SIMD/src/SIMD.jl:937
ERROR: LoadError: Failed to precompile SIMD to /home/vagrant/.julia/lib/v0.7/SIMD.ji.
Stacktrace:
 [1] error at ./error.jl:33 [inlined]
 [2] compilecache(::String) at ./loading.jl:648
 [3] compilecache at ./loading.jl:605 [inlined]
 [4] _require(::Symbol) at ./loading.jl:460
 [5] require(::Symbol) at ./loading.jl:333
 [6] include at ./boot.jl:293 [inlined]
 [7] include_relative(::Module, ::String) at ./loading.jl:521
 [8] include(::Module, ::String) at ./sysimg.jl:26
 [9] process_options(::Base.JLOptions) at ./client.jl:324
 [10] _start() at ./client.jl:375
in expression starting at /home/vagrant/.julia/v0.7/SIMD/test/runtests.jl:1
┌ Error: ------------------------------------------------------------
│ # Testing failed for SIMD
│   exception =
│    failed process: Process(`/home/vagrant/julia/bin/julia -Cnative -J/home/vagrant/julia/lib/julia/sys.so --compile=yes --depwarn=yes --code-coverage=none --color=no --compiled-modules=yes --check-bounds=yes --warn-overwrite=yes --startup-file=yes /home/vagrant/.julia/v0.7/SIMD/test/runtests.jl`, ProcessExited(1)) [1]
│    Stacktrace:
│     [1] error(::String, ::Base.Process, ::String, ::Int64, ::String) at ./error.jl:42
│     [2] pipeline_error(::Base.Process) at ./process.jl:707
│     [3] run(::Cmd) at ./process.jl:669
│     [4] (::getfield(Base.Pkg.Entry, Symbol("##91#94")){Bool,String,Array{AbstractString,1}})() at ./pkg/entry.jl:736
│     [5] cd(::getfield(Base.Pkg.Entry, Symbol("##91#94")){Bool,String,Array{AbstractString,1}}, ::String) at ./file.jl:70
│     [6] #test!#90(::Bool, ::Function, ::String, ::Array{AbstractString,1}, ::Array{AbstractString,1}, ::Array{AbstractString,1}) at ./pkg/entry.jl:724
│     [7] (::getfield(Base.Pkg.Entry, Symbol("#kw##test!")))(::NamedTuple{(:coverage,),Tuple{Bool}}, ::typeof(Base.Pkg.Entry.test!), ::String, ::Array{AbstractString,1}, ::Array{AbstractString,1}, ::Array{AbstractString,1}) at ./<missing>:0
│     [8] #test#98(::Bool, ::Function, ::Array{AbstractString,1}) at ./pkg/entry.jl:763
│     [9] (::getfield(Base.Pkg.Entry, Symbol("#kw##test")))(::NamedTuple{(:coverage,),Tuple{Bool}}, ::typeof(Base.Pkg.Entry.test), ::Array{AbstractString,1}) at ./<missing>:0
│     [10] (::getfield(Base.Pkg.Dir, Symbol("##4#7")){Base.Iterators.IndexValue{Symbol,Bool,Tuple{Symbol},NamedTuple{(:coverage,),Tuple{Bool}}},typeof(Base.Pkg.Entry.test),Tuple{Array{AbstractString,1}}})() at ./pkg/dir.jl:36
│     [11] cd(::getfield(Base.Pkg.Dir, Symbol("##4#7")){Base.Iterators.IndexValue{Symbol,Bool,Tuple{Symbol},NamedTuple{(:coverage,),Tuple{Bool}}},typeof(Base.Pkg.Entry.test),Tuple{Array{AbstractString,1}}}, ::String) at ./file.jl:70
│     [12] #cd#1(::Base.Iterators.IndexValue{Symbol,Bool,Tuple{Symbol},NamedTuple{(:coverage,),Tuple{Bool}}}, ::Function, ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N} where N) at ./pkg/dir.jl:36
│     [13] (::getfield(Base.Pkg.Dir, Symbol("#kw##cd")))(::NamedTuple{(:coverage,),Tuple{Bool}}, ::typeof(Base.Pkg.Dir.cd), ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N} where N) at ./<missing>:0
│     [14] #test#3(::Bool, ::Function, ::String, ::Vararg{String,N} where N) at ./pkg/pkg.jl:274
│     [15] test(::String, ::Vararg{String,N} where N) at ./pkg/pkg.jl:274
│     [16] top-level scope
│     [17] eval at ./boot.jl:296 [inlined]
│     [18] eval(::Module, ::Expr) at ./sysimg.jl:71
│     [19] process_options(::Base.JLOptions) at ./client.jl:301
│     [20] _start() at ./client.jl:375
└                                                  @ Base.Pkg.Entry entry.jl:739
ERROR: SIMD had test errors

>>> End of log
