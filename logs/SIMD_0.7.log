>>> 'Pkg.add("SIMD")' log
WARNING: Base.Pkg is deprecated, run `using Pkg` instead
 in module Main
[ Info: Cloning cache of SIMD from https://github.com/eschnett/SIMD.jl.git
[ Info: Installing SIMD v0.3.0
[ Info: Package database updated
┌ Info: METADATA is out-of-date — you may not have the latest version of SIMD
└ Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("SIMD")' log
WARNING: Base.versioninfo is deprecated: it has been moved to the standard library package `InteractiveUtils`.
Add `using InteractiveUtils` to your imports.
 in module Main
WARNING: Base.versioninfo is deprecated: it has been moved to the standard library package `InteractiveUtils`.
Add `using InteractiveUtils` to your imports.
 in module Main
Julia Version 0.7.0-DEV.4941
Commit 9f5351c36a (2018-04-24 14:26 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
      Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-143-generic #192-Ubuntu SMP Tue Feb 27 10:45:36 UTC 2018 x86_64 x86_64
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
              speed         user         nice          sys         idle          irq
       #1  3499 MHz    3016163 s       7250 s     217822 s     828786 s         32 s
       #2  3499 MHz     658708 s        114 s      71040 s    3914993 s          0 s
       
  Memory: 2.939197540283203 GB (566.5390625 MB free)
  Uptime: 47270.0 sec
  Load Avg:  0.94091796875  0.9326171875  0.94287109375
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant
Packages:
  Package Directory: /home/vagrant/.julia/v0.7
  Package Status:
2 required packages:
 - JSON                          0.17.2
 - SIMD                          0.3.0
3 additional packages:
 - Compat                        0.63.0
 - Nullables                     0.0.5
 - tmprMY8fB                     0.0.0-             non-repo (unregistered)
WARNING: Base.Pkg is deprecated, run `using Pkg` instead
 in module Main
[ Info: Testing SIMD
[ Info: Basic definitions
[ Info: Type properties
[ Info: Type conversion
[ Info: Element-wise access
[ Info: Integer arithmetic functions
[ Info: Floating point arithmetic functions
[ Info: Type promotion
[ Info: Reduction operations
[ Info: Load and store functions
WARNING: importing deprecated binding Base.uninitialized into SIMD.
WARNING: Base.uninitialized is deprecated, use undef instead.
  likely near /home/vagrant/.julia/v0.7/SIMD/test/runtests.jl:272
WARNING: Base.uninitialized is deprecated, use undef instead.
  likely near /home/vagrant/.julia/v0.7/SIMD/test/runtests.jl:272
WARNING: Base.uninitialized is deprecated, use undef instead.
  likely near /home/vagrant/.julia/v0.7/SIMD/test/runtests.jl:272
WARNING: Base.uninitialized is deprecated, use undef instead.
  likely near /home/vagrant/.julia/v0.7/SIMD/test/runtests.jl:285
WARNING: Base.uninitialized is deprecated, use undef instead.
  likely near /home/vagrant/.julia/v0.7/SIMD/test/runtests.jl:285
WARNING: Base.uninitialized is deprecated, use undef instead.
  likely near /home/vagrant/.julia/v0.7/SIMD/test/runtests.jl:285
[ Info: Real-world examples
WARNING: Base.@code_llvm is deprecated: it has been moved to the standard library package `InteractiveUtils`.
Add `using InteractiveUtils` to your imports.
  likely near /home/vagrant/.julia/v0.7/SIMD/test/runtests.jl:371
WARNING: Base.@code_native is deprecated: it has been moved to the standard library package `InteractiveUtils`.
Add `using InteractiveUtils` to your imports.
  likely near /home/vagrant/.julia/v0.7/SIMD/test/runtests.jl:371

; Function vsum
; Location: /home/vagrant/.julia/v0.7/SIMD/test/runtests.jl:320
define double @julia_vsum_34625(%jl_value_t addrspace(10)* nonnull dereferenceable(40), %jl_value_t addrspace(10)*) {
top:
  %gcframe4 = alloca [3 x %jl_value_t addrspace(10)*], align 8
  %gcframe4.sub = getelementptr inbounds [3 x %jl_value_t addrspace(10)*], [3 x %jl_value_t addrspace(10)*]* %gcframe4, i64 0, i64 0
  %2 = getelementptr inbounds [3 x %jl_value_t addrspace(10)*], [3 x %jl_value_t addrspace(10)*]* %gcframe4, i64 0, i64 1
  %3 = bitcast %jl_value_t addrspace(10)** %2 to i8*
  call void @llvm.memset.p0i8.i32(i8* %3, i8 0, i32 16, i32 8, i1 false)
  %thread_ptr = call i8* asm "movq %fs:0, $0", "=r"() #4
  %ptls_i8 = getelementptr i8, i8* %thread_ptr, i64 -10920
  %4 = bitcast [3 x %jl_value_t addrspace(10)*]* %gcframe4 to i64*
  store i64 2, i64* %4, align 8
  %5 = getelementptr [3 x %jl_value_t addrspace(10)*], [3 x %jl_value_t addrspace(10)*]* %gcframe4, i64 0, i64 1
  %6 = bitcast i8* %ptls_i8 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = bitcast %jl_value_t addrspace(10)** %5 to i64*
  store i64 %7, i64* %8, align 8
  %9 = bitcast i8* %ptls_i8 to %jl_value_t addrspace(10)***
  store %jl_value_t addrspace(10)** %gcframe4.sub, %jl_value_t addrspace(10)*** %9, align 8
; Function length; {
; Location: abstractarray.jl:165
; Function size; {
; Location: subarray.jl:57
; Function axes; {
; Location: subarray.jl:344
; Function getproperty; {
; Location: sysimg.jl:18
  %10 = addrspacecast %jl_value_t addrspace(10)* %0 to %jl_value_t addrspace(11)*
  %11 = bitcast %jl_value_t addrspace(11)* %10 to i8 addrspace(11)*
  %12 = getelementptr i8, i8 addrspace(11)* %11, i64 8
;}
; Function _indices_sub; {
; Location: subarray.jl:349
; Function unsafe_indices; {
; Location: abstractarray.jl:94
; Function unsafe_length; {
; Location: range.jl:376
; Function last; {
; Location: range.jl:423
; Function getproperty; {
; Location: sysimg.jl:18
  %13 = getelementptr inbounds i8, i8 addrspace(11)* %11, i64 16
  %14 = bitcast i8 addrspace(11)* %13 to i64 addrspace(11)*
;}}
; Function first; {
; Location: range.jl:418
; Function getproperty; {
; Location: sysimg.jl:18
  %15 = bitcast i8 addrspace(11)* %12 to i64 addrspace(11)*
;}}
; Function -; {
; Location: int.jl:52
  %16 = load i64, i64 addrspace(11)* %14, align 8
  %17 = load i64, i64 addrspace(11)* %15, align 8
  %18 = sub i64 %16, %17
;}
; Function +; {
; Location: int.jl:53
  %19 = add i64 %18, 1
;}}
; Function Type; {
; Location: range.jl:197
; Function Type; {
; Location: range.jl:195
; Function max; {
; Location: promotion.jl:435
  %20 = icmp slt i64 %19, 0
  %21 = select i1 %20, i64 0, i64 %19
;}}}}}}}}
; Function ==; {
; Location: promotion.jl:424
  %22 = and i64 %21, 3
;}
  %23 = icmp eq i64 %22, 0
  br i1 %23, label %L46, label %L41

L41:                                              ; preds = %top
; Function Type; {
; Location: boot.jl:289
  %24 = call noalias nonnull %jl_value_t addrspace(10)* @jl_gc_pool_alloc(i8* %ptls_i8, i32 1424, i32 16)
  %25 = bitcast %jl_value_t addrspace(10)* %24 to %jl_value_t addrspace(10)* addrspace(10)*
  %26 = getelementptr %jl_value_t addrspace(10)*, %jl_value_t addrspace(10)* addrspace(10)* %25, i64 -1
  store %jl_value_t addrspace(10)* addrspacecast (%jl_value_t* inttoptr (i64 140286024462112 to %jl_value_t*) to %jl_value_t addrspace(10)*), %jl_value_t addrspace(10)* addrspace(10)* %26, align 8
  store %jl_value_t addrspace(10)* addrspacecast (%jl_value_t* inttoptr (i64 140285940355072 to %jl_value_t*) to %jl_value_t addrspace(10)*), %jl_value_t addrspace(10)* addrspace(10)* %25, align 8
;}
  %27 = addrspacecast %jl_value_t addrspace(10)* %24 to %jl_value_t addrspace(12)*
  %28 = getelementptr [3 x %jl_value_t addrspace(10)*], [3 x %jl_value_t addrspace(10)*]* %gcframe4, i64 0, i64 2
  store %jl_value_t addrspace(10)* %24, %jl_value_t addrspace(10)** %28, align 8
  call void @jl_throw(%jl_value_t addrspace(12)* %27)
  unreachable

L46:                                              ; preds = %top
; Location: /home/vagrant/.julia/v0.7/SIMD/test/runtests.jl:322
; Function Colon; {
; Location: range.jl:23
; Function _colon; {
; Location: range.jl:25
; Function Type; {
; Location: range.jl:165
; Function Type; {
; Location: range.jl:113
  %29 = call i64 @julia_steprange_last_23302(i64 1, i64 4, i64 %21)
;}}}}
; Function done; {
; Location: range.jl:448
; Function isempty; {
; Location: range.jl:337
; Function &; {
; Location: bool.jl:40
  %30 = icmp slt i64 %29, 1
;}}
; Function +; {
; Location: int.jl:53
  %31 = add i64 %29, 4
;}
; Function ==; {
; Location: promotion.jl:424
  %32 = icmp eq i64 %31, 1
;}
; Function |; {
; Location: bool.jl:41
  %33 = zext i1 %30 to i8
  %34 = zext i1 %32 to i8
  %35 = or i8 %34, %33
;}}
  %36 = icmp eq i8 %35, 1
  br i1 %36, label %L228, label %if1.lr.ph

if1.lr.ph:                                        ; preds = %L46
; Location: /home/vagrant/.julia/v0.7/SIMD/test/runtests.jl:323
; Function vload; {
; Location: /home/vagrant/.julia/v0.7/SIMD/src/SIMD.jl:1268
; Function vload; {
; Location: /home/vagrant/.julia/v0.7/SIMD/src/SIMD.jl:1268
; Function pointer; {
; Location: subarray.jl:327
; Function getproperty; {
; Location: sysimg.jl:18
  %37 = bitcast %jl_value_t addrspace(11)* %10 to %jl_value_t addrspace(10)* addrspace(11)*
  %38 = load %jl_value_t addrspace(10)*, %jl_value_t addrspace(10)* addrspace(11)* %37, align 8
  %39 = getelementptr i8, i8 addrspace(11)* %11, i64 24
;}
; Function +; {
; Location: int.jl:53
  %40 = bitcast i8 addrspace(11)* %39 to i64 addrspace(11)*
  %41 = load i64, i64 addrspace(11)* %40, align 8
;}
; Function pointer; {
; Location: abstractarray.jl:898
; Function unsafe_convert; {
; Location: pointer.jl:65
  %42 = addrspacecast %jl_value_t addrspace(10)* %38 to %jl_value_t addrspace(11)*
  %43 = bitcast %jl_value_t addrspace(11)* %42 to i8* addrspace(11)*
  %44 = load i8*, i8* addrspace(11)* %43, align 8
;}}}}}
; Location: /home/vagrant/.julia/v0.7/SIMD/test/runtests.jl:322
  br label %if1

L228.loopexit:                                    ; preds = %if1
; Location: /home/vagrant/.julia/v0.7/SIMD/test/runtests.jl:326
; Function sum; {
; Location: /home/vagrant/.julia/v0.7/SIMD/src/SIMD.jl:1168
; Function llvmwrapreduce; {
; Location: /home/vagrant/.julia/v0.7/SIMD/src/SIMD.jl:1123
; Function @generated body; {
; Location: /home/vagrant/.julia/v0.7/SIMD/src/SIMD.jl:1156
  br label %L228

L228:                                             ; preds = %L228.loopexit, %L46
  %sv.sroa.0.0.lcssa = phi <4 x double> [ zeroinitializer, %L46 ], [ %res.i2, %L228.loopexit ]
  %vec_2_1.i = shufflevector <4 x double> %sv.sroa.0.0.lcssa, <4 x double> undef, <2 x i32> <i32 0, i32 1>
  %vec_2_2.i = shufflevector <4 x double> %sv.sroa.0.0.lcssa, <4 x double> undef, <2 x i32> <i32 2, i32 3>
  %vec_2.i = fadd <2 x double> %vec_2_1.i, %vec_2_2.i
  %vec_1_1.i = shufflevector <2 x double> %vec_2.i, <2 x double> undef, <1 x i32> zeroinitializer
  %vec_1_2.i = shufflevector <2 x double> %vec_2.i, <2 x double> undef, <1 x i32> <i32 1>
  %vec_1.i = fadd <1 x double> %vec_1_1.i, %vec_1_2.i
  %res.i = extractelement <1 x double> %vec_1.i, i32 0
;}}}
  %45 = load i64, i64* %8, align 8
  store i64 %45, i64* %6, align 8
  ret double %res.i

if1:                                              ; preds = %if1.lr.ph, %if1
  %"#temp#.010" = phi i64 [ 1, %if1.lr.ph ], [ %46, %if1 ]
  %sv.sroa.0.09 = phi <4 x double> [ zeroinitializer, %if1.lr.ph ], [ %res.i2, %if1 ]
; Location: /home/vagrant/.julia/v0.7/SIMD/test/runtests.jl:322
; Function next; {
; Location: range.jl:446
; Function +; {
; Location: int.jl:53
  %46 = add i64 %"#temp#.010", 4
;}}
; Location: /home/vagrant/.julia/v0.7/SIMD/test/runtests.jl:323
; Function vload; {
; Location: /home/vagrant/.julia/v0.7/SIMD/src/SIMD.jl:1268
; Function vload; {
; Location: /home/vagrant/.julia/v0.7/SIMD/src/SIMD.jl:1268
; Function pointer; {
; Location: subarray.jl:327
; Function +; {
; Location: int.jl:53
  %47 = add i64 %41, %"#temp#.010"
;}
; Function pointer; {
; Location: abstractarray.jl:898
; Function *; {
; Location: int.jl:54
  %48 = shl i64 %47, 3
  %49 = add i64 %48, -8
;}
; Function +; {
; Location: pointer.jl:155
  %50 = getelementptr i8, i8* %44, i64 %49
;}}}
; Function vload; {
; Location: /home/vagrant/.julia/v0.7/SIMD/src/SIMD.jl:1231
; Function @generated body; {
; Location: /home/vagrant/.julia/v0.7/SIMD/src/SIMD.jl:1255
  %ptr.i = bitcast i8* %50 to <4 x double>*
  %res.i3 = load <4 x double>, <4 x double>* %ptr.i, align 8
;}}}}
; Location: /home/vagrant/.julia/v0.7/SIMD/test/runtests.jl:324
; Function +; {
; Location: /home/vagrant/.julia/v0.7/SIMD/src/SIMD.jl:995
; Function llvmwrap; {
; Location: /home/vagrant/.julia/v0.7/SIMD/src/SIMD.jl:550
; Function llvmwrap; {
; Location: /home/vagrant/.julia/v0.7/SIMD/src/SIMD.jl:550
; Function @generated body; {
; Location: /home/vagrant/.julia/v0.7/SIMD/src/SIMD.jl:569
  %res.i2 = fadd <4 x double> %sv.sroa.0.09, %res.i3
;}}}}
; Location: /home/vagrant/.julia/v0.7/SIMD/test/runtests.jl:322
; Function done; {
; Location: range.jl:448
; Function ==; {
; Location: promotion.jl:424
  %51 = icmp eq i64 %46, %31
;}
; Function |; {
; Location: bool.jl:41
  %52 = zext i1 %51 to i8
  %53 = or i8 %52, %33
;}}
  %54 = icmp eq i8 %53, 1
  br i1 %54, label %L228.loopexit, label %if1
}
	.text
; Function vsum {
; Location: runtests.jl:320
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	subq	$32, %rsp
	movq	%rdi, %r15
	xorpd	%xmm0, %xmm0
	movupd	%xmm0, 16(%rsp)
	movq	%fs:0, %rax
	movq	$2, 8(%rsp)
	movq	-10920(%rax), %rcx
	movq	%rcx, 16(%rsp)
	leaq	8(%rsp), %rcx
	movq	%rcx, -10920(%rax)
	leaq	-10920(%rax), %r14
; Function length; {
; Location: abstractarray.jl:165
; Function size; {
; Location: subarray.jl:57
; Function axes; {
; Location: subarray.jl:344
; Function _indices_sub; {
; Location: subarray.jl:349
; Function unsafe_indices; {
; Location: abstractarray.jl:94
; Function unsafe_length; {
; Location: range.jl:376
; Function -; {
; Location: int.jl:52
	movq	16(%r15), %rax
	subq	8(%r15), %rax
	xorl	%edx, %edx
;}
; Function +; {
; Location: int.jl:53
	addq	$1, %rax
;}}
; Function Type; {
; Location: range.jl:197
; Function Type; {
; Location: range.jl:195
; Function max; {
; Location: promotion.jl:435
	cmovnsq	%rax, %rdx
;}}}}}}}}
	testb	$3, %dl
	jne	L265
; Location: runtests.jl:322
; Function Colon; {
; Location: range.jl:23
; Function _colon; {
; Location: range.jl:25
; Function Type; {
; Location: range.jl:165
; Function Type; {
; Location: range.jl:113
	movabsq	$steprange_last, %rax
	movl	$1, %edi
	movl	$4, %esi
	callq	*%rax
;}}}}
; Function done; {
; Location: range.jl:448
; Function isempty; {
; Location: range.jl:337
; Function &; {
; Location: bool.jl:40
	testq	%rax, %rax
	setle	%cl
	setg	%dl
;}}
; Function ==; {
; Location: promotion.jl:424
	cmpq	$-3, %rax
	setne	%bl
;}}
	andb	%dl, %bl
	cmpb	$1, %bl
	xorpd	%xmm1, %xmm1
	xorpd	%xmm3, %xmm3
	jne	L230
; Location: runtests.jl:323
; Function vload; {
; Location: SIMD.jl:1268
; Function vload; {
; Location: SIMD.jl:1268
; Function pointer; {
; Location: subarray.jl:327
; Function getproperty; {
; Location: sysimg.jl:18
	movq	(%r15), %rsi
;}
; Function +; {
; Location: int.jl:53
	movq	24(%r15), %rdx
;}}}}
; Location: runtests.jl:322
	addq	$-1, %rax
	shlq	$3, %rdx
	addq	(%rsi), %rdx
	xorpd	%xmm1, %xmm1
	xorpd	%xmm3, %xmm3
	nopw	%cs:(%rax,%rax)
; Location: runtests.jl:323
; Function vload; {
; Location: SIMD.jl:1268
; Function vload; {
; Location: SIMD.jl:1268
; Function vload; {
; Location: SIMD.jl:1231
; Function @generated body; {
; Location: SIMD.jl:1255
L192:
	movupd	(%rdx), %xmm0
	movupd	16(%rdx), %xmm2
;}}}}
; Location: runtests.jl:324
; Function +; {
; Location: SIMD.jl:995
; Function llvmwrap; {
; Location: SIMD.jl:550
; Function llvmwrap; {
; Location: SIMD.jl:550
; Function @generated body; {
; Location: SIMD.jl:569
	addpd	%xmm2, %xmm3
	addpd	%xmm0, %xmm1
;}}}}
; Location: runtests.jl:322
; Function done; {
; Location: range.jl:448
; Function ==; {
; Location: promotion.jl:424
	testq	%rax, %rax
	sete	%bl
;}
; Function |; {
; Location: bool.jl:41
	orb	%cl, %bl
;}}
	addq	$-4, %rax
	addq	$32, %rdx
	cmpb	$1, %bl
	jne	L192
; Location: runtests.jl:326
; Function sum; {
; Location: SIMD.jl:1168
; Function llvmwrapreduce; {
; Location: SIMD.jl:1123
; Function @generated body; {
; Location: SIMD.jl:1156
L230:
	addpd	%xmm3, %xmm1
	movapd	%xmm1, %xmm0
	shufpd	$1, %xmm0, %xmm0        # xmm0 = xmm0[1,0]
	addsd	%xmm1, %xmm0
;}}}
	movq	16(%rsp), %rax
	movq	%rax, (%r14)
	addq	$32, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	retq
; Location: runtests.jl:320
; Function Type; {
; Location: boot.jl:289
L265:
	movabsq	$jl_gc_pool_alloc, %rax
	movl	$1424, %esi             # imm = 0x590
	movl	$16, %edx
	movq	%r14, %rdi
	callq	*%rax
	movabsq	$jl_system_image_data, %rcx
	movq	%rcx, -8(%rax)
	movabsq	$140285940355072, %rcx  # imm = 0x7F96DDA45000
	movq	%rcx, (%rax)
	movq	%rax, 24(%rsp)
;}
	movabsq	$jl_throw, %rcx
	movq	%rax, %rdi
	callq	*%rcx
	nopw	%cs:(%rax,%rax)
;}
[ Info: Vector shuffles
[ Info: SIMD tests passed

>>> End of log
