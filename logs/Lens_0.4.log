>>> 'Pkg.add("Lens")' log
INFO: Cloning cache of Docile from git://github.com/MichaelHatherly/Docile.jl.git
INFO: Cloning cache of Lens from git://github.com/zenna/Lens.jl.git
INFO: Installing Docile v0.5.23
INFO: Installing Lens v0.0.3
INFO: Package database updated

>>> 'Pkg.test("Lens")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-121-generic #170-Ubuntu SMP Wed Jun 14 09:04:33 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (523.48046875 MB free)
Uptime: 2264.0 sec
Load Avg:  1.1015625  1.001953125  0.8046875
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz      73899 s         79 s       7343 s     128642 s          5 s
#2  3499 MHz      48470 s         68 s       5804 s     165941 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.9.1
 - Lens                          0.0.3
2 additional packages:
 - Compat                        0.26.0
 - Docile                        0.5.23
INFO: Testing Lens
Running tests:
 * capture.jl
WARNING: module Lens should explicitly import getindex from Base
WARNING: module Lens should explicitly import getindex from Base
 * listener.jl
 * examples/bubblesort.jl
[1,2,0,3]0
[1,0,2,3]1
[0,1,2,3]2
[1,2,0,3]0
Lens.Data(1,:start_of_loop,Dict{Symbol,Any}(:x1=>[1,2,0,3],:x2=>0))[1,0,2,3]1
Lens.Data(1,:start_of_loop,Dict{Symbol,Any}(:x1=>[1,0,2,3],:x2=>1))[0,1,2,3]2
Lens.Data(1,:start_of_loop,Dict{Symbol,Any}(:x1=>[0,1,2,3],:x2=>2))on 0-th iteration the first element is 0
on 1-th iteration the first element is 1
on 2-th iteration the first element is 2
INFO: Lens tests passed

>>> End of log
