>>> 'Pkg.add("CxxWrap")' log
INFO: Cloning cache of CxxWrap from https://github.com/JuliaInterop/CxxWrap.jl.git
INFO: Installing BinDeps v0.6.0
INFO: Installing CxxWrap v0.4.1
INFO: Installing SHA v0.3.3
INFO: Installing URIParser v0.1.8
INFO: Building CxxWrap
INFO: Attempting to Create directory /home/vagrant/.julia/v0.6/CxxWrap/deps/builds/jlcxx
INFO: Changing Directory to /home/vagrant/.julia/v0.6/CxxWrap/deps/builds/jlcxx
INFO: Package database updated
INFO: METADATA is out-of-date — you may not have the latest version of CxxWrap
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("CxxWrap")' log
Julia Version 0.6.0
Commit 9036443 (2017-06-19 13:05 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-121-generic #170-Ubuntu SMP Wed Jun 14 09:04:33 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1377.32421875 MB free)
Uptime: 39289.0 sec
Load Avg:  1.6259765625  1.666015625  1.75537109375
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz    2587630 s       3053 s     115599 s     661116 s         37 s
#2  3500 MHz     776232 s       2684 s      71902 s    2995808 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.6
2 required packages:
 - CxxWrap                       0.4.1
 - JSON                          0.12.0
4 additional packages:
 - BinDeps                       0.6.0
 - Compat                        0.26.0
 - SHA                           0.3.3
 - URIParser                     0.1.8
INFO: Testing CxxWrap
running test containers.jl...
Displaying const matrix
3×2 CxxWrap.ConstArray{Float64,2}:
 1.0  4.0
 2.0  5.0
 3.0  6.0
Displaying mutable matrix
3×2 Array{Float64,2}:
 1.0  4.0
 2.0  5.0
 3.0  6.0
running test except.jl...
exception 1
exception 2
exception 3
running test extended_module.jl...
running test functions.jl...
methods(CppHalfFunctions.half_d) = # 1 method for generic function "half_d":
half_d(arg1::Union{Float64, Int64}) in CppHalfFunctions
c_func = safe_cfunction(testf, Float64, (Float64, Float64)) = CxxWrap.SafeCFunction(Ptr{Void} @0x00007fdb5beca6a0, Float64, Type[Float64, Float64])
callback result for function 0x7fdb5beca6a0 is 3
callback result for function 0x7fdb5beca6a0 is 3
---- Half test timings ----
Julia test:
  0.098657 seconds (85 allocations: 6.873 KiB)
  0.115449 seconds (4 allocations: 160 bytes)
  0.086762 seconds (4 allocations: 160 bytes)
C test:
  0.133205 seconds (4 allocations: 160 bytes)
  0.135212 seconds (4 allocations: 160 bytes)
  0.099911 seconds (4 allocations: 160 bytes)
C++ test:
  0.111052 seconds (4 allocations: 160 bytes)
  0.104940 seconds (4 allocations: 160 bytes)
  0.132118 seconds (4 allocations: 160 bytes)
C++ lambda test:
  0.204735 seconds (4 allocations: 160 bytes)
  0.201660 seconds (4 allocations: 160 bytes)
  0.174049 seconds (4 allocations: 160 bytes)
C++ test, loop in the C++ code:
  0.094734 seconds (23 allocations: 1.609 KiB)
  0.082417 seconds (4 allocations: 160 bytes)
  0.086384 seconds (4 allocations: 160 bytes)
cfunction in C++ loop
  0.456960 seconds (1.21 k allocations: 66.921 KiB)
  0.469050 seconds (4 allocations: 160 bytes)
  0.426082 seconds (4 allocations: 160 bytes)
jl_call inside C++ loop (array is 100 times smaller than other tests):
  0.154307 seconds (1.00 M allocations: 15.311 MiB, 63.17% gc time)
  0.067482 seconds (1.00 M allocations: 15.259 MiB)
  0.153246 seconds (1.00 M allocations: 15.259 MiB, 56.98% gc time)
running test hello.jl...
CppHello.greet() = "hello, world"
running test inheritance.jl...
running test parametric.jl...
Dumping object p1:
TemplateTypeAllocated{P1,P2}
  cpp_object: Ptr{Void} Ptr{Void} @0x000000000397d800
running test types.jl...
Dumping type w...
WorldAllocated
  cpp_object: Ptr{Void} Ptr{Void} @0x00000000039a4950
fw = CppTypes.world_factory() = WorldRef(Ptr{Void} @0x00000000038031a0)
uwf = CppTypes.unique_world_factory() = CxxWrap.SmartPointerWithDeref{World,0xef6180661ff0d2b6,Ptr{Void} @0x00007fdb26a5acb0,Ptr{Void} @0x00007fdb26a5c280,Ptr{Void} @0x00007fdb26a5c270}(Ptr{Void} @0x00000000045af600)
Destroying World with message world by value hello
CppTypes.greet(w) = "hello"
Destroying World with message constructed
finalized w
throw test 1 passed
throw test 2 passed
completed deepcopy test
a: 2.0, b: 3.0
Destroying World with message hello
Destroying World with message shared factory hello
Destroying World with message unique factory hello
Destroying World with message world by value hello
Destroying World with message constructed
Destroying World with message default hello
Destroying World with message boxed world pointer
Destroying World with message boxed world
INFO: CxxWrap tests passed

>>> End of log
