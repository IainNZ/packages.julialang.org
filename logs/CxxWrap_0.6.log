>>> 'Pkg.add("CxxWrap")' log
INFO: Cloning cache of CxxWrap from https://github.com/JuliaInterop/CxxWrap.jl.git
INFO: Installing BinDeps v0.7.0
INFO: Installing CxxWrap v0.5.0
INFO: Installing SHA v0.3.3
INFO: Installing URIParser v0.1.8
INFO: Building CxxWrap
INFO: Attempting to Create directory /home/vagrant/.julia/v0.6/CxxWrap/deps/builds/jlcxx
INFO: Changing Directory to /home/vagrant/.julia/v0.6/CxxWrap/deps/builds/jlcxx
INFO: Package database updated
INFO: METADATA is out-of-date — you may not have the latest version of CxxWrap
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("CxxWrap")' log
Julia Version 0.6.0
Commit 9036443 (2017-06-19 13:05 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-121-generic #170-Ubuntu SMP Wed Jun 14 09:04:33 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1353.484375 MB free)
Uptime: 40109.0 sec
Load Avg:  1.6591796875  1.73974609375  1.7783203125
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3501 MHz    2557526 s       5714 s     113900 s     784358 s         32 s
#2  3501 MHz     863575 s       1186 s      73340 s    2971536 s          2 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.6
2 required packages:
 - CxxWrap                       0.5.0
 - JSON                          0.13.0
4 additional packages:
 - BinDeps                       0.7.0
 - Compat                        0.28.0
 - SHA                           0.3.3
 - URIParser                     0.1.8
INFO: Testing CxxWrap
Displaying const matrix
3×2 CxxWrap.ConstArray{Float64,2}:
 1.0  4.0
 2.0  5.0
 3.0  6.0
Displaying mutable matrix
3×2 Array{Float64,2}:
 1.0  4.0
 2.0  5.0
 3.0  6.0
exception 1
exception 2
exception 3
methods(CppHalfFunctions.half_d) = # 1 method for generic function "half_d":
half_d(arg1::Union{Float64, Int64, Irrational}) in CppHalfFunctions
c_func = safe_cfunction(testf, Float64, (Float64, Float64)) = CxxWrap.SafeCFunction(Ptr{Void} @0x00007f7a114d29d0, Float64, Type[Float64, Float64])
callback result for function 0x7f7a114d29d0 is 3
callback result for function 0x7f7a114d29d0 is 3
---- Half test timings ----
Julia test:
  0.074458 seconds (85 allocations: 6.873 KiB)
  0.080008 seconds (4 allocations: 160 bytes)
  0.079294 seconds (4 allocations: 160 bytes)
C test:
  0.127863 seconds (4 allocations: 160 bytes)
  0.105879 seconds (4 allocations: 160 bytes)
  0.132840 seconds (4 allocations: 160 bytes)
C++ test:
  0.131674 seconds (4 allocations: 160 bytes)
  0.131425 seconds (4 allocations: 160 bytes)
  0.130253 seconds (4 allocations: 160 bytes)
C++ lambda test:
  0.202082 seconds (4 allocations: 160 bytes)
  0.199658 seconds (4 allocations: 160 bytes)
  0.160047 seconds (4 allocations: 160 bytes)
C++ test, loop in the C++ code:
  0.075640 seconds (23 allocations: 1.609 KiB)
  0.072400 seconds (4 allocations: 160 bytes)
  0.072649 seconds (4 allocations: 160 bytes)
cfunction in C++ loop
  0.447731 seconds (1.21 k allocations: 66.921 KiB)
  0.481822 seconds (4 allocations: 160 bytes)
  0.356794 seconds (4 allocations: 160 bytes)
jl_call inside C++ loop (array is 100 times smaller than other tests):
  0.106960 seconds (1.00 M allocations: 15.311 MiB, 67.33% gc time)
  0.035892 seconds (1.00 M allocations: 15.259 MiB)
  0.098340 seconds (1.00 M allocations: 15.259 MiB, 65.61% gc time)
CppHello.greet() = "hello, world"
Dumping object p1:
TemplateTypeAllocated{P1,P2}
  cpp_object: Ptr{Void} Ptr{Void} @0x0000000003e75bd0
Dumping type w...
WorldAllocated
  cpp_object: Ptr{Void} Ptr{Void} @0x00000000047a1870
fw = CppTypes.world_factory() = WorldRef(Ptr{Void} @0x0000000003ea94d0)
uwf = CppTypes.unique_world_factory() = CxxWrap.SmartPointerWithDeref{World,0xef6180661ff0d2b6,Ptr{Void} @0x00007f79d8047640,Ptr{Void} @0x00007f79d8048d50,Ptr{Void} @0x00007f79d8048d40}(Ptr{Void} @0x0000000003d6c120)
Destroying World with message world by value hello
CppTypes.greet(w) = "hello"
Destroying World with message constructed
finalized w
throw test 1 passed
throw test 2 passed
completed deepcopy test
a: 2.0, b: 3.0
Test Summary: | Pass  Total
CxxWrap tests |  154    154
Destroying World with message hello
Destroying World with message shared factory hello
Destroying World with message unique factory hello
Destroying World with message world by value hello
Destroying World with message constructed
Destroying World with message default hello
Destroying World with message boxed world pointer
Destroying World with message boxed world
INFO: CxxWrap tests passed

>>> End of log
