>>> 'Pkg.add("CxxWrap")' log
INFO: Cloning cache of CxxWrap from https://github.com/JuliaInterop/CxxWrap.jl.git
INFO: Installing BinDeps v0.7.0
INFO: Installing CxxWrap v0.5.0
INFO: Installing SHA v0.3.3
INFO: Installing URIParser v0.1.8
INFO: Building CxxWrap
INFO: Attempting to Create directory /home/vagrant/.julia/v0.6/CxxWrap/deps/builds/jlcxx
INFO: Changing Directory to /home/vagrant/.julia/v0.6/CxxWrap/deps/builds/jlcxx
INFO: Package database updated

>>> 'Pkg.test("CxxWrap")' log
Julia Version 0.6.0
Commit 9036443 (2017-06-19 13:05 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-121-generic #170-Ubuntu SMP Wed Jun 14 09:04:33 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1345.8984375 MB free)
Uptime: 40572.0 sec
Load Avg:  1.5283203125  1.67138671875  1.7607421875
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz    2600458 s       4814 s     128921 s     738323 s         40 s
#2  3500 MHz     855810 s       3604 s      76145 s    3023617 s          2 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.6
2 required packages:
 - CxxWrap                       0.5.0
 - JSON                          0.13.0
4 additional packages:
 - BinDeps                       0.7.0
 - Compat                        0.28.0
 - SHA                           0.3.3
 - URIParser                     0.1.8
INFO: Testing CxxWrap
Displaying const matrix
3×2 CxxWrap.ConstArray{Float64,2}:
 1.0  4.0
 2.0  5.0
 3.0  6.0
Displaying mutable matrix
3×2 Array{Float64,2}:
 1.0  4.0
 2.0  5.0
 3.0  6.0
exception 1
exception 2
exception 3
methods(CppHalfFunctions.half_d) = # 1 method for generic function "half_d":
half_d(arg1::Union{Float64, Int64, Irrational}) in CppHalfFunctions
c_func = safe_cfunction(testf, Float64, (Float64, Float64)) = CxxWrap.SafeCFunction(Ptr{Void} @0x00007f321adbaa90, Float64, Type[Float64, Float64])
callback result for function 0x7f321adbaa90 is 3
callback result for function 0x7f321adbaa90 is 3
---- Half test timings ----
Julia test:
  0.100504 seconds (85 allocations: 6.873 KiB)
  0.099679 seconds (4 allocations: 160 bytes)
  0.108452 seconds (4 allocations: 160 bytes)
C test:
  0.123468 seconds (4 allocations: 160 bytes)
  0.155584 seconds (4 allocations: 160 bytes)
  0.143110 seconds (4 allocations: 160 bytes)
C++ test:
  0.147733 seconds (4 allocations: 160 bytes)
  0.121204 seconds (4 allocations: 160 bytes)
  0.137217 seconds (4 allocations: 160 bytes)
C++ lambda test:
  0.199122 seconds (4 allocations: 160 bytes)
  0.203959 seconds (4 allocations: 160 bytes)
  0.211422 seconds (4 allocations: 160 bytes)
C++ test, loop in the C++ code:
  0.129240 seconds (23 allocations: 1.609 KiB)
  0.106410 seconds (4 allocations: 160 bytes)
  0.099628 seconds (4 allocations: 160 bytes)
cfunction in C++ loop
  0.438065 seconds (1.21 k allocations: 66.921 KiB)
  0.436549 seconds (4 allocations: 160 bytes)
  0.428577 seconds (4 allocations: 160 bytes)
jl_call inside C++ loop (array is 100 times smaller than other tests):
  0.189664 seconds (1.00 M allocations: 15.311 MiB, 64.75% gc time)
  0.066292 seconds (1.00 M allocations: 15.259 MiB)
  0.171428 seconds (1.00 M allocations: 15.259 MiB, 62.74% gc time)
CppHello.greet() = "hello, world"
Dumping object p1:
TemplateTypeAllocated{P1,P2}
  cpp_object: Ptr{Void} Ptr{Void} @0x0000000003dbdeb0
Dumping type w...
WorldAllocated
  cpp_object: Ptr{Void} Ptr{Void} @0x000000000340d9b0
fw = CppTypes.world_factory() = WorldRef(Ptr{Void} @0x0000000003dee740)
uwf = CppTypes.unique_world_factory() = CxxWrap.SmartPointerWithDeref{World,0xef6180661ff0d2b6,Ptr{Void} @0x00007f31e192f640,Ptr{Void} @0x00007f31e1930d50,Ptr{Void} @0x00007f31e1930d40}(Ptr{Void} @0x0000000003dcf5d0)
Destroying World with message world by value hello
CppTypes.greet(w) = "hello"
Destroying World with message constructed
finalized w
throw test 1 passed
throw test 2 passed
completed deepcopy test
a: 2.0, b: 3.0
Test Summary: | Pass  Total
CxxWrap tests |  154    154
Destroying World with message hello
Destroying World with message shared factory hello
Destroying World with message unique factory hello
Destroying World with message world by value hello
Destroying World with message constructed
Destroying World with message default hello
Destroying World with message boxed world pointer
Destroying World with message boxed world
INFO: CxxWrap tests passed

>>> End of log
