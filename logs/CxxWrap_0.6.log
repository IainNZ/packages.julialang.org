>>> 'Pkg.add("CxxWrap")' log
INFO: Cloning cache of CxxWrap from https://github.com/JuliaInterop/CxxWrap.jl.git
INFO: Installing BinDeps v0.6.0
INFO: Installing CxxWrap v0.4.0
INFO: Installing SHA v0.3.3
INFO: Installing URIParser v0.1.8
INFO: Building CxxWrap
INFO: Attempting to Create directory /home/vagrant/.julia/v0.6/CxxWrap/deps/builds/jlcxx
INFO: Changing Directory to /home/vagrant/.julia/v0.6/CxxWrap/deps/builds/jlcxx
INFO: Package database updated

>>> 'Pkg.test("CxxWrap")' log
Julia Version 0.6.0-rc2.0
Commit 68e911b (2017-05-18 02:31 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-119-generic #166-Ubuntu SMP Wed May 3 12:18:55 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1352.58984375 MB free)
Uptime: 36386.0 sec
Load Avg:  1.37451171875  1.64111328125  1.7392578125
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3492 MHz    2393993 s        126 s     114115 s     580232 s         44 s
#2  3492 MHz     686730 s       6077 s      66820 s    2790707 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.6
2 required packages:
 - CxxWrap                       0.4.0
 - JSON                          0.12.0
4 additional packages:
 - BinDeps                       0.6.0
 - Compat                        0.25.2
 - SHA                           0.3.3
 - URIParser                     0.1.8
INFO: Testing CxxWrap
running test containers.jl...
Displaying const matrix
3×2 CxxWrap.ConstArray{Float64,2}:
 1.0  4.0
 2.0  5.0
 3.0  6.0
Displaying mutable matrix
3×2 Array{Float64,2}:
 1.0  4.0
 2.0  5.0
 3.0  6.0
running test except.jl...
exception 1
exception 2
exception 3
running test extended_module.jl...
running test functions.jl...
methods(CppHalfFunctions.half_d) = # 1 method for generic function "half_d":
half_d(arg1::Union{Float64, Int64}) in CppHalfFunctions
c_func = safe_cfunction(testf, Float64, (Float64, Float64)) = CxxWrap.SafeCFunction(Ptr{Void} @0x00007ffb769764c0, Float64, Type[Float64, Float64])
callback result for function 0x7ffb769764c0 is 3
callback result for function 0x7ffb769764c0 is 3
---- Half test timings ----
Julia test:
  0.076709 seconds (85 allocations: 6.873 KiB)
  0.076927 seconds (4 allocations: 160 bytes)
  0.079545 seconds (4 allocations: 160 bytes)
C test:
  0.096368 seconds (4 allocations: 160 bytes)
  0.098138 seconds (4 allocations: 160 bytes)
  0.108516 seconds (4 allocations: 160 bytes)
C++ test:
  0.107917 seconds (4 allocations: 160 bytes)
  0.093984 seconds (4 allocations: 160 bytes)
  0.104600 seconds (4 allocations: 160 bytes)
C++ lambda test:
  0.203764 seconds (4 allocations: 160 bytes)
  0.177263 seconds (4 allocations: 160 bytes)
  0.179398 seconds (4 allocations: 160 bytes)
C++ test, loop in the C++ code:
  0.077106 seconds (23 allocations: 1.609 KiB)
  0.076293 seconds (4 allocations: 160 bytes)
  0.080677 seconds (4 allocations: 160 bytes)
cfunction in C++ loop
  0.277431 seconds (1.21 k allocations: 66.921 KiB)
  0.302511 seconds (4 allocations: 160 bytes)
  0.269656 seconds (4 allocations: 160 bytes)
jl_call inside C++ loop (array is 100 times smaller than other tests):
  0.125466 seconds (1.00 M allocations: 15.311 MiB, 52.01% gc time)
  0.065083 seconds (1.00 M allocations: 15.259 MiB)
  0.154722 seconds (1.00 M allocations: 15.259 MiB, 59.62% gc time)
running test hello.jl...
CppHello.greet() = "hello, world"
running test inheritance.jl...
running test parametric.jl...
Dumping object p1:
TemplateTypeAllocated{P1,P2}
  cpp_object: Ptr{Void} Ptr{Void} @0x0000000003888370
running test types.jl...
Dumping type w...
WorldAllocated
  cpp_object: Ptr{Void} Ptr{Void} @0x0000000003991540
fw = CppTypes.world_factory() = WorldRef(Ptr{Void} @0x0000000003bdd530)
uwf = CppTypes.unique_world_factory() = CxxWrap.SmartPointerWithDeref{World,0xef6180661ff0d2b6,Ptr{Void} @0x00007ffb41509cb0,Ptr{Void} @0x00007ffb4150b280,Ptr{Void} @0x00007ffb4150b270}(Ptr{Void} @0x0000000003689be0)
Destroying World with message world by value hello
CppTypes.greet(w) = "hello"
Destroying World with message constructed
finalized w
throw test 1 passed
throw test 2 passed
completed deepcopy test
a: 2.0, b: 3.0
Destroying World with message hello
Destroying World with message shared factory hello
Destroying World with message unique factory hello
Destroying World with message world by value hello
Destroying World with message constructed
Destroying World with message default hello
Destroying World with message boxed world pointer
Destroying World with message boxed world
INFO: CxxWrap tests passed

>>> End of log
