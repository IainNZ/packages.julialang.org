>>> 'Pkg.add("CxxWrap")' log
INFO: Cloning cache of CxxWrap from https://github.com/JuliaInterop/CxxWrap.jl.git
INFO: Installing BinDeps v0.6.0
INFO: Installing CxxWrap v0.4.1
INFO: Installing SHA v0.3.3
INFO: Installing URIParser v0.1.8
INFO: Building CxxWrap
INFO: Attempting to Create directory /home/vagrant/.julia/v0.6/CxxWrap/deps/builds/jlcxx
INFO: Changing Directory to /home/vagrant/.julia/v0.6/CxxWrap/deps/builds/jlcxx
INFO: Package database updated
INFO: METADATA is out-of-date — you may not have the latest version of CxxWrap
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("CxxWrap")' log
Julia Version 0.6.0
Commit 9036443 (2017-06-19 13:05 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-121-generic #170-Ubuntu SMP Wed Jun 14 09:04:33 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1416.19140625 MB free)
Uptime: 39059.0 sec
Load Avg:  1.67041015625  1.71142578125  1.79150390625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz    2516820 s       5288 s     128593 s     672885 s         36 s
#2  3500 MHz     836649 s         40 s      83356 s    2884821 s          2 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.6
2 required packages:
 - CxxWrap                       0.4.1
 - JSON                          0.12.0
4 additional packages:
 - BinDeps                       0.6.0
 - Compat                        0.26.0
 - SHA                           0.3.3
 - URIParser                     0.1.8
INFO: Testing CxxWrap
running test containers.jl...
Displaying const matrix
3×2 CxxWrap.ConstArray{Float64,2}:
 1.0  4.0
 2.0  5.0
 3.0  6.0
Displaying mutable matrix
3×2 Array{Float64,2}:
 1.0  4.0
 2.0  5.0
 3.0  6.0
running test except.jl...
exception 1
exception 2
exception 3
running test extended_module.jl...
running test functions.jl...
methods(CppHalfFunctions.half_d) = # 1 method for generic function "half_d":
half_d(arg1::Union{Float64, Int64}) in CppHalfFunctions
c_func = safe_cfunction(testf, Float64, (Float64, Float64)) = CxxWrap.SafeCFunction(Ptr{Void} @0x00007f3b028cd760, Float64, Type[Float64, Float64])
callback result for function 0x7f3b028cd760 is 3
callback result for function 0x7f3b028cd760 is 3
---- Half test timings ----
Julia test:
  0.079757 seconds (85 allocations: 6.873 KiB)
  0.087874 seconds (4 allocations: 160 bytes)
  0.081660 seconds (4 allocations: 160 bytes)
C test:
  0.105811 seconds (4 allocations: 160 bytes)
  0.117378 seconds (4 allocations: 160 bytes)
  0.108980 seconds (4 allocations: 160 bytes)
C++ test:
  0.103211 seconds (4 allocations: 160 bytes)
  0.123706 seconds (4 allocations: 160 bytes)
  0.132604 seconds (4 allocations: 160 bytes)
C++ lambda test:
  0.174763 seconds (4 allocations: 160 bytes)
  0.147372 seconds (4 allocations: 160 bytes)
  0.170526 seconds (4 allocations: 160 bytes)
C++ test, loop in the C++ code:
  0.086678 seconds (23 allocations: 1.609 KiB)
  0.084442 seconds (4 allocations: 160 bytes)
  0.090759 seconds (4 allocations: 160 bytes)
cfunction in C++ loop
  0.389355 seconds (1.21 k allocations: 66.921 KiB)
  0.415033 seconds (4 allocations: 160 bytes)
  0.360273 seconds (4 allocations: 160 bytes)
jl_call inside C++ loop (array is 100 times smaller than other tests):
  0.125971 seconds (1.00 M allocations: 15.311 MiB, 61.31% gc time)
  0.059459 seconds (1.00 M allocations: 15.259 MiB)
  0.162852 seconds (1.00 M allocations: 15.259 MiB, 59.04% gc time)
running test hello.jl...
CppHello.greet() = "hello, world"
running test inheritance.jl...
running test parametric.jl...
Dumping object p1:
TemplateTypeAllocated{P1,P2}
  cpp_object: Ptr{Void} Ptr{Void} @0x000000000253c470
running test types.jl...
Dumping type w...
WorldAllocated
  cpp_object: Ptr{Void} Ptr{Void} @0x0000000000947e70
fw = CppTypes.world_factory() = WorldRef(Ptr{Void} @0x0000000002503e60)
uwf = CppTypes.unique_world_factory() = CxxWrap.SmartPointerWithDeref{World,0xef6180661ff0d2b6,Ptr{Void} @0x00007f3ac9459cb0,Ptr{Void} @0x00007f3ac945b280,Ptr{Void} @0x00007f3ac945b270}(Ptr{Void} @0x00000000028924b0)
Destroying World with message world by value hello
CppTypes.greet(w) = "hello"
Destroying World with message constructed
finalized w
throw test 1 passed
throw test 2 passed
completed deepcopy test
a: 2.0, b: 3.0
Destroying World with message hello
Destroying World with message shared factory hello
Destroying World with message unique factory hello
Destroying World with message world by value hello
Destroying World with message constructed
Destroying World with message default hello
Destroying World with message boxed world pointer
Destroying World with message boxed world
INFO: CxxWrap tests passed

>>> End of log
