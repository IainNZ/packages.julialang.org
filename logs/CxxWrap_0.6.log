>>> 'Pkg.add("CxxWrap")' log
INFO: Cloning cache of CxxWrap from https://github.com/JuliaInterop/CxxWrap.jl.git
INFO: Installing BinDeps v0.6.0
INFO: Installing CxxWrap v0.5.0
INFO: Installing SHA v0.5.1
INFO: Installing URIParser v0.2.0
INFO: Building CxxWrap
INFO: Attempting to Create directory /home/vagrant/.julia/v0.6/CxxWrap/deps/builds/jlcxx
INFO: Changing Directory to /home/vagrant/.julia/v0.6/CxxWrap/deps/builds/jlcxx
INFO: Package database updated

>>> 'Pkg.test("CxxWrap")' log
Julia Version 0.6.0
Commit 9036443 (2017-06-19 13:05 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-128-generic #177-Ubuntu SMP Tue Aug 8 11:40:23 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1455.25390625 MB free)
Uptime: 39607.0 sec
Load Avg:  1.59521484375  1.79638671875  1.81787109375
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3492 MHz    2570154 s       1312 s     121527 s     713360 s         30 s
#2  3492 MHz     846155 s       5135 s      66326 s    2958491 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.6
2 required packages:
 - CxxWrap                       0.5.0
 - JSON                          0.13.0
4 additional packages:
 - BinDeps                       0.6.0
 - Compat                        0.30.0
 - SHA                           0.5.1
 - URIParser                     0.2.0
INFO: Testing CxxWrap
Displaying const matrix
3×2 CxxWrap.ConstArray{Float64,2}:
 1.0  4.0
 2.0  5.0
 3.0  6.0
Displaying mutable matrix
3×2 Array{Float64,2}:
 1.0  4.0
 2.0  5.0
 3.0  6.0
exception 1
exception 2
exception 3
methods(CppHalfFunctions.half_d) = # 1 method for generic function "half_d":
half_d(arg1::Union{Float64, Int64, Irrational}) in CppHalfFunctions
c_func = safe_cfunction(testf, Float64, (Float64, Float64)) = CxxWrap.SafeCFunction(Ptr{Void} @0x00007f7ee35fdaa0, Float64, Type[Float64, Float64])
callback result for function 0x7f7ee35fdaa0 is 3
callback result for function 0x7f7ee35fdaa0 is 3
---- Half test timings ----
Julia test:
  0.083234 seconds (85 allocations: 6.873 KiB)
  0.088485 seconds (4 allocations: 160 bytes)
  0.086763 seconds (4 allocations: 160 bytes)
C test:
  0.129560 seconds (4 allocations: 160 bytes)
  0.129541 seconds (4 allocations: 160 bytes)
  0.130674 seconds (4 allocations: 160 bytes)
C++ test:
  0.130555 seconds (4 allocations: 160 bytes)
  0.129353 seconds (4 allocations: 160 bytes)
  0.128529 seconds (4 allocations: 160 bytes)
C++ lambda test:
  0.197198 seconds (4 allocations: 160 bytes)
  0.160374 seconds (4 allocations: 160 bytes)
  0.175081 seconds (4 allocations: 160 bytes)
C++ test, loop in the C++ code:
  0.086730 seconds (23 allocations: 1.609 KiB)
  0.083538 seconds (4 allocations: 160 bytes)
  0.081713 seconds (4 allocations: 160 bytes)
cfunction in C++ loop
  0.337767 seconds (1.21 k allocations: 66.921 KiB)
  0.316271 seconds (4 allocations: 160 bytes)
  0.306036 seconds (4 allocations: 160 bytes)
jl_call inside C++ loop (array is 100 times smaller than other tests):
  0.145489 seconds (1.00 M allocations: 15.311 MiB, 63.47% gc time)
  0.065620 seconds (1.00 M allocations: 15.259 MiB)
  0.158140 seconds (1.00 M allocations: 15.259 MiB, 60.76% gc time)
CppHello.greet() = "hello, world"
Dumping object p1:
TemplateTypeAllocated{P1,P2}
  cpp_object: Ptr{Void} Ptr{Void} @0x00000000046b7200
Dumping type w...
WorldAllocated
  cpp_object: Ptr{Void} Ptr{Void} @0x000000000354e5d0
fw = CppTypes.world_factory() = WorldRef(Ptr{Void} @0x0000000004f545d0)
uwf = CppTypes.unique_world_factory() = CxxWrap.SmartPointerWithDeref{World,0xef6180661ff0d2b6,Ptr{Void} @0x00007f7eaa172640,Ptr{Void} @0x00007f7eaa173d50,Ptr{Void} @0x00007f7eaa173d40}(Ptr{Void} @0x00000000044912e0)
Destroying World with message world by value hello
CppTypes.greet(w) = "hello"
Destroying World with message constructed
finalized w
throw test 1 passed
throw test 2 passed
completed deepcopy test
a: 2.0, b: 3.0
Test Summary: | Pass  Total
CxxWrap tests |  154    154
Destroying World with message hello
Destroying World with message shared factory hello
Destroying World with message unique factory hello
Destroying World with message world by value hello
Destroying World with message constructed
Destroying World with message default hello
Destroying World with message boxed world pointer
Destroying World with message boxed world
INFO: CxxWrap tests passed

>>> End of log
