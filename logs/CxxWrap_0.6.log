>>> 'Pkg.add("CxxWrap")' log
INFO: Cloning cache of CxxWrap from https://github.com/JuliaInterop/CxxWrap.jl.git
INFO: Installing BinDeps v0.6.0
INFO: Installing CxxWrap v0.4.1
INFO: Installing SHA v0.3.3
INFO: Installing URIParser v0.1.8
INFO: Building CxxWrap
INFO: Attempting to Create directory /home/vagrant/.julia/v0.6/CxxWrap/deps/builds/jlcxx
INFO: Changing Directory to /home/vagrant/.julia/v0.6/CxxWrap/deps/builds/jlcxx
INFO: Package database updated
INFO: METADATA is out-of-date — you may not have the latest version of CxxWrap
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("CxxWrap")' log
Julia Version 0.6.0
Commit 9036443 (2017-06-19 13:05 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-121-generic #170-Ubuntu SMP Wed Jun 14 09:04:33 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1373.109375 MB free)
Uptime: 39262.0 sec
Load Avg:  1.49365234375  1.67041015625  1.765625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz    2541306 s       6992 s     111728 s     717660 s         32 s
#2  3500 MHz     823069 s         76 s      72213 s    2936868 s          1 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.6
2 required packages:
 - CxxWrap                       0.4.1
 - JSON                          0.12.0
4 additional packages:
 - BinDeps                       0.6.0
 - Compat                        0.26.0
 - SHA                           0.3.3
 - URIParser                     0.1.8
INFO: Testing CxxWrap
running test containers.jl...
Displaying const matrix
3×2 CxxWrap.ConstArray{Float64,2}:
 1.0  4.0
 2.0  5.0
 3.0  6.0
Displaying mutable matrix
3×2 Array{Float64,2}:
 1.0  4.0
 2.0  5.0
 3.0  6.0
running test except.jl...
exception 1
exception 2
exception 3
running test extended_module.jl...
running test functions.jl...
methods(CppHalfFunctions.half_d) = # 1 method for generic function "half_d":
half_d(arg1::Union{Float64, Int64}) in CppHalfFunctions
c_func = safe_cfunction(testf, Float64, (Float64, Float64)) = CxxWrap.SafeCFunction(Ptr{Void} @0x00007fac5603a6e0, Float64, Type[Float64, Float64])
callback result for function 0x7fac5603a6e0 is 3
callback result for function 0x7fac5603a6e0 is 3
---- Half test timings ----
Julia test:
  0.107865 seconds (85 allocations: 6.873 KiB)
  0.105628 seconds (4 allocations: 160 bytes)
  0.111821 seconds (4 allocations: 160 bytes)
C test:
  0.148201 seconds (4 allocations: 160 bytes)
  0.146205 seconds (4 allocations: 160 bytes)
  0.143056 seconds (4 allocations: 160 bytes)
C++ test:
  0.135532 seconds (4 allocations: 160 bytes)
  0.154452 seconds (4 allocations: 160 bytes)
  0.159658 seconds (4 allocations: 160 bytes)
C++ lambda test:
  0.210513 seconds (4 allocations: 160 bytes)
  0.214770 seconds (4 allocations: 160 bytes)
  0.208971 seconds (4 allocations: 160 bytes)
C++ test, loop in the C++ code:
  0.110630 seconds (23 allocations: 1.609 KiB)
  0.099155 seconds (4 allocations: 160 bytes)
  0.103959 seconds (4 allocations: 160 bytes)
cfunction in C++ loop
  0.456579 seconds (1.21 k allocations: 66.921 KiB)
  0.456450 seconds (4 allocations: 160 bytes)
  0.455084 seconds (4 allocations: 160 bytes)
jl_call inside C++ loop (array is 100 times smaller than other tests):
  0.177974 seconds (1.00 M allocations: 15.311 MiB, 63.18% gc time)
  0.044222 seconds (1.00 M allocations: 15.259 MiB)
  0.160101 seconds (1.00 M allocations: 15.259 MiB, 64.39% gc time)
running test hello.jl...
CppHello.greet() = "hello, world"
running test inheritance.jl...
running test parametric.jl...
Dumping object p1:
TemplateTypeAllocated{P1,P2}
  cpp_object: Ptr{Void} Ptr{Void} @0x0000000002dc9e40
running test types.jl...
Dumping type w...
WorldAllocated
  cpp_object: Ptr{Void} Ptr{Void} @0x0000000002d0aed0
fw = CppTypes.world_factory() = WorldRef(Ptr{Void} @0x00000000036a19e0)
uwf = CppTypes.unique_world_factory() = CxxWrap.SmartPointerWithDeref{World,0xef6180661ff0d2b6,Ptr{Void} @0x00007fac20bcacb0,Ptr{Void} @0x00007fac20bcc280,Ptr{Void} @0x00007fac20bcc270}(Ptr{Void} @0x0000000000b787f0)
Destroying World with message world by value hello
CppTypes.greet(w) = "hello"
Destroying World with message constructed
finalized w
throw test 1 passed
throw test 2 passed
completed deepcopy test
a: 2.0, b: 3.0
Destroying World with message hello
Destroying World with message shared factory hello
Destroying World with message unique factory hello
Destroying World with message world by value hello
Destroying World with message constructed
Destroying World with message default hello
Destroying World with message boxed world pointer
Destroying World with message boxed world
INFO: CxxWrap tests passed

>>> End of log
