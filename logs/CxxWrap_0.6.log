>>> 'Pkg.add("CxxWrap")' log
INFO: Cloning cache of CxxWrap from https://github.com/JuliaInterop/CxxWrap.jl.git
INFO: Installing BinDeps v0.6.0
INFO: Installing CxxWrap v0.5.0
INFO: Installing SHA v0.3.3
INFO: Installing URIParser v0.1.8
INFO: Building CxxWrap
INFO: Attempting to Create directory /home/vagrant/.julia/v0.6/CxxWrap/deps/builds/jlcxx
INFO: Changing Directory to /home/vagrant/.julia/v0.6/CxxWrap/deps/builds/jlcxx
INFO: Package database updated
INFO: METADATA is out-of-date — you may not have the latest version of CxxWrap
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("CxxWrap")' log
Julia Version 0.6.0
Commit 9036443 (2017-06-19 13:05 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-121-generic #170-Ubuntu SMP Wed Jun 14 09:04:33 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1378.140625 MB free)
Uptime: 39496.0 sec
Load Avg:  1.5263671875  1.6953125  1.7734375
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz    2436666 s       4658 s     119754 s     862069 s         35 s
#2  3500 MHz     882947 s       3340 s      73604 s    2891615 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.6
2 required packages:
 - CxxWrap                       0.5.0
 - JSON                          0.13.0
4 additional packages:
 - BinDeps                       0.6.0
 - Compat                        0.26.0
 - SHA                           0.3.3
 - URIParser                     0.1.8
INFO: Testing CxxWrap
Displaying const matrix
3×2 CxxWrap.ConstArray{Float64,2}:
 1.0  4.0
 2.0  5.0
 3.0  6.0
Displaying mutable matrix
3×2 Array{Float64,2}:
 1.0  4.0
 2.0  5.0
 3.0  6.0
exception 1
exception 2
exception 3
methods(CppHalfFunctions.half_d) = # 1 method for generic function "half_d":
half_d(arg1::Union{Float64, Int64, Irrational}) in CppHalfFunctions
c_func = safe_cfunction(testf, Float64, (Float64, Float64)) = CxxWrap.SafeCFunction(Ptr{Void} @0x00007f60af445ae0, Float64, Type[Float64, Float64])
callback result for function 0x7f60af445ae0 is 3
callback result for function 0x7f60af445ae0 is 3
---- Half test timings ----
Julia test:
  0.091444 seconds (85 allocations: 6.873 KiB)
  0.090725 seconds (4 allocations: 160 bytes)
  0.105583 seconds (4 allocations: 160 bytes)
C test:
  0.160407 seconds (4 allocations: 160 bytes)
  0.148361 seconds (4 allocations: 160 bytes)
  0.130382 seconds (4 allocations: 160 bytes)
C++ test:
  0.132143 seconds (4 allocations: 160 bytes)
  0.134901 seconds (4 allocations: 160 bytes)
  0.129852 seconds (4 allocations: 160 bytes)
C++ lambda test:
  0.202827 seconds (4 allocations: 160 bytes)
  0.204321 seconds (4 allocations: 160 bytes)
  0.206749 seconds (4 allocations: 160 bytes)
C++ test, loop in the C++ code:
  0.081198 seconds (23 allocations: 1.609 KiB)
  0.078811 seconds (4 allocations: 160 bytes)
  0.073994 seconds (4 allocations: 160 bytes)
cfunction in C++ loop
  0.448526 seconds (1.21 k allocations: 66.921 KiB)
  0.433856 seconds (4 allocations: 160 bytes)
  0.440814 seconds (4 allocations: 160 bytes)
jl_call inside C++ loop (array is 100 times smaller than other tests):
  0.177148 seconds (1.00 M allocations: 15.311 MiB, 61.37% gc time)
  0.065726 seconds (1.00 M allocations: 15.259 MiB)
  0.159701 seconds (1.00 M allocations: 15.259 MiB, 56.37% gc time)
CppHello.greet() = "hello, world"
Dumping object p1:
TemplateTypeAllocated{P1,P2}
  cpp_object: Ptr{Void} Ptr{Void} @0x000000000380fc70
Dumping type w...
WorldAllocated
  cpp_object: Ptr{Void} Ptr{Void} @0x00000000041769d0
fw = CppTypes.world_factory() = WorldRef(Ptr{Void} @0x0000000003064b00)
uwf = CppTypes.unique_world_factory() = CxxWrap.SmartPointerWithDeref{World,0xef6180661ff0d2b6,Ptr{Void} @0x00007f6075fba640,Ptr{Void} @0x00007f6075fbbd50,Ptr{Void} @0x00007f6075fbbd40}(Ptr{Void} @0x000000000313b820)
Destroying World with message world by value hello
CppTypes.greet(w) = "hello"
Destroying World with message constructed
finalized w
throw test 1 passed
throw test 2 passed
completed deepcopy test
a: 2.0, b: 3.0
Test Summary: | Pass  Total
CxxWrap tests |  154    154
Destroying World with message hello
Destroying World with message shared factory hello
Destroying World with message unique factory hello
Destroying World with message world by value hello
Destroying World with message constructed
Destroying World with message default hello
Destroying World with message boxed world pointer
Destroying World with message boxed world
INFO: CxxWrap tests passed

>>> End of log
