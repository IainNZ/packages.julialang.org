>>> 'Pkg.add("CxxWrap")' log
INFO: Cloning cache of CxxWrap from https://github.com/JuliaInterop/CxxWrap.jl.git
INFO: Installing BinDeps v0.5.0
INFO: Installing CxxWrap v0.3.1
INFO: Installing SHA v0.3.2
INFO: Installing URIParser v0.1.8
INFO: Building CxxWrap
INFO: Attempting to Create directory /home/vagrant/.julia/v0.6/CxxWrap/deps/builds/cxx_wrap
INFO: Changing Directory to /home/vagrant/.julia/v0.6/CxxWrap/deps/builds/cxx_wrap
INFO: Attempting to Create directory /home/vagrant/.julia/v0.6/CxxWrap/deps/builds/examples
INFO: Changing Directory to /home/vagrant/.julia/v0.6/CxxWrap/deps/builds/examples
INFO: Package database updated
INFO: METADATA is out-of-date — you may not have the latest version of CxxWrap
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("CxxWrap")' log
Julia Version 0.6.0-rc1.0
Commit 6bdb395 (2017-05-07 00:00 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-117-generic #164-Ubuntu SMP Fri Apr 7 11:05:26 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1324.73046875 MB free)
Uptime: 36500.0 sec
Load Avg:  1.27978515625  1.61767578125  1.74560546875
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3491 MHz    2347879 s         72 s     108443 s     694355 s         24 s
#2  3491 MHz     755627 s       6986 s      69644 s    2743898 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.6
2 required packages:
 - CxxWrap                       0.3.1
 - JSON                          0.11.0
4 additional packages:
 - BinDeps                       0.5.0
 - Compat                        0.25.0
 - SHA                           0.3.2
 - URIParser                     0.1.8
INFO: Testing CxxWrap
running test containers.jl...
Displaying const matrix
3×2 CxxWrap.ConstArray{Float64,2}:
 1.0  4.0
 2.0  5.0
 3.0  6.0
Displaying mutable matrix
3×2 Array{Float64,2}:
 1.0  4.0
 2.0  5.0
 3.0  6.0
running test except.jl...
exception 1
exception 2
exception 3
running test extended_module.jl...
running test functions.jl...
methods(CppHalfFunctions.half_d) = # 1 method for generic function "half_d":
half_d(arg1::Union{Float64, Int64}) in CppHalfFunctions
c_func = safe_cfunction(testf, Float64, (Float64, Float64)) = CxxWrap.SafeCFunction(Ptr{Void} @0x00007f55995e3140, Float64, DataType[Float64, Float64])
callback result for function 0x7f55995e3140 is 3
callback result for function 0x7f55995e3140 is 3
---- Half test timings ----
Julia test:
  0.093128 seconds (85 allocations: 6.873 KiB)
  0.087049 seconds (4 allocations: 160 bytes)
  0.087721 seconds (4 allocations: 160 bytes)
C test:
  0.136771 seconds (4 allocations: 160 bytes)
  0.145483 seconds (4 allocations: 160 bytes)
  0.136780 seconds (4 allocations: 160 bytes)
C++ test:
  0.144538 seconds (4 allocations: 160 bytes)
  0.134365 seconds (4 allocations: 160 bytes)
  0.109463 seconds (4 allocations: 160 bytes)
C++ lambda test:
  0.150551 seconds (4 allocations: 160 bytes)
  0.147346 seconds (4 allocations: 160 bytes)
  0.192513 seconds (4 allocations: 160 bytes)
C++ test, loop in the C++ code:
  0.082873 seconds (23 allocations: 1.609 KiB)
  0.103741 seconds (4 allocations: 160 bytes)
  0.122908 seconds (4 allocations: 160 bytes)
cfunction in C++ loop
  0.477005 seconds (1.21 k allocations: 66.921 KiB)
  0.460005 seconds (4 allocations: 160 bytes)
  0.466047 seconds (4 allocations: 160 bytes)
jl_call inside C++ loop (array is 100 times smaller than other tests):
  0.130843 seconds (1.00 M allocations: 15.311 MiB, 68.24% gc time)
  0.061381 seconds (1.00 M allocations: 15.259 MiB)
  0.154081 seconds (1.00 M allocations: 15.259 MiB, 58.18% gc time)
running test hello.jl...
CppHello.greet() = "hello, world"
running test inheritance.jl...
running test parametric.jl...
Dumping object p1:
TemplateTypeAllocated{P1,P2}
  cpp_object: Ptr{Void} Ptr{Void} @0x0000000002fa65b0
running test types.jl...
Dumping type w...
WorldAllocated
  cpp_object: Ptr{Void} Ptr{Void} @0x0000000002dd72b0
fw = CppTypes.world_factory() = WorldRef(Ptr{Void} @0x0000000003806ff0)
uwf = CppTypes.unique_world_factory() = CxxWrap.SmartPointerWithDeref{World,0xef6180661ff0d2b6,Ptr{Void} @0x00007f5564174700,Ptr{Void} @0x00007f5564175cd0,Ptr{Void} @0x00007f5564175cc0}(Ptr{Void} @0x0000000002fa13a0)
Destroying World with message world by value hello
CppTypes.greet(w) = "hello"
Destroying World with message constructed
finalized w
throw test 1 passed
throw test 2 passed
completed deepcopy test
a: 2.0, b: 3.0
Destroying World with message hello
Destroying World with message shared factory hello
Destroying World with message unique factory hello
Destroying World with message world by value hello
Destroying World with message constructed
Destroying World with message default hello
Destroying World with message boxed world pointer
Destroying World with message boxed world
INFO: CxxWrap tests passed

>>> End of log
