>>> 'Pkg.add("CxxWrap")' log
INFO: Cloning cache of CxxWrap from https://github.com/JuliaInterop/CxxWrap.jl.git
INFO: Installing BinDeps v0.6.0
INFO: Installing CxxWrap v0.4.0
INFO: Installing SHA v0.3.3
INFO: Installing URIParser v0.1.8
INFO: Building CxxWrap
INFO: Attempting to Create directory /home/vagrant/.julia/v0.6/CxxWrap/deps/builds/jlcxx
INFO: Changing Directory to /home/vagrant/.julia/v0.6/CxxWrap/deps/builds/jlcxx
INFO: Package database updated
INFO: METADATA is out-of-date — you may not have the latest version of CxxWrap
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("CxxWrap")' log
Julia Version 0.6.0-rc2.0
Commit 68e911b (2017-05-18 02:31 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-119-generic #166-Ubuntu SMP Wed May 3 12:18:55 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1335.15234375 MB free)
Uptime: 37020.0 sec
Load Avg:  1.505859375  1.6953125  1.771484375
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3501 MHz    2347302 s       5546 s     106515 s     722971 s         24 s
#2  3501 MHz     772780 s         96 s      69862 s    2755889 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.6
2 required packages:
 - CxxWrap                       0.4.0
 - JSON                          0.12.0
4 additional packages:
 - BinDeps                       0.6.0
 - Compat                        0.25.2
 - SHA                           0.3.3
 - URIParser                     0.1.8
INFO: Testing CxxWrap
running test containers.jl...
Displaying const matrix
3×2 CxxWrap.ConstArray{Float64,2}:
 1.0  4.0
 2.0  5.0
 3.0  6.0
Displaying mutable matrix
3×2 Array{Float64,2}:
 1.0  4.0
 2.0  5.0
 3.0  6.0
running test except.jl...
exception 1
exception 2
exception 3
running test extended_module.jl...
running test functions.jl...
methods(CppHalfFunctions.half_d) = # 1 method for generic function "half_d":
half_d(arg1::Union{Float64, Int64}) in CppHalfFunctions
c_func = safe_cfunction(testf, Float64, (Float64, Float64)) = CxxWrap.SafeCFunction(Ptr{Void} @0x00007f484a27a510, Float64, Type[Float64, Float64])
callback result for function 0x7f484a27a510 is 3
callback result for function 0x7f484a27a510 is 3
---- Half test timings ----
Julia test:
  0.094407 seconds (85 allocations: 6.873 KiB)
  0.084166 seconds (4 allocations: 160 bytes)
  0.085508 seconds (4 allocations: 160 bytes)
C test:
  0.131744 seconds (4 allocations: 160 bytes)
  0.131852 seconds (4 allocations: 160 bytes)
  0.096578 seconds (4 allocations: 160 bytes)
C++ test:
  0.114934 seconds (4 allocations: 160 bytes)
  0.092173 seconds (4 allocations: 160 bytes)
  0.099006 seconds (4 allocations: 160 bytes)
C++ lambda test:
  0.169943 seconds (4 allocations: 160 bytes)
  0.173975 seconds (4 allocations: 160 bytes)
  0.173682 seconds (4 allocations: 160 bytes)
C++ test, loop in the C++ code:
  0.081218 seconds (23 allocations: 1.609 KiB)
  0.080414 seconds (4 allocations: 160 bytes)
  0.077423 seconds (4 allocations: 160 bytes)
cfunction in C++ loop
  0.471360 seconds (1.21 k allocations: 66.921 KiB)
  0.436924 seconds (4 allocations: 160 bytes)
  0.265560 seconds (4 allocations: 160 bytes)
jl_call inside C++ loop (array is 100 times smaller than other tests):
  0.107982 seconds (1.00 M allocations: 15.311 MiB, 68.21% gc time)
  0.037870 seconds (1.00 M allocations: 15.259 MiB)
  0.133207 seconds (1.00 M allocations: 15.259 MiB, 54.57% gc time)
running test hello.jl...
CppHello.greet() = "hello, world"
running test inheritance.jl...
running test parametric.jl...
Dumping object p1:
TemplateTypeAllocated{P1,P2}
  cpp_object: Ptr{Void} Ptr{Void} @0x0000000002e2a570
running test types.jl...
Dumping type w...
WorldAllocated
  cpp_object: Ptr{Void} Ptr{Void} @0x0000000002aae350
fw = CppTypes.world_factory() = WorldRef(Ptr{Void} @0x00000000035e5780)
uwf = CppTypes.unique_world_factory() = CxxWrap.SmartPointerWithDeref{World,0xef6180661ff0d2b6,Ptr{Void} @0x00007f4814e0dcb0,Ptr{Void} @0x00007f4814e0f280,Ptr{Void} @0x00007f4814e0f270}(Ptr{Void} @0x0000000002b2a980)
Destroying World with message world by value hello
CppTypes.greet(w) = "hello"
Destroying World with message constructed
finalized w
throw test 1 passed
throw test 2 passed
completed deepcopy test
a: 2.0, b: 3.0
Destroying World with message hello
Destroying World with message shared factory hello
Destroying World with message unique factory hello
Destroying World with message world by value hello
Destroying World with message constructed
Destroying World with message default hello
Destroying World with message boxed world pointer
Destroying World with message boxed world
INFO: CxxWrap tests passed

>>> End of log
