>>> 'Pkg.add("CxxWrap")' log
INFO: Cloning cache of CxxWrap from https://github.com/JuliaInterop/CxxWrap.jl.git
INFO: Installing BinDeps v0.6.0
INFO: Installing CxxWrap v0.5.0
INFO: Installing SHA v0.5.1
INFO: Installing URIParser v0.2.0
INFO: Building CxxWrap
INFO: Attempting to Create directory /home/vagrant/.julia/v0.6/CxxWrap/deps/builds/jlcxx
INFO: Changing Directory to /home/vagrant/.julia/v0.6/CxxWrap/deps/builds/jlcxx
INFO: Package database updated

>>> 'Pkg.test("CxxWrap")' log
Julia Version 0.6.0
Commit 9036443 (2017-06-19 13:05 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-128-generic #177-Ubuntu SMP Tue Aug 8 11:40:23 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1546.39453125 MB free)
Uptime: 39326.0 sec
Load Avg:  1.7607421875  1.76953125  1.796875
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz    2558054 s       6489 s     121543 s     675159 s         41 s
#2  3500 MHz     791360 s         67 s      63170 s    2983681 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.6
2 required packages:
 - CxxWrap                       0.5.0
 - JSON                          0.13.0
4 additional packages:
 - BinDeps                       0.6.0
 - Compat                        0.30.0
 - SHA                           0.5.1
 - URIParser                     0.2.0
INFO: Testing CxxWrap
Displaying const matrix
3×2 CxxWrap.ConstArray{Float64,2}:
 1.0  4.0
 2.0  5.0
 3.0  6.0
Displaying mutable matrix
3×2 Array{Float64,2}:
 1.0  4.0
 2.0  5.0
 3.0  6.0
exception 1
exception 2
exception 3
methods(CppHalfFunctions.half_d) = # 1 method for generic function "half_d":
half_d(arg1::Union{Float64, Int64, Irrational}) in CppHalfFunctions
c_func = safe_cfunction(testf, Float64, (Float64, Float64)) = CxxWrap.SafeCFunction(Ptr{Void} @0x00007fe9c7a06bf0, Float64, Type[Float64, Float64])
callback result for function 0x7fe9c7a06bf0 is 3
callback result for function 0x7fe9c7a06bf0 is 3
---- Half test timings ----
Julia test:
  0.074198 seconds (85 allocations: 6.873 KiB)
  0.076010 seconds (4 allocations: 160 bytes)
  0.078733 seconds (4 allocations: 160 bytes)
C test:
  0.096113 seconds (4 allocations: 160 bytes)
  0.093986 seconds (4 allocations: 160 bytes)
  0.094919 seconds (4 allocations: 160 bytes)
C++ test:
  0.096895 seconds (4 allocations: 160 bytes)
  0.101717 seconds (4 allocations: 160 bytes)
  0.119686 seconds (4 allocations: 160 bytes)
C++ lambda test:
  0.154268 seconds (4 allocations: 160 bytes)
  0.207226 seconds (4 allocations: 160 bytes)
  0.200738 seconds (4 allocations: 160 bytes)
C++ test, loop in the C++ code:
  0.113174 seconds (23 allocations: 1.609 KiB)
  0.078309 seconds (4 allocations: 160 bytes)
  0.079917 seconds (4 allocations: 160 bytes)
cfunction in C++ loop
  0.377155 seconds (1.21 k allocations: 66.921 KiB)
  0.267198 seconds (4 allocations: 160 bytes)
  0.295154 seconds (4 allocations: 160 bytes)
jl_call inside C++ loop (array is 100 times smaller than other tests):
  0.105029 seconds (1.00 M allocations: 15.311 MiB, 66.44% gc time)
  0.033417 seconds (1.00 M allocations: 15.259 MiB)
  0.089562 seconds (1.00 M allocations: 15.259 MiB, 63.59% gc time)
CppHello.greet() = "hello, world"
Dumping object p1:
TemplateTypeAllocated{P1,P2}
  cpp_object: Ptr{Void} Ptr{Void} @0x00000000037b30f0
Dumping type w...
WorldAllocated
  cpp_object: Ptr{Void} Ptr{Void} @0x0000000003c2ee10
fw = CppTypes.world_factory() = WorldRef(Ptr{Void} @0x0000000004522bf0)
uwf = CppTypes.unique_world_factory() = CxxWrap.SmartPointerWithDeref{World,0xef6180661ff0d2b6,Ptr{Void} @0x00007fe98e57b640,Ptr{Void} @0x00007fe98e57cd50,Ptr{Void} @0x00007fe98e57cd40}(Ptr{Void} @0x00000000037c9530)
Destroying World with message world by value hello
CppTypes.greet(w) = "hello"
Destroying World with message constructed
finalized w
throw test 1 passed
throw test 2 passed
completed deepcopy test
a: 2.0, b: 3.0
Test Summary: | Pass  Total
CxxWrap tests |  154    154
Destroying World with message hello
Destroying World with message shared factory hello
Destroying World with message unique factory hello
Destroying World with message world by value hello
Destroying World with message constructed
Destroying World with message default hello
Destroying World with message boxed world pointer
Destroying World with message boxed world
INFO: CxxWrap tests passed

>>> End of log
