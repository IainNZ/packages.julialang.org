>>> 'Pkg.add("SIMD")' log
INFO: Cloning cache of SIMD from https://github.com/eschnett/SIMD.jl.git
INFO: Installing SIMD v0.4.0
INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of SIMD
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("SIMD")' log
Julia Version 0.6.4
Commit 9d11f62bcb (2018-07-09 19:09 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-143-generic #192-Ubuntu SMP Tue Feb 27 10:45:36 UTC 2018 x86_64 x86_64
Memory: 2.939197540283203 GB (530.265625 MB free)
Uptime: 48166.0 sec
Load Avg:  0.96142578125  0.923828125  0.94775390625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz    2957492 s        110 s     220879 s     886972 s         13 s
#2  3499 MHz     613036 s       5150 s      80535 s    4023975 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem MAX_THREADS=16)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.6
3 required packages:
 - JSON                          0.17.2
 - POMDPModels                   0.2.2
 - SIMD                          0.4.0
59 additional packages:
 - AMG                           0.1.2              master
 - AbstractTrees                 0.1.0
 - AssetRegistry                 0.0.2
 - AutoHashEquals                0.2.0
 - BinDeps                       0.8.8
 - BinaryProvider                0.3.3
 - Blink                         0.6.2
 - CPUTime                       0.1.0
 - Calculus                      0.4.0
 - CategoricalArrays             0.3.11
 - CodecZlib                     0.4.3
 - ColorTypes                    0.6.7
 - Colors                        0.8.2
 - Compat                        1.0.0
 - D3Trees                       0.2.0
 - DataFrames                    0.11.7
 - DataStreams                   0.3.6
 - DataStructures                0.8.4
 - DiscreteValueIteration        0.0.0-             master (unregistered)
 - Distributions                 0.15.0
 - FixedPointNumbers             0.4.6
 - Hiccup                        0.1.1
 - HttpCommon                    0.4.0
 - HttpParser                    0.4.0
 - HttpServer                    0.3.1
 - IncompleteSelectedInversion   0.0.0-             master (unregistered)
 - IterativeSolvers              0.6.0
 - Iterators                     0.3.1
 - LaTeXStrings                  1.0.0
 - Lazy                          0.12.1
 - MCTS                          0.0.0-             master (unregistered)
 - MacroTools                    0.4.2
 - MbedTLS                       0.5.12
 - Missings                      0.2.10
 - Mustache                      0.3.3
 - Mux                           0.3.1
 - NamedTuples                   4.0.2
 - Nullables                     0.0.6
 - PDMats                        0.8.0
 - POMDPToolbox                  0.2.7
 - POMDPs                        0.6.7
 - Pidfile                       1.0.0
 - ProgressMeter                 0.5.6
 - QuadGK                        0.3.0
 - RecipesBase                   0.3.1
 - Reexport                      0.1.0
 - Requires                      0.4.4
 - Rmath                         0.4.0
 - SHA                           0.5.7
 - SortingAlgorithms             0.2.1
 - SpecialFunctions              0.6.0
 - StaticArrays                  0.7.2
 - StatsBase                     0.23.1
 - StatsFuns                     0.6.1
 - TikzPictures                  1.2.0
 - TranscodingStreams            0.5.3
 - URIParser                     0.3.1
 - WeakRefStrings                0.4.7
 - WebSockets                    0.5.0
INFO: Testing SIMD
Info: Basic definitions
Info: Type properties
Info: Type conversion
Info: Element-wise access
Info: Integer arithmetic functions
Info: Floating point arithmetic functions
Info: Type promotion
Info: Reduction operations
Info: Load and store functions
Info: Real-world examples

define double @julia_vsum_63181(i8** dereferenceable(40), i8**) #0 !dbg !5 {
top:
  %ptls_i8 = call i8* asm "movq %fs:0, $0;\0Aaddq $$-10888, $0", "=r,~{dirflag},~{fpsr},~{flags}"() #5
  %ptls = bitcast i8* %ptls_i8 to i8****
  %2 = alloca [9 x i8**], align 8
  %.sub = getelementptr inbounds [9 x i8**], [9 x i8**]* %2, i64 0, i64 0
  %3 = getelementptr [9 x i8**], [9 x i8**]* %2, i64 0, i64 3
  %4 = getelementptr [9 x i8**], [9 x i8**]* %2, i64 0, i64 2
  %5 = bitcast i8*** %3 to i8*
  call void @llvm.memset.p0i8.i32(i8* %5, i8 0, i32 48, i32 8, i1 false)
  %6 = bitcast [9 x i8**]* %2 to i64*
  store i64 14, i64* %6, align 8
  %7 = getelementptr [9 x i8**], [9 x i8**]* %2, i64 0, i64 1
  %8 = bitcast i8* %ptls_i8 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = bitcast i8*** %7 to i64*
  store i64 %9, i64* %10, align 8
  store i8*** %.sub, i8**** %ptls, align 8
  store i8** null, i8*** %4, align 8
  %11 = getelementptr i8*, i8** %0, i64 1
  %12 = getelementptr inbounds i8*, i8** %0, i64 2
  %13 = bitcast i8** %12 to i64*
  %14 = bitcast i8** %11 to i64*
  %15 = load i64, i64* %13, align 8
  %16 = load i64, i64* %14, align 8
  %17 = sub i64 %15, %16
  %18 = add i64 %17, 1
  %19 = icmp slt i64 %18, 0
  %20 = select i1 %19, i64 0, i64 %18
  %21 = and i64 %20, 3
  %22 = icmp eq i64 %21, 0
  br i1 %22, label %L20, label %L18

L18:                                              ; preds = %top
  %23 = getelementptr [9 x i8**], [9 x i8**]* %2, i64 0, i64 7
  %24 = getelementptr [9 x i8**], [9 x i8**]* %2, i64 0, i64 5
  %25 = getelementptr [9 x i8**], [9 x i8**]* %2, i64 0, i64 4
  %26 = getelementptr [9 x i8**], [9 x i8**]* %2, i64 0, i64 6
  %27 = getelementptr [9 x i8**], [9 x i8**]* %2, i64 0, i64 8
  %28 = load i64, i64* inttoptr (i64 140118421041080 to i64*), align 8
  %29 = bitcast i8*** %3 to i64*
  store i64 %28, i64* %29, align 8
  store i8** inttoptr (i64 140118365149096 to i8**), i8*** %25, align 8
  %30 = call i8** @jl_f_getfield(i8** null, i8*** %3, i32 2)
  store i8** %30, i8*** %24, align 8
  store i8** inttoptr (i64 140118365153880 to i8**), i8*** %26, align 8
  %31 = call i8** @jl_f_getfield(i8** null, i8*** %24, i32 2)
  store i8** %31, i8*** %23, align 8
  store i8** inttoptr (i64 140118116306704 to i8**), i8*** %27, align 8
  %32 = call i8** @jl_apply_generic(i8*** %23, i32 2)
  store i8** %32, i8*** %4, align 8
  call void @jl_throw(i8** %32)
  unreachable

L20:                                              ; preds = %top
  %33 = call i64 @jlsys_steprange_last_60598(i64 1, i64 4, i64 %20)
  %34 = icmp slt i64 %33, 1
  %35 = zext i1 %34 to i8
  %36 = add i64 %33, 4
  %37 = icmp eq i64 %36, 1
  %38 = zext i1 %37 to i8
  %39 = or i8 %38, %35
  %40 = icmp eq i8 %39, 1
  br i1 %40, label %L100, label %if1.lr.ph

if1.lr.ph:                                        ; preds = %L20
  %41 = bitcast i8** %0 to i64**
  %42 = load i64*, i64** %41, align 8
  %43 = load i64, i64* %42, align 8
  %44 = getelementptr i8*, i8** %0, i64 3
  %45 = bitcast i8** %44 to i64*
  %46 = load i64, i64* %45, align 8
  %47 = add i64 %43, -8
  br label %if1

if1:                                              ; preds = %if1.lr.ph, %if1
  %sv.sroa.0.010 = phi <4 x double> [ zeroinitializer, %if1.lr.ph ], [ %res.i3, %if1 ]
  %"#temp#.09" = phi i64 [ 1, %if1.lr.ph ], [ %48, %if1 ]
  %48 = add i64 %"#temp#.09", 4
  %49 = add i64 %46, %"#temp#.09"
  %50 = shl i64 %49, 3
  %51 = add i64 %47, %50
  %ptr.i = inttoptr i64 %51 to <4 x double>*
  %res.i = load <4 x double>, <4 x double>* %ptr.i, align 8
  %res.i3 = fadd <4 x double> %sv.sroa.0.010, %res.i
  %52 = icmp eq i64 %48, %36
  %53 = zext i1 %52 to i8
  %54 = or i8 %53, %35
  %55 = icmp eq i8 %54, 1
  br i1 %55, label %L100.loopexit, label %if1

L100.loopexit:                                    ; preds = %if1
  br label %L100

L100:                                             ; preds = %L100.loopexit, %L20
  %sv.sroa.0.0.lcssa = phi <4 x double> [ zeroinitializer, %L20 ], [ %res.i3, %L100.loopexit ]
  %vec_2_1.i = shufflevector <4 x double> %sv.sroa.0.0.lcssa, <4 x double> undef, <2 x i32> <i32 0, i32 1>
  %vec_2_2.i = shufflevector <4 x double> %sv.sroa.0.0.lcssa, <4 x double> undef, <2 x i32> <i32 2, i32 3>
  %vec_2.i = fadd <2 x double> %vec_2_1.i, %vec_2_2.i
  %vec_1_1.i = shufflevector <2 x double> %vec_2.i, <2 x double> undef, <1 x i32> zeroinitializer
  %vec_1_2.i = shufflevector <2 x double> %vec_2.i, <2 x double> undef, <1 x i32> <i32 1>
  %vec_1.i = fadd <1 x double> %vec_1_1.i, %vec_1_2.i
  %res.i2 = extractelement <1 x double> %vec_1.i, i32 0
  %56 = load i64, i64* %10, align 8
  store i64 %56, i64* %8, align 8
  ret double %res.i2
}
	.text
Filename: runtests.jl
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rbx
	subq	$80, %rsp
	movq	%rdi, %r15
	movq	%fs:0, %r14
	addq	$-10888, %r14           # imm = 0xD578
	movq	$0, -40(%rbp)
	movq	$0, -48(%rbp)
	movq	$0, -56(%rbp)
	movq	$0, -64(%rbp)
	movq	$0, -72(%rbp)
	movq	$0, -80(%rbp)
	movq	$14, -104(%rbp)
	movq	(%r14), %rax
	movq	%rax, -96(%rbp)
	leaq	-104(%rbp), %rax
	movq	%rax, (%r14)
	movq	$0, -88(%rbp)
Source line: 75
	movq	16(%r15), %rax
	subq	8(%r15), %rax
	xorl	%edx, %edx
	incq	%rax
Source line: 56
	cmovnsq	%rax, %rdx
Source line: 321
	testb	$3, %dl
	jne	L299
Source line: 93
	movabsq	$steprange_last, %rax
	movl	$1, %edi
	movl	$4, %esi
	callq	*%rax
Source line: 323
	testq	%rax, %rax
	setle	%cl
	setg	%dl
	cmpq	$-3, %rax
	setne	%bl
	andb	%dl, %bl
	xorpd	%xmm1, %xmm1
	cmpb	$1, %bl
	xorpd	%xmm0, %xmm0
	jne	L262
Source line: 304
	movq	(%r15), %rsi
Source line: 1260
	movq	24(%r15), %rdx
Source line: 323
	decq	%rax
	shlq	$3, %rdx
	addq	(%rsi), %rdx
	xorpd	%xmm1, %xmm1
	xorpd	%xmm0, %xmm0
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
Source line: 1260
L224:
	movupd	(%rdx), %xmm2
	movupd	16(%rdx), %xmm3
Source line: 569
	addpd	%xmm3, %xmm0
	addpd	%xmm2, %xmm1
Source line: 323
	testq	%rax, %rax
	sete	%bl
	orb	%cl, %bl
	addq	$-4, %rax
	addq	$32, %rdx
	cmpb	$1, %bl
	jne	L224
Source line: 1158
L262:
	addpd	%xmm0, %xmm1
	movapd	%xmm1, %xmm0
	shufpd	$1, %xmm0, %xmm0        # xmm0 = xmm0[1,0]
	addsd	%xmm1, %xmm0
Source line: 327
	movq	-96(%rbp), %rax
	movq	%rax, (%r14)
	addq	$80, %rsp
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
L299:
	leaq	-80(%rbp), %r14
	leaq	-48(%rbp), %r15
	leaq	-64(%rbp), %rsi
Source line: 321
	movabsq	$140118116306704, %rbx  # imm = 0x7F6FCA8C8F10
	movq	304734376(%rbx), %rax
	movq	%rax, -64(%rbp)
	leaq	248842392(%rbx), %rax
	movq	%rax, -56(%rbp)
	movabsq	$jl_f_getfield, %r12
	xorl	%edi, %edi
	movl	$2, %edx
	callq	*%r12
	movq	%rax, -48(%rbp)
	leaq	248847176(%rbx), %rax
	movq	%rax, -40(%rbp)
	xorl	%edi, %edi
	movl	$2, %edx
	movq	%r15, %rsi
	callq	*%r12
	movq	%rax, -80(%rbp)
	movq	%rbx, -72(%rbp)
	movabsq	$jl_apply_generic, %rax
	movl	$2, %esi
	movq	%r14, %rdi
	callq	*%rax
	movq	%rax, -88(%rbp)
	movabsq	$jl_throw, %rcx
	movq	%rax, %rdi
	callq	*%rcx
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
Info: Vector shuffles
INFO: SIMD tests passed

>>> End of log
