>>> 'Pkg.add("TransformUtils")' log
INFO: Installing TranscodingStreams v0.5.2
INFO: Installing TransformUtils v0.1.0
INFO: Package database updated
INFO: METADATA is out-of-date — you may not have the latest version of TransformUtils
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("TransformUtils")' log
Julia Version 0.6.2
Commit d386e40c17 (2017-12-13 18:08 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-143-generic #192-Ubuntu SMP Tue Feb 27 10:45:36 UTC 2018 x86_64 x86_64
Memory: 2.939197540283203 GB (2345.2421875 MB free)
Uptime: 86790.0 sec
Load Avg:  1.0029296875  0.9853515625  0.96044921875
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3501 MHz    5321685 s       6162 s     343943 s    1756397 s         83 s
#2  3501 MHz    1331250 s        126 s     139793 s    6997070 s          1 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.6
6 required packages:
 - Conda                         0.7.1
 - JSON                          0.17.2
 - PyCall                        1.15.0
 - PyPlot                        2.5.0
 - RDatasets                     0.3.0
 - TransformUtils                0.1.0
29 additional packages:
 - BinDeps                       0.8.7
 - BinaryProvider                0.2.6
 - CSV                           0.2.2
 - CategoricalArrays             0.3.6
 - CodecZlib                     0.4.3
 - ColorTypes                    0.6.7
 - Colors                        0.8.2
 - Compat                        0.63.0
 - DataFrames                    0.11.5
 - DataStreams                   0.3.4
 - DataStructures                0.7.4
 - FileIO                        0.7.0
 - FixedPointNumbers             0.4.6
 - LaTeXStrings                  0.3.0
 - MacroTools                    0.4.0
 - Missings                      0.2.7
 - Mocking                       0.5.1
 - NamedTuples                   4.0.0
 - Nullables                     0.0.5
 - RData                         0.4.0
 - Reexport                      0.1.0
 - SHA                           0.5.6
 - SortingAlgorithms             0.2.0
 - SpecialFunctions              0.3.8
 - StatsBase                     0.20.1
 - TimeZones                     0.6.2
 - TranscodingStreams            0.5.2
 - URIParser                     0.3.1
 - WeakRefStrings                0.4.3
INFO: Testing TransformUtils
[TEST] constructors SO3, Quaternion, AngleAxis... [SUCCESS]
[TEST] comparison functions for SO3, Quaternion, AngleAxis... [SUCCESS]
[TEST] trivial case quaterion -> SO3 -> Euler -> quaternion... [SUCCESS]
[TEST] convert functions 
WARNING: Need better coverage on convert function tests
[TEST] compare SO3 and quaternion rotations... dAA = TransformUtils.AngleAxis(0.7853981633974483, [1.0, 0.0, 0.0])
dAA = TransformUtils.so3([0.0 0.136952 -0.0101805; -0.136952 0.0 0.120452; 0.0101805 -0.120452 0.0])
dAA = TransformUtils.so3([0.0 -0.0764971 0.0507794; 0.0764971 0.0 -0.0623719; -0.0507794 0.0623719 0.0])
dAA = TransformUtils.so3([0.0 -0.0121687 0.0282359; 0.0121687 0.0 0.0185804; -0.0282359 -0.0185804 0.0])
dAA = TransformUtils.Quaternion(0.9995479311353455, [-0.0125227, -0.011982, 0.0245672])
dAA = TransformUtils.SO3([0.992003 0.0809744 0.0968198; -0.0895558 0.992101 0.0878411; -0.0889421 -0.0958093 0.991418])
[SUCCESS]
[TEST] basic SE3 mechanics... [SUCCESS]
[TEST] SE3 ⊕ and ⊖ mechanics... Compare operations on two different SE3 transforms
xi = TransformUtils.SE3(TransformUtils.SO3([0.953337 0.173942 0.246763; -0.232169 0.944866 0.230925; -0.19299 -0.27744 0.94116]), [-0.0125925, 1.33664, -1.34816])
xj = TransformUtils.SE3(TransformUtils.SO3([0.872737 0.209768 0.440827; -0.292557 0.947605 0.128277; -0.390821 -0.240919 0.888379]), [0.540863, -0.135607, -1.03759])
Dx = TransformUtils.SE3(TransformUtils.SO3([0.97536 0.0264697 0.219026; -0.0161919 0.998688 -0.0485882; -0.220025 0.0438445 0.974508]), [0.809504, -1.38097, 0.0888895])
[SUCCESS]
[TEST] previous discovered issues
TransformUtils.convert(Euler, q) = TransformUtils.Euler(0.7853981633974484, 0.0, 1.5707963267948963, TransformUtils.Quaternion(1.0, [0.0, 0.0, 0.0]))
INFO: TransformUtils tests passed

>>> End of log
