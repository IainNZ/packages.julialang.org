>>> 'Pkg.add("TransformUtils")' log
INFO: Installing TranscodingStreams v0.5.2
INFO: Installing TransformUtils v0.1.0
INFO: Package database updated
INFO: METADATA is out-of-date — you may not have the latest version of TransformUtils
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("TransformUtils")' log
Julia Version 0.6.2
Commit d386e40c17 (2017-12-13 18:08 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-143-generic #192-Ubuntu SMP Tue Feb 27 10:45:36 UTC 2018 x86_64 x86_64
Memory: 2.939197540283203 GB (2333.6796875 MB free)
Uptime: 88187.0 sec
Load Avg:  0.9970703125  1.072265625  1.0234375
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3498 MHz    5372666 s       5233 s     338308 s    1889562 s         78 s
#2  3498 MHz    1494367 s       1867 s     144152 s    7007384 s          2 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.6
6 required packages:
 - Conda                         0.7.1
 - JSON                          0.17.2
 - PyCall                        1.15.0
 - PyPlot                        2.5.0
 - RDatasets                     0.4.0
 - TransformUtils                0.1.0
28 additional packages:
 - BinDeps                       0.8.8
 - BinaryProvider                0.3.0
 - CSV                           0.2.4
 - CategoricalArrays             0.3.9
 - CodecZlib                     0.4.3
 - ColorTypes                    0.6.7
 - Colors                        0.8.2
 - Compat                        0.63.0
 - DataFrames                    0.11.6
 - DataStreams                   0.3.4
 - DataStructures                0.8.1
 - FileIO                        0.7.0
 - FixedPointNumbers             0.4.6
 - LaTeXStrings                  0.3.0
 - MacroTools                    0.4.0
 - Missings                      0.2.9
 - Mocking                       0.5.2
 - NamedTuples                   4.0.0
 - Nullables                     0.0.5
 - RData                         0.4.0
 - Reexport                      0.1.0
 - SHA                           0.5.7
 - SortingAlgorithms             0.2.1
 - StatsBase                     0.21.0
 - TimeZones                     0.6.5
 - TranscodingStreams            0.5.2
 - URIParser                     0.3.1
 - WeakRefStrings                0.4.4
INFO: Testing TransformUtils
[TEST] constructors SO3, Quaternion, AngleAxis... [SUCCESS]
[TEST] comparison functions for SO3, Quaternion, AngleAxis... [SUCCESS]
[TEST] trivial case quaterion -> SO3 -> Euler -> quaternion... [SUCCESS]
[TEST] convert functions 
WARNING: Need better coverage on convert function tests
[TEST] compare SO3 and quaternion rotations... dAA = TransformUtils.AngleAxis(0.7853981633974483, [1.0, 0.0, 0.0])
dAA = TransformUtils.so3([0.0 0.00788636 -0.0311172; -0.00788636 0.0 0.061511; 0.0311172 -0.061511 0.0])
dAA = TransformUtils.so3([0.0 0.000693799 -0.00973118; -0.000693799 0.0 -0.0784366; 0.00973118 0.0784366 0.0])
dAA = TransformUtils.so3([0.0 -0.0198581 0.10267; 0.0198581 0.0 0.156523; -0.10267 -0.156523 0.0])
dAA = TransformUtils.Quaternion(0.9944354208767756, [0.0961144, -0.0426176, -0.00663027])
dAA = TransformUtils.SO3([0.960233 -0.0312482 -0.277446; 0.0387558 0.999015 0.0216155; 0.276497 -0.0315086 0.960498])
[SUCCESS]
[TEST] basic SE3 mechanics... [SUCCESS]
[TEST] SE3 ⊕ and ⊖ mechanics... Compare operations on two different SE3 transforms
xi = TransformUtils.SE3(TransformUtils.SO3([0.999638 -0.0267994 0.00244109; 0.026884 0.990526 -0.134667; 0.00119103 0.134684 0.990888]), [0.676204, -0.737885, 0.329693])
xj = TransformUtils.SE3(TransformUtils.SO3([0.972763 0.231461 0.0125395; -0.227899 0.964872 -0.130703; -0.0423517 0.124285 0.991342]), [0.11694, -0.652492, -0.681457])
Dx = TransformUtils.SE3(TransformUtils.SO3([0.966234 0.257465 0.0102018; -0.257513 0.966268 0.00371673; -0.00890075 -0.00621833 0.999941]), [-0.557969, -0.0366133, -1.0148])
[SUCCESS]
[TEST] previous discovered issues
TransformUtils.convert(Euler, q) = TransformUtils.Euler(0.7853981633974484, 0.0, 1.5707963267948963, TransformUtils.Quaternion(1.0, [0.0, 0.0, 0.0]))
INFO: TransformUtils tests passed

>>> End of log
