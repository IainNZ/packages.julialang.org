>>> 'Pkg.add("TransformUtils")' log
INFO: Installing TranscodingStreams v0.5.2
INFO: Installing TransformUtils v0.1.0
INFO: Package database updated
INFO: METADATA is out-of-date — you may not have the latest version of TransformUtils
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("TransformUtils")' log
Julia Version 0.6.2
Commit d386e40c17 (2017-12-13 18:08 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-143-generic #192-Ubuntu SMP Tue Feb 27 10:45:36 UTC 2018 x86_64 x86_64
Memory: 2.939197540283203 GB (2340.48046875 MB free)
Uptime: 86226.0 sec
Load Avg:  1.01416015625  1.0498046875  1.02099609375
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3503 MHz    5324389 s       7500 s     326516 s    1749784 s        102 s
#2  3503 MHz    1374764 s         73 s     143058 s    6942788 s          1 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.6
6 required packages:
 - Conda                         0.7.1
 - JSON                          0.17.2
 - PyCall                        1.15.0
 - PyPlot                        2.5.0
 - RDatasets                     0.3.0
 - TransformUtils                0.1.0
29 additional packages:
 - BinDeps                       0.8.7
 - BinaryProvider                0.2.7
 - CSV                           0.2.3
 - CategoricalArrays             0.3.6
 - CodecZlib                     0.4.3
 - ColorTypes                    0.6.7
 - Colors                        0.8.2
 - Compat                        0.63.0
 - DataFrames                    0.11.5
 - DataStreams                   0.3.4
 - DataStructures                0.7.4
 - FileIO                        0.7.0
 - FixedPointNumbers             0.4.6
 - LaTeXStrings                  0.3.0
 - MacroTools                    0.4.0
 - Missings                      0.2.8
 - Mocking                       0.5.1
 - NamedTuples                   4.0.0
 - Nullables                     0.0.5
 - RData                         0.4.0
 - Reexport                      0.1.0
 - SHA                           0.5.6
 - SortingAlgorithms             0.2.0
 - SpecialFunctions              0.3.8
 - StatsBase                     0.20.1
 - TimeZones                     0.6.3
 - TranscodingStreams            0.5.2
 - URIParser                     0.3.1
 - WeakRefStrings                0.4.3
INFO: Testing TransformUtils
[TEST] constructors SO3, Quaternion, AngleAxis... [SUCCESS]
[TEST] comparison functions for SO3, Quaternion, AngleAxis... [SUCCESS]
[TEST] trivial case quaterion -> SO3 -> Euler -> quaternion... [SUCCESS]
[TEST] convert functions 
WARNING: Need better coverage on convert function tests
[TEST] compare SO3 and quaternion rotations... dAA = TransformUtils.AngleAxis(0.7853981633974483, [1.0, 0.0, 0.0])
dAA = TransformUtils.so3([0.0 0.0210732 -0.0442077; -0.0210732 0.0 -0.162116; 0.0442077 0.162116 0.0])
dAA = TransformUtils.so3([0.0 -0.101976 -0.130709; 0.101976 0.0 -0.089566; 0.130709 0.089566 0.0])
dAA = TransformUtils.so3([0.0 0.207561 -0.0375527; -0.207561 0.0 -0.258393; 0.0375527 0.258393 0.0])
dAA = TransformUtils.Quaternion(0.99842590335157, [-0.0498378, 0.0117096, 0.0229085])
dAA = TransformUtils.SO3([0.999318 -0.0123593 0.0348103; 0.00957401 0.996823 0.0790739; -0.035677 -0.0786867 0.996261])
[SUCCESS]
[TEST] basic SE3 mechanics... [SUCCESS]
[TEST] SE3 ⊕ and ⊖ mechanics... Compare operations on two different SE3 transforms
xi = TransformUtils.SE3(TransformUtils.SO3([0.940039 0.0805564 -0.331418; 0.0466704 0.932186 0.358959; 0.337859 -0.352903 0.872531]), [1.149, -0.824556, -0.304991])
xj = TransformUtils.SE3(TransformUtils.SO3([0.989514 -0.14286 0.0212862; 0.140115 0.985206 0.0986715; -0.0350675 -0.0946543 0.994892]), [1.58693, 0.135749, 0.395976])
Dx = TransformUtils.SE3(TransformUtils.SO3([0.924873 -0.120294 0.360749; 0.222701 0.940291 -0.257405; -0.308244 0.318406 0.896439]), [0.693318, 0.683087, 0.811187])
[SUCCESS]
[TEST] previous discovered issues
TransformUtils.convert(Euler, q) = TransformUtils.Euler(0.7853981633974484, 0.0, 1.5707963267948963, TransformUtils.Quaternion(1.0, [0.0, 0.0, 0.0]))
INFO: TransformUtils tests passed

>>> End of log
