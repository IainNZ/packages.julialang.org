>>> 'Pkg.add("TransformUtils")' log
INFO: Installing TranscodingStreams v0.5.2
INFO: Installing TransformUtils v0.1.0
INFO: Package database updated
INFO: METADATA is out-of-date — you may not have the latest version of TransformUtils
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("TransformUtils")' log
Julia Version 0.6.2
Commit d386e40c17 (2017-12-13 18:08 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-143-generic #192-Ubuntu SMP Tue Feb 27 10:45:36 UTC 2018 x86_64 x86_64
Memory: 2.939197540283203 GB (2338.94921875 MB free)
Uptime: 87799.0 sec
Load Avg:  1.0029296875  0.9853515625  0.96142578125
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz    5408186 s       4592 s     330789 s    1791964 s         85 s
#2  3499 MHz    1284694 s       1180 s     138600 s    7154776 s          1 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.6
6 required packages:
 - Conda                         0.7.1
 - JSON                          0.17.2
 - PyCall                        1.15.0
 - PyPlot                        2.5.0
 - RDatasets                     0.4.0
 - TransformUtils                0.1.0
28 additional packages:
 - BinDeps                       0.8.7
 - BinaryProvider                0.3.0
 - CSV                           0.2.4
 - CategoricalArrays             0.3.9
 - CodecZlib                     0.4.3
 - ColorTypes                    0.6.7
 - Colors                        0.8.2
 - Compat                        0.63.0
 - DataFrames                    0.11.5
 - DataStreams                   0.3.4
 - DataStructures                0.7.4
 - FileIO                        0.7.0
 - FixedPointNumbers             0.4.6
 - LaTeXStrings                  0.3.0
 - MacroTools                    0.4.0
 - Missings                      0.2.9
 - Mocking                       0.5.2
 - NamedTuples                   4.0.0
 - Nullables                     0.0.5
 - RData                         0.4.0
 - Reexport                      0.1.0
 - SHA                           0.5.7
 - SortingAlgorithms             0.2.0
 - StatsBase                     0.21.0
 - TimeZones                     0.6.5
 - TranscodingStreams            0.5.2
 - URIParser                     0.3.1
 - WeakRefStrings                0.4.4
INFO: Testing TransformUtils
[TEST] constructors SO3, Quaternion, AngleAxis... [SUCCESS]
[TEST] comparison functions for SO3, Quaternion, AngleAxis... [SUCCESS]
[TEST] trivial case quaterion -> SO3 -> Euler -> quaternion... [SUCCESS]
[TEST] convert functions 
WARNING: Need better coverage on convert function tests
[TEST] compare SO3 and quaternion rotations... dAA = TransformUtils.AngleAxis(0.7853981633974483, [1.0, 0.0, 0.0])
dAA = TransformUtils.so3([0.0 0.0364158 0.0864651; -0.0364158 0.0 -0.0563815; -0.0864651 0.0563815 0.0])
dAA = TransformUtils.so3([0.0 0.0580186 -0.0846614; -0.0580186 0.0 0.0997219; 0.0846614 -0.0997219 0.0])
dAA = TransformUtils.so3([0.0 -0.000396899 0.0396143; 0.000396899 0.0 -0.141699; -0.0396143 0.141699 0.0])
dAA = TransformUtils.Quaternion(0.9991365783668178, [0.0233038, -0.0156905, -0.0306079])
dAA = TransformUtils.SO3([0.993531 -0.0198204 0.111815; 0.0268483 0.997733 -0.0617022; -0.110338 0.0643051 0.991812])
[SUCCESS]
[TEST] basic SE3 mechanics... [SUCCESS]
[TEST] SE3 ⊕ and ⊖ mechanics... Compare operations on two different SE3 transforms
xi = TransformUtils.SE3(TransformUtils.SO3([0.951653 -0.245169 0.185063; 0.276549 0.946065 -0.168768; -0.133705 0.211787 0.968127]), [0.713108, -0.0280305, -1.26058])
xj = TransformUtils.SE3(TransformUtils.SO3([0.985266 0.156923 0.0680151; -0.170351 0.935791 0.308669; -0.0152106 -0.315707 0.948735]), [0.897795, 0.468692, 2.51887])
Dx = TransformUtils.SE3(TransformUtils.SO3([0.892555 0.45034 0.0232384; -0.405942 0.779983 0.476275; 0.19636 -0.434535 0.878989]), [-0.192205, 1.22509, 3.60934])
[SUCCESS]
[TEST] previous discovered issues
TransformUtils.convert(Euler, q) = TransformUtils.Euler(0.7853981633974484, 0.0, 1.5707963267948963, TransformUtils.Quaternion(1.0, [0.0, 0.0, 0.0]))
INFO: TransformUtils tests passed

>>> End of log
