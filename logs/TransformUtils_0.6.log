>>> 'Pkg.add("TransformUtils")' log
INFO: Installing TranscodingStreams v0.5.2
INFO: Installing TransformUtils v0.1.0
INFO: Package database updated
INFO: METADATA is out-of-date — you may not have the latest version of TransformUtils
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("TransformUtils")' log
Julia Version 0.6.2
Commit d386e40c17 (2017-12-13 18:08 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-143-generic #192-Ubuntu SMP Tue Feb 27 10:45:36 UTC 2018 x86_64 x86_64
Memory: 2.939197540283203 GB (2340.75 MB free)
Uptime: 87301.0 sec
Load Avg:  0.97216796875  1.1015625  1.0400390625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3491 MHz    5387214 s       4934 s     331686 s    1766713 s        102 s
#2  3491 MHz    1356706 s       2484 s     142989 s    7021340 s          3 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.6
6 required packages:
 - Conda                         0.7.1
 - JSON                          0.17.2
 - PyCall                        1.15.0
 - PyPlot                        2.5.0
 - RDatasets                     0.4.0
 - TransformUtils                0.1.0
29 additional packages:
 - BinDeps                       0.8.7
 - BinaryProvider                0.2.8
 - CSV                           0.2.4
 - CategoricalArrays             0.3.7
 - CodecZlib                     0.4.3
 - ColorTypes                    0.6.7
 - Colors                        0.8.2
 - Compat                        0.63.0
 - DataFrames                    0.11.5
 - DataStreams                   0.3.4
 - DataStructures                0.7.4
 - FileIO                        0.7.0
 - FixedPointNumbers             0.4.6
 - LaTeXStrings                  0.3.0
 - MacroTools                    0.4.0
 - Missings                      0.2.9
 - Mocking                       0.5.1
 - NamedTuples                   4.0.0
 - Nullables                     0.0.5
 - RData                         0.4.0
 - Reexport                      0.1.0
 - SHA                           0.5.6
 - SortingAlgorithms             0.2.0
 - SpecialFunctions              0.4.0
 - StatsBase                     0.20.1
 - TimeZones                     0.6.4
 - TranscodingStreams            0.5.2
 - URIParser                     0.3.1
 - WeakRefStrings                0.4.3
INFO: Testing TransformUtils
[TEST] constructors SO3, Quaternion, AngleAxis... [SUCCESS]
[TEST] comparison functions for SO3, Quaternion, AngleAxis... [SUCCESS]
[TEST] trivial case quaterion -> SO3 -> Euler -> quaternion... [SUCCESS]
[TEST] convert functions 
WARNING: Need better coverage on convert function tests
[TEST] compare SO3 and quaternion rotations... dAA = TransformUtils.AngleAxis(0.7853981633974483, [1.0, 0.0, 0.0])
dAA = TransformUtils.so3([0.0 0.115428 -0.0720592; -0.115428 0.0 -0.129724; 0.0720592 0.129724 0.0])
dAA = TransformUtils.so3([0.0 0.24915 -0.049797; -0.24915 0.0 -0.0129521; 0.049797 0.0129521 0.0])
dAA = TransformUtils.so3([0.0 0.0467436 -0.137151; -0.0467436 0.0 0.213524; 0.137151 -0.213524 0.0])
dAA = TransformUtils.Quaternion(0.9997434319141688, [-0.00949389, 0.0176985, 0.0104737])
dAA = TransformUtils.SO3([0.996288 0.0851178 0.0128367; -0.0854173 0.996033 0.0249367; -0.0106633 -0.0259407 0.999607])
[SUCCESS]
[TEST] basic SE3 mechanics... [SUCCESS]
[TEST] SE3 ⊕ and ⊖ mechanics... Compare operations on two different SE3 transforms
xi = TransformUtils.SE3(TransformUtils.SO3([0.992964 0.0795235 0.0877427; -0.088556 0.990588 0.104373; -0.0786167 -0.111409 0.99066]), [1.9999, -1.06478, -1.15986])
xj = TransformUtils.SE3(TransformUtils.SO3([0.967699 0.153003 0.200373; -0.175397 0.979493 0.0991463; -0.181094 -0.131089 0.97469]), [0.0842506, 1.79517, 0.294248])
Dx = TransformUtils.SE3(TransformUtils.SO3([0.990659 0.0754925 0.113556; -0.0766163 0.997045 0.00555837; -0.112801 -0.0142067 0.993516]), [-2.26975, 2.51869, 1.57095])
[SUCCESS]
[TEST] previous discovered issues
TransformUtils.convert(Euler, q) = TransformUtils.Euler(0.7853981633974484, 0.0, 1.5707963267948963, TransformUtils.Quaternion(1.0, [0.0, 0.0, 0.0]))
INFO: TransformUtils tests passed

>>> End of log
