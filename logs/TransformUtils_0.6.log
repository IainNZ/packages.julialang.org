>>> 'Pkg.add("TransformUtils")' log
INFO: Installing TransformUtils v0.1.0
INFO: Package database updated
INFO: METADATA is out-of-date — you may not have the latest version of TransformUtils
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("TransformUtils")' log
Julia Version 0.6.2
Commit d386e40c17 (2017-12-13 18:08 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-135-generic #184-Ubuntu SMP Wed Oct 18 11:55:51 UTC 2017 x86_64 x86_64
Memory: 2.93927001953125 GB (2360.6328125 MB free)
Uptime: 72482.0 sec
Load Avg:  1.06787109375  1.076171875  1.00830078125
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz    4671868 s       2522 s     200098 s    1257764 s         48 s
#2  3499 MHz     999232 s       4533 s      85330 s    6038533 s          1 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.6
2 required packages:
 - JSON                          0.16.4
 - TransformUtils                0.1.0
2 additional packages:
 - Compat                        0.48.0
 - Nullables                     0.0.3
INFO: Testing TransformUtils
[TEST] constructors SO3, Quaternion, AngleAxis... [SUCCESS]
[TEST] comparison functions for SO3, Quaternion, AngleAxis... [SUCCESS]
[TEST] trivial case quaterion -> SO3 -> Euler -> quaternion... [SUCCESS]
[TEST] convert functions 
WARNING: Need better coverage on convert function tests
[TEST] compare SO3 and quaternion rotations... dAA = TransformUtils.AngleAxis(0.7853981633974483, [1.0, 0.0, 0.0])
dAA = TransformUtils.so3([0.0 -0.20842 -0.039856; 0.20842 0.0 -0.16016; 0.039856 0.16016 0.0])
dAA = TransformUtils.so3([0.0 0.0845182 -0.120286; -0.0845182 0.0 -0.114044; 0.120286 0.114044 0.0])
dAA = TransformUtils.so3([0.0 -0.203879 0.116718; 0.203879 0.0 0.00385127; -0.116718 -0.00385127 0.0])
dAA = TransformUtils.Quaternion(0.998082928932966, [-0.0224905, -0.0559451, -0.0139569])
dAA = TransformUtils.SO3([0.993862 0.104784 0.0354926; -0.104633 0.994492 -0.00607438; -0.0359336 0.00232339 0.999351])
[SUCCESS]
[TEST] basic SE3 mechanics... [SUCCESS]
[TEST] SE3 ⊕ and ⊖ mechanics... Compare operations on two different SE3 transforms
xi = TransformUtils.SE3(TransformUtils.SO3([0.939436 -0.108731 0.325019; 0.17546 0.967219 -0.18358; -0.294404 0.22949 0.927718]), [0.0292797, 1.81047, 0.622715])
xj = TransformUtils.SE3(TransformUtils.SO3([0.966953 0.0446686 0.25101; 0.00299948 0.982471 -0.186391; -0.254936 0.180984 0.94987]), [-0.386723, 0.532054, 0.0808816])
Dx = TransformUtils.SE3(TransformUtils.SO3([0.983971 0.161065 -0.0765419; -0.160742 0.986942 0.0104122; 0.0772194 0.00205813 0.997012]), [-0.455601, -1.31562, -0.403185])
[SUCCESS]
[TEST] previous discovered issues
TransformUtils.convert(Euler, q) = TransformUtils.Euler(0.7853981633974484, 0.0, 1.5707963267948963, TransformUtils.Quaternion(1.0, [0.0, 0.0, 0.0]))
INFO: TransformUtils tests passed

>>> End of log
