>>> 'Pkg.add("TransformUtils")' log
INFO: Installing TransformUtils v0.1.0
INFO: Package database updated

>>> 'Pkg.test("TransformUtils")' log
Julia Version 0.6.2
Commit d386e40c17 (2017-12-13 18:08 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-135-generic #184-Ubuntu SMP Wed Oct 18 11:55:51 UTC 2017 x86_64 x86_64
Memory: 2.93927001953125 GB (2382.0703125 MB free)
Uptime: 78691.0 sec
Load Avg:  1.01318359375  1.080078125  1.04541015625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz    4934063 s       3690 s     226398 s    1520568 s        100 s
#2  3500 MHz    1169122 s       4086 s     104261 s    6421438 s          3 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.6
2 required packages:
 - JSON                          0.16.4
 - TransformUtils                0.1.0
2 additional packages:
 - Compat                        0.54.0
 - Nullables                     0.0.3
INFO: Testing TransformUtils
[TEST] constructors SO3, Quaternion, AngleAxis... [SUCCESS]
[TEST] comparison functions for SO3, Quaternion, AngleAxis... [SUCCESS]
[TEST] trivial case quaterion -> SO3 -> Euler -> quaternion... [SUCCESS]
[TEST] convert functions 
WARNING: Need better coverage on convert function tests
[TEST] compare SO3 and quaternion rotations... dAA = TransformUtils.AngleAxis(0.7853981633974483, [1.0, 0.0, 0.0])
dAA = TransformUtils.so3([0.0 0.0935098 0.0497932; -0.0935098 0.0 -0.102711; -0.0497932 0.102711 0.0])
dAA = TransformUtils.so3([0.0 0.197598 -0.023679; -0.197598 0.0 -0.125033; 0.023679 0.125033 0.0])
dAA = TransformUtils.so3([0.0 -0.221656 -0.0545708; 0.221656 0.0 0.0944319; 0.0545708 -0.0944319 0.0])
dAA = TransformUtils.Quaternion(0.9976709001025471, [-0.0272837, -0.0353417, 0.0515687])
dAA = TransformUtils.SO3([0.987711 -0.142541 -0.064104; 0.133454 0.982653 -0.128776; 0.0813478 0.118638 0.9896])
[SUCCESS]
[TEST] basic SE3 mechanics... [SUCCESS]
[TEST] SE3 ⊕ and ⊖ mechanics... Compare operations on two different SE3 transforms
xi = TransformUtils.SE3(TransformUtils.SO3([0.944225 -0.300015 0.135756; 0.312697 0.946132 -0.0839926; -0.103245 0.121759 0.987175]), [-1.04361, 0.0454919, -0.463556])
xj = TransformUtils.SE3(TransformUtils.SO3([0.958215 -0.00314257 -0.286031; 0.0167058 0.998848 0.044991; 0.28556 -0.0478894 0.957164]), [-0.0766615, -0.0632212, -1.02747])
Dx = TransformUtils.SE3(TransformUtils.SO3([0.880512 0.314314 -0.354831; -0.236904 0.940154 0.244924; 0.410579 -0.131598 0.902279]), [0.937247, -0.461618, -0.41628])
[SUCCESS]
[TEST] previous discovered issues
TransformUtils.convert(Euler, q) = TransformUtils.Euler(0.7853981633974484, 0.0, 1.5707963267948963, TransformUtils.Quaternion(1.0, [0.0, 0.0, 0.0]))
INFO: TransformUtils tests passed

>>> End of log
