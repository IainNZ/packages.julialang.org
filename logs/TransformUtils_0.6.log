>>> 'Pkg.add("TransformUtils")' log
INFO: Installing TransformUtils v0.1.0
INFO: Package database updated
INFO: METADATA is out-of-date — you may not have the latest version of TransformUtils
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("TransformUtils")' log
Julia Version 0.6.2
Commit d386e40c17 (2017-12-13 18:08 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-135-generic #184-Ubuntu SMP Wed Oct 18 11:55:51 UTC 2017 x86_64 x86_64
Memory: 2.93927001953125 GB (2378.921875 MB free)
Uptime: 80991.0 sec
Load Avg:  1.01904296875  1.04833984375  0.99755859375
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3510 MHz    5000334 s       7581 s     217611 s    1668370 s         66 s
#2  3510 MHz    1290889 s       1000 s     100175 s    6540513 s          1 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.6
2 required packages:
 - JSON                          0.16.4
 - TransformUtils                0.1.0
2 additional packages:
 - Compat                        0.54.0
 - Nullables                     0.0.3
INFO: Testing TransformUtils
[TEST] constructors SO3, Quaternion, AngleAxis... [SUCCESS]
[TEST] comparison functions for SO3, Quaternion, AngleAxis... [SUCCESS]
[TEST] trivial case quaterion -> SO3 -> Euler -> quaternion... [SUCCESS]
[TEST] convert functions 
WARNING: Need better coverage on convert function tests
[TEST] compare SO3 and quaternion rotations... dAA = TransformUtils.AngleAxis(0.7853981633974483, [1.0, 0.0, 0.0])
dAA = TransformUtils.so3([0.0 -0.136977 0.0608597; 0.136977 0.0 0.109044; -0.0608597 -0.109044 0.0])
dAA = TransformUtils.so3([0.0 -0.0646109 -0.00187344; 0.0646109 0.0 0.0122678; 0.00187344 -0.0122678 0.0])
dAA = TransformUtils.so3([0.0 0.176826 -0.0612069; -0.176826 0.0 -0.0283339; 0.0612069 0.0283339 0.0])
dAA = TransformUtils.Quaternion(0.9972138136175428, [0.0105003, 0.0723143, -0.015])
dAA = TransformUtils.SO3([0.992214 -0.105962 -0.0654496; 0.101136 0.992183 -0.0731113; 0.072685 0.0659227 0.995174])
[SUCCESS]
[TEST] basic SE3 mechanics... [SUCCESS]
[TEST] SE3 ⊕ and ⊖ mechanics... Compare operations on two different SE3 transforms
xi = TransformUtils.SE3(TransformUtils.SO3([0.977123 0.133731 0.165367; -0.153906 0.981269 0.115862; -0.146775 -0.138663 0.979403]), [2.15688, -0.246925, 0.264367])
xj = TransformUtils.SE3(TransformUtils.SO3([0.993338 0.0884116 0.0739111; -0.0689053 0.969793 -0.233994; -0.0923663 0.227342 0.969425]), [0.445027, -0.919459, -0.927086])
Dx = TransformUtils.SE3(TransformUtils.SO3([0.994776 -0.0962365 -0.034054; 0.0780329 0.931927 -0.35415; 0.065818 0.349643 0.934568]), [-1.39431, -0.723653, -1.52792])
[SUCCESS]
[TEST] previous discovered issues
TransformUtils.convert(Euler, q) = TransformUtils.Euler(0.7853981633974484, 0.0, 1.5707963267948963, TransformUtils.Quaternion(1.0, [0.0, 0.0, 0.0]))
INFO: TransformUtils tests passed

>>> End of log
