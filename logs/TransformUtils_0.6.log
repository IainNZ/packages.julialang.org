>>> 'Pkg.add("TransformUtils")' log
INFO: Installing TransformUtils v0.1.0
INFO: Package database updated
INFO: METADATA is out-of-date — you may not have the latest version of TransformUtils
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("TransformUtils")' log
Julia Version 0.6.2
Commit d386e40c17 (2017-12-13 18:08 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-135-generic #184-Ubuntu SMP Wed Oct 18 11:55:51 UTC 2017 x86_64 x86_64
Memory: 2.93927001953125 GB (2379.29296875 MB free)
Uptime: 77956.0 sec
Load Avg:  1.03857421875  1.1435546875  1.078125
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3513 MHz    4859028 s       6835 s     210652 s    1556457 s         88 s
#2  3513 MHz    1178746 s         87 s     101293 s    6341309 s          2 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.6
2 required packages:
 - JSON                          0.17.1
 - TransformUtils                0.1.0
2 additional packages:
 - Compat                        0.55.0
 - Nullables                     0.0.3
INFO: Testing TransformUtils
[TEST] constructors SO3, Quaternion, AngleAxis... [SUCCESS]
[TEST] comparison functions for SO3, Quaternion, AngleAxis... [SUCCESS]
[TEST] trivial case quaterion -> SO3 -> Euler -> quaternion... [SUCCESS]
[TEST] convert functions 
WARNING: Need better coverage on convert function tests
[TEST] compare SO3 and quaternion rotations... dAA = TransformUtils.AngleAxis(0.7853981633974483, [1.0, 0.0, 0.0])
dAA = TransformUtils.so3([0.0 -0.0337643 -0.0713822; 0.0337643 0.0 -0.00746675; 0.0713822 0.00746675 0.0])
dAA = TransformUtils.so3([0.0 0.0746061 -0.058338; -0.0746061 0.0 0.0180426; 0.058338 -0.0180426 0.0])
dAA = TransformUtils.so3([0.0 -0.119526 -0.0222633; 0.119526 0.0 -0.253425; 0.0222633 0.253425 0.0])
dAA = TransformUtils.Quaternion(0.99825933617205, [0.0229118, -0.03808, 0.0387719])
dAA = TransformUtils.SO3([0.975743 0.0577718 -0.211159; -0.0359109 0.993724 0.105937; 0.215954 -0.0957843 0.971694])
[SUCCESS]
[TEST] basic SE3 mechanics... [SUCCESS]
[TEST] SE3 ⊕ and ⊖ mechanics... Compare operations on two different SE3 transforms
xi = TransformUtils.SE3(TransformUtils.SO3([0.99575 -0.0268847 0.0880815; 0.00331778 0.966291 0.25743; -0.0920333 -0.256044 0.962274]), [1.65593, -1.21465, -2.56564])
xj = TransformUtils.SE3(TransformUtils.SO3([0.918349 0.0770863 0.388192; -0.192025 0.944448 0.266728; -0.346066 -0.319492 0.882135]), [3.08794, -1.70126, 0.27608])
Dx = TransformUtils.SE3(TransformUtils.SO3([0.945659 0.109296 0.306242; -0.121633 0.992344 0.0214355; -0.301554 -0.05752 0.951712]), [1.16277, -1.23631, 2.73538])
[SUCCESS]
[TEST] previous discovered issues
TransformUtils.convert(Euler, q) = TransformUtils.Euler(0.7853981633974484, 0.0, 1.5707963267948963, TransformUtils.Quaternion(1.0, [0.0, 0.0, 0.0]))
INFO: TransformUtils tests passed

>>> End of log
