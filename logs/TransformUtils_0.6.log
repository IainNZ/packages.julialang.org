>>> 'Pkg.add("TransformUtils")' log
INFO: Installing TransformUtils v0.1.0
INFO: Package database updated
INFO: METADATA is out-of-date — you may not have the latest version of TransformUtils
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("TransformUtils")' log
Julia Version 0.6.2
Commit d386e40c17 (2017-12-13 18:08 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-135-generic #184-Ubuntu SMP Wed Oct 18 11:55:51 UTC 2017 x86_64 x86_64
Memory: 2.93927001953125 GB (2386.51171875 MB free)
Uptime: 79006.0 sec
Load Avg:  1.02099609375  1.03125  0.984375
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz    4921456 s       5882 s     278762 s    1493032 s         64 s
#2  3499 MHz    1152124 s       1988 s     114830 s    6499271 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.6
2 required packages:
 - JSON                          0.16.4
 - TransformUtils                0.1.0
2 additional packages:
 - Compat                        0.54.0
 - Nullables                     0.0.3
INFO: Testing TransformUtils
[TEST] constructors SO3, Quaternion, AngleAxis... [SUCCESS]
[TEST] comparison functions for SO3, Quaternion, AngleAxis... [SUCCESS]
[TEST] trivial case quaterion -> SO3 -> Euler -> quaternion... [SUCCESS]
[TEST] convert functions 
WARNING: Need better coverage on convert function tests
[TEST] compare SO3 and quaternion rotations... dAA = TransformUtils.AngleAxis(0.7853981633974483, [1.0, 0.0, 0.0])
dAA = TransformUtils.so3([0.0 0.0215992 0.195939; -0.0215992 0.0 -0.214491; -0.195939 0.214491 0.0])
dAA = TransformUtils.so3([0.0 -0.0617249 -0.0505147; 0.0617249 0.0 -0.038335; 0.0505147 0.038335 0.0])
dAA = TransformUtils.so3([0.0 0.0111827 -0.034839; -0.0111827 0.0 0.0481174; 0.034839 -0.0481174 0.0])
dAA = TransformUtils.Quaternion(0.9883087476611249, [-0.0796772, -0.124758, 0.0365085])
dAA = TransformUtils.SO3([0.979271 -0.0733574 -0.188805; 0.0669798 0.996954 -0.039949; 0.19116 0.0264748 0.981202])
[SUCCESS]
[TEST] basic SE3 mechanics... [SUCCESS]
[TEST] SE3 ⊕ and ⊖ mechanics... Compare operations on two different SE3 transforms
xi = TransformUtils.SE3(TransformUtils.SO3([0.934152 -0.35017 0.0688596; 0.352487 0.935493 -0.024612; -0.0557993 0.0472635 0.997323]), [-0.91404, -0.785298, -0.9552])
xj = TransformUtils.SE3(TransformUtils.SO3([0.985523 -0.0260203 -0.167536; 0.0178691 0.99859 -0.0499786; 0.1686 0.0462613 0.984598]), [0.0538464, 0.143804, -0.434388])
Dx = TransformUtils.SE3(TransformUtils.SO3([0.917518 0.325102 -0.22906; -0.320416 0.945472 0.0584469; 0.235571 0.0197684 0.971656]), [1.20259, 0.554859, 0.563199])
[SUCCESS]
[TEST] previous discovered issues
TransformUtils.convert(Euler, q) = TransformUtils.Euler(0.7853981633974484, 0.0, 1.5707963267948963, TransformUtils.Quaternion(1.0, [0.0, 0.0, 0.0]))
INFO: TransformUtils tests passed

>>> End of log
