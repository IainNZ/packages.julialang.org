>>> 'Pkg.add("TransformUtils")' log
INFO: Installing TranscodingStreams v0.5.2
INFO: Installing TransformUtils v0.1.0
INFO: Package database updated

>>> 'Pkg.test("TransformUtils")' log
Julia Version 0.6.2
Commit d386e40c17 (2017-12-13 18:08 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-143-generic #192-Ubuntu SMP Tue Feb 27 10:45:36 UTC 2018 x86_64 x86_64
Memory: 2.939197540283203 GB (2341.30078125 MB free)
Uptime: 86945.0 sec
Load Avg:  0.9677734375  0.99462890625  0.970703125
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3495 MHz    5251388 s       7231 s     356322 s    1868814 s        102 s
#2  3495 MHz    1449759 s        227 s     146880 s    6921644 s          2 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.6
6 required packages:
 - Conda                         0.7.1
 - JSON                          0.17.2
 - PyCall                        1.15.0
 - PyPlot                        2.5.0
 - RDatasets                     0.4.0
 - TransformUtils                0.1.0
29 additional packages:
 - BinDeps                       0.8.7
 - BinaryProvider                0.2.8
 - CSV                           0.2.4
 - CategoricalArrays             0.3.7
 - CodecZlib                     0.4.3
 - ColorTypes                    0.6.7
 - Colors                        0.8.2
 - Compat                        0.63.0
 - DataFrames                    0.11.5
 - DataStreams                   0.3.4
 - DataStructures                0.7.4
 - FileIO                        0.7.0
 - FixedPointNumbers             0.4.6
 - LaTeXStrings                  0.3.0
 - MacroTools                    0.4.0
 - Missings                      0.2.9
 - Mocking                       0.5.1
 - NamedTuples                   4.0.0
 - Nullables                     0.0.5
 - RData                         0.4.0
 - Reexport                      0.1.0
 - SHA                           0.5.6
 - SortingAlgorithms             0.2.0
 - SpecialFunctions              0.4.0
 - StatsBase                     0.20.1
 - TimeZones                     0.6.4
 - TranscodingStreams            0.5.2
 - URIParser                     0.3.1
 - WeakRefStrings                0.4.3
INFO: Testing TransformUtils
[TEST] constructors SO3, Quaternion, AngleAxis... [SUCCESS]
[TEST] comparison functions for SO3, Quaternion, AngleAxis... [SUCCESS]
[TEST] trivial case quaterion -> SO3 -> Euler -> quaternion... [SUCCESS]
[TEST] convert functions 
WARNING: Need better coverage on convert function tests
[TEST] compare SO3 and quaternion rotations... dAA = TransformUtils.AngleAxis(0.7853981633974483, [1.0, 0.0, 0.0])
dAA = TransformUtils.so3([0.0 -0.00272306 0.007923; 0.00272306 0.0 -0.0447226; -0.007923 0.0447226 0.0])
dAA = TransformUtils.so3([0.0 -0.0487371 0.018614; 0.0487371 0.0 0.00221785; -0.018614 -0.00221785 0.0])
dAA = TransformUtils.so3([0.0 0.139586 0.113108; -0.139586 0.0 -0.0134602; -0.113108 0.0134602 0.0])
dAA = TransformUtils.Quaternion(0.9935132968194558, [-0.0843034, -0.0278962, -0.0710357])
dAA = TransformUtils.SO3([0.998178 0.0322387 -0.0510065; -0.0290346 0.997631 0.0623573; 0.052896 -0.0607628 0.99675])
[SUCCESS]
[TEST] basic SE3 mechanics... [SUCCESS]
[TEST] SE3 ⊕ and ⊖ mechanics... Compare operations on two different SE3 transforms
xi = TransformUtils.SE3(TransformUtils.SO3([0.917346 -0.335199 0.214752; 0.392492 0.851712 -0.347183; -0.0665311 0.402776 0.912878]), [0.320561, 1.41442, 1.22318])
xj = TransformUtils.SE3(TransformUtils.SO3([0.920322 0.333139 -0.205; -0.266453 0.917606 0.294963; 0.286373 -0.216838 0.933259]), [1.60465, -0.759611, 0.082203])
Dx = TransformUtils.SE3(TransformUtils.SO3([0.720621 0.680183 -0.134376; -0.420088 0.582531 0.695833; 0.551572 -0.444982 0.705521]), [0.400578, -2.74163, -0.0110183])
[SUCCESS]
[TEST] previous discovered issues
TransformUtils.convert(Euler, q) = TransformUtils.Euler(0.7853981633974484, 0.0, 1.5707963267948963, TransformUtils.Quaternion(1.0, [0.0, 0.0, 0.0]))
INFO: TransformUtils tests passed

>>> End of log
