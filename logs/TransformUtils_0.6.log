>>> 'Pkg.add("TransformUtils")' log
INFO: Installing TransformUtils v0.1.0
INFO: Package database updated
INFO: METADATA is out-of-date — you may not have the latest version of TransformUtils
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("TransformUtils")' log
Julia Version 0.6.2
Commit d386e40c17 (2017-12-13 18:08 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-135-generic #184-Ubuntu SMP Wed Oct 18 11:55:51 UTC 2017 x86_64 x86_64
Memory: 2.93927001953125 GB (2386.47265625 MB free)
Uptime: 76656.0 sec
Load Avg:  1.005859375  1.0390625  0.99755859375
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz    4819723 s         94 s     210063 s    1519918 s         66 s
#2  3499 MHz    1201102 s       5822 s      97497 s    6214961 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.6
2 required packages:
 - JSON                          0.16.4
 - TransformUtils                0.1.0
2 additional packages:
 - Compat                        0.52.0
 - Nullables                     0.0.3
INFO: Testing TransformUtils
[TEST] constructors SO3, Quaternion, AngleAxis... [SUCCESS]
[TEST] comparison functions for SO3, Quaternion, AngleAxis... [SUCCESS]
[TEST] trivial case quaterion -> SO3 -> Euler -> quaternion... [SUCCESS]
[TEST] convert functions 
WARNING: Need better coverage on convert function tests
[TEST] compare SO3 and quaternion rotations... dAA = TransformUtils.AngleAxis(0.7853981633974483, [1.0, 0.0, 0.0])
dAA = TransformUtils.so3([0.0 -0.0268323 -0.0679089; 0.0268323 0.0 -0.00402114; 0.0679089 0.00402114 0.0])
dAA = TransformUtils.so3([0.0 -0.303184 -0.00513127; 0.303184 0.0 -0.0567146; 0.00513127 0.0567146 0.0])
dAA = TransformUtils.so3([0.0 0.0115593 0.023818; -0.0115593 0.0 0.0433069; -0.023818 -0.0433069 0.0])
dAA = TransformUtils.Quaternion(0.9984759057206594, [-0.0218589, -0.0453797, 0.0225551])
dAA = TransformUtils.SO3([0.992177 -0.013252 0.124132; 0.0154693 0.999737 -0.0169153; -0.123875 0.0187032 0.992122])
[SUCCESS]
[TEST] basic SE3 mechanics... [SUCCESS]
[TEST] SE3 ⊕ and ⊖ mechanics... Compare operations on two different SE3 transforms
xi = TransformUtils.SE3(TransformUtils.SO3([0.915849 0.114858 0.384744; -0.0636377 0.987624 -0.143353; -0.396447 0.106805 0.911824]), [0.766046, 0.536254, 0.738142])
xj = TransformUtils.SE3(TransformUtils.SO3([0.977356 0.0404939 0.207689; -0.0387122 0.99917 -0.0126373; -0.208029 0.00431105 0.978113]), [1.00674, 1.16617, 0.849635])
Dx = TransformUtils.SE3(TransformUtils.SO3([0.980047 -0.0282078 -0.196754; 0.0518057 0.991916 0.115842; 0.191895 -0.123723 0.973586]), [0.136149, 0.661673, 0.103966])
[SUCCESS]
[TEST] previous discovered issues
TransformUtils.convert(Euler, q) = TransformUtils.Euler(0.7853981633974484, 0.0, 1.5707963267948963, TransformUtils.Quaternion(1.0, [0.0, 0.0, 0.0]))
INFO: TransformUtils tests passed

>>> End of log
