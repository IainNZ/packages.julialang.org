>>> 'Pkg.add("TransformUtils")' log
INFO: Installing TransformUtils v0.1.0
INFO: Package database updated
INFO: METADATA is out-of-date — you may not have the latest version of TransformUtils
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("TransformUtils")' log
Julia Version 0.6.2
Commit d386e40c17 (2017-12-13 18:08 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-135-generic #184-Ubuntu SMP Wed Oct 18 11:55:51 UTC 2017 x86_64 x86_64
Memory: 2.93927001953125 GB (2387.41015625 MB free)
Uptime: 74099.0 sec
Load Avg:  1.07080078125  1.095703125  1.0244140625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz    4759132 s         99 s     198458 s    1289803 s         55 s
#2  3500 MHz    1058320 s       7957 s      91194 s    6099972 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.6
2 required packages:
 - JSON                          0.16.4
 - TransformUtils                0.1.0
2 additional packages:
 - Compat                        0.51.0
 - Nullables                     0.0.3
INFO: Testing TransformUtils
[TEST] constructors SO3, Quaternion, AngleAxis... [SUCCESS]
[TEST] comparison functions for SO3, Quaternion, AngleAxis... [SUCCESS]
[TEST] trivial case quaterion -> SO3 -> Euler -> quaternion... [SUCCESS]
[TEST] convert functions 
WARNING: Need better coverage on convert function tests
[TEST] compare SO3 and quaternion rotations... dAA = TransformUtils.AngleAxis(0.7853981633974483, [1.0, 0.0, 0.0])
dAA = TransformUtils.so3([0.0 -0.0842913 0.0125472; 0.0842913 0.0 -0.0243592; -0.0125472 0.0243592 0.0])
dAA = TransformUtils.so3([0.0 0.00965158 -0.0316445; -0.00965158 0.0 -0.0239332; 0.0316445 0.0239332 0.0])
dAA = TransformUtils.so3([0.0 0.0129538 -0.163804; -0.0129538 0.0 0.00389158; 0.163804 -0.00389158 0.0])
dAA = TransformUtils.Quaternion(0.9891157681351623, [-0.0502765, -0.0704359, 0.119])
dAA = TransformUtils.SO3([0.981129 0.0967874 0.167384; -0.0841803 0.993165 -0.080856; -0.174066 0.0652398 0.982571])
[SUCCESS]
[TEST] basic SE3 mechanics... [SUCCESS]
[TEST] SE3 ⊕ and ⊖ mechanics... Compare operations on two different SE3 transforms
xi = TransformUtils.SE3(TransformUtils.SO3([0.973908 0.164118 0.156745; -0.197354 0.953473 0.227903; -0.112049 -0.252891 0.960984]), [-1.21239, 0.685193, 1.50903])
xj = TransformUtils.SE3(TransformUtils.SO3([0.814165 0.576873 -0.0659761; -0.557266 0.808249 0.190232; 0.163065 -0.118114 0.97952]), [0.180677, 0.919041, 0.156406])
Dx = TransformUtils.SE3(TransformUtils.SO3([0.884629 0.415544 -0.211552; -0.438956 0.895189 -0.0771589; 0.157316 0.161119 0.974316]), [1.46213, 0.793661, -1.0282])
[SUCCESS]
[TEST] previous discovered issues
TransformUtils.convert(Euler, q) = TransformUtils.Euler(0.7853981633974484, 0.0, 1.5707963267948963, TransformUtils.Quaternion(1.0, [0.0, 0.0, 0.0]))
INFO: TransformUtils tests passed

>>> End of log
