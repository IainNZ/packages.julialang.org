>>> 'Pkg.add("TransformUtils")' log
INFO: Installing TransformUtils v0.1.0
INFO: Package database updated

>>> 'Pkg.test("TransformUtils")' log
Julia Version 0.6.2
Commit d386e40c17 (2017-12-13 18:08 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-135-generic #184-Ubuntu SMP Wed Oct 18 11:55:51 UTC 2017 x86_64 x86_64
Memory: 2.93927001953125 GB (2382.65234375 MB free)
Uptime: 76589.0 sec
Load Avg:  0.95458984375  1.04248046875  1.00341796875
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz    4780892 s       1127 s     216445 s    1566560 s         77 s
#2  3499 MHz    1119088 s       6646 s      96896 s    6273798 s          4 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.6
2 required packages:
 - JSON                          0.16.4
 - TransformUtils                0.1.0
2 additional packages:
 - Compat                        0.53.0
 - Nullables                     0.0.3
INFO: Testing TransformUtils
[TEST] constructors SO3, Quaternion, AngleAxis... [SUCCESS]
[TEST] comparison functions for SO3, Quaternion, AngleAxis... [SUCCESS]
[TEST] trivial case quaterion -> SO3 -> Euler -> quaternion... [SUCCESS]
[TEST] convert functions 
WARNING: Need better coverage on convert function tests
[TEST] compare SO3 and quaternion rotations... dAA = TransformUtils.AngleAxis(0.7853981633974483, [1.0, 0.0, 0.0])
dAA = TransformUtils.so3([0.0 -0.000163809 0.145033; 0.000163809 0.0 0.0253826; -0.145033 -0.0253826 0.0])
dAA = TransformUtils.so3([0.0 -0.0356779 -0.0240781; 0.0356779 0.0 0.0144335; 0.0240781 -0.0144335 0.0])
dAA = TransformUtils.so3([0.0 0.0679803 0.0224265; -0.0679803 0.0 0.0470607; -0.0224265 -0.0470607 0.0])
dAA = TransformUtils.Quaternion(0.9985546683150366, [-0.0216973, 0.0172965, -0.0460286])
dAA = TransformUtils.SO3([0.990637 -0.135106 0.0196366; 0.132962 0.987397 0.0858425; -0.030987 -0.0824278 0.996115])
[SUCCESS]
[TEST] basic SE3 mechanics... [SUCCESS]
[TEST] SE3 ⊕ and ⊖ mechanics... Compare operations on two different SE3 transforms
xi = TransformUtils.SE3(TransformUtils.SO3([0.944308 -0.320056 0.0764631; 0.266509 0.880162 0.392795; -0.193016 -0.350542 0.916442]), [-1.043, -0.345756, -0.629251])
xj = TransformUtils.SE3(TransformUtils.SO3([0.901005 0.219379 -0.37425; -0.138184 0.962908 0.231763; 0.411212 -0.157104 0.897899]), [-1.20267, 1.6459, -0.161152])
Dx = TransformUtils.SE3(TransformUtils.SO3([0.734629 0.494108 -0.46495; -0.554143 0.832373 0.00901825; 0.391467 0.251023 0.885291]), [0.289665, 1.63999, 1.19909])
[SUCCESS]
[TEST] previous discovered issues
TransformUtils.convert(Euler, q) = TransformUtils.Euler(0.7853981633974484, 0.0, 1.5707963267948963, TransformUtils.Quaternion(1.0, [0.0, 0.0, 0.0]))
INFO: TransformUtils tests passed

>>> End of log
