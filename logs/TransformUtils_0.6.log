>>> 'Pkg.add("TransformUtils")' log
INFO: Installing TranscodingStreams v0.5.2
INFO: Installing TransformUtils v0.1.0
INFO: Package database updated
INFO: METADATA is out-of-date — you may not have the latest version of TransformUtils
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("TransformUtils")' log
Julia Version 0.6.2
Commit d386e40c17 (2017-12-13 18:08 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-143-generic #192-Ubuntu SMP Tue Feb 27 10:45:36 UTC 2018 x86_64 x86_64
Memory: 2.939197540283203 GB (2338.95703125 MB free)
Uptime: 90660.0 sec
Load Avg:  0.98779296875  1.068359375  1.03466796875
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz    5376971 s       1362 s     371184 s    2045532 s         96 s
#2  3500 MHz    1414331 s       5235 s     142562 s    7311749 s          2 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.6
6 required packages:
 - Conda                         0.7.1
 - JSON                          0.17.2
 - PyCall                        1.16.0
 - PyPlot                        2.5.0
 - RDatasets                     0.4.0
 - TransformUtils                0.1.0
29 additional packages:
 - BinDeps                       0.8.8
 - BinaryProvider                0.3.0
 - CSV                           0.2.4
 - CategoricalArrays             0.3.9
 - CodecZlib                     0.4.3
 - ColorTypes                    0.6.7
 - Colors                        0.8.2
 - Compat                        0.64.0
 - DataFrames                    0.11.6
 - DataStreams                   0.3.4
 - DataStructures                0.8.1
 - FileIO                        0.7.0
 - FixedPointNumbers             0.4.6
 - LaTeXStrings                  0.3.0
 - MacroTools                    0.4.0
 - Missings                      0.2.9
 - Mocking                       0.5.2
 - NamedTuples                   4.0.0
 - Nullables                     0.0.5
 - RData                         0.4.0
 - Reexport                      0.1.0
 - SHA                           0.5.7
 - SortingAlgorithms             0.2.1
 - StatsBase                     0.21.0
 - TimeZones                     0.6.5
 - TranscodingStreams            0.5.2
 - URIParser                     0.3.1
 - VersionParsing                1.1.0
 - WeakRefStrings                0.4.5
INFO: Testing TransformUtils
[TEST] constructors SO3, Quaternion, AngleAxis... [SUCCESS]
[TEST] comparison functions for SO3, Quaternion, AngleAxis... [SUCCESS]
[TEST] trivial case quaterion -> SO3 -> Euler -> quaternion... [SUCCESS]
[TEST] convert functions 
WARNING: Need better coverage on convert function tests
[TEST] compare SO3 and quaternion rotations... dAA = TransformUtils.AngleAxis(0.7853981633974483, [1.0, 0.0, 0.0])
dAA = TransformUtils.so3([0.0 -0.0342168 -0.0280315; 0.0342168 0.0 -0.0120488; 0.0280315 0.0120488 0.0])
dAA = TransformUtils.so3([0.0 0.0761026 -0.158629; -0.0761026 0.0 -0.0101596; 0.158629 0.0101596 0.0])
dAA = TransformUtils.so3([0.0 0.0558113 0.0124818; -0.0558113 0.0 0.108563; -0.0124818 -0.108563 0.0])
dAA = TransformUtils.Quaternion(0.9871888646051189, [-0.133328, -0.04539, -0.0749771])
dAA = TransformUtils.SO3([0.987721 -0.0269021 0.153895; 0.014957 0.996821 0.0782566; -0.155511 -0.0749938 0.984983])
[SUCCESS]
[TEST] basic SE3 mechanics... [SUCCESS]
[TEST] SE3 ⊕ and ⊖ mechanics... Compare operations on two different SE3 transforms
xi = TransformUtils.SE3(TransformUtils.SO3([0.885228 -0.062731 0.460908; 0.154493 0.974267 -0.164121; -0.438752 0.216491 0.87214]), [0.269205, 0.301187, -1.31308])
xj = TransformUtils.SE3(TransformUtils.SO3([0.976249 -0.117094 -0.182281; 0.161097 0.954914 0.249372; 0.144863 -0.272814 0.951098]), [1.28385, 0.0926673, 1.3838])
Dx = TransformUtils.SE3(TransformUtils.SO3([0.825533 0.16357 -0.54013; 0.127072 0.878625 0.460294; 0.549862 -0.448623 0.704549]), [-0.317284, 0.317048, 2.85394])
[SUCCESS]
[TEST] previous discovered issues
TransformUtils.convert(Euler, q) = TransformUtils.Euler(0.7853981633974484, 0.0, 1.5707963267948963, TransformUtils.Quaternion(1.0, [0.0, 0.0, 0.0]))
INFO: TransformUtils tests passed

>>> End of log
