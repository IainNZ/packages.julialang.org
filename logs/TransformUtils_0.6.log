>>> 'Pkg.add("TransformUtils")' log
INFO: Installing TransformUtils v0.1.0
INFO: Package database updated
INFO: METADATA is out-of-date — you may not have the latest version of TransformUtils
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("TransformUtils")' log
Julia Version 0.6.2
Commit d386e40c17 (2017-12-13 18:08 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-135-generic #184-Ubuntu SMP Wed Oct 18 11:55:51 UTC 2017 x86_64 x86_64
Memory: 2.93927001953125 GB (2381.38671875 MB free)
Uptime: 76562.0 sec
Load Avg:  1.00732421875  1.048828125  1.0126953125
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz    4705795 s       1223 s     281474 s    1454231 s        100 s
#2  3499 MHz    1094349 s       5664 s     123824 s    6257308 s          2 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.6
2 required packages:
 - JSON                          0.16.4
 - TransformUtils                0.1.0
2 additional packages:
 - Compat                        0.53.0
 - Nullables                     0.0.3
INFO: Testing TransformUtils
[TEST] constructors SO3, Quaternion, AngleAxis... [SUCCESS]
[TEST] comparison functions for SO3, Quaternion, AngleAxis... [SUCCESS]
[TEST] trivial case quaterion -> SO3 -> Euler -> quaternion... [SUCCESS]
[TEST] convert functions 
WARNING: Need better coverage on convert function tests
[TEST] compare SO3 and quaternion rotations... dAA = TransformUtils.AngleAxis(0.7853981633974483, [1.0, 0.0, 0.0])
dAA = TransformUtils.so3([0.0 -0.123575 0.0306896; 0.123575 0.0 0.0365379; -0.0306896 -0.0365379 0.0])
dAA = TransformUtils.so3([0.0 -0.0418476 0.0824978; 0.0418476 0.0 -0.0261281; -0.0824978 0.0261281 0.0])
dAA = TransformUtils.so3([0.0 -0.0844453 0.0442112; 0.0844453 0.0 0.116358; -0.0442112 -0.116358 0.0])
dAA = TransformUtils.Quaternion(0.9974473818435698, [0.0536883, -0.0362395, 0.0300498])
dAA = TransformUtils.SO3([0.992472 -0.121981 0.010936; 0.121835 0.992463 0.0131467; -0.0124572 -0.0117153 0.999854])
[SUCCESS]
[TEST] basic SE3 mechanics... [SUCCESS]
[TEST] SE3 ⊕ and ⊖ mechanics... Compare operations on two different SE3 transforms
xi = TransformUtils.SE3(TransformUtils.SO3([0.986958 -0.129381 0.0957856; 0.123125 0.990018 0.0685954; -0.103704 -0.0559071 0.993036]), [-0.408633, -0.700475, 1.05006])
xj = TransformUtils.SE3(TransformUtils.SO3([0.977062 -0.212086 -0.0192141; 0.211608 0.977054 -0.0242386; 0.0239139 0.0196168 0.999522]), [2.14914, 0.0702359, -0.328146])
Dx = TransformUtils.SE3(TransformUtils.SO3([0.987893 -0.091055 -0.125603; 0.0817454 0.993644 -0.0773911; 0.131851 0.0661867 0.989057]), [2.76224, 0.509141, -1.07075])
[SUCCESS]
[TEST] previous discovered issues
TransformUtils.convert(Euler, q) = TransformUtils.Euler(0.7853981633974484, 0.0, 1.5707963267948963, TransformUtils.Quaternion(1.0, [0.0, 0.0, 0.0]))
INFO: TransformUtils tests passed

>>> End of log
