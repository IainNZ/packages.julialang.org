>>> 'Pkg.add("PyAMG")' log
INFO: Installing BinDeps v0.7.0
INFO: Installing Conda v0.5.3
INFO: Installing MacroTools v0.3.7
INFO: Installing PyAMG v0.2.0
INFO: Installing PyCall v1.14.0
INFO: Installing SHA v0.3.3
INFO: Installing URIParser v0.1.8
INFO: Building Conda
INFO: Building PyCall
INFO: Using the Python distribution in the Conda package by default.
To use a different Python version, set ENV["PYTHON"]="pythoncommand" and re-run Pkg.build("PyCall").
Fetching package metadata .........
Solving package specifications: .

# All requested packages already installed.
# packages in environment at /home/vagrant/.julia/v0.5/Conda/deps/usr:
#
numpy                     1.13.1                   py27_0  
INFO: PyCall is using /home/vagrant/.julia/v0.5/Conda/deps/usr/bin/python (Python 2.7.13) at /home/vagrant/.julia/v0.5/Conda/deps/usr/bin/python, libpython = /home/vagrant/.julia/v0.5/Conda/deps/usr/lib/libpython2.7
INFO: /home/vagrant/.julia/v0.5/PyCall/deps/deps.jl has not changed
INFO: /home/vagrant/.julia/v0.5/PyCall/deps/PYTHON has not changed
INFO: Package database updated
INFO: METADATA is out-of-date — you may not have the latest version of PyAMG
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("PyAMG")' log
Julia Version 0.5.2
Commit f4c6c9d (2017-05-06 16:34 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-121-generic #170-Ubuntu SMP Wed Jun 14 09:04:33 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (644.234375 MB free)
Uptime: 25831.0 sec
Load Avg:  1.00439453125  1.00927734375  0.9609375
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz    1485603 s       5650 s     148027 s     618334 s         48 s
#2  3500 MHz     525877 s       1142 s      73275 s    1917121 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.7.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.5
2 required packages:
 - JSON                          0.13.0
 - PyAMG                         0.2.0
7 additional packages:
 - BinDeps                       0.7.0
 - Compat                        0.28.0
 - Conda                         0.5.3
 - MacroTools                    0.3.7
 - PyCall                        1.14.0
 - SHA                           0.3.3
 - URIParser                     0.1.8
INFO: Computing test dependencies for PyAMG...
INFO: Installing Combinatorics v0.4.1
INFO: Installing DataStructures v0.6.0
INFO: Installing IterTools v0.1.0
INFO: Installing IterativeSolvers v0.3.1
INFO: Installing LinearMaps v0.3.0
INFO: Installing Polynomials v0.1.5
INFO: Installing RecipesBase v0.1.0
INFO: Installing SpecialFunctions v0.2.0
INFO: Installing StatsBase v0.17.0
INFO: Installing SugarBLAS v0.0.4
INFO: Installing UnicodePlots v0.2.4
INFO: Testing PyAMG
=================================================
Test 1: Julia `\` vs PyAMG Blackbox `solve` (2D) Laplacian
 \ :   0.986156 seconds (554.32 k allocations: 32.044 MB, 10.05% gc time)
PyAMG-Warmup: /home/vagrant/.julia/v0.5/Conda/deps/usr/lib/python2.7/site-packages/pyamg/strength.py:533: FutureWarning: elementwise comparison failed; returning scalar instead, but in the future will perform elementwise comparison
  if B == 'ones':
  2.464159 seconds (1.42 M allocations: 61.772 MB, 0.76% gc time)
PyAMG:   0.190094 seconds (268 allocations: 942.203 KB)
|x_\ - x_amg|_∞ = 1.3972364931724712e-12
|A x_amg - b|_∞ = 3.2263187677017413e-9
=================================================
Test 2: Julia `\` vs PyAMG Blackbox `solve` (3D)
 \ :   0.741968 seconds (68 allocations: 93.885 MB, 3.05% gc time)
PyAMG-Warmup:   1.617784 seconds (267 allocations: 3.224 MB)
PyAMG:   1.560589 seconds (267 allocations: 3.224 MB)
|x_\ - x_amg|_∞ = 1.0657932869584386e-12
|A x_amg - b|_∞ = 1.4201546605363546e-9
=================================================
Test 3: RugeStubenSolver (3D)
        50 x 50 x 50 grid = 125k dofs 
Create solver:   0.654030 seconds (34.53 k allocations: 15.485 MB)
First solve:   0.447989 seconds (82.24 k allocations: 4.084 MB)
Second solve: (tol 1e-9)  0.399532 seconds (8.47 k allocations: 1.331 MB)
Third solve: (tol 1e-6)  0.223393 seconds (175 allocations: 983.188 KB, 1.25% gc time)
|A x_amg - b|_∞ = 2.532215049200204e-6
=================================================
Test 4: \, ldiv, and kwargs
=================================================
Test 5: AMG as a preconditioner
        100 x 100 Dirichlet problem, TOL = 1e-4
        PyAMG vs CG vs PCG  (using IterativeSolvers)
Plain CG:
  2.156156 seconds (2.31 M allocations: 121.032 MB, 3.31% gc time)
  0.035907 seconds (844 allocations: 20.865 MB, 14.38% gc time)
PyAMG-preconditionerd CG:  (see `aspreconditioner`)
  0.129474 seconds (32.10 k allocations: 2.355 MB)
  0.020701 seconds (483 allocations: 1.010 MB)
PyAMG solver
  0.020012 seconds (196 allocations: 85.781 KB)
  0.017884 seconds (195 allocations: 85.734 KB)
|x_cg-x| = 3.5312070957405564e-6 
|x_pcg-x| = 2.7796572129198973e-6
|x_pyamg-x| = 1.0901104402769516e-7
INFO: PyAMG tests passed
INFO: Removing Combinatorics v0.4.1
INFO: Removing DataStructures v0.6.0
INFO: Removing IterTools v0.1.0
INFO: Removing IterativeSolvers v0.3.1
INFO: Removing LinearMaps v0.3.0
INFO: Removing Polynomials v0.1.5
INFO: Removing RecipesBase v0.1.0
INFO: Removing SpecialFunctions v0.2.0
INFO: Removing StatsBase v0.17.0
INFO: Removing SugarBLAS v0.0.4
INFO: Removing UnicodePlots v0.2.4

>>> End of log
