>>> 'Pkg.add("PyAMG")' log
INFO: Installing BinDeps v0.5.0
INFO: Installing Conda v0.5.3
INFO: Installing MacroTools v0.3.6
INFO: Installing PyAMG v0.0.9
INFO: Installing PyCall v1.12.0
INFO: Installing SHA v0.3.2
INFO: Installing URIParser v0.1.8
INFO: Building Conda
INFO: Building PyCall
INFO: Using the Python distribution in the Conda package by default.
To use a different Python version, set ENV["PYTHON"]="pythoncommand" and re-run Pkg.build("PyCall").
Fetching package metadata .........
Solving package specifications: .

# All requested packages already installed.
# packages in environment at /home/vagrant/.julia/v0.5/Conda/deps/usr:
#
numpy                     1.12.1                   py27_0  
INFO: PyCall is using /home/vagrant/.julia/v0.5/Conda/deps/usr/bin/python (Python 2.7.13) at /home/vagrant/.julia/v0.5/Conda/deps/usr/bin/python, libpython = /home/vagrant/.julia/v0.5/Conda/deps/usr/lib/libpython2.7
INFO: /home/vagrant/.julia/v0.5/PyCall/deps/deps.jl has not changed
INFO: /home/vagrant/.julia/v0.5/PyCall/deps/PYTHON has not changed
INFO: Package database updated
INFO: METADATA is out-of-date — you may not have the latest version of PyAMG
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("PyAMG")' log
Julia Version 0.5.2
Commit f4c6c9d (2017-05-06 16:34 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-117-generic #164-Ubuntu SMP Fri Apr 7 11:05:26 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (641.76953125 MB free)
Uptime: 25443.0 sec
Load Avg:  1.0029296875  0.9423828125  0.9453125
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3504 MHz    1558066 s        534 s     132708 s     524969 s         39 s
#2  3504 MHz     394176 s       6267 s      64606 s    2030846 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.7.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.5
2 required packages:
 - JSON                          0.12.0
 - PyAMG                         0.0.9
7 additional packages:
 - BinDeps                       0.5.0
 - Compat                        0.25.1
 - Conda                         0.5.3
 - MacroTools                    0.3.6
 - PyCall                        1.12.0
 - SHA                           0.3.2
 - URIParser                     0.1.8
INFO: Computing test dependencies for PyAMG...
INFO: Installing DataStructures v0.5.3
INFO: Installing IterativeSolvers v0.3.0
INFO: Installing LinearMaps v0.3.0
INFO: Installing RecipesBase v0.1.0
INFO: Installing SpecialFunctions v0.1.1
INFO: Installing StatsBase v0.14.1
INFO: Installing SugarBLAS v0.0.3
INFO: Installing UnicodePlots v0.2.3
INFO: Testing PyAMG
=================================================
Test 1: Julia `\` vs PyAMG Blackbox `solve` (2D) Laplacian
 \ :   0.995759 seconds (553.78 k allocations: 32.020 MB, 7.96% gc time)
PyAMG-Warmup: /home/vagrant/.julia/v0.5/Conda/deps/usr/lib/python2.7/site-packages/pyamg/strength.py:533: FutureWarning: elementwise comparison failed; returning scalar instead, but in the future will perform elementwise comparison
  if B == 'ones':
  3.059530 seconds (1.42 M allocations: 61.832 MB, 0.76% gc time)
PyAMG:   0.272532 seconds (268 allocations: 942.203 KB)
|x_\ - x_amg|_∞ = 1.2002829286039685e-12
|A x_amg - b|_∞ = 3.2163711694011e-9
=================================================
Test 2: Julia `\` vs PyAMG Blackbox `solve` (3D)
 \ :   0.916976 seconds (68 allocations: 93.885 MB, 2.55% gc time)
PyAMG-Warmup:   1.218048 seconds (267 allocations: 3.224 MB)
PyAMG:   1.345854 seconds (267 allocations: 3.224 MB)
|x_\ - x_amg|_∞ = 1.2910783553365945e-12
|A x_amg - b|_∞ = 7.85963294447356e-10
=================================================
Test 3: RugeStubenSolver (3D)
        50 x 50 x 50 grid = 125k dofs 
Create solver:   0.676144 seconds (34.53 k allocations: 15.485 MB)
First solve:   0.436490 seconds (82.35 k allocations: 4.089 MB)
Second solve: (tol 1e-9)  0.383868 seconds (8.47 k allocations: 1.331 MB)
Third solve: (tol 1e-6)  0.211745 seconds (175 allocations: 983.188 KB, 1.16% gc time)
|A x_amg - b|_∞ = 2.532215134465332e-6
=================================================
Test 4: \, ldiv, and kwargs
=================================================
Test 5: AMG as a preconditioner
        100 x 100 Dirichlet problem, TOL = 1e-4
        PyAMG vs CG vs PCG  (using IterativeSolvers)
Plain CG:
ERROR: LoadError: MethodError: no method matching cg(::SparseMatrixCSC{Float64,Int64}, ::Array{Float64,1}, ::Int64; tol=0.0001)
Closest candidates are:
  cg(::Any, ::Any; kwargs...) at /home/vagrant/.julia/v0.5/IterativeSolvers/src/cg.jl:7
 in include_from_node1(::String) at ./loading.jl:488
 in process_options(::Base.JLOptions) at ./client.jl:265
 in _start() at ./client.jl:321
while loading /home/vagrant/.julia/v0.5/PyAMG/test/runtests.jl, in expression starting on line 188
================================[ ERROR: PyAMG ]================================

failed process: Process(`/home/vagrant/julia/bin/julia -Cx86-64 -J/home/vagrant/julia/lib/julia/sys.so --compile=yes --depwarn=yes --check-bounds=yes --code-coverage=none --color=no --compilecache=yes /home/vagrant/.julia/v0.5/PyAMG/test/runtests.jl`, ProcessExited(1)) [1]

================================================================================
INFO: Removing DataStructures v0.5.3
INFO: Removing IterativeSolvers v0.3.0
INFO: Removing LinearMaps v0.3.0
INFO: Removing RecipesBase v0.1.0
INFO: Removing SpecialFunctions v0.1.1
INFO: Removing StatsBase v0.14.1
INFO: Removing SugarBLAS v0.0.3
INFO: Removing UnicodePlots v0.2.3
ERROR: PyAMG had test errors
 in #test#61(::Bool, ::Function, ::Array{AbstractString,1}) at ./pkg/entry.jl:748
 in (::Base.Pkg.Entry.#kw##test)(::Array{Any,1}, ::Base.Pkg.Entry.#test, ::Array{AbstractString,1}) at ./<missing>:0
 in (::Base.Pkg.Dir.##2#3{Array{Any,1},Base.Pkg.Entry.#test,Tuple{Array{AbstractString,1}}})() at ./pkg/dir.jl:31
 in cd(::Base.Pkg.Dir.##2#3{Array{Any,1},Base.Pkg.Entry.#test,Tuple{Array{AbstractString,1}}}, ::String) at ./file.jl:59
 in #cd#1(::Array{Any,1}, ::Function, ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N}) at ./pkg/dir.jl:31
 in (::Base.Pkg.Dir.#kw##cd)(::Array{Any,1}, ::Base.Pkg.Dir.#cd, ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N}) at ./<missing>:0
 in #test#3(::Bool, ::Function, ::String, ::Vararg{String,N}) at ./pkg/pkg.jl:258
 in test(::String, ::Vararg{String,N}) at ./pkg/pkg.jl:258
 in eval(::Module, ::Any) at ./boot.jl:234
 in process_options(::Base.JLOptions) at ./client.jl:242
 in _start() at ./client.jl:321

>>> End of log
