>>> 'Pkg.add("PyAMG")' log
INFO: Installing BinDeps v0.4.7
INFO: Installing Conda v0.5.3
INFO: Installing MacroTools v0.3.6
INFO: Installing PyAMG v0.0.9
INFO: Installing PyCall v1.12.0
INFO: Installing SHA v0.3.2
INFO: Installing URIParser v0.1.8
INFO: Building Conda
INFO: Building PyCall
INFO: Using the Python distribution in the Conda package by default.
To use a different Python version, set ENV["PYTHON"]="pythoncommand" and re-run Pkg.build("PyCall").
Fetching package metadata .........
Solving package specifications: .

# All requested packages already installed.
# packages in environment at /home/vagrant/.julia/v0.5/Conda/deps/usr:
#
numpy                     1.12.1                   py27_0  
INFO: PyCall is using /home/vagrant/.julia/v0.5/Conda/deps/usr/bin/python (Python 2.7.13) at /home/vagrant/.julia/v0.5/Conda/deps/usr/bin/python, libpython = /home/vagrant/.julia/v0.5/Conda/deps/usr/lib/libpython2.7
INFO: /home/vagrant/.julia/v0.5/PyCall/deps/deps.jl has not changed
INFO: /home/vagrant/.julia/v0.5/PyCall/deps/PYTHON has not changed
INFO: Package database updated

>>> 'Pkg.test("PyAMG")' log
Julia Version 0.5.1
Commit 6445c82 (2017-03-05 13:25 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-116-generic #163-Ubuntu SMP Fri Mar 31 14:13:22 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (693.515625 MB free)
Uptime: 24000.0 sec
Load Avg:  1.009765625  0.970703125  0.94775390625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz    1427790 s       6824 s     132190 s     537716 s         40 s
#2  3499 MHz     443142 s         98 s      62930 s    1843762 s          1 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.7.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.5
2 required packages:
 - JSON                          0.9.1
 - PyAMG                         0.0.9
7 additional packages:
 - BinDeps                       0.4.7
 - Compat                        0.24.0
 - Conda                         0.5.3
 - MacroTools                    0.3.6
 - PyCall                        1.12.0
 - SHA                           0.3.2
 - URIParser                     0.1.8
INFO: Computing test dependencies for PyAMG...
INFO: Installing IterativeSolvers v0.2.2
INFO: Testing PyAMG
=================================================
Test 1: Julia `\` vs PyAMG Blackbox `solve` (2D) Laplacian
 \ :   0.911272 seconds (565.32 k allocations: 47.429 MB, 15.23% gc time)
PyAMG-Warmup: /home/vagrant/.julia/v0.5/Conda/deps/usr/lib/python2.7/site-packages/pyamg/strength.py:533: FutureWarning: elementwise comparison failed; returning scalar instead, but in the future will perform elementwise comparison
  if B == 'ones':
  3.289566 seconds (1.42 M allocations: 62.155 MB, 0.52% gc time)
PyAMG:   0.258390 seconds (268 allocations: 942.203 KB)
|x_\ - x_amg|_∞ = 1.1887345274796957e-11
|A x_amg - b|_∞ = 3.954198746214388e-9
=================================================
Test 2: Julia `\` vs PyAMG Blackbox `solve` (3D)
 \ :   2.413629 seconds (142 allocations: 348.812 MB, 8.39% gc time)
PyAMG-Warmup:   1.170799 seconds (267 allocations: 3.224 MB)
PyAMG:   1.272571 seconds (267 allocations: 3.224 MB)
|x_\ - x_amg|_∞ = 1.4812664983487878e-12
|A x_amg - b|_∞ = 8.83552786490327e-10
=================================================
Test 3: RugeStubenSolver (3D)
        50 x 50 x 50 grid = 125k dofs 
Create solver:   0.574251 seconds (34.53 k allocations: 15.485 MB, 0.27% gc time)
First solve:   0.335848 seconds (82.32 k allocations: 4.088 MB)
Second solve: (tol 1e-9)  0.387808 seconds (8.47 k allocations: 1.331 MB)
Third solve: (tol 1e-6)  0.225103 seconds (163 allocations: 983.000 KB)
|A x_amg - b|_∞ = 2.532215134465332e-6
=================================================
Test 4: \, ldiv, and kwargs
=================================================
Test 5: AMG as a preconditioner
        100 x 100 Dirichlet problem, TOL = 1e-4
        PyAMG vs CG vs PCG  (using IterativeSolvers)
Plain CG:
  0.489140 seconds (176.55 k allocations: 69.119 MB, 3.13% gc time)
  0.055677 seconds (1.64 k allocations: 61.633 MB, 5.99% gc time)
PyAMG-preconditionerd CG:  (see `aspreconditioner`)
  0.301942 seconds (146.81 k allocations: 8.573 MB, 1.02% gc time)
  0.021222 seconds (493 allocations: 2.078 MB)
PyAMG solver
  0.023885 seconds (196 allocations: 85.781 KB)
  0.020140 seconds (195 allocations: 85.734 KB)
|x_cg-x| = 3.5312070957503375e-6 
|x_pcg-x| = 2.7796572189415142e-6
|x_pyamg-x| = 1.0901101513640425e-7
INFO: PyAMG tests passed
INFO: Removing IterativeSolvers v0.2.2

>>> End of log
