>>> 'Pkg.add("ParserCombinator")' log
INFO: Installing AutoHashEquals v0.0.9
INFO: Installing ParserCombinator v1.7.8
INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of ParserCombinator
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("ParserCombinator")' log
Julia Version 0.5.0-dev+4330
Commit 493157e (2016-05-26 09:11 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.7.1 (ORCJIT, haswell)
INFO: Computing test dependencies for ParserCombinator...
INFO: Installing ZipFile v0.2.6
INFO: Installing Zlib v0.1.12
INFO: Testing ParserCombinator
sources ok
 1  = 1
 - 1  = -1
 1 + 1  = 2
 1 - 1  = 0
 - 1 - 1  = -2
fix ok
WARNING: x.(i) is deprecated; use getfield(x, i) instead.
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in broadcast at ./deprecated.jl:1120 [inlined]
 in (::ParserCombinator.#producer#63{ParserCombinator.Seq,Set{ParserCombinator.Matcher}})() at /home/vagrant/.julia/v0.5/ParserCombinator/src/core/print.jl:22
while loading /home/vagrant/.julia/v0.5/ParserCombinator/test/core/print.jl, in expression starting on line 2
Seq
WARNING: x.(i) is deprecated; use getfield(x, i) instead.
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in broadcast at ./deprecated.jl:1120 [inlined]
 in (::ParserCombinator.#producer#63{ParserCombinator.Seq,Set{ParserCombinator.Matcher}})() at /home/vagrant/.julia/v0.5/ParserCombinator/src/core/print.jl:22
while loading /home/vagrant/.julia/v0.5/ParserCombinator/test/core/print.jl, in expression starting on line 3
Transform
+-Alt
| +-[1]:Seq
| | +-[1]:Equal
| | | `-"a"
| | `-[2]:Drop
| |   `-Equal
| |     `-"b"
| `-[2]:Pattern
|   +-text="c"
|   +-regex=r"^(?:c)(.??)"
|   `-groups
`-f
print ok
names ok
2 2 aa r"a{2,2}"
1 2 aa r"a{1,2}?"
1 3 aaa r"a{1,3}"
1 1  r"a{1,1}?"
3 5 a r"a{3,5}"
3 5  r"a{3,5}?"
2 2  r"a{2,2}"
1 3 aaa r"a{1,3}?"
3 3 aa r"a{3,3}"
3 4 aaaa r"a{3,4}?"
2 4 aaaa r"a{2,4}"
3 4 aaa r"a{3,4}?"
3 5 a r"a{3,5}"
3 5 aaaa r"a{3,5}?"
2 3 aaaa r"a{2,3}"
3 4 aaaa r"a{3,4}?"
3 3 a r"a{3,3}"
2 4  r"a{2,4}?"
2 3 aaaa r"a{2,3}"
1 2 aa r"a{1,2}?"
tests ok
greedy true
ParserCombinator.NoCache{S,I}
  0.046397 seconds (22.09 k allocations: 1.110 MB)
  0.015064 seconds (11.91 k allocations: 736.391 KB)
n results: 35
max depth: 5
max iter: 4
n calls: 323
ParserCombinator.Cache{S,I}
  0.115014 seconds (62.18 k allocations: 2.276 MB)
  0.013599 seconds (35.39 k allocations: 1.062 MB)
n results: 35
max depth: 4
max iter: 4
n calls: 198
slow ok

WARNING: deprecated syntax "Base.(:(==))".
Use "Base.:(==)" instead.
  1:foo        00 Trace->Case
  1:foo        01  Case->Pattern
  4:           01  Case<-["foo"]
  4:           00 Trace<-["Foo"]
case ok
WARNING: Method definition signed_prod(Any) in module CoreTest at /home/vagrant/.julia/v0.5/ParserCombinator/test/core/fix.jl:5 overwritten at /home/vagrant/.julia/v0.5/ParserCombinator/test/core/calc.jl:3.
WARNING: Method definition signed_sum(Any) in module CoreTest at /home/vagrant/.julia/v0.5/ParserCombinator/test/core/fix.jl:6 overwritten at /home/vagrant/.julia/v0.5/ParserCombinator/test/core/calc.jl:4.
WARNING: Method definition ==(CoreTest.Node, CoreTest.Node) in module CoreTest at /home/vagrant/.julia/v0.5/ParserCombinator/test/core/fix.jl:9 overwritten at /home/vagrant/.julia/v0.5/ParserCombinator/test/core/calc.jl:7.
WARNING: Method definition calc(Float64) in module CoreTest at /home/vagrant/.julia/v0.5/ParserCombinator/test/core/fix.jl:10 overwritten at /home/vagrant/.julia/v0.5/ParserCombinator/test/core/calc.jl:8.
WARNING: Method definition (::Type{CoreTest.Inv})(Any) in module CoreTest at /home/vagrant/.julia/v0.5/ParserCombinator/test/core/fix.jl:11 overwritten at /home/vagrant/.julia/v0.5/ParserCombinator/test/core/calc.jl:9.
WARNING: Method definition calc(CoreTest.Inv) in module CoreTest at /home/vagrant/.julia/v0.5/ParserCombinator/test/core/fix.jl:12 overwritten at /home/vagrant/.julia/v0.5/ParserCombinator/test/core/calc.jl:10.
WARNING: Method definition (::Type{CoreTest.Prd})(Any) in module CoreTest at /home/vagrant/.julia/v0.5/ParserCombinator/test/core/fix.jl:13 overwritten at /home/vagrant/.julia/v0.5/ParserCombinator/test/core/calc.jl:11.
WARNING: Method definition calc(CoreTest.Prd) in module CoreTest at /home/vagrant/.julia/v0.5/ParserCombinator/test/core/fix.jl:14 overwritten at /home/vagrant/.julia/v0.5/ParserCombinator/test/core/calc.jl:12.
WARNING: Method definition (::Type{CoreTest.Neg})(Any) in module CoreTest at /home/vagrant/.julia/v0.5/ParserCombinator/test/core/fix.jl:15 overwritten at /home/vagrant/.julia/v0.5/ParserCombinator/test/core/calc.jl:13.
WARNING: Method definition calc(CoreTest.Neg) in module CoreTest at /home/vagrant/.julia/v0.5/ParserCombinator/test/core/fix.jl:16 overwritten at /home/vagrant/.julia/v0.5/ParserCombinator/test/core/calc.jl:14.
WARNING: Method definition (::Type{CoreTest.Sum})(Any) in module CoreTest at /home/vagrant/.julia/v0.5/ParserCombinator/test/core/fix.jl:17 overwritten at /home/vagrant/.julia/v0.5/ParserCombinator/test/core/calc.jl:15.
WARNING: Method definition calc(CoreTest.Sum) in module CoreTest at /home/vagrant/.julia/v0.5/ParserCombinator/test/core/fix.jl:18 overwritten at /home/vagrant/.julia/v0.5/ParserCombinator/test/core/calc.jl:16.
all
+-[1]:sum
| `-Transform
|   +-Seq
|   | +-[1]:prd
|   | | +-Seq
|   | | | +-[1]:neg
|   | | | | `-Alt
|   | | | |   +-[1]:Seq
|   | | | |   | +-[1]:Drop
|   | | | |   | | `-Equal
|   | | | |   | |   `-"("
|   | | | |   | +-[2]:sum...
|   | | | |   | `-[3]:Drop
|   | | | |   |   `-Equal
|   | | | |   |     `-")"
|   | | | |   +-[2]:Transform
|   | | | |   | +-Pattern
|   | | | |   | | +-text="-?(\d*\.?\d+|\d+\.\d*)([eE]\d+)?"
|   | | | |   | | +-regex=r"^(?:-?(\d*\.?\d+|\d+\.\d*)([eE]\d+)?)(.??)"
|   | | | |   | | `-groups
|   | | | |   | `-f
|   | | | |   `-[3]:Transform
|   | | | |     +-Seq
|   | | | |     | +-[1]:Drop
|   | | | |     | | `-Equal
|   | | | |     | |   `-"-"
|   | | | |     | `-[2]:neg...
|   | | | |     `-f
|   | | | `-[2]:Depth
|   | | |   +-Alt
|   | | |   | +-[1]:mul
|   | | |   | | +-[1]:Drop
|   | | |   | | | `-Equal
|   | | |   | | |   `-"*"
|   | | |   | | `-[2]:neg...
|   | | |   | `-[2]:div
|   | | |   |   +-Seq
|   | | |   |   | +-[1]:Drop
|   | | |   |   | | `-Equal
|   | | |   |   | |   `-"/"
|   | | |   |   | `-[2]:neg...
|   | | |   |   `-f
|   | | |   +-lo=0
|   | | |   +-hi=9223372036854775807
|   | | |   `-flatten=true
|   | | `-f
|   | `-[2]:Depth
|   |   +-Alt
|   |   | +-[1]:add
|   |   | | +-[1]:Drop
|   |   | | | `-Equal
|   |   | | |   `-"+"
|   |   | | `-[2]:prd...
|   |   | `-[2]:sub
|   |   |   +-Seq
|   |   |   | +-[1]:Drop
|   |   |   | | `-Equal
|   |   |   | |   `-"-"
|   |   |   | `-[2]:prd...
|   |   |   `-f
|   |   +-lo=0
|   |   +-hi=9223372036854775807
|   |   `-flatten=true
|   `-f
`-[2]:Eos
  1:1+2*3/4    00 Trace->all
  1:1+2*3/4    01  all->sum
  1:1+2*3/4    02   Transform->Seq
  1:1+2*3/4    03    Seq->prd
  1:1+2*3/4    04     prd->Seq
  1:1+2*3/4    05      Seq->neg
  1:1+2*3/4    06       Alt->Seq
  1:1+2*3/4    07        Seq->Drop
  1:1+2*3/4    08         Drop->Equal
   :           08         Drop<-!!!
   :           07        Seq<-!!!
   :           06       Alt<-!!!
  1:1+2*3/4    06       Alt->Transform
  1:1+2*3/4    07        Transform->Pattern
  2:+2*3/4     07        Transform<-["1"]
  2:+2*3/4     06       Alt<-[1.0]
  2:+2*3/4     05      Seq<-[1.0]
  2:+2*3/4     05      Seq->Depth
  2:+2*3/4     06       Depth->Alt
  2:+2*3/4     07        Alt->mul
  2:+2*3/4     08         mul->Drop
  2:+2*3/4     09          Drop->Equal
   :           09          Drop<-!!!
   :           08         mul<-!!!
   :           07        Alt<-!!!
  2:+2*3/4     07        Alt->div
  2:+2*3/4     08         div->Seq
  2:+2*3/4     09          Seq->Drop
  2:+2*3/4     10 Drop->Equal
   :           10 Drop<-!!!
   :           09          Seq<-!!!
   :           08         div<-!!!
   :           07        Alt<-!!!
   :           06       Depth<-!!!
  2:+2*3/4     05      Seq<-[]
  2:+2*3/4     04     prd<-[1.0]
  2:+2*3/4     03    Seq<-[CoreTest.Prd(Any[1.0])]
  2:+2*3/4     03    Seq->Depth
  2:+2*3/4     04     Depth->Alt
  2:+2*3/4     05      Alt->add
  2:+2*3/4     06       add->Drop
  2:+2*3/4     07        Drop->Equal
  3:2*3/4      07        Drop<-["+"]
  3:2*3/4      06       add<-[]
  3:2*3/4      06       add->prd
  3:2*3/4      07        prd->Seq
  3:2*3/4      08         Seq->neg
  3:2*3/4      09          Alt->Seq
  3:2*3/4      10 Seq->Drop
  3:2*3/4      11  Drop->Equal
   :           11  Drop<-!!!
   :           10 Seq<-!!!
   :           09          Alt<-!!!
  3:2*3/4      09          Alt->Transform
  3:2*3/4      10 Transform->Pattern
  4:*3/4       10 Transform<-["2"]
  4:*3/4       09          Alt<-[2.0]
  4:*3/4       08         Seq<-[2.0]
  4:*3/4       08         Seq->Depth
  4:*3/4       09          Depth->Alt
  4:*3/4       10 Alt->mul
  4:*3/4       11  mul->Drop
  4:*3/4       12   Drop->Equal
  5:3/4        12   Drop<-["*"]
  5:3/4        11  mul<-[]
  5:3/4        11  mul->neg
  5:3/4        12   Alt->Seq
  5:3/4        13    Seq->Drop
  5:3/4        14     Drop->Equal
   :           14     Drop<-!!!
   :           13    Seq<-!!!
   :           12   Alt<-!!!
  5:3/4        12   Alt->Transform
  5:3/4        13    Transform->Pattern
  6:/4         13    Transform<-["3"]
  6:/4         12   Alt<-[3.0]
  6:/4         11  mul<-[3.0]
  6:/4         10 Alt<-[3.0]
  6:/4         09          Depth<-[3.0]
  6:/4         09          Depth->Alt
  6:/4         10 Alt->mul
  6:/4         11  mul->Drop
  6:/4         12   Drop->Equal
   :           12   Drop<-!!!
   :           11  mul<-!!!
   :           10 Alt<-!!!
  6:/4         10 Alt->div
  6:/4         11  div->Seq
  6:/4         12   Seq->Drop
  6:/4         13    Drop->Equal
  7:4          13    Drop<-["/"]
  7:4          12   Seq<-[]
  7:4          12   Seq->neg
  7:4          13    Alt->Seq
  7:4          14     Seq->Drop
  7:4          15      Drop->Equal
   :           15      Drop<-!!!
   :           14     Seq<-!!!
   :           13    Alt<-!!!
  7:4          13    Alt->Transform
  7:4          14     Transform->Pattern
  8:           14     Transform<-["4"]
  8:           13    Alt<-[4.0]
  8:           12   Seq<-[4.0]
  8:           11  div<-[4.0]
  8:           10 Alt<-[CoreTest.Inv(4.0)]
  8:           09          Depth<-[CoreTest.Inv(4.0)]
  8:           09          Depth->Alt
  8:           10 Alt->mul
  8:           11  mul->Drop
  8:           12   Drop->Equal
   :           12   Drop<-!!!
   :           11  mul<-!!!
   :           10 Alt<-!!!
  8:           10 Alt->div
  8:           11  div->Seq
  8:           12   Seq->Drop
  8:           13    Drop->Equal
   :           13    Drop<-!!!
   :           12   Seq<-!!!
   :           11  div<-!!!
   :           10 Alt<-!!!
   :           09          Depth<-!!!
  8:           08         Seq<-[3.0,CoreTest.Inv(4.0)]
  8:           07        prd<-[2.0,3.0,CoreTest.Inv(4.0)]
  8:           06       add<-[CoreTest.Prd(Any[2.0,3.0,CoreTest.Inv(4.0)])]
  8:           05      Alt<-[CoreTest.Prd(Any[2.0,3.0,CoreTest.Inv(4.0)])]
  8:           04     Depth<-[CoreTest.Prd(Any[2.0,3.0,CoreTest.Inv(4.0)])]
  8:           04     Depth->Alt
  8:           05      Alt->add
  8:           06       add->Drop
  8:           07        Drop->Equal
   :           07        Drop<-!!!
   :           06       add<-!!!
   :           05      Alt<-!!!
  8:           05      Alt->sub
  8:           06       sub->Seq
  8:           07        Seq->Drop
  8:           08         Drop->Equal
   :           08         Drop<-!!!
   :           07        Seq<-!!!
   :           06       sub<-!!!
   :           05      Alt<-!!!
   :           04     Depth<-!!!
  8:           03    Seq<-[CoreTest.Prd(Any[2.0,3.0,CoreTest.Inv(4.0)])]
  8:           02   Transform<-[(Any[1.0]),(Any[2.0,3.0,(4.0)])]
  8:           01  all<-[(Any[(Any[1.0]),(Any[2.0,3.0,(4.0)])])]
  8:           01  all->Eos
  8:           01  all<-[]
  8:           00 Trace<-[(Any[(Any[1.0]),(Any[2.0,3.0,(4.0)])])]
1 = 1
-1 = -1
1+1 = 2
1-1 = 0
-1-1 = -2
1.0 = 1.0
-1.0 = -1.0
--1.0 = 1.0
1+2 = 3.0
1+2*3/4 = 2.5
CoreTest.Neg(CoreTest.Prd(Any[7.0,CoreTest.Inv(0.0),CoreTest.Inv(2.0),CoreTest.Inv(CoreTest.Neg(0.0))])) Inf Inf
CoreTest.Inv(CoreTest.Neg(0.0)) -Inf
CoreTest.Inv(CoreTest.Prd(Any[CoreTest.Neg(CoreTest.Sum(Any[CoreTest.Prd(Any[0.0])]))])) -Inf
CoreTest.Inv(CoreTest.Sum(Any[CoreTest.Prd(Any[CoreTest.Neg(CoreTest.Sum(Any[CoreTest.Prd(Any[0.0])]))])])) -Inf
CoreTest.Neg(CoreTest.Prd(Any[7.0,CoreTest.Inv(0.0),CoreTest.Inv(2.0),CoreTest.Inv(CoreTest.Sum(Any[CoreTest.Prd(Any[CoreTest.Neg(CoreTest.Sum(Any[CoreTest.Prd(Any[0.0])]))])])),3.0])) Inf Inf
Inf CoreTest.Sum(Any[CoreTest.Prd(Any[-9.0]),CoreTest.Neg(CoreTest.Prd(Any[7.0,CoreTest.Inv(0.0),CoreTest.Inv(2.0),CoreTest.Inv(CoreTest.Sum(Any[CoreTest.Prd(Any[CoreTest.Neg(CoreTest.Sum(Any[CoreTest.Prd(Any[0.0])]))])])),3.0])),CoreTest.Neg(CoreTest.Prd(Any[7.0,CoreTest.Inv(CoreTest.Neg(CoreTest.Sum(Any[CoreTest.Prd(Any[9.0]),CoreTest.Prd(Any[5.0])])))])),CoreTest.Prd(Any[5.0]),CoreTest.Neg(CoreTest.Prd(Any[7.0]))]) Inf
expr -5.0-0.0*9.0-0.0-7.0/8.0+8.0-6.0-1.0*4.0-0.0+3.0-5.0-((2.0+5.0)*8.0)*3.0
-177.875 -177.875
expr ((7.0)-3.0-0.0)+2.0+-9.0-2.0+1.0*2.0*(-1.0+3.0*0.0-1.0)
-9.0 -9.0
expr 6.0/3.0+0.0*7.0-0.0+0.0/7.0
2.0 2.0
expr -8.0+2.0*0.0*0.0+7.0+-(3.0)
-4.0 -4.0
expr -(1.0)*7.0+9.0-6.0/0.0+9.0+1.0-3.0*3.0+3.0+0.0*0.0/4.0/6.0-3.0*9.0-7.0
-Inf -Inf
expr ((6.0-9.0))+4.0*5.0+-(8.0-8.0-4.0)/-9.0+4.0
20.555555555555557 20.555555555555557
expr (((-4.0+5.0)))
1.0 1.0
expr -9.0-6.0*7.0*5.0*5.0*7.0*6.0/3.0+3.0/7.0
-14708.57142857143 -14708.57142857143
expr (4.0)
4.0 4.0
expr -(-5.0)+9.0+8.0*5.0+8.0+2.0-9.0-8.0/7.0
53.857142857142854 53.857142857142854
expr 6.0/0.0-4.0/4.0+8.0+3.0-1.0+2.0+7.0-8.0+1.0+9.0*0.0+(-6.0+3.0)
Inf Inf
expr (3.0/8.0-5.0)+1.0+(2.0/2.0)/(-5.0*0.0)-8.0-3.0+(2.0)/2.0/7.0-7.0
-Inf -Inf
expr (-9.0)-((8.0))-9.0*3.0/2.0*8.0
-125.0 -125.0
expr 7.0/8.0-(-6.0*1.0)/-7.0*8.0/4.0/3.0+1.0*1.0+(7.0-6.0+3.0)-0.0
5.303571428571429 5.303571428571429
expr 5.0*6.0-5.0+1.0/0.0+(-9.0+7.0)/6.0-2.0+(5.0-8.0+7.0*9.0-0.0)-1.0/9.0/3.0+6.0+2.0-3.0
Inf Inf
expr (7.0)*7.0/-4.0-3.0/6.0*5.0*7.0-(9.0)
-38.75 -38.75
expr -(6.0)/5.0-1.0+5.0
2.8 2.8
expr 6.0*6.0+-4.0+6.0/5.0
33.2 33.2
expr (3.0-9.0)+-6.0-6.0-1.0+6.0*-((8.0+4.0))-7.0
-98.0 -98.0
expr ((5.0)-6.0)*-5.0
5.0 5.0
calc ok
one level
  1:ab         00 Trace->Dot
  2:b          00 Trace<-['a']
multiple
  2:b          00 Trace->Depth
  2:b          01  Depth->Dot
  3:           01  Depth<-['b']
  3:           01  Depth->Dot
   :           01  Depth<-!!!
  3:           00 Trace<-['b']
  2:b          00 Trace->Depth
  2:b          01  Depth->Dot
   :           01  Depth<-!!!
  2:b          00 Trace<-[]
debug ok
abcdefghijklmnopqrstuvwxyz
0123456789
Any["abcdefghijklm"]
Any["abcdefghijklmnopqrstuvwxyz\n012345"]
Any["abcdefghijklm"]
Any["abcdefghijklmnopqrstuvwxyz\n012345"]
  1,1  :abcde...\n 00 Trace->Transform
  1,1  :abcde...\n 01  Transform->Seq
  1,1  :abcde...\n 02   Seq->Depth
  1,1  :abcde...\n 03    Depth->Pattern
  1,2  :bcdef...\n 03    Depth<-["a"]
  1,2  :bcdef...\n 03    Depth->Pattern
  1,3  :cdefg...\n 03    Depth<-["b"]
  1,3  :cdefg...\n 03    Depth->Pattern
  1,4  :defgh...\n 03    Depth<-["c"]
  1,4  :defgh...\n 03    Depth->Pattern
  1,5  :efghi...\n 03    Depth<-["d"]
  1,5  :efghi...\n 03    Depth->Pattern
  1,6  :fghij...\n 03    Depth<-["e"]
  1,6  :fghij...\n 03    Depth->Pattern
  1,7  :ghijk...\n 03    Depth<-["f"]
  1,7  :ghijk...\n 03    Depth->Pattern
  1,8  :hijkl...\n 03    Depth<-["g"]
  1,8  :hijkl...\n 03    Depth->Pattern
  1,9  :ijklm...\n 03    Depth<-["h"]
  1,9  :ijklm...\n 03    Depth->Pattern
  1,10 :jklmn...\n 03    Depth<-["i"]
  1,10 :jklmn...\n 03    Depth->Pattern
  1,11 :klmno...\n 03    Depth<-["j"]
  1,11 :klmno...\n 03    Depth->Pattern
  1,12 :lmnop...\n 03    Depth<-["k"]
  1,12 :lmnop...\n 03    Depth->Pattern
  1,13 :mnopq...\n 03    Depth<-["l"]
  1,13 :mnopq...\n 03    Depth->Pattern
  1,14 :nopqr...\n 03    Depth<-["m"]
  1,14 :nopqr...\n 03    Depth->Pattern
  1,15 :opqrs...\n 03    Depth<-["n"]
  1,15 :opqrs...\n 03    Depth->Pattern
  1,16 :pqrst...\n 03    Depth<-["o"]
  1,16 :pqrst...\n 03    Depth->Pattern
  1,17 :qrstu...\n 03    Depth<-["p"]
  1,17 :qrstu...\n 03    Depth->Pattern
  1,18 :rstuv...\n 03    Depth<-["q"]
  1,18 :rstuv...\n 03    Depth->Pattern
  1,19 :stuvwxyz\n 03    Depth<-["r"]
  1,19 :stuvwxyz\n 03    Depth->Pattern
  1,20 :tuvwxyz\n  03    Depth<-["s"]
  1,20 :tuvwxyz\n  03    Depth->Pattern
  1,21 :uvwxyz\n   03    Depth<-["t"]
  1,21 :uvwxyz\n   03    Depth->Pattern
  1,22 :vwxyz\n    03    Depth<-["u"]
  1,22 :vwxyz\n    03    Depth->Pattern
  1,23 :wxyz\n     03    Depth<-["v"]
  1,23 :wxyz\n     03    Depth->Pattern
  1,24 :xyz\n      03    Depth<-["w"]
  1,24 :xyz\n      03    Depth->Pattern
  1,25 :yz\n       03    Depth<-["x"]
  1,25 :yz\n       03    Depth->Pattern
  1,26 :z\n        03    Depth<-["y"]
  1,26 :z\n        03    Depth->Pattern
  1,27 :\n         03    Depth<-["z"]
  1,27 :\n         03    Depth->Pattern
       :           03    Depth<-!!!
  1,27 :\n         02   Seq<-["a","b","c","d","e","f","g","h..."w","x","y","z"]
  1,27 :\n         02   Seq->Equal
       :           02   Seq<-!!!
  1,1  :[unav...e] 02   Seq->Depth
  1,26 :[unav...e] 03    Depth->Pattern
       :           03    Depth<-!!!
  1,26 :[unav...e] 02   Seq<-["a","b","c","d","e","f","g","h..."v","w","x","y"]
  1,26 :[unav...e] 02   Seq->Equal
       :           02   Seq<-!!!
  1,1  :[unav...e] 02   Seq->Depth
  1,25 :[unav...e] 03    Depth->Pattern
       :           03    Depth<-!!!
  1,25 :[unav...e] 02   Seq<-["a","b","c","d","e","f","g","h..."u","v","w","x"]
  1,25 :[unav...e] 02   Seq->Equal
       :           02   Seq<-!!!
  1,1  :[unav...e] 02   Seq->Depth
  1,24 :[unav...e] 03    Depth->Pattern
       :           03    Depth<-!!!
  1,24 :[unav...e] 02   Seq<-["a","b","c","d","e","f","g","h..."t","u","v","w"]
  1,24 :[unav...e] 02   Seq->Equal
       :           02   Seq<-!!!
  1,1  :[unav...e] 02   Seq->Depth
  1,23 :[unav...e] 03    Depth->Pattern
       :           03    Depth<-!!!
  1,23 :[unav...e] 02   Seq<-["a","b","c","d","e","f","g","h..."s","t","u","v"]
  1,23 :[unav...e] 02   Seq->Equal
       :           02   Seq<-!!!
  1,1  :[unav...e] 02   Seq->Depth
  1,22 :[unav...e] 03    Depth->Pattern
       :           03    Depth<-!!!
  1,22 :[unav...e] 02   Seq<-["a","b","c","d","e","f","g","h..."r","s","t","u"]
  1,22 :[unav...e] 02   Seq->Equal
       :           02   Seq<-!!!
  1,1  :[unav...e] 02   Seq->Depth
  1,21 :[unav...e] 03    Depth->Pattern
       :           03    Depth<-!!!
  1,21 :[unav...e] 02   Seq<-["a","b","c","d","e","f","g","h..."q","r","s","t"]
  1,21 :[unav...e] 02   Seq->Equal
       :           02   Seq<-!!!
  1,1  :[unav...e] 02   Seq->Depth
  1,20 :[unav...e] 03    Depth->Pattern
       :           03    Depth<-!!!
  1,20 :[unav...e] 02   Seq<-["a","b","c","d","e","f","g","h..."p","q","r","s"]
  1,20 :[unav...e] 02   Seq->Equal
       :           02   Seq<-!!!
  1,1  :[unav...e] 02   Seq->Depth
  1,19 :[unav...e] 03    Depth->Pattern
       :           03    Depth<-!!!
  1,19 :[unav...e] 02   Seq<-["a","b","c","d","e","f","g","h..."o","p","q","r"]
  1,19 :[unav...e] 02   Seq->Equal
       :           02   Seq<-!!!
  1,1  :[unav...e] 02   Seq->Depth
  1,18 :[unav...e] 03    Depth->Pattern
       :           03    Depth<-!!!
  1,18 :[unav...e] 02   Seq<-["a","b","c","d","e","f","g","h..."n","o","p","q"]
  1,18 :[unav...e] 02   Seq->Equal
       :           02   Seq<-!!!
  1,1  :[unav...e] 02   Seq->Depth
  1,17 :[unav...e] 03    Depth->Pattern
       :           03    Depth<-!!!
  1,17 :[unav...e] 02   Seq<-["a","b","c","d","e","f","g","h..."m","n","o","p"]
  1,17 :[unav...e] 02   Seq->Equal
       :           02   Seq<-!!!
  1,1  :[unav...e] 02   Seq->Depth
  1,16 :[unav...e] 03    Depth->Pattern
       :           03    Depth<-!!!
  1,16 :[unav...e] 02   Seq<-["a","b","c","d","e","f","g","h..."l","m","n","o"]
  1,16 :[unav...e] 02   Seq->Equal
       :           02   Seq<-!!!
  1,1  :[unav...e] 02   Seq->Depth
  1,15 :[unav...e] 03    Depth->Pattern
       :           03    Depth<-!!!
  1,15 :[unav...e] 02   Seq<-["a","b","c","d","e","f","g","h..."k","l","m","n"]
  1,15 :[unav...e] 02   Seq->Equal
       :           02   Seq<-!!!
  1,1  :[unav...e] 02   Seq->Depth
  1,14 :[unav...e] 03    Depth->Pattern
       :           03    Depth<-!!!
  1,14 :[unav...e] 02   Seq<-["a","b","c","d","e","f","g","h..."j","k","l","m"]
  1,14 :[unav...e] 02   Seq->Equal
       :           02   Seq<-!!!
  1,1  :[unav...e] 02   Seq->Depth
  1,13 :[unav...e] 03    Depth->Pattern
       :           03    Depth<-!!!
  1,13 :[unav...e] 02   Seq<-["a","b","c","d","e","f","g","h","i","j","k","l"]
  1,13 :[unav...e] 02   Seq->Equal
       :           02   Seq<-!!!
  1,1  :[unav...e] 02   Seq->Depth
  1,12 :[unav...e] 03    Depth->Pattern
       :           03    Depth<-!!!
  1,12 :[unav...e] 02   Seq<-["a","b","c","d","e","f","g","h","i","j","k"]
  1,12 :[unav...e] 02   Seq->Equal
       :           02   Seq<-!!!
  1,1  :[unav...e] 02   Seq->Depth
  1,11 :[unav...e] 03    Depth->Pattern
       :           03    Depth<-!!!
  1,11 :[unav...e] 02   Seq<-["a","b","c","d","e","f","g","h","i","j"]
  1,11 :[unav...e] 02   Seq->Equal
       :           02   Seq<-!!!
  1,1  :[unav...e] 02   Seq->Depth
  1,10 :[unav...e] 03    Depth->Pattern
       :           03    Depth<-!!!
  1,10 :[unav...e] 02   Seq<-["a","b","c","d","e","f","g","h","i"]
  1,10 :[unav...e] 02   Seq->Equal
       :           02   Seq<-!!!
  1,1  :[unav...e] 02   Seq->Depth
  1,9  :[unav...e] 03    Depth->Pattern
       :           03    Depth<-!!!
  1,9  :[unav...e] 02   Seq<-["a","b","c","d","e","f","g","h"]
  1,9  :[unav...e] 02   Seq->Equal
       :           02   Seq<-!!!
  1,1  :[unav...e] 02   Seq->Depth
  1,8  :[unav...e] 03    Depth->Pattern
       :           03    Depth<-!!!
  1,8  :[unav...e] 02   Seq<-["a","b","c","d","e","f","g"]
  1,8  :[unav...e] 02   Seq->Equal
       :           02   Seq<-!!!
  1,1  :[unav...e] 02   Seq->Depth
  1,7  :[unav...e] 03    Depth->Pattern
       :           03    Depth<-!!!
  1,7  :[unav...e] 02   Seq<-["a","b","c","d","e","f"]
  1,7  :[unav...e] 02   Seq->Equal
       :           02   Seq<-!!!
  1,1  :[unav...e] 02   Seq->Depth
  1,6  :[unav...e] 03    Depth->Pattern
       :           03    Depth<-!!!
  1,6  :[unav...e] 02   Seq<-["a","b","c","d","e"]
  1,6  :[unav...e] 02   Seq->Equal
       :           02   Seq<-!!!
  1,1  :[unav...e] 02   Seq->Depth
  1,5  :[unav...e] 03    Depth->Pattern
       :           03    Depth<-!!!
  1,5  :[unav...e] 02   Seq<-["a","b","c","d"]
  1,5  :[unav...e] 02   Seq->Equal
       :           02   Seq<-!!!
  1,1  :[unav...e] 02   Seq->Depth
  1,4  :[unav...e] 03    Depth->Pattern
       :           03    Depth<-!!!
  1,4  :[unav...e] 02   Seq<-["a","b","c"]
  1,4  :[unav...e] 02   Seq->Equal
       :           02   Seq<-!!!
  1,1  :[unav...e] 02   Seq->Depth
  1,3  :[unav...e] 03    Depth->Pattern
       :           03    Depth<-!!!
  1,3  :[unav...e] 02   Seq<-["a","b"]
  1,3  :[unav...e] 02   Seq->Equal
       :           02   Seq<-!!!
  1,1  :[unav...e] 02   Seq->Depth
  1,2  :[unav...e] 03    Depth->Pattern
       :           03    Depth<-!!!
  1,2  :[unav...e] 02   Seq<-["a"]
  1,2  :[unav...e] 02   Seq->Equal
       :           02   Seq<-!!!
  1,1  :[unav...e] 02   Seq->Depth
  1,1  :[unav...e] 03    Depth->Pattern
       :           03    Depth<-!!!
  1,1  :[unav...e] 02   Seq<-[]
  1,1  :[unav...e] 02   Seq->Equal
       :           02   Seq<-!!!
  1,1  :[unav...e] 02   Seq->Depth
       :           02   Seq<-!!!
       :           01  Transform<-!!!
       :           00 Trace<-!!!
Any["abcdefghijklm"]
Any["abcdefghijklmnopqrstuvwxyz\n012345"]
  1,1  :abcde...\n 00 Trace->Transform
  1,1  :abcde...\n 01  Transform->Seq
  1,1  :abcde...\n 02   Seq->Depth
  1,1  :abcde...\n 03    Depth->Pattern
  1,2  :bcdef...\n 03    Depth<-["a"]
  1,2  :bcdef...\n 03    Depth->Pattern
  1,3  :cdefg...\n 03    Depth<-["b"]
  1,3  :cdefg...\n 03    Depth->Pattern
  1,4  :defgh...\n 03    Depth<-["c"]
  1,4  :defgh...\n 03    Depth->Pattern
  1,5  :efghi...\n 03    Depth<-["d"]
  1,5  :efghi...\n 03    Depth->Pattern
  1,6  :fghij...\n 03    Depth<-["e"]
  1,6  :fghij...\n 03    Depth->Pattern
  1,7  :ghijk...\n 03    Depth<-["f"]
  1,7  :ghijk...\n 03    Depth->Pattern
  1,8  :hijkl...\n 03    Depth<-["g"]
  1,8  :hijkl...\n 03    Depth->Pattern
  1,9  :ijklm...\n 03    Depth<-["h"]
  1,9  :ijklm...\n 03    Depth->Pattern
  1,10 :jklmn...\n 03    Depth<-["i"]
  1,10 :jklmn...\n 03    Depth->Pattern
  1,11 :klmno...\n 03    Depth<-["j"]
  1,11 :klmno...\n 03    Depth->Pattern
  1,12 :lmnop...\n 03    Depth<-["k"]
  1,12 :lmnop...\n 03    Depth->Pattern
  1,13 :mnopq...\n 03    Depth<-["l"]
  1,13 :mnopq...\n 03    Depth->Pattern
  1,14 :nopqr...\n 03    Depth<-["m"]
  1,14 :nopqr...\n 03    Depth->Pattern
  1,15 :opqrs...\n 03    Depth<-["n"]
  1,15 :opqrs...\n 03    Depth->Pattern
  1,16 :pqrst...\n 03    Depth<-["o"]
  1,16 :pqrst...\n 03    Depth->Pattern
  1,17 :qrstu...\n 03    Depth<-["p"]
  1,17 :qrstu...\n 03    Depth->Pattern
  1,18 :rstuv...\n 03    Depth<-["q"]
  1,18 :rstuv...\n 03    Depth->Pattern
  1,19 :stuvwxyz\n 03    Depth<-["r"]
  1,19 :stuvwxyz\n 03    Depth->Pattern
  1,20 :tuvwxyz\n  03    Depth<-["s"]
  1,20 :tuvwxyz\n  03    Depth->Pattern
  1,21 :uvwxyz\n   03    Depth<-["t"]
  1,21 :uvwxyz\n   03    Depth->Pattern
  1,22 :vwxyz\n    03    Depth<-["u"]
  1,22 :vwxyz\n    03    Depth->Pattern
  1,23 :wxyz\n     03    Depth<-["v"]
  1,23 :wxyz\n     03    Depth->Pattern
  1,24 :xyz\n      03    Depth<-["w"]
  1,24 :xyz\n      03    Depth->Pattern
  1,25 :yz\n       03    Depth<-["x"]
  1,25 :yz\n       03    Depth->Pattern
  1,26 :z\n        03    Depth<-["y"]
  1,26 :z\n        03    Depth->Pattern
  1,27 :\n         03    Depth<-["z"]
  1,27 :\n         03    Depth->Pattern
       :           03    Depth<-!!!
  1,27 :\n         02   Seq<-["a","b","c","d","e","f","g","h..."w","x","y","z"]
  1,27 :\n         02   Seq->Equal
       :           02   Seq<-!!!
  1,1  :[unav...e] 02   Seq->Depth
  1,26 :[unav...e] 03    Depth->Pattern
       :           03    Depth<-!!!
  1,26 :[unav...e] 02   Seq<-["a","b","c","d","e","f","g","h..."v","w","x","y"]
  1,26 :[unav...e] 02   Seq->Equal
       :           02   Seq<-!!!
  1,1  :[unav...e] 02   Seq->Depth
  1,25 :[unav...e] 03    Depth->Pattern
       :           03    Depth<-!!!
  1,25 :[unav...e] 02   Seq<-["a","b","c","d","e","f","g","h..."u","v","w","x"]
  1,25 :[unav...e] 02   Seq->Equal
       :           02   Seq<-!!!
  1,1  :[unav...e] 02   Seq->Depth
  1,24 :[unav...e] 03    Depth->Pattern
       :           03    Depth<-!!!
  1,24 :[unav...e] 02   Seq<-["a","b","c","d","e","f","g","h..."t","u","v","w"]
  1,24 :[unav...e] 02   Seq->Equal
       :           02   Seq<-!!!
  1,1  :[unav...e] 02   Seq->Depth
  1,23 :[unav...e] 03    Depth->Pattern
       :           03    Depth<-!!!
  1,23 :[unav...e] 02   Seq<-["a","b","c","d","e","f","g","h..."s","t","u","v"]
  1,23 :[unav...e] 02   Seq->Equal
       :           02   Seq<-!!!
  1,1  :[unav...e] 02   Seq->Depth
  1,22 :[unav...e] 03    Depth->Pattern
       :           03    Depth<-!!!
  1,22 :[unav...e] 02   Seq<-["a","b","c","d","e","f","g","h..."r","s","t","u"]
  1,22 :[unav...e] 02   Seq->Equal
       :           02   Seq<-!!!
  1,1  :[unav...e] 02   Seq->Depth
  1,21 :[unav...e] 03    Depth->Pattern
       :           03    Depth<-!!!
  1,21 :[unav...e] 02   Seq<-["a","b","c","d","e","f","g","h..."q","r","s","t"]
  1,21 :[unav...e] 02   Seq->Equal
       :           02   Seq<-!!!
  1,1  :[unav...e] 02   Seq->Depth
  1,20 :[unav...e] 03    Depth->Pattern
       :           03    Depth<-!!!
  1,20 :[unav...e] 02   Seq<-["a","b","c","d","e","f","g","h..."p","q","r","s"]
  1,20 :[unav...e] 02   Seq->Equal
       :           02   Seq<-!!!
  1,1  :[unav...e] 02   Seq->Depth
  1,19 :[unav...e] 03    Depth->Pattern
       :           03    Depth<-!!!
  1,19 :[unav...e] 02   Seq<-["a","b","c","d","e","f","g","h..."o","p","q","r"]
  1,19 :[unav...e] 02   Seq->Equal
       :           02   Seq<-!!!
  1,1  :[unav...e] 02   Seq->Depth
  1,18 :[unav...e] 03    Depth->Pattern
       :           03    Depth<-!!!
  1,18 :[unav...e] 02   Seq<-["a","b","c","d","e","f","g","h..."n","o","p","q"]
  1,18 :[unav...e] 02   Seq->Equal
       :           02   Seq<-!!!
  1,1  :[unav...e] 02   Seq->Depth
  1,17 :[unav...e] 03    Depth->Pattern
       :           03    Depth<-!!!
  1,17 :[unav...e] 02   Seq<-["a","b","c","d","e","f","g","h..."m","n","o","p"]
  1,17 :[unav...e] 02   Seq->Equal
       :           02   Seq<-!!!
  1,1  :[unav...e] 02   Seq->Depth
  1,16 :[unav...e] 03    Depth->Pattern
       :           03    Depth<-!!!
  1,16 :[unav...e] 02   Seq<-["a","b","c","d","e","f","g","h..."l","m","n","o"]
  1,16 :[unav...e] 02   Seq->Equal
       :           02   Seq<-!!!
  1,1  :[unav...e] 02   Seq->Depth
  1,15 :[unav...e] 03    Depth->Pattern
       :           03    Depth<-!!!
  1,15 :[unav...e] 02   Seq<-["a","b","c","d","e","f","g","h..."k","l","m","n"]
  1,15 :[unav...e] 02   Seq->Equal
       :           02   Seq<-!!!
  1,1  :[unav...e] 02   Seq->Depth
  1,14 :[unav...e] 03    Depth->Pattern
       :           03    Depth<-!!!
  1,14 :[unav...e] 02   Seq<-["a","b","c","d","e","f","g","h..."j","k","l","m"]
  1,14 :[unav...e] 02   Seq->Equal
       :           02   Seq<-!!!
  1,1  :[unav...e] 02   Seq->Depth
  1,13 :[unav...e] 03    Depth->Pattern
       :           03    Depth<-!!!
  1,13 :[unav...e] 02   Seq<-["a","b","c","d","e","f","g","h","i","j","k","l"]
  1,13 :[unav...e] 02   Seq->Equal
       :           02   Seq<-!!!
  1,1  :[unav...e] 02   Seq->Depth
  1,12 :[unav...e] 03    Depth->Pattern
       :           03    Depth<-!!!
  1,12 :[unav...e] 02   Seq<-["a","b","c","d","e","f","g","h","i","j","k"]
  1,12 :[unav...e] 02   Seq->Equal
       :           02   Seq<-!!!
  1,1  :[unav...e] 02   Seq->Depth
  1,11 :[unav...e] 03    Depth->Pattern
       :           03    Depth<-!!!
  1,11 :[unav...e] 02   Seq<-["a","b","c","d","e","f","g","h","i","j"]
  1,11 :[unav...e] 02   Seq->Equal
       :           02   Seq<-!!!
  1,1  :[unav...e] 02   Seq->Depth
  1,10 :[unav...e] 03    Depth->Pattern
       :           03    Depth<-!!!
  1,10 :[unav...e] 02   Seq<-["a","b","c","d","e","f","g","h","i"]
  1,10 :[unav...e] 02   Seq->Equal
       :           02   Seq<-!!!
  1,1  :[unav...e] 02   Seq->Depth
  1,9  :[unav...e] 03    Depth->Pattern
       :           03    Depth<-!!!
  1,9  :[unav...e] 02   Seq<-["a","b","c","d","e","f","g","h"]
  1,9  :[unav...e] 02   Seq->Equal
       :           02   Seq<-!!!
  1,1  :[unav...e] 02   Seq->Depth
  1,8  :[unav...e] 03    Depth->Pattern
       :           03    Depth<-!!!
  1,8  :[unav...e] 02   Seq<-["a","b","c","d","e","f","g"]
  1,8  :[unav...e] 02   Seq->Equal
       :           02   Seq<-!!!
  1,1  :[unav...e] 02   Seq->Depth
  1,7  :[unav...e] 03    Depth->Pattern
       :           03    Depth<-!!!
  1,7  :[unav...e] 02   Seq<-["a","b","c","d","e","f"]
  1,7  :[unav...e] 02   Seq->Equal
       :           02   Seq<-!!!
  1,1  :[unav...e] 02   Seq->Depth
  1,6  :[unav...e] 03    Depth->Pattern
       :           03    Depth<-!!!
  1,6  :[unav...e] 02   Seq<-["a","b","c","d","e"]
  1,6  :[unav...e] 02   Seq->Equal
       :           02   Seq<-!!!
  1,1  :[unav...e] 02   Seq->Depth
  1,5  :[unav...e] 03    Depth->Pattern
       :           03    Depth<-!!!
  1,5  :[unav...e] 02   Seq<-["a","b","c","d"]
  1,5  :[unav...e] 02   Seq->Equal
       :           02   Seq<-!!!
  1,1  :[unav...e] 02   Seq->Depth
  1,4  :[unav...e] 03    Depth->Pattern
       :           03    Depth<-!!!
  1,4  :[unav...e] 02   Seq<-["a","b","c"]
  1,4  :[unav...e] 02   Seq->Equal
       :           02   Seq<-!!!
  1,1  :[unav...e] 02   Seq->Depth
  1,3  :[unav...e] 03    Depth->Pattern
       :           03    Depth<-!!!
  1,3  :[unav...e] 02   Seq<-["a","b"]
  1,3  :[unav...e] 02   Seq->Equal
       :           02   Seq<-!!!
  1,1  :[unav...e] 02   Seq->Depth
  1,2  :[unav...e] 03    Depth->Pattern
       :           03    Depth<-!!!
  1,2  :[unav...e] 02   Seq<-["a"]
  1,2  :[unav...e] 02   Seq->Equal
       :           02   Seq<-!!!
  1,1  :[unav...e] 02   Seq->Depth
  1,1  :[unav...e] 03    Depth->Pattern
       :           03    Depth<-!!!
  1,1  :[unav...e] 02   Seq<-[]
  1,1  :[unav...e] 02   Seq->Equal
       :           02   Seq<-!!!
  1,1  :[unav...e] 02   Seq->Depth
       :           02   Seq<-!!!
       :           01  Transform<-!!!
       :           00 Trace<-!!!
Any["abcdefghijklm"]
Any["abcdefghijklmnopqrstuvwxyz\n012345"]
try ok
ParserCombinator.Parsers.GML.GMLError("a is a list")
graph Hello, I am a graph
 node 1
 node 2
 node 3
 edge Edge from node 1 to node 2: 1 - 2
 edge Edge from node 2 to node 3: 2 - 3
 edge Edge from node 3 to node 1: 3 - 1
node 1
node 2
node 3
edge 1 - 2
edge 2 - 3
edge 3 - 1
node 1
node 2
node 3
edge 2 - 3
edge 1 - 3
edge 1 - 2
fragments ok
subgraphs ok
 25.017476 seconds (12.26 M allocations: 468.048 MB, 0.66% gc time)
  1.400035 seconds (254.73 k allocations: 413.625 MB, 29.77% gc time)
  1.443909 seconds (142.40 k allocations: 406.105 MB, 44.44% gc time)
examples ok
INFO: ParserCombinator tests passed
INFO: Removing ZipFile v0.2.6
INFO: Removing Zlib v0.1.12

>>> End of log
