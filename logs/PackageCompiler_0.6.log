>>> 'Pkg.add("PackageCompiler")' log
INFO: Cloning cache of PackageCompiler from https://github.com/SimonDanisch/PackageCompiler.jl.git
INFO: Cloning cache of SnoopCompile from https://github.com/timholy/SnoopCompile.jl.git
INFO: Installing PackageCompiler v0.1.0
INFO: Installing SnoopCompile v0.2.0
INFO: Building PackageCompiler
INFO: installing gcc
INFO: using cc as a compiler
INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of PackageCompiler
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("PackageCompiler")' log
Julia Version 0.6.1
Commit 0d7248e2ff (2017-10-24 22:15 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-135-generic #184-Ubuntu SMP Wed Oct 18 11:55:51 UTC 2017 x86_64 x86_64
Memory: 2.93927001953125 GB (793.80859375 MB free)
Uptime: 45850.0 sec
Load Avg:  0.9423828125  0.94287109375  1.0048828125
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz    3083247 s       7048 s     128690 s     692708 s         38 s
#2  3500 MHz     835384 s         82 s      69384 s    3590753 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.6
2 required packages:
 - JSON                          0.16.1
 - PackageCompiler               0.1.0
2 additional packages:
 - Compat                        0.37.0
 - SnoopCompile                  0.2.0
INFO: Computing test dependencies for PackageCompiler...
INFO: Installing Matcha v0.1.1
INFO: Testing PackageCompiler
Launching new julia process to run commands...
done.
INFO: using Main
INFO: using Matcha
INFO: using Base
INFO: using Core
WARNING: both Main and Core export "Main"; uses of it in module ##661 must be qualified
WARNING: Not emitted: precompile(Tuple{getfield(Main, Symbol("##19#20")), Base.SubArray{Any, 1, Array{Any, 1}, Tuple{Base.UnitRange{Int64}}, true}, Base.SubArray{Any, 1, Array{Any, 1}, Tuple{Base.UnitRange{Int64}}, true}, Base.SubArray{Any, 1, Array{Any, 1}, Tuple{Base.UnitRange{Int64}}, true}, Base.SubArray{Any, 1, Array{Any, 1}, Tuple{Base.UnitRange{Int64}}, true}, Base.SubArray{Any, 1, Array{Any, 1}, Tuple{Base.UnitRange{Int64}}, true}, Base.SubArray{Any, 1, Array{Any, 1}, Tuple{Base.UnitRange{Int64}}, true}})
WARNING: Not emitted: precompile(Tuple{typeof(Main.is_goto), GotoNode, Matcha.History{Array{Any, 1}, Base.SubArray{T, N, P, I, L} where L where I where P where N where T, Int64}, Int64})
WARNING: Not emitted: precompile(Tuple{typeof(Main.is_unless_label), LabelNode, Matcha.History{Array{Any, 1}, Base.SubArray{T, N, P, I, L} where L where I where P where N where T, Int64}, Int64})
WARNING: Not emitted: precompile(Tuple{typeof(Main.is_goto_label), LabelNode, Matcha.History{Array{Any, 1}, Base.SubArray{T, N, P, I, L} where L where I where P where N where T, Int64}, Int64})
WARNING: Not emitted: precompile(Tuple{typeof(Main.isunless), Expr})
WARNING: Not emitted: precompile(Tuple{getfield(Main, Symbol("##17#18")), Base.SubArray{Any, 1, Array{Any, 1}, Tuple{Base.UnitRange{Int64}}, true}, Base.SubArray{Any, 1, Array{Any, 1}, Tuple{Base.UnitRange{Int64}}, true}, Base.SubArray{Any, 1, Array{Any, 1}, Tuple{Base.UnitRange{Int64}}, true}, Base.SubArray{Any, 1, Array{Any, 1}, Tuple{Base.UnitRange{Int64}}, true}, Base.SubArray{Any, 1, Array{Any, 1}, Tuple{Base.UnitRange{Int64}}, true}, Base.SubArray{Any, 1, Array{Any, 1}, Tuple{Base.UnitRange{Int64}}, true}})
WARNING: Not emitted: precompile(Tuple{typeof(Main.get_ast), typeof(identity), Tuple{DataType, DataType}})
WARNING: Not emitted: precompile(Tuple{typeof(Matcha.inner_matchat), Array{Any, 1}, Int64, Tuple{getfield(Main, Symbol("##8#10"))}, Matcha.History{Array{Any, 1}, Base.SubArray{T, N, P, I, L} where L where I where P where N where T, Int64}})
WARNING: Not emitted: precompile(Tuple{typeof(Matcha.inner_matchat), Array{Any, 1}, Int64, Tuple{typeof(Main.is_unless_label)}, Matcha.History{Array{Any, 1}, Base.SubArray{T, N, P, I, L} where L where I where P where N where T, Int64}})
WARNING: Not emitted: precompile(Tuple{typeof(Matcha.matchreplace), typeof(identity), Array{Any, 1}, Tuple{typeof(Main.islabelnode), typeof(Main.isunless), Matcha.Greed{typeof(Matcha.alwaysmatch), Base.UnitRange{Int64}}, Matcha.Greed{typeof(Main.islabelnode), Base.UnitRange{Int64}}, getfield(Main, Symbol("##11#13")), getfield(Main, Symbol("##12#14"))}})
WARNING: Not emitted: precompile(Tuple{typeof(Matcha.matchreplace), typeof(identity), Array{Any, 1}, Tuple{typeof(Main.isunless), Matcha.Greed{typeof(Matcha.alwaysmatch), Base.UnitRange{Int64}}, typeof(Main.isgoto), getfield(Main, Symbol("##7#9")), Matcha.Greed{typeof(Matcha.alwaysmatch), Base.UnitRange{Int64}}, getfield(Main, Symbol("##8#10"))}})
WARNING: Not emitted: precompile(Tuple{typeof(Matcha.inner_matchat), Array{Int64, 1}, Int64, Tuple{typeof(Main.test2)}, Matcha.History{Array{Int64, 1}, Base.SubArray{T, N, P, I, L} where L where I where P where N where T, Int64}})
WARNING: Not emitted: precompile(Tuple{typeof(Matcha.inner_matchat), Array{Any, 1}, Int64, Tuple{getfield(Main, Symbol("##12#14"))}, Matcha.History{Array{Any, 1}, Base.SubArray{T, N, P, I, L} where L where I where P where N where T, Int64}})
WARNING: Not emitted: precompile(Tuple{typeof(Matcha.trymatch), Matcha.Greed{typeof(Main.islabelnode), Base.UnitRange{Int64}}, GotoNode, Matcha.History{Array{Any, 1}, Base.SubArray{T, N, P, I, L} where L where I where P where N where T, Int64}})
WARNING: Not emitted: precompile(Tuple{typeof(Matcha.trymatch), Matcha.Greed{typeof(Main.islabelnode), Base.UnitRange{Int64}}, Expr, Matcha.History{Array{Any, 1}, Base.SubArray{T, N, P, I, L} where L where I where P where N where T, Int64}})
WARNING: Not emitted: precompile(Tuple{typeof(Matcha.inner_matchat), Array{Any, 1}, Int64, Tuple{typeof(Main.isunless), Matcha.Greed{typeof(Matcha.alwaysmatch), Base.UnitRange{Int64}}, typeof(Main.is_unless_label)}, Matcha.History{Array{Any, 1}, Base.SubArray{T, N, P, I, L} where L where I where P where N where T, Int64}})
WARNING: Not emitted: precompile(Tuple{typeof(Matcha.inner_matchat), Array{Any, 1}, Int64, Tuple{typeof(Main.islabelnode), typeof(Main.isunless), Matcha.Greed{typeof(Matcha.alwaysmatch), Base.UnitRange{Int64}}, Matcha.Greed{typeof(Main.islabelnode), Base.UnitRange{Int64}}, getfield(Main, Symbol("##11#13")), getfield(Main, Symbol("##12#14"))}, Matcha.History{Array{Any, 1}, Base.SubArray{T, N, P, I, L} where L where I where P where N where T, Int64}})
WARNING: Not emitted: precompile(Tuple{typeof(Matcha.trymatch), Matcha.Greed{typeof(Main.islabelnode), Base.UnitRange{Int64}}, LabelNode, Matcha.History{Array{Any, 1}, Base.SubArray{T, N, P, I, L} where L where I where P where N where T, Int64}})
WARNING: Not emitted: precompile(Tuple{typeof(Matcha.inner_matchat), Array{Any, 1}, Int64, Tuple{Matcha.Greed{typeof(Matcha.alwaysmatch), Base.UnitRange{Int64}}, typeof(Main.is_unless_label)}, Matcha.History{Array{Any, 1}, Base.SubArray{T, N, P, I, L} where L where I where P where N where T, Int64}})
WARNING: Not emitted: precompile(Tuple{typeof(Matcha.inner_matchat), Array{Any, 1}, Int64, Tuple{Matcha.Greed{typeof(Main.islabelnode), Base.UnitRange{Int64}}, getfield(Main, Symbol("##11#13")), getfield(Main, Symbol("##12#14"))}, Matcha.History{Array{Any, 1}, Base.SubArray{T, N, P, I, L} where L where I where P where N where T, Int64}})
WARNING: Not emitted: precompile(Tuple{typeof(Matcha.inner_matchat), Array{Any, 1}, Int64, Tuple{typeof(Main.isunless), Matcha.Greed{typeof(Matcha.alwaysmatch), Base.UnitRange{Int64}}, Matcha.Greed{typeof(Main.islabelnode), Base.UnitRange{Int64}}, getfield(Main, Symbol("##11#13")), getfield(Main, Symbol("##12#14"))}, Matcha.History{Array{Any, 1}, Base.SubArray{T, N, P, I, L} where L where I where P where N where T, Int64}})
WARNING: Not emitted: precompile(Tuple{typeof(Matcha.inner_matchat), Array{Int64, 1}, Int64, Tuple{typeof(Base.isodd), typeof(Main.test1), typeof(Main.test2)}, Matcha.History{Array{Int64, 1}, Base.SubArray{T, N, P, I, L} where L where I where P where N where T, Int64}})
WARNING: Not emitted: precompile(Tuple{typeof(Matcha.inner_matchat), Array{Any, 1}, Int64, Tuple{getfield(Main, Symbol("##7#9")), Matcha.Greed{typeof(Matcha.alwaysmatch), Base.UnitRange{Int64}}, getfield(Main, Symbol("##8#10"))}, Matcha.History{Array{Any, 1}, Base.SubArray{T, N, P, I, L} where L where I where P where N where T, Int64}})
WARNING: Not emitted: precompile(Tuple{typeof(Matcha.inner_matchat), Array{Any, 1}, Int64, Tuple{typeof(Main.isunless), Matcha.Greed{typeof(Matcha.alwaysmatch), Base.UnitRange{Int64}}, typeof(Main.isgoto), getfield(Main, Symbol("##7#9")), Matcha.Greed{typeof(Matcha.alwaysmatch), Base.UnitRange{Int64}}, getfield(Main, Symbol("##8#10"))}, Matcha.History{Array{Any, 1}, Base.SubArray{T, N, P, I, L} where L where I where P where N where T, Int64}})
WARNING: Not emitted: precompile(Tuple{typeof(Matcha.inner_matchat), Array{Any, 1}, Int64, Tuple{Matcha.Greed{typeof(Matcha.alwaysmatch), Base.UnitRange{Int64}}, Matcha.Greed{typeof(Main.islabelnode), Base.UnitRange{Int64}}, getfield(Main, Symbol("##11#13")), getfield(Main, Symbol("##12#14"))}, Matcha.History{Array{Any, 1}, Base.SubArray{T, N, P, I, L} where L where I where P where N where T, Int64}})
WARNING: Not emitted: precompile(Tuple{typeof(Matcha.matchitall), Array{Any, 1}, Int64, Tuple{typeof(Main.isunless), Matcha.Greed{typeof(Matcha.alwaysmatch), Base.UnitRange{Int64}}, typeof(Main.is_unless_label)}})
WARNING: Not emitted: precompile(Tuple{typeof(Matcha.inner_matchat), Array{Any, 1}, Int64, Tuple{Matcha.Greed{typeof(Matcha.alwaysmatch), Base.UnitRange{Int64}}, typeof(Main.isgoto), getfield(Main, Symbol("##7#9")), Matcha.Greed{typeof(Matcha.alwaysmatch), Base.UnitRange{Int64}}, getfield(Main, Symbol("##8#10"))}, Matcha.History{Array{Any, 1}, Base.SubArray{T, N, P, I, L} where L where I where P where N where T, Int64}})
WARNING: Not emitted: precompile(Tuple{typeof(Matcha.inner_matchat), Array{Any, 1}, Int64, Tuple{typeof(Main.isgoto), getfield(Main, Symbol("##7#9")), Matcha.Greed{typeof(Matcha.alwaysmatch), Base.UnitRange{Int64}}, getfield(Main, Symbol("##8#10"))}, Matcha.History{Array{Any, 1}, Base.SubArray{T, N, P, I, L} where L where I where P where N where T, Int64}})
WARNING: Not emitted: precompile(Tuple{typeof(Matcha.inner_matchat), Array{Any, 1}, Int64, Tuple{getfield(Main, Symbol("##11#13")), getfield(Main, Symbol("##12#14"))}, Matcha.History{Array{Any, 1}, Base.SubArray{T, N, P, I, L} where L where I where P where N where T, Int64}})
WARNING: Not emitted: precompile(Tuple{typeof(Matcha.matchitall), Array{Any, 1}, Int64, Tuple{typeof(Main.islabelnode), typeof(Main.isunless), Matcha.Greed{typeof(Matcha.alwaysmatch), Base.UnitRange{Int64}}, Matcha.Greed{typeof(Main.islabelnode), Base.UnitRange{Int64}}, getfield(Main, Symbol("##11#13")), getfield(Main, Symbol("##12#14"))}})
WARNING: Not emitted: precompile(Tuple{typeof(Matcha.inner_matchat), Array{Int64, 1}, Int64, Tuple{typeof(Main.test1), typeof(Main.test2)}, Matcha.History{Array{Int64, 1}, Base.SubArray{T, N, P, I, L} where L where I where P where N where T, Int64}})
WARNING: Not emitted: precompile(Tuple{typeof(Matcha.inner_matchat), String, Int64, Tuple{Matcha.Greed{getfield(Main, Symbol("##1#2")), Base.UnitRange{Int64}}, Char, typeof(Base.UTF8proc.isnumber)}, Matcha.History{String, Base.SubString{String}, Int64}})
WARNING: Not emitted: precompile(Tuple{typeof(Matcha.matchitall), Array{Any, 1}, Int64, Tuple{typeof(Main.isunless), Matcha.Greed{typeof(Matcha.alwaysmatch), Base.UnitRange{Int64}}, typeof(Main.isgoto), getfield(Main, Symbol("##7#9")), Matcha.Greed{typeof(Matcha.alwaysmatch), Base.UnitRange{Int64}}, getfield(Main, Symbol("##8#10"))}})
WARNING: Not emitted: precompile(Tuple{typeof(Matcha.inner_matchat), Array{Any, 1}, Int64, Tuple{Matcha.Greed{typeof(Matcha.alwaysmatch), Base.UnitRange{Int64}}, getfield(Main, Symbol("##8#10"))}, Matcha.History{Array{Any, 1}, Base.SubArray{T, N, P, I, L} where L where I where P where N where T, Int64}})
WARNING: Not emitted: precompile(Tuple{getfield(Matcha, Symbol("##1#2")), Matcha.Greed{typeof(Main.islabelnode), Base.UnitRange{Int64}}})
WARNING: Not emitted: precompile(Tuple{typeof(Matcha.matchat), Array{Int64, 1}, Int64, Tuple{typeof(Base.isodd), typeof(Main.test1), typeof(Main.test2)}})
WARNING: Not emitted: precompile(Tuple{typeof(Matcha.matchat), String, Int64, Tuple{Matcha.Greed{getfield(Main, Symbol("##1#2")), Base.UnitRange{Int64}}, Char, typeof(Base.UTF8proc.isnumber)}})
WARNING: Not emitted: precompile(Tuple{typeof(Matcha.matchitall), Array{Any, 1}, Tuple{typeof(Main.isunless), Matcha.Greed{typeof(Matcha.alwaysmatch), Base.UnitRange{Int64}}, typeof(Main.is_unless_label)}})
WARNING: Not emitted: precompile(Tuple{typeof(Matcha.trymatch), Matcha.Greed{getfield(Main, Symbol("##1#2")), Base.UnitRange{Int64}}, Char, Matcha.History{String, Base.SubString{String}, Int64}})
WARNING: Not emitted: precompile(Tuple{typeof(Matcha.matchitall), Array{Any, 1}, Tuple{typeof(Main.islabelnode), typeof(Main.isunless), Matcha.Greed{typeof(Matcha.alwaysmatch), Base.UnitRange{Int64}}, Matcha.Greed{typeof(Main.islabelnode), Base.UnitRange{Int64}}, getfield(Main, Symbol("##11#13")), getfield(Main, Symbol("##12#14"))}})
WARNING: Not emitted: precompile(Tuple{typeof(Matcha.matchitall), Array{Any, 1}, Tuple{typeof(Main.isunless), Matcha.Greed{typeof(Matcha.alwaysmatch), Base.UnitRange{Int64}}, typeof(Main.isgoto), getfield(Main, Symbol("##7#9")), Matcha.Greed{typeof(Matcha.alwaysmatch), Base.UnitRange{Int64}}, getfield(Main, Symbol("##8#10"))}})
WARNING: Not emitted: precompile(Tuple{typeof(Matcha.matchat), String, Tuple{Matcha.Greed{getfield(Main, Symbol("##1#2")), Base.UnitRange{Int64}}, Char, typeof(Base.UTF8proc.isnumber)}})
WARNING: Not emitted: precompile(Tuple{typeof(Matcha.matchat), Array{Int64, 1}, Tuple{typeof(Base.isodd), typeof(Main.test1), typeof(Main.test2)}})
WARNING: Not emitted: precompile(Tuple{Type{Core.Inference.Generator{I, F} where F where I}, Type{QuoteNode}, Tuple{getfield(Main, Symbol("##8#10"))}})
WARNING: Not emitted: precompile(Tuple{Type{Core.Inference.Generator{I, F} where F where I}, Type{Core.Inference.Const}, Tuple{typeof(Main.is_unless_label)}})
WARNING: Not emitted: precompile(Tuple{Type{Core.Inference.Generator{I, F} where F where I}, Type{QuoteNode}, Tuple{getfield(Main, Symbol("##12#14"))}})
WARNING: Not emitted: precompile(Tuple{Type{Core.Inference.Generator{I, F} where F where I}, Type{Core.Inference.Const}, Tuple{getfield(Main, Symbol("##8#10"))}})
WARNING: Not emitted: precompile(Tuple{Type{Core.Inference.Generator{I, F} where F where I}, Type{Core.Inference.Const}, Tuple{typeof(Main.test1), typeof(Main.test2)}})
WARNING: Not emitted: precompile(Tuple{Type{Core.Inference.Generator{I, F} where F where I}, Type{Core.Inference.Const}, Tuple{getfield(Main, Symbol("##12#14"))}})
WARNING: Not emitted: precompile(Tuple{Type{Matcha.Greed{F, T} where T where F}, typeof(Main.islabelnode), Base.UnitRange{Int64}})
WARNING: Not emitted: precompile(Tuple{Type{Core.Inference.Generator{I, F} where F where I}, Type{Core.Inference.Const}, Tuple{typeof(Base.isodd), typeof(Main.test1), typeof(Main.test2)}})
WARNING: Not emitted: precompile(Tuple{Type{Core.Inference.Generator{I, F} where F where I}, Type{QuoteNode}, Tuple{getfield(Main, Symbol("##11#13")), getfield(Main, Symbol("##12#14"))}})
WARNING: Not emitted: precompile(Tuple{Type{Matcha.Greed{F, T} where T where F}, getfield(Main, Symbol("##1#2")), Base.UnitRange{Int64}})
WARNING: Not emitted: precompile(Tuple{Type{Core.Inference.Generator{I, F} where F where I}, Type{Core.Inference.Const}, Tuple{getfield(Main, Symbol("##11#13")), getfield(Main, Symbol("##12#14"))}})
WARNING: Not emitted: precompile(Tuple{Type{Core.Inference.Generator{I, F} where F where I}, Type{QuoteNode}, Tuple{typeof(Main.test1), typeof(Main.test2)}})
WARNING: Not emitted: precompile(Tuple{Type{Core.Inference.Generator{I, F} where F where I}, Type{QuoteNode}, Tuple{typeof(Base.isodd), typeof(Main.test1), typeof(Main.test2)}})
WARNING: Not emitted: precompile(Tuple{Type{Core.Inference.Generator{I, F} where F where I}, Type{Core.Inference.Const}, Tuple{typeof(Main.test2)}})
WARNING: Not emitted: precompile(Tuple{Type{Core.Inference.Generator{I, F} where F where I}, Type{QuoteNode}, Tuple{typeof(Main.test2)}})
WARNING: Not emitted: precompile(Tuple{Type{Core.Inference.Generator{I, F} where F where I}, Type{QuoteNode}, Tuple{typeof(Main.is_unless_label)}})
WARNING: Not emitted: precompile(Tuple{typeof(Base.all), getfield(Matcha, Symbol("##1#2")), Tuple{Matcha.Greed{typeof(Matcha.alwaysmatch), Base.UnitRange{Int64}}, getfield(Main, Symbol("##8#10"))}})
WARNING: Not emitted: precompile(Tuple{typeof(Base.all), getfield(Matcha, Symbol("##1#2")), Tuple{typeof(Main.is_unless_label)}})
WARNING: Not emitted: precompile(Tuple{typeof(Base.all), getfield(Matcha, Symbol("##1#2")), Tuple{Matcha.Greed{typeof(Matcha.alwaysmatch), Base.UnitRange{Int64}}, typeof(Main.is_unless_label)}})
WARNING: Not emitted: precompile(Tuple{typeof(Base.all), getfield(Matcha, Symbol("##1#2")), Tuple{Matcha.Greed{typeof(Main.islabelnode), Base.UnitRange{Int64}}, getfield(Main, Symbol("##11#13")), getfield(Main, Symbol("##12#14"))}})
WARNING: Not emitted: precompile(Tuple{typeof(Base.filter!), getfield(Main, Symbol("##15#16")), Array{Any, 1}})
WARNING: Not emitted: precompile(Tuple{typeof(Base.all), getfield(Matcha, Symbol("##1#2")), Tuple{Matcha.Greed{typeof(Matcha.alwaysmatch), Base.UnitRange{Int64}}, Matcha.Greed{typeof(Main.islabelnode), Base.UnitRange{Int64}}, getfield(Main, Symbol("##11#13")), getfield(Main, Symbol("##12#14"))}})
WARNING: Not emitted: precompile(Tuple{typeof(Base.all), getfield(Matcha, Symbol("##1#2")), Tuple{getfield(Main, Symbol("##7#9")), Matcha.Greed{typeof(Matcha.alwaysmatch), Base.UnitRange{Int64}}, getfield(Main, Symbol("##8#10"))}})
WARNING: Not emitted: precompile(Tuple{typeof(Base.all), getfield(Matcha, Symbol("##1#2")), Tuple{typeof(Main.isgoto), getfield(Main, Symbol("##7#9")), Matcha.Greed{typeof(Matcha.alwaysmatch), Base.UnitRange{Int64}}, getfield(Main, Symbol("##8#10"))}})
WARNING: Not emitted: precompile(Tuple{typeof(Base.all), getfield(Matcha, Symbol("##1#2")), Tuple{Matcha.Greed{typeof(Matcha.alwaysmatch), Base.UnitRange{Int64}}, typeof(Main.isgoto), getfield(Main, Symbol("##7#9")), Matcha.Greed{typeof(Matcha.alwaysmatch), Base.UnitRange{Int64}}, getfield(Main, Symbol("##8#10"))}})
WARNING: Not emitted: precompile(Tuple{typeof(Base.all), getfield(Matcha, Symbol("##1#2")), Tuple{getfield(Main, Symbol("##11#13")), getfield(Main, Symbol("##12#14"))}})
WARNING: Not emitted: precompile(Tuple{typeof(Base.all), getfield(Matcha, Symbol("##1#2")), Tuple{typeof(Main.test1), typeof(Main.test2)}})
WARNING: Not emitted: precompile(Tuple{typeof(Base.all), getfield(Matcha, Symbol("##1#2")), Tuple{typeof(Main.test2)}})
WARNING: Not emitted: precompile(Tuple{typeof(Base.all), getfield(Matcha, Symbol("##1#2")), Tuple{getfield(Main, Symbol("##12#14"))}})
WARNING: Not emitted: precompile(Tuple{typeof(Base.all), getfield(Matcha, Symbol("##1#2")), Tuple{getfield(Main, Symbol("##8#10"))}})
WARNING: Not emitted: precompile(Tuple{typeof(Base.all), getfield(Matcha, Symbol("##1#2")), Tuple{typeof(Main.isunless), Matcha.Greed{typeof(Matcha.alwaysmatch), Base.UnitRange{Int64}}, Matcha.Greed{typeof(Main.islabelnode), Base.UnitRange{Int64}}, getfield(Main, Symbol("##11#13")), getfield(Main, Symbol("##12#14"))}})
WARNING: Not emitted: precompile(Tuple{typeof(Core.Inference.copy!), Array{Any, 1}, Core.Inference.Generator{Tuple{typeof(Base.isodd), typeof(Main.test1), typeof(Main.test2)}, Type{QuoteNode}}})
WARNING: Not emitted: precompile(Tuple{typeof(Core.Inference.copy!), Array{Any, 1}, Core.Inference.Generator{Tuple{getfield(Main, Symbol("##12#14"))}, Type{Core.Inference.Const}}})
WARNING: Not emitted: precompile(Tuple{typeof(Core.Inference.copy!), Array{Any, 1}, Core.Inference.Generator{Tuple{typeof(Main.test1), typeof(Main.test2)}, Type{QuoteNode}}})
WARNING: Not emitted: precompile(Tuple{typeof(Core.Inference.copy!), Array{Any, 1}, Core.Inference.Generator{Tuple{typeof(Base.isodd), typeof(Main.test1), typeof(Main.test2)}, Type{Core.Inference.Const}}})
WARNING: Not emitted: precompile(Tuple{typeof(Core.Inference.copy!), Array{Any, 1}, Core.Inference.Generator{Tuple{getfield(Main, Symbol("##12#14"))}, Type{QuoteNode}}})
WARNING: Not emitted: precompile(Tuple{typeof(Core.Inference.copy!), Array{Any, 1}, Core.Inference.Generator{Tuple{getfield(Main, Symbol("##8#10"))}, Type{QuoteNode}}})
WARNING: Not emitted: precompile(Tuple{typeof(Core.Inference.copy!), Array{Any, 1}, Core.Inference.Generator{Tuple{typeof(Main.is_unless_label)}, Type{Core.Inference.Const}}})
WARNING: Not emitted: precompile(Tuple{typeof(Core.Inference.copy!), Array{Any, 1}, Core.Inference.Generator{Tuple{typeof(Main.is_unless_label)}, Type{QuoteNode}}})
WARNING: Not emitted: precompile(Tuple{typeof(Core.Inference.copy!), Array{Any, 1}, Core.Inference.Generator{Tuple{typeof(Main.test2)}, Type{QuoteNode}}})
WARNING: Not emitted: precompile(Tuple{typeof(Core.Inference.copy!), Array{Any, 1}, Core.Inference.Generator{Tuple{getfield(Main, Symbol("##8#10"))}, Type{Core.Inference.Const}}})
WARNING: Not emitted: precompile(Tuple{typeof(Core.Inference.copy!), Array{Any, 1}, Core.Inference.Generator{Tuple{getfield(Main, Symbol("##11#13")), getfield(Main, Symbol("##12#14"))}, Type{QuoteNode}}})
WARNING: Not emitted: precompile(Tuple{typeof(Core.Inference.copy!), Array{Any, 1}, Core.Inference.Generator{Tuple{getfield(Main, Symbol("##11#13")), getfield(Main, Symbol("##12#14"))}, Type{Core.Inference.Const}}})
WARNING: Not emitted: precompile(Tuple{typeof(Core.Inference.copy!), Array{Any, 1}, Core.Inference.Generator{Tuple{typeof(Main.test1), typeof(Main.test2)}, Type{Core.Inference.Const}}})
WARNING: Not emitted: precompile(Tuple{typeof(Core.Inference.copy!), Array{Any, 1}, Core.Inference.Generator{Tuple{typeof(Main.test2)}, Type{Core.Inference.Const}}})
WARNING: Not emitted: precompile(Tuple{typeof(Core.Inference._collect), Type{Any}, Core.Inference.Generator{Tuple{typeof(Base.isodd), typeof(Main.test1), typeof(Main.test2)}, Type{Core.Inference.Const}}, Core.Inference.HasLength})
WARNING: Not emitted: precompile(Tuple{typeof(Core.Inference._collect), Type{Any}, Core.Inference.Generator{Tuple{getfield(Main, Symbol("##8#10"))}, Type{Core.Inference.Const}}, Core.Inference.HasLength})
WARNING: Not emitted: precompile(Tuple{typeof(Core.Inference._collect), Type{Any}, Core.Inference.Generator{Tuple{getfield(Main, Symbol("##12#14"))}, Type{Core.Inference.Const}}, Core.Inference.HasLength})
WARNING: Not emitted: precompile(Tuple{typeof(Core.Inference._collect), Type{Any}, Core.Inference.Generator{Tuple{getfield(Main, Symbol("##8#10"))}, Type{QuoteNode}}, Core.Inference.HasLength})
WARNING: Not emitted: precompile(Tuple{typeof(Core.Inference._collect), Type{Any}, Core.Inference.Generator{Tuple{typeof(Base.isodd), typeof(Main.test1), typeof(Main.test2)}, Type{QuoteNode}}, Core.Inference.HasLength})
WARNING: Not emitted: precompile(Tuple{typeof(Core.Inference._collect), Type{Any}, Core.Inference.Generator{Tuple{typeof(Main.test1), typeof(Main.test2)}, Type{QuoteNode}}, Core.Inference.HasLength})
WARNING: Not emitted: precompile(Tuple{typeof(Core.Inference._collect), Type{Any}, Core.Inference.Generator{Tuple{typeof(Main.is_unless_label)}, Type{Core.Inference.Const}}, Core.Inference.HasLength})
WARNING: Not emitted: precompile(Tuple{typeof(Core.Inference._collect), Type{Any}, Core.Inference.Generator{Tuple{getfield(Main, Symbol("##12#14"))}, Type{QuoteNode}}, Core.Inference.HasLength})
WARNING: Not emitted: precompile(Tuple{typeof(Core.Inference._collect), Type{Any}, Core.Inference.Generator{Tuple{typeof(Main.test2)}, Type{QuoteNode}}, Core.Inference.HasLength})
WARNING: Not emitted: precompile(Tuple{typeof(Core.Inference._collect), Type{Any}, Core.Inference.Generator{Tuple{typeof(Main.is_unless_label)}, Type{QuoteNode}}, Core.Inference.HasLength})
WARNING: Not emitted: precompile(Tuple{typeof(Core.Inference._collect), Type{Any}, Core.Inference.Generator{Tuple{getfield(Main, Symbol("##11#13")), getfield(Main, Symbol("##12#14"))}, Type{Core.Inference.Const}}, Core.Inference.HasLength})
WARNING: Not emitted: precompile(Tuple{typeof(Core.Inference._collect), Type{Any}, Core.Inference.Generator{Tuple{typeof(Main.test1), typeof(Main.test2)}, Type{Core.Inference.Const}}, Core.Inference.HasLength})
WARNING: Not emitted: precompile(Tuple{typeof(Core.Inference._collect), Type{Any}, Core.Inference.Generator{Tuple{typeof(Main.test2)}, Type{Core.Inference.Const}}, Core.Inference.HasLength})
WARNING: Not emitted: precompile(Tuple{typeof(Core.Inference._collect), Type{Any}, Core.Inference.Generator{Tuple{getfield(Main, Symbol("##11#13")), getfield(Main, Symbol("##12#14"))}, Type{QuoteNode}}, Core.Inference.HasLength})
INFO: Building inference.o
INFO: /home/vagrant/julia/bin/julia -C native --output-ji /home/vagrant/.julia/v0.6/PackageCompiler/sysimg_tmp/Matcha/inference.ji --output-o /home/vagrant/.julia/v0.6/PackageCompiler/sysimg_tmp/Matcha/inference.o coreimg.jl
essentials.jl
ctypes.jl
generator.jl
reflection.jl
options.jl
promotion.jl
tuple.jl
pair.jl
traits.jl
range.jl
expr.jl
error.jl
bool.jl
number.jl
int.jl
operators.jl
pointer.jl
indices.jl
array.jl
abstractarray.jl
hashing.jl
nofloat_hashing.jl
reduce.jl
bitarray.jl
intset.jl
associative.jl
docs/core.jl
inference.jl
INFO: Building sys.o
INFO: /home/vagrant/julia/bin/julia -C native --output-ji /home/vagrant/.julia/v0.6/PackageCompiler/sysimg_tmp/Matcha/sys.ji --output-o /home/vagrant/.julia/v0.6/PackageCompiler/sysimg_tmp/Matcha/sys.o -J /home/vagrant/.julia/v0.6/PackageCompiler/sysimg_tmp/Matcha/inference.ji --startup-file=no sysimg.jl
coreio.jl
exports.jl
essentials.jl
ctypes.jl
base.jl
generator.jl
reflection.jl
options.jl
promotion.jl
tuple.jl
pair.jl
traits.jl
range.jl
twiceprecision.jl
expr.jl
error.jl
bool.jl
number.jl
int.jl
operators.jl
pointer.jl
refpointer.jl
checked.jl
WARNING: Method definition (::Type{T})(Any) in module Inference at coreimg.jl:14 overwritten in module Base at sysimg.jl:77.
indices.jl
array.jl
abstractarray.jl
subarray.jl
hashing.jl
rounding.jl
float.jl
complex.jl
rational.jl
multinverses.jl
abstractarraymath.jl
arraymath.jl
char.jl
strings/string.jl
simdloop.jl
reduce.jl
reshapedarray.jl
bitarray.jl
intset.jl
associative.jl
dict.jl
set.jl
iterators.jl
build_h.jl
version_git.jl
osutils.jl
c.jl
sysinfo.jl
io.jl
iostream.jl
iobuffer.jl
intfuncs.jl
strings/strings.jl
strings/errors.jl
strings/types.jl
strings/basic.jl
strings/search.jl
strings/util.jl
strings/io.jl
strings/utf8proc.jl
parse.jl
shell.jl
regex.jl
pcre.jl
show.jl
cartesian.jl
multidimensional.jl
permuteddimsarray.jl
nullable.jl
broadcast.jl
base64.jl
version.jl
libc.jl
libdl.jl
env.jl
libuv.jl
uv_constants.jl
event.jl
task.jl
lock.jl
threads.jl
weakkeydict.jl
stream.jl
socket.jl
filesystem.jl
process.jl
multimedia.jl
grisu/grisu.jl
methodshow.jl
floatfuncs.jl
math.jl
reducedim.jl
ordering.jl
sort.jl
WARNING: Method definition searchsortedfirst(AbstractArray{T, 1} where T, Any) in module Sort at sort.jl:216 overwritten at sort.jl:218.
WARNING: Method definition searchsortedlast(AbstractArray{T, 1} where T, Any) in module Sort at sort.jl:216 overwritten at sort.jl:218.
WARNING: Method definition searchsorted(AbstractArray{T, 1} where T, Any) in module Sort at sort.jl:216 overwritten at sort.jl:218.
gmp.jl
mpfr.jl
combinatorics.jl
hashing2.jl
dSFMT.jl
random.jl
printf.jl
meta.jl
Enums.jl
serialize.jl
channels.jl
mmap.jl
datafmt.jl
deepcopy.jl
interactiveutil.jl
summarysize.jl
replutil.jl
test.jl
i18n.jl
initdefs.jl
Terminals.jl
LineEdit.jl
REPLCompletions.jl
REPL.jl
client.jl
stacktraces.jl
util.jl
linalg/linalg.jl
statistics.jl
irrationals.jl
dft.jl
dsp.jl
fastmath.jl
libgit2/libgit2.jl
pkg/pkg.jl
profile.jl
dates/Dates.jl
sparse/sparse.jl
asyncmap.jl
distributed/Distributed.jl
sharedarray.jl
loading.jl
threadcall.jl
deprecated.jl
docs/helpdb.jl
docs/helpdb/Base.jl
docs/basedocs.jl
markdown/Markdown.jl
docs/Docs.jl
/home/vagrant/julia/share/julia/base/precompile.jl
INFO: Linking sys.so
INFO: cc -L/home/vagrant/julia/bin/../lib -shared -ljulia -o /home/vagrant/.julia/v0.6/PackageCompiler/sysimg_tmp/Matcha/sys.so /home/vagrant/.julia/v0.6/PackageCompiler/sysimg_tmp/Matcha/sys.o
INFO:     Not replacing system image.
    You can start julia with julia -J /home/vagrant/.julia/v0.6/PackageCompiler/sysimg_tmp/Matcha/sys to load the compiled files.
INFO: PackageCompiler tests passed
INFO: Removing Matcha v0.1.1

>>> End of log
