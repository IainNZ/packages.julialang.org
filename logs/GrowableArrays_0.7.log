>>> 'Pkg.add("GrowableArrays")' log
┌ Info: Cloning cache of EllipsisNotation from https://github.com/ChrisRackauckas/EllipsisNotation.jl.git
└                                                   @ Base.Pkg.Cache cache.jl:43
┌ Info: Cloning cache of GrowableArrays from https://github.com/ChrisRackauckas/GrowableArrays.jl.git
└                                                   @ Base.Pkg.Cache cache.jl:43
[ Info: Installing EllipsisNotation v0.3.0         @ Base.Pkg.Entry entry.jl:543
[ Info: Installing GrowableArrays v0.0.5           @ Base.Pkg.Entry entry.jl:543
[ Info: Package database updated                    @ Base.Pkg.Entry entry.jl:32
┌ Info: METADATA is out-of-date — you may not have the latest version of GrowableArrays
│ Use `Pkg.update()` to get the latest versions of your packages
└                                                   @ Base.Pkg.Entry entry.jl:74

>>> 'Pkg.test("GrowableArrays")' log
Julia Version 0.7.0-DEV.3354
Commit 9b5eed2b6c (2018-01-09 08:03 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
      Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-135-generic #184-Ubuntu SMP Wed Oct 18 11:55:51 UTC 2017 x86_64 x86_64
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
              speed         user         nice          sys         idle          irq
       #1  3505 MHz     681712 s        119 s      36916 s     267926 s          5 s
       #2  3505 MHz     147762 s         44 s      16005 s     962961 s          0 s
       
  Memory: 2.93927001953125 GB (1020.49609375 MB free)
  Uptime: 11448.0 sec
  Load Avg:  0.923828125  0.97705078125  0.95458984375
  WORD_SIZE: 64
  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant
Packages:
  Package Directory: /home/vagrant/.julia/v0.7
  Package Status:
2 required packages:
 - GrowableArrays                0.0.5
 - JSON                          0.16.3
3 additional packages:
 - Compat                        0.46.0
 - EllipsisNotation              0.3.0
 - Nullables                     0.0.3
[ Info: Testing GrowableArrays                     @ Base.Pkg.Entry entry.jl:723
┌ Warning: Deprecated syntax `immutable` at /home/vagrant/.julia/v0.7/GrowableArrays/src/GrowableArrays.jl:6.
│ Use `struct` instead.
└                                                  @ nothing GrowableArrays.jl:6
┌ Warning: Deprecated syntax `immutable` at /home/vagrant/.julia/v0.7/GrowableArrays/src/GrowableArrays.jl:50.
│ Use `struct` instead.
└                                                 @ nothing GrowableArrays.jl:50
┌ Warning: Deprecated syntax `immutable` at /home/vagrant/.julia/v0.7/GrowableArrays/src/GrowableArrays.jl:6.
│ Use `struct` instead.
└                                                  @ nothing GrowableArrays.jl:6
┌ Warning: Deprecated syntax `immutable` at /home/vagrant/.julia/v0.7/GrowableArrays/src/GrowableArrays.jl:50.
│ Use `struct` instead.
└                                                 @ nothing GrowableArrays.jl:50
┌ Warning: Deprecated syntax `parametric method syntax StackedArray{A <: AbstractVector, N}(vec::A, dims::NTuple{N})` around /home/vagrant/.julia/v0.7/GrowableArrays/src/GrowableArrays.jl:55.
│ Use `StackedArray(vec::A, dims::NTuple{N}) where {A <: AbstractVector, N}` instead.
└                                                 @ nothing GrowableArrays.jl:55
WARNING: Base.Test is deprecated, run `using Test` instead.
  likely near /home/vagrant/.julia/v0.7/GrowableArrays/test/runtests.jl:2
┌ Warning: `tic()` is deprecated, use `@time`, `@elapsed`, or calls to `time_ns()` instead.
│   caller = top-level scope
└                                                                      @ Core :0
Run Benchmarks
Pre-Compile
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = test3() at runtests.jl:40
└                                                          @ Main runtests.jl:40
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = test4() at runtests.jl:57
└                                                          @ Main runtests.jl:57
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = test5() at runtests.jl:72
└                                                          @ Main runtests.jl:72
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = test6() at runtests.jl:87
└                                                          @ Main runtests.jl:87
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #GrowableArray#1 at GrowableArrays.jl:18 [inlined]
└                                                    @ Core GrowableArrays.jl:18
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #GrowableArray#1 at GrowableArrays.jl:18 [inlined]
└                                                    @ Core GrowableArrays.jl:18
Running Benchmarks
Benchmark results: 1.118807727 1.48902362 0.373482733 0.373765736 0.306421818 0.219629627 0.220183354 0.220042451
Note the overhead of building the type before the loop for small runs
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #GrowableArray#1 at GrowableArrays.jl:18 [inlined]
└                                                    @ Core GrowableArrays.jl:18
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #GrowableArray#1 at GrowableArrays.jl:18 [inlined]
└                                                    @ Core GrowableArrays.jl:18
┌ Warning: `ind2sub(dims::(Tuple{Vararg{Integer, N}} where N), ind::Integer)` is deprecated, use `(CartesianIndices(dims))[ind]` instead.
│   caller = setindex!(::GrowableArray{Int64,Array{Int64,2},3}, ::Array{Int64,2}, ::Int64) at GrowableArrays.jl:41
└                                          @ GrowableArrays GrowableArrays.jl:41
ERROR: LoadError: iteration is deliberately unsupported for CartesianIndex. Use `I` rather than `I...`, or use `Tuple(I)...`
Stacktrace:
 [1] error at ./error.jl:33 [inlined]
 [2] start(::CartesianIndex{3}) at ./multidimensional.jl:153
 [3] append_any(::Tuple{Array{Array{Int64,2},1},Array{Int64,2}}, ::Vararg{Any,N} where N) at ./essentials.jl:390
 [4] setindex!(::GrowableArray{Int64,Array{Int64,2},3}, ::Array{Int64,2}, ::Int64) at /home/vagrant/.julia/v0.7/GrowableArrays/src/GrowableArrays.jl:41
 [5] top-level scope
 [6] include at ./boot.jl:293 [inlined]
 [7] include_relative(::Module, ::String) at ./loading.jl:521
 [8] include(::Module, ::String) at ./sysimg.jl:26
 [9] process_options(::Base.JLOptions) at ./client.jl:324
 [10] _start() at ./client.jl:375
in expression starting at /home/vagrant/.julia/v0.7/GrowableArrays/test/runtests.jl:160
┌ Error: ------------------------------------------------------------
│ # Testing failed for GrowableArrays
│   exception =
│    failed process: Process(`/home/vagrant/julia/bin/julia -Cnative -J/home/vagrant/julia/lib/julia/sys.so --compile=yes --depwarn=yes --code-coverage=none --color=no --compiled-modules=yes --check-bounds=yes --warn-overwrite=yes --startup-file=yes /home/vagrant/.julia/v0.7/GrowableArrays/test/runtests.jl`, ProcessExited(1)) [1]
│    Stacktrace:
│     [1] error(::String, ::Base.Process, ::String, ::Int64, ::String) at ./error.jl:42
│     [2] pipeline_error(::Base.Process) at ./process.jl:707
│     [3] run(::Cmd) at ./process.jl:669
│     [4] (::getfield(Base.Pkg.Entry, Symbol("##91#94")){Bool,String,Array{AbstractString,1}})() at ./pkg/entry.jl:736
│     [5] cd(::getfield(Base.Pkg.Entry, Symbol("##91#94")){Bool,String,Array{AbstractString,1}}, ::String) at ./file.jl:70
│     [6] #test!#90(::Bool, ::Function, ::String, ::Array{AbstractString,1}, ::Array{AbstractString,1}, ::Array{AbstractString,1}) at ./pkg/entry.jl:724
│     [7] (::getfield(Base.Pkg.Entry, Symbol("#kw##test!")))(::NamedTuple{(:coverage,),Tuple{Bool}}, ::typeof(Base.Pkg.Entry.test!), ::String, ::Array{AbstractString,1}, ::Array{AbstractString,1}, ::Array{AbstractString,1}) at ./<missing>:0
│     [8] #test#98(::Bool, ::Function, ::Array{AbstractString,1}) at ./pkg/entry.jl:763
│     [9] (::getfield(Base.Pkg.Entry, Symbol("#kw##test")))(::NamedTuple{(:coverage,),Tuple{Bool}}, ::typeof(Base.Pkg.Entry.test), ::Array{AbstractString,1}) at ./<missing>:0
│     [10] (::getfield(Base.Pkg.Dir, Symbol("##4#7")){Base.Iterators.IndexValue{Symbol,Bool,Tuple{Symbol},NamedTuple{(:coverage,),Tuple{Bool}}},typeof(Base.Pkg.Entry.test),Tuple{Array{AbstractString,1}}})() at ./pkg/dir.jl:36
│     [11] cd(::getfield(Base.Pkg.Dir, Symbol("##4#7")){Base.Iterators.IndexValue{Symbol,Bool,Tuple{Symbol},NamedTuple{(:coverage,),Tuple{Bool}}},typeof(Base.Pkg.Entry.test),Tuple{Array{AbstractString,1}}}, ::String) at ./file.jl:70
│     [12] #cd#1(::Base.Iterators.IndexValue{Symbol,Bool,Tuple{Symbol},NamedTuple{(:coverage,),Tuple{Bool}}}, ::Function, ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N} where N) at ./pkg/dir.jl:36
│     [13] (::getfield(Base.Pkg.Dir, Symbol("#kw##cd")))(::NamedTuple{(:coverage,),Tuple{Bool}}, ::typeof(Base.Pkg.Dir.cd), ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N} where N) at ./<missing>:0
│     [14] #test#3(::Bool, ::Function, ::String, ::Vararg{String,N} where N) at ./pkg/pkg.jl:274
│     [15] test(::String, ::Vararg{String,N} where N) at ./pkg/pkg.jl:274
│     [16] top-level scope
│     [17] eval at ./boot.jl:296 [inlined]
│     [18] eval(::Module, ::Expr) at ./sysimg.jl:71
│     [19] process_options(::Base.JLOptions) at ./client.jl:301
│     [20] _start() at ./client.jl:375
└                                                  @ Base.Pkg.Entry entry.jl:739
ERROR: GrowableArrays had test errors

>>> End of log
