>>> 'Pkg.add("LinearMaps")' log
[ Info: Installing LinearMaps v1.0.4
[ Info: Package database updated
┌ Info: METADATA is out-of-date — you may not have the latest version of LinearMaps
└ Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("LinearMaps")' log
Julia Version 0.7.0-DEV.3421
Commit 2042dcfc2e (2018-01-16 23:39 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
      Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-135-generic #184-Ubuntu SMP Wed Oct 18 11:55:51 UTC 2017 x86_64 x86_64
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
              speed         user         nice          sys         idle          irq
       #1  3499 MHz    2684776 s       2540 s     143384 s     703738 s         28 s
       #2  3499 MHz     537402 s       3970 s      54273 s    3498527 s          0 s
       
  Memory: 2.93927001953125 GB (676.984375 MB free)
  Uptime: 41647.0 sec
  Load Avg:  0.9970703125  1.0146484375  1.03369140625
  WORD_SIZE: 64
  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant
Packages:
  Package Directory: /home/vagrant/.julia/v0.7
  Package Status:
2 required packages:
 - JSON                          0.16.4
 - LinearMaps                    1.0.4
2 additional packages:
 - Compat                        0.46.0
 - Nullables                     0.0.3
[ Info: Testing LinearMaps
WARNING: Base.Complex128 is deprecated, use ComplexF64 instead.
  likely near /home/vagrant/.julia/v0.7/LinearMaps/test/runtests.jl:23
WARNING: Base.Complex128 is deprecated, use ComplexF64 instead.
  likely near /home/vagrant/.julia/v0.7/LinearMaps/test/runtests.jl:24
WARNING: Base.Complex128 is deprecated, use ComplexF64 instead.
  likely near /home/vagrant/.julia/v0.7/LinearMaps/test/runtests.jl:25
┌ Warning: `Ac_mul_B(A::StridedMatrix{T}, x::StridedVector{S}) where {T <: BlasFloat, S}` is deprecated, use `adjoint(A) * x` instead.
│   caller = Ac_mul_B at wrappedmap.jl:35 [inlined]
└ @ Core wrappedmap.jl:35
┌ Warning: The syntax `.'` for transposition is deprecated, and the special lowering of `.'` in multiplication (`*`), left-division (`\`), and right-division (`/`) operations, for example `A.'*B` lowering to `At_mul_B(A, B)`, `A\B.'` lowering to `A_ldiv_Bt(A, B)`, and `A.'/B.'` lowering to `At_rdiv_Bt(A, B)`, has been removed in favor of lazy transposition via `transpose`, a corresponding lazy `Transpose` wrapper type, and dispatch on that type. Two rewrites for `A.'` for matrix `A` exist: `transpose(A)`, which yields a lazily transposed version of `A` (often by wrapping in the `Transpose` type), and `copy(transpose(A))` which lazily transposes `A` as above and then materializes that lazily transposed `A` into a freshly allocated matrix of `A`'s type. Which rewrite is appropriate depends on context: If `A.'` appears in a multiplication, left-division, or right-division operation that was formerly specially lowered to an `A_mul_B`-like call, then the lazy `transpose(A)` is the correct replacement and will result in dispatch to a method equivalent to the former `A_mul_B`-like call. For example, `A.'*B`, formerly yielding `At_mul_B(A, B)`, should be rewritten `transpose(A)*B`, which will dispatch to a method equivalent to the former `At_mul_B(A, B)` method. If `A.'` appears outside such an operation, then `copy(transpose(A))` is the functionally equivalent rewrite. For vector `A`, `A.'` already transposed lazily to a `RowVector`, so `transpose(A)`, which now yields a `Transpose`-wrapped vector behaviorally equivalent to the former `RowVector`, is always the correct rewrite for vectors. For more information, see issue #5332 on Julia's issue tracker on GitHub.
└ @ nothing none:0
┌ Warning: The syntax `.'` for transposition is deprecated, and the special lowering of `.'` in multiplication (`*`), left-division (`\`), and right-division (`/`) operations, for example `A.'*B` lowering to `At_mul_B(A, B)`, `A\B.'` lowering to `A_ldiv_Bt(A, B)`, and `A.'/B.'` lowering to `At_rdiv_Bt(A, B)`, has been removed in favor of lazy transposition via `transpose`, a corresponding lazy `Transpose` wrapper type, and dispatch on that type. Two rewrites for `A.'` for matrix `A` exist: `transpose(A)`, which yields a lazily transposed version of `A` (often by wrapping in the `Transpose` type), and `copy(transpose(A))` which lazily transposes `A` as above and then materializes that lazily transposed `A` into a freshly allocated matrix of `A`'s type. Which rewrite is appropriate depends on context: If `A.'` appears in a multiplication, left-division, or right-division operation that was formerly specially lowered to an `A_mul_B`-like call, then the lazy `transpose(A)` is the correct replacement and will result in dispatch to a method equivalent to the former `A_mul_B`-like call. For example, `A.'*B`, formerly yielding `At_mul_B(A, B)`, should be rewritten `transpose(A)*B`, which will dispatch to a method equivalent to the former `At_mul_B(A, B)` method. If `A.'` appears outside such an operation, then `copy(transpose(A))` is the functionally equivalent rewrite. For vector `A`, `A.'` already transposed lazily to a `RowVector`, so `transpose(A)`, which now yields a `Transpose`-wrapped vector behaviorally equivalent to the former `RowVector`, is always the correct rewrite for vectors. For more information, see issue #5332 on Julia's issue tracker on GitHub.
└ @ nothing none:0
┌ Warning: `At_mul_B(A::StridedMatrix{T}, x::StridedVector{S}) where {T <: BlasFloat, S}` is deprecated, use `transpose(A) * x` instead.
│   caller = At_mul_B at wrappedmap.jl:30 [inlined]
└ @ Core wrappedmap.jl:30
┌ Warning: `A_mul_B!(y::StridedVector{T}, A::StridedVecOrMat{T}, x::StridedVector{T}) where T <: BlasFloat` is deprecated, use `mul!(y, A, x)` instead.
│   caller = A_mul_B! at wrappedmap.jl:25 [inlined]
└ @ Core wrappedmap.jl:25
┌ Warning: `Ac_mul_B!(y::StridedVector{T}, A::StridedVecOrMat{T}, x::StridedVector{T}) where T <: BlasComplex` is deprecated, use `mul!(y, adjoint(A), x)` instead.
│   caller = Ac_mul_B! at wrappedmap.jl:33 [inlined]
└ @ Core wrappedmap.jl:33
┌ Warning: The syntax `.'` for transposition is deprecated, and the special lowering of `.'` in multiplication (`*`), left-division (`\`), and right-division (`/`) operations, for example `A.'*B` lowering to `At_mul_B(A, B)`, `A\B.'` lowering to `A_ldiv_Bt(A, B)`, and `A.'/B.'` lowering to `At_rdiv_Bt(A, B)`, has been removed in favor of lazy transposition via `transpose`, a corresponding lazy `Transpose` wrapper type, and dispatch on that type. Two rewrites for `A.'` for matrix `A` exist: `transpose(A)`, which yields a lazily transposed version of `A` (often by wrapping in the `Transpose` type), and `copy(transpose(A))` which lazily transposes `A` as above and then materializes that lazily transposed `A` into a freshly allocated matrix of `A`'s type. Which rewrite is appropriate depends on context: If `A.'` appears in a multiplication, left-division, or right-division operation that was formerly specially lowered to an `A_mul_B`-like call, then the lazy `transpose(A)` is the correct replacement and will result in dispatch to a method equivalent to the former `A_mul_B`-like call. For example, `A.'*B`, formerly yielding `At_mul_B(A, B)`, should be rewritten `transpose(A)*B`, which will dispatch to a method equivalent to the former `At_mul_B(A, B)` method. If `A.'` appears outside such an operation, then `copy(transpose(A))` is the functionally equivalent rewrite. For vector `A`, `A.'` already transposed lazily to a `RowVector`, so `transpose(A)`, which now yields a `Transpose`-wrapped vector behaviorally equivalent to the former `RowVector`, is always the correct rewrite for vectors. For more information, see issue #5332 on Julia's issue tracker on GitHub.
└ @ nothing none:0
┌ Warning: The syntax `.'` for transposition is deprecated, and the special lowering of `.'` in multiplication (`*`), left-division (`\`), and right-division (`/`) operations, for example `A.'*B` lowering to `At_mul_B(A, B)`, `A\B.'` lowering to `A_ldiv_Bt(A, B)`, and `A.'/B.'` lowering to `At_rdiv_Bt(A, B)`, has been removed in favor of lazy transposition via `transpose`, a corresponding lazy `Transpose` wrapper type, and dispatch on that type. Two rewrites for `A.'` for matrix `A` exist: `transpose(A)`, which yields a lazily transposed version of `A` (often by wrapping in the `Transpose` type), and `copy(transpose(A))` which lazily transposes `A` as above and then materializes that lazily transposed `A` into a freshly allocated matrix of `A`'s type. Which rewrite is appropriate depends on context: If `A.'` appears in a multiplication, left-division, or right-division operation that was formerly specially lowered to an `A_mul_B`-like call, then the lazy `transpose(A)` is the correct replacement and will result in dispatch to a method equivalent to the former `A_mul_B`-like call. For example, `A.'*B`, formerly yielding `At_mul_B(A, B)`, should be rewritten `transpose(A)*B`, which will dispatch to a method equivalent to the former `At_mul_B(A, B)` method. If `A.'` appears outside such an operation, then `copy(transpose(A))` is the functionally equivalent rewrite. For vector `A`, `A.'` already transposed lazily to a `RowVector`, so `transpose(A)`, which now yields a `Transpose`-wrapped vector behaviorally equivalent to the former `RowVector`, is always the correct rewrite for vectors. For more information, see issue #5332 on Julia's issue tracker on GitHub.
└ @ nothing none:0
┌ Warning: `At_mul_B!(y::StridedVector{T}, A::StridedVecOrMat{T}, x::StridedVector{T}) where T <: BlasFloat` is deprecated, use `mul!(y, transpose(A), x)` instead.
│   caller = At_mul_B! at wrappedmap.jl:28 [inlined]
└ @ Core wrappedmap.jl:28
WARNING: importing deprecated binding Base.SparseMatrixCSC into LinearMaps.
WARNING: Base.SparseMatrixCSC is deprecated, run `using SparseArrays` to load sparse array functionality.
  likely near /home/vagrant/.julia/v0.7/LinearMaps/test/runtests.jl:40
WARNING: Base.SparseMatrixCSC is deprecated, run `using SparseArrays` to load sparse array functionality.
  likely near /home/vagrant/.julia/v0.7/LinearMaps/test/runtests.jl:40
WARNING: Base.SparseMatrixCSC is deprecated, run `using SparseArrays` to load sparse array functionality.
  likely near /home/vagrant/.julia/v0.7/LinearMaps/test/runtests.jl:40
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = sparse(::LinearMaps.WrappedMap{Complex{Float64},Array{Complex{Float64},2}}) at LinearMaps.jl:97
└ @ LinearMaps LinearMaps.jl:97
┌ Warning: `find` is deprecated, use `findall` instead.
│   caller = sparse(::LinearMaps.WrappedMap{Complex{Float64},Array{Complex{Float64},2}}) at LinearMaps.jl:103
└ @ LinearMaps LinearMaps.jl:103
Error During Test at /home/vagrant/.julia/v0.7/LinearMaps/test/runtests.jl:40
  Test threw an exception of type ErrorException
  Expression: sparse(M) == sparse(full(M))
  Base.sparse has been moved to the standard library package SparseArrays.
  Restart Julia and then run `using SparseArrays` to load it.
  Stacktrace:
   [1] error(::Function, ::String, ::String, ::String, ::String, ::String, ::String) at ./error.jl:42
   [2] #sparse#925 at ./deprecated.jl:138 [inlined]
   [3] sparse(::Array{Complex{Float64},2}) at ./deprecated.jl:138
   [4] top-level scope
   [5] include at ./boot.jl:292 [inlined]
   [6] include_relative(::Module, ::String) at ./loading.jl:521
   [7] include(::Module, ::String) at ./sysimg.jl:26
   [8] process_options(::Base.JLOptions) at ./client.jl:324
   [9] _start() at ./client.jl:375
ERROR: LoadError: There was an error during testing
in expression starting at /home/vagrant/.julia/v0.7/LinearMaps/test/runtests.jl:40
┌ Error: ------------------------------------------------------------
│ # Testing failed for LinearMaps
│   exception =
│    failed process: Process(`/home/vagrant/julia/bin/julia -Cnative -J/home/vagrant/julia/lib/julia/sys.so --compile=yes --depwarn=yes --code-coverage=none --color=no --compiled-modules=yes --check-bounds=yes --warn-overwrite=yes --startup-file=yes /home/vagrant/.julia/v0.7/LinearMaps/test/runtests.jl`, ProcessExited(1)) [1]
│    Stacktrace:
│     [1] error(::String, ::Base.Process, ::String, ::Int64, ::String) at ./error.jl:42
│     [2] pipeline_error(::Base.Process) at ./process.jl:707
│     [3] run(::Cmd) at ./process.jl:669
│     [4] (::getfield(Base.Pkg.Entry, Symbol("##91#94")){Bool,String,Array{AbstractString,1}})() at ./pkg/entry.jl:730
│     [5] cd(::getfield(Base.Pkg.Entry, Symbol("##91#94")){Bool,String,Array{AbstractString,1}}, ::String) at ./file.jl:70
│     [6] #test!#90(::Bool, ::Function, ::String, ::Array{AbstractString,1}, ::Array{AbstractString,1}, ::Array{AbstractString,1}) at ./pkg/entry.jl:718
│     [7] (::getfield(Base.Pkg.Entry, Symbol("#kw##test!")))(::NamedTuple{(:coverage,),Tuple{Bool}}, ::typeof(Base.Pkg.Entry.test!), ::String, ::Array{AbstractString,1}, ::Array{AbstractString,1}, ::Array{AbstractString,1}) at ./<missing>:0
│     [8] #test#98(::Bool, ::Function, ::Array{AbstractString,1}) at ./pkg/entry.jl:757
│     [9] (::getfield(Base.Pkg.Entry, Symbol("#kw##test")))(::NamedTuple{(:coverage,),Tuple{Bool}}, ::typeof(Base.Pkg.Entry.test), ::Array{AbstractString,1}) at ./<missing>:0
│     [10] (::getfield(Base.Pkg.Dir, Symbol("##4#7")){Base.Iterators.IndexValue{Symbol,Bool,Tuple{Symbol},NamedTuple{(:coverage,),Tuple{Bool}}},typeof(Base.Pkg.Entry.test),Tuple{Array{AbstractString,1}}})() at ./pkg/dir.jl:36
│     [11] cd(::getfield(Base.Pkg.Dir, Symbol("##4#7")){Base.Iterators.IndexValue{Symbol,Bool,Tuple{Symbol},NamedTuple{(:coverage,),Tuple{Bool}}},typeof(Base.Pkg.Entry.test),Tuple{Array{AbstractString,1}}}, ::String) at ./file.jl:70
│     [12] #cd#1(::Base.Iterators.IndexValue{Symbol,Bool,Tuple{Symbol},NamedTuple{(:coverage,),Tuple{Bool}}}, ::Function, ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N} where N) at ./pkg/dir.jl:36
│     [13] (::getfield(Base.Pkg.Dir, Symbol("#kw##cd")))(::NamedTuple{(:coverage,),Tuple{Bool}}, ::typeof(Base.Pkg.Dir.cd), ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N} where N) at ./<missing>:0
│     [14] #test#3(::Bool, ::Function, ::String, ::Vararg{String,N} where N) at ./pkg/pkg.jl:274
│     [15] test(::String, ::Vararg{String,N} where N) at ./pkg/pkg.jl:274
│     [16] top-level scope
│     [17] eval at ./boot.jl:295 [inlined]
│     [18] eval(::Module, ::Expr) at ./sysimg.jl:71
│     [19] process_options(::Base.JLOptions) at ./client.jl:301
│     [20] _start() at ./client.jl:375
└ @ Base.Pkg.Entry entry.jl:733
ERROR: LinearMaps had test errors

>>> End of log
