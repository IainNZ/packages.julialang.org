>>> 'Pkg.add("DCEMRI")' log
INFO: Cloning cache of DCEMRI from https://github.com/davidssmith/DCEMRI.jl.git
INFO: Installing ArgParse v0.5.0
INFO: Installing BinDeps v0.8.2
INFO: Installing Blosc v0.3.0
INFO: Installing BufferedStreams v0.3.3
INFO: Installing Calculus v0.2.2
INFO: Installing ColorTypes v0.6.6
INFO: Installing Colors v0.8.2
INFO: Installing Conda v0.7.1
INFO: Installing DCEMRI v0.2.0
INFO: Installing FixedPointNumbers v0.4.3
INFO: Installing HDF5 v0.8.8
INFO: Installing LaTeXStrings v0.3.0
INFO: Installing Libz v0.2.4
INFO: Installing MAT v0.4.0
INFO: Installing MacroTools v0.4.0
INFO: Installing PyCall v1.15.0
INFO: Installing PyPlot v2.3.2
INFO: Installing Reexport v0.1.0
INFO: Installing SHA v0.5.2
INFO: Installing TextWrap v0.2.0
INFO: Installing URIParser v0.3.0
INFO: Building Blosc
INFO: Building Conda
INFO: Building HDF5
INFO: Building PyCall
INFO: Using the Python distribution in the Conda package by default.
To use a different Python version, set ENV["PYTHON"]="pythoncommand" and re-run Pkg.build("PyCall").
Fetching package metadata .............
Solving package specifications: .

Package plan for installation in environment /home/vagrant/.julia/v0.6/Conda/deps/usr:

The following packages will be UPDATED:

    numpy: 1.13.3-py27_blas_openblas_201 conda-forge [blas_openblas] --> 1.14.0-py27_blas_openblas_200 conda-forge [blas_openblas]

numpy-1.14.0-p   0% |                              | ETA:  --:--:--   0.00  B/snumpy-1.14.0-p   1% |                               | ETA:  0:00:04   1.94 MB/snumpy-1.14.0-p   2% |                               | ETA:  0:00:03   2.23 MB/snumpy-1.14.0-p   3% |#                              | ETA:  0:00:03   2.91 MB/snumpy-1.14.0-p   4% |#                              | ETA:  0:00:02   3.13 MB/snumpy-1.14.0-p   5% |#                              | ETA:  0:00:02   3.54 MB/snumpy-1.14.0-p   6% |##                             | ETA:  0:00:02   3.89 MB/snumpy-1.14.0-p   7% |##                             | ETA:  0:00:01   4.20 MB/snumpy-1.14.0-p   8% |##                             | ETA:  0:00:01   4.45 MB/snumpy-1.14.0-p   9% |###                            | ETA:  0:00:01   4.96 MB/snumpy-1.14.0-p  10% |###                            | ETA:  0:00:01   5.16 MB/snumpy-1.14.0-p  11% |###                            | ETA:  0:00:01   5.36 MB/snumpy-1.14.0-p  13% |####                           | ETA:  0:00:01   5.81 MB/snumpy-1.14.0-p  14% |####                           | ETA:  0:00:01   5.87 MB/snumpy-1.14.0-p  15% |####                           | ETA:  0:00:01   6.10 MB/snumpy-1.14.0-p  16% |#####                          | ETA:  0:00:01   6.48 MB/snumpy-1.14.0-p  17% |#####                          | ETA:  0:00:01   6.84 MB/snumpy-1.14.0-p  18% |#####                          | ETA:  0:00:01   6.97 MB/snumpy-1.14.0-p  19% |######                         | ETA:  0:00:00   7.30 MB/snumpy-1.14.0-p  20% |######                         | ETA:  0:00:00   7.40 MB/snumpy-1.14.0-p  21% |######                         | ETA:  0:00:00   7.72 MB/snumpy-1.14.0-p  22% |#######                        | ETA:  0:00:00   7.82 MB/snumpy-1.14.0-p  23% |#######                        | ETA:  0:00:00   8.14 MB/snumpy-1.14.0-p  24% |#######                        | ETA:  0:00:00   8.44 MB/snumpy-1.14.0-p  26% |########                       | ETA:  0:00:00   8.51 MB/snumpy-1.14.0-p  27% |########                       | ETA:  0:00:00   8.78 MB/snumpy-1.14.0-p  28% |########                       | ETA:  0:00:00   9.09 MB/snumpy-1.14.0-p  29% |#########                      | ETA:  0:00:00   9.16 MB/snumpy-1.14.0-p  30% |#########                      | ETA:  0:00:00   9.41 MB/snumpy-1.14.0-p  31% |#########                      | ETA:  0:00:00   9.71 MB/snumpy-1.14.0-p  32% |##########                     | ETA:  0:00:00   9.76 MB/snumpy-1.14.0-p  33% |##########                     | ETA:  0:00:00   9.99 MB/snumpy-1.14.0-p  34% |##########                     | ETA:  0:00:00  10.28 MB/snumpy-1.14.0-p  35% |###########                    | ETA:  0:00:00  10.56 MB/snumpy-1.14.0-p  36% |###########                    | ETA:  0:00:00  10.60 MB/snumpy-1.14.0-p  37% |###########                    | ETA:  0:00:00  10.82 MB/snumpy-1.14.0-p  39% |############                   | ETA:  0:00:00  11.09 MB/snumpy-1.14.0-p  40% |############                   | ETA:  0:00:00  11.36 MB/snumpy-1.14.0-p  41% |############                   | ETA:  0:00:00  11.33 MB/snumpy-1.14.0-p  42% |#############                  | ETA:  0:00:00  11.57 MB/snumpy-1.14.0-p  43% |#############                  | ETA:  0:00:00  11.82 MB/snumpy-1.14.0-p  44% |#############                  | ETA:  0:00:00  12.08 MB/snumpy-1.14.0-p  45% |##############                 | ETA:  0:00:00  12.16 MB/snumpy-1.14.0-p  46% |##############                 | ETA:  0:00:00  12.32 MB/snumpy-1.14.0-p  47% |##############                 | ETA:  0:00:00  12.56 MB/snumpy-1.14.0-p  48% |###############                | ETA:  0:00:00  12.80 MB/snumpy-1.14.0-p  49% |###############                | ETA:  0:00:00  13.05 MB/snumpy-1.14.0-p  50% |###############                | ETA:  0:00:00  13.14 MB/snumpy-1.14.0-p  52% |################               | ETA:  0:00:00  13.26 MB/snumpy-1.14.0-p  53% |################               | ETA:  0:00:00  13.49 MB/snumpy-1.14.0-p  54% |################               | ETA:  0:00:00  13.72 MB/snumpy-1.14.0-p  55% |#################              | ETA:  0:00:00  13.95 MB/snumpy-1.14.0-p  56% |#################              | ETA:  0:00:00  14.18 MB/snumpy-1.14.0-p  57% |#################              | ETA:  0:00:00  14.16 MB/snumpy-1.14.0-p  58% |##################             | ETA:  0:00:00  14.37 MB/snumpy-1.14.0-p  59% |##################             | ETA:  0:00:00  14.59 MB/snumpy-1.14.0-p  60% |##################             | ETA:  0:00:00  14.80 MB/snumpy-1.14.0-p  61% |###################            | ETA:  0:00:00  15.02 MB/snumpy-1.14.0-p  62% |###################            | ETA:  0:00:00  15.20 MB/snumpy-1.14.0-p  63% |###################            | ETA:  0:00:00  15.23 MB/snumpy-1.14.0-p  65% |####################           | ETA:  0:00:00  15.44 MB/snumpy-1.14.0-p  66% |####################           | ETA:  0:00:00  15.65 MB/snumpy-1.14.0-p  67% |####################           | ETA:  0:00:00  15.86 MB/snumpy-1.14.0-p  68% |#####################          | ETA:  0:00:00  16.07 MB/snumpy-1.14.0-p  69% |#####################          | ETA:  0:00:00  16.19 MB/snumpy-1.14.0-p  70% |#####################          | ETA:  0:00:00  16.31 MB/snumpy-1.14.0-p  71% |######################         | ETA:  0:00:00  16.51 MB/snumpy-1.14.0-p  72% |######################         | ETA:  0:00:00  16.62 MB/snumpy-1.14.0-p  73% |######################         | ETA:  0:00:00  16.81 MB/snumpy-1.14.0-p  74% |#######################        | ETA:  0:00:00  16.94 MB/snumpy-1.14.0-p  75% |#######################        | ETA:  0:00:00  17.02 MB/snumpy-1.14.0-p  76% |#######################        | ETA:  0:00:00  17.21 MB/snumpy-1.14.0-p  78% |########################       | ETA:  0:00:00  17.32 MB/snumpy-1.14.0-p  79% |########################       | ETA:  0:00:00  17.52 MB/snumpy-1.14.0-p  80% |########################       | ETA:  0:00:00  17.55 MB/snumpy-1.14.0-p  81% |#########################      | ETA:  0:00:00  17.62 MB/snumpy-1.14.0-p  82% |#########################      | ETA:  0:00:00  17.80 MB/snumpy-1.14.0-p  83% |#########################      | ETA:  0:00:00  17.99 MB/snumpy-1.14.0-p  84% |##########################     | ETA:  0:00:00  18.18 MB/snumpy-1.14.0-p  85% |##########################     | ETA:  0:00:00  18.36 MB/snumpy-1.14.0-p  86% |##########################     | ETA:  0:00:00  18.53 MB/snumpy-1.14.0-p  87% |###########################    | ETA:  0:00:00  18.71 MB/snumpy-1.14.0-p  88% |###########################    | ETA:  0:00:00  18.89 MB/snumpy-1.14.0-p  89% |###########################    | ETA:  0:00:00  18.85 MB/snumpy-1.14.0-p  91% |############################   | ETA:  0:00:00  18.88 MB/snumpy-1.14.0-p  92% |############################   | ETA:  0:00:00  18.97 MB/snumpy-1.14.0-p  93% |############################   | ETA:  0:00:00  19.13 MB/snumpy-1.14.0-p  94% |#############################  | ETA:  0:00:00  19.30 MB/snumpy-1.14.0-p  95% |#############################  | ETA:  0:00:00  19.43 MB/snumpy-1.14.0-p  96% |#############################  | ETA:  0:00:00  19.57 MB/snumpy-1.14.0-p  97% |############################## | ETA:  0:00:00  19.74 MB/snumpy-1.14.0-p  98% |############################## | ETA:  0:00:00  19.91 MB/snumpy-1.14.0-p  99% |############################## | ETA:  0:00:00  20.08 MB/snumpy-1.14.0-p 100% |###############################| Time: 0:00:00  20.11 MB/s
INFO: PyCall is using /home/vagrant/.julia/v0.6/Conda/deps/usr/bin/python (Python 2.7.14) at /home/vagrant/.julia/v0.6/Conda/deps/usr/bin/python, libpython = /home/vagrant/.julia/v0.6/Conda/deps/usr/lib/libpython2.7
INFO: /home/vagrant/.julia/v0.6/PyCall/deps/deps.jl has not changed
INFO: /home/vagrant/.julia/v0.6/PyCall/deps/PYTHON has not changed
INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of DCEMRI
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("DCEMRI")' log
Julia Version 0.6.2
Commit d386e40c17 (2017-12-13 18:08 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-135-generic #184-Ubuntu SMP Wed Oct 18 11:55:51 UTC 2017 x86_64 x86_64
Memory: 2.93927001953125 GB (806.58203125 MB free)
Uptime: 52261.0 sec
Load Avg:  0.923828125  0.9501953125  0.95068359375
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz    3330874 s         71 s     148865 s     978116 s         18 s
#2  3499 MHz    1048354 s        124 s      84488 s    3982335 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.6
2 required packages:
 - DCEMRI                        0.2.0
 - JSON                          0.16.3
22 additional packages:
 - ArgParse                      0.5.0
 - BinDeps                       0.8.2
 - Blosc                         0.3.0
 - BufferedStreams               0.3.3
 - Calculus                      0.2.2
 - ColorTypes                    0.6.6
 - Colors                        0.8.2
 - Compat                        0.43.0
 - Conda                         0.7.1
 - FixedPointNumbers             0.4.3
 - HDF5                          0.8.8
 - LaTeXStrings                  0.3.0
 - Libz                          0.2.4
 - MAT                           0.4.0
 - MacroTools                    0.4.0
 - Nullables                     0.0.2
 - PyCall                        1.15.0
 - PyPlot                        2.3.2
 - Reexport                      0.1.0
 - SHA                           0.5.2
 - TextWrap                      0.2.0
 - URIParser                     0.3.0
INFO: Testing DCEMRI
INFO: DCEMRI tests passed

>>> End of log
