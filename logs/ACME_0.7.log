>>> 'Pkg.add("ACME")' log
[ Info: Cloning cache of ACME from https://github.com/HSU-ANT/ACME.jl.git
[ Info: Cloning cache of IterTools from https://github.com/JuliaCollections/IterTools.jl.git
[ Info: Cloning cache of ProgressMeter from https://github.com/timholy/ProgressMeter.jl.git
[ Info: Installing ACME v0.6.0
[ Info: Installing DataStructures v0.7.4
[ Info: Installing IterTools v0.2.1
[ Info: Installing ProgressMeter v0.5.3
[ Info: Package database updated

>>> 'Pkg.test("ACME")' log
Julia Version 0.7.0-DEV.3583
Commit 7d3991f784 (2018-01-26 19:00 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
      Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-135-generic #184-Ubuntu SMP Wed Oct 18 11:55:51 UTC 2017 x86_64 x86_64
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
              speed         user         nice          sys         idle          irq
       #1  3500 MHz      69232 s         68 s       5236 s      54748 s          3 s
       #2  3500 MHz      14678 s         93 s       2764 s     128335 s          0 s
       
  Memory: 2.93927001953125 GB (597.5390625 MB free)
  Uptime: 1484.0 sec
  Load Avg:  0.88916015625  0.94384765625  0.7392578125
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant
Packages:
  Package Directory: /home/vagrant/.julia/v0.7
  Package Status:
2 required packages:
 - ACME                          0.6.0
 - JSON                          0.16.4
5 additional packages:
 - Compat                        0.49.0
 - DataStructures                0.7.4
 - IterTools                     0.2.1
 - Nullables                     0.0.3
 - ProgressMeter                 0.5.3
[ Info: Testing ACME
WARNING: importing deprecated binding Base.iteratorsize into IterTools.
WARNING: importing deprecated binding Base.iteratoreltype into IterTools.
WARNING: Base.iteratorsize is deprecated, use IteratorSize instead.
  likely near /home/vagrant/.julia/v0.7/IterTools/src/IterTools.jl:73
WARNING: Base.iteratorsize is deprecated, use IteratorSize instead.
  likely near /home/vagrant/.julia/v0.7/IterTools/src/IterTools.jl:73
WARNING: Base.iteratoreltype is deprecated, use IteratorEltype instead.
  likely near /home/vagrant/.julia/v0.7/IterTools/src/IterTools.jl:74
WARNING: Base.iteratoreltype is deprecated, use IteratorEltype instead.
  likely near /home/vagrant/.julia/v0.7/IterTools/src/IterTools.jl:74
WARNING: Base.iteratorsize is deprecated, use IteratorSize instead.
  likely near /home/vagrant/.julia/v0.7/IterTools/src/IterTools.jl:126
WARNING: Base.iteratorsize is deprecated, use IteratorSize instead.
  likely near /home/vagrant/.julia/v0.7/IterTools/src/IterTools.jl:126
WARNING: Base.iteratorsize is deprecated, use IteratorSize instead.
  likely near /home/vagrant/.julia/v0.7/IterTools/src/IterTools.jl:157
WARNING: Base.iteratorsize is deprecated, use IteratorSize instead.
  likely near /home/vagrant/.julia/v0.7/IterTools/src/IterTools.jl:157
WARNING: Base.iteratoreltype is deprecated, use IteratorEltype instead.
  likely near /home/vagrant/.julia/v0.7/IterTools/src/IterTools.jl:194
WARNING: Base.iteratoreltype is deprecated, use IteratorEltype instead.
  likely near /home/vagrant/.julia/v0.7/IterTools/src/IterTools.jl:194
WARNING: Base.iteratorsize is deprecated, use IteratorSize instead.
  likely near /home/vagrant/.julia/v0.7/IterTools/src/IterTools.jl:197
WARNING: Base.iteratorsize is deprecated, use IteratorSize instead.
  likely near /home/vagrant/.julia/v0.7/IterTools/src/IterTools.jl:197
WARNING: Base.iteratorsize is deprecated, use IteratorSize instead.
  likely near /home/vagrant/.julia/v0.7/IterTools/src/IterTools.jl:237
WARNING: Base.iteratorsize is deprecated, use IteratorSize instead.
  likely near /home/vagrant/.julia/v0.7/IterTools/src/IterTools.jl:237
WARNING: Base.iteratorsize is deprecated, use IteratorSize instead.
  likely near /home/vagrant/.julia/v0.7/IterTools/src/IterTools.jl:308
WARNING: Base.iteratorsize is deprecated, use IteratorSize instead.
  likely near /home/vagrant/.julia/v0.7/IterTools/src/IterTools.jl:308
WARNING: Base.iteratorsize is deprecated, use IteratorSize instead.
  likely near /home/vagrant/.julia/v0.7/IterTools/src/IterTools.jl:364
WARNING: Base.iteratorsize is deprecated, use IteratorSize instead.
  likely near /home/vagrant/.julia/v0.7/IterTools/src/IterTools.jl:364
WARNING: Base.iteratorsize is deprecated, use IteratorSize instead.
  likely near /home/vagrant/.julia/v0.7/IterTools/src/IterTools.jl:479
WARNING: Base.iteratorsize is deprecated, use IteratorSize instead.
  likely near /home/vagrant/.julia/v0.7/IterTools/src/IterTools.jl:479
WARNING: Base.iteratorsize is deprecated, use IteratorSize instead.
  likely near /home/vagrant/.julia/v0.7/IterTools/src/IterTools.jl:548
WARNING: Base.iteratorsize is deprecated, use IteratorSize instead.
  likely near /home/vagrant/.julia/v0.7/IterTools/src/IterTools.jl:548
WARNING: Base.iteratoreltype is deprecated, use IteratorEltype instead.
  likely near /home/vagrant/.julia/v0.7/IterTools/src/IterTools.jl:551
WARNING: Base.iteratoreltype is deprecated, use IteratorEltype instead.
  likely near /home/vagrant/.julia/v0.7/IterTools/src/IterTools.jl:551
WARNING: Base.iteratorsize is deprecated, use IteratorSize instead.
  likely near /home/vagrant/.julia/v0.7/IterTools/src/IterTools.jl:594
WARNING: Base.iteratorsize is deprecated, use IteratorSize instead.
  likely near /home/vagrant/.julia/v0.7/IterTools/src/IterTools.jl:594
WARNING: Base.iteratorsize is deprecated, use IteratorSize instead.
  likely near /home/vagrant/.julia/v0.7/IterTools/src/IterTools.jl:669
WARNING: Base.iteratorsize is deprecated, use IteratorSize instead.
  likely near /home/vagrant/.julia/v0.7/IterTools/src/IterTools.jl:669
WARNING: Base.iteratorsize is deprecated, use IteratorSize instead.
  likely near /home/vagrant/.julia/v0.7/IterTools/src/IterTools.jl:750
WARNING: Base.iteratorsize is deprecated, use IteratorSize instead.
  likely near /home/vagrant/.julia/v0.7/IterTools/src/IterTools.jl:750
WARNING: Base.iteratoreltype is deprecated, use IteratorEltype instead.
  likely near /home/vagrant/.julia/v0.7/IterTools/src/IterTools.jl:751
WARNING: Base.iteratoreltype is deprecated, use IteratorEltype instead.
  likely near /home/vagrant/.julia/v0.7/IterTools/src/IterTools.jl:751
WARNING: Base.iteratorsize is deprecated, use IteratorSize instead.
  likely near /home/vagrant/.julia/v0.7/IterTools/src/IterTools.jl:806
WARNING: Base.iteratorsize is deprecated, use IteratorSize instead.
  likely near /home/vagrant/.julia/v0.7/IterTools/src/IterTools.jl:806
WARNING: Base.iteratorsize is deprecated, use IteratorSize instead.
  likely near /home/vagrant/.julia/v0.7/IterTools/src/IterTools.jl:882
WARNING: Base.iteratorsize is deprecated, use IteratorSize instead.
  likely near /home/vagrant/.julia/v0.7/IterTools/src/IterTools.jl:882
WARNING: Base.iteratoreltype is deprecated, use IteratorEltype instead.
  likely near /home/vagrant/.julia/v0.7/IterTools/src/IterTools.jl:883
WARNING: Base.iteratoreltype is deprecated, use IteratorEltype instead.
  likely near /home/vagrant/.julia/v0.7/IterTools/src/IterTools.jl:883
WARNING: Base.iteratorsize is deprecated, use IteratorSize instead.
  likely near /home/vagrant/.julia/v0.7/IterTools/src/IterTools.jl:949
WARNING: Base.iteratorsize is deprecated, use IteratorSize instead.
  likely near /home/vagrant/.julia/v0.7/IterTools/src/IterTools.jl:949
WARNING: Base.iteratoreltype is deprecated, use IteratorEltype instead.
  likely near /home/vagrant/.julia/v0.7/IterTools/src/IterTools.jl:950
WARNING: Base.iteratoreltype is deprecated, use IteratorEltype instead.
  likely near /home/vagrant/.julia/v0.7/IterTools/src/IterTools.jl:950
┌ Warning: `endof(a)` is deprecated, use `lastindex(a)` instead.
│   caller = @showprogress(::LineNumberNode, ::Module, ::Vararg{Any,N} where N) at ProgressMeter.jl:417
└ @ ProgressMeter ProgressMeter.jl:417
WARNING: importing deprecated binding Base.I into ACME.
WARNING: Base.I is deprecated, run `using LinearAlgebra` to load linear algebra functionality..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:13
WARNING: Base.I is deprecated, run `using LinearAlgebra` to load linear algebra functionality..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:13
WARNING: Base.I is deprecated, run `using LinearAlgebra` to load linear algebra functionality..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:13
in topomat! at /home/vagrant/.julia/v0.7/ACME/src/circuit.jl
┌ Warning: `find` is deprecated, use `findall` instead.
│   caller = topomat!(::SparseMatrixCSC{Int64,Int64}) at circuit.jl:258
└ @ ACME circuit.jl:258
┌ Warning: `find` is deprecated, use `findall` instead.
│   caller = topomat!(::SparseMatrixCSC{Int64,Int64}) at circuit.jl:275
└ @ ACME circuit.jl:275
┌ Warning: `find` is deprecated, use `findall` instead.
│   caller = topomat!(::SparseMatrixCSC{Int64,Int64}) at circuit.jl:277
└ @ ACME circuit.jl:277
Test Summary: | Pass  Total
topomat       |    3      3
Test Summary: | Pass  Total
LinearSolver  |   10     10
WARNING: Base.I is deprecated, run `using LinearAlgebra` to load linear algebra functionality..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:44
WARNING: Base.I is deprecated, run `using LinearAlgebra` to load linear algebra functionality..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:44
WARNING: Base.I is deprecated, run `using LinearAlgebra` to load linear algebra functionality..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:44
WARNING: Base.I is deprecated, run `using LinearAlgebra` to load linear algebra functionality..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:44
WARNING: Base.I is deprecated, run `using LinearAlgebra` to load linear algebra functionality..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:44
WARNING: Base.I is deprecated, run `using LinearAlgebra` to load linear algebra functionality..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:44
WARNING: Base.I is deprecated, run `using LinearAlgebra` to load linear algebra functionality..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:44
WARNING: Base.I is deprecated, run `using LinearAlgebra` to load linear algebra functionality..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:44
WARNING: Base.I is deprecated, run `using LinearAlgebra` to load linear algebra functionality..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:44
WARNING: Base.I is deprecated, run `using LinearAlgebra` to load linear algebra functionality..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:44
WARNING: Base.I is deprecated, run `using LinearAlgebra` to load linear algebra functionality..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:44
WARNING: Base.I is deprecated, run `using LinearAlgebra` to load linear algebra functionality..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:44
WARNING: Base.I is deprecated, run `using LinearAlgebra` to load linear algebra functionality..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:44
WARNING: Base.I is deprecated, run `using LinearAlgebra` to load linear algebra functionality..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:44
WARNING: Base.I is deprecated, run `using LinearAlgebra` to load linear algebra functionality..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:44
WARNING: Base.I is deprecated, run `using LinearAlgebra` to load linear algebra functionality..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:44
WARNING: Base.I is deprecated, run `using LinearAlgebra` to load linear algebra functionality..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:44
in model_matrices at /home/vagrant/.julia/v0.7/ACME/src/ACME.jl
WARNING: Base.I is deprecated, run `using LinearAlgebra` to load linear algebra functionality..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:44
in nldecompose! at /home/vagrant/.julia/v0.7/ACME/src/ACME.jl
WARNING: Base.I is deprecated, run `using LinearAlgebra` to load linear algebra functionality..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:44
in gensolve at /home/vagrant/.julia/v0.7/ACME/src/ACME.jl
WARNING: importing deprecated binding Base.BLAS into ACME.
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:44
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:44
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:44
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:44
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:44
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:44
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:44
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:44
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:44
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:44
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:44
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:44
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:44
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:44
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:44
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:44
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:44
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:44
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:44
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:44
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:44
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:44
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:44
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:44
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:44
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:44
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:44
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:44
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:44
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:44
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:44
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:44
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:44
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:44
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:44
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:44
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:44
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:44
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:44
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:44
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:44
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:44
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:44
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:44
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:44
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:44
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:44
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:44
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:44
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:44
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:44
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:44
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:44
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:44
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:44
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:44
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:44
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:44
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:44
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:44
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:44
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:44
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:44
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:44
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:44
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:44
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:44
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:44
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:44
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:44
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:44
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:44
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:44
in step! at /home/vagrant/.julia/v0.7/ACME/src/ACME.jl
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:44
in step! at /home/vagrant/.julia/v0.7/ACME/src/ACME.jl
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:44
in step! at /home/vagrant/.julia/v0.7/ACME/src/ACME.jl
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:44
in step! at /home/vagrant/.julia/v0.7/ACME/src/ACME.jl
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:44
in step! at /home/vagrant/.julia/v0.7/ACME/src/ACME.jl
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:44
in step! at /home/vagrant/.julia/v0.7/ACME/src/ACME.jl
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:44
in step! at /home/vagrant/.julia/v0.7/ACME/src/ACME.jl
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:44
in step! at /home/vagrant/.julia/v0.7/ACME/src/ACME.jl
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:44
in step! at /home/vagrant/.julia/v0.7/ACME/src/ACME.jl
Running model:   5%|██                                  |  ETA: 0:00:05[KRunning model: 100%|████████████████████████████████████| Time: 0:00:00[K
┌ Warning: `indmin` is deprecated, use `argmin` instead.
│   caller = gensolve(::SparseMatrixCSC{Rational{BigInt},Int64}, ::SparseMatrixCSC{Rational{BigInt},Int64}, ::SparseMatrixCSC{Rational{BigInt},Int64}, ::SparseMatrixCSC{Rational{BigInt},Int64}, ::Float64) at ACME.jl:787
└ @ ACME ACME.jl:787
┌ Warning: `indmax` is deprecated, use `argmax` instead.
│   caller = _indmax(::SparseMatrixCSC{Rational{BigInt},Int64}) at ACME.jl:61
└ @ ACME ACME.jl:61
┌ Warning: `find` is deprecated, use `findall` instead.
│   caller = topomat!(::SparseMatrixCSC{Int64,Int64}) at circuit.jl:272
└ @ ACME circuit.jl:272
WARNING: Base.I is deprecated, run `using LinearAlgebra` to load linear algebra functionality..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:44
WARNING: Base.I is deprecated, run `using LinearAlgebra` to load linear algebra functionality..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:44
WARNING: Base.I is deprecated, run `using LinearAlgebra` to load linear algebra functionality..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:44
WARNING: Base.I is deprecated, run `using LinearAlgebra` to load linear algebra functionality..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:44
in tryextract at /home/vagrant/.julia/v0.7/ACME/src/ACME.jl
WARNING: Base.I is deprecated, run `using LinearAlgebra` to load linear algebra functionality..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:44
WARNING: Base.I is deprecated, run `using LinearAlgebra` to load linear algebra functionality..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:44
WARNING: Base.I is deprecated, run `using LinearAlgebra` to load linear algebra functionality..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:44
WARNING: Base.I is deprecated, run `using LinearAlgebra` to load linear algebra functionality..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:44
WARNING: Base.I is deprecated, run `using LinearAlgebra` to load linear algebra functionality..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:44
WARNING: Base.I is deprecated, run `using LinearAlgebra` to load linear algebra functionality..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:44
WARNING: Base.I is deprecated, run `using LinearAlgebra` to load linear algebra functionality..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:44
WARNING: Base.I is deprecated, run `using LinearAlgebra` to load linear algebra functionality..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:44
WARNING: Base.I is deprecated, run `using LinearAlgebra` to load linear algebra functionality..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:44
WARNING: Base.I is deprecated, run `using LinearAlgebra` to load linear algebra functionality..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:44
in rank_factorize at /home/vagrant/.julia/v0.7/ACME/src/ACME.jl
WARNING: Base.I is deprecated, run `using LinearAlgebra` to load linear algebra functionality..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:44
in rank_factorize at /home/vagrant/.julia/v0.7/ACME/src/ACME.jl
┌ Warning: `indmax` is deprecated, use `argmax` instead.
│   caller = _indmax(::Array{Rational{BigInt},2}) at ACME.jl:61
└ @ ACME ACME.jl:61
WARNING: Base.I is deprecated, run `using LinearAlgebra` to load linear algebra functionality..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:44
WARNING: Base.I is deprecated, run `using LinearAlgebra` to load linear algebra functionality..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:44
WARNING: Base.I is deprecated, run `using LinearAlgebra` to load linear algebra functionality..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:44
WARNING: Base.I is deprecated, run `using LinearAlgebra` to load linear algebra functionality..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:44
in gensolve at /home/vagrant/.julia/v0.7/ACME/src/ACME.jl
┌ Warning: `indmin` is deprecated, use `argmin` instead.
│   caller = gensolve(::SparseMatrixCSC{Rational{BigInt},Int64}, ::LinearAlgebra.Adjoint{Rational{BigInt},Array{Rational{BigInt},2}}, ::SparseMatrixCSC{Rational{BigInt},Int64}, ::SparseMatrixCSC{Rational{BigInt},Int64}, ::Float64) at ACME.jl:787
└ @ ACME ACME.jl:787
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:503
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:503
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:503
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:503
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:503
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:503
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:503
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:503
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:503
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:503
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:503
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:503
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:503
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:503
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:503
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:503
WARNING: importing deprecated binding Base.LinAlg into ACME.
WARNING: Base.LinAlg is deprecated, run `using LinearAlgebra` instead.
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:503
WARNING: Base.LinAlg is deprecated, run `using LinearAlgebra` instead.
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:503
WARNING: Base.LinAlg is deprecated, run `using LinearAlgebra` instead.
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:503
WARNING: Base.LinAlg is deprecated, run `using LinearAlgebra` instead.
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:503
WARNING: Base.LinAlg is deprecated, run `using LinearAlgebra` instead.
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:503
WARNING: Base.LinAlg is deprecated, run `using LinearAlgebra` instead.
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:503
WARNING: Base.LinAlg is deprecated, run `using LinearAlgebra` instead.
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:503
WARNING: Base.LinAlg is deprecated, run `using LinearAlgebra` instead.
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:503
WARNING: Base.LinAlg is deprecated, run `using LinearAlgebra` instead.
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:503
WARNING: Base.LinAlg is deprecated, run `using LinearAlgebra` instead.
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:503
WARNING: Base.LinAlg is deprecated, run `using LinearAlgebra` instead.
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:503
WARNING: Base.LinAlg is deprecated, run `using LinearAlgebra` instead.
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:503
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:503
in solve at /home/vagrant/.julia/v0.7/ACME/src/solvers.jl
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:503
in solve at /home/vagrant/.julia/v0.7/ACME/src/solvers.jl
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:503
in solve at /home/vagrant/.julia/v0.7/ACME/src/solvers.jl
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:503
in solve at /home/vagrant/.julia/v0.7/ACME/src/solvers.jl
WARNING: Base.LinAlg is deprecated, run `using LinearAlgebra` instead.
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:503
in solve at /home/vagrant/.julia/v0.7/ACME/src/solvers.jl
WARNING: Base.LinAlg is deprecated, run `using LinearAlgebra` instead.
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:503
in solve at /home/vagrant/.julia/v0.7/ACME/src/solvers.jl
┌ Warning: `find` is deprecated, use `findall` instead.
│   caller = #DiscreteModel#75(::Bool, ::Type, ::Circuit, ::Int64, ::Type{HomotopySolver{CachingSolver{SimpleSolver}}}) at ACME.jl:260
└ @ ACME ACME.jl:260
Test Summary:   | Pass  Total
simple circuits |    3      3
Test Summary:        | Pass  Total
circuit manipulation |    9      9
indeterminate output: Log Test Failed at /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:138
  Expression: DiscreteModel(circ, 1)
  Log Pattern: (:warn, "Model output depends on indeterminate quantity")
  Captured Logs: 
    Test.LogRecord(Warn, "`find` is deprecated, use `findall` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6ac057944, :find), "/home/vagrant/.julia/v0.7/ACME/src/circuit.jl", 258, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>topomat!(::SparseMatrixCSC{Int64,Int64}) at circuit.jl:258,:maxlog=>1))
    Test.LogRecord(Warn, "`find` is deprecated, use `findall` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6ac05828e, :find), "/home/vagrant/.julia/v0.7/ACME/src/circuit.jl", 275, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>topomat!(::SparseMatrixCSC{Int64,Int64}) at circuit.jl:275,:maxlog=>1))
    Test.LogRecord(Warn, "`find` is deprecated, use `findall` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6ac05864d, :find), "/home/vagrant/.julia/v0.7/ACME/src/circuit.jl", 277, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>topomat!(::SparseMatrixCSC{Int64,Int64}) at circuit.jl:277,:maxlog=>1))
    Test.LogRecord(Warn, "`find` is deprecated, use `findall` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6ac057944, :find), "/home/vagrant/.julia/v0.7/ACME/src/circuit.jl", 258, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>topomat!(::SparseMatrixCSC{Int64,Int64}) at circuit.jl:258,:maxlog=>1))
    Test.LogRecord(Warn, "`indmin` is deprecated, use `argmin` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6ac09d7eb, :indmin), "/home/vagrant/.julia/v0.7/ACME/src/ACME.jl", 787, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>gensolve(::SparseMatrixCSC{Rational{BigInt},Int64}, ::SparseMatrixCSC{Rational{BigInt},Int64}, ::SparseMatrixCSC{Rational{BigInt},Int64}, ::SparseMatrixCSC{Rational{BigInt},Int64}, ::Float64) at ACME.jl:787,:maxlog=>1))
    Test.LogRecord(Warn, "`indmin` is deprecated, use `argmin` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6ac09d7eb, :indmin), "/home/vagrant/.julia/v0.7/ACME/src/ACME.jl", 787, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>gensolve(::SparseMatrixCSC{Rational{BigInt},Int64}, ::SparseMatrixCSC{Rational{BigInt},Int64}, ::SparseMatrixCSC{Rational{BigInt},Int64}, ::SparseMatrixCSC{Rational{BigInt},Int64}, ::Float64) at ACME.jl:787,:maxlog=>1))
    Test.LogRecord(Warn, "`indmin` is deprecated, use `argmin` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6ac09d7eb, :indmin), "/home/vagrant/.julia/v0.7/ACME/src/ACME.jl", 787, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>gensolve(::SparseMatrixCSC{Rational{BigInt},Int64}, ::SparseMatrixCSC{Rational{BigInt},Int64}, ::SparseMatrixCSC{Rational{BigInt},Int64}, ::SparseMatrixCSC{Rational{BigInt},Int64}, ::Float64) at ACME.jl:787,:maxlog=>1))
    Test.LogRecord(Warn, "`indmax` is deprecated, use `argmax` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6ac11ef39, :indmax), "/home/vagrant/.julia/v0.7/ACME/src/ACME.jl", 61, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>_indmax(::SparseMatrixCSC{Rational{BigInt},Int64}) at ACME.jl:61,:maxlog=>1))
    Test.LogRecord(Warn, "Model output depends on indeterminate quantity", ACME, :ACME, :ACME_2852b3bb, "/home/vagrant/.julia/v0.7/ACME/src/ACME.jl", 360, Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}())

Stacktrace:
 [1] record(::Test.DefaultTestSet, ::Test.LogTestFailure) at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/logging.jl:89
 [2] macro expansion at /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:138 [inlined]
 [3] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1007 [inlined]
 [4] macro expansion at /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:133 [inlined]
 [5] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1007 [inlined]
 [6] top-level scope at /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:132
┌ Warning: `indmin` is deprecated, use `argmin` instead.
│   caller = gensolve(::LinearAlgebra.Adjoint{Rational{BigInt},SparseMatrixCSC{Rational{BigInt},Int64}}, ::SparseMatrixCSC{Float64,Int64}, ::SparseMatrixCSC{BigFloat,Int64}, ::SparseMatrixCSC{Rational{BigInt},Int64}, ::Float64) at ACME.jl:787
└ @ ACME ACME.jl:787
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:503
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:503
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:503
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:503
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:503
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:503
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:503
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:503
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:503
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:503
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:503
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:503
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:503
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:503
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:503
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:503
WARNING: Base.LinAlg is deprecated, run `using LinearAlgebra` instead.
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:503
WARNING: Base.LinAlg is deprecated, run `using LinearAlgebra` instead.
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:503
WARNING: Base.LinAlg is deprecated, run `using LinearAlgebra` instead.
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:503
WARNING: Base.LinAlg is deprecated, run `using LinearAlgebra` instead.
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:503
WARNING: Base.LinAlg is deprecated, run `using LinearAlgebra` instead.
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:503
WARNING: Base.LinAlg is deprecated, run `using LinearAlgebra` instead.
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:503
WARNING: Base.LinAlg is deprecated, run `using LinearAlgebra` instead.
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:503
WARNING: Base.LinAlg is deprecated, run `using LinearAlgebra` instead.
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:503
WARNING: Base.LinAlg is deprecated, run `using LinearAlgebra` instead.
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:503
WARNING: Base.LinAlg is deprecated, run `using LinearAlgebra` instead.
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:503
WARNING: Base.LinAlg is deprecated, run `using LinearAlgebra` instead.
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:503
WARNING: Base.LinAlg is deprecated, run `using LinearAlgebra` instead.
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:503
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:503
in solve at /home/vagrant/.julia/v0.7/ACME/src/solvers.jl
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:503
in solve at /home/vagrant/.julia/v0.7/ACME/src/solvers.jl
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:503
in solve at /home/vagrant/.julia/v0.7/ACME/src/solvers.jl
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:503
in solve at /home/vagrant/.julia/v0.7/ACME/src/solvers.jl
WARNING: Base.LinAlg is deprecated, run `using LinearAlgebra` instead.
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:503
in solve at /home/vagrant/.julia/v0.7/ACME/src/solvers.jl
WARNING: Base.LinAlg is deprecated, run `using LinearAlgebra` instead.
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:503
in solve at /home/vagrant/.julia/v0.7/ACME/src/solvers.jl
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
in set_extrapolation_origin at /home/vagrant/.julia/v0.7/ACME/src/solvers.jl
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
in set_extrapolation_origin at /home/vagrant/.julia/v0.7/ACME/src/solvers.jl
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.LinAlg is deprecated, run `using LinearAlgebra` instead.
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.LinAlg is deprecated, run `using LinearAlgebra` instead.
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.LinAlg is deprecated, run `using LinearAlgebra` instead.
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.LinAlg is deprecated, run `using LinearAlgebra` instead.
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.LinAlg is deprecated, run `using LinearAlgebra` instead.
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.LinAlg is deprecated, run `using LinearAlgebra` instead.
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.LinAlg is deprecated, run `using LinearAlgebra` instead.
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.LinAlg is deprecated, run `using LinearAlgebra` instead.
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.LinAlg is deprecated, run `using LinearAlgebra` instead.
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.LinAlg is deprecated, run `using LinearAlgebra` instead.
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.LinAlg is deprecated, run `using LinearAlgebra` instead.
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.LinAlg is deprecated, run `using LinearAlgebra` instead.
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.LinAlg is deprecated, run `using LinearAlgebra` instead.
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.LinAlg is deprecated, run `using LinearAlgebra` instead.
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.LinAlg is deprecated, run `using LinearAlgebra` instead.
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.LinAlg is deprecated, run `using LinearAlgebra` instead.
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.LinAlg is deprecated, run `using LinearAlgebra` instead.
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.LinAlg is deprecated, run `using LinearAlgebra` instead.
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.LinAlg is deprecated, run `using LinearAlgebra` instead.
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.LinAlg is deprecated, run `using LinearAlgebra` instead.
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.LinAlg is deprecated, run `using LinearAlgebra` instead.
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.LinAlg is deprecated, run `using LinearAlgebra` instead.
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.LinAlg is deprecated, run `using LinearAlgebra` instead.
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.LinAlg is deprecated, run `using LinearAlgebra` instead.
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.LinAlg is deprecated, run `using LinearAlgebra` instead.
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.LinAlg is deprecated, run `using LinearAlgebra` instead.
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.LinAlg is deprecated, run `using LinearAlgebra` instead.
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.LinAlg is deprecated, run `using LinearAlgebra` instead.
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.LinAlg is deprecated, run `using LinearAlgebra` instead.
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.LinAlg is deprecated, run `using LinearAlgebra` instead.
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.LinAlg is deprecated, run `using LinearAlgebra` instead.
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.LinAlg is deprecated, run `using LinearAlgebra` instead.
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.LinAlg is deprecated, run `using LinearAlgebra` instead.
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.LinAlg is deprecated, run `using LinearAlgebra` instead.
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.LinAlg is deprecated, run `using LinearAlgebra` instead.
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.LinAlg is deprecated, run `using LinearAlgebra` instead.
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
in step! at /home/vagrant/.julia/v0.7/ACME/src/ACME.jl
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
in step! at /home/vagrant/.julia/v0.7/ACME/src/ACME.jl
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
in solve at /home/vagrant/.julia/v0.7/ACME/src/solvers.jl
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
in solve at /home/vagrant/.julia/v0.7/ACME/src/solvers.jl
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
in solve at /home/vagrant/.julia/v0.7/ACME/src/solvers.jl
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
in solve at /home/vagrant/.julia/v0.7/ACME/src/solvers.jl
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
in solve at /home/vagrant/.julia/v0.7/ACME/src/solvers.jl
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
in solve at /home/vagrant/.julia/v0.7/ACME/src/solvers.jl
WARNING: Base.LinAlg is deprecated, run `using LinearAlgebra` instead.
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
in solve at /home/vagrant/.julia/v0.7/ACME/src/solvers.jl
WARNING: Base.LinAlg is deprecated, run `using LinearAlgebra` instead.
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
in solve at /home/vagrant/.julia/v0.7/ACME/src/solvers.jl
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
in step! at /home/vagrant/.julia/v0.7/ACME/src/ACME.jl
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
in step! at /home/vagrant/.julia/v0.7/ACME/src/ACME.jl
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
in step! at /home/vagrant/.julia/v0.7/ACME/src/ACME.jl
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
in step! at /home/vagrant/.julia/v0.7/ACME/src/ACME.jl
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
in step! at /home/vagrant/.julia/v0.7/ACME/src/ACME.jl
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
in step! at /home/vagrant/.julia/v0.7/ACME/src/ACME.jl
WARNING: Base.BLAS is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add a `using LinearAlgebra` to your imports..
  likely near /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
in step! at /home/vagrant/.julia/v0.7/ACME/src/ACME.jl
┌ Warning: `scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.
│   caller = solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294
└ @ ACME solvers.jl:294
┌ Warning: `indmax` is deprecated, use `argmax` instead.
│   caller = ACME.KDTree(::Array{Float64,2}, ::Int64) at kdtree.jl:41
└ @ ACME kdtree.jl:41
┌ Warning: `indmax` is deprecated, use `argmax` instead.
│   caller = ACME.KDTree(::Array{Float64,2}, ::Int64) at kdtree.jl:59
└ @ ACME kdtree.jl:59
Running model:  50%|██████████████████                  |  ETA: 0:00:01[KRunning model: 100%|████████████████████████████████████| Time: 0:00:01[K
no solution: Log Test Failed at /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:166
  Expression: run!(model, hcat([-1.0]))
  Log Pattern: (:warn, "Failed to converge while solving non-linear equation.")
  Captured Logs: 
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "`scale!(a::Number, B::AbstractArray)` is deprecated, use `mul2!(a, B)` instead.", ACME, :depwarn, (Ptr{Nothing} @0x00007fd6a0d2e86c, :scale!), "/home/vagrant/.julia/v0.7/ACME/src/solvers.jl", 294, Base.Iterators.IndexValue{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{StackFrame,Int64}}}(:caller=>solve(::HomotopySolver{CachingSolver{SimpleSolver{ACME.ParametricNonLinEq{getfield(ACME, Symbol("##140#141")),getfield(ACME, Symbol("##88#104")){Array{Float64,2},Array{Float64,1}},getfield(ACME, Symbol("##90#106")){Array{Float64,2}},Tuple{Array{Float64,1},Array{Float64,2}}}}}}, ::Array{Float64,1}) at solvers.jl:294,:maxlog=>1))
    Test.LogRecord(Warn, "Failed to converge while solving non-linear equation.", ACME, :ACME, :ACME_2852b3bc, "/home/vagrant/.julia/v0.7/ACME/src/ACME.jl", 747, Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}())

Stacktrace:
 [1] record(::Test.DefaultTestSet, ::Test.LogTestFailure) at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/logging.jl:89
 [2] macro expansion at /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:166 [inlined]
 [3] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1007 [inlined]
 [4] macro expansion at /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:154 [inlined]
 [5] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1007 [inlined]
 [6] top-level scope at /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:132
Test Summary:          | Pass  Fail  Total
faulty circuits        |    5     2      7
  indeterminate output |          1      1
  no solution          |    5     1      6
ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored, 0 broken.
in expression starting at /home/vagrant/.julia/v0.7/ACME/test/runtests.jl:131
┌ Error: ------------------------------------------------------------
│ # Testing failed for ACME
│   exception =
│    failed process: Process(`/home/vagrant/julia/bin/julia -Cnative -J/home/vagrant/julia/lib/julia/sys.so --compile=yes --depwarn=yes --code-coverage=none --color=no --compiled-modules=yes --check-bounds=yes --warn-overwrite=yes --startup-file=yes /home/vagrant/.julia/v0.7/ACME/test/runtests.jl`, ProcessExited(1)) [1]
│    Stacktrace:
│     [1] error(::String, ::Base.Process, ::String, ::Int64, ::String) at ./error.jl:42
│     [2] pipeline_error(::Base.Process) at ./process.jl:698
│     [3] run(::Cmd) at ./process.jl:660
│     [4] (::getfield(Base.Pkg.Entry, Symbol("##89#92")){Bool,String,Array{AbstractString,1}})() at ./pkg/entry.jl:729
│     [5] cd(::getfield(Base.Pkg.Entry, Symbol("##89#92")){Bool,String,Array{AbstractString,1}}, ::String) at ./file.jl:70
│     [6] #test!#88(::Bool, ::Function, ::String, ::Array{AbstractString,1}, ::Array{AbstractString,1}, ::Array{AbstractString,1}) at ./pkg/entry.jl:717
│     [7] (::getfield(Base.Pkg.Entry, Symbol("#kw##test!")))(::NamedTuple{(:coverage,),Tuple{Bool}}, ::typeof(Base.Pkg.Entry.test!), ::String, ::Array{AbstractString,1}, ::Array{AbstractString,1}, ::Array{AbstractString,1}) at ./<missing>:0
│     [8] #test#96(::Bool, ::Function, ::Array{AbstractString,1}) at ./pkg/entry.jl:756
│     [9] (::getfield(Base.Pkg.Entry, Symbol("#kw##test")))(::NamedTuple{(:coverage,),Tuple{Bool}}, ::typeof(Base.Pkg.Entry.test), ::Array{AbstractString,1}) at ./<missing>:0
│     [10] (::getfield(Base.Pkg.Dir, Symbol("##4#7")){Base.Iterators.IndexValue{Symbol,Bool,Tuple{Symbol},NamedTuple{(:coverage,),Tuple{Bool}}},typeof(Base.Pkg.Entry.test),Tuple{Array{AbstractString,1}}})() at ./pkg/dir.jl:36
│     [11] cd(::getfield(Base.Pkg.Dir, Symbol("##4#7")){Base.Iterators.IndexValue{Symbol,Bool,Tuple{Symbol},NamedTuple{(:coverage,),Tuple{Bool}}},typeof(Base.Pkg.Entry.test),Tuple{Array{AbstractString,1}}}, ::String) at ./file.jl:70
│     [12] #cd#1(::Base.Iterators.IndexValue{Symbol,Bool,Tuple{Symbol},NamedTuple{(:coverage,),Tuple{Bool}}}, ::Function, ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N} where N) at ./pkg/dir.jl:36
│     [13] (::getfield(Base.Pkg.Dir, Symbol("#kw##cd")))(::NamedTuple{(:coverage,),Tuple{Bool}}, ::typeof(Base.Pkg.Dir.cd), ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N} where N) at ./<missing>:0
│     [14] #test#3(::Bool, ::Function, ::String, ::Vararg{String,N} where N) at ./pkg/pkg.jl:274
│     [15] test(::String, ::Vararg{String,N} where N) at ./pkg/pkg.jl:274
│     [16] top-level scope
│     [17] eval at ./boot.jl:295 [inlined]
│     [18] eval(::Module, ::Expr) at ./sysimg.jl:71
│     [19] process_options(::Base.JLOptions) at ./client.jl:311
│     [20] _start() at ./client.jl:386
└ @ Base.Pkg.Entry entry.jl:732
ERROR: ACME had test errors

>>> End of log
