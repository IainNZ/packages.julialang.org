>>> 'Pkg.add("CodecXz")' log
[ Info: Cloning cache of CodecXz from https://github.com/bicycle1885/CodecXz.jl.git
[ Info: Installing CodecXz v0.4.0
[ Info: Installing TranscodingStreams v0.4.1
[ Info: Package database updated
┌ Info: METADATA is out-of-date — you may not have the latest version of CodecXz
└ Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("CodecXz")' log
Julia Version 0.7.0-DEV.3563
Commit cf6303abe0 (2018-01-24 23:08 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
      Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-135-generic #184-Ubuntu SMP Wed Oct 18 11:55:51 UTC 2017 x86_64 x86_64
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
              speed         user         nice          sys         idle          irq
       #1  3500 MHz    1803540 s       7869 s      95236 s     699108 s         15 s
       #2  3500 MHz     413565 s         46 s      41352 s    2521937 s          0 s
       
  Memory: 2.93927001953125 GB (865.1875 MB free)
  Uptime: 30213.0 sec
  Load Avg:  1.0341796875  1.001953125  0.9755859375
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant
Packages:
  Package Directory: /home/vagrant/.julia/v0.7
  Package Status:
2 required packages:
 - CodecXz                       0.4.0
 - JSON                          0.16.4
3 additional packages:
 - Compat                        0.49.0
 - Nullables                     0.0.3
 - TranscodingStreams            0.4.1
[ Info: Testing CodecXz
WARNING: importing deprecated binding Base.Void into CodecXz.
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/CodecXz/src/liblzma.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/CodecXz/src/liblzma.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/CodecXz/src/liblzma.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/CodecXz/src/liblzma.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/CodecXz/src/liblzma.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/CodecXz/src/liblzma.jl:40
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/CodecXz/src/liblzma.jl:102
WARNING: Base.Test is deprecated, run `using Test` instead.
  likely near /home/vagrant/.julia/v0.7/CodecXz/test/runtests.jl:2
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/CodecXz/test/runtests.jl:5
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/CodecXz/test/runtests.jl:5
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/CodecXz/test/runtests.jl:5
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/CodecXz/test/runtests.jl:5
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/CodecXz/test/runtests.jl:5
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/CodecXz/test/runtests.jl:5
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/CodecXz/test/runtests.jl:5
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/CodecXz/test/runtests.jl:5
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/CodecXz/test/runtests.jl:5
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/CodecXz/test/runtests.jl:5
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/CodecXz/test/runtests.jl:5
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/CodecXz/test/runtests.jl:5
┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `contains(s, r)` instead.
│   caller = macro expansion at runtests.jl:8 [inlined]
└ @ Core runtests.jl:8
Xz Codec: Test Failed at /home/vagrant/.julia/v0.7/CodecXz/test/runtests.jl:8
  Expression: ismatch(#= /home/vagrant/.julia/v0.7/CodecXz/test/runtests.jl:8 =# @r_str("^CodecXz.XzCompressor\\(level=\\d, check=\\d+\\)\$"), sprint(show, codec))
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.7/CodecXz/test/runtests.jl:8 [inlined]
 [2] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1007 [inlined]
 [3] top-level scope at /home/vagrant/.julia/v0.7/CodecXz/test/runtests.jl:6
┌ Warning: `ismatch(r::Regex, s::AbstractString)` is deprecated, use `contains(s, r)` instead.
│   caller = macro expansion at runtests.jl:14 [inlined]
└ @ Core runtests.jl:14
Xz Codec: Test Failed at /home/vagrant/.julia/v0.7/CodecXz/test/runtests.jl:14
  Expression: ismatch(#= /home/vagrant/.julia/v0.7/CodecXz/test/runtests.jl:14 =# @r_str("^CodecXz.XzDecompressor\\(memlimit=\\d+, flags=\\d+\\)\$"), sprint(show, codec))
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.7/CodecXz/test/runtests.jl:14 [inlined]
 [2] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1007 [inlined]
 [3] top-level scope at /home/vagrant/.julia/v0.7/CodecXz/test/runtests.jl:6
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = Type at buffer.jl:30 [inlined]
└ @ Core buffer.jl:30
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = Type at buffer.jl:30 [inlined]
└ @ Core buffer.jl:30
┌ Warning: `nb_available` is deprecated, use `bytesavailable` instead.
│   caller = readdata!(::Base.GenericIOBuffer{Base.CodeUnits{UInt8,String}}, ::TranscodingStreams.Buffer) at stream.jl:615
└ @ TranscodingStreams stream.jl:615
┌ Warning: `unsafe_copy!(dest, args...)` is deprecated, use `unsafe_copyto!(dest, args...)` instead.
│   caller = copydata! at buffer.jl:202 [inlined]
└ @ Core buffer.jl:202
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = Type at buffer.jl:30 [inlined]
└ @ Core buffer.jl:30
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = Type at buffer.jl:30 [inlined]
└ @ Core buffer.jl:30
┌ Warning: `nb_available` is deprecated, use `bytesavailable` instead.
│   caller = readdata!(::Base.GenericIOBuffer{Array{UInt8,1}}, ::TranscodingStreams.Buffer) at stream.jl:615
└ @ TranscodingStreams stream.jl:615
┌ Warning: `unsafe_copy!(dest, args...)` is deprecated, use `unsafe_copyto!(dest, args...)` instead.
│   caller = copydata! at buffer.jl:202 [inlined]
└ @ Core buffer.jl:202
Xz Codec: Error During Test at /home/vagrant/.julia/v0.7/CodecXz/test/runtests.jl:5
  Got an exception of type ErrorException outside of a @test
  indexing not defined for Base.CodeUnits{UInt8,String}
  Stacktrace:
   [1] error(::String, ::Type) at ./error.jl:42
   [2] error_if_canonical_indexing at ./abstractarray.jl:935 [inlined]
   [3] setindex! at ./abstractarray.jl:1003 [inlined]
   [4] macro expansion at ./multidimensional.jl:686 [inlined]
   [5] macro expansion at ./cartesian.jl:64 [inlined]
   [6] @generated body at ./multidimensional.jl:684 [inlined]
   [7] _unsafe_setindex! at ./multidimensional.jl:677 [inlined]
   [8] _setindex! at ./multidimensional.jl:670 [inlined]
   [9] setindex!(::Base.CodeUnits{UInt8,String}, ::Base.CodeUnits{UInt8,String}, ::Array{Int64,1}) at ./abstractarray.jl:1004
   [10] macro expansion at /home/vagrant/.julia/v0.7/CodecXz/test/runtests.jl:23 [inlined]
   [11] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1007 [inlined]
   [12] top-level scope at /home/vagrant/.julia/v0.7/CodecXz/test/runtests.jl:6
   [13] include at ./boot.jl:292 [inlined]
   [14] include_relative(::Module, ::String) at ./loading.jl:1012
   [15] include(::Module, ::String) at ./sysimg.jl:26
   [16] process_options(::Base.JLOptions) at ./client.jl:334
   [17] _start() at ./client.jl:386
Test Summary: | Pass  Fail  Error  Total
Xz Codec      |    8     2      1     11
ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 1 errored, 0 broken.
in expression starting at /home/vagrant/.julia/v0.7/CodecXz/test/runtests.jl:5
┌ Error: ------------------------------------------------------------
│ # Testing failed for CodecXz
│   exception =
│    failed process: Process(`/home/vagrant/julia/bin/julia -Cnative -J/home/vagrant/julia/lib/julia/sys.so --compile=yes --depwarn=yes --code-coverage=none --color=no --compiled-modules=yes --check-bounds=yes --warn-overwrite=yes --startup-file=yes /home/vagrant/.julia/v0.7/CodecXz/test/runtests.jl`, ProcessExited(1)) [1]
│    Stacktrace:
│     [1] error(::String, ::Base.Process, ::String, ::Int64, ::String) at ./error.jl:42
│     [2] pipeline_error(::Base.Process) at ./process.jl:698
│     [3] run(::Cmd) at ./process.jl:660
│     [4] (::getfield(Base.Pkg.Entry, Symbol("##89#92")){Bool,String,Array{AbstractString,1}})() at ./pkg/entry.jl:729
│     [5] cd(::getfield(Base.Pkg.Entry, Symbol("##89#92")){Bool,String,Array{AbstractString,1}}, ::String) at ./file.jl:70
│     [6] #test!#88(::Bool, ::Function, ::String, ::Array{AbstractString,1}, ::Array{AbstractString,1}, ::Array{AbstractString,1}) at ./pkg/entry.jl:717
│     [7] (::getfield(Base.Pkg.Entry, Symbol("#kw##test!")))(::NamedTuple{(:coverage,),Tuple{Bool}}, ::typeof(Base.Pkg.Entry.test!), ::String, ::Array{AbstractString,1}, ::Array{AbstractString,1}, ::Array{AbstractString,1}) at ./<missing>:0
│     [8] #test#96(::Bool, ::Function, ::Array{AbstractString,1}) at ./pkg/entry.jl:756
│     [9] (::getfield(Base.Pkg.Entry, Symbol("#kw##test")))(::NamedTuple{(:coverage,),Tuple{Bool}}, ::typeof(Base.Pkg.Entry.test), ::Array{AbstractString,1}) at ./<missing>:0
│     [10] (::getfield(Base.Pkg.Dir, Symbol("##4#7")){Base.Iterators.IndexValue{Symbol,Bool,Tuple{Symbol},NamedTuple{(:coverage,),Tuple{Bool}}},typeof(Base.Pkg.Entry.test),Tuple{Array{AbstractString,1}}})() at ./pkg/dir.jl:36
│     [11] cd(::getfield(Base.Pkg.Dir, Symbol("##4#7")){Base.Iterators.IndexValue{Symbol,Bool,Tuple{Symbol},NamedTuple{(:coverage,),Tuple{Bool}}},typeof(Base.Pkg.Entry.test),Tuple{Array{AbstractString,1}}}, ::String) at ./file.jl:70
│     [12] #cd#1(::Base.Iterators.IndexValue{Symbol,Bool,Tuple{Symbol},NamedTuple{(:coverage,),Tuple{Bool}}}, ::Function, ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N} where N) at ./pkg/dir.jl:36
│     [13] (::getfield(Base.Pkg.Dir, Symbol("#kw##cd")))(::NamedTuple{(:coverage,),Tuple{Bool}}, ::typeof(Base.Pkg.Dir.cd), ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N} where N) at ./<missing>:0
│     [14] #test#3(::Bool, ::Function, ::String, ::Vararg{String,N} where N) at ./pkg/pkg.jl:274
│     [15] test(::String, ::Vararg{String,N} where N) at ./pkg/pkg.jl:274
│     [16] top-level scope
│     [17] eval at ./boot.jl:295 [inlined]
│     [18] eval(::Module, ::Expr) at ./sysimg.jl:71
│     [19] process_options(::Base.JLOptions) at ./client.jl:311
│     [20] _start() at ./client.jl:386
└ @ Base.Pkg.Entry entry.jl:732
ERROR: CodecXz had test errors

>>> End of log
