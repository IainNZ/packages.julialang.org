>>> 'Pkg.add("DiffBase")' log
[ Info: Installing DiffBase v0.3.2 @ Base.Pkg.Entry entry.jl:543
[ Info: Installing StaticArrays v0.6.6 @ Base.Pkg.Entry entry.jl:543
[ Info: Package database updated @ Base.Pkg.Entry entry.jl:32
┌ Info: METADATA is out-of-date — you may not have the latest version of DiffBase
│ Use `Pkg.update()` to get the latest versions of your packages
└ @ Base.Pkg.Entry entry.jl:74

>>> 'Pkg.test("DiffBase")' log
Julia Version 0.7.0-DEV.3309
Commit b96097b66f (2018-01-07 00:26 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
      Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-135-generic #184-Ubuntu SMP Wed Oct 18 11:55:51 UTC 2017 x86_64 x86_64
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
              speed         user         nice          sys         idle          irq
       #1  3500 MHz    3120674 s        107 s     160949 s     859417 s         22 s
       #2  3500 MHz     715408 s         73 s      66269 s    4016453 s          0 s
       
  Memory: 2.93927001953125 GB (945.87109375 MB free)
  Uptime: 48807.0 sec
  Load Avg:  0.96923828125  0.998046875  0.97607421875
  WORD_SIZE: 64
  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant
Packages:
  Package Directory: /home/vagrant/.julia/v0.7
  Package Status:
2 required packages:
 - DiffBase                      0.3.2
 - JSON                          0.16.3
3 additional packages:
 - Compat                        0.43.0
 - Nullables                     0.0.2
 - StaticArrays                  0.6.6
[ Info: Computing test dependencies for DiffBase... @ Base.Pkg.Entry entry.jl:713
[ Info: Installing BinDeps v0.8.2 @ Base.Pkg.Entry entry.jl:543
[ Info: Installing RealInterface v0.0.3 @ Base.Pkg.Entry entry.jl:543
[ Info: Installing SHA v0.5.2 @ Base.Pkg.Entry entry.jl:543
[ Info: Installing SpecialFunctions v0.3.7 @ Base.Pkg.Entry entry.jl:543
[ Info: Installing URIParser v0.3.0 @ Base.Pkg.Entry entry.jl:543
[ Info: Building SpecialFunctions @ Main none:10
WARNING: importing deprecated binding Base.Associative into BinDeps.
WARNING: Base.Associative is deprecated, use AbstractDict instead.
  likely near /home/vagrant/.julia/v0.7/SpecialFunctions/deps/binaries.jl:44
in @install at /home/vagrant/.julia/v0.7/BinDeps/src/dependencies.jl
┌ Warning: `unshift!` is deprecated, use `pushfirst!` instead.
│   caller = #_find_library#48(::Type, ::Function, ::BinDeps.LibraryDependency) at dependencies.jl:652
└ @ BinDeps dependencies.jl:652
┌ Warning: `unshift!` is deprecated, use `pushfirst!` instead.
│   caller = #_find_library#48(::DataType, ::Function, ::BinDeps.LibraryDependency) at dependencies.jl:652
└ @ BinDeps dependencies.jl:652
[ Info: Testing DiffBase @ Base.Pkg.Entry entry.jl:723
WARNING: Base.Test is deprecated, run `using Test` instead.
  likely near /home/vagrant/.julia/v0.7/DiffBase/test/ResultTests.jl:4
┌ Warning: `copy!(dst::AbstractArray, src::AbstractArray)` is deprecated. You can either use `copyto!(dst, src)` or `Future.copy!(dst, src)` instead.
│   caller = value!(::DiffBase.MutableDiffResult{2,Array{Float64,1},Tuple{Array{Float64,2},Array{Float64,3}}}, ::Array{Float64,1}) at results.jl:153
└ @ DiffBase results.jl:153
┌ Warning: `copy!(dst::AbstractArray, src::AbstractArray)` is deprecated. You can either use `copyto!(dst, src)` or `Future.copy!(dst, src)` instead.
│   caller = derivative! at results.jl:195 [inlined]
└ @ Core results.jl:195
┌ Warning: `copy!(dst::AbstractArray, src::AbstractArray)` is deprecated. You can either use `copyto!(dst, src)` or `Future.copy!(dst, src)` instead.
│   caller = derivative!(::DiffBase.MutableDiffResult{2,Array{Float64,1},Tuple{Array{Float64,2},Array{Float64,3}}}, ::Array{Float64,3}, ::Type{Val{2}}) at results.jl:195
└ @ DiffBase results.jl:195
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #s168#236(::Tuple{Int64,Int64}, ::Type, ::Type, ::Type, ::Tuple{DataType}) at mapreduce.jl:20
└ @ StaticArrays mapreduce.jl:20
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #s168#236(::Tuple{Int64}, ::Type, ::Type, ::Type, ::Tuple{DataType}) at mapreduce.jl:20
└ @ StaticArrays mapreduce.jl:20
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #s168#236(::Tuple{Int64,Int64,Int64}, ::Type, ::Type, ::Type, ::Tuple{DataType}) at mapreduce.jl:20
└ @ StaticArrays mapreduce.jl:20
┌ Warning: `copy!(dst::AbstractArray, src::AbstractArray)` is deprecated. You can either use `copyto!(dst, src)` or `Future.copy!(dst, src)` instead.
│   caller = derivative! at results.jl:195 [inlined]
└ @ Core results.jl:195
┌ Warning: `copy!(dst::AbstractArray, src::AbstractArray)` is deprecated. You can either use `copyto!(dst, src)` or `Future.copy!(dst, src)` instead.
│   caller = derivative! at results.jl:195 [inlined]
└ @ Core results.jl:195
┌ Warning: `copy!(dst::AbstractArray, src::AbstractArray)` is deprecated. You can either use `copyto!(dst, src)` or `Future.copy!(dst, src)` instead.
│   caller = derivative! at results.jl:195 [inlined]
└ @ Core results.jl:195
WARNING: Base.Test is deprecated, run `using Test` instead.
  likely near /home/vagrant/.julia/v0.7/DiffBase/test/TestFuncTests.jl:4
┌ Warning: `a::Number + b::AbstractArray` is deprecated, use `broadcast(+, a, b)` instead.
│   caller = rosenbrock_4(::Array{Float64,1}) at testfuncs.jl:90
└ @ DiffBase testfuncs.jl:90
WARNING: importing deprecated binding Base.e into DiffBase.
WARNING: Base.e is deprecated, use ℯ (\euler) or `Base.MathConstants.e`.
  likely near /home/vagrant/.julia/v0.7/DiffBase/test/TestFuncTests.jl:16
WARNING: Base.e is deprecated, use ℯ (\euler) or `Base.MathConstants.e`.
  likely near /home/vagrant/.julia/v0.7/DiffBase/test/TestFuncTests.jl:16
WARNING: Base.e is deprecated, use ℯ (\euler) or `Base.MathConstants.e`.
  likely near /home/vagrant/.julia/v0.7/DiffBase/test/TestFuncTests.jl:16
┌ Warning: `zeros(a::AbstractArray)` is deprecated, consider `zero(a)`, `fill(0, size(a))`, `fill!(copy(a), 0)`, or `fill!(similar(a), 0)`. Where necessary, use `fill!(similar(a), zero(eltype(a)))`.
│   caller = chebyquad(::Array{Float64,2}) at testfuncs.jl:251
└ @ DiffBase testfuncs.jl:251
┌ Warning: `zeros(a::AbstractArray)` is deprecated, consider `zero(a)`, `fill(0, size(a))`, `fill!(copy(a), 0)`, or `fill!(similar(a), 0)`. Where necessary, use `fill!(similar(a), zero(eltype(a)))`.
│   caller = chebyquad(::Array{Float64,1}) at testfuncs.jl:251
└ @ DiffBase testfuncs.jl:251
┌ Warning: `zeros(a::AbstractArray)` is deprecated, consider `zero(a)`, `fill(0, size(a))`, `fill!(copy(a), 0)`, or `fill!(similar(a), 0)`. Where necessary, use `fill!(similar(a), zero(eltype(a)))`.
│   caller = brown_almost_linear(::Array{Float64,2}) at testfuncs.jl:253
└ @ DiffBase testfuncs.jl:253
┌ Warning: `zeros(a::AbstractArray)` is deprecated, consider `zero(a)`, `fill(0, size(a))`, `fill!(copy(a), 0)`, or `fill!(similar(a), 0)`. Where necessary, use `fill!(similar(a), zero(eltype(a)))`.
│   caller = brown_almost_linear(::Array{Float64,1}) at testfuncs.jl:253
└ @ DiffBase testfuncs.jl:253
┌ Warning: `ones(a::AbstractArray)` is deprecated, consider `fill(1, size(a))`, `fill!(copy(a), 1)`, or `fill!(similar(a), 1)`. Where necessary, use `fill!(similar(a), one(eltype(a)))`.
│   caller = trigonometric(::Array{Float64,2}) at testfuncs.jl:255
└ @ DiffBase testfuncs.jl:255
┌ Warning: `ones(a::AbstractArray)` is deprecated, consider `fill(1, size(a))`, `fill!(copy(a), 1)`, or `fill!(similar(a), 1)`. Where necessary, use `fill!(similar(a), one(eltype(a)))`.
│   caller = trigonometric(::Array{Float64,1}) at testfuncs.jl:255
└ @ DiffBase testfuncs.jl:255
┌ Warning: `zeros(a::AbstractArray)` is deprecated, consider `zero(a)`, `fill(0, size(a))`, `fill!(copy(a), 0)`, or `fill!(similar(a), 0)`. Where necessary, use `fill!(similar(a), zero(eltype(a)))`.
│   caller = arr2arr_1(::Array{Float64,2}) at testfuncs.jl:261
└ @ DiffBase testfuncs.jl:261
┌ Warning: `zeros(a::AbstractArray)` is deprecated, consider `zero(a)`, `fill(0, size(a))`, `fill!(copy(a), 0)`, or `fill!(similar(a), 0)`. Where necessary, use `fill!(similar(a), zero(eltype(a)))`.
│   caller = arr2arr_1(::Array{Float64,1}) at testfuncs.jl:261
└ @ DiffBase testfuncs.jl:261
┌ Warning: `zeros(a::AbstractArray)` is deprecated, consider `zero(a)`, `fill(0, size(a))`, `fill!(copy(a), 0)`, or `fill!(similar(a), 0)`. Where necessary, use `fill!(similar(a), zero(eltype(a)))`.
│   caller = mutation_test_1(::Array{Float64,2}) at testfuncs.jl:257
└ @ DiffBase testfuncs.jl:257
┌ Warning: `zeros(a::AbstractArray)` is deprecated, consider `zero(a)`, `fill(0, size(a))`, `fill!(copy(a), 0)`, or `fill!(similar(a), 0)`. Where necessary, use `fill!(similar(a), zero(eltype(a)))`.
│   caller = mutation_test_1(::Array{Float64,1}) at testfuncs.jl:257
└ @ DiffBase testfuncs.jl:257
┌ Warning: `ones(a::AbstractArray)` is deprecated, consider `fill(1, size(a))`, `fill!(copy(a), 1)`, or `fill!(similar(a), 1)`. Where necessary, use `fill!(similar(a), one(eltype(a)))`.
│   caller = mutation_test_2(::Array{Float64,2}) at testfuncs.jl:259
└ @ DiffBase testfuncs.jl:259
┌ Warning: `ones(a::AbstractArray)` is deprecated, consider `fill(1, size(a))`, `fill!(copy(a), 1)`, or `fill!(similar(a), 1)`. Where necessary, use `fill!(similar(a), one(eltype(a)))`.
│   caller = mutation_test_2(::Array{Float64,1}) at testfuncs.jl:259
└ @ DiffBase testfuncs.jl:259
┌ Warning: `A_mul_Bt(A::AbstractMatrix{T}, B::AbstractMatrix{S}) where {T, S}` is deprecated, use `A * Transpose(B)` instead.
│   caller = top-level scope at <missing>:44
└ @ Core <missing>:44
┌ Warning: `At_mul_B(A::AbstractMatrix{T}, B::AbstractMatrix{S}) where {T, S}` is deprecated, use `Transpose(A) * B` instead.
│   caller = top-level scope at <missing>:44
└ @ Core <missing>:44
┌ Warning: `At_mul_Bt(A::AbstractMatrix{T}, B::AbstractVecOrMat{S}) where {T, S}` is deprecated, use `Transpose(A) * Transpose(B)` instead.
│   caller = top-level scope at <missing>:44
└ @ Core <missing>:44
┌ Warning: `A_mul_Bc(A::StridedMatrix{<:BlasFloat}, B::StridedMatrix{<:BlasReal})` is deprecated, use `A * Adjoint(B)` instead.
│   caller = top-level scope at <missing>:44
└ @ Core <missing>:44
┌ Warning: `Ac_mul_B(A::StridedMatrix{T}, B::StridedMatrix{T}) where T <: BlasReal` is deprecated, use `Adjoint(A) * B` instead.
│   caller = top-level scope at <missing>:44
└ @ Core <missing>:44
┌ Warning: `Ac_mul_Bc(A::AbstractMatrix{T}, B::AbstractMatrix{S}) where {T, S}` is deprecated, use `Adjoint(A) * Adjoint(B)` instead.
│   caller = top-level scope at <missing>:44
└ @ Core <missing>:44
WARNING: importing deprecated binding Base.Void into TestFuncTests.
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/DiffBase/test/TestFuncTests.jl:49
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/DiffBase/test/TestFuncTests.jl:49
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/DiffBase/test/TestFuncTests.jl:49
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/DiffBase/test/TestFuncTests.jl:49
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/DiffBase/test/TestFuncTests.jl:49
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/DiffBase/test/TestFuncTests.jl:49
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/DiffBase/test/TestFuncTests.jl:53
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/DiffBase/test/TestFuncTests.jl:53
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/DiffBase/test/TestFuncTests.jl:53
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/DiffBase/test/TestFuncTests.jl:53
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/DiffBase/test/TestFuncTests.jl:53
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/DiffBase/test/TestFuncTests.jl:53
WARNING: Base.Test is deprecated, run `using Test` instead.
  likely near /home/vagrant/.julia/v0.7/DiffBase/test/RulesTests.jl:1
[ Info: DiffBase tests passed @ Base.Pkg.Entry entry.jl:737
[ Info: Removing BinDeps v0.8.2 @ Base.Pkg.Entry entry.jl:546
[ Info: Removing RealInterface v0.0.3 @ Base.Pkg.Entry entry.jl:546
[ Info: Removing SHA v0.5.2 @ Base.Pkg.Entry entry.jl:546
[ Info: Removing SpecialFunctions v0.3.7 @ Base.Pkg.Entry entry.jl:546
[ Info: Removing URIParser v0.3.0 @ Base.Pkg.Entry entry.jl:546

>>> End of log
