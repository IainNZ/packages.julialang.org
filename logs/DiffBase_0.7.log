>>> 'Pkg.add("DiffBase")' log
[ Info: Installing DiffBase v0.3.2                 @ Base.Pkg.Entry entry.jl:543
[ Info: Installing StaticArrays v0.6.6             @ Base.Pkg.Entry entry.jl:543
[ Info: Package database updated                    @ Base.Pkg.Entry entry.jl:32
┌ Info: METADATA is out-of-date — you may not have the latest version of DiffBase
│ Use `Pkg.update()` to get the latest versions of your packages
└                                                   @ Base.Pkg.Entry entry.jl:74

>>> 'Pkg.test("DiffBase")' log
Julia Version 0.7.0-DEV.3354
Commit 9b5eed2b6c (2018-01-09 08:03 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
      Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-135-generic #184-Ubuntu SMP Wed Oct 18 11:55:51 UTC 2017 x86_64 x86_64
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
              speed         user         nice          sys         idle          irq
       #1  3500 MHz    3067284 s         63 s     153740 s    1043464 s         27 s
       #2  3500 MHz     860735 s       7025 s      70163 s    3928623 s          0 s
       
  Memory: 2.93927001953125 GB (1073.2734375 MB free)
  Uptime: 49840.0 sec
  Load Avg:  1.03076171875  1.0068359375  0.9814453125
  WORD_SIZE: 64
  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant
Packages:
  Package Directory: /home/vagrant/.julia/v0.7
  Package Status:
2 required packages:
 - DiffBase                      0.3.2
 - JSON                          0.16.3
3 additional packages:
 - Compat                        0.46.0
 - Nullables                     0.0.3
 - StaticArrays                  0.6.6
┌ Info: Computing test dependencies for DiffBase...
└                                                  @ Base.Pkg.Entry entry.jl:713
[ Info: Installing BinDeps v0.8.3                  @ Base.Pkg.Entry entry.jl:543
[ Info: Installing RealInterface v0.0.3            @ Base.Pkg.Entry entry.jl:543
[ Info: Installing SHA v0.5.3                      @ Base.Pkg.Entry entry.jl:543
[ Info: Installing SpecialFunctions v0.3.7         @ Base.Pkg.Entry entry.jl:543
[ Info: Installing URIParser v0.3.0                @ Base.Pkg.Entry entry.jl:543
[ Info: Building SpecialFunctions                                 @ Main none:10
WARNING: importing deprecated binding Base.Associative into BinDeps.
WARNING: Base.Associative is deprecated, use AbstractDict instead.
  likely near /home/vagrant/.julia/v0.7/SpecialFunctions/deps/binaries.jl:44
in @install at /home/vagrant/.julia/v0.7/BinDeps/src/dependencies.jl
┌ Error: ------------------------------------------------------------
│ # Build failed for SpecialFunctions
│   exception =
│    LoadError: LoadError: UndefVarError: pushfront! not defined
│    Stacktrace:
│     [1] #_find_library#48(::Type, ::Function, ::BinDeps.LibraryDependency) at /home/vagrant/.julia/v0.7/BinDeps/src/dependencies.jl:652
│     [2] _find_library at /home/vagrant/.julia/v0.7/BinDeps/src/dependencies.jl:641 [inlined]
│     [3] satisfy!(::BinDeps.LibraryDependency, ::Array{DataType,1}) at /home/vagrant/.julia/v0.7/BinDeps/src/dependencies.jl:920 (repeats 2 times)
│     [4] top-level scope at /home/vagrant/.julia/v0.7/BinDeps/src/dependencies.jl:975
│     [5] include at ./boot.jl:293 [inlined]
│     [6] include_relative(::Module, ::String) at ./loading.jl:521
│     [7] include at ./sysimg.jl:26 [inlined]
│     [8] include at ./loading.jl:555 [inlined]
│     [9] top-level scope at ./<missing>:31
│     [10] include at ./boot.jl:293 [inlined]
│     [11] include_relative(::Module, ::String) at ./loading.jl:521
│     [12] include at ./sysimg.jl:26 [inlined]
│     [13] include(::String) at ./loading.jl:555
│     [14] top-level scope
│     [15] eval at ./boot.jl:296 [inlined]
│     [16] eval at ./sysimg.jl:71 [inlined]
│     [17] evalfile(::String, ::Array{String,1}) at ./loading.jl:550 (repeats 2 times)
│     [18] #2 at ./none:12 [inlined]
│     [19] cd(::getfield(, Symbol("##2#5")){String}, ::String) at ./file.jl:70
│     [20] (::getfield(, Symbol("##1#3")))(::IOStream) at ./none:11
│     [21] open(::getfield(, Symbol("##1#3")), ::String, ::String) at ./iostream.jl:310
│     [22] top-level scope
│     [23] eval at ./boot.jl:296 [inlined]
│     [24] eval(::Module, ::Expr) at ./sysimg.jl:71
│     [25] process_options(::Base.JLOptions) at ./client.jl:301
│     [26] _start() at ./client.jl:375
│    in expression starting at /home/vagrant/.julia/v0.7/SpecialFunctions/deps/binaries.jl:975
│    in expression starting at /home/vagrant/.julia/v0.7/SpecialFunctions/deps/build.jl:6
└                                                                 @ Main none:15
┌ Warning: ------------------------------------------------------------
│ # Build error summary
│ 
│ SpecialFunctions had build errors.
│ 
│  - packages with build errors remain installed in /home/vagrant/.julia/v0.7
│  - build the package(s) and all dependencies with `Pkg.build("SpecialFunctions")`
│  - build a single package by running its `deps/build.jl` script
└                                                  @ Base.Pkg.Entry entry.jl:656
[ Info: Testing DiffBase                           @ Base.Pkg.Entry entry.jl:723
WARNING: Base.Test is deprecated, run `using Test` instead.
  likely near /home/vagrant/.julia/v0.7/DiffBase/test/ResultTests.jl:4
┌ Warning: `copy!(dst::AbstractArray, src::AbstractArray)` is deprecated. You can either use `copyto!(dst, src)` or `Future.copy!(dst, src)` instead.
│   caller = value!(::DiffBase.MutableDiffResult{2,Array{Float64,1},Tuple{Array{Float64,2},Array{Float64,3}}}, ::Array{Float64,1}) at results.jl:153
└                                                      @ DiffBase results.jl:153
┌ Warning: `copy!(dst::AbstractArray, src::AbstractArray)` is deprecated. You can either use `copyto!(dst, src)` or `Future.copy!(dst, src)` instead.
│   caller = derivative! at results.jl:195 [inlined]
└                                                          @ Core results.jl:195
┌ Warning: `copy!(dst::AbstractArray, src::AbstractArray)` is deprecated. You can either use `copyto!(dst, src)` or `Future.copy!(dst, src)` instead.
│   caller = derivative!(::DiffBase.MutableDiffResult{2,Array{Float64,1},Tuple{Array{Float64,2},Array{Float64,3}}}, ::Array{Float64,3}, ::Type{Val{2}}) at results.jl:195
└                                                      @ DiffBase results.jl:195
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #s168#236(::Tuple{Int64,Int64}, ::Type, ::Type, ::Type, ::Tuple{DataType}) at mapreduce.jl:20
└                                                 @ StaticArrays mapreduce.jl:20
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #s168#236(::Tuple{Int64}, ::Type, ::Type, ::Type, ::Tuple{DataType}) at mapreduce.jl:20
└                                                 @ StaticArrays mapreduce.jl:20
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = #s168#236(::Tuple{Int64,Int64,Int64}, ::Type, ::Type, ::Type, ::Tuple{DataType}) at mapreduce.jl:20
└                                                 @ StaticArrays mapreduce.jl:20
┌ Warning: `copy!(dst::AbstractArray, src::AbstractArray)` is deprecated. You can either use `copyto!(dst, src)` or `Future.copy!(dst, src)` instead.
│   caller = derivative! at results.jl:195 [inlined]
└                                                          @ Core results.jl:195
┌ Warning: `copy!(dst::AbstractArray, src::AbstractArray)` is deprecated. You can either use `copyto!(dst, src)` or `Future.copy!(dst, src)` instead.
│   caller = derivative! at results.jl:195 [inlined]
└                                                          @ Core results.jl:195
┌ Warning: `copy!(dst::AbstractArray, src::AbstractArray)` is deprecated. You can either use `copyto!(dst, src)` or `Future.copy!(dst, src)` instead.
│   caller = derivative! at results.jl:195 [inlined]
└                                                          @ Core results.jl:195
WARNING: Base.Test is deprecated, run `using Test` instead.
  likely near /home/vagrant/.julia/v0.7/DiffBase/test/TestFuncTests.jl:4
┌ Warning: `a::Number + b::AbstractArray` is deprecated, use `broadcast(+, a, b)` instead.
│   caller = rosenbrock_4(::Array{Float64,1}) at testfuncs.jl:90
└                                                     @ DiffBase testfuncs.jl:90
WARNING: importing deprecated binding Base.e into DiffBase.
WARNING: Base.e is deprecated, use ℯ (\euler) or `Base.MathConstants.e`.
  likely near /home/vagrant/.julia/v0.7/DiffBase/test/TestFuncTests.jl:16
WARNING: Base.e is deprecated, use ℯ (\euler) or `Base.MathConstants.e`.
  likely near /home/vagrant/.julia/v0.7/DiffBase/test/TestFuncTests.jl:16
WARNING: Base.e is deprecated, use ℯ (\euler) or `Base.MathConstants.e`.
  likely near /home/vagrant/.julia/v0.7/DiffBase/test/TestFuncTests.jl:16
┌ Warning: `zeros(a::AbstractArray)` is deprecated, consider `zero(a)`, `fill(0, size(a))`, `fill!(copy(a), 0)`, or `fill!(similar(a), 0)`. Where necessary, use `fill!(similar(a), zero(eltype(a)))`.
│   caller = chebyquad(::Array{Float64,2}) at testfuncs.jl:251
└                                                    @ DiffBase testfuncs.jl:251
┌ Warning: `zeros(a::AbstractArray)` is deprecated, consider `zero(a)`, `fill(0, size(a))`, `fill!(copy(a), 0)`, or `fill!(similar(a), 0)`. Where necessary, use `fill!(similar(a), zero(eltype(a)))`.
│   caller = chebyquad(::Array{Float64,1}) at testfuncs.jl:251
└                                                    @ DiffBase testfuncs.jl:251
┌ Warning: `zeros(a::AbstractArray)` is deprecated, consider `zero(a)`, `fill(0, size(a))`, `fill!(copy(a), 0)`, or `fill!(similar(a), 0)`. Where necessary, use `fill!(similar(a), zero(eltype(a)))`.
│   caller = brown_almost_linear(::Array{Float64,2}) at testfuncs.jl:253
└                                                    @ DiffBase testfuncs.jl:253
┌ Warning: `zeros(a::AbstractArray)` is deprecated, consider `zero(a)`, `fill(0, size(a))`, `fill!(copy(a), 0)`, or `fill!(similar(a), 0)`. Where necessary, use `fill!(similar(a), zero(eltype(a)))`.
│   caller = brown_almost_linear(::Array{Float64,1}) at testfuncs.jl:253
└                                                    @ DiffBase testfuncs.jl:253
┌ Warning: `ones(a::AbstractArray)` is deprecated, consider `fill(1, size(a))`, `fill!(copy(a), 1)`, or `fill!(similar(a), 1)`. Where necessary, use `fill!(similar(a), one(eltype(a)))`.
│   caller = trigonometric(::Array{Float64,2}) at testfuncs.jl:255
└                                                    @ DiffBase testfuncs.jl:255
┌ Warning: `ones(a::AbstractArray)` is deprecated, consider `fill(1, size(a))`, `fill!(copy(a), 1)`, or `fill!(similar(a), 1)`. Where necessary, use `fill!(similar(a), one(eltype(a)))`.
│   caller = trigonometric(::Array{Float64,1}) at testfuncs.jl:255
└                                                    @ DiffBase testfuncs.jl:255
┌ Warning: `zeros(a::AbstractArray)` is deprecated, consider `zero(a)`, `fill(0, size(a))`, `fill!(copy(a), 0)`, or `fill!(similar(a), 0)`. Where necessary, use `fill!(similar(a), zero(eltype(a)))`.
│   caller = arr2arr_1(::Array{Float64,2}) at testfuncs.jl:261
└                                                    @ DiffBase testfuncs.jl:261
┌ Warning: `zeros(a::AbstractArray)` is deprecated, consider `zero(a)`, `fill(0, size(a))`, `fill!(copy(a), 0)`, or `fill!(similar(a), 0)`. Where necessary, use `fill!(similar(a), zero(eltype(a)))`.
│   caller = arr2arr_1(::Array{Float64,1}) at testfuncs.jl:261
└                                                    @ DiffBase testfuncs.jl:261
┌ Warning: `zeros(a::AbstractArray)` is deprecated, consider `zero(a)`, `fill(0, size(a))`, `fill!(copy(a), 0)`, or `fill!(similar(a), 0)`. Where necessary, use `fill!(similar(a), zero(eltype(a)))`.
│   caller = mutation_test_1(::Array{Float64,2}) at testfuncs.jl:257
└                                                    @ DiffBase testfuncs.jl:257
┌ Warning: `zeros(a::AbstractArray)` is deprecated, consider `zero(a)`, `fill(0, size(a))`, `fill!(copy(a), 0)`, or `fill!(similar(a), 0)`. Where necessary, use `fill!(similar(a), zero(eltype(a)))`.
│   caller = mutation_test_1(::Array{Float64,1}) at testfuncs.jl:257
└                                                    @ DiffBase testfuncs.jl:257
┌ Warning: `ones(a::AbstractArray)` is deprecated, consider `fill(1, size(a))`, `fill!(copy(a), 1)`, or `fill!(similar(a), 1)`. Where necessary, use `fill!(similar(a), one(eltype(a)))`.
│   caller = mutation_test_2(::Array{Float64,2}) at testfuncs.jl:259
└                                                    @ DiffBase testfuncs.jl:259
┌ Warning: `ones(a::AbstractArray)` is deprecated, consider `fill(1, size(a))`, `fill!(copy(a), 1)`, or `fill!(similar(a), 1)`. Where necessary, use `fill!(similar(a), one(eltype(a)))`.
│   caller = mutation_test_2(::Array{Float64,1}) at testfuncs.jl:259
└                                                    @ DiffBase testfuncs.jl:259
┌ Warning: `A_mul_Bt(A::AbstractMatrix{T}, B::AbstractMatrix{S}) where {T, S}` is deprecated, use `A * transpose(B)` instead.
│   caller = top-level scope at <missing>:44
└                                                            @ Core <missing>:44
┌ Warning: `At_mul_B(A::AbstractMatrix{T}, B::AbstractMatrix{S}) where {T, S}` is deprecated, use `transpose(A) * B` instead.
│   caller = top-level scope at <missing>:44
└                                                            @ Core <missing>:44
┌ Warning: `At_mul_Bt(A::AbstractMatrix{T}, B::AbstractVecOrMat{S}) where {T, S}` is deprecated, use `transpose(A) * transpose(B)` instead.
│   caller = top-level scope at <missing>:44
└                                                            @ Core <missing>:44
┌ Warning: `A_mul_Bc(A::StridedMatrix{<:BlasFloat}, B::StridedMatrix{<:BlasReal})` is deprecated, use `A * adjoint(B)` instead.
│   caller = top-level scope at <missing>:44
└                                                            @ Core <missing>:44
┌ Warning: `Ac_mul_B(A::StridedMatrix{T}, B::StridedMatrix{T}) where T <: BlasReal` is deprecated, use `adjoint(A) * B` instead.
│   caller = top-level scope at <missing>:44
└                                                            @ Core <missing>:44
┌ Warning: `Ac_mul_Bc(A::AbstractMatrix{T}, B::AbstractMatrix{S}) where {T, S}` is deprecated, use `adjoint(A) * adjoint(B)` instead.
│   caller = top-level scope at <missing>:44
└                                                            @ Core <missing>:44
WARNING: importing deprecated binding Base.Void into TestFuncTests.
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/DiffBase/test/TestFuncTests.jl:49
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/DiffBase/test/TestFuncTests.jl:49
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/DiffBase/test/TestFuncTests.jl:49
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/DiffBase/test/TestFuncTests.jl:49
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/DiffBase/test/TestFuncTests.jl:49
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/DiffBase/test/TestFuncTests.jl:49
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/DiffBase/test/TestFuncTests.jl:53
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/DiffBase/test/TestFuncTests.jl:53
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/DiffBase/test/TestFuncTests.jl:53
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/DiffBase/test/TestFuncTests.jl:53
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/DiffBase/test/TestFuncTests.jl:53
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/DiffBase/test/TestFuncTests.jl:53
WARNING: Base.Test is deprecated, run `using Test` instead.
  likely near /home/vagrant/.julia/v0.7/DiffBase/test/RulesTests.jl:1
ERROR: LoadError: SpecialFunctions is not properly installed. Please run Pkg.build("SpecialFunctions") and restart Julia.
Stacktrace:
 [1] error(::String) at ./error.jl:33
 [2] top-level scope at /home/vagrant/.julia/v0.7/SpecialFunctions/src/SpecialFunctions.jl:12
 [3] include at ./boot.jl:293 [inlined]
 [4] include_relative(::Module, ::String) at ./loading.jl:521
 [5] include(::Module, ::String) at ./sysimg.jl:26
 [6] top-level scope
 [7] eval at ./boot.jl:296 [inlined]
 [8] top-level scope at ./<missing>:2
in expression starting at /home/vagrant/.julia/v0.7/SpecialFunctions/src/SpecialFunctions.jl:12
ERROR: LoadError: LoadError: Failed to precompile SpecialFunctions to /home/vagrant/.julia/lib/v0.7/SpecialFunctions.ji.
Stacktrace:
 [1] error at ./error.jl:33 [inlined]
 [2] compilecache(::String) at ./loading.jl:648
 [3] compilecache at ./loading.jl:605 [inlined]
 [4] _require(::Symbol) at ./loading.jl:460
 [5] require(::Symbol) at ./loading.jl:333
 [6] include at ./boot.jl:293 [inlined]
 [7] include_relative(::Module, ::String) at ./loading.jl:521
 [8] include(::Module, ::String) at ./sysimg.jl:26
 [9] include(::String) at ./sysimg.jl:65
 [10] top-level scope
 [11] include at ./boot.jl:293 [inlined]
 [12] include_relative(::Module, ::String) at ./loading.jl:521
 [13] include(::Module, ::String) at ./sysimg.jl:26
 [14] process_options(::Base.JLOptions) at ./client.jl:324
 [15] _start() at ./client.jl:375
in expression starting at /home/vagrant/.julia/v0.7/DiffBase/test/RulesTests.jl:3
in expression starting at /home/vagrant/.julia/v0.7/DiffBase/test/runtests.jl:3
┌ Error: ------------------------------------------------------------
│ # Testing failed for DiffBase
│   exception =
│    failed process: Process(`/home/vagrant/julia/bin/julia -Cnative -J/home/vagrant/julia/lib/julia/sys.so --compile=yes --depwarn=yes --code-coverage=none --color=no --compiled-modules=yes --check-bounds=yes --warn-overwrite=yes --startup-file=yes /home/vagrant/.julia/v0.7/DiffBase/test/runtests.jl`, ProcessExited(1)) [1]
│    Stacktrace:
│     [1] error(::String, ::Base.Process, ::String, ::Int64, ::String) at ./error.jl:42
│     [2] pipeline_error(::Base.Process) at ./process.jl:707
│     [3] run(::Cmd) at ./process.jl:669
│     [4] (::getfield(Base.Pkg.Entry, Symbol("##91#94")){Bool,String,Array{AbstractString,1}})() at ./pkg/entry.jl:736
│     [5] cd(::getfield(Base.Pkg.Entry, Symbol("##91#94")){Bool,String,Array{AbstractString,1}}, ::String) at ./file.jl:70
│     [6] #test!#90(::Bool, ::Function, ::String, ::Array{AbstractString,1}, ::Array{AbstractString,1}, ::Array{AbstractString,1}) at ./pkg/entry.jl:724
│     [7] (::getfield(Base.Pkg.Entry, Symbol("#kw##test!")))(::NamedTuple{(:coverage,),Tuple{Bool}}, ::typeof(Base.Pkg.Entry.test!), ::String, ::Array{AbstractString,1}, ::Array{AbstractString,1}, ::Array{AbstractString,1}) at ./<missing>:0
│     [8] #test#98(::Bool, ::Function, ::Array{AbstractString,1}) at ./pkg/entry.jl:763
│     [9] (::getfield(Base.Pkg.Entry, Symbol("#kw##test")))(::NamedTuple{(:coverage,),Tuple{Bool}}, ::typeof(Base.Pkg.Entry.test), ::Array{AbstractString,1}) at ./<missing>:0
│     [10] (::getfield(Base.Pkg.Dir, Symbol("##4#7")){Base.Iterators.IndexValue{Symbol,Bool,Tuple{Symbol},NamedTuple{(:coverage,),Tuple{Bool}}},typeof(Base.Pkg.Entry.test),Tuple{Array{AbstractString,1}}})() at ./pkg/dir.jl:36
│     [11] cd(::getfield(Base.Pkg.Dir, Symbol("##4#7")){Base.Iterators.IndexValue{Symbol,Bool,Tuple{Symbol},NamedTuple{(:coverage,),Tuple{Bool}}},typeof(Base.Pkg.Entry.test),Tuple{Array{AbstractString,1}}}, ::String) at ./file.jl:70
│     [12] #cd#1(::Base.Iterators.IndexValue{Symbol,Bool,Tuple{Symbol},NamedTuple{(:coverage,),Tuple{Bool}}}, ::Function, ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N} where N) at ./pkg/dir.jl:36
│     [13] (::getfield(Base.Pkg.Dir, Symbol("#kw##cd")))(::NamedTuple{(:coverage,),Tuple{Bool}}, ::typeof(Base.Pkg.Dir.cd), ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N} where N) at ./<missing>:0
│     [14] #test#3(::Bool, ::Function, ::String, ::Vararg{String,N} where N) at ./pkg/pkg.jl:274
│     [15] test(::String, ::Vararg{String,N} where N) at ./pkg/pkg.jl:274
│     [16] top-level scope
│     [17] eval at ./boot.jl:296 [inlined]
│     [18] eval(::Module, ::Expr) at ./sysimg.jl:71
│     [19] process_options(::Base.JLOptions) at ./client.jl:301
│     [20] _start() at ./client.jl:375
└                                                  @ Base.Pkg.Entry entry.jl:739
[ Info: Removing BinDeps v0.8.3                    @ Base.Pkg.Entry entry.jl:546
[ Info: Removing RealInterface v0.0.3              @ Base.Pkg.Entry entry.jl:546
[ Info: Removing SHA v0.5.3                        @ Base.Pkg.Entry entry.jl:546
[ Info: Removing SpecialFunctions v0.3.7           @ Base.Pkg.Entry entry.jl:546
[ Info: Removing URIParser v0.3.0                  @ Base.Pkg.Entry entry.jl:546
ERROR: DiffBase had test errors

>>> End of log
