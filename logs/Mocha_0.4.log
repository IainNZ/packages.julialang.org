>>> 'Pkg.add("Mocha")' log
INFO: Cloning cache of Mocha from git://github.com/pluskid/Mocha.jl.git
INFO: Installing BinDeps v0.4.7
INFO: Installing Blosc v0.2.0
INFO: Installing FileIO v0.2.2
INFO: Installing HDF5 v0.7.3
INFO: Installing JLD v0.6.10
INFO: Installing LegacyStrings v0.2.1
INFO: Installing Logging v0.3.1
INFO: Installing Mocha v0.1.2
INFO: Installing SHA v0.3.2
INFO: Installing URIParser v0.1.8
INFO: Building Blosc
INFO: Building HDF5
INFO: Building Mocha
Running `g++ -fPIC -Wall -O3 -shared -fopenmp -o libmochaext.so im2col.cpp pooling.cpp`
INFO: Package database updated

>>> 'Pkg.test("Mocha")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-117-generic #164-Ubuntu SMP Fri Apr 7 11:05:26 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (781.40234375 MB free)
Uptime: 11505.0 sec
Load Avg:  0.95849609375  0.9853515625  0.9736328125
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz     511847 s       5054 s      50866 s     470302 s         20 s
#2  3500 MHz     353616 s       1942 s      44044 s     709441 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.9.1
 - Mocha                         0.1.2
10 additional packages:
 - BinDeps                       0.4.7
 - Blosc                         0.2.0
 - Compat                        0.24.0
 - FileIO                        0.2.2
 - HDF5                          0.7.3
 - JLD                           0.6.10
 - LegacyStrings                 0.2.1
 - Logging                       0.3.1
 - SHA                           0.3.2
 - URIParser                     0.1.8
INFO: Testing Mocha
WARNING: Method definition warn(Any...) in module Base at util.jl:364 overwritten in module Logging at /home/vagrant/.julia/v0.4/Logging/src/Logging.jl:115.
WARNING: Method definition info(Any...) in module Base at util.jl:334 overwritten in module Logging at /home/vagrant/.julia/v0.4/Logging/src/Logging.jl:115.
Configuring Mocha...
 * CUDA       disabled by default
 * Native Ext disabled by default
Mocha configured, continue loading module...
DefaultBackend = Mocha.CPUBackend
-- Testing simple Adam solver call
30-Apr 07:32:52:INFO:root:Constructing net TEST on Mocha.CPUBackend...
30-Apr 07:32:52:INFO:root:Topological sorting 4 layers...
30-Apr 07:32:52:INFO:root:Setup layers...
30-Apr 07:32:52:INFO:root:Network constructed!
30-Apr 07:32:53:DEBUG:root:#DEBUG Checking network topology for back-propagation
30-Apr 07:32:53:DEBUG:root:Init network TEST
30-Apr 07:32:53:DEBUG:root:Init parameter weight for layer ip1
30-Apr 07:32:53:DEBUG:root:Init parameter bias for layer ip1
30-Apr 07:32:53:DEBUG:root:Init parameter weight for layer ip2
30-Apr 07:32:53:DEBUG:root:Init parameter bias for layer ip2
30-Apr 07:32:54:DEBUG:root:#DEBUG Initializing coffee breaks
30-Apr 07:32:54:DEBUG:root:#DEBUG Entering solver loop
30-Apr 07:32:54:DEBUG:root:Destroying network TEST
-- Testing simple SGD solver call
30-Apr 07:32:54:INFO:root:Constructing net TEST on Mocha.CPUBackend...
30-Apr 07:32:54:INFO:root:Topological sorting 4 layers...
30-Apr 07:32:54:INFO:root:Setup layers...
30-Apr 07:32:54:INFO:root:Network constructed!
30-Apr 07:32:54:DEBUG:root:#DEBUG Checking network topology for back-propagation
30-Apr 07:32:54:DEBUG:root:Init network TEST
30-Apr 07:32:54:DEBUG:root:Init parameter weight for layer ip1
30-Apr 07:32:54:DEBUG:root:Init parameter bias for layer ip1
30-Apr 07:32:54:DEBUG:root:Init parameter weight for layer ip2
30-Apr 07:32:54:DEBUG:root:Init parameter bias for layer ip2
30-Apr 07:32:54:DEBUG:root:#DEBUG Initializing coffee breaks
30-Apr 07:32:54:DEBUG:root:#DEBUG Entering solver loop
30-Apr 07:32:55:DEBUG:root:Destroying network TEST
-- Testing network topology with duplicated blobs
30-Apr 07:32:55:INFO:root:Constructing net net on Mocha.CPUBackend...
30-Apr 07:32:55:INFO:root:Topological sorting 1 layers...
30-Apr 07:32:55:INFO:root:Constructing net net on Mocha.CPUBackend...
30-Apr 07:32:55:INFO:root:Topological sorting 2 layers...
-- Testing network topology with missing blobs
30-Apr 07:32:55:INFO:root:Constructing net net on Mocha.CPUBackend...
30-Apr 07:32:55:INFO:root:Topological sorting 1 layers...
-- Testing network topology with circular dependency
30-Apr 07:32:55:INFO:root:Constructing net net on Mocha.CPUBackend...
30-Apr 07:32:55:INFO:root:Topological sorting 2 layers...
-- Testing network topology with multiple back-propagate path
    > Good blob sharing
30-Apr 07:32:55:INFO:root:Constructing net net on Mocha.CPUBackend...
30-Apr 07:32:55:INFO:root:Topological sorting 5 layers...
30-Apr 07:32:55:INFO:root:Setup layers...
30-Apr 07:32:56:INFO:root:Network constructed!
30-Apr 07:32:56:DEBUG:root:Destroying network net
    > Bad blob sharing
30-Apr 07:32:56:INFO:root:Constructing net net on Mocha.CPUBackend...
30-Apr 07:32:56:INFO:root:Topological sorting 6 layers...
30-Apr 07:32:56:INFO:root:Setup layers...
30-Apr 07:32:56:INFO:root:Network constructed!
-- Testing network topology with dangling blob
    > Good case
30-Apr 07:32:56:INFO:root:Constructing net net on Mocha.CPUBackend...
30-Apr 07:32:56:INFO:root:Topological sorting 4 layers...
30-Apr 07:32:56:INFO:root:Setup layers...
30-Apr 07:32:56:INFO:root:Network constructed!
30-Apr 07:32:56:DEBUG:root:Destroying network net
    > Bad case
30-Apr 07:32:56:INFO:root:Constructing net net on Mocha.CPUBackend...
30-Apr 07:32:56:INFO:root:Topological sorting 4 layers...
30-Apr 07:32:56:INFO:root:Setup layers...
30-Apr 07:32:56:INFO:root:Network constructed!
30-Apr 07:32:56:DEBUG:root:Destroying network net
    > Good case 2
30-Apr 07:32:56:INFO:root:Constructing net net on Mocha.CPUBackend...
30-Apr 07:32:56:INFO:root:Topological sorting 5 layers...
30-Apr 07:32:56:INFO:root:Setup layers...
30-Apr 07:32:56:INFO:root:Network constructed!
30-Apr 07:32:56:DEBUG:root:Destroying network net
    > Bad case 2
30-Apr 07:32:57:INFO:root:Constructing net net on Mocha.CPUBackend...
30-Apr 07:32:57:INFO:root:Topological sorting 6 layers...
30-Apr 07:32:57:INFO:root:Setup layers...
30-Apr 07:32:57:INFO:root:Network constructed!
30-Apr 07:32:57:DEBUG:root:Destroying network net
-- Testing gradients on simple network (example for gradient checking code)
30-Apr 07:32:57:INFO:root:Constructing net TEST on Mocha.CPUBackend...
30-Apr 07:32:57:INFO:root:Topological sorting 4 layers...
30-Apr 07:32:57:INFO:root:Setup layers...
30-Apr 07:32:57:INFO:root:Network constructed!
-- Testing simple reference counting...
-- Testing glob Utilities
-- Testing RawBLAS{Float32} Utilities
-- Testing RawBLAS{Float64} Utilities
-- Testing blob reshape on Mocha.CPUBackend{Float32}...
-- Testing blob reshape on Mocha.CPUBackend{Float64}...
-- Testing ReLU neuron on Mocha.CPUBackend{Float32}...
    > Forward
    > Backward
-- Testing ReLU neuron on Mocha.CPUBackend{Float64}...
    > Forward
    > Backward
-- Testing Sigmoid neuron on Mocha.CPUBackend{Float32}...
    > Forward
    > Backward
-- Testing Sigmoid neuron on Mocha.CPUBackend{Float64}...
    > Forward
    > Backward
-- Testing Tanh neuron on Mocha.CPUBackend{Float32}...
    > Forward
    > Backward
-- Testing Tanh neuron on Mocha.CPUBackend{Float64}...
    > Forward
    > Backward
-- Testing Exponential neuron on Mocha.CPUBackend{Float32}...
    > Forward
    > Backward
-- Testing Exponential neuron on Mocha.CPUBackend{Float64}...
    > Forward
    > Backward
-- Testing L2 regularizer on Mocha.CPUBackend{Float32}...
-- Testing L2 regularizer on Mocha.CPUBackend{Float64}...
-- Testing L1 regularizer on Mocha.CPUBackend{Float32}...
-- Testing L1 regularizer on Mocha.CPUBackend{Float64}...
-- Testing L2 constraint on Mocha.CPUBackend{Float32}...
-- Testing L2 constraint on Mocha.CPUBackend{Float64}...
-- Testing DataTransformers on Mocha.CPUBackend{Float32}...
    > SubMean
    > Scale
-- Testing DataTransformers on Mocha.CPUBackend{Float64}...
    > SubMean
    > Scale
-- Testing TiedInnerProductLayer on Mocha.CPUBackend{Float32}...
    > Setup
30-Apr 07:33:05:INFO:root:Constructing net test-tied-ip on Mocha.CPUBackend...
30-Apr 07:33:05:INFO:root:Topological sorting 3 layers...
30-Apr 07:33:05:INFO:root:Setup layers...
30-Apr 07:33:05:INFO:root:Network constructed!
30-Apr 07:33:05:DEBUG:root:Init network test-tied-ip
30-Apr 07:33:05:DEBUG:root:Init parameter weight for layer ip1
30-Apr 07:33:05:DEBUG:root:Init parameter bias for layer ip1
30-Apr 07:33:05:DEBUG:root:Init parameter bias for layer ip2
    > Forward
    > Backward
30-Apr 07:33:05:DEBUG:root:Destroying network test-tied-ip
-- Testing TiedInnerProductLayer on Mocha.CPUBackend{Float64}...
    > Setup
30-Apr 07:33:05:INFO:root:Constructing net test-tied-ip on Mocha.CPUBackend...
30-Apr 07:33:05:INFO:root:Topological sorting 3 layers...
30-Apr 07:33:05:INFO:root:Setup layers...
30-Apr 07:33:05:INFO:root:Network constructed!
30-Apr 07:33:05:DEBUG:root:Init network test-tied-ip
30-Apr 07:33:05:DEBUG:root:Init parameter weight for layer ip1
30-Apr 07:33:05:DEBUG:root:Init parameter bias for layer ip1
30-Apr 07:33:05:DEBUG:root:Init parameter bias for layer ip2
    > Forward
    > Backward
30-Apr 07:33:05:DEBUG:root:Destroying network test-tied-ip
-- Testing RandomMask on Mocha.CPUBackend{Float64}
    > 3 input blobs with tensor dims [3,2,2]
    > Setup
    > Forward
    > Backward
-- Testing RandomMask on Mocha.CPUBackend{Float32}
    > 3 input blobs with tensor dims [2,6,4]
    > Setup
    > Forward
    > Backward
-- Testing Pooling(Mocha.Pooling.Max)  on Mocha.CPUBackend{Float64}...
    > Setup
    > Forward
    > Backward
-- Testing Pooling(Mocha.Pooling.Mean)  on Mocha.CPUBackend{Float64}...
    > Setup
    > Forward
    > Backward
-- Testing Pooling(Mocha.Pooling.Max) with padding on Mocha.CPUBackend{Float64}...
    > Setup
    > Forward
    > Backward
-- Testing Pooling(Mocha.Pooling.Mean) with padding on Mocha.CPUBackend{Float64}...
    > Setup
    > Forward
    > Backward
-- Testing Pooling(Mocha.Pooling.Max)  on Mocha.CPUBackend{Float32}...
    > Setup
    > Forward
    > Backward
-- Testing Pooling(Mocha.Pooling.Mean)  on Mocha.CPUBackend{Float32}...
    > Setup
    > Forward
    > Backward
-- Testing Pooling(Mocha.Pooling.Max) with padding on Mocha.CPUBackend{Float32}...
    > Setup
    > Forward
    > Backward
-- Testing Pooling(Mocha.Pooling.Mean) with padding on Mocha.CPUBackend{Float32}...
    > Setup
    > Forward
    > Backward
-- Testing HingeLossLayer on Mocha.CPUBackend{Float32}...
    > (8,10,7,7,8)
-- Testing HingeLossLayer on Mocha.CPUBackend{Float64}...
    > (6,8,11)
-- Testing  HDF5 Data Layer on Mocha.CPUBackend{Float32}...
    > (8,3,3,6)
-- Testing (Async) HDF5 Data Layer on Mocha.CPUBackend{Float32}...
    > (8,)
30-Apr 07:33:19:INFO:root:AsyncHDF5DataLayer: Stopping IO task...
30-Apr 07:33:19:INFO:root:AsyncHDF5DataLayer: IO Task reaching the end...
-- Testing  HDF5 Data Layer on Mocha.CPUBackend{Float64}...
    > (1,2,2,3)
-- Testing (Async) HDF5 Data Layer on Mocha.CPUBackend{Float64}...
    > (4,5)
30-Apr 07:33:20:INFO:root:AsyncHDF5DataLayer: Stopping IO task...
30-Apr 07:33:20:INFO:root:AsyncHDF5DataLayer: IO Task reaching the end...
-- Testing  HDF5 Data Layer (shuffle,n=6,b=4) on Mocha.CPUBackend{Float32}...
-- Testing (Async) HDF5 Data Layer (shuffle,n=6,b=4) on Mocha.CPUBackend{Float32}...
30-Apr 07:33:21:INFO:root:AsyncHDF5DataLayer: Stopping IO task...
30-Apr 07:33:21:INFO:root:AsyncHDF5DataLayer: IO Task reaching the end...
-- Testing  HDF5 Data Layer (shuffle,n=4,b=6) on Mocha.CPUBackend{Float32}...
-- Testing (Async) HDF5 Data Layer (shuffle,n=4,b=6) on Mocha.CPUBackend{Float32}...
30-Apr 07:33:21:INFO:root:AsyncHDF5DataLayer: Stopping IO task...
30-Apr 07:33:21:INFO:root:AsyncHDF5DataLayer: IO Task reaching the end...
-- Testing  HDF5 Data Layer (shuffle,n=6,b=4) on Mocha.CPUBackend{Float64}...
-- Testing (Async) HDF5 Data Layer (shuffle,n=6,b=4) on Mocha.CPUBackend{Float64}...
30-Apr 07:33:21:INFO:root:AsyncHDF5DataLayer: Stopping IO task...
30-Apr 07:33:21:INFO:root:AsyncHDF5DataLayer: IO Task reaching the end...
-- Testing  HDF5 Data Layer (shuffle,n=4,b=6) on Mocha.CPUBackend{Float64}...
-- Testing (Async) HDF5 Data Layer (shuffle,n=4,b=6) on Mocha.CPUBackend{Float64}...
WARNING: data not shuffled, is today a lucky day or is there a bug?
30-Apr 07:33:21:INFO:root:AsyncHDF5DataLayer: Stopping IO task...
30-Apr 07:33:21:INFO:root:AsyncHDF5DataLayer: IO Task reaching the end...
-- Testing ChannelPooling(Mocha.Pooling.Max) on Mocha.CPUBackend{Float32}...
    > Setup (pool along dimension 1 for 2-D tensors)
    > Forward
    > Backward
-- Testing ChannelPooling(Mocha.Pooling.Max) on Mocha.CPUBackend{Float32}...
    > Setup (pool along dimension 2 for 3-D tensors)
    > Forward
    > Backward
-- Testing ChannelPooling(Mocha.Pooling.Max) on Mocha.CPUBackend{Float32}...
    > Setup (pool along dimension 1 for 4-D tensors)
    > Forward
    > Backward
-- Testing ChannelPooling(Mocha.Pooling.Max) on Mocha.CPUBackend{Float32}...
    > Setup (pool along dimension 1 for 5-D tensors)
    > Forward
    > Backward
-- Testing ChannelPooling(Mocha.Pooling.Max) on Mocha.CPUBackend{Float32}...
    > Setup (pool along dimension 4 for 6-D tensors)
    > Forward
    > Backward
-- Testing ChannelPooling(Mocha.Pooling.Mean) on Mocha.CPUBackend{Float32}...
    > Setup (pool along dimension 1 for 2-D tensors)
    > Forward
    > Backward
-- Testing ChannelPooling(Mocha.Pooling.Mean) on Mocha.CPUBackend{Float32}...
    > Setup (pool along dimension 1 for 3-D tensors)
    > Forward
    > Backward
-- Testing ChannelPooling(Mocha.Pooling.Mean) on Mocha.CPUBackend{Float32}...
    > Setup (pool along dimension 1 for 4-D tensors)
    > Forward
    > Backward
-- Testing ChannelPooling(Mocha.Pooling.Mean) on Mocha.CPUBackend{Float32}...
    > Setup (pool along dimension 1 for 5-D tensors)
    > Forward
    > Backward
-- Testing ChannelPooling(Mocha.Pooling.Mean) on Mocha.CPUBackend{Float32}...
    > Setup (pool along dimension 5 for 6-D tensors)
    > Forward
    > Backward
-- Testing ChannelPooling(Mocha.Pooling.Max) on Mocha.CPUBackend{Float64}...
    > Setup (pool along dimension 1 for 2-D tensors)
    > Forward
    > Backward
-- Testing ChannelPooling(Mocha.Pooling.Max) on Mocha.CPUBackend{Float64}...
    > Setup (pool along dimension 1 for 3-D tensors)
    > Forward
    > Backward
-- Testing ChannelPooling(Mocha.Pooling.Max) on Mocha.CPUBackend{Float64}...
    > Setup (pool along dimension 3 for 4-D tensors)
    > Forward
    > Backward
-- Testing ChannelPooling(Mocha.Pooling.Max) on Mocha.CPUBackend{Float64}...
    > Setup (pool along dimension 2 for 5-D tensors)
    > Forward
    > Backward
-- Testing ChannelPooling(Mocha.Pooling.Max) on Mocha.CPUBackend{Float64}...
    > Setup (pool along dimension 2 for 6-D tensors)
    > Forward
    > Backward
-- Testing ChannelPooling(Mocha.Pooling.Mean) on Mocha.CPUBackend{Float64}...
    > Setup (pool along dimension 1 for 2-D tensors)
    > Forward
    > Backward
-- Testing ChannelPooling(Mocha.Pooling.Mean) on Mocha.CPUBackend{Float64}...
    > Setup (pool along dimension 1 for 3-D tensors)
    > Forward
    > Backward
-- Testing ChannelPooling(Mocha.Pooling.Mean) on Mocha.CPUBackend{Float64}...
    > Setup (pool along dimension 1 for 4-D tensors)
    > Forward
    > Backward
-- Testing ChannelPooling(Mocha.Pooling.Mean) on Mocha.CPUBackend{Float64}...
    > Setup (pool along dimension 2 for 5-D tensors)
    > Forward
    > Backward
-- Testing ChannelPooling(Mocha.Pooling.Mean) on Mocha.CPUBackend{Float64}...
    > Setup (pool along dimension 1 for 6-D tensors)
    > Forward
    > Backward
-- Testing SquareLossLayer on Mocha.CPUBackend{Float32}...
    > (6,6,11)
-- Testing SquareLossLayer on Mocha.CPUBackend{Float64}...
    > (8,10,11,7)
-- Testing SplitLayer on Mocha.CPUBackend{Float32}...
    > Setup
    > Forward
    > Backward
-- Testing SplitLayer on Mocha.CPUBackend{Float64}...
    > Setup
    > Forward
    > Backward
-- Testing SoftmaxLossLayer on Mocha.CPUBackend{Float64} ...
    > (11,9) (operate on dimension 1)
    > Forward
    > Backward
-- Testing SoftmaxLossLayer on Mocha.CPUBackend{Float64} ...
    > (8,7,6,8) (operate on dimension 1)
    > Forward
    > Backward
-- Testing SoftmaxLossLayer on Mocha.CPUBackend{Float64} ...
    > (9,7,11,9,10) (operate on dimension 4)
    > Forward
    > Backward
-- Testing SoftmaxLossLayer on Mocha.CPUBackend{Float64} (with weights)...
    > (9,10) (operate on dimension 1)
    > Forward
    > Backward
-- Testing SoftmaxLossLayer on Mocha.CPUBackend{Float64} (with weights)...
    > (7,9,11,11) (operate on dimension 3)
    > Forward
    > Backward
-- Testing SoftmaxLossLayer on Mocha.CPUBackend{Float64} (with weights)...
    > (10,10,9,10,11) (operate on dimension 4)
    > Forward
    > Backward
-- Testing SoftmaxLossLayer on Mocha.CPUBackend{Float32} ...
    > (10,6) (operate on dimension 1)
    > Forward
    > Backward
-- Testing SoftmaxLossLayer on Mocha.CPUBackend{Float32} ...
    > (8,6,6,7) (operate on dimension 2)
    > Forward
    > Backward
-- Testing SoftmaxLossLayer on Mocha.CPUBackend{Float32} ...
    > (10,7,6,9,11) (operate on dimension 3)
    > Forward
    > Backward
-- Testing SoftmaxLossLayer on Mocha.CPUBackend{Float32} (with weights)...
    > (11,7) (operate on dimension 1)
    > Forward
    > Backward
-- Testing SoftmaxLossLayer on Mocha.CPUBackend{Float32} (with weights)...
    > (6,6,10,11) (operate on dimension 3)
    > Forward
    > Backward
-- Testing SoftmaxLossLayer on Mocha.CPUBackend{Float32} (with weights)...
    > (10,10,8,9,6) (operate on dimension 4)
    > Forward
    > Backward
-- Testing SoftmaxLayer on Mocha.CPUBackend{Float64}...
    > 2-dimensional input, normalize along dimension 1
    > Forward
    > Backward
-- Testing SoftmaxLayer on Mocha.CPUBackend{Float64}...
    > 4-dimensional input, normalize along dimension 2
    > Forward
    > Backward
-- Testing SoftmaxLayer on Mocha.CPUBackend{Float64}...
    > 5-dimensional input, normalize along dimension 4
    > Forward
    > Backward
-- Testing SoftmaxLayer on Mocha.CPUBackend{Float32}...
    > 2-dimensional input, normalize along dimension 1
    > Forward
    > Backward
-- Testing SoftmaxLayer on Mocha.CPUBackend{Float32}...
    > 4-dimensional input, normalize along dimension 2
    > Forward
    > Backward
-- Testing SoftmaxLayer on Mocha.CPUBackend{Float32}...
    > 5-dimensional input, normalize along dimension 3
    > Forward
    > Backward
-- Testing SoftlabelSoftmaxLossLayer on Mocha.CPUBackend{Float64}...
    > (7,8) (operate on dimension 1)
    > Forward
    > Backward
-- Testing SoftlabelSoftmaxLossLayer on Mocha.CPUBackend{Float64}...
    > (7,8,10,10) (operate on dimension 3)
    > Forward
    > Backward
-- Testing SoftlabelSoftmaxLossLayer on Mocha.CPUBackend{Float64}...
    > (10,6,11,11,8) (operate on dimension 2)
    > Forward
    > Backward
-- Testing SoftlabelSoftmaxLossLayer on Mocha.CPUBackend{Float32}...
    > (8,6) (operate on dimension 1)
    > Forward
    > Backward
-- Testing SoftlabelSoftmaxLossLayer on Mocha.CPUBackend{Float32}...
    > (9,10,8,9) (operate on dimension 1)
    > Forward
    > Backward
-- Testing SoftlabelSoftmaxLossLayer on Mocha.CPUBackend{Float32}...
    > (7,6,8,10,9) (operate on dimension 3)
    > Forward
    > Backward
-- Testing convolution layer with shared param on Mocha.CPUBackend{Float64}...
30-Apr 07:34:08:INFO:root:Constructing net test-shared-params on Mocha.CPUBackend...
30-Apr 07:34:08:INFO:root:Topological sorting 5 layers...
30-Apr 07:34:08:INFO:root:Setup layers...
30-Apr 07:34:08:DEBUG:root:ConvolutionLayer(conv2): sharing filters and bias
30-Apr 07:34:08:INFO:root:Network constructed!
30-Apr 07:34:08:DEBUG:root:Init network test-shared-params
30-Apr 07:34:08:DEBUG:root:Init parameter filter for layer conv1
30-Apr 07:34:08:DEBUG:root:Init parameter bias for layer conv1
30-Apr 07:34:09:DEBUG:root:Destroying network test-shared-params
-- Testing inner-product layer with shared param on Mocha.CPUBackend{Float64}...
30-Apr 07:34:09:INFO:root:Constructing net test-shared-params on Mocha.CPUBackend...
30-Apr 07:34:09:INFO:root:Topological sorting 5 layers...
30-Apr 07:34:09:INFO:root:Setup layers...
30-Apr 07:34:09:DEBUG:root:InnerProductLayer(ip2): sharing weights and bias
30-Apr 07:34:09:INFO:root:Network constructed!
30-Apr 07:34:09:DEBUG:root:Init network test-shared-params
30-Apr 07:34:09:DEBUG:root:Init parameter weight for layer ip1
30-Apr 07:34:09:DEBUG:root:Init parameter bias for layer ip1
30-Apr 07:34:09:DEBUG:root:Destroying network test-shared-params
-- Testing convolution layer with shared param on Mocha.CPUBackend{Float32}...
30-Apr 07:34:09:INFO:root:Constructing net test-shared-params on Mocha.CPUBackend...
30-Apr 07:34:09:INFO:root:Topological sorting 5 layers...
30-Apr 07:34:09:INFO:root:Setup layers...
30-Apr 07:34:09:DEBUG:root:ConvolutionLayer(conv2): sharing filters and bias
30-Apr 07:34:09:INFO:root:Network constructed!
30-Apr 07:34:09:DEBUG:root:Init network test-shared-params
30-Apr 07:34:09:DEBUG:root:Init parameter filter for layer conv1
30-Apr 07:34:09:DEBUG:root:Init parameter bias for layer conv1
30-Apr 07:34:09:DEBUG:root:Destroying network test-shared-params
-- Testing inner-product layer with shared param on Mocha.CPUBackend{Float32}...
30-Apr 07:34:09:INFO:root:Constructing net test-shared-params on Mocha.CPUBackend...
30-Apr 07:34:09:INFO:root:Topological sorting 5 layers...
30-Apr 07:34:09:INFO:root:Setup layers...
30-Apr 07:34:09:DEBUG:root:InnerProductLayer(ip2): sharing weights and bias
30-Apr 07:34:09:INFO:root:Network constructed!
30-Apr 07:34:09:DEBUG:root:Init network test-shared-params
30-Apr 07:34:09:DEBUG:root:Init parameter weight for layer ip1
30-Apr 07:34:09:DEBUG:root:Init parameter bias for layer ip1
30-Apr 07:34:09:DEBUG:root:Destroying network test-shared-params
-- Testing ReshapeLayer on Mocha.CPUBackend{Float64}...
    > Setup
    > Forward
    > Backward
-- Testing ReshapeLayer on Mocha.CPUBackend{Float32}...
    > Setup
    > Forward
    > Backward
-- Testing RandomNormal Layer on Mocha.CPUBackend{Float32}...
    > Random output 2[3,2]
-- Testing RandomNormal Layer on Mocha.CPUBackend{Float64}...
    > Random output 3[2,1,2]
-- Testing PowerLayer on Mocha.CPUBackend{Float32}...
    > scale=0.21, shift=0.21, power=2, tensor_dim=1
    > scale=0, shift=0.05, power=5, tensor_dim=2
    > scale=0.86, shift=0.8, power=2, tensor_dim=2
    > scale=0.19, shift=0, power=3, tensor_dim=5
    > scale=1.0, shift=0.93, power=4, tensor_dim=1
    > scale=0.98, shift=0.45, power=0, tensor_dim=6
    > scale=0.95, shift=0.43, power=1, tensor_dim=6
    > scale=0.05, shift=0.88, power=-1, tensor_dim=1
-- Testing PowerLayer on Mocha.CPUBackend{Float64}...
    > scale=0.57, shift=0.84, power=2, tensor_dim=6
    > scale=0, shift=0.95, power=3, tensor_dim=5
    > scale=0.09, shift=0.07, power=2, tensor_dim=2
    > scale=0.88, shift=0, power=3, tensor_dim=6
    > scale=0.88, shift=1.0, power=4, tensor_dim=1
    > scale=0.83, shift=0.92, power=0, tensor_dim=6
    > scale=0.45, shift=0.64, power=1, tensor_dim=3
    > scale=0.56, shift=0.82, power=-1, tensor_dim=4
-- Testing MultinomialLogisticLossLayer{equal,local} on Mocha.CPUBackend{Float64}...
    > [8,9] (operate on dimension 1)
-- Testing MultinomialLogisticLossLayer{equal,local} on Mocha.CPUBackend{Float64}...
    > [6,7,9,8] (operate on dimension 3)
-- Testing MultinomialLogisticLossLayer{equal,local} on Mocha.CPUBackend{Float64}...
    > [9,9,9,8,8] (operate on dimension 4)
-- Testing MultinomialLogisticLossLayer{local,local} on Mocha.CPUBackend{Float64}...
    > [10,9] (operate on dimension 1)
-- Testing MultinomialLogisticLossLayer{local,local} on Mocha.CPUBackend{Float64}...
    > [6,11,7,6] (operate on dimension 3)
-- Testing MultinomialLogisticLossLayer{local,local} on Mocha.CPUBackend{Float64}...
    > [9,10,10,7,8] (operate on dimension 4)
-- Testing MultinomialLogisticLossLayer{global,global} on Mocha.CPUBackend{Float64}...
    > [11,7] (operate on dimension 1)
-- Testing MultinomialLogisticLossLayer{global,global} on Mocha.CPUBackend{Float64}...
    > [10,7,11,11] (operate on dimension 3)
-- Testing MultinomialLogisticLossLayer{global,global} on Mocha.CPUBackend{Float64}...
    > [7,6,7,8,10] (operate on dimension 4)
-- Testing MultinomialLogisticLossLayer{global,local} on Mocha.CPUBackend{Float64}...
    > [8,10] (operate on dimension 1)
-- Testing MultinomialLogisticLossLayer{global,local} on Mocha.CPUBackend{Float64}...
    > [7,8,7,6] (operate on dimension 3)
-- Testing MultinomialLogisticLossLayer{global,local} on Mocha.CPUBackend{Float64}...
    > [9,7,9,10,10] (operate on dimension 4)
-- Testing MultinomialLogisticLossLayer{no,no} on Mocha.CPUBackend{Float64}...
    > [7,6] (operate on dimension 1)
-- Testing MultinomialLogisticLossLayer{no,no} on Mocha.CPUBackend{Float64}...
    > [10,6,10,7] (operate on dimension 3)
-- Testing MultinomialLogisticLossLayer{no,no} on Mocha.CPUBackend{Float64}...
    > [7,10,11,9,10] (operate on dimension 1)
-- Testing MultinomialLogisticLossLayer{equal,local} on Mocha.CPUBackend{Float32}...
    > [6,6] (operate on dimension 1)
-- Testing MultinomialLogisticLossLayer{equal,local} on Mocha.CPUBackend{Float32}...
    > [9,7,7,11] (operate on dimension 3)
-- Testing MultinomialLogisticLossLayer{equal,local} on Mocha.CPUBackend{Float32}...
    > [8,11,9,10,9] (operate on dimension 4)
-- Testing MultinomialLogisticLossLayer{local,local} on Mocha.CPUBackend{Float32}...
    > [6,8] (operate on dimension 1)
-- Testing MultinomialLogisticLossLayer{local,local} on Mocha.CPUBackend{Float32}...
    > [11,8,10,9] (operate on dimension 3)
-- Testing MultinomialLogisticLossLayer{local,local} on Mocha.CPUBackend{Float32}...
    > [7,10,9,7,10] (operate on dimension 4)
-- Testing MultinomialLogisticLossLayer{global,global} on Mocha.CPUBackend{Float32}...
    > [11,6] (operate on dimension 1)
-- Testing MultinomialLogisticLossLayer{global,global} on Mocha.CPUBackend{Float32}...
    > [8,11,11,11] (operate on dimension 3)
-- Testing MultinomialLogisticLossLayer{global,global} on Mocha.CPUBackend{Float32}...
    > [9,6,6,8,11] (operate on dimension 4)
-- Testing MultinomialLogisticLossLayer{global,local} on Mocha.CPUBackend{Float32}...
    > [9,9] (operate on dimension 1)
-- Testing MultinomialLogisticLossLayer{global,local} on Mocha.CPUBackend{Float32}...
    > [11,9,8,8] (operate on dimension 3)
-- Testing MultinomialLogisticLossLayer{global,local} on Mocha.CPUBackend{Float32}...
    > [10,11,11,9,7] (operate on dimension 4)
-- Testing MultinomialLogisticLossLayer{no,no} on Mocha.CPUBackend{Float32}...
    > [6,6] (operate on dimension 1)
-- Testing MultinomialLogisticLossLayer{no,no} on Mocha.CPUBackend{Float32}...
    > [8,8,6,10] (operate on dimension 1)
-- Testing MultinomialLogisticLossLayer{no,no} on Mocha.CPUBackend{Float32}...
    > [11,10,6,6,11] (operate on dimension 3)
-- Testing Memory Output Layer on Mocha.CPUBackend{Float32}...
    > (1,3,8)
-- Testing Memory Output Layer on Mocha.CPUBackend{Float64}...
    > (4,6,5,4,5)
-- Testing Memory Data Layer on Mocha.CPUBackend{Float32}...
    > (4,2,4,3)
-- Testing Memory Data Layer on Mocha.CPUBackend{Float64}...
    > (5,3,2)
-- Testing LRN(Mocha.LRNMode.AcrossChannel) on Mocha.CPUBackend{Float32}...
    > Setup with dims (11,8,9,7)
    > Forward
    > Backward
-- Testing LRN(Mocha.LRNMode.WithinChannel) on Mocha.CPUBackend{Float32}...
    > Setup with dims (10,10,7,10)
    > Forward
    > Backward
-- Testing LRN(Mocha.LRNMode.AcrossChannel) on Mocha.CPUBackend{Float64}...
    > Setup with dims (11,8,9,8)
    > Forward
    > Backward
-- Testing LRN(Mocha.LRNMode.WithinChannel) on Mocha.CPUBackend{Float64}...
    > Setup with dims (10,7,11,11)
    > Forward
    > Backward
-- Testing InplaceLayer on Mocha.CPUBackend{Float64}...
    > Setup
30-Apr 07:34:19:INFO:root:Constructing net test-inplace on Mocha.CPUBackend...
30-Apr 07:34:19:INFO:root:Topological sorting 5 layers...
30-Apr 07:34:19:INFO:root:Setup layers...
30-Apr 07:34:19:INFO:root:Network constructed!
30-Apr 07:34:19:DEBUG:root:Init network test-inplace
30-Apr 07:34:19:DEBUG:root:Init parameter weight for layer ip1
30-Apr 07:34:19:DEBUG:root:Init parameter bias for layer ip1
30-Apr 07:34:19:DEBUG:root:Init parameter weight for layer ip2
30-Apr 07:34:19:DEBUG:root:Init parameter bias for layer ip2
    > Forward
    > Backward
30-Apr 07:34:19:DEBUG:root:Destroying network test-inplace
-- Testing InplaceLayer on Mocha.CPUBackend{Float32}...
    > Setup
30-Apr 07:34:19:INFO:root:Constructing net test-inplace on Mocha.CPUBackend...
30-Apr 07:34:19:INFO:root:Topological sorting 5 layers...
30-Apr 07:34:19:INFO:root:Setup layers...
30-Apr 07:34:19:INFO:root:Network constructed!
30-Apr 07:34:19:DEBUG:root:Init network test-inplace
30-Apr 07:34:19:DEBUG:root:Init parameter weight for layer ip1
30-Apr 07:34:19:DEBUG:root:Init parameter bias for layer ip1
30-Apr 07:34:19:DEBUG:root:Init parameter weight for layer ip2
30-Apr 07:34:19:DEBUG:root:Init parameter bias for layer ip2
    > Forward
    > Backward
30-Apr 07:34:20:DEBUG:root:Destroying network test-inplace
-- Testing InnerProductLayer on Mocha.CPUBackend{Float32}...
    > Setup
    > Forward
    > Backward
-- Testing InnerProductLayer on Mocha.CPUBackend{Float64}...
    > Setup
    > Forward
    > Backward
-- Testing Index2OnehotLayer on Mocha.CPUBackend{Float32}...
    > 2-dimensional input, expanding along dimension 1
-- Testing Index2OnehotLayer on Mocha.CPUBackend{Float32}...
    > 4-dimensional input, expanding along dimension 3
-- Testing Index2OnehotLayer on Mocha.CPUBackend{Float32}...
    > 5-dimensional input, expanding along dimension 1
-- Testing Index2OnehotLayer on Mocha.CPUBackend{Float64}...
    > 2-dimensional input, expanding along dimension 1
-- Testing Index2OnehotLayer on Mocha.CPUBackend{Float64}...
    > 4-dimensional input, expanding along dimension 2
-- Testing Index2OnehotLayer on Mocha.CPUBackend{Float64}...
    > 5-dimensional input, expanding along dimension 2
-- Testing IdentityLayer on Mocha.CPUBackend{Float32}...
    > Setup
    > Forward
-- Testing IdentityLayer on Mocha.CPUBackend{Float64}...
    > Setup
    > Forward
-- Testing HDF5 Output Layer on Mocha.CPUBackend{Float32}...
    > (3,5,2,3)
30-Apr 07:34:22:WARNING:root:HDF5OutputLayer: output file '/tmp/Mocha-15072-XQl9C84gPDidO5wv6wefKxuIEEno3rce.hdf5' already exists, overwriting
-- Testing HDF5 Output Layer on Mocha.CPUBackend{Float64}...
    > (5,1,5,7,8)
30-Apr 07:34:23:WARNING:root:HDF5OutputLayer: output file '/tmp/Mocha-15072-v62Prpmpw0j0J3o8wqzrZwvTen4GBHY0.hdf5' already exists, overwriting
-- Testing GaussianKLLossLayer on Mocha.CPUBackend{Float32}...
    > (9,8,8,11,11)
-- Testing GaussianKLLossLayer on Mocha.CPUBackend{Float64}...
    > (7,10)
-- Testing ElementWiseLayer{Mocha.ElementWiseFunctors.Add()} on Mocha.CPUBackend{Float32}...
    > (6,3,5)
-- Testing ElementWiseLayer{Mocha.ElementWiseFunctors.Subtract()} on Mocha.CPUBackend{Float32}...
    > (4,)
-- Testing ElementWiseLayer{Mocha.ElementWiseFunctors.Multiply()} on Mocha.CPUBackend{Float32}...
    > (3,5,3,8,1,5)
-- Testing ElementWiseLayer{Mocha.ElementWiseFunctors.Divide()} on Mocha.CPUBackend{Float32}...
    > (1,4,7,2,3)
-- Testing ElementWiseLayer{Mocha.ElementWiseFunctors.Add()} on Mocha.CPUBackend{Float64}...
    > (5,)
-- Testing ElementWiseLayer{Mocha.ElementWiseFunctors.Subtract()} on Mocha.CPUBackend{Float64}...
    > (4,7,5,6)
-- Testing ElementWiseLayer{Mocha.ElementWiseFunctors.Multiply()} on Mocha.CPUBackend{Float64}...
    > (6,4,8)
-- Testing ElementWiseLayer{Mocha.ElementWiseFunctors.Divide()} on Mocha.CPUBackend{Float64}...
    > (3,6)
-- Testing Dropout on Mocha.CPUBackend{Float64}...
    > (4,3,3,7,6)
    > Setup
    > Forward
    > Backward
-- Testing Dropout on Mocha.CPUBackend{Float32}...
    > (1,5,3,3,4)
    > Setup
    > Forward
    > Backward
-- Testing CropLayer on Mocha.CPUBackend{Float64} ...
    > Setup
    > Forward
-- Testing CropLayer on Mocha.CPUBackend{Float64} with mirror...
    > Setup
    > Forward
-- Testing CropLayer{rnd} on Mocha.CPUBackend{Float64} ...
    > Setup
    > Forward
-- Testing CropLayer{rnd} on Mocha.CPUBackend{Float64} with mirror...
    > Setup
    > Forward
-- Testing CropLayer on Mocha.CPUBackend{Float32} ...
    > Setup
    > Forward
-- Testing CropLayer on Mocha.CPUBackend{Float32} with mirror...
    > Setup
    > Forward
-- Testing CropLayer{rnd} on Mocha.CPUBackend{Float32} ...
    > Setup
    > Forward
-- Testing CropLayer{rnd} on Mocha.CPUBackend{Float32} with mirror...
    > Setup
    > Forward
-- Testing Convolution(frozen=true) on Mocha.CPUBackend{Float64} filter=(3,4)...
    > Setup
    > Forward
    > Backward
-- Testing Convolution(frozen=false) on Mocha.CPUBackend{Float64} filter=(3,4)...
    > Setup
    > Forward
    > Backward
maximum(abs(grad_filter_exp - grad_filter_got)) = 2.7284841053187847e-12
eps = 1.0e-5
-- Testing Convolution(frozen=true) on Mocha.CPUBackend{Float64} filter=(1,1)...
    > Setup
    > Forward
    > Backward
-- Testing Convolution(frozen=false) on Mocha.CPUBackend{Float64} filter=(1,1)...
    > Setup
    > Forward
    > Backward
maximum(abs(grad_filter_exp - grad_filter_got)) = 7.73070496506989e-12
eps = 1.0e-5
-- Testing Convolution(frozen=true) on Mocha.CPUBackend{Float32} filter=(3,4)...
    > Setup
    > Forward
    > Backward
-- Testing Convolution(frozen=false) on Mocha.CPUBackend{Float32} filter=(3,4)...
    > Setup
    > Forward
    > Backward
maximum(abs(grad_filter_exp - grad_filter_got)) = 0.0013427734f0
eps = 0.01
-- Testing Convolution(frozen=true) on Mocha.CPUBackend{Float32} filter=(1,1)...
    > Setup
    > Forward
    > Backward
-- Testing Convolution(frozen=false) on Mocha.CPUBackend{Float32} filter=(1,1)...
    > Setup
    > Forward
    > Backward
maximum(abs(grad_filter_exp - grad_filter_got)) = 0.0034179688f0
eps = 0.01
-- Testing ConcatLayer(dim=1) on Mocha.CPUBackend{Float64}...
    > 2-dimensional tensor
    > Forward
    > Backward
-- Testing ConcatLayer(dim=2) on Mocha.CPUBackend{Float64}...
    > 6-dimensional tensor
    > Forward
    > Backward
-- Testing ConcatLayer(dim=3) on Mocha.CPUBackend{Float64}...
    > 3-dimensional tensor
    > Forward
    > Backward
-- Testing ConcatLayer(dim=4) on Mocha.CPUBackend{Float64}...
    > 4-dimensional tensor
    > Forward
    > Backward
-- Testing ConcatLayer(dim=5) on Mocha.CPUBackend{Float64}...
    > 5-dimensional tensor
    > Forward
    > Backward
-- Testing ConcatLayer(dim=1) on Mocha.CPUBackend{Float32}...
    > 7-dimensional tensor
    > Forward
    > Backward
-- Testing ConcatLayer(dim=2) on Mocha.CPUBackend{Float32}...
    > 6-dimensional tensor
    > Forward
    > Backward
-- Testing ConcatLayer(dim=3) on Mocha.CPUBackend{Float32}...
    > 7-dimensional tensor
    > Forward
    > Backward
-- Testing ConcatLayer(dim=4) on Mocha.CPUBackend{Float32}...
    > 6-dimensional tensor
    > Forward
    > Backward
-- Testing ConcatLayer(dim=5) on Mocha.CPUBackend{Float32}...
    > 5-dimensional tensor
    > Forward
    > Backward
-- Testing BinaryCrossEntropyLossLayer on Mocha.CPUBackend{Float32}...
    > [4,2]
-- Testing BinaryCrossEntropyLossLayer on Mocha.CPUBackend{Float32}...
    > [6,6,5,5]
-- Testing BinaryCrossEntropyLossLayer on Mocha.CPUBackend{Float32}...
    > [7,4,6,5,5]
-- Testing BinaryCrossEntropyLossLayer on Mocha.CPUBackend{Float64}...
    > [4,6]
-- Testing BinaryCrossEntropyLossLayer on Mocha.CPUBackend{Float64}...
    > [5,4,5,6]
-- Testing BinaryCrossEntropyLossLayer on Mocha.CPUBackend{Float64}...
    > [7,7,3,2,6]
-- Testing BinaryAccuracyLayer on Mocha.CPUBackend{Float32}...
    > (10,6)
    > Forward
    > Forward Again
    > Forward Again and Again
-- Testing BinaryAccuracyLayer on Mocha.CPUBackend{Float32}...
    > (7,9)
    > Forward
    > Forward Again
    > Forward Again and Again
-- Testing BinaryAccuracyLayer on Mocha.CPUBackend{Float32}...
    > (11,7,6,11)
    > Forward
    > Forward Again
    > Forward Again and Again
-- Testing BinaryAccuracyLayer on Mocha.CPUBackend{Float32}...
    > (9,10,11,11)
    > Forward
    > Forward Again
    > Forward Again and Again
-- Testing BinaryAccuracyLayer on Mocha.CPUBackend{Float32}...
    > (6,7,10,11,9)
    > Forward
    > Forward Again
    > Forward Again and Again
-- Testing BinaryAccuracyLayer on Mocha.CPUBackend{Float32}...
    > (6,9,10,9,7)
    > Forward
    > Forward Again
    > Forward Again and Again
-- Testing BinaryAccuracyLayer on Mocha.CPUBackend{Float64}...
    > (7,8)
    > Forward
    > Forward Again
    > Forward Again and Again
-- Testing BinaryAccuracyLayer on Mocha.CPUBackend{Float64}...
    > (6,7)
    > Forward
    > Forward Again
    > Forward Again and Again
-- Testing BinaryAccuracyLayer on Mocha.CPUBackend{Float64}...
    > (11,8,7,9)
    > Forward
    > Forward Again
    > Forward Again and Again
-- Testing BinaryAccuracyLayer on Mocha.CPUBackend{Float64}...
    > (6,7,7,11)
    > Forward
    > Forward Again
    > Forward Again and Again
-- Testing BinaryAccuracyLayer on Mocha.CPUBackend{Float64}...
    > (6,10,9,11,6)
    > Forward
    > Forward Again
    > Forward Again and Again
-- Testing BinaryAccuracyLayer on Mocha.CPUBackend{Float64}...
    > (10,10,6,11,9)
    > Forward
    > Forward Again
    > Forward Again and Again
-- Testing ArgmaxLayer on Mocha.CPUBackend{Float64}...
    > 2-dimensional tensor
    > Setup
    > Forward
-- Testing ArgmaxLayer on Mocha.CPUBackend{Float64}...
    > 4-dimensional tensor
    > Setup
    > Forward
-- Testing ArgmaxLayer on Mocha.CPUBackend{Float64}...
    > 5-dimensional tensor
    > Setup
    > Forward
-- Testing ArgmaxLayer on Mocha.CPUBackend{Float32}...
    > 2-dimensional tensor
    > Setup
    > Forward
-- Testing ArgmaxLayer on Mocha.CPUBackend{Float32}...
    > 4-dimensional tensor
    > Setup
    > Forward
-- Testing ArgmaxLayer on Mocha.CPUBackend{Float32}...
    > 5-dimensional tensor
    > Setup
    > Forward
-- Testing AccuracyLayer on Mocha.CPUBackend{Float32}...
    > (9,11) (operate on dimension 1)
    > Forward
    > Forward Again
    > Forward Again and Again
-- Testing AccuracyLayer on Mocha.CPUBackend{Float32}...
    > (6,6,9,9) (operate on dimension 1)
    > Forward
    > Forward Again
    > Forward Again and Again
-- Testing AccuracyLayer on Mocha.CPUBackend{Float32}...
    > (10,7,10,11,7) (operate on dimension 4)
    > Forward
    > Forward Again
    > Forward Again and Again
-- Testing AccuracyLayer on Mocha.CPUBackend{Float64}...
    > (9,9) (operate on dimension 1)
    > Forward
    > Forward Again
    > Forward Again and Again
-- Testing AccuracyLayer on Mocha.CPUBackend{Float64}...
    > (9,6,6,10) (operate on dimension 2)
    > Forward
    > Forward Again
    > Forward Again and Again
-- Testing AccuracyLayer on Mocha.CPUBackend{Float64}...
    > (11,10,10,9,11) (operate on dimension 4)
    > Forward
    > Forward Again
    > Forward Again and Again
INFO: Mocha tests passed

>>> End of log
