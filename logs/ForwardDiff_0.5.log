>>> 'Pkg.add("ForwardDiff")' log
INFO: Installing Calculus v0.1.14
INFO: Installing ForwardDiff v0.1.8
INFO: Installing NaNMath v0.2.1
INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of ForwardDiff
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("ForwardDiff")' log
Julia Version 0.5.0-dev+4330
Commit 493157e (2016-05-26 09:11 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.7.1 (ORCJIT, haswell)
INFO: Testing ForwardDiff
Testing GradientNumbers and ForwardDiff.gradient...Done (took 31.549990626 seconds).
Testing HessianNumbers and ForwardDiff.hessian...Done (took 43.249523567 seconds).
Testing TensorNumbers and ForwardDiff.tensor...Done (took 21.438900993 seconds).
Testing ForwardDiff.derivative...Done (took 19.300261788 seconds).
Testing ForwardDiff.jacobian...Done (took 58.629515581 seconds).
Testing deprecation wrapper (deprecation warnings are expected)...
WARNING: forwarddiff_gradient!(f::Function,T::DataType; fadtype::Symbol=:dual,args...) is deprecated, use depr_inplace_fad(ForwardDiff.gradient,f) instead.
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in #forwarddiff_gradient!#67(::Symbol, ::Array{Any,1}, ::Function, ::Function, ::DataType) at ./deprecated.jl:50
 in forwarddiff_gradient!(::Function, ::DataType) at ./deprecated.jl:49
 in include_from_node1(::String) at ./loading.jl:426 (repeats 2 times)
 in process_options(::Base.JLOptions) at ./client.jl:266
 in _start() at ./client.jl:322
while loading /home/vagrant/.julia/v0.5/ForwardDiff/test/test_deprecated.jl, in expression starting on line 18
WARNING: Addendum to the deprecation warning above:
The depr_inplace_fad function is actually only meant to be used to patch over the old API for mutating functions. Instead of:
	deprecated_inplace_fad(ForwardDiff.gradient, #1086)
You should use the following:
	ForwardDiff.gradient(#1086, mutates=true)
Be aware that mutating functions created with the new API take in the output array as the 1st argument rather than the 2nd.
WARNING: forwarddiff_gradient(f::Function,T::DataType; fadtype::Symbol=:dual,args...) is deprecated, use ForwardDiff.gradient(f,mutates=false) instead.
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in #forwarddiff_gradient#62(::Symbol, ::Array{Any,1}, ::Function, ::Function, ::DataType) at ./deprecated.jl:50
 in forwarddiff_gradient(::Function, ::DataType) at ./deprecated.jl:49
 in include_from_node1(::String) at ./loading.jl:426 (repeats 2 times)
 in process_options(::Base.JLOptions) at ./client.jl:266
 in _start() at ./client.jl:322
while loading /home/vagrant/.julia/v0.5/ForwardDiff/test/test_deprecated.jl, in expression starting on line 22
WARNING: forwarddiff_jacobian!(f::Function,T::DataType; fadtype::Symbol=:dual,args...) is deprecated, use depr_inplace_fad(ForwardDiff.jacobian,f) instead.
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in #forwarddiff_jacobian!#68(::Symbol, ::Array{Any,1}, ::Function, ::Function, ::DataType) at ./deprecated.jl:50
 in forwarddiff_jacobian!(::Function, ::DataType) at ./deprecated.jl:49
 in include_from_node1(::String) at ./loading.jl:426 (repeats 2 times)
 in process_options(::Base.JLOptions) at ./client.jl:266
 in _start() at ./client.jl:322
while loading /home/vagrant/.julia/v0.5/ForwardDiff/test/test_deprecated.jl, in expression starting on line 39
WARNING: both Calculus and ForwardDiff export "jacobian"; uses of it in module Main must be qualified
WARNING: Addendum to the deprecation warning above:
The depr_inplace_fad function is actually only meant to be used to patch over the old API for mutating functions. Instead of:
	deprecated_inplace_fad(ForwardDiff.jacobian, #1088)
You should use the following:
	ForwardDiff.jacobian(#1088, mutates=true)
Be aware that mutating functions created with the new API take in the output array as the 1st argument rather than the 2nd.
WARNING: forwarddiff_jacobian(f::Function,T::DataType; fadtype::Symbol=:dual,args...) is deprecated, use ForwardDiff.jacobian(f,mutates=false) instead.
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in #forwarddiff_jacobian#63(::Symbol, ::Array{Any,1}, ::Function, ::Function, ::DataType) at ./deprecated.jl:50
 in forwarddiff_jacobian(::Function, ::DataType) at ./deprecated.jl:49
 in include_from_node1(::String) at ./loading.jl:426 (repeats 2 times)
 in process_options(::Base.JLOptions) at ./client.jl:266
 in _start() at ./client.jl:322
while loading /home/vagrant/.julia/v0.5/ForwardDiff/test/test_deprecated.jl, in expression starting on line 43
WARNING: forwarddiff_hessian!(f::Function,T::DataType; fadtype::Symbol=:dual,args...) is deprecated, use depr_inplace_fad(ForwardDiff.hessian,f) instead.
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in #forwarddiff_hessian!#69(::Symbol, ::Array{Any,1}, ::Function, ::Function, ::DataType) at ./deprecated.jl:50
 in forwarddiff_hessian!(::Function, ::DataType) at ./deprecated.jl:49
 in include_from_node1(::String) at ./loading.jl:426 (repeats 2 times)
 in process_options(::Base.JLOptions) at ./client.jl:266
 in _start() at ./client.jl:322
while loading /home/vagrant/.julia/v0.5/ForwardDiff/test/test_deprecated.jl, in expression starting on line 60
WARNING: both Calculus and ForwardDiff export "hessian"; uses of it in module Main must be qualified
WARNING: Addendum to the deprecation warning above:
The depr_inplace_fad function is actually only meant to be used to patch over the old API for mutating functions. Instead of:
	deprecated_inplace_fad(ForwardDiff.hessian, #1090)
You should use the following:
	ForwardDiff.hessian(#1090, mutates=true)
Be aware that mutating functions created with the new API take in the output array as the 1st argument rather than the 2nd.
WARNING: forwarddiff_hessian(f::Function,T::DataType; fadtype::Symbol=:dual,args...) is deprecated, use ForwardDiff.hessian(f,mutates=false) instead.
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in #forwarddiff_hessian#64(::Symbol, ::Array{Any,1}, ::Function, ::Function, ::DataType) at ./deprecated.jl:50
 in forwarddiff_hessian(::Function, ::DataType) at ./deprecated.jl:49
 in include_from_node1(::String) at ./loading.jl:426 (repeats 2 times)
 in process_options(::Base.JLOptions) at ./client.jl:266
 in _start() at ./client.jl:322
while loading /home/vagrant/.julia/v0.5/ForwardDiff/test/test_deprecated.jl, in expression starting on line 64
WARNING: forwarddiff_tensor!(f::Function,T::DataType; fadtype::Symbol=:dual,args...) is deprecated, use depr_inplace_fad(ForwardDiff.tensor,f) instead.
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in #forwarddiff_tensor!#70(::Symbol, ::Array{Any,1}, ::Function, ::Function, ::DataType) at ./deprecated.jl:50
 in forwarddiff_tensor!(::Function, ::DataType) at ./deprecated.jl:49
 in include_from_node1(::String) at ./loading.jl:426 (repeats 2 times)
 in process_options(::Base.JLOptions) at ./client.jl:266
 in _start() at ./client.jl:322
while loading /home/vagrant/.julia/v0.5/ForwardDiff/test/test_deprecated.jl, in expression starting on line 75
WARNING: Addendum to the deprecation warning above:
The depr_inplace_fad function is actually only meant to be used to patch over the old API for mutating functions. Instead of:
	deprecated_inplace_fad(ForwardDiff.tensor, #1086)
You should use the following:
	ForwardDiff.tensor(#1086, mutates=true)
Be aware that mutating functions created with the new API take in the output array as the 1st argument rather than the 2nd.
WARNING: forwarddiff_tensor(f::Function,T::DataType; fadtype::Symbol=:dual,args...) is deprecated, use ForwardDiff.tensor(f,mutates=false) instead.
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in #forwarddiff_tensor#65(::Symbol, ::Array{Any,1}, ::Function, ::Function, ::DataType) at ./deprecated.jl:50
 in forwarddiff_tensor(::Function, ::DataType) at ./deprecated.jl:49
 in include_from_node1(::String) at ./loading.jl:426 (repeats 2 times)
 in process_options(::Base.JLOptions) at ./client.jl:266
 in _start() at ./client.jl:322
while loading /home/vagrant/.julia/v0.5/ForwardDiff/test/test_deprecated.jl, in expression starting on line 79
Done (took 1.515035824 seconds).
Testing behavioral examples...
WARNING: Base.DotAddFun is deprecated, use Base.#.+ instead.
  likely near /home/vagrant/.julia/v0.5/ForwardDiff/test/test_behaviors.jl:59

WARNING: Base.DotAddFun is deprecated, use Base.#.+ instead.
  likely near /home/vagrant/.julia/v0.5/ForwardDiff/test/test_behaviors.jl:59
WARNING: Base.DotAddFun is deprecated, use Base.#.+ instead.
  likely near /home/vagrant/.julia/v0.5/ForwardDiff/test/test_behaviors.jl:66

WARNING: Base.DotAddFun is deprecated, use Base.#.+ instead.
  likely near /home/vagrant/.julia/v0.5/ForwardDiff/test/test_behaviors.jl:66
WARNING: imported binding for gradnum overwritten in module Main
WARNING: Base.DotAddFun is deprecated, use Base.#.+ instead.
  likely near /home/vagrant/.julia/v0.5/ForwardDiff/test/test_behaviors.jl:72

WARNING: Base.DotAddFun is deprecated, use Base.#.+ instead.
  likely near /home/vagrant/.julia/v0.5/ForwardDiff/test/test_behaviors.jl:72
WARNING: imported binding for hessnum overwritten in module Main
WARNING: Base.DotAddFun is deprecated, use Base.#.+ instead.
  likely near /home/vagrant/.julia/v0.5/ForwardDiff/test/test_behaviors.jl:78

WARNING: Base.DotAddFun is deprecated, use Base.#.+ instead.
  likely near /home/vagrant/.julia/v0.5/ForwardDiff/test/test_behaviors.jl:78
ERROR: LoadError: LoadError: InexactError()
 in convert(::Type{Float64}, ::ForwardDiff.GradientNumber{4,Float64,Tuple{Float64,Float64,Float64,Float64}}) at /home/vagrant/.julia/v0.5/ForwardDiff/src/ForwardDiffNumber.jl:154
 in .-(::ForwardDiff.GradientNumber{4,Float64,Tuple{Float64,Float64,Float64,Float64}}, ::Array{Float64,1}) at ./arraymath.jl:89
 in -(::ForwardDiff.GradientNumber{4,Float64,Tuple{Float64,Float64,Float64,Float64}}, ::Array{Float64,1}) at ./arraymath.jl:111
 in macro expansion at /home/vagrant/.julia/v0.5/ForwardDiff/src/api/jacobian.jl:101 [inlined]
 in _calc_jacobian(::##1122#1124, ::Array{Float64,1}, ::Type{Float64}, ::Type{Val{4}}, ::Type{Val{0}}, ::ForwardDiff.ForwardDiffCache) at /home/vagrant/.julia/v0.5/ForwardDiff/src/api/jacobian.jl:91
 in macro expansion at /home/vagrant/.julia/v0.5/ForwardDiff/src/api/jacobian.jl:36 [inlined]
 in #jacobian#46(::Int64, ::ForwardDiff.ForwardDiffCache, ::ForwardDiff.#jacobian, ::##1122#1124, ::Array{Float64,1}, ::Type{Void}) at /home/vagrant/.julia/v0.5/ForwardDiff/src/api/jacobian.jl:27
 in jacobian(::Function, ::Array{Float64,1}) at /home/vagrant/.julia/v0.5/ForwardDiff/src/api/jacobian.jl:27
 in macro expansion; at /home/vagrant/.julia/v0.5/ForwardDiff/test/test_behaviors.jl:97 [inlined]
 in anonymous at ./<missing>:?
 in include_from_node1(::String) at ./loading.jl:426 (repeats 2 times)
 in process_options(::Base.JLOptions) at ./client.jl:266
 in _start() at ./client.jl:322
while loading /home/vagrant/.julia/v0.5/ForwardDiff/test/test_behaviors.jl, in expression starting on line 92
while loading /home/vagrant/.julia/v0.5/ForwardDiff/test/runtests.jl, in expression starting on line 35
=============================[ ERROR: ForwardDiff ]=============================

failed process: Process(`/home/vagrant/julia/bin/julia -Cx86-64 -J/home/vagrant/julia/lib/julia/sys.so --compile=yes --check-bounds=yes --code-coverage=none --color=no /home/vagrant/.julia/v0.5/ForwardDiff/test/runtests.jl`, ProcessExited(1)) [1]

================================================================================
ERROR: ForwardDiff had test errors
 in #test#49(::Bool, ::Function, ::Array{AbstractString,1}) at ./pkg/entry.jl:693
 in (::Base.Pkg.Entry.#kw##test)(::Array{Any,1}, ::Base.Pkg.Entry.#test, ::Array{AbstractString,1}) at ./null:0
 in (::Base.Pkg.Dir.##2#3{Array{Any,1},Base.Pkg.Entry.#test,Tuple{Array{AbstractString,1}}})() at ./pkg/dir.jl:31
 in cd(::Base.Pkg.Dir.##2#3{Array{Any,1},Base.Pkg.Entry.#test,Tuple{Array{AbstractString,1}}}, ::String) at ./file.jl:59
 in #cd#1(::Array{Any,1}, ::Function, ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N}) at ./pkg/dir.jl:31
 in (::Base.Pkg.Dir.#kw##cd)(::Array{Any,1}, ::Base.Pkg.Dir.#cd, ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N}) at ./null:0
 in #test#3(::Bool, ::Function, ::String, ::Vararg{String,N}) at ./pkg.jl:245
 in test(::String, ::Vararg{String,N}) at ./pkg.jl:245
 in eval(::Module, ::Any) at ./boot.jl:225
 in process_options(::Base.JLOptions) at ./client.jl:243
 in _start() at ./client.jl:322

>>> End of log
