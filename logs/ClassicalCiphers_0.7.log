>>> 'Pkg.add("ClassicalCiphers")' log
[ Info: Cloning cache of ClassicalCiphers from https://github.com/Smaug123/ClassicalCiphers.jl.git
[ Info: Installing ClassicalCiphers v0.3.1
[ Info: Installing Iterators v0.3.1
[ Info: Package database updated

>>> 'Pkg.test("ClassicalCiphers")' log
Julia Version 0.7.0-DEV.3519
Commit 5ecba29832 (2018-01-22 20:58 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
      Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-135-generic #184-Ubuntu SMP Wed Oct 18 11:55:51 UTC 2017 x86_64 x86_64
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
              speed         user         nice          sys         idle          irq
       #1  3500 MHz    1596565 s       5034 s      90270 s     533593 s         14 s
       #2  3500 MHz     358175 s       2786 s      39022 s    2159869 s          0 s
       
  Memory: 2.93927001953125 GB (628.0703125 MB free)
  Uptime: 26106.0 sec
  Load Avg:  1.0302734375  1.00439453125  1.03466796875
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant
Packages:
  Package Directory: /home/vagrant/.julia/v0.7
  Package Status:
2 required packages:
 - ClassicalCiphers              0.3.1
 - JSON                          0.16.4
3 additional packages:
 - Compat                        0.49.0
 - Iterators                     0.3.1
 - Nullables                     0.0.3
[ Info: Testing ClassicalCiphers
┌ Warning: Deprecated syntax `any(x -> begin
│     # /home/vagrant/.julia/v0.7/ClassicalCiphers/src/common.jl, line 32
│     isa(x, Array)
│ end, a)?` at /home/vagrant/.julia/v0.7/ClassicalCiphers/src/common.jl:32.
│ Use `any(x -> begin
│     # /home/vagrant/.julia/v0.7/ClassicalCiphers/src/common.jl, line 32
│     isa(x, Array)
│ end, a) ?` instead.
└ @ nothing common.jl:32
┌ Warning: Deprecated syntax `any(x -> begin
│     # /home/vagrant/.julia/v0.7/ClassicalCiphers/src/common.jl, line 32
│     isa(x, Array)
│ end, a) ? flatten(vcat(map(flatten, a)...)):` at /home/vagrant/.julia/v0.7/ClassicalCiphers/src/common.jl:32.
│ Use `any(x -> begin
│     # /home/vagrant/.julia/v0.7/ClassicalCiphers/src/common.jl, line 32
│     isa(x, Array)
│ end, a) ? flatten(vcat(map(flatten, a)...)) :` instead.
└ @ nothing common.jl:32
┌ Warning: Deprecated syntax `parametric method syntax flatten{T}(a::Array{T, 1})` around /home/vagrant/.julia/v0.7/ClassicalCiphers/src/common.jl:32.
│ Use `flatten(a::Array{T, 1}) where T` instead.
└ @ nothing common.jl:32
┌ Warning: Deprecated syntax `parametric method syntax flatten{T}(a::Array{T})` around /home/vagrant/.julia/v0.7/ClassicalCiphers/src/common.jl:33.
│ Use `flatten(a::Array{T}) where T` instead.
└ @ nothing common.jl:33
┌ Warning: `parse(str::AbstractString; kwargs...)` is deprecated, use `Meta.parse(str; kwargs...)` instead.
│   caller = get_trigram_fitnesses() at common.jl:61
└ @ ClassicalCiphers common.jl:61
┌ Warning: Deprecated syntax `type` at /home/vagrant/.julia/v0.7/ClassicalCiphers/src/solitaire.jl:69.
│ Use `mutable struct` instead.
└ @ nothing solitaire.jl:69
┌ Warning: Deprecated syntax `parametric method syntax encrypt_hill{I <: Integer}(plaintext, key::Array{I, 2})` around /home/vagrant/.julia/v0.7/ClassicalCiphers/src/hill.jl:16.
│ Use `encrypt_hill(plaintext, key::Array{I, 2}) where I <: Integer` instead.
└ @ nothing hill.jl:16
┌ Warning: Deprecated syntax `parametric method syntax minor{I <: Integer}(mat::Array{I, 2}, i, j)` around /home/vagrant/.julia/v0.7/ClassicalCiphers/src/hill.jl:63.
│ Use `minor(mat::Array{I, 2}, i, j) where I <: Integer` instead.
└ @ nothing hill.jl:63
┌ Warning: Deprecated syntax `parametric method syntax adjugate{I <: Integer}(mat::Array{I, 2})` around /home/vagrant/.julia/v0.7/ClassicalCiphers/src/hill.jl:71.
│ Use `adjugate(mat::Array{I, 2}) where I <: Integer` instead.
└ @ nothing hill.jl:71
┌ Warning: Deprecated syntax `parametric method syntax decrypt_hill{I <: Integer}(ciphertext, key::Array{I, 2})` around /home/vagrant/.julia/v0.7/ClassicalCiphers/src/hill.jl:77.
│ Use `decrypt_hill(ciphertext, key::Array{I, 2}) where I <: Integer` instead.
└ @ nothing hill.jl:77
┌ Warning: Deprecated syntax `parametric method syntax encrypt_enigma{I <: Integer}(plaintext, rotors::Array{I, 1}, key::AbstractString; reflector_id = Char(0x42000000), ring::AbstractString = "AAA", stecker = Tuple{Char, Char}[], skip_stecker_check = false)` around /home/vagrant/.julia/v0.7/ClassicalCiphers/src/enigma.jl:80.
│ Use `encrypt_enigma(plaintext, rotors::Array{I, 1}, key::AbstractString; reflector_id = Char(0x42000000), ring::AbstractString = "AAA", stecker = Tuple{Char, Char}[], skip_stecker_check = false) where I <: Integer` instead.
└ @ nothing enigma.jl:80
Running tests:
 * vigenere.jl
WARNING: Base.Test is deprecated, run `using Test` instead.
  likely near /home/vagrant/.julia/v0.7/ClassicalCiphers/test/vigenere.jl:2
┌ Warning: `a::Number - b::AbstractArray` is deprecated, use `broadcast(-, a, b)` instead.
│   caller = decrypt_vigenere(::String, ::Array{Int64,1}) at vigenere.jl:17
└ @ ClassicalCiphers vigenere.jl:17
┌ Warning: `a::Number - b::AbstractArray` is deprecated, use `broadcast(-, a, b)` instead.
│   caller = decrypt_vigenere at vigenere.jl:17 [inlined]
└ @ Core vigenere.jl:17
┌ Warning: `a::AbstractArray - b::Number` is deprecated, use `broadcast(-, a, b)` instead.
│   caller = top-level scope
└ @ Core :0
 * monoalphabetic.jl
WARNING: Base.Test is deprecated, run `using Test` instead.
  likely near /home/vagrant/.julia/v0.7/ClassicalCiphers/test/monoalphabetic.jl:2
┌ Warning: `search(s::AbstractString, c::Char)` is deprecated, use `findfirst(equalto(c), s)` instead.
│   caller = (::getfield(ClassicalCiphers, Symbol("##12#13")){String})(::Char) at <missing>:0
└ @ ClassicalCiphers <missing>:0
 * solitaire.jl
WARNING: Base.Test is deprecated, run `using Test` instead.
  likely near /home/vagrant/.julia/v0.7/ClassicalCiphers/test/solitaire.jl:2
┌ Warning: `findin(a, b)` is deprecated, use `findall(occursin(b), a)` instead.
│   caller = next_solitaire(::Array{Int64,1}) at solitaire.jl:5
└ @ ClassicalCiphers solitaire.jl:5
┌ Warning: `findin(a, b)` is deprecated, use `findall(occursin(b), a)` instead.
│   caller = next_solitaire(::Array{Int64,1}) at solitaire.jl:17
└ @ ClassicalCiphers solitaire.jl:17
┌ Warning: `findin(a, b)` is deprecated, use `findall(occursin(b), a)` instead.
│   caller = next_solitaire(::Array{Integer,1}) at solitaire.jl:5
└ @ ClassicalCiphers solitaire.jl:5
┌ Warning: `findin(a, b)` is deprecated, use `findall(occursin(b), a)` instead.
│   caller = next_solitaire(::Array{Integer,1}) at solitaire.jl:17
└ @ ClassicalCiphers solitaire.jl:17
 * caesar.jl
WARNING: Base.Test is deprecated, run `using Test` instead.
  likely near /home/vagrant/.julia/v0.7/ClassicalCiphers/test/caesar.jl:2
 * portas.jl
WARNING: Base.Test is deprecated, run `using Test` instead.
  likely near /home/vagrant/.julia/v0.7/ClassicalCiphers/test/portas.jl:2
 * affine.jl
WARNING: Base.Test is deprecated, run `using Test` instead.
  likely near /home/vagrant/.julia/v0.7/ClassicalCiphers/test/affine.jl:2
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = start(::Iterators.Product{Tuple{Array{Int64,1},UnitRange{Int64}}}) at Iterators.jl:255
└ @ Iterators Iterators.jl:255
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = start(::Iterators.Product{Tuple{Array{Int64,1},Array{Int64,1}}}) at Iterators.jl:255
└ @ Iterators Iterators.jl:255
 * hill.jl
WARNING: Base.Test is deprecated, run `using Test` instead.
  likely near /home/vagrant/.julia/v0.7/ClassicalCiphers/test/hill.jl:2
WARNING: importing deprecated binding Base.det into ClassicalCiphers.
Error During Test at /home/vagrant/.julia/v0.7/ClassicalCiphers/test/hill.jl:6
  Test threw an exception of type ErrorException
  Expression: encrypt_hill("help!", [3 3; 2 5]) == "HIAT"
  Base.det has been moved to the standard library package LinearAlgebra.
  Restart Julia and then run `using LinearAlgebra` to load it.
  Stacktrace:
   [1] error(::Function, ::String, ::String, ::String, ::String, ::String, ::String) at ./error.jl:42
   [2] #det#981 at ./deprecated.jl:138 [inlined]
   [3] det at ./deprecated.jl:138 [inlined]
   [4] encrypt_hill(::String, ::Array{Int64,2}) at /home/vagrant/.julia/v0.7/ClassicalCiphers/src/hill.jl:16
   [5] top-level scope
   [6] include at ./boot.jl:292 [inlined]
   [7] include_relative(::Module, ::String) at ./loading.jl:1011
   [8] include(::Module, ::String) at ./sysimg.jl:26
   [9] include(::String) at ./sysimg.jl:65
   [10] top-level scope at ./<missing>:12
   [11] include at ./boot.jl:292 [inlined]
   [12] include_relative(::Module, ::String) at ./loading.jl:1011
   [13] include(::Module, ::String) at ./sysimg.jl:26
   [14] process_options(::Base.JLOptions) at ./client.jl:334
   [15] _start() at ./client.jl:386
ERROR: LoadError: LoadError: There was an error during testing
in expression starting at /home/vagrant/.julia/v0.7/ClassicalCiphers/test/hill.jl:6
in expression starting at /home/vagrant/.julia/v0.7/ClassicalCiphers/test/runtests.jl:9
┌ Error: ------------------------------------------------------------
│ # Testing failed for ClassicalCiphers
│   exception =
│    failed process: Process(`/home/vagrant/julia/bin/julia -Cnative -J/home/vagrant/julia/lib/julia/sys.so --compile=yes --depwarn=yes --code-coverage=none --color=no --compiled-modules=yes --check-bounds=yes --warn-overwrite=yes --startup-file=yes /home/vagrant/.julia/v0.7/ClassicalCiphers/test/runtests.jl`, ProcessExited(1)) [1]
│    Stacktrace:
│     [1] error(::String, ::Base.Process, ::String, ::Int64, ::String) at ./error.jl:42
│     [2] pipeline_error(::Base.Process) at ./process.jl:698
│     [3] run(::Cmd) at ./process.jl:660
│     [4] (::getfield(Base.Pkg.Entry, Symbol("##89#92")){Bool,String,Array{AbstractString,1}})() at ./pkg/entry.jl:729
│     [5] cd(::getfield(Base.Pkg.Entry, Symbol("##89#92")){Bool,String,Array{AbstractString,1}}, ::String) at ./file.jl:70
│     [6] #test!#88(::Bool, ::Function, ::String, ::Array{AbstractString,1}, ::Array{AbstractString,1}, ::Array{AbstractString,1}) at ./pkg/entry.jl:717
│     [7] (::getfield(Base.Pkg.Entry, Symbol("#kw##test!")))(::NamedTuple{(:coverage,),Tuple{Bool}}, ::typeof(Base.Pkg.Entry.test!), ::String, ::Array{AbstractString,1}, ::Array{AbstractString,1}, ::Array{AbstractString,1}) at ./<missing>:0
│     [8] #test#96(::Bool, ::Function, ::Array{AbstractString,1}) at ./pkg/entry.jl:756
│     [9] (::getfield(Base.Pkg.Entry, Symbol("#kw##test")))(::NamedTuple{(:coverage,),Tuple{Bool}}, ::typeof(Base.Pkg.Entry.test), ::Array{AbstractString,1}) at ./<missing>:0
│     [10] (::getfield(Base.Pkg.Dir, Symbol("##4#7")){Base.Iterators.IndexValue{Symbol,Bool,Tuple{Symbol},NamedTuple{(:coverage,),Tuple{Bool}}},typeof(Base.Pkg.Entry.test),Tuple{Array{AbstractString,1}}})() at ./pkg/dir.jl:36
│     [11] cd(::getfield(Base.Pkg.Dir, Symbol("##4#7")){Base.Iterators.IndexValue{Symbol,Bool,Tuple{Symbol},NamedTuple{(:coverage,),Tuple{Bool}}},typeof(Base.Pkg.Entry.test),Tuple{Array{AbstractString,1}}}, ::String) at ./file.jl:70
│     [12] #cd#1(::Base.Iterators.IndexValue{Symbol,Bool,Tuple{Symbol},NamedTuple{(:coverage,),Tuple{Bool}}}, ::Function, ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N} where N) at ./pkg/dir.jl:36
│     [13] (::getfield(Base.Pkg.Dir, Symbol("#kw##cd")))(::NamedTuple{(:coverage,),Tuple{Bool}}, ::typeof(Base.Pkg.Dir.cd), ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N} where N) at ./<missing>:0
│     [14] #test#3(::Bool, ::Function, ::String, ::Vararg{String,N} where N) at ./pkg/pkg.jl:274
│     [15] test(::String, ::Vararg{String,N} where N) at ./pkg/pkg.jl:274
│     [16] top-level scope
│     [17] eval at ./boot.jl:295 [inlined]
│     [18] eval(::Module, ::Expr) at ./sysimg.jl:71
│     [19] process_options(::Base.JLOptions) at ./client.jl:311
│     [20] _start() at ./client.jl:386
└ @ Base.Pkg.Entry entry.jl:732
ERROR: ClassicalCiphers had test errors

>>> End of log
