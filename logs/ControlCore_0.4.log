>>> 'Pkg.add("ControlCore")' log
INFO: Cloning cache of ControlCore from https://github.com/KTH-AC/ControlCore.jl.git
INFO: Installing ControlCore v0.0.1
INFO: Installing Polynomials v0.1.6
INFO: Package database updated

>>> 'Pkg.test("ControlCore")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-128-generic #177-Ubuntu SMP Tue Aug 8 11:40:23 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (613.50390625 MB free)
Uptime: 17322.0 sec
Load Avg:  1.08642578125  1.04296875  1.01318359375
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3512 MHz     772231 s        106 s      69382 s     724582 s         27 s
#2  3512 MHz     559056 s       6368 s      61646 s    1048406 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - ControlCore                   0.0.1
 - JSON                          0.9.1
2 additional packages:
 - Compat                        0.26.0
 - Polynomials                   0.1.6
INFO: Testing ControlCore
Starting continuous state space type tests...
Starting discrete SISO rational transfer function type tests...
Discrete time rational transfer function model
	y = Gu
with Ts=1.0.
Discrete time rational transfer function model
	y = Gu
with Ts=1.0.

   x + 2
------------
x^2 + 2x + 1
tf(nx=3,Ts=1.0)WARNING: s[idx]: Trying to access idx != 1
WARNING: s[idx]: Trying to access idx != 1
WARNING: s[idx]: Trying to access idx != 1
WARNING: Sampling time mismatch
WARNING: Sampling time mismatch
WARNING: Sampling time mismatch
WARNING: Sampling time mismatch
Starting continuous SISO rational transfer function type tests...
Continuous time rational transfer function model
	y = Gu
Continuous time rational transfer function model
	y = Gu

   x + 2
------------
x^2 + 2x + 1
tf(nx=3)WARNING: s[idx]: Trying to access idx != 1
WARNING: s[idx]: Trying to access idx != 1
WARNING: s[idx]: Trying to access idx != 1
Starting discrete zpk transfer function type tests...
Discrete time zpk transfer function model
	y = Gu
with Ts=1.0.
Discrete time zpk transfer function model
	y = Gu
with Ts=1.0.

  (z + 2.0)
 -----------
 (z - 1.0)^2
tf(nx=3,Ts=1.0)WARNING: s[idx]: Trying to access idx != 1
WARNING: s[idx]: Trying to access idx != 1
WARNING: Sampling time mismatch
WARNING: Sampling time mismatch
WARNING: Sampling time mismatch
WARNING: Sampling time mismatch
Starting continuous zpk transfer function type tests...
Continuous time zpk transfer function model
	y = Gu
Continuous time zpk transfer function model
	y = Gu

  (z + 2.0)
 -----------
 (z - 1.0)^2
tf(nx=3)WARNING: s[idx]: Trying to access idx != 1
WARNING: s[idx]: Trying to access idx != 1
Starting discrete MIMO transfer function type tests...
WARNING: z, p and k dimensions must match
WARNING: num and den dimensions must match
Discrete time rational transfer function model
	y = Gu
with Ts=1.0.
Discrete time rational transfer function model
	y = Gu
with Ts=1.0.

   x + 2
------------
x^2 + 2x + 1
tf(nx=3,Ts=1.0)WARNING: Sampling time mismatch
WARNING: Sampling time mismatch
WARNING: Sampling time mismatch
WARNING: MIMO transfer function inversion is not implemented yet
WARNING: Sampling time mismatch
WARNING: Sampling time mismatch
WARNING: Sampling time mismatch
WARNING: Sampling time mismatch
WARNING: MIMO transfer function inversion is not implemented yet
WARNING: Sampling time mismatch
Starting continuous MIMO transfer function type tests...
WARNING: z, p and k dimensions must match
WARNING: num and den dimensions must match
Continuous time rational transfer function model
	y = Gu
Continuous time rational transfer function model
	y = Gu

   x + 2
------------
x^2 + 2x + 1
tf(nx=3)WARNING: MIMO Transfer function inversion isn't implemented yet
WARNING: MIMO Transfer function inversion isn't implemented yet
INFO: ControlCore tests passed
INFO: No packages to install, update or remove

>>> End of log
