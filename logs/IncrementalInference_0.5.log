>>> 'Pkg.add("IncrementalInference")' log
INFO: Installing AxisAlgorithms v0.1.6
INFO: Installing BinDeps v0.7.0
INFO: Installing Blosc v0.3.0
INFO: Installing Cairo v0.3.0
INFO: Installing Calculus v0.2.2
INFO: Installing ColorTypes v0.5.2
INFO: Installing Colors v0.7.4
INFO: Installing Compose v0.5.3
INFO: Installing Contour v0.3.0
INFO: Installing CoupledFields v0.0.1
INFO: Installing DataArrays v0.4.1
INFO: Installing DataFrames v0.9.1
INFO: Installing DataStructures v0.6.1
INFO: Installing DiffBase v0.1.0
INFO: Installing Distances v0.4.1
INFO: Installing Distributions v0.13.0
INFO: Installing DualNumbers v0.3.0
INFO: Installing FileIO v0.5.1
INFO: Installing FixedPointNumbers v0.3.9
INFO: Installing Fontconfig v0.1.1
INFO: Installing ForwardDiff v0.4.2
INFO: Installing GZip v0.3.0
INFO: Installing Gadfly v0.6.3
INFO: Installing GraphViz v0.1.1
INFO: Installing Graphics v0.2.0
INFO: Installing Graphs v0.7.1
INFO: Installing HDF5 v0.8.3
INFO: Installing Hexagons v0.1.0
INFO: Installing Hiccup v0.1.1
INFO: Installing IncrementalInference v0.2.9
INFO: Installing Interpolations v0.6.2
INFO: Installing IterTools v0.1.0
INFO: Installing JLD v0.6.11
INFO: Installing Juno v0.2.7
INFO: Installing KernelDensity v0.3.2
INFO: Installing KernelDensityEstimate v0.2.4
INFO: Installing LegacyStrings v0.2.2
INFO: Installing LineSearches v0.1.5
INFO: Installing Loess v0.3.0
INFO: Installing MacroTools v0.3.7
INFO: Installing Measures v0.1.0
INFO: Installing Media v0.2.7
INFO: Installing NLsolve v0.9.1
INFO: Installing NaNMath v0.2.6
INFO: Installing Optim v0.7.8
INFO: Installing PDMats v0.7.0
INFO: Installing PositiveFactorizations v0.0.4
INFO: Installing ProgressMeter v0.3.4
INFO: Installing QuadGK v0.1.2
INFO: Installing Ratios v0.1.0
INFO: Installing Reexport v0.0.3
INFO: Installing Rmath v0.1.7
INFO: Installing SHA v0.3.3
INFO: Installing ShowItLikeYouBuildIt v0.0.1
INFO: Installing Showoff v0.1.1
INFO: Installing SortingAlgorithms v0.1.1
INFO: Installing SpecialFunctions v0.2.0
INFO: Installing StaticArrays v0.3.1
INFO: Installing StatsBase v0.17.0
INFO: Installing StatsFuns v0.5.0
INFO: Installing URIParser v0.1.8
INFO: Installing WoodburyMatrices v0.2.2
INFO: Building Blosc
INFO: Building Cairo
WARNING: BinDeps.shlib_ext is deprecated.
  likely near /home/vagrant/.julia/v0.5/Cairo/deps/build.jl:112
INFO: Building Rmath
INFO: Building Fontconfig
INFO: Building GraphViz
WARNING: BinDeps.shlib_ext is deprecated.
  likely near /home/vagrant/.julia/v0.5/GraphViz/deps/build.jl:37
INFO: Building HDF5
INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of IncrementalInference
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("IncrementalInference")' log
Julia Version 0.5.2
Commit f4c6c9d (2017-05-06 16:34 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-121-generic #170-Ubuntu SMP Wed Jun 14 09:04:33 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1085.453125 MB free)
Uptime: 50929.0 sec
Load Avg:  1.0029296875  0.998046875  1.029296875
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz    3056067 s       2164 s     292557 s    1146695 s         95 s
#2  3500 MHz    1244835 s       4672 s     143484 s    3527616 s          3 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.7.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.5
2 required packages:
 - IncrementalInference          0.2.9
 - JSON                          0.13.0
62 additional packages:
 - AxisAlgorithms                0.1.6
 - BinDeps                       0.7.0
 - Blosc                         0.3.0
 - Cairo                         0.3.0
 - Calculus                      0.2.2
 - ColorTypes                    0.5.2
 - Colors                        0.7.4
 - Compat                        0.28.0
 - Compose                       0.5.3
 - Contour                       0.3.0
 - CoupledFields                 0.0.1
 - DataArrays                    0.4.1
 - DataFrames                    0.9.1
 - DataStructures                0.6.1
 - DiffBase                      0.1.0
 - Distances                     0.4.1
 - Distributions                 0.13.0
 - DualNumbers                   0.3.0
 - FileIO                        0.5.1
 - FixedPointNumbers             0.3.9
 - Fontconfig                    0.1.1
 - ForwardDiff                   0.4.2
 - GZip                          0.3.0
 - Gadfly                        0.6.3
 - GraphViz                      0.1.1
 - Graphics                      0.2.0
 - Graphs                        0.7.1
 - HDF5                          0.8.3
 - Hexagons                      0.1.0
 - Hiccup                        0.1.1
 - Interpolations                0.6.2
 - IterTools                     0.1.0
 - JLD                           0.6.11
 - Juno                          0.2.7
 - KernelDensity                 0.3.2
 - KernelDensityEstimate         0.2.4
 - LegacyStrings                 0.2.2
 - LineSearches                  0.1.5
 - Loess                         0.3.0
 - MacroTools                    0.3.7
 - Measures                      0.1.0
 - Media                         0.2.7
 - NLsolve                       0.9.1
 - NaNMath                       0.2.6
 - Optim                         0.7.8
 - PDMats                        0.7.0
 - PositiveFactorizations        0.0.4
 - ProgressMeter                 0.3.4
 - QuadGK                        0.1.2
 - Ratios                        0.1.0
 - Reexport                      0.0.3
 - Rmath                         0.1.7
 - SHA                           0.3.3
 - ShowItLikeYouBuildIt          0.0.1
 - Showoff                       0.1.1
 - SortingAlgorithms             0.1.1
 - SpecialFunctions              0.2.0
 - StaticArrays                  0.3.1
 - StatsBase                     0.17.0
 - StatsFuns                     0.5.0
 - URIParser                     0.1.8
 - WoodburyMatrices              0.2.2
INFO: Testing IncrementalInference
[TEST] out of module evalPotential...
evalPotential sees Second.SecondType(1)
evalPotential also sees Second.SecondAgain(3)
evalPotential sees Second.SecondType(1)
evalPotential sees Second.SecondType(1)
evalPotential also sees Second.SecondAgain(3)
Check the speed is reasonable
Success
[TEST] Ensure memory return is working properly...Success
[TEST] Ensure converter types can be run from extending namespaces...Success
[TEST] packing converters work...
WARNING: Method definition describe(AbstractArray) in module StatsBase at /home/vagrant/.julia/v0.5/StatsBase/src/scalarstats.jl:560 overwritten in module DataFrames at /home/vagrant/.julia/v0.5/DataFrames/src/abstractdataframe/abstractdataframe.jl:407.

WARNING: deprecated syntax "for (...)" at /home/vagrant/.julia/v0.5/KernelDensityEstimate/src/DualTree01.jl:51.
Use "for ..." instead.
WARNING: Method definition getType(KernelDensityEstimate.BallTreeDensity) in module KernelDensityEstimate at /home/vagrant/.julia/v0.5/KernelDensityEstimate/src/BallTreeDensity01.jl:28 overwritten at /home/vagrant/.julia/v0.5/KernelDensityEstimate/src/KDE01.jl:43.
WARNING: Method definition describe(AbstractArray) in module StatsBase at /home/vagrant/.julia/v0.5/StatsBase/src/scalarstats.jl:560 overwritten in module DataFrames at /home/vagrant/.julia/v0.5/DataFrames/src/abstractdataframe/abstractdataframe.jl:407.
WARNING: Method definition describe(AbstractArray) in module StatsBase at /home/vagrant/.julia/v0.5/StatsBase/src/scalarstats.jl:560 overwritten in module DataFrames at /home/vagrant/.julia/v0.5/DataFrames/src/abstractdataframe/abstractdataframe.jl:407.
WARNING: Method definition describe(AbstractArray) in module StatsBase at /home/vagrant/.julia/v0.5/StatsBase/src/scalarstats.jl:560 overwritten in module DataFrames at /home/vagrant/.julia/v0.5/DataFrames/src/abstractdataframe/abstractdataframe.jl:407.
WARNING: Method definition describe(AbstractArray) in module StatsBase at /home/vagrant/.julia/v0.5/StatsBase/src/scalarstats.jl:560 overwritten in module DataFrames at /home/vagrant/.julia/v0.5/DataFrames/src/abstractdataframe/abstractdataframe.jl:407.
WARNING: Method definition describe(AbstractArray) in module StatsBase at /home/vagrant/.julia/v0.5/StatsBase/src/scalarstats.jl:560 overwritten in module DataFrames at /home/vagrant/.julia/v0.5/DataFrames/src/abstractdataframe/abstractdataframe.jl:407.
WARNING: using IncrementalInference.evalPotential in module Main conflicts with an existing identifier.
WARNING: setDefaultNodeData! -- deprecated use of stdev.
Testing conversion to packed function node data structure and back
Testing conversion to packed variable node data structure and back
Conversions and comparisons agree
Success
[TEST] generic root finding by numeric solve of residual functions...
Test shuffling function
y = [11.0,12.0,13.0]
y .% 10 = [1.0,2.0,3.0]
yy = y .% 10.0 = [1.0,2.0,3.0]
y = [11.0,12.0,13.0]
y .% 10 = [1.0,2.0,3.0]
yy = y .% 10.0 = [1.0,2.0,3.0]
y = [11.0,12.0,13.0]
y .% 10 = [1.0,2.0,3.0]
yy = y .% 10.0 = [1.0,2.0,3.0]
y = [11.0,12.0,13.0]
y .% 10 = [1.0,2.0,3.0]
yy = y .% 10.0 = [1.0,2.0,3.0]
y = [11.0,12.0,13.0]
y .% 10 = [1.0,2.0,3.0]
yy = y .% 10.0 = [1.0,2.0,3.0]
y = [11.0,12.0,13.0]
y .% 10 = [1.0,2.0,3.0]
yy = y .% 10.0 = [1.0,2.0,3.0]
y = [11.0,12.0,13.0]
y .% 10 = [1.0,2.0,3.0]
yy = y .% 10.0 = [1.0,2.0,3.0]
y = [11.0,12.0,13.0]
y .% 10 = [1.0,2.0,3.0]
yy = y .% 10.0 = [1.0,2.0,3.0]
y = [11.0,12.0,13.0]
y .% 10 = [1.0,2.0,3.0]
yy = y .% 10.0 = [1.0,2.0,3.0]
y = [11.0,12.0,13.0]
y .% 10 = [1.0,2.0,3.0]
yy = y .% 10.0 = [1.0,2.0,3.0]
Test if shuffling results in correct mapping for solving
starting with x0=[11.0,12.0]
result y=[1.0,2.0]
starting with x0=[11.0,12.0]
result y=[1.0,2.0]
starting with x0=[11.0,12.0]
result y=[1.0,2.0]
starting with x0=[11.0,12.0]
result y=[1.0,2.0]
starting with x0=[11.0,12.0]
result y=[1.0,2.0]
starting with x0=[11.0,12.0]
result y=[1.0,2.0]
starting with x0=[11.0,12.0]
result y=[1.0,2.0]
starting with x0=[11.0,12.0]
result y=[1.0,2.0]
starting with x0=[11.0,12.0]
result y=[1.0,2.0]
starting with x0=[11.0,12.0]
result y=[1.0,2.0]
WARNING: Test FastRootGenericWrapParam{T} not implemented yet
Success
[TEST] GenericWrapParam functors...
WARNING: using Distributions.params in module Main conflicts with an existing identifier.
FunctorWorks
FunctorArray
a1 = [-1.0 0.302573 0.055396; 0.987509 0.848549 0.788613]
GenericWrapParam test
  0.025121 seconds (2.90 k allocations: 139.113 KB)
Test in factor graph setting...
  0.022776 seconds (3.31 k allocations: 156.083 KB)
Test with NLsolve for root finding using generalwrapper functor.
  0.168902 seconds (86.98 k allocations: 3.916 MB)
Test with FastRootGenericWrapParam for un-permuted root finding...
gwp.varidx = 2
zDim = size(gwp.measurement,1) = 1
  0.213447 seconds (234.42 k allocations: 8.638 MB)
and in the reverse direction, achieved by simply changing GenericWrapParam.varidx to 1...
gwp.varidx = 1 = 1
  0.001083 seconds (9.00 k allocations: 560.938 KB)
Test with FastRootGenericWrapParam for permuted root finding...
WARNING: test not implemented yet
GenericWrapParam testing in factor graph context...

Building Bayes net...
(vert.label,getData(vert).BayesNetVertID) = ("x1",0)
(vert.label,getData(vert).BayesNetVertID) = ("x2",0)

Eliminating 1
===============

adding marginal to
x.index = 2

Eliminating 2
===============

adding marginal to
Bayes Net
Bayes Tree
Find potential functions for each clique
Get potentials x2,x1,: 
collect(singr) = Bool[false; true]
Do recursive inference over tree
Start Clique x2,x1,:  =============================
====================== Clique x2,x1,:  =============================
up w 0 msgs---------- successive fnc approx ------------x2,x1,: 
#1	 -- 
fmcmc! -- finished on x2,x1,: 
---------- successive fnc approx ------------x2,x1,: 
#1	 -- [2x0p,d1,N200], [drct] 
#2	 -- [2x0p,d1,N200], [drct] 
#3	 -- [2x0p,d1,N200], [drct] 
fmcmc! -- finished on x2,x1,: 
Outgoing msg density on: updateFGBT! up -- finished updating x2,x1,: 
End Clique x2,x1,:  =============================
====================== Clique x2,x1,:  =============================
dwn---------- successive fnc approx ------------x2,x1,: 
fmcmc! -- finished on x2,x1,: 
Outgoing msg density on: Do recursive inference over tree
Start Clique x2,x1,:  =============================
====================== Clique x2,x1,:  =============================
up w 0 msgs---------- successive fnc approx ------------x2,x1,: 
#1	 -- 
fmcmc! -- finished on x2,x1,: 
---------- successive fnc approx ------------x2,x1,: 
#1	 -- [2x0p,d1,N200], [drct] 
#2	 -- [2x0p,d1,N200], [drct] 
#3	 -- [2x0p,d1,N200], [drct] 
fmcmc! -- finished on x2,x1,: 
Outgoing msg density on: updateFGBT! up -- finished updating x2,x1,: 
End Clique x2,x1,:  =============================
====================== Clique x2,x1,:  =============================
dwn---------- successive fnc approx ------------x2,x1,: 
fmcmc! -- finished on x2,x1,: 
Outgoing msg density on: Do recursive inference over tree
Start Clique x2,x1,:  =============================
====================== Clique x2,x1,:  =============================
up w 0 msgs---------- successive fnc approx ------------x2,x1,: 
#1	 -- 
fmcmc! -- finished on x2,x1,: 
---------- successive fnc approx ------------x2,x1,: 
#1	 -- [2x0p,d1,N200], [drct] 
#2	 -- [2x0p,d1,N200], [drct] 
#3	 -- [2x0p,d1,N200], [drct] 
fmcmc! -- finished on x2,x1,: 
Outgoing msg density on: updateFGBT! up -- finished updating x2,x1,: 
End Clique x2,x1,:  =============================
====================== Clique x2,x1,:  =============================
dwn---------- successive fnc approx ------------x2,x1,: 
fmcmc! -- finished on x2,x1,: 
Outgoing msg density on:   6.092892 seconds (6.25 M allocations: 319.726 MB, 1.73% gc time)
Success
[TEST] with simple local constraint examples Odo, Obsv2...
WARNING: setDefaultNodeData! -- deprecated use of stdev.

Building Bayes net...
(vert.label,getData(vert).BayesNetVertID) = ("x1",0)
(vert.label,getData(vert).BayesNetVertID) = ("x2",0)

Eliminating 1
===============

adding marginal to
x.index = 3

Eliminating 3
===============

adding marginal to
Bayes Net
Bayes Tree
Find potential functions for each clique
Get potentials x2,x1,: 
collect(singr) = Bool[false; true]
Do multi-process inference over tree
child.attributes["label"] = "x2,x1,: "
Start Clique x2,x1,:  =============================
====================== Clique x2,x1,:  =============================
End Clique x2,x1,:  =============================
processPostOrderStacks! -- THIS ONLY HAPPENS AFTER SYNC
	From worker 2:	up w 0 msgs---------- successive fnc approx ------------x2,x1,: 
	From worker 2:	#1	 -- 
	From worker 2:	fmcmc! -- finished on x2,x1,: 
	From worker 2:	---------- successive fnc approx ------------x2,x1,: 
	From worker 2:	#1	 -- [2x0p,d1,N200], [drct] 
	From worker 2:	#2	 -- [2x0p,d1,N200], [drct] 
	From worker 2:	#3	 -- [2x0p,d1,N200], [drct] 
	From worker 2:	fmcmc! -- finished on x2,x1,: 
upward leftovers, Int64[]
updateFGBT! up -- finished updating x2,x1,: 
	From worker 3:	=================== Iter Clique x2,x1,:  ===========================
	From worker 3:	dwn---------- successive fnc approx ------------x2,x1,: 
	From worker 3:	fmcmc! -- finished on x2,x1,: 
dwnward leftovers, Int64[]
Success
[TEST] partial constraints...
test evaluation of full constraint prior
test evaluation of partial constraint prior

Building Bayes net...
(vert.label,getData(vert).BayesNetVertID) = ("x1",0)

Eliminating 1
===============

adding marginal to
Bayes Net
Bayes Tree
Find potential functions for each clique
Get potentials x1,: 
collect(singr) = Bool[true; true]
Do recursive inference over tree
Start Clique x1,:  =============================
====================== Clique x1,:  =============================
up w 0 msgs---------- successive fnc approx ------------x1,: 
#1	 -- 
fmcmc! -- finished on x1,: 
---------- successive fnc approx ------------x1,: 
#1	 -- [1x1p,d2,N50], 
fmcmc! -- finished on x1,: 
Outgoing msg density on: updateFGBT! up -- finished updating x1,: 
End Clique x1,:  =============================
====================== Clique x1,:  =============================
dwn---------- successive fnc approx ------------x1,: 
#1	 -- [1x1p,d2,N50], 
fmcmc! -- finished on x1,: 
Outgoing msg density on: test evaluation of multiple simultaneous partial constraints
test findRelatedFromPotential...
test belief prediction...
[0x1p,d2,N50],[0x1p,d2,N50],[0x2p,d2,N50],
Building Bayes net...
(vert.label,getData(vert).BayesNetVertID) = ("x1",0)
(vert.label,getData(vert).BayesNetVertID) = ("x2",0)

Eliminating 1
===============

adding marginal to
x.index = 4

Eliminating 4
===============

adding marginal to
Bayes Net
Bayes Tree
Find potential functions for each clique
Get potentials x2,x1,: 
collect(singr) = Bool[false; true; true; true]
Do recursive inference over tree
Start Clique x2,x1,:  =============================
====================== Clique x2,x1,:  =============================
up w 0 msgs---------- successive fnc approx ------------x2,x1,: 
#1	 -- 
fmcmc! -- finished on x2,x1,: 
---------- successive fnc approx ------------x2,x1,: 
#1	 -- [0x2p,d2,N50], [1x2p,d2,N50], 
#2	 -- [0x2p,d2,N50], [1x2p,d2,N50], 
#3	 -- [0x2p,d2,N50], [1x2p,d2,N50], 
fmcmc! -- finished on x2,x1,: 
Outgoing msg density on: updateFGBT! up -- finished updating x2,x1,: 
End Clique x2,x1,:  =============================
====================== Clique x2,x1,:  =============================
dwn---------- successive fnc approx ------------x2,x1,: 
fmcmc! -- finished on x2,x1,: 
Outgoing msg density on: Success
[TEST] partial constraints...
Success
[TEST] with local Graphs.jl dictionary and arrays only (multicore)...
WARNING: setDefaultNodeData! -- deprecated use of stdev.

Building Bayes net...
(vert.label,getData(vert).BayesNetVertID) = ("x3",0)
(vert.label,getData(vert).BayesNetVertID) = ("x4",0)
(vert.label,getData(vert).BayesNetVertID) = ("x0",0)
(vert.label,getData(vert).BayesNetVertID) = ("x6",0)
(vert.label,getData(vert).BayesNetVertID) = ("l1",0)
(vert.label,getData(vert).BayesNetVertID) = ("x7",0)
(vert.label,getData(vert).BayesNetVertID) = ("x2",0)
(vert.label,getData(vert).BayesNetVertID) = ("x5",0)

Eliminating 5
===============

adding marginal to
x.index = 3
x.index = 8
x.index = 10

Eliminating 8
===============

adding marginal to
x.index = 10
x.index = 13
x.index = 3

Eliminating 1
===============

adding marginal to
x.index = 3

Eliminating 15
===============

adding marginal to
x.index = 13
x.index = 17

Eliminating 10
===============

adding marginal to
x.index = 13
x.index = 3

Eliminating 17
===============

adding marginal to
x.index = 13

Eliminating 3
===============

adding marginal to
x.index = 13

Eliminating 13
===============

adding marginal to
Bayes Net
Bayes Tree
Find potential functions for each clique
Get potentials x7,x6,: x5,
collect(singr) = Bool[false; true; false]
Get potentials x0,: x2,
collect(singr) = Bool[true; false]
Get potentials x3,: x2,x4,l1,
collect(singr) = Bool[false; true; false; false]
Get potentials x5,x2,l1,x4,: 
collect(singr) = Bool[false; false; true; true; true; true; true]
(xx,ll) = ls(fg) = (Symbol[:x0,:x2,:x3,:x4,:x5,:x6,:x7],Symbol[:l1])
Do recursive inference over tree
Start Clique x5,x2,l1,x4,:  =============================
upMsgRec -- calling new recursive on x7,x6,: x5,
Start Clique x7,x6,: x5, =============================
====================== Clique x7,x6,: x5, =============================
up w 0 msgs---------- successive fnc approx ------------x7,x6,: x5,
#1	 -- 
fmcmc! -- finished on x7,x6,: x5,
---------- successive fnc approx ------------x7,x6,: x5,
#1	 -- [2x0p,d1,N100], [2x0p,d1,N100], [drct] 
#2	 -- [2x0p,d1,N100], [2x0p,d1,N100], [drct] 
#3	 -- [2x0p,d1,N100], [2x0p,d1,N100], [drct] 
fmcmc! -- finished on x7,x6,: x5,
Outgoing msg density on: updateFGBT! up -- finished updating x7,x6,: x5,
End Clique x7,x6,: x5, =============================
upMsgRec -- finished with x7,x6,: x5,, w [13])
upMsgRec -- calling new recursive on x0,: x2,
Start Clique x0,: x2, =============================
====================== Clique x0,: x2, =============================
up w 0 msgs---------- successive fnc approx ------------x0,: x2,
#1	 -- 
fmcmc! -- finished on x0,: x2,
---------- successive fnc approx ------------x0,: x2,
#1	 -- [2x0p,d1,N100], [drct] 
#2	 -- [2x0p,d1,N100], [drct] 
#3	 -- [2x0p,d1,N100], [drct] 
fmcmc! -- finished on x0,: x2,
Outgoing msg density on: updateFGBT! up -- finished updating x0,: x2,
End Clique x0,: x2, =============================
upMsgRec -- finished with x0,: x2,, w [3])
upMsgRec -- calling new recursive on x3,: x2,x4,l1,
Start Clique x3,: x2,x4,l1, =============================
====================== Clique x3,: x2,x4,l1, =============================
up w 0 msgs---------- successive fnc approx ------------x3,: x2,x4,l1,
#1	 -- 
fmcmc! -- finished on x3,: x2,x4,l1,
---------- successive fnc approx ------------x3,: x2,x4,l1,
#1	 -- [4x0p,d1,N100], [drct] [drct] [drct] 
#2	 -- [4x0p,d1,N100], [drct] [drct] [drct] 
#3	 -- [4x0p,d1,N100], [drct] [drct] [drct] 
fmcmc! -- finished on x3,: x2,x4,l1,
Outgoing msg density on: updateFGBT! up -- finished updating x3,: x2,x4,l1,
End Clique x3,: x2,x4,l1, =============================
upMsgRec -- finished with x3,: x2,x4,l1,, w [10,3,8])
====================== Clique x5,x2,l1,x4,:  =============================
up w 3 msgs---------- successive fnc approx ------------x5,x2,l1,x4,: 
#1	 -- 
fmcmc! -- finished on x5,x2,l1,x4,: 
---------- successive fnc approx ------------x5,x2,l1,x4,: 
#1	 -- [2x0p,d1,N100], [2x0p,d1,N100], [3x0p,d1,N100], 
#2	 -- [2x0p,d1,N100], [2x0p,d1,N100], [3x0p,d1,N100], 
#3	 -- [2x0p,d1,N100], [2x0p,d1,N100], [3x0p,d1,N100], 
fmcmc! -- finished on x5,x2,l1,x4,: 
---------- successive fnc approx ------------x5,x2,l1,x4,: 
#1	 -- [2x0p,d1,N100], 
fmcmc! -- finished on x5,x2,l1,x4,: 
Outgoing msg density on: updateFGBT! up -- finished updating x5,x2,l1,x4,: 
End Clique x5,x2,l1,x4,:  =============================
====================== Clique x5,x2,l1,x4,:  =============================
dwn---------- successive fnc approx ------------x5,x2,l1,x4,: 
fmcmc! -- finished on x5,x2,l1,x4,: 
Outgoing msg density on: ====================== Clique x7,x6,: x5, =============================
dwn---------- successive fnc approx ------------x7,x6,: x5,
#1	 -- [2x0p,d1,N100], [2x0p,d1,N100], 
#2	 -- [2x0p,d1,N100], [2x0p,d1,N100], 
#3	 -- [2x0p,d1,N100], [2x0p,d1,N100], 
fmcmc! -- finished on x7,x6,: x5,
Dwn msg keys [13,10,3,8]
Outgoing msg density on: 
====================== Clique x0,: x2, =============================
dwn---------- successive fnc approx ------------x0,: x2,
#1	 -- [2x0p,d1,N100], 
fmcmc! -- finished on x0,: x2,
Dwn msg keys [13,10,3,8]
Outgoing msg density on: 
====================== Clique x3,: x2,x4,l1, =============================
dwn---------- successive fnc approx ------------x3,: x2,x4,l1,
#1	 -- [4x0p,d1,N100], 
fmcmc! -- finished on x3,: x2,x4,l1,
Dwn msg keys [13,10,3,8]
Outgoing msg density on: 


Do multi-process inference over tree
child.attributes["label"] = "x5,x2,l1,x4,: "
child.attributes["label"] = "x3,: x2,x4,l1,"
child.attributes["label"] = "x0,: x2,"
child.attributes["label"] = "x7,x6,: x5,"
Start Clique x7,x6,: x5, =============================
====================== Clique x7,x6,: x5, =============================
Start Clique x0,: x2, =============================
====================== Clique x0,: x2, =============================
Start Clique x3,: x2,x4,l1, =============================
====================== Clique x3,: x2,x4,l1, =============================
End Clique x0,: x2, =============================
Start Clique x5,x2,l1,x4,:  =============================
asyncProcessPostStacks -- 1, cliq=x5,x2,l1,x4,: , start on child x7,x6,: x5, haskey=false
End Clique x7,x6,: x5, =============================
End Clique x3,: x2,x4,l1, =============================
	From worker 2:	Outgoing msg density on: up w 0 msgs---------- successive fnc approx ------------x3,: x2,x4,l1,
	From worker 2:	#1	 -- 
	From worker 2:	fmcmc! -- finished on x3,: x2,x4,l1,
	From worker 2:	---------- successive fnc approx ------------x3,: x2,x4,l1,
	From worker 2:	#1	 -- [4x0p,d1,N200], [drct] [drct] [drct] 
	From worker 2:	#2	 -- [4x0p,d1,N200], [drct] [drct] [drct] 
	From worker 2:	#3	 -- [4x0p,d1,N200], [drct] [drct] [drct] 
	From worker 2:	fmcmc! -- finished on x3,: x2,x4,l1,
	From worker 5:	up w 0 msgs---------- successive fnc approx ------------x0,: x2,
	From worker 5:	#1	 -- 
	From worker 5:	fmcmc! -- finished on x0,: x2,
	From worker 5:	---------- successive fnc approx ------------x0,: x2,
	From worker 4:	up w 0 msgs---------- successive fnc approx ------------x7,x6,: x5,
	From worker 4:	#1	 -- 
	From worker 4:	fmcmc! -- finished on x7,x6,: x5,
	From worker 4:	---------- successive fnc approx ------------x7,x6,: x5,
	From worker 5:	#1	 -- [2x0p,d1,N200], [drct] 
	From worker 5:	#2	 -- [2x0p,d1,N200], [drct] 
	From worker 4:	#1	 -- [2x0p,d1,N200], [2x0p,d1,N200], [drct] 
	From worker 5:	#3	 -- [2x0p,d1,N200], [drct] 
	From worker 5:	fmcmc! -- finished on x0,: x2,
	From worker 4:	#2	 -- [2x0p,d1,N200], [2x0p,d1,N200], [drct] 
	From worker 4:	#3	 -- [2x0p,d1,N200], [2x0p,d1,N200], [drct] 
	From worker 4:	fmcmc! -- finished on x7,x6,: x5,
updateFGBT! up -- finished updating x7,x6,: x5,
asyncProcessPostStacks -- 1, cliq=x5,x2,l1,x4,: , start on child x0,: x2, haskey=false
updateFGBT! up -- finished updating x0,: x2,
asyncProcessPostStacks -- 1, cliq=x5,x2,l1,x4,: , start on child x3,: x2,x4,l1, haskey=false
updateFGBT! up -- finished updating x3,: x2,x4,l1,
====================== Clique x5,x2,l1,x4,:  =============================
End Clique x5,x2,l1,x4,:  =============================
processPostOrderStacks! -- THIS ONLY HAPPENS AFTER SYNC
	From worker 3:	Outgoing msg density on: up w 3 msgs---------- successive fnc approx ------------x5,x2,l1,x4,: 
	From worker 3:	#1	 -- 
	From worker 3:	fmcmc! -- finished on x5,x2,l1,x4,: 
	From worker 3:	---------- successive fnc approx ------------x5,x2,l1,x4,: 
	From worker 3:	#1	 -- [2x0p,d1,N200], [2x0p,d1,N200], [3x0p,d1,N200], 
	From worker 3:	#2	 -- [2x0p,d1,N200], [2x0p,d1,N200], [3x0p,d1,N200], 
	From worker 3:	#3	 -- [2x0p,d1,N200], [2x0p,d1,N200], [3x0p,d1,N200], 
	From worker 3:	fmcmc! -- finished on x5,x2,l1,x4,: 
	From worker 3:	---------- successive fnc approx ------------x5,x2,l1,x4,: 
	From worker 3:	#1	 -- [2x0p,d1,N200], 
	From worker 3:	fmcmc! -- finished on x5,x2,l1,x4,: 
upward leftovers, Int64[]
updateFGBT! up -- finished updating x5,x2,l1,x4,: 
	From worker 4:	Outgoing msg density on: =================== Iter Clique x5,x2,l1,x4,:  ===========================
	From worker 4:	dwn---------- successive fnc approx ------------x5,x2,l1,x4,: 
	From worker 4:	fmcmc! -- finished on x5,x2,l1,x4,: 
	From worker 3:	Outgoing msg density on: =================== Iter Clique x3,: x2,x4,l1, ===========================
	From worker 3:	dwn---------- successive fnc approx ------------x3,: x2,x4,l1,
	From worker 5:	Outgoing msg density on: =================== Iter Clique x7,x6,: x5, ===========================
	From worker 5:	dwn---------- successive fnc approx ------------x7,x6,: x5,
	From worker 2:	Outgoing msg density on: =================== Iter Clique x0,: x2, ===========================
	From worker 2:	dwn---------- successive fnc approx ------------x0,: x2,
	From worker 5:	#1	 -- [2x0p,d1,N200], [2x0p,d1,N200], 
	From worker 2:	#1	 -- [2x0p,d1,N200], 
	From worker 2:	fmcmc! -- finished on x0,: x2,
	From worker 2:	Dwn msg keys [13,10,3,8]
	From worker 2:	Outgoing msg density on: 
	From worker 3:	#1	 -- [4x0p,d1,N200], 
	From worker 3:	fmcmc! -- finished on x3,: x2,x4,l1,
	From worker 3:	Dwn msg keys [13,10,3,8]
	From worker 3:	Outgoing msg density on: 
	From worker 3:	
	From worker 3:	
	From worker 5:	#2	 -- [2x0p,d1,N200], [2x0p,d1,N200], 
	From worker 5:	#3	 -- [2x0p,d1,N200], [2x0p,d1,N200], 
	From worker 5:	fmcmc! -- finished on x7,x6,: x5,
	From worker 5:	Dwn msg keys [13,10,3,8]
	From worker 5:	Outgoing msg density on: 
dwnward leftovers, Int64[]
Success
[TEST] saving to and loading from .jld file
Success
[TEST] plot functions...
WARNING: using Gadfly.Col in module Main conflicts with an existing identifier.
Success
WARNING: plotMCMC needs ImageMagick on osx, not running test yet.
	From worker 4:	Outgoing msg density on: INFO: IncrementalInference tests passed

>>> End of log
