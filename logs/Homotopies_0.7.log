>>> 'Pkg.add("Homotopies")' log
[ Info: Cloning cache of Homotopies from https://github.com/JuliaHomotopyContinuation/Homotopies.jl.git @ Base.Pkg.Cache cache.jl:43
[ Info: Installing FixedPolynomials v0.2.2 @ Base.Pkg.Entry entry.jl:543
[ Info: Installing Homotopies v0.1.0 @ Base.Pkg.Entry entry.jl:543
[ Info: Installing MultivariatePolynomials v0.1.1 @ Base.Pkg.Entry entry.jl:543
[ Info: Package database updated @ Base.Pkg.Entry entry.jl:32
┌ Info: METADATA is out-of-date — you may not have the latest version of Homotopies
│ Use `Pkg.update()` to get the latest versions of your packages
└ @ Base.Pkg.Entry entry.jl:74

>>> 'Pkg.test("Homotopies")' log
Julia Version 0.7.0-DEV.3246
Commit 2138144d3a (2018-01-04 02:34 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
      Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-135-generic #184-Ubuntu SMP Wed Oct 18 11:55:51 UTC 2017 x86_64 x86_64
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
              speed         user         nice          sys         idle          irq
       #1  3499 MHz    5472974 s        131 s     274543 s    1226684 s         64 s
       #2  3499 MHz    1030409 s         52 s     106742 s    6991632 s          0 s
       
  Memory: 2.93927001953125 GB (761.703125 MB free)
  Uptime: 82485.0 sec
  Load Avg:  1.0263671875  0.98876953125  1.0185546875
  WORD_SIZE: 64
  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant
Packages:
  Package Directory: /home/vagrant/.julia/v0.7
  Package Status:
2 required packages:
 - Homotopies                    0.1.0
 - JSON                          0.16.3
4 additional packages:
 - Compat                        0.42.0
 - FixedPolynomials              0.2.2
 - MultivariatePolynomials       0.1.1
 - Nullables                     0.0.2
[ Info: Computing test dependencies for Homotopies... @ Base.Pkg.Entry entry.jl:713
[ Info: Installing DynamicPolynomials v0.0.2 @ Base.Pkg.Entry entry.jl:543
[ Info: Testing Homotopies @ Base.Pkg.Entry entry.jl:723
WARNING: Base.Test is deprecated, run `using Test` instead.
  likely near /home/vagrant/.julia/v0.7/Homotopies/test/runtests.jl:2
WARNING: importing deprecated binding Base.IntSet into DynamicPolynomials.
WARNING: Base.IntSet is deprecated, use BitSet instead.
  likely near /home/vagrant/.julia/v0.7/Homotopies/test/straightline_test.jl:1
WARNING: Base.IntSet is deprecated, use BitSet instead.
  likely near /home/vagrant/.julia/v0.7/Homotopies/test/straightline_test.jl:1
WARNING: Base.IntSet is deprecated, use BitSet instead.
  likely near /home/vagrant/.julia/v0.7/Homotopies/test/straightline_test.jl:1
WARNING: Base.IntSet is deprecated, use BitSet instead.
  likely near /home/vagrant/.julia/v0.7/Homotopies/test/straightline_test.jl:1
WARNING: Base.IntSet is deprecated, use BitSet instead.
  likely near /home/vagrant/.julia/v0.7/Homotopies/test/straightline_test.jl:1
WARNING: Base.IntSet is deprecated, use BitSet instead.
  likely near /home/vagrant/.julia/v0.7/Homotopies/test/straightline_test.jl:1
WARNING: Base.Complex128 is deprecated, use ComplexF64 instead.
  likely near /home/vagrant/.julia/v0.7/Homotopies/test/straightline_test.jl:1
in top-level scope at /home/vagrant/.julia/v0.7/Homotopies/test/straightline_test.jl
WARNING: Base.Complex128 is deprecated, use ComplexF64 instead.
  likely near /home/vagrant/.julia/v0.7/Homotopies/test/straightline_test.jl:1
in top-level scope at /home/vagrant/.julia/v0.7/Homotopies/test/straightline_test.jl
WARNING: Base.Complex128 is deprecated, use ComplexF64 instead.
  likely near /home/vagrant/.julia/v0.7/Homotopies/test/straightline_test.jl:1
in top-level scope at /home/vagrant/.julia/v0.7/Homotopies/test/straightline_test.jl
WARNING: Base.Complex128 is deprecated, use ComplexF64 instead.
  likely near /home/vagrant/.julia/v0.7/Homotopies/test/straightline_test.jl:1
in top-level scope at /home/vagrant/.julia/v0.7/Homotopies/test/straightline_test.jl
WARNING: Base.Complex128 is deprecated, use ComplexF64 instead.
  likely near /home/vagrant/.julia/v0.7/Homotopies/test/straightline_test.jl:1
in top-level scope at /home/vagrant/.julia/v0.7/Homotopies/test/straightline_test.jl
WARNING: Base.Complex128 is deprecated, use ComplexF64 instead.
  likely near /home/vagrant/.julia/v0.7/Homotopies/test/straightline_test.jl:1
in top-level scope at /home/vagrant/.julia/v0.7/Homotopies/test/straightline_test.jl
WARNING: Base.Complex128 is deprecated, use ComplexF64 instead.
  likely near /home/vagrant/.julia/v0.7/Homotopies/test/straightline_test.jl:1
in top-level scope at /home/vagrant/.julia/v0.7/Homotopies/test/straightline_test.jl
WARNING: Base.Complex128 is deprecated, use ComplexF64 instead.
  likely near /home/vagrant/.julia/v0.7/Homotopies/test/straightline_test.jl:1
in top-level scope at /home/vagrant/.julia/v0.7/Homotopies/test/straightline_test.jl
WARNING: Base.Complex128 is deprecated, use ComplexF64 instead.
  likely near /home/vagrant/.julia/v0.7/Homotopies/test/straightline_test.jl:1
in top-level scope at /home/vagrant/.julia/v0.7/Homotopies/test/straightline_test.jl
WARNING: Base.Complex128 is deprecated, use ComplexF64 instead.
  likely near /home/vagrant/.julia/v0.7/Homotopies/test/straightline_test.jl:1
in top-level scope at /home/vagrant/.julia/v0.7/Homotopies/test/straightline_test.jl
┌ Warning: Constructors no longer fall back to `convert`. A constructor `DynamicPolynomials.Monomial{true}(::DynamicPolynomials.PolyVar{true})` should be defined instead.
│   caller = Type at mono.jl:25 [inlined]
└ @ Core mono.jl:25
┌ Warning: Constructors no longer fall back to `convert`. A constructor `DynamicPolynomials.Monomial{true}(::DynamicPolynomials.PolyVar{true})` should be defined instead.
│   caller = DynamicPolynomials.Term{true,T} where T(::DynamicPolynomials.PolyVar{true}) at term.jl:11
└ @ DynamicPolynomials term.jl:11
┌ Warning: Constructors no longer fall back to `convert`. A constructor `DynamicPolynomials.Term{true,Int64}(::DynamicPolynomials.Monomial{true})` should be defined instead.
│   caller = DynamicPolynomials.Term{true,T} where T(::DynamicPolynomials.Monomial{true}) at term.jl:10
└ @ DynamicPolynomials term.jl:10
WARNING: Base.IntSet is deprecated, use BitSet instead.
  likely near /home/vagrant/.julia/v0.7/Homotopies/test/straightline_test.jl:1
WARNING: Base.IntSet is deprecated, use BitSet instead.
  likely near /home/vagrant/.julia/v0.7/Homotopies/test/straightline_test.jl:1
WARNING: Base.IntSet is deprecated, use BitSet instead.
  likely near /home/vagrant/.julia/v0.7/Homotopies/test/straightline_test.jl:1
┌ Warning: `Array{T, 2}(m::Int, n::Int) where T` is deprecated, use `Array{T, 2}(uninitialized, m, n)` instead.
│   caller = _coefficients_exponents at poly.jl:67 [inlined]
└ @ Core poly.jl:67
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = _coefficients_exponents at poly.jl:68 [inlined]
└ @ Core poly.jl:68
┌ Warning: `findfirst(A, v)` is deprecated, use `findfirst(equalto(v), A)` instead.
│   caller = degree at monomial.jl:75 [inlined]
└ @ Core monomial.jl:75
┌ Warning: `Array{T, 2}(m::Int, n::Int) where T` is deprecated, use `Array{T, 2}(uninitialized, m, n)` instead.
│   caller = _coefficients_exponents at poly.jl:67 [inlined]
└ @ Core poly.jl:67
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = _coefficients_exponents at poly.jl:68 [inlined]
└ @ Core poly.jl:68
┌ Warning: `findfirst(A, v)` is deprecated, use `findfirst(equalto(v), A)` instead.
│   caller = degree at monomial.jl:75 [inlined]
└ @ Core monomial.jl:75
┌ Warning: `Array{T, 2}(m::Int, n::Int) where T` is deprecated, use `Array{T, 2}(uninitialized, m, n)` instead.
│   caller = _coefficients_exponents at poly.jl:67 [inlined]
└ @ Core poly.jl:67
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = _coefficients_exponents at poly.jl:68 [inlined]
└ @ Core poly.jl:68
┌ Warning: `findfirst(A, v)` is deprecated, use `findfirst(equalto(v), A)` instead.
│   caller = degree at monomial.jl:75 [inlined]
└ @ Core monomial.jl:75
┌ Warning: `zeros(a::AbstractArray, ::Type{T}) where T` is deprecated, use `fill!(similar(a, T), 0)` instead, or `fill!(similar(a, T), zero(T))` where necessary.
│   caller = evaluate(::StraightLineHomotopy{Float64}, ::Array{Float64,1}, ::Float64) at polynomial.jl:8
└ @ Homotopies polynomial.jl:8
┌ Warning: `zeros(a::AbstractArray, ::Type{T}) where T` is deprecated, use `fill!(similar(a, T), 0)` instead, or `fill!(similar(a, T), zero(T))` where necessary.
│   caller = evaluate at polynomial.jl:8 [inlined]
└ @ Core polynomial.jl:8
┌ Warning: `Array{T, 2}(m::Int, n::Int) where T` is deprecated, use `Array{T, 2}(uninitialized, m, n)` instead.
│   caller = computetables(::Array{UInt16,2}) at tables.jl:27
└ @ FixedPolynomials tables.jl:27
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = FixedPolynomials.PolyConfig(::FixedPolynomials.Polynomial{Float64}, ::Array{UInt16,2}, ::Array{UInt16,2}, ::Type{Float64}) at config.jl:22
└ @ FixedPolynomials config.jl:22
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = FixedPolynomials.PolyConfig(::FixedPolynomials.Polynomial{Float64}, ::Array{UInt16,2}, ::Array{UInt16,2}, ::Type{Float64}) at config.jl:36
└ @ FixedPolynomials config.jl:36
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = FixedPolynomials.PolyConfig(::FixedPolynomials.Polynomial{Float64}, ::Array{UInt16,2}, ::Array{UInt16,2}, ::Type{Float64}) at config.jl:49
└ @ FixedPolynomials config.jl:49
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = FixedPolynomials.PolyConfig(::FixedPolynomials.Polynomial{Float64}, ::Array{UInt16,2}, ::Array{UInt16,2}, ::Type{Float64}) at config.jl:50
└ @ FixedPolynomials config.jl:50
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = FixedPolynomials.PolyConfig(::FixedPolynomials.Polynomial{Float64}, ::Array{UInt16,2}, ::Array{UInt16,2}, ::Type{Float64}) at config.jl:52
└ @ FixedPolynomials config.jl:52
┌ Warning: `zeros(a::AbstractArray, ::Type{T}) where T` is deprecated, use `fill!(similar(a, T), 0)` instead, or `fill!(similar(a, T), zero(T))` where necessary.
│   caller = evaluate at polynomial.jl:13 [inlined]
└ @ Core polynomial.jl:13
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = FixedPolynomials.PolyConfig(::FixedPolynomials.Polynomial{Float64}, ::Array{UInt16,2}, ::Array{UInt16,2}, ::Type{Complex{Float64}}) at config.jl:22
└ @ FixedPolynomials config.jl:22
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = FixedPolynomials.PolyConfig(::FixedPolynomials.Polynomial{Float64}, ::Array{UInt16,2}, ::Array{UInt16,2}, ::Type{Complex{Float64}}) at config.jl:36
└ @ FixedPolynomials config.jl:36
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = FixedPolynomials.PolyConfig(::FixedPolynomials.Polynomial{Float64}, ::Array{UInt16,2}, ::Array{UInt16,2}, ::Type{Complex{Float64}}) at config.jl:49
└ @ FixedPolynomials config.jl:49
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = FixedPolynomials.PolyConfig(::FixedPolynomials.Polynomial{Float64}, ::Array{UInt16,2}, ::Array{UInt16,2}, ::Type{Complex{Float64}}) at config.jl:50
└ @ FixedPolynomials config.jl:50
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = FixedPolynomials.PolyConfig(::FixedPolynomials.Polynomial{Float64}, ::Array{UInt16,2}, ::Array{UInt16,2}, ::Type{Complex{Float64}}) at config.jl:52
└ @ FixedPolynomials config.jl:52
StraightLineHomotopy: Test Failed at /home/vagrant/.julia/v0.7/Homotopies/test/straightline_test.jl:58
  Expression: string(H) == "Homotopies.StraightLineHomotopy{Float64} with 2 polynomials in 3 variables.\n"
   Evaluated: "StraightLineHomotopy{Float64} with 2 polynomials in 3 variables.\n" == "Homotopies.StraightLineHomotopy{Float64} with 2 polynomials in 3 variables.\n"
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.7/Homotopies/test/straightline_test.jl:58 [inlined]
 [2] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:980 [inlined]
 [3] top-level scope at /home/vagrant/.julia/v0.7/Homotopies/test/straightline_test.jl:2
┌ Warning: Constructors no longer fall back to `convert`. A constructor `DynamicPolynomials.Term{true,Int64}(::DynamicPolynomials.Monomial{true})` should be defined instead.
│   caller = Type at term.jl:10 [inlined]
└ @ Core term.jl:10
┌ Warning: Constructors no longer fall back to `convert`. A constructor `DynamicPolynomials.Term{true,Int64}(::DynamicPolynomials.PolyVar{true})` should be defined instead.
│   caller = +(::DynamicPolynomials.Polynomial{true,Int64}, ::DynamicPolynomials.PolyVar{true}) at operators.jl:80
└ @ DynamicPolynomials operators.jl:80
┌ Warning: Constructors no longer fall back to `convert`. A constructor `DynamicPolynomials.Monomial{true}(::DynamicPolynomials.PolyVar{true})` should be defined instead.
│   caller = convert(::Type{DynamicPolynomials.Term{true,Int64}}, ::DynamicPolynomials.PolyVar{true}) at term.jl:24
└ @ DynamicPolynomials term.jl:24
┌ Warning: Constructors no longer fall back to `convert`. A constructor `DynamicPolynomials.Term{true,Int64}(::DynamicPolynomials.Monomial{true})` should be defined instead.
│   caller = convert(::Type{DynamicPolynomials.Term{true,Int64}}, ::DynamicPolynomials.PolyVar{true}) at term.jl:24
└ @ DynamicPolynomials term.jl:24
┌ Warning: Constructors no longer fall back to `convert`. A constructor `DynamicPolynomials.Term{true,Int64}(::DynamicPolynomials.Monomial{true})` should be defined instead.
│   caller = +(::DynamicPolynomials.Monomial{true}, ::DynamicPolynomials.Term{true,Int64}) at operators.jl:81
└ @ DynamicPolynomials operators.jl:81
┌ Warning: Constructors no longer fall back to `convert`. A constructor `DynamicPolynomials.Term{true,Int64}(::DynamicPolynomials.Monomial{true})` should be defined instead.
│   caller = +(::DynamicPolynomials.Polynomial{true,Int64}, ::DynamicPolynomials.Monomial{true}) at operators.jl:80
└ @ DynamicPolynomials operators.jl:80
Test Summary:        | Pass  Fail  Total
StraightLineHomotopy |   40     1     41
ERROR: LoadError: LoadError: Some tests did not pass: 40 passed, 1 failed, 0 errored, 0 broken.
in expression starting at /home/vagrant/.julia/v0.7/Homotopies/test/straightline_test.jl:1
in expression starting at /home/vagrant/.julia/v0.7/Homotopies/test/runtests.jl:7
┌ Error: ------------------------------------------------------------
│ # Testing failed for Homotopies
│   exception = ErrorException("failed process: Process(`/home/vagrant/julia/bin/julia -Cnative -J/home/vagrant/julia/lib/julia/sys.so --compile=yes --depwarn=yes --code-coverage=none --color=no --compiled-modules=yes --check-bounds=yes --warn-overwrite=yes --startup-file=yes /home/vagrant/.julia/v0.7/Homotopies/test/runtests.jl`, ProcessExited(1)) [1]")
└ @ Base.Pkg.Entry entry.jl:739
[ Info: Removing DynamicPolynomials v0.0.2 @ Base.Pkg.Entry entry.jl:546
ERROR: Homotopies had test errors

>>> End of log
