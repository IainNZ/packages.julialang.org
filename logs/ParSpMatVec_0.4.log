>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.7
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.3
INFO: Installing URIParser v0.1.8
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of ParSpMatVec
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-119-generic #166-Ubuntu SMP Wed May 3 12:18:55 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1196.28125 MB free)
Uptime: 20355.0 sec
Load Avg:  1.03125  1.06103515625  1.05322265625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz     999386 s       3444 s      77605 s     742685 s         24 s
#2  3500 MHz     692090 s       4023 s      65943 s    1202461 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.9.1
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.7
 - Compat                        0.26.0
 - SHA                           0.3.3
 - URIParser                     0.1.8
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1164	 ParSpMatVec=0.0171	 speedup=6.8044
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1164	 ParSpMatVec=0.0084	 speedup=13.7825
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1164	 ParSpMatVec=0.0121	 speedup=9.6183
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1164	 ParSpMatVec=0.0142	 speedup=8.1732
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1164	 ParSpMatVec=0.0079	 speedup=14.7529
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0792	 ParSpMatVec=0.0255	 speedup=3.1067
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0792	 ParSpMatVec=0.0121	 speedup=6.5328
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0792	 ParSpMatVec=0.0134	 speedup=5.9213
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0792	 ParSpMatVec=0.0126	 speedup=6.2798
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0792	 ParSpMatVec=0.0150	 speedup=5.2635

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0317	 ParSpMatVec=0.0178	 speedup=1.7748
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0317	 ParSpMatVec=0.0140	 speedup=2.2559
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0317	 ParSpMatVec=0.0145	 speedup=2.1799
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0317	 ParSpMatVec=0.0131	 speedup=2.4183
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0317	 ParSpMatVec=0.0135	 speedup=2.3475

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0391	 ParSpMatVec=0.0275	 speedup=1.4182
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0391	 ParSpMatVec=0.0016	 speedup=24.4218
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0391	 ParSpMatVec=0.0016	 speedup=24.1673
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0391	 ParSpMatVec=0.0028	 speedup=13.7475
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0391	 ParSpMatVec=0.0026	 speedup=14.9288

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0093	 ParSpMatVec=0.0440	 speedup=0.2107
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0093	 ParSpMatVec=0.0037	 speedup=2.5279
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0093	 ParSpMatVec=0.0024	 speedup=3.8433
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0093	 ParSpMatVec=0.0027	 speedup=3.4483
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0093	 ParSpMatVec=0.0025	 speedup=3.7385

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0446	 ParSpMatVec=0.0454	 speedup=0.9830
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0446	 ParSpMatVec=0.0042	 speedup=10.5054
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0446	 ParSpMatVec=0.0022	 speedup=20.3747
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0446	 ParSpMatVec=0.0023	 speedup=19.4993
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0446	 ParSpMatVec=0.0024	 speedup=18.3820

INFO: ParSpMatVec tests passed

>>> End of log
