>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.7
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.3
INFO: Installing URIParser v0.1.8
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-128-generic #177-Ubuntu SMP Tue Aug 8 11:40:23 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1135.4765625 MB free)
Uptime: 22308.0 sec
Load Avg:  1.06591796875  1.04296875  1.04541015625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz    1064247 s       3582 s      92897 s     857817 s         34 s
#2  3500 MHz     770866 s       2962 s      81048 s    1299030 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.9.1
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.7
 - Compat                        0.26.0
 - SHA                           0.3.3
 - URIParser                     0.1.8
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1394	 ParSpMatVec=0.0272	 speedup=5.1264
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1394	 ParSpMatVec=0.0130	 speedup=10.7357
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1394	 ParSpMatVec=0.0126	 speedup=11.0535
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1394	 ParSpMatVec=0.0124	 speedup=11.2118
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1394	 ParSpMatVec=0.0133	 speedup=10.5224
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1421	 ParSpMatVec=0.0453	 speedup=3.1384
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1421	 ParSpMatVec=0.0174	 speedup=8.1532
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1421	 ParSpMatVec=0.0184	 speedup=7.7204
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1421	 ParSpMatVec=0.0147	 speedup=9.6332
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1421	 ParSpMatVec=0.0139	 speedup=10.1899

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0506	 ParSpMatVec=0.0386	 speedup=1.3104
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0506	 ParSpMatVec=0.0132	 speedup=3.8217
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0506	 ParSpMatVec=0.0167	 speedup=3.0342
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0506	 ParSpMatVec=0.0167	 speedup=3.0381
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0506	 ParSpMatVec=0.0203	 speedup=2.4907

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0388	 ParSpMatVec=0.0467	 speedup=0.8306
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0388	 ParSpMatVec=0.0088	 speedup=4.4284
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0388	 ParSpMatVec=0.0021	 speedup=18.9093
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0388	 ParSpMatVec=0.0029	 speedup=13.2575
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0388	 ParSpMatVec=0.0018	 speedup=21.8909

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0087	 ParSpMatVec=0.0510	 speedup=0.1713
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0087	 ParSpMatVec=0.0046	 speedup=1.9027
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0087	 ParSpMatVec=0.0026	 speedup=3.3291
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0087	 ParSpMatVec=0.0044	 speedup=1.9881
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0087	 ParSpMatVec=0.0042	 speedup=2.0800

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0510	 ParSpMatVec=0.0507	 speedup=1.0058
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0510	 ParSpMatVec=0.0039	 speedup=13.1462
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0510	 ParSpMatVec=0.0025	 speedup=20.6414
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0510	 ParSpMatVec=0.0072	 speedup=7.0524
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0510	 ParSpMatVec=0.0037	 speedup=13.8848

INFO: ParSpMatVec tests passed

>>> End of log
