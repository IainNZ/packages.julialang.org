>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.7
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.2
INFO: Installing URIParser v0.1.8
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of ParSpMatVec
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-117-generic #164-Ubuntu SMP Fri Apr 7 11:05:26 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1188.109375 MB free)
Uptime: 21316.0 sec
Load Avg:  0.93505859375  0.998046875  1.0400390625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz     969672 s       2239 s      81566 s     867412 s         34 s
#2  3499 MHz     736828 s       4742 s      71516 s    1258318 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.9.1
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.7
 - Compat                        0.25.0
 - SHA                           0.3.2
 - URIParser                     0.1.8
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1337	 ParSpMatVec=0.0269	 speedup=4.9653
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1337	 ParSpMatVec=0.0103	 speedup=12.9697
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1337	 ParSpMatVec=0.0103	 speedup=12.9339
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1337	 ParSpMatVec=0.0078	 speedup=17.0662
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1337	 ParSpMatVec=0.0063	 speedup=21.2098
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1192	 ParSpMatVec=0.0390	 speedup=3.0589
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1192	 ParSpMatVec=0.0142	 speedup=8.4223
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1192	 ParSpMatVec=0.0128	 speedup=9.3406
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1192	 ParSpMatVec=0.0131	 speedup=9.1092
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1192	 ParSpMatVec=0.0124	 speedup=9.6232

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0532	 ParSpMatVec=0.0262	 speedup=2.0302
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0532	 ParSpMatVec=0.0124	 speedup=4.2737
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0532	 ParSpMatVec=0.0244	 speedup=2.1796
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0532	 ParSpMatVec=0.0134	 speedup=3.9700
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0532	 ParSpMatVec=0.0121	 speedup=4.3993

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0546	 ParSpMatVec=0.0350	 speedup=1.5603
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0546	 ParSpMatVec=0.0024	 speedup=22.4424
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0546	 ParSpMatVec=0.0037	 speedup=14.6820
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0546	 ParSpMatVec=0.0021	 speedup=26.2460
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0546	 ParSpMatVec=0.0017	 speedup=31.5170

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0099	 ParSpMatVec=0.0462	 speedup=0.2138
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0099	 ParSpMatVec=0.0035	 speedup=2.8450
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0099	 ParSpMatVec=0.0021	 speedup=4.8082
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0099	 ParSpMatVec=0.0036	 speedup=2.7609
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0099	 ParSpMatVec=0.0020	 speedup=5.0072

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0528	 ParSpMatVec=0.0486	 speedup=1.0857
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0528	 ParSpMatVec=0.0036	 speedup=14.7000
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0528	 ParSpMatVec=0.0020	 speedup=26.2989
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0528	 ParSpMatVec=0.0042	 speedup=12.5417
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0528	 ParSpMatVec=0.0021	 speedup=24.9808

INFO: ParSpMatVec tests passed

>>> End of log
