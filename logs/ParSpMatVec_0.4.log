>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.7
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.3
INFO: Installing URIParser v0.1.8
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of ParSpMatVec
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-119-generic #166-Ubuntu SMP Wed May 3 12:18:55 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1178.88671875 MB free)
Uptime: 21448.0 sec
Load Avg:  1.041015625  1.0263671875  1.0078125
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz     995832 s       5465 s      79192 s     858825 s         33 s
#2  3500 MHz     752769 s        838 s      66506 s    1255973 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.9.1
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.7
 - Compat                        0.26.0
 - SHA                           0.3.3
 - URIParser                     0.1.8
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1211	 ParSpMatVec=0.0264	 speedup=4.5908
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1211	 ParSpMatVec=0.0168	 speedup=7.2142
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1211	 ParSpMatVec=0.0110	 speedup=10.9639
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1211	 ParSpMatVec=0.0246	 speedup=4.9263
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1211	 ParSpMatVec=0.0079	 speedup=15.4151
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1142	 ParSpMatVec=0.0440	 speedup=2.5964
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1142	 ParSpMatVec=0.0213	 speedup=5.3524
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1142	 ParSpMatVec=0.0174	 speedup=6.5488
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1142	 ParSpMatVec=0.0123	 speedup=9.2862
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1142	 ParSpMatVec=0.0130	 speedup=8.8101

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0451	 ParSpMatVec=0.0312	 speedup=1.4428
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0451	 ParSpMatVec=0.0141	 speedup=3.1917
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0451	 ParSpMatVec=0.0138	 speedup=3.2570
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0451	 ParSpMatVec=0.0135	 speedup=3.3357
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0451	 ParSpMatVec=0.0136	 speedup=3.3159

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0421	 ParSpMatVec=0.0479	 speedup=0.8789
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0421	 ParSpMatVec=0.0021	 speedup=19.9263
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0421	 ParSpMatVec=0.0022	 speedup=18.8198
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0421	 ParSpMatVec=0.0043	 speedup=9.7114
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0421	 ParSpMatVec=0.0024	 speedup=17.6073

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0089	 ParSpMatVec=0.0470	 speedup=0.1884
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0089	 ParSpMatVec=0.0044	 speedup=2.0169
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0089	 ParSpMatVec=0.0025	 speedup=3.4976
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0089	 ParSpMatVec=0.0177	 speedup=0.4997
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0089	 ParSpMatVec=0.0025	 speedup=3.5089

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0283	 ParSpMatVec=0.0267	 speedup=1.0610
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0283	 ParSpMatVec=0.0033	 speedup=8.6052
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0283	 ParSpMatVec=0.0018	 speedup=15.9910
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0283	 ParSpMatVec=0.0041	 speedup=6.9428
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0283	 ParSpMatVec=0.0025	 speedup=11.2386

INFO: ParSpMatVec tests passed

>>> End of log
