>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.7
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.3
INFO: Installing URIParser v0.1.8
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of ParSpMatVec
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-121-generic #170-Ubuntu SMP Wed Jun 14 09:04:33 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1169.125 MB free)
Uptime: 21264.0 sec
Load Avg:  0.94580078125  0.97119140625  0.97412109375
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz    1044138 s         13 s      82331 s     782859 s         34 s
#2  3499 MHz     709526 s       6237 s      69082 s    1279271 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.9.1
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.7
 - Compat                        0.26.0
 - SHA                           0.3.3
 - URIParser                     0.1.8
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0767	 ParSpMatVec=0.0180	 speedup=4.2573
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0767	 ParSpMatVec=0.0084	 speedup=9.1275
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0767	 ParSpMatVec=0.0118	 speedup=6.4894
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0767	 ParSpMatVec=0.0088	 speedup=8.7182
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0767	 ParSpMatVec=0.0092	 speedup=8.2975
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0706	 ParSpMatVec=0.0249	 speedup=2.8321
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0706	 ParSpMatVec=0.0145	 speedup=4.8572
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0706	 ParSpMatVec=0.0151	 speedup=4.6746
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0706	 ParSpMatVec=0.0153	 speedup=4.6007
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0706	 ParSpMatVec=0.0127	 speedup=5.5505

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0402	 ParSpMatVec=0.0287	 speedup=1.4011
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0402	 ParSpMatVec=0.0132	 speedup=3.0559
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0402	 ParSpMatVec=0.0157	 speedup=2.5657
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0402	 ParSpMatVec=0.0132	 speedup=3.0431
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0402	 ParSpMatVec=0.0148	 speedup=2.7118

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0431	 ParSpMatVec=0.0395	 speedup=1.0924
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0431	 ParSpMatVec=0.0030	 speedup=14.3783
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0431	 ParSpMatVec=0.0029	 speedup=14.6417
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0431	 ParSpMatVec=0.0020	 speedup=21.4232
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0431	 ParSpMatVec=0.0021	 speedup=20.5707

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0073	 ParSpMatVec=0.0282	 speedup=0.2599
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0073	 ParSpMatVec=0.0052	 speedup=1.4005
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0073	 ParSpMatVec=0.0019	 speedup=3.7958
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0073	 ParSpMatVec=0.0028	 speedup=2.6057
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0073	 ParSpMatVec=0.0029	 speedup=2.5099

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0427	 ParSpMatVec=0.0492	 speedup=0.8683
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0427	 ParSpMatVec=0.0033	 speedup=12.8678
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0427	 ParSpMatVec=0.0020	 speedup=21.6487
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0427	 ParSpMatVec=0.0026	 speedup=16.4922
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0427	 ParSpMatVec=0.0028	 speedup=15.4884

INFO: ParSpMatVec tests passed

>>> End of log
