>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.7
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.3
INFO: Installing URIParser v0.1.8
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of ParSpMatVec
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-128-generic #177-Ubuntu SMP Tue Aug 8 11:40:23 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1178.1484375 MB free)
Uptime: 22754.0 sec
Load Avg:  1.0029296875  1.0146484375  1.0400390625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3505 MHz    1103280 s       6771 s      83284 s     850465 s         53 s
#2  3505 MHz     768212 s         90 s      70031 s    1366562 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.9.1
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.7
 - Compat                        0.26.0
 - SHA                           0.3.3
 - URIParser                     0.1.8
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0839	 ParSpMatVec=0.0264	 speedup=3.1821
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0839	 ParSpMatVec=0.0097	 speedup=8.6225
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0839	 ParSpMatVec=0.0136	 speedup=6.1701
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0839	 ParSpMatVec=0.0084	 speedup=10.0064
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0839	 ParSpMatVec=0.0104	 speedup=8.0810
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0756	 ParSpMatVec=0.0380	 speedup=1.9901
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0756	 ParSpMatVec=0.0151	 speedup=5.0001
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0756	 ParSpMatVec=0.0175	 speedup=4.3150
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0756	 ParSpMatVec=0.0139	 speedup=5.4546
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0756	 ParSpMatVec=0.0137	 speedup=5.5014

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0471	 ParSpMatVec=0.0303	 speedup=1.5559
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0471	 ParSpMatVec=0.0135	 speedup=3.4876
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0471	 ParSpMatVec=0.0151	 speedup=3.1197
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0471	 ParSpMatVec=0.0133	 speedup=3.5436
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0471	 ParSpMatVec=0.0120	 speedup=3.9355

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0529	 ParSpMatVec=0.0433	 speedup=1.2213
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0529	 ParSpMatVec=0.0024	 speedup=22.4884
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0529	 ParSpMatVec=0.0016	 speedup=33.9301
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0529	 ParSpMatVec=0.0037	 speedup=14.2132
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0529	 ParSpMatVec=0.0022	 speedup=23.5281

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0067	 ParSpMatVec=0.0258	 speedup=0.2606
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0067	 ParSpMatVec=0.0028	 speedup=2.4011
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0067	 ParSpMatVec=0.0023	 speedup=2.9286
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0067	 ParSpMatVec=0.0024	 speedup=2.8120
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0067	 ParSpMatVec=0.0021	 speedup=3.1526

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0515	 ParSpMatVec=0.0523	 speedup=0.9839
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0515	 ParSpMatVec=0.0045	 speedup=11.4446
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0515	 ParSpMatVec=0.0021	 speedup=24.9677
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0515	 ParSpMatVec=0.0028	 speedup=18.2765
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0515	 ParSpMatVec=0.0023	 speedup=22.6553

INFO: ParSpMatVec tests passed

>>> End of log
