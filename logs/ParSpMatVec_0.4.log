>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.7
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.3
INFO: Installing URIParser v0.1.8
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of ParSpMatVec
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-119-generic #166-Ubuntu SMP Wed May 3 12:18:55 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1149.875 MB free)
Uptime: 21289.0 sec
Load Avg:  0.85400390625  0.96728515625  1.0185546875
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz    1078085 s         98 s      88409 s     743039 s         34 s
#2  3499 MHz     674547 s       6836 s      76445 s    1307757 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.9.1
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.7
 - Compat                        0.26.0
 - SHA                           0.3.3
 - URIParser                     0.1.8
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1460	 ParSpMatVec=0.0269	 speedup=5.4339
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1460	 ParSpMatVec=0.0107	 speedup=13.6662
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1460	 ParSpMatVec=0.0132	 speedup=11.0598
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1460	 ParSpMatVec=0.0101	 speedup=14.4082
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1460	 ParSpMatVec=0.0076	 speedup=19.1877
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1265	 ParSpMatVec=0.0425	 speedup=2.9744
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1265	 ParSpMatVec=0.0130	 speedup=9.7312
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1265	 ParSpMatVec=0.0140	 speedup=9.0107
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1265	 ParSpMatVec=0.0161	 speedup=7.8738
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1265	 ParSpMatVec=0.0135	 speedup=9.3622

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0397	 ParSpMatVec=0.0182	 speedup=2.1831
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0397	 ParSpMatVec=0.0133	 speedup=2.9838
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0397	 ParSpMatVec=0.0148	 speedup=2.6905
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0397	 ParSpMatVec=0.0129	 speedup=3.0752
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0397	 ParSpMatVec=0.0136	 speedup=2.9163

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0395	 ParSpMatVec=0.0366	 speedup=1.0807
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0395	 ParSpMatVec=0.0028	 speedup=14.0636
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0395	 ParSpMatVec=0.0051	 speedup=7.7133
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0395	 ParSpMatVec=0.0033	 speedup=12.0816
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0395	 ParSpMatVec=0.0015	 speedup=25.8433

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0082	 ParSpMatVec=0.0433	 speedup=0.1902
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0082	 ParSpMatVec=0.0043	 speedup=1.8999
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0082	 ParSpMatVec=0.0034	 speedup=2.4553
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0082	 ParSpMatVec=0.0024	 speedup=3.4941
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0082	 ParSpMatVec=0.0022	 speedup=3.7884

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0488	 ParSpMatVec=0.0511	 speedup=0.9553
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0488	 ParSpMatVec=0.0036	 speedup=13.5731
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0488	 ParSpMatVec=0.0017	 speedup=28.2874
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0488	 ParSpMatVec=0.0030	 speedup=16.0242
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0488	 ParSpMatVec=0.0022	 speedup=21.8503

INFO: ParSpMatVec tests passed

>>> End of log
