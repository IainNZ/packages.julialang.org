>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.7
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.2
INFO: Installing URIParser v0.1.8
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of ParSpMatVec
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-117-generic #164-Ubuntu SMP Fri Apr 7 11:05:26 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1185.68359375 MB free)
Uptime: 20240.0 sec
Load Avg:  1.01806640625  1.0205078125  0.99169921875
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz    1022303 s       2180 s      80622 s     700812 s         37 s
#2  3500 MHz     647697 s       4702 s      70074 s    1246084 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.9.1
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.7
 - Compat                        0.25.1
 - SHA                           0.3.2
 - URIParser                     0.1.8
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1272	 ParSpMatVec=0.0279	 speedup=4.5639
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1272	 ParSpMatVec=0.0089	 speedup=14.2925
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1272	 ParSpMatVec=0.0101	 speedup=12.6170
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1272	 ParSpMatVec=0.0071	 speedup=17.8970
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1272	 ParSpMatVec=0.0170	 speedup=7.4891
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1123	 ParSpMatVec=0.0288	 speedup=3.9047
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1123	 ParSpMatVec=0.0127	 speedup=8.8335
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1123	 ParSpMatVec=0.0209	 speedup=5.3789
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1123	 ParSpMatVec=0.0166	 speedup=6.7808
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1123	 ParSpMatVec=0.0120	 speedup=9.3646

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0410	 ParSpMatVec=0.0303	 speedup=1.3526
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0410	 ParSpMatVec=0.0224	 speedup=1.8324
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0410	 ParSpMatVec=0.0149	 speedup=2.7504
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0410	 ParSpMatVec=0.0166	 speedup=2.4695
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0410	 ParSpMatVec=0.0158	 speedup=2.5945

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0400	 ParSpMatVec=0.0265	 speedup=1.5111
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0400	 ParSpMatVec=0.0022	 speedup=18.1825
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0400	 ParSpMatVec=0.0047	 speedup=8.5865
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0400	 ParSpMatVec=0.0024	 speedup=17.0054
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0400	 ParSpMatVec=0.0077	 speedup=5.1730

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0091	 ParSpMatVec=0.0329	 speedup=0.2774
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0091	 ParSpMatVec=0.0049	 speedup=1.8795
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0091	 ParSpMatVec=0.0022	 speedup=4.1301
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0091	 ParSpMatVec=0.0035	 speedup=2.6401
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0091	 ParSpMatVec=0.0024	 speedup=3.8377

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0439	 ParSpMatVec=0.0508	 speedup=0.8644
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0439	 ParSpMatVec=0.0040	 speedup=11.0471
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0439	 ParSpMatVec=0.0020	 speedup=22.0326
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0439	 ParSpMatVec=0.0107	 speedup=4.0963
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0439	 ParSpMatVec=0.0027	 speedup=16.0986

INFO: ParSpMatVec tests passed

>>> End of log
