>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.7
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.2
INFO: Installing URIParser v0.1.8
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of ParSpMatVec
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-117-generic #164-Ubuntu SMP Fri Apr 7 11:05:26 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1192.16015625 MB free)
Uptime: 20940.0 sec
Load Avg:  0.9970703125  0.99072265625  0.99169921875
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz     992719 s       3306 s      86127 s     798551 s         32 s
#2  3499 MHz     679643 s       3979 s      75256 s    1251025 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.9.1
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.7
 - Compat                        0.25.2
 - SHA                           0.3.2
 - URIParser                     0.1.8
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1379	 ParSpMatVec=0.0274	 speedup=5.0311
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1379	 ParSpMatVec=0.0106	 speedup=13.0443
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1379	 ParSpMatVec=0.0133	 speedup=10.3495
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1379	 ParSpMatVec=0.0091	 speedup=15.2154
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1379	 ParSpMatVec=0.0090	 speedup=15.3773
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1308	 ParSpMatVec=0.0287	 speedup=4.5518
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1308	 ParSpMatVec=0.0145	 speedup=8.9945
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1308	 ParSpMatVec=0.0152	 speedup=8.5902
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1308	 ParSpMatVec=0.0185	 speedup=7.0870
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1308	 ParSpMatVec=0.0176	 speedup=7.4427

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0497	 ParSpMatVec=0.0325	 speedup=1.5307
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0497	 ParSpMatVec=0.0129	 speedup=3.8452
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0497	 ParSpMatVec=0.0159	 speedup=3.1197
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0497	 ParSpMatVec=0.0122	 speedup=4.0607
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0497	 ParSpMatVec=0.0173	 speedup=2.8794

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0431	 ParSpMatVec=0.0403	 speedup=1.0692
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0431	 ParSpMatVec=0.0026	 speedup=16.6843
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0431	 ParSpMatVec=0.0075	 speedup=5.7782
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0431	 ParSpMatVec=0.0029	 speedup=15.0874
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0431	 ParSpMatVec=0.0030	 speedup=14.2669

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0104	 ParSpMatVec=0.0450	 speedup=0.2317
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0104	 ParSpMatVec=0.0034	 speedup=3.0503
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0104	 ParSpMatVec=0.0038	 speedup=2.7713
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0104	 ParSpMatVec=0.0037	 speedup=2.8248
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0104	 ParSpMatVec=0.0029	 speedup=3.6575

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0459	 ParSpMatVec=0.0484	 speedup=0.9481
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0459	 ParSpMatVec=0.0039	 speedup=11.8548
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0459	 ParSpMatVec=0.0072	 speedup=6.3908
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0459	 ParSpMatVec=0.0027	 speedup=16.9421
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0459	 ParSpMatVec=0.0048	 speedup=9.6460

INFO: ParSpMatVec tests passed

>>> End of log
