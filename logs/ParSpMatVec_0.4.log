>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.7
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.3
INFO: Installing URIParser v0.1.8
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of ParSpMatVec
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-121-generic #170-Ubuntu SMP Wed Jun 14 09:04:33 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1186.7734375 MB free)
Uptime: 21274.0 sec
Load Avg:  0.96875  0.986328125  0.9921875
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz    1033671 s        461 s      78381 s     799766 s         33 s
#2  3500 MHz     675863 s       5950 s      66805 s    1298975 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.9.1
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.7
 - Compat                        0.26.0
 - SHA                           0.3.3
 - URIParser                     0.1.8
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1252	 ParSpMatVec=0.0264	 speedup=4.7391
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1252	 ParSpMatVec=0.0085	 speedup=14.8007
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1252	 ParSpMatVec=0.0113	 speedup=11.1142
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1252	 ParSpMatVec=0.0086	 speedup=14.6338
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1252	 ParSpMatVec=0.0083	 speedup=15.1270
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1196	 ParSpMatVec=0.0414	 speedup=2.8921
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1196	 ParSpMatVec=0.0145	 speedup=8.2258
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1196	 ParSpMatVec=0.0156	 speedup=7.6449
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1196	 ParSpMatVec=0.0153	 speedup=7.8096
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1196	 ParSpMatVec=0.0120	 speedup=10.0051

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0503	 ParSpMatVec=0.0528	 speedup=0.9529
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0503	 ParSpMatVec=0.0154	 speedup=3.2622
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0503	 ParSpMatVec=0.0224	 speedup=2.2432
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0503	 ParSpMatVec=0.0138	 speedup=3.6491
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0503	 ParSpMatVec=0.0133	 speedup=3.7836

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0596	 ParSpMatVec=0.0377	 speedup=1.5812
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0596	 ParSpMatVec=0.0029	 speedup=20.8481
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0596	 ParSpMatVec=0.0027	 speedup=22.0095
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0596	 ParSpMatVec=0.0292	 speedup=2.0442
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0596	 ParSpMatVec=0.0020	 speedup=29.8771

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0097	 ParSpMatVec=0.0441	 speedup=0.2198
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0097	 ParSpMatVec=0.0047	 speedup=2.0815
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0097	 ParSpMatVec=0.0054	 speedup=1.7805
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0097	 ParSpMatVec=0.0024	 speedup=4.0451
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0097	 ParSpMatVec=0.0043	 speedup=2.2588

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0449	 ParSpMatVec=0.0483	 speedup=0.9293
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0449	 ParSpMatVec=0.0035	 speedup=12.7294
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0449	 ParSpMatVec=0.0021	 speedup=21.2706
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0449	 ParSpMatVec=0.0024	 speedup=18.6383
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0449	 ParSpMatVec=0.0022	 speedup=20.6872

INFO: ParSpMatVec tests passed

>>> End of log
