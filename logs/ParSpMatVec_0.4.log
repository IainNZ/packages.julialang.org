>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.7
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.3
INFO: Installing URIParser v0.1.8
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of ParSpMatVec
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-119-generic #166-Ubuntu SMP Wed May 3 12:18:55 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1191.49609375 MB free)
Uptime: 24294.0 sec
Load Avg:  1.0029296875  1.044921875  1.04541015625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3496 MHz    1020272 s         59 s      78227 s    1124656 s         40 s
#2  3496 MHz     732348 s       6508 s      64144 s    1555962 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.9.1
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.7
 - Compat                        0.25.2
 - SHA                           0.3.3
 - URIParser                     0.1.8
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1205	 ParSpMatVec=0.0258	 speedup=4.6724
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1205	 ParSpMatVec=0.0109	 speedup=11.1001
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1205	 ParSpMatVec=0.0115	 speedup=10.5226
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1205	 ParSpMatVec=0.0107	 speedup=11.2624
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1205	 ParSpMatVec=0.0072	 speedup=16.8238
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0729	 ParSpMatVec=0.0280	 speedup=2.5994
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0729	 ParSpMatVec=0.0144	 speedup=5.0707
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0729	 ParSpMatVec=0.0143	 speedup=5.1034
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0729	 ParSpMatVec=0.0145	 speedup=5.0114
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0729	 ParSpMatVec=0.0564	 speedup=1.2935

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0481	 ParSpMatVec=0.0311	 speedup=1.5453
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0481	 ParSpMatVec=0.0144	 speedup=3.3469
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0481	 ParSpMatVec=0.0157	 speedup=3.0583
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0481	 ParSpMatVec=0.0353	 speedup=1.3643
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0481	 ParSpMatVec=0.0136	 speedup=3.5266

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0455	 ParSpMatVec=0.0391	 speedup=1.1650
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0455	 ParSpMatVec=0.0019	 speedup=23.4044
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0455	 ParSpMatVec=0.0050	 speedup=9.1289
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0455	 ParSpMatVec=0.0025	 speedup=18.0112
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0455	 ParSpMatVec=0.0025	 speedup=18.0969

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0099	 ParSpMatVec=0.0458	 speedup=0.2155
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0099	 ParSpMatVec=0.0047	 speedup=2.1020
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0099	 ParSpMatVec=0.0043	 speedup=2.3143
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0099	 ParSpMatVec=0.0023	 speedup=4.3011
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0099	 ParSpMatVec=0.0021	 speedup=4.7856

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0305	 ParSpMatVec=0.0310	 speedup=0.9843
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0305	 ParSpMatVec=0.0043	 speedup=7.1398
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0305	 ParSpMatVec=0.0031	 speedup=9.9319
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0305	 ParSpMatVec=0.0021	 speedup=14.8976
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0305	 ParSpMatVec=0.0029	 speedup=10.5651

INFO: ParSpMatVec tests passed

>>> End of log
