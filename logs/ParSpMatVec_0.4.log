>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.7
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.2
INFO: Installing URIParser v0.1.8
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of ParSpMatVec
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-117-generic #164-Ubuntu SMP Fri Apr 7 11:05:26 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1196.23828125 MB free)
Uptime: 20971.0 sec
Load Avg:  1.05224609375  1.044921875  1.04736328125
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz    1006690 s       6716 s      88248 s     789071 s         34 s
#2  3500 MHz     687539 s        285 s      79292 s    1257124 s          1 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.9.1
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.7
 - Compat                        0.25.0
 - SHA                           0.3.2
 - URIParser                     0.1.8
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1341	 ParSpMatVec=0.0176	 speedup=7.6369
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1341	 ParSpMatVec=0.0094	 speedup=14.2871
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1341	 ParSpMatVec=0.0138	 speedup=9.7273
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1341	 ParSpMatVec=0.0101	 speedup=13.2662
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1341	 ParSpMatVec=0.0110	 speedup=12.2297
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1165	 ParSpMatVec=0.0405	 speedup=2.8764
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1165	 ParSpMatVec=0.0147	 speedup=7.9190
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1165	 ParSpMatVec=0.0155	 speedup=7.5029
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1165	 ParSpMatVec=0.0130	 speedup=8.9643
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1165	 ParSpMatVec=0.0105	 speedup=11.0810

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0314	 ParSpMatVec=0.0304	 speedup=1.0340
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0314	 ParSpMatVec=0.0124	 speedup=2.5421
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0314	 ParSpMatVec=0.0202	 speedup=1.5547
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0314	 ParSpMatVec=0.0170	 speedup=1.8452
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0314	 ParSpMatVec=0.0158	 speedup=1.9856

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0401	 ParSpMatVec=0.0224	 speedup=1.7898
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0401	 ParSpMatVec=0.0021	 speedup=18.6826
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0401	 ParSpMatVec=0.0031	 speedup=12.9794
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0401	 ParSpMatVec=0.0016	 speedup=24.3504
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0401	 ParSpMatVec=0.0016	 speedup=24.5685

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0080	 ParSpMatVec=0.0422	 speedup=0.1887
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0080	 ParSpMatVec=0.0036	 speedup=2.1866
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0080	 ParSpMatVec=0.0022	 speedup=3.5541
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0080	 ParSpMatVec=0.0034	 speedup=2.3550
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0080	 ParSpMatVec=0.0031	 speedup=2.5499

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0276	 ParSpMatVec=0.0371	 speedup=0.7441
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0276	 ParSpMatVec=0.0085	 speedup=3.2648
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0276	 ParSpMatVec=0.0016	 speedup=16.8960
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0276	 ParSpMatVec=0.0021	 speedup=12.9397
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0276	 ParSpMatVec=0.0021	 speedup=12.9425

INFO: ParSpMatVec tests passed

>>> End of log
