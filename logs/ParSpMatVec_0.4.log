>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.7
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.3
INFO: Installing URIParser v0.1.8
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-128-generic #177-Ubuntu SMP Tue Aug 8 11:40:23 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1168.58203125 MB free)
Uptime: 22626.0 sec
Load Avg:  1.01513671875  1.0146484375  1.0185546875
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz    1102820 s        116 s      88900 s     851694 s         29 s
#2  3499 MHz     764336 s       6144 s      75500 s    1341967 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.9.1
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.7
 - Compat                        0.26.0
 - SHA                           0.3.3
 - URIParser                     0.1.8
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0806	 ParSpMatVec=0.0254	 speedup=3.1751
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0806	 ParSpMatVec=0.0082	 speedup=9.8102
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0806	 ParSpMatVec=0.0133	 speedup=6.0614
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0806	 ParSpMatVec=0.0070	 speedup=11.5594
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0806	 ParSpMatVec=0.0125	 speedup=6.4269
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1168	 ParSpMatVec=0.0413	 speedup=2.8271
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1168	 ParSpMatVec=0.0133	 speedup=8.7711
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1168	 ParSpMatVec=0.0145	 speedup=8.0604
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1168	 ParSpMatVec=0.0134	 speedup=8.6866
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1168	 ParSpMatVec=0.0154	 speedup=7.6068

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0382	 ParSpMatVec=0.0270	 speedup=1.4173
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0382	 ParSpMatVec=0.0304	 speedup=1.2576
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0382	 ParSpMatVec=0.0179	 speedup=2.1376
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0382	 ParSpMatVec=0.0165	 speedup=2.3144
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0382	 ParSpMatVec=0.0115	 speedup=3.3114

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0433	 ParSpMatVec=0.0412	 speedup=1.0522
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0433	 ParSpMatVec=0.0021	 speedup=20.8163
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0433	 ParSpMatVec=0.0252	 speedup=1.7207
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0433	 ParSpMatVec=0.0088	 speedup=4.9033
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0433	 ParSpMatVec=0.0039	 speedup=10.9881

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0083	 ParSpMatVec=0.0510	 speedup=0.1630
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0083	 ParSpMatVec=0.0035	 speedup=2.3972
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0083	 ParSpMatVec=0.0018	 speedup=4.5468
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0083	 ParSpMatVec=0.0165	 speedup=0.5046
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0083	 ParSpMatVec=0.0049	 speedup=1.6908

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0461	 ParSpMatVec=0.0533	 speedup=0.8653
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0461	 ParSpMatVec=0.0041	 speedup=11.1372
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0461	 ParSpMatVec=0.0019	 speedup=24.0751
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0461	 ParSpMatVec=0.0030	 speedup=15.4762
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0461	 ParSpMatVec=0.0030	 speedup=15.2780

INFO: ParSpMatVec tests passed

>>> End of log
