>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.7
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.3
INFO: Installing URIParser v0.1.8
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-135-generic #184-Ubuntu SMP Wed Oct 18 11:55:51 UTC 2017 x86_64 x86_64
Memory: 2.93927001953125 GB (1169.8515625 MB free)
Uptime: 26674.0 sec
Load Avg:  0.9453125  0.95703125  0.98095703125
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz    1216918 s       6815 s     103760 s    1093906 s         38 s
#2  3500 MHz     948123 s        114 s      90301 s    1543398 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.9.1
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.7
 - Compat                        0.26.0
 - SHA                           0.3.3
 - URIParser                     0.1.8
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1344	 ParSpMatVec=0.0275	 speedup=4.8920
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1344	 ParSpMatVec=0.0083	 speedup=16.2654
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1344	 ParSpMatVec=0.0138	 speedup=9.7362
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1344	 ParSpMatVec=0.0089	 speedup=15.0979
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1344	 ParSpMatVec=0.0131	 speedup=10.2835
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0752	 ParSpMatVec=0.0263	 speedup=2.8577
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0752	 ParSpMatVec=0.0185	 speedup=4.0746
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0752	 ParSpMatVec=0.0149	 speedup=5.0389
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0752	 ParSpMatVec=0.0138	 speedup=5.4482
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0752	 ParSpMatVec=0.0190	 speedup=3.9662

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0455	 ParSpMatVec=0.0290	 speedup=1.5708
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0455	 ParSpMatVec=0.0131	 speedup=3.4738
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0455	 ParSpMatVec=0.0169	 speedup=2.6978
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0455	 ParSpMatVec=0.0120	 speedup=3.7901
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0455	 ParSpMatVec=0.0131	 speedup=3.4705

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0362	 ParSpMatVec=0.0465	 speedup=0.7789
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0362	 ParSpMatVec=0.0027	 speedup=13.2855
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0362	 ParSpMatVec=0.0023	 speedup=15.4909
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0362	 ParSpMatVec=0.0019	 speedup=18.5649
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0362	 ParSpMatVec=0.0016	 speedup=22.9296

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0078	 ParSpMatVec=0.0437	 speedup=0.1795
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0078	 ParSpMatVec=0.0041	 speedup=1.9254
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0078	 ParSpMatVec=0.0093	 speedup=0.8432
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0078	 ParSpMatVec=0.0029	 speedup=2.6740
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0078	 ParSpMatVec=0.0025	 speedup=3.1489

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0323	 ParSpMatVec=0.0288	 speedup=1.1238
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0323	 ParSpMatVec=0.0035	 speedup=9.1362
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0323	 ParSpMatVec=0.0014	 speedup=22.3292
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0323	 ParSpMatVec=0.0016	 speedup=20.7153
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0323	 ParSpMatVec=0.0020	 speedup=16.0224

INFO: ParSpMatVec tests passed

>>> End of log
