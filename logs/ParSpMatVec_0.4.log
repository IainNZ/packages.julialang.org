>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.7
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.2
INFO: Installing URIParser v0.1.8
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of ParSpMatVec
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-119-generic #166-Ubuntu SMP Wed May 3 12:18:55 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1186.484375 MB free)
Uptime: 20802.0 sec
Load Avg:  1.00390625  1.02392578125  1.04443359375
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3496 MHz     947243 s       2474 s      73948 s     860811 s         27 s
#2  3496 MHz     665994 s       4369 s      60716 s    1294058 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.9.1
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.7
 - Compat                        0.25.2
 - SHA                           0.3.2
 - URIParser                     0.1.8
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1231	 ParSpMatVec=0.0269	 speedup=4.5766
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1231	 ParSpMatVec=0.0084	 speedup=14.6428
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1231	 ParSpMatVec=0.0170	 speedup=7.2582
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1231	 ParSpMatVec=0.0134	 speedup=9.2187
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1231	 ParSpMatVec=0.0171	 speedup=7.2154
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1345	 ParSpMatVec=0.0372	 speedup=3.6139
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1345	 ParSpMatVec=0.0139	 speedup=9.6494
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1345	 ParSpMatVec=0.0150	 speedup=8.9769
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1345	 ParSpMatVec=0.0179	 speedup=7.4962
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1345	 ParSpMatVec=0.0156	 speedup=8.6070

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0446	 ParSpMatVec=0.0335	 speedup=1.3302
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0446	 ParSpMatVec=0.0133	 speedup=3.3637
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0446	 ParSpMatVec=0.0143	 speedup=3.1249
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0446	 ParSpMatVec=0.0173	 speedup=2.5822
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0446	 ParSpMatVec=0.0178	 speedup=2.5050

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0401	 ParSpMatVec=0.0403	 speedup=0.9944
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0401	 ParSpMatVec=0.0026	 speedup=15.1632
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0401	 ParSpMatVec=0.0040	 speedup=10.0432
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0401	 ParSpMatVec=0.0014	 speedup=28.0393
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0401	 ParSpMatVec=0.0029	 speedup=14.0068

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0080	 ParSpMatVec=0.0327	 speedup=0.2443
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0080	 ParSpMatVec=0.0035	 speedup=2.2579
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0080	 ParSpMatVec=0.0025	 speedup=3.1835
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0080	 ParSpMatVec=0.0203	 speedup=0.3933
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0080	 ParSpMatVec=0.0026	 speedup=3.0381

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0458	 ParSpMatVec=0.0347	 speedup=1.3206
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0458	 ParSpMatVec=0.0040	 speedup=11.5583
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0458	 ParSpMatVec=0.0014	 speedup=32.6113
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0458	 ParSpMatVec=0.0049	 speedup=9.3181
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0458	 ParSpMatVec=0.0024	 speedup=19.3406

INFO: ParSpMatVec tests passed

>>> End of log
