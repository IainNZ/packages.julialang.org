>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.7
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.3
INFO: Installing URIParser v0.1.8
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of ParSpMatVec
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-121-generic #170-Ubuntu SMP Wed Jun 14 09:04:33 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1189.10546875 MB free)
Uptime: 21421.0 sec
Load Avg:  1.05322265625  1.0400390625  1.0458984375
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz    1038826 s       5750 s      80466 s     803282 s         30 s
#2  3500 MHz     713228 s        890 s      68139 s    1285884 s          2 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.9.1
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.7
 - Compat                        0.26.0
 - SHA                           0.3.3
 - URIParser                     0.1.8
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1341	 ParSpMatVec=0.0258	 speedup=5.2028
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1341	 ParSpMatVec=0.0093	 speedup=14.4282
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1341	 ParSpMatVec=0.0120	 speedup=11.2047
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1341	 ParSpMatVec=0.0080	 speedup=16.6854
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1341	 ParSpMatVec=0.0101	 speedup=13.2603
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1166	 ParSpMatVec=0.0428	 speedup=2.7254
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1166	 ParSpMatVec=0.0131	 speedup=8.9203
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1166	 ParSpMatVec=0.0145	 speedup=8.0294
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1166	 ParSpMatVec=0.0130	 speedup=8.9762
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1166	 ParSpMatVec=0.0153	 speedup=7.6161

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0443	 ParSpMatVec=0.0291	 speedup=1.5214
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0443	 ParSpMatVec=0.0135	 speedup=3.2780
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0443	 ParSpMatVec=0.0153	 speedup=2.8965
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0443	 ParSpMatVec=0.0124	 speedup=3.5677
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0443	 ParSpMatVec=0.0137	 speedup=3.2374

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0458	 ParSpMatVec=0.0399	 speedup=1.1486
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0458	 ParSpMatVec=0.0026	 speedup=17.9540
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0458	 ParSpMatVec=0.0022	 speedup=21.2494
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0458	 ParSpMatVec=0.0020	 speedup=22.9896
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0458	 ParSpMatVec=0.0020	 speedup=22.8459

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0088	 ParSpMatVec=0.0517	 speedup=0.1700
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0088	 ParSpMatVec=0.0040	 speedup=2.1798
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0088	 ParSpMatVec=0.0033	 speedup=2.6783
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0088	 ParSpMatVec=0.0038	 speedup=2.3016
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0088	 ParSpMatVec=0.0024	 speedup=3.6685

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0461	 ParSpMatVec=0.0473	 speedup=0.9744
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0461	 ParSpMatVec=0.0046	 speedup=9.9901
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0461	 ParSpMatVec=0.0032	 speedup=14.4138
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0461	 ParSpMatVec=0.0039	 speedup=11.7425
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0461	 ParSpMatVec=0.0029	 speedup=15.7401

INFO: ParSpMatVec tests passed

>>> End of log
