>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.7
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.2
INFO: Installing URIParser v0.1.8
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of ParSpMatVec
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-116-generic #163-Ubuntu SMP Fri Mar 31 14:13:22 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1192.4296875 MB free)
Uptime: 19405.0 sec
Load Avg:  1.05078125  1.01611328125  1.02001953125
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz     961089 s         60 s      84072 s     697503 s         29 s
#2  3499 MHz     623647 s       6192 s      75233 s    1177572 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.9.0
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.7
 - Compat                        0.23.0
 - SHA                           0.3.2
 - URIParser                     0.1.8
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1336	 ParSpMatVec=0.0266	 speedup=5.0278
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1336	 ParSpMatVec=0.0089	 speedup=14.9682
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1336	 ParSpMatVec=0.0118	 speedup=11.2852
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1336	 ParSpMatVec=0.0094	 speedup=14.2630
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1336	 ParSpMatVec=0.0092	 speedup=14.5279
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1207	 ParSpMatVec=0.0386	 speedup=3.1316
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1207	 ParSpMatVec=0.0130	 speedup=9.3090
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1207	 ParSpMatVec=0.0160	 speedup=7.5523
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1207	 ParSpMatVec=0.0129	 speedup=9.3619
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1207	 ParSpMatVec=0.0136	 speedup=8.8847

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0288	 ParSpMatVec=0.0263	 speedup=1.0949
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0288	 ParSpMatVec=0.0145	 speedup=1.9931
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0288	 ParSpMatVec=0.0157	 speedup=1.8309
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0288	 ParSpMatVec=0.0143	 speedup=2.0188
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0288	 ParSpMatVec=0.0140	 speedup=2.0636

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0380	 ParSpMatVec=0.0251	 speedup=1.5111
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0380	 ParSpMatVec=0.0015	 speedup=25.9528
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0380	 ParSpMatVec=0.0020	 speedup=19.0160
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0380	 ParSpMatVec=0.0024	 speedup=15.9841
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0380	 ParSpMatVec=0.0016	 speedup=23.4800

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0075	 ParSpMatVec=0.0257	 speedup=0.2918
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0075	 ParSpMatVec=0.0035	 speedup=2.1335
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0075	 ParSpMatVec=0.0016	 speedup=4.6758
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0075	 ParSpMatVec=0.0020	 speedup=3.7221
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0075	 ParSpMatVec=0.0021	 speedup=3.6435

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0292	 ParSpMatVec=0.0288	 speedup=1.0146
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0292	 ParSpMatVec=0.0033	 speedup=8.9527
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0292	 ParSpMatVec=0.0018	 speedup=16.3561
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0292	 ParSpMatVec=0.0020	 speedup=14.3840
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0292	 ParSpMatVec=0.0028	 speedup=10.5711

INFO: ParSpMatVec tests passed

>>> End of log
