>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.7
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.2
INFO: Installing URIParser v0.1.8
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of ParSpMatVec
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-116-generic #163-Ubuntu SMP Fri Mar 31 14:13:22 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1189.078125 MB free)
Uptime: 20044.0 sec
Load Avg:  0.9169921875  0.9501953125  0.986328125
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz     996532 s       1156 s      87618 s     711663 s         37 s
#2  3500 MHz     618113 s       5414 s      79873 s    1235897 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.9.0
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.7
 - Compat                        0.24.0
 - SHA                           0.3.2
 - URIParser                     0.1.8
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1440	 ParSpMatVec=0.0257	 speedup=5.5982
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1440	 ParSpMatVec=0.0092	 speedup=15.6389
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1440	 ParSpMatVec=0.0125	 speedup=11.5274
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1440	 ParSpMatVec=0.0089	 speedup=16.1037
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1440	 ParSpMatVec=0.0093	 speedup=15.4444
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1218	 ParSpMatVec=0.0397	 speedup=3.0689
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1218	 ParSpMatVec=0.0137	 speedup=8.8604
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1218	 ParSpMatVec=0.0160	 speedup=7.5953
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1218	 ParSpMatVec=0.0139	 speedup=8.7782
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1218	 ParSpMatVec=0.0141	 speedup=8.6361

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0534	 ParSpMatVec=0.0344	 speedup=1.5525
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0534	 ParSpMatVec=0.0151	 speedup=3.5242
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0534	 ParSpMatVec=0.0149	 speedup=3.5701
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0534	 ParSpMatVec=0.0193	 speedup=2.7654
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0534	 ParSpMatVec=0.0173	 speedup=3.0798

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0430	 ParSpMatVec=0.0403	 speedup=1.0674
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0430	 ParSpMatVec=0.0022	 speedup=19.2981
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0430	 ParSpMatVec=0.0019	 speedup=22.5987
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0430	 ParSpMatVec=0.0023	 speedup=18.9617
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0430	 ParSpMatVec=0.0019	 speedup=22.9495

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0082	 ParSpMatVec=0.0449	 speedup=0.1822
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0082	 ParSpMatVec=0.0033	 speedup=2.5112
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0082	 ParSpMatVec=0.0021	 speedup=3.9432
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0082	 ParSpMatVec=0.0022	 speedup=3.7768
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0082	 ParSpMatVec=0.0031	 speedup=2.5961

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0498	 ParSpMatVec=0.0538	 speedup=0.9251
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0498	 ParSpMatVec=0.0050	 speedup=9.9664
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0498	 ParSpMatVec=0.0039	 speedup=12.8600
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0498	 ParSpMatVec=0.0029	 speedup=17.3674
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0498	 ParSpMatVec=0.0032	 speedup=15.6007

INFO: ParSpMatVec tests passed

>>> End of log
