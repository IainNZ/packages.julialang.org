>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.7
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.3
INFO: Installing URIParser v0.1.8
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-121-generic #170-Ubuntu SMP Wed Jun 14 09:04:33 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1179.015625 MB free)
Uptime: 21535.0 sec
Load Avg:  1.03857421875  1.0146484375  1.00244140625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz    1039416 s        625 s      89731 s     806168 s         37 s
#2  3500 MHz     700227 s       5899 s      79506 s    1285615 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.9.1
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.7
 - Compat                        0.26.0
 - SHA                           0.3.3
 - URIParser                     0.1.8
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1093	 ParSpMatVec=0.0238	 speedup=4.5849
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1093	 ParSpMatVec=0.0094	 speedup=11.5809
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1093	 ParSpMatVec=0.0088	 speedup=12.3793
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1093	 ParSpMatVec=0.0070	 speedup=15.5620
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1093	 ParSpMatVec=0.0078	 speedup=14.0216
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1208	 ParSpMatVec=0.0419	 speedup=2.8834
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1208	 ParSpMatVec=0.0123	 speedup=9.8106
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1208	 ParSpMatVec=0.0085	 speedup=14.1274
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1208	 ParSpMatVec=0.0102	 speedup=11.8022
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1208	 ParSpMatVec=0.0114	 speedup=10.5732

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0411	 ParSpMatVec=0.0284	 speedup=1.4442
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0411	 ParSpMatVec=0.0136	 speedup=3.0231
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0411	 ParSpMatVec=0.0085	 speedup=4.8375
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0411	 ParSpMatVec=0.0120	 speedup=3.4342
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0411	 ParSpMatVec=0.0162	 speedup=2.5408

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0295	 ParSpMatVec=0.0370	 speedup=0.7968
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0295	 ParSpMatVec=0.0024	 speedup=12.3080
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0295	 ParSpMatVec=0.0022	 speedup=13.3093
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0295	 ParSpMatVec=0.0020	 speedup=14.8874
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0295	 ParSpMatVec=0.0023	 speedup=12.8584

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0084	 ParSpMatVec=0.0473	 speedup=0.1779
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0084	 ParSpMatVec=0.0043	 speedup=1.9768
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0084	 ParSpMatVec=0.0020	 speedup=4.3082
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0084	 ParSpMatVec=0.0027	 speedup=3.1695
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0084	 ParSpMatVec=0.0042	 speedup=1.9940

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0621	 ParSpMatVec=0.0479	 speedup=1.2965
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0621	 ParSpMatVec=0.0037	 speedup=16.5922
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0621	 ParSpMatVec=0.0023	 speedup=27.0197
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0621	 ParSpMatVec=0.0034	 speedup=18.4842
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0621	 ParSpMatVec=0.0021	 speedup=29.0022

INFO: ParSpMatVec tests passed

>>> End of log
