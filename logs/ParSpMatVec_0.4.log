>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.7
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.2
INFO: Installing URIParser v0.1.8
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-117-generic #164-Ubuntu SMP Fri Apr 7 11:05:26 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1182.80859375 MB free)
Uptime: 20514.0 sec
Load Avg:  1.04833984375  1.02978515625  1.029296875
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3495 MHz     974853 s       3913 s      82478 s     789069 s         37 s
#2  3495 MHz     678555 s       2878 s      73582 s    1233860 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.9.1
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.7
 - Compat                        0.24.0
 - SHA                           0.3.2
 - URIParser                     0.1.8
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1319	 ParSpMatVec=0.0264	 speedup=4.9936
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1319	 ParSpMatVec=0.0093	 speedup=14.1543
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1319	 ParSpMatVec=0.0140	 speedup=9.4418
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1319	 ParSpMatVec=0.0132	 speedup=10.0013
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1319	 ParSpMatVec=0.0172	 speedup=7.6702
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1049	 ParSpMatVec=0.0410	 speedup=2.5556
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1049	 ParSpMatVec=0.0126	 speedup=8.3215
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1049	 ParSpMatVec=0.0188	 speedup=5.5841
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1049	 ParSpMatVec=0.0090	 speedup=11.6948
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1049	 ParSpMatVec=0.0119	 speedup=8.7849

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0438	 ParSpMatVec=0.0552	 speedup=0.7935
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0438	 ParSpMatVec=0.0129	 speedup=3.3899
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0438	 ParSpMatVec=0.0093	 speedup=4.7236
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0438	 ParSpMatVec=0.0160	 speedup=2.7411
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0438	 ParSpMatVec=0.0125	 speedup=3.4950

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0390	 ParSpMatVec=0.0427	 speedup=0.9148
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0390	 ParSpMatVec=0.0028	 speedup=13.9904
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0390	 ParSpMatVec=0.0023	 speedup=16.8018
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0390	 ParSpMatVec=0.0057	 speedup=6.8411
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0390	 ParSpMatVec=0.0014	 speedup=28.2240

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0100	 ParSpMatVec=0.0336	 speedup=0.2964
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0100	 ParSpMatVec=0.0041	 speedup=2.4029
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0100	 ParSpMatVec=0.0021	 speedup=4.7233
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0100	 ParSpMatVec=0.0029	 speedup=3.4909
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0100	 ParSpMatVec=0.0026	 speedup=3.7740

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0454	 ParSpMatVec=0.0474	 speedup=0.9589
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0454	 ParSpMatVec=0.0041	 speedup=11.0621
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0454	 ParSpMatVec=0.0022	 speedup=20.8894
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0454	 ParSpMatVec=0.0084	 speedup=5.4389
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0454	 ParSpMatVec=0.0028	 speedup=15.9931

INFO: ParSpMatVec tests passed

>>> End of log
