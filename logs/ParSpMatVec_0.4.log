>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.7
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.3
INFO: Installing URIParser v0.1.8
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-125-generic #174-Ubuntu SMP Mon Jul 10 18:51:24 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1165.546875 MB free)
Uptime: 22108.0 sec
Load Avg:  0.9970703125  0.9716796875  0.98193359375
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz    1069858 s       3394 s      86998 s     832475 s         36 s
#2  3500 MHz     742412 s       4678 s      74501 s    1323112 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.9.1
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.7
 - Compat                        0.26.0
 - SHA                           0.3.3
 - URIParser                     0.1.8
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1213	 ParSpMatVec=0.0178	 speedup=6.8197
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1213	 ParSpMatVec=0.0084	 speedup=14.4350
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1213	 ParSpMatVec=0.0086	 speedup=14.0456
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1213	 ParSpMatVec=0.0093	 speedup=13.0236
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1213	 ParSpMatVec=0.0093	 speedup=13.1032
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0814	 ParSpMatVec=0.0315	 speedup=2.5853
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0814	 ParSpMatVec=0.0143	 speedup=5.6796
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0814	 ParSpMatVec=0.0209	 speedup=3.8955
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0814	 ParSpMatVec=0.0161	 speedup=5.0489
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0814	 ParSpMatVec=0.0144	 speedup=5.6360

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0428	 ParSpMatVec=0.0250	 speedup=1.7131
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0428	 ParSpMatVec=0.0141	 speedup=3.0235
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0428	 ParSpMatVec=0.0130	 speedup=3.2778
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0428	 ParSpMatVec=0.0160	 speedup=2.6794
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0428	 ParSpMatVec=0.0167	 speedup=2.5625

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0330	 ParSpMatVec=0.0262	 speedup=1.2598
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0330	 ParSpMatVec=0.0021	 speedup=15.8367
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0330	 ParSpMatVec=0.0022	 speedup=14.7190
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0330	 ParSpMatVec=0.0114	 speedup=2.8816
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0330	 ParSpMatVec=0.0035	 speedup=9.4853

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0070	 ParSpMatVec=0.0375	 speedup=0.1862
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0070	 ParSpMatVec=0.0043	 speedup=1.6207
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0070	 ParSpMatVec=0.0035	 speedup=1.9949
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0070	 ParSpMatVec=0.0027	 speedup=2.6096
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0070	 ParSpMatVec=0.0025	 speedup=2.8352

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0320	 ParSpMatVec=0.0433	 speedup=0.7388
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0320	 ParSpMatVec=0.0037	 speedup=8.5895
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0320	 ParSpMatVec=0.0026	 speedup=12.2921
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0320	 ParSpMatVec=0.0025	 speedup=12.6162
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0320	 ParSpMatVec=0.0026	 speedup=12.4273

INFO: ParSpMatVec tests passed

>>> End of log
