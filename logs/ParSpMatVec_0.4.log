>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.7
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.2
INFO: Installing URIParser v0.1.8
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of ParSpMatVec
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-117-generic #164-Ubuntu SMP Fri Apr 7 11:05:26 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1198.2265625 MB free)
Uptime: 19834.0 sec
Load Avg:  1.0771484375  0.98388671875  0.9599609375
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz     983222 s       6688 s      76572 s     705588 s         34 s
#2  3499 MHz     616394 s       2543 s      64593 s    1234121 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.9.1
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.7
 - Compat                        0.24.0
 - SHA                           0.3.2
 - URIParser                     0.1.8
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0866	 ParSpMatVec=0.0162	 speedup=5.3521
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0866	 ParSpMatVec=0.0090	 speedup=9.6219
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0866	 ParSpMatVec=0.0115	 speedup=7.5076
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0866	 ParSpMatVec=0.0090	 speedup=9.6708
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0866	 ParSpMatVec=0.0087	 speedup=9.9895
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0789	 ParSpMatVec=0.0387	 speedup=2.0368
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0789	 ParSpMatVec=0.0138	 speedup=5.7107
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0789	 ParSpMatVec=0.0162	 speedup=4.8734
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0789	 ParSpMatVec=0.0127	 speedup=6.1947
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0789	 ParSpMatVec=0.0137	 speedup=5.7382

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0409	 ParSpMatVec=0.0285	 speedup=1.4334
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0409	 ParSpMatVec=0.0134	 speedup=3.0506
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0409	 ParSpMatVec=0.0157	 speedup=2.5972
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0409	 ParSpMatVec=0.0140	 speedup=2.9171
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0409	 ParSpMatVec=0.0145	 speedup=2.8272

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0478	 ParSpMatVec=0.0311	 speedup=1.5398
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0478	 ParSpMatVec=0.0022	 speedup=21.7876
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0478	 ParSpMatVec=0.0032	 speedup=15.1759
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0478	 ParSpMatVec=0.0019	 speedup=25.7446
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0478	 ParSpMatVec=0.0015	 speedup=31.4160

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0068	 ParSpMatVec=0.0255	 speedup=0.2684
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0068	 ParSpMatVec=0.0025	 speedup=2.7141
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0068	 ParSpMatVec=0.0021	 speedup=3.2934
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0068	 ParSpMatVec=0.0028	 speedup=2.4295
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0068	 ParSpMatVec=0.0023	 speedup=2.9702

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0291	 ParSpMatVec=0.0318	 speedup=0.9165
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0291	 ParSpMatVec=0.0025	 speedup=11.8533
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0291	 ParSpMatVec=0.0022	 speedup=13.4025
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0291	 ParSpMatVec=0.0026	 speedup=11.0284
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0291	 ParSpMatVec=0.0030	 speedup=9.8555

INFO: ParSpMatVec tests passed

>>> End of log
