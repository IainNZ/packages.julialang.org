>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.7
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.3
INFO: Installing URIParser v0.1.8
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of ParSpMatVec
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-119-generic #166-Ubuntu SMP Wed May 3 12:18:55 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1195.1015625 MB free)
Uptime: 21676.0 sec
Load Avg:  1.0078125  1.01708984375  1.04541015625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz    1050930 s         95 s      81579 s     824108 s         41 s
#2  3500 MHz     712311 s       7046 s      70134 s    1312415 s          1 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.9.1
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.7
 - Compat                        0.25.2
 - SHA                           0.3.3
 - URIParser                     0.1.8
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1351	 ParSpMatVec=0.0263	 speedup=5.1383
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1351	 ParSpMatVec=0.0075	 speedup=17.8997
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1351	 ParSpMatVec=0.0117	 speedup=11.5135
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1351	 ParSpMatVec=0.0071	 speedup=19.1573
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1351	 ParSpMatVec=0.0100	 speedup=13.4638
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1290	 ParSpMatVec=0.0407	 speedup=3.1714
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1290	 ParSpMatVec=0.0140	 speedup=9.2046
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1290	 ParSpMatVec=0.0165	 speedup=7.8019
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1290	 ParSpMatVec=0.0141	 speedup=9.1689
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1290	 ParSpMatVec=0.0131	 speedup=9.8226

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0306	 ParSpMatVec=0.0207	 speedup=1.4743
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0306	 ParSpMatVec=0.0129	 speedup=2.3700
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0306	 ParSpMatVec=0.0148	 speedup=2.0599
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0306	 ParSpMatVec=0.0157	 speedup=1.9427
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0306	 ParSpMatVec=0.0117	 speedup=2.6078

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0444	 ParSpMatVec=0.0260	 speedup=1.7080
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0444	 ParSpMatVec=0.0024	 speedup=18.3854
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0444	 ParSpMatVec=0.0029	 speedup=15.4578
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0444	 ParSpMatVec=0.0014	 speedup=32.7309
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0444	 ParSpMatVec=0.0023	 speedup=19.2018

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0083	 ParSpMatVec=0.0447	 speedup=0.1848
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0083	 ParSpMatVec=0.0039	 speedup=2.1344
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0083	 ParSpMatVec=0.0021	 speedup=3.9341
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0083	 ParSpMatVec=0.0053	 speedup=1.5464
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0083	 ParSpMatVec=0.0024	 speedup=3.3911

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0487	 ParSpMatVec=0.0441	 speedup=1.1042
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0487	 ParSpMatVec=0.0037	 speedup=13.2303
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0487	 ParSpMatVec=0.0019	 speedup=25.8139
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0487	 ParSpMatVec=0.0022	 speedup=22.1792
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0487	 ParSpMatVec=0.0025	 speedup=19.7231

INFO: ParSpMatVec tests passed

>>> End of log
