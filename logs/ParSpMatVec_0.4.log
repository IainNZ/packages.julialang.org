>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.7
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.3
INFO: Installing URIParser v0.1.8
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of ParSpMatVec
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-135-generic #184-Ubuntu SMP Wed Oct 18 11:55:51 UTC 2017 x86_64 x86_64
Memory: 2.93927001953125 GB (1190.28125 MB free)
Uptime: 26173.0 sec
Load Avg:  0.919921875  0.94921875  0.986328125
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz    1238114 s         51 s      93951 s    1039078 s         39 s
#2  3499 MHz     900332 s       6518 s      80865 s    1536283 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.9.1
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.7
 - Compat                        0.26.0
 - SHA                           0.3.3
 - URIParser                     0.1.8
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1289	 ParSpMatVec=0.0292	 speedup=4.4193
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1289	 ParSpMatVec=0.0090	 speedup=14.3611
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1289	 ParSpMatVec=0.0147	 speedup=8.7530
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1289	 ParSpMatVec=0.0109	 speedup=11.7882
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1289	 ParSpMatVec=0.0099	 speedup=13.0346
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1286	 ParSpMatVec=0.0452	 speedup=2.8465
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1286	 ParSpMatVec=0.0147	 speedup=8.7421
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1286	 ParSpMatVec=0.0163	 speedup=7.8833
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1286	 ParSpMatVec=0.0137	 speedup=9.4009
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1286	 ParSpMatVec=0.0146	 speedup=8.8234

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0292	 ParSpMatVec=0.0195	 speedup=1.4959
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0292	 ParSpMatVec=0.0130	 speedup=2.2419
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0292	 ParSpMatVec=0.0158	 speedup=1.8537
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0292	 ParSpMatVec=0.0117	 speedup=2.4888
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0292	 ParSpMatVec=0.0171	 speedup=1.7040

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0454	 ParSpMatVec=0.0393	 speedup=1.1550
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0454	 ParSpMatVec=0.0023	 speedup=19.3796
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0454	 ParSpMatVec=0.0013	 speedup=36.0758
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0454	 ParSpMatVec=0.0025	 speedup=17.9912
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0454	 ParSpMatVec=0.0027	 speedup=16.6873

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0082	 ParSpMatVec=0.0447	 speedup=0.1838
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0082	 ParSpMatVec=0.0037	 speedup=2.2308
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0082	 ParSpMatVec=0.0031	 speedup=2.6181
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0082	 ParSpMatVec=0.0023	 speedup=3.6515
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0082	 ParSpMatVec=0.0022	 speedup=3.7053

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0488	 ParSpMatVec=0.0480	 speedup=1.0178
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0488	 ParSpMatVec=0.0041	 speedup=11.7865
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0488	 ParSpMatVec=0.0021	 speedup=23.0232
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0488	 ParSpMatVec=0.0039	 speedup=12.5910
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0488	 ParSpMatVec=0.0026	 speedup=19.0060

INFO: ParSpMatVec tests passed

>>> End of log
