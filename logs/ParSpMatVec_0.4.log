>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.7
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.3
INFO: Installing URIParser v0.1.8
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of ParSpMatVec
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-119-generic #166-Ubuntu SMP Wed May 3 12:18:55 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1192.01171875 MB free)
Uptime: 20606.0 sec
Load Avg:  0.99267578125  0.97412109375  1.01318359375
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz    1002232 s       6150 s      77853 s     764606 s         32 s
#2  3499 MHz     675269 s        970 s      66715 s    1237744 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.9.1
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.7
 - Compat                        0.25.2
 - SHA                           0.3.3
 - URIParser                     0.1.8
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1353	 ParSpMatVec=0.0258	 speedup=5.2506
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1353	 ParSpMatVec=0.0092	 speedup=14.7749
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1353	 ParSpMatVec=0.0118	 speedup=11.5123
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1353	 ParSpMatVec=0.0075	 speedup=17.9226
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1353	 ParSpMatVec=0.0106	 speedup=12.7365
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1176	 ParSpMatVec=0.0410	 speedup=2.8662
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1176	 ParSpMatVec=0.0138	 speedup=8.5307
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1176	 ParSpMatVec=0.0148	 speedup=7.9582
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1176	 ParSpMatVec=0.0160	 speedup=7.3399
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1176	 ParSpMatVec=0.0142	 speedup=8.2609

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0305	 ParSpMatVec=0.0188	 speedup=1.6223
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0305	 ParSpMatVec=0.0130	 speedup=2.3578
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0305	 ParSpMatVec=0.0154	 speedup=1.9877
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0305	 ParSpMatVec=0.0130	 speedup=2.3519
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0305	 ParSpMatVec=0.0131	 speedup=2.3262

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0333	 ParSpMatVec=0.0397	 speedup=0.8379
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0333	 ParSpMatVec=0.0036	 speedup=9.3310
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0333	 ParSpMatVec=0.0023	 speedup=14.2342
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0333	 ParSpMatVec=0.0017	 speedup=19.5710
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0333	 ParSpMatVec=0.0021	 speedup=16.0182

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0102	 ParSpMatVec=0.0365	 speedup=0.2807
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0102	 ParSpMatVec=0.0043	 speedup=2.3617
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0102	 ParSpMatVec=0.0050	 speedup=2.0417
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0102	 ParSpMatVec=0.0030	 speedup=3.4189
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0102	 ParSpMatVec=0.0023	 speedup=4.4916

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0384	 ParSpMatVec=0.0280	 speedup=1.3706
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0384	 ParSpMatVec=0.0033	 speedup=11.6121
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0384	 ParSpMatVec=0.0021	 speedup=18.1736
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0384	 ParSpMatVec=0.0037	 speedup=10.5215
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0384	 ParSpMatVec=0.0060	 speedup=6.4337

INFO: ParSpMatVec tests passed

>>> End of log
