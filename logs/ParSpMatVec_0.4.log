>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.7
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.3
INFO: Installing URIParser v0.1.8
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of ParSpMatVec
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-128-generic #177-Ubuntu SMP Tue Aug 8 11:40:23 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1176.35546875 MB free)
Uptime: 22494.0 sec
Load Avg:  1.0068359375  1.02001953125  1.02392578125
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3493 MHz    1072082 s       4703 s      83091 s     867869 s         25 s
#2  3493 MHz     776441 s       1768 s      69588 s    1333096 s          1 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.9.1
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.7
 - Compat                        0.26.0
 - SHA                           0.3.3
 - URIParser                     0.1.8
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1223	 ParSpMatVec=0.0271	 speedup=4.5084
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1223	 ParSpMatVec=0.0090	 speedup=13.5456
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1223	 ParSpMatVec=0.0129	 speedup=9.4957
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1223	 ParSpMatVec=0.0104	 speedup=11.7680
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1223	 ParSpMatVec=0.0132	 speedup=9.2814
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1101	 ParSpMatVec=0.0408	 speedup=2.6997
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1101	 ParSpMatVec=0.0137	 speedup=8.0632
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1101	 ParSpMatVec=0.0173	 speedup=6.3764
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1101	 ParSpMatVec=0.0238	 speedup=4.6230
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1101	 ParSpMatVec=0.0141	 speedup=7.7863

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0462	 ParSpMatVec=0.0296	 speedup=1.5615
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0462	 ParSpMatVec=0.0125	 speedup=3.6929
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0462	 ParSpMatVec=0.0146	 speedup=3.1575
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0462	 ParSpMatVec=0.0145	 speedup=3.1882
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0462	 ParSpMatVec=0.0148	 speedup=3.1131

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0412	 ParSpMatVec=0.0404	 speedup=1.0180
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0412	 ParSpMatVec=0.0012	 speedup=33.1414
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0412	 ParSpMatVec=0.0021	 speedup=19.8009
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0412	 ParSpMatVec=0.0092	 speedup=4.4563
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0412	 ParSpMatVec=0.0022	 speedup=18.7157

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0079	 ParSpMatVec=0.0412	 speedup=0.1914
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0079	 ParSpMatVec=0.0040	 speedup=1.9641
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0079	 ParSpMatVec=0.0020	 speedup=3.9801
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0079	 ParSpMatVec=0.0022	 speedup=3.5811
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0079	 ParSpMatVec=0.0028	 speedup=2.8625

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0368	 ParSpMatVec=0.0462	 speedup=0.7972
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0368	 ParSpMatVec=0.0096	 speedup=3.8163
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0368	 ParSpMatVec=0.0018	 speedup=20.9213
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0368	 ParSpMatVec=0.0026	 speedup=14.2388
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0368	 ParSpMatVec=0.0725	 speedup=0.5078

INFO: ParSpMatVec tests passed

>>> End of log
