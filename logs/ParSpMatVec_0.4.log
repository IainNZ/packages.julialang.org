>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.7
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.3
INFO: Installing URIParser v0.1.8
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of ParSpMatVec
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-119-generic #166-Ubuntu SMP Wed May 3 12:18:55 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1187.609375 MB free)
Uptime: 20142.0 sec
Load Avg:  1.04345703125  0.99267578125  1.00341796875
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz     970063 s       7108 s      76332 s     757651 s         32 s
#2  3499 MHz     694626 s        222 s      66267 s    1183520 s          1 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.9.1
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.7
 - Compat                        0.25.2
 - SHA                           0.3.3
 - URIParser                     0.1.8
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0810	 ParSpMatVec=0.0171	 speedup=4.7464
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0810	 ParSpMatVec=0.0083	 speedup=9.7749
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0810	 ParSpMatVec=0.0157	 speedup=5.1776
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0810	 ParSpMatVec=0.0139	 speedup=5.8114
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0810	 ParSpMatVec=0.0116	 speedup=7.0022
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1172	 ParSpMatVec=0.0399	 speedup=2.9373
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1172	 ParSpMatVec=0.0134	 speedup=8.7465
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1172	 ParSpMatVec=0.0166	 speedup=7.0493
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1172	 ParSpMatVec=0.0121	 speedup=9.6900
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1172	 ParSpMatVec=0.0123	 speedup=9.5093

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0436	 ParSpMatVec=0.0284	 speedup=1.5316
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0436	 ParSpMatVec=0.0137	 speedup=3.1751
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0436	 ParSpMatVec=0.0152	 speedup=2.8619
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0436	 ParSpMatVec=0.0131	 speedup=3.3273
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0436	 ParSpMatVec=0.0150	 speedup=2.8953

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0411	 ParSpMatVec=0.0380	 speedup=1.0801
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0411	 ParSpMatVec=0.0026	 speedup=16.1123
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0411	 ParSpMatVec=0.0026	 speedup=15.9123
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0411	 ParSpMatVec=0.0015	 speedup=26.8246
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0411	 ParSpMatVec=0.0017	 speedup=24.6307

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0082	 ParSpMatVec=0.0304	 speedup=0.2716
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0082	 ParSpMatVec=0.0032	 speedup=2.5961
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0082	 ParSpMatVec=0.0029	 speedup=2.8856
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0082	 ParSpMatVec=0.0022	 speedup=3.8310
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0082	 ParSpMatVec=0.0021	 speedup=3.8716

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0444	 ParSpMatVec=0.0468	 speedup=0.9496
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0444	 ParSpMatVec=0.0032	 speedup=13.8885
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0444	 ParSpMatVec=0.0026	 speedup=17.3064
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0444	 ParSpMatVec=0.0050	 speedup=8.8587
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0444	 ParSpMatVec=0.0024	 speedup=18.2216

INFO: ParSpMatVec tests passed

>>> End of log
