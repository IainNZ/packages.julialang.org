>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.7
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.3
INFO: Installing URIParser v0.1.8
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of ParSpMatVec
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-121-generic #170-Ubuntu SMP Wed Jun 14 09:04:33 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1158.421875 MB free)
Uptime: 21109.0 sec
Load Avg:  1.0166015625  1.029296875  1.04541015625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz    1060908 s        174 s      77862 s     726469 s         27 s
#2  3500 MHz     668329 s       6495 s      67250 s    1296957 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.9.1
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.7
 - Compat                        0.26.0
 - SHA                           0.3.3
 - URIParser                     0.1.8
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0965	 ParSpMatVec=0.0265	 speedup=3.6372
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0965	 ParSpMatVec=0.0086	 speedup=11.1796
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0965	 ParSpMatVec=0.0114	 speedup=8.4914
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0965	 ParSpMatVec=0.0104	 speedup=9.2841
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0965	 ParSpMatVec=0.0095	 speedup=10.1454
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1056	 ParSpMatVec=0.0440	 speedup=2.3980
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1056	 ParSpMatVec=0.0128	 speedup=8.2380
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1056	 ParSpMatVec=0.0125	 speedup=8.4345
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1056	 ParSpMatVec=0.0137	 speedup=7.7323
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1056	 ParSpMatVec=0.0154	 speedup=6.8519

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0439	 ParSpMatVec=0.0314	 speedup=1.3986
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0439	 ParSpMatVec=0.0132	 speedup=3.3297
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0439	 ParSpMatVec=0.0143	 speedup=3.0650
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0439	 ParSpMatVec=0.0131	 speedup=3.3393
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0439	 ParSpMatVec=0.0146	 speedup=3.0006

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0318	 ParSpMatVec=0.0329	 speedup=0.9648
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0318	 ParSpMatVec=0.0021	 speedup=15.2277
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0318	 ParSpMatVec=0.0029	 speedup=11.0185
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0318	 ParSpMatVec=0.0013	 speedup=23.5952
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0318	 ParSpMatVec=0.0021	 speedup=15.1307

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0079	 ParSpMatVec=0.0386	 speedup=0.2050
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0079	 ParSpMatVec=0.0029	 speedup=2.7273
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0079	 ParSpMatVec=0.0061	 speedup=1.2936
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0079	 ParSpMatVec=0.0029	 speedup=2.6997
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0079	 ParSpMatVec=0.0042	 speedup=1.8934

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0471	 ParSpMatVec=0.0455	 speedup=1.0362
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0471	 ParSpMatVec=0.0040	 speedup=11.8403
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0471	 ParSpMatVec=0.0022	 speedup=21.6732
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0471	 ParSpMatVec=0.0027	 speedup=17.6293
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0471	 ParSpMatVec=0.0026	 speedup=17.9851

INFO: ParSpMatVec tests passed

>>> End of log
