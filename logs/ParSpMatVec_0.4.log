>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.7
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.3
INFO: Installing URIParser v0.1.8
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-121-generic #170-Ubuntu SMP Wed Jun 14 09:04:33 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1147.07421875 MB free)
Uptime: 22232.0 sec
Load Avg:  0.9970703125  1.0009765625  1.03466796875
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3497 MHz    1065938 s       2985 s      90970 s     838003 s         31 s
#2  3497 MHz     708614 s       3413 s      78786 s    1350570 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.9.1
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.7
 - Compat                        0.26.0
 - SHA                           0.3.3
 - URIParser                     0.1.8
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1386	 ParSpMatVec=0.0165	 speedup=8.3790
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1386	 ParSpMatVec=0.0087	 speedup=15.9783
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1386	 ParSpMatVec=0.0120	 speedup=11.5127
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1386	 ParSpMatVec=0.0102	 speedup=13.5477
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1386	 ParSpMatVec=0.0109	 speedup=12.7321
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1465	 ParSpMatVec=0.0421	 speedup=3.4792
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1465	 ParSpMatVec=0.0129	 speedup=11.3238
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1465	 ParSpMatVec=0.0150	 speedup=9.7689
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1465	 ParSpMatVec=0.0257	 speedup=5.6910
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1465	 ParSpMatVec=0.0153	 speedup=9.5936

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0472	 ParSpMatVec=0.0299	 speedup=1.5779
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0472	 ParSpMatVec=0.0131	 speedup=3.5955
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0472	 ParSpMatVec=0.0160	 speedup=2.9498
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0472	 ParSpMatVec=0.0141	 speedup=3.3556
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0472	 ParSpMatVec=0.0136	 speedup=3.4745

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0446	 ParSpMatVec=0.0381	 speedup=1.1724
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0446	 ParSpMatVec=0.0031	 speedup=14.5187
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0446	 ParSpMatVec=0.0034	 speedup=13.1797
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0446	 ParSpMatVec=0.0017	 speedup=26.0379
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0446	 ParSpMatVec=0.0018	 speedup=25.4754

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0088	 ParSpMatVec=0.0519	 speedup=0.1701
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0088	 ParSpMatVec=0.0030	 speedup=2.9139
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0088	 ParSpMatVec=0.0018	 speedup=4.9901
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0088	 ParSpMatVec=0.0024	 speedup=3.7174
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0088	 ParSpMatVec=0.0023	 speedup=3.9163

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0465	 ParSpMatVec=0.0494	 speedup=0.9406
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0465	 ParSpMatVec=0.0037	 speedup=12.6056
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0465	 ParSpMatVec=0.0041	 speedup=11.4095
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0465	 ParSpMatVec=0.0024	 speedup=19.7814
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0465	 ParSpMatVec=0.0027	 speedup=17.3453

INFO: ParSpMatVec tests passed

>>> End of log
