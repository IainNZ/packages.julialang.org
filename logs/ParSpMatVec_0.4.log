>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.7
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.2
INFO: Installing URIParser v0.1.8
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of ParSpMatVec
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-117-generic #164-Ubuntu SMP Fri Apr 7 11:05:26 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1196.3671875 MB free)
Uptime: 20317.0 sec
Load Avg:  0.9755859375  0.9853515625  1.02392578125
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz    1002520 s        674 s      75033 s     736102 s         32 s
#2  3500 MHz     655745 s       6508 s      64601 s    1242588 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.9.1
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.7
 - Compat                        0.24.0
 - SHA                           0.3.2
 - URIParser                     0.1.8
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1426	 ParSpMatVec=0.0271	 speedup=5.2552
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1426	 ParSpMatVec=0.0095	 speedup=15.0487
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1426	 ParSpMatVec=0.0121	 speedup=11.7924
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1426	 ParSpMatVec=0.0102	 speedup=14.0047
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1426	 ParSpMatVec=0.0078	 speedup=18.2362
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1135	 ParSpMatVec=0.0400	 speedup=2.8382
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1135	 ParSpMatVec=0.0133	 speedup=8.5619
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1135	 ParSpMatVec=0.0192	 speedup=5.9074
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1135	 ParSpMatVec=0.0130	 speedup=8.7521
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1135	 ParSpMatVec=0.0151	 speedup=7.5055

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0482	 ParSpMatVec=0.0324	 speedup=1.4900
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0482	 ParSpMatVec=0.0132	 speedup=3.6471
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0482	 ParSpMatVec=0.0155	 speedup=3.1042
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0482	 ParSpMatVec=0.0129	 speedup=3.7359
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0482	 ParSpMatVec=0.0121	 speedup=3.9865

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0389	 ParSpMatVec=0.0366	 speedup=1.0637
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0389	 ParSpMatVec=0.0024	 speedup=16.3810
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0389	 ParSpMatVec=0.0025	 speedup=15.6762
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0389	 ParSpMatVec=0.0013	 speedup=28.8909
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0389	 ParSpMatVec=0.0017	 speedup=23.1446

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0104	 ParSpMatVec=0.0446	 speedup=0.2321
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0104	 ParSpMatVec=0.0049	 speedup=2.1301
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0104	 ParSpMatVec=0.0028	 speedup=3.6904
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0104	 ParSpMatVec=0.0027	 speedup=3.8499
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0104	 ParSpMatVec=0.0027	 speedup=3.8176

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0464	 ParSpMatVec=0.0524	 speedup=0.8857
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0464	 ParSpMatVec=0.0053	 speedup=8.6976
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0464	 ParSpMatVec=0.0041	 speedup=11.4173
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0464	 ParSpMatVec=0.0027	 speedup=17.2718
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0464	 ParSpMatVec=0.0032	 speedup=14.3822

INFO: ParSpMatVec tests passed

>>> End of log
