>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.7
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.3
INFO: Installing URIParser v0.1.8
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of ParSpMatVec
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-128-generic #177-Ubuntu SMP Tue Aug 8 11:40:23 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1179.3515625 MB free)
Uptime: 22797.0 sec
Load Avg:  1.00634765625  0.9853515625  0.9599609375
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz    1031030 s         58 s      80294 s     946567 s         38 s
#2  3500 MHz     713710 s       6140 s      66103 s    1405049 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.9.1
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.7
 - Compat                        0.26.0
 - SHA                           0.3.3
 - URIParser                     0.1.8
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0815	 ParSpMatVec=0.0156	 speedup=5.2376
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0815	 ParSpMatVec=0.0075	 speedup=10.8485
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0815	 ParSpMatVec=0.0088	 speedup=9.2197
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0815	 ParSpMatVec=0.0074	 speedup=11.0133
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0815	 ParSpMatVec=0.0101	 speedup=8.0361
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0792	 ParSpMatVec=0.0265	 speedup=2.9886
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0792	 ParSpMatVec=0.0125	 speedup=6.3374
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0792	 ParSpMatVec=0.0136	 speedup=5.8227
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0792	 ParSpMatVec=0.0132	 speedup=5.9972
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0792	 ParSpMatVec=0.0125	 speedup=6.3328

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0287	 ParSpMatVec=0.0185	 speedup=1.5527
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0287	 ParSpMatVec=0.0127	 speedup=2.2625
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0287	 ParSpMatVec=0.0141	 speedup=2.0384
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0287	 ParSpMatVec=0.0120	 speedup=2.3969
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0287	 ParSpMatVec=0.0136	 speedup=2.1078

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0281	 ParSpMatVec=0.0261	 speedup=1.0752
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0281	 ParSpMatVec=0.0032	 speedup=8.6844
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0281	 ParSpMatVec=0.0031	 speedup=9.1241
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0281	 ParSpMatVec=0.0017	 speedup=16.2052
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0281	 ParSpMatVec=0.0018	 speedup=15.9899

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0073	 ParSpMatVec=0.0263	 speedup=0.2778
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0073	 ParSpMatVec=0.0044	 speedup=1.6607
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0073	 ParSpMatVec=0.0024	 speedup=3.0410
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0073	 ParSpMatVec=0.0024	 speedup=3.0781
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0073	 ParSpMatVec=0.0017	 speedup=4.2237

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0276	 ParSpMatVec=0.0290	 speedup=0.9529
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0276	 ParSpMatVec=0.0033	 speedup=8.2563
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0276	 ParSpMatVec=0.0016	 speedup=16.9947
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0276	 ParSpMatVec=0.0018	 speedup=15.2453
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0276	 ParSpMatVec=0.0020	 speedup=13.9981

INFO: ParSpMatVec tests passed

>>> End of log
