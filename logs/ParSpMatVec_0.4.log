>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.7
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.2
INFO: Installing URIParser v0.1.8
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of ParSpMatVec
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-117-generic #164-Ubuntu SMP Fri Apr 7 11:05:26 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1197.4140625 MB free)
Uptime: 20576.0 sec
Load Avg:  1.1357421875  1.044921875  1.033203125
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz     976437 s       4550 s      74934 s     799899 s         41 s
#2  3500 MHz     668657 s       2779 s      65208 s    1238384 s          1 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.9.1
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.7
 - Compat                        0.24.0
 - SHA                           0.3.2
 - URIParser                     0.1.8
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1431	 ParSpMatVec=0.0256	 speedup=5.5986
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1431	 ParSpMatVec=0.0084	 speedup=17.0479
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1431	 ParSpMatVec=0.0086	 speedup=16.6654
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1431	 ParSpMatVec=0.0091	 speedup=15.7465
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1431	 ParSpMatVec=0.0250	 speedup=5.7356
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1158	 ParSpMatVec=0.0279	 speedup=4.1522
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1158	 ParSpMatVec=0.0118	 speedup=9.8315
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1158	 ParSpMatVec=0.0159	 speedup=7.2914
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1158	 ParSpMatVec=0.0135	 speedup=8.6050
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1158	 ParSpMatVec=0.0171	 speedup=6.7539

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0522	 ParSpMatVec=0.0313	 speedup=1.6669
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0522	 ParSpMatVec=0.0130	 speedup=4.0048
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0522	 ParSpMatVec=0.0158	 speedup=3.3104
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0522	 ParSpMatVec=0.0130	 speedup=4.0233
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0522	 ParSpMatVec=0.0155	 speedup=3.3713

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0358	 ParSpMatVec=0.0450	 speedup=0.7954
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0358	 ParSpMatVec=0.0029	 speedup=12.4520
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0358	 ParSpMatVec=0.0022	 speedup=16.5739
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0358	 ParSpMatVec=0.0025	 speedup=14.3090
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0358	 ParSpMatVec=0.0023	 speedup=15.3247

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0076	 ParSpMatVec=0.0503	 speedup=0.1514
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0076	 ParSpMatVec=0.0043	 speedup=1.7804
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0076	 ParSpMatVec=0.0075	 speedup=1.0203
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0076	 ParSpMatVec=0.0026	 speedup=2.9158
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0076	 ParSpMatVec=0.0024	 speedup=3.2302

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0467	 ParSpMatVec=0.0503	 speedup=0.9266
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0467	 ParSpMatVec=0.0040	 speedup=11.5242
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0467	 ParSpMatVec=0.0084	 speedup=5.5830
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0467	 ParSpMatVec=0.0023	 speedup=20.6485
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0467	 ParSpMatVec=0.0030	 speedup=15.7933

INFO: ParSpMatVec tests passed

>>> End of log
