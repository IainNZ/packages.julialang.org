>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.7
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.3
INFO: Installing URIParser v0.1.8
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of ParSpMatVec
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-121-generic #170-Ubuntu SMP Wed Jun 14 09:04:33 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1189.98828125 MB free)
Uptime: 20935.0 sec
Load Avg:  1.0068359375  1.044921875  1.04541015625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz    1028300 s       7018 s      77407 s     775397 s         28 s
#2  3500 MHz     722218 s         84 s      65017 s    1239044 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.9.1
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.7
 - Compat                        0.26.0
 - SHA                           0.3.3
 - URIParser                     0.1.8
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0750	 ParSpMatVec=0.0220	 speedup=3.4123
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0750	 ParSpMatVec=0.0088	 speedup=8.5004
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0750	 ParSpMatVec=0.0128	 speedup=5.8640
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0750	 ParSpMatVec=0.0107	 speedup=6.9920
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0750	 ParSpMatVec=0.0100	 speedup=7.5000
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0741	 ParSpMatVec=0.0267	 speedup=2.7803
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0741	 ParSpMatVec=0.0150	 speedup=4.9442
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0741	 ParSpMatVec=0.0147	 speedup=5.0296
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0741	 ParSpMatVec=0.0133	 speedup=5.5848
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0741	 ParSpMatVec=0.0138	 speedup=5.3827

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0429	 ParSpMatVec=0.0171	 speedup=2.5100
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0429	 ParSpMatVec=0.0131	 speedup=3.2749
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0429	 ParSpMatVec=0.0157	 speedup=2.7353
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0429	 ParSpMatVec=0.0111	 speedup=3.8638
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0429	 ParSpMatVec=0.0107	 speedup=3.9964

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0250	 ParSpMatVec=0.0226	 speedup=1.1073
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0250	 ParSpMatVec=0.0015	 speedup=17.0673
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0250	 ParSpMatVec=0.0016	 speedup=16.1148
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0250	 ParSpMatVec=0.0014	 speedup=17.3531
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0250	 ParSpMatVec=0.0015	 speedup=16.3889

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0089	 ParSpMatVec=0.0418	 speedup=0.2121
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0089	 ParSpMatVec=0.0036	 speedup=2.4783
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0089	 ParSpMatVec=0.0024	 speedup=3.6945
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0089	 ParSpMatVec=0.0023	 speedup=3.8093
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0089	 ParSpMatVec=0.0026	 speedup=3.4598

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0388	 ParSpMatVec=0.0483	 speedup=0.8037
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0388	 ParSpMatVec=0.0041	 speedup=9.3702
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0388	 ParSpMatVec=0.0037	 speedup=10.5155
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0388	 ParSpMatVec=0.0023	 speedup=16.9537
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0388	 ParSpMatVec=0.0028	 speedup=13.8445

INFO: ParSpMatVec tests passed

>>> End of log
