>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.7
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.3
INFO: Installing URIParser v0.1.8
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of ParSpMatVec
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-119-generic #166-Ubuntu SMP Wed May 3 12:18:55 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1191.36328125 MB free)
Uptime: 23852.0 sec
Load Avg:  1.01953125  1.0078125  1.029296875
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3502 MHz    1068616 s       6480 s      78643 s    1013985 s         35 s
#2  3502 MHz     655859 s        793 s      67420 s    1588093 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.9.1
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.7
 - Compat                        0.25.2
 - SHA                           0.3.3
 - URIParser                     0.1.8
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0754	 ParSpMatVec=0.0263	 speedup=2.8677
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0754	 ParSpMatVec=0.0085	 speedup=8.8366
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0754	 ParSpMatVec=0.0113	 speedup=6.6605
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0754	 ParSpMatVec=0.0084	 speedup=9.0198
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0754	 ParSpMatVec=0.0110	 speedup=6.8731
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1092	 ParSpMatVec=0.0251	 speedup=4.3486
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1092	 ParSpMatVec=0.0135	 speedup=8.0589
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1092	 ParSpMatVec=0.0156	 speedup=6.9951
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1092	 ParSpMatVec=0.0131	 speedup=8.3098
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1092	 ParSpMatVec=0.0155	 speedup=7.0241

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0442	 ParSpMatVec=0.0292	 speedup=1.5147
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0442	 ParSpMatVec=0.0145	 speedup=3.0395
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0442	 ParSpMatVec=0.0139	 speedup=3.1726
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0442	 ParSpMatVec=0.0182	 speedup=2.4282
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0442	 ParSpMatVec=0.0144	 speedup=3.0733

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0313	 ParSpMatVec=0.0402	 speedup=0.7798
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0313	 ParSpMatVec=0.0022	 speedup=14.0594
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0313	 ParSpMatVec=0.0025	 speedup=12.7592
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0313	 ParSpMatVec=0.0019	 speedup=16.4872
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0313	 ParSpMatVec=0.0020	 speedup=16.0356

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0077	 ParSpMatVec=0.0483	 speedup=0.1597
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0077	 ParSpMatVec=0.0035	 speedup=2.2159
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0077	 ParSpMatVec=0.0015	 speedup=5.1134
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0077	 ParSpMatVec=0.0042	 speedup=1.8530
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0077	 ParSpMatVec=0.0022	 speedup=3.5227

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0275	 ParSpMatVec=0.0293	 speedup=0.9391
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0275	 ParSpMatVec=0.0033	 speedup=8.3701
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0275	 ParSpMatVec=0.0021	 speedup=12.7884
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0275	 ParSpMatVec=0.0017	 speedup=16.3195
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0275	 ParSpMatVec=0.0032	 speedup=8.5086

INFO: ParSpMatVec tests passed

>>> End of log
