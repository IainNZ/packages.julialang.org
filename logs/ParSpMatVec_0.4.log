>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.7
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.3
INFO: Installing URIParser v0.1.8
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of ParSpMatVec
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-121-generic #170-Ubuntu SMP Wed Jun 14 09:04:33 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1161.07421875 MB free)
Uptime: 19300.0 sec
Load Avg:  1.068359375  1.0517578125  1.015625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz     929486 s       3516 s      75917 s     708506 s         16 s
#2  3500 MHz     626467 s       3112 s      62427 s    1172760 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.9.1
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.7
 - Compat                        0.26.0
 - SHA                           0.3.3
 - URIParser                     0.1.8
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0759	 ParSpMatVec=0.0163	 speedup=4.6603
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0759	 ParSpMatVec=0.0059	 speedup=12.7690
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0759	 ParSpMatVec=0.0093	 speedup=8.2007
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0759	 ParSpMatVec=0.0079	 speedup=9.6334
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0759	 ParSpMatVec=0.0095	 speedup=7.9925
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0739	 ParSpMatVec=0.0251	 speedup=2.9454
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0739	 ParSpMatVec=0.0117	 speedup=6.3157
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0739	 ParSpMatVec=0.0151	 speedup=4.8897
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0739	 ParSpMatVec=0.0136	 speedup=5.4276
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0739	 ParSpMatVec=0.0135	 speedup=5.4647

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0285	 ParSpMatVec=0.0168	 speedup=1.7030
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0285	 ParSpMatVec=0.0133	 speedup=2.1476
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0285	 ParSpMatVec=0.0125	 speedup=2.2795
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0285	 ParSpMatVec=0.0116	 speedup=2.4597
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0285	 ParSpMatVec=0.0122	 speedup=2.3369

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0423	 ParSpMatVec=0.0375	 speedup=1.1284
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0423	 ParSpMatVec=0.0026	 speedup=16.0682
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0423	 ParSpMatVec=0.0022	 speedup=19.2283
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0423	 ParSpMatVec=0.0012	 speedup=34.0469
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0423	 ParSpMatVec=0.0023	 speedup=18.0478

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0079	 ParSpMatVec=0.0435	 speedup=0.1807
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0079	 ParSpMatVec=0.0041	 speedup=1.9148
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0079	 ParSpMatVec=0.0021	 speedup=3.8130
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0079	 ParSpMatVec=0.0025	 speedup=3.1341
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0079	 ParSpMatVec=0.0026	 speedup=3.0171

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0436	 ParSpMatVec=0.0462	 speedup=0.9439
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0436	 ParSpMatVec=0.0037	 speedup=11.7501
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0436	 ParSpMatVec=0.0018	 speedup=24.5769
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0436	 ParSpMatVec=0.0022	 speedup=19.9508
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0436	 ParSpMatVec=0.0024	 speedup=18.0371

INFO: ParSpMatVec tests passed

>>> End of log
