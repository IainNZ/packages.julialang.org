>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.7
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.3
INFO: Installing URIParser v0.1.8
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of ParSpMatVec
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-121-generic #170-Ubuntu SMP Wed Jun 14 09:04:33 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1158.02734375 MB free)
Uptime: 21176.0 sec
Load Avg:  0.99609375  1.03369140625  1.04443359375
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz    1027515 s        980 s      86643 s     781302 s         33 s
#2  3500 MHz     687530 s       6044 s      76500 s    1271328 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.9.1
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.7
 - Compat                        0.26.0
 - SHA                           0.3.3
 - URIParser                     0.1.8
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0986	 ParSpMatVec=0.0282	 speedup=3.5003
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0986	 ParSpMatVec=0.0087	 speedup=11.2924
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0986	 ParSpMatVec=0.0119	 speedup=8.3160
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0986	 ParSpMatVec=0.0082	 speedup=12.0315
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0986	 ParSpMatVec=0.0094	 speedup=10.4854
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0746	 ParSpMatVec=0.0349	 speedup=2.1347
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0746	 ParSpMatVec=0.0140	 speedup=5.3222
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0746	 ParSpMatVec=0.0170	 speedup=4.3986
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0746	 ParSpMatVec=0.0128	 speedup=5.8383
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0746	 ParSpMatVec=0.0135	 speedup=5.5346

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0307	 ParSpMatVec=0.0150	 speedup=2.0463
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0307	 ParSpMatVec=0.0138	 speedup=2.2189
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0307	 ParSpMatVec=0.0149	 speedup=2.0689
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0307	 ParSpMatVec=0.0131	 speedup=2.3431
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0307	 ParSpMatVec=0.0130	 speedup=2.3583

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0354	 ParSpMatVec=0.0225	 speedup=1.5691
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0354	 ParSpMatVec=0.0020	 speedup=17.5702
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0354	 ParSpMatVec=0.0027	 speedup=13.0402
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0354	 ParSpMatVec=0.0013	 speedup=26.3497
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0354	 ParSpMatVec=0.0015	 speedup=24.0678

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0086	 ParSpMatVec=0.0538	 speedup=0.1595
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0086	 ParSpMatVec=0.0043	 speedup=1.9741
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0086	 ParSpMatVec=0.0022	 speedup=3.8252
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0086	 ParSpMatVec=0.0046	 speedup=1.8803
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0086	 ParSpMatVec=0.0027	 speedup=3.2309

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0473	 ParSpMatVec=0.0506	 speedup=0.9341
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0473	 ParSpMatVec=0.0053	 speedup=8.8438
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0473	 ParSpMatVec=0.0019	 speedup=24.4599
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0473	 ParSpMatVec=0.0025	 speedup=18.8190
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0473	 ParSpMatVec=0.0034	 speedup=13.9534

INFO: ParSpMatVec tests passed

>>> End of log
