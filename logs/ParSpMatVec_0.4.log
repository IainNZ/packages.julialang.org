>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.7
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.3
INFO: Installing URIParser v0.1.8
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-128-generic #177-Ubuntu SMP Tue Aug 8 11:40:23 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1170.42578125 MB free)
Uptime: 24061.0 sec
Load Avg:  1.00830078125  0.99853515625  0.9404296875
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz    1079242 s        111 s      90498 s    1010837 s         27 s
#2  3499 MHz     794893 s       6374 s      77608 s    1450545 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.9.1
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.7
 - Compat                        0.26.0
 - SHA                           0.3.3
 - URIParser                     0.1.8
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1373	 ParSpMatVec=0.0268	 speedup=5.1138
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1373	 ParSpMatVec=0.0081	 speedup=16.9693
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1373	 ParSpMatVec=0.0114	 speedup=12.0126
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1373	 ParSpMatVec=0.0095	 speedup=14.3839
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1373	 ParSpMatVec=0.0083	 speedup=16.4600
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1209	 ParSpMatVec=0.0444	 speedup=2.7219
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1209	 ParSpMatVec=0.0142	 speedup=8.5185
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1209	 ParSpMatVec=0.0284	 speedup=4.2577
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1209	 ParSpMatVec=0.0146	 speedup=8.3012
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1209	 ParSpMatVec=0.0126	 speedup=9.6113

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0410	 ParSpMatVec=0.0295	 speedup=1.3919
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0410	 ParSpMatVec=0.0144	 speedup=2.8558
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0410	 ParSpMatVec=0.0150	 speedup=2.7341
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0410	 ParSpMatVec=0.0123	 speedup=3.3277
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0410	 ParSpMatVec=0.0126	 speedup=3.2450

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0417	 ParSpMatVec=0.0376	 speedup=1.1088
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0417	 ParSpMatVec=0.0019	 speedup=21.7508
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0417	 ParSpMatVec=0.0022	 speedup=19.1621
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0417	 ParSpMatVec=0.0018	 speedup=23.7497
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0417	 ParSpMatVec=0.0018	 speedup=23.4944

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0102	 ParSpMatVec=0.0477	 speedup=0.2132
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0102	 ParSpMatVec=0.0041	 speedup=2.4614
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0102	 ParSpMatVec=0.0022	 speedup=4.6855
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0102	 ParSpMatVec=0.0024	 speedup=4.1866
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0102	 ParSpMatVec=0.0030	 speedup=3.4321

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0459	 ParSpMatVec=0.0486	 speedup=0.9440
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0459	 ParSpMatVec=0.0055	 speedup=8.3161
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0459	 ParSpMatVec=0.0034	 speedup=13.5097
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0459	 ParSpMatVec=0.0051	 speedup=9.0560
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0459	 ParSpMatVec=0.0060	 speedup=7.6952

INFO: ParSpMatVec tests passed

>>> End of log
