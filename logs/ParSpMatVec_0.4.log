>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.7
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.3
INFO: Installing URIParser v0.1.8
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of ParSpMatVec
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-128-generic #177-Ubuntu SMP Tue Aug 8 11:40:23 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1190.93359375 MB free)
Uptime: 22770.0 sec
Load Avg:  1.1005859375  1.09033203125  1.0400390625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz    1096585 s        335 s      83384 s     870041 s         30 s
#2  3500 MHz     770161 s       5956 s      67636 s    1361801 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.9.1
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.7
 - Compat                        0.26.0
 - SHA                           0.3.3
 - URIParser                     0.1.8
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1237	 ParSpMatVec=0.0271	 speedup=4.5560
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1237	 ParSpMatVec=0.0100	 speedup=12.4101
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1237	 ParSpMatVec=0.0117	 speedup=10.5818
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1237	 ParSpMatVec=0.0121	 speedup=10.2515
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1237	 ParSpMatVec=0.0121	 speedup=10.2257
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1189	 ParSpMatVec=0.0424	 speedup=2.8072
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1189	 ParSpMatVec=0.0130	 speedup=9.1282
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1189	 ParSpMatVec=0.0140	 speedup=8.4671
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1189	 ParSpMatVec=0.0129	 speedup=9.2068
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1189	 ParSpMatVec=0.0147	 speedup=8.0767

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0302	 ParSpMatVec=0.0292	 speedup=1.0342
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0302	 ParSpMatVec=0.0135	 speedup=2.2383
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0302	 ParSpMatVec=0.0158	 speedup=1.9149
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0302	 ParSpMatVec=0.0180	 speedup=1.6762
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0302	 ParSpMatVec=0.0122	 speedup=2.4742

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0405	 ParSpMatVec=0.0242	 speedup=1.6699
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0405	 ParSpMatVec=0.0022	 speedup=18.1700
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0405	 ParSpMatVec=0.0024	 speedup=16.9675
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0405	 ParSpMatVec=0.0012	 speedup=34.1327
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0405	 ParSpMatVec=0.0017	 speedup=23.9629

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0069	 ParSpMatVec=0.0283	 speedup=0.2432
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0069	 ParSpMatVec=0.0044	 speedup=1.5527
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0069	 ParSpMatVec=0.0014	 speedup=4.9896
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0069	 ParSpMatVec=0.0042	 speedup=1.6321
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0069	 ParSpMatVec=0.0062	 speedup=1.1020

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0383	 ParSpMatVec=0.0482	 speedup=0.7952
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0383	 ParSpMatVec=0.0028	 speedup=13.6884
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0383	 ParSpMatVec=0.0076	 speedup=5.0123
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0383	 ParSpMatVec=0.0035	 speedup=10.8826
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0383	 ParSpMatVec=0.0022	 speedup=17.7338

INFO: ParSpMatVec tests passed

>>> End of log
