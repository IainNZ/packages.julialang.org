>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.7
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.3
INFO: Installing URIParser v0.1.8
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of ParSpMatVec
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-129-generic #178-Ubuntu SMP Fri Aug 11 12:48:20 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1146.6171875 MB free)
Uptime: 22706.0 sec
Load Avg:  0.94677734375  1.013671875  0.9306640625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz    1035968 s       4626 s      81785 s     929766 s         22 s
#2  3499 MHz     741635 s       2147 s      70250 s    1373801 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.9.1
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.7
 - Compat                        0.26.0
 - SHA                           0.3.3
 - URIParser                     0.1.8
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1318	 ParSpMatVec=0.0249	 speedup=5.3038
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1318	 ParSpMatVec=0.0098	 speedup=13.4006
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1318	 ParSpMatVec=0.0103	 speedup=12.7841
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1318	 ParSpMatVec=0.0061	 speedup=21.7158
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1318	 ParSpMatVec=0.0090	 speedup=14.5703
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1176	 ParSpMatVec=0.0392	 speedup=3.0024
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1176	 ParSpMatVec=0.0125	 speedup=9.4008
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1176	 ParSpMatVec=0.0108	 speedup=10.8687
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1176	 ParSpMatVec=0.0080	 speedup=14.6966
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1176	 ParSpMatVec=0.0131	 speedup=8.9748

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0421	 ParSpMatVec=0.0271	 speedup=1.5548
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0421	 ParSpMatVec=0.0134	 speedup=3.1532
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0421	 ParSpMatVec=0.0095	 speedup=4.4391
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0421	 ParSpMatVec=0.0098	 speedup=4.3040
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0421	 ParSpMatVec=0.0107	 speedup=3.9512

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0312	 ParSpMatVec=0.0246	 speedup=1.2697
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0312	 ParSpMatVec=0.0025	 speedup=12.5940
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0312	 ParSpMatVec=0.0021	 speedup=14.7369
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0312	 ParSpMatVec=0.0010	 speedup=31.4673
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0312	 ParSpMatVec=0.0018	 speedup=17.4588

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0062	 ParSpMatVec=0.0268	 speedup=0.2296
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0062	 ParSpMatVec=0.0037	 speedup=1.6773
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0062	 ParSpMatVec=0.0016	 speedup=3.7415
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0062	 ParSpMatVec=0.0019	 speedup=3.2776
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0062	 ParSpMatVec=0.0021	 speedup=2.9199

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0458	 ParSpMatVec=0.0279	 speedup=1.6439
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0458	 ParSpMatVec=0.0021	 speedup=22.0905
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0458	 ParSpMatVec=0.0015	 speedup=29.8623
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0458	 ParSpMatVec=0.0036	 speedup=12.7608
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0458	 ParSpMatVec=0.0097	 speedup=4.7052

INFO: ParSpMatVec tests passed

>>> End of log
