>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.7
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.3
INFO: Installing URIParser v0.1.8
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-119-generic #166-Ubuntu SMP Wed May 3 12:18:55 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1197.96875 MB free)
Uptime: 20789.0 sec
Load Avg:  1.03125  1.03515625  1.02392578125
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz    1063150 s       5469 s      76137 s     729315 s         33 s
#2  3500 MHz     674881 s       1893 s      64960 s    1257410 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.9.1
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.7
 - Compat                        0.26.0
 - SHA                           0.3.3
 - URIParser                     0.1.8
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1528	 ParSpMatVec=0.0590	 speedup=2.5872
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1528	 ParSpMatVec=0.0101	 speedup=15.1434
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1528	 ParSpMatVec=0.0125	 speedup=12.2347
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1528	 ParSpMatVec=0.0135	 speedup=11.3047
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1528	 ParSpMatVec=0.0109	 speedup=13.9697
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0742	 ParSpMatVec=0.0260	 speedup=2.8527
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0742	 ParSpMatVec=0.0124	 speedup=5.9982
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0742	 ParSpMatVec=0.0140	 speedup=5.2894
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0742	 ParSpMatVec=0.0130	 speedup=5.7009
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0742	 ParSpMatVec=0.0139	 speedup=5.3495

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0488	 ParSpMatVec=0.0241	 speedup=2.0235
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0488	 ParSpMatVec=0.0134	 speedup=3.6515
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0488	 ParSpMatVec=0.0178	 speedup=2.7468
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0488	 ParSpMatVec=0.0146	 speedup=3.3465
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0488	 ParSpMatVec=0.0123	 speedup=3.9647

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0434	 ParSpMatVec=0.0431	 speedup=1.0081
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0434	 ParSpMatVec=0.0026	 speedup=16.9646
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0434	 ParSpMatVec=0.0033	 speedup=13.1797
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0434	 ParSpMatVec=0.0017	 speedup=25.6430
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0434	 ParSpMatVec=0.0040	 speedup=10.9665

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0095	 ParSpMatVec=0.0278	 speedup=0.3413
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0095	 ParSpMatVec=0.0040	 speedup=2.3479
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0095	 ParSpMatVec=0.0027	 speedup=3.5836
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0095	 ParSpMatVec=0.0026	 speedup=3.5871
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0095	 ParSpMatVec=0.0032	 speedup=3.0014

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0313	 ParSpMatVec=0.0302	 speedup=1.0353
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0313	 ParSpMatVec=0.0043	 speedup=7.2362
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0313	 ParSpMatVec=0.0017	 speedup=18.1289
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0313	 ParSpMatVec=0.0034	 speedup=9.2800
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0313	 ParSpMatVec=0.0033	 speedup=9.5938

INFO: ParSpMatVec tests passed

>>> End of log
