>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.7
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.2
INFO: Installing URIParser v0.1.8
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of ParSpMatVec
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-117-generic #164-Ubuntu SMP Fri Apr 7 11:05:26 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1190.27734375 MB free)
Uptime: 21094.0 sec
Load Avg:  0.89697265625  0.9599609375  1.00244140625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz     998503 s       4963 s      78574 s     816909 s         39 s
#2  3499 MHz     680915 s       1489 s      67240 s    1277196 s          2 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.9.1
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.7
 - Compat                        0.25.0
 - SHA                           0.3.2
 - URIParser                     0.1.8
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1230	 ParSpMatVec=0.0250	 speedup=4.9149
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1230	 ParSpMatVec=0.0080	 speedup=15.4166
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1230	 ParSpMatVec=0.0106	 speedup=11.6093
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1230	 ParSpMatVec=0.0121	 speedup=10.1424
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1230	 ParSpMatVec=0.0170	 speedup=7.2563
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1153	 ParSpMatVec=0.0389	 speedup=2.9671
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1153	 ParSpMatVec=0.0127	 speedup=9.0476
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1153	 ParSpMatVec=0.0080	 speedup=14.3333
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1153	 ParSpMatVec=0.0093	 speedup=12.3565
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1153	 ParSpMatVec=0.0138	 speedup=8.3632

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0422	 ParSpMatVec=0.0309	 speedup=1.3631
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0422	 ParSpMatVec=0.0140	 speedup=3.0198
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0422	 ParSpMatVec=0.0089	 speedup=4.7491
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0422	 ParSpMatVec=0.0127	 speedup=3.3248
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0422	 ParSpMatVec=0.0079	 speedup=5.3264

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0443	 ParSpMatVec=0.0394	 speedup=1.1238
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0443	 ParSpMatVec=0.0014	 speedup=32.6999
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0443	 ParSpMatVec=0.0030	 speedup=14.8100
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0443	 ParSpMatVec=0.0187	 speedup=2.3659
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0443	 ParSpMatVec=0.0037	 speedup=11.8216

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0090	 ParSpMatVec=0.0459	 speedup=0.1963
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0090	 ParSpMatVec=0.0043	 speedup=2.1109
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0090	 ParSpMatVec=0.0030	 speedup=3.0300
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0090	 ParSpMatVec=0.0021	 speedup=4.2520
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0090	 ParSpMatVec=0.0021	 speedup=4.3463

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0479	 ParSpMatVec=0.0453	 speedup=1.0572
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0479	 ParSpMatVec=0.0038	 speedup=12.6306
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0479	 ParSpMatVec=0.0024	 speedup=20.2128
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0479	 ParSpMatVec=0.0035	 speedup=13.6151
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0479	 ParSpMatVec=0.0059	 speedup=8.0846

INFO: ParSpMatVec tests passed

>>> End of log
