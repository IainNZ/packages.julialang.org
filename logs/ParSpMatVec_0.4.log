>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.7
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.3
INFO: Installing URIParser v0.1.8
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-119-generic #166-Ubuntu SMP Wed May 3 12:18:55 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1184.74609375 MB free)
Uptime: 20834.0 sec
Load Avg:  0.95751953125  0.9853515625  1.01318359375
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3502 MHz    1023757 s       2686 s      83053 s     772357 s         44 s
#2  3502 MHz     706455 s       4221 s      69695 s    1238066 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.9.1
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.7
 - Compat                        0.26.0
 - SHA                           0.3.3
 - URIParser                     0.1.8
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1231	 ParSpMatVec=0.0271	 speedup=4.5482
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1231	 ParSpMatVec=0.0092	 speedup=13.3949
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1231	 ParSpMatVec=0.0139	 speedup=8.8820
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1231	 ParSpMatVec=0.0093	 speedup=13.2740
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1231	 ParSpMatVec=0.0127	 speedup=9.7249
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1213	 ParSpMatVec=0.0394	 speedup=3.0778
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1213	 ParSpMatVec=0.0136	 speedup=8.8942
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1213	 ParSpMatVec=0.0153	 speedup=7.9163
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1213	 ParSpMatVec=0.0187	 speedup=6.4810
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1213	 ParSpMatVec=0.0119	 speedup=10.1589

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0312	 ParSpMatVec=0.0191	 speedup=1.6303
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0312	 ParSpMatVec=0.0139	 speedup=2.2451
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0312	 ParSpMatVec=0.0153	 speedup=2.0414
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0312	 ParSpMatVec=0.0152	 speedup=2.0473
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0312	 ParSpMatVec=0.0141	 speedup=2.2134

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0453	 ParSpMatVec=0.0400	 speedup=1.1333
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0453	 ParSpMatVec=0.0071	 speedup=6.3461
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0453	 ParSpMatVec=0.0025	 speedup=18.4710
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0453	 ParSpMatVec=0.0017	 speedup=26.5890
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0453	 ParSpMatVec=0.0041	 speedup=11.0496

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0128	 ParSpMatVec=0.0490	 speedup=0.2617
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0128	 ParSpMatVec=0.0029	 speedup=4.3882
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0128	 ParSpMatVec=0.0020	 speedup=6.5721
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0128	 ParSpMatVec=0.0035	 speedup=3.7076
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0128	 ParSpMatVec=0.0023	 speedup=5.7030

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0493	 ParSpMatVec=0.0481	 speedup=1.0256
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0493	 ParSpMatVec=0.0031	 speedup=15.9905
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0493	 ParSpMatVec=0.0028	 speedup=17.4453
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0493	 ParSpMatVec=0.0038	 speedup=13.0436
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0493	 ParSpMatVec=0.0029	 speedup=17.0065

INFO: ParSpMatVec tests passed

>>> End of log
