>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.7
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.3
INFO: Installing URIParser v0.1.8
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of ParSpMatVec
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-121-generic #170-Ubuntu SMP Wed Jun 14 09:04:33 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1146.078125 MB free)
Uptime: 21680.0 sec
Load Avg:  1.00732421875  1.01513671875  1.03466796875
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz    1047774 s       2093 s      88138 s     807718 s         39 s
#2  3500 MHz     706222 s       4179 s      74685 s    1299045 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.9.1
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.7
 - Compat                        0.26.0
 - SHA                           0.3.3
 - URIParser                     0.1.8
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1385	 ParSpMatVec=0.0219	 speedup=6.3154
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1385	 ParSpMatVec=0.0083	 speedup=16.6744
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1385	 ParSpMatVec=0.0113	 speedup=12.2151
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1385	 ParSpMatVec=0.0071	 speedup=19.4861
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1385	 ParSpMatVec=0.0091	 speedup=15.2051
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1184	 ParSpMatVec=0.0241	 speedup=4.9208
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1184	 ParSpMatVec=0.0124	 speedup=9.5806
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1184	 ParSpMatVec=0.0131	 speedup=9.0136
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1184	 ParSpMatVec=0.0127	 speedup=9.3575
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1184	 ParSpMatVec=0.0105	 speedup=11.2452

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0410	 ParSpMatVec=0.0289	 speedup=1.4206
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0410	 ParSpMatVec=0.0131	 speedup=3.1191
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0410	 ParSpMatVec=0.0118	 speedup=3.4658
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0410	 ParSpMatVec=0.0135	 speedup=3.0419
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0410	 ParSpMatVec=0.0100	 speedup=4.0944

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0361	 ParSpMatVec=0.0243	 speedup=1.4866
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0361	 ParSpMatVec=0.0021	 speedup=17.2378
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0361	 ParSpMatVec=0.0015	 speedup=24.6980
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0361	 ParSpMatVec=0.0012	 speedup=29.6589
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0361	 ParSpMatVec=0.0018	 speedup=20.5650

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0089	 ParSpMatVec=0.0239	 speedup=0.3733
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0089	 ParSpMatVec=0.0035	 speedup=2.5701
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0089	 ParSpMatVec=0.0019	 speedup=4.6082
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0089	 ParSpMatVec=0.0020	 speedup=4.4700
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0089	 ParSpMatVec=0.0027	 speedup=3.3386

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0266	 ParSpMatVec=0.0270	 speedup=0.9844
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0266	 ParSpMatVec=0.0042	 speedup=6.2562
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0266	 ParSpMatVec=0.0019	 speedup=13.9846
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0266	 ParSpMatVec=0.0014	 speedup=19.6399
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0266	 ParSpMatVec=0.0020	 speedup=13.0079

INFO: ParSpMatVec tests passed

>>> End of log
