>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.7
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.3
INFO: Installing URIParser v0.1.8
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of ParSpMatVec
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-119-generic #166-Ubuntu SMP Wed May 3 12:18:55 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1189.15234375 MB free)
Uptime: 20883.0 sec
Load Avg:  0.9970703125  0.97265625  0.97021484375
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz    1037206 s       4184 s      78779 s     753539 s         24 s
#2  3499 MHz     674679 s       2769 s      64661 s    1281081 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.9.1
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.7
 - Compat                        0.26.0
 - SHA                           0.3.3
 - URIParser                     0.1.8
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1233	 ParSpMatVec=0.0251	 speedup=4.9056
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1233	 ParSpMatVec=0.0094	 speedup=13.1129
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1233	 ParSpMatVec=0.0094	 speedup=13.0489
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1233	 ParSpMatVec=0.0058	 speedup=21.2935
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1233	 ParSpMatVec=0.0088	 speedup=14.0431
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1165	 ParSpMatVec=0.0433	 speedup=2.6906
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1165	 ParSpMatVec=0.0156	 speedup=7.4854
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1165	 ParSpMatVec=0.0088	 speedup=13.2563
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1165	 ParSpMatVec=0.0128	 speedup=9.0911
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1165	 ParSpMatVec=0.0153	 speedup=7.5993

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0415	 ParSpMatVec=0.0298	 speedup=1.3893
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0415	 ParSpMatVec=0.0136	 speedup=3.0570
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0415	 ParSpMatVec=0.0101	 speedup=4.0930
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0415	 ParSpMatVec=0.0096	 speedup=4.3203
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0415	 ParSpMatVec=0.0103	 speedup=4.0081

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0290	 ParSpMatVec=0.0290	 speedup=1.0007
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0290	 ParSpMatVec=0.0024	 speedup=12.0567
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0290	 ParSpMatVec=0.0014	 speedup=21.4117
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0290	 ParSpMatVec=0.0033	 speedup=8.8028
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0290	 ParSpMatVec=0.0017	 speedup=16.8455

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0068	 ParSpMatVec=0.0435	 speedup=0.1562
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0068	 ParSpMatVec=0.0049	 speedup=1.3870
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0068	 ParSpMatVec=0.0025	 speedup=2.7082
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0068	 ParSpMatVec=0.0028	 speedup=2.4685
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0068	 ParSpMatVec=0.0023	 speedup=2.9767

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0485	 ParSpMatVec=0.0507	 speedup=0.9568
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0485	 ParSpMatVec=0.0040	 speedup=11.9876
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0485	 ParSpMatVec=0.0025	 speedup=19.6810
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0485	 ParSpMatVec=0.0035	 speedup=13.8593
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0485	 ParSpMatVec=0.0025	 speedup=19.0737

INFO: ParSpMatVec tests passed

>>> End of log
