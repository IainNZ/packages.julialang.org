>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.7
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.3
INFO: Installing URIParser v0.1.8
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of ParSpMatVec
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-119-generic #166-Ubuntu SMP Wed May 3 12:18:55 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1186.98046875 MB free)
Uptime: 20248.0 sec
Load Avg:  1.04150390625  1.05126953125  1.04736328125
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz    1027694 s       1569 s      75514 s     703766 s         31 s
#2  3499 MHz     638702 s       5005 s      63308 s    1243955 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.9.1
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.7
 - Compat                        0.25.2
 - SHA                           0.3.3
 - URIParser                     0.1.8
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1350	 ParSpMatVec=0.0249	 speedup=5.4207
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1350	 ParSpMatVec=0.0098	 speedup=13.8245
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1350	 ParSpMatVec=0.0123	 speedup=11.0156
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1350	 ParSpMatVec=0.0099	 speedup=13.6722
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1350	 ParSpMatVec=0.0109	 speedup=12.3608
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1242	 ParSpMatVec=0.0457	 speedup=2.7194
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1242	 ParSpMatVec=0.0133	 speedup=9.3187
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1242	 ParSpMatVec=0.0138	 speedup=8.9830
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1242	 ParSpMatVec=0.0127	 speedup=9.7687
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1242	 ParSpMatVec=0.0136	 speedup=9.1360

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0395	 ParSpMatVec=0.0198	 speedup=1.9901
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0395	 ParSpMatVec=0.0124	 speedup=3.1723
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0395	 ParSpMatVec=0.0146	 speedup=2.6985
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0395	 ParSpMatVec=0.0161	 speedup=2.4454
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0395	 ParSpMatVec=0.0166	 speedup=2.3796

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0450	 ParSpMatVec=0.0443	 speedup=1.0161
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0450	 ParSpMatVec=0.0030	 speedup=15.0536
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0450	 ParSpMatVec=0.0027	 speedup=16.6429
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0450	 ParSpMatVec=0.0024	 speedup=18.5843
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0450	 ParSpMatVec=0.0021	 speedup=21.6794

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0094	 ParSpMatVec=0.0497	 speedup=0.1899
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0094	 ParSpMatVec=0.0043	 speedup=2.2089
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0094	 ParSpMatVec=0.0042	 speedup=2.2714
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0094	 ParSpMatVec=0.0032	 speedup=2.9676
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0094	 ParSpMatVec=0.0038	 speedup=2.4538

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0531	 ParSpMatVec=0.0275	 speedup=1.9296
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0531	 ParSpMatVec=0.0030	 speedup=17.6594
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0531	 ParSpMatVec=0.0018	 speedup=28.7965
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0531	 ParSpMatVec=0.0022	 speedup=23.8326
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0531	 ParSpMatVec=0.0020	 speedup=25.9332

INFO: ParSpMatVec tests passed

>>> End of log
