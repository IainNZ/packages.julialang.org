>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.7
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.3
INFO: Installing URIParser v0.1.8
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-121-generic #170-Ubuntu SMP Wed Jun 14 09:04:33 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1197.296875 MB free)
Uptime: 21098.0 sec
Load Avg:  1.0029296875  1.0146484375  0.9814453125
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz    1053038 s       4264 s      83581 s     745852 s         37 s
#2  3500 MHz     699225 s       2623 s      70282 s    1264273 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.9.1
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.7
 - Compat                        0.26.0
 - SHA                           0.3.3
 - URIParser                     0.1.8
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0813	 ParSpMatVec=0.0173	 speedup=4.6958
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0813	 ParSpMatVec=0.0090	 speedup=9.0869
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0813	 ParSpMatVec=0.0112	 speedup=7.2329
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0813	 ParSpMatVec=0.0071	 speedup=11.3903
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0813	 ParSpMatVec=0.0065	 speedup=12.4690
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0756	 ParSpMatVec=0.0261	 speedup=2.8920
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0756	 ParSpMatVec=0.0134	 speedup=5.6243
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0756	 ParSpMatVec=0.0136	 speedup=5.5779
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0756	 ParSpMatVec=0.0097	 speedup=7.7620
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0756	 ParSpMatVec=0.0097	 speedup=7.8014

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0342	 ParSpMatVec=0.0185	 speedup=1.8486
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0342	 ParSpMatVec=0.0121	 speedup=2.8386
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0342	 ParSpMatVec=0.0096	 speedup=3.5669
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0342	 ParSpMatVec=0.0097	 speedup=3.5388
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0342	 ParSpMatVec=0.0103	 speedup=3.3096

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0262	 ParSpMatVec=0.0231	 speedup=1.1318
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0262	 ParSpMatVec=0.0023	 speedup=11.5537
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0262	 ParSpMatVec=0.0012	 speedup=21.4121
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0262	 ParSpMatVec=0.0014	 speedup=18.8504
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0262	 ParSpMatVec=0.0017	 speedup=15.7859

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0069	 ParSpMatVec=0.0259	 speedup=0.2672
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0069	 ParSpMatVec=0.0028	 speedup=2.4977
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0069	 ParSpMatVec=0.0012	 speedup=5.5838
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0069	 ParSpMatVec=0.0032	 speedup=2.1695
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0069	 ParSpMatVec=0.0033	 speedup=2.1219

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0286	 ParSpMatVec=0.0258	 speedup=1.1105
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0286	 ParSpMatVec=0.0027	 speedup=10.4258
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0286	 ParSpMatVec=0.0017	 speedup=17.3315
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0286	 ParSpMatVec=0.0020	 speedup=14.5189
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0286	 ParSpMatVec=0.0019	 speedup=14.9011

INFO: ParSpMatVec tests passed

>>> End of log
