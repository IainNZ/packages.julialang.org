>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.7
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.2
INFO: Installing URIParser v0.1.8
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of ParSpMatVec
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-117-generic #164-Ubuntu SMP Fri Apr 7 11:05:26 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1193.828125 MB free)
Uptime: 21128.0 sec
Load Avg:  0.908203125  0.95751953125  0.95849609375
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz    1009844 s       1182 s      80130 s     813209 s         58 s
#2  3500 MHz     698244 s       5194 s      67376 s    1270815 s          1 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.9.1
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.7
 - Compat                        0.24.0
 - SHA                           0.3.2
 - URIParser                     0.1.8
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1276	 ParSpMatVec=0.0241	 speedup=5.2852
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1276	 ParSpMatVec=0.0088	 speedup=14.4372
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1276	 ParSpMatVec=0.0124	 speedup=10.2888
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1276	 ParSpMatVec=0.0067	 speedup=18.9923
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1276	 ParSpMatVec=0.0090	 speedup=14.1916
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1191	 ParSpMatVec=0.0534	 speedup=2.2309
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1191	 ParSpMatVec=0.0127	 speedup=9.3532
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1191	 ParSpMatVec=0.0160	 speedup=7.4607
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1191	 ParSpMatVec=0.0141	 speedup=8.4401
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1191	 ParSpMatVec=0.0149	 speedup=7.9717

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0570	 ParSpMatVec=0.0315	 speedup=1.8091
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0570	 ParSpMatVec=0.0110	 speedup=5.1897
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0570	 ParSpMatVec=0.0327	 speedup=1.7406
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0570	 ParSpMatVec=0.0135	 speedup=4.2257
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0570	 ParSpMatVec=0.0156	 speedup=3.6430

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0475	 ParSpMatVec=0.0433	 speedup=1.0972
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0475	 ParSpMatVec=0.0022	 speedup=21.9657
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0475	 ParSpMatVec=0.0269	 speedup=1.7665
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0475	 ParSpMatVec=0.0014	 speedup=33.0290
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0475	 ParSpMatVec=0.0453	 speedup=1.0493

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0074	 ParSpMatVec=0.0492	 speedup=0.1504
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0074	 ParSpMatVec=0.0025	 speedup=2.9011
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0074	 ParSpMatVec=0.0020	 speedup=3.6567
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0074	 ParSpMatVec=0.0253	 speedup=0.2927
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0074	 ParSpMatVec=0.0205	 speedup=0.3607

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0420	 ParSpMatVec=0.0441	 speedup=0.9535
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0420	 ParSpMatVec=0.0028	 speedup=14.7660
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0420	 ParSpMatVec=0.0355	 speedup=1.1837
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0420	 ParSpMatVec=0.0453	 speedup=0.9286
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0420	 ParSpMatVec=0.0021	 speedup=20.3524

INFO: ParSpMatVec tests passed

>>> End of log
