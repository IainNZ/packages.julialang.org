>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.7
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.3
INFO: Installing URIParser v0.1.8
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of ParSpMatVec
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-121-generic #170-Ubuntu SMP Wed Jun 14 09:04:33 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1160.671875 MB free)
Uptime: 21431.0 sec
Load Avg:  1.0029296875  0.9853515625  0.998046875
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz    1038502 s       4961 s      91996 s     793059 s         28 s
#2  3499 MHz     710911 s       1468 s      80717 s    1269982 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.9.1
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.7
 - Compat                        0.26.0
 - SHA                           0.3.3
 - URIParser                     0.1.8
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1516	 ParSpMatVec=0.0248	 speedup=6.1190
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1516	 ParSpMatVec=0.0084	 speedup=17.9829
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1516	 ParSpMatVec=0.0128	 speedup=11.8340
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1516	 ParSpMatVec=0.0097	 speedup=15.6895
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1516	 ParSpMatVec=0.0095	 speedup=15.8746
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1163	 ParSpMatVec=0.0398	 speedup=2.9240
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1163	 ParSpMatVec=0.0136	 speedup=8.5561
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1163	 ParSpMatVec=0.0163	 speedup=7.1175
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1163	 ParSpMatVec=0.0130	 speedup=8.9205
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1163	 ParSpMatVec=0.0152	 speedup=7.6403

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0446	 ParSpMatVec=0.0294	 speedup=1.5186
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0446	 ParSpMatVec=0.0138	 speedup=3.2412
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0446	 ParSpMatVec=0.0150	 speedup=2.9737
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0446	 ParSpMatVec=0.0143	 speedup=3.1317
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0446	 ParSpMatVec=0.0150	 speedup=2.9669

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0427	 ParSpMatVec=0.0386	 speedup=1.1068
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0427	 ParSpMatVec=0.0025	 speedup=17.1533
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0427	 ParSpMatVec=0.0021	 speedup=20.6248
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0427	 ParSpMatVec=0.0016	 speedup=27.3783
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0427	 ParSpMatVec=0.0025	 speedup=17.3902

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0084	 ParSpMatVec=0.0444	 speedup=0.1885
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0084	 ParSpMatVec=0.0037	 speedup=2.2735
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0084	 ParSpMatVec=0.0022	 speedup=3.7772
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0084	 ParSpMatVec=0.0027	 speedup=3.0525
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0084	 ParSpMatVec=0.0018	 speedup=4.6382

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0453	 ParSpMatVec=0.0481	 speedup=0.9413
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0453	 ParSpMatVec=0.0037	 speedup=12.0834
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0453	 ParSpMatVec=0.0027	 speedup=16.6579
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0453	 ParSpMatVec=0.0039	 speedup=11.6226
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0453	 ParSpMatVec=0.0032	 speedup=14.1097

INFO: ParSpMatVec tests passed

>>> End of log
