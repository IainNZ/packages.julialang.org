>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.7
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.3
INFO: Installing URIParser v0.1.8
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of ParSpMatVec
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-121-generic #170-Ubuntu SMP Wed Jun 14 09:04:33 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1152.4296875 MB free)
Uptime: 20846.0 sec
Load Avg:  0.99609375  1.0185546875  1.04541015625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz    1013083 s       5668 s      88790 s     768593 s         25 s
#2  3500 MHz     690845 s       1356 s      79471 s    1254257 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.9.1
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.7
 - Compat                        0.26.0
 - SHA                           0.3.3
 - URIParser                     0.1.8
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0876	 ParSpMatVec=0.0282	 speedup=3.1029
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0876	 ParSpMatVec=0.0080	 speedup=10.9083
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0876	 ParSpMatVec=0.0133	 speedup=6.5984
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0876	 ParSpMatVec=0.0087	 speedup=10.0773
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0876	 ParSpMatVec=0.0078	 speedup=11.2820
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1160	 ParSpMatVec=0.0413	 speedup=2.8091
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1160	 ParSpMatVec=0.0134	 speedup=8.6864
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1160	 ParSpMatVec=0.0152	 speedup=7.6475
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1160	 ParSpMatVec=0.0144	 speedup=8.0337
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1160	 ParSpMatVec=0.0129	 speedup=8.9787

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0469	 ParSpMatVec=0.0288	 speedup=1.6265
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0469	 ParSpMatVec=0.0136	 speedup=3.4469
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0469	 ParSpMatVec=0.0160	 speedup=2.9394
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0469	 ParSpMatVec=0.0132	 speedup=3.5640
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0469	 ParSpMatVec=0.0128	 speedup=3.6518

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0541	 ParSpMatVec=0.0229	 speedup=2.3624
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0541	 ParSpMatVec=0.0020	 speedup=27.5172
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0541	 ParSpMatVec=0.0023	 speedup=23.1411
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0541	 ParSpMatVec=0.0018	 speedup=29.7145
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0541	 ParSpMatVec=0.0011	 speedup=50.0573

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0059	 ParSpMatVec=0.0267	 speedup=0.2219
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0059	 ParSpMatVec=0.0040	 speedup=1.4747
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0059	 ParSpMatVec=0.0027	 speedup=2.1677
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0059	 ParSpMatVec=0.0023	 speedup=2.5496
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0059	 ParSpMatVec=0.0027	 speedup=2.2037

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0301	 ParSpMatVec=0.0293	 speedup=1.0297
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0301	 ParSpMatVec=0.0033	 speedup=9.0516
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0301	 ParSpMatVec=0.0025	 speedup=12.2887
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0301	 ParSpMatVec=0.0025	 speedup=11.8716
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0301	 ParSpMatVec=0.0024	 speedup=12.4604

INFO: ParSpMatVec tests passed

>>> End of log
