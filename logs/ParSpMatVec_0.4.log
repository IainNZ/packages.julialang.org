>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.7
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.2
INFO: Installing URIParser v0.1.8
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-116-generic #163-Ubuntu SMP Fri Mar 31 14:13:22 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1200.51171875 MB free)
Uptime: 19894.0 sec
Load Avg:  1.205078125  1.060546875  1.05615234375
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3503 MHz     971365 s       1808 s      79733 s     732867 s         35 s
#2  3503 MHz     662384 s       4928 s      72220 s    1178892 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.9.0
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.7
 - Compat                        0.24.0
 - SHA                           0.3.2
 - URIParser                     0.1.8
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1393	 ParSpMatVec=0.0272	 speedup=5.1261
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1393	 ParSpMatVec=0.0103	 speedup=13.5366
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1393	 ParSpMatVec=0.0178	 speedup=7.8359
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1393	 ParSpMatVec=0.0119	 speedup=11.6729
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1393	 ParSpMatVec=0.0143	 speedup=9.7553
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1249	 ParSpMatVec=0.0261	 speedup=4.7837
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1249	 ParSpMatVec=0.0139	 speedup=8.9909
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1249	 ParSpMatVec=0.0175	 speedup=7.1206
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1249	 ParSpMatVec=0.0151	 speedup=8.2692
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1249	 ParSpMatVec=0.0146	 speedup=8.5709

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0480	 ParSpMatVec=0.0304	 speedup=1.5809
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0480	 ParSpMatVec=0.0140	 speedup=3.4388
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0480	 ParSpMatVec=0.0183	 speedup=2.6287
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0480	 ParSpMatVec=0.0171	 speedup=2.8145
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0480	 ParSpMatVec=0.0155	 speedup=3.0931

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0444	 ParSpMatVec=0.0426	 speedup=1.0424
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0444	 ParSpMatVec=0.0025	 speedup=17.5086
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0444	 ParSpMatVec=0.0018	 speedup=24.0412
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0444	 ParSpMatVec=0.0027	 speedup=16.5573
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0444	 ParSpMatVec=0.0035	 speedup=12.6141

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0092	 ParSpMatVec=0.0456	 speedup=0.2010
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0092	 ParSpMatVec=0.0041	 speedup=2.2443
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0092	 ParSpMatVec=0.0039	 speedup=2.3243
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0092	 ParSpMatVec=0.0056	 speedup=1.6274
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0092	 ParSpMatVec=0.0099	 speedup=0.9241

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0414	 ParSpMatVec=0.0454	 speedup=0.9113
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0414	 ParSpMatVec=0.0037	 speedup=11.1995
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0414	 ParSpMatVec=0.0062	 speedup=6.7047
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0414	 ParSpMatVec=0.0026	 speedup=16.1054
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0414	 ParSpMatVec=0.0124	 speedup=3.3403

INFO: ParSpMatVec tests passed

>>> End of log
