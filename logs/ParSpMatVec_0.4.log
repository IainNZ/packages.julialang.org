>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.7
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.3
INFO: Installing URIParser v0.1.8
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of ParSpMatVec
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-121-generic #170-Ubuntu SMP Wed Jun 14 09:04:33 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1144.0234375 MB free)
Uptime: 21913.0 sec
Load Avg:  1.0185546875  1.01953125  1.04541015625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3503 MHz    1061597 s       5640 s      87328 s     815876 s         36 s
#2  3503 MHz     713171 s       1503 s      74968 s    1328527 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.9.1
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.7
 - Compat                        0.26.0
 - SHA                           0.3.3
 - URIParser                     0.1.8
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1237	 ParSpMatVec=0.0272	 speedup=4.5472
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1237	 ParSpMatVec=0.0084	 speedup=14.7263
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1237	 ParSpMatVec=0.0120	 speedup=10.2897
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1237	 ParSpMatVec=0.0118	 speedup=10.5101
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1237	 ParSpMatVec=0.0121	 speedup=10.1923
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1159	 ParSpMatVec=0.0420	 speedup=2.7607
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1159	 ParSpMatVec=0.0142	 speedup=8.1791
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1159	 ParSpMatVec=0.0138	 speedup=8.4197
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1159	 ParSpMatVec=0.0127	 speedup=9.1473
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1159	 ParSpMatVec=0.0177	 speedup=6.5331

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0367	 ParSpMatVec=0.0153	 speedup=2.4074
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0367	 ParSpMatVec=0.0135	 speedup=2.7247
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0367	 ParSpMatVec=0.0177	 speedup=2.0716
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0367	 ParSpMatVec=0.0160	 speedup=2.3010
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0367	 ParSpMatVec=0.0166	 speedup=2.2180

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0313	 ParSpMatVec=0.0309	 speedup=1.0115
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0313	 ParSpMatVec=0.0029	 speedup=10.8813
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0313	 ParSpMatVec=0.0026	 speedup=12.1348
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0313	 ParSpMatVec=0.0019	 speedup=16.1992
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0313	 ParSpMatVec=0.0031	 speedup=10.1337

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0060	 ParSpMatVec=0.0274	 speedup=0.2189
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0060	 ParSpMatVec=0.0034	 speedup=1.7681
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0060	 ParSpMatVec=0.0026	 speedup=2.3484
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0060	 ParSpMatVec=0.0025	 speedup=2.3928
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0060	 ParSpMatVec=0.0027	 speedup=2.1938

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0363	 ParSpMatVec=0.0268	 speedup=1.3550
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0363	 ParSpMatVec=0.0032	 speedup=11.2347
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0363	 ParSpMatVec=0.0022	 speedup=16.5399
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0363	 ParSpMatVec=0.0047	 speedup=7.7107
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0363	 ParSpMatVec=0.0026	 speedup=14.0009

INFO: ParSpMatVec tests passed

>>> End of log
