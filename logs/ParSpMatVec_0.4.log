>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.7
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.3
INFO: Installing URIParser v0.1.8
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of ParSpMatVec
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-128-generic #177-Ubuntu SMP Tue Aug 8 11:40:23 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1135.40625 MB free)
Uptime: 23018.0 sec
Load Avg:  0.962890625  0.974609375  1.0185546875
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz    1089428 s       6048 s      93721 s     891400 s         40 s
#2  3499 MHz     773652 s         84 s      81592 s    1366717 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.9.1
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.7
 - Compat                        0.26.0
 - SHA                           0.3.3
 - URIParser                     0.1.8
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0772	 ParSpMatVec=0.0162	 speedup=4.7493
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0772	 ParSpMatVec=0.0089	 speedup=8.7091
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0772	 ParSpMatVec=0.0146	 speedup=5.2770
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0772	 ParSpMatVec=0.0088	 speedup=8.7221
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0772	 ParSpMatVec=0.0150	 speedup=5.1414
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1173	 ParSpMatVec=0.0429	 speedup=2.7373
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1173	 ParSpMatVec=0.0125	 speedup=9.4018
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1173	 ParSpMatVec=0.0145	 speedup=8.0963
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1173	 ParSpMatVec=0.0165	 speedup=7.1157
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1173	 ParSpMatVec=0.0137	 speedup=8.5641

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0482	 ParSpMatVec=0.0326	 speedup=1.4775
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0482	 ParSpMatVec=0.0145	 speedup=3.3236
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0482	 ParSpMatVec=0.0166	 speedup=2.8981
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0482	 ParSpMatVec=0.0120	 speedup=4.0165
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0482	 ParSpMatVec=0.0164	 speedup=2.9436

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0431	 ParSpMatVec=0.0502	 speedup=0.8587
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0431	 ParSpMatVec=0.0056	 speedup=7.7500
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0431	 ParSpMatVec=0.0042	 speedup=10.2285
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0431	 ParSpMatVec=0.0025	 speedup=17.4757
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0431	 ParSpMatVec=0.0020	 speedup=21.4167

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0083	 ParSpMatVec=0.0408	 speedup=0.2036
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0083	 ParSpMatVec=0.0033	 speedup=2.5175
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0083	 ParSpMatVec=0.0052	 speedup=1.6030
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0083	 ParSpMatVec=0.0031	 speedup=2.6594
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0083	 ParSpMatVec=0.0234	 speedup=0.3550

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0442	 ParSpMatVec=0.0458	 speedup=0.9649
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0442	 ParSpMatVec=0.0034	 speedup=12.9333
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0442	 ParSpMatVec=0.0020	 speedup=22.0987
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0442	 ParSpMatVec=0.0021	 speedup=21.1594
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0442	 ParSpMatVec=0.0021	 speedup=21.2034

INFO: ParSpMatVec tests passed

>>> End of log
