>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.7
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.3
INFO: Installing URIParser v0.1.8
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of ParSpMatVec
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-128-generic #177-Ubuntu SMP Tue Aug 8 11:40:23 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1186.8984375 MB free)
Uptime: 22587.0 sec
Load Avg:  1.09765625  1.08837890625  1.05810546875
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz    1103627 s       5690 s      80767 s     838635 s         38 s
#2  3499 MHz     718215 s       1252 s      67195 s    1386774 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.9.1
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.7
 - Compat                        0.26.0
 - SHA                           0.3.3
 - URIParser                     0.1.8
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1412	 ParSpMatVec=0.0288	 speedup=4.9081
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1412	 ParSpMatVec=0.0100	 speedup=14.1722
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1412	 ParSpMatVec=0.0118	 speedup=12.0177
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1412	 ParSpMatVec=0.0097	 speedup=14.6065
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1412	 ParSpMatVec=0.0098	 speedup=14.3651
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1213	 ParSpMatVec=0.0444	 speedup=2.7315
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1213	 ParSpMatVec=0.0151	 speedup=8.0567
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1213	 ParSpMatVec=0.0157	 speedup=7.7267
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1213	 ParSpMatVec=0.0132	 speedup=9.2188
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1213	 ParSpMatVec=0.0133	 speedup=9.1083

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0447	 ParSpMatVec=0.0173	 speedup=2.5888
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0447	 ParSpMatVec=0.0132	 speedup=3.3974
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0447	 ParSpMatVec=0.0140	 speedup=3.1992
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0447	 ParSpMatVec=0.0131	 speedup=3.4071
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0447	 ParSpMatVec=0.0139	 speedup=3.2268

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0274	 ParSpMatVec=0.0252	 speedup=1.0879
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0274	 ParSpMatVec=0.0014	 speedup=19.0512
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0274	 ParSpMatVec=0.0020	 speedup=13.5246
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0274	 ParSpMatVec=0.0013	 speedup=21.6795
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0274	 ParSpMatVec=0.0018	 speedup=15.5708

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0153	 ParSpMatVec=0.0472	 speedup=0.3237
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0153	 ParSpMatVec=0.0038	 speedup=4.0578
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0153	 ParSpMatVec=0.0020	 speedup=7.7196
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0153	 ParSpMatVec=0.0029	 speedup=5.2108
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0153	 ParSpMatVec=0.0027	 speedup=5.7046

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0323	 ParSpMatVec=0.0476	 speedup=0.6777
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0323	 ParSpMatVec=0.0041	 speedup=7.9496
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0323	 ParSpMatVec=0.0020	 speedup=15.9625
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0323	 ParSpMatVec=0.0024	 speedup=13.2450
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0323	 ParSpMatVec=0.0024	 speedup=13.3257

INFO: ParSpMatVec tests passed

>>> End of log
