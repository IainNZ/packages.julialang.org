>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.7
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.3
INFO: Installing URIParser v0.1.8
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of ParSpMatVec
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-121-generic #170-Ubuntu SMP Wed Jun 14 09:04:33 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1163.18359375 MB free)
Uptime: 21514.0 sec
Load Avg:  1.0390625  1.03076171875  1.04541015625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz    1079422 s       1202 s      88434 s     766886 s         33 s
#2  3500 MHz     670098 s       5606 s      76426 s    1337351 s          1 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.9.1
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.7
 - Compat                        0.26.0
 - SHA                           0.3.3
 - URIParser                     0.1.8
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0872	 ParSpMatVec=0.0243	 speedup=3.5949
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0872	 ParSpMatVec=0.0084	 speedup=10.3598
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0872	 ParSpMatVec=0.0116	 speedup=7.5087
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0872	 ParSpMatVec=0.0084	 speedup=10.3789
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0872	 ParSpMatVec=0.0104	 speedup=8.4221
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1204	 ParSpMatVec=0.0242	 speedup=4.9672
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1204	 ParSpMatVec=0.0148	 speedup=8.1373
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1204	 ParSpMatVec=0.0156	 speedup=7.6985
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1204	 ParSpMatVec=0.0134	 speedup=9.0007
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1204	 ParSpMatVec=0.0141	 speedup=8.5570

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0395	 ParSpMatVec=0.0263	 speedup=1.5012
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0395	 ParSpMatVec=0.0138	 speedup=2.8555
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0395	 ParSpMatVec=0.0159	 speedup=2.4876
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0395	 ParSpMatVec=0.0129	 speedup=3.0612
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0395	 ParSpMatVec=0.0142	 speedup=2.7871

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0320	 ParSpMatVec=0.0230	 speedup=1.3920
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0320	 ParSpMatVec=0.0027	 speedup=12.0233
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0320	 ParSpMatVec=0.0022	 speedup=14.7564
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0320	 ParSpMatVec=0.0014	 speedup=23.5206
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0320	 ParSpMatVec=0.0015	 speedup=21.3098

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0097	 ParSpMatVec=0.0452	 speedup=0.2145
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0097	 ParSpMatVec=0.0036	 speedup=2.7071
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0097	 ParSpMatVec=0.0015	 speedup=6.5483
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0097	 ParSpMatVec=0.0020	 speedup=4.9248
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0097	 ParSpMatVec=0.0039	 speedup=2.5046

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0447	 ParSpMatVec=0.0264	 speedup=1.6886
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0447	 ParSpMatVec=0.0034	 speedup=13.2638
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0447	 ParSpMatVec=0.0027	 speedup=16.7397
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0447	 ParSpMatVec=0.0026	 speedup=17.0515
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0447	 ParSpMatVec=0.0024	 speedup=18.6362

INFO: ParSpMatVec tests passed

>>> End of log
