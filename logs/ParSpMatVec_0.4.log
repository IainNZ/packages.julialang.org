>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.7
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.3
INFO: Installing URIParser v0.1.8
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-121-generic #170-Ubuntu SMP Wed Jun 14 09:04:33 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1168.87890625 MB free)
Uptime: 21495.0 sec
Load Avg:  0.88916015625  1.0  1.0078125
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz    1016422 s       2356 s      84559 s     836176 s         32 s
#2  3499 MHz     723627 s       3930 s      73908 s    1282173 s          1 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.9.1
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.7
 - Compat                        0.26.0
 - SHA                           0.3.3
 - URIParser                     0.1.8
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1335	 ParSpMatVec=0.0290	 speedup=4.5960
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1335	 ParSpMatVec=0.0091	 speedup=14.6385
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1335	 ParSpMatVec=0.0208	 speedup=6.4162
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1335	 ParSpMatVec=0.0143	 speedup=9.3518
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1335	 ParSpMatVec=0.0102	 speedup=13.0690
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1291	 ParSpMatVec=0.0436	 speedup=2.9591
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1291	 ParSpMatVec=0.0144	 speedup=8.9891
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1291	 ParSpMatVec=0.0143	 speedup=9.0220
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1291	 ParSpMatVec=0.0136	 speedup=9.4678
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1291	 ParSpMatVec=0.0172	 speedup=7.4918

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0290	 ParSpMatVec=0.0203	 speedup=1.4343
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0290	 ParSpMatVec=0.0131	 speedup=2.2142
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0290	 ParSpMatVec=0.0147	 speedup=1.9721
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0290	 ParSpMatVec=0.0135	 speedup=2.1591
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0290	 ParSpMatVec=0.0131	 speedup=2.2232

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0293	 ParSpMatVec=0.0257	 speedup=1.1406
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0293	 ParSpMatVec=0.0027	 speedup=11.0283
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0293	 ParSpMatVec=0.0020	 speedup=14.9063
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0293	 ParSpMatVec=0.0018	 speedup=16.1531
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0293	 ParSpMatVec=0.0022	 speedup=13.0708

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0092	 ParSpMatVec=0.0460	 speedup=0.1990
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0092	 ParSpMatVec=0.0033	 speedup=2.7597
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0092	 ParSpMatVec=0.0022	 speedup=4.0881
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0092	 ParSpMatVec=0.0025	 speedup=3.6753
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0092	 ParSpMatVec=0.0024	 speedup=3.7951

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0451	 ParSpMatVec=0.0411	 speedup=1.0953
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0451	 ParSpMatVec=0.0040	 speedup=11.3372
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0451	 ParSpMatVec=0.0025	 speedup=17.8883
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0451	 ParSpMatVec=0.0028	 speedup=16.1609
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0451	 ParSpMatVec=0.0028	 speedup=16.0864

INFO: ParSpMatVec tests passed

>>> End of log
