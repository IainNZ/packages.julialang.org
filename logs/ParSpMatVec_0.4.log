>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.7
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.3
INFO: Installing URIParser v0.1.8
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of ParSpMatVec
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-132-generic #181-Ubuntu SMP Wed Sep 13 13:25:03 UTC 2017 x86_64 x86_64
Memory: 2.93927001953125 GB (1166.17578125 MB free)
Uptime: 21248.0 sec
Load Avg:  1.04052734375  1.0146484375  0.99169921875
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz    1013002 s       2820 s      78961 s     817301 s         15 s
#2  3500 MHz     728386 s       3634 s      65627 s    1255335 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.9.1
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.7
 - Compat                        0.26.0
 - SHA                           0.3.3
 - URIParser                     0.1.8
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0956	 ParSpMatVec=0.0159	 speedup=6.0280
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0956	 ParSpMatVec=0.0091	 speedup=10.5563
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0956	 ParSpMatVec=0.0162	 speedup=5.8957
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0956	 ParSpMatVec=0.0080	 speedup=11.9867
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0956	 ParSpMatVec=0.0077	 speedup=12.4879
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1154	 ParSpMatVec=0.0366	 speedup=3.1560
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1154	 ParSpMatVec=0.0134	 speedup=8.6102
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1154	 ParSpMatVec=0.0153	 speedup=7.5274
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1154	 ParSpMatVec=0.0141	 speedup=8.1712
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1154	 ParSpMatVec=0.0138	 speedup=8.3522

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0440	 ParSpMatVec=0.0281	 speedup=1.5637
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0440	 ParSpMatVec=0.0134	 speedup=3.2775
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0440	 ParSpMatVec=0.0091	 speedup=4.8332
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0440	 ParSpMatVec=0.0105	 speedup=4.1812
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0440	 ParSpMatVec=0.0110	 speedup=4.0181

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0335	 ParSpMatVec=0.0282	 speedup=1.1908
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0335	 ParSpMatVec=0.0015	 speedup=23.1128
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0335	 ParSpMatVec=0.0016	 speedup=21.1948
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0335	 ParSpMatVec=0.0016	 speedup=21.1252
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0335	 ParSpMatVec=0.0016	 speedup=20.6242

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0087	 ParSpMatVec=0.0434	 speedup=0.1997
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0087	 ParSpMatVec=0.0041	 speedup=2.1036
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0087	 ParSpMatVec=0.0025	 speedup=3.4232
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0087	 ParSpMatVec=0.0030	 speedup=2.8744
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0087	 ParSpMatVec=0.0026	 speedup=3.3736

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0458	 ParSpMatVec=0.0506	 speedup=0.9060
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0458	 ParSpMatVec=0.0036	 speedup=12.7567
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0458	 ParSpMatVec=0.0020	 speedup=23.1340
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0458	 ParSpMatVec=0.0023	 speedup=19.8128
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0458	 ParSpMatVec=0.0026	 speedup=17.8807

INFO: ParSpMatVec tests passed

>>> End of log
