>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.7
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.3
INFO: Installing URIParser v0.1.8
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-121-generic #170-Ubuntu SMP Wed Jun 14 09:04:33 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1153.69921875 MB free)
Uptime: 22078.0 sec
Load Avg:  1.0302734375  0.9658203125  0.95751953125
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz    1065822 s        511 s      90856 s     832875 s         29 s
#2  3500 MHz     730322 s       6412 s      76920 s    1324397 s          2 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.9.1
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.7
 - Compat                        0.26.0
 - SHA                           0.3.3
 - URIParser                     0.1.8
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1257	 ParSpMatVec=0.0255	 speedup=4.9273
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1257	 ParSpMatVec=0.0105	 speedup=11.9316
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1257	 ParSpMatVec=0.0119	 speedup=10.5591
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1257	 ParSpMatVec=0.0064	 speedup=19.6919
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1257	 ParSpMatVec=0.0089	 speedup=14.1470
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1389	 ParSpMatVec=0.0440	 speedup=3.1584
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1389	 ParSpMatVec=0.0144	 speedup=9.6162
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1389	 ParSpMatVec=0.0084	 speedup=16.4638
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1389	 ParSpMatVec=0.0105	 speedup=13.2032
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1389	 ParSpMatVec=0.0152	 speedup=9.1361

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0457	 ParSpMatVec=0.0304	 speedup=1.5033
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0457	 ParSpMatVec=0.0139	 speedup=3.2876
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0457	 ParSpMatVec=0.0088	 speedup=5.1734
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0457	 ParSpMatVec=0.0093	 speedup=4.8929
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0457	 ParSpMatVec=0.0103	 speedup=4.4265

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0431	 ParSpMatVec=0.0485	 speedup=0.8876
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0431	 ParSpMatVec=0.0027	 speedup=15.8473
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0431	 ParSpMatVec=0.0022	 speedup=19.7118
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0431	 ParSpMatVec=0.0017	 speedup=25.8217
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0431	 ParSpMatVec=0.0019	 speedup=22.1102

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0082	 ParSpMatVec=0.0481	 speedup=0.1716
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0082	 ParSpMatVec=0.0042	 speedup=1.9761
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0082	 ParSpMatVec=0.0031	 speedup=2.6769
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0082	 ParSpMatVec=0.0024	 speedup=3.3775
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0082	 ParSpMatVec=0.0034	 speedup=2.3952

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0559	 ParSpMatVec=0.0474	 speedup=1.1781
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0559	 ParSpMatVec=0.0034	 speedup=16.3219
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0559	 ParSpMatVec=0.0021	 speedup=26.6931
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0559	 ParSpMatVec=0.0024	 speedup=23.5832
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0559	 ParSpMatVec=0.0026	 speedup=21.7015

INFO: ParSpMatVec tests passed

>>> End of log
