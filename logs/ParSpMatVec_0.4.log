>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.7
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.3
INFO: Installing URIParser v0.1.8
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of ParSpMatVec
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-121-generic #170-Ubuntu SMP Wed Jun 14 09:04:33 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1171.2421875 MB free)
Uptime: 21660.0 sec
Load Avg:  1.01171875  1.04052734375  1.02978515625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz    1068620 s        248 s      82482 s     792321 s         42 s
#2  3500 MHz     685705 s       6930 s      68311 s    1322633 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.9.1
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.7
 - Compat                        0.26.0
 - SHA                           0.3.3
 - URIParser                     0.1.8
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1229	 ParSpMatVec=0.0271	 speedup=4.5400
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1229	 ParSpMatVec=0.0091	 speedup=13.5652
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1229	 ParSpMatVec=0.0128	 speedup=9.5946
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1229	 ParSpMatVec=0.0131	 speedup=9.3805
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1229	 ParSpMatVec=0.0064	 speedup=19.1288
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1229	 ParSpMatVec=0.0422	 speedup=2.9112
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1229	 ParSpMatVec=0.0132	 speedup=9.2736
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1229	 ParSpMatVec=0.0157	 speedup=7.8100
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1229	 ParSpMatVec=0.0132	 speedup=9.3117
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1229	 ParSpMatVec=0.0143	 speedup=8.6099

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0435	 ParSpMatVec=0.0361	 speedup=1.2033
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0435	 ParSpMatVec=0.0100	 speedup=4.3522
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0435	 ParSpMatVec=0.0149	 speedup=2.9199
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0435	 ParSpMatVec=0.0138	 speedup=3.1556
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0435	 ParSpMatVec=0.0133	 speedup=3.2629

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0326	 ParSpMatVec=0.0225	 speedup=1.4530
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0326	 ParSpMatVec=0.0021	 speedup=15.7580
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0326	 ParSpMatVec=0.0020	 speedup=16.6061
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0326	 ParSpMatVec=0.0016	 speedup=20.3799
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0326	 ParSpMatVec=0.0013	 speedup=24.5222

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0073	 ParSpMatVec=0.0301	 speedup=0.2439
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0073	 ParSpMatVec=0.0041	 speedup=1.7927
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0073	 ParSpMatVec=0.0026	 speedup=2.8253
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0073	 ParSpMatVec=0.0027	 speedup=2.6965
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0073	 ParSpMatVec=0.0025	 speedup=2.9778

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0457	 ParSpMatVec=0.0463	 speedup=0.9875
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0457	 ParSpMatVec=0.0036	 speedup=12.8680
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0457	 ParSpMatVec=0.0025	 speedup=17.9667
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0457	 ParSpMatVec=0.0028	 speedup=16.5343
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0457	 ParSpMatVec=0.0023	 speedup=20.0338

INFO: ParSpMatVec tests passed

>>> End of log
