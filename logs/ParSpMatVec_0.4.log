>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.7
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.2
INFO: Installing URIParser v0.1.8
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-117-generic #164-Ubuntu SMP Fri Apr 7 11:05:26 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1207.15234375 MB free)
Uptime: 21256.0 sec
Load Avg:  1.015625  0.98681640625  1.0078125
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz     963993 s        112 s      76562 s     867454 s         44 s
#2  3499 MHz     685070 s       7127 s      68457 s    1274654 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.9.1
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.7
 - Compat                        0.24.0
 - SHA                           0.3.2
 - URIParser                     0.1.8
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1199	 ParSpMatVec=0.0249	 speedup=4.8181
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1199	 ParSpMatVec=0.0091	 speedup=13.1115
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1199	 ParSpMatVec=0.0118	 speedup=10.1719
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1199	 ParSpMatVec=0.0121	 speedup=9.9241
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1199	 ParSpMatVec=0.0105	 speedup=11.4161
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1309	 ParSpMatVec=0.0448	 speedup=2.9248
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1309	 ParSpMatVec=0.0146	 speedup=8.9868
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1309	 ParSpMatVec=0.0161	 speedup=8.1224
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1309	 ParSpMatVec=0.0134	 speedup=9.7472
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1309	 ParSpMatVec=0.0134	 speedup=9.7788

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0469	 ParSpMatVec=0.0301	 speedup=1.5602
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0469	 ParSpMatVec=0.0149	 speedup=3.1570
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0469	 ParSpMatVec=0.0195	 speedup=2.4053
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0469	 ParSpMatVec=0.0133	 speedup=3.5248
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0469	 ParSpMatVec=0.0144	 speedup=3.2650

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0433	 ParSpMatVec=0.0398	 speedup=1.0870
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0433	 ParSpMatVec=0.0033	 speedup=13.2489
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0433	 ParSpMatVec=0.0028	 speedup=15.5400
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0433	 ParSpMatVec=0.0019	 speedup=22.6357
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0433	 ParSpMatVec=0.0053	 speedup=8.2367

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0079	 ParSpMatVec=0.0324	 speedup=0.2424
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0079	 ParSpMatVec=0.0033	 speedup=2.3762
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0079	 ParSpMatVec=0.0019	 speedup=4.0950
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0079	 ParSpMatVec=0.0023	 speedup=3.3583
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0079	 ParSpMatVec=0.0024	 speedup=3.2615

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0335	 ParSpMatVec=0.0387	 speedup=0.8656
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0335	 ParSpMatVec=0.0035	 speedup=9.6282
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0335	 ParSpMatVec=0.0023	 speedup=14.6745
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0335	 ParSpMatVec=0.0040	 speedup=8.3628
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0335	 ParSpMatVec=0.0030	 speedup=11.0059

INFO: ParSpMatVec tests passed

>>> End of log
