>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.7
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.2
INFO: Installing URIParser v0.1.8
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of ParSpMatVec
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-117-generic #164-Ubuntu SMP Fri Apr 7 11:05:26 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1194.79296875 MB free)
Uptime: 21268.0 sec
Load Avg:  1.02294921875  1.048828125  1.04541015625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz     994135 s       2845 s      77994 s     840979 s         41 s
#2  3500 MHz     696823 s       3882 s      65373 s    1284452 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.9.1
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.7
 - Compat                        0.25.0
 - SHA                           0.3.2
 - URIParser                     0.1.8
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1351	 ParSpMatVec=0.0163	 speedup=8.2720
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1351	 ParSpMatVec=0.0086	 speedup=15.7942
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1351	 ParSpMatVec=0.0107	 speedup=12.6717
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1351	 ParSpMatVec=0.0200	 speedup=6.7681
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1351	 ParSpMatVec=0.0112	 speedup=12.0544
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1314	 ParSpMatVec=0.0451	 speedup=2.9154
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1314	 ParSpMatVec=0.0126	 speedup=10.3890
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1314	 ParSpMatVec=0.0154	 speedup=8.5263
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1314	 ParSpMatVec=0.0123	 speedup=10.6855
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1314	 ParSpMatVec=0.0143	 speedup=9.1955

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0398	 ParSpMatVec=0.0285	 speedup=1.3968
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0398	 ParSpMatVec=0.0136	 speedup=2.9216
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0398	 ParSpMatVec=0.0159	 speedup=2.5027
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0398	 ParSpMatVec=0.0160	 speedup=2.4809
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0398	 ParSpMatVec=0.0255	 speedup=1.5609

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0326	 ParSpMatVec=0.0478	 speedup=0.6831
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0326	 ParSpMatVec=0.0050	 speedup=6.5311
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0326	 ParSpMatVec=0.0044	 speedup=7.3561
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0326	 ParSpMatVec=0.0021	 speedup=15.3867
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0326	 ParSpMatVec=0.0018	 speedup=17.8572

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0072	 ParSpMatVec=0.0272	 speedup=0.2653
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0072	 ParSpMatVec=0.0035	 speedup=2.0388
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0072	 ParSpMatVec=0.0013	 speedup=5.7693
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0072	 ParSpMatVec=0.0032	 speedup=2.2554
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0072	 ParSpMatVec=0.0020	 speedup=3.5817

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0479	 ParSpMatVec=0.0501	 speedup=0.9557
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0479	 ParSpMatVec=0.0048	 speedup=10.0119
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0479	 ParSpMatVec=0.0024	 speedup=20.1780
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0479	 ParSpMatVec=0.0072	 speedup=6.6826
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0479	 ParSpMatVec=0.0066	 speedup=7.2656

INFO: ParSpMatVec tests passed

>>> End of log
