>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.7
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.3
INFO: Installing URIParser v0.1.8
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of ParSpMatVec
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-119-generic #166-Ubuntu SMP Wed May 3 12:18:55 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1187.078125 MB free)
Uptime: 20953.0 sec
Load Avg:  0.99267578125  0.9853515625  0.95458984375
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3501 MHz    1037995 s       6475 s      81879 s     745340 s         69 s
#2  3501 MHz     705559 s        214 s      70235 s    1244310 s          1 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.9.1
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.7
 - Compat                        0.26.0
 - SHA                           0.3.3
 - URIParser                     0.1.8
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1236	 ParSpMatVec=0.0154	 speedup=8.0479
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1236	 ParSpMatVec=0.0095	 speedup=13.0542
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1236	 ParSpMatVec=0.0127	 speedup=9.7136
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1236	 ParSpMatVec=0.0098	 speedup=12.5979
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1236	 ParSpMatVec=0.0085	 speedup=14.5468
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1107	 ParSpMatVec=0.0413	 speedup=2.6822
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1107	 ParSpMatVec=0.0125	 speedup=8.8812
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1107	 ParSpMatVec=0.0134	 speedup=8.2720
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1107	 ParSpMatVec=0.0131	 speedup=8.4509
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1107	 ParSpMatVec=0.0137	 speedup=8.0548

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0283	 ParSpMatVec=0.0299	 speedup=0.9494
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0283	 ParSpMatVec=0.0131	 speedup=2.1715
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0283	 ParSpMatVec=0.0140	 speedup=2.0280
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0283	 ParSpMatVec=0.0149	 speedup=1.8970
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0283	 ParSpMatVec=0.0133	 speedup=2.1319

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0368	 ParSpMatVec=0.0373	 speedup=0.9869
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0368	 ParSpMatVec=0.0025	 speedup=14.6054
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0368	 ParSpMatVec=0.0026	 speedup=14.2431
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0368	 ParSpMatVec=0.0017	 speedup=22.0351
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0368	 ParSpMatVec=0.0021	 speedup=17.7832

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0085	 ParSpMatVec=0.0435	 speedup=0.1952
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0085	 ParSpMatVec=0.0038	 speedup=2.2544
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0085	 ParSpMatVec=0.0023	 speedup=3.6193
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0085	 ParSpMatVec=0.0025	 speedup=3.3608
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0085	 ParSpMatVec=0.0022	 speedup=3.7842

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0437	 ParSpMatVec=0.0443	 speedup=0.9871
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0437	 ParSpMatVec=0.0040	 speedup=11.0413
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0437	 ParSpMatVec=0.0022	 speedup=20.0920
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0437	 ParSpMatVec=0.0025	 speedup=17.7762
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0437	 ParSpMatVec=0.0026	 speedup=17.0434

INFO: ParSpMatVec tests passed

>>> End of log
