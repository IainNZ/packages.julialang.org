>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.7
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.3
INFO: Installing URIParser v0.1.8
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-119-generic #166-Ubuntu SMP Wed May 3 12:18:55 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1189.0078125 MB free)
Uptime: 21708.0 sec
Load Avg:  1.04345703125  1.0263671875  0.9814453125
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz    1027130 s       5430 s      80330 s     844753 s         28 s
#2  3500 MHz     721920 s       1095 s      67745 s    1306725 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.9.1
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.7
 - Compat                        0.25.2
 - SHA                           0.3.3
 - URIParser                     0.1.8
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1364	 ParSpMatVec=0.0248	 speedup=5.5031
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1364	 ParSpMatVec=0.0084	 speedup=16.1800
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1364	 ParSpMatVec=0.0134	 speedup=10.1634
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1364	 ParSpMatVec=0.0115	 speedup=11.8562
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1364	 ParSpMatVec=0.0107	 speedup=12.7007
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1246	 ParSpMatVec=0.0412	 speedup=3.0253
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1246	 ParSpMatVec=0.0135	 speedup=9.2399
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1246	 ParSpMatVec=0.0144	 speedup=8.6337
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1246	 ParSpMatVec=0.0129	 speedup=9.6227
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1246	 ParSpMatVec=0.0163	 speedup=7.6201

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0397	 ParSpMatVec=0.0277	 speedup=1.4358
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0397	 ParSpMatVec=0.0138	 speedup=2.8873
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0397	 ParSpMatVec=0.0143	 speedup=2.7800
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0397	 ParSpMatVec=0.0128	 speedup=3.0967
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0397	 ParSpMatVec=0.0237	 speedup=1.6731

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0282	 ParSpMatVec=0.0234	 speedup=1.2068
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0282	 ParSpMatVec=0.0023	 speedup=12.2487
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0282	 ParSpMatVec=0.0025	 speedup=11.4053
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0282	 ParSpMatVec=0.0120	 speedup=2.3518
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0282	 ParSpMatVec=0.0016	 speedup=17.7318

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0069	 ParSpMatVec=0.0278	 speedup=0.2488
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0069	 ParSpMatVec=0.0037	 speedup=1.8561
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0069	 ParSpMatVec=0.0015	 speedup=4.5771
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0069	 ParSpMatVec=0.0031	 speedup=2.2278
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0069	 ParSpMatVec=0.0027	 speedup=2.5372

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0317	 ParSpMatVec=0.0308	 speedup=1.0289
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0317	 ParSpMatVec=0.0035	 speedup=9.0336
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0317	 ParSpMatVec=0.0015	 speedup=20.8320
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0317	 ParSpMatVec=0.0022	 speedup=14.4400
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0317	 ParSpMatVec=0.0028	 speedup=11.4771

INFO: ParSpMatVec tests passed

>>> End of log
