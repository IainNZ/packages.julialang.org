>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.3.21
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.1.2
INFO: Installing URIParser v0.1.3
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of ParSpMatVec
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.5
Commit 2ac304d (2016-03-18 00:58 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1292	 ParSpMatVec=0.0253	 speedup=5.1113
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1292	 ParSpMatVec=0.0084	 speedup=15.4216
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1292	 ParSpMatVec=0.0087	 speedup=14.8194
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1292	 ParSpMatVec=0.0074	 speedup=17.3488
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1292	 ParSpMatVec=0.0071	 speedup=18.2361
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0758	 ParSpMatVec=0.0408	 speedup=1.8583
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0758	 ParSpMatVec=0.0117	 speedup=6.4544
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0758	 ParSpMatVec=0.0083	 speedup=9.1757
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0758	 ParSpMatVec=0.0088	 speedup=8.5999
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0758	 ParSpMatVec=0.0110	 speedup=6.8712

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0461	 ParSpMatVec=0.0316	 speedup=1.4577
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0461	 ParSpMatVec=0.0143	 speedup=3.2242
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0461	 ParSpMatVec=0.0082	 speedup=5.6065
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0461	 ParSpMatVec=0.0087	 speedup=5.2742
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0461	 ParSpMatVec=0.0127	 speedup=3.6411

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0339	 ParSpMatVec=0.0221	 speedup=1.5306
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0339	 ParSpMatVec=0.0021	 speedup=16.1368
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0339	 ParSpMatVec=0.0013	 speedup=26.1338
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0339	 ParSpMatVec=0.0014	 speedup=23.9869
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0339	 ParSpMatVec=0.0014	 speedup=23.8616

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0075	 ParSpMatVec=0.0437	 speedup=0.1708
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0075	 ParSpMatVec=0.0039	 speedup=1.8967
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0075	 ParSpMatVec=0.0015	 speedup=4.9533
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0075	 ParSpMatVec=0.0025	 speedup=3.0426
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0075	 ParSpMatVec=0.0025	 speedup=2.9366

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0437	 ParSpMatVec=0.0701	 speedup=0.6239
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0437	 ParSpMatVec=0.0038	 speedup=11.6253
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0437	 ParSpMatVec=0.0020	 speedup=21.4954
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0437	 ParSpMatVec=0.0023	 speedup=19.3735
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0437	 ParSpMatVec=0.0027	 speedup=16.0090

INFO: ParSpMatVec tests passed

>>> End of log
