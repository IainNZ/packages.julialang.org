>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.7
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.3
INFO: Installing URIParser v0.1.8
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of ParSpMatVec
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-121-generic #170-Ubuntu SMP Wed Jun 14 09:04:33 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1143.68359375 MB free)
Uptime: 21642.0 sec
Load Avg:  0.9970703125  0.962890625  0.98095703125
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3501 MHz    1043816 s       4318 s      81536 s     820686 s         32 s
#2  3501 MHz     732105 s       2237 s      69796 s    1293955 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.9.1
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.7
 - Compat                        0.26.0
 - SHA                           0.3.3
 - URIParser                     0.1.8
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1424	 ParSpMatVec=0.0174	 speedup=8.1783
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1424	 ParSpMatVec=0.0095	 speedup=15.0031
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1424	 ParSpMatVec=0.0105	 speedup=13.6060
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1424	 ParSpMatVec=0.0071	 speedup=20.1873
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1424	 ParSpMatVec=0.0071	 speedup=19.9246
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1120	 ParSpMatVec=0.0395	 speedup=2.8354
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1120	 ParSpMatVec=0.0132	 speedup=8.4685
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1120	 ParSpMatVec=0.0098	 speedup=11.4705
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1120	 ParSpMatVec=0.0107	 speedup=10.4735
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1120	 ParSpMatVec=0.0111	 speedup=10.1011

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0458	 ParSpMatVec=0.0303	 speedup=1.5132
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0458	 ParSpMatVec=0.0146	 speedup=3.1395
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0458	 ParSpMatVec=0.0089	 speedup=5.1641
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0458	 ParSpMatVec=0.0116	 speedup=3.9438
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0458	 ParSpMatVec=0.0132	 speedup=3.4647

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0453	 ParSpMatVec=0.0426	 speedup=1.0621
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0453	 ParSpMatVec=0.0029	 speedup=15.4336
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0453	 ParSpMatVec=0.0022	 speedup=20.1647
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0453	 ParSpMatVec=0.0033	 speedup=13.7990
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0453	 ParSpMatVec=0.0017	 speedup=26.6740

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0093	 ParSpMatVec=0.0474	 speedup=0.1971
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0093	 ParSpMatVec=0.0042	 speedup=2.2338
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0093	 ParSpMatVec=0.0021	 speedup=4.4078
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0093	 ParSpMatVec=0.0023	 speedup=4.0470
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0093	 ParSpMatVec=0.0027	 speedup=3.5148

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0493	 ParSpMatVec=0.0466	 speedup=1.0566
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0493	 ParSpMatVec=0.0048	 speedup=10.1579
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0493	 ParSpMatVec=0.0026	 speedup=19.2894
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0493	 ParSpMatVec=0.0028	 speedup=17.6757
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0493	 ParSpMatVec=0.0030	 speedup=16.2322

INFO: ParSpMatVec tests passed

>>> End of log
