>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.7
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.3
INFO: Installing URIParser v0.1.8
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of ParSpMatVec
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-125-generic #174-Ubuntu SMP Mon Jul 10 18:51:24 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1169.125 MB free)
Uptime: 21775.0 sec
Load Avg:  1.03662109375  0.9990234375  0.99560546875
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz    1100491 s       5395 s      83452 s     752048 s         33 s
#2  3499 MHz     717983 s       2116 s      69126 s    1324466 s          1 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.9.1
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.7
 - Compat                        0.26.0
 - SHA                           0.3.3
 - URIParser                     0.1.8
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0851	 ParSpMatVec=0.0276	 speedup=3.0793
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0851	 ParSpMatVec=0.0098	 speedup=8.6837
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0851	 ParSpMatVec=0.0102	 speedup=8.3394
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0851	 ParSpMatVec=0.0065	 speedup=13.1284
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0851	 ParSpMatVec=0.0107	 speedup=7.9324
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0924	 ParSpMatVec=0.0275	 speedup=3.3651
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0924	 ParSpMatVec=0.0136	 speedup=6.7811
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0924	 ParSpMatVec=0.0097	 speedup=9.5326
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0924	 ParSpMatVec=0.0101	 speedup=9.1298
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0924	 ParSpMatVec=0.0165	 speedup=5.6018

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0314	 ParSpMatVec=0.0200	 speedup=1.5732
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0314	 ParSpMatVec=0.0129	 speedup=2.4382
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0314	 ParSpMatVec=0.0158	 speedup=1.9856
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0314	 ParSpMatVec=0.0133	 speedup=2.3606
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0314	 ParSpMatVec=0.0161	 speedup=1.9485

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0317	 ParSpMatVec=0.0341	 speedup=0.9307
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0317	 ParSpMatVec=0.0017	 speedup=18.8601
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0317	 ParSpMatVec=0.0014	 speedup=23.0558
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0317	 ParSpMatVec=0.0013	 speedup=25.2638
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0317	 ParSpMatVec=0.0014	 speedup=22.4290

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0070	 ParSpMatVec=0.0335	 speedup=0.2099
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0070	 ParSpMatVec=0.0027	 speedup=2.6345
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0070	 ParSpMatVec=0.0021	 speedup=3.3317
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0070	 ParSpMatVec=0.0024	 speedup=2.9220
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0070	 ParSpMatVec=0.0021	 speedup=3.3451

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0291	 ParSpMatVec=0.0280	 speedup=1.0367
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0291	 ParSpMatVec=0.0031	 speedup=9.5188
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0291	 ParSpMatVec=0.0024	 speedup=12.1694
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0291	 ParSpMatVec=0.0025	 speedup=11.4513
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0291	 ParSpMatVec=0.0021	 speedup=13.7498

INFO: ParSpMatVec tests passed

>>> End of log
