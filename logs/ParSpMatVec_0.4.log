>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.7
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.3
INFO: Installing URIParser v0.1.8
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-119-generic #166-Ubuntu SMP Wed May 3 12:18:55 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1207.1171875 MB free)
Uptime: 20888.0 sec
Load Avg:  1.0234375  0.970703125  0.8291015625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz     920238 s       3553 s      69362 s     902466 s         18 s
#2  3500 MHz     669317 s       3600 s      58486 s    1301720 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.9.1
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.7
 - Compat                        0.25.2
 - SHA                           0.3.3
 - URIParser                     0.1.8
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0834	 ParSpMatVec=0.0243	 speedup=3.4278
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0834	 ParSpMatVec=0.0096	 speedup=8.6754
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0834	 ParSpMatVec=0.0107	 speedup=7.8270
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0834	 ParSpMatVec=0.0092	 speedup=9.1016
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0834	 ParSpMatVec=0.0094	 speedup=8.8732
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0737	 ParSpMatVec=0.0248	 speedup=2.9772
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0737	 ParSpMatVec=0.0120	 speedup=6.1504
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0737	 ParSpMatVec=0.0146	 speedup=5.0352
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0737	 ParSpMatVec=0.0132	 speedup=5.5653
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0737	 ParSpMatVec=0.0102	 speedup=7.2145

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0323	 ParSpMatVec=0.0318	 speedup=1.0149
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0323	 ParSpMatVec=0.0130	 speedup=2.4870
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0323	 ParSpMatVec=0.0153	 speedup=2.1066
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0323	 ParSpMatVec=0.0132	 speedup=2.4399
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0323	 ParSpMatVec=0.0378	 speedup=0.8550

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0392	 ParSpMatVec=0.0390	 speedup=1.0057
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0392	 ParSpMatVec=0.0024	 speedup=16.1255
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0392	 ParSpMatVec=0.0027	 speedup=14.3580
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0392	 ParSpMatVec=0.0019	 speedup=20.4176
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0392	 ParSpMatVec=0.0018	 speedup=22.1133

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0064	 ParSpMatVec=0.0448	 speedup=0.1421
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0064	 ParSpMatVec=0.0031	 speedup=2.0467
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0064	 ParSpMatVec=0.0020	 speedup=3.1175
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0064	 ParSpMatVec=0.0030	 speedup=2.1158
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0064	 ParSpMatVec=0.0026	 speedup=2.4934

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0472	 ParSpMatVec=0.0464	 speedup=1.0164
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0472	 ParSpMatVec=0.0035	 speedup=13.3133
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0472	 ParSpMatVec=0.0022	 speedup=21.4210
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0472	 ParSpMatVec=0.0031	 speedup=15.0120
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0472	 ParSpMatVec=0.0024	 speedup=19.3381

INFO: ParSpMatVec tests passed

>>> End of log
