>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.7
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.3
INFO: Installing URIParser v0.1.8
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of ParSpMatVec
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-121-generic #170-Ubuntu SMP Wed Jun 14 09:04:33 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1180.36328125 MB free)
Uptime: 21760.0 sec
Load Avg:  0.95556640625  0.970703125  0.95458984375
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz    1077820 s       3625 s      78712 s     793797 s         39 s
#2  3499 MHz     666090 s       2992 s      66424 s    1361080 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.9.1
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.7
 - Compat                        0.26.0
 - SHA                           0.3.3
 - URIParser                     0.1.8
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0870	 ParSpMatVec=0.0266	 speedup=3.2763
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0870	 ParSpMatVec=0.0090	 speedup=9.6869
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0870	 ParSpMatVec=0.0126	 speedup=6.9222
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0870	 ParSpMatVec=0.0097	 speedup=8.9963
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0870	 ParSpMatVec=0.0083	 speedup=10.4997
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1242	 ParSpMatVec=0.0442	 speedup=2.8098
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1242	 ParSpMatVec=0.0138	 speedup=9.0222
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1242	 ParSpMatVec=0.0148	 speedup=8.4128
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1242	 ParSpMatVec=0.0131	 speedup=9.4513
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1242	 ParSpMatVec=0.0123	 speedup=10.1279

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0479	 ParSpMatVec=0.0186	 speedup=2.5724
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0479	 ParSpMatVec=0.0137	 speedup=3.5065
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0479	 ParSpMatVec=0.0110	 speedup=4.3512
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0479	 ParSpMatVec=0.0135	 speedup=3.5431
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0479	 ParSpMatVec=0.0093	 speedup=5.1562

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0436	 ParSpMatVec=0.0294	 speedup=1.4847
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0436	 ParSpMatVec=0.0019	 speedup=23.5519
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0436	 ParSpMatVec=0.0014	 speedup=32.2730
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0436	 ParSpMatVec=0.0016	 speedup=27.2318
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0436	 ParSpMatVec=0.0016	 speedup=27.5932

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0055	 ParSpMatVec=0.0449	 speedup=0.1224
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0055	 ParSpMatVec=0.0037	 speedup=1.5011
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0055	 ParSpMatVec=0.0014	 speedup=3.9401
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0055	 ParSpMatVec=0.0020	 speedup=2.6825
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0055	 ParSpMatVec=0.0024	 speedup=2.2463

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0294	 ParSpMatVec=0.0274	 speedup=1.0720
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0294	 ParSpMatVec=0.0029	 speedup=10.2103
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0294	 ParSpMatVec=0.0018	 speedup=16.4675
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0294	 ParSpMatVec=0.0035	 speedup=8.4318
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0294	 ParSpMatVec=0.0135	 speedup=2.1837

INFO: ParSpMatVec tests passed

>>> End of log
