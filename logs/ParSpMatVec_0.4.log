>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.7
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.3
INFO: Installing URIParser v0.1.8
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of ParSpMatVec
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-119-generic #166-Ubuntu SMP Wed May 3 12:18:55 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1200.5625 MB free)
Uptime: 21565.0 sec
Load Avg:  0.97216796875  0.978515625  1.02392578125
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz    1026511 s       1346 s      82867 s     835778 s         37 s
#2  3500 MHz     714254 s       5646 s      71917 s    1289997 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.9.1
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.7
 - Compat                        0.25.2
 - SHA                           0.3.3
 - URIParser                     0.1.8
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1332	 ParSpMatVec=0.0269	 speedup=4.9520
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1332	 ParSpMatVec=0.0091	 speedup=14.7045
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1332	 ParSpMatVec=0.0205	 speedup=6.4993
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1332	 ParSpMatVec=0.0102	 speedup=13.0908
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1332	 ParSpMatVec=0.0132	 speedup=10.0674
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1224	 ParSpMatVec=0.0472	 speedup=2.5939
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1224	 ParSpMatVec=0.0139	 speedup=8.8044
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1224	 ParSpMatVec=0.0137	 speedup=8.9558
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1224	 ParSpMatVec=0.0144	 speedup=8.4886
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1224	 ParSpMatVec=0.0144	 speedup=8.5140

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0471	 ParSpMatVec=0.0284	 speedup=1.6600
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0471	 ParSpMatVec=0.0142	 speedup=3.3195
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0471	 ParSpMatVec=0.0457	 speedup=1.0305
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0471	 ParSpMatVec=0.0149	 speedup=3.1649
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0471	 ParSpMatVec=0.0153	 speedup=3.0782

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0443	 ParSpMatVec=0.0412	 speedup=1.0747
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0443	 ParSpMatVec=0.0020	 speedup=21.8808
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0443	 ParSpMatVec=0.0043	 speedup=10.2099
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0443	 ParSpMatVec=0.0024	 speedup=18.2829
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0443	 ParSpMatVec=0.0027	 speedup=16.6299

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0088	 ParSpMatVec=0.0448	 speedup=0.1967
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0088	 ParSpMatVec=0.0053	 speedup=1.6676
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0088	 ParSpMatVec=0.0024	 speedup=3.6530
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0088	 ParSpMatVec=0.0041	 speedup=2.1660
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0088	 ParSpMatVec=0.0028	 speedup=3.1432

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0461	 ParSpMatVec=0.0343	 speedup=1.3444
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0461	 ParSpMatVec=0.0034	 speedup=13.4342
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0461	 ParSpMatVec=0.0031	 speedup=14.6680
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0461	 ParSpMatVec=0.0028	 speedup=16.4550
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0461	 ParSpMatVec=0.0026	 speedup=17.8601

INFO: ParSpMatVec tests passed

>>> End of log
