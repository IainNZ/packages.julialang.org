>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.7
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.2
INFO: Installing URIParser v0.1.8
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-116-generic #163-Ubuntu SMP Fri Mar 31 14:13:22 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1196.59375 MB free)
Uptime: 20257.0 sec
Load Avg:  0.994140625  0.9853515625  1.0185546875
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz     985980 s       1235 s      81761 s     739171 s         42 s
#2  3500 MHz     634901 s       5994 s      71324 s    1236408 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.9.0
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.7
 - Compat                        0.23.0
 - SHA                           0.3.2
 - URIParser                     0.1.8
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0954	 ParSpMatVec=0.0264	 speedup=3.6164
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0954	 ParSpMatVec=0.0099	 speedup=9.6153
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0954	 ParSpMatVec=0.0116	 speedup=8.1881
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0954	 ParSpMatVec=0.0085	 speedup=11.2535
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0954	 ParSpMatVec=0.0079	 speedup=12.0151
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1333	 ParSpMatVec=0.0463	 speedup=2.8777
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1333	 ParSpMatVec=0.0143	 speedup=9.3442
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1333	 ParSpMatVec=0.0134	 speedup=9.9187
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1333	 ParSpMatVec=0.0141	 speedup=9.4634
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1333	 ParSpMatVec=0.0137	 speedup=9.7082

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0453	 ParSpMatVec=0.0306	 speedup=1.4814
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0453	 ParSpMatVec=0.0142	 speedup=3.1843
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0453	 ParSpMatVec=0.0148	 speedup=3.0579
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0453	 ParSpMatVec=0.0139	 speedup=3.2514
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0453	 ParSpMatVec=0.0164	 speedup=2.7626

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0427	 ParSpMatVec=0.0444	 speedup=0.9622
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0427	 ParSpMatVec=0.0027	 speedup=16.0722
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0427	 ParSpMatVec=0.0042	 speedup=10.0574
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0427	 ParSpMatVec=0.0018	 speedup=24.3483
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0427	 ParSpMatVec=0.0017	 speedup=25.2834

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0107	 ParSpMatVec=0.0578	 speedup=0.1844
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0107	 ParSpMatVec=0.0085	 speedup=1.2591
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0107	 ParSpMatVec=0.0048	 speedup=2.2046
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0107	 ParSpMatVec=0.0024	 speedup=4.3838
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0107	 ParSpMatVec=0.0025	 speedup=4.2670

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0476	 ParSpMatVec=0.0604	 speedup=0.7877
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0476	 ParSpMatVec=0.0046	 speedup=10.2562
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0476	 ParSpMatVec=0.0025	 speedup=19.1030
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0476	 ParSpMatVec=0.0720	 speedup=0.6613
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0476	 ParSpMatVec=0.0029	 speedup=16.2791

INFO: ParSpMatVec tests passed

>>> End of log
