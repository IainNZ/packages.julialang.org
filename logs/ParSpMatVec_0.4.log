>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.7
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.2
INFO: Installing URIParser v0.1.8
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-116-generic #163-Ubuntu SMP Fri Mar 31 14:13:22 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1191.0859375 MB free)
Uptime: 15209.0 sec
Load Avg:  1.03125  1.0078125  1.02392578125
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz     736620 s       4426 s      62110 s     560924 s         28 s
#2  3499 MHz     488770 s       3234 s      55264 s     919359 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.8.3
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.7
 - Compat                        0.22.0
 - SHA                           0.3.2
 - URIParser                     0.1.8
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0848	 ParSpMatVec=0.0166	 speedup=5.1027
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0848	 ParSpMatVec=0.0084	 speedup=10.0608
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0848	 ParSpMatVec=0.0115	 speedup=7.4026
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0848	 ParSpMatVec=0.0092	 speedup=9.2353
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0848	 ParSpMatVec=0.0101	 speedup=8.3777
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0841	 ParSpMatVec=0.0405	 speedup=2.0736
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0841	 ParSpMatVec=0.0101	 speedup=8.3081
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0841	 ParSpMatVec=0.0157	 speedup=5.3669
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0841	 ParSpMatVec=0.0135	 speedup=6.2364
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0841	 ParSpMatVec=0.0134	 speedup=6.2936

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0431	 ParSpMatVec=0.0291	 speedup=1.4779
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0431	 ParSpMatVec=0.0125	 speedup=3.4480
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0431	 ParSpMatVec=0.0149	 speedup=2.8921
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0431	 ParSpMatVec=0.0152	 speedup=2.8420
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0431	 ParSpMatVec=0.0138	 speedup=3.1220

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0419	 ParSpMatVec=0.0358	 speedup=1.1691
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0419	 ParSpMatVec=0.0031	 speedup=13.5916
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0419	 ParSpMatVec=0.0040	 speedup=10.3577
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0419	 ParSpMatVec=0.0025	 speedup=16.7204
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0419	 ParSpMatVec=0.0022	 speedup=19.0845

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0084	 ParSpMatVec=0.0311	 speedup=0.2709
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0084	 ParSpMatVec=0.0043	 speedup=1.9488
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0084	 ParSpMatVec=0.0032	 speedup=2.6417
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0084	 ParSpMatVec=0.0024	 speedup=3.5658
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0084	 ParSpMatVec=0.0029	 speedup=2.9077

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0460	 ParSpMatVec=0.0437	 speedup=1.0517
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0460	 ParSpMatVec=0.0045	 speedup=10.1437
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0460	 ParSpMatVec=0.0020	 speedup=23.3776
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0460	 ParSpMatVec=0.0046	 speedup=9.9354
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0460	 ParSpMatVec=0.0023	 speedup=19.9782

INFO: ParSpMatVec tests passed

>>> End of log
