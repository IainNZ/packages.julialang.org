>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.7
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.2
INFO: Installing URIParser v0.1.8
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-119-generic #166-Ubuntu SMP Wed May 3 12:18:55 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1194.75 MB free)
Uptime: 20976.0 sec
Load Avg:  1.01220703125  1.001953125  1.0302734375
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3503 MHz    1021810 s         57 s      85194 s     770655 s         25 s
#2  3503 MHz     637441 s       5971 s      74947 s    1310537 s          1 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.9.1
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.7
 - Compat                        0.25.2
 - SHA                           0.3.2
 - URIParser                     0.1.8
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0936	 ParSpMatVec=0.0162	 speedup=5.7748
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0936	 ParSpMatVec=0.0089	 speedup=10.5394
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0936	 ParSpMatVec=0.0106	 speedup=8.8225
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0936	 ParSpMatVec=0.0113	 speedup=8.3059
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0936	 ParSpMatVec=0.0094	 speedup=9.9539
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1078	 ParSpMatVec=0.0348	 speedup=3.1019
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1078	 ParSpMatVec=0.0142	 speedup=7.6140
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1078	 ParSpMatVec=0.0151	 speedup=7.1375
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1078	 ParSpMatVec=0.0136	 speedup=7.9243
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1078	 ParSpMatVec=0.0120	 speedup=8.9578

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0323	 ParSpMatVec=0.0178	 speedup=1.8166
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0323	 ParSpMatVec=0.0130	 speedup=2.4896
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0323	 ParSpMatVec=0.0152	 speedup=2.1248
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0323	 ParSpMatVec=0.0128	 speedup=2.5145
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0323	 ParSpMatVec=0.0150	 speedup=2.1493

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0263	 ParSpMatVec=0.0221	 speedup=1.1903
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0263	 ParSpMatVec=0.0022	 speedup=11.7683
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0263	 ParSpMatVec=0.0033	 speedup=7.8794
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0263	 ParSpMatVec=0.0016	 speedup=16.6130
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0263	 ParSpMatVec=0.0025	 speedup=10.6775

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0067	 ParSpMatVec=0.0477	 speedup=0.1395
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0067	 ParSpMatVec=0.0027	 speedup=2.4381
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0067	 ParSpMatVec=0.0042	 speedup=1.5783
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0067	 ParSpMatVec=0.0023	 speedup=2.9059
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0067	 ParSpMatVec=0.0026	 speedup=2.5331

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0270	 ParSpMatVec=0.0368	 speedup=0.7332
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0270	 ParSpMatVec=0.0066	 speedup=4.1071
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0270	 ParSpMatVec=0.0030	 speedup=8.9666
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0270	 ParSpMatVec=0.0021	 speedup=13.0090
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0270	 ParSpMatVec=0.0023	 speedup=11.5110

INFO: ParSpMatVec tests passed

>>> End of log
