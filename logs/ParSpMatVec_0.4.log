>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.7
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.3
INFO: Installing URIParser v0.1.8
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-121-generic #170-Ubuntu SMP Wed Jun 14 09:04:33 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1153.30078125 MB free)
Uptime: 21904.0 sec
Load Avg:  0.90966796875  0.93896484375  0.9482421875
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz    1070616 s         74 s      94102 s     806059 s         40 s
#2  3500 MHz     704319 s       6426 s      82471 s    1325362 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.9.1
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.7
 - Compat                        0.26.0
 - SHA                           0.3.3
 - URIParser                     0.1.8
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0865	 ParSpMatVec=0.0250	 speedup=3.4637
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0865	 ParSpMatVec=0.0095	 speedup=9.1337
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0865	 ParSpMatVec=0.0091	 speedup=9.5385
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0865	 ParSpMatVec=0.0076	 speedup=11.3810
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0865	 ParSpMatVec=0.0087	 speedup=9.9472
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0758	 ParSpMatVec=0.0265	 speedup=2.8541
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0758	 ParSpMatVec=0.0127	 speedup=5.9744
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0758	 ParSpMatVec=0.0083	 speedup=9.1716
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0758	 ParSpMatVec=0.0105	 speedup=7.2055
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0758	 ParSpMatVec=0.0113	 speedup=6.6845

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0415	 ParSpMatVec=0.0285	 speedup=1.4595
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0415	 ParSpMatVec=0.0128	 speedup=3.2347
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0415	 ParSpMatVec=0.0085	 speedup=4.8968
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0415	 ParSpMatVec=0.0097	 speedup=4.2723
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0415	 ParSpMatVec=0.0111	 speedup=3.7395

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0404	 ParSpMatVec=0.0376	 speedup=1.0739
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0404	 ParSpMatVec=0.0027	 speedup=14.7505
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0404	 ParSpMatVec=0.0019	 speedup=20.9030
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0404	 ParSpMatVec=0.0019	 speedup=20.9317
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0404	 ParSpMatVec=0.0015	 speedup=27.0303

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0092	 ParSpMatVec=0.0457	 speedup=0.2003
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0092	 ParSpMatVec=0.0033	 speedup=2.8178
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0092	 ParSpMatVec=0.0026	 speedup=3.5597
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0092	 ParSpMatVec=0.0039	 speedup=2.3474
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0092	 ParSpMatVec=0.0027	 speedup=3.4295

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0490	 ParSpMatVec=0.0490	 speedup=0.9991
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0490	 ParSpMatVec=0.0038	 speedup=12.7702
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0490	 ParSpMatVec=0.0024	 speedup=20.6976
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0490	 ParSpMatVec=0.0027	 speedup=18.1774
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0490	 ParSpMatVec=0.0025	 speedup=19.3272

INFO: ParSpMatVec tests passed

>>> End of log
