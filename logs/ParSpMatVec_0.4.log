>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.7
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.3
INFO: Installing URIParser v0.1.8
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of ParSpMatVec
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-121-generic #170-Ubuntu SMP Wed Jun 14 09:04:33 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1186.44921875 MB free)
Uptime: 21132.0 sec
Load Avg:  1.025390625  1.001953125  0.9697265625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz     998248 s       4956 s      77107 s     827398 s         29 s
#2  3499 MHz     750085 s       1983 s      63218 s    1232802 s          1 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.9.1
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.7
 - Compat                        0.26.0
 - SHA                           0.3.3
 - URIParser                     0.1.8
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1138	 ParSpMatVec=0.0243	 speedup=4.6834
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1138	 ParSpMatVec=0.0086	 speedup=13.1765
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1138	 ParSpMatVec=0.0125	 speedup=9.1192
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1138	 ParSpMatVec=0.0090	 speedup=12.7097
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1138	 ParSpMatVec=0.0066	 speedup=17.1231
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1130	 ParSpMatVec=0.0312	 speedup=3.6283
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1130	 ParSpMatVec=0.0131	 speedup=8.6509
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1130	 ParSpMatVec=0.0139	 speedup=8.1087
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1130	 ParSpMatVec=0.0128	 speedup=8.8585
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1130	 ParSpMatVec=0.0127	 speedup=8.9240

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0409	 ParSpMatVec=0.0254	 speedup=1.6121
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0409	 ParSpMatVec=0.0126	 speedup=3.2559
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0409	 ParSpMatVec=0.0152	 speedup=2.6887
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0409	 ParSpMatVec=0.0145	 speedup=2.8326
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0409	 ParSpMatVec=0.0140	 speedup=2.9190

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0412	 ParSpMatVec=0.0401	 speedup=1.0276
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0412	 ParSpMatVec=0.0029	 speedup=14.2837
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0412	 ParSpMatVec=0.0026	 speedup=16.1542
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0412	 ParSpMatVec=0.0019	 speedup=22.2093
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0412	 ParSpMatVec=0.0019	 speedup=21.1917

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0068	 ParSpMatVec=0.0276	 speedup=0.2474
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0068	 ParSpMatVec=0.0033	 speedup=2.0843
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0068	 ParSpMatVec=0.0018	 speedup=3.7371
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0068	 ParSpMatVec=0.0025	 speedup=2.7839
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0068	 ParSpMatVec=0.0026	 speedup=2.6782

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0457	 ParSpMatVec=0.0446	 speedup=1.0258
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0457	 ParSpMatVec=0.0043	 speedup=10.5949
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0457	 ParSpMatVec=0.0023	 speedup=19.7311
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0457	 ParSpMatVec=0.0026	 speedup=17.5530
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0457	 ParSpMatVec=0.0023	 speedup=19.9156

INFO: ParSpMatVec tests passed

>>> End of log
