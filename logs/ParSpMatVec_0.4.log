>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.7
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.3
INFO: Installing URIParser v0.1.8
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-121-generic #170-Ubuntu SMP Wed Jun 14 09:04:33 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1139.12890625 MB free)
Uptime: 19500.0 sec
Load Avg:  0.923828125  0.96923828125  1.015625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz     916514 s       6293 s      85313 s     739733 s         18 s
#2  3500 MHz     645639 s        444 s      72888 s    1170654 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.9.1
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.7
 - Compat                        0.26.0
 - SHA                           0.3.3
 - URIParser                     0.1.8
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1239	 ParSpMatVec=0.0264	 speedup=4.7005
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1239	 ParSpMatVec=0.0095	 speedup=12.9759
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1239	 ParSpMatVec=0.0100	 speedup=12.4419
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1239	 ParSpMatVec=0.0069	 speedup=17.8606
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1239	 ParSpMatVec=0.0057	 speedup=21.8280
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1220	 ParSpMatVec=0.0402	 speedup=3.0377
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1220	 ParSpMatVec=0.0118	 speedup=10.3058
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1220	 ParSpMatVec=0.0155	 speedup=7.8546
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1220	 ParSpMatVec=0.0127	 speedup=9.6104
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1220	 ParSpMatVec=0.0101	 speedup=12.0658

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0517	 ParSpMatVec=0.0312	 speedup=1.6571
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0517	 ParSpMatVec=0.0137	 speedup=3.7768
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0517	 ParSpMatVec=0.0146	 speedup=3.5420
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0517	 ParSpMatVec=0.0138	 speedup=3.7326
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0517	 ParSpMatVec=0.0141	 speedup=3.6672

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0440	 ParSpMatVec=0.0400	 speedup=1.0986
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0440	 ParSpMatVec=0.0030	 speedup=14.5560
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0440	 ParSpMatVec=0.0032	 speedup=13.8293
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0440	 ParSpMatVec=0.0019	 speedup=23.6055
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0440	 ParSpMatVec=0.0017	 speedup=25.2522

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0083	 ParSpMatVec=0.0276	 speedup=0.2993
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0083	 ParSpMatVec=0.0034	 speedup=2.4022
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0083	 ParSpMatVec=0.0023	 speedup=3.5920
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0083	 ParSpMatVec=0.0021	 speedup=3.8695
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0083	 ParSpMatVec=0.0027	 speedup=3.0946

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0472	 ParSpMatVec=0.0472	 speedup=1.0014
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0472	 ParSpMatVec=0.0040	 speedup=11.9449
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0472	 ParSpMatVec=0.0028	 speedup=17.1025
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0472	 ParSpMatVec=0.0029	 speedup=16.3844
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0472	 ParSpMatVec=0.0030	 speedup=15.8954

INFO: ParSpMatVec tests passed

>>> End of log
