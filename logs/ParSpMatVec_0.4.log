>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.7
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.3
INFO: Installing URIParser v0.1.8
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-119-generic #166-Ubuntu SMP Wed May 3 12:18:55 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1199.609375 MB free)
Uptime: 20736.0 sec
Load Avg:  0.91455078125  0.96875  1.00244140625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz     999050 s       6668 s      90552 s     764932 s         39 s
#2  3500 MHz     705403 s        137 s      81018 s    1219156 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.9.1
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.7
 - Compat                        0.25.2
 - SHA                           0.3.3
 - URIParser                     0.1.8
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1257	 ParSpMatVec=0.0256	 speedup=4.9134
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1257	 ParSpMatVec=0.0087	 speedup=14.4301
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1257	 ParSpMatVec=0.0122	 speedup=10.2941
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1257	 ParSpMatVec=0.0083	 speedup=15.0779
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1257	 ParSpMatVec=0.0077	 speedup=16.3385
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0734	 ParSpMatVec=0.0264	 speedup=2.7790
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0734	 ParSpMatVec=0.0119	 speedup=6.1751
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0734	 ParSpMatVec=0.0146	 speedup=5.0360
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0734	 ParSpMatVec=0.0142	 speedup=5.1538
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0734	 ParSpMatVec=0.0166	 speedup=4.4117

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0445	 ParSpMatVec=0.0294	 speedup=1.5153
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0445	 ParSpMatVec=0.0133	 speedup=3.3538
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0445	 ParSpMatVec=0.0152	 speedup=2.9246
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0445	 ParSpMatVec=0.0133	 speedup=3.3381
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0445	 ParSpMatVec=0.0157	 speedup=2.8414

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0436	 ParSpMatVec=0.0354	 speedup=1.2346
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0436	 ParSpMatVec=0.0025	 speedup=17.4557
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0436	 ParSpMatVec=0.0048	 speedup=9.0292
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0436	 ParSpMatVec=0.0019	 speedup=22.4774
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0436	 ParSpMatVec=0.0374	 speedup=1.1677

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0065	 ParSpMatVec=0.0277	 speedup=0.2345
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0065	 ParSpMatVec=0.0036	 speedup=1.8244
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0065	 ParSpMatVec=0.0031	 speedup=2.0844
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0065	 ParSpMatVec=0.0020	 speedup=3.2306
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0065	 ParSpMatVec=0.0025	 speedup=2.6211

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0268	 ParSpMatVec=0.0286	 speedup=0.9388
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0268	 ParSpMatVec=0.0034	 speedup=7.9986
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0268	 ParSpMatVec=0.0024	 speedup=11.1140
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0268	 ParSpMatVec=0.0024	 speedup=11.1433
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0268	 ParSpMatVec=0.0020	 speedup=13.2085

INFO: ParSpMatVec tests passed

>>> End of log
