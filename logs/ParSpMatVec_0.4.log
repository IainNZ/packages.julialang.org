>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.7
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.2
INFO: Installing URIParser v0.1.8
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of ParSpMatVec
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-116-generic #163-Ubuntu SMP Fri Mar 31 14:13:22 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1201.6640625 MB free)
Uptime: 15654.0 sec
Load Avg:  0.9697265625  0.958984375  0.9599609375
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz     738874 s       5478 s      61381 s     599045 s         20 s
#2  3499 MHz     508378 s       1143 s      52384 s     955942 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.8.3
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.7
 - Compat                        0.22.0
 - SHA                           0.3.2
 - URIParser                     0.1.8
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1362	 ParSpMatVec=0.0265	 speedup=5.1369
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1362	 ParSpMatVec=0.0082	 speedup=16.6130
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1362	 ParSpMatVec=0.0099	 speedup=13.7158
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1362	 ParSpMatVec=0.0090	 speedup=15.1614
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1362	 ParSpMatVec=0.0101	 speedup=13.4277
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1174	 ParSpMatVec=0.0491	 speedup=2.3906
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1174	 ParSpMatVec=0.0130	 speedup=9.0116
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1174	 ParSpMatVec=0.0144	 speedup=8.1395
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1174	 ParSpMatVec=0.0125	 speedup=9.4041
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1174	 ParSpMatVec=0.0139	 speedup=8.4439

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0326	 ParSpMatVec=0.0278	 speedup=1.1724
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0326	 ParSpMatVec=0.0132	 speedup=2.4617
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0326	 ParSpMatVec=0.0153	 speedup=2.1313
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0326	 ParSpMatVec=0.0153	 speedup=2.1292
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0326	 ParSpMatVec=0.0142	 speedup=2.3023

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0406	 ParSpMatVec=0.0402	 speedup=1.0107
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0406	 ParSpMatVec=0.0023	 speedup=17.7611
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0406	 ParSpMatVec=0.0024	 speedup=17.2156
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0406	 ParSpMatVec=0.0015	 speedup=26.9548
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0406	 ParSpMatVec=0.0019	 speedup=21.0808

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0070	 ParSpMatVec=0.0261	 speedup=0.2696
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0070	 ParSpMatVec=0.0032	 speedup=2.2207
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0070	 ParSpMatVec=0.0016	 speedup=4.4015
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0070	 ParSpMatVec=0.0018	 speedup=3.8473
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0070	 ParSpMatVec=0.0022	 speedup=3.2711

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0285	 ParSpMatVec=0.0270	 speedup=1.0554
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0285	 ParSpMatVec=0.0029	 speedup=9.9281
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0285	 ParSpMatVec=0.0017	 speedup=16.3182
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0285	 ParSpMatVec=0.0025	 speedup=11.5248
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0285	 ParSpMatVec=0.0050	 speedup=5.7144

INFO: ParSpMatVec tests passed

>>> End of log
