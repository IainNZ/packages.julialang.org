>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.7
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.2
INFO: Installing URIParser v0.1.8
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of ParSpMatVec
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-119-generic #166-Ubuntu SMP Wed May 3 12:18:55 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1195.05859375 MB free)
Uptime: 20960.0 sec
Load Avg:  1.0029296875  0.9853515625  1.005859375
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz    1010399 s       3628 s      77625 s     789796 s         41 s
#2  3500 MHz     679512 s       3239 s      65897 s    1284074 s          1 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.9.1
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.7
 - Compat                        0.25.2
 - SHA                           0.3.2
 - URIParser                     0.1.8
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1302	 ParSpMatVec=0.0162	 speedup=8.0513
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1302	 ParSpMatVec=0.0091	 speedup=14.2624
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1302	 ParSpMatVec=0.0136	 speedup=9.5540
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1302	 ParSpMatVec=0.0087	 speedup=14.9474
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1302	 ParSpMatVec=0.0089	 speedup=14.6316
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0817	 ParSpMatVec=0.0368	 speedup=2.2204
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0817	 ParSpMatVec=0.0123	 speedup=6.6515
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0817	 ParSpMatVec=0.0142	 speedup=5.7381
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0817	 ParSpMatVec=0.0135	 speedup=6.0738
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0817	 ParSpMatVec=0.0138	 speedup=5.9124

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0502	 ParSpMatVec=0.0323	 speedup=1.5512
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0502	 ParSpMatVec=0.0139	 speedup=3.6132
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0502	 ParSpMatVec=0.0166	 speedup=3.0200
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0502	 ParSpMatVec=0.0136	 speedup=3.6813
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0502	 ParSpMatVec=0.0141	 speedup=3.5528

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0409	 ParSpMatVec=0.0360	 speedup=1.1346
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0409	 ParSpMatVec=0.0025	 speedup=16.6236
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0409	 ParSpMatVec=0.0024	 speedup=16.8003
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0409	 ParSpMatVec=0.0016	 speedup=26.1343
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0409	 ParSpMatVec=0.0021	 speedup=19.5598

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0070	 ParSpMatVec=0.0285	 speedup=0.2460
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0070	 ParSpMatVec=0.0042	 speedup=1.6709
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0070	 ParSpMatVec=0.0021	 speedup=3.2865
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0070	 ParSpMatVec=0.0043	 speedup=1.6375
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0070	 ParSpMatVec=0.0028	 speedup=2.5070

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0294	 ParSpMatVec=0.0297	 speedup=0.9885
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0294	 ParSpMatVec=0.0036	 speedup=8.2598
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0294	 ParSpMatVec=0.0023	 speedup=12.6164
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0294	 ParSpMatVec=0.0026	 speedup=11.2117
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0294	 ParSpMatVec=0.0023	 speedup=12.6304

INFO: ParSpMatVec tests passed

>>> End of log
