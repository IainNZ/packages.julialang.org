>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.7
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.3
INFO: Installing URIParser v0.1.8
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of ParSpMatVec
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-126-generic #175-Ubuntu SMP Thu Jul 20 17:33:56 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1175.484375 MB free)
Uptime: 22034.0 sec
Load Avg:  0.93505859375  0.9853515625  1.01513671875
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz    1040775 s       8603 s      76339 s     841347 s         45 s
#2  3500 MHz     737806 s        106 s      67116 s    1301588 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.9.1
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.7
 - Compat                        0.26.0
 - SHA                           0.3.3
 - URIParser                     0.1.8
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1102	 ParSpMatVec=0.0241	 speedup=4.5727
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1102	 ParSpMatVec=0.0105	 speedup=10.4648
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1102	 ParSpMatVec=0.0136	 speedup=8.1064
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1102	 ParSpMatVec=0.0131	 speedup=8.4459
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1102	 ParSpMatVec=0.0079	 speedup=13.9408
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1186	 ParSpMatVec=0.0403	 speedup=2.9411
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1186	 ParSpMatVec=0.0132	 speedup=8.9732
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1186	 ParSpMatVec=0.0152	 speedup=7.8035
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1186	 ParSpMatVec=0.0132	 speedup=8.9984
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1186	 ParSpMatVec=0.0141	 speedup=8.3979

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0352	 ParSpMatVec=0.0294	 speedup=1.1975
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0352	 ParSpMatVec=0.0138	 speedup=2.5434
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0352	 ParSpMatVec=0.0147	 speedup=2.3854
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0352	 ParSpMatVec=0.0129	 speedup=2.7242
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0352	 ParSpMatVec=0.0143	 speedup=2.4507

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0421	 ParSpMatVec=0.0418	 speedup=1.0088
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0421	 ParSpMatVec=0.0026	 speedup=16.2893
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0421	 ParSpMatVec=0.0017	 speedup=25.0914
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0421	 ParSpMatVec=0.0018	 speedup=23.0485
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0421	 ParSpMatVec=0.0017	 speedup=24.6767

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0075	 ParSpMatVec=0.0481	 speedup=0.1560
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0075	 ParSpMatVec=0.0041	 speedup=1.8409
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0075	 ParSpMatVec=0.0022	 speedup=3.3697
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0075	 ParSpMatVec=0.0030	 speedup=2.4931
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0075	 ParSpMatVec=0.0028	 speedup=2.6637

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0491	 ParSpMatVec=0.0494	 speedup=0.9926
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0491	 ParSpMatVec=0.0042	 speedup=11.6669
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0491	 ParSpMatVec=0.0015	 speedup=33.4436
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0491	 ParSpMatVec=0.0023	 speedup=21.0275
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0491	 ParSpMatVec=0.0024	 speedup=20.3316

INFO: ParSpMatVec tests passed

>>> End of log
