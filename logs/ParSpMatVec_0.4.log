>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.7
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.2
INFO: Installing URIParser v0.1.8
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-116-generic #163-Ubuntu SMP Fri Mar 31 14:13:22 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1207.2109375 MB free)
Uptime: 20031.0 sec
Load Avg:  1.02490234375  1.00244140625  1.00390625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz     957529 s       3325 s      80041 s     762741 s         42 s
#2  3499 MHz     678048 s       2763 s      69778 s    1193020 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.9.0
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.7
 - Compat                        0.23.0
 - SHA                           0.3.2
 - URIParser                     0.1.8
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1428	 ParSpMatVec=0.0270	 speedup=5.2796
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1428	 ParSpMatVec=0.0093	 speedup=15.2704
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1428	 ParSpMatVec=0.0094	 speedup=15.1307
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1428	 ParSpMatVec=0.0067	 speedup=21.4516
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1428	 ParSpMatVec=0.0061	 speedup=23.3998
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1418	 ParSpMatVec=0.0478	 speedup=2.9654
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1418	 ParSpMatVec=0.0125	 speedup=11.3731
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1418	 ParSpMatVec=0.0093	 speedup=15.1990
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1418	 ParSpMatVec=0.0095	 speedup=14.8886
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1418	 ParSpMatVec=0.0108	 speedup=13.1400

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0491	 ParSpMatVec=0.0310	 speedup=1.5853
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0491	 ParSpMatVec=0.0140	 speedup=3.5132
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0491	 ParSpMatVec=0.0147	 speedup=3.3460
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0491	 ParSpMatVec=0.0103	 speedup=4.7844
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0491	 ParSpMatVec=0.0113	 speedup=4.3621

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0433	 ParSpMatVec=0.0258	 speedup=1.6768
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0433	 ParSpMatVec=0.0025	 speedup=17.0027
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0433	 ParSpMatVec=0.0019	 speedup=22.5329
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0433	 ParSpMatVec=0.0020	 speedup=21.6192
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0433	 ParSpMatVec=0.0014	 speedup=30.4974

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0085	 ParSpMatVec=0.0490	 speedup=0.1739
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0085	 ParSpMatVec=0.0039	 speedup=2.1907
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0085	 ParSpMatVec=0.0050	 speedup=1.7048
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0085	 ParSpMatVec=0.0020	 speedup=4.2243
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0085	 ParSpMatVec=0.0022	 speedup=3.9453

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0499	 ParSpMatVec=0.0455	 speedup=1.0978
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0499	 ParSpMatVec=0.0040	 speedup=12.3339
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0499	 ParSpMatVec=0.0046	 speedup=10.7589
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0499	 ParSpMatVec=0.0056	 speedup=8.8577
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0499	 ParSpMatVec=0.0051	 speedup=9.8551

INFO: ParSpMatVec tests passed

>>> End of log
