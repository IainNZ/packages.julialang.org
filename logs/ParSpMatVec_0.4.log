>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.7
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.3
INFO: Installing URIParser v0.1.8
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-125-generic #174-Ubuntu SMP Mon Jul 10 18:51:24 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1188.76171875 MB free)
Uptime: 22048.0 sec
Load Avg:  1.0126953125  1.01220703125  1.03369140625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz    1091438 s        315 s      83027 s     792429 s         36 s
#2  3500 MHz     698578 s       6188 s      69743 s    1361524 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.9.1
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.7
 - Compat                        0.26.0
 - SHA                           0.3.3
 - URIParser                     0.1.8
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1251	 ParSpMatVec=0.0238	 speedup=5.2585
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1251	 ParSpMatVec=0.0096	 speedup=13.0068
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1251	 ParSpMatVec=0.0121	 speedup=10.3540
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1251	 ParSpMatVec=0.0113	 speedup=11.0584
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1251	 ParSpMatVec=0.0098	 speedup=12.8124
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1065	 ParSpMatVec=0.0379	 speedup=2.8074
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1065	 ParSpMatVec=0.0134	 speedup=7.9617
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1065	 ParSpMatVec=0.0157	 speedup=6.7986
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1065	 ParSpMatVec=0.0149	 speedup=7.1569
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1065	 ParSpMatVec=0.0151	 speedup=7.0310

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0432	 ParSpMatVec=0.0282	 speedup=1.5327
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0432	 ParSpMatVec=0.0132	 speedup=3.2625
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0432	 ParSpMatVec=0.0148	 speedup=2.9242
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0432	 ParSpMatVec=0.0148	 speedup=2.9139
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0432	 ParSpMatVec=0.0149	 speedup=2.8961

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0438	 ParSpMatVec=0.0356	 speedup=1.2314
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0438	 ParSpMatVec=0.0026	 speedup=16.6603
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0438	 ParSpMatVec=0.0023	 speedup=19.0430
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0438	 ParSpMatVec=0.0017	 speedup=26.2400
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0438	 ParSpMatVec=0.0014	 speedup=30.6977

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0092	 ParSpMatVec=0.0504	 speedup=0.1825
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0092	 ParSpMatVec=0.0049	 speedup=1.8688
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0092	 ParSpMatVec=0.0033	 speedup=2.7504
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0092	 ParSpMatVec=0.0023	 speedup=3.9218
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0092	 ParSpMatVec=0.0022	 speedup=4.1811

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0306	 ParSpMatVec=0.0293	 speedup=1.0445
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0306	 ParSpMatVec=0.0031	 speedup=9.8509
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0306	 ParSpMatVec=0.0078	 speedup=3.9231
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0306	 ParSpMatVec=0.0029	 speedup=10.5020
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0306	 ParSpMatVec=0.0030	 speedup=10.2431

INFO: ParSpMatVec tests passed

>>> End of log
