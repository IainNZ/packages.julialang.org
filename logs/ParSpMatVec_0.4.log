>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.7
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.3
INFO: Installing URIParser v0.1.8
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of ParSpMatVec
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-121-generic #170-Ubuntu SMP Wed Jun 14 09:04:33 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1187.6484375 MB free)
Uptime: 21560.0 sec
Load Avg:  1.03076171875  0.978515625  1.0078125
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz    1053279 s       6247 s      79216 s     799104 s         33 s
#2  3500 MHz     696306 s        617 s      63846 s    1334357 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.9.1
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.7
 - Compat                        0.26.0
 - SHA                           0.3.3
 - URIParser                     0.1.8
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1204	 ParSpMatVec=0.0280	 speedup=4.3062
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1204	 ParSpMatVec=0.0091	 speedup=13.1606
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1204	 ParSpMatVec=0.0121	 speedup=9.9153
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1204	 ParSpMatVec=0.0095	 speedup=12.6534
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1204	 ParSpMatVec=0.0065	 speedup=18.5282
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1014	 ParSpMatVec=0.0412	 speedup=2.4595
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1014	 ParSpMatVec=0.0134	 speedup=7.5621
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1014	 ParSpMatVec=0.0157	 speedup=6.4612
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1014	 ParSpMatVec=0.0244	 speedup=4.1518
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1014	 ParSpMatVec=0.0114	 speedup=8.8693

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0447	 ParSpMatVec=0.0303	 speedup=1.4784
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0447	 ParSpMatVec=0.0136	 speedup=3.2813
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0447	 ParSpMatVec=0.0160	 speedup=2.7980
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0447	 ParSpMatVec=0.0143	 speedup=3.1269
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0447	 ParSpMatVec=0.0143	 speedup=3.1213

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0471	 ParSpMatVec=0.0403	 speedup=1.1699
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0471	 ParSpMatVec=0.0029	 speedup=16.4749
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0471	 ParSpMatVec=0.0032	 speedup=14.7211
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0471	 ParSpMatVec=0.0023	 speedup=20.6130
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0471	 ParSpMatVec=0.0029	 speedup=16.0258

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0096	 ParSpMatVec=0.0427	 speedup=0.2253
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0096	 ParSpMatVec=0.0042	 speedup=2.2801
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0096	 ParSpMatVec=0.0040	 speedup=2.4174
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0096	 ParSpMatVec=0.0027	 speedup=3.5256
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0096	 ParSpMatVec=0.0022	 speedup=4.4683

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0446	 ParSpMatVec=0.0449	 speedup=0.9931
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0446	 ParSpMatVec=0.0042	 speedup=10.7086
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0446	 ParSpMatVec=0.0022	 speedup=20.2843
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0446	 ParSpMatVec=0.0027	 speedup=16.2895
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0446	 ParSpMatVec=0.0028	 speedup=16.0631

INFO: ParSpMatVec tests passed

>>> End of log
