>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.7
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.3
INFO: Installing URIParser v0.1.8
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-121-generic #170-Ubuntu SMP Wed Jun 14 09:04:33 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1167.59765625 MB free)
Uptime: 21794.0 sec
Load Avg:  0.9833984375  0.9853515625  1.0078125
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz    1084117 s       6168 s      93897 s     767247 s         34 s
#2  3500 MHz     690492 s        623 s      80112 s    1347727 s          2 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.9.1
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.7
 - Compat                        0.26.0
 - SHA                           0.3.3
 - URIParser                     0.1.8
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1349	 ParSpMatVec=0.0174	 speedup=7.7507
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1349	 ParSpMatVec=0.0087	 speedup=15.4499
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1349	 ParSpMatVec=0.0151	 speedup=8.9494
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1349	 ParSpMatVec=0.0117	 speedup=11.4893
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1349	 ParSpMatVec=0.0089	 speedup=15.1987
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1150	 ParSpMatVec=0.0439	 speedup=2.6229
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1150	 ParSpMatVec=0.0125	 speedup=9.2165
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1150	 ParSpMatVec=0.0131	 speedup=8.7895
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1150	 ParSpMatVec=0.0120	 speedup=9.5737
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1150	 ParSpMatVec=0.0128	 speedup=9.0199

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0316	 ParSpMatVec=0.0289	 speedup=1.0949
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0316	 ParSpMatVec=0.0142	 speedup=2.2351
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0316	 ParSpMatVec=0.0107	 speedup=2.9503
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0316	 ParSpMatVec=0.0166	 speedup=1.9078
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0316	 ParSpMatVec=0.0115	 speedup=2.7538

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0435	 ParSpMatVec=0.0407	 speedup=1.0696
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0435	 ParSpMatVec=0.0028	 speedup=15.3760
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0435	 ParSpMatVec=0.0030	 speedup=14.5142
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0435	 ParSpMatVec=0.0018	 speedup=24.4217
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0435	 ParSpMatVec=0.0020	 speedup=21.7826

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0091	 ParSpMatVec=0.0466	 speedup=0.1944
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0091	 ParSpMatVec=0.0039	 speedup=2.3498
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0091	 ParSpMatVec=0.0021	 speedup=4.2888
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0091	 ParSpMatVec=0.0047	 speedup=1.9462
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0091	 ParSpMatVec=0.0020	 speedup=4.4274

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0493	 ParSpMatVec=0.0499	 speedup=0.9886
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0493	 ParSpMatVec=0.0041	 speedup=12.0871
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0493	 ParSpMatVec=0.0037	 speedup=13.5053
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0493	 ParSpMatVec=0.0022	 speedup=22.3072
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0493	 ParSpMatVec=0.0031	 speedup=16.0977

INFO: ParSpMatVec tests passed

>>> End of log
