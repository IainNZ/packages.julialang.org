>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.7
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.3
INFO: Installing URIParser v0.1.8
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of ParSpMatVec
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-119-generic #166-Ubuntu SMP Wed May 3 12:18:55 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1187.83203125 MB free)
Uptime: 21177.0 sec
Load Avg:  1.01171875  0.98779296875  1.0185546875
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz     991126 s       2039 s      81900 s     833560 s         22 s
#2  3500 MHz     724012 s       5202 s      69287 s    1246368 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.9.1
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.7
 - Compat                        0.25.2
 - SHA                           0.3.3
 - URIParser                     0.1.8
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1328	 ParSpMatVec=0.0272	 speedup=4.8892
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1328	 ParSpMatVec=0.0098	 speedup=13.5558
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1328	 ParSpMatVec=0.0157	 speedup=8.4770
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1328	 ParSpMatVec=0.0114	 speedup=11.6976
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1328	 ParSpMatVec=0.0066	 speedup=20.1182
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1295	 ParSpMatVec=0.0452	 speedup=2.8645
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1295	 ParSpMatVec=0.0132	 speedup=9.7755
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1295	 ParSpMatVec=0.0162	 speedup=7.9846
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1295	 ParSpMatVec=0.0143	 speedup=9.0487
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1295	 ParSpMatVec=0.0164	 speedup=7.8766

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0423	 ParSpMatVec=0.0289	 speedup=1.4630
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0423	 ParSpMatVec=0.0134	 speedup=3.1637
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0423	 ParSpMatVec=0.0153	 speedup=2.7652
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0423	 ParSpMatVec=0.0162	 speedup=2.6080
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0423	 ParSpMatVec=0.0136	 speedup=3.1008

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0426	 ParSpMatVec=0.0374	 speedup=1.1392
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0426	 ParSpMatVec=0.0031	 speedup=13.7099
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0426	 ParSpMatVec=0.0025	 speedup=16.8056
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0426	 ParSpMatVec=0.0029	 speedup=14.4547
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0426	 ParSpMatVec=0.0020	 speedup=21.6829

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0084	 ParSpMatVec=0.0403	 speedup=0.2084
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0084	 ParSpMatVec=0.0053	 speedup=1.5750
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0084	 ParSpMatVec=0.0024	 speedup=3.5082
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0084	 ParSpMatVec=0.0035	 speedup=2.3782
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0084	 ParSpMatVec=0.0033	 speedup=2.5376

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0430	 ParSpMatVec=0.0450	 speedup=0.9553
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0430	 ParSpMatVec=0.0039	 speedup=10.9027
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0430	 ParSpMatVec=0.0026	 speedup=16.2757
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0430	 ParSpMatVec=0.0038	 speedup=11.3093
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0430	 ParSpMatVec=0.0070	 speedup=6.1191

INFO: ParSpMatVec tests passed

>>> End of log
