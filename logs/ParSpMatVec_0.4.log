>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.7
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.2
INFO: Installing URIParser v0.1.8
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of ParSpMatVec
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-119-generic #166-Ubuntu SMP Wed May 3 12:18:55 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1198.4140625 MB free)
Uptime: 20668.0 sec
Load Avg:  1.0859375  1.02099609375  0.97607421875
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz     987584 s       5318 s      77641 s     787024 s         43 s
#2  3500 MHz     684353 s       2255 s      65464 s    1252580 s          1 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.9.1
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.7
 - Compat                        0.25.2
 - SHA                           0.3.2
 - URIParser                     0.1.8
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1534	 ParSpMatVec=0.0627	 speedup=2.4485
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1534	 ParSpMatVec=0.0135	 speedup=11.3239
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1534	 ParSpMatVec=0.0111	 speedup=13.8710
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1534	 ParSpMatVec=0.0054	 speedup=28.5287
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1534	 ParSpMatVec=0.0143	 speedup=10.7198
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1374	 ParSpMatVec=0.0462	 speedup=2.9703
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1374	 ParSpMatVec=0.0146	 speedup=9.3843
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1374	 ParSpMatVec=0.0122	 speedup=11.3052
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1374	 ParSpMatVec=0.0107	 speedup=12.8614
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1374	 ParSpMatVec=0.0117	 speedup=11.7091

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0553	 ParSpMatVec=0.0321	 speedup=1.7222
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0553	 ParSpMatVec=0.0145	 speedup=3.8068
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0553	 ParSpMatVec=0.0096	 speedup=5.7336
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0553	 ParSpMatVec=0.0141	 speedup=3.9086
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0553	 ParSpMatVec=0.0180	 speedup=3.0771

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0458	 ParSpMatVec=0.0425	 speedup=1.0786
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0458	 ParSpMatVec=0.0033	 speedup=13.9230
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0458	 ParSpMatVec=0.0029	 speedup=15.7447
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0458	 ParSpMatVec=0.0043	 speedup=10.6242
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0458	 ParSpMatVec=0.0020	 speedup=23.2517

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0089	 ParSpMatVec=0.0463	 speedup=0.1917
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0089	 ParSpMatVec=0.0043	 speedup=2.0482
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0089	 ParSpMatVec=0.0023	 speedup=3.8795
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0089	 ParSpMatVec=0.0025	 speedup=3.5280
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0089	 ParSpMatVec=0.0023	 speedup=3.8096

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0515	 ParSpMatVec=0.0552	 speedup=0.9338
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0515	 ParSpMatVec=0.0048	 speedup=10.7280
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0515	 ParSpMatVec=0.0041	 speedup=12.6856
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0515	 ParSpMatVec=0.0023	 speedup=22.0176
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0515	 ParSpMatVec=0.0028	 speedup=18.5173

INFO: ParSpMatVec tests passed

>>> End of log
