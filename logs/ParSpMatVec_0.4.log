>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.7
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.3
INFO: Installing URIParser v0.1.8
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-128-generic #177-Ubuntu SMP Tue Aug 8 11:40:23 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1186.45703125 MB free)
Uptime: 22368.0 sec
Load Avg:  1.1279296875  1.08447265625  1.01904296875
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3501 MHz    1085964 s        838 s      81853 s     842351 s         35 s
#2  3501 MHz     779161 s       5869 s      68942 s    1301520 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.9.1
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.7
 - Compat                        0.26.0
 - SHA                           0.3.3
 - URIParser                     0.1.8
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1372	 ParSpMatVec=0.0262	 speedup=5.2256
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1372	 ParSpMatVec=0.0101	 speedup=13.5597
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1372	 ParSpMatVec=0.0156	 speedup=8.8183
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1372	 ParSpMatVec=0.0095	 speedup=14.5025
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1372	 ParSpMatVec=0.0104	 speedup=13.2041
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1341	 ParSpMatVec=0.0459	 speedup=2.9223
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1341	 ParSpMatVec=0.0138	 speedup=9.6977
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1341	 ParSpMatVec=0.0151	 speedup=8.8815
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1341	 ParSpMatVec=0.0124	 speedup=10.8420
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1341	 ParSpMatVec=0.0137	 speedup=9.7556

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0380	 ParSpMatVec=0.0311	 speedup=1.2206
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0380	 ParSpMatVec=0.0133	 speedup=2.8606
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0380	 ParSpMatVec=0.0151	 speedup=2.5093
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0380	 ParSpMatVec=0.0134	 speedup=2.8261
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0380	 ParSpMatVec=0.0145	 speedup=2.6285

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0380	 ParSpMatVec=0.0408	 speedup=0.9299
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0380	 ParSpMatVec=0.0030	 speedup=12.6199
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0380	 ParSpMatVec=0.0046	 speedup=8.2983
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0380	 ParSpMatVec=0.0056	 speedup=6.7424
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0380	 ParSpMatVec=0.0042	 speedup=9.1120

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0095	 ParSpMatVec=0.0466	 speedup=0.2032
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0095	 ParSpMatVec=0.0051	 speedup=1.8651
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0095	 ParSpMatVec=0.0021	 speedup=4.5142
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0095	 ParSpMatVec=0.0044	 speedup=2.1333
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0095	 ParSpMatVec=0.0027	 speedup=3.4602

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0305	 ParSpMatVec=0.0411	 speedup=0.7420
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0305	 ParSpMatVec=0.0035	 speedup=8.7049
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0305	 ParSpMatVec=0.0024	 speedup=12.5997
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0305	 ParSpMatVec=0.0050	 speedup=6.0904
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0305	 ParSpMatVec=0.0030	 speedup=10.1275

INFO: ParSpMatVec tests passed

>>> End of log
