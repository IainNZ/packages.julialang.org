>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.7
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.2
INFO: Installing URIParser v0.1.8
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-116-generic #163-Ubuntu SMP Fri Mar 31 14:13:22 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1195.62890625 MB free)
Uptime: 20305.0 sec
Load Avg:  0.935546875  0.95751953125  1.0078125
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3501 MHz     972103 s       1204 s      81414 s     774224 s         36 s
#2  3501 MHz     661262 s       5332 s      71965 s    1221694 s          1 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.9.0
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.7
 - Compat                        0.23.0
 - SHA                           0.3.2
 - URIParser                     0.1.8
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1190	 ParSpMatVec=0.0261	 speedup=4.5603
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1190	 ParSpMatVec=0.0098	 speedup=12.1946
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1190	 ParSpMatVec=0.0116	 speedup=10.2388
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1190	 ParSpMatVec=0.0191	 speedup=6.2264
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1190	 ParSpMatVec=0.0112	 speedup=10.5998
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0986	 ParSpMatVec=0.0407	 speedup=2.4260
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0986	 ParSpMatVec=0.0141	 speedup=6.9877
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0986	 ParSpMatVec=0.0146	 speedup=6.7360
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0986	 ParSpMatVec=0.0144	 speedup=6.8566
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0986	 ParSpMatVec=0.0137	 speedup=7.2006

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0347	 ParSpMatVec=0.0337	 speedup=1.0311
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0347	 ParSpMatVec=0.0129	 speedup=2.7004
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0347	 ParSpMatVec=0.0151	 speedup=2.3074
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0347	 ParSpMatVec=0.0126	 speedup=2.7670
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0347	 ParSpMatVec=0.0199	 speedup=1.7476

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0424	 ParSpMatVec=0.0337	 speedup=1.2559
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0424	 ParSpMatVec=0.0022	 speedup=19.1611
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0424	 ParSpMatVec=0.0038	 speedup=11.1909
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0424	 ParSpMatVec=0.0020	 speedup=21.1395
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0424	 ParSpMatVec=0.0015	 speedup=29.0230

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0096	 ParSpMatVec=0.0532	 speedup=0.1806
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0096	 ParSpMatVec=0.0040	 speedup=2.4109
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0096	 ParSpMatVec=0.0032	 speedup=2.9703
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0096	 ParSpMatVec=0.0058	 speedup=1.6505
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0096	 ParSpMatVec=0.0046	 speedup=2.0651

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0522	 ParSpMatVec=0.0505	 speedup=1.0326
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0522	 ParSpMatVec=0.0040	 speedup=13.0073
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0522	 ParSpMatVec=0.0023	 speedup=23.0632
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0522	 ParSpMatVec=0.0026	 speedup=20.1102
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0522	 ParSpMatVec=0.0027	 speedup=19.5376

INFO: ParSpMatVec tests passed

>>> End of log
