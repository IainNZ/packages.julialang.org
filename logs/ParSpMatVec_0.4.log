>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.7
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.3
INFO: Installing URIParser v0.1.8
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of ParSpMatVec
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-119-generic #166-Ubuntu SMP Wed May 3 12:18:55 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1193.9375 MB free)
Uptime: 21216.0 sec
Load Avg:  1.0693359375  1.03173828125  1.04541015625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz    1049327 s       5460 s      76963 s     774010 s         42 s
#2  3500 MHz     671184 s       2107 s      64761 s    1316037 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.9.1
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.7
 - Compat                        0.25.2
 - SHA                           0.3.3
 - URIParser                     0.1.8
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0797	 ParSpMatVec=0.0329	 speedup=2.4187
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0797	 ParSpMatVec=0.0083	 speedup=9.6093
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0797	 ParSpMatVec=0.0126	 speedup=6.3381
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0797	 ParSpMatVec=0.0092	 speedup=8.6255
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0797	 ParSpMatVec=0.0091	 speedup=8.7333
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1219	 ParSpMatVec=0.0412	 speedup=2.9559
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1219	 ParSpMatVec=0.0128	 speedup=9.4953
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1219	 ParSpMatVec=0.0153	 speedup=7.9401
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1219	 ParSpMatVec=0.0149	 speedup=8.1814
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1219	 ParSpMatVec=0.0147	 speedup=8.2716

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0483	 ParSpMatVec=0.0357	 speedup=1.3522
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0483	 ParSpMatVec=0.0103	 speedup=4.6723
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0483	 ParSpMatVec=0.0142	 speedup=3.3948
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0483	 ParSpMatVec=0.0249	 speedup=1.9409
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0483	 ParSpMatVec=0.0127	 speedup=3.8080

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0383	 ParSpMatVec=0.0392	 speedup=0.9749
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0383	 ParSpMatVec=0.0019	 speedup=19.9041
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0383	 ParSpMatVec=0.0086	 speedup=4.4245
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0383	 ParSpMatVec=0.0025	 speedup=15.3805
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0383	 ParSpMatVec=0.0043	 speedup=8.8314

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0155	 ParSpMatVec=0.0452	 speedup=0.3435
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0155	 ParSpMatVec=0.0041	 speedup=3.7771
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0155	 ParSpMatVec=0.0021	 speedup=7.5503
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0155	 ParSpMatVec=0.0040	 speedup=3.8600
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0155	 ParSpMatVec=0.0032	 speedup=4.7948

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0473	 ParSpMatVec=0.0655	 speedup=0.7218
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0473	 ParSpMatVec=0.0028	 speedup=17.0182
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0473	 ParSpMatVec=0.0050	 speedup=9.5123
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0473	 ParSpMatVec=0.0074	 speedup=6.4147
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0473	 ParSpMatVec=0.0029	 speedup=16.5115

INFO: ParSpMatVec tests passed

>>> End of log
