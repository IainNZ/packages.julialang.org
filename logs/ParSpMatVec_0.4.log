>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.7
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.2
INFO: Installing URIParser v0.1.8
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of ParSpMatVec
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-117-generic #164-Ubuntu SMP Fri Apr 7 11:05:26 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1192.41796875 MB free)
Uptime: 20913.0 sec
Load Avg:  0.9970703125  1.013671875  1.01220703125
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz    1001689 s       6689 s      77287 s     786440 s         58 s
#2  3499 MHz     665120 s       1130 s      67554 s    1296683 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.9.1
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.7
 - Compat                        0.25.1
 - SHA                           0.3.2
 - URIParser                     0.1.8
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1239	 ParSpMatVec=0.0197	 speedup=6.2748
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1239	 ParSpMatVec=0.0096	 speedup=12.9458
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1239	 ParSpMatVec=0.0136	 speedup=9.1007
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1239	 ParSpMatVec=0.0106	 speedup=11.7257
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1239	 ParSpMatVec=0.0139	 speedup=8.9344
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1108	 ParSpMatVec=0.0467	 speedup=2.3725
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1108	 ParSpMatVec=0.0120	 speedup=9.2029
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1108	 ParSpMatVec=0.0150	 speedup=7.3978
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1108	 ParSpMatVec=0.0145	 speedup=7.6625
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1108	 ParSpMatVec=0.0122	 speedup=9.0886

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0460	 ParSpMatVec=0.0328	 speedup=1.4017
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0460	 ParSpMatVec=0.0147	 speedup=3.1352
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0460	 ParSpMatVec=0.0162	 speedup=2.8459
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0460	 ParSpMatVec=0.0149	 speedup=3.0928
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0460	 ParSpMatVec=0.0135	 speedup=3.4081

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0440	 ParSpMatVec=0.0354	 speedup=1.2445
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0440	 ParSpMatVec=0.0027	 speedup=16.2301
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0440	 ParSpMatVec=0.0030	 speedup=14.6776
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0440	 ParSpMatVec=0.0038	 speedup=11.6571
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0440	 ParSpMatVec=0.0017	 speedup=26.2820

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0099	 ParSpMatVec=0.0455	 speedup=0.2171
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0099	 ParSpMatVec=0.0047	 speedup=2.0917
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0099	 ParSpMatVec=0.0024	 speedup=4.0565
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0099	 ParSpMatVec=0.0027	 speedup=3.6464
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0099	 ParSpMatVec=0.0019	 speedup=5.1252

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0517	 ParSpMatVec=0.0460	 speedup=1.1236
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0517	 ParSpMatVec=0.0037	 speedup=14.1569
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0517	 ParSpMatVec=0.0020	 speedup=25.3472
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0517	 ParSpMatVec=0.0020	 speedup=25.2499
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0517	 ParSpMatVec=0.0022	 speedup=24.0160

INFO: ParSpMatVec tests passed

>>> End of log
