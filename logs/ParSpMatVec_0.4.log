>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.7
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.2
INFO: Installing URIParser v0.1.8
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of ParSpMatVec
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-116-generic #163-Ubuntu SMP Fri Mar 31 14:13:22 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1196.50390625 MB free)
Uptime: 19720.0 sec
Load Avg:  0.9384765625  0.95654296875  1.00390625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz     945897 s       5558 s      86037 s     732621 s         38 s
#2  3500 MHz     652992 s       2640 s      77867 s    1157336 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.9.0
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.7
 - Compat                        0.23.0
 - SHA                           0.3.2
 - URIParser                     0.1.8
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1282	 ParSpMatVec=0.0256	 speedup=4.9973
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1282	 ParSpMatVec=0.0089	 speedup=14.3916
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1282	 ParSpMatVec=0.0120	 speedup=10.7173
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1282	 ParSpMatVec=0.0091	 speedup=14.0518
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1282	 ParSpMatVec=0.0088	 speedup=14.4984
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1234	 ParSpMatVec=0.0269	 speedup=4.5935
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1234	 ParSpMatVec=0.0126	 speedup=9.7957
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1234	 ParSpMatVec=0.0081	 speedup=15.2921
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1234	 ParSpMatVec=0.0102	 speedup=12.1097
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1234	 ParSpMatVec=0.0108	 speedup=11.4669

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0452	 ParSpMatVec=0.0304	 speedup=1.4874
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0452	 ParSpMatVec=0.0118	 speedup=3.8173
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0452	 ParSpMatVec=0.0109	 speedup=4.1634
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0452	 ParSpMatVec=0.0335	 speedup=1.3486
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0452	 ParSpMatVec=0.0126	 speedup=3.5979

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0504	 ParSpMatVec=0.0397	 speedup=1.2680
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0504	 ParSpMatVec=0.0021	 speedup=24.0225
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0504	 ParSpMatVec=0.0022	 speedup=22.9233
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0504	 ParSpMatVec=0.0013	 speedup=37.6705
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0504	 ParSpMatVec=0.0029	 speedup=17.6421

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0078	 ParSpMatVec=0.0490	 speedup=0.1586
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0078	 ParSpMatVec=0.0038	 speedup=2.0303
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0078	 ParSpMatVec=0.0023	 speedup=3.3699
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0078	 ParSpMatVec=0.0042	 speedup=1.8338
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0078	 ParSpMatVec=0.0060	 speedup=1.2839

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0474	 ParSpMatVec=0.0497	 speedup=0.9532
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0474	 ParSpMatVec=0.0048	 speedup=9.8656
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0474	 ParSpMatVec=0.0042	 speedup=11.2648
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0474	 ParSpMatVec=0.0066	 speedup=7.1513
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0474	 ParSpMatVec=0.0071	 speedup=6.6696

INFO: ParSpMatVec tests passed

>>> End of log
