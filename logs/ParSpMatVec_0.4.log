>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.7
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.3
INFO: Installing URIParser v0.1.8
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of ParSpMatVec
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-121-generic #170-Ubuntu SMP Wed Jun 14 09:04:33 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1187.53515625 MB free)
Uptime: 21524.0 sec
Load Avg:  1.0166015625  1.0146484375  1.04248046875
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz    1045555 s       1694 s      85042 s     804181 s         28 s
#2  3500 MHz     711438 s       4774 s      71483 s    1290403 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.9.1
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.7
 - Compat                        0.26.0
 - SHA                           0.3.3
 - URIParser                     0.1.8
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0794	 ParSpMatVec=0.0163	 speedup=4.8558
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0794	 ParSpMatVec=0.0090	 speedup=8.8330
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0794	 ParSpMatVec=0.0123	 speedup=6.4331
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0794	 ParSpMatVec=0.0103	 speedup=7.7411
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0794	 ParSpMatVec=0.0067	 speedup=11.7757
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1205	 ParSpMatVec=0.0438	 speedup=2.7551
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1205	 ParSpMatVec=0.0134	 speedup=9.0127
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1205	 ParSpMatVec=0.0160	 speedup=7.5474
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1205	 ParSpMatVec=0.0144	 speedup=8.3618
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1205	 ParSpMatVec=0.0150	 speedup=8.0483

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0313	 ParSpMatVec=0.0192	 speedup=1.6346
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0313	 ParSpMatVec=0.0117	 speedup=2.6746
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0313	 ParSpMatVec=0.0145	 speedup=2.1662
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0313	 ParSpMatVec=0.0124	 speedup=2.5296
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0313	 ParSpMatVec=0.0156	 speedup=2.0102

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0386	 ParSpMatVec=0.0359	 speedup=1.0765
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0386	 ParSpMatVec=0.0021	 speedup=18.1539
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0386	 ParSpMatVec=0.0022	 speedup=17.8208
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0386	 ParSpMatVec=0.0016	 speedup=23.5990
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0386	 ParSpMatVec=0.0016	 speedup=24.0582

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0091	 ParSpMatVec=0.0437	 speedup=0.2087
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0091	 ParSpMatVec=0.0039	 speedup=2.3639
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0091	 ParSpMatVec=0.0019	 speedup=4.8232
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0091	 ParSpMatVec=0.0028	 speedup=3.3013
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0091	 ParSpMatVec=0.0019	 speedup=4.7181

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0504	 ParSpMatVec=0.0463	 speedup=1.0869
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0504	 ParSpMatVec=0.0035	 speedup=14.2842
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0504	 ParSpMatVec=0.0022	 speedup=23.1539
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0504	 ParSpMatVec=0.0026	 speedup=19.6226
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0504	 ParSpMatVec=0.0027	 speedup=18.6514

INFO: ParSpMatVec tests passed

>>> End of log
