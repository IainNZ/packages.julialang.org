>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.7
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.3
INFO: Installing URIParser v0.1.8
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-119-generic #166-Ubuntu SMP Wed May 3 12:18:55 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1208.0703125 MB free)
Uptime: 21110.0 sec
Load Avg:  0.98681640625  1.01708984375  1.03466796875
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz    1044267 s        625 s      86257 s     766247 s         32 s
#2  3500 MHz     689844 s       6216 s      74944 s    1267867 s          1 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.9.1
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.7
 - Compat                        0.26.0
 - SHA                           0.3.3
 - URIParser                     0.1.8
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0754	 ParSpMatVec=0.0255	 speedup=2.9596
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0754	 ParSpMatVec=0.0096	 speedup=7.8652
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0754	 ParSpMatVec=0.0118	 speedup=6.3715
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0754	 ParSpMatVec=0.0100	 speedup=7.5508
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0754	 ParSpMatVec=0.0205	 speedup=3.6845
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0788	 ParSpMatVec=0.0259	 speedup=3.0387
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0788	 ParSpMatVec=0.0149	 speedup=5.2885
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0788	 ParSpMatVec=0.0141	 speedup=5.5869
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0788	 ParSpMatVec=0.0132	 speedup=5.9479
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0788	 ParSpMatVec=0.0155	 speedup=5.0755

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0423	 ParSpMatVec=0.0291	 speedup=1.4564
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0423	 ParSpMatVec=0.0141	 speedup=2.9980
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0423	 ParSpMatVec=0.0155	 speedup=2.7282
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0423	 ParSpMatVec=0.0142	 speedup=2.9845
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0423	 ParSpMatVec=0.0133	 speedup=3.1740

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0434	 ParSpMatVec=0.0412	 speedup=1.0553
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0434	 ParSpMatVec=0.0125	 speedup=3.4642
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0434	 ParSpMatVec=0.0029	 speedup=14.8494
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0434	 ParSpMatVec=0.0017	 speedup=25.0592
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0434	 ParSpMatVec=0.0019	 speedup=22.9435

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0092	 ParSpMatVec=0.0257	 speedup=0.3595
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0092	 ParSpMatVec=0.0031	 speedup=3.0020
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0092	 ParSpMatVec=0.0025	 speedup=3.6299
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0092	 ParSpMatVec=0.0022	 speedup=4.2542
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0092	 ParSpMatVec=0.0028	 speedup=3.2703

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0286	 ParSpMatVec=0.0285	 speedup=1.0042
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0286	 ParSpMatVec=0.0035	 speedup=8.1551
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0286	 ParSpMatVec=0.0014	 speedup=20.7486
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0286	 ParSpMatVec=0.0014	 speedup=19.9451
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0286	 ParSpMatVec=0.0030	 speedup=9.4581

INFO: ParSpMatVec tests passed

>>> End of log
