>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.7
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.3
INFO: Installing URIParser v0.1.8
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of ParSpMatVec
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-121-generic #170-Ubuntu SMP Wed Jun 14 09:04:33 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1159.67578125 MB free)
Uptime: 21524.0 sec
Load Avg:  0.88427734375  0.9609375  0.97900390625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3502 MHz    1037004 s       2016 s      88053 s     808747 s         40 s
#2  3502 MHz     709887 s       4414 s      78126 s    1288324 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.9.1
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.7
 - Compat                        0.26.0
 - SHA                           0.3.3
 - URIParser                     0.1.8
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1343	 ParSpMatVec=0.0239	 speedup=5.6119
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1343	 ParSpMatVec=0.0104	 speedup=12.8794
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1343	 ParSpMatVec=0.0121	 speedup=11.1436
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1343	 ParSpMatVec=0.0106	 speedup=12.6318
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1343	 ParSpMatVec=0.0097	 speedup=13.8054
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0740	 ParSpMatVec=0.0258	 speedup=2.8699
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0740	 ParSpMatVec=0.0165	 speedup=4.4798
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0740	 ParSpMatVec=0.0123	 speedup=6.0044
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0740	 ParSpMatVec=0.0133	 speedup=5.5488
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0740	 ParSpMatVec=0.0129	 speedup=5.7221

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0377	 ParSpMatVec=0.0203	 speedup=1.8550
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0377	 ParSpMatVec=0.0141	 speedup=2.6724
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0377	 ParSpMatVec=0.0158	 speedup=2.3898
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0377	 ParSpMatVec=0.0147	 speedup=2.5603
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0377	 ParSpMatVec=0.0163	 speedup=2.3221

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0424	 ParSpMatVec=0.0408	 speedup=1.0377
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0424	 ParSpMatVec=0.0031	 speedup=13.8395
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0424	 ParSpMatVec=0.0023	 speedup=18.7376
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0424	 ParSpMatVec=0.0022	 speedup=19.2215
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0424	 ParSpMatVec=0.0024	 speedup=17.6137

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0080	 ParSpMatVec=0.0259	 speedup=0.3091
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0080	 ParSpMatVec=0.0041	 speedup=1.9401
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0080	 ParSpMatVec=0.0017	 speedup=4.7413
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0080	 ParSpMatVec=0.0024	 speedup=3.2673
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0080	 ParSpMatVec=0.0037	 speedup=2.1375

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0474	 ParSpMatVec=0.0519	 speedup=0.9133
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0474	 ParSpMatVec=0.0034	 speedup=14.1453
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0474	 ParSpMatVec=0.0022	 speedup=21.2540
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0474	 ParSpMatVec=0.0024	 speedup=19.9082
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0474	 ParSpMatVec=0.0024	 speedup=19.8830

INFO: ParSpMatVec tests passed

>>> End of log
