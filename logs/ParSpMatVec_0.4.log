>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.7
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.3
INFO: Installing URIParser v0.1.8
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-132-generic #181-Ubuntu SMP Wed Sep 13 13:25:03 UTC 2017 x86_64 x86_64
Memory: 2.93927001953125 GB (1182.9375 MB free)
Uptime: 21605.0 sec
Load Avg:  1.0029296875  1.01318359375  1.02685546875
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3508 MHz    1002585 s       2584 s      82723 s     849271 s         13 s
#2  3508 MHz     726789 s       5636 s      69057 s    1292279 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.9.1
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.7
 - Compat                        0.26.0
 - SHA                           0.3.3
 - URIParser                     0.1.8
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0787	 ParSpMatVec=0.0255	 speedup=3.0820
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0787	 ParSpMatVec=0.0080	 speedup=9.7758
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0787	 ParSpMatVec=0.0117	 speedup=6.7120
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0787	 ParSpMatVec=0.0087	 speedup=9.0081
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0787	 ParSpMatVec=0.0101	 speedup=7.8106
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1109	 ParSpMatVec=0.0382	 speedup=2.9014
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1109	 ParSpMatVec=0.0139	 speedup=7.9845
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1109	 ParSpMatVec=0.0080	 speedup=13.8966
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1109	 ParSpMatVec=0.0092	 speedup=11.9985
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1109	 ParSpMatVec=0.0118	 speedup=9.3821

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0442	 ParSpMatVec=0.0305	 speedup=1.4474
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0442	 ParSpMatVec=0.0150	 speedup=2.9364
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0442	 ParSpMatVec=0.0089	 speedup=4.9609
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0442	 ParSpMatVec=0.0101	 speedup=4.3851
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0442	 ParSpMatVec=0.0113	 speedup=3.9083

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0364	 ParSpMatVec=0.0262	 speedup=1.3891
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0364	 ParSpMatVec=0.0024	 speedup=15.0526
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0364	 ParSpMatVec=0.0015	 speedup=24.9417
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0364	 ParSpMatVec=0.0017	 speedup=21.1980
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0364	 ParSpMatVec=0.0023	 speedup=15.9439

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0077	 ParSpMatVec=0.0261	 speedup=0.2951
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0077	 ParSpMatVec=0.0044	 speedup=1.7589
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0077	 ParSpMatVec=0.0023	 speedup=3.3501
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0077	 ParSpMatVec=0.0028	 speedup=2.7129
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0077	 ParSpMatVec=0.0032	 speedup=2.4066

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0506	 ParSpMatVec=0.0542	 speedup=0.9338
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0506	 ParSpMatVec=0.0037	 speedup=13.6630
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0506	 ParSpMatVec=0.0030	 speedup=17.1577
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0506	 ParSpMatVec=0.0028	 speedup=18.3147
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0506	 ParSpMatVec=0.0027	 speedup=18.7631

INFO: ParSpMatVec tests passed

>>> End of log
