>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.7
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.2
INFO: Installing URIParser v0.1.8
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of ParSpMatVec
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-117-generic #164-Ubuntu SMP Fri Apr 7 11:05:26 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1206.76171875 MB free)
Uptime: 19724.0 sec
Load Avg:  1.05419921875  1.001953125  1.0078125
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz     946748 s       6456 s      78569 s     741135 s         38 s
#2  3500 MHz     680258 s         79 s      67715 s    1153478 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.9.1
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.7
 - Compat                        0.24.0
 - SHA                           0.3.2
 - URIParser                     0.1.8
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1293	 ParSpMatVec=0.0275	 speedup=4.7056
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1293	 ParSpMatVec=0.0102	 speedup=12.7276
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1293	 ParSpMatVec=0.0269	 speedup=4.8055
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1293	 ParSpMatVec=0.0112	 speedup=11.5287
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1293	 ParSpMatVec=0.0080	 speedup=16.0654
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1311	 ParSpMatVec=0.0439	 speedup=2.9850
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1311	 ParSpMatVec=0.0142	 speedup=9.2127
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1311	 ParSpMatVec=0.0160	 speedup=8.2030
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1311	 ParSpMatVec=0.0146	 speedup=8.9572
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1311	 ParSpMatVec=0.0134	 speedup=9.7547

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0462	 ParSpMatVec=0.0311	 speedup=1.4870
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0462	 ParSpMatVec=0.0139	 speedup=3.3293
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0462	 ParSpMatVec=0.0145	 speedup=3.1913
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0462	 ParSpMatVec=0.0242	 speedup=1.9063
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0462	 ParSpMatVec=0.0184	 speedup=2.5096

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0481	 ParSpMatVec=0.0429	 speedup=1.1213
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0481	 ParSpMatVec=0.0027	 speedup=18.0442
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0481	 ParSpMatVec=0.0031	 speedup=15.6274
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0481	 ParSpMatVec=0.0022	 speedup=21.9232
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0481	 ParSpMatVec=0.0026	 speedup=18.7209

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0087	 ParSpMatVec=0.0492	 speedup=0.1764
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0087	 ParSpMatVec=0.0036	 speedup=2.4060
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0087	 ParSpMatVec=0.0024	 speedup=3.5766
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0087	 ParSpMatVec=0.0038	 speedup=2.3087
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0087	 ParSpMatVec=0.0117	 speedup=0.7448

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0485	 ParSpMatVec=0.0497	 speedup=0.9758
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0485	 ParSpMatVec=0.0042	 speedup=11.6672
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0485	 ParSpMatVec=0.0023	 speedup=21.1651
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0485	 ParSpMatVec=0.0046	 speedup=10.5859
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0485	 ParSpMatVec=0.0033	 speedup=14.8474

INFO: ParSpMatVec tests passed

>>> End of log
