>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.7
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.3
INFO: Installing URIParser v0.1.8
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of ParSpMatVec
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-121-generic #170-Ubuntu SMP Wed Jun 14 09:04:33 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1142.6171875 MB free)
Uptime: 21596.0 sec
Load Avg:  0.97021484375  1.0390625  1.0400390625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz    1052939 s       6733 s      84834 s     795088 s         21 s
#2  3499 MHz     717093 s        100 s      73417 s    1303359 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.9.1
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.7
 - Compat                        0.26.0
 - SHA                           0.3.3
 - URIParser                     0.1.8
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1224	 ParSpMatVec=0.0255	 speedup=4.7995
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1224	 ParSpMatVec=0.0102	 speedup=12.0445
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1224	 ParSpMatVec=0.0129	 speedup=9.4541
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1224	 ParSpMatVec=0.0115	 speedup=10.6147
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1224	 ParSpMatVec=0.0064	 speedup=19.1260
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0767	 ParSpMatVec=0.0270	 speedup=2.8436
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0767	 ParSpMatVec=0.0130	 speedup=5.9098
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0767	 ParSpMatVec=0.0144	 speedup=5.3407
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0767	 ParSpMatVec=0.0121	 speedup=6.3415
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0767	 ParSpMatVec=0.0131	 speedup=5.8372

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0430	 ParSpMatVec=0.0299	 speedup=1.4360
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0430	 ParSpMatVec=0.0142	 speedup=3.0222
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0430	 ParSpMatVec=0.0153	 speedup=2.8111
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0430	 ParSpMatVec=0.0131	 speedup=3.2890
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0430	 ParSpMatVec=0.0130	 speedup=3.3160

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0416	 ParSpMatVec=0.0384	 speedup=1.0852
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0416	 ParSpMatVec=0.0018	 speedup=23.3292
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0416	 ParSpMatVec=0.0025	 speedup=16.5854
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0416	 ParSpMatVec=0.0014	 speedup=29.0597
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0416	 ParSpMatVec=0.0017	 speedup=24.3164

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0089	 ParSpMatVec=0.0450	 speedup=0.1984
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0089	 ParSpMatVec=0.0036	 speedup=2.4712
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0089	 ParSpMatVec=0.0015	 speedup=5.8209
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0089	 ParSpMatVec=0.0018	 speedup=5.0854
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0089	 ParSpMatVec=0.0055	 speedup=1.6342

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0485	 ParSpMatVec=0.0481	 speedup=1.0097
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0485	 ParSpMatVec=0.0046	 speedup=10.5652
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0485	 ParSpMatVec=0.0032	 speedup=15.3904
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0485	 ParSpMatVec=0.0024	 speedup=20.4617
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0485	 ParSpMatVec=0.0023	 speedup=21.2146

INFO: ParSpMatVec tests passed

>>> End of log
