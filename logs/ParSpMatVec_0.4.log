>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.7
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.3
INFO: Installing URIParser v0.1.8
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of ParSpMatVec
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-128-generic #177-Ubuntu SMP Tue Aug 8 11:40:23 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1139.5234375 MB free)
Uptime: 22416.0 sec
Load Avg:  0.98046875  0.9931640625  1.029296875
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz    1095755 s       1280 s      89098 s     839375 s         42 s
#2  3500 MHz     737812 s       5120 s      77473 s    1347199 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.9.1
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.7
 - Compat                        0.26.0
 - SHA                           0.3.3
 - URIParser                     0.1.8
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0879	 ParSpMatVec=0.0278	 speedup=3.1597
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0879	 ParSpMatVec=0.0092	 speedup=9.5154
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0879	 ParSpMatVec=0.0136	 speedup=6.4441
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0879	 ParSpMatVec=0.0100	 speedup=8.8057
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0879	 ParSpMatVec=0.0071	 speedup=12.4211
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1198	 ParSpMatVec=0.0566	 speedup=2.1155
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1198	 ParSpMatVec=0.0122	 speedup=9.7900
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1198	 ParSpMatVec=0.0139	 speedup=8.6341
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1198	 ParSpMatVec=0.0245	 speedup=4.8938
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1198	 ParSpMatVec=0.0173	 speedup=6.9343

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0477	 ParSpMatVec=0.0298	 speedup=1.5990
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0477	 ParSpMatVec=0.0151	 speedup=3.1581
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0477	 ParSpMatVec=0.0146	 speedup=3.2723
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0477	 ParSpMatVec=0.0214	 speedup=2.2334
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0477	 ParSpMatVec=0.0103	 speedup=4.6176

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0468	 ParSpMatVec=0.0408	 speedup=1.1486
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0468	 ParSpMatVec=0.0021	 speedup=22.5654
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0468	 ParSpMatVec=0.0023	 speedup=20.4501
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0468	 ParSpMatVec=0.0177	 speedup=2.6431
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0468	 ParSpMatVec=0.0145	 speedup=3.2224

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0084	 ParSpMatVec=0.0440	 speedup=0.1911
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0084	 ParSpMatVec=0.0033	 speedup=2.5496
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0084	 ParSpMatVec=0.0035	 speedup=2.4290
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0084	 ParSpMatVec=0.0043	 speedup=1.9524
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0084	 ParSpMatVec=0.0050	 speedup=1.6899

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0472	 ParSpMatVec=0.0334	 speedup=1.4157
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0472	 ParSpMatVec=0.0063	 speedup=7.5502
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0472	 ParSpMatVec=0.0021	 speedup=22.2828
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0472	 ParSpMatVec=0.0023	 speedup=20.4841
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0472	 ParSpMatVec=0.0024	 speedup=19.6631

INFO: ParSpMatVec tests passed

>>> End of log
