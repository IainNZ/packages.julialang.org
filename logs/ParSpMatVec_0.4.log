>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.7
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.3
INFO: Installing URIParser v0.1.8
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-121-generic #170-Ubuntu SMP Wed Jun 14 09:04:33 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1163.78125 MB free)
Uptime: 21440.0 sec
Load Avg:  0.9970703125  1.0029296875  1.03466796875
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3503 MHz    1047672 s       1548 s      86142 s     794250 s         30 s
#2  3503 MHz     731045 s       6738 s      72640 s    1268810 s          1 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.9.1
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.7
 - Compat                        0.26.0
 - SHA                           0.3.3
 - URIParser                     0.1.8
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1179	 ParSpMatVec=0.0171	 speedup=6.8827
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1179	 ParSpMatVec=0.0071	 speedup=16.6849
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1179	 ParSpMatVec=0.0114	 speedup=10.3848
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1179	 ParSpMatVec=0.0076	 speedup=15.4432
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1179	 ParSpMatVec=0.0087	 speedup=13.6062
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0812	 ParSpMatVec=0.0254	 speedup=3.1909
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0812	 ParSpMatVec=0.0140	 speedup=5.8027
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0812	 ParSpMatVec=0.0215	 speedup=3.7747
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0812	 ParSpMatVec=0.0150	 speedup=5.4046
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0812	 ParSpMatVec=0.0135	 speedup=6.0217

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0359	 ParSpMatVec=0.0199	 speedup=1.8059
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0359	 ParSpMatVec=0.0119	 speedup=3.0148
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0359	 ParSpMatVec=0.0124	 speedup=2.8922
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0359	 ParSpMatVec=0.0100	 speedup=3.5786
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0359	 ParSpMatVec=0.0113	 speedup=3.1820

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0284	 ParSpMatVec=0.0267	 speedup=1.0634
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0284	 ParSpMatVec=0.0024	 speedup=11.7712
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0284	 ParSpMatVec=0.0026	 speedup=10.8610
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0284	 ParSpMatVec=0.0025	 speedup=11.3965
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0284	 ParSpMatVec=0.0016	 speedup=17.3078

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0094	 ParSpMatVec=0.0441	 speedup=0.2122
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0094	 ParSpMatVec=0.0038	 speedup=2.4517
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0094	 ParSpMatVec=0.0018	 speedup=5.1709
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0094	 ParSpMatVec=0.0023	 speedup=4.1342
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0094	 ParSpMatVec=0.0032	 speedup=2.9373

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0467	 ParSpMatVec=0.0513	 speedup=0.9104
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0467	 ParSpMatVec=0.0040	 speedup=11.7225
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0467	 ParSpMatVec=0.0020	 speedup=23.7665
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0467	 ParSpMatVec=0.0026	 speedup=17.9823
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0467	 ParSpMatVec=0.0031	 speedup=14.8820

INFO: ParSpMatVec tests passed

>>> End of log
