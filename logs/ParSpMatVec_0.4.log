>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.7
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.3
INFO: Installing URIParser v0.1.8
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-121-generic #170-Ubuntu SMP Wed Jun 14 09:04:33 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1156.4453125 MB free)
Uptime: 21800.0 sec
Load Avg:  0.9296875  0.9658203125  0.95556640625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz    1076113 s       5053 s      85535 s     791198 s         38 s
#2  3500 MHz     684937 s       1763 s      74426 s    1341714 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.9.1
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.7
 - Compat                        0.26.0
 - SHA                           0.3.3
 - URIParser                     0.1.8
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1399	 ParSpMatVec=0.0271	 speedup=5.1586
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1399	 ParSpMatVec=0.0089	 speedup=15.8005
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1399	 ParSpMatVec=0.0091	 speedup=15.4130
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1399	 ParSpMatVec=0.0130	 speedup=10.7709
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1399	 ParSpMatVec=0.0094	 speedup=14.9411
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0703	 ParSpMatVec=0.0330	 speedup=2.1303
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0703	 ParSpMatVec=0.0116	 speedup=6.0371
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0703	 ParSpMatVec=0.0133	 speedup=5.2718
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0703	 ParSpMatVec=0.0150	 speedup=4.6784
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0703	 ParSpMatVec=0.0160	 speedup=4.3959

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0421	 ParSpMatVec=0.0311	 speedup=1.3553
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0421	 ParSpMatVec=0.0131	 speedup=3.2186
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0421	 ParSpMatVec=0.0152	 speedup=2.7674
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0421	 ParSpMatVec=0.0127	 speedup=3.3137
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0421	 ParSpMatVec=0.0101	 speedup=4.1751

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0314	 ParSpMatVec=0.0233	 speedup=1.3461
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0314	 ParSpMatVec=0.0018	 speedup=17.7982
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0314	 ParSpMatVec=0.0014	 speedup=22.5094
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0314	 ParSpMatVec=0.0011	 speedup=29.8235
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0314	 ParSpMatVec=0.0009	 speedup=34.2020

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0070	 ParSpMatVec=0.0266	 speedup=0.2625
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0070	 ParSpMatVec=0.0029	 speedup=2.3682
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0070	 ParSpMatVec=0.0029	 speedup=2.4268
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0070	 ParSpMatVec=0.0018	 speedup=3.7819
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0070	 ParSpMatVec=0.0020	 speedup=3.5375

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0410	 ParSpMatVec=0.0410	 speedup=1.0000
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0410	 ParSpMatVec=0.0032	 speedup=12.9930
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0410	 ParSpMatVec=0.0021	 speedup=19.4390
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0410	 ParSpMatVec=0.0020	 speedup=20.2291
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0410	 ParSpMatVec=0.0018	 speedup=22.6691

INFO: ParSpMatVec tests passed

>>> End of log
