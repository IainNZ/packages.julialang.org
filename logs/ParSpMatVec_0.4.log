>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.7
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.3
INFO: Installing URIParser v0.1.8
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of ParSpMatVec
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-119-generic #166-Ubuntu SMP Wed May 3 12:18:55 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1188.10546875 MB free)
Uptime: 23625.0 sec
Load Avg:  0.955078125  0.9931640625  1.029296875
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz    1051846 s       4703 s      87535 s    1002946 s         27 s
#2  3500 MHz     664272 s       2399 s      76546 s    1547428 s          2 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.9.1
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.7
 - Compat                        0.25.2
 - SHA                           0.3.3
 - URIParser                     0.1.8
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0882	 ParSpMatVec=0.0165	 speedup=5.3476
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0882	 ParSpMatVec=0.0105	 speedup=8.3707
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0882	 ParSpMatVec=0.0111	 speedup=7.9530
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0882	 ParSpMatVec=0.0088	 speedup=10.0048
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0882	 ParSpMatVec=0.0085	 speedup=10.3429
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1014	 ParSpMatVec=0.0284	 speedup=3.5664
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1014	 ParSpMatVec=0.0152	 speedup=6.6747
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1014	 ParSpMatVec=0.0144	 speedup=7.0594
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1014	 ParSpMatVec=0.0132	 speedup=7.7099
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1014	 ParSpMatVec=0.0142	 speedup=7.1406

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0451	 ParSpMatVec=0.0273	 speedup=1.6526
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0451	 ParSpMatVec=0.0131	 speedup=3.4326
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0451	 ParSpMatVec=0.0145	 speedup=3.1123
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0451	 ParSpMatVec=0.0135	 speedup=3.3511
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0451	 ParSpMatVec=0.0138	 speedup=3.2789

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0386	 ParSpMatVec=0.0420	 speedup=0.9192
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0386	 ParSpMatVec=0.0028	 speedup=14.0242
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0386	 ParSpMatVec=0.0038	 speedup=10.0441
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0386	 ParSpMatVec=0.0020	 speedup=18.8621
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0386	 ParSpMatVec=0.0018	 speedup=21.5029

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0085	 ParSpMatVec=0.0448	 speedup=0.1885
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0085	 ParSpMatVec=0.0037	 speedup=2.3047
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0085	 ParSpMatVec=0.0023	 speedup=3.7248
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0085	 ParSpMatVec=0.0039	 speedup=2.1926
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0085	 ParSpMatVec=0.0027	 speedup=3.1365

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0309	 ParSpMatVec=0.0292	 speedup=1.0584
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0309	 ParSpMatVec=0.0032	 speedup=9.6082
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0309	 ParSpMatVec=0.0021	 speedup=14.5828
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0309	 ParSpMatVec=0.0021	 speedup=14.7267
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0309	 ParSpMatVec=0.0023	 speedup=13.6540

INFO: ParSpMatVec tests passed

>>> End of log
