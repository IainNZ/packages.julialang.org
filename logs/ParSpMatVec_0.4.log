>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.7
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.3
INFO: Installing URIParser v0.1.8
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of ParSpMatVec
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-121-generic #170-Ubuntu SMP Wed Jun 14 09:04:33 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1165.52734375 MB free)
Uptime: 21205.0 sec
Load Avg:  0.9970703125  0.97021484375  0.95458984375
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz    1036370 s       5290 s      81954 s     787373 s         32 s
#2  3500 MHz     716469 s       2184 s      69882 s    1269788 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.9.1
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.7
 - Compat                        0.26.0
 - SHA                           0.3.3
 - URIParser                     0.1.8
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1246	 ParSpMatVec=0.0164	 speedup=7.5773
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1246	 ParSpMatVec=0.0088	 speedup=14.1153
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1246	 ParSpMatVec=0.0128	 speedup=9.7694
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1246	 ParSpMatVec=0.0084	 speedup=14.8374
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1246	 ParSpMatVec=0.0134	 speedup=9.2891
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1192	 ParSpMatVec=0.0264	 speedup=4.5148
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1192	 ParSpMatVec=0.0129	 speedup=9.2627
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1192	 ParSpMatVec=0.0134	 speedup=8.8929
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1192	 ParSpMatVec=0.0134	 speedup=8.9063
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1192	 ParSpMatVec=0.0147	 speedup=8.0905

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0447	 ParSpMatVec=0.0287	 speedup=1.5576
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0447	 ParSpMatVec=0.0125	 speedup=3.5618
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0447	 ParSpMatVec=0.0139	 speedup=3.2089
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0447	 ParSpMatVec=0.0138	 speedup=3.2350
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0447	 ParSpMatVec=0.0138	 speedup=3.2316

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0423	 ParSpMatVec=0.0399	 speedup=1.0625
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0423	 ParSpMatVec=0.0024	 speedup=17.6664
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0423	 ParSpMatVec=0.0023	 speedup=18.0871
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0423	 ParSpMatVec=0.0082	 speedup=5.1665
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0423	 ParSpMatVec=0.0101	 speedup=4.2014

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0090	 ParSpMatVec=0.0466	 speedup=0.1931
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0090	 ParSpMatVec=0.0038	 speedup=2.3674
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0090	 ParSpMatVec=0.0020	 speedup=4.4149
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0090	 ParSpMatVec=0.0026	 speedup=3.5037
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0090	 ParSpMatVec=0.0021	 speedup=4.1976

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0454	 ParSpMatVec=0.0470	 speedup=0.9660
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0454	 ParSpMatVec=0.0038	 speedup=12.0953
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0454	 ParSpMatVec=0.0021	 speedup=22.0439
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0454	 ParSpMatVec=0.0030	 speedup=14.9174
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0454	 ParSpMatVec=0.0033	 speedup=13.6653

INFO: ParSpMatVec tests passed

>>> End of log
