>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.7
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.3
INFO: Installing URIParser v0.1.8
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of ParSpMatVec
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-126-generic #175-Ubuntu SMP Thu Jul 20 17:33:56 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1146.76953125 MB free)
Uptime: 22443.0 sec
Load Avg:  1.01953125  0.9912109375  0.95458984375
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz    1039510 s       8230 s      84251 s     895555 s         25 s
#2  3500 MHz     733682 s         42 s      71720 s    1356717 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.9.1
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.7
 - Compat                        0.26.0
 - SHA                           0.3.3
 - URIParser                     0.1.8
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0888	 ParSpMatVec=0.0160	 speedup=5.5514
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0888	 ParSpMatVec=0.0090	 speedup=9.8164
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0888	 ParSpMatVec=0.0124	 speedup=7.1515
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0888	 ParSpMatVec=0.0127	 speedup=6.9723
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0888	 ParSpMatVec=0.0102	 speedup=8.7270
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0708	 ParSpMatVec=0.0255	 speedup=2.7753
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0708	 ParSpMatVec=0.0128	 speedup=5.5256
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0708	 ParSpMatVec=0.0125	 speedup=5.6699
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0708	 ParSpMatVec=0.0132	 speedup=5.3678
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0708	 ParSpMatVec=0.0142	 speedup=4.9996

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0275	 ParSpMatVec=0.0196	 speedup=1.4046
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0275	 ParSpMatVec=0.0175	 speedup=1.5771
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0275	 ParSpMatVec=0.0159	 speedup=1.7367
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0275	 ParSpMatVec=0.0139	 speedup=1.9774
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0275	 ParSpMatVec=0.0098	 speedup=2.8008

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0272	 ParSpMatVec=0.0262	 speedup=1.0378
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0272	 ParSpMatVec=0.0017	 speedup=15.7157
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0272	 ParSpMatVec=0.0018	 speedup=14.8583
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0272	 ParSpMatVec=0.0015	 speedup=17.6983
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0272	 ParSpMatVec=0.0018	 speedup=15.1282

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0073	 ParSpMatVec=0.0410	 speedup=0.1791
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0073	 ParSpMatVec=0.0029	 speedup=2.5765
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0073	 ParSpMatVec=0.0014	 speedup=5.4365
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0073	 ParSpMatVec=0.0016	 speedup=4.6698
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0073	 ParSpMatVec=0.0020	 speedup=3.5835

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0277	 ParSpMatVec=0.0294	 speedup=0.9433
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0277	 ParSpMatVec=0.0029	 speedup=9.4848
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0277	 ParSpMatVec=0.0015	 speedup=18.0779
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0277	 ParSpMatVec=0.0017	 speedup=16.5881
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0277	 ParSpMatVec=0.0020	 speedup=13.5901

INFO: ParSpMatVec tests passed

>>> End of log
