>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.7
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.3
INFO: Installing URIParser v0.1.8
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of ParSpMatVec
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-121-generic #170-Ubuntu SMP Wed Jun 14 09:04:33 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1176.1640625 MB free)
Uptime: 19580.0 sec
Load Avg:  1.0029296875  0.98095703125  0.9755859375
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz     912502 s       6292 s      77291 s     752675 s         14 s
#2  3499 MHz     631937 s         84 s      64915 s    1189065 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.9.1
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.7
 - Compat                        0.26.0
 - SHA                           0.3.3
 - URIParser                     0.1.8
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0784	 ParSpMatVec=0.0250	 speedup=3.1362
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0784	 ParSpMatVec=0.0084	 speedup=9.3091
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0784	 ParSpMatVec=0.0118	 speedup=6.6652
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0784	 ParSpMatVec=0.0106	 speedup=7.4220
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0784	 ParSpMatVec=0.0101	 speedup=7.7747
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1101	 ParSpMatVec=0.0414	 speedup=2.6581
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1101	 ParSpMatVec=0.0132	 speedup=8.3597
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1101	 ParSpMatVec=0.0175	 speedup=6.3018
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1101	 ParSpMatVec=0.0140	 speedup=7.8818
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1101	 ParSpMatVec=0.0112	 speedup=9.8032

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0357	 ParSpMatVec=0.0268	 speedup=1.3321
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0357	 ParSpMatVec=0.0126	 speedup=2.8352
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0357	 ParSpMatVec=0.0159	 speedup=2.2463
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0357	 ParSpMatVec=0.0136	 speedup=2.6240
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0357	 ParSpMatVec=0.0139	 speedup=2.5610

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0441	 ParSpMatVec=0.0407	 speedup=1.0848
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0441	 ParSpMatVec=0.0028	 speedup=15.6834
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0441	 ParSpMatVec=0.0027	 speedup=16.3348
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0441	 ParSpMatVec=0.0019	 speedup=23.8186
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0441	 ParSpMatVec=0.0022	 speedup=20.1232

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0088	 ParSpMatVec=0.0506	 speedup=0.1737
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0088	 ParSpMatVec=0.0046	 speedup=1.9309
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0088	 ParSpMatVec=0.0022	 speedup=3.9876
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0088	 ParSpMatVec=0.0022	 speedup=3.9476
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0088	 ParSpMatVec=0.0028	 speedup=3.1156

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0375	 ParSpMatVec=0.0320	 speedup=1.1734
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0375	 ParSpMatVec=0.0041	 speedup=9.1007
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0375	 ParSpMatVec=0.0020	 speedup=18.3006
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0375	 ParSpMatVec=0.0026	 speedup=14.6877
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0375	 ParSpMatVec=0.0026	 speedup=14.6904

INFO: ParSpMatVec tests passed

>>> End of log
