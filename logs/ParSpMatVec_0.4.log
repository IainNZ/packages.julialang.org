>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.7
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.3
INFO: Installing URIParser v0.1.8
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of ParSpMatVec
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-121-generic #170-Ubuntu SMP Wed Jun 14 09:04:33 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1177.578125 MB free)
Uptime: 21287.0 sec
Load Avg:  1.0654296875  1.001953125  1.02392578125
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz    1009958 s       2358 s      77850 s     825685 s         39 s
#2  3499 MHz     737894 s       4742 s      63684 s    1239013 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.9.1
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.7
 - Compat                        0.26.0
 - SHA                           0.3.3
 - URIParser                     0.1.8
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0865	 ParSpMatVec=0.0165	 speedup=5.2357
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0865	 ParSpMatVec=0.0094	 speedup=9.2208
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0865	 ParSpMatVec=0.0170	 speedup=5.0782
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0865	 ParSpMatVec=0.0112	 speedup=7.7304
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0865	 ParSpMatVec=0.0067	 speedup=13.0015
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1313	 ParSpMatVec=0.0271	 speedup=4.8488
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1313	 ParSpMatVec=0.0105	 speedup=12.4417
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1313	 ParSpMatVec=0.0132	 speedup=9.9110
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1313	 ParSpMatVec=0.0134	 speedup=9.8199
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1313	 ParSpMatVec=0.0115	 speedup=11.4343

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0333	 ParSpMatVec=0.0189	 speedup=1.7598
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0333	 ParSpMatVec=0.0130	 speedup=2.5699
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0333	 ParSpMatVec=0.0150	 speedup=2.2159
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0333	 ParSpMatVec=0.0144	 speedup=2.3217
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0333	 ParSpMatVec=0.0148	 speedup=2.2602

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0334	 ParSpMatVec=0.0358	 speedup=0.9335
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0334	 ParSpMatVec=0.0027	 speedup=12.3079
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0334	 ParSpMatVec=0.0022	 speedup=15.3139
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0334	 ParSpMatVec=0.0020	 speedup=16.6680
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0334	 ParSpMatVec=0.0019	 speedup=17.2587

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0084	 ParSpMatVec=0.0421	 speedup=0.1986
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0084	 ParSpMatVec=0.0036	 speedup=2.3302
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0084	 ParSpMatVec=0.0024	 speedup=3.5103
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0084	 ParSpMatVec=0.0022	 speedup=3.8459
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0084	 ParSpMatVec=0.0029	 speedup=2.8417

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0483	 ParSpMatVec=0.0517	 speedup=0.9330
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0483	 ParSpMatVec=0.0048	 speedup=10.0140
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0483	 ParSpMatVec=0.0028	 speedup=17.0177
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0483	 ParSpMatVec=0.0030	 speedup=16.2200
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0483	 ParSpMatVec=0.0028	 speedup=17.4817

INFO: ParSpMatVec tests passed

>>> End of log
