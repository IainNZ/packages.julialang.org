>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.7
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.2
INFO: Installing URIParser v0.1.8
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of ParSpMatVec
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-119-generic #166-Ubuntu SMP Wed May 3 12:18:55 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1197.359375 MB free)
Uptime: 20955.0 sec
Load Avg:  0.98193359375  0.95947265625  0.9970703125
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3496 MHz    1022136 s        397 s      82182 s     780390 s         29 s
#2  3496 MHz     669308 s       6405 s      69601 s    1286789 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.9.1
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.7
 - Compat                        0.25.2
 - SHA                           0.3.2
 - URIParser                     0.1.8
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1087	 ParSpMatVec=0.0166	 speedup=6.5283
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1087	 ParSpMatVec=0.0099	 speedup=10.9652
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1087	 ParSpMatVec=0.0149	 speedup=7.2732
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1087	 ParSpMatVec=0.0120	 speedup=9.0300
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1087	 ParSpMatVec=0.0080	 speedup=13.5172
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0841	 ParSpMatVec=0.0424	 speedup=1.9851
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0841	 ParSpMatVec=0.0145	 speedup=5.8073
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0841	 ParSpMatVec=0.0156	 speedup=5.4076
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0841	 ParSpMatVec=0.0162	 speedup=5.2003
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0841	 ParSpMatVec=0.0134	 speedup=6.3003

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0539	 ParSpMatVec=0.0303	 speedup=1.7796
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0539	 ParSpMatVec=0.0140	 speedup=3.8630
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0539	 ParSpMatVec=0.0156	 speedup=3.4530
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0539	 ParSpMatVec=0.0158	 speedup=3.4124
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0539	 ParSpMatVec=0.0157	 speedup=3.4398

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0336	 ParSpMatVec=0.0255	 speedup=1.3167
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0336	 ParSpMatVec=0.0017	 speedup=19.2215
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0336	 ParSpMatVec=0.0023	 speedup=14.6817
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0336	 ParSpMatVec=0.0019	 speedup=17.6892
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0336	 ParSpMatVec=0.0026	 speedup=12.7253

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0104	 ParSpMatVec=0.0472	 speedup=0.2202
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0104	 ParSpMatVec=0.0038	 speedup=2.7650
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0104	 ParSpMatVec=0.0020	 speedup=5.1336
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0104	 ParSpMatVec=0.0037	 speedup=2.8189
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0104	 ParSpMatVec=0.0031	 speedup=3.3282

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0452	 ParSpMatVec=0.0497	 speedup=0.9095
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0452	 ParSpMatVec=0.0031	 speedup=14.6521
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0452	 ParSpMatVec=0.0036	 speedup=12.4858
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0452	 ParSpMatVec=0.0038	 speedup=11.8199
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0452	 ParSpMatVec=0.0024	 speedup=19.1539

INFO: ParSpMatVec tests passed

>>> End of log
