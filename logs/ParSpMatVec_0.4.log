>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.7
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.3
INFO: Installing URIParser v0.1.8
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of ParSpMatVec
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-126-generic #175-Ubuntu SMP Thu Jul 20 17:33:56 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1153.9296875 MB free)
Uptime: 21949.0 sec
Load Avg:  0.87744140625  0.97900390625  1.01318359375
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3505 MHz    1072988 s       4773 s      84966 s     812105 s         35 s
#2  3505 MHz     733817 s       1995 s      73153 s    1310019 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.9.1
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.7
 - Compat                        0.26.0
 - SHA                           0.3.3
 - URIParser                     0.1.8
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1213	 ParSpMatVec=0.0292	 speedup=4.1586
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1213	 ParSpMatVec=0.0085	 speedup=14.2843
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1213	 ParSpMatVec=0.0147	 speedup=8.2530
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1213	 ParSpMatVec=0.0062	 speedup=19.5022
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1213	 ParSpMatVec=0.0089	 speedup=13.6735
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1230	 ParSpMatVec=0.0425	 speedup=2.8971
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1230	 ParSpMatVec=0.0139	 speedup=8.8449
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1230	 ParSpMatVec=0.0104	 speedup=11.8333
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1230	 ParSpMatVec=0.0117	 speedup=10.5017
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1230	 ParSpMatVec=0.0139	 speedup=8.8629

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0455	 ParSpMatVec=0.0293	 speedup=1.5513
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0455	 ParSpMatVec=0.0124	 speedup=3.6601
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0455	 ParSpMatVec=0.0091	 speedup=5.0249
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0455	 ParSpMatVec=0.0108	 speedup=4.2100
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0455	 ParSpMatVec=0.0119	 speedup=3.8369

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0312	 ParSpMatVec=0.0257	 speedup=1.2158
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0312	 ParSpMatVec=0.0023	 speedup=13.2783
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0312	 ParSpMatVec=0.0009	 speedup=36.5061
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0312	 ParSpMatVec=0.0043	 speedup=7.3276
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0312	 ParSpMatVec=0.0036	 speedup=8.7618

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0097	 ParSpMatVec=0.0572	 speedup=0.1693
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0097	 ParSpMatVec=0.0034	 speedup=2.8143
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0097	 ParSpMatVec=0.0019	 speedup=5.2269
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0097	 ParSpMatVec=0.0030	 speedup=3.2567
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0097	 ParSpMatVec=0.0035	 speedup=2.7487

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0466	 ParSpMatVec=0.0443	 speedup=1.0510
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0466	 ParSpMatVec=0.0032	 speedup=14.6035
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0466	 ParSpMatVec=0.0053	 speedup=8.7435
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0466	 ParSpMatVec=0.0055	 speedup=8.5286
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0466	 ParSpMatVec=0.0035	 speedup=13.3732

INFO: ParSpMatVec tests passed

>>> End of log
