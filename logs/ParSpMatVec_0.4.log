>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.7
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.3
INFO: Installing URIParser v0.1.8
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-128-generic #177-Ubuntu SMP Tue Aug 8 11:40:23 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1174.1484375 MB free)
Uptime: 20658.0 sec
Load Avg:  1.0048828125  0.97802734375  1.001953125
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz    1004920 s       2330 s      79108 s     752544 s         11 s
#2  3500 MHz     621962 s       6283 s      65070 s    1295210 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.9.1
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.7
 - Compat                        0.26.0
 - SHA                           0.3.3
 - URIParser                     0.1.8
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0756	 ParSpMatVec=0.0166	 speedup=4.5424
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0756	 ParSpMatVec=0.0098	 speedup=7.7075
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0756	 ParSpMatVec=0.0104	 speedup=7.2774
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0756	 ParSpMatVec=0.0100	 speedup=7.5256
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0756	 ParSpMatVec=0.0084	 speedup=9.0012
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0810	 ParSpMatVec=0.0252	 speedup=3.2145
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0810	 ParSpMatVec=0.0127	 speedup=6.3755
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0810	 ParSpMatVec=0.0146	 speedup=5.5681
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0810	 ParSpMatVec=0.0124	 speedup=6.5189
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0810	 ParSpMatVec=0.0104	 speedup=7.7732

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0330	 ParSpMatVec=0.0191	 speedup=1.7235
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0330	 ParSpMatVec=0.0121	 speedup=2.7189
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0330	 ParSpMatVec=0.0133	 speedup=2.4846
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0330	 ParSpMatVec=0.0128	 speedup=2.5728
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0330	 ParSpMatVec=0.0117	 speedup=2.8227

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0374	 ParSpMatVec=0.0215	 speedup=1.7377
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0374	 ParSpMatVec=0.0025	 speedup=15.1564
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0374	 ParSpMatVec=0.0021	 speedup=17.7743
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0374	 ParSpMatVec=0.0019	 speedup=20.2195
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0374	 ParSpMatVec=0.0019	 speedup=19.6760

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0078	 ParSpMatVec=0.0449	 speedup=0.1738
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0078	 ParSpMatVec=0.0042	 speedup=1.8701
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0078	 ParSpMatVec=0.0023	 speedup=3.4338
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0078	 ParSpMatVec=0.0025	 speedup=3.0740
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0078	 ParSpMatVec=0.0030	 speedup=2.5990

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0461	 ParSpMatVec=0.0468	 speedup=0.9848
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0461	 ParSpMatVec=0.0039	 speedup=11.9241
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0461	 ParSpMatVec=0.0037	 speedup=12.3573
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0461	 ParSpMatVec=0.0025	 speedup=18.4306
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0461	 ParSpMatVec=0.0022	 speedup=21.1247

INFO: ParSpMatVec tests passed

>>> End of log
