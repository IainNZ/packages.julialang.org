>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.7
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.3
INFO: Installing URIParser v0.1.8
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-129-generic #178-Ubuntu SMP Fri Aug 11 12:48:20 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1156.375 MB free)
Uptime: 23256.0 sec
Load Avg:  1.00537109375  1.001953125  0.99609375
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz    1118272 s       3246 s      91631 s     885016 s         41 s
#2  3500 MHz     783057 s       4863 s      82269 s    1380677 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.9.1
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.7
 - Compat                        0.26.0
 - SHA                           0.3.3
 - URIParser                     0.1.8
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1000	 ParSpMatVec=0.0229	 speedup=4.3675
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1000	 ParSpMatVec=0.0082	 speedup=12.2143
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1000	 ParSpMatVec=0.0121	 speedup=8.3011
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1000	 ParSpMatVec=0.0078	 speedup=12.7849
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1000	 ParSpMatVec=0.0104	 speedup=9.6572
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0764	 ParSpMatVec=0.0419	 speedup=1.8246
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0764	 ParSpMatVec=0.0133	 speedup=5.7530
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0764	 ParSpMatVec=0.0127	 speedup=6.0028
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0764	 ParSpMatVec=0.0094	 speedup=8.1105
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0764	 ParSpMatVec=0.0112	 speedup=6.8071

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0499	 ParSpMatVec=0.0338	 speedup=1.4777
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0499	 ParSpMatVec=0.0140	 speedup=3.5736
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0499	 ParSpMatVec=0.0076	 speedup=6.5853
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0499	 ParSpMatVec=0.0087	 speedup=5.7230
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0499	 ParSpMatVec=0.0105	 speedup=4.7432

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0431	 ParSpMatVec=0.0376	 speedup=1.1459
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0431	 ParSpMatVec=0.0026	 speedup=16.7521
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0431	 ParSpMatVec=0.0252	 speedup=1.7133
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0431	 ParSpMatVec=0.0106	 speedup=4.0770
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0431	 ParSpMatVec=0.0020	 speedup=21.4838

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0087	 ParSpMatVec=0.0474	 speedup=0.1829
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0087	 ParSpMatVec=0.0033	 speedup=2.5925
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0087	 ParSpMatVec=0.0019	 speedup=4.4681
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0087	 ParSpMatVec=0.0037	 speedup=2.3359
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0087	 ParSpMatVec=0.0020	 speedup=4.3304

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0456	 ParSpMatVec=0.0514	 speedup=0.8862
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0456	 ParSpMatVec=0.0037	 speedup=12.4459
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0456	 ParSpMatVec=0.0026	 speedup=17.3317
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0456	 ParSpMatVec=0.0043	 speedup=10.4954
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0456	 ParSpMatVec=0.0044	 speedup=10.4315

INFO: ParSpMatVec tests passed

>>> End of log
