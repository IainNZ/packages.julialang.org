>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.7
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.3
INFO: Installing URIParser v0.1.8
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of ParSpMatVec
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-121-generic #170-Ubuntu SMP Wed Jun 14 09:04:33 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1167.328125 MB free)
Uptime: 21051.0 sec
Load Avg:  0.8916015625  0.9384765625  0.99169921875
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz    1034350 s       6315 s      81765 s     765302 s         31 s
#2  3500 MHz     678570 s         40 s      70888 s    1279332 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.9.1
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.7
 - Compat                        0.26.0
 - SHA                           0.3.3
 - URIParser                     0.1.8
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0774	 ParSpMatVec=0.0252	 speedup=3.0731
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0774	 ParSpMatVec=0.0082	 speedup=9.4117
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0774	 ParSpMatVec=0.0114	 speedup=6.7720
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0774	 ParSpMatVec=0.0110	 speedup=7.0194
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0774	 ParSpMatVec=0.0098	 speedup=7.8570
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1200	 ParSpMatVec=0.0261	 speedup=4.5981
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1200	 ParSpMatVec=0.0139	 speedup=8.6418
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1200	 ParSpMatVec=0.0152	 speedup=7.9117
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1200	 ParSpMatVec=0.0161	 speedup=7.4474
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1200	 ParSpMatVec=0.0151	 speedup=7.9531

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0295	 ParSpMatVec=0.0166	 speedup=1.7794
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0295	 ParSpMatVec=0.0138	 speedup=2.1378
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0295	 ParSpMatVec=0.0156	 speedup=1.8949
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0295	 ParSpMatVec=0.0133	 speedup=2.2272
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0295	 ParSpMatVec=0.0131	 speedup=2.2610

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0426	 ParSpMatVec=0.0382	 speedup=1.1163
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0426	 ParSpMatVec=0.0021	 speedup=20.1972
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0426	 ParSpMatVec=0.0019	 speedup=22.9611
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0426	 ParSpMatVec=0.0014	 speedup=30.4937
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0426	 ParSpMatVec=0.0014	 speedup=30.4781

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0091	 ParSpMatVec=0.0485	 speedup=0.1874
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0091	 ParSpMatVec=0.0029	 speedup=3.1239
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0091	 ParSpMatVec=0.0020	 speedup=4.4563
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0091	 ParSpMatVec=0.0027	 speedup=3.3895
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0091	 ParSpMatVec=0.0031	 speedup=2.9067

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0466	 ParSpMatVec=0.0447	 speedup=1.0427
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0466	 ParSpMatVec=0.0043	 speedup=10.7080
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0466	 ParSpMatVec=0.0024	 speedup=19.6678
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0466	 ParSpMatVec=0.0031	 speedup=15.1421
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0466	 ParSpMatVec=0.0030	 speedup=15.4654

INFO: ParSpMatVec tests passed

>>> End of log
