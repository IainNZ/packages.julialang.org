>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.7
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.3
INFO: Installing URIParser v0.1.8
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of ParSpMatVec
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-121-generic #170-Ubuntu SMP Wed Jun 14 09:04:33 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1197.06640625 MB free)
Uptime: 21388.0 sec
Load Avg:  1.15576171875  1.03466796875  1.02392578125
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3501 MHz    1045468 s       2382 s      79618 s     796554 s         33 s
#2  3501 MHz     708796 s       3938 s      68215 s    1286509 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.9.1
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.7
 - Compat                        0.26.0
 - SHA                           0.3.3
 - URIParser                     0.1.8
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1270	 ParSpMatVec=0.0277	 speedup=4.5861
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1270	 ParSpMatVec=0.0091	 speedup=13.9480
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1270	 ParSpMatVec=0.0119	 speedup=10.6552
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1270	 ParSpMatVec=0.0082	 speedup=15.4134
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1270	 ParSpMatVec=0.0095	 speedup=13.3210
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1121	 ParSpMatVec=0.0407	 speedup=2.7524
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1121	 ParSpMatVec=0.0128	 speedup=8.7345
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1121	 ParSpMatVec=0.0158	 speedup=7.0938
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1121	 ParSpMatVec=0.0148	 speedup=7.5810
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1121	 ParSpMatVec=0.0164	 speedup=6.8474

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0426	 ParSpMatVec=0.0311	 speedup=1.3682
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0426	 ParSpMatVec=0.0172	 speedup=2.4729
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0426	 ParSpMatVec=0.0195	 speedup=2.1859
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0426	 ParSpMatVec=0.0138	 speedup=3.0741
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0426	 ParSpMatVec=0.0137	 speedup=3.1091

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0425	 ParSpMatVec=0.0244	 speedup=1.7396
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0425	 ParSpMatVec=0.0026	 speedup=16.2383
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0425	 ParSpMatVec=0.0021	 speedup=20.4799
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0425	 ParSpMatVec=0.0015	 speedup=29.1177
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0425	 ParSpMatVec=0.0016	 speedup=26.2963

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0067	 ParSpMatVec=0.0264	 speedup=0.2534
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0067	 ParSpMatVec=0.0032	 speedup=2.0814
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0067	 ParSpMatVec=0.0036	 speedup=1.8536
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0067	 ParSpMatVec=0.0019	 speedup=3.4652
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0067	 ParSpMatVec=0.0029	 speedup=2.3410

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0295	 ParSpMatVec=0.0290	 speedup=1.0180
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0295	 ParSpMatVec=0.0034	 speedup=8.6747
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0295	 ParSpMatVec=0.0055	 speedup=5.3709
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0295	 ParSpMatVec=0.0032	 speedup=9.3118
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0295	 ParSpMatVec=0.0024	 speedup=12.3667

INFO: ParSpMatVec tests passed

>>> End of log
