>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.7
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.2
INFO: Installing URIParser v0.1.8
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-117-generic #164-Ubuntu SMP Fri Apr 7 11:05:26 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1188.75 MB free)
Uptime: 20364.0 sec
Load Avg:  0.98583984375  0.96240234375  0.97021484375
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz    1028944 s         50 s      83206 s     708024 s         32 s
#2  3499 MHz     612042 s       6592 s      73282 s    1271216 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.10.0
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.7
 - Compat                        0.24.0
 - SHA                           0.3.2
 - URIParser                     0.1.8
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0994	 ParSpMatVec=0.0267	 speedup=3.7234
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0994	 ParSpMatVec=0.0092	 speedup=10.7625
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0994	 ParSpMatVec=0.0125	 speedup=7.9820
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0994	 ParSpMatVec=0.0122	 speedup=8.1342
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0994	 ParSpMatVec=0.0071	 speedup=13.9367
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0824	 ParSpMatVec=0.0476	 speedup=1.7302
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0824	 ParSpMatVec=0.0160	 speedup=5.1443
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0824	 ParSpMatVec=0.0092	 speedup=8.9227
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0824	 ParSpMatVec=0.0182	 speedup=4.5259
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0824	 ParSpMatVec=0.0112	 speedup=7.3360

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0560	 ParSpMatVec=0.0306	 speedup=1.8301
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0560	 ParSpMatVec=0.0160	 speedup=3.5126
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0560	 ParSpMatVec=0.0089	 speedup=6.2719
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0560	 ParSpMatVec=0.0117	 speedup=4.7833
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0560	 ParSpMatVec=0.0227	 speedup=2.4731

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0460	 ParSpMatVec=0.0435	 speedup=1.0580
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0460	 ParSpMatVec=0.0027	 speedup=16.9159
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0460	 ParSpMatVec=0.0034	 speedup=13.4546
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0460	 ParSpMatVec=0.0042	 speedup=10.8645
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0460	 ParSpMatVec=0.0030	 speedup=15.1633

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0085	 ParSpMatVec=0.0459	 speedup=0.1844
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0085	 ParSpMatVec=0.0047	 speedup=1.8169
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0085	 ParSpMatVec=0.0021	 speedup=4.0595
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0085	 ParSpMatVec=0.0040	 speedup=2.0927
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0085	 ParSpMatVec=0.0042	 speedup=2.0295

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0498	 ParSpMatVec=0.0538	 speedup=0.9270
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0498	 ParSpMatVec=0.0037	 speedup=13.4582
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0498	 ParSpMatVec=0.0022	 speedup=22.2585
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0498	 ParSpMatVec=0.0153	 speedup=3.2611
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0498	 ParSpMatVec=0.0050	 speedup=9.8886

INFO: ParSpMatVec tests passed

>>> End of log
