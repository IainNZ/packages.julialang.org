>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.7
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.3
INFO: Installing URIParser v0.1.8
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-121-generic #170-Ubuntu SMP Wed Jun 14 09:04:33 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1183.53125 MB free)
Uptime: 21673.0 sec
Load Avg:  1.02783203125  1.0146484375  1.02734375
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz    1015460 s       6150 s      83901 s     848725 s         28 s
#2  3500 MHz     746801 s        442 s      70963 s    1274989 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.9.1
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.7
 - Compat                        0.26.0
 - SHA                           0.3.3
 - URIParser                     0.1.8
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0777	 ParSpMatVec=0.0173	 speedup=4.4867
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0777	 ParSpMatVec=0.0078	 speedup=9.9043
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0777	 ParSpMatVec=0.0117	 speedup=6.6275
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0777	 ParSpMatVec=0.0077	 speedup=10.0896
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0777	 ParSpMatVec=0.0085	 speedup=9.1785
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1155	 ParSpMatVec=0.0296	 speedup=3.9048
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1155	 ParSpMatVec=0.0128	 speedup=9.0377
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1155	 ParSpMatVec=0.0140	 speedup=8.2703
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1155	 ParSpMatVec=0.0146	 speedup=7.9288
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1155	 ParSpMatVec=0.0133	 speedup=8.7130

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0284	 ParSpMatVec=0.0169	 speedup=1.6787
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0284	 ParSpMatVec=0.0104	 speedup=2.7169
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0284	 ParSpMatVec=0.0120	 speedup=2.3540
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0284	 ParSpMatVec=0.0115	 speedup=2.4587
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0284	 ParSpMatVec=0.0127	 speedup=2.2282

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0306	 ParSpMatVec=0.0404	 speedup=0.7576
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0306	 ParSpMatVec=0.0027	 speedup=11.3491
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0306	 ParSpMatVec=0.0027	 speedup=11.5368
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0306	 ParSpMatVec=0.0013	 speedup=24.1579
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0306	 ParSpMatVec=0.0016	 speedup=19.0327

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0081	 ParSpMatVec=0.0432	 speedup=0.1870
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0081	 ParSpMatVec=0.0042	 speedup=1.9321
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0081	 ParSpMatVec=0.0036	 speedup=2.2261
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0081	 ParSpMatVec=0.0026	 speedup=3.1324
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0081	 ParSpMatVec=0.0021	 speedup=3.9229

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0305	 ParSpMatVec=0.0287	 speedup=1.0639
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0305	 ParSpMatVec=0.0027	 speedup=11.5019
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0305	 ParSpMatVec=0.0026	 speedup=11.6035
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0305	 ParSpMatVec=0.0029	 speedup=10.4783
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0305	 ParSpMatVec=0.0021	 speedup=14.3415

INFO: ParSpMatVec tests passed

>>> End of log
