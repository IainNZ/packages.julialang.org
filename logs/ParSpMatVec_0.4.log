>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.7
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.3
INFO: Installing URIParser v0.1.8
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-128-generic #177-Ubuntu SMP Tue Aug 8 11:40:23 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1140.98046875 MB free)
Uptime: 22468.0 sec
Load Avg:  0.97607421875  0.9970703125  0.986328125
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3507 MHz    1047176 s       6502 s      95684 s     882771 s         37 s
#2  3507 MHz     781004 s         98 s      84490 s    1306364 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.9.1
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.7
 - Compat                        0.26.0
 - SHA                           0.3.3
 - URIParser                     0.1.8
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1295	 ParSpMatVec=0.0272	 speedup=4.7591
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1295	 ParSpMatVec=0.0096	 speedup=13.4260
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1295	 ParSpMatVec=0.0124	 speedup=10.4560
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1295	 ParSpMatVec=0.0199	 speedup=6.5140
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1295	 ParSpMatVec=0.0141	 speedup=9.2015
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1243	 ParSpMatVec=0.0458	 speedup=2.7152
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1243	 ParSpMatVec=0.0263	 speedup=4.7203
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1243	 ParSpMatVec=0.0158	 speedup=7.8858
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1243	 ParSpMatVec=0.0143	 speedup=8.7154
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1243	 ParSpMatVec=0.0144	 speedup=8.6317

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0455	 ParSpMatVec=0.0331	 speedup=1.3722
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0455	 ParSpMatVec=0.0134	 speedup=3.3980
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0455	 ParSpMatVec=0.0157	 speedup=2.8870
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0455	 ParSpMatVec=0.0142	 speedup=3.2092
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0455	 ParSpMatVec=0.0136	 speedup=3.3475

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0476	 ParSpMatVec=0.0431	 speedup=1.1042
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0476	 ParSpMatVec=0.0029	 speedup=16.1608
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0476	 ParSpMatVec=0.0039	 speedup=12.2356
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0476	 ParSpMatVec=0.0032	 speedup=15.0432
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0476	 ParSpMatVec=0.0015	 speedup=30.9379

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0091	 ParSpMatVec=0.0427	 speedup=0.2139
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0091	 ParSpMatVec=0.0037	 speedup=2.4568
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0091	 ParSpMatVec=0.0094	 speedup=0.9726
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0091	 ParSpMatVec=0.0044	 speedup=2.0620
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0091	 ParSpMatVec=0.0022	 speedup=4.2444

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0283	 ParSpMatVec=0.0249	 speedup=1.1383
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0283	 ParSpMatVec=0.0044	 speedup=6.4593
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0283	 ParSpMatVec=0.0043	 speedup=6.6429
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0283	 ParSpMatVec=0.0029	 speedup=9.7493
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0283	 ParSpMatVec=0.0031	 speedup=8.9871

INFO: ParSpMatVec tests passed

>>> End of log
