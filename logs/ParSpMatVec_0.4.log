>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.7
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.2
INFO: Installing URIParser v0.1.8
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of ParSpMatVec
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-116-generic #163-Ubuntu SMP Fri Mar 31 14:13:22 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1205.609375 MB free)
Uptime: 15892.0 sec
Load Avg:  0.9169921875  0.947265625  0.94970703125
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz     761093 s       1282 s      57764 s     604644 s         20 s
#2  3500 MHz     479770 s       5758 s      49395 s    1008311 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.9.0
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.7
 - Compat                        0.23.0
 - SHA                           0.3.2
 - URIParser                     0.1.8
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0872	 ParSpMatVec=0.0156	 speedup=5.5814
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0872	 ParSpMatVec=0.0086	 speedup=10.1113
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0872	 ParSpMatVec=0.0075	 speedup=11.6699
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0872	 ParSpMatVec=0.0074	 speedup=11.8610
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0872	 ParSpMatVec=0.0074	 speedup=11.8575
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0705	 ParSpMatVec=0.0244	 speedup=2.8907
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0705	 ParSpMatVec=0.0138	 speedup=5.1037
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0705	 ParSpMatVec=0.0095	 speedup=7.4183
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0705	 ParSpMatVec=0.0101	 speedup=6.9663
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0705	 ParSpMatVec=0.0104	 speedup=6.7830

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0288	 ParSpMatVec=0.0168	 speedup=1.7113
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0288	 ParSpMatVec=0.0122	 speedup=2.3575
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0288	 ParSpMatVec=0.0079	 speedup=3.6363
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0288	 ParSpMatVec=0.0093	 speedup=3.1088
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0288	 ParSpMatVec=0.0093	 speedup=3.1067

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0306	 ParSpMatVec=0.0223	 speedup=1.3736
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0306	 ParSpMatVec=0.0018	 speedup=17.1012
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0306	 ParSpMatVec=0.0015	 speedup=20.9264
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0306	 ParSpMatVec=0.0014	 speedup=21.4052
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0306	 ParSpMatVec=0.0016	 speedup=19.3427

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0069	 ParSpMatVec=0.0308	 speedup=0.2249
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0069	 ParSpMatVec=0.0027	 speedup=2.6009
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0069	 ParSpMatVec=0.0018	 speedup=3.7789
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0069	 ParSpMatVec=0.0018	 speedup=3.9308
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0069	 ParSpMatVec=0.0024	 speedup=2.8360

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0293	 ParSpMatVec=0.0453	 speedup=0.6463
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0293	 ParSpMatVec=0.0033	 speedup=8.8034
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0293	 ParSpMatVec=0.0018	 speedup=15.9309
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0293	 ParSpMatVec=0.0018	 speedup=16.5950
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0293	 ParSpMatVec=0.0025	 speedup=11.7332

INFO: ParSpMatVec tests passed

>>> End of log
