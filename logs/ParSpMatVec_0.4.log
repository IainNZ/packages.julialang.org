>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.7
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.2
INFO: Installing URIParser v0.1.8
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of ParSpMatVec
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-117-generic #164-Ubuntu SMP Fri Apr 7 11:05:26 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1196.50390625 MB free)
Uptime: 20542.0 sec
Load Avg:  0.95654296875  1.017578125  1.02490234375
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz    1006168 s       5055 s      85238 s     739016 s         33 s
#2  3500 MHz     635520 s       1942 s      73799 s    1274199 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.9.1
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.7
 - Compat                        0.24.0
 - SHA                           0.3.2
 - URIParser                     0.1.8
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0838	 ParSpMatVec=0.0955	 speedup=0.8774
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0838	 ParSpMatVec=0.0083	 speedup=10.1441
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0838	 ParSpMatVec=0.0158	 speedup=5.3075
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0838	 ParSpMatVec=0.0088	 speedup=9.5761
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0838	 ParSpMatVec=0.0081	 speedup=10.3426
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1239	 ParSpMatVec=0.0453	 speedup=2.7366
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1239	 ParSpMatVec=0.0376	 speedup=3.2971
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1239	 ParSpMatVec=0.0279	 speedup=4.4465
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1239	 ParSpMatVec=0.0145	 speedup=8.5493
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1239	 ParSpMatVec=0.0126	 speedup=9.8285

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0519	 ParSpMatVec=0.0291	 speedup=1.7821
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0519	 ParSpMatVec=0.0137	 speedup=3.7864
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0519	 ParSpMatVec=0.0143	 speedup=3.6207
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0519	 ParSpMatVec=0.0135	 speedup=3.8406
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0519	 ParSpMatVec=0.0152	 speedup=3.4104

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0464	 ParSpMatVec=0.0252	 speedup=1.8398
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0464	 ParSpMatVec=0.0019	 speedup=23.8105
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0464	 ParSpMatVec=0.0033	 speedup=14.2286
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0464	 ParSpMatVec=0.0136	 speedup=3.4123
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0464	 ParSpMatVec=0.0020	 speedup=23.3354

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0085	 ParSpMatVec=0.0445	 speedup=0.1916
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0085	 ParSpMatVec=0.0034	 speedup=2.4894
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0085	 ParSpMatVec=0.0038	 speedup=2.2198
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0085	 ParSpMatVec=0.0029	 speedup=2.9792
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0085	 ParSpMatVec=0.0117	 speedup=0.7290

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0306	 ParSpMatVec=0.0296	 speedup=1.0353
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0306	 ParSpMatVec=0.0038	 speedup=8.0377
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0306	 ParSpMatVec=0.0034	 speedup=9.0921
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0306	 ParSpMatVec=0.0039	 speedup=7.7957
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0306	 ParSpMatVec=0.0029	 speedup=10.6159

INFO: ParSpMatVec tests passed

>>> End of log
