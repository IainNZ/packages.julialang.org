>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.7
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.3
INFO: Installing URIParser v0.1.8
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-121-generic #170-Ubuntu SMP Wed Jun 14 09:04:33 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1187.73828125 MB free)
Uptime: 21501.0 sec
Load Avg:  0.98046875  0.96923828125  0.99169921875
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz    1027835 s        485 s      82178 s     818132 s         41 s
#2  3500 MHz     724572 s       7340 s      68328 s    1263305 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.9.1
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.7
 - Compat                        0.26.0
 - SHA                           0.3.3
 - URIParser                     0.1.8
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1220	 ParSpMatVec=0.0235	 speedup=5.1856
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1220	 ParSpMatVec=0.0089	 speedup=13.6962
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1220	 ParSpMatVec=0.0155	 speedup=7.8731
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1220	 ParSpMatVec=0.0097	 speedup=12.5487
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1220	 ParSpMatVec=0.0095	 speedup=12.8596
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1154	 ParSpMatVec=0.0403	 speedup=2.8603
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1154	 ParSpMatVec=0.0130	 speedup=8.8948
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1154	 ParSpMatVec=0.0126	 speedup=9.1789
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1154	 ParSpMatVec=0.0147	 speedup=7.8355
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1154	 ParSpMatVec=0.0138	 speedup=8.3329

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0434	 ParSpMatVec=0.0189	 speedup=2.2923
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0434	 ParSpMatVec=0.0158	 speedup=2.7363
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0434	 ParSpMatVec=0.0143	 speedup=3.0309
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0434	 ParSpMatVec=0.0129	 speedup=3.3522
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0434	 ParSpMatVec=0.0138	 speedup=3.1390

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0391	 ParSpMatVec=0.0373	 speedup=1.0477
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0391	 ParSpMatVec=0.0031	 speedup=12.7244
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0391	 ParSpMatVec=0.0026	 speedup=15.0062
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0391	 ParSpMatVec=0.0020	 speedup=19.1937
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0391	 ParSpMatVec=0.0015	 speedup=25.5932

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0078	 ParSpMatVec=0.0424	 speedup=0.1848
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0078	 ParSpMatVec=0.0030	 speedup=2.6237
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0078	 ParSpMatVec=0.0024	 speedup=3.2036
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0078	 ParSpMatVec=0.0028	 speedup=2.8419
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0078	 ParSpMatVec=0.0025	 speedup=3.0864

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0473	 ParSpMatVec=0.0479	 speedup=0.9887
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0473	 ParSpMatVec=0.0041	 speedup=11.4047
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0473	 ParSpMatVec=0.0023	 speedup=20.7054
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0473	 ParSpMatVec=0.0033	 speedup=14.2189
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0473	 ParSpMatVec=0.0026	 speedup=18.5247

INFO: ParSpMatVec tests passed

>>> End of log
