>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.7
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.2
INFO: Installing URIParser v0.1.8
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of ParSpMatVec
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-117-generic #164-Ubuntu SMP Fri Apr 7 11:05:26 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1201.625 MB free)
Uptime: 20865.0 sec
Load Avg:  0.93017578125  0.96728515625  1.01318359375
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3504 MHz     976453 s       7183 s      78162 s     807170 s         39 s
#2  3504 MHz     688002 s         80 s      66544 s    1273229 s          1 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.9.1
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.7
 - Compat                        0.24.0
 - SHA                           0.3.2
 - URIParser                     0.1.8
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1348	 ParSpMatVec=0.0297	 speedup=4.5360
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1348	 ParSpMatVec=0.0136	 speedup=9.9288
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1348	 ParSpMatVec=0.0123	 speedup=10.9903
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1348	 ParSpMatVec=0.0110	 speedup=12.2259
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1348	 ParSpMatVec=0.0110	 speedup=12.2428
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1179	 ParSpMatVec=0.0467	 speedup=2.5247
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1179	 ParSpMatVec=0.0138	 speedup=8.5598
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1179	 ParSpMatVec=0.0197	 speedup=5.9827
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1179	 ParSpMatVec=0.0174	 speedup=6.7556
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1179	 ParSpMatVec=0.0122	 speedup=9.6743

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0425	 ParSpMatVec=0.0283	 speedup=1.5031
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0425	 ParSpMatVec=0.0127	 speedup=3.3410
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0425	 ParSpMatVec=0.0173	 speedup=2.4610
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0425	 ParSpMatVec=0.0141	 speedup=3.0059
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0425	 ParSpMatVec=0.0150	 speedup=2.8290

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0464	 ParSpMatVec=0.0381	 speedup=1.2155
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0464	 ParSpMatVec=0.0023	 speedup=20.2514
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0464	 ParSpMatVec=0.0036	 speedup=13.0032
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0464	 ParSpMatVec=0.0027	 speedup=17.1188
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0464	 ParSpMatVec=0.0018	 speedup=25.3783

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0085	 ParSpMatVec=0.0382	 speedup=0.2218
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0085	 ParSpMatVec=0.0046	 speedup=1.8419
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0085	 ParSpMatVec=0.0020	 speedup=4.1644
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0085	 ParSpMatVec=0.0031	 speedup=2.7203
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0085	 ParSpMatVec=0.0022	 speedup=3.8925

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0436	 ParSpMatVec=0.0480	 speedup=0.9080
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0436	 ParSpMatVec=0.0040	 speedup=10.8684
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0436	 ParSpMatVec=0.0018	 speedup=23.8677
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0436	 ParSpMatVec=0.0023	 speedup=18.7745
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0436	 ParSpMatVec=0.0022	 speedup=19.5873

INFO: ParSpMatVec tests passed

>>> End of log
