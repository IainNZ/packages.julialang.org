>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.7
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.2
INFO: Installing URIParser v0.1.8
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of ParSpMatVec
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-119-generic #166-Ubuntu SMP Wed May 3 12:18:55 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1204.30078125 MB free)
Uptime: 20769.0 sec
Load Avg:  1.0703125  1.0302734375  1.048828125
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3504 MHz     989422 s       7387 s      83392 s     781112 s         36 s
#2  3504 MHz     695728 s       1416 s      71795 s    1243565 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.9.1
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.7
 - Compat                        0.25.2
 - SHA                           0.3.2
 - URIParser                     0.1.8
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1357	 ParSpMatVec=0.0271	 speedup=5.0088
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1357	 ParSpMatVec=0.0093	 speedup=14.6060
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1357	 ParSpMatVec=0.0134	 speedup=10.1203
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1357	 ParSpMatVec=0.0090	 speedup=15.1005
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1357	 ParSpMatVec=0.0100	 speedup=13.6197
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1428	 ParSpMatVec=0.0510	 speedup=2.8024
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1428	 ParSpMatVec=0.0143	 speedup=9.9887
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1428	 ParSpMatVec=0.0157	 speedup=9.0771
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1428	 ParSpMatVec=0.0129	 speedup=11.1110
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1428	 ParSpMatVec=0.0137	 speedup=10.3962

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0485	 ParSpMatVec=0.0322	 speedup=1.5071
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0485	 ParSpMatVec=0.0129	 speedup=3.7501
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0485	 ParSpMatVec=0.0189	 speedup=2.5699
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0485	 ParSpMatVec=0.0157	 speedup=3.0827
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0485	 ParSpMatVec=0.0134	 speedup=3.6139

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0427	 ParSpMatVec=0.0365	 speedup=1.1704
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0427	 ParSpMatVec=0.0026	 speedup=16.3489
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0427	 ParSpMatVec=0.0031	 speedup=13.8547
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0427	 ParSpMatVec=0.0026	 speedup=16.3849
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0427	 ParSpMatVec=0.0031	 speedup=13.5644

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0080	 ParSpMatVec=0.0491	 speedup=0.1637
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0080	 ParSpMatVec=0.0042	 speedup=1.9361
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0080	 ParSpMatVec=0.0157	 speedup=0.5113
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0080	 ParSpMatVec=0.0033	 speedup=2.4624
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0080	 ParSpMatVec=0.0048	 speedup=1.6659

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0531	 ParSpMatVec=0.0374	 speedup=1.4185
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0531	 ParSpMatVec=0.0033	 speedup=16.2497
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0531	 ParSpMatVec=0.0016	 speedup=33.2803
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0531	 ParSpMatVec=0.0030	 speedup=17.8866
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0531	 ParSpMatVec=0.0034	 speedup=15.4343

INFO: ParSpMatVec tests passed

>>> End of log
