>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.7
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.3
INFO: Installing URIParser v0.1.8
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-128-generic #177-Ubuntu SMP Tue Aug 8 11:40:23 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1184.89453125 MB free)
Uptime: 22241.0 sec
Load Avg:  0.96875  1.00732421875  1.03466796875
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz    1085668 s       2618 s      82188 s     821739 s         30 s
#2  3500 MHz     750404 s       5178 s      67793 s    1330705 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.9.1
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.7
 - Compat                        0.26.0
 - SHA                           0.3.3
 - URIParser                     0.1.8
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1218	 ParSpMatVec=0.0249	 speedup=4.8841
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1218	 ParSpMatVec=0.0087	 speedup=14.0639
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1218	 ParSpMatVec=0.0113	 speedup=10.8242
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1218	 ParSpMatVec=0.0108	 speedup=11.2534
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1218	 ParSpMatVec=0.0091	 speedup=13.3202
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0776	 ParSpMatVec=0.0271	 speedup=2.8652
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0776	 ParSpMatVec=0.0127	 speedup=6.0973
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0776	 ParSpMatVec=0.0141	 speedup=5.5219
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0776	 ParSpMatVec=0.0133	 speedup=5.8508
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0776	 ParSpMatVec=0.0132	 speedup=5.8874

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0300	 ParSpMatVec=0.0190	 speedup=1.5778
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0300	 ParSpMatVec=0.0157	 speedup=1.9169
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0300	 ParSpMatVec=0.0148	 speedup=2.0328
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0300	 ParSpMatVec=0.0121	 speedup=2.4872
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0300	 ParSpMatVec=0.0150	 speedup=2.0070

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0417	 ParSpMatVec=0.0389	 speedup=1.0717
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0417	 ParSpMatVec=0.0015	 speedup=28.0567
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0417	 ParSpMatVec=0.0031	 speedup=13.5681
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0417	 ParSpMatVec=0.0021	 speedup=20.1960
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0417	 ParSpMatVec=0.0019	 speedup=21.5897

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0080	 ParSpMatVec=0.0439	 speedup=0.1824
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0080	 ParSpMatVec=0.0045	 speedup=1.7714
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0080	 ParSpMatVec=0.0021	 speedup=3.8005
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0080	 ParSpMatVec=0.0031	 speedup=2.5908
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0080	 ParSpMatVec=0.0089	 speedup=0.8959

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0485	 ParSpMatVec=0.0453	 speedup=1.0692
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0485	 ParSpMatVec=0.0041	 speedup=11.8193
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0485	 ParSpMatVec=0.0019	 speedup=25.2537
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0485	 ParSpMatVec=0.0039	 speedup=12.4506
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0485	 ParSpMatVec=0.0021	 speedup=22.5419

INFO: ParSpMatVec tests passed

>>> End of log
