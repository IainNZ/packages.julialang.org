>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.7
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.2
INFO: Installing URIParser v0.1.8
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-116-generic #163-Ubuntu SMP Fri Mar 31 14:13:22 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1182.08203125 MB free)
Uptime: 20410.0 sec
Load Avg:  1.0732421875  1.0146484375  1.0009765625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz     985365 s         57 s      82546 s     774784 s         34 s
#2  3500 MHz     675816 s       6913 s      71909 s    1223136 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.9.0
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.7
 - Compat                        0.24.0
 - SHA                           0.3.2
 - URIParser                     0.1.8
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0778	 ParSpMatVec=0.0249	 speedup=3.1233
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0778	 ParSpMatVec=0.0092	 speedup=8.4931
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0778	 ParSpMatVec=0.0157	 speedup=4.9582
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0778	 ParSpMatVec=0.0083	 speedup=9.4051
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0778	 ParSpMatVec=0.0094	 speedup=8.3094
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0764	 ParSpMatVec=0.0285	 speedup=2.6815
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0764	 ParSpMatVec=0.0155	 speedup=4.9231
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0764	 ParSpMatVec=0.0176	 speedup=4.3312
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0764	 ParSpMatVec=0.0132	 speedup=5.7960
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0764	 ParSpMatVec=0.0133	 speedup=5.7598

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0307	 ParSpMatVec=0.0255	 speedup=1.2037
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0307	 ParSpMatVec=0.0131	 speedup=2.3353
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0307	 ParSpMatVec=0.0212	 speedup=1.4470
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0307	 ParSpMatVec=0.0156	 speedup=1.9693
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0307	 ParSpMatVec=0.0137	 speedup=2.2405

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0321	 ParSpMatVec=0.0401	 speedup=0.8020
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0321	 ParSpMatVec=0.0097	 speedup=3.3291
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0321	 ParSpMatVec=0.0079	 speedup=4.0789
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0321	 ParSpMatVec=0.0165	 speedup=1.9457
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0321	 ParSpMatVec=0.0021	 speedup=15.2678

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0083	 ParSpMatVec=0.0406	 speedup=0.2039
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0083	 ParSpMatVec=0.0044	 speedup=1.8964
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0083	 ParSpMatVec=0.0024	 speedup=3.4015
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0083	 ParSpMatVec=0.0029	 speedup=2.8745
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0083	 ParSpMatVec=0.0037	 speedup=2.2350

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0580	 ParSpMatVec=0.0432	 speedup=1.3436
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0580	 ParSpMatVec=0.0039	 speedup=14.8482
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0580	 ParSpMatVec=0.0022	 speedup=26.3284
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0580	 ParSpMatVec=0.0035	 speedup=16.6600
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0580	 ParSpMatVec=0.0066	 speedup=8.8214

INFO: ParSpMatVec tests passed

>>> End of log
