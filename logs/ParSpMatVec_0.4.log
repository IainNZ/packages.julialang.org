>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.7
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.3
INFO: Installing URIParser v0.1.8
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-128-generic #177-Ubuntu SMP Tue Aug 8 11:40:23 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1159.17578125 MB free)
Uptime: 22390.0 sec
Load Avg:  0.9326171875  1.01123046875  0.986328125
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3507 MHz    1070884 s       4808 s      88480 s     853650 s         35 s
#2  3507 MHz     764577 s       1792 s      77456 s    1325427 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.9.1
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.7
 - Compat                        0.26.0
 - SHA                           0.3.3
 - URIParser                     0.1.8
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0786	 ParSpMatVec=0.0253	 speedup=3.1023
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0786	 ParSpMatVec=0.0152	 speedup=5.1745
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0786	 ParSpMatVec=0.0126	 speedup=6.2239
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0786	 ParSpMatVec=0.0173	 speedup=4.5353
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0786	 ParSpMatVec=0.0093	 speedup=8.4629
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1175	 ParSpMatVec=0.0441	 speedup=2.6638
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1175	 ParSpMatVec=0.0158	 speedup=7.4574
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1175	 ParSpMatVec=0.0180	 speedup=6.5216
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1175	 ParSpMatVec=0.0127	 speedup=9.2199
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1175	 ParSpMatVec=0.0156	 speedup=7.5518

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0434	 ParSpMatVec=0.0314	 speedup=1.3813
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0434	 ParSpMatVec=0.0179	 speedup=2.4325
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0434	 ParSpMatVec=0.0153	 speedup=2.8340
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0434	 ParSpMatVec=0.0121	 speedup=3.5750
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0434	 ParSpMatVec=0.0136	 speedup=3.2024

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0398	 ParSpMatVec=0.0395	 speedup=1.0074
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0398	 ParSpMatVec=0.0023	 speedup=17.5004
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0398	 ParSpMatVec=0.0018	 speedup=22.1418
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0398	 ParSpMatVec=0.0042	 speedup=9.5179
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0398	 ParSpMatVec=0.0058	 speedup=6.8089

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0087	 ParSpMatVec=0.0497	 speedup=0.1755
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0087	 ParSpMatVec=0.0044	 speedup=1.9625
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0087	 ParSpMatVec=0.0023	 speedup=3.8007
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0087	 ParSpMatVec=0.0023	 speedup=3.7278
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0087	 ParSpMatVec=0.0038	 speedup=2.3203

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0429	 ParSpMatVec=0.0502	 speedup=0.8556
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0429	 ParSpMatVec=0.0038	 speedup=11.3496
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0429	 ParSpMatVec=0.0021	 speedup=20.5906
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0429	 ParSpMatVec=0.0033	 speedup=13.1567
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0429	 ParSpMatVec=0.0042	 speedup=10.2200

INFO: ParSpMatVec tests passed

>>> End of log
