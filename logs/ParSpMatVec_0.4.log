>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.7
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.3
INFO: Installing URIParser v0.1.8
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-121-generic #170-Ubuntu SMP Wed Jun 14 09:04:33 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1156.40625 MB free)
Uptime: 21901.0 sec
Load Avg:  1.00390625  1.0146484375  1.01318359375
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz    1087208 s        116 s      89698 s     788594 s         34 s
#2  3500 MHz     666800 s       6959 s      77053 s    1369291 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.9.1
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.7
 - Compat                        0.26.0
 - SHA                           0.3.3
 - URIParser                     0.1.8
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0736	 ParSpMatVec=0.0270	 speedup=2.7248
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0736	 ParSpMatVec=0.0086	 speedup=8.5779
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0736	 ParSpMatVec=0.0118	 speedup=6.2305
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0736	 ParSpMatVec=0.0088	 speedup=8.3674
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0736	 ParSpMatVec=0.0094	 speedup=7.7966
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1077	 ParSpMatVec=0.0457	 speedup=2.3572
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1077	 ParSpMatVec=0.0130	 speedup=8.2800
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1077	 ParSpMatVec=0.0147	 speedup=7.3467
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1077	 ParSpMatVec=0.0150	 speedup=7.1782
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1077	 ParSpMatVec=0.0128	 speedup=8.4350

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0443	 ParSpMatVec=0.0280	 speedup=1.5842
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0443	 ParSpMatVec=0.0138	 speedup=3.2033
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0443	 ParSpMatVec=0.0150	 speedup=2.9531
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0443	 ParSpMatVec=0.0125	 speedup=3.5443
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0443	 ParSpMatVec=0.0130	 speedup=3.4163

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0317	 ParSpMatVec=0.0244	 speedup=1.2982
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0317	 ParSpMatVec=0.0021	 speedup=15.1082
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0317	 ParSpMatVec=0.0022	 speedup=14.2522
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0317	 ParSpMatVec=0.0017	 speedup=19.1170
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0317	 ParSpMatVec=0.0031	 speedup=10.2814

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0092	 ParSpMatVec=0.0461	 speedup=0.1985
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0092	 ParSpMatVec=0.0042	 speedup=2.1627
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0092	 ParSpMatVec=0.0023	 speedup=4.0342
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0092	 ParSpMatVec=0.0078	 speedup=1.1677
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0092	 ParSpMatVec=0.0024	 speedup=3.7825

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0461	 ParSpMatVec=0.0443	 speedup=1.0397
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0461	 ParSpMatVec=0.0038	 speedup=12.2157
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0461	 ParSpMatVec=0.0021	 speedup=21.8057
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0461	 ParSpMatVec=0.0025	 speedup=18.5119
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0461	 ParSpMatVec=0.0028	 speedup=16.7087

INFO: ParSpMatVec tests passed

>>> End of log
