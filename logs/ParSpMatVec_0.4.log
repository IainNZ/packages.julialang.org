>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.7
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.3
INFO: Installing URIParser v0.1.8
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-128-generic #177-Ubuntu SMP Tue Aug 8 11:40:23 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1135.11328125 MB free)
Uptime: 22682.0 sec
Load Avg:  0.99365234375  1.013671875  1.02197265625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz    1065408 s       3968 s      96523 s     886335 s         27 s
#2  3500 MHz     780068 s       3224 s      82096 s    1317841 s          2 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.9.1
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.7
 - Compat                        0.26.0
 - SHA                           0.3.3
 - URIParser                     0.1.8
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1496	 ParSpMatVec=0.0273	 speedup=5.4864
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1496	 ParSpMatVec=0.0098	 speedup=15.2358
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1496	 ParSpMatVec=0.0120	 speedup=12.4528
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1496	 ParSpMatVec=0.0117	 speedup=12.7858
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1496	 ParSpMatVec=0.0096	 speedup=15.5355
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0757	 ParSpMatVec=0.0287	 speedup=2.6404
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0757	 ParSpMatVec=0.0143	 speedup=5.2768
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0757	 ParSpMatVec=0.0154	 speedup=4.9059
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0757	 ParSpMatVec=0.0155	 speedup=4.8972
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0757	 ParSpMatVec=0.0134	 speedup=5.6447

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0450	 ParSpMatVec=0.0295	 speedup=1.5286
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0450	 ParSpMatVec=0.0117	 speedup=3.8407
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0450	 ParSpMatVec=0.0149	 speedup=3.0300
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0450	 ParSpMatVec=0.0133	 speedup=3.3905
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0450	 ParSpMatVec=0.0127	 speedup=3.5564

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0415	 ParSpMatVec=0.0415	 speedup=0.9997
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0415	 ParSpMatVec=0.0016	 speedup=26.5689
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0415	 ParSpMatVec=0.0273	 speedup=1.5222
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0415	 ParSpMatVec=0.0152	 speedup=2.7343
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0415	 ParSpMatVec=0.0283	 speedup=1.4661

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0093	 ParSpMatVec=0.0487	 speedup=0.1903
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0093	 ParSpMatVec=0.0040	 speedup=2.3368
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0093	 ParSpMatVec=0.0033	 speedup=2.7865
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0093	 ParSpMatVec=0.0045	 speedup=2.0427
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0093	 ParSpMatVec=0.0029	 speedup=3.2128

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0469	 ParSpMatVec=0.0270	 speedup=1.7358
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0469	 ParSpMatVec=0.0046	 speedup=10.3007
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0469	 ParSpMatVec=0.0015	 speedup=31.3360
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0469	 ParSpMatVec=0.0061	 speedup=7.7312
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0469	 ParSpMatVec=0.0037	 speedup=12.5820

INFO: ParSpMatVec tests passed

>>> End of log
