>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.7
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.3
INFO: Installing URIParser v0.1.8
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of ParSpMatVec
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-121-generic #170-Ubuntu SMP Wed Jun 14 09:04:33 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1181.51953125 MB free)
Uptime: 21251.0 sec
Load Avg:  0.99072265625  0.98095703125  0.97021484375
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz    1002906 s       3070 s      83494 s     833565 s         30 s
#2  3500 MHz     750676 s       3496 s      71036 s    1234041 s          2 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.9.1
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.7
 - Compat                        0.26.0
 - SHA                           0.3.3
 - URIParser                     0.1.8
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1173	 ParSpMatVec=0.0169	 speedup=6.9563
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1173	 ParSpMatVec=0.0083	 speedup=14.2096
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1173	 ParSpMatVec=0.0086	 speedup=13.6993
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1173	 ParSpMatVec=0.0071	 speedup=16.4395
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1173	 ParSpMatVec=0.0070	 speedup=16.7060
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1144	 ParSpMatVec=0.0433	 speedup=2.6427
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1144	 ParSpMatVec=0.0142	 speedup=8.0736
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1144	 ParSpMatVec=0.0099	 speedup=11.5770
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1144	 ParSpMatVec=0.0106	 speedup=10.7631
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1144	 ParSpMatVec=0.0144	 speedup=7.9301

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0311	 ParSpMatVec=0.0299	 speedup=1.0391
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0311	 ParSpMatVec=0.0147	 speedup=2.1181
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0311	 ParSpMatVec=0.0100	 speedup=3.1191
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0311	 ParSpMatVec=0.0105	 speedup=2.9632
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0311	 ParSpMatVec=0.0139	 speedup=2.2364

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0508	 ParSpMatVec=0.0382	 speedup=1.3297
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0508	 ParSpMatVec=0.0020	 speedup=25.3771
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0508	 ParSpMatVec=0.0020	 speedup=25.1572
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0508	 ParSpMatVec=0.0020	 speedup=25.5604
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0508	 ParSpMatVec=0.0018	 speedup=28.5975

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0068	 ParSpMatVec=0.0430	 speedup=0.1591
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0068	 ParSpMatVec=0.0045	 speedup=1.5354
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0068	 ParSpMatVec=0.0024	 speedup=2.8078
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0068	 ParSpMatVec=0.0043	 speedup=1.5851
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0068	 ParSpMatVec=0.0022	 speedup=3.0882

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0439	 ParSpMatVec=0.0433	 speedup=1.0135
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0439	 ParSpMatVec=0.0047	 speedup=9.3685
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0439	 ParSpMatVec=0.0022	 speedup=19.5621
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0439	 ParSpMatVec=0.0033	 speedup=13.1376
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0439	 ParSpMatVec=0.0032	 speedup=13.8734

INFO: ParSpMatVec tests passed

>>> End of log
