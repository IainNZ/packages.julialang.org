>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.7
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.2
INFO: Installing URIParser v0.1.8
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-117-generic #164-Ubuntu SMP Fri Apr 7 11:05:26 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1197.87109375 MB free)
Uptime: 21083.0 sec
Load Avg:  0.99365234375  0.9853515625  1.0185546875
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz     994251 s       1589 s      79730 s     821783 s         41 s
#2  3499 MHz     666320 s       5753 s      66451 s    1293784 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.9.1
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.7
 - Compat                        0.24.0
 - SHA                           0.3.2
 - URIParser                     0.1.8
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1489	 ParSpMatVec=0.0179	 speedup=8.3111
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1489	 ParSpMatVec=0.0151	 speedup=9.8724
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1489	 ParSpMatVec=0.0155	 speedup=9.6243
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1489	 ParSpMatVec=0.0091	 speedup=16.4527
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1489	 ParSpMatVec=0.0119	 speedup=12.5276
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0795	 ParSpMatVec=0.0413	 speedup=1.9228
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0795	 ParSpMatVec=0.0240	 speedup=3.3057
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0795	 ParSpMatVec=0.0154	 speedup=5.1466
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0795	 ParSpMatVec=0.0143	 speedup=5.5641
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0795	 ParSpMatVec=0.0205	 speedup=3.8702

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0341	 ParSpMatVec=0.0301	 speedup=1.1337
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0341	 ParSpMatVec=0.0132	 speedup=2.5780
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0341	 ParSpMatVec=0.0148	 speedup=2.3078
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0341	 ParSpMatVec=0.0136	 speedup=2.5081
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0341	 ParSpMatVec=0.0136	 speedup=2.5117

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0349	 ParSpMatVec=0.0523	 speedup=0.6666
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0349	 ParSpMatVec=0.0024	 speedup=14.2579
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0349	 ParSpMatVec=0.0028	 speedup=12.5839
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0349	 ParSpMatVec=0.0040	 speedup=8.6892
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0349	 ParSpMatVec=0.0030	 speedup=11.5551

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0097	 ParSpMatVec=0.0364	 speedup=0.2667
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0097	 ParSpMatVec=0.0031	 speedup=3.1315
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0097	 ParSpMatVec=0.0039	 speedup=2.4603
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0097	 ParSpMatVec=0.0024	 speedup=3.9785
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0097	 ParSpMatVec=0.0337	 speedup=0.2883

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0539	 ParSpMatVec=0.0478	 speedup=1.1268
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0539	 ParSpMatVec=0.0047	 speedup=11.5830
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0539	 ParSpMatVec=0.0022	 speedup=24.7153
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0539	 ParSpMatVec=0.0062	 speedup=8.6759
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0539	 ParSpMatVec=0.0046	 speedup=11.8458

INFO: ParSpMatVec tests passed

>>> End of log
