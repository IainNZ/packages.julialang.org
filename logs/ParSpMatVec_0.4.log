>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.7
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.3
INFO: Installing URIParser v0.1.8
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-128-generic #177-Ubuntu SMP Tue Aug 8 11:40:23 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1168.23046875 MB free)
Uptime: 22876.0 sec
Load Avg:  1.0029296875  0.99658203125  1.00439453125
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz    1072624 s       2135 s      87102 s     899748 s         35 s
#2  3500 MHz     760547 s       4643 s      74995 s    1355903 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.9.1
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.7
 - Compat                        0.26.0
 - SHA                           0.3.3
 - URIParser                     0.1.8
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1301	 ParSpMatVec=0.0273	 speedup=4.7721
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1301	 ParSpMatVec=0.0097	 speedup=13.3869
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1301	 ParSpMatVec=0.0139	 speedup=9.3376
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1301	 ParSpMatVec=0.0167	 speedup=7.7871
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1301	 ParSpMatVec=0.0059	 speedup=21.9603
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1224	 ParSpMatVec=0.0419	 speedup=2.9188
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1224	 ParSpMatVec=0.0128	 speedup=9.5644
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1224	 ParSpMatVec=0.0118	 speedup=10.3905
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1224	 ParSpMatVec=0.0107	 speedup=11.4492
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1224	 ParSpMatVec=0.0191	 speedup=6.4162

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0308	 ParSpMatVec=0.0178	 speedup=1.7267
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0308	 ParSpMatVec=0.0125	 speedup=2.4629
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0308	 ParSpMatVec=0.0118	 speedup=2.6193
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0308	 ParSpMatVec=0.0085	 speedup=3.6248
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0308	 ParSpMatVec=0.0195	 speedup=1.5829

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0443	 ParSpMatVec=0.0438	 speedup=1.0108
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0443	 ParSpMatVec=0.0036	 speedup=12.2671
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0443	 ParSpMatVec=0.0028	 speedup=15.7225
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0443	 ParSpMatVec=0.0018	 speedup=25.1855
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0443	 ParSpMatVec=0.0021	 speedup=21.2272

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0099	 ParSpMatVec=0.0467	 speedup=0.2116
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0099	 ParSpMatVec=0.0041	 speedup=2.4203
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0099	 ParSpMatVec=0.0040	 speedup=2.4610
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0099	 ParSpMatVec=0.0125	 speedup=0.7932
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0099	 ParSpMatVec=0.0027	 speedup=3.7207

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0536	 ParSpMatVec=0.0518	 speedup=1.0353
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0536	 ParSpMatVec=0.0041	 speedup=13.1661
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0536	 ParSpMatVec=0.0023	 speedup=23.7907
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0536	 ParSpMatVec=0.0021	 speedup=25.3118
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0536	 ParSpMatVec=0.0020	 speedup=26.2448

INFO: ParSpMatVec tests passed

>>> End of log
