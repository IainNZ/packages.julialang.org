>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.7
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.3
INFO: Installing URIParser v0.1.8
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of ParSpMatVec
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-119-generic #166-Ubuntu SMP Wed May 3 12:18:55 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1184.1171875 MB free)
Uptime: 20381.0 sec
Load Avg:  0.90087890625  0.9443359375  0.9814453125
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz    1003698 s       2554 s      75890 s     752811 s         33 s
#2  3500 MHz     689774 s       4760 s      63830 s    1217146 s          1 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.9.1
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.7
 - Compat                        0.25.2
 - SHA                           0.3.3
 - URIParser                     0.1.8
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1212	 ParSpMatVec=0.0256	 speedup=4.7305
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1212	 ParSpMatVec=0.0081	 speedup=14.8853
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1212	 ParSpMatVec=0.0154	 speedup=7.8879
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1212	 ParSpMatVec=0.0079	 speedup=15.2539
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1212	 ParSpMatVec=0.0080	 speedup=15.0854
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0736	 ParSpMatVec=0.0249	 speedup=2.9582
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0736	 ParSpMatVec=0.0124	 speedup=5.9246
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0736	 ParSpMatVec=0.0144	 speedup=5.1143
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0736	 ParSpMatVec=0.0134	 speedup=5.5064
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0736	 ParSpMatVec=0.0137	 speedup=5.3572

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0299	 ParSpMatVec=0.0180	 speedup=1.6623
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0299	 ParSpMatVec=0.0150	 speedup=1.9863
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0299	 ParSpMatVec=0.0128	 speedup=2.3322
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0299	 ParSpMatVec=0.0137	 speedup=2.1791
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0299	 ParSpMatVec=0.0148	 speedup=2.0211

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0271	 ParSpMatVec=0.0239	 speedup=1.1321
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0271	 ParSpMatVec=0.0023	 speedup=11.7704
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0271	 ParSpMatVec=0.0025	 speedup=10.7276
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0271	 ParSpMatVec=0.0016	 speedup=17.1232
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0271	 ParSpMatVec=0.0015	 speedup=18.0728

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0065	 ParSpMatVec=0.0268	 speedup=0.2437
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0065	 ParSpMatVec=0.0040	 speedup=1.6335
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0065	 ParSpMatVec=0.0015	 speedup=4.2707
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0065	 ParSpMatVec=0.0018	 speedup=3.5551
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0065	 ParSpMatVec=0.0019	 speedup=3.3550

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0385	 ParSpMatVec=0.0265	 speedup=1.4533
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0385	 ParSpMatVec=0.0033	 speedup=11.7707
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0385	 ParSpMatVec=0.0023	 speedup=16.5885
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0385	 ParSpMatVec=0.0026	 speedup=14.9711
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0385	 ParSpMatVec=0.0024	 speedup=16.3690

INFO: ParSpMatVec tests passed

>>> End of log
