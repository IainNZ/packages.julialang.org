>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from https://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.2.0
INFO: Installing Requires v0.4.3
INFO: Package database updated

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.6.2
Commit d386e40c17 (2017-12-13 18:08 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-135-generic #184-Ubuntu SMP Wed Oct 18 11:55:51 UTC 2017 x86_64 x86_64
Memory: 2.93927001953125 GB (1682.71875 MB free)
Uptime: 66609.0 sec
Load Avg:  1.08154296875  1.03369140625  0.9931640625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz    4155178 s       6965 s     192481 s    1338283 s         52 s
#2  3500 MHz    1206681 s        114 s     116053 s    5179088 s          1 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.6
2 required packages:
 - DifferentialDynamicProgramming 0.2.0
 - JSON                          0.16.4
3 additional packages:
 - Compat                        0.54.0
 - Nullables                     0.0.3
 - Requires                      0.4.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
value = (x' * g + 0.5 * x' * H * x)[1] = 55583.80387249614
==========
Starting box-QP, dimension 500, initial value: 55583.804   
RESULT: Gradient norm smaller than tolerance.
iterations 18  gradient 2.73159e-12  final value -27.4863      factorizations 17
  2.884968 seconds (1.13 M allocations: 139.067 MiB, 1.27% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

---------- begin iLQG ----------
iteration     cost    reduction     expected    gradient    log10(lambda)
1           50.473      18.4        18.4        0.0898      0.0         
2           32.0985     11.4        11.4        0.0866      -0.2        
3           20.6857     6.82        6.82        0.101       -0.6        
4           13.8693     3.58        3.58        0.129       -1.2        
5           10.2915     2.28        2.28        0.223       -2.0        
6           8.00891     0.853       0.853       0.301       -3.1        
7           7.15621     0.0435      0.0435      0.094       -4.3        
8           7.11273     3.19e-05    3.19e-05    0.00284     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

            final cost:   7.112697    

            final grad:   4.089737e-06

            final lambda: 4.4841551e-08

            time / iter:  264   ms

            total time:   2.38  seconds, of which

            derivs:     2.1 %

            back pass:  37.3%

            fwd pass:   7.0 %

            other:      53.5% (graphics etc.)
 =========== end iLQG ===========
  8.589314 seconds (5.99 M allocations: 498.437 MiB, 2.71% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
