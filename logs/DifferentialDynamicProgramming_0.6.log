>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from https://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.2.0
INFO: Installing Requires v0.4.3
INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of DifferentialDynamicProgramming
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.6.0
Commit 9036443 (2017-06-19 13:05 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-121-generic #170-Ubuntu SMP Wed Jun 14 09:04:33 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1731.5078125 MB free)
Uptime: 45752.0 sec
Load Avg:  0.98486328125  0.96240234375  0.98095703125
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz    3000555 s       3468 s     143332 s     775327 s         35 s
#2  3499 MHz     931174 s       2814 s      85658 s    3453732 s          1 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.6
2 required packages:
 - DifferentialDynamicProgramming 0.2.0
 - JSON                          0.12.0
2 additional packages:
 - Compat                        0.26.0
 - Requires                      0.4.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
value = (x' * g + 0.5 * x' * H * x)[1] = 65818.14538259977
==========
Starting box-QP, dimension 500, initial value: 65818.145   
RESULT: Gradient norm smaller than tolerance.
iterations 20  gradient 2.90802e-12  final value -36.6873      factorizations 19
  3.766928 seconds (1.13 M allocations: 150.776 MiB, 1.03% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

---------- begin iLQG ----------
iteration     cost    reduction     expected    gradient    log10(lambda)
1           49.9128     15.1        15.1        0.0816      0.0         
2           34.7782     11.5        11.5        0.0825      -0.2        
3           23.3006     9.13        9.13        0.106       -0.6        
4           14.169      5.22        5.22        0.161       -1.2        
5           8.95093     1.86        1.86        0.229       -2.0        
6           7.09005     0.86        0.86        0.266       -3.1        
7           6.23053     0.0697      0.0697      0.1         -4.3        
8           6.1608      5.9e-05    5.9e-05    0.00355     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

            final cost:   6.160743    

            final grad:   5.771937e-06

            final lambda: 4.4841551e-08

            time / iter:  245   ms

            total time:   2.21  seconds, of which

            derivs:     2.1 %

            back pass:  32.1%

            fwd pass:   7.7 %

            other:      58.1% (graphics etc.)
 =========== end iLQG ===========
 10.597985 seconds (6.07 M allocations: 502.840 MiB, 2.43% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
