>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from https://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.2.0
INFO: Installing Requires v0.4.3
INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of DifferentialDynamicProgramming
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.6.2
Commit d386e40c17 (2017-12-13 18:08 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-135-generic #184-Ubuntu SMP Wed Oct 18 11:55:51 UTC 2017 x86_64 x86_64
Memory: 2.93927001953125 GB (2189.203125 MB free)
Uptime: 66439.0 sec
Load Avg:  0.9970703125  0.9853515625  0.9970703125
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz    4151460 s       7312 s     182780 s    1343619 s         66 s
#2  3500 MHz    1162184 s         68 s     117572 s    5225984 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.6
2 required packages:
 - DifferentialDynamicProgramming 0.2.0
 - JSON                          0.17.1
3 additional packages:
 - Compat                        0.56.0
 - Nullables                     0.0.4
 - Requires                      0.4.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
value = (x' * g + 0.5 * x' * H * x)[1] = 69810.68504619082
==========
Starting box-QP, dimension 500, initial value: 69810.685   
RESULT: Gradient norm smaller than tolerance.
iterations 17  gradient 3.34723e-12  final value -34.6426      factorizations 16
  2.902346 seconds (1.13 M allocations: 133.809 MiB, 1.02% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

---------- begin iLQG ----------
iteration     cost    reduction     expected    gradient    log10(lambda)
1           49.8264     26.2        26.2        0.112       0.0         
2           23.669      11.1        11.1        0.0827      -0.2        
3           12.5656     5.04        5.04        0.0785      -0.6        
4           7.5221      2.53        2.53        0.0894      -1.2        
5           4.99448     1.33        1.33        0.153       -2.0        
6           3.66215     0.424       0.424       0.171       -3.1        
7           3.23816     0.0289      0.0289      0.0613      -4.3        
8           3.20925     3.43e-05    3.43e-05    0.00231     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

            final cost:   3.209217    

            final grad:   3.853346e-06

            final lambda: 4.4841551e-08

            time / iter:  343   ms

            total time:   3.09  seconds, of which

            derivs:     1.7 %

            back pass:  32.5%

            fwd pass:   5.4 %

            other:      60.4% (graphics etc.)
 =========== end iLQG ===========
 11.052295 seconds (5.99 M allocations: 498.436 MiB, 2.16% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
