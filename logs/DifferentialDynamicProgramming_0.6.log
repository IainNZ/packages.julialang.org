>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from https://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.2.0
INFO: Installing Requires v0.4.3
INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of DifferentialDynamicProgramming
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.6.0
Commit 9036443 (2017-06-19 13:05 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-132-generic #181-Ubuntu SMP Wed Sep 13 13:25:03 UTC 2017 x86_64 x86_64
Memory: 2.93927001953125 GB (1677.6640625 MB free)
Uptime: 48305.0 sec
Load Avg:  0.9697265625  0.9599609375  1.01806640625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3498 MHz    3159596 s       5409 s     145234 s     774582 s         10 s
#2  3498 MHz     811218 s        408 s      91808 s    3816983 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.6
2 required packages:
 - DifferentialDynamicProgramming 0.2.0
 - JSON                          0.15.1
2 additional packages:
 - Compat                        0.32.0
 - Requires                      0.4.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
value = (x' * g + 0.5 * x' * H * x)[1] = 57461.83390392303
==========
Starting box-QP, dimension 500, initial value: 57461.834   
RESULT: Gradient norm smaller than tolerance.
iterations 25  gradient 3.05056e-12  final value -31.6442      factorizations 24
  2.913075 seconds (1.14 M allocations: 180.227 MiB, 1.34% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

---------- begin iLQG ----------
iteration     cost    reduction     expected    gradient    log10(lambda)
1           49.0955     24.2        24.2        0.101       0.0         
2           24.901      10.4        10.4        0.0792      -0.2        
3           14.457      5.33        5.33        0.0843      -0.6        
4           9.12385     3.1         3.1         0.112       -1.2        
5           6.01933     1.77        1.77        0.186       -2.0        
6           4.24481     0.611       0.611       0.223       -3.1        
7           3.63369     0.0374      0.0374      0.0747      -4.3        
8           3.59624     3.82e-05    3.82e-05    0.00265     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

            final cost:   3.596202    

            final grad:   4.223621e-06

            final lambda: 4.4841551e-08

            time / iter:  353   ms

            total time:   3.18  seconds, of which

            derivs:     2.4 %

            back pass:  32.2%

            fwd pass:   7.4 %

            other:      58.1% (graphics etc.)
 =========== end iLQG ===========
  9.846697 seconds (6.07 M allocations: 502.839 MiB, 2.12% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
