>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from https://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.2.0
INFO: Installing Requires v0.4.3
INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of DifferentialDynamicProgramming
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.6.2
Commit d386e40c17 (2017-12-13 18:08 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-135-generic #184-Ubuntu SMP Wed Oct 18 11:55:51 UTC 2017 x86_64 x86_64
Memory: 2.93927001953125 GB (2132.45703125 MB free)
Uptime: 61693.0 sec
Load Avg:  0.98779296875  0.998046875  1.029296875
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz    3925728 s         65 s     176600 s    1147871 s         38 s
#2  3499 MHz    1160262 s        103 s     109658 s    4784052 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.6
2 required packages:
 - DifferentialDynamicProgramming 0.2.0
 - JSON                          0.16.4
3 additional packages:
 - Compat                        0.49.0
 - Nullables                     0.0.3
 - Requires                      0.4.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
value = (x' * g + 0.5 * x' * H * x)[1] = 63766.92228382436
==========
Starting box-QP, dimension 500, initial value: 63766.922   
RESULT: Gradient norm smaller than tolerance.
iterations 17  gradient 2.92445e-12  final value -25.2561      factorizations 16
  3.767039 seconds (1.13 M allocations: 133.774 MiB, 0.91% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

---------- begin iLQG ----------
iteration     cost    reduction     expected    gradient    log10(lambda)
1           50.8044     29          29          0.116       0.0         
2           21.8515     9.61        9.61        0.0794      -0.2        
3           12.2368     3.44        3.44        0.0641      -0.6        
4           8.79427     1.2         1.2         0.0717      -1.2        
5           7.59795     0.463       0.463       0.107       -2.0        
6           7.13472     0.168       0.168       0.12        -3.1        
7           6.96715     0.0135      0.0135      0.0482      -4.3        
8           6.95368     1.72e-05    1.72e-05    0.00206     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

            final cost:   6.953658    

            final grad:   3.444225e-06

            final lambda: 4.4841551e-08

            time / iter:  389   ms

            total time:   3.50  seconds, of which

            derivs:     2.2 %

            back pass:  32.7%

            fwd pass:   7.6 %

            other:      57.4% (graphics etc.)
 =========== end iLQG ===========
 12.407750 seconds (5.99 M allocations: 498.437 MiB, 1.95% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
