>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from https://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.2.0
INFO: Installing Requires v0.4.4
INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of DifferentialDynamicProgramming
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.6.3
Commit d55cadc350 (2018-05-28 20:20 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-143-generic #192-Ubuntu SMP Tue Feb 27 10:45:36 UTC 2018 x86_64 x86_64
Memory: 2.939197540283203 GB (1983.0625 MB free)
Uptime: 64657.0 sec
Load Avg:  0.9970703125  0.9853515625  1.01318359375
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz    4095392 s       4281 s     289369 s    1099397 s         12 s
#2  3500 MHz     987164 s       1136 s     135625 s    5218521 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.6
2 required packages:
 - DifferentialDynamicProgramming 0.2.0
 - JSON                          0.17.2
3 additional packages:
 - Compat                        0.69.0
 - Nullables                     0.0.5
 - Requires                      0.4.4
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
value = (x' * g + 0.5 * x' * H * x)[1] = 60307.620035945205
==========
Starting box-QP, dimension 500, initial value: 60307.620   
RESULT: Gradient norm smaller than tolerance.
iterations 15  gradient 2.77014e-12  final value -24.9574      factorizations 14
  2.200510 seconds (1.13 M allocations: 123.212 MiB, 1.28% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

---------- begin iLQG ----------
iteration     cost    reduction     expected    gradient    log10(lambda)
1           51.0549     20.5        20.5        0.0953      0.0         
2           30.5272     11.4        11.4        0.0822      -0.2        
3           19.1002     7.45        7.45        0.095       -0.6        
4           11.6455     4.34        4.34        0.139       -1.2        
5           7.31006     2.02        2.02        0.213       -2.0        
6           5.29502     0.597       0.597       0.227       -3.1        
7           4.69825     0.0358      0.0358      0.066       -4.3        
8           4.66244     4.07e-05    4.07e-05    0.00246     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

            final cost:   4.6624      

            final grad:   3.814904e-06

            final lambda: 4.4841551e-08

            time / iter:  209   ms

            total time:   1.88  seconds, of which

            derivs:     2.2 %

            back pass:  34.5%

            fwd pass:   8.2 %

            other:      55.1% (graphics etc.)
 =========== end iLQG ===========
  6.454107 seconds (5.99 M allocations: 500.604 MiB, 3.10% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
