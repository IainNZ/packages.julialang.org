>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from https://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.2.0
INFO: Installing Requires v0.4.3
INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of DifferentialDynamicProgramming
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.6.2
Commit d386e40c17 (2017-12-13 18:08 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-143-generic #192-Ubuntu SMP Tue Feb 27 10:45:36 UTC 2018 x86_64 x86_64
Memory: 2.939197540283203 GB (2336.44140625 MB free)
Uptime: 75780.0 sec
Load Avg:  1.0029296875  0.98828125  1.029296875
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz    4646735 s       6767 s     298131 s    1575729 s         52 s
#2  3500 MHz    1376011 s       1316 s     163974 s    5894332 s          1 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.6
2 required packages:
 - DifferentialDynamicProgramming 0.2.0
 - JSON                          0.17.2
3 additional packages:
 - Compat                        0.64.0
 - Nullables                     0.0.5
 - Requires                      0.4.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
value = (x' * g + 0.5 * x' * H * x)[1] = 62636.95462758067
==========
Starting box-QP, dimension 500, initial value: 62636.955   
RESULT: Gradient norm smaller than tolerance.
iterations 15  gradient 2.91229e-12  final value -26.8427      factorizations 14
  4.201480 seconds (1.13 M allocations: 121.726 MiB, 0.82% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

---------- begin iLQG ----------
iteration     cost    reduction     expected    gradient    log10(lambda)
1           49.2631     26.9        26.9        0.115       0.0         
2           22.3434     10.4        10.4        0.0827      -0.2        
3           11.9148     4.32        4.32        0.0723      -0.6        
4           7.59309     2.23        2.23        0.0944      -1.2        
5           5.36003     0.997       0.997       0.146       -2.0        
6           4.36278     0.25        0.25        0.167       -3.1        
7           4.11303     0.0112      0.0112      0.058       -4.3        
8           4.10179     9.41e-06    9.41e-06    0.00206     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

            final cost:   4.10178     

            final grad:   3.310283e-06

            final lambda: 4.4841551e-08

            time / iter:  284   ms

            total time:   2.55  seconds, of which

            derivs:     2.9 %

            back pass:  33.6%

            fwd pass:   10.5%

            other:      53.0% (graphics etc.)
 =========== end iLQG ===========
 10.271645 seconds (5.99 M allocations: 498.436 MiB, 2.40% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
