>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from https://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.2.0
INFO: Installing Requires v0.4.3
INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of DifferentialDynamicProgramming
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.6.2
Commit d386e40c17 (2017-12-13 18:08 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-143-generic #192-Ubuntu SMP Tue Feb 27 10:45:36 UTC 2018 x86_64 x86_64
Memory: 2.939197540283203 GB (2163.9765625 MB free)
Uptime: 71793.0 sec
Load Avg:  0.896484375  0.96875  1.02392578125
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3509 MHz    4368471 s       2380 s     296435 s    1547153 s         52 s
#2  3509 MHz    1294918 s       4396 s     156696 s    5576115 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.6
2 required packages:
 - DifferentialDynamicProgramming 0.2.0
 - JSON                          0.17.2
3 additional packages:
 - Compat                        0.63.0
 - Nullables                     0.0.5
 - Requires                      0.4.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
value = (x' * g + 0.5 * x' * H * x)[1] = 63534.84981027003
==========
Starting box-QP, dimension 500, initial value: 63534.850   
RESULT: Gradient norm smaller than tolerance.
iterations 18  gradient 3.21776e-12  final value -26.5763      factorizations 17
  3.035479 seconds (1.13 M allocations: 138.813 MiB, 1.06% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

---------- begin iLQG ----------
iteration     cost    reduction     expected    gradient    log10(lambda)
1           51.518      26.4        26.4        0.114       0.0         
2           25.1538     11          11          0.0858      -0.2        
3           14.1058     4.62        4.62        0.0774      -0.6        
4           9.48181     2.23        2.23        0.0876      -1.2        
5           7.25337     1.38        1.38        0.15        -2.0        
6           5.87073     0.687       0.687       0.192       -3.1        
7           5.1838      0.0518      0.0518      0.0681      -4.3        
8           5.13195     5.74e-05    5.74e-05    0.00266     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

            final cost:   5.131891    

            final grad:   4.266517e-06

            final lambda: 4.4841551e-08

            time / iter:  369   ms

            total time:   3.32  seconds, of which

            derivs:     2.6 %

            back pass:  39.0%

            fwd pass:   6.4 %

            other:      52.0% (graphics etc.)
 =========== end iLQG ===========
 10.622350 seconds (5.99 M allocations: 498.437 MiB, 2.51% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
