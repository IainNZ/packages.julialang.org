>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from https://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.2.0
INFO: Installing Requires v0.4.3
INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of DifferentialDynamicProgramming
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.6.2
Commit d386e40c17 (2017-12-13 18:08 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-135-generic #184-Ubuntu SMP Wed Oct 18 11:55:51 UTC 2017 x86_64 x86_64
Memory: 2.93927001953125 GB (1714.96875 MB free)
Uptime: 67345.0 sec
Load Avg:  1.03076171875  1.001953125  0.99169921875
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz    4088474 s       2852 s     183089 s    1516814 s         55 s
#2  3500 MHz    1204404 s       4643 s     120152 s    5249262 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.6
2 required packages:
 - DifferentialDynamicProgramming 0.2.0
 - JSON                          0.17.1
3 additional packages:
 - Compat                        0.55.1
 - Nullables                     0.0.3
 - Requires                      0.4.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
value = (x' * g + 0.5 * x' * H * x)[1] = 63117.608272223864
==========
Starting box-QP, dimension 500, initial value: 63117.608   
RESULT: Gradient norm smaller than tolerance.
iterations 16  gradient 2.70297e-12  final value -32.1481      factorizations 15
  3.370545 seconds (1.13 M allocations: 129.417 MiB, 1.09% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

---------- begin iLQG ----------
iteration     cost    reduction     expected    gradient    log10(lambda)
1           49.5006     15.9        15.9        0.0904      0.0         
2           33.628      9.06        9.06        0.0778      -0.2        
3           24.5683     7.25        7.25        0.102       -0.6        
4           17.3191     6.43        6.43        0.181       -1.2        
5           10.8864     3.45        3.45        0.255       -2.0        
6           7.43529     0.743       0.743       0.205       -3.1        
7           6.69207     0.0379      0.0379      0.0615      -4.3        
8           6.65417     4.12e-05    4.12e-05    0.00225     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

            final cost:   6.654126    

            final grad:   3.592237e-06

            final lambda: 4.4841551e-08

            time / iter:  406   ms

            total time:   3.65  seconds, of which

            derivs:     2.4 %

            back pass:  34.1%

            fwd pass:   6.2 %

            other:      57.4% (graphics etc.)
 =========== end iLQG ===========
  9.939056 seconds (5.99 M allocations: 498.436 MiB, 2.42% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
