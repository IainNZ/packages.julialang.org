>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from https://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.2.0
INFO: Installing Requires v0.4.4
INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of DifferentialDynamicProgramming
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.6.4
Commit 9d11f62bcb (2018-07-09 19:09 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-143-generic #192-Ubuntu SMP Tue Feb 27 10:45:36 UTC 2018 x86_64 x86_64
Memory: 2.939197540283203 GB (1971.265625 MB free)
Uptime: 65638.0 sec
Load Avg:  1.0029296875  1.0146484375  1.01708984375
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz    4022133 s       3277 s     292588 s    1290343 s         10 s
#2  3499 MHz    1053755 s         56 s     127738 s    5251297 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem MAX_THREADS=16)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.6
2 required packages:
 - DifferentialDynamicProgramming 0.2.0
 - JSON                          0.17.2
3 additional packages:
 - Compat                        0.70.0
 - Nullables                     0.0.6
 - Requires                      0.4.4
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
value = (x' * g + 0.5 * x' * H * x)[1] = 71251.88927040875
==========
Starting box-QP, dimension 500, initial value: 71251.889   
RESULT: Gradient norm smaller than tolerance.
iterations 19  gradient 3.34912e-12  final value -34.6042      factorizations 18
  2.239753 seconds (1.13 M allocations: 143.462 MiB, 1.08% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

---------- begin iLQG ----------
iteration     cost    reduction     expected    gradient    log10(lambda)
1           50.8942     17.7        17.7        0.0921      0.0         
2           33.1981     10.6        10.6        0.0859      -0.2        
3           22.6274     6.25        6.25        0.097       -0.6        
4           16.3801     3.71        3.71        0.135       -1.2        
5           12.6717     2.21        2.21        0.223       -2.0        
6           10.4584     0.431       0.431       0.224       -3.1        
7           10.0271     0.0134      0.0134      0.0643      -4.3        
8           10.0137     1.23e-05    1.23e-05    0.00218     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

            final cost:   10.0137     

            final grad:   3.470475e-06

            final lambda: 4.4841551e-08

            time / iter:  221   ms

            total time:   1.99  seconds, of which

            derivs:     2.1 %

            back pass:  34.2%

            fwd pass:   8.1 %

            other:      55.6% (graphics etc.)
 =========== end iLQG ===========
  6.984409 seconds (5.99 M allocations: 499.869 MiB, 2.55% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
