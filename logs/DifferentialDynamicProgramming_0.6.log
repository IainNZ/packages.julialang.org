>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from https://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.2.0
INFO: Installing Requires v0.4.3
INFO: Package database updated

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.6.2
Commit d386e40c17 (2017-12-13 18:08 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-143-generic #192-Ubuntu SMP Tue Feb 27 10:45:36 UTC 2018 x86_64 x86_64
Memory: 2.939197540283203 GB (2336.4765625 MB free)
Uptime: 75103.0 sec
Load Avg:  1.03369140625  1.0146484375  0.9970703125
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz    4621072 s       7075 s     318347 s    1556671 s         58 s
#2  3500 MHz    1359428 s        934 s     161584 s    5836360 s          2 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.6
2 required packages:
 - DifferentialDynamicProgramming 0.2.0
 - JSON                          0.17.2
3 additional packages:
 - Compat                        0.64.0
 - Nullables                     0.0.5
 - Requires                      0.4.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
value = (x' * g + 0.5 * x' * H * x)[1] = 68135.64659695921
==========
Starting box-QP, dimension 500, initial value: 68135.647   
RESULT: Gradient norm smaller than tolerance.
iterations 13  gradient 2.99519e-12  final value -32.5149      factorizations 12
  2.742592 seconds (1.13 M allocations: 111.817 MiB, 0.88% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

---------- begin iLQG ----------
iteration     cost    reduction     expected    gradient    log10(lambda)
1           49.4677     25.5        25.5        0.112       0.0         
2           23.9216     9.94        9.94        0.0812      -0.2        
3           13.9817     4.38        4.38        0.0718      -0.6        
4           9.6009      2.46        2.46        0.0875      -1.2        
5           7.13702     1.2         1.2         0.149       -2.0        
6           5.93797     0.366       0.366       0.162       -3.1        
7           5.57151     0.0284      0.0284      0.0644      -4.3        
8           5.54307     3.64e-05    3.64e-05    0.0025      -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

            final cost:   5.543036    

            final grad:   4.114422e-06

            final lambda: 4.4841551e-08

            time / iter:  257   ms

            total time:   2.31  seconds, of which

            derivs:     3.1 %

            back pass:  32.4%

            fwd pass:   7.5 %

            other:      57.0% (graphics etc.)
 =========== end iLQG ===========
  9.698324 seconds (5.99 M allocations: 498.437 MiB, 1.92% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
