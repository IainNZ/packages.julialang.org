>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from https://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.2.0
INFO: Installing Requires v0.4.3
INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of DifferentialDynamicProgramming
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.6.0
Commit 9036443 (2017-06-19 13:05 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-121-generic #170-Ubuntu SMP Wed Jun 14 09:04:33 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1758.68359375 MB free)
Uptime: 46866.0 sec
Load Avg:  0.99560546875  0.986328125  1.03466796875
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz    3004332 s         85 s     147966 s     867577 s         42 s
#2  3500 MHz    1015012 s       5889 s      88160 s    3470501 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.6
2 required packages:
 - DifferentialDynamicProgramming 0.2.0
 - JSON                          0.13.0
2 additional packages:
 - Compat                        0.27.0
 - Requires                      0.4.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
value = (x' * g + 0.5 * x' * H * x)[1] = 69496.271589341
==========
Starting box-QP, dimension 500, initial value: 69496.272   
RESULT: Gradient norm smaller than tolerance.
iterations 15  gradient 2.90939e-12  final value -25.7448      factorizations 14
  4.288158 seconds (1.13 M allocations: 122.484 MiB, 1.00% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

---------- begin iLQG ----------
iteration     cost    reduction     expected    gradient    log10(lambda)
1           50.4889     18.7        18.7        0.0951      0.0         
2           31.8122     9.73        9.73        0.0813      -0.2        
3           22.0871     5.68        5.68        0.0888      -0.6        
4           16.4024     3.86        3.86        0.142       -1.2        
5           12.5458     2.2         2.2         0.249       -2.0        
6           10.3494     0.535       0.535       0.22        -3.1        
7           9.81423     0.0285      0.0285      0.0587      -4.3        
8           9.78569     3.23e-05    3.23e-05    0.00204     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

            final cost:   9.785658    

            final grad:   3.418121e-06

            final lambda: 4.4841551e-08

            time / iter:  325   ms

            total time:   2.92  seconds, of which

            derivs:     2.6 %

            back pass:  33.9%

            fwd pass:   5.4 %

            other:      58.0% (graphics etc.)
 =========== end iLQG ===========
  9.789557 seconds (6.07 M allocations: 502.839 MiB, 2.24% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
