>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from https://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.2.0
INFO: Installing Requires v0.4.4
INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of DifferentialDynamicProgramming
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.6.4
Commit 9d11f62bcb (2018-07-09 19:09 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-143-generic #192-Ubuntu SMP Tue Feb 27 10:45:36 UTC 2018 x86_64 x86_64
Memory: 2.939197540283203 GB (1986.9453125 MB free)
Uptime: 63359.0 sec
Load Avg:  1.0595703125  1.0146484375  1.04541015625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz    4016268 s        833 s     277188 s    1055530 s          6 s
#2  3499 MHz     940432 s       4749 s     137379 s    5148182 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem MAX_THREADS=16)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.6
2 required packages:
 - DifferentialDynamicProgramming 0.2.0
 - JSON                          0.17.2
3 additional packages:
 - Compat                        0.69.0
 - Nullables                     0.0.6
 - Requires                      0.4.4
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
value = (x' * g + 0.5 * x' * H * x)[1] = 62863.637136969795
==========
Starting box-QP, dimension 500, initial value: 62863.637   
RESULT: Gradient norm smaller than tolerance.
iterations 18  gradient 3.14709e-12  final value -25.9331      factorizations 17
  2.171227 seconds (1.13 M allocations: 138.800 MiB, 1.09% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

---------- begin iLQG ----------
iteration     cost    reduction     expected    gradient    log10(lambda)
1           51.2973     28.4        28.4        0.114       0.0         
2           22.8714     9.51        9.51        0.0796      -0.2        
3           13.3569     4.46        4.46        0.0781      -0.6        
4           8.89952     3.07        3.07        0.113       -1.2        
5           5.83045     1.39        1.39        0.171       -2.0        
6           4.44188     0.266       0.266       0.152       -3.1        
7           4.17599     0.0116      0.0116      0.054       -4.3        
8           4.16441     1.13e-05    1.13e-05    0.00202     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

            final cost:   4.164401    

            final grad:   3.331444e-06

            final lambda: 4.4841551e-08

            time / iter:  207   ms

            total time:   1.86  seconds, of which

            derivs:     2.3 %

            back pass:  34.4%

            fwd pass:   6.9 %

            other:      56.4% (graphics etc.)
 =========== end iLQG ===========
  7.046554 seconds (5.99 M allocations: 499.869 MiB, 2.76% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
