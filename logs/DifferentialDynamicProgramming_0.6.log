>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from https://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.2.0
INFO: Installing Requires v0.4.3
INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of DifferentialDynamicProgramming
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.6.0
Commit 9036443 (2017-06-19 13:05 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-121-generic #170-Ubuntu SMP Wed Jun 14 09:04:33 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1709.42578125 MB free)
Uptime: 47644.0 sec
Load Avg:  1.0029296875  0.99755859375  1.04150390625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3501 MHz    3061939 s       5714 s     143141 s     885572 s         35 s
#2  3501 MHz     981964 s       1186 s      85764 s    3580832 s          2 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.6
2 required packages:
 - DifferentialDynamicProgramming 0.2.0
 - JSON                          0.13.0
2 additional packages:
 - Compat                        0.28.0
 - Requires                      0.4.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
value = (x' * g + 0.5 * x' * H * x)[1] = 81100.49721061438
==========
Starting box-QP, dimension 500, initial value: 81100.497   
RESULT: Gradient norm smaller than tolerance.
iterations 14  gradient 2.95799e-12  final value -33.0243      factorizations 13
  3.551361 seconds (1.12 M allocations: 117.885 MiB, 1.11% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

---------- begin iLQG ----------
iteration     cost    reduction     expected    gradient    log10(lambda)
1           50.7806     24.2        24.2        0.109       0.0         
2           26.5724     11.3        11.3        0.088       -0.2        
3           15.2384     5.82        5.82        0.0892      -0.6        
4           9.42204     2.92        2.92        0.111       -1.2        
5           6.49859     1.44        1.44        0.157       -2.0        
6           5.05665     0.486       0.486       0.17        -3.1        
7           4.57071     0.0324      0.0324      0.0609      -4.3        
8           4.53833     3.8e-05    3.8e-05    0.00235     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

            final cost:   4.538289    

            final grad:   3.867054e-06

            final lambda: 4.4841551e-08

            time / iter:  240   ms

            total time:   2.16  seconds, of which

            derivs:     2.5 %

            back pass:  31.8%

            fwd pass:   7.2 %

            other:      58.5% (graphics etc.)
 =========== end iLQG ===========
 11.133759 seconds (6.07 M allocations: 502.839 MiB, 1.94% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
