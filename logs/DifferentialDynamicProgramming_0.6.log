>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from https://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.2.0
INFO: Installing Requires v0.4.3
INFO: Package database updated

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.6.2
Commit d386e40c17 (2017-12-13 18:08 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-143-generic #192-Ubuntu SMP Tue Feb 27 10:45:36 UTC 2018 x86_64 x86_64
Memory: 2.939197540283203 GB (2337.578125 MB free)
Uptime: 75122.0 sec
Load Avg:  1.0244140625  0.9853515625  1.00244140625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz    4529656 s       4710 s     323029 s    1607439 s         42 s
#2  3499 MHz    1212784 s       2654 s     158363 s    5989899 s          1 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.6
2 required packages:
 - DifferentialDynamicProgramming 0.2.0
 - JSON                          0.17.2
3 additional packages:
 - Compat                        0.64.0
 - Nullables                     0.0.5
 - Requires                      0.4.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
value = (x' * g + 0.5 * x' * H * x)[1] = 66051.12037356323
==========
Starting box-QP, dimension 500, initial value: 66051.120   
RESULT: Gradient norm smaller than tolerance.
iterations 22  gradient 2.99151e-12  final value -31.7421      factorizations 21
  3.515395 seconds (1.14 M allocations: 159.978 MiB, 0.77% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

---------- begin iLQG ----------
iteration     cost    reduction     expected    gradient    log10(lambda)
1           48.8664     25.2        25.2        0.113       0.0         
2           23.6912     10.2        10.2        0.0845      -0.2        
3           13.5216     4.65        4.65        0.0784      -0.6        
4           8.86738     2.77        2.77        0.0992      -1.2        
5           6.09306     1.85        1.85        0.162       -2.0        
6           4.23947     0.446       0.446       0.191       -3.1        
7           3.7932      0.0132      0.0132      0.0573      -4.3        
8           3.77998     9.61e-06    9.61e-06    0.00206     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

            final cost:   3.779972    

            final grad:   3.343798e-06

            final lambda: 4.4841551e-08

            time / iter:  357   ms

            total time:   3.22  seconds, of which

            derivs:     2.4 %

            back pass:  37.2%

            fwd pass:   5.4 %

            other:      55.1% (graphics etc.)
 =========== end iLQG ===========
 11.272583 seconds (5.99 M allocations: 498.436 MiB, 2.25% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
