>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from https://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.2.0
INFO: Installing Requires v0.4.3
INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of DifferentialDynamicProgramming
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.6.2
Commit d386e40c17 (2017-12-13 18:08 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-143-generic #192-Ubuntu SMP Tue Feb 27 10:45:36 UTC 2018 x86_64 x86_64
Memory: 2.939197540283203 GB (2337.73828125 MB free)
Uptime: 72594.0 sec
Load Avg:  1.216796875  1.07373046875  1.064453125
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3491 MHz    4489369 s       2422 s     323275 s    1433098 s         59 s
#2  3491 MHz    1189067 s       4996 s     162798 s    5745835 s          1 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.6
2 required packages:
 - DifferentialDynamicProgramming 0.2.0
 - JSON                          0.17.2
3 additional packages:
 - Compat                        0.63.0
 - Nullables                     0.0.5
 - Requires                      0.4.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
value = (x' * g + 0.5 * x' * H * x)[1] = 61588.16183776305
==========
Starting box-QP, dimension 500, initial value: 61588.162   
RESULT: Gradient norm smaller than tolerance.
iterations 17  gradient 3.12434e-12  final value -35.3625      factorizations 16
  4.706869 seconds (1.13 M allocations: 132.711 MiB, 0.77% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

---------- begin iLQG ----------
iteration     cost    reduction     expected    gradient    log10(lambda)
1           50.6098     17.6        17.6        0.0906      0.0         
2           32.9999     10.5        10.5        0.0814      -0.2        
3           22.4776     7.82        7.82        0.101       -0.6        
4           14.6561     5.5         5.5         0.158       -1.2        
5           9.16063     2.27        2.27        0.226       -2.0        
6           6.89399     0.335       0.335       0.185       -3.1        
7           6.55907     0.0105      0.0105      0.0555      -4.3        
8           6.54861     9.82e-06    9.82e-06    0.00197     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

            final cost:   6.548597    

            final grad:   3.211748e-06

            final lambda: 4.4841551e-08

            time / iter:  400   ms

            total time:   3.60  seconds, of which

            derivs:     2.6 %

            back pass:  30.3%

            fwd pass:   7.7 %

            other:      59.4% (graphics etc.)
 =========== end iLQG ===========
 11.847134 seconds (5.99 M allocations: 498.437 MiB, 1.74% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
