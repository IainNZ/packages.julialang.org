>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from https://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.2.0
INFO: Installing Requires v0.4.3
INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of DifferentialDynamicProgramming
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.6.2
Commit d386e40c17 (2017-12-13 18:08 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-135-generic #184-Ubuntu SMP Wed Oct 18 11:55:51 UTC 2017 x86_64 x86_64
Memory: 2.93927001953125 GB (1705.1796875 MB free)
Uptime: 63157.0 sec
Load Avg:  1.01416015625  1.00390625  1.04541015625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz    4071036 s       2313 s     181232 s    1135663 s         40 s
#2  3499 MHz    1084860 s       4689 s     111188 s    5005888 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.6
2 required packages:
 - DifferentialDynamicProgramming 0.2.0
 - JSON                          0.17.1
3 additional packages:
 - Compat                        0.55.0
 - Nullables                     0.0.3
 - Requires                      0.4.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
value = (x' * g + 0.5 * x' * H * x)[1] = 63756.425491382084
==========
Starting box-QP, dimension 500, initial value: 63756.425   
RESULT: Gradient norm smaller than tolerance.
iterations 12  gradient 3.00362e-12  final value -39.6805      factorizations 11
  3.353740 seconds (1.12 M allocations: 104.717 MiB, 0.81% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

---------- begin iLQG ----------
iteration     cost    reduction     expected    gradient    log10(lambda)
1           49.9601     23.8        23.8        0.106       0.0         
2           26.1373     10.1        10.1        0.0823      -0.2        
3           16.0754     4.71        4.71        0.0837      -0.6        
4           11.37       2.94        2.94        0.123       -1.2        
5           8.4308      1.54        1.54        0.193       -2.0        
6           6.89563     0.218       0.218       0.171       -3.1        
7           6.67767     0.00561     0.00561     0.0463      -4.3        
8           6.67206     5.6e-06    5.6e-06    0.00175     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

            final cost:   6.672054    

            final grad:   2.977397e-06

            final lambda: 4.4841551e-08

            time / iter:  352   ms

            total time:   3.17  seconds, of which

            derivs:     1.5 %

            back pass:  29.6%

            fwd pass:   8.0 %

            other:      60.9% (graphics etc.)
 =========== end iLQG ===========
 11.338624 seconds (5.99 M allocations: 498.437 MiB, 2.29% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
