>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from https://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.2.0
INFO: Installing Requires v0.4.3
INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of DifferentialDynamicProgramming
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.6.0
Commit 9036443 (2017-06-19 13:05 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-129-generic #178-Ubuntu SMP Fri Aug 11 12:48:20 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1705.4921875 MB free)
Uptime: 49464.0 sec
Load Avg:  0.974609375  0.970703125  1.0185546875
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz    3246773 s         68 s     141224 s     855318 s         41 s
#2  3499 MHz     969816 s       6571 s      96952 s    3774852 s          1 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.6
2 required packages:
 - DifferentialDynamicProgramming 0.2.0
 - JSON                          0.13.0
2 additional packages:
 - Compat                        0.31.0
 - Requires                      0.4.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
value = (x' * g + 0.5 * x' * H * x)[1] = 53389.54753122187
==========
Starting box-QP, dimension 500, initial value: 53389.548   
RESULT: Gradient norm smaller than tolerance.
iterations 16  gradient 3.26285e-12  final value -26.6405      factorizations 15
  4.267757 seconds (1.13 M allocations: 127.960 MiB, 1.22% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

---------- begin iLQG ----------
iteration     cost    reduction     expected    gradient    log10(lambda)
1           49.4735     19.3        19.3        0.0982      0.0         
2           30.1342     10.3        10.3        0.0846      -0.2        
3           19.8215     6.08        6.08        0.0958      -0.6        
4           13.7455     3.09        3.09        0.123       -1.2        
5           10.6511     1.51        1.51        0.176       -2.0        
6           9.14122     0.653       0.653       0.219       -3.1        
7           8.48797     0.0549      0.0549      0.0789      -4.3        
8           8.43306     6.94e-05    6.94e-05    0.00267     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

            final cost:   8.432993    

            final grad:   4.393646e-06

            final lambda: 4.4841551e-08

            time / iter:  360   ms

            total time:   3.24  seconds, of which

            derivs:     2.0 %

            back pass:  32.1%

            fwd pass:   7.9 %

            other:      58.0% (graphics etc.)
 =========== end iLQG ===========
 12.460404 seconds (6.07 M allocations: 502.839 MiB, 2.16% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
