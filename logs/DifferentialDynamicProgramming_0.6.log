>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from https://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.2.0
INFO: Installing Requires v0.4.3
INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of DifferentialDynamicProgramming
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.6.2
Commit d386e40c17 (2017-12-13 18:08 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-135-generic #184-Ubuntu SMP Wed Oct 18 11:55:51 UTC 2017 x86_64 x86_64
Memory: 2.93927001953125 GB (2167.6640625 MB free)
Uptime: 55546.0 sec
Load Avg:  1.0673828125  1.001953125  1.029296875
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz    3556900 s         78 s     158804 s     954972 s         23 s
#2  3499 MHz     728844 s         78 s      78190 s    4670410 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.6
2 required packages:
 - DifferentialDynamicProgramming 0.2.0
 - JSON                          0.16.3
3 additional packages:
 - Compat                        0.42.0
 - Nullables                     0.0.2
 - Requires                      0.4.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
value = (x' * g + 0.5 * x' * H * x)[1] = 71074.06217220362
==========
Starting box-QP, dimension 500, initial value: 71074.062   
RESULT: Gradient norm smaller than tolerance.
iterations 19  gradient 2.6101e-12  final value -22.9798      factorizations 18
  2.987253 seconds (1.13 M allocations: 144.704 MiB, 1.06% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

---------- begin iLQG ----------
iteration     cost    reduction     expected    gradient    log10(lambda)
1           49.7924     24.9        24.9        0.11        0.0         
2           24.8778     11.1        11.1        0.0855      -0.2        
3           13.7995     5.15        5.15        0.0811      -0.6        
4           8.64472     2.46        2.46        0.0901      -1.2        
5           6.18897     1.08        1.08        0.14        -2.0        
6           5.10618     0.267       0.267       0.165       -3.1        
7           4.83887     0.0161      0.0161      0.0561      -4.3        
8           4.82279     1.94e-05    1.94e-05    0.00215     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

            final cost:   4.822773    

            final grad:   3.649697e-06

            final lambda: 4.4841551e-08

            time / iter:  302   ms

            total time:   2.72  seconds, of which

            derivs:     1.7 %

            back pass:  28.3%

            fwd pass:   9.9 %

            other:      60.2% (graphics etc.)
 =========== end iLQG ===========
 10.301199 seconds (5.99 M allocations: 498.436 MiB, 2.24% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
