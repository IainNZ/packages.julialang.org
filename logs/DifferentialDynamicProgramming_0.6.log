>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from https://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.2.0
INFO: Installing Requires v0.4.3
INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of DifferentialDynamicProgramming
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.6.0
Commit 9036443 (2017-06-19 13:05 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-128-generic #177-Ubuntu SMP Tue Aug 8 11:40:23 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1693.44921875 MB free)
Uptime: 51390.0 sec
Load Avg:  0.90771484375  0.97021484375  1.029296875
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz    3150402 s       6583 s     153325 s    1116794 s         57 s
#2  3500 MHz    1021082 s         21 s     102494 s    3873529 s          2 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.6
2 required packages:
 - DifferentialDynamicProgramming 0.2.0
 - JSON                          0.13.0
2 additional packages:
 - Compat                        0.31.0
 - Requires                      0.4.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
value = (x' * g + 0.5 * x' * H * x)[1] = 68660.93862666568
==========
Starting box-QP, dimension 500, initial value: 68660.939   
RESULT: Gradient norm smaller than tolerance.
iterations 13  gradient 2.98659e-12  final value -35.3919      factorizations 12
  3.812370 seconds (1.12 M allocations: 110.266 MiB, 0.86% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

---------- begin iLQG ----------
iteration     cost    reduction     expected    gradient    log10(lambda)
1           50.2626     26.1        26.1        0.123       0.0         
2           24.1527     10.6        10.6        0.0906      -0.2        
3           13.5698     4.63        4.63        0.0788      -0.6        
4           8.93643     2.35        2.35        0.0951      -1.2        
5           6.58676     1.15        1.15        0.168       -2.0        
6           5.43518     0.244       0.244       0.177       -3.1        
7           5.19149     0.01        0.01        0.0544      -4.3        
8           5.18147     1.14e-05    1.14e-05    0.00198     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

            final cost:   5.181462    

            final grad:   3.327487e-06

            final lambda: 4.4841551e-08

            time / iter:  357   ms

            total time:   3.22  seconds, of which

            derivs:     2.3 %

            back pass:  30.0%

            fwd pass:   8.2 %

            other:      59.6% (graphics etc.)
 =========== end iLQG ===========
 12.114422 seconds (6.07 M allocations: 502.839 MiB, 2.24% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
