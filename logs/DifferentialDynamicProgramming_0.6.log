>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from https://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.2.0
INFO: Installing Requires v0.4.3
INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of DifferentialDynamicProgramming
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.6.0
Commit 9036443 (2017-06-19 13:05 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-126-generic #175-Ubuntu SMP Thu Jul 20 17:33:56 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1762.484375 MB free)
Uptime: 48969.0 sec
Load Avg:  0.994140625  0.9853515625  1.025390625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz    3126448 s       7821 s     144909 s     929409 s         44 s
#2  3499 MHz    1074923 s        100 s      94075 s    3621082 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.6
2 required packages:
 - DifferentialDynamicProgramming 0.2.0
 - JSON                          0.13.0
2 additional packages:
 - Compat                        0.29.0
 - Requires                      0.4.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
value = (x' * g + 0.5 * x' * H * x)[1] = 68402.9581676941
==========
Starting box-QP, dimension 500, initial value: 68402.958   
RESULT: Gradient norm smaller than tolerance.
iterations 15  gradient 2.95054e-12  final value -28.4695      factorizations 14
  3.639575 seconds (1.13 M allocations: 124.075 MiB, 1.13% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

---------- begin iLQG ----------
iteration     cost    reduction     expected    gradient    log10(lambda)
1           50.8413     21.1        21.1        0.103       0.0         
2           29.7295     10.3        10.3        0.0843      -0.2        
3           19.4379     5.57        5.57        0.0894      -0.6        
4           13.8725     2.77        2.77        0.111       -1.2        
5           11.0989     1.3         1.3         0.182       -2.0        
6           9.80203     0.401       0.401       0.225       -3.1        
7           9.40138     0.0234      0.0234      0.0646      -4.3        
8           9.378       2.66e-05    2.66e-05    0.0023      -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

            final cost:   9.377973    

            final grad:   3.634781e-06

            final lambda: 4.4841551e-08

            time / iter:  350   ms

            total time:   3.15  seconds, of which

            derivs:     2.3 %

            back pass:  28.8%

            fwd pass:   4.7 %

            other:      64.2% (graphics etc.)
 =========== end iLQG ===========
 11.334254 seconds (6.07 M allocations: 502.840 MiB, 2.27% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
