>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from https://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.2.0
INFO: Installing Requires v0.4.3
INFO: Package database updated

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.6.1
Commit 0d7248e2ff (2017-10-24 22:15 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-135-generic #184-Ubuntu SMP Wed Oct 18 11:55:51 UTC 2017 x86_64 x86_64
Memory: 2.93927001953125 GB (2140.92578125 MB free)
Uptime: 57540.0 sec
Load Avg:  0.9384765625  0.95361328125  0.9970703125
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz    3730568 s       6681 s     169109 s     987406 s         47 s
#2  3499 MHz    1039018 s         94 s     113185 s    4465327 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.6
2 required packages:
 - DifferentialDynamicProgramming 0.2.0
 - JSON                          0.16.1
2 additional packages:
 - Compat                        0.37.0
 - Requires                      0.4.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
value = (x' * g + 0.5 * x' * H * x)[1] = 70396.70661053632
==========
Starting box-QP, dimension 500, initial value: 70396.707   
RESULT: Gradient norm smaller than tolerance.
iterations 22  gradient 3.40468e-12  final value -27.2346      factorizations 21
  3.031470 seconds (1.14 M allocations: 162.268 MiB, 1.20% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

---------- begin iLQG ----------
iteration     cost    reduction     expected    gradient    log10(lambda)
1           49.7186     17.9        17.9        0.0895      0.0         
2           31.7821     11.4        11.4        0.084       -0.2        
3           20.4134     8.85        8.85        0.11        -0.6        
4           11.5587     5.18        5.18        0.158       -1.2        
5           6.38053     1.74        1.74        0.167       -2.0        
6           4.63673     0.276       0.276       0.192       -3.1        
7           4.36106     0.00822     0.00822     0.0582      -4.3        
8           4.35284     7.85e-06    7.85e-06    0.002       -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

            final cost:   4.35283     

            final grad:   3.395389e-06

            final lambda: 4.4841551e-08

            time / iter:  299   ms

            total time:   2.69  seconds, of which

            derivs:     2.4 %

            back pass:  37.1%

            fwd pass:   9.1 %

            other:      51.4% (graphics etc.)
 =========== end iLQG ===========
  9.718703 seconds (6.00 M allocations: 498.725 MiB, 2.51% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
