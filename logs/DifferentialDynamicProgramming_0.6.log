>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from https://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.2.0
INFO: Installing Requires v0.4.3
INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of DifferentialDynamicProgramming
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.6.0
Commit 9036443 (2017-06-19 13:05 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-121-generic #170-Ubuntu SMP Wed Jun 14 09:04:33 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1749.39453125 MB free)
Uptime: 47020.0 sec
Load Avg:  0.91943359375  0.9599609375  1.0185546875
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz    2944352 s       5823 s     150150 s     950941 s         50 s
#2  3499 MHz    1052784 s       1328 s      84472 s    3452300 s          1 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.6
2 required packages:
 - DifferentialDynamicProgramming 0.2.0
 - JSON                          0.12.0
2 additional packages:
 - Compat                        0.26.0
 - Requires                      0.4.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
value = (x' * g + 0.5 * x' * H * x)[1] = 69425.5398036172
==========
Starting box-QP, dimension 500, initial value: 69425.540   
RESULT: Gradient norm smaller than tolerance.
iterations 14  gradient 2.8691e-12  final value -22.669       factorizations 13
  4.765446 seconds (1.12 M allocations: 116.765 MiB, 1.25% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

---------- begin iLQG ----------
iteration     cost    reduction     expected    gradient    log10(lambda)
1           49.7416     26.3        26.3        0.116       0.0         
2           23.474      10.4        10.4        0.0839      -0.2        
3           13.086      4.64        4.64        0.0722      -0.6        
4           8.44476     3.11        3.11        0.0943      -1.2        
5           5.33835     2.06        2.06        0.175       -2.0        
6           3.27914     0.563       0.563       0.179       -3.1        
7           2.71574     0.0276      0.0276      0.0602      -4.3        
8           2.68816     2.91e-05    2.91e-05    0.00232     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

            final cost:   2.688135    

            final grad:   3.718251e-06

            final lambda: 4.4841551e-08

            time / iter:  425   ms

            total time:   3.82  seconds, of which

            derivs:     2.1 %

            back pass:  30.6%

            fwd pass:   7.9 %

            other:      59.4% (graphics etc.)
 =========== end iLQG ===========
 14.208531 seconds (6.07 M allocations: 502.839 MiB, 2.23% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
