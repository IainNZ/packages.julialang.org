>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from https://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.2.0
INFO: Installing Requires v0.4.3
INFO: Package database updated

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.6.2
Commit d386e40c17 (2017-12-13 18:08 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-135-generic #184-Ubuntu SMP Wed Oct 18 11:55:51 UTC 2017 x86_64 x86_64
Memory: 2.93927001953125 GB (1774.71484375 MB free)
Uptime: 64917.0 sec
Load Avg:  0.99072265625  0.9814453125  1.01318359375
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3506 MHz    3940621 s       4218 s     183972 s    1457611 s         56 s
#2  3506 MHz    1208967 s       2584 s     116181 s    5032193 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.6
2 required packages:
 - DifferentialDynamicProgramming 0.2.0
 - JSON                          0.16.4
3 additional packages:
 - Compat                        0.53.0
 - Nullables                     0.0.3
 - Requires                      0.4.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
value = (x' * g + 0.5 * x' * H * x)[1] = 67175.1568888693
==========
Starting box-QP, dimension 500, initial value: 67175.157   
RESULT: Gradient norm smaller than tolerance.
iterations 14  gradient 3.31513e-12  final value -28.7208      factorizations 13
  3.553877 seconds (1.13 M allocations: 115.759 MiB, 1.01% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

---------- begin iLQG ----------
iteration     cost    reduction     expected    gradient    log10(lambda)
1           50.6151     25.6        25.6        0.115       0.0         
2           25.0042     10.4        10.4        0.0883      -0.2        
3           14.5631     4.22        4.22        0.0792      -0.6        
4           10.3438     1.88        1.88        0.0932      -1.2        
5           8.46381     0.875       0.875       0.162       -2.0        
6           7.58832     0.229       0.229       0.177       -3.1        
7           7.3593      0.0116      0.0116      0.0575      -4.3        
8           7.34768     1.15e-05    1.15e-05    0.002       -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

            final cost:   7.347673    

            final grad:   3.228806e-06

            final lambda: 4.4841551e-08

            time / iter:  281   ms

            total time:   2.53  seconds, of which

            derivs:     2.2 %

            back pass:  35.2%

            fwd pass:   7.1 %

            other:      55.5% (graphics etc.)
 =========== end iLQG ===========
  8.652973 seconds (5.99 M allocations: 498.436 MiB, 2.56% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
