>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from https://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.2.0
INFO: Installing Requires v0.4.3
INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of DifferentialDynamicProgramming
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.6.2
Commit d386e40c17 (2017-12-13 18:08 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-143-generic #192-Ubuntu SMP Tue Feb 27 10:45:36 UTC 2018 x86_64 x86_64
Memory: 2.939197540283203 GB (2161.27734375 MB free)
Uptime: 72660.0 sec
Load Avg:  1.01953125  0.96875  1.0185546875
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3515 MHz    4427483 s       6966 s     289430 s    1592270 s         50 s
#2  3515 MHz    1255390 s       1492 s     154678 s    5727002 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.6
2 required packages:
 - DifferentialDynamicProgramming 0.2.0
 - JSON                          0.17.2
3 additional packages:
 - Compat                        0.63.0
 - Nullables                     0.0.5
 - Requires                      0.4.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
value = (x' * g + 0.5 * x' * H * x)[1] = 57715.89948547951
==========
Starting box-QP, dimension 500, initial value: 57715.899   
RESULT: Gradient norm smaller than tolerance.
iterations 14  gradient 2.63628e-12  final value -25.9038      factorizations 12
  2.725948 seconds (1.13 M allocations: 115.255 MiB, 0.99% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

---------- begin iLQG ----------
iteration     cost    reduction     expected    gradient    log10(lambda)
1           48.8324     20.9        20.9        0.1         0.0         
2           27.9394     11.6        11.6        0.0868      -0.2        
3           16.3183     6.11        6.11        0.0877      -0.6        
4           10.2062     2.97        2.97        0.0967      -1.2        
5           7.24094     1.7         1.7         0.17        -2.0        
6           5.54082     0.625       0.625       0.215       -3.1        
7           4.91608     0.0403      0.0403      0.0686      -4.3        
8           4.87577     4.48e-05    4.48e-05    0.00264     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

            final cost:   4.875723    

            final grad:   4.1987e-06

            final lambda: 4.4841551e-08

            time / iter:  425   ms

            total time:   3.83  seconds, of which

            derivs:     2.0 %

            back pass:  31.8%

            fwd pass:   6.6 %

            other:      59.6% (graphics etc.)
 =========== end iLQG ===========
 12.288141 seconds (5.99 M allocations: 498.437 MiB, 2.06% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
