>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from https://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.2.0
INFO: Installing Requires v0.4.3
INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of DifferentialDynamicProgramming
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.6.0
Commit 9036443 (2017-06-19 13:05 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-126-generic #175-Ubuntu SMP Thu Jul 20 17:33:56 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1740.65234375 MB free)
Uptime: 47337.0 sec
Load Avg:  0.9970703125  0.9853515625  1.03076171875
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz    3095635 s       7893 s     146063 s     803092 s         38 s
#2  3500 MHz     986380 s        730 s      83959 s    3567387 s          2 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.6
2 required packages:
 - DifferentialDynamicProgramming 0.2.0
 - JSON                          0.13.0
2 additional packages:
 - Compat                        0.29.0
 - Requires                      0.4.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
value = (x' * g + 0.5 * x' * H * x)[1] = 72003.63866244926
==========
Starting box-QP, dimension 500, initial value: 72003.639   
RESULT: Improvement smaller than tolerance.
iterations 17  gradient 0.00851055   final value -29.4551      factorizations 16
  3.189115 seconds (1.12 M allocations: 133.744 MiB, 1.18% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

---------- begin iLQG ----------
iteration     cost    reduction     expected    gradient    log10(lambda)
1           51.0595     25.5        25.5        0.111       0.0         
2           25.5882     11.5        11.5        0.0872      -0.2        
3           14.1378     4.91        4.91        0.08        -0.6        
4           9.22315     2.19        2.19        0.0856      -1.2        
5           7.0372      0.996       0.996       0.146       -2.0        
6           6.0408      0.293       0.293       0.162       -3.1        
7           5.74814     0.0201      0.0201      0.0585      -4.3        
8           5.72801     2.44e-05    2.44e-05    0.0023      -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

            final cost:   5.727983    

            final grad:   3.829037e-06

            final lambda: 4.4841551e-08

            time / iter:  280   ms

            total time:   2.52  seconds, of which

            derivs:     2.6 %

            back pass:  35.0%

            fwd pass:   5.7 %

            other:      56.7% (graphics etc.)
 =========== end iLQG ===========
 10.915603 seconds (6.07 M allocations: 503.092 MiB, 2.13% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
