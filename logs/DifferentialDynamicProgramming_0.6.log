>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from https://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.2.0
INFO: Installing Requires v0.4.3
INFO: Package database updated

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.6.0
Commit 9036443 (2017-06-19 13:05 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-128-generic #177-Ubuntu SMP Tue Aug 8 11:40:23 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1713.875 MB free)
Uptime: 47049.0 sec
Load Avg:  0.9970703125  0.9853515625  1.02978515625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz    3084472 s       6489 s     141901 s     780775 s         47 s
#2  3500 MHz     903519 s         67 s      88510 s    3603774 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.6
2 required packages:
 - DifferentialDynamicProgramming 0.2.0
 - JSON                          0.13.0
2 additional packages:
 - Compat                        0.30.0
 - Requires                      0.4.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
value = (x' * g + 0.5 * x' * H * x)[1] = 63621.80318218668
==========
Starting box-QP, dimension 500, initial value: 63621.803   
RESULT: Gradient norm smaller than tolerance.
iterations 19  gradient 2.79077e-12  final value -22.2242      factorizations 18
  3.833050 seconds (1.13 M allocations: 146.117 MiB, 0.98% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

---------- begin iLQG ----------
iteration     cost    reduction     expected    gradient    log10(lambda)
1           49.4512     21.2        21.2        0.0976      0.0         
2           28.2482     9.76        9.76        0.0797      -0.2        
3           18.4882     6.22        6.22        0.0936      -0.6        
4           12.2651     4.03        4.03        0.138       -1.2        
5           8.23047     1.69        1.69        0.198       -2.0        
6           6.5408      0.304       0.304       0.198       -3.1        
7           6.23719     0.0156      0.0156      0.058       -4.3        
8           6.22154     1.93e-05    1.93e-05    0.00214     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

            final cost:   6.22152     

            final grad:   3.560142e-06

            final lambda: 4.4841551e-08

            time / iter:  235   ms

            total time:   2.12  seconds, of which

            derivs:     2.1 %

            back pass:  31.7%

            fwd pass:   6.4 %

            other:      59.8% (graphics etc.)
 =========== end iLQG ===========
 10.111678 seconds (6.07 M allocations: 502.839 MiB, 2.48% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
