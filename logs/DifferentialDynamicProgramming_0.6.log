>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from https://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.2.0
INFO: Installing Requires v0.4.3
INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of DifferentialDynamicProgramming
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.6.2
Commit d386e40c17 (2017-12-13 18:08 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-135-generic #184-Ubuntu SMP Wed Oct 18 11:55:51 UTC 2017 x86_64 x86_64
Memory: 2.93927001953125 GB (2183.5859375 MB free)
Uptime: 59476.0 sec
Load Avg:  0.99560546875  1.0  1.0400390625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3516 MHz    3859246 s         97 s     165656 s    1066118 s         56 s
#2  3516 MHz    1140426 s         60 s     109734 s    4566319 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.6
2 required packages:
 - DifferentialDynamicProgramming 0.2.0
 - JSON                          0.16.3
3 additional packages:
 - Compat                        0.42.0
 - Nullables                     0.0.2
 - Requires                      0.4.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
value = (x' * g + 0.5 * x' * H * x)[1] = 65402.08136039254
==========
Starting box-QP, dimension 500, initial value: 65402.081   
RESULT: Gradient norm smaller than tolerance.
iterations 14  gradient 3.00729e-12  final value -33.4502      factorizations 13
  2.357395 seconds (1.13 M allocations: 115.884 MiB, 0.96% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

---------- begin iLQG ----------
iteration     cost    reduction     expected    gradient    log10(lambda)
1           50.1566     14          14          0.0837      0.0         
2           36.175      10.6        10.6        0.0887      -0.2        
3           25.5518     8.29        8.29        0.113       -0.6        
4           17.2654     5.44        5.44        0.156       -1.2        
5           11.8229     3.34        3.34        0.264       -2.0        
6           8.47929     1.25        1.25        0.345       -3.1        
7           7.22612     0.0641      0.0641      0.097       -4.3        
8           7.16203     5.89e-05    5.89e-05    0.00303     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

            final cost:   7.161967    

            final grad:   4.381993e-06

            final lambda: 4.4841551e-08

            time / iter:  386   ms

            total time:   3.47  seconds, of which

            derivs:     2.4 %

            back pass:  33.5%

            fwd pass:   7.2 %

            other:      56.9% (graphics etc.)
 =========== end iLQG ===========
 12.233400 seconds (5.99 M allocations: 498.437 MiB, 2.04% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
