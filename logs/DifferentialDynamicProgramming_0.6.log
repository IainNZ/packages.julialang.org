>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from https://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.2.0
INFO: Installing Requires v0.4.3
INFO: Package database updated

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.6.0
Commit 9036443 (2017-06-19 13:05 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-128-generic #177-Ubuntu SMP Tue Aug 8 11:40:23 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1757.98046875 MB free)
Uptime: 47571.0 sec
Load Avg:  0.9970703125  0.9736328125  1.029296875
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz    3034675 s       4824 s     138324 s     896434 s         48 s
#2  3500 MHz     960977 s       1602 s      91723 s    3578067 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.6
2 required packages:
 - DifferentialDynamicProgramming 0.2.0
 - JSON                          0.13.0
2 additional packages:
 - Compat                        0.30.0
 - Requires                      0.4.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
value = (x' * g + 0.5 * x' * H * x)[1] = 60237.841672091505
==========
Starting box-QP, dimension 500, initial value: 60237.842   
RESULT: Gradient norm smaller than tolerance.
iterations 21  gradient 3.46553e-12  final value -36.6296      factorizations 20
  4.176574 seconds (1.13 M allocations: 155.545 MiB, 0.89% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

---------- begin iLQG ----------
iteration     cost    reduction     expected    gradient    log10(lambda)
1           50.01       27.1        27.1        0.112       0.0         
2           22.9396     11.2        11.2        0.0857      -0.2        
3           11.7652     4.78        4.78        0.0776      -0.6        
4           6.98083     2.38        2.38        0.0846      -1.2        
5           4.60331     1.17        1.17        0.148       -2.0        
6           3.43359     0.35        0.35        0.161       -3.1        
7           3.08327     0.0265      0.0265      0.0556      -4.3        
8           3.05674     3.41e-05    3.41e-05    0.00225     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

            final cost:   3.056703    

            final grad:   3.791765e-06

            final lambda: 4.4841551e-08

            time / iter:  391   ms

            total time:   3.52  seconds, of which

            derivs:     1.3 %

            back pass:  27.0%

            fwd pass:   8.5 %

            other:      63.3% (graphics etc.)
 =========== end iLQG ===========
 11.953097 seconds (6.07 M allocations: 502.839 MiB, 1.94% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
