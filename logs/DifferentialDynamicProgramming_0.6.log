>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from https://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.2.0
INFO: Installing Requires v0.4.3
INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of DifferentialDynamicProgramming
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.6.0
Commit 9036443 (2017-06-19 13:05 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-121-generic #170-Ubuntu SMP Wed Jun 14 09:04:33 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1724.61328125 MB free)
Uptime: 46925.0 sec
Load Avg:  0.99072265625  0.998046875  1.0361328125
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3503 MHz    3057525 s       5464 s     136746 s     811323 s         44 s
#2  3503 MHz     924876 s        886 s      94450 s    3560492 s          1 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.6
2 required packages:
 - DifferentialDynamicProgramming 0.2.0
 - JSON                          0.12.0
2 additional packages:
 - Compat                        0.26.0
 - Requires                      0.4.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
value = (x' * g + 0.5 * x' * H * x)[1] = 65799.71539282204
==========
Starting box-QP, dimension 500, initial value: 65799.715   
RESULT: Gradient norm smaller than tolerance.
iterations 20  gradient 3.3002e-12  final value -26.2924      factorizations 19
  3.886408 seconds (1.13 M allocations: 151.257 MiB, 0.98% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

---------- begin iLQG ----------
iteration     cost    reduction     expected    gradient    log10(lambda)
1           48.6245     28.3        28.3        0.119       0.0         
2           20.3073     9.94        9.94        0.0845      -0.2        
3           10.3631     3.59        3.59        0.0688      -0.6        
4           6.77142     1.71        1.71        0.0713      -1.2        
5           5.0604      0.627       0.627       0.113       -2.0        
6           4.43389     0.0743      0.0743      0.106       -3.1        
7           4.3596      0.00351     0.00351     0.0412      -4.3        
8           4.35608     4.93e-06    4.93e-06    0.00179     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

            final cost:   4.356077    

            final grad:   3.059477e-06

            final lambda: 4.4841551e-08

            time / iter:  302   ms

            total time:   2.72  seconds, of which

            derivs:     2.8 %

            back pass:  33.3%

            fwd pass:   7.5 %

            other:      56.3% (graphics etc.)
 =========== end iLQG ===========
  9.670734 seconds (6.07 M allocations: 502.839 MiB, 2.37% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
