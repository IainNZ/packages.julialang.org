>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from https://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.2.0
INFO: Installing Requires v0.4.4
INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of DifferentialDynamicProgramming
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.6.4
Commit 9d11f62bcb (2018-07-09 19:09 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-143-generic #192-Ubuntu SMP Tue Feb 27 10:45:36 UTC 2018 x86_64 x86_64
Memory: 2.939197540283203 GB (1981.890625 MB free)
Uptime: 63277.0 sec
Load Avg:  0.9970703125  0.9853515625  1.00244140625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz    3883782 s       5686 s     278715 s    1198023 s          8 s
#2  3500 MHz    1025076 s         92 s     136002 s    5011032 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem MAX_THREADS=16)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.6
2 required packages:
 - DifferentialDynamicProgramming 0.2.0
 - JSON                          0.17.2
3 additional packages:
 - Compat                        0.69.0
 - Nullables                     0.0.6
 - Requires                      0.4.4
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
value = (x' * g + 0.5 * x' * H * x)[1] = 47229.93485694607
==========
Starting box-QP, dimension 500, initial value: 47229.935   
RESULT: Gradient norm smaller than tolerance.
iterations 16  gradient 3.23621e-12  final value -26.3862      factorizations 15
  2.556672 seconds (1.13 M allocations: 127.615 MiB, 1.10% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

---------- begin iLQG ----------
iteration     cost    reduction     expected    gradient    log10(lambda)
1           49.16       19.7        19.7        0.096       0.0         
2           29.5017     9.4         9.4         0.0775      -0.2        
3           20.0997     5.59        5.59        0.0917      -0.6        
4           14.5068     2.93        2.93        0.125       -1.2        
5           11.5814     1.84        1.84        0.206       -2.0        
6           9.7375      0.823       0.823       0.284       -3.1        
7           8.91463     0.0473      0.0473      0.0801      -4.3        
8           8.86737     4.43e-05    4.43e-05    0.00275     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

            final cost:   8.867329    

            final grad:   3.928452e-06

            final lambda: 4.4841551e-08

            time / iter:  211   ms

            total time:   1.90  seconds, of which

            derivs:     2.7 %

            back pass:  35.3%

            fwd pass:   8.0 %

            other:      53.9% (graphics etc.)
 =========== end iLQG ===========
  6.414784 seconds (5.99 M allocations: 499.870 MiB, 2.93% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
