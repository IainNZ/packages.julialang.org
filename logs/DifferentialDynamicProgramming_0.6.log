>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from https://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.2.0
INFO: Installing Requires v0.4.3
INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of DifferentialDynamicProgramming
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.6.2
Commit d386e40c17 (2017-12-13 18:08 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-135-generic #184-Ubuntu SMP Wed Oct 18 11:55:51 UTC 2017 x86_64 x86_64
Memory: 2.93927001953125 GB (1689.4296875 MB free)
Uptime: 62757.0 sec
Load Avg:  1.02783203125  1.0146484375  1.0400390625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz    3938635 s       6444 s     183456 s    1237940 s         47 s
#2  3500 MHz    1180152 s        687 s     110982 s    4867102 s          1 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.6
2 required packages:
 - DifferentialDynamicProgramming 0.2.0
 - JSON                          0.16.4
3 additional packages:
 - Compat                        0.54.0
 - Nullables                     0.0.3
 - Requires                      0.4.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
value = (x' * g + 0.5 * x' * H * x)[1] = 71143.55153732332
==========
Starting box-QP, dimension 500, initial value: 71143.552   
RESULT: Gradient norm smaller than tolerance.
iterations 13  gradient 3.15805e-12  final value -30.5562      factorizations 12
  3.117861 seconds (1.13 M allocations: 108.784 MiB, 0.93% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

---------- begin iLQG ----------
iteration     cost    reduction     expected    gradient    log10(lambda)
1           50.6295     19          19          0.0886      0.0         
2           31.664      10.8        10.8        0.0803      -0.2        
3           20.9011     6.99        6.99        0.0976      -0.6        
4           13.9084     3.3         3.3         0.126       -1.2        
5           10.6047     1.03        1.03        0.157       -2.0        
6           9.57475     0.215       0.215       0.18        -3.1        
7           9.35956     0.0108      0.0108      0.0526      -4.3        
8           9.3488      1.21e-05    1.21e-05    0.00198     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

            final cost:   9.348792    

            final grad:   3.339655e-06

            final lambda: 4.4841551e-08

            time / iter:  354   ms

            total time:   3.18  seconds, of which

            derivs:     1.6 %

            back pass:  34.2%

            fwd pass:   7.8 %

            other:      56.4% (graphics etc.)
 =========== end iLQG ===========
 10.628112 seconds (5.99 M allocations: 498.437 MiB, 2.37% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
