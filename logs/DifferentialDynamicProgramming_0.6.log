>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from https://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.2.0
INFO: Installing Requires v0.4.3
INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of DifferentialDynamicProgramming
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.6.1
Commit 0d7248e2ff (2017-10-24 22:15 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-135-generic #184-Ubuntu SMP Wed Oct 18 11:55:51 UTC 2017 x86_64 x86_64
Memory: 2.93927001953125 GB (2188.0859375 MB free)
Uptime: 57712.0 sec
Load Avg:  1.0029296875  0.99951171875  1.029296875
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz    3744583 s        131 s     157251 s    1061559 s         57 s
#2  3500 MHz    1144522 s       6634 s     109258 s    4397744 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.6
2 required packages:
 - DifferentialDynamicProgramming 0.2.0
 - JSON                          0.16.1
2 additional packages:
 - Compat                        0.37.0
 - Requires                      0.4.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
value = (x' * g + 0.5 * x' * H * x)[1] = 68246.8287778425
==========
Starting box-QP, dimension 500, initial value: 68246.829   
RESULT: Gradient norm smaller than tolerance.
iterations 17  gradient 3.3898e-12  final value -38.7328      factorizations 16
  3.061385 seconds (1.13 M allocations: 132.115 MiB, 0.97% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

---------- begin iLQG ----------
iteration     cost    reduction     expected    gradient    log10(lambda)
1           49.2539     19.5        19.5        0.0976      0.0         
2           29.7341     10          10          0.0825      -0.2        
3           19.729      5.74        5.74        0.0936      -0.6        
4           13.9935     2.94        2.94        0.128       -1.2        
5           11.054      1.09        1.09        0.166       -2.0        
6           9.96048     0.161       0.161       0.157       -3.1        
7           9.79946     0.00461     0.00461     0.0463      -4.3        
8           9.79484     4.75e-06    4.75e-06    0.00181     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

            final cost:   9.794839    

            final grad:   3.111189e-06

            final lambda: 4.4841551e-08

            time / iter:  288   ms

            total time:   2.59  seconds, of which

            derivs:     1.8 %

            back pass:  25.9%

            fwd pass:   5.6 %

            other:      66.7% (graphics etc.)
 =========== end iLQG ===========
  8.346094 seconds (6.00 M allocations: 498.725 MiB, 2.20% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
