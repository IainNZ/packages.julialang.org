>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from https://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.2.0
INFO: Installing Requires v0.4.3
INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of DifferentialDynamicProgramming
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.6.2
Commit d386e40c17 (2017-12-13 18:08 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-135-generic #184-Ubuntu SMP Wed Oct 18 11:55:51 UTC 2017 x86_64 x86_64
Memory: 2.93927001953125 GB (1653.73828125 MB free)
Uptime: 61517.0 sec
Load Avg:  0.95166015625  0.998046875  1.0361328125
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3503 MHz    3921253 s       4308 s     173880 s    1179436 s         38 s
#2  3503 MHz    1068986 s       2973 s     107816 s    4836451 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.6
2 required packages:
 - DifferentialDynamicProgramming 0.2.0
 - JSON                          0.16.4
3 additional packages:
 - Compat                        0.51.0
 - Nullables                     0.0.3
 - Requires                      0.4.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
value = (x' * g + 0.5 * x' * H * x)[1] = 69719.16122678803
==========
Starting box-QP, dimension 500, initial value: 69719.161   
RESULT: Gradient norm smaller than tolerance.
iterations 15  gradient 3.03424e-12  final value -37.8715      factorizations 14
  4.013819 seconds (1.13 M allocations: 121.220 MiB, 0.79% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

---------- begin iLQG ----------
iteration     cost    reduction     expected    gradient    log10(lambda)
1           49.5707     19.2        19.2        0.0971      0.0         
2           30.3455     11.6        11.6        0.0895      -0.2        
3           18.7618     6.44        6.44        0.0972      -0.6        
4           12.318      3.01        3.01        0.111       -1.2        
5           9.30765     1.99        1.99        0.182       -2.0        
6           7.31864     0.867       0.867       0.238       -3.1        
7           6.45155     0.0675      0.0675      0.0731      -4.3        
8           6.38408     8.79e-05    8.79e-05    0.00296     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

            final cost:   6.383994    

            final grad:   4.757621e-06

            final lambda: 4.4841551e-08

            time / iter:  256   ms

            total time:   2.31  seconds, of which

            derivs:     2.1 %

            back pass:  30.7%

            fwd pass:   10.8%

            other:      56.4% (graphics etc.)
 =========== end iLQG ===========
 10.590129 seconds (5.99 M allocations: 498.436 MiB, 2.04% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
