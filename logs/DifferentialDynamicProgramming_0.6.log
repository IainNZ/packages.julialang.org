>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from https://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.2.0
INFO: Installing Requires v0.4.3
INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of DifferentialDynamicProgramming
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.6.2
Commit d386e40c17 (2017-12-13 18:08 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-135-generic #184-Ubuntu SMP Wed Oct 18 11:55:51 UTC 2017 x86_64 x86_64
Memory: 2.93927001953125 GB (1666.09765625 MB free)
Uptime: 60449.0 sec
Load Avg:  0.98681640625  0.9853515625  1.029296875
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz    3923589 s       7695 s     179447 s    1062708 s         36 s
#2  3499 MHz    1203453 s         98 s     102920 s    4629696 s          1 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.6
2 required packages:
 - DifferentialDynamicProgramming 0.2.0
 - JSON                          0.16.4
3 additional packages:
 - Compat                        0.49.0
 - Nullables                     0.0.3
 - Requires                      0.4.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
value = (x' * g + 0.5 * x' * H * x)[1] = 63342.061916655635
==========
Starting box-QP, dimension 500, initial value: 63342.062   
RESULT: Gradient norm smaller than tolerance.
iterations 16  gradient 2.98245e-12  final value -30.0703      factorizations 15
  4.237273 seconds (1.13 M allocations: 128.121 MiB, 0.89% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

---------- begin iLQG ----------
iteration     cost    reduction     expected    gradient    log10(lambda)
1           50.3541     26.6        26.6        0.118       0.0         
2           23.7919     9.93        9.93        0.0837      -0.2        
3           13.861      4.87        4.87        0.0829      -0.6        
4           8.98767     2.84        2.84        0.122       -1.2        
5           6.14571     1.31        1.31        0.175       -2.0        
6           4.83571     0.322       0.322       0.168       -3.1        
7           4.51361     0.0184      0.0184      0.0514      -4.3        
8           4.4952      2.2e-05    2.2e-05    0.002       -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

            final cost:   4.495183    

            final grad:   3.318384e-06

            final lambda: 4.4841551e-08

            time / iter:  296   ms

            total time:   2.66  seconds, of which

            derivs:     3.0 %

            back pass:  40.9%

            fwd pass:   6.1 %

            other:      50.1% (graphics etc.)
 =========== end iLQG ===========
 10.829769 seconds (5.99 M allocations: 498.437 MiB, 2.06% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
