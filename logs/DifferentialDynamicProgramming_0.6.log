>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from https://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.2.0
INFO: Installing Requires v0.4.4
INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of DifferentialDynamicProgramming
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.6.3
Commit d55cadc350 (2018-05-28 20:20 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-143-generic #192-Ubuntu SMP Tue Feb 27 10:45:36 UTC 2018 x86_64 x86_64
Memory: 2.939197540283203 GB (1995.7109375 MB free)
Uptime: 63669.0 sec
Load Avg:  0.9970703125  1.009765625  1.03466796875
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3503 MHz    3892617 s       4183 s     272162 s    1235968 s          8 s
#2  3503 MHz     992310 s       1594 s     132966 s    5118888 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.6
2 required packages:
 - DifferentialDynamicProgramming 0.2.0
 - JSON                          0.17.2
3 additional packages:
 - Compat                        0.69.0
 - Nullables                     0.0.5
 - Requires                      0.4.4
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
value = (x' * g + 0.5 * x' * H * x)[1] = 63853.86918011593
==========
Starting box-QP, dimension 500, initial value: 63853.869   
RESULT: Gradient norm smaller than tolerance.
iterations 17  gradient 3.27571e-12  final value -14.7519      factorizations 16
  3.212498 seconds (1.13 M allocations: 136.125 MiB, 0.96% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

---------- begin iLQG ----------
iteration     cost    reduction     expected    gradient    log10(lambda)
1           50.3954     14.5        14.5        0.0801      0.0         
2           35.8655     11.7        11.7        0.0873      -0.2        
3           24.1561     10          10          0.12        -0.6        
4           14.1145     6.52        6.52        0.171       -1.2        
5           7.59214     3.31        3.31        0.236       -2.0        
6           4.28283     0.924       0.924       0.308       -3.1        
7           3.35843     0.0393      0.0393      0.0881      -4.3        
8           3.31909     3.5e-05    3.5e-05    0.0028      -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

            final cost:   3.319051    

            final grad:   4.237713e-06

            final lambda: 4.4841551e-08

            time / iter:  349   ms

            total time:   3.14  seconds, of which

            derivs:     2.2 %

            back pass:  33.7%

            fwd pass:   7.7 %

            other:      56.5% (graphics etc.)
 =========== end iLQG ===========
  8.355182 seconds (5.99 M allocations: 500.604 MiB, 2.39% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
