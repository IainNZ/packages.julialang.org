>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from https://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.2.0
INFO: Installing Requires v0.4.3
INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of DifferentialDynamicProgramming
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.6.0
Commit 9036443 (2017-06-19 13:05 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-128-generic #177-Ubuntu SMP Tue Aug 8 11:40:23 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1716.0625 MB free)
Uptime: 49883.0 sec
Load Avg:  1.0029296875  1.0126953125  1.01318359375
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz    3118717 s       6844 s     144614 s    1004488 s         38 s
#2  3499 MHz     870764 s         91 s      87417 s    3929430 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.6
2 required packages:
 - DifferentialDynamicProgramming 0.2.0
 - JSON                          0.13.0
2 additional packages:
 - Compat                        0.30.0
 - Requires                      0.4.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
value = (x' * g + 0.5 * x' * H * x)[1] = 68644.44106806057
==========
Starting box-QP, dimension 500, initial value: 68644.441   
RESULT: Gradient norm smaller than tolerance.
iterations 17  gradient 2.86257e-12  final value -31.5759      factorizations 16
  3.586084 seconds (1.13 M allocations: 134.466 MiB, 0.93% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

---------- begin iLQG ----------
iteration     cost    reduction     expected    gradient    log10(lambda)
1           51.7157     32.9        32.9        0.136       0.0         
2           18.8273     8.61        8.61        0.0788      -0.2        
3           10.2214     3.34        3.34        0.0612      -0.6        
4           6.87902     2.19        2.19        0.105       -1.2        
5           4.68656     1.08        1.08        0.162       -2.0        
6           3.60347     0.27        0.27        0.156       -3.1        
7           3.33335     0.0167      0.0167      0.0536      -4.3        
8           3.31662     1.97e-05    1.97e-05    0.002       -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

            final cost:   3.316598    

            final grad:   3.328657e-06

            final lambda: 4.4841551e-08

            time / iter:  314   ms

            total time:   2.82  seconds, of which

            derivs:     2.7 %

            back pass:  33.1%

            fwd pass:   7.0 %

            other:      57.2% (graphics etc.)
 =========== end iLQG ===========
  9.088266 seconds (6.07 M allocations: 502.839 MiB, 2.26% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
