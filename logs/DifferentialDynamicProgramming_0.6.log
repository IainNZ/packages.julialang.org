>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from https://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.2.0
INFO: Installing Requires v0.4.3
INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of DifferentialDynamicProgramming
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.6.0
Commit 9036443 (2017-06-19 13:05 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-121-generic #170-Ubuntu SMP Wed Jun 14 09:04:33 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1739.15234375 MB free)
Uptime: 47463.0 sec
Load Avg:  1.05908203125  1.0302734375  1.04833984375
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz    3051732 s       6935 s     139586 s     894674 s         38 s
#2  3499 MHz    1043032 s         82 s      96745 s    3519517 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.6
2 required packages:
 - DifferentialDynamicProgramming 0.2.0
 - JSON                          0.13.0
2 additional packages:
 - Compat                        0.29.0
 - Requires                      0.4.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
value = (x' * g + 0.5 * x' * H * x)[1] = 67014.1251787401
==========
Starting box-QP, dimension 500, initial value: 67014.125   
RESULT: Gradient norm smaller than tolerance.
iterations 23  gradient 3.02354e-12  final value -28.2094      factorizations 22
  4.136560 seconds (1.14 M allocations: 167.491 MiB, 0.92% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

---------- begin iLQG ----------
iteration     cost    reduction     expected    gradient    log10(lambda)
1           49.6672     26.1        26.1        0.117       0.0         
2           23.5893     10.7        10.7        0.0851      -0.2        
3           12.844      4.65        4.65        0.0764      -0.6        
4           8.19822     2.3         2.3         0.0835      -1.2        
5           5.9013      1.19        1.19        0.142       -2.0        
6           4.70894     0.229       0.229       0.166       -3.1        
7           4.47946     0.00649     0.00649     0.0535      -4.3        
8           4.47297     5.3e-06    5.3e-06    0.00194     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

            final cost:   4.472967    

            final grad:   3.163839e-06

            final lambda: 4.4841551e-08

            time / iter:  383   ms

            total time:   3.45  seconds, of which

            derivs:     2.4 %

            back pass:  31.9%

            fwd pass:   7.7 %

            other:      58.0% (graphics etc.)
 =========== end iLQG ===========
 12.357034 seconds (6.07 M allocations: 502.839 MiB, 2.31% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
