>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from https://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.2.0
INFO: Installing Requires v0.4.4
INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of DifferentialDynamicProgramming
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.6.3
Commit d55cadc350 (2018-05-28 20:20 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-143-generic #192-Ubuntu SMP Tue Feb 27 10:45:36 UTC 2018 x86_64 x86_64
Memory: 2.939197540283203 GB (1983.20703125 MB free)
Uptime: 61914.0 sec
Load Avg:  0.978515625  0.970703125  1.00244140625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3498 MHz    3906363 s       2380 s     289181 s    1033405 s          9 s
#2  3498 MHz     862042 s       2961 s     124956 s    5064237 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.6
2 required packages:
 - DifferentialDynamicProgramming 0.2.0
 - JSON                          0.17.2
3 additional packages:
 - Compat                        0.69.0
 - Nullables                     0.0.5
 - Requires                      0.4.4
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
value = (x' * g + 0.5 * x' * H * x)[1] = 69153.04548764975
==========
Starting box-QP, dimension 500, initial value: 69153.045   
RESULT: Gradient norm smaller than tolerance.
iterations 14  gradient 2.97634e-12  final value -29.7346      factorizations 13
  2.085758 seconds (1.13 M allocations: 117.162 MiB, 1.07% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

---------- begin iLQG ----------
iteration     cost    reduction     expected    gradient    log10(lambda)
1           50.161      13.5        13.5        0.0784      0.0         
2           36.7018     11.2        11.2        0.0864      -0.2        
3           25.53       9.71        9.71        0.121       -0.6        
4           15.8159     6.69        6.69        0.173       -1.2        
5           9.12801     4.01        4.01        0.24        -2.0        
6           5.11542     1.37        1.37        0.293       -3.1        
7           3.74213     0.0818      0.0818      0.0981      -4.3        
8           3.66037     9.24e-05    9.24e-05    0.00362     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

            final cost:   3.660276    

            final grad:   5.316248e-06

            final lambda: 4.4841551e-08

            time / iter:  212   ms

            total time:   1.91  seconds, of which

            derivs:     2.2 %

            back pass:  35.1%

            fwd pass:   6.7 %

            other:      56.1% (graphics etc.)
 =========== end iLQG ===========
  6.493654 seconds (5.99 M allocations: 500.604 MiB, 2.69% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
