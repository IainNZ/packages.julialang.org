>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from https://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.2.0
INFO: Installing Requires v0.4.3
INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of DifferentialDynamicProgramming
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.6.2
Commit d386e40c17 (2017-12-13 18:08 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-135-generic #184-Ubuntu SMP Wed Oct 18 11:55:51 UTC 2017 x86_64 x86_64
Memory: 2.93927001953125 GB (2147.421875 MB free)
Uptime: 59891.0 sec
Load Avg:  1.01318359375  1.0185546875  1.04541015625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz    3916700 s       7067 s     170788 s    1023421 s         23 s
#2  3500 MHz    1097996 s         75 s     103257 s    4682640 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.6
2 required packages:
 - DifferentialDynamicProgramming 0.2.0
 - JSON                          0.16.3
3 additional packages:
 - Compat                        0.45.0
 - Nullables                     0.0.3
 - Requires                      0.4.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
value = (x' * g + 0.5 * x' * H * x)[1] = 63617.26226120331
==========
Starting box-QP, dimension 500, initial value: 63617.262   
RESULT: Gradient norm smaller than tolerance.
iterations 19  gradient 3.24298e-12  final value -36.5157      factorizations 18
  3.174648 seconds (1.13 M allocations: 143.597 MiB, 0.91% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

---------- begin iLQG ----------
iteration     cost    reduction     expected    gradient    log10(lambda)
1           50.8372     19.3        19.3        0.0986      0.0         
2           31.5282     9.32        9.32        0.0804      -0.2        
3           22.2048     6.33        6.33        0.0946      -0.6        
4           15.8753     5.83        5.83        0.175       -1.2        
5           10.0409     2.86        2.86        0.27        -2.0        
6           7.18112     0.599       0.599       0.222       -3.1        
7           6.58233     0.0407      0.0407      0.0797      -4.3        
8           6.54162     4.85e-05    4.85e-05    0.00289     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

            final cost:   6.541569    

            final grad:   4.686658e-06

            final lambda: 4.4841551e-08

            time / iter:  304   ms

            total time:   2.74  seconds, of which

            derivs:     2.7 %

            back pass:  26.8%

            fwd pass:   11.7%

            other:      58.7% (graphics etc.)
 =========== end iLQG ===========
 10.734101 seconds (5.99 M allocations: 498.436 MiB, 1.98% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
