>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from https://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.2.0
INFO: Installing Requires v0.4.3
INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of DifferentialDynamicProgramming
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.6.0
Commit 9036443 (2017-06-19 13:05 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-126-generic #175-Ubuntu SMP Thu Jul 20 17:33:56 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1765.91796875 MB free)
Uptime: 48752.0 sec
Load Avg:  0.9970703125  1.00537109375  1.04150390625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3497 MHz    3037916 s       1273 s     145317 s    1002313 s         42 s
#2  3497 MHz     990348 s       4613 s      85486 s    3665884 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.6
2 required packages:
 - DifferentialDynamicProgramming 0.2.0
 - JSON                          0.13.0
2 additional packages:
 - Compat                        0.29.0
 - Requires                      0.4.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
value = (x' * g + 0.5 * x' * H * x)[1] = 62542.65989926653
==========
Starting box-QP, dimension 500, initial value: 62542.660   
RESULT: Gradient norm smaller than tolerance.
iterations 17  gradient 3.00052e-12  final value -21.1995      factorizations 16
  3.428761 seconds (1.13 M allocations: 134.908 MiB, 1.06% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

---------- begin iLQG ----------
iteration     cost    reduction     expected    gradient    log10(lambda)
1           49.4577     19.6        19.6        0.0965      0.0         
2           29.8798     10          10          0.0846      -0.2        
3           19.8808     5.68        5.68        0.0945      -0.6        
4           14.2008     3.3         3.3         0.127       -1.2        
5           10.8989     2.14        2.14        0.191       -2.0        
6           8.75546     0.941       0.941       0.233       -3.1        
7           7.81422     0.0678      0.0678      0.0726      -4.3        
8           7.74643     8.04e-05    8.04e-05    0.00274     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

            final cost:   7.746346    

            final grad:   4.21299e-06

            final lambda: 4.4841551e-08

            time / iter:  294   ms

            total time:   2.65  seconds, of which

            derivs:     2.9 %

            back pass:  33.8%

            fwd pass:   9.2 %

            other:      54.0% (graphics etc.)
 =========== end iLQG ===========
 10.115354 seconds (6.07 M allocations: 502.840 MiB, 2.58% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
