>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from https://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.2.0
INFO: Installing Requires v0.4.3
INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of DifferentialDynamicProgramming
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.6.0
Commit 9036443 (2017-06-19 13:05 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-128-generic #177-Ubuntu SMP Tue Aug 8 11:40:23 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1732.37890625 MB free)
Uptime: 47095.0 sec
Load Avg:  1.0029296875  1.0146484375  1.04541015625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz    3050540 s       6311 s     142790 s     851513 s         42 s
#2  3499 MHz     979097 s         72 s      91481 s    3531520 s          1 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.6
2 required packages:
 - DifferentialDynamicProgramming 0.2.0
 - JSON                          0.13.0
2 additional packages:
 - Compat                        0.30.0
 - Requires                      0.4.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
value = (x' * g + 0.5 * x' * H * x)[1] = 68375.60897725406
==========
Starting box-QP, dimension 500, initial value: 68375.609   
RESULT: Gradient norm smaller than tolerance.
iterations 23  gradient 3.17173e-12  final value -27.8323      factorizations 22
  2.945559 seconds (1.13 M allocations: 167.740 MiB, 1.09% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

---------- begin iLQG ----------
iteration     cost    reduction     expected    gradient    log10(lambda)
1           49.6924     25.9        25.9        0.108       0.0         
2           23.815      13.2        13.2        0.0892      -0.2        
3           10.5729     5.85        5.85        0.0835      -0.6        
4           4.72287     2.06        2.06        0.0733      -1.2        
5           2.66642     0.911       0.911       0.119       -2.0        
6           1.75523     0.267       0.267       0.159       -3.1        
7           1.48826     0.0145      0.0145      0.0567      -4.3        
8           1.47372     1.67e-05    1.67e-05    0.00222     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

            final cost:   1.473708    

            final grad:   3.649502e-06

            final lambda: 4.4841551e-08

            time / iter:  346   ms

            total time:   3.11  seconds, of which

            derivs:     1.6 %

            back pass:  31.2%

            fwd pass:   8.0 %

            other:      59.2% (graphics etc.)
 =========== end iLQG ===========
 11.666081 seconds (6.07 M allocations: 502.839 MiB, 2.46% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
