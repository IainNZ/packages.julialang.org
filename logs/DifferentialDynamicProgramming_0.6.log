>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from https://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.2.0
INFO: Installing Requires v0.4.3
INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of DifferentialDynamicProgramming
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.6.2
Commit d386e40c17 (2017-12-13 18:08 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-135-generic #184-Ubuntu SMP Wed Oct 18 11:55:51 UTC 2017 x86_64 x86_64
Memory: 2.93927001953125 GB (2156.65234375 MB free)
Uptime: 59835.0 sec
Load Avg:  0.9970703125  0.9853515625  1.0263671875
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz    3891930 s       3455 s     160263 s    1009815 s         20 s
#2  3499 MHz    1065224 s       3654 s     106088 s    4687619 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.6
2 required packages:
 - DifferentialDynamicProgramming 0.2.0
 - JSON                          0.16.3
3 additional packages:
 - Compat                        0.46.0
 - Nullables                     0.0.3
 - Requires                      0.4.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
value = (x' * g + 0.5 * x' * H * x)[1] = 55232.13705752202
==========
Starting box-QP, dimension 500, initial value: 55232.137   
RESULT: Gradient norm smaller than tolerance.
iterations 17  gradient 2.87373e-12  final value -22.1462      factorizations 16
  3.960004 seconds (1.13 M allocations: 133.295 MiB, 0.84% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

---------- begin iLQG ----------
iteration     cost    reduction     expected    gradient    log10(lambda)
1           50.2692     20.3        20.3        0.101       0.0         
2           29.9498     11.2        11.2        0.0904      -0.2        
3           18.7869     6.84        6.84        0.101       -0.6        
4           11.948      4.09        4.09        0.127       -1.2        
5           7.85478     2.47        2.47        0.183       -2.0        
6           5.38705     0.566       0.566       0.206       -3.1        
7           4.82081     0.0173      0.0173      0.0671      -4.3        
8           4.80352     1.18e-05    1.18e-05    0.00224     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

            final cost:   4.803508    

            final grad:   3.375482e-06

            final lambda: 4.4841551e-08

            time / iter:  266   ms

            total time:   2.39  seconds, of which

            derivs:     2.0 %

            back pass:  32.1%

            fwd pass:   7.2 %

            other:      58.8% (graphics etc.)
 =========== end iLQG ===========
  9.664832 seconds (5.99 M allocations: 498.437 MiB, 2.16% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
