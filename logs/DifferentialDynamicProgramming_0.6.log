>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from https://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.2.0
INFO: Installing Requires v0.4.3
INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of DifferentialDynamicProgramming
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.6.0
Commit 9036443 (2017-06-19 13:05 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-129-generic #178-Ubuntu SMP Fri Aug 11 12:48:20 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1701.74609375 MB free)
Uptime: 48442.0 sec
Load Avg:  0.98291015625  0.9853515625  1.029296875
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz    3202983 s       7016 s     144243 s     832933 s         31 s
#2  3500 MHz     858812 s         90 s      78169 s    3832557 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.6
2 required packages:
 - DifferentialDynamicProgramming 0.2.0
 - JSON                          0.13.0
2 additional packages:
 - Compat                        0.31.0
 - Requires                      0.4.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
value = (x' * g + 0.5 * x' * H * x)[1] = 55459.406472293675
==========
Starting box-QP, dimension 500, initial value: 55459.406   
RESULT: Gradient norm smaller than tolerance.
iterations 15  gradient 2.98301e-12  final value -38.9055      factorizations 14
  3.285764 seconds (1.13 M allocations: 121.979 MiB, 1.18% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

---------- begin iLQG ----------
iteration     cost    reduction     expected    gradient    log10(lambda)
1           49.9425     20.9        20.9        0.0966      0.0         
2           29.0098     11.5        11.5        0.0866      -0.2        
3           17.5051     6.59        6.59        0.0985      -0.6        
4           10.9189     2.87        2.87        0.11        -1.2        
5           8.05283     1.37        1.37        0.144       -2.0        
6           6.68229     0.46        0.46        0.185       -3.1        
7           6.222       0.0239      0.0239      0.0629      -4.3        
8           6.1981      2.49e-05    2.49e-05    0.00242     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

            final cost:   6.198074    

            final grad:   3.764734e-06

            final lambda: 4.4841551e-08

            time / iter:  345   ms

            total time:   3.11  seconds, of which

            derivs:     2.3 %

            back pass:  28.9%

            fwd pass:   5.3 %

            other:      63.5% (graphics etc.)
 =========== end iLQG ===========
 10.249180 seconds (6.07 M allocations: 502.839 MiB, 2.20% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
