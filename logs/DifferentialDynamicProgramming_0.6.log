>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from https://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.2.0
INFO: Installing Requires v0.4.4
INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of DifferentialDynamicProgramming
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.6.4
Commit 9d11f62bcb (2018-07-09 19:09 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-143-generic #192-Ubuntu SMP Tue Feb 27 10:45:36 UTC 2018 x86_64 x86_64
Memory: 2.939197540283203 GB (1955.25 MB free)
Uptime: 63663.0 sec
Load Avg:  0.904296875  0.9814453125  1.029296875
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz    3958757 s       4766 s     289126 s    1133846 s         12 s
#2  3500 MHz    1002804 s         54 s     132185 s    5085655 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem MAX_THREADS=16)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.6
2 required packages:
 - DifferentialDynamicProgramming 0.2.0
 - JSON                          0.17.2
3 additional packages:
 - Compat                        1.0.0
 - Nullables                     0.0.6
 - Requires                      0.4.4
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
value = (x' * g + 0.5 * x' * H * x)[1] = 61380.83252684016
==========
Starting box-QP, dimension 500, initial value: 61380.833   
RESULT: Gradient norm smaller than tolerance.
iterations 20  gradient 2.94372e-12  final value -19.2988      factorizations 19
  2.073304 seconds (1.13 M allocations: 152.774 MiB, 1.14% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

---------- begin iLQG ----------
iteration     cost    reduction     expected    gradient    log10(lambda)
1           51.0612     21.1        21.1        0.097       0.0         
2           29.9807     9.54        9.54        0.0796      -0.2        
3           20.4417     6.46        6.46        0.0958      -0.6        
4           13.9775     5.17        5.17        0.155       -1.2        
5           8.80933     2.85        2.85        0.243       -2.0        
6           5.95565     0.587       0.587       0.229       -3.1        
7           5.36829     0.0226      0.0226      0.0623      -4.3        
8           5.34566     2.36e-05    2.36e-05    0.00209     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

            final cost:   5.345633    

            final grad:   3.376235e-06

            final lambda: 4.4841551e-08

            time / iter:  205   ms

            total time:   1.85  seconds, of which

            derivs:     2.1 %

            back pass:  35.3%

            fwd pass:   8.0 %

            other:      54.5% (graphics etc.)
 =========== end iLQG ===========
  6.275153 seconds (5.99 M allocations: 499.869 MiB, 2.91% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
