>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from https://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.2.0
INFO: Installing Requires v0.4.4
INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of DifferentialDynamicProgramming
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.6.4
Commit 9d11f62bcb (2018-07-09 19:09 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-143-generic #192-Ubuntu SMP Tue Feb 27 10:45:36 UTC 2018 x86_64 x86_64
Memory: 2.939197540283203 GB (1979.19140625 MB free)
Uptime: 65035.0 sec
Load Avg:  1.0029296875  1.0146484375  1.04541015625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz    4018332 s         63 s     284518 s    1233208 s         11 s
#2  3500 MHz    1086588 s       4477 s     138387 s    5143330 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem MAX_THREADS=16)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.6
2 required packages:
 - DifferentialDynamicProgramming 0.2.0
 - JSON                          0.17.2
3 additional packages:
 - Compat                        1.0.0
 - Nullables                     0.0.6
 - Requires                      0.4.4
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
value = (x' * g + 0.5 * x' * H * x)[1] = 65488.31799375341
==========
Starting box-QP, dimension 500, initial value: 65488.318   
RESULT: Gradient norm smaller than tolerance.
iterations 16  gradient 3.25894e-12  final value -31.0305      factorizations 15
  2.521115 seconds (1.13 M allocations: 127.333 MiB, 1.05% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

---------- begin iLQG ----------
iteration     cost    reduction     expected    gradient    log10(lambda)
1           50.1048     20.5        20.5        0.104       0.0         
2           29.6172     11.1        11.1        0.0927      -0.2        
3           18.5235     6.69        6.69        0.104       -0.6        
4           11.8341     4.62        4.62        0.148       -1.2        
5           7.21272     2.43        2.43        0.245       -2.0        
6           4.78483     0.421       0.421       0.204       -3.1        
7           4.36396     0.012       0.012       0.0658      -4.3        
8           4.352       9.17e-06    9.17e-06    0.00206     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

            final cost:   4.351994    

            final grad:   3.369677e-06

            final lambda: 4.4841551e-08

            time / iter:  390   ms

            total time:   3.51  seconds, of which

            derivs:     1.4 %

            back pass:  32.1%

            fwd pass:   8.2 %

            other:      58.3% (graphics etc.)
 =========== end iLQG ===========
  8.314170 seconds (5.99 M allocations: 499.870 MiB, 3.07% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
