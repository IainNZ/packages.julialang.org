>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from https://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.2.0
INFO: Installing Requires v0.4.3
INFO: Package database updated

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.6.2
Commit d386e40c17 (2017-12-13 18:08 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-135-generic #184-Ubuntu SMP Wed Oct 18 11:55:51 UTC 2017 x86_64 x86_64
Memory: 2.93927001953125 GB (1728.984375 MB free)
Uptime: 67217.0 sec
Load Avg:  1.0029296875  1.0078125  1.00244140625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3513 MHz    4186862 s       7350 s     195608 s    1386207 s         56 s
#2  3513 MHz    1193508 s         71 s     113937 s    5288506 s          1 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.6
2 required packages:
 - DifferentialDynamicProgramming 0.2.0
 - JSON                          0.17.1
3 additional packages:
 - Compat                        0.56.0
 - Nullables                     0.0.3
 - Requires                      0.4.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
value = (x' * g + 0.5 * x' * H * x)[1] = 65326.271334231795
==========
Starting box-QP, dimension 500, initial value: 65326.271   
RESULT: Gradient norm smaller than tolerance.
iterations 18  gradient 2.83464e-12  final value -25.6676      factorizations 17
  4.341541 seconds (1.13 M allocations: 141.794 MiB, 1.00% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

---------- begin iLQG ----------
iteration     cost    reduction     expected    gradient    log10(lambda)
1           50.0491     15.9        15.9        0.0868      0.0         
2           34.1878     9.06        9.06        0.0779      -0.2        
3           25.1289     6.8         6.8         0.0996      -0.6        
4           18.3283     5.65        5.65        0.165       -1.2        
5           12.6815     4.1         4.1         0.281       -2.0        
6           8.57766     1.71        1.71        0.273       -3.1        
7           6.86789     0.122       0.122       0.0851      -4.3        
8           6.74623     0.000147    0.000147    0.00335     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

            final cost:   6.746086    

            final grad:   4.847127e-06

            final lambda: 4.4841551e-08

            time / iter:  467   ms

            total time:   4.20  seconds, of which

            derivs:     2.2 %

            back pass:  33.3%

            fwd pass:   7.2 %

            other:      57.3% (graphics etc.)
 =========== end iLQG ===========
 14.091288 seconds (5.99 M allocations: 498.437 MiB, 2.32% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
