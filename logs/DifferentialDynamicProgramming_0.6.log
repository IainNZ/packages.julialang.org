>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from https://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.2.0
INFO: Installing Requires v0.4.3
INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of DifferentialDynamicProgramming
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.6.0
Commit 9036443 (2017-06-19 13:05 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-121-generic #170-Ubuntu SMP Wed Jun 14 09:04:33 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1700.9296875 MB free)
Uptime: 46959.0 sec
Load Avg:  1.025390625  1.03515625  1.04541015625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3498 MHz    2994848 s       6930 s     146162 s     880507 s         51 s
#2  3498 MHz    1016928 s         40 s      89548 s    3470232 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.6
2 required packages:
 - DifferentialDynamicProgramming 0.2.0
 - JSON                          0.13.0
2 additional packages:
 - Compat                        0.27.0
 - Requires                      0.4.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
value = (x' * g + 0.5 * x' * H * x)[1] = 61041.113010819914
==========
Starting box-QP, dimension 500, initial value: 61041.113   
RESULT: Gradient norm smaller than tolerance.
iterations 14  gradient 3.11999e-12  final value -32.1525      factorizations 13
  4.716922 seconds (1.12 M allocations: 116.468 MiB, 0.95% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

---------- begin iLQG ----------
iteration     cost    reduction     expected    gradient    log10(lambda)
1           50.5488     25.1        25.1        0.115       0.0         
2           25.4474     11.3        11.3        0.0921      -0.2        
3           14.1875     4.71        4.71        0.0843      -0.6        
4           9.47443     2.19        2.19        0.0842      -1.2        
5           7.28264     1.16        1.16        0.151       -2.0        
6           6.12043     0.279       0.279       0.158       -3.1        
7           5.84147     0.0155      0.0155      0.0538      -4.3        
8           5.82593     1.92e-05    1.92e-05    0.00213     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

            final cost:   5.825906    

            final grad:   3.501436e-06

            final lambda: 4.4841551e-08

            time / iter:  385   ms

            total time:   3.46  seconds, of which

            derivs:     2.4 %

            back pass:  31.0%

            fwd pass:   7.4 %

            other:      59.3% (graphics etc.)
 =========== end iLQG ===========
 13.555404 seconds (6.07 M allocations: 502.839 MiB, 2.20% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
