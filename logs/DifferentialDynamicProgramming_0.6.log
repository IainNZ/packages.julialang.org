>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from https://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.2.0
INFO: Installing Requires v0.4.4
INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of DifferentialDynamicProgramming
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.6.4
Commit 9d11f62bcb (2018-07-09 19:09 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-143-generic #192-Ubuntu SMP Tue Feb 27 10:45:36 UTC 2018 x86_64 x86_64
Memory: 2.939197540283203 GB (1950.42578125 MB free)
Uptime: 64999.0 sec
Load Avg:  1.00341796875  1.001953125  1.02392578125
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3511 MHz    3987575 s         70 s     282449 s    1268228 s          9 s
#2  3511 MHz     953496 s       6461 s     130904 s    5297010 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem MAX_THREADS=16)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.6
2 required packages:
 - DifferentialDynamicProgramming 0.2.0
 - JSON                          0.17.2
3 additional packages:
 - Compat                        1.0.0
 - Nullables                     0.0.6
 - Requires                      0.4.4
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
value = (x' * g + 0.5 * x' * H * x)[1] = 69828.65535768065
==========
Starting box-QP, dimension 500, initial value: 69828.655   
RESULT: Gradient norm smaller than tolerance.
iterations 16  gradient 3.34308e-12  final value -32.7856      factorizations 15
  2.469577 seconds (1.13 M allocations: 127.120 MiB, 1.02% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

---------- begin iLQG ----------
iteration     cost    reduction     expected    gradient    log10(lambda)
1           49.7878     24.7        24.7        0.107       0.0         
2           25.073      10.8        10.8        0.0837      -0.2        
3           14.2473     5.54        5.54        0.0856      -0.6        
4           8.70461     3.18        3.18        0.111       -1.2        
5           5.52135     1.47        1.47        0.16        -2.0        
6           4.04641     0.259       0.259       0.155       -3.1        
7           3.78714     0.00725     0.00725     0.0493      -4.3        
8           3.7799      5.97e-06    5.97e-06    0.00184     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

            final cost:   3.779891    

            final grad:   3.037486e-06

            final lambda: 4.4841551e-08

            time / iter:  228   ms

            total time:   2.05  seconds, of which

            derivs:     2.1 %

            back pass:  35.3%

            fwd pass:   8.2 %

            other:      54.4% (graphics etc.)
 =========== end iLQG ===========
  7.173538 seconds (5.99 M allocations: 499.869 MiB, 2.47% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
