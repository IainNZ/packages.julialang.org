>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from https://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.2.0
INFO: Installing Requires v0.4.3
INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of DifferentialDynamicProgramming
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.6.0
Commit 9036443 (2017-06-19 13:05 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-121-generic #170-Ubuntu SMP Wed Jun 14 09:04:33 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1763.6640625 MB free)
Uptime: 47376.0 sec
Load Avg:  0.984375  0.998046875  1.0400390625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz    2972034 s       1194 s     136976 s     977261 s         42 s
#2  3500 MHz    1092674 s       6128 s     100784 s    3434497 s          1 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.6
2 required packages:
 - DifferentialDynamicProgramming 0.2.0
 - JSON                          0.13.0
2 additional packages:
 - Compat                        0.27.0
 - Requires                      0.4.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
value = (x' * g + 0.5 * x' * H * x)[1] = 64926.95532092463
==========
Starting box-QP, dimension 500, initial value: 64926.955   
RESULT: Gradient norm smaller than tolerance.
iterations 16  gradient 2.94933e-12  final value -34.2499      factorizations 14
  3.424041 seconds (1.13 M allocations: 124.299 MiB, 1.10% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

---------- begin iLQG ----------
iteration     cost    reduction     expected    gradient    log10(lambda)
1           51.9216     29.4        29.4        0.123       0.0         
2           22.5369     10.1        10.1        0.0843      -0.2        
3           12.4315     3.39        3.39        0.0661      -0.6        
4           9.03673     1.57        1.57        0.0807      -1.2        
5           7.46687     0.783       0.783       0.132       -2.0        
6           6.68374     0.173       0.173       0.135       -3.1        
7           6.51072     0.00885     0.00885     0.0483      -4.3        
8           6.50187     1.02e-05    1.02e-05    0.00194     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

            final cost:   6.501861    

            final grad:   3.214352e-06

            final lambda: 4.4841551e-08

            time / iter:  269   ms

            total time:   2.42  seconds, of which

            derivs:     2.3 %

            back pass:  33.2%

            fwd pass:   10.0%

            other:      54.4% (graphics etc.)
 =========== end iLQG ===========
 11.467794 seconds (6.07 M allocations: 502.839 MiB, 2.52% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
