>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from https://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.2.0
INFO: Installing Requires v0.4.3
INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of DifferentialDynamicProgramming
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.6.0
Commit 9036443 (2017-06-19 13:05 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-121-generic #170-Ubuntu SMP Wed Jun 14 09:04:33 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1709.58984375 MB free)
Uptime: 48063.0 sec
Load Avg:  1.05224609375  1.0283203125  1.025390625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz    3080588 s       3967 s     150243 s     888030 s         50 s
#2  3499 MHz    1009522 s       2899 s      92035 s    3592181 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.6
2 required packages:
 - DifferentialDynamicProgramming 0.2.0
 - JSON                          0.13.0
2 additional packages:
 - Compat                        0.28.0
 - Requires                      0.4.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
value = (x' * g + 0.5 * x' * H * x)[1] = 62179.13522603131
==========
Starting box-QP, dimension 500, initial value: 62179.135   
RESULT: Gradient norm smaller than tolerance.
iterations 18  gradient 3.23919e-12  final value -33.4834      factorizations 16
  3.727988 seconds (1.13 M allocations: 135.787 MiB, 1.05% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

---------- begin iLQG ----------
iteration     cost    reduction     expected    gradient    log10(lambda)
1           49.8206     26.4        26.4        0.113       0.0         
2           23.4133     10.9        10.9        0.0853      -0.2        
3           12.4809     4.84        4.84        0.0799      -0.6        
4           7.64055     2.42        2.42        0.0974      -1.2        
5           5.21645     1.16        1.16        0.136       -2.0        
6           4.05174     0.317       0.317       0.174       -3.1        
7           3.73462     0.0201      0.0201      0.0581      -4.3        
8           3.7145      2.51e-05    2.51e-05    0.00228     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

            final cost:   3.714471    

            final grad:   3.896689e-06

            final lambda: 4.4841551e-08

            time / iter:  325   ms

            total time:   2.93  seconds, of which

            derivs:     3.1 %

            back pass:  29.3%

            fwd pass:   7.3 %

            other:      60.3% (graphics etc.)
 =========== end iLQG ===========
 11.300452 seconds (6.07 M allocations: 502.839 MiB, 2.44% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
