>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from https://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.2.0
INFO: Installing Requires v0.4.3
INFO: Package database updated

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.6.0-rc2.0
Commit 68e911b (2017-05-18 02:31 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-119-generic #166-Ubuntu SMP Wed May 3 12:18:55 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1725.1640625 MB free)
Uptime: 44383.0 sec
Load Avg:  0.9833984375  0.978515625  1.01318359375
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz    2871462 s       4479 s     143110 s     782280 s         42 s
#2  3500 MHz     872680 s        446 s      81024 s    3390352 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.6
2 required packages:
 - DifferentialDynamicProgramming 0.2.0
 - JSON                          0.12.0
2 additional packages:
 - Compat                        0.25.2
 - Requires                      0.4.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
value = (x' * g + 0.5 * x' * H * x)[1] = 69171.39409599121
==========
Starting box-QP, dimension 500, initial value: 69171.394   
RESULT: Gradient norm smaller than tolerance.
iterations 15  gradient 3.404e-12  final value -31.561       factorizations 14
  3.713707 seconds (1.14 M allocations: 123.261 MiB, 1.11% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

---------- begin iLQG ----------
iteration     cost    reduction     expected    gradient    log10(lambda)
1           50.2633     21.5        21.5        0.102       0.0         
2           28.7864     11.6        11.6        0.0901      -0.2        
3           17.1558     5.9         5.9         0.0932      -0.6        
4           11.2592     3.04        3.04        0.107       -1.2        
5           8.22248     1.78        1.78        0.182       -2.0        
6           6.44523     0.461       0.461       0.206       -3.1        
7           5.98412     0.0235      0.0235      0.0658      -4.3        
8           5.96061     2.7e-05    2.7e-05    0.00254     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

            final cost:   5.960582    

            final grad:   4.003672e-06

            final lambda: 4.4841551e-08

            time / iter:  377   ms

            total time:   3.39  seconds, of which

            derivs:     2.0 %

            back pass:  28.4%

            fwd pass:   7.5 %

            other:      62.1% (graphics etc.)
 =========== end iLQG ===========
  8.774676 seconds (5.76 M allocations: 497.830 MiB, 2.65% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
