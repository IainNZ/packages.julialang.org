>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from https://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.2.0
INFO: Installing Requires v0.4.3
INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of DifferentialDynamicProgramming
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.6.0-rc2.0
Commit 68e911b (2017-05-18 02:31 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-119-generic #166-Ubuntu SMP Wed May 3 12:18:55 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1729.8359375 MB free)
Uptime: 43453.0 sec
Load Avg:  0.94775390625  0.97216796875  1.0185546875
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3514 MHz    2743305 s       6278 s     124224 s     860731 s         43 s
#2  3514 MHz     904131 s        765 s      94816 s    3222981 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.6
2 required packages:
 - DifferentialDynamicProgramming 0.2.0
 - JSON                          0.12.0
2 additional packages:
 - Compat                        0.25.2
 - Requires                      0.4.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
value = (x' * g + 0.5 * x' * H * x)[1] = 64648.12999579326
==========
Starting box-QP, dimension 500, initial value: 64648.130   
RESULT: Gradient norm smaller than tolerance.
iterations 11  gradient 2.91538e-12  final value -29.5107      factorizations 10
  3.596210 seconds (1.14 M allocations: 102.308 MiB, 1.17% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

---------- begin iLQG ----------
iteration     cost    reduction     expected    gradient    log10(lambda)
1           51.5875     27.7        27.7        0.111       0.0         
2           23.9148     11.7        11.7        0.0837      -0.2        
3           12.2362     4.74        4.74        0.0753      -0.6        
4           7.49835     1.98        1.98        0.0846      -1.2        
5           5.52155     1.1         1.1         0.144       -2.0        
6           4.42372     0.454       0.454       0.181       -3.1        
7           3.96949     0.0304      0.0304      0.0609      -4.3        
8           3.93913     3.37e-05    3.37e-05    0.00228     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

            final cost:   3.939098    

            final grad:   3.814603e-06

            final lambda: 4.4841551e-08

            time / iter:  283   ms

            total time:   2.55  seconds, of which

            derivs:     1.8 %

            back pass:  31.9%

            fwd pass:   9.5 %

            other:      56.8% (graphics etc.)
 =========== end iLQG ===========
 10.934479 seconds (5.78 M allocations: 498.381 MiB, 2.46% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
