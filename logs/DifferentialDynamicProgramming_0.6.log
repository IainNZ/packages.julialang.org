>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from https://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.2.0
INFO: Installing Requires v0.4.3
INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of DifferentialDynamicProgramming
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.6.2
Commit d386e40c17 (2017-12-13 18:08 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-135-generic #184-Ubuntu SMP Wed Oct 18 11:55:51 UTC 2017 x86_64 x86_64
Memory: 2.93927001953125 GB (2165.91015625 MB free)
Uptime: 61496.0 sec
Load Avg:  1.02783203125  1.01611328125  1.0400390625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz    3929962 s       7397 s     166391 s    1121536 s         32 s
#2  3500 MHz    1177604 s        201 s     108043 s    4712612 s          1 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.6
2 required packages:
 - DifferentialDynamicProgramming 0.2.0
 - JSON                          0.16.4
3 additional packages:
 - Compat                        0.46.0
 - Nullables                     0.0.3
 - Requires                      0.4.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
value = (x' * g + 0.5 * x' * H * x)[1] = 65618.60077719842
==========
Starting box-QP, dimension 500, initial value: 65618.601   
RESULT: Gradient norm smaller than tolerance.
iterations 14  gradient 3.12052e-12  final value -29.0327      factorizations 13
  3.997031 seconds (1.13 M allocations: 117.295 MiB, 0.83% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

---------- begin iLQG ----------
iteration     cost    reduction     expected    gradient    log10(lambda)
1           50.3224     27.8        27.8        0.125       0.0         
2           22.5676     9.79        9.79        0.0855      -0.2        
3           12.7809     4.31        4.31        0.0757      -0.6        
4           8.46846     2.55        2.55        0.095       -1.2        
5           5.91642     1.47        1.47        0.148       -2.0        
6           4.44467     0.57        0.57        0.162       -3.1        
7           3.87496     0.0468      0.0468      0.0603      -4.3        
8           3.82819     5.94e-05    5.94e-05    0.00243     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

            final cost:   3.828136    

            final grad:   3.962988e-06

            final lambda: 4.4841551e-08

            time / iter:  271   ms

            total time:   2.44  seconds, of which

            derivs:     2.3 %

            back pass:  37.9%

            fwd pass:   8.9 %

            other:      50.9% (graphics etc.)
 =========== end iLQG ===========
 10.076060 seconds (5.99 M allocations: 498.437 MiB, 2.45% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
