>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from https://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.2.0
INFO: Installing Requires v0.4.3
INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of DifferentialDynamicProgramming
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.6.0
Commit 9036443 (2017-06-19 13:05 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-128-generic #177-Ubuntu SMP Tue Aug 8 11:40:23 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1744.34765625 MB free)
Uptime: 48132.0 sec
Load Avg:  1.01416015625  1.02099609375  1.044921875
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3498 MHz    3146169 s       8195 s     137344 s     821931 s         30 s
#2  3498 MHz     959643 s         46 s      96752 s    3656273 s          3 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.6
2 required packages:
 - DifferentialDynamicProgramming 0.2.0
 - JSON                          0.13.0
2 additional packages:
 - Compat                        0.30.0
 - Requires                      0.4.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
value = (x' * g + 0.5 * x' * H * x)[1] = 73448.91723587946
==========
Starting box-QP, dimension 500, initial value: 73448.917   
RESULT: Gradient norm smaller than tolerance.
iterations 18  gradient 2.67203e-12  final value -21.0267      factorizations 17
  2.835756 seconds (1.13 M allocations: 140.945 MiB, 1.22% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

---------- begin iLQG ----------
iteration     cost    reduction     expected    gradient    log10(lambda)
1           51.1864     15.7        15.7        0.0855      0.0         
2           35.5165     10.4        10.4        0.0849      -0.2        
3           25.1062     8.37        8.37        0.113       -0.6        
4           16.7353     7.02        7.02        0.196       -1.2        
5           9.71144     3.88        3.88        0.308       -2.0        
6           5.83615     1.11        1.11        0.271       -3.1        
7           4.72447     0.0733      0.0733      0.0982      -4.3        
8           4.65119     8.49e-05    8.49e-05    0.00327     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

            final cost:   4.651108    

            final grad:   4.854927e-06

            final lambda: 4.4841551e-08

            time / iter:  349   ms

            total time:   3.14  seconds, of which

            derivs:     2.3 %

            back pass:  33.6%

            fwd pass:   8.6 %

            other:      55.5% (graphics etc.)
 =========== end iLQG ===========
 11.078298 seconds (6.07 M allocations: 502.839 MiB, 2.02% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
