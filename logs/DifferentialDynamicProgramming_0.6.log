>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from https://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.2.0
INFO: Installing Requires v0.4.4
INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of DifferentialDynamicProgramming
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.6.4
Commit 9d11f62bcb (2018-07-09 19:09 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-143-generic #192-Ubuntu SMP Tue Feb 27 10:45:36 UTC 2018 x86_64 x86_64
Memory: 2.939197540283203 GB (1968.2734375 MB free)
Uptime: 62514.0 sec
Load Avg:  1.01318359375  1.00341796875  1.0400390625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3510 MHz    3936993 s       4804 s     281211 s    1073581 s          6 s
#2  3510 MHz     942983 s        100 s     129299 s    5039600 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem MAX_THREADS=16)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.6
2 required packages:
 - DifferentialDynamicProgramming 0.2.0
 - JSON                          0.17.2
3 additional packages:
 - Compat                        1.0.0
 - Nullables                     0.0.6
 - Requires                      0.4.4
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
value = (x' * g + 0.5 * x' * H * x)[1] = 75590.39169272863
==========
Starting box-QP, dimension 500, initial value: 75590.392   
RESULT: Gradient norm smaller than tolerance.
iterations 23  gradient 3.20328e-12  final value -27.4443      factorizations 22
  2.505363 seconds (1.14 M allocations: 167.645 MiB, 1.15% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

---------- begin iLQG ----------
iteration     cost    reduction     expected    gradient    log10(lambda)
1           49.7504     22.1        22.1        0.101       0.0         
2           27.6832     9.53        9.53        0.075       -0.2        
3           18.1545     5.53        5.53        0.0809      -0.6        
4           12.6225     4.01        4.01        0.127       -1.2        
5           8.60982     2.26        2.26        0.189       -2.0        
6           6.34986     0.795       0.795       0.183       -3.1        
7           5.55457     0.0565      0.0565      0.0673      -4.3        
8           5.49808     6.5e-05    6.5e-05    0.00243     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

            final cost:   5.498012    

            final grad:   3.819092e-06

            final lambda: 4.4841551e-08

            time / iter:  229   ms

            total time:   2.06  seconds, of which

            derivs:     2.2 %

            back pass:  35.0%

            fwd pass:   8.4 %

            other:      54.4% (graphics etc.)
 =========== end iLQG ===========
  6.499776 seconds (5.99 M allocations: 499.869 MiB, 2.53% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
