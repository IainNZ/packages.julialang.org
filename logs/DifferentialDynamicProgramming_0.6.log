>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from https://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.2.0
INFO: Installing Requires v0.4.3
INFO: Package database updated

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.6.0
Commit 9036443 (2017-06-19 13:05 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-128-generic #177-Ubuntu SMP Tue Aug 8 11:40:23 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1699.26953125 MB free)
Uptime: 50670.0 sec
Load Avg:  1.0  0.9853515625  0.9970703125
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3501 MHz    3206964 s       6359 s     162296 s     973515 s         58 s
#2  3501 MHz     944216 s         94 s      88134 s    3912576 s          2 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.6
2 required packages:
 - DifferentialDynamicProgramming 0.2.0
 - JSON                          0.13.0
2 additional packages:
 - Compat                        0.30.0
 - Requires                      0.4.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
value = (x' * g + 0.5 * x' * H * x)[1] = 70068.66161032855
==========
Starting box-QP, dimension 500, initial value: 70068.662   
RESULT: Gradient norm smaller than tolerance.
iterations 14  gradient 3.06734e-12  final value -23.7284      factorizations 13
  3.778381 seconds (1.12 M allocations: 117.763 MiB, 1.10% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

---------- begin iLQG ----------
iteration     cost    reduction     expected    gradient    log10(lambda)
1           50.8383     24.2        24.2        0.104       0.0         
2           26.622      12.5        12.5        0.0867      -0.2        
3           14.1418     5.95        5.95        0.0826      -0.6        
4           8.18991     2.83        2.83        0.0816      -1.2        
5           5.35545     1.4         1.4         0.154       -2.0        
6           3.95677     0.365       0.365       0.189       -3.1        
7           3.59157     0.0164      0.0164      0.0638      -4.3        
8           3.57515     1.22e-05    1.22e-05    0.00224     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

            final cost:   3.575143    

            final grad:   3.407235e-06

            final lambda: 4.4841551e-08

            time / iter:  402   ms

            total time:   3.62  seconds, of which

            derivs:     1.9 %

            back pass:  30.3%

            fwd pass:   8.0 %

            other:      59.7% (graphics etc.)
 =========== end iLQG ===========
 11.962591 seconds (6.07 M allocations: 502.839 MiB, 2.32% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
