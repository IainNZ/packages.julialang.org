>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from https://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.2.0
INFO: Installing Requires v0.4.3
INFO: Package database updated

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.6.0
Commit 9036443 (2017-06-19 13:05 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-128-generic #177-Ubuntu SMP Tue Aug 8 11:40:23 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1772.54296875 MB free)
Uptime: 47463.0 sec
Load Avg:  1.0029296875  1.0146484375  1.03466796875
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3492 MHz    3099667 s       1312 s     141831 s     825676 s         35 s
#2  3492 MHz     965636 s       5135 s      91690 s    3585118 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.6
2 required packages:
 - DifferentialDynamicProgramming 0.2.0
 - JSON                          0.13.0
2 additional packages:
 - Compat                        0.30.0
 - Requires                      0.4.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
value = (x' * g + 0.5 * x' * H * x)[1] = 63523.17144058371
==========
Starting box-QP, dimension 500, initial value: 63523.171   
RESULT: Gradient norm smaller than tolerance.
iterations 17  gradient 2.92576e-12  final value -21.8687      factorizations 16
  3.691509 seconds (1.13 M allocations: 135.498 MiB, 1.07% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

---------- begin iLQG ----------
iteration     cost    reduction     expected    gradient    log10(lambda)
1           49.8713     24.9        24.9        0.109       0.0         
2           24.9677     11          11          0.0858      -0.2        
3           13.9963     4.97        4.97        0.0805      -0.6        
4           9.02144     2.7         2.7         0.0931      -1.2        
5           6.3222      1.65        1.65        0.166       -2.0        
6           4.6682      0.685       0.685       0.191       -3.1        
7           3.98312     0.0554      0.0554      0.0643      -4.3        
8           3.92768     6.78e-05    6.78e-05    0.00243     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

            final cost:   3.92761     

            final grad:   3.882981e-06

            final lambda: 4.4841551e-08

            time / iter:  277   ms

            total time:   2.49  seconds, of which

            derivs:     2.9 %

            back pass:  33.7%

            fwd pass:   9.3 %

            other:      54.1% (graphics etc.)
 =========== end iLQG ===========
  9.036020 seconds (6.07 M allocations: 502.840 MiB, 2.33% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
