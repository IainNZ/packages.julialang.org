>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from https://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.2.0
INFO: Installing Requires v0.4.3
INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of DifferentialDynamicProgramming
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.6.0-rc2.0
Commit 68e911b (2017-05-18 02:31 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-119-generic #166-Ubuntu SMP Wed May 3 12:18:55 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1740.140625 MB free)
Uptime: 44054.0 sec
Load Avg:  0.9970703125  0.9853515625  1.0400390625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz    2806155 s       2603 s     132079 s     828014 s         34 s
#2  3500 MHz     857933 s       3271 s      81473 s    3369369 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.6
2 required packages:
 - DifferentialDynamicProgramming 0.2.0
 - JSON                          0.12.0
2 additional packages:
 - Compat                        0.25.2
 - Requires                      0.4.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
value = (x' * g + 0.5 * x' * H * x)[1] = 71597.48487638195
==========
Starting box-QP, dimension 500, initial value: 71597.485   
RESULT: Gradient norm smaller than tolerance.
iterations 20  gradient 2.78397e-12  final value -23.7517      factorizations 19
  4.142732 seconds (1.15 M allocations: 151.995 MiB, 1.03% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

---------- begin iLQG ----------
iteration     cost    reduction     expected    gradient    log10(lambda)
1           49.5388     27.9        27.9        0.121       0.0         
2           21.6612     10.7        10.7        0.0871      -0.2        
3           10.9377     4.17        4.17        0.0746      -0.6        
4           6.76348     2.03        2.03        0.077       -1.2        
5           4.73214     1.1         1.1         0.131       -2.0        
6           3.62777     0.32        0.32        0.13        -3.1        
7           3.3082      0.0218      0.0218      0.0503      -4.3        
8           3.28642     2.66e-05    2.66e-05    0.00208     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

            final cost:   3.286391    

            final grad:   3.457889e-06

            final lambda: 4.4841551e-08

            time / iter:  322   ms

            total time:   2.90  seconds, of which

            derivs:     2.4 %

            back pass:  33.4%

            fwd pass:   7.2 %

            other:      56.9% (graphics etc.)
 =========== end iLQG ===========
  9.670945 seconds (5.76 M allocations: 497.831 MiB, 2.56% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
