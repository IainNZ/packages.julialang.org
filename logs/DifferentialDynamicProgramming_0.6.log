>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from https://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.2.0
INFO: Installing Requires v0.4.3
INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of DifferentialDynamicProgramming
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.6.0
Commit 9036443 (2017-06-19 13:05 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-128-generic #177-Ubuntu SMP Tue Aug 8 11:40:23 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1721.08984375 MB free)
Uptime: 47178.0 sec
Load Avg:  0.97216796875  0.9658203125  1.0185546875
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz    3045485 s       6215 s     131693 s     854032 s         45 s
#2  3500 MHz     954697 s       3270 s      96284 s    3541193 s          1 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.6
2 required packages:
 - DifferentialDynamicProgramming 0.2.0
 - JSON                          0.13.0
2 additional packages:
 - Compat                        0.30.0
 - Requires                      0.4.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
value = (x' * g + 0.5 * x' * H * x)[1] = 62722.07482012868
==========
Starting box-QP, dimension 500, initial value: 62722.075   
RESULT: Gradient norm smaller than tolerance.
iterations 15  gradient 3.04035e-12  final value -30.8801      factorizations 14
  4.101459 seconds (1.13 M allocations: 123.842 MiB, 0.98% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

---------- begin iLQG ----------
iteration     cost    reduction     expected    gradient    log10(lambda)
1           48.7433     21.4        21.4        0.0998      0.0         
2           27.3015     11.5        11.5        0.0847      -0.2        
3           15.7747     6.31        6.31        0.0925      -0.6        
4           9.46079     3.12        3.12        0.112       -1.2        
5           6.33664     1.76        1.76        0.164       -2.0        
6           4.57726     0.492       0.492       0.222       -3.1        
7           4.0855      0.0203      0.0203      0.0677      -4.3        
8           4.0652      1.75e-05    1.75e-05    0.00239     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

            final cost:   4.065178    

            final grad:   3.811752e-06

            final lambda: 4.4841551e-08

            time / iter:  259   ms

            total time:   2.33  seconds, of which

            derivs:     2.1 %

            back pass:  30.9%

            fwd pass:   7.1 %

            other:      59.9% (graphics etc.)
 =========== end iLQG ===========
  8.791793 seconds (6.07 M allocations: 502.839 MiB, 2.35% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
