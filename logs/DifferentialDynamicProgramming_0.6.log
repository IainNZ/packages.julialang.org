>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from https://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.2.0
INFO: Installing Requires v0.4.3
INFO: Package database updated

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.6.0-rc3.0
Commit ad290e9 (2017-06-07 11:53 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-119-generic #166-Ubuntu SMP Wed May 3 12:18:55 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1706.125 MB free)
Uptime: 46076.0 sec
Load Avg:  0.9169921875  0.96875  1.0078125
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3495 MHz    2987958 s       6580 s     146602 s     805353 s         39 s
#2  3495 MHz     927422 s         68 s     110522 s    3454406 s          1 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.6
2 required packages:
 - DifferentialDynamicProgramming 0.2.0
 - JSON                          0.12.0
2 additional packages:
 - Compat                        0.26.0
 - Requires                      0.4.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
value = (x' * g + 0.5 * x' * H * x)[1] = 69692.59686938218
==========
Starting box-QP, dimension 500, initial value: 69692.597   
RESULT: Gradient norm smaller than tolerance.
iterations 14  gradient 2.87709e-12  final value -40.921       factorizations 13
  3.987834 seconds (1.12 M allocations: 116.005 MiB, 0.93% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

---------- begin iLQG ----------
iteration     cost    reduction     expected    gradient    log10(lambda)
1           50.385      23.1        23.1        0.107       0.0         
2           27.2391     12.3        12.3        0.0919      -0.2        
3           14.927      6.16        6.16        0.0908      -0.6        
4           8.76761     2.9         2.9         0.0937      -1.2        
5           5.86394     1.5         1.5         0.155       -2.0        
6           4.36807     0.395       0.395       0.192       -3.1        
7           3.97304     0.0164      0.0164      0.0615      -4.3        
8           3.9566      1.28e-05    1.28e-05    0.00227     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

            final cost:   3.956588    

            final grad:   3.539018e-06

            final lambda: 4.4841551e-08

            time / iter:  326   ms

            total time:   2.93  seconds, of which

            derivs:     2.7 %

            back pass:  37.0%

            fwd pass:   5.9 %

            other:      54.4% (graphics etc.)
 =========== end iLQG ===========
 11.188569 seconds (4.94 M allocations: 452.872 MiB, 2.37% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
