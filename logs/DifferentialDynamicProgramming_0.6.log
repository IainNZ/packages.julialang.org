>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from https://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.2.0
INFO: Installing Requires v0.4.4
INFO: Package database updated

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.6.3
Commit d55cadc350 (2018-05-28 20:20 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-143-generic #192-Ubuntu SMP Tue Feb 27 10:45:36 UTC 2018 x86_64 x86_64
Memory: 2.939197540283203 GB (2010.16015625 MB free)
Uptime: 60829.0 sec
Load Avg:  0.9970703125  0.9853515625  0.95458984375
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz    3767260 s         81 s     287208 s    1098039 s         15 s
#2  3499 MHz     884339 s       4570 s     127228 s    4943952 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.6
2 required packages:
 - DifferentialDynamicProgramming 0.2.0
 - JSON                          0.17.2
3 additional packages:
 - Compat                        0.69.0
 - Nullables                     0.0.5
 - Requires                      0.4.4
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
value = (x' * g + 0.5 * x' * H * x)[1] = 62729.704991418665
==========
Starting box-QP, dimension 500, initial value: 62729.705   
RESULT: Gradient norm smaller than tolerance.
iterations 20  gradient 2.83522e-12  final value -27.9752      factorizations 19
  2.211368 seconds (1.13 M allocations: 149.444 MiB, 1.02% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

---------- begin iLQG ----------
iteration     cost    reduction     expected    gradient    log10(lambda)
1           49.8085     16.9        16.9        0.0861      0.0         
2           32.872      11.6        11.6        0.0867      -0.2        
3           21.2617     7.48        7.48        0.104       -0.6        
4           13.7833     4.03        4.03        0.124       -1.2        
5           9.75825     2.71        2.71        0.214       -2.0        
6           7.05097     0.799       0.799       0.291       -3.1        
7           6.25173     0.0331      0.0331      0.0764      -4.3        
8           6.21864     3.01e-05    3.01e-05    0.00271     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

            final cost:   6.218613    

            final grad:   4.083518e-06

            final lambda: 4.4841551e-08

            time / iter:  253   ms

            total time:   2.27  seconds, of which

            derivs:     2.1 %

            back pass:  36.1%

            fwd pass:   7.9 %

            other:      53.9% (graphics etc.)
 =========== end iLQG ===========
  7.085792 seconds (5.99 M allocations: 500.604 MiB, 2.47% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
