>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from https://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.2.0
INFO: Installing Requires v0.4.3
INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of DifferentialDynamicProgramming
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.6.0
Commit 9036443 (2017-06-19 13:05 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-121-generic #170-Ubuntu SMP Wed Jun 14 09:04:33 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1704.95703125 MB free)
Uptime: 48034.0 sec
Load Avg:  0.904296875  0.95703125  1.01318359375
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz    3082084 s       4454 s     147325 s     934999 s         45 s
#2  3500 MHz    1015147 s       1408 s      88433 s    3598897 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.6
2 required packages:
 - DifferentialDynamicProgramming 0.2.0
 - JSON                          0.13.0
2 additional packages:
 - Compat                        0.28.0
 - Requires                      0.4.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
value = (x' * g + 0.5 * x' * H * x)[1] = 61700.69228729101
==========
Starting box-QP, dimension 500, initial value: 61700.692   
RESULT: Gradient norm smaller than tolerance.
iterations 14  gradient 3.07193e-12  final value -39.1011      factorizations 13
  3.838167 seconds (1.12 M allocations: 118.072 MiB, 0.89% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

---------- begin iLQG ----------
iteration     cost    reduction     expected    gradient    log10(lambda)
1           50.2838     24          24          0.11        0.0         
2           26.269      11.4        11.4        0.0908      -0.2        
3           14.8778     5.91        5.91        0.0929      -0.6        
4           8.96421     2.8         2.8         0.108       -1.2        
5           6.16567     1.12        1.12        0.143       -2.0        
6           5.04356     0.216       0.216       0.161       -3.1        
7           4.82715     0.00854     0.00854     0.0512      -4.3        
8           4.8186      8.83e-06    8.83e-06    0.00194     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

            final cost:   4.818595    

            final grad:   3.224981e-06

            final lambda: 4.4841551e-08

            time / iter:  383   ms

            total time:   3.45  seconds, of which

            derivs:     2.2 %

            back pass:  31.2%

            fwd pass:   7.6 %

            other:      59.0% (graphics etc.)
 =========== end iLQG ===========
 12.754838 seconds (6.07 M allocations: 502.840 MiB, 2.11% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
