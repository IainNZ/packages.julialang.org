>>> 'Pkg.add("RoME")' log
INFO: Cloning cache of Graphs from https://github.com/JuliaArchive/Graphs.jl.git
INFO: Cloning cache of IncrementalInference from https://github.com/JuliaRobotics/IncrementalInference.jl.git
INFO: Cloning cache of KernelDensityEstimate from https://github.com/JuliaRobotics/KernelDensityEstimate.jl.git
INFO: Cloning cache of RoME from https://github.com/JuliaRobotics/RoME.jl.git
INFO: Cloning cache of TransformUtils from https://github.com/dehann/TransformUtils.jl.git
INFO: Installing Blosc v0.5.0
INFO: Installing CMakeWrapper v0.1.0
INFO: Installing CommonSubexpressions v0.1.0
INFO: Installing CoordinateTransformations v0.4.1
INFO: Installing DiffBase v0.3.2
INFO: Installing DiffEqDiffTools v0.4.1
INFO: Installing DiffResults v0.0.3
INFO: Installing DiffRules v0.0.6
INFO: Installing Distances v0.6.0
INFO: Installing DocStringExtensions v0.4.4
INFO: Installing FileIO v0.9.1
INFO: Installing ForwardDiff v0.7.5
INFO: Installing Graphs v0.9.0
INFO: Installing HDF5 v0.9.2
INFO: Installing IncrementalInference v0.3.6
INFO: Installing JLD v0.8.3
INFO: Installing KernelDensityEstimate v0.3.0
INFO: Installing LegacyStrings v0.3.0
INFO: Installing LineSearches v3.2.5
INFO: Installing NLSolversBase v4.4.1
INFO: Installing NLsolve v1.0.1
INFO: Installing NaNMath v0.3.1
INFO: Installing Optim v0.14.1
INFO: Installing Parameters v0.9.0
INFO: Installing PositiveFactorizations v0.1.0
INFO: Installing RoME v0.1.4
INFO: Installing Rotations v0.7.0
INFO: Installing TransformUtils v0.1.0
INFO: Building CMakeWrapper
INFO: Building Blosc
INFO: Building SpecialFunctions
INFO: Building HDF5
INFO: Building Rmath
INFO: Package database updated

>>> 'Pkg.test("RoME")' log
Julia Version 0.6.3
Commit d55cadc350 (2018-05-28 20:20 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-143-generic #192-Ubuntu SMP Tue Feb 27 10:45:36 UTC 2018 x86_64 x86_64
Memory: 2.939197540283203 GB (1018.73828125 MB free)
Uptime: 40365.0 sec
Load Avg:  0.896484375  1.0009765625  0.947265625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3495 MHz    2317838 s        378 s     184695 s     936360 s         12 s
#2  3495 MHz     513268 s       5323 s      57827 s    3397316 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.6
3 required packages:
 - JSON                          0.17.2
 - POMDPModels                   0.2.2
 - RoME                          0.1.4
82 additional packages:
 - AbstractTrees                 0.1.0
 - AssetRegistry                 0.0.1
 - AutoHashEquals                0.2.0
 - BinDeps                       0.8.8
 - BinaryProvider                0.3.2
 - Blink                         0.6.2
 - Blosc                         0.5.0
 - CMakeWrapper                  0.1.0
 - CPUTime                       0.0.5
 - Calculus                      0.4.0
 - CategoricalArrays             0.3.10
 - CodecZlib                     0.4.3
 - ColorTypes                    0.6.7
 - Colors                        0.8.2
 - CommonSubexpressions          0.1.0
 - Compat                        0.69.0
 - CoordinateTransformations     0.4.1
 - D3Trees                       0.2.0
 - DataFrames                    0.11.6
 - DataStreams                   0.3.6
 - DataStructures                0.8.3
 - DiffBase                      0.3.2
 - DiffEqDiffTools               0.4.1
 - DiffResults                   0.0.3
 - DiffRules                     0.0.6
 - DiscreteValueIteration        0.0.0-             master (unregistered)
 - Distances                     0.6.0
 - Distributions                 0.15.0
 - DocStringExtensions           0.4.4
 - FileIO                        0.9.1
 - FixedPointNumbers             0.4.6
 - ForwardDiff                   0.7.5
 - Graphs                        0.9.0
 - HDF5                          0.9.2
 - Hiccup                        0.1.1
 - HttpCommon                    0.4.0
 - HttpParser                    0.4.0
 - HttpServer                    0.3.1
 - IncrementalInference          0.3.6
 - Iterators                     0.3.1
 - JLD                           0.8.3
 - KernelDensityEstimate         0.3.0
 - LaTeXStrings                  1.0.0
 - Lazy                          0.12.1
 - LegacyStrings                 0.3.0
 - LineSearches                  3.2.5
 - MCTS                          0.0.0-             master (unregistered)
 - MacroTools                    0.4.2
 - MbedTLS                       0.5.11
 - Missings                      0.2.10
 - Mustache                      0.3.3
 - Mux                           0.3.0
 - NLSolversBase                 4.4.1
 - NLsolve                       1.0.1
 - NaNMath                       0.3.1
 - NamedTuples                   4.0.2
 - Nullables                     0.0.5
 - Optim                         0.14.1
 - PDMats                        0.8.0
 - POMDPToolbox                  0.2.7
 - POMDPs                        0.6.7
 - Parameters                    0.9.0
 - Pidfile                       1.0.0
 - PositiveFactorizations        0.1.0
 - ProgressMeter                 0.5.5
 - QuadGK                        0.2.1
 - Reexport                      0.1.0
 - Requires                      0.4.4
 - Rmath                         0.4.0
 - Rotations                     0.7.0
 - SHA                           0.5.7
 - SortingAlgorithms             0.2.1
 - SpecialFunctions              0.6.0
 - StaticArrays                  0.7.2
 - StatsBase                     0.23.1
 - StatsFuns                     0.6.0
 - TikzPictures                  1.2.0
 - TranscodingStreams            0.5.2
 - TransformUtils                0.1.0
 - URIParser                     0.3.1
 - WeakRefStrings                0.4.7
 - WebSockets                    0.5.0
INFO: Testing RoME
WARNING: Method definition getType(KernelDensityEstimate.BallTreeDensity) in module KernelDensityEstimate at /home/vagrant/.julia/v0.6/KernelDensityEstimate/src/BallTreeDensity01.jl:28 overwritten at /home/vagrant/.julia/v0.6/KernelDensityEstimate/src/KDE01.jl:43.

WARNING: deprecated syntax "inner constructor TopologicalSortVisitor(...) around /home/vagrant/.julia/v0.6/Graphs/src/depth_first_visit.jl:131".
Use "TopologicalSortVisitor{V}(...) where V" instead.
WARNING: using KernelDensityEstimate.sample in module IncrementalInference conflicts with an existing identifier.
WARNING: using KernelDensityEstimate.root in module IncrementalInference conflicts with an existing identifier.
WARNING: static parameter T does not occur in signature for Type at /home/vagrant/.julia/v0.6/RoME/src/Pose2D.jl:20.
The method will not be callable.
[TEST] numeric root...
Increased dimension root finding test
WARNING: numericRootGenericRandomizedFnc!(fgr::FastGenericRoot{T}...) deprecated, use numericRootGenericRandomizedFnc!(fgr::FastRootGenericWrapRoot{T}...) instead.
q1 = convert(Quaternion, Euler(eul...)) = TransformUtils.Quaternion(0.9749910319628473, [0.0533295, -0.103946, -0.18906])
q2 = convert(Quaternion, so3(y)) = TransformUtils.Quaternion(0.974991031959817, [0.0533295, -0.103946, -0.18906])
WARNING: numericRootGenericRandomizedFnc!(fgr::FastGenericRoot{T}...) deprecated, use numericRootGenericRandomizedFnc!(fgr::FastRootGenericWrapRoot{T}...) instead.
q1 = convert(Quaternion, Euler(eul...)) = TransformUtils.Quaternion(0.9853298155051687, [0.134144, 0.105282, -0.00679193])
q2 = convert(Quaternion, so3(y)) = TransformUtils.Quaternion(0.9853298145158518, [0.134144, 0.105282, -0.00679193])
WARNING: numericRootGenericRandomizedFnc!(fgr::FastGenericRoot{T}...) deprecated, use numericRootGenericRandomizedFnc!(fgr::FastRootGenericWrapRoot{T}...) instead.
q1 = convert(Quaternion, Euler(eul...)) = TransformUtils.Quaternion(0.9863398891309788, [0.0575729, 0.10622, 0.111966])
q2 = convert(Quaternion, so3(y)) = TransformUtils.Quaternion(0.9863398890889007, [0.0575729, 0.10622, 0.111966])
WARNING: numericRootGenericRandomizedFnc!(fgr::FastGenericRoot{T}...) deprecated, use numericRootGenericRandomizedFnc!(fgr::FastRootGenericWrapRoot{T}...) instead.
q1 = convert(Quaternion, Euler(eul...)) = TransformUtils.Quaternion(0.9678102604229438, [0.247594, 0.0451737, 9.88881e-5])
q2 = convert(Quaternion, so3(y)) = TransformUtils.Quaternion(0.9678102603995976, [0.247594, 0.0451737, 9.88881e-5])
WARNING: numericRootGenericRandomizedFnc!(fgr::FastGenericRoot{T}...) deprecated, use numericRootGenericRandomizedFnc!(fgr::FastRootGenericWrapRoot{T}...) instead.
q1 = convert(Quaternion, Euler(eul...)) = TransformUtils.Quaternion(0.9932735105382751, [-0.0828803, -0.0704853, 0.0396284])
q2 = convert(Quaternion, so3(y)) = TransformUtils.Quaternion(0.9932735104658965, [-0.0828803, -0.0704853, 0.0396284])
WARNING: numericRootGenericRandomizedFnc!(fgr::FastGenericRoot{T}...) deprecated, use numericRootGenericRandomizedFnc!(fgr::FastRootGenericWrapRoot{T}...) instead.
q1 = convert(Quaternion, Euler(eul...)) = TransformUtils.Quaternion(0.9933404065365649, [-0.0702105, 0.0785507, 0.0466381])
q2 = convert(Quaternion, so3(y)) = TransformUtils.Quaternion(0.9933404064987532, [-0.0702105, 0.0785507, 0.0466381])
WARNING: numericRootGenericRandomizedFnc!(fgr::FastGenericRoot{T}...) deprecated, use numericRootGenericRandomizedFnc!(fgr::FastRootGenericWrapRoot{T}...) instead.
q1 = convert(Quaternion, Euler(eul...)) = TransformUtils.Quaternion(0.9333752399876609, [-0.148677, 0.297767, -0.134316])
q2 = convert(Quaternion, so3(y)) = TransformUtils.Quaternion(0.9333752399876609, [-0.148677, 0.297767, -0.134316])
WARNING: numericRootGenericRandomizedFnc!(fgr::FastGenericRoot{T}...) deprecated, use numericRootGenericRandomizedFnc!(fgr::FastRootGenericWrapRoot{T}...) instead.
q1 = convert(Quaternion, Euler(eul...)) = TransformUtils.Quaternion(0.9273277554595829, [-0.212768, -0.280262, -0.12746])
q2 = convert(Quaternion, so3(y)) = TransformUtils.Quaternion(0.927327755459583, [-0.212768, -0.280262, -0.12746])
WARNING: numericRootGenericRandomizedFnc!(fgr::FastGenericRoot{T}...) deprecated, use numericRootGenericRandomizedFnc!(fgr::FastRootGenericWrapRoot{T}...) instead.
q1 = convert(Quaternion, Euler(eul...)) = TransformUtils.Quaternion(0.9793696488115761, [0.0445181, 0.0362315, -0.193754])
q2 = convert(Quaternion, so3(y)) = TransformUtils.Quaternion(0.9793696486815703, [0.0445181, 0.0362315, -0.193754])
WARNING: numericRootGenericRandomizedFnc!(fgr::FastGenericRoot{T}...) deprecated, use numericRootGenericRandomizedFnc!(fgr::FastRootGenericWrapRoot{T}...) instead.
q1 = convert(Quaternion, Euler(eul...)) = TransformUtils.Quaternion(0.9363668847085673, [0.119707, -0.12353, 0.305986])
q2 = convert(Quaternion, so3(y)) = TransformUtils.Quaternion(0.9363668847085673, [0.119707, -0.12353, 0.305986])
[SUCCESS]
[TEST] Camera function evaluations...
WARNING: numericRootGenericRandomizedFnc!(fgr::FastGenericRoot{T}...) deprecated, use numericRootGenericRandomizedFnc!(fgr::FastRootGenericWrapRoot{T}...) instead.
WARNING: numericRootGenericRandomizedFnc!(fgr::FastGenericRoot{T}...) deprecated, use numericRootGenericRandomizedFnc!(fgr::FastRootGenericWrapRoot{T}...) instead.
[SUCCESS]
[TEST] MultipleFeatures constraints
test MultipleFeatures unit vector functions
test residual function
test as minimization problem to pose
  8.910488 seconds (13.04 M allocations: 639.239 MiB, 2.78% gc time)
r.minimizer = [-8.6117e-5, -0.000425634, 0.000384576]
test as minimization problem to landmark
WARNING: this addNode! is deprecated, please use FactorGraph01.jl:addNode!(fg::FactorGraph, lbl::Symbol, softtype::Type{T}) instead.
WARNING: this addNode! is deprecated, please use FactorGraph01.jl:addNode!(fg::FactorGraph, lbl::Symbol, softtype::Type{T}) instead.
WARNING: this addNode! is deprecated, please use FactorGraph01.jl:addNode!(fg::FactorGraph, lbl::Symbol, softtype::Type{T}) instead.
WARNING: this addNode! is deprecated, please use FactorGraph01.jl:addNode!(fg::FactorGraph, lbl::Symbol, softtype::Type{T}) instead.
WARNING: this addNode! is deprecated, please use FactorGraph01.jl:addNode!(fg::FactorGraph, lbl::Symbol, softtype::Type{T}) instead.

Building Bayes net...
(vert.label, getData(vert).BayesNetVertID) = ("x1", 0)
(vert.label, getData(vert).BayesNetVertID) = ("x2", 0)
(vert.label, getData(vert).BayesNetVertID) = ("l1", 0)
(vert.label, getData(vert).BayesNetVertID) = ("l2", 0)
(vert.label, getData(vert).BayesNetVertID) = ("l3", 0)

Eliminating 1
===============

adding marginal to
x.index = 3
x.index = 5
x.index = 6
x.index = 7

Eliminating 3
===============

adding marginal to
x.index = 5
x.index = 6
x.index = 7

Eliminating 5
===============

adding marginal to
x.index = 6
x.index = 7

Eliminating 6
===============

adding marginal to
x.index = 7

Eliminating 7
===============

adding marginal to
Bayes Net
Bayes Tree
Find potential functions for each clique
Get potentials l3,l2,l1,x2,x1,: 
Ensure all nodes are initialized
Do recursive inference over tree
Start Clique l3,l2,l1,x2,x1,:  =============================
====================== Clique l3,l2,l1,x2,x1,:  =============================
up w 0 msgs---------- successive fnc approx ------------l3,l2,l1,x2,x1,: 
#1	 -- 
fmcmc! -- finished on l3,l2,l1,x2,x1,: 
---------- successive fnc approx ------------l3,l2,l1,x2,x1,: 
#1	 -- [2x0p,d3,N50], [2x0p,d3,N50], [drct] [drct] [drct] 
#2	 -- [2x0p,d3,N50], [2x0p,d3,N50], [drct] [drct] [drct] 
#3	 -- [2x0p,d3,N50], [2x0p,d3,N50], [drct] [drct] [drct] 
fmcmc! -- finished on l3,l2,l1,x2,x1,: 
Outgoing msg density on: updateFGBT! up -- finished updating l3,l2,l1,x2,x1,: 
End Clique l3,l2,l1,x2,x1,:  =============================
====================== Clique l3,l2,l1,x2,x1,:  =============================
dwn---------- successive fnc approx ------------l3,l2,l1,x2,x1,: 
fmcmc! -- finished on l3,l2,l1,x2,x1,: 
Outgoing msg density on: test ambiguous bi-modal multifeature constraint operation
[SUCCESS]
[TEST] Linear array functions evaluations...
  0.070990 seconds (18.92 k allocations: 914.474 KiB)
zDim = size(fp!.measurement[1], 1) = 3
  0.592179 seconds (1.15 M allocations: 79.391 MiB, 4.94% gc time)
WARNING: still need to insert kld(..) test to ensure this is working
Test back projection from 
  0.000039 seconds (34 allocations: 2.484 KiB)
zDim = size(fp!.measurement[1], 1) = 3
  1.026703 seconds (5.35 M allocations: 392.806 MiB, 8.12% gc time)
WARNING: Breaks if not set to 100
Adding PriorPose3 to graph...
WARNING: this addNode! is deprecated, please use FactorGraph01.jl:addNode!(fg::FactorGraph, lbl::Symbol, softtype::Type{T}) instead.
Adding LinearRangeBearingElevation to graph...
  0.000017 seconds (5 allocations: 208 bytes)
  0.224995 seconds (940.68 k allocations: 69.772 MiB, 13.77% gc time)
WARNING: this addNode! is deprecated, please use FactorGraph01.jl:addNode!(fg::FactorGraph, lbl::Symbol, softtype::Type{T}) instead.

Building Bayes net...
(vert.label, getData(vert).BayesNetVertID) = ("x1", 0)
(vert.label, getData(vert).BayesNetVertID) = ("l1", 0)

Eliminating 1
===============

adding marginal to
x.index = 3

Eliminating 3
===============

adding marginal to
Bayes Net
Bayes Tree
Find potential functions for each clique
Get potentials l1,x1,: 
Ensure all nodes are initialized
Do recursive inference over tree
Start Clique l1,x1,:  =============================
====================== Clique l1,x1,:  =============================
up w 0 msgs---------- successive fnc approx ------------l1,x1,: 
#1	 -- 
fmcmc! -- finished on l1,x1,: 
---------- successive fnc approx ------------l1,x1,: 
#1	 -- [2x0p,d6,N100], [drct] 
#2	 -- [2x0p,d6,N100], [drct] 
#3	 -- [2x0p,d6,N100], [drct] 
fmcmc! -- finished on l1,x1,: 
Outgoing msg density on: updateFGBT! up -- finished updating l1,x1,: 
End Clique l1,x1,:  =============================
====================== Clique l1,x1,:  =============================
dwn---------- successive fnc approx ------------l1,x1,: 
fmcmc! -- finished on l1,x1,: 
Outgoing msg density on: [SUCCESS]
[TEST] Pose2 evaluations...
WARNING: this addNode! is deprecated, please use FactorGraph01.jl:addNode!(fg::FactorGraph, lbl::Symbol, softtype::Type{T}) instead.
WARNING: setDefaultNodeData! -- deprecated use of stdev.
[2x0p,d3,N75],
Building Bayes net...
(vert.label, getData(vert).BayesNetVertID) = ("x0", 0)
(vert.label, getData(vert).BayesNetVertID) = ("x1", 0)

Eliminating 1
===============

adding marginal to
x.index = 3

Eliminating 3
===============

adding marginal to
Bayes Net
Bayes Tree
Find potential functions for each clique
Get potentials x1,x0,: 
Ensure all nodes are initialized
Do recursive inference over tree
Start Clique x1,x0,:  =============================
====================== Clique x1,x0,:  =============================
up w 0 msgs---------- successive fnc approx ------------x1,x0,: 
#1	 -- 
fmcmc! -- finished on x1,x0,: 
---------- successive fnc approx ------------x1,x0,: 
#1	 -- [2x0p,d3,N75], [drct] 
#2	 -- [2x0p,d3,N75], [drct] 
#3	 -- [2x0p,d3,N75], [drct] 
fmcmc! -- finished on x1,x0,: 
Outgoing msg density on: updateFGBT! up -- finished updating x1,x0,: 
End Clique x1,x0,:  =============================
====================== Clique x1,x0,:  =============================
dwn---------- successive fnc approx ------------x1,x0,: 
fmcmc! -- finished on x1,x0,: 
Outgoing msg density on: WARNING: this addNode! is deprecated, please use FactorGraph01.jl:addNode!(fg::FactorGraph, lbl::Symbol, softtype::Type{T}) instead.
WARNING: setDefaultNodeData! -- deprecated use of stdev.

Building Bayes net...
(vert.label, getData(vert).BayesNetVertID) = ("x0", 0)
(vert.label, getData(vert).BayesNetVertID) = ("x1", 0)
(vert.label, getData(vert).BayesNetVertID) = ("x2", 0)

Eliminating 1
===============

adding marginal to
x.index = 3

Eliminating 3
===============

adding marginal to
x.index = 5

Eliminating 5
===============

adding marginal to
Bayes Net
Bayes Tree
Find potential functions for each clique
Get potentials x0,: x1,
Get potentials x2,x1,: 
Ensure all nodes are initialized
Do multi-process inference over tree
child.attributes["label"] = "x2,x1,: "
child.attributes["label"] = "x0,: x1,"
Start Clique x0,: x1, =============================
====================== Clique x0,: x1, =============================
End Clique x0,: x1, =============================up w 0 msgs
Start Clique x2,x1,:  =============================
asyncProcessPostStacks -- 1, cliq=x2,x1,: , start on child x0,: x1, haskey=false
---------- successive fnc approx ------------x0,: x1,
#1	 -- 
fmcmc! -- finished on x0,: x1,
---------- successive fnc approx ------------x0,: x1,
#1	 -- [2x0p,d3,N75], [drct] 
#2	 -- [2x0p,d3,N75], [drct] 
#3	 -- [2x0p,d3,N75], [drct] 
fmcmc! -- finished on x0,: x1,
Outgoing msg density on: updateFGBT! up -- finished updating x0,: x1,
====================== Clique x2,x1,:  =============================
End Clique x2,x1,:  =============================up w 1 msgs
---------- successive fnc approx ------------x2,x1,: 
#1	 -- processPostOrderStacks! -- THIS ONLY HAPPENS AFTER SYNC

fmcmc! -- finished on x2,x1,: 
---------- successive fnc approx ------------x2,x1,: 
#1	 -- [2x0p,d3,N75], [drct] 
#2	 -- [2x0p,d3,N75], [drct] 
#3	 -- [2x0p,d3,N75], [drct] 
fmcmc! -- finished on x2,x1,: 
Outgoing msg density on: upward leftovers, Int64[]
updateFGBT! up -- finished updating x2,x1,: 
=================== Iter Clique x2,x1,:  ===========================
dwn---------- successive fnc approx ------------x2,x1,: 
fmcmc! -- finished on x2,x1,: 
Outgoing msg density on: =================== Iter Clique x0,: x1, ===========================
dwn---------- successive fnc approx ------------x0,: x1,
#1	 -- [2x0p,d3,N75], 
fmcmc! -- finished on x0,: x1,
Dwn msg keys [3, 5]
Outgoing msg density on: 
dwnward leftovers, Int64[]
Ensure all nodes are initialized
Do multi-process inference over tree
child.attributes["label"] = "x2,x1,: "
child.attributes["label"] = "x0,: x1,"
Start Clique x0,: x1, =============================
====================== Clique x0,: x1, =============================
End Clique x0,: x1, =============================up w 0 msgs
Start Clique x2,x1,:  =============================
asyncProcessPostStacks -- 1, cliq=x2,x1,: , start on child x0,: x1, haskey=false
---------- successive fnc approx ------------x0,: x1,
#1	 -- 
fmcmc! -- finished on x0,: x1,
---------- successive fnc approx ------------x0,: x1,
#1	 -- [2x0p,d3,N75], [drct] 
#2	 -- [2x0p,d3,N75], [drct] 
#3	 -- [2x0p,d3,N75], [drct] 
fmcmc! -- finished on x0,: x1,
Outgoing msg density on: updateFGBT! up -- finished updating x0,: x1,
====================== Clique x2,x1,:  =============================
End Clique x2,x1,:  =============================up w 1 msgs
---------- successive fnc approx ------------x2,x1,: 
#1	 -- processPostOrderStacks! -- THIS ONLY HAPPENS AFTER SYNC

fmcmc! -- finished on x2,x1,: 
---------- successive fnc approx ------------x2,x1,: 
#1	 -- [2x0p,d3,N75], [drct] 
#2	 -- [2x0p,d3,N75], [drct] 
#3	 -- [2x0p,d3,N75], [drct] 
fmcmc! -- finished on x2,x1,: 
Outgoing msg density on: upward leftovers, Int64[]
updateFGBT! up -- finished updating x2,x1,: 
=================== Iter Clique x2,x1,:  ===========================
dwn---------- successive fnc approx ------------x2,x1,: 
fmcmc! -- finished on x2,x1,: 
Outgoing msg density on: =================== Iter Clique x0,: x1, ===========================
dwn---------- successive fnc approx ------------x0,: x1,
#1	 -- [2x0p,d3,N75], 
fmcmc! -- finished on x0,: x1,
Dwn msg keys [3, 5]
Outgoing msg density on: 
dwnward leftovers, Int64[]
test bearing range evaluations
WARNING: this addNode! is deprecated, please use FactorGraph01.jl:addNode!(fg::FactorGraph, lbl::Symbol, softtype::Type{T}) instead.
WARNING: setDefaultNodeData! -- deprecated use of stdev.
test Pose2D plotting
[SUCCESS]
[TEST] Pose3 evaluations...
WARNING: both CoordinateTransformations and TransformUtils export "AngleAxis"; uses of it in module RoME must be qualified
Adding PriorPose3 to graph...
WARNING: this addNode! is deprecated, please use FactorGraph01.jl:addNode!(fg::FactorGraph, lbl::Symbol, softtype::Type{T}) instead.
Ensure vertex initialized properly
Testing PriorPose3 evaluation...
Adding Pose3Pose3 to graph...
WARNING: this addNode! is deprecated, please use FactorGraph01.jl:addNode!(fg::FactorGraph, lbl::Symbol, softtype::Type{T}) instead.
Testing Pose3Pose3 evaluation...
X1ptsMean = [0.220571; 0.0840155; 0.354427; -0.059646; -0.0048712; -0.0127976]
Construct Bayes tree and perform inference...

Building Bayes net...
(vert.label, getData(vert).BayesNetVertID) = ("x1", 0)
(vert.label, getData(vert).BayesNetVertID) = ("x2", 0)

Eliminating 1
===============

adding marginal to
x.index = 3

Eliminating 3
===============

adding marginal to
Bayes Net
Bayes Tree
Find potential functions for each clique
Get potentials x2,x1,: 
Ensure all nodes are initialized
Do multi-process inference over tree
child.attributes["label"] = "x2,x1,: "
Start Clique x2,x1,:  =============================
====================== Clique x2,x1,:  =============================
End Clique x2,x1,:  =============================up w 0 msgs
---------- successive fnc approx ------------x2,x1,: 
#1	 -- processPostOrderStacks! -- THIS ONLY HAPPENS AFTER SYNC

fmcmc! -- finished on x2,x1,: 
---------- successive fnc approx ------------x2,x1,: 
#1	 -- [2x0p,d6,N75], [drct] 
#2	 -- [2x0p,d6,N75], [drct] 
#3	 -- [2x0p,d6,N75], [drct] 
fmcmc! -- finished on x2,x1,: 
Outgoing msg density on: upward leftovers, Int64[]
updateFGBT! up -- finished updating x2,x1,: 
=================== Iter Clique x2,x1,:  ===========================
dwn---------- successive fnc approx ------------x2,x1,: 
fmcmc! -- finished on x2,x1,: 
Outgoing msg density on: dwnward leftovers, Int64[]
Ensure basic parameters on x1,x2 after inference...
previous test failure 0.75 .< [1.47, 1.51, 1.48] .< 2.25
println("previous test failure 0.75 .< $(round.(stdX2[1:3], 2)) .< 2.25") = nothing
[SUCCESS]
[TEST] ensure Pose3Pose3NH evaluations...
Syntax for null hypothesis matrix substitutions work.
Test if null hypothesis occurs as expected...
Adding PriorPose3 to graph...
x1 is not initialized, and will do so now...
[drct]Ensure vertex initialized properly
Testing PriorPose3 evaluation...
WARNING: You are here
WARNING: getNextLbl(::FactorGraph..) to be deprecated, use getlastpose/landm(::SLAMWrapper..) instead.
WARNING: You are here
WARNING: getNextLbl(::FactorGraph..) to be deprecated, use getlastpose/landm(::SLAMWrapper..) instead.
[drct]Testing Pose3Pose3 evaluation...

Building Bayes net...
(vert.label, getData(vert).BayesNetVertID) = ("x1", 0)
(vert.label, getData(vert).BayesNetVertID) = ("x2", 0)
(vert.label, getData(vert).BayesNetVertID) = ("x3", 0)

Eliminating 1
===============

adding marginal to
x.index = 3

Eliminating 3
===============

adding marginal to
x.index = 5

Eliminating 5
===============

adding marginal to
Bayes Net
Bayes Tree
Find potential functions for each clique
Get potentials x1,: x2,
Get potentials x3,x2,: 
Ensure all nodes are initialized
x3 is not initialized, and will do so now...
[drct]Do recursive inference over tree
Start Clique x3,x2,:  =============================
upMsgRec -- calling new recursive on x1,: x2,
Start Clique x1,: x2, =============================
====================== Clique x1,: x2, =============================
up w 0 msgs---------- successive fnc approx ------------x1,: x2,
#1	 -- 
fmcmc! -- finished on x1,: x2,
---------- successive fnc approx ------------x1,: x2,
#1	 -- [2x0p,d6,N100], [drct] 
#2	 -- [2x0p,d6,N100], [drct] 
#3	 -- [2x0p,d6,N100], [drct] 
fmcmc! -- finished on x1,: x2,
Outgoing msg density on: updateFGBT! up -- finished updating x1,: x2,
End Clique x1,: x2, =============================
upMsgRec -- finished with x1,: x2,, w [3])
====================== Clique x3,x2,:  =============================
up w 1 msgs---------- successive fnc approx ------------x3,x2,: 
#1	 -- 
fmcmc! -- finished on x3,x2,: 
---------- successive fnc approx ------------x3,x2,: 
#1	 -- [2x0p,d6,N100], [drct] 
#2	 -- [2x0p,d6,N100], [drct] 
#3	 -- [2x0p,d6,N100], [drct] 
fmcmc! -- finished on x3,x2,: 
Outgoing msg density on: updateFGBT! up -- finished updating x3,x2,: 
End Clique x3,x2,:  =============================
====================== Clique x3,x2,:  =============================
dwn---------- successive fnc approx ------------x3,x2,: 
fmcmc! -- finished on x3,x2,: 
Outgoing msg density on: ====================== Clique x1,: x2, =============================
dwn---------- successive fnc approx ------------x1,: x2,
#1	 -- [2x0p,d6,N100], 
fmcmc! -- finished on x1,: x2,
Dwn msg keys [3, 5]
Outgoing msg density on: 
Adding Pose3Pose3NH to graph...
Test Summary:                        | Pass  Total
loading validation data for testing. |    2      2
[SUCCESS]
[TEST] saving to and loading from .jld file
Success
[TEST] partial pose3 evaluations...
WARNING: this addNode! is deprecated, please use FactorGraph01.jl:addNode!(fg::FactorGraph, lbl::Symbol, softtype::Type{T}) instead.
WARNING: this addNode! is deprecated, please use FactorGraph01.jl:addNode!(fg::FactorGraph, lbl::Symbol, softtype::Type{T}) instead.
test PartialPriorRollPitchZ evaluations
test residual function of PartialPose3XYYaw
test PartialPose3XYYaw evaluations
test predictbelief with two functions
[0x6p,d6,N50],[SUCCESS]
[TEST] PartialPose3XYYaw evaluations...
test x translation case
test z translation case
test roll and translate case 1
res = [-1.77636e-15, 0.0, 0.0, 0.0, 0.0, 0.0]
test roll and translate case 2
res = [0.0, 2.22045e-15, 1.77636e-15, 0.0, 0.0, 0.0]
test pitch and translate case 1
res = [8.88178e-16, 0.0, 0.0, 0.0, 0.0, 0.0]
res = [0.0, 0.0, -0.0]
test pitch and translate case 2
res = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
res = [0.0, 0.0, -0.0]
test pitch and translate case 3
res = [8.88178e-16, 0.0, 1.77636e-15, 0.0, 0.0, 0.0]
res = [8.88178e-16, 0.0, -0.0]
test pitch and translate case 4
res = [8.88178e-16, 0.0, 1.77636e-15, 0.0, 0.0, 0.0]
res = [8.88178e-16, 0.0, -0.0]
test yaw and translate case 1
res = [-1.11022e-15, -1.77636e-15, 0.0, 0.0, 0.0, -2.46519e-32]
res = [-6.12323e-16, -0.0, -0.0]
[SUCCESS]
[TEST] packing converters...
WARNING: this addNode! is deprecated, please use FactorGraph01.jl:addNode!(fg::FactorGraph, lbl::Symbol, softtype::Type{T}) instead.
WARNING: setDefaultNodeData! -- deprecated use of stdev.
WARNING: this addNode! is deprecated, please use FactorGraph01.jl:addNode!(fg::FactorGraph, lbl::Symbol, softtype::Type{T}) instead.
WARNING: setDefaultNodeData! -- deprecated use of stdev.
Test Summary:                  | Pass  Total
test conversions of PriorPose2 |    3      3
Test Summary:                  | Pass  Total
test conversions of Pose2Pose2 |    2      2
WARNING: this addNode! is deprecated, please use FactorGraph01.jl:addNode!(fg::FactorGraph, lbl::Symbol, softtype::Type{T}) instead.
WARNING: setDefaultNodeData! -- deprecated use of stdev.
Test Summary:                                 | Pass  Total
test conversions of Pose2DPoint2DBearingRange |    4      4
WARNING: this addNode! is deprecated, please use FactorGraph01.jl:addNode!(fg::FactorGraph, lbl::Symbol, softtype::Type{T}) instead.
Test Summary:                  | Pass  Total
test conversions of PriorPose3 |    4      4
WARNING: You are here
WARNING: getNextLbl(::FactorGraph..) to be deprecated, use getlastpose/landm(::SLAMWrapper..) instead.
Test Summary:                  | Pass  Total
test conversions of Pose3Pose3 |    3      3
[2x0p,d6,N100],Test Summary:                    | Pass  Total
test conversions of Pose3Pose3NH |    4      4
Test Summary:                              | Pass  Total
test conversions of PartialPriorRollPitchZ |    1      1
Test Summary:                         | Pass  Total
test conversions of PartialPose3XYYaw |    1      1
Test Summary:                           | Pass  Total
test conversions of PartialPose3XYYawNH |    1      1
Test Summary:             | Pass  Total
test PriorPoint2DensityNH |    2      2
[SUCCESS]
WARNING: initFactorGraph! -- returns variable and factor symbols 
WARNING: initFactorGraph! -- returns variable and factor symbols 
Test Summary:              | Pass  Total
Basic Pose2 initialization |    2      2
WARNING: initFactorGraph! -- returns variable and factor symbols 
Test Summary:             | Pass  Total
Base Pose3 initialization |    1      1
INFO: RoME tests passed

>>> End of log
