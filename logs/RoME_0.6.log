>>> 'Pkg.add("RoME")' log
INFO: Cloning cache of Graphs from https://github.com/JuliaArchive/Graphs.jl.git
INFO: Cloning cache of IncrementalInference from https://github.com/dehann/IncrementalInference.jl.git
INFO: Cloning cache of KernelDensityEstimate from https://github.com/JuliaRobotics/KernelDensityEstimate.jl.git
INFO: Cloning cache of RoME from https://github.com/dehann/RoME.jl.git
INFO: Cloning cache of TransformUtils from https://github.com/dehann/TransformUtils.jl.git
INFO: Installing BinDeps v0.8.8
INFO: Installing BinaryProvider v0.3.0
INFO: Installing Blosc v0.4.2
INFO: Installing Calculus v0.3.1
INFO: Installing CommonSubexpressions v0.1.0
INFO: Installing CoordinateTransformations v0.4.1
INFO: Installing DataStructures v0.8.1
INFO: Installing DiffBase v0.3.2
INFO: Installing DiffEqDiffTools v0.4.1
INFO: Installing DiffResults v0.0.3
INFO: Installing DiffRules v0.0.4
INFO: Installing Distances v0.6.0
INFO: Installing Distributions v0.15.0
INFO: Installing DocStringExtensions v0.4.4
INFO: Installing FileIO v0.7.0
INFO: Installing ForwardDiff v0.7.5
INFO: Installing Graphs v0.9.0
INFO: Installing HDF5 v0.8.8
INFO: Installing IncrementalInference v0.3.2
INFO: Installing JLD v0.8.3
INFO: Installing KernelDensityEstimate v0.3.0
INFO: Installing LegacyStrings v0.3.0
INFO: Installing LineSearches v3.2.5
INFO: Installing Missings v0.2.9
INFO: Installing NLSolversBase v4.4.1
INFO: Installing NLsolve v1.0.1
INFO: Installing NaNMath v0.3.1
INFO: Installing Optim v0.14.1
INFO: Installing PDMats v0.8.0
INFO: Installing Parameters v0.8.1
INFO: Installing PositiveFactorizations v0.1.0
INFO: Installing ProgressMeter v0.5.5
INFO: Installing QuadGK v0.2.1
INFO: Installing Rmath v0.3.2
INFO: Installing RoME v0.1.1
INFO: Installing Rotations v0.6.1
INFO: Installing SHA v0.5.7
INFO: Installing SortingAlgorithms v0.2.1
INFO: Installing SpecialFunctions v0.4.0
INFO: Installing StaticArrays v0.7.0
INFO: Installing StatsBase v0.22.0
INFO: Installing StatsFuns v0.6.0
INFO: Installing TransformUtils v0.1.0
INFO: Installing URIParser v0.3.1
INFO: Building Blosc
INFO: Building SpecialFunctions
INFO: Building Rmath
INFO: Building HDF5
INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of RoME
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("RoME")' log
Julia Version 0.6.2
Commit d386e40c17 (2017-12-13 18:08 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-143-generic #192-Ubuntu SMP Tue Feb 27 10:45:36 UTC 2018 x86_64 x86_64
Memory: 2.939197540283203 GB (1024.625 MB free)
Uptime: 48527.0 sec
Load Avg:  0.99462890625  0.9853515625  0.95458984375
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3498 MHz    2813707 s       6479 s     190588 s    1162501 s         38 s
#2  3498 MHz     673744 s        310 s      77866 s    4018618 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.6
2 required packages:
 - JSON                          0.17.2
 - RoME                          0.1.1
45 additional packages:
 - BinDeps                       0.8.8
 - BinaryProvider                0.3.0
 - Blosc                         0.4.2
 - Calculus                      0.3.1
 - CommonSubexpressions          0.1.0
 - Compat                        0.64.0
 - CoordinateTransformations     0.4.1
 - DataStructures                0.8.1
 - DiffBase                      0.3.2
 - DiffEqDiffTools               0.4.1
 - DiffResults                   0.0.3
 - DiffRules                     0.0.4
 - Distances                     0.6.0
 - Distributions                 0.15.0
 - DocStringExtensions           0.4.4
 - FileIO                        0.7.0
 - ForwardDiff                   0.7.5
 - Graphs                        0.9.0
 - HDF5                          0.8.8
 - IncrementalInference          0.3.2
 - JLD                           0.8.3
 - KernelDensityEstimate         0.3.0
 - LegacyStrings                 0.3.0
 - LineSearches                  3.2.5
 - Missings                      0.2.9
 - NLSolversBase                 4.4.1
 - NLsolve                       1.0.1
 - NaNMath                       0.3.1
 - Nullables                     0.0.5
 - Optim                         0.14.1
 - PDMats                        0.8.0
 - Parameters                    0.8.1
 - PositiveFactorizations        0.1.0
 - ProgressMeter                 0.5.5
 - QuadGK                        0.2.1
 - Rmath                         0.3.2
 - Rotations                     0.6.1
 - SHA                           0.5.7
 - SortingAlgorithms             0.2.1
 - SpecialFunctions              0.4.0
 - StaticArrays                  0.7.0
 - StatsBase                     0.22.0
 - StatsFuns                     0.6.0
 - TransformUtils                0.1.0
 - URIParser                     0.3.1
INFO: Testing RoME
nprocs() = 3
WARNING: Method definition getType(KernelDensityEstimate.BallTreeDensity) in module KernelDensityEstimate at /home/vagrant/.julia/v0.6/KernelDensityEstimate/src/BallTreeDensity01.jl:28 overwritten at /home/vagrant/.julia/v0.6/KernelDensityEstimate/src/KDE01.jl:43.

WARNING: deprecated syntax "inner constructor TopologicalSortVisitor(...) around /home/vagrant/.julia/v0.6/Graphs/src/depth_first_visit.jl:131".
Use "TopologicalSortVisitor{V}(...) where V" instead.
WARNING: using KernelDensityEstimate.sample in module IncrementalInference conflicts with an existing identifier.
WARNING: using KernelDensityEstimate.root in module IncrementalInference conflicts with an existing identifier.
WARNING: static parameter T does not occur in signature for Type at /home/vagrant/.julia/v0.6/RoME/src/Pose2D.jl:22.
The method will not be callable.
WARNING: static parameter T does not occur in signature for Type at /home/vagrant/.julia/v0.6/RoME/src/Pose2D.jl:24.
The method will not be callable.
WARNING: using KernelDensityEstimate.sample in module IncrementalInference conflicts with an existing identifier.
WARNING: using KernelDensityEstimate.root in module IncrementalInference conflicts with an existing identifier.
WARNING: using KernelDensityEstimate.root in module IncrementalInference conflicts with an existing identifier.
WARNING: using KernelDensityEstimate.sample in module IncrementalInference conflicts with an existing identifier.
WARNING: static parameter T does not occur in signature for Type at /home/vagrant/.julia/v0.6/RoME/src/Pose2D.jl:22.
The method will not be callable.
WARNING: static parameter T does not occur in signature for Type at /home/vagrant/.julia/v0.6/RoME/src/Pose2D.jl:24.
The method will not be callable.
WARNING: static parameter T does not occur in signature for Type at /home/vagrant/.julia/v0.6/RoME/src/Pose2D.jl:22.
The method will not be callable.
WARNING: static parameter T does not occur in signature for Type at /home/vagrant/.julia/v0.6/RoME/src/Pose2D.jl:24.
The method will not be callable.
[TEST] numeric root...
Increased dimension root finding test
q1 = convert(Quaternion, Euler(eul...)) = TransformUtils.Quaternion(0.9982280914110436, [-0.0374706, 0.0212699, 0.0410393])
q2 = convert(Quaternion, so3(y)) = TransformUtils.Quaternion(0.9982280914102457, [-0.0374706, 0.0212699, 0.0410393])
q1 = convert(Quaternion, Euler(eul...)) = TransformUtils.Quaternion(0.9725857171200406, [-0.0650661, -0.146435, -0.168524])
q2 = convert(Quaternion, so3(y)) = TransformUtils.Quaternion(0.9725857171200406, [-0.0650661, -0.146435, -0.168524])
q1 = convert(Quaternion, Euler(eul...)) = TransformUtils.Quaternion(0.9827022675263676, [-0.018405, -0.162352, 0.0871733])
q2 = convert(Quaternion, so3(y)) = TransformUtils.Quaternion(0.9827022675263677, [-0.018405, -0.162352, 0.0871733])
q1 = convert(Quaternion, Euler(eul...)) = TransformUtils.Quaternion(0.9646387681541246, [-0.0806676, 0.246899, 0.0447825])
q2 = convert(Quaternion, so3(y)) = TransformUtils.Quaternion(0.9646387681541245, [-0.0806676, 0.246899, 0.0447825])
q1 = convert(Quaternion, Euler(eul...)) = TransformUtils.Quaternion(0.9973785552176069, [0.0406724, 0.0577775, -0.0156055])
q2 = convert(Quaternion, so3(y)) = TransformUtils.Quaternion(0.9973785552173974, [0.0406724, 0.0577775, -0.0156055])
q1 = convert(Quaternion, Euler(eul...)) = TransformUtils.Quaternion(0.959979798191956, [-0.0610083, -0.212538, 0.171885])
q2 = convert(Quaternion, so3(y)) = TransformUtils.Quaternion(0.9599797979373763, [-0.0610083, -0.212538, 0.171885])
q1 = convert(Quaternion, Euler(eul...)) = TransformUtils.Quaternion(0.9618424173591985, [0.00862307, 0.264543, -0.0692933])
q2 = convert(Quaternion, so3(y)) = TransformUtils.Quaternion(0.9618424173576768, [0.00862307, 0.264543, -0.0692933])
q1 = convert(Quaternion, Euler(eul...)) = TransformUtils.Quaternion(0.9985646440492755, [-0.0529544, -0.00219931, 0.00772279])
q2 = convert(Quaternion, so3(y)) = TransformUtils.Quaternion(0.9985646440491569, [-0.0529544, -0.00219931, 0.00772279])
q1 = convert(Quaternion, Euler(eul...)) = TransformUtils.Quaternion(0.9930056337961447, [-0.043778, 0.0486478, -0.0982684])
q2 = convert(Quaternion, so3(y)) = TransformUtils.Quaternion(0.9930056337961086, [-0.043778, 0.0486478, -0.0982684])
q1 = convert(Quaternion, Euler(eul...)) = TransformUtils.Quaternion(0.9670412391536178, [0.144357, -0.0995858, 0.184594])
q2 = convert(Quaternion, so3(y)) = TransformUtils.Quaternion(0.9670412391523586, [0.144357, -0.0995858, 0.184594])
[SUCCESS]
[TEST] Camera function evaluations...
[SUCCESS]
[TEST] MultipleFeatures constraints
test MultipleFeatures unit vector functions
test residual function
test as minimization problem to pose
 15.463190 seconds (13.02 M allocations: 638.271 MiB, 2.13% gc time)
r.minimizer = [-0.000119691, -0.000496734, 0.000370176]
test as minimization problem to landmark
WARNING: this addNode! will be deprecated, please use FactorGraph01.jl:addNode!(fg::FactorGraph, lbl::Symbol, softtype::Type{T}).
WARNING: this addNode! will be deprecated, please use FactorGraph01.jl:addNode!(fg::FactorGraph, lbl::Symbol, softtype::Type{T}).
WARNING: this addNode! will be deprecated, please use FactorGraph01.jl:addNode!(fg::FactorGraph, lbl::Symbol, softtype::Type{T}).
WARNING: this addNode! will be deprecated, please use FactorGraph01.jl:addNode!(fg::FactorGraph, lbl::Symbol, softtype::Type{T}).
WARNING: this addNode! will be deprecated, please use FactorGraph01.jl:addNode!(fg::FactorGraph, lbl::Symbol, softtype::Type{T}).

Building Bayes net...
(vert.label, getData(vert).BayesNetVertID) = ("x1", 0)
(vert.label, getData(vert).BayesNetVertID) = ("x2", 0)
(vert.label, getData(vert).BayesNetVertID) = ("l1", 0)
(vert.label, getData(vert).BayesNetVertID) = ("l2", 0)
(vert.label, getData(vert).BayesNetVertID) = ("l3", 0)

Eliminating 1
===============

adding marginal to
x.index = 3
x.index = 5
x.index = 6
x.index = 7

Eliminating 3
===============

adding marginal to
x.index = 5
x.index = 6
x.index = 7

Eliminating 5
===============

adding marginal to
x.index = 6
x.index = 7

Eliminating 6
===============

adding marginal to
x.index = 7

Eliminating 7
===============

adding marginal to
Bayes Net
Bayes Tree
Find potential functions for each clique
Get potentials l3,l2,l1,x2,x1,: 
Do recursive inference over tree
Start Clique l3,l2,l1,x2,x1,:  =============================
====================== Clique l3,l2,l1,x2,x1,:  =============================
up w 0 msgs---------- successive fnc approx ------------l3,l2,l1,x2,x1,: 
#1	 -- 
fmcmc! -- finished on l3,l2,l1,x2,x1,: 
---------- successive fnc approx ------------l3,l2,l1,x2,x1,: 
#1	 -- [2x0p,d3,N50], [2x0p,d3,N50], [drct] [drct] [drct] 
#2	 -- [2x0p,d3,N50], [2x0p,d3,N50], [drct] [drct] [drct] 
#3	 -- [2x0p,d3,N50], [2x0p,d3,N50], [drct] [drct] [drct] 
fmcmc! -- finished on l3,l2,l1,x2,x1,: 
Outgoing msg density on: updateFGBT! up -- finished updating l3,l2,l1,x2,x1,: 
End Clique l3,l2,l1,x2,x1,:  =============================
====================== Clique l3,l2,l1,x2,x1,:  =============================
dwn---------- successive fnc approx ------------l3,l2,l1,x2,x1,: 
fmcmc! -- finished on l3,l2,l1,x2,x1,: 
Outgoing msg density on: test ambiguous bi-modal multifeature constraint operation
[SUCCESS]
[TEST] Linear array functions evaluations...
  0.096224 seconds (18.43 k allocations: 894.396 KiB)
zDim = size(fp!.measurement[1], 1) = 3
  0.764425 seconds (1.08 M allocations: 72.914 MiB, 3.34% gc time)
WARNING: still need to insert kld(..) test to ensure this is working
Test back projection from 
  0.000071 seconds (32 allocations: 2.250 KiB)
zDim = size(fp!.measurement[1], 1) = 3
  1.440427 seconds (5.74 M allocations: 416.532 MiB, 8.15% gc time)
WARNING: Breaks if not set to 100
Adding PriorPose3 to graph...
WARNING: this addNode! will be deprecated, please use FactorGraph01.jl:addNode!(fg::FactorGraph, lbl::Symbol, softtype::Type{T}).
Adding LinearRangeBearingElevation to graph...
  0.000026 seconds (5 allocations: 208 bytes)
  0.193014 seconds (885.81 k allocations: 63.868 MiB, 10.26% gc time)
WARNING: this addNode! will be deprecated, please use FactorGraph01.jl:addNode!(fg::FactorGraph, lbl::Symbol, softtype::Type{T}).

Building Bayes net...
(vert.label, getData(vert).BayesNetVertID) = ("x1", 0)
(vert.label, getData(vert).BayesNetVertID) = ("l1", 0)

Eliminating 1
===============

adding marginal to
x.index = 3

Eliminating 3
===============

adding marginal to
Bayes Net
Bayes Tree
Find potential functions for each clique
Get potentials l1,x1,: 
Do recursive inference over tree
Start Clique l1,x1,:  =============================
====================== Clique l1,x1,:  =============================
up w 0 msgs---------- successive fnc approx ------------l1,x1,: 
#1	 -- 
fmcmc! -- finished on l1,x1,: 
---------- successive fnc approx ------------l1,x1,: 
#1	 -- [2x0p,d6,N100], [drct] 
#2	 -- [2x0p,d6,N100], [drct] 
#3	 -- [2x0p,d6,N100], [drct] 
fmcmc! -- finished on l1,x1,: 
Outgoing msg density on: updateFGBT! up -- finished updating l1,x1,: 
End Clique l1,x1,:  =============================
====================== Clique l1,x1,:  =============================
dwn---------- successive fnc approx ------------l1,x1,: 
fmcmc! -- finished on l1,x1,: 
Outgoing msg density on: [SUCCESS]
[TEST] Pose2 evaluations...
WARNING: this addNode! will be deprecated, please use FactorGraph01.jl:addNode!(fg::FactorGraph, lbl::Symbol, softtype::Type{T}).
WARNING: setDefaultNodeData! -- deprecated use of stdev.
WARNING: this addNode! will be deprecated, please use FactorGraph01.jl:addNode!(fg::FactorGraph, lbl::Symbol, softtype::Type{T}).
WARNING: setDefaultNodeData! -- deprecated use of stdev.

Building Bayes net...
(vert.label, getData(vert).BayesNetVertID) = ("x0", 0)
(vert.label, getData(vert).BayesNetVertID) = ("x1", 0)

Eliminating 1
===============

adding marginal to
x.index = 3

Eliminating 3
===============

adding marginal to
Bayes Net
Bayes Tree
Find potential functions for each clique
Get potentials x1,x0,: 
Do recursive inference over tree
Start Clique x1,x0,:  =============================
====================== Clique x1,x0,:  =============================
up w 0 msgs---------- successive fnc approx ------------x1,x0,: 
#1	 -- 
fmcmc! -- finished on x1,x0,: 
---------- successive fnc approx ------------x1,x0,: 
#1	 -- [2x0p,d3,N75], [drct] 
#2	 -- [2x0p,d3,N75], [drct] 
#3	 -- [2x0p,d3,N75], [drct] 
fmcmc! -- finished on x1,x0,: 
Outgoing msg density on: updateFGBT! up -- finished updating x1,x0,: 
End Clique x1,x0,:  =============================
====================== Clique x1,x0,:  =============================
dwn---------- successive fnc approx ------------x1,x0,: 
fmcmc! -- finished on x1,x0,: 
Outgoing msg density on: WARNING: this addNode! will be deprecated, please use FactorGraph01.jl:addNode!(fg::FactorGraph, lbl::Symbol, softtype::Type{T}).
WARNING: setDefaultNodeData! -- deprecated use of stdev.

Building Bayes net...
(vert.label, getData(vert).BayesNetVertID) = ("x0", 0)
(vert.label, getData(vert).BayesNetVertID) = ("x1", 0)
(vert.label, getData(vert).BayesNetVertID) = ("x2", 0)

Eliminating 1
===============

adding marginal to
x.index = 3

Eliminating 3
===============

adding marginal to
x.index = 5

Eliminating 5
===============

adding marginal to
Bayes Net
Bayes Tree
Find potential functions for each clique
Get potentials x0,: x1,
Get potentials x2,x1,: 
Do multi-process inference over tree
child.attributes["label"] = "x2,x1,: "
child.attributes["label"] = "x0,: x1,"
Start Clique x0,: x1, =============================
====================== Clique x0,: x1, =============================
Start Clique x2,x1,:  =============================
asyncProcessPostStacks -- 1, cliq=x2,x1,: , start on child x0,: x1, haskey=false
End Clique x0,: x1, =============================
	From worker 2:	up w 0 msgs---------- successive fnc approx ------------x0,: x1,
	From worker 2:	#1	 -- 
	From worker 2:	fmcmc! -- finished on x0,: x1,
	From worker 2:	---------- successive fnc approx ------------x0,: x1,
	From worker 2:	#1	 -- [2x0p,d3,N75], [drct] 
	From worker 2:	#2	 -- [2x0p,d3,N75], [drct] 
	From worker 2:	#3	 -- [2x0p,d3,N75], [drct] 
	From worker 2:	fmcmc! -- finished on x0,: x1,
updateFGBT! up -- finished updating x0,: x1,
====================== Clique x2,x1,:  =============================
End Clique x2,x1,:  =============================
processPostOrderStacks! -- THIS ONLY HAPPENS AFTER SYNC
	From worker 3:	up w 1 msgs---------- successive fnc approx ------------x2,x1,: 
	From worker 3:	#1	 -- 
	From worker 3:	fmcmc! -- finished on x2,x1,: 
	From worker 3:	---------- successive fnc approx ------------x2,x1,: 
	From worker 3:	#1	 -- [2x0p,d3,N75], [drct] 
	From worker 3:	#2	 -- [2x0p,d3,N75], [drct] 
	From worker 3:	#3	 -- [2x0p,d3,N75], [drct] 
	From worker 3:	fmcmc! -- finished on x2,x1,: 
upward leftovers, Int64[]
updateFGBT! up -- finished updating x2,x1,: 
	From worker 2:	Outgoing msg density on: =================== Iter Clique x2,x1,:  ===========================
	From worker 2:	dwn---------- successive fnc approx ------------x2,x1,: 
	From worker 2:	fmcmc! -- finished on x2,x1,: 
	From worker 3:	Outgoing msg density on: =================== Iter Clique x0,: x1, ===========================
	From worker 3:	dwn---------- successive fnc approx ------------x0,: x1,
	From worker 3:	#1	 -- [2x0p,d3,N75], 
	From worker 3:	fmcmc! -- finished on x0,: x1,
	From worker 3:	Dwn msg keys [3, 5]
	From worker 3:	Outgoing msg density on: 
dwnward leftovers, Int64[]
Do multi-process inference over tree
child.attributes["label"] = "x2,x1,: "
child.attributes["label"] = "x0,: x1,"
Start Clique x0,: x1, =============================
====================== Clique x0,: x1, =============================
Start Clique x2,x1,:  =============================
asyncProcessPostStacks -- 1, cliq=x2,x1,: , start on child x0,: x1, haskey=false
End Clique x0,: x1, =============================
	From worker 2:	Outgoing msg density on: up w 0 msgs---------- successive fnc approx ------------x0,: x1,
	From worker 2:	#1	 -- 
	From worker 2:	fmcmc! -- finished on x0,: x1,
	From worker 2:	---------- successive fnc approx ------------x0,: x1,
	From worker 2:	#1	 -- [2x0p,d3,N75], [drct] 
	From worker 2:	#2	 -- [2x0p,d3,N75], [drct] 
	From worker 2:	#3	 -- [2x0p,d3,N75], [drct] 
	From worker 2:	fmcmc! -- finished on x0,: x1,
updateFGBT! up -- finished updating x0,: x1,
====================== Clique x2,x1,:  =============================
End Clique x2,x1,:  =============================
processPostOrderStacks! -- THIS ONLY HAPPENS AFTER SYNC
	From worker 3:	up w 1 msgs---------- successive fnc approx ------------x2,x1,: 
	From worker 3:	#1	 -- 
	From worker 3:	fmcmc! -- finished on x2,x1,: 
	From worker 3:	---------- successive fnc approx ------------x2,x1,: 
	From worker 3:	#1	 -- [2x0p,d3,N75], [drct] 
	From worker 3:	#2	 -- [2x0p,d3,N75], [drct] 
	From worker 3:	#3	 -- [2x0p,d3,N75], [drct] 
	From worker 3:	fmcmc! -- finished on x2,x1,: 
upward leftovers, Int64[]
updateFGBT! up -- finished updating x2,x1,: 
	From worker 2:	Outgoing msg density on: =================== Iter Clique x2,x1,:  ===========================
	From worker 2:	dwn---------- successive fnc approx ------------x2,x1,: 
	From worker 2:	fmcmc! -- finished on x2,x1,: 
	From worker 3:	Outgoing msg density on: =================== Iter Clique x0,: x1, ===========================
	From worker 3:	dwn---------- successive fnc approx ------------x0,: x1,
	From worker 3:	#1	 -- [2x0p,d3,N75], 
	From worker 3:	fmcmc! -- finished on x0,: x1,
	From worker 3:	Dwn msg keys [3, 5]
	From worker 3:	Outgoing msg density on: 
dwnward leftovers, Int64[]
test bearing range evaluations
WARNING: this addNode! will be deprecated, please use FactorGraph01.jl:addNode!(fg::FactorGraph, lbl::Symbol, softtype::Type{T}).
WARNING: setDefaultNodeData! -- deprecated use of stdev.
test Pose2D plotting
[SUCCESS]
[TEST] Pose3 evaluations...
WARNING: both CoordinateTransformations and TransformUtils export "AngleAxis"; uses of it in module RoME must be qualified
Adding PriorPose3 to graph...
WARNING: this addNode! will be deprecated, please use FactorGraph01.jl:addNode!(fg::FactorGraph, lbl::Symbol, softtype::Type{T}).
Ensure vertex initialized properly
Testing PriorPose3 evaluation...
Adding Pose3Pose3 to graph...
WARNING: this addNode! will be deprecated, please use FactorGraph01.jl:addNode!(fg::FactorGraph, lbl::Symbol, softtype::Type{T}).
Testing Pose3Pose3 evaluation...
X1ptsMean = [0.437565; 0.28521; 0.0204816; -0.0165429; 0.0254118; -0.00563242]
Construct Bayes tree and perform inference...

Building Bayes net...
(vert.label, getData(vert).BayesNetVertID) = ("x1", 0)
(vert.label, getData(vert).BayesNetVertID) = ("x2", 0)

Eliminating 1
===============

adding marginal to
x.index = 3

Eliminating 3
===============

adding marginal to
Bayes Net
Bayes Tree
Find potential functions for each clique
Get potentials x2,x1,: 
Do multi-process inference over tree
child.attributes["label"] = "x2,x1,: "
Start Clique x2,x1,:  =============================
====================== Clique x2,x1,:  =============================
End Clique x2,x1,:  =============================
processPostOrderStacks! -- THIS ONLY HAPPENS AFTER SYNC
	From worker 2:	Outgoing msg density on: up w 0 msgs---------- successive fnc approx ------------x2,x1,: 
	From worker 2:	#1	 -- 
	From worker 2:	fmcmc! -- finished on x2,x1,: 
	From worker 2:	---------- successive fnc approx ------------x2,x1,: 
	From worker 2:	#1	 -- [2x0p,d6,N75], [drct] 
	From worker 2:	#2	 -- [2x0p,d6,N75], [drct] 
	From worker 2:	#3	 -- [2x0p,d6,N75], [drct] 
	From worker 2:	fmcmc! -- finished on x2,x1,: 
upward leftovers, Int64[]
updateFGBT! up -- finished updating x2,x1,: 
	From worker 3:	=================== Iter Clique x2,x1,:  ===========================
	From worker 3:	dwn---------- successive fnc approx ------------x2,x1,: 
	From worker 3:	fmcmc! -- finished on x2,x1,: 
dwnward leftovers, Int64[]
Ensure basic parameters on x1,x2 after inference...
previous test failure 0.75 .< [1.47, 1.53, 1.47] .< 2.25
println("previous test failure 0.75 .< $(round.(stdX2[1:3], 2)) .< 2.25") = nothing
[SUCCESS]
[TEST] ensure Pose3Pose3NH evaluations...
Syntax for null hypothesis matrix substitutions work.
Test if null hypothesis occurs as expected...
Adding PriorPose3 to graph...
WARNING: this addNode! will be deprecated, please use FactorGraph01.jl:addNode!(fg::FactorGraph, lbl::Symbol, softtype::Type{T}).
Ensure vertex initialized properly
Testing PriorPose3 evaluation...
WARNING: getNextLbl(::FactorGraph..) to be deprecated, use getlastpose/landm(::SLAMWrapper..) instead.
WARNING: this addNode! will be deprecated, please use FactorGraph01.jl:addNode!(fg::FactorGraph, lbl::Symbol, softtype::Type{T}).
WARNING: getNextLbl(::FactorGraph..) to be deprecated, use getlastpose/landm(::SLAMWrapper..) instead.
WARNING: this addNode! will be deprecated, please use FactorGraph01.jl:addNode!(fg::FactorGraph, lbl::Symbol, softtype::Type{T}).
Testing Pose3Pose3 evaluation...

Building Bayes net...
(vert.label, getData(vert).BayesNetVertID) = ("x1", 0)
(vert.label, getData(vert).BayesNetVertID) = ("x2", 0)
(vert.label, getData(vert).BayesNetVertID) = ("x3", 0)

Eliminating 1
===============

adding marginal to
x.index = 3

Eliminating 3
===============

adding marginal to
x.index = 5

Eliminating 5
===============

adding marginal to
Bayes Net
Bayes Tree
Find potential functions for each clique
Get potentials x1,: x2,
Get potentials x3,x2,: 
Do recursive inference over tree
Start Clique x3,x2,:  =============================
upMsgRec -- calling new recursive on x1,: x2,
Start Clique x1,: x2, =============================
====================== Clique x1,: x2, =============================
up w 0 msgs---------- successive fnc approx ------------x1,: x2,
#1	 -- 
fmcmc! -- finished on x1,: x2,
---------- successive fnc approx ------------x1,: x2,
#1	 -- [2x0p,d6,N100], [drct] 
#2	 -- [2x0p,d6,N100], [drct] 
#3	 -- [2x0p,d6,N100], [drct] 
fmcmc! -- finished on x1,: x2,
Outgoing msg density on: updateFGBT! up -- finished updating x1,: x2,
End Clique x1,: x2, =============================
upMsgRec -- finished with x1,: x2,, w [3])
====================== Clique x3,x2,:  =============================
up w 1 msgs---------- successive fnc approx ------------x3,x2,: 
#1	 -- 
fmcmc! -- finished on x3,x2,: 
---------- successive fnc approx ------------x3,x2,: 
#1	 -- [2x0p,d6,N100], [drct] 
#2	 -- [2x0p,d6,N100], [drct] 
#3	 -- [2x0p,d6,N100], [drct] 
fmcmc! -- finished on x3,x2,: 
Outgoing msg density on: updateFGBT! up -- finished updating x3,x2,: 
End Clique x3,x2,:  =============================
====================== Clique x3,x2,:  =============================
dwn---------- successive fnc approx ------------x3,x2,: 
fmcmc! -- finished on x3,x2,: 
Outgoing msg density on: ====================== Clique x1,: x2, =============================
dwn---------- successive fnc approx ------------x1,: x2,
#1	 -- [2x0p,d6,N100], 
fmcmc! -- finished on x1,: x2,
Dwn msg keys [3, 5]
Outgoing msg density on: 
Adding Pose3Pose3NH to graph...
loading validation data for testing.
[SUCCESS]
[TEST] saving to and loading from .jld file
Success
[TEST] partial pose3 evaluations...
WARNING: this addNode! will be deprecated, please use FactorGraph01.jl:addNode!(fg::FactorGraph, lbl::Symbol, softtype::Type{T}).
WARNING: this addNode! will be deprecated, please use FactorGraph01.jl:addNode!(fg::FactorGraph, lbl::Symbol, softtype::Type{T}).
test PartialPriorRollPitchZ evaluations
test residual function of PartialPose3XYYaw
test PartialPose3XYYaw evaluations
test predictbelief with two functions
[0x6p,d6,N50],[SUCCESS]
[TEST] PartialPose3XYYaw evaluations...
test x translation case
test z translation case
test roll and translate case 1
res = [-1.77636e-15, 0.0, 0.0, 0.0, 0.0, 0.0]
test roll and translate case 2
res = [0.0, 2.22045e-15, 1.77636e-15, 0.0, 0.0, 0.0]
test pitch and translate case 1
res = [8.88178e-16, 0.0, 0.0, 0.0, 0.0, 0.0]
res = [0.0, 0.0, -0.0]
test pitch and translate case 2
res = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
res = [0.0, 0.0, -0.0]
test pitch and translate case 3
res = [8.88178e-16, 0.0, 1.77636e-15, 0.0, 0.0, 0.0]
res = [8.88178e-16, 0.0, -0.0]
test pitch and translate case 4
res = [8.88178e-16, 0.0, 1.77636e-15, 0.0, 0.0, 0.0]
res = [8.88178e-16, 0.0, -0.0]
test yaw and translate case 1
res = [-1.11022e-15, -1.77636e-15, 0.0, 0.0, 0.0, -2.46519e-32]
res = [-6.12323e-16, -0.0, -0.0]
[SUCCESS]
[TEST] packing converters...
WARNING: this addNode! will be deprecated, please use FactorGraph01.jl:addNode!(fg::FactorGraph, lbl::Symbol, softtype::Type{T}).
WARNING: setDefaultNodeData! -- deprecated use of stdev.
WARNING: this addNode! will be deprecated, please use FactorGraph01.jl:addNode!(fg::FactorGraph, lbl::Symbol, softtype::Type{T}).
WARNING: setDefaultNodeData! -- deprecated use of stdev.
test conversions of PriorPose2
test conversions of Pose2Pose2
test conversions of Pose2DPoint2DBearingRange
WARNING: this addNode! will be deprecated, please use FactorGraph01.jl:addNode!(fg::FactorGraph, lbl::Symbol, softtype::Type{T}).
WARNING: setDefaultNodeData! -- deprecated use of stdev.
test conversions of PriorPose3
WARNING: this addNode! will be deprecated, please use FactorGraph01.jl:addNode!(fg::FactorGraph, lbl::Symbol, softtype::Type{T}).
test conversions of Pose3Pose3
WARNING: getNextLbl(::FactorGraph..) to be deprecated, use getlastpose/landm(::SLAMWrapper..) instead.
WARNING: this addNode! will be deprecated, please use FactorGraph01.jl:addNode!(fg::FactorGraph, lbl::Symbol, softtype::Type{T}).
test conversions of Pose3Pose3NH
test conversions of PartialPriorRollPitchZ
test conversions of PartialPose3XYYaw
test conversions of PartialPose3XYYawNH
test PriorPoint2DensityNH
[SUCCESS]
	From worker 2:	Outgoing msg density on: 
	From worker 3:	Outgoing msg density on: 
INFO: RoME tests passed

>>> End of log
