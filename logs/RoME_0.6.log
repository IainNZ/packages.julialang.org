>>> 'Pkg.add("RoME")' log
INFO: Cloning cache of Graphs from https://github.com/JuliaArchive/Graphs.jl.git
INFO: Cloning cache of IncrementalInference from https://github.com/JuliaRobotics/IncrementalInference.jl.git
INFO: Cloning cache of KernelDensityEstimate from https://github.com/JuliaRobotics/KernelDensityEstimate.jl.git
INFO: Cloning cache of RoME from https://github.com/JuliaRobotics/RoME.jl.git
INFO: Cloning cache of TransformUtils from https://github.com/dehann/TransformUtils.jl.git
INFO: Installing Blosc v0.5.0
INFO: Installing CMakeWrapper v0.1.0
INFO: Installing CoordinateTransformations v0.5.0
INFO: Installing DiffBase v0.3.2
INFO: Installing DiffEqDiffTools v0.4.1
INFO: Installing Distances v0.6.0
INFO: Installing DocStringExtensions v0.4.5
INFO: Installing FileIO v0.9.1
INFO: Installing Graphs v0.9.0
INFO: Installing HDF5 v0.9.3
INFO: Installing IncrementalInference v0.3.6
INFO: Installing JLD v0.8.3
INFO: Installing KernelDensityEstimate v0.3.1
INFO: Installing LegacyStrings v0.3.0
INFO: Installing LineSearches v3.2.5
INFO: Installing NLSolversBase v4.4.1
INFO: Installing NLsolve v1.0.1
INFO: Installing Optim v0.14.1
INFO: Installing Parameters v0.9.1
INFO: Installing PositiveFactorizations v0.1.0
INFO: Installing RoME v0.1.5
INFO: Installing Rotations v0.7.2
INFO: Installing TransformUtils v0.1.0
INFO: Building CMakeWrapper
INFO: Building Blosc
INFO: Building HDF5
INFO: Building SpecialFunctions
INFO: Building Rmath
INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of RoME
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("RoME")' log
Julia Version 0.6.4
Commit 9d11f62bcb (2018-07-09 19:09 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-143-generic #192-Ubuntu SMP Tue Feb 27 10:45:36 UTC 2018 x86_64 x86_64
Memory: 2.939197540283203 GB (770.06640625 MB free)
Uptime: 39379.0 sec
Load Avg:  1.01416015625  1.0400390625  1.0166015625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3502 MHz    2402699 s       1614 s     175208 s     758532 s          8 s
#2  3502 MHz     375974 s       6982 s      57526 s    3447839 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem MAX_THREADS=16)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.6
3 required packages:
 - JSON                          0.17.2
 - POMDPModels                   0.2.2
 - RoME                          0.1.5
97 additional packages:
 - AMG                           0.1.2              master
 - AbstractTrees                 0.1.0
 - AssetRegistry                 0.0.2
 - AutoHashEquals                0.2.0
 - BinDeps                       0.8.8
 - BinaryProvider                0.3.3
 - Blink                         0.7.0
 - Blosc                         0.5.0
 - CMakeWrapper                  0.1.0
 - CPUTime                       0.1.0
 - Calculus                      0.4.0
 - CategoricalArrays             0.3.11
 - CodecZlib                     0.4.3
 - ColorTypes                    0.6.7
 - Colors                        0.8.2
 - CommonSubexpressions          0.1.0
 - Compat                        1.0.0
 - CoordinateTransformations     0.5.0
 - D3Trees                       0.2.0
 - DataFrames                    0.11.7
 - DataStreams                   0.3.6
 - DataStructures                0.8.4
 - DiffBase                      0.3.2
 - DiffEqDiffTools               0.4.1
 - DiffResults                   0.0.3
 - DiffRules                     0.0.6
 - DiscreteValueIteration        0.0.0-             master (unregistered)
 - Distances                     0.6.0
 - Distributions                 0.15.0
 - DocStringExtensions           0.4.5
 - FileIO                        0.9.1
 - FixedPointNumbers             0.4.6
 - ForwardDiff                   0.7.5
 - FunctionalCollections         0.3.2
 - Graphs                        0.9.0
 - HDF5                          0.9.3
 - Hiccup                        0.1.1
 - HttpCommon                    0.4.0
 - HttpParser                    0.4.0
 - HttpServer                    0.3.1
 - IncompleteSelectedInversion   0.0.0-             master (unregistered)
 - IncrementalInference          0.3.6
 - InfrastructureModels          0.0.8
 - IterativeSolvers              0.6.0
 - Iterators                     0.3.1
 - JLD                           0.8.3
 - JSExpr                        0.2.2
 - JuMP                          0.18.2
 - KernelDensityEstimate         0.3.1
 - LaTeXStrings                  1.0.0
 - Lazy                          0.12.1
 - LegacyStrings                 0.3.0
 - LineSearches                  3.2.5
 - MCTS                          0.0.0-             master (unregistered)
 - MacroTools                    0.4.2
 - MathProgBase                  0.7.2
 - MbedTLS                       0.5.12
 - Memento                       0.9.0
 - Missings                      0.2.10
 - Mustache                      0.3.3
 - Mux                           0.3.1
 - NLSolversBase                 4.4.1
 - NLsolve                       1.0.1
 - NaNMath                       0.3.1
 - NamedTuples                   4.0.2
 - Nullables                     0.0.6
 - Observables                   0.1.2
 - Optim                         0.14.1
 - PDMats                        0.8.0
 - POMDPToolbox                  0.2.7
 - POMDPs                        0.6.7
 - Parameters                    0.9.1
 - Pidfile                       1.0.0
 - PositiveFactorizations        0.1.0
 - PowerModels                   0.8.2              master
 - ProgressMeter                 0.5.6
 - QuadGK                        0.3.0
 - RecipesBase                   0.3.1
 - Reexport                      0.1.0
 - Requires                      0.4.4
 - ReverseDiffSparse             0.8.1
 - Rmath                         0.4.0
 - Rotations                     0.7.2
 - SHA                           0.5.7
 - SortingAlgorithms             0.2.1
 - SpecialFunctions              0.6.0
 - StaticArrays                  0.7.2
 - StatsBase                     0.23.1
 - StatsFuns                     0.6.1
 - Syslogs                       0.2.0
 - TikzPictures                  1.2.0
 - TranscodingStreams            0.5.3
 - TransformUtils                0.1.0
 - URIParser                     0.3.1
 - WeakRefStrings                0.4.7
 - WebIO                         0.2.5
 - WebSockets                    0.5.0
INFO: Testing RoME
WARNING: Method definition getType(KernelDensityEstimate.BallTreeDensity) in module KernelDensityEstimate at /home/vagrant/.julia/v0.6/KernelDensityEstimate/src/BallTreeDensity01.jl:28 overwritten at /home/vagrant/.julia/v0.6/KernelDensityEstimate/src/KDE01.jl:43.

WARNING: deprecated syntax "inner constructor TopologicalSortVisitor(...) around /home/vagrant/.julia/v0.6/Graphs/src/depth_first_visit.jl:131".
Use "TopologicalSortVisitor{V}(...) where V" instead.
WARNING: using KernelDensityEstimate.root in module IncrementalInference conflicts with an existing identifier.

WARNING: deprecated syntax "inner constructor Point2Point2WorldBearing(...) around /home/vagrant/.julia/v0.6/RoME/src/Point2D.jl:79".
Use "Point2Point2WorldBearing{T}(...) where T" instead.
WARNING: ignoring conflicting import of IncrementalInference.compare into RoME
WARNING: static parameter T does not occur in signature for addMMBRFG! at /home/vagrant/.julia/v0.6/RoME/src/RobotUtils.jl:366.
The method will not be callable.
[TEST] numeric root...
Test Summary:                         | Pass  Total
Increased dimension root finding test |    2      2
  0.030649 seconds (5.12 k allocations: 248.967 KiB)
  0.000001 seconds (298 allocations: 15.438 KiB)
  0.000215 seconds (298 allocations: 15.438 KiB)
  0.001681 seconds (298 allocations: 15.438 KiB)
  0.001959 seconds (298 allocations: 15.438 KiB)
Test Summary:                           | Pass  Total
test FastRootGenericWrapParam functions |   55     55
[SUCCESS]
[TEST] MultipleFeatures constraints
test MultipleFeatures unit vector functions
test residual function
test as minimization problem to pose
  9.056285 seconds (13.05 M allocations: 639.733 MiB, 2.89% gc time)
r.minimizer = [0.000309619, 0.000725687, -0.000522201]
test as minimization problem to landmark
[drct][2x0p,d3,N50],l1 is not initialized, and will do so now...
[drct]l2 is not initialized, and will do so now...
[drct]l3 is not initialized, and will do so now...
[drct]
Building Bayes net...
(vert.label, getData(vert).BayesNetVertID) = ("x1", 0)
(vert.label, getData(vert).BayesNetVertID) = ("x2", 0)
(vert.label, getData(vert).BayesNetVertID) = ("l1", 0)
(vert.label, getData(vert).BayesNetVertID) = ("l2", 0)
(vert.label, getData(vert).BayesNetVertID) = ("l3", 0)

Eliminating 1
===============

adding marginal to
x.index = 3
x.index = 5
x.index = 6
x.index = 7

Eliminating 3
===============

adding marginal to
x.index = 5
x.index = 6
x.index = 7

Eliminating 5
===============

adding marginal to
x.index = 6
x.index = 7

Eliminating 6
===============

adding marginal to
x.index = 7

Eliminating 7
===============

adding marginal to
Bayes Net
Bayes Tree
Find potential functions for each clique
Get potentials l3,l2,l1,x2,x1,: 
Ensure all nodes are initialized
Do recursive inference over tree
Start Clique l3,l2,l1,x2,x1,:  =============================
====================== Clique l3,l2,l1,x2,x1,:  =============================
up w 0 msgs---------- successive fnc approx ------------l3,l2,l1,x2,x1,: 
#1	 -- 
fmcmc! -- finished on l3,l2,l1,x2,x1,: 
---------- successive fnc approx ------------l3,l2,l1,x2,x1,: 
#1	 -- [2x0p,d3,N50], [2x0p,d3,N50], [drct] [drct] [drct] 
#2	 -- [2x0p,d3,N50], [2x0p,d3,N50], [drct] [drct] [drct] 
#3	 -- [2x0p,d3,N50], [2x0p,d3,N50], [drct] [drct] [drct] 
fmcmc! -- finished on l3,l2,l1,x2,x1,: 
Outgoing msg density on: updateFGBT! up -- finished updating l3,l2,l1,x2,x1,: 
End Clique l3,l2,l1,x2,x1,:  =============================
====================== Clique l3,l2,l1,x2,x1,:  =============================
dwn---------- successive fnc approx ------------l3,l2,l1,x2,x1,: 
fmcmc! -- finished on l3,l2,l1,x2,x1,: 
Outgoing msg density on: test ambiguous bi-modal multifeature constraint operation
[SUCCESS]
[TEST] Linear array function evaluations...
  0.054410 seconds (18.92 k allocations: 914.786 KiB)
zDim = size(fp!.measurement[1], 1) = 3
  0.375660 seconds (1.10 M allocations: 77.296 MiB, 7.75% gc time)
WARNING: still need to insert kld(..) test to ensure this is working
Test back projection from 
  0.000032 seconds (34 allocations: 2.484 KiB)
zDim = size(fp!.measurement[1], 1) = 3
  0.743083 seconds (5.52 M allocations: 404.067 MiB, 12.39% gc time)
WARNING: Breaks if not set to 100
Adding PriorPose3 to graph...
Adding LinearRangeBearingElevation to graph...
  0.000015 seconds (5 allocations: 208 bytes)
  0.181718 seconds (1.31 M allocations: 93.406 MiB, 10.53% gc time)
[drct]l1 is not initialized, and will do so now...
[drct]
Building Bayes net...
(vert.label, getData(vert).BayesNetVertID) = ("x1", 0)
(vert.label, getData(vert).BayesNetVertID) = ("l1", 0)

Eliminating 1
===============

adding marginal to
x.index = 3

Eliminating 3
===============

adding marginal to
Bayes Net
Bayes Tree
Find potential functions for each clique
Get potentials l1,x1,: 
Ensure all nodes are initialized
Do recursive inference over tree
Start Clique l1,x1,:  =============================
====================== Clique l1,x1,:  =============================
up w 0 msgs---------- successive fnc approx ------------l1,x1,: 
#1	 -- 
fmcmc! -- finished on l1,x1,: 
---------- successive fnc approx ------------l1,x1,: 
#1	 -- [2x0p,d6,N100], [drct] 
#2	 -- [2x0p,d6,N100], [drct] 
#3	 -- [2x0p,d6,N100], [drct] 
fmcmc! -- finished on l1,x1,: 
Outgoing msg density on: updateFGBT! up -- finished updating l1,x1,: 
End Clique l1,x1,:  =============================
====================== Clique l1,x1,:  =============================
dwn---------- successive fnc approx ------------l1,x1,: 
fmcmc! -- finished on l1,x1,: 
Outgoing msg density on: [SUCCESS]
[drct]
Building Bayes net...
(vert.label, getData(vert).BayesNetVertID) = ("x0", 0)
(vert.label, getData(vert).BayesNetVertID) = ("x1", 0)

Eliminating 1
===============

adding marginal to
x.index = 3

Eliminating 3
===============

adding marginal to
Bayes Net
Bayes Tree
Find potential functions for each clique
Get potentials x1,x0,: 
Ensure all nodes are initialized
x1 is not initialized, and will do so now...
[drct]Do multi-process inference over tree
child.attributes["label"] = "x1,x0,: "
Start Clique x1,x0,:  =============================
====================== Clique x1,x0,:  =============================
End Clique x1,x0,:  =============================up w 0 msgs
---------- successive fnc approx ------------x1,x0,: 
#1	 -- processPostOrderStacks! -- THIS ONLY HAPPENS AFTER SYNC

fmcmc! -- finished on x1,x0,: 
---------- successive fnc approx ------------x1,x0,: 
#1	 -- [2x0p,d2,N200], [drct] 
#2	 -- [2x0p,d2,N200], [drct] 
#3	 -- [2x0p,d2,N200], [drct] 
fmcmc! -- finished on x1,x0,: 
Outgoing msg density on: upward leftovers, Int64[]
updateFGBT! up -- finished updating x1,x0,: 
=================== Iter Clique x1,x0,:  ===========================
dwn---------- successive fnc approx ------------x1,x0,: 
fmcmc! -- finished on x1,x0,: 
Outgoing msg density on: dwnward leftovers, Int64[]
Test Summary:           | Pass  Total
basic Point2Point2 test |    2      2
[TEST] Pose2 evaluations...
WARNING: Pose2Pose2(mu,cov) is deprecated in favor of Pose2Pose2(T(...)) -- use for example Pose2Pose2(MvNormal(mu, cov))
WARNING: Pose2Pose2(mu,cov,w) is deprecated in favor of Pose2Pose2(T(...)) -- use for example Pose2Pose2(MvNormal(mu, cov))
WARNING: Pose2Pose2(mu,cov,w) is deprecated in favor of Pose2Pose2(T(...)) -- use for example Pose2Pose2(MvNormal(mu, cov))
[drct]x1 is not initialized, and will do so now...
[drct]
Building Bayes net...
(vert.label, getData(vert).BayesNetVertID) = ("x0", 0)
(vert.label, getData(vert).BayesNetVertID) = ("x1", 0)

Eliminating 1
===============

adding marginal to
x.index = 3

Eliminating 3
===============

adding marginal to
Bayes Net
Bayes Tree
Find potential functions for each clique
Get potentials x1,x0,: 
Ensure all nodes are initialized
Do recursive inference over tree
Start Clique x1,x0,:  =============================
====================== Clique x1,x0,:  =============================
up w 0 msgs---------- successive fnc approx ------------x1,x0,: 
#1	 -- 
fmcmc! -- finished on x1,x0,: 
---------- successive fnc approx ------------x1,x0,: 
#1	 -- [2x0p,d3,N75], [drct] 
#2	 -- [2x0p,d3,N75], [drct] 
#3	 -- [2x0p,d3,N75], [drct] 
fmcmc! -- finished on x1,x0,: 
Outgoing msg density on: updateFGBT! up -- finished updating x1,x0,: 
End Clique x1,x0,:  =============================
====================== Clique x1,x0,:  =============================
dwn---------- successive fnc approx ------------x1,x0,: 
fmcmc! -- finished on x1,x0,: 
Outgoing msg density on: WARNING: Pose2Pose2(mu,cov,w) is deprecated in favor of Pose2Pose2(T(...)) -- use for example Pose2Pose2(MvNormal(mu, cov))

Building Bayes net...
(vert.label, getData(vert).BayesNetVertID) = ("x0", 0)
(vert.label, getData(vert).BayesNetVertID) = ("x1", 0)
(vert.label, getData(vert).BayesNetVertID) = ("x2", 0)

Eliminating 1
===============

adding marginal to
x.index = 3

Eliminating 3
===============

adding marginal to
x.index = 5

Eliminating 5
===============

adding marginal to
Bayes Net
Bayes Tree
Find potential functions for each clique
Get potentials x0,: x1,
Get potentials x2,x1,: 
Ensure all nodes are initialized
x2 is not initialized, and will do so now...
[drct]Do multi-process inference over tree
child.attributes["label"] = "x2,x1,: "
child.attributes["label"] = "x0,: x1,"
Start Clique x0,: x1, =============================
====================== Clique x0,: x1, =============================
End Clique x0,: x1, =============================up w 0 msgs
Start Clique x2,x1,:  =============================
asyncProcessPostStacks -- 1, cliq=x2,x1,: , start on child x0,: x1, haskey=false
---------- successive fnc approx ------------x0,: x1,
#1	 -- 
fmcmc! -- finished on x0,: x1,
---------- successive fnc approx ------------x0,: x1,
#1	 -- [2x0p,d3,N75], [drct] 
#2	 -- [2x0p,d3,N75], [drct] 
#3	 -- [2x0p,d3,N75], [drct] 
fmcmc! -- finished on x0,: x1,
Outgoing msg density on: updateFGBT! up -- finished updating x0,: x1,
====================== Clique x2,x1,:  =============================
End Clique x2,x1,:  =============================up w 1 msgs
---------- successive fnc approx ------------x2,x1,: 
#1	 -- processPostOrderStacks! -- THIS ONLY HAPPENS AFTER SYNC

fmcmc! -- finished on x2,x1,: 
---------- successive fnc approx ------------x2,x1,: 
#1	 -- [2x0p,d3,N75], [drct] 
#2	 -- [2x0p,d3,N75], [drct] 
#3	 -- [2x0p,d3,N75], [drct] 
fmcmc! -- finished on x2,x1,: 
Outgoing msg density on: upward leftovers, Int64[]
updateFGBT! up -- finished updating x2,x1,: 
=================== Iter Clique x2,x1,:  ===========================
dwn---------- successive fnc approx ------------x2,x1,: 
fmcmc! -- finished on x2,x1,: 
Outgoing msg density on: =================== Iter Clique x0,: x1, ===========================
dwn---------- successive fnc approx ------------x0,: x1,
#1	 -- [2x0p,d3,N75], 
fmcmc! -- finished on x0,: x1,
Dwn msg keys [3, 5]
Outgoing msg density on: 
dwnward leftovers, Int64[]
Ensure all nodes are initialized
Do multi-process inference over tree
child.attributes["label"] = "x2,x1,: "
child.attributes["label"] = "x0,: x1,"
Start Clique x0,: x1, =============================
====================== Clique x0,: x1, =============================
End Clique x0,: x1, =============================up w 0 msgs
Start Clique x2,x1,:  =============================
asyncProcessPostStacks -- 1, cliq=x2,x1,: , start on child x0,: x1, haskey=false
---------- successive fnc approx ------------x0,: x1,
#1	 -- 
fmcmc! -- finished on x0,: x1,
---------- successive fnc approx ------------x0,: x1,
#1	 -- [2x0p,d3,N75], [drct] 
#2	 -- [2x0p,d3,N75], [drct] 
#3	 -- [2x0p,d3,N75], [drct] 
fmcmc! -- finished on x0,: x1,
Outgoing msg density on: updateFGBT! up -- finished updating x0,: x1,
====================== Clique x2,x1,:  =============================
End Clique x2,x1,:  =============================up w 1 msgs
---------- successive fnc approx ------------x2,x1,: 
#1	 -- processPostOrderStacks! -- THIS ONLY HAPPENS AFTER SYNC

fmcmc! -- finished on x2,x1,: 
---------- successive fnc approx ------------x2,x1,: 
#1	 -- [2x0p,d3,N75], [drct] 
#2	 -- [2x0p,d3,N75], [drct] 
#3	 -- [2x0p,d3,N75], [drct] 
fmcmc! -- finished on x2,x1,: 
Outgoing msg density on: upward leftovers, Int64[]
updateFGBT! up -- finished updating x2,x1,: 
=================== Iter Clique x2,x1,:  ===========================
dwn---------- successive fnc approx ------------x2,x1,: 
fmcmc! -- finished on x2,x1,: 
Outgoing msg density on: =================== Iter Clique x0,: x1, ===========================
dwn---------- successive fnc approx ------------x0,: x1,
#1	 -- [2x0p,d3,N75], 
fmcmc! -- finished on x0,: x1,
Dwn msg keys [3, 5]
Outgoing msg density on: 
dwnward leftovers, Int64[]
test bearing range evaluations
[2x0p,d2,N75],[SUCCESS]
[drct]x1 is not initialized, and will do so now...
[drct]
Building Bayes net...
(vert.label, getData(vert).BayesNetVertID) = ("x0", 0)
(vert.label, getData(vert).BayesNetVertID) = ("x1", 0)

Eliminating 1
===============

adding marginal to
x.index = 2

Eliminating 2
===============

adding marginal to
Bayes Net
Bayes Tree
Find potential functions for each clique
Get potentials x1,x0,: 
Ensure all nodes are initialized
Do multi-process inference over tree
child.attributes["label"] = "x1,x0,: "
Start Clique x1,x0,:  =============================
====================== Clique x1,x0,:  =============================
End Clique x1,x0,:  =============================up w 0 msgs
---------- successive fnc approx ------------x1,x0,: 
#1	 -- processPostOrderStacks! -- THIS ONLY HAPPENS AFTER SYNC

fmcmc! -- finished on x1,x0,: 
---------- successive fnc approx ------------x1,x0,: 
#1	 -- [2x0p,d4,N200], [drct] 
#2	 -- [2x0p,d4,N200], [drct] 
#3	 -- [2x0p,d4,N200], [drct] 
fmcmc! -- finished on x1,x0,: 
Outgoing msg density on: upward leftovers, Int64[]
updateFGBT! up -- finished updating x1,x0,: 
=================== Iter Clique x1,x0,:  ===========================
dwn---------- successive fnc approx ------------x1,x0,: 
fmcmc! -- finished on x1,x0,: 
Outgoing msg density on: dwnward leftovers, Int64[]
WARNING: evaluateDualTree vector evaluation API is changing for single point evaluation across multiple dimensions rather than assuming multiple points on a univariate kde.
WARNING: evaluateDualTree vector evaluation API is changing for single point evaluation across multiple dimensions rather than assuming multiple points on a univariate kde.
WARNING: evaluateDualTree vector evaluation API is changing for single point evaluation across multiple dimensions rather than assuming multiple points on a univariate kde.
WARNING: evaluateDualTree vector evaluation API is changing for single point evaluation across multiple dimensions rather than assuming multiple points on a univariate kde.
x0 = getKDEMax(getVertKDE(fg, :x0)) = [0.225878, 0.0484289, 10.1022, 9.90958]
WARNING: evaluateDualTree vector evaluation API is changing for single point evaluation across multiple dimensions rather than assuming multiple points on a univariate kde.
WARNING: evaluateDualTree vector evaluation API is changing for single point evaluation across multiple dimensions rather than assuming multiple points on a univariate kde.
WARNING: evaluateDualTree vector evaluation API is changing for single point evaluation across multiple dimensions rather than assuming multiple points on a univariate kde.
WARNING: evaluateDualTree vector evaluation API is changing for single point evaluation across multiple dimensions rather than assuming multiple points on a univariate kde.
x1 = getKDEMax(getVertKDE(fg, :x1)) = [19.9483, 20.0079, 10.0897, 9.8693]
[drct][drct]x2 is not initialized, and will do so now...
[drct]
Building Bayes net...
(vert.label, getData(vert).BayesNetVertID) = ("x0", 0)
(vert.label, getData(vert).BayesNetVertID) = ("x1", 0)
(vert.label, getData(vert).BayesNetVertID) = ("x2", 0)

Eliminating 1
===============

adding marginal to
x.index = 2

Eliminating 2
===============

adding marginal to
x.index = 3

Eliminating 3
===============

adding marginal to
Bayes Net
Bayes Tree
Find potential functions for each clique
Get potentials x0,: x1,
Get potentials x2,x1,: 
Ensure all nodes are initialized
Do multi-process inference over tree
child.attributes["label"] = "x2,x1,: "
child.attributes["label"] = "x0,: x1,"
Start Clique x0,: x1, =============================
====================== Clique x0,: x1, =============================
End Clique x0,: x1, =============================up w 0 msgs
Start Clique x2,x1,:  =============================
asyncProcessPostStacks -- 1, cliq=x2,x1,: , start on child x0,: x1, haskey=false
---------- successive fnc approx ------------x0,: x1,
#1	 -- 
fmcmc! -- finished on x0,: x1,
---------- successive fnc approx ------------x0,: x1,
#1	 -- [2x0p,d4,N200], [drct] 
#2	 -- [2x0p,d4,N200], [drct] 
#3	 -- [2x0p,d4,N200], [drct] 
fmcmc! -- finished on x0,: x1,
Outgoing msg density on: updateFGBT! up -- finished updating x0,: x1,
====================== Clique x2,x1,:  =============================
End Clique x2,x1,:  =============================up w 1 msgs
---------- successive fnc approx ------------x2,x1,: 
#1	 -- processPostOrderStacks! -- THIS ONLY HAPPENS AFTER SYNC

fmcmc! -- finished on x2,x1,: 
---------- successive fnc approx ------------x2,x1,: 
#1	 -- [2x0p,d4,N200], [drct] 
#2	 -- [2x0p,d4,N200], [drct] 
#3	 -- [2x0p,d4,N200], [drct] 
fmcmc! -- finished on x2,x1,: 
Outgoing msg density on: upward leftovers, Int64[]
updateFGBT! up -- finished updating x2,x1,: 
=================== Iter Clique x2,x1,:  ===========================
dwn---------- successive fnc approx ------------x2,x1,: 
fmcmc! -- finished on x2,x1,: 
Outgoing msg density on: =================== Iter Clique x0,: x1, ===========================
dwn---------- successive fnc approx ------------x0,: x1,
#1	 -- [2x0p,d4,N200], 
fmcmc! -- finished on x0,: x1,
Dwn msg keys [2, 3]
Outgoing msg density on: 
dwnward leftovers, Int64[]
WARNING: evaluateDualTree vector evaluation API is changing for single point evaluation across multiple dimensions rather than assuming multiple points on a univariate kde.
WARNING: evaluateDualTree vector evaluation API is changing for single point evaluation across multiple dimensions rather than assuming multiple points on a univariate kde.
WARNING: evaluateDualTree vector evaluation API is changing for single point evaluation across multiple dimensions rather than assuming multiple points on a univariate kde.
WARNING: evaluateDualTree vector evaluation API is changing for single point evaluation across multiple dimensions rather than assuming multiple points on a univariate kde.
x0 = getKDEMax(getVertKDE(fg, :x0)) = [0.00515556, 0.0113757, 10.0044, 10.0954]
WARNING: evaluateDualTree vector evaluation API is changing for single point evaluation across multiple dimensions rather than assuming multiple points on a univariate kde.
WARNING: evaluateDualTree vector evaluation API is changing for single point evaluation across multiple dimensions rather than assuming multiple points on a univariate kde.
WARNING: evaluateDualTree vector evaluation API is changing for single point evaluation across multiple dimensions rather than assuming multiple points on a univariate kde.
WARNING: evaluateDualTree vector evaluation API is changing for single point evaluation across multiple dimensions rather than assuming multiple points on a univariate kde.
x1 = getKDEMax(getVertKDE(fg, :x1)) = [9.91227, 10.0979, 9.97199, 9.81275]
WARNING: evaluateDualTree vector evaluation API is changing for single point evaluation across multiple dimensions rather than assuming multiple points on a univariate kde.
WARNING: evaluateDualTree vector evaluation API is changing for single point evaluation across multiple dimensions rather than assuming multiple points on a univariate kde.
WARNING: evaluateDualTree vector evaluation API is changing for single point evaluation across multiple dimensions rather than assuming multiple points on a univariate kde.
WARNING: evaluateDualTree vector evaluation API is changing for single point evaluation across multiple dimensions rather than assuming multiple points on a univariate kde.
x2 = getKDEMax(getVertKDE(fg, :x2)) = [19.8056, 20.1388, 9.97907, 9.95654]
x1 is not initialized, and will do so now...
[drct]Test Summary:               | Pass  Total
[TEST] Pose2 evaluations... |    6      6
x0 is not initialized, and will do so now...
[drct][drct][2x0p,d2,N100],
Building Bayes net...
(vert.label, getData(vert).BayesNetVertID) = ("x0", 0)
(vert.label, getData(vert).BayesNetVertID) = ("x2", 0)
(vert.label, getData(vert).BayesNetVertID) = ("x1", 0)

Eliminating 1
===============

adding marginal to
x.index = 3

Eliminating 5
===============

adding marginal to
x.index = 3

Eliminating 3
===============

adding marginal to
Bayes Net
Bayes Tree
Find potential functions for each clique
Get potentials x0,: x1,
Get potentials x1,x2,: 
Ensure all nodes are initialized
Do multi-process inference over tree
child.attributes["label"] = "x1,x2,: "
child.attributes["label"] = "x0,: x1,"
Start Clique x0,: x1, =============================
====================== Clique x0,: x1, =============================
End Clique x0,: x1, =============================up w 0 msgs
Start Clique x1,x2,:  =============================
asyncProcessPostStacks -- 1, cliq=x1,x2,: , start on child x0,: x1, haskey=false
---------- successive fnc approx ------------x0,: x1,
#1	 -- 
fmcmc! -- finished on x0,: x1,
---------- successive fnc approx ------------x0,: x1,
#1	 -- [2x0p,d2,N200], [drct] 
#2	 -- [2x0p,d2,N200], [drct] 
#3	 -- [2x0p,d2,N200], [drct] 
fmcmc! -- finished on x0,: x1,
Outgoing msg density on: updateFGBT! up -- finished updating x0,: x1,
====================== Clique x1,x2,:  =============================
End Clique x1,x2,:  =============================up w 1 msgs
---------- successive fnc approx ------------x1,x2,: 
#1	 -- processPostOrderStacks! -- THIS ONLY HAPPENS AFTER SYNC

fmcmc! -- finished on x1,x2,: 
---------- successive fnc approx ------------x1,x2,: 
#1	 -- [2x0p,d2,N200], [2x0p,d2,N200], 
#2	 -- [2x0p,d2,N200], [2x0p,d2,N200], 
#3	 -- [2x0p,d2,N200], [2x0p,d2,N200], 
fmcmc! -- finished on x1,x2,: 
Outgoing msg density on: upward leftovers, Int64[]
updateFGBT! up -- finished updating x1,x2,: 
=================== Iter Clique x1,x2,:  ===========================
dwn---------- successive fnc approx ------------x1,x2,: 
fmcmc! -- finished on x1,x2,: 
Outgoing msg density on: =================== Iter Clique x0,: x1, ===========================
dwn---------- successive fnc approx ------------x0,: x1,
#1	 -- [2x0p,d2,N200], 
fmcmc! -- finished on x0,: x1,
Dwn msg keys [3, 5]
Outgoing msg density on: 
dwnward leftovers, Int64[]
Test Summary:                                   | Pass  Total
test Point2Point2WorldBearing factor is working |    6      6
Test Summary:                             | Pass  Total
test sampling from BearingRange factor... |    4      4
res = [0.0, 0.0]
res = [-1.22465e-15, 0.0]
res = [-1.22465e-15, 0.0]
res = [0.0, 0.0]
Test Summary:                                 | Pass  Total
test BearingRange factor residual function... |    4      4
[drct][drct]Test Summary:                                             | Pass  Total
test unimodal bearing range factor, solve for landmark... |    5      5
[drct]abs.(Base.mean(pts, 2)) = [0.419751; 0.456103; 0.0104651]
Base.std(pts, 2) = [0.862976; 2.85251; 0.11734]
Test Summary:                                         | Pass  Total
test unimodal bearing range factor, solve for pose... |    3      3

WARNING: deprecated syntax "inner constructor NorthSouthPartial(...) around /home/vagrant/.julia/v0.6/RoME/test/testMultimodalRangeBearing.jl:9".
Use "NorthSouthPartial{T}(...) where T" instead.
[drct][drct][0x1p,d3,N100],[2x0p,d2,N100],[2x0p,d2,N100],[1x1p,d3,N100],Test Summary:                                          | Pass  Total
test standard multimodal range bearing factor setup... |    1      1

Building Bayes net...
(vert.label, getData(vert).BayesNetVertID) = ("l1", 0)
(vert.label, getData(vert).BayesNetVertID) = ("l2", 0)
(vert.label, getData(vert).BayesNetVertID) = ("x0", 0)

Eliminating 1
===============

adding marginal to
x.index = 5
x.index = 2

Eliminating 2
===============

adding marginal to
x.index = 5

Eliminating 5
===============

adding marginal to
Bayes Net
Bayes Tree
Find potential functions for each clique
Get potentials x0,l2,l1,: 
Ensure all nodes are initialized
Do recursive inference over tree
Start Clique x0,l2,l1,:  =============================
====================== Clique x0,l2,l1,:  =============================
up w 0 msgs---------- successive fnc approx ------------x0,l2,l1,: 
#1	 -- 
fmcmc! -- finished on x0,l2,l1,: 
---------- successive fnc approx ------------x0,l2,l1,: 
#1	 -- [1x1p,d3,N100], [2x0p,d2,N100], [2x0p,d2,N100], 
#2	 -- [1x1p,d3,N100], [2x0p,d2,N100], [2x0p,d2,N100], 
#3	 -- [1x1p,d3,N100], [2x0p,d2,N100], [2x0p,d2,N100], 
fmcmc! -- finished on x0,l2,l1,: 
Outgoing msg density on: updateFGBT! up -- finished updating x0,l2,l1,: 
End Clique x0,l2,l1,:  =============================
====================== Clique x0,l2,l1,:  =============================
dwn---------- successive fnc approx ------------x0,l2,l1,: 
fmcmc! -- finished on x0,l2,l1,: 
Outgoing msg density on: Ensure all nodes are initialized
Do recursive inference over tree
Start Clique x0,l2,l1,:  =============================
====================== Clique x0,l2,l1,:  =============================
up w 0 msgs---------- successive fnc approx ------------x0,l2,l1,: 
#1	 -- 
fmcmc! -- finished on x0,l2,l1,: 
---------- successive fnc approx ------------x0,l2,l1,: 
#1	 -- [1x1p,d3,N100], [2x0p,d2,N100], [2x0p,d2,N100], 
#2	 -- [1x1p,d3,N100], [2x0p,d2,N100], [2x0p,d2,N100], 
#3	 -- [1x1p,d3,N100], [2x0p,d2,N100], [2x0p,d2,N100], 
fmcmc! -- finished on x0,l2,l1,: 
Outgoing msg density on: updateFGBT! up -- finished updating x0,l2,l1,: 
End Clique x0,l2,l1,:  =============================
====================== Clique x0,l2,l1,:  =============================
dwn---------- successive fnc approx ------------x0,l2,l1,: 
fmcmc! -- finished on x0,l2,l1,: 
Outgoing msg density on: Ensure all nodes are initialized
Do recursive inference over tree
Start Clique x0,l2,l1,:  =============================
====================== Clique x0,l2,l1,:  =============================
up w 0 msgs---------- successive fnc approx ------------x0,l2,l1,: 
#1	 -- 
fmcmc! -- finished on x0,l2,l1,: 
---------- successive fnc approx ------------x0,l2,l1,: 
#1	 -- [1x1p,d3,N100], [2x0p,d2,N100], [2x0p,d2,N100], 
#2	 -- [1x1p,d3,N100], [2x0p,d2,N100], [2x0p,d2,N100], 
#3	 -- [1x1p,d3,N100], [2x0p,d2,N100], [2x0p,d2,N100], 
fmcmc! -- finished on x0,l2,l1,: 
Outgoing msg density on: updateFGBT! up -- finished updating x0,l2,l1,: 
End Clique x0,l2,l1,:  =============================
====================== Clique x0,l2,l1,:  =============================
dwn---------- successive fnc approx ------------x0,l2,l1,: 
fmcmc! -- finished on x0,l2,l1,: 
Outgoing msg density on: Ensure all nodes are initialized
Do recursive inference over tree
Start Clique x0,l2,l1,:  =============================
====================== Clique x0,l2,l1,:  =============================
up w 0 msgs---------- successive fnc approx ------------x0,l2,l1,: 
#1	 -- 
fmcmc! -- finished on x0,l2,l1,: 
---------- successive fnc approx ------------x0,l2,l1,: 
#1	 -- [1x1p,d3,N100], [2x0p,d2,N100], [2x0p,d2,N100], 
#2	 -- [1x1p,d3,N100], [2x0p,d2,N100], [2x0p,d2,N100], 
#3	 -- [1x1p,d3,N100], [2x0p,d2,N100], [2x0p,d2,N100], 
fmcmc! -- finished on x0,l2,l1,: 
Outgoing msg density on: updateFGBT! up -- finished updating x0,l2,l1,: 
End Clique x0,l2,l1,:  =============================
====================== Clique x0,l2,l1,:  =============================
dwn---------- successive fnc approx ------------x0,l2,l1,: 
fmcmc! -- finished on x0,l2,l1,: 
Outgoing msg density on: Test Summary:                                                             | Pass  Total
test multimodal bearing range factors calculate pose position properly... |    4      4
[drct][2x0p,d2,N100],[1x1p,d2,N100],
Building Bayes net...
(vert.label, getData(vert).BayesNetVertID) = ("x0", 0)
(vert.label, getData(vert).BayesNetVertID) = ("l1", 0)
(vert.label, getData(vert).BayesNetVertID) = ("l2", 0)

Eliminating 1
===============

adding marginal to
x.index = 3
x.index = 5

Eliminating 3
===============

adding marginal to
x.index = 5

Eliminating 5
===============

adding marginal to
Bayes Net
Bayes Tree
Find potential functions for each clique
Get potentials l2,l1,x0,: 
Ensure all nodes are initialized
Do recursive inference over tree
Start Clique l2,l1,x0,:  =============================
====================== Clique l2,l1,x0,:  =============================
up w 0 msgs---------- successive fnc approx ------------l2,l1,x0,: 
#1	 -- 
fmcmc! -- finished on l2,l1,x0,: 
---------- successive fnc approx ------------l2,l1,x0,: 
#1	 -- [1x1p,d2,N100], [2x0p,d2,N100], [2x0p,d3,N100], 
#2	 -- [1x1p,d2,N100], [2x0p,d2,N100], [2x0p,d3,N100], 
#3	 -- [1x1p,d2,N100], [2x0p,d2,N100], [2x0p,d3,N100], 
fmcmc! -- finished on l2,l1,x0,: 
Outgoing msg density on: updateFGBT! up -- finished updating l2,l1,x0,: 
End Clique l2,l1,x0,:  =============================
====================== Clique l2,l1,x0,:  =============================
dwn---------- successive fnc approx ------------l2,l1,x0,: 
fmcmc! -- finished on l2,l1,x0,: 
Outgoing msg density on: Ensure all nodes are initialized
Do recursive inference over tree
Start Clique l2,l1,x0,:  =============================
====================== Clique l2,l1,x0,:  =============================
up w 0 msgs---------- successive fnc approx ------------l2,l1,x0,: 
#1	 -- 
fmcmc! -- finished on l2,l1,x0,: 
---------- successive fnc approx ------------l2,l1,x0,: 
#1	 -- [1x1p,d2,N100], [2x0p,d2,N100], [2x0p,d3,N100], 
#2	 -- [1x1p,d2,N100], [2x0p,d2,N100], [2x0p,d3,N100], 
#3	 -- [1x1p,d2,N100], [2x0p,d2,N100], [2x0p,d3,N100], 
fmcmc! -- finished on l2,l1,x0,: 
Outgoing msg density on: updateFGBT! up -- finished updating l2,l1,x0,: 
End Clique l2,l1,x0,:  =============================
====================== Clique l2,l1,x0,:  =============================
dwn---------- successive fnc approx ------------l2,l1,x0,: 
fmcmc! -- finished on l2,l1,x0,: 
Outgoing msg density on: Ensure all nodes are initialized
Do recursive inference over tree
Start Clique l2,l1,x0,:  =============================
====================== Clique l2,l1,x0,:  =============================
up w 0 msgs---------- successive fnc approx ------------l2,l1,x0,: 
#1	 -- 
fmcmc! -- finished on l2,l1,x0,: 
---------- successive fnc approx ------------l2,l1,x0,: 
#1	 -- [1x1p,d2,N100], [2x0p,d2,N100], [2x0p,d3,N100], 
#2	 -- [1x1p,d2,N100], [2x0p,d2,N100], [2x0p,d3,N100], 
#3	 -- [1x1p,d2,N100], [2x0p,d2,N100], [2x0p,d3,N100], 
fmcmc! -- finished on l2,l1,x0,: 
Outgoing msg density on: updateFGBT! up -- finished updating l2,l1,x0,: 
End Clique l2,l1,x0,:  =============================
====================== Clique l2,l1,x0,:  =============================
dwn---------- successive fnc approx ------------l2,l1,x0,: 
fmcmc! -- finished on l2,l1,x0,: 
Outgoing msg density on: Ensure all nodes are initialized
Do recursive inference over tree
Start Clique l2,l1,x0,:  =============================
====================== Clique l2,l1,x0,:  =============================
up w 0 msgs---------- successive fnc approx ------------l2,l1,x0,: 
#1	 -- 
fmcmc! -- finished on l2,l1,x0,: 
---------- successive fnc approx ------------l2,l1,x0,: 
#1	 -- [1x1p,d2,N100], [2x0p,d2,N100], [2x0p,d3,N100], 
#2	 -- [1x1p,d2,N100], [2x0p,d2,N100], [2x0p,d3,N100], 
#3	 -- [1x1p,d2,N100], [2x0p,d2,N100], [2x0p,d3,N100], 
fmcmc! -- finished on l2,l1,x0,: 
Outgoing msg density on: updateFGBT! up -- finished updating l2,l1,x0,: 
End Clique l2,l1,x0,:  =============================
====================== Clique l2,l1,x0,:  =============================
dwn---------- successive fnc approx ------------l2,l1,x0,: 
fmcmc! -- finished on l2,l1,x0,: 
Outgoing msg density on: Test Summary:                                                | Pass  Total
test multimodal landmark locations are computed correclty... |    7      7
[TEST] Pose3 evaluations...
WARNING: both CoordinateTransformations and TransformUtils export "AngleAxis"; uses of it in module RoME must be qualified
Test Summary:                 | Pass  Total
Adding PriorPose3 to graph... |    1      1
x1 is not initialized, and will do so now...
[drct]muX1 = Base.mean(getVal(fg, :x1), 2) = [0.204747; -0.0696316; -0.236036; 0.0096145; 0.00753639; -0.00152211]
stdX1 = Base.std(getVal(fg, :x1), 2) = [1.09396; 0.970949; 0.956569; 0.0885383; 0.114245; 0.101386]
Test Summary:                      | Pass  Total
Ensure vertex initialized properly |    5      5
Test Summary:                    | Pass  Total
Testing PriorPose3 evaluation... |    2      2
Test Summary:                 | Pass  Total
Adding Pose3Pose3 to graph... |    1      1
x2 is not initialized, and will do so now...
[drct]X1ptsMean = [0.397168; -0.45301; -0.638034; 0.000132554; 0.00336334; 0.0362851]
Test Summary:                    | Pass  Total
Testing Pose3Pose3 evaluation... |    3      3

Building Bayes net...
(vert.label, getData(vert).BayesNetVertID) = ("x1", 0)
(vert.label, getData(vert).BayesNetVertID) = ("x2", 0)

Eliminating 1
===============

adding marginal to
x.index = 3

Eliminating 3
===============

adding marginal to
Bayes Net
Bayes Tree
Find potential functions for each clique
Get potentials x2,x1,: 
Ensure all nodes are initialized
Do multi-process inference over tree
child.attributes["label"] = "x2,x1,: "
Start Clique x2,x1,:  =============================
====================== Clique x2,x1,:  =============================
End Clique x2,x1,:  =============================up w 0 msgs
---------- successive fnc approx ------------x2,x1,: 
#1	 -- processPostOrderStacks! -- THIS ONLY HAPPENS AFTER SYNC

fmcmc! -- finished on x2,x1,: 
---------- successive fnc approx ------------x2,x1,: 
#1	 -- [2x0p,d6,N75], [drct] 
#2	 -- [2x0p,d6,N75], [drct] 
#3	 -- [2x0p,d6,N75], [drct] 
fmcmc! -- finished on x2,x1,: 
Outgoing msg density on: upward leftovers, Int64[]
updateFGBT! up -- finished updating x2,x1,: 
=================== Iter Clique x2,x1,:  ===========================
dwn---------- successive fnc approx ------------x2,x1,: 
fmcmc! -- finished on x2,x1,: 
Outgoing msg density on: dwnward leftovers, Int64[]
Test Summary:                                 | Pass  Total
Construct Bayes tree and perform inference... |    1      1
muX2[1:3] - [10.0; 0; 0] = [-0.266359, -0.0357108, 0.166902]
previous test failure 0.75 .< [1.47, 1.55, 1.42] .< 2.25
println("previous test failure 0.75 .< $(round.(stdX2[1:3], 2)) .< 2.25") = nothing
Test Summary:                                       | Pass  Total
Ensure basic parameters on x1,x2 after inference... |    8      8
[SUCCESS]
[TEST] ensure Pose3Pose3NH evaluations...
Test Summary:                                       | Pass  Total
Test syntax for null hypothesis matrix substitution |    1      1
Test if null hypothesis occurs as expected...
Adding PriorPose3 to graph...
x1 is not initialized, and will do so now...
[drct]Ensure vertex initialized properly
Testing PriorPose3 evaluation...
WARNING: getNextLbl(::FactorGraph..) to be deprecated, use getlastpose/landm(::SLAMWrapper..) instead.
WARNING: getNextLbl(::FactorGraph..) to be deprecated, use getlastpose/landm(::SLAMWrapper..) instead.
[drct]Testing Pose3Pose3 evaluation...

Building Bayes net...
(vert.label, getData(vert).BayesNetVertID) = ("x1", 0)
(vert.label, getData(vert).BayesNetVertID) = ("x2", 0)
(vert.label, getData(vert).BayesNetVertID) = ("x3", 0)

Eliminating 1
===============

adding marginal to
x.index = 3

Eliminating 3
===============

adding marginal to
x.index = 5

Eliminating 5
===============

adding marginal to
Bayes Net
Bayes Tree
Find potential functions for each clique
Get potentials x1,: x2,
Get potentials x3,x2,: 
Ensure all nodes are initialized
x3 is not initialized, and will do so now...
[drct]Do recursive inference over tree
Start Clique x3,x2,:  =============================
upMsgRec -- calling new recursive on x1,: x2,
Start Clique x1,: x2, =============================
====================== Clique x1,: x2, =============================
up w 0 msgs---------- successive fnc approx ------------x1,: x2,
#1	 -- 
fmcmc! -- finished on x1,: x2,
---------- successive fnc approx ------------x1,: x2,
#1	 -- [2x0p,d6,N100], [drct] 
#2	 -- [2x0p,d6,N100], [drct] 
#3	 -- [2x0p,d6,N100], [drct] 
fmcmc! -- finished on x1,: x2,
Outgoing msg density on: updateFGBT! up -- finished updating x1,: x2,
End Clique x1,: x2, =============================
upMsgRec -- finished with x1,: x2,, w [3])
====================== Clique x3,x2,:  =============================
up w 1 msgs---------- successive fnc approx ------------x3,x2,: 
#1	 -- 
fmcmc! -- finished on x3,x2,: 
---------- successive fnc approx ------------x3,x2,: 
#1	 -- [2x0p,d6,N100], [drct] 
#2	 -- [2x0p,d6,N100], [drct] 
#3	 -- [2x0p,d6,N100], [drct] 
fmcmc! -- finished on x3,x2,: 
Outgoing msg density on: updateFGBT! up -- finished updating x3,x2,: 
End Clique x3,x2,:  =============================
====================== Clique x3,x2,:  =============================
dwn---------- successive fnc approx ------------x3,x2,: 
fmcmc! -- finished on x3,x2,: 
Outgoing msg density on: ====================== Clique x1,: x2, =============================
dwn---------- successive fnc approx ------------x1,: x2,
#1	 -- [2x0p,d6,N100], 
fmcmc! -- finished on x1,: x2,
Dwn msg keys [3, 5]
Outgoing msg density on: 
Adding Pose3Pose3NH to graph...
Test Summary:                        | Pass  Total
loading validation data for testing. |    2      2
[SUCCESS]
[TEST] saving to and loading from .jld file
Success
[TEST] partial pose3 evaluations...
[drct][0x6p,d6,N50],Test Summary:                           | Pass  Total
test PartialPriorRollPitchZ evaluations |    8      8
Test Summary:                               | Pass  Total
test residual function of PartialPose3XYYaw |    5      5
abs.(Base.mean(pts[newdims, :], 2) - mu2) = [0.0510978; 0.178109; 0.00932371]
Test Summary:                      | Pass  Total
test PartialPose3XYYaw evaluations |    6      6
[0x6p,d6,N50],Test Summary:                         | Pass  Total
test predictbelief with two functions |    5      5
[SUCCESS]
[TEST] PartialPose3XYYaw evaluations...
test x translation case: Error During Test
  Got an exception of type ErrorException outside of a @test
  type AffineMap has no field v
  Stacktrace:
   [1] convert(::Type{TransformUtils.SE3}, ::CoordinateTransformations.AffineMap{Rotations.Quat{Float64},StaticArrays.SArray{Tuple{3},Float64,1,3}}) at /home/vagrant/.julia/v0.6/RoME/src/RobotUtils.jl:27
   [2] macro expansion at /home/vagrant/.julia/v0.6/RoME/test/testPartialXYH.jl:15 [inlined]
   [3] macro expansion at ./test.jl:860 [inlined]
   [4] anonymous at ./<missing>:?
   [5] include_from_node1(::String) at ./loading.jl:576
   [6] include(::String) at ./sysimg.jl:14
   [7] include_from_node1(::String) at ./loading.jl:576
   [8] include(::String) at ./sysimg.jl:14
   [9] process_options(::Base.JLOptions) at ./client.jl:305
   [10] _start() at ./client.jl:371
Test Summary:           | Error  Total
test x translation case |     1      1
ERROR: LoadError: LoadError: Some tests did not pass: 0 passed, 0 failed, 1 errored, 0 broken.
while loading /home/vagrant/.julia/v0.6/RoME/test/testPartialXYH.jl, in expression starting on line 6
while loading /home/vagrant/.julia/v0.6/RoME/test/runtests.jl, in expression starting on line 62
================================[ ERROR: RoME ]=================================

failed process: Process(`/home/vagrant/julia/bin/julia -Cgeneric -J/home/vagrant/julia/lib/julia/sys.so --compile=yes --depwarn=yes --check-bounds=yes --code-coverage=none --color=no --compilecache=yes /home/vagrant/.julia/v0.6/RoME/test/runtests.jl`, ProcessExited(1)) [1]

================================================================================
ERROR: RoME had test errors

>>> End of log
