>>> 'Pkg.add("FixedPolynomials")' log
WARNING: Base.Pkg is deprecated, run `using Pkg` instead
 in module Main
[ Info: Cloning cache of FixedPolynomials from https://github.com/JuliaAlgebra/FixedPolynomials.jl.git
[ Info: Installing FixedPolynomials v0.2.2
[ Info: Installing MultivariatePolynomials v0.1.4
[ Info: Package database updated
┌ Info: METADATA is out-of-date — you may not have the latest version of FixedPolynomials
└ Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("FixedPolynomials")' log
WARNING: Base.versioninfo is deprecated: it has been moved to the standard library package `InteractiveUtils`.
Add `using InteractiveUtils` to your imports.
 in module Main
WARNING: Base.versioninfo is deprecated: it has been moved to the standard library package `InteractiveUtils`.
Add `using InteractiveUtils` to your imports.
 in module Main
Julia Version 0.7.0-DEV.5042
Commit b19ba88d9f (2018-05-08 15:17 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
      Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-143-generic #192-Ubuntu SMP Tue Feb 27 10:45:36 UTC 2018 x86_64 x86_64
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
              speed         user         nice          sys         idle          irq
       #1  3499 MHz    6056043 s       2972 s     392958 s    1824588 s         71 s
       #2  3499 MHz    1491228 s       4819 s     150404 s    7907593 s          3 s
       
  Memory: 2.939197540283203 GB (1603.16796875 MB free)
  Uptime: 97378.0 sec
  Load Avg:  1.02880859375  1.001953125  0.96533203125
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-6.0.0 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant
Packages:
  Package Directory: /home/vagrant/.julia/v0.7
  Package Status:
2 required packages:
 - FixedPolynomials              0.2.2
 - JSON                          0.17.2
3 additional packages:
 - Compat                        0.64.0
 - MultivariatePolynomials       0.1.4
 - Nullables                     0.0.5
WARNING: Base.Pkg is deprecated, run `using Pkg` instead
 in module Main
[ Info: Computing test dependencies for FixedPolynomials...
[ Info: Installing DynamicPolynomials v0.0.3
[ Info: Testing FixedPolynomials
WARNING: Base.Test is deprecated, run `using Test` instead
  likely near /home/vagrant/.julia/v0.7/FixedPolynomials/test/runtests.jl:2
WARNING: Base.Complex128 is deprecated, use ComplexF64 instead.
  likely near /home/vagrant/.julia/v0.7/FixedPolynomials/test/poly_test.jl:1
in top-level scope at /home/vagrant/.julia/v0.7/FixedPolynomials/test/poly_test.jl
WARNING: Base.Complex128 is deprecated, use ComplexF64 instead.
  likely near /home/vagrant/.julia/v0.7/FixedPolynomials/test/poly_test.jl:1
in top-level scope at /home/vagrant/.julia/v0.7/FixedPolynomials/test/poly_test.jl
WARNING: importing deprecated binding Base.uninitialized into DynamicPolynomials.
WARNING: Base.uninitialized is deprecated, use undef instead.
  likely near /home/vagrant/.julia/v0.7/FixedPolynomials/test/poly_test.jl:1
WARNING: Base.uninitialized is deprecated, use undef instead.
  likely near /home/vagrant/.julia/v0.7/FixedPolynomials/test/poly_test.jl:1
WARNING: Base.uninitialized is deprecated, use undef instead.
  likely near /home/vagrant/.julia/v0.7/FixedPolynomials/test/poly_test.jl:1
WARNING: Base.uninitialized is deprecated, use undef instead.
  likely near /home/vagrant/.julia/v0.7/FixedPolynomials/test/poly_test.jl:1
WARNING: Base.uninitialized is deprecated, use undef instead.
  likely near /home/vagrant/.julia/v0.7/FixedPolynomials/test/poly_test.jl:1
WARNING: Base.uninitialized is deprecated, use undef instead.
  likely near /home/vagrant/.julia/v0.7/FixedPolynomials/test/poly_test.jl:1
┌ Warning: `Array{T, 2}(m::Int, n::Int) where T` is deprecated, use `Array{T, 2}(undef, m, n)` instead.
│   caller = Polynomial(::DynamicPolynomials.Polynomial{true,Int64}, ::Array{DynamicPolynomials.PolyVar{true},1}, ::Bool) at poly.jl:67
└ @ FixedPolynomials poly.jl:67
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(undef, m)` instead.
│   caller = Polynomial(::DynamicPolynomials.Polynomial{true,Int64}, ::Array{DynamicPolynomials.PolyVar{true},1}, ::Bool) at poly.jl:68
└ @ FixedPolynomials poly.jl:68
┌ Warning: `Array{T, 2}(m::Int, n::Int) where T` is deprecated, use `Array{T, 2}(undef, m, n)` instead.
│   caller = Polynomial{Float64}(::DynamicPolynomials.Polynomial{true,Int64}, ::Array{DynamicPolynomials.PolyVar{true},1}, ::Bool) at poly.jl:67
└ @ FixedPolynomials poly.jl:67
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(undef, m)` instead.
│   caller = Polynomial{Float64}(::DynamicPolynomials.Polynomial{true,Int64}, ::Array{DynamicPolynomials.PolyVar{true},1}, ::Bool) at poly.jl:68
└ @ FixedPolynomials poly.jl:68
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(undef, m)` instead.
│   caller = substitute(::Polynomial{Int64}, ::Int64, ::Float64) at poly.jl:247
└ @ FixedPolynomials poly.jl:247
┌ Warning: `Array{T, 2}(m::Int, n::Int) where T` is deprecated, use `Array{T, 2}(undef, m, n)` instead.
│   caller = Polynomial(::DynamicPolynomials.PolyVar{true}, ::Array{DynamicPolynomials.PolyVar{true},1}, ::Bool) at poly.jl:67
└ @ FixedPolynomials poly.jl:67
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(undef, m)` instead.
│   caller = Polynomial(::DynamicPolynomials.PolyVar{true}, ::Array{DynamicPolynomials.PolyVar{true},1}, ::Bool) at poly.jl:68
└ @ FixedPolynomials poly.jl:68
┌ Warning: `Array{T, 2}(m::Int, n::Int) where T` is deprecated, use `Array{T, 2}(undef, m, n)` instead.
│   caller = _coefficients_exponents at poly.jl:67 [inlined]
└ @ Core poly.jl:67
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(undef, m)` instead.
│   caller = _coefficients_exponents at poly.jl:68 [inlined]
└ @ Core poly.jl:68
┌ Warning: `Array{T, 2}(m::Int, n::Int) where T` is deprecated, use `Array{T, 2}(undef, m, n)` instead.
│   caller = _coefficients_exponents at poly.jl:67 [inlined]
└ @ Core poly.jl:67
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(undef, m)` instead.
│   caller = _coefficients_exponents at poly.jl:68 [inlined]
└ @ Core poly.jl:68
┌ Warning: `Array{T, 2}(m::Int, n::Int) where T` is deprecated, use `Array{T, 2}(undef, m, n)` instead.
│   caller = _coefficients_exponents at poly.jl:67 [inlined]
└ @ Core poly.jl:67
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(undef, m)` instead.
│   caller = _coefficients_exponents at poly.jl:68 [inlined]
└ @ Core poly.jl:68
┌ Warning: `Array{T, 2}(m::Int, n::Int) where T` is deprecated, use `Array{T, 2}(undef, m, n)` instead.
│   caller = _coefficients_exponents at poly.jl:67 [inlined]
└ @ Core poly.jl:67
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(undef, m)` instead.
│   caller = _coefficients_exponents at poly.jl:68 [inlined]
└ @ Core poly.jl:68
┌ Warning: `Array{T, 2}(m::Int, n::Int) where T` is deprecated, use `Array{T, 2}(undef, m, n)` instead.
│   caller = Polynomial(::DynamicPolynomials.Polynomial{true,Complex{Float64}}, ::Array{DynamicPolynomials.PolyVar{true},1}, ::Bool) at poly.jl:67
└ @ FixedPolynomials poly.jl:67
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(undef, m)` instead.
│   caller = Polynomial(::DynamicPolynomials.Polynomial{true,Complex{Float64}}, ::Array{DynamicPolynomials.PolyVar{true},1}, ::Bool) at poly.jl:68
└ @ FixedPolynomials poly.jl:68
┌ Warning: `sum(a::AbstractArray, dims)` is deprecated, use `sum(a, dims=dims)` instead.
│   caller = ishomogenous(::Polynomial{Float64}) at poly.jl:342
└ @ FixedPolynomials poly.jl:342
┌ Warning: `sum(a::AbstractArray, dims)` is deprecated, use `sum(a, dims=dims)` instead.
│   caller = ishomogenous at poly.jl:342 [inlined]
└ @ Core poly.jl:342
┌ Warning: `sum(a::AbstractArray, dims)` is deprecated, use `sum(a, dims=dims)` instead.
│   caller = #homogenize#11(::Bool, ::Function, ::Polynomial{Float64}, ::Symbol) at poly.jl:357
└ @ FixedPolynomials poly.jl:357
┌ Warning: broadcast will default to iterating over its arguments in the future. Wrap arguments of
│ type `x::Polynomial{Float64}` with `Ref(x)` to ensure they broadcast as "scalar" elements.
│   caller = ip:0x0
└ @ Core :-1
Test Summary: | Pass  Total
poly          |   51     51
WARNING: Base.Complex128 is deprecated, use ComplexF64 instead.
  likely near /home/vagrant/.julia/v0.7/FixedPolynomials/test/config_test.jl:1
in top-level scope at /home/vagrant/.julia/v0.7/FixedPolynomials/test/config_test.jl
WARNING: Base.Complex128 is deprecated, use ComplexF64 instead.
  likely near /home/vagrant/.julia/v0.7/FixedPolynomials/test/config_test.jl:1
in top-level scope at /home/vagrant/.julia/v0.7/FixedPolynomials/test/config_test.jl
WARNING: Base.Complex128 is deprecated, use ComplexF64 instead.
  likely near /home/vagrant/.julia/v0.7/FixedPolynomials/test/config_test.jl:1
in top-level scope at /home/vagrant/.julia/v0.7/FixedPolynomials/test/config_test.jl
WARNING: Base.RowVector is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/FixedPolynomials/test/config_test.jl:1
in top-level scope at /home/vagrant/.julia/v0.7/FixedPolynomials/test/config_test.jl
WARNING: Base.RowVector is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/FixedPolynomials/test/config_test.jl:1
in top-level scope at /home/vagrant/.julia/v0.7/FixedPolynomials/test/config_test.jl
┌ Warning: `Array{T, 2}(m::Int, n::Int) where T` is deprecated, use `Array{T, 2}(undef, m, n)` instead.
│   caller = computetables(::Array{UInt16,2}) at tables.jl:27
└ @ FixedPolynomials tables.jl:27
Config: Error During Test at /home/vagrant/.julia/v0.7/FixedPolynomials/test/config_test.jl:1
  Got exception MethodError(FixedPolynomials.PolyConfig, (12.0x⁷z⁵+x²+xz+y²+3.0y, UInt16[0x0001 0x0001 0x0001 0x0002 0x0002; 0x0002 0x0002 0x0001 0x0001 0x0000; 0x0002 0x0001 0x0000 0x0001 0x0001], UInt16[0x0001 0x0002 0x0002 0x0000 0x0000; 0x0001 0x0002 0x0001 0x0002 0x0001; 0x0001 0x0002 0x0001 0x0001 0x0001], Float64), 0x0000000000006b49) outside of a @test
  MethodError: no method matching FixedPolynomials.PolyConfig(::Polynomial{Float64}, ::Array{UInt16,2}, ::Base.ReshapedArray{UInt16,2,LinearAlgebra.Adjoint{UInt16,Array{UInt16,2}},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, ::Type{Float64})
  Closest candidates are:
    FixedPolynomials.PolyConfig(::Polynomial{T}, ::Array{UInt16,2}, !Matched::Array{#s22,2} where #s22<:Integer, ::Type{S}) where {T, S} at /home/vagrant/.julia/v0.7/FixedPolynomials/src/config.jl:19
  Stacktrace:
   [1] GradientConfig(::Polynomial{Float64}, ::Type{Float64}) at /home/vagrant/.julia/v0.7/FixedPolynomials/src/config.jl:253
   [2] GradientConfig(::Polynomial{Float64}, ::Array{Float64,1}) at /home/vagrant/.julia/v0.7/FixedPolynomials/src/config.jl:248
   [3] macro expansion at /home/vagrant/.julia/v0.7/FixedPolynomials/test/config_test.jl:13 [inlined]
   [4] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v0.7/Test/src/Test.jl:1079 [inlined]
   [5] top-level scope at /home/vagrant/.julia/v0.7/FixedPolynomials/test/config_test.jl:2
   [6] include at ./boot.jl:314 [inlined]
   [7] include_relative(::Module, ::String) at ./loading.jl:1067
   [8] include(::Module, ::String) at ./sysimg.jl:29
   [9] include(::String) at ./sysimg.jl:68
   [10] top-level scope
   [11] include at ./boot.jl:314 [inlined]
   [12] include_relative(::Module, ::String) at ./loading.jl:1067
   [13] include(::Module, ::String) at ./sysimg.jl:29
   [14] exec_options(::Base.JLOptions) at ./client.jl:327
   [15] _start() at ./client.jl:457
Test Summary: | Error  Total
Config        |     1      1
ERROR: LoadError: LoadError: Some tests did not pass: 0 passed, 0 failed, 1 errored, 0 broken.
in expression starting at /home/vagrant/.julia/v0.7/FixedPolynomials/test/config_test.jl:1
in expression starting at /home/vagrant/.julia/v0.7/FixedPolynomials/test/runtests.jl:7
┌ Error: ------------------------------------------------------------
│ # Testing failed for FixedPolynomials
│   exception =
│    failed process: Process(`/home/vagrant/julia/bin/julia -Cnative -J/home/vagrant/julia/lib/julia/sys.so --compile=yes --depwarn=yes --code-coverage=none --color=no --compiled-modules=yes --check-bounds=yes --warn-overwrite=yes --startup-file=yes /home/vagrant/.julia/v0.7/FixedPolynomials/test/runtests.jl`, ProcessExited(1)) [1]
│    Stacktrace:
│     [1] error(::String, ::Base.Process, ::String, ::Int64, ::String) at ./error.jl:42
│     [2] pipeline_error(::Base.Process) at ./process.jl:712
│     [3] #run#533(::Bool, ::Function, ::Cmd) at ./process.jl:670
│     [4] run at ./process.jl:668 [inlined]
│     [5] (::getfield(Pkg.Entry, Symbol("##56#57")){Bool,String,Array{AbstractString,1}})() at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v0.7/Pkg/src/entry.jl:729
│     [6] cd(::getfield(Pkg.Entry, Symbol("##56#57")){Bool,String,Array{AbstractString,1}}, ::String) at ./file.jl:72
│     [7] #test!#55(::Bool, ::Function, ::String, ::Array{AbstractString,1}, ::Array{AbstractString,1}, ::Array{AbstractString,1}) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v0.7/Pkg/src/entry.jl:717
│     [8] (::getfield(Pkg.Entry, Symbol("#kw##test!")))(::NamedTuple{(:coverage,),Tuple{Bool}}, ::typeof(Pkg.Entry.test!), ::String, ::Array{AbstractString,1}, ::Array{AbstractString,1}, ::Array{AbstractString,1}) at ./<missing>:0
│     [9] #test#59(::Bool, ::Function, ::Array{AbstractString,1}) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v0.7/Pkg/src/entry.jl:756
│     [10] #test at ./<missing>:0 [inlined]
│     [11] #4 at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v0.7/Pkg/src/dir.jl:36 [inlined]
│     [12] cd(::getfield(Pkg.Dir, Symbol("##4#7")){Base.Iterators.Pairs{Symbol,Bool,Tuple{Symbol},NamedTuple{(:coverage,),Tuple{Bool}}},typeof(Pkg.Entry.test),Tuple{Array{AbstractString,1}}}, ::String) at ./file.jl:72
│     [13] #cd#1(::Base.Iterators.Pairs{Symbol,Bool,Tuple{Symbol},NamedTuple{(:coverage,),Tuple{Bool}}}, ::Function, ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N} where N) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v0.7/Pkg/src/dir.jl:36
│     [14] (::getfield(Pkg.Dir, Symbol("#kw##cd")))(::NamedTuple{(:coverage,),Tuple{Bool}}, ::typeof(Pkg.Dir.cd), ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N} where N) at ./<missing>:0
│     [15] #test#3(::Bool, ::Function, ::String, ::Vararg{String,N} where N) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v0.7/Pkg/src/Pkg.jl:278
│     [16] test(::String, ::Vararg{String,N} where N) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v0.7/Pkg/src/Pkg.jl:278
│     [17] top-level scope
│     [18] eval at ./boot.jl:317 [inlined]
│     [19] eval(::Module, ::Expr) at ./sysimg.jl:74
│     [20] exec_options(::Base.JLOptions) at ./client.jl:304
│     [21] _start() at ./client.jl:457
└ @ Pkg.Entry entry.jl:732
[ Info: Removing DynamicPolynomials v0.0.3
ERROR: FixedPolynomials had test errors

>>> End of log
