>>> 'Pkg.add("FixedPolynomials")' log
[ Info: Cloning cache of FixedPolynomials from https://github.com/JuliaAlgebra/FixedPolynomials.jl.git @ Base.Pkg.Cache cache.jl:43
[ Info: Installing FixedPolynomials v0.2.2 @ Base.Pkg.Entry entry.jl:543
[ Info: Installing MultivariatePolynomials v0.1.1 @ Base.Pkg.Entry entry.jl:543
[ Info: Package database updated @ Base.Pkg.Entry entry.jl:32
┌ Info: METADATA is out-of-date — you may not have the latest version of FixedPolynomials
│ Use `Pkg.update()` to get the latest versions of your packages
└ @ Base.Pkg.Entry entry.jl:74

>>> 'Pkg.test("FixedPolynomials")' log
Julia Version 0.7.0-DEV.3309
Commit b96097b66f (2018-01-07 00:26 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
      Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-135-generic #184-Ubuntu SMP Wed Oct 18 11:55:51 UTC 2017 x86_64 x86_64
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
              speed         user         nice          sys         idle          irq
       #1  3500 MHz    4607670 s        122 s     225705 s    1162389 s         38 s
       #2  3500 MHz     985659 s         75 s      89683 s    5890348 s          1 s
       
  Memory: 2.93927001953125 GB (1064.91796875 MB free)
  Uptime: 70797.0 sec
  Load Avg:  0.9619140625  0.95947265625  0.95458984375
  WORD_SIZE: 64
  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant
Packages:
  Package Directory: /home/vagrant/.julia/v0.7
  Package Status:
2 required packages:
 - FixedPolynomials              0.2.2
 - JSON                          0.16.3
3 additional packages:
 - Compat                        0.43.0
 - MultivariatePolynomials       0.1.1
 - Nullables                     0.0.2
[ Info: Computing test dependencies for FixedPolynomials... @ Base.Pkg.Entry entry.jl:713
[ Info: Installing DynamicPolynomials v0.0.2 @ Base.Pkg.Entry entry.jl:543
[ Info: Testing FixedPolynomials @ Base.Pkg.Entry entry.jl:723
WARNING: Base.Test is deprecated, run `using Test` instead.
  likely near /home/vagrant/.julia/v0.7/FixedPolynomials/test/runtests.jl:2
WARNING: importing deprecated binding Base.IntSet into DynamicPolynomials.
WARNING: Base.IntSet is deprecated, use BitSet instead.
  likely near /home/vagrant/.julia/v0.7/FixedPolynomials/test/poly_test.jl:1
WARNING: Base.IntSet is deprecated, use BitSet instead.
  likely near /home/vagrant/.julia/v0.7/FixedPolynomials/test/poly_test.jl:1
WARNING: Base.IntSet is deprecated, use BitSet instead.
  likely near /home/vagrant/.julia/v0.7/FixedPolynomials/test/poly_test.jl:1
WARNING: Base.IntSet is deprecated, use BitSet instead.
  likely near /home/vagrant/.julia/v0.7/FixedPolynomials/test/poly_test.jl:1
WARNING: Base.IntSet is deprecated, use BitSet instead.
  likely near /home/vagrant/.julia/v0.7/FixedPolynomials/test/poly_test.jl:1
WARNING: Base.IntSet is deprecated, use BitSet instead.
  likely near /home/vagrant/.julia/v0.7/FixedPolynomials/test/poly_test.jl:1
WARNING: Base.Complex128 is deprecated, use ComplexF64 instead.
  likely near /home/vagrant/.julia/v0.7/FixedPolynomials/test/poly_test.jl:1
in top-level scope at /home/vagrant/.julia/v0.7/FixedPolynomials/test/poly_test.jl
WARNING: Base.Complex128 is deprecated, use ComplexF64 instead.
  likely near /home/vagrant/.julia/v0.7/FixedPolynomials/test/poly_test.jl:1
in top-level scope at /home/vagrant/.julia/v0.7/FixedPolynomials/test/poly_test.jl
┌ Warning: `a::AbstractArray + b::Number` is deprecated, use `broadcast(+, a, b)` instead.
│   caller = insertvar(::Array{DynamicPolynomials.PolyVar{true},1}, ::DynamicPolynomials.PolyVar{true}, ::Int64) at mult.jl:14
└ @ DynamicPolynomials mult.jl:14
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = insertvar(::Array{DynamicPolynomials.PolyVar{true},1}, ::DynamicPolynomials.PolyVar{true}, ::Int64) at mult.jl:15
└ @ DynamicPolynomials mult.jl:15
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = (::getfield(DynamicPolynomials, Symbol("##43#44")){Int64,Int64,UnitRange{Int64},UnitRange{Int64},UnitRange{Int64}})(::Array{Int64,1}) at mult.jl:20
└ @ DynamicPolynomials mult.jl:20
┌ Warning: Constructors no longer fall back to `convert`. A constructor `DynamicPolynomials.Monomial{true}(::DynamicPolynomials.PolyVar{true})` should be defined instead.
│   caller = Type at mono.jl:25 [inlined]
└ @ Core mono.jl:25
WARNING: Base.IntSet is deprecated, use BitSet instead.
  likely near /home/vagrant/.julia/v0.7/FixedPolynomials/test/poly_test.jl:1
WARNING: Base.IntSet is deprecated, use BitSet instead.
  likely near /home/vagrant/.julia/v0.7/FixedPolynomials/test/poly_test.jl:1
WARNING: Base.IntSet is deprecated, use BitSet instead.
  likely near /home/vagrant/.julia/v0.7/FixedPolynomials/test/poly_test.jl:1
┌ Warning: `Array{T, 2}(m::Int, n::Int) where T` is deprecated, use `Array{T, 2}(uninitialized, m, n)` instead.
│   caller = _coefficients_exponents at poly.jl:67 [inlined]
└ @ Core poly.jl:67
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = _coefficients_exponents at poly.jl:68 [inlined]
└ @ Core poly.jl:68
┌ Warning: `findfirst(A, v)` is deprecated, use `findfirst(equalto(v), A)` instead.
│   caller = degree at monomial.jl:75 [inlined]
└ @ Core monomial.jl:75
┌ Warning: `Array{T, 2}(m::Int, n::Int) where T` is deprecated, use `Array{T, 2}(uninitialized, m, n)` instead.
│   caller = _coefficients_exponents at poly.jl:67 [inlined]
└ @ Core poly.jl:67
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = _coefficients_exponents at poly.jl:68 [inlined]
└ @ Core poly.jl:68
┌ Warning: `findfirst(A, v)` is deprecated, use `findfirst(equalto(v), A)` instead.
│   caller = degree at monomial.jl:75 [inlined]
└ @ Core monomial.jl:75
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = substitute(::Polynomial{Int64}, ::Int64, ::Float64) at poly.jl:247
└ @ FixedPolynomials poly.jl:247
┌ Warning: `Array{T, 2}(m::Int, n::Int) where T` is deprecated, use `Array{T, 2}(uninitialized, m, n)` instead.
│   caller = _coefficients_exponents(::DynamicPolynomials.PolyVar{true}, ::Array{DynamicPolynomials.PolyVar{true},1}) at poly.jl:67
└ @ FixedPolynomials poly.jl:67
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = _coefficients_exponents(::DynamicPolynomials.PolyVar{true}, ::Array{DynamicPolynomials.PolyVar{true},1}) at poly.jl:68
└ @ FixedPolynomials poly.jl:68
┌ Warning: `findfirst(A, v)` is deprecated, use `findfirst(equalto(v), A)` instead.
│   caller = degree at monomial.jl:75 [inlined]
└ @ Core monomial.jl:75
┌ Warning: `Array{T, 2}(m::Int, n::Int) where T` is deprecated, use `Array{T, 2}(uninitialized, m, n)` instead.
│   caller = _coefficients_exponents at poly.jl:67 [inlined]
└ @ Core poly.jl:67
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = _coefficients_exponents at poly.jl:68 [inlined]
└ @ Core poly.jl:68
┌ Warning: `findfirst(A, v)` is deprecated, use `findfirst(equalto(v), A)` instead.
│   caller = degree at monomial.jl:75 [inlined]
└ @ Core monomial.jl:75
┌ Warning: `Array{T, 2}(m::Int, n::Int) where T` is deprecated, use `Array{T, 2}(uninitialized, m, n)` instead.
│   caller = _coefficients_exponents at poly.jl:67 [inlined]
└ @ Core poly.jl:67
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = _coefficients_exponents at poly.jl:68 [inlined]
└ @ Core poly.jl:68
┌ Warning: `findfirst(A, v)` is deprecated, use `findfirst(equalto(v), A)` instead.
│   caller = degree at monomial.jl:75 [inlined]
└ @ Core monomial.jl:75
┌ Warning: Constructors no longer fall back to `convert`. A constructor `DynamicPolynomials.Monomial{true}(::DynamicPolynomials.PolyVar{true})` should be defined instead.
│   caller = Type at mono.jl:25 [inlined]
└ @ Core mono.jl:25
┌ Warning: `Array{T, 2}(m::Int, n::Int) where T` is deprecated, use `Array{T, 2}(uninitialized, m, n)` instead.
│   caller = _coefficients_exponents at poly.jl:67 [inlined]
└ @ Core poly.jl:67
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = _coefficients_exponents at poly.jl:68 [inlined]
└ @ Core poly.jl:68
┌ Warning: `findfirst(A, v)` is deprecated, use `findfirst(equalto(v), A)` instead.
│   caller = degree at monomial.jl:75 [inlined]
└ @ Core monomial.jl:75
┌ Warning: `Array{T, 2}(m::Int, n::Int) where T` is deprecated, use `Array{T, 2}(uninitialized, m, n)` instead.
│   caller = _coefficients_exponents at poly.jl:67 [inlined]
└ @ Core poly.jl:67
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = _coefficients_exponents at poly.jl:68 [inlined]
└ @ Core poly.jl:68
┌ Warning: `findfirst(A, v)` is deprecated, use `findfirst(equalto(v), A)` instead.
│   caller = degree at monomial.jl:75 [inlined]
└ @ Core monomial.jl:75
┌ Warning: Constructors no longer fall back to `convert`. A constructor `DynamicPolynomials.Monomial{true}(::DynamicPolynomials.PolyVar{true})` should be defined instead.
│   caller = Type at mono.jl:25 [inlined]
└ @ Core mono.jl:25
┌ Warning: `Array{T, 2}(m::Int, n::Int) where T` is deprecated, use `Array{T, 2}(uninitialized, m, n)` instead.
│   caller = _coefficients_exponents at poly.jl:67 [inlined]
└ @ Core poly.jl:67
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = _coefficients_exponents at poly.jl:68 [inlined]
└ @ Core poly.jl:68
┌ Warning: `findfirst(A, v)` is deprecated, use `findfirst(equalto(v), A)` instead.
│   caller = degree at monomial.jl:75 [inlined]
└ @ Core monomial.jl:75
┌ Warning: Constructors no longer fall back to `convert`. A constructor `DynamicPolynomials.Term{true,Int64}(::DynamicPolynomials.Monomial{true})` should be defined instead.
│   caller = +(::DynamicPolynomials.Monomial{true}, ::DynamicPolynomials.Term{true,Int64}) at operators.jl:81
└ @ DynamicPolynomials operators.jl:81
┌ Warning: Constructors no longer fall back to `convert`. A constructor `DynamicPolynomials.Term{true,Int64}(::DynamicPolynomials.PolyVar{true})` should be defined instead.
│   caller = +(::DynamicPolynomials.Polynomial{true,Int64}, ::DynamicPolynomials.PolyVar{true}) at operators.jl:80
└ @ DynamicPolynomials operators.jl:80
┌ Warning: Constructors no longer fall back to `convert`. A constructor `DynamicPolynomials.Monomial{true}(::DynamicPolynomials.PolyVar{true})` should be defined instead.
│   caller = convert(::Type{DynamicPolynomials.Term{true,Int64}}, ::DynamicPolynomials.PolyVar{true}) at term.jl:24
└ @ DynamicPolynomials term.jl:24
┌ Warning: Constructors no longer fall back to `convert`. A constructor `DynamicPolynomials.Term{true,Int64}(::DynamicPolynomials.Monomial{true})` should be defined instead.
│   caller = convert(::Type{DynamicPolynomials.Term{true,Int64}}, ::DynamicPolynomials.PolyVar{true}) at term.jl:24
└ @ DynamicPolynomials term.jl:24
┌ Warning: Constructors no longer fall back to `convert`. A constructor `DynamicPolynomials.Term{true,Int64}(::DynamicPolynomials.Monomial{true})` should be defined instead.
│   caller = Type at term.jl:10 [inlined]
└ @ Core term.jl:10
┌ Warning: Constructors no longer fall back to `convert`. A constructor `DynamicPolynomials.Monomial{true}(::DynamicPolynomials.PolyVar{true})` should be defined instead.
│   caller = DynamicPolynomials.Term{true,T} where T(::DynamicPolynomials.PolyVar{true}) at term.jl:11
└ @ DynamicPolynomials term.jl:11
┌ Warning: Constructors no longer fall back to `convert`. A constructor `DynamicPolynomials.Term{true,Int64}(::DynamicPolynomials.Monomial{true})` should be defined instead.
│   caller = DynamicPolynomials.Term{true,T} where T(::DynamicPolynomials.Monomial{true}) at term.jl:10
└ @ DynamicPolynomials term.jl:10
Test Summary: | Pass  Total
poly          |   51     51
WARNING: Base.Complex128 is deprecated, use ComplexF64 instead.
  likely near /home/vagrant/.julia/v0.7/FixedPolynomials/test/config_test.jl:1
in top-level scope at /home/vagrant/.julia/v0.7/FixedPolynomials/test/config_test.jl
WARNING: Base.Complex128 is deprecated, use ComplexF64 instead.
  likely near /home/vagrant/.julia/v0.7/FixedPolynomials/test/config_test.jl:1
in top-level scope at /home/vagrant/.julia/v0.7/FixedPolynomials/test/config_test.jl
WARNING: Base.Complex128 is deprecated, use ComplexF64 instead.
  likely near /home/vagrant/.julia/v0.7/FixedPolynomials/test/config_test.jl:1
in top-level scope at /home/vagrant/.julia/v0.7/FixedPolynomials/test/config_test.jl
┌ Warning: Constructors no longer fall back to `convert`. A constructor `DynamicPolynomials.Term{true,Int64}(::DynamicPolynomials.Monomial{true})` should be defined instead.
│   caller = +(::DynamicPolynomials.Polynomial{true,Int64}, ::DynamicPolynomials.Monomial{true}) at operators.jl:80
└ @ DynamicPolynomials operators.jl:80
┌ Warning: Constructors no longer fall back to `convert`. A constructor `DynamicPolynomials.Term{true,Int64}(::DynamicPolynomials.Monomial{true})` should be defined instead.
│   caller = Type at term.jl:10 [inlined]
└ @ Core term.jl:10
┌ Warning: `Array{T, 2}(m::Int, n::Int) where T` is deprecated, use `Array{T, 2}(uninitialized, m, n)` instead.
│   caller = computetables(::Array{UInt16,2}) at tables.jl:27
└ @ FixedPolynomials tables.jl:27
Config: Error During Test at /home/vagrant/.julia/v0.7/FixedPolynomials/test/config_test.jl:1
  Got an exception of type MethodError outside of a @test
  MethodError: no method matching FixedPolynomials.PolyConfig(::Polynomial{Float64}, ::Array{UInt16,2}, ::Base.ReshapedArray{UInt16,2,Adjoint{UInt16,Array{UInt16,2}},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, ::Type{Float64})
  Closest candidates are:
    FixedPolynomials.PolyConfig(::Polynomial{T}, ::Array{UInt16,2}, !Matched::Array{#s20,2} where #s20<:Integer, ::Type{S}) where {T, S} at /home/vagrant/.julia/v0.7/FixedPolynomials/src/config.jl:19
  Stacktrace:
   [1] GradientConfig(::Polynomial{Float64}, ::Type{Float64}) at /home/vagrant/.julia/v0.7/FixedPolynomials/src/config.jl:253
   [2] GradientConfig(::Polynomial{Float64}, ::Array{Float64,1}) at /home/vagrant/.julia/v0.7/FixedPolynomials/src/config.jl:248
   [3] macro expansion at /home/vagrant/.julia/v0.7/FixedPolynomials/test/config_test.jl:13 [inlined]
   [4] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:980 [inlined]
   [5] top-level scope at /home/vagrant/.julia/v0.7/FixedPolynomials/test/config_test.jl:2
   [6] include at ./boot.jl:295 [inlined]
   [7] include_relative(::Module, ::String) at ./loading.jl:521
   [8] include(::Module, ::String) at ./sysimg.jl:26
   [9] include(::String) at ./sysimg.jl:65
   [10] top-level scope
   [11] include at ./boot.jl:295 [inlined]
   [12] include_relative(::Module, ::String) at ./loading.jl:521
   [13] include(::Module, ::String) at ./sysimg.jl:26
   [14] process_options(::Base.JLOptions) at ./client.jl:324
   [15] _start() at ./client.jl:375
Test Summary: | Error  Total
Config        |     1      1
ERROR: LoadError: LoadError: Some tests did not pass: 0 passed, 0 failed, 1 errored, 0 broken.
in expression starting at /home/vagrant/.julia/v0.7/FixedPolynomials/test/config_test.jl:1
in expression starting at /home/vagrant/.julia/v0.7/FixedPolynomials/test/runtests.jl:7
┌ Error: ------------------------------------------------------------
│ # Testing failed for FixedPolynomials
│   exception = ErrorException("failed process: Process(`/home/vagrant/julia/bin/julia -Cnative -J/home/vagrant/julia/lib/julia/sys.so --compile=yes --depwarn=yes --code-coverage=none --color=no --compiled-modules=yes --check-bounds=yes --warn-overwrite=yes --startup-file=yes /home/vagrant/.julia/v0.7/FixedPolynomials/test/runtests.jl`, ProcessExited(1)) [1]")
└ @ Base.Pkg.Entry entry.jl:739
[ Info: Removing DynamicPolynomials v0.0.2 @ Base.Pkg.Entry entry.jl:546
ERROR: FixedPolynomials had test errors

>>> End of log
