>>> 'Pkg.add("Knet")' log
INFO: Cloning cache of Knet from https://github.com/denizyuret/Knet.jl.git
INFO: Installing AutoGrad v0.0.7
INFO: Installing Knet v0.8.3
INFO: Building Knet
WARNING: Cannot find nvcc, GPU support will not be available.

WARNING: deprecated syntax "typealias Cptr Ptr{Void}" at /home/vagrant/.julia/v0.6/Knet/src/gpu.jl:36.
Use "const Cptr = Ptr{Void}" instead.

WARNING: deprecated syntax "typealias KnetMatrix{T} KnetArray{T,2}" at /home/vagrant/.julia/v0.6/Knet/src/karray.jl:95.
Use "KnetMatrix{T} = KnetArray{T,2}" instead.

WARNING: deprecated syntax "typealias KnetVector{T} KnetArray{T,1}" at /home/vagrant/.julia/v0.6/Knet/src/karray.jl:96.
Use "KnetVector{T} = KnetArray{T,1}" instead.

WARNING: deprecated syntax "typealias KnetVecOrMat{T} Union{KnetVector{T},KnetMatrix{T}}" at /home/vagrant/.julia/v0.6/Knet/src/karray.jl:97.
Use "KnetVecOrMat{T} = Union{KnetVector{T},KnetMatrix{T}}" instead.

WARNING: deprecated syntax "typealias KorA{T} Union{KnetArray{T},Array{T}}" at /home/vagrant/.julia/v0.6/Knet/src/karray.jl:293.
Use "KorA{T} = Union{KnetArray{T},Array{T}}" instead.

WARNING: deprecated syntax "typealias AbstractUnitRange UnitRange" at /home/vagrant/.julia/v0.6/Knet/src/karray.jl:471.
Use "const AbstractUnitRange = UnitRange" instead.

WARNING: deprecated syntax "typealias Index3 Union{Real,AbstractUnitRange,Colon}" at /home/vagrant/.julia/v0.6/Knet/src/karray.jl:877.
Use "const Index3 = Union{Real,AbstractUnitRange,Colon}" instead.
WARNING: Base.linearindexing is deprecated, use Base.IndexStyle instead.
  likely near /home/vagrant/.julia/v0.6/Knet/src/karray.jl:163
WARNING: Base.linearindexing is deprecated, use Base.IndexStyle instead.
  likely near /home/vagrant/.julia/v0.6/Knet/src/karray.jl:163

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "function .+(...)".
Use "function Base.broadcast(::typeof(+), ...)" instead.

WARNING: deprecated syntax "function .+(...)".
Use "function Base.broadcast(::typeof(+), ...)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "function .+(...)".
Use "function Base.broadcast(::typeof(+), ...)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "function .+(...)".
Use "function Base.broadcast(::typeof(+), ...)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "function .+(...)".
Use "function Base.broadcast(::typeof(+), ...)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "function .-(...)".
Use "function Base.broadcast(::typeof(-), ...)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "function .-(...)".
Use "function Base.broadcast(::typeof(-), ...)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "function .-(...)".
Use "function Base.broadcast(::typeof(-), ...)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "function .-(...)".
Use "function Base.broadcast(::typeof(-), ...)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "function .*(...)".
Use "function Base.broadcast(::typeof(*), ...)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "function .*(...)".
Use "function Base.broadcast(::typeof(*), ...)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "function .*(...)".
Use "function Base.broadcast(::typeof(*), ...)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "function .*(...)".
Use "function Base.broadcast(::typeof(*), ...)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "function ./(...)".
Use "function Base.broadcast(::typeof(/), ...)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "function ./(...)".
Use "function Base.broadcast(::typeof(/), ...)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "function ./(...)".
Use "function Base.broadcast(::typeof(/), ...)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "function ./(...)".
Use "function Base.broadcast(::typeof(/), ...)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "function .^(...)".
Use "function Base.broadcast(::typeof(^), ...)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "function .^(...)".
Use "function Base.broadcast(::typeof(^), ...)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "function .^(...)".
Use "function Base.broadcast(::typeof(^), ...)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "function .^(...)".
Use "function Base.broadcast(::typeof(^), ...)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "function .==(...)".
Use "function Base.broadcast(::typeof(==), ...)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "function .==(...)".
Use "function Base.broadcast(::typeof(==), ...)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "function .==(...)".
Use "function Base.broadcast(::typeof(==), ...)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "function .==(...)".
Use "function Base.broadcast(::typeof(==), ...)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "function .!=(...)".
Use "function Base.broadcast(::typeof(!=), ...)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "function .!=(...)".
Use "function Base.broadcast(::typeof(!=), ...)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "function .!=(...)".
Use "function Base.broadcast(::typeof(!=), ...)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "function .!=(...)".
Use "function Base.broadcast(::typeof(!=), ...)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "function .>(...)".
Use "function Base.broadcast(::typeof(>), ...)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "function .>(...)".
Use "function Base.broadcast(::typeof(>), ...)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "function .>(...)".
Use "function Base.broadcast(::typeof(>), ...)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "function .>(...)".
Use "function Base.broadcast(::typeof(>), ...)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "function .>=(...)".
Use "function Base.broadcast(::typeof(>=), ...)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "function .>=(...)".
Use "function Base.broadcast(::typeof(>=), ...)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "function .>=(...)".
Use "function Base.broadcast(::typeof(>=), ...)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "function .>=(...)".
Use "function Base.broadcast(::typeof(>=), ...)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "function .<(...)".
Use "function Base.broadcast(::typeof(<), ...)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "function .<(...)".
Use "function Base.broadcast(::typeof(<), ...)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "function .<(...)".
Use "function Base.broadcast(::typeof(<), ...)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "function .<(...)".
Use "function Base.broadcast(::typeof(<), ...)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "function .<=(...)".
Use "function Base.broadcast(::typeof(<=), ...)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "function .<=(...)".
Use "function Base.broadcast(::typeof(<=), ...)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "function .<=(...)".
Use "function Base.broadcast(::typeof(<=), ...)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "function .<=(...)".
Use "function Base.broadcast(::typeof(<=), ...)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "function .^(...)".
Use "function Base.broadcast(::typeof(^), ...)" instead.

WARNING: deprecated syntax "function .+(...)".
Use "function Base.broadcast(::typeof(+), ...)" instead.

WARNING: deprecated syntax "function .+(...)".
Use "function Base.broadcast(::typeof(+), ...)" instead.

WARNING: deprecated syntax "function .-(...)".
Use "function Base.broadcast(::typeof(-), ...)" instead.

WARNING: deprecated syntax "function .-(...)".
Use "function Base.broadcast(::typeof(-), ...)" instead.

WARNING: deprecated syntax "function .*(...)".
Use "function Base.broadcast(::typeof(*), ...)" instead.

WARNING: deprecated syntax "function .*(...)".
Use "function Base.broadcast(::typeof(*), ...)" instead.

WARNING: deprecated syntax "function ./(...)".
Use "function Base.broadcast(::typeof(/), ...)" instead.

WARNING: deprecated syntax "function ./(...)".
Use "function Base.broadcast(::typeof(/), ...)" instead.

WARNING: deprecated syntax "function .^(...)".
Use "function Base.broadcast(::typeof(^), ...)" instead.

WARNING: deprecated syntax "function .^(...)".
Use "function Base.broadcast(::typeof(^), ...)" instead.

WARNING: deprecated syntax "function .==(...)".
Use "function Base.broadcast(::typeof(==), ...)" instead.

WARNING: deprecated syntax "function .==(...)".
Use "function Base.broadcast(::typeof(==), ...)" instead.

WARNING: deprecated syntax "function .!=(...)".
Use "function Base.broadcast(::typeof(!=), ...)" instead.

WARNING: deprecated syntax "function .!=(...)".
Use "function Base.broadcast(::typeof(!=), ...)" instead.

WARNING: deprecated syntax "function .>(...)".
Use "function Base.broadcast(::typeof(>), ...)" instead.

WARNING: deprecated syntax "function .>(...)".
Use "function Base.broadcast(::typeof(>), ...)" instead.

WARNING: deprecated syntax "function .>=(...)".
Use "function Base.broadcast(::typeof(>=), ...)" instead.

WARNING: deprecated syntax "function .>=(...)".
Use "function Base.broadcast(::typeof(>=), ...)" instead.

WARNING: deprecated syntax "function .<(...)".
Use "function Base.broadcast(::typeof(<), ...)" instead.

WARNING: deprecated syntax "function .<(...)".
Use "function Base.broadcast(::typeof(<), ...)" instead.

WARNING: deprecated syntax "function .<=(...)".
Use "function Base.broadcast(::typeof(<=), ...)" instead.

WARNING: deprecated syntax "function .<=(...)".
Use "function Base.broadcast(::typeof(<=), ...)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.

WARNING: deprecated syntax "Expr(:ccall)".
Use "Expr(:call, :ccall)" instead.
INFO: Package database updated
INFO: METADATA is out-of-date — you may not have the latest version of Knet
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("Knet")' log
Julia Version 0.6.0-rc3.0
Commit ad290e9 (2017-06-07 11:53 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-119-generic #166-Ubuntu SMP Wed May 3 12:18:55 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1224.62109375 MB free)
Uptime: 79854.0 sec
Load Avg:  0.99560546875  0.9853515625  0.8828125
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3495 MHz    5088747 s       6586 s     240824 s    1432332 s         56 s
#2  3495 MHz    1158577 s         68 s     158664 s    6497835 s          1 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.6
2 required packages:
 - JSON                          0.12.0
 - Knet                          0.8.3
3 additional packages:
 - AutoGrad                      0.0.7
 - Compat                        0.26.0
 - tmp                           0.0.0-             non-repo (unregistered)
INFO: Computing test dependencies for Knet...
INFO: Installing BaseTestNext v0.2.2
INFO: Installing Combinatorics v0.4.0
INFO: Installing Iterators v0.3.1
INFO: Installing Polynomials v0.1.5
INFO: Testing Knet
Test Summary: | Pass  Total
kptr          |    1      1
  1.486074 seconds (1.18 M allocations: 66.297 MiB, 9.03% gc time)
  0.872067 seconds (595.98 k allocations: 34.275 MiB, 17.47% gc time)
WARNING: abs{T <: Number}(x::AbstractArray{T}) is deprecated, use abs.(x) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] abs(::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}) at ./deprecated.jl:57
 [3] bilinear(::Type{T} where T, ::Int64, ::Int64, ::Int64, ::Int64) at /home/vagrant/.julia/v0.6/Knet/src/distributions.jl:79
 [4] macro expansion at /home/vagrant/.julia/v0.6/Knet/test/distributions.jl:6 [inlined]
 [5] macro expansion at ./test.jl:856 [inlined]
 [6] anonymous at ./<missing>:?
 [7] include_from_node1(::String) at ./loading.jl:569
 [8] include(::String) at ./sysimg.jl:14
 [9] include_from_node1(::String) at ./loading.jl:569
 [10] include(::String) at ./sysimg.jl:14
 [11] process_options(::Base.JLOptions) at ./client.jl:305
 [12] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/Knet/test/distributions.jl, in expression starting on line 3
Test Summary: | Pass  Total
distributions |    3      3
  1.517729 seconds (888.10 k allocations: 47.270 MiB, 1.18% gc time)
WARNING: Array{T}(::Type{T}, m::Int) is deprecated, use Array{T}(m) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] Array(::Type{AutoGrad.Node}, ::Int64) at ./deprecated.jl:57
 [3] #Rec#12(::Function, ::Tuple{}, ::Array{Any,1}, ::Type{T} where T, ::Array{Float64,1}, ::Array{AutoGrad.Node,1}) at /home/vagrant/.julia/v0.6/AutoGrad/src/core.jl:330
 [4] forward_pass(::Function, ::Tuple{Array{Float64,1}}, ::Array{Any,1}, ::Int64) at /home/vagrant/.julia/v0.6/AutoGrad/src/core.jl:83
 [5] (::AutoGrad.##gradfun#4#6{#rosenmulti,Int64})(::Array{Any,1}, ::Function, ::Array{Float64,1}, ::Vararg{Array{Float64,1},N} where N) at /home/vagrant/.julia/v0.6/AutoGrad/src/core.jl:57
 [6] (::AutoGrad.#gradfun#5)(::Array{Float64,1}, ::Vararg{Array{Float64,1},N} where N) at /home/vagrant/.julia/v0.6/AutoGrad/src/core.jl:57
 [7] #rosenopt#21(::Bool, ::Float64, ::Float64, ::Int64, ::Function, ::Array{Float64,1}, ::Knet.Sgd) at /home/vagrant/.julia/v0.6/Knet/test/update.jl:32
 [8] macro expansion at /home/vagrant/.julia/v0.6/Knet/test/update.jl:50 [inlined]
 [9] macro expansion at ./test.jl:856 [inlined]
 [10] anonymous at ./<missing>:?
 [11] include_from_node1(::String) at ./loading.jl:569
 [12] include(::String) at ./sysimg.jl:14
 [13] include_from_node1(::String) at ./loading.jl:569
 [14] include(::String) at ./sysimg.jl:14
 [15] process_options(::Base.JLOptions) at ./client.jl:305
 [16] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/Knet/test/update.jl, in expression starting on line 47
WARNING: Array{T}(::Type{T}, m::Int) is deprecated, use Array{T}(m) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] Array(::Type{AutoGrad.Node}, ::Int64) at ./deprecated.jl:57
 [3] Type at /home/vagrant/.julia/v0.6/AutoGrad/src/core.jl:312 [inlined]
 [4] #Rec#12(::Function, ::Tuple{}, ::Array{Any,1}, ::Type{T} where T, ::Array{Float64,1}, ::Array{AutoGrad.Node,1}) at /home/vagrant/.julia/v0.6/AutoGrad/src/core.jl:331
 [5] forward_pass(::Function, ::Tuple{Array{Float64,1}}, ::Array{Any,1}, ::Int64) at /home/vagrant/.julia/v0.6/AutoGrad/src/core.jl:83
 [6] (::AutoGrad.##gradfun#4#6{#rosenmulti,Int64})(::Array{Any,1}, ::Function, ::Array{Float64,1}, ::Vararg{Array{Float64,1},N} where N) at /home/vagrant/.julia/v0.6/AutoGrad/src/core.jl:57
 [7] (::AutoGrad.#gradfun#5)(::Array{Float64,1}, ::Vararg{Array{Float64,1},N} where N) at /home/vagrant/.julia/v0.6/AutoGrad/src/core.jl:57
 [8] #rosenopt#21(::Bool, ::Float64, ::Float64, ::Int64, ::Function, ::Array{Float64,1}, ::Knet.Sgd) at /home/vagrant/.julia/v0.6/Knet/test/update.jl:32
 [9] macro expansion at /home/vagrant/.julia/v0.6/Knet/test/update.jl:50 [inlined]
 [10] macro expansion at ./test.jl:856 [inlined]
 [11] anonymous at ./<missing>:?
 [12] include_from_node1(::String) at ./loading.jl:569
 [13] include(::String) at ./sysimg.jl:14
 [14] include_from_node1(::String) at ./loading.jl:569
 [15] include(::String) at ./sysimg.jl:14
 [16] process_options(::Base.JLOptions) at ./client.jl:305
 [17] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/Knet/test/update.jl, in expression starting on line 47
update!: Error During Test
  Test threw an exception of type DimensionMismatch
  Expression: rosenopt(copy(w), Sgd(lr=0.0005))
  DimensionMismatch("Cannot multiply two vectors")
  Stacktrace:
   [1] *(::Array{Float64,1}, ::Array{Float64,1}) at ./linalg/rowvector.jl:184
   [2] (::AutoGrad.##rfun#7#10{Base.#*})(::Array{Any,1}, ::Function, ::AutoGrad.Rec{Array{Float64,1}}, ::Vararg{AutoGrad.Rec{Array{Float64,1}},N} where N) at /home/vagrant/.julia/v0.6/AutoGrad/src/core.jl:123
   [3] power_by_squaring(::AutoGrad.Rec{Array{Float64,1}}, ::Int64) at ./intfuncs.jl:166
   [4] (::##15#18)(::AutoGrad.Rec{Array{Float64,1}}) at ./<missing>:0
   [5] broadcast(::Function, ::AutoGrad.Rec{Array{Float64,1}}) at ./broadcast.jl:434
   [6] rosenbrock(::AutoGrad.Rec{Array{Float64,1}}) at /home/vagrant/.julia/v0.6/Knet/test/update.jl:8
   [7] rosenmulti(::AutoGrad.Rec{Array{Float64,1}}) at /home/vagrant/.julia/v0.6/Knet/test/update.jl:13
   [8] forward_pass(::Function, ::Tuple{Array{Float64,1}}, ::Array{Any,1}, ::Int64) at /home/vagrant/.julia/v0.6/AutoGrad/src/core.jl:88
   [9] (::AutoGrad.##gradfun#4#6{#rosenmulti,Int64})(::Array{Any,1}, ::Function, ::Array{Float64,1}, ::Vararg{Array{Float64,1},N} where N) at /home/vagrant/.julia/v0.6/AutoGrad/src/core.jl:57
   [10] (::AutoGrad.#gradfun#5)(::Array{Float64,1}, ::Vararg{Array{Float64,1},N} where N) at /home/vagrant/.julia/v0.6/AutoGrad/src/core.jl:57
   [11] #rosenopt#21(::Bool, ::Float64, ::Float64, ::Int64, ::Function, ::Array{Float64,1}, ::Knet.Sgd) at /home/vagrant/.julia/v0.6/Knet/test/update.jl:32
   [12] macro expansion at /home/vagrant/.julia/v0.6/Knet/test/update.jl:50 [inlined]
   [13] macro expansion at ./test.jl:856 [inlined]
   [14] anonymous at ./<missing>:?
update!: Error During Test
  Test threw an exception of type DimensionMismatch
  Expression: rosenopt(copy(w), Momentum(lr=0.00025, gamma=0.95))
  DimensionMismatch("Cannot multiply two vectors")
  Stacktrace:
   [1] *(::Array{Float64,1}, ::Array{Float64,1}) at ./linalg/rowvector.jl:184
   [2] (::AutoGrad.##rfun#7#10{Base.#*})(::Array{Any,1}, ::Function, ::AutoGrad.Rec{Array{Float64,1}}, ::Vararg{AutoGrad.Rec{Array{Float64,1}},N} where N) at /home/vagrant/.julia/v0.6/AutoGrad/src/core.jl:123
   [3] power_by_squaring(::AutoGrad.Rec{Array{Float64,1}}, ::Int64) at ./intfuncs.jl:166
   [4] (::##15#18)(::AutoGrad.Rec{Array{Float64,1}}) at ./<missing>:0
   [5] broadcast(::Function, ::AutoGrad.Rec{Array{Float64,1}}) at ./broadcast.jl:434
   [6] rosenbrock(::AutoGrad.Rec{Array{Float64,1}}) at /home/vagrant/.julia/v0.6/Knet/test/update.jl:8
   [7] rosenmulti(::AutoGrad.Rec{Array{Float64,1}}) at /home/vagrant/.julia/v0.6/Knet/test/update.jl:13
   [8] forward_pass(::Function, ::Tuple{Array{Float64,1}}, ::Array{Any,1}, ::Int64) at /home/vagrant/.julia/v0.6/AutoGrad/src/core.jl:88
   [9] (::AutoGrad.##gradfun#4#6{#rosenmulti,Int64})(::Array{Any,1}, ::Function, ::Array{Float64,1}, ::Vararg{Array{Float64,1},N} where N) at /home/vagrant/.julia/v0.6/AutoGrad/src/core.jl:57
   [10] (::AutoGrad.#gradfun#5)(::Array{Float64,1}, ::Vararg{Array{Float64,1},N} where N) at /home/vagrant/.julia/v0.6/AutoGrad/src/core.jl:57
   [11] #rosenopt#21(::Bool, ::Float64, ::Float64, ::Int64, ::Function, ::Array{Float64,1}, ::Knet.Momentum) at /home/vagrant/.julia/v0.6/Knet/test/update.jl:32
   [12] macro expansion at /home/vagrant/.julia/v0.6/Knet/test/update.jl:51 [inlined]
   [13] macro expansion at ./test.jl:856 [inlined]
   [14] anonymous at ./<missing>:?
update!: Error During Test
  Test threw an exception of type DimensionMismatch
  Expression: rosenopt(copy(w), Adam(lr=0.005, beta1=0.9, beta2=0.95, eps=1.0e-8))
  DimensionMismatch("Cannot multiply two vectors")
  Stacktrace:
   [1] *(::Array{Float64,1}, ::Array{Float64,1}) at ./linalg/rowvector.jl:184
   [2] (::AutoGrad.##rfun#7#10{Base.#*})(::Array{Any,1}, ::Function, ::AutoGrad.Rec{Array{Float64,1}}, ::Vararg{AutoGrad.Rec{Array{Float64,1}},N} where N) at /home/vagrant/.julia/v0.6/AutoGrad/src/core.jl:123
   [3] power_by_squaring(::AutoGrad.Rec{Array{Float64,1}}, ::Int64) at ./intfuncs.jl:166
   [4] (::##15#18)(::AutoGrad.Rec{Array{Float64,1}}) at ./<missing>:0
   [5] broadcast(::Function, ::AutoGrad.Rec{Array{Float64,1}}) at ./broadcast.jl:434
   [6] rosenbrock(::AutoGrad.Rec{Array{Float64,1}}) at /home/vagrant/.julia/v0.6/Knet/test/update.jl:8
   [7] rosenmulti(::AutoGrad.Rec{Array{Float64,1}}) at /home/vagrant/.julia/v0.6/Knet/test/update.jl:13
   [8] forward_pass(::Function, ::Tuple{Array{Float64,1}}, ::Array{Any,1}, ::Int64) at /home/vagrant/.julia/v0.6/AutoGrad/src/core.jl:88
   [9] (::AutoGrad.##gradfun#4#6{#rosenmulti,Int64})(::Array{Any,1}, ::Function, ::Array{Float64,1}, ::Vararg{Array{Float64,1},N} where N) at /home/vagrant/.julia/v0.6/AutoGrad/src/core.jl:57
   [10] (::AutoGrad.#gradfun#5)(::Array{Float64,1}, ::Vararg{Array{Float64,1},N} where N) at /home/vagrant/.julia/v0.6/AutoGrad/src/core.jl:57
   [11] #rosenopt#21(::Bool, ::Float64, ::Float64, ::Int64, ::Function, ::Array{Float64,1}, ::Knet.Adam) at /home/vagrant/.julia/v0.6/Knet/test/update.jl:32
   [12] macro expansion at /home/vagrant/.julia/v0.6/Knet/test/update.jl:52 [inlined]
   [13] macro expansion at ./test.jl:856 [inlined]
   [14] anonymous at ./<missing>:?
update!: Error During Test
  Test threw an exception of type DimensionMismatch
  Expression: rosenopt(copy(w), Adagrad(lr=0.35, eps=1.0e-6))
  DimensionMismatch("Cannot multiply two vectors")
  Stacktrace:
   [1] *(::Array{Float64,1}, ::Array{Float64,1}) at ./linalg/rowvector.jl:184
   [2] (::AutoGrad.##rfun#7#10{Base.#*})(::Array{Any,1}, ::Function, ::AutoGrad.Rec{Array{Float64,1}}, ::Vararg{AutoGrad.Rec{Array{Float64,1}},N} where N) at /home/vagrant/.julia/v0.6/AutoGrad/src/core.jl:123
   [3] power_by_squaring(::AutoGrad.Rec{Array{Float64,1}}, ::Int64) at ./intfuncs.jl:166
   [4] (::##15#18)(::AutoGrad.Rec{Array{Float64,1}}) at ./<missing>:0
   [5] broadcast(::Function, ::AutoGrad.Rec{Array{Float64,1}}) at ./broadcast.jl:434
   [6] rosenbrock(::AutoGrad.Rec{Array{Float64,1}}) at /home/vagrant/.julia/v0.6/Knet/test/update.jl:8
   [7] rosenmulti(::AutoGrad.Rec{Array{Float64,1}}) at /home/vagrant/.julia/v0.6/Knet/test/update.jl:13
   [8] forward_pass(::Function, ::Tuple{Array{Float64,1}}, ::Array{Any,1}, ::Int64) at /home/vagrant/.julia/v0.6/AutoGrad/src/core.jl:88
   [9] (::AutoGrad.##gradfun#4#6{#rosenmulti,Int64})(::Array{Any,1}, ::Function, ::Array{Float64,1}, ::Vararg{Array{Float64,1},N} where N) at /home/vagrant/.julia/v0.6/AutoGrad/src/core.jl:57
   [10] (::AutoGrad.#gradfun#5)(::Array{Float64,1}, ::Vararg{Array{Float64,1},N} where N) at /home/vagrant/.julia/v0.6/AutoGrad/src/core.jl:57
   [11] #rosenopt#21(::Bool, ::Float64, ::Float64, ::Int64, ::Function, ::Array{Float64,1}, ::Knet.Adagrad) at /home/vagrant/.julia/v0.6/Knet/test/update.jl:32
   [12] macro expansion at /home/vagrant/.julia/v0.6/Knet/test/update.jl:53 [inlined]
   [13] macro expansion at ./test.jl:856 [inlined]
   [14] anonymous at ./<missing>:?
update!: Error During Test
  Test threw an exception of type DimensionMismatch
  Expression: rosenopt(copy(w), Adadelta(lr=0.01, rho=0.5, eps=1.0e-6))
  DimensionMismatch("Cannot multiply two vectors")
  Stacktrace:
   [1] *(::Array{Float64,1}, ::Array{Float64,1}) at ./linalg/rowvector.jl:184
   [2] (::AutoGrad.##rfun#7#10{Base.#*})(::Array{Any,1}, ::Function, ::AutoGrad.Rec{Array{Float64,1}}, ::Vararg{AutoGrad.Rec{Array{Float64,1}},N} where N) at /home/vagrant/.julia/v0.6/AutoGrad/src/core.jl:123
   [3] power_by_squaring(::AutoGrad.Rec{Array{Float64,1}}, ::Int64) at ./intfuncs.jl:166
   [4] (::##15#18)(::AutoGrad.Rec{Array{Float64,1}}) at ./<missing>:0
   [5] broadcast(::Function, ::AutoGrad.Rec{Array{Float64,1}}) at ./broadcast.jl:434
   [6] rosenbrock(::AutoGrad.Rec{Array{Float64,1}}) at /home/vagrant/.julia/v0.6/Knet/test/update.jl:8
   [7] rosenmulti(::AutoGrad.Rec{Array{Float64,1}}) at /home/vagrant/.julia/v0.6/Knet/test/update.jl:13
   [8] forward_pass(::Function, ::Tuple{Array{Float64,1}}, ::Array{Any,1}, ::Int64) at /home/vagrant/.julia/v0.6/AutoGrad/src/core.jl:88
   [9] (::AutoGrad.##gradfun#4#6{#rosenmulti,Int64})(::Array{Any,1}, ::Function, ::Array{Float64,1}, ::Vararg{Array{Float64,1},N} where N) at /home/vagrant/.julia/v0.6/AutoGrad/src/core.jl:57
   [10] (::AutoGrad.#gradfun#5)(::Array{Float64,1}, ::Vararg{Array{Float64,1},N} where N) at /home/vagrant/.julia/v0.6/AutoGrad/src/core.jl:57
   [11] #rosenopt#21(::Bool, ::Float64, ::Float64, ::Int64, ::Function, ::Array{Float64,1}, ::Knet.Adadelta) at /home/vagrant/.julia/v0.6/Knet/test/update.jl:32
   [12] macro expansion at /home/vagrant/.julia/v0.6/Knet/test/update.jl:54 [inlined]
   [13] macro expansion at ./test.jl:856 [inlined]
   [14] anonymous at ./<missing>:?
update!: Error During Test
  Test threw an exception of type DimensionMismatch
  Expression: rosenopt(copy(w), Rmsprop(lr=0.0005, rho=0.9, eps=1.0e-6))
  DimensionMismatch("Cannot multiply two vectors")
  Stacktrace:
   [1] *(::Array{Float64,1}, ::Array{Float64,1}) at ./linalg/rowvector.jl:184
   [2] (::AutoGrad.##rfun#7#10{Base.#*})(::Array{Any,1}, ::Function, ::AutoGrad.Rec{Array{Float64,1}}, ::Vararg{AutoGrad.Rec{Array{Float64,1}},N} where N) at /home/vagrant/.julia/v0.6/AutoGrad/src/core.jl:123
   [3] power_by_squaring(::AutoGrad.Rec{Array{Float64,1}}, ::Int64) at ./intfuncs.jl:166
   [4] (::##15#18)(::AutoGrad.Rec{Array{Float64,1}}) at ./<missing>:0
   [5] broadcast(::Function, ::AutoGrad.Rec{Array{Float64,1}}) at ./broadcast.jl:434
   [6] rosenbrock(::AutoGrad.Rec{Array{Float64,1}}) at /home/vagrant/.julia/v0.6/Knet/test/update.jl:8
   [7] rosenmulti(::AutoGrad.Rec{Array{Float64,1}}) at /home/vagrant/.julia/v0.6/Knet/test/update.jl:13
   [8] forward_pass(::Function, ::Tuple{Array{Float64,1}}, ::Array{Any,1}, ::Int64) at /home/vagrant/.julia/v0.6/AutoGrad/src/core.jl:88
   [9] (::AutoGrad.##gradfun#4#6{#rosenmulti,Int64})(::Array{Any,1}, ::Function, ::Array{Float64,1}, ::Vararg{Array{Float64,1},N} where N) at /home/vagrant/.julia/v0.6/AutoGrad/src/core.jl:57
   [10] (::AutoGrad.#gradfun#5)(::Array{Float64,1}, ::Vararg{Array{Float64,1},N} where N) at /home/vagrant/.julia/v0.6/AutoGrad/src/core.jl:57
   [11] #rosenopt#21(::Bool, ::Float64, ::Float64, ::Int64, ::Function, ::Array{Float64,1}, ::Knet.Rmsprop) at /home/vagrant/.julia/v0.6/Knet/test/update.jl:32
   [12] macro expansion at /home/vagrant/.julia/v0.6/Knet/test/update.jl:55 [inlined]
   [13] macro expansion at ./test.jl:856 [inlined]
   [14] anonymous at ./<missing>:?
update!: Error During Test
  Test threw an exception of type DimensionMismatch
  Expression: rosenopt((copy(w), copy(v)), (adam(), adam()))
  DimensionMismatch("Cannot multiply two vectors")
  Stacktrace:
   [1] *(::Array{Float64,1}, ::Array{Float64,1}) at ./linalg/rowvector.jl:184
   [2] (::AutoGrad.##rfun#7#10{Base.#*})(::Array{Any,1}, ::Function, ::AutoGrad.Rec{Array{Float64,1}}, ::Vararg{AutoGrad.Rec{Array{Float64,1}},N} where N) at /home/vagrant/.julia/v0.6/AutoGrad/src/core.jl:123
   [3] power_by_squaring(::AutoGrad.Rec{Array{Float64,1}}, ::Int64) at ./intfuncs.jl:166
   [4] (::##15#18)(::AutoGrad.Rec{Array{Float64,1}}) at ./<missing>:0
   [5] broadcast(::Function, ::AutoGrad.Rec{Array{Float64,1}}) at ./broadcast.jl:434
   [6] rosenbrock(::AutoGrad.Rec{Array{Float64,1}}) at /home/vagrant/.julia/v0.6/Knet/test/update.jl:8
   [7] rosenmulti(::AutoGrad.Rec{Tuple{Array{Float64,1},Array{Float64,1}}}) at /home/vagrant/.julia/v0.6/Knet/test/update.jl:17
   [8] forward_pass(::Function, ::Tuple{Tuple{Array{Float64,1},Array{Float64,1}}}, ::Array{Any,1}, ::Int64) at /home/vagrant/.julia/v0.6/AutoGrad/src/core.jl:88
   [9] (::AutoGrad.##gradfun#4#6{#rosenmulti,Int64})(::Array{Any,1}, ::Function, ::Tuple{Array{Float64,1},Array{Float64,1}}, ::Vararg{Tuple{Array{Float64,1},Array{Float64,1}},N} where N) at /home/vagrant/.julia/v0.6/AutoGrad/src/core.jl:57
   [10] (::AutoGrad.#gradfun#5)(::Tuple{Array{Float64,1},Array{Float64,1}}, ::Vararg{Tuple{Array{Float64,1},Array{Float64,1}},N} where N) at /home/vagrant/.julia/v0.6/AutoGrad/src/core.jl:57
   [11] #rosenopt#21(::Bool, ::Float64, ::Float64, ::Int64, ::Function, ::Tuple{Array{Float64,1},Array{Float64,1}}, ::Tuple{Knet.Adam,Knet.Adam}) at /home/vagrant/.julia/v0.6/Knet/test/update.jl:32
   [12] macro expansion at /home/vagrant/.julia/v0.6/Knet/test/update.jl:58 [inlined]
   [13] macro expansion at ./test.jl:856 [inlined]
   [14] anonymous at ./<missing>:?
update!: Error During Test
  Test threw an exception of type DimensionMismatch
  Expression: rosenopt(Any[copy(w), copy(v)], [adam(), adam()])
  DimensionMismatch("Cannot multiply two vectors")
  Stacktrace:
   [1] *(::Array{Float64,1}, ::Array{Float64,1}) at ./linalg/rowvector.jl:184
   [2] (::AutoGrad.##rfun#7#10{Base.#*})(::Array{Any,1}, ::Function, ::AutoGrad.Rec{Array{Float64,1}}, ::Vararg{AutoGrad.Rec{Array{Float64,1}},N} where N) at /home/vagrant/.julia/v0.6/AutoGrad/src/core.jl:123
   [3] power_by_squaring(::AutoGrad.Rec{Array{Float64,1}}, ::Int64) at ./intfuncs.jl:166
   [4] (::##15#18)(::AutoGrad.Rec{Array{Float64,1}}) at ./<missing>:0
   [5] broadcast(::Function, ::AutoGrad.Rec{Array{Float64,1}}) at ./broadcast.jl:434
   [6] rosenbrock(::AutoGrad.Rec{Array{Float64,1}}) at /home/vagrant/.julia/v0.6/Knet/test/update.jl:8
   [7] rosenmulti(::AutoGrad.Rec{Array{Any,1}}) at /home/vagrant/.julia/v0.6/Knet/test/update.jl:17
   [8] forward_pass(::Function, ::Tuple{Array{Any,1}}, ::Array{Any,1}, ::Int64) at /home/vagrant/.julia/v0.6/AutoGrad/src/core.jl:88
   [9] (::AutoGrad.##gradfun#4#6{#rosenmulti,Int64})(::Array{Any,1}, ::Function, ::Array{Any,1}, ::Vararg{Array{Any,1},N} where N) at /home/vagrant/.julia/v0.6/AutoGrad/src/core.jl:57
   [10] (::AutoGrad.#gradfun#5)(::Array{Any,1}, ::Vararg{Array{Any,1},N} where N) at /home/vagrant/.julia/v0.6/AutoGrad/src/core.jl:57
   [11] #rosenopt#21(::Bool, ::Float64, ::Float64, ::Int64, ::Function, ::Array{Any,1}, ::Array{Knet.Adam,1}) at /home/vagrant/.julia/v0.6/Knet/test/update.jl:32
   [12] macro expansion at /home/vagrant/.julia/v0.6/Knet/test/update.jl:59 [inlined]
   [13] macro expansion at ./test.jl:856 [inlined]
   [14] anonymous at ./<missing>:?
update!: Error During Test
  Test threw an exception of type DimensionMismatch
  Expression: rosenopt(Dict(:a => copy(w), :b => copy(v)), Dict(:a => adam(), :b => adam()))
  DimensionMismatch("Cannot multiply two vectors")
  Stacktrace:
   [1] *(::Array{Float64,1}, ::Array{Float64,1}) at ./linalg/rowvector.jl:184
   [2] (::AutoGrad.##rfun#7#10{Base.#*})(::Array{Any,1}, ::Function, ::AutoGrad.Rec{Array{Float64,1}}, ::Vararg{AutoGrad.Rec{Array{Float64,1}},N} where N) at /home/vagrant/.julia/v0.6/AutoGrad/src/core.jl:123
   [3] power_by_squaring(::AutoGrad.Rec{Array{Float64,1}}, ::Int64) at ./intfuncs.jl:166
   [4] (::##15#18)(::AutoGrad.Rec{Array{Float64,1}}) at ./<missing>:0
   [5] broadcast(::Function, ::AutoGrad.Rec{Array{Float64,1}}) at ./broadcast.jl:434
   [6] rosenbrock(::AutoGrad.Rec{Array{Float64,1}}) at /home/vagrant/.julia/v0.6/Knet/test/update.jl:8
   [7] rosenmulti(::AutoGrad.Rec{Dict{Symbol,Array{Float64,1}}}) at /home/vagrant/.julia/v0.6/Knet/test/update.jl:15
   [8] forward_pass(::Function, ::Tuple{Dict{Symbol,Array{Float64,1}}}, ::Array{Any,1}, ::Int64) at /home/vagrant/.julia/v0.6/AutoGrad/src/core.jl:88
   [9] (::AutoGrad.##gradfun#4#6{#rosenmulti,Int64})(::Array{Any,1}, ::Function, ::Dict{Symbol,Array{Float64,1}}, ::Vararg{Dict{Symbol,Array{Float64,1}},N} where N) at /home/vagrant/.julia/v0.6/AutoGrad/src/core.jl:57
   [10] (::AutoGrad.#gradfun#5)(::Dict{Symbol,Array{Float64,1}}, ::Vararg{Dict{Symbol,Array{Float64,1}},N} where N) at /home/vagrant/.julia/v0.6/AutoGrad/src/core.jl:57
   [11] #rosenopt#21(::Bool, ::Float64, ::Float64, ::Int64, ::Function, ::Dict{Symbol,Array{Float64,1}}, ::Dict{Symbol,Knet.Adam}) at /home/vagrant/.julia/v0.6/Knet/test/update.jl:32
   [12] macro expansion at /home/vagrant/.julia/v0.6/Knet/test/update.jl:60 [inlined]
   [13] macro expansion at ./test.jl:856 [inlined]
   [14] anonymous at ./<missing>:?
Test Summary: | Error  Total
update!       |     9      9
ERROR: LoadError: LoadError: Some tests did not pass: 0 passed, 0 failed, 9 errored, 0 broken.
while loading /home/vagrant/.julia/v0.6/Knet/test/update.jl, in expression starting on line 47
while loading /home/vagrant/.julia/v0.6/Knet/test/runtests.jl, in expression starting on line 237
================================[ ERROR: Knet ]=================================

failed process: Process(`/home/vagrant/julia/bin/julia -Cx86-64 -J/home/vagrant/julia/lib/julia/sys.so --compile=yes --depwarn=yes --check-bounds=yes --code-coverage=none --color=no --compilecache=yes /home/vagrant/.julia/v0.6/Knet/test/runtests.jl`, ProcessExited(1)) [1]

================================================================================
INFO: Removing BaseTestNext v0.2.2
INFO: Removing Combinatorics v0.4.0
INFO: Removing Iterators v0.3.1
INFO: Removing Polynomials v0.1.5
ERROR: Knet had test errors

>>> End of log
