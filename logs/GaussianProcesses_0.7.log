>>> 'Pkg.add("GaussianProcesses")' log
[ Info: Cloning cache of DiffBase from https://github.com/JuliaDiff/DiffBase.jl.git
[ Info: Cloning cache of FastGaussQuadrature from https://github.com/ajt60gaibb/FastGaussQuadrature.jl.git
[ Info: Cloning cache of Formatting from https://github.com/JuliaIO/Formatting.jl.git
[ Info: Cloning cache of FunctionWrappers from https://github.com/yuyichao/FunctionWrappers.jl.git
[ Info: Cloning cache of GaussianProcesses from https://github.com/STOR-i/GaussianProcesses.jl.git
[ Info: Cloning cache of Klara from https://github.com/JuliaStats/Klara.jl.git
[ Info: Cloning cache of RecipesBase from https://github.com/JuliaPlots/RecipesBase.jl.git
[ Info: Cloning cache of ReverseDiff from https://github.com/JuliaDiff/ReverseDiff.jl.git
[ Info: Installing BinDeps v0.8.5
[ Info: Installing Calculus v0.2.2
[ Info: Installing DataStructures v0.7.4
[ Info: Installing DiffBase v0.2.0
[ Info: Installing Distances v0.5.0
[ Info: Installing Distributions v0.15.0
[ Info: Installing FastGaussQuadrature v0.3.0
[ Info: Installing Formatting v0.3.0
[ Info: Installing ForwardDiff v0.4.2
[ Info: Installing FunctionWrappers v0.1.0
[ Info: Installing GaussianProcesses v0.5.0
[ Info: Installing Klara v0.9.2
[ Info: Installing LineSearches v0.1.5
[ Info: Installing NLSolversBase v2.1.3
[ Info: Installing NaNMath v0.3.0
[ Info: Installing Optim v0.7.8
[ Info: Installing PDMats v0.8.0
[ Info: Installing PositiveFactorizations v0.1.0
[ Info: Installing QuadGK v0.2.0
[ Info: Installing RecipesBase v0.2.3
[ Info: Installing ReverseDiff v0.1.5
[ Info: Installing Rmath v0.3.1
[ Info: Installing SHA v0.5.3
[ Info: Installing ScikitLearnBase v0.3.0
[ Info: Installing SortingAlgorithms v0.2.0
[ Info: Installing SpecialFunctions v0.3.8
[ Info: Installing StatsBase v0.19.5
[ Info: Installing StatsFuns v0.5.0
[ Info: Installing URIParser v0.3.0
[ Info: Building SpecialFunctions
┌ Warning: `isalnum(c::Char)` is deprecated, use `isalpha(c) || isnumeric(c)` instead.
│   caller = is_userinfo_char at parser.jl:4 [inlined]
└ @ Core parser.jl:4
┌ Warning: `isalnum(c::Char)` is deprecated, use `isalpha(c) || isnumeric(c)` instead.
│   caller = is_host_char at parser.jl:8 [inlined]
└ @ Core parser.jl:8
┌ Warning: `isalnum(c::Char)` is deprecated, use `isalpha(c) || isnumeric(c)` instead.
│   caller = is_host_char at parser.jl:8 [inlined]
└ @ Core parser.jl:8
WARNING: importing deprecated binding Base.Associative into BinDeps.
WARNING: Base.Associative is deprecated, use AbstractDict instead.
  likely near /home/vagrant/.julia/v0.7/SpecialFunctions/deps/binaries.jl:44
in @install at /home/vagrant/.julia/v0.7/BinDeps/src/dependencies.jl
[ Info: Building Rmath
┌ Warning: `isalnum(c::Char)` is deprecated, use `isalpha(c) || isnumeric(c)` instead.
│   caller = is_userinfo_char at parser.jl:4 [inlined]
└ @ Core parser.jl:4
┌ Warning: `isalnum(c::Char)` is deprecated, use `isalpha(c) || isnumeric(c)` instead.
│   caller = is_host_char at parser.jl:8 [inlined]
└ @ Core parser.jl:8
┌ Warning: `isalnum(c::Char)` is deprecated, use `isalpha(c) || isnumeric(c)` instead.
│   caller = is_host_char at parser.jl:8 [inlined]
└ @ Core parser.jl:8
┌ Error: ------------------------------------------------------------
│ # Build failed for Rmath
│   exception =
│    LoadError: UndefVarError: Libdl not defined
│    Stacktrace:
│     [1] top-level scope at /home/vagrant/.julia/v0.7/BinDeps/src/BinDeps.jl:278
│     [2] include at ./boot.jl:292 [inlined]
│     [3] include_relative(::Module, ::String) at ./loading.jl:521
│     [4] include at ./sysimg.jl:26 [inlined]
│     [5] include(::String) at ./loading.jl:555
│     [6] top-level scope
│     [7] eval at ./boot.jl:295 [inlined]
│     [8] eval at ./sysimg.jl:71 [inlined]
│     [9] evalfile(::String, ::Array{String,1}) at ./loading.jl:550 (repeats 2 times)
│     [10] #2 at ./none:12 [inlined]
│     [11] cd(::getfield(, Symbol("##2#5")){String}, ::String) at ./file.jl:70
│     [12] (::getfield(, Symbol("##1#3")))(::IOStream) at ./none:11
│     [13] open(::getfield(, Symbol("##1#3")), ::String, ::String) at ./iostream.jl:310
│     [14] top-level scope
│     [15] eval at ./boot.jl:295 [inlined]
│     [16] eval(::Module, ::Expr) at ./sysimg.jl:71
│     [17] process_options(::Base.JLOptions) at ./client.jl:301
│     [18] _start() at ./client.jl:375
│    in expression starting at /home/vagrant/.julia/v0.7/Rmath/deps/build.jl:278
└ @ Main none:15
┌ Warning: ------------------------------------------------------------
│ # Build error summary
│ 
│ Rmath had build errors.
│ 
│  - packages with build errors remain installed in /home/vagrant/.julia/v0.7
│  - build the package(s) and all dependencies with `Pkg.build("Rmath")`
│  - build a single package by running its `deps/build.jl` script
└ @ Base.Pkg.Entry entry.jl:650
[ Info: Package database updated

>>> 'Pkg.test("GaussianProcesses")' log
Julia Version 0.7.0-DEV.3421
Commit 2042dcfc2e (2018-01-16 23:39 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
      Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-135-generic #184-Ubuntu SMP Wed Oct 18 11:55:51 UTC 2017 x86_64 x86_64
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
              speed         user         nice          sys         idle          irq
       #1  3499 MHz      94882 s         54 s       6649 s      94595 s          4 s
       #2  3499 MHz      15773 s         93 s       3049 s     198483 s          0 s
       
  Memory: 2.93927001953125 GB (788.484375 MB free)
  Uptime: 2210.0 sec
  Load Avg:  0.91943359375  0.951171875  0.76318359375
  WORD_SIZE: 64
  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant
Packages:
  Package Directory: /home/vagrant/.julia/v0.7
  Package Status:
2 required packages:
 - GaussianProcesses             0.5.0
 - JSON                          0.16.4
30 additional packages:
 - BinDeps                       0.8.5
 - Calculus                      0.2.2
 - Compat                        0.46.0
 - DataStructures                0.7.4
 - DiffBase                      0.2.0
 - Distances                     0.5.0
 - Distributions                 0.15.0
 - FastGaussQuadrature           0.3.0
 - Formatting                    0.3.0
 - ForwardDiff                   0.4.2
 - FunctionWrappers              0.1.0
 - Klara                         0.9.2
 - LineSearches                  0.1.5
 - NLSolversBase                 2.1.3
 - NaNMath                       0.3.0
 - Nullables                     0.0.3
 - Optim                         0.7.8
 - PDMats                        0.8.0
 - PositiveFactorizations        0.1.0
 - QuadGK                        0.2.0
 - RecipesBase                   0.2.3
 - ReverseDiff                   0.1.5
 - Rmath                         0.3.1
 - SHA                           0.5.3
 - ScikitLearnBase               0.3.0
 - SortingAlgorithms             0.2.0
 - SpecialFunctions              0.3.8
 - StatsBase                     0.19.5
 - StatsFuns                     0.5.0
 - URIParser                     0.3.0
[ Info: Computing test dependencies for GaussianProcesses...
[ Info: No packages to install, update or remove
[ Info: Testing GaussianProcesses
┌ Warning: Deprecated syntax `parametric method syntax finite_difference{T <: Number}(f::Function, x::T, dtype::Symbol = :central)` around /home/vagrant/.julia/v0.7/Calculus/src/finite_difference.jl:48.
│ Use `finite_difference(f::Function, x::T, dtype::Symbol = :central) where T <: Number` instead.
└ @ nothing finite_difference.jl:48
┌ Warning: Deprecated syntax `parametric method syntax complex_differentiable_abs{T <: Complex}(z::T)` around /home/vagrant/.julia/v0.7/Calculus/src/finite_difference.jl:87.
│ Use `complex_differentiable_abs(z::T) where T <: Complex` instead.
└ @ nothing finite_difference.jl:87
┌ Warning: Deprecated syntax `parametric method syntax finite_difference!{S <: Number, T <: Number}(f::Function, x::Vector{S}, g::Vector{T}, dtype::Symbol)` around /home/vagrant/.julia/v0.7/Calculus/src/finite_difference.jl:105.
│ Use `finite_difference!(f::Function, x::Vector{S}, g::Vector{T}, dtype::Symbol) where {S <: Number, T <: Number}` instead.
└ @ nothing finite_difference.jl:105
┌ Warning: Deprecated syntax `parametric method syntax finite_difference{T <: Number}(f::Function, x::Vector{T}, dtype::Symbol = :central)` around /home/vagrant/.julia/v0.7/Calculus/src/finite_difference.jl:142.
│ Use `finite_difference(f::Function, x::Vector{T}, dtype::Symbol = :central) where T <: Number` instead.
└ @ nothing finite_difference.jl:142
┌ Warning: Deprecated syntax `parametric method syntax finite_difference_jacobian!{R <: Number, S <: Number, T <: Number}(f::Function, x::Vector{R}, f_x::Vector{S}, J::Array{T}, dtype::Symbol = :central)` around /home/vagrant/.julia/v0.7/Calculus/src/finite_difference.jl:165.
│ Use `finite_difference_jacobian!(f::Function, x::Vector{R}, f_x::Vector{S}, J::Array{T}, dtype::Symbol = :central) where {R <: Number, S <: Number, T <: Number}` instead.
└ @ nothing finite_difference.jl:165
┌ Warning: Deprecated syntax `parametric method syntax finite_difference_jacobian{T <: Number}(f::Function, x::Vector{T}, dtype::Symbol = :central)` around /home/vagrant/.julia/v0.7/Calculus/src/finite_difference.jl:197.
│ Use `finite_difference_jacobian(f::Function, x::Vector{T}, dtype::Symbol = :central) where T <: Number` instead.
└ @ nothing finite_difference.jl:197
┌ Warning: Deprecated syntax `parametric method syntax finite_difference_hessian{T <: Number}(f::Function, x::T)` around /home/vagrant/.julia/v0.7/Calculus/src/finite_difference.jl:217.
│ Use `finite_difference_hessian(f::Function, x::T) where T <: Number` instead.
└ @ nothing finite_difference.jl:217
┌ Warning: Deprecated syntax `parametric method syntax finite_difference_hessian!{S <: Number, T <: Number}(f::Function, x::Vector{S}, H::Array{T})` around /home/vagrant/.julia/v0.7/Calculus/src/finite_difference.jl:238.
│ Use `finite_difference_hessian!(f::Function, x::Vector{S}, H::Array{T}) where {S <: Number, T <: Number}` instead.
└ @ nothing finite_difference.jl:238
┌ Warning: Deprecated syntax `parametric method syntax finite_difference_hessian{T <: Number}(f::Function, x::Vector{T})` around /home/vagrant/.julia/v0.7/Calculus/src/finite_difference.jl:269.
│ Use `finite_difference_hessian(f::Function, x::Vector{T}) where T <: Number` instead.
└ @ nothing finite_difference.jl:269
┌ Warning: Deprecated syntax `parametric method syntax finite_difference_hessian{T <: Number}(f::Function, g::Function, x::Vector{T}, dtype::Symbol = :central)` around /home/vagrant/.julia/v0.7/Calculus/src/finite_difference.jl:284.
│ Use `finite_difference_hessian(f::Function, g::Function, x::Vector{T}, dtype::Symbol = :central) where T <: Number` instead.
└ @ nothing finite_difference.jl:284
┌ Warning: Deprecated syntax `parametric method syntax derivative{T <: Number}(f::Function, x::Union{T, Vector{T}}, dtype::Symbol = :central)` around /home/vagrant/.julia/v0.7/Calculus/src/derivative.jl:10.
│ Use `derivative(f::Function, x::Union{T, Vector{T}}, dtype::Symbol = :central) where T <: Number` instead.
└ @ nothing derivative.jl:10
┌ Warning: Deprecated syntax `parametric method syntax gradient{T <: Number}(f::Function, x::Union{T, Vector{T}}, dtype::Symbol = :central)` around /home/vagrant/.julia/v0.7/Calculus/src/derivative.jl:13.
│ Use `gradient(f::Function, x::Union{T, Vector{T}}, dtype::Symbol = :central) where T <: Number` instead.
└ @ nothing derivative.jl:13
┌ Warning: Deprecated syntax `parametric method syntax Base.gradient{T <: Number}(f::Function, x::Union{T, Vector{T}}, dtype::Symbol = :central)` around /home/vagrant/.julia/v0.7/Calculus/src/derivative.jl:17.
│ Use `Base.gradient(f::Function, x::Union{T, Vector{T}}, dtype::Symbol = :central) where T <: Number` instead.
└ @ nothing derivative.jl:17
┌ Warning: Deprecated syntax `parametric method syntax jacobian{T <: Number}(f::Function, x::Vector{T}, dtype::Symbol)` around /home/vagrant/.julia/v0.7/Calculus/src/derivative.jl:29.
│ Use `jacobian(f::Function, x::Vector{T}, dtype::Symbol) where T <: Number` instead.
└ @ nothing derivative.jl:29
┌ Warning: Deprecated syntax `parametric method syntax second_derivative{T <: Number}(f::Function, g::Function, x::Union{T, Vector{T}}, dtype::Symbol)` around /home/vagrant/.julia/v0.7/Calculus/src/derivative.jl:47.
│ Use `second_derivative(f::Function, g::Function, x::Union{T, Vector{T}}, dtype::Symbol) where T <: Number` instead.
└ @ nothing derivative.jl:47
┌ Warning: Deprecated syntax `parametric method syntax hessian{T <: Number}(f::Function, g::Function, x::Union{T, Vector{T}}, dtype::Symbol)` around /home/vagrant/.julia/v0.7/Calculus/src/derivative.jl:50.
│ Use `hessian(f::Function, g::Function, x::Union{T, Vector{T}}, dtype::Symbol) where T <: Number` instead.
└ @ nothing derivative.jl:50
┌ Warning: Deprecated syntax `parametric method syntax second_derivative{T <: Number}(f::Function, g::Function, x::Union{T, Vector{T}})` around /home/vagrant/.julia/v0.7/Calculus/src/derivative.jl:53.
│ Use `second_derivative(f::Function, g::Function, x::Union{T, Vector{T}}) where T <: Number` instead.
└ @ nothing derivative.jl:53
┌ Warning: Deprecated syntax `parametric method syntax hessian{T <: Number}(f::Function, g::Function, x::Union{T, Vector{T}})` around /home/vagrant/.julia/v0.7/Calculus/src/derivative.jl:56.
│ Use `hessian(f::Function, g::Function, x::Union{T, Vector{T}}) where T <: Number` instead.
└ @ nothing derivative.jl:56
┌ Warning: Deprecated syntax `parametric method syntax second_derivative{T <: Number}(f::Function, x::Vector{T}, dtype::Symbol)` around /home/vagrant/.julia/v0.7/Calculus/src/derivative.jl:65.
│ Use `second_derivative(f::Function, x::Vector{T}, dtype::Symbol) where T <: Number` instead.
└ @ nothing derivative.jl:65
┌ Warning: Deprecated syntax `parametric method syntax hessian{T <: Number}(f::Function, x::Vector{T}, dtype::Symbol)` around /home/vagrant/.julia/v0.7/Calculus/src/derivative.jl:68.
│ Use `hessian(f::Function, x::Vector{T}, dtype::Symbol) where T <: Number` instead.
└ @ nothing derivative.jl:68
┌ Warning: Deprecated syntax `parametric method syntax second_derivative{T <: Number}(f::Function, x::Vector{T})` around /home/vagrant/.julia/v0.7/Calculus/src/derivative.jl:77.
│ Use `second_derivative(f::Function, x::Vector{T}) where T <: Number` instead.
└ @ nothing derivative.jl:77
┌ Warning: Deprecated syntax `parametric method syntax hessian{T <: Number}(f::Function, x::Vector{T})` around /home/vagrant/.julia/v0.7/Calculus/src/derivative.jl:80.
│ Use `hessian(f::Function, x::Vector{T}) where T <: Number` instead.
└ @ nothing derivative.jl:80
┌ Warning: Deprecated syntax `parametric method syntax check_gradient{T <: Number}(f::Function, g::Function, x::Vector{T})` around /home/vagrant/.julia/v0.7/Calculus/src/check_derivative.jl:7.
│ Use `check_gradient(f::Function, g::Function, x::Vector{T}) where T <: Number` instead.
└ @ nothing check_derivative.jl:7
┌ Warning: Deprecated syntax `parametric method syntax check_hessian{T <: Number}(f::Function, h::Function, x::Vector{T})` around /home/vagrant/.julia/v0.7/Calculus/src/check_derivative.jl:17.
│ Use `check_hessian(f::Function, h::Function, x::Vector{T}) where T <: Number` instead.
└ @ nothing check_derivative.jl:17
┌ Warning: Deprecated syntax `type` at /home/vagrant/.julia/v0.7/Calculus/src/symbolic.jl:26.
│ Use `mutable struct` instead.
└ @ nothing symbolic.jl:26
┌ Warning: Deprecated syntax `type` at /home/vagrant/.julia/v0.7/Calculus/src/symbolic.jl:69.
│ Use `mutable struct` instead.
└ @ nothing symbolic.jl:69
┌ Warning: Deprecated syntax `parametric method syntax simplify{T}(x::SymbolParameter{T}, args)` around /home/vagrant/.julia/v0.7/Calculus/src/symbolic.jl:89.
│ Use `simplify(x::SymbolParameter{T}, args) where T` instead.
└ @ nothing symbolic.jl:89
┌ Warning: Deprecated syntax `parametric method syntax differentiate{T}(x::SymbolParameter{T}, args, wrt)` around /home/vagrant/.julia/v0.7/Calculus/src/differentiate.jl:22.
│ Use `differentiate(x::SymbolParameter{T}, args, wrt) where T` instead.
└ @ nothing differentiate.jl:22
┌ Warning: `Array{T, 1}(m::Int) where T` is deprecated, use `Array{T, 1}(uninitialized, m)` instead.
│   caller = top-level scope
└ @ Core :0
┌ Warning: Deprecated syntax `parametric method syntax differentiate{T <: Compat.AbstractString}(s::Compat.AbstractString, targets::Vector{T})` around /home/vagrant/.julia/v0.7/Calculus/src/differentiate.jl:283.
│ Use `differentiate(s::Compat.AbstractString, targets::Vector{T}) where T <: Compat.AbstractString` instead.
└ @ nothing differentiate.jl:283
┌ Warning: Deprecated syntax `immutable` at /home/vagrant/.julia/v0.7/PositiveFactorizations/src/PositiveFactorizations.jl:10.
│ Use `struct` instead.
└ @ nothing PositiveFactorizations.jl:10
┌ Warning: `using A.B` will only be allowed for modules, not single bindings. Use `using A: B` instead
│   caller = ip:0x0
└ @ Core :-1
┌ Warning: Deprecated syntax `parametric method syntax Base.cholfact{T}(::Type{Positive{T}}, A::AbstractMatrix, pivot = Val{false}; tol = default_tol(A), blocksize = default_blocksize(T))` around /home/vagrant/.julia/v0.7/PositiveFactorizations/src/cholesky.jl:11.
│ Use `Base.cholfact(#s1::Type{Positive{T}}, A::AbstractMatrix, pivot = Val{false}; tol = default_tol(A), blocksize = default_blocksize(T)) where T` instead.
└ @ nothing cholesky.jl:11
┌ Warning: Deprecated syntax `parametric method syntax Base.ldltfact{T}(::Type{Positive{T}}, A::AbstractMatrix, pivot = Val{false}; tol = default_tol(A), blocksize = default_blocksize(T))` around /home/vagrant/.julia/v0.7/PositiveFactorizations/src/cholesky.jl:15.
│ Use `Base.ldltfact(#s5::Type{Positive{T}}, A::AbstractMatrix, pivot = Val{false}; tol = default_tol(A), blocksize = default_blocksize(T)) where T` instead.
└ @ nothing cholesky.jl:15
┌ Warning: Deprecated syntax `parametric method syntax Base.cholfact!{T <: AbstractFloat}(::Type{Positive{T}}, A::AbstractMatrix{T}, pivot = Val{false}; tol = default_tol(A), blocksize = default_blocksize(T))` around /home/vagrant/.julia/v0.7/PositiveFactorizations/src/cholesky.jl:22.
│ Use `Base.cholfact!(#s5::Type{Positive{T}}, A::AbstractMatrix{T}, pivot = Val{false}; tol = default_tol(A), blocksize = default_blocksize(T)) where T <: AbstractFloat` instead.
└ @ nothing cholesky.jl:22
┌ Warning: Deprecated syntax `parametric method syntax Base.cholfact!{T <: AbstractFloat}(::Type{Positive}, A::AbstractMatrix{T}, pivot = Val{false}; tol = default_tol(A), blocksize = default_blocksize(T))` around /home/vagrant/.julia/v0.7/PositiveFactorizations/src/cholesky.jl:23.
│ Use `Base.cholfact!(#s5::Type{Positive}, A::AbstractMatrix{T}, pivot = Val{false}; tol = default_tol(A), blocksize = default_blocksize(T)) where T <: AbstractFloat` instead.
└ @ nothing cholesky.jl:23
┌ Warning: Deprecated syntax `parametric method syntax Base.ldltfact!{T <: AbstractFloat}(::Type{Positive{T}}, A::AbstractMatrix{T}, pivot::Type{Val{false}} = Val{false}; tol = default_tol(A), blocksize = default_blocksize(T))` around /home/vagrant/.julia/v0.7/PositiveFactorizations/src/cholesky.jl:27.
│ Use `Base.ldltfact!(#s5::Type{Positive{T}}, A::AbstractMatrix{T}, pivot::Type{Val{false}} = Val{false}; tol = default_tol(A), blocksize = default_blocksize(T)) where T <: AbstractFloat` instead.
└ @ nothing cholesky.jl:27
┌ Warning: Deprecated syntax `parametric method syntax Base.ldltfact!{T <: AbstractFloat}(::Type{Positive{T}}, A::AbstractMatrix{T}, pivot::Type{Val{true}}; tol = default_tol(A), blocksize = default_blocksize(T))` around /home/vagrant/.julia/v0.7/PositiveFactorizations/src/cholesky.jl:60.
│ Use `Base.ldltfact!(#s6::Type{Positive{T}}, A::AbstractMatrix{T}, pivot::Type{Val{true}}; tol = default_tol(A), blocksize = default_blocksize(T)) where T <: AbstractFloat` instead.
└ @ nothing cholesky.jl:60
┌ Warning: Deprecated syntax `parametric method syntax Base.ldltfact!{T <: AbstractFloat}(::Type{Positive}, A::AbstractMatrix{T}, pivot = Val{false}; tol = default_tol(A), blocksize = default_blocksize(T))` around /home/vagrant/.julia/v0.7/PositiveFactorizations/src/cholesky.jl:79.
│ Use `Base.ldltfact!(#s6::Type{Positive}, A::AbstractMatrix{T}, pivot = Val{false}; tol = default_tol(A), blocksize = default_blocksize(T)) where T <: AbstractFloat` instead.
└ @ nothing cholesky.jl:79
┌ Warning: Deprecated syntax `parametric method syntax update_columns!{T <: BlasFloat}(dest::StridedMatrix{T}, d::Number, c::StridedVector{T})` around /home/vagrant/.julia/v0.7/PositiveFactorizations/src/cholesky.jl:181.
│ Use `update_columns!(dest::StridedMatrix{T}, d::Number, c::StridedVector{T}) where T <: BlasFloat` instead.
└ @ nothing cholesky.jl:181
┌ Warning: Deprecated syntax `parametric method syntax update_columns!{T <: BlasFloat}(dest::StridedMatrix{T}, d::Number, x::StridedVector{T}, y::StridedVector{T})` around /home/vagrant/.julia/v0.7/PositiveFactorizations/src/cholesky.jl:187.
│ Use `update_columns!(dest::StridedMatrix{T}, d::Number, x::StridedVector{T}, y::StridedVector{T}) where T <: BlasFloat` instead.
└ @ nothing cholesky.jl:187
┌ Warning: Deprecated syntax `parametric method syntax update_columns!{T <: BlasFloat}(dest::StridedMatrix{T}, d::AbstractVector, C::StridedMatrix{T})` around /home/vagrant/.julia/v0.7/PositiveFactorizations/src/cholesky.jl:193.
│ Use `update_columns!(dest::StridedMatrix{T}, d::AbstractVector, C::StridedMatrix{T}) where T <: BlasFloat` instead.
└ @ nothing cholesky.jl:193
┌ Warning: Deprecated syntax `parametric method syntax floattype{T <: AbstractFloat}(::Type{T})` around /home/vagrant/.julia/v0.7/PositiveFactorizations/src/cholesky.jl:269.
│ Use `floattype(#unused#::Type{T}) where T <: AbstractFloat` instead.
└ @ nothing cholesky.jl:269
┌ Warning: Deprecated syntax `parametric method syntax floattype{T <: Integer}(::Type{T})` around /home/vagrant/.julia/v0.7/PositiveFactorizations/src/cholesky.jl:270.
│ Use `floattype(#unused#::Type{T}) where T <: Integer` instead.
└ @ nothing cholesky.jl:270
┌ Warning: Deprecated syntax `parametric method syntax default_blocksize{T}(::Type{T})` around /home/vagrant/.julia/v0.7/PositiveFactorizations/src/cholesky.jl:276.
│ Use `default_blocksize(#unused#::Type{T}) where T` instead.
└ @ nothing cholesky.jl:276
┌ Warning: Deprecated syntax `parametric method syntax Base.eigfact{T}(::Type{Positive{T}}, A::AbstractMatrix{T}, args...; tol = default_tol(A))` around /home/vagrant/.julia/v0.7/PositiveFactorizations/src/eig.jl:4.
│ Use `Base.eigfact(#s6::Type{Positive{T}}, A::AbstractMatrix{T}, args...; tol = default_tol(A)) where T` instead.
└ @ nothing eig.jl:4
┌ Warning: Deprecated syntax `parametric method syntax Base.eigfact{T}(::Type{Positive{T}}, A::AbstractMatrix, args...; tol = default_tol(A))` around /home/vagrant/.julia/v0.7/PositiveFactorizations/src/eig.jl:15.
│ Use `Base.eigfact(#s6::Type{Positive{T}}, A::AbstractMatrix, args...; tol = default_tol(A)) where T` instead.
└ @ nothing eig.jl:15
┌ Warning: Deprecated syntax `parametric method syntax DiffResult{V, O}(value::V, derivs::NTuple{O, Any})` around /home/vagrant/.julia/v0.7/DiffBase/src/results.jl:22.
│ Use `DiffResult(value::V, derivs::NTuple{O, Any}) where {V, O}` instead.
└ @ nothing results.jl:22
┌ Warning: Deprecated syntax `parametric method syntax Base.eltype{O, V, D}(::Type{DiffResult{O, V, D}})` around /home/vagrant/.julia/v0.7/DiffBase/src/results.jl:81.
│ Use `Base.eltype(#unused#::Type{DiffResult{O, V, D}}) where {O, V, D}` instead.
└ @ nothing results.jl:81
┌ Warning: Deprecated syntax `parametric method syntax derivative{i}(r::DiffResult, ::Type{Val{i}} = Val{1})` around /home/vagrant/.julia/v0.7/DiffBase/src/results.jl:127.
│ Use `derivative(r::DiffResult, #s1::Type{Val{i}} = Val{1}) where i` instead.
└ @ nothing results.jl:127
┌ Warning: Deprecated syntax `parametric method syntax derivative!{O, i}(r::DiffResult{O}, x::Number, ::Type{Val{i}} = Val{1})` around /home/vagrant/.julia/v0.7/DiffBase/src/results.jl:135.
│ Use `derivative!(r::DiffResult{O}, x::Number, #s1::Type{Val{i}} = Val{1}) where {O, i}` instead.
└ @ nothing results.jl:135
┌ Warning: Deprecated syntax `parametric method syntax derivative!{i}(r::DiffResult, x::AbstractArray, ::Type{Val{i}} = Val{1})` around /home/vagrant/.julia/v0.7/DiffBase/src/results.jl:143.
│ Use `derivative!(r::DiffResult, x::AbstractArray, #s3::Type{Val{i}} = Val{1}) where i` instead.
└ @ nothing results.jl:143
┌ Warning: Deprecated syntax `parametric method syntax derivative!{O, i}(f, r::DiffResult{O}, x::Number, ::Type{Val{i}} = Val{1})` around /home/vagrant/.julia/v0.7/DiffBase/src/results.jl:154.
│ Use `derivative!(f, r::DiffResult{O}, x::Number, #s3::Type{Val{i}} = Val{1}) where {O, i}` instead.
└ @ nothing results.jl:154
┌ Warning: Deprecated syntax `parametric method syntax derivative!{i}(f, r::DiffResult, x::AbstractArray, ::Type{Val{i}} = Val{1})` around /home/vagrant/.julia/v0.7/DiffBase/src/results.jl:162.
│ Use `derivative!(f, r::DiffResult, x::AbstractArray, #s3::Type{Val{i}} = Val{1}) where i` instead.
└ @ nothing results.jl:162
┌ Warning: Deprecated syntax `immutable` at /home/vagrant/.julia/v0.7/ForwardDiff/src/partials.jl:1.
│ Use `struct` instead.
└ @ nothing partials.jl:1
┌ Warning: Deprecated syntax `parametric method syntax valtype{N, T}(::Partials{N, T})` around /home/vagrant/.julia/v0.7/ForwardDiff/src/partials.jl:9.
│ Use `valtype(#unused#::Partials{N, T}) where {N, T}` instead.
└ @ nothing partials.jl:9
┌ Warning: Deprecated syntax `parametric method syntax valtype{N, T}(::Type{Partials{N, T}})` around /home/vagrant/.julia/v0.7/ForwardDiff/src/partials.jl:10.
│ Use `valtype(#unused#::Type{Partials{N, T}}) where {N, T}` instead.
└ @ nothing partials.jl:10
┌ Warning: Deprecated syntax `parametric method syntax npartials{N}(::Partials{N})` around /home/vagrant/.julia/v0.7/ForwardDiff/src/partials.jl:12.
│ Use `npartials(#unused#::Partials{N}) where N` instead.
└ @ nothing partials.jl:12
┌ Warning: Deprecated syntax `parametric method syntax npartials{N, T}(::Type{Partials{N, T}})` around /home/vagrant/.julia/v0.7/ForwardDiff/src/partials.jl:13.
│ Use `npartials(#unused#::Type{Partials{N, T}}) where {N, T}` instead.
└ @ nothing partials.jl:13
┌ Warning: Deprecated syntax `parametric method syntax Base.length{N}(::Partials{N})` around /home/vagrant/.julia/v0.7/ForwardDiff/src/partials.jl:15.
│ Use `Base.length(#unused#::Partials{N}) where N` instead.
└ @ nothing partials.jl:15
┌ Warning: Deprecated syntax `parametric method syntax Base.size{N}(::Partials{N})` around /home/vagrant/.julia/v0.7/ForwardDiff/src/partials.jl:16.
│ Use `Base.size(#unused#::Partials{N}) where N` instead.
└ @ nothing partials.jl:16
┌ Warning: Deprecated syntax `parametric method syntax setindex{N, T}(partials::Partials{N, T}, v, i)` around /home/vagrant/.julia/v0.7/ForwardDiff/src/partials.jl:19.
│ Use `setindex(partials::Partials{N, T}, v, i) where {N, T}` instead.
└ @ nothing partials.jl:19
┌ Warning: Deprecated syntax `parametric method syntax Base.zero{N, T}(::Type{Partials{N, T}})` around /home/vagrant/.julia/v0.7/ForwardDiff/src/partials.jl:34.
│ Use `Base.zero(#unused#::Type{Partials{N, T}}) where {N, T}` instead.
└ @ nothing partials.jl:34
┌ Warning: Deprecated syntax `parametric method syntax Base.one{N, T}(::Type{Partials{N, T}})` around /home/vagrant/.julia/v0.7/ForwardDiff/src/partials.jl:37.
│ Use `Base.one(#unused#::Type{Partials{N, T}}) where {N, T}` instead.
└ @ nothing partials.jl:37
┌ Warning: Deprecated syntax `parametric method syntax Base.rand{N, T}(::Type{Partials{N, T}})` around /home/vagrant/.julia/v0.7/ForwardDiff/src/partials.jl:40.
│ Use `Base.rand(#unused#::Type{Partials{N, T}}) where {N, T}` instead.
└ @ nothing partials.jl:40
WARNING: importing deprecated binding Base.AbstractRNG into ForwardDiff.
ERROR: LoadError: LoadError: ArgumentError: invalid type for argument rng in method definition for rand at /home/vagrant/.julia/v0.7/ForwardDiff/src/partials.jl:41
Stacktrace:
 [1] top-level scope
 [2] include at ./boot.jl:292 [inlined]
 [3] include_relative(::Module, ::String) at ./loading.jl:521
 [4] include at ./sysimg.jl:26 [inlined]
 [5] include(::String) at /home/vagrant/.julia/v0.7/ForwardDiff/src/ForwardDiff.jl:3
 [6] top-level scope
 [7] include at ./boot.jl:292 [inlined]
 [8] include_relative(::Module, ::String) at ./loading.jl:521
 [9] include(::Module, ::String) at ./sysimg.jl:26
 [10] top-level scope
 [11] eval at ./boot.jl:295 [inlined]
 [12] top-level scope at ./<missing>:2
in expression starting at /home/vagrant/.julia/v0.7/ForwardDiff/src/partials.jl:41
in expression starting at /home/vagrant/.julia/v0.7/ForwardDiff/src/ForwardDiff.jl:59
ERROR: LoadError: Failed to precompile ForwardDiff to /home/vagrant/.julia/lib/v0.7/ForwardDiff.ji.
Stacktrace:
 [1] error at ./error.jl:33 [inlined]
 [2] compilecache(::String) at ./loading.jl:648
 [3] compilecache at ./loading.jl:605 [inlined]
 [4] _require(::Symbol) at ./loading.jl:440
 [5] require(::Symbol) at ./loading.jl:333
 [6] include at ./boot.jl:292 [inlined]
 [7] include_relative(::Module, ::String) at ./loading.jl:521
 [8] include(::Module, ::String) at ./sysimg.jl:26
 [9] top-level scope
 [10] eval at ./boot.jl:295 [inlined]
 [11] top-level scope at ./<missing>:2
in expression starting at /home/vagrant/.julia/v0.7/Optim/src/Optim.jl:7
ERROR: LoadError: LoadError: Failed to precompile Optim to /home/vagrant/.julia/lib/v0.7/Optim.ji.
Stacktrace:
 [1] error at ./error.jl:33 [inlined]
 [2] compilecache(::String) at ./loading.jl:648
 [3] compilecache at ./loading.jl:605 [inlined]
 [4] _require(::Symbol) at ./loading.jl:460
 [5] require(::Symbol) at ./loading.jl:333
 [6] include at ./boot.jl:292 [inlined]
 [7] include_relative(::Module, ::String) at ./loading.jl:521
 [8] _require(::Symbol) at ./loading.jl:453
 [9] require(::Symbol) at ./loading.jl:333
 [10] include at ./boot.jl:292 [inlined]
 [11] include_relative(::Module, ::String) at ./loading.jl:521
 [12] include(::Module, ::String) at ./sysimg.jl:26
 [13] process_options(::Base.JLOptions) at ./client.jl:324
 [14] _start() at ./client.jl:375
in expression starting at /home/vagrant/.julia/v0.7/GaussianProcesses/src/GaussianProcesses.jl:2
in expression starting at /home/vagrant/.julia/v0.7/GaussianProcesses/test/runtests.jl:1
┌ Error: ------------------------------------------------------------
│ # Testing failed for GaussianProcesses
│   exception =
│    failed process: Process(`/home/vagrant/julia/bin/julia -Cnative -J/home/vagrant/julia/lib/julia/sys.so --compile=yes --depwarn=yes --code-coverage=none --color=no --compiled-modules=yes --check-bounds=yes --warn-overwrite=yes --startup-file=yes /home/vagrant/.julia/v0.7/GaussianProcesses/test/runtests.jl`, ProcessExited(1)) [1]
│    Stacktrace:
│     [1] error(::String, ::Base.Process, ::String, ::Int64, ::String) at ./error.jl:42
│     [2] pipeline_error(::Base.Process) at ./process.jl:707
│     [3] run(::Cmd) at ./process.jl:669
│     [4] (::getfield(Base.Pkg.Entry, Symbol("##91#94")){Bool,String,Array{AbstractString,1}})() at ./pkg/entry.jl:730
│     [5] cd(::getfield(Base.Pkg.Entry, Symbol("##91#94")){Bool,String,Array{AbstractString,1}}, ::String) at ./file.jl:70
│     [6] #test!#90(::Bool, ::Function, ::String, ::Array{AbstractString,1}, ::Array{AbstractString,1}, ::Array{AbstractString,1}) at ./pkg/entry.jl:718
│     [7] (::getfield(Base.Pkg.Entry, Symbol("#kw##test!")))(::NamedTuple{(:coverage,),Tuple{Bool}}, ::typeof(Base.Pkg.Entry.test!), ::String, ::Array{AbstractString,1}, ::Array{AbstractString,1}, ::Array{AbstractString,1}) at ./<missing>:0
│     [8] #test#98(::Bool, ::Function, ::Array{AbstractString,1}) at ./pkg/entry.jl:757
│     [9] (::getfield(Base.Pkg.Entry, Symbol("#kw##test")))(::NamedTuple{(:coverage,),Tuple{Bool}}, ::typeof(Base.Pkg.Entry.test), ::Array{AbstractString,1}) at ./<missing>:0
│     [10] (::getfield(Base.Pkg.Dir, Symbol("##4#7")){Base.Iterators.IndexValue{Symbol,Bool,Tuple{Symbol},NamedTuple{(:coverage,),Tuple{Bool}}},typeof(Base.Pkg.Entry.test),Tuple{Array{AbstractString,1}}})() at ./pkg/dir.jl:36
│     [11] cd(::getfield(Base.Pkg.Dir, Symbol("##4#7")){Base.Iterators.IndexValue{Symbol,Bool,Tuple{Symbol},NamedTuple{(:coverage,),Tuple{Bool}}},typeof(Base.Pkg.Entry.test),Tuple{Array{AbstractString,1}}}, ::String) at ./file.jl:70
│     [12] #cd#1(::Base.Iterators.IndexValue{Symbol,Bool,Tuple{Symbol},NamedTuple{(:coverage,),Tuple{Bool}}}, ::Function, ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N} where N) at ./pkg/dir.jl:36
│     [13] (::getfield(Base.Pkg.Dir, Symbol("#kw##cd")))(::NamedTuple{(:coverage,),Tuple{Bool}}, ::typeof(Base.Pkg.Dir.cd), ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N} where N) at ./<missing>:0
│     [14] #test#3(::Bool, ::Function, ::String, ::Vararg{String,N} where N) at ./pkg/pkg.jl:274
│     [15] test(::String, ::Vararg{String,N} where N) at ./pkg/pkg.jl:274
│     [16] top-level scope
│     [17] eval at ./boot.jl:295 [inlined]
│     [18] eval(::Module, ::Expr) at ./sysimg.jl:71
│     [19] process_options(::Base.JLOptions) at ./client.jl:301
│     [20] _start() at ./client.jl:375
└ @ Base.Pkg.Entry entry.jl:733
[ Info: No packages to install, update or remove
ERROR: GaussianProcesses had test errors

>>> End of log
