>>> 'Pkg.add("GaussianProcesses")' log
[ Info: Cloning cache of GaussianProcesses from https://github.com/STOR-i/GaussianProcesses.jl.git @ Base.Pkg.Cache cache.jl:43
[ Info: Installing BinDeps v0.8.2 @ Base.Pkg.Entry entry.jl:543
[ Info: Installing Calculus v0.2.2 @ Base.Pkg.Entry entry.jl:543
[ Info: Installing DataStructures v0.7.3 @ Base.Pkg.Entry entry.jl:543
[ Info: Installing DiffBase v0.2.0 @ Base.Pkg.Entry entry.jl:543
[ Info: Installing Distances v0.5.0 @ Base.Pkg.Entry entry.jl:543
[ Info: Installing Distributions v0.15.0 @ Base.Pkg.Entry entry.jl:543
[ Info: Installing FastGaussQuadrature v0.3.0 @ Base.Pkg.Entry entry.jl:543
[ Info: Installing Formatting v0.3.0 @ Base.Pkg.Entry entry.jl:543
[ Info: Installing ForwardDiff v0.4.2 @ Base.Pkg.Entry entry.jl:543
[ Info: Installing FunctionWrappers v0.1.0 @ Base.Pkg.Entry entry.jl:543
[ Info: Installing GaussianProcesses v0.5.0 @ Base.Pkg.Entry entry.jl:543
[ Info: Installing Klara v0.9.2 @ Base.Pkg.Entry entry.jl:543
[ Info: Installing LineSearches v0.1.5 @ Base.Pkg.Entry entry.jl:543
[ Info: Installing NLSolversBase v2.1.3 @ Base.Pkg.Entry entry.jl:543
[ Info: Installing NaNMath v0.3.0 @ Base.Pkg.Entry entry.jl:543
[ Info: Installing Optim v0.7.8 @ Base.Pkg.Entry entry.jl:543
[ Info: Installing PDMats v0.8.0 @ Base.Pkg.Entry entry.jl:543
[ Info: Installing PositiveFactorizations v0.1.0 @ Base.Pkg.Entry entry.jl:543
[ Info: Installing QuadGK v0.2.0 @ Base.Pkg.Entry entry.jl:543
[ Info: Installing RecipesBase v0.2.3 @ Base.Pkg.Entry entry.jl:543
[ Info: Installing ReverseDiff v0.1.5 @ Base.Pkg.Entry entry.jl:543
[ Info: Installing Rmath v0.3.1 @ Base.Pkg.Entry entry.jl:543
[ Info: Installing SHA v0.5.2 @ Base.Pkg.Entry entry.jl:543
[ Info: Installing ScikitLearnBase v0.3.0 @ Base.Pkg.Entry entry.jl:543
[ Info: Installing SortingAlgorithms v0.2.0 @ Base.Pkg.Entry entry.jl:543
[ Info: Installing SpecialFunctions v0.3.6 @ Base.Pkg.Entry entry.jl:543
[ Info: Installing StatsBase v0.19.4 @ Base.Pkg.Entry entry.jl:543
[ Info: Installing StatsFuns v0.5.0 @ Base.Pkg.Entry entry.jl:543
[ Info: Installing URIParser v0.3.0 @ Base.Pkg.Entry entry.jl:543
[ Info: Building SpecialFunctions @ Main none:10
WARNING: importing deprecated binding Base.Void into __anon__.
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/SpecialFunctions/deps/build.jl:6
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/SpecialFunctions/deps/build.jl:6
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/SpecialFunctions/deps/build.jl:6
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/SpecialFunctions/deps/build.jl:6
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/SpecialFunctions/deps/build.jl:6
WARNING: Base.Void is deprecated, use Nothing instead.
  likely near /home/vagrant/.julia/v0.7/SpecialFunctions/deps/build.jl:6
WARNING: importing deprecated binding Base.Associative into BinDeps.
WARNING: Base.Associative is deprecated, use AbstractDict instead.
  likely near /home/vagrant/.julia/v0.7/SpecialFunctions/deps/binaries.jl:44
in @install at /home/vagrant/.julia/v0.7/BinDeps/src/dependencies.jl
┌ Warning: `unshift!` is deprecated, use `pushfirst!` instead.
│   caller = #_find_library#48(::Type, ::Function, ::BinDeps.LibraryDependency) at dependencies.jl:652
└ @ BinDeps dependencies.jl:652
┌ Warning: `unshift!` is deprecated, use `pushfirst!` instead.
│   caller = #_find_library#48(::DataType, ::Function, ::BinDeps.LibraryDependency) at dependencies.jl:652
└ @ BinDeps dependencies.jl:652
[ Info: Building Rmath @ Main none:10
WARNING: importing deprecated binding Base.Associative into BinDeps.
WARNING: Base.Associative is deprecated, use AbstractDict instead.
  likely near /home/vagrant/.julia/v0.7/Rmath/deps/build.jl:47
in @install at /home/vagrant/.julia/v0.7/BinDeps/src/dependencies.jl
[ Info: Package database updated @ Base.Pkg.Entry entry.jl:32
┌ Info: METADATA is out-of-date — you may not have the latest version of GaussianProcesses
│ Use `Pkg.update()` to get the latest versions of your packages
└ @ Base.Pkg.Entry entry.jl:74

>>> 'Pkg.test("GaussianProcesses")' log
Julia Version 0.7.0-DEV.3246
Commit 2138144d3a (2018-01-04 02:34 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
      Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-135-generic #184-Ubuntu SMP Wed Oct 18 11:55:51 UTC 2017 x86_64 x86_64
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
              speed         user         nice          sys         idle          irq
       #1  3499 MHz    4775521 s        126 s     237854 s    1154246 s         64 s
       #2  3499 MHz     965856 s         52 s      95207 s    6098481 s          0 s
       
  Memory: 2.93927001953125 GB (803.46875 MB free)
  Uptime: 72696.0 sec
  Load Avg:  1.0634765625  1.0146484375  0.970703125
  WORD_SIZE: 64
  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant
Packages:
  Package Directory: /home/vagrant/.julia/v0.7
  Package Status:
2 required packages:
 - GaussianProcesses             0.5.0
 - JSON                          0.16.3
30 additional packages:
 - BinDeps                       0.8.2
 - Calculus                      0.2.2
 - Compat                        0.42.0
 - DataStructures                0.7.3
 - DiffBase                      0.2.0
 - Distances                     0.5.0
 - Distributions                 0.15.0
 - FastGaussQuadrature           0.3.0
 - Formatting                    0.3.0
 - ForwardDiff                   0.4.2
 - FunctionWrappers              0.1.0
 - Klara                         0.9.2
 - LineSearches                  0.1.5
 - NLSolversBase                 2.1.3
 - NaNMath                       0.3.0
 - Nullables                     0.0.2
 - Optim                         0.7.8
 - PDMats                        0.8.0
 - PositiveFactorizations        0.1.0
 - QuadGK                        0.2.0
 - RecipesBase                   0.2.3
 - ReverseDiff                   0.1.5
 - Rmath                         0.3.1
 - SHA                           0.5.2
 - ScikitLearnBase               0.3.0
 - SortingAlgorithms             0.2.0
 - SpecialFunctions              0.3.6
 - StatsBase                     0.19.4
 - StatsFuns                     0.5.0
 - URIParser                     0.3.0
[ Info: Computing test dependencies for GaussianProcesses... @ Base.Pkg.Entry entry.jl:713
[ Info: No packages to install, update or remove @ Base.Pkg.Entry entry.jl:517
[ Info: Testing GaussianProcesses @ Base.Pkg.Entry entry.jl:723
┌ Warning: Deprecated syntax `parametric method syntax DiffResult{V, O}(value::V, derivs::NTuple{O, Any})` around /home/vagrant/.julia/v0.7/DiffBase/src/results.jl:22.
│ Use `DiffResult(value::V, derivs::NTuple{O, Any}) where {V, O}` instead.
└ @ nothing results.jl:22
┌ Warning: Deprecated syntax `parametric method syntax Base.eltype{O, V, D}(::Type{DiffResult{O, V, D}})` around /home/vagrant/.julia/v0.7/DiffBase/src/results.jl:81.
│ Use `Base.eltype(#unused#::Type{DiffResult{O, V, D}}) where {O, V, D}` instead.
└ @ nothing results.jl:81
┌ Warning: Deprecated syntax `parametric method syntax derivative{i}(r::DiffResult, ::Type{Val{i}} = Val{1})` around /home/vagrant/.julia/v0.7/DiffBase/src/results.jl:127.
│ Use `derivative(r::DiffResult, #s1::Type{Val{i}} = Val{1}) where i` instead.
└ @ nothing results.jl:127
┌ Warning: Deprecated syntax `parametric method syntax derivative!{O, i}(r::DiffResult{O}, x::Number, ::Type{Val{i}} = Val{1})` around /home/vagrant/.julia/v0.7/DiffBase/src/results.jl:135.
│ Use `derivative!(r::DiffResult{O}, x::Number, #s1::Type{Val{i}} = Val{1}) where {O, i}` instead.
└ @ nothing results.jl:135
┌ Warning: Deprecated syntax `parametric method syntax derivative!{i}(r::DiffResult, x::AbstractArray, ::Type{Val{i}} = Val{1})` around /home/vagrant/.julia/v0.7/DiffBase/src/results.jl:143.
│ Use `derivative!(r::DiffResult, x::AbstractArray, #s3::Type{Val{i}} = Val{1}) where i` instead.
└ @ nothing results.jl:143
┌ Warning: Deprecated syntax `parametric method syntax derivative!{O, i}(f, r::DiffResult{O}, x::Number, ::Type{Val{i}} = Val{1})` around /home/vagrant/.julia/v0.7/DiffBase/src/results.jl:154.
│ Use `derivative!(f, r::DiffResult{O}, x::Number, #s3::Type{Val{i}} = Val{1}) where {O, i}` instead.
└ @ nothing results.jl:154
┌ Warning: Deprecated syntax `parametric method syntax derivative!{i}(f, r::DiffResult, x::AbstractArray, ::Type{Val{i}} = Val{1})` around /home/vagrant/.julia/v0.7/DiffBase/src/results.jl:162.
│ Use `derivative!(f, r::DiffResult, x::AbstractArray, #s3::Type{Val{i}} = Val{1}) where i` instead.
└ @ nothing results.jl:162
┌ Warning: Deprecated syntax `immutable` at /home/vagrant/.julia/v0.7/ForwardDiff/src/partials.jl:1.
│ Use `struct` instead.
└ @ nothing partials.jl:1
┌ Warning: Deprecated syntax `parametric method syntax valtype{N, T}(::Partials{N, T})` around /home/vagrant/.julia/v0.7/ForwardDiff/src/partials.jl:9.
│ Use `valtype(#unused#::Partials{N, T}) where {N, T}` instead.
└ @ nothing partials.jl:9
┌ Warning: Deprecated syntax `parametric method syntax valtype{N, T}(::Type{Partials{N, T}})` around /home/vagrant/.julia/v0.7/ForwardDiff/src/partials.jl:10.
│ Use `valtype(#unused#::Type{Partials{N, T}}) where {N, T}` instead.
└ @ nothing partials.jl:10
┌ Warning: Deprecated syntax `parametric method syntax npartials{N}(::Partials{N})` around /home/vagrant/.julia/v0.7/ForwardDiff/src/partials.jl:12.
│ Use `npartials(#unused#::Partials{N}) where N` instead.
└ @ nothing partials.jl:12
┌ Warning: Deprecated syntax `parametric method syntax npartials{N, T}(::Type{Partials{N, T}})` around /home/vagrant/.julia/v0.7/ForwardDiff/src/partials.jl:13.
│ Use `npartials(#unused#::Type{Partials{N, T}}) where {N, T}` instead.
└ @ nothing partials.jl:13
┌ Warning: Deprecated syntax `parametric method syntax Base.length{N}(::Partials{N})` around /home/vagrant/.julia/v0.7/ForwardDiff/src/partials.jl:15.
│ Use `Base.length(#unused#::Partials{N}) where N` instead.
└ @ nothing partials.jl:15
┌ Warning: Deprecated syntax `parametric method syntax Base.size{N}(::Partials{N})` around /home/vagrant/.julia/v0.7/ForwardDiff/src/partials.jl:16.
│ Use `Base.size(#unused#::Partials{N}) where N` instead.
└ @ nothing partials.jl:16
┌ Warning: Deprecated syntax `parametric method syntax setindex{N, T}(partials::Partials{N, T}, v, i)` around /home/vagrant/.julia/v0.7/ForwardDiff/src/partials.jl:19.
│ Use `setindex(partials::Partials{N, T}, v, i) where {N, T}` instead.
└ @ nothing partials.jl:19
┌ Warning: Deprecated syntax `parametric method syntax Base.zero{N, T}(::Type{Partials{N, T}})` around /home/vagrant/.julia/v0.7/ForwardDiff/src/partials.jl:34.
│ Use `Base.zero(#unused#::Type{Partials{N, T}}) where {N, T}` instead.
└ @ nothing partials.jl:34
┌ Warning: Deprecated syntax `parametric method syntax Base.one{N, T}(::Type{Partials{N, T}})` around /home/vagrant/.julia/v0.7/ForwardDiff/src/partials.jl:37.
│ Use `Base.one(#unused#::Type{Partials{N, T}}) where {N, T}` instead.
└ @ nothing partials.jl:37
┌ Warning: Deprecated syntax `parametric method syntax Base.rand{N, T}(::Type{Partials{N, T}})` around /home/vagrant/.julia/v0.7/ForwardDiff/src/partials.jl:40.
│ Use `Base.rand(#unused#::Type{Partials{N, T}}) where {N, T}` instead.
└ @ nothing partials.jl:40
┌ Warning: Deprecated syntax `parametric method syntax Base.rand{N, T}(rng::AbstractRNG, ::Type{Partials{N, T}})` around /home/vagrant/.julia/v0.7/ForwardDiff/src/partials.jl:42.
│ Use `Base.rand(rng::AbstractRNG, #unused#::Type{Partials{N, T}}) where {N, T}` instead.
└ @ nothing partials.jl:42
┌ Warning: Deprecated syntax `parametric method syntax Base.isequal{N}(a::Partials{N}, b::Partials{N})` around /home/vagrant/.julia/v0.7/ForwardDiff/src/partials.jl:44.
│ Use `Base.isequal(a::Partials{N}, b::Partials{N}) where N` instead.
└ @ nothing partials.jl:44
┌ Warning: Deprecated syntax `parametric method syntax Base.=={N}(a::Partials{N}, b::Partials{N})` around /home/vagrant/.julia/v0.7/ForwardDiff/src/partials.jl:45.
│ Use `Base.==(a::Partials{N}, b::Partials{N}) where N` instead.
└ @ nothing partials.jl:45
┌ Warning: Deprecated syntax `parametric method syntax Base.read{N, T}(io::IO, ::Type{Partials{N, T}})` around /home/vagrant/.julia/v0.7/ForwardDiff/src/partials.jl:54.
│ Use `Base.read(io::IO, #unused#::Type{Partials{N, T}}) where {N, T}` instead.
└ @ nothing partials.jl:54
┌ Warning: Deprecated syntax `parametric method syntax Base.promote_rule{N, A, B}(::Type{Partials{N, A}}, ::Type{Partials{N, B}})` around /home/vagrant/.julia/v0.7/ForwardDiff/src/partials.jl:66.
│ Use `Base.promote_rule(#unused#::Type{Partials{N, A}}, #unused#::Type{Partials{N, B}}) where {N, A, B}` instead.
└ @ nothing partials.jl:66
┌ Warning: Deprecated syntax `parametric method syntax Base.convert{N, T}(::Type{Partials{N, T}}, partials::Partials)` around /home/vagrant/.julia/v0.7/ForwardDiff/src/partials.jl:68.
│ Use `Base.convert(#unused#::Type{Partials{N, T}}, partials::Partials) where {N, T}` instead.
└ @ nothing partials.jl:68
┌ Warning: Deprecated syntax `parametric method syntax Base.convert{N, T}(::Type{Partials{N, T}}, partials::Partials{N, T})` around /home/vagrant/.julia/v0.7/ForwardDiff/src/partials.jl:69.
│ Use `Base.convert(#unused#::Type{Partials{N, T}}, partials::Partials{N, T}) where {N, T}` instead.
└ @ nothing partials.jl:69
┌ Warning: Deprecated syntax `parametric method syntax Base.+{N}(a::Partials{N}, b::Partials{N})` around /home/vagrant/.julia/v0.7/ForwardDiff/src/partials.jl:75.
│ Use `Base.+(a::Partials{N}, b::Partials{N}) where N` instead.
└ @ nothing partials.jl:75
┌ Warning: Deprecated syntax `parametric method syntax Base.-{N}(a::Partials{N}, b::Partials{N})` around /home/vagrant/.julia/v0.7/ForwardDiff/src/partials.jl:76.
│ Use `Base.-(a::Partials{N}, b::Partials{N}) where N` instead.
└ @ nothing partials.jl:76
┌ Warning: Deprecated syntax `parametric method syntax _mul_partials{N}(a::Partials{N}, b::Partials{N}, x_a, x_b)` around /home/vagrant/.julia/v0.7/ForwardDiff/src/partials.jl:99.
│ Use `_mul_partials(a::Partials{N}, b::Partials{N}, x_a, x_b) where N` instead.
└ @ nothing partials.jl:99
┌ Warning: Deprecated syntax `parametric method syntax _mul_partials{N}(a::Partials{N}, b::Partials{N}, x_a, x_b)` around /home/vagrant/.julia/v0.7/ForwardDiff/src/partials.jl:113.
│ Use `_mul_partials(a::Partials{N}, b::Partials{N}, x_a, x_b) where N` instead.
└ @ nothing partials.jl:113
┌ Warning: Deprecated syntax `parametric method syntax Base.+{A, B}(a::Partials{0, A}, b::Partials{0, B})` around /home/vagrant/.julia/v0.7/ForwardDiff/src/partials.jl:120.
│ Use `Base.+(a::Partials{0, A}, b::Partials{0, B}) where {A, B}` instead.
└ @ nothing partials.jl:120
┌ Warning: Deprecated syntax `parametric method syntax Base.-{A, B}(a::Partials{0, A}, b::Partials{0, B})` around /home/vagrant/.julia/v0.7/ForwardDiff/src/partials.jl:121.
│ Use `Base.-(a::Partials{0, A}, b::Partials{0, B}) where {A, B}` instead.
└ @ nothing partials.jl:121
┌ Warning: Deprecated syntax `parametric method syntax Base.-{T}(partials::Partials{0, T})` around /home/vagrant/.julia/v0.7/ForwardDiff/src/partials.jl:122.
│ Use `Base.-(partials::Partials{0, T}) where T` instead.
└ @ nothing partials.jl:122
┌ Warning: Deprecated syntax `parametric method syntax Base.*{T}(partials::Partials{0, T}, x::Real)` around /home/vagrant/.julia/v0.7/ForwardDiff/src/partials.jl:123.
│ Use `Base.*(partials::Partials{0, T}, x::Real) where T` instead.
└ @ nothing partials.jl:123
┌ Warning: Deprecated syntax `parametric method syntax Base.*{T}(x::Real, partials::Partials{0, T})` around /home/vagrant/.julia/v0.7/ForwardDiff/src/partials.jl:124.
│ Use `Base.*(x::Real, partials::Partials{0, T}) where T` instead.
└ @ nothing partials.jl:124
┌ Warning: Deprecated syntax `parametric method syntax Base./{T}(partials::Partials{0, T}, x::Real)` around /home/vagrant/.julia/v0.7/ForwardDiff/src/partials.jl:125.
│ Use `Base./(partials::Partials{0, T}, x::Real) where T` instead.
└ @ nothing partials.jl:125
┌ Warning: Deprecated syntax `parametric method syntax _mul_partials{A, B}(a::Partials{0, A}, b::Partials{0, B}, afactor, bfactor)` around /home/vagrant/.julia/v0.7/ForwardDiff/src/partials.jl:127.
│ Use `_mul_partials(a::Partials{0, A}, b::Partials{0, B}, afactor, bfactor) where {A, B}` instead.
└ @ nothing partials.jl:127
┌ Warning: Deprecated syntax `parametric method syntax _div_partials{A, B}(a::Partials{0, A}, b::Partials{0, B}, afactor, bfactor)` around /home/vagrant/.julia/v0.7/ForwardDiff/src/partials.jl:128.
│ Use `_div_partials(a::Partials{0, A}, b::Partials{0, B}, afactor, bfactor) where {A, B}` instead.
└ @ nothing partials.jl:128
┌ Warning: Deprecated syntax `parametric method syntax iszero_tuple{N, T}(tup::NTuple{N, T})` around /home/vagrant/.julia/v0.7/ForwardDiff/src/partials.jl:154.
│ Use `iszero_tuple(tup::NTuple{N, T}) where {N, T}` instead.
└ @ nothing partials.jl:154
┌ Warning: Deprecated syntax `parametric method syntax zero_tuple{N, T}(::Type{NTuple{N, T}})` around /home/vagrant/.julia/v0.7/ForwardDiff/src/partials.jl:163.
│ Use `zero_tuple(#unused#::Type{NTuple{N, T}}) where {N, T}` instead.
└ @ nothing partials.jl:163
┌ Warning: Deprecated syntax `parametric method syntax one_tuple{N, T}(::Type{NTuple{N, T}})` around /home/vagrant/.julia/v0.7/ForwardDiff/src/partials.jl:171.
│ Use `one_tuple(#unused#::Type{NTuple{N, T}}) where {N, T}` instead.
└ @ nothing partials.jl:171
┌ Warning: Deprecated syntax `parametric method syntax rand_tuple{N, T}(rng::AbstractRNG, ::Type{NTuple{N, T}})` around /home/vagrant/.julia/v0.7/ForwardDiff/src/partials.jl:179.
│ Use `rand_tuple(rng::AbstractRNG, #unused#::Type{NTuple{N, T}}) where {N, T}` instead.
└ @ nothing partials.jl:179
┌ Warning: Deprecated syntax `parametric method syntax rand_tuple{N, T}(::Type{NTuple{N, T}})` around /home/vagrant/.julia/v0.7/ForwardDiff/src/partials.jl:183.
│ Use `rand_tuple(#unused#::Type{NTuple{N, T}}) where {N, T}` instead.
└ @ nothing partials.jl:183
┌ Warning: Deprecated syntax `parametric method syntax scale_tuple{N}(tup::NTuple{N}, x)` around /home/vagrant/.julia/v0.7/ForwardDiff/src/partials.jl:187.
│ Use `scale_tuple(tup::NTuple{N}, x) where N` instead.
└ @ nothing partials.jl:187
┌ Warning: Deprecated syntax `parametric method syntax div_tuple_by_scalar{N}(tup::NTuple{N}, x)` around /home/vagrant/.julia/v0.7/ForwardDiff/src/partials.jl:191.
│ Use `div_tuple_by_scalar(tup::NTuple{N}, x) where N` instead.
└ @ nothing partials.jl:191
┌ Warning: Deprecated syntax `parametric method syntax add_tuples{N}(a::NTuple{N}, b::NTuple{N})` around /home/vagrant/.julia/v0.7/ForwardDiff/src/partials.jl:195.
│ Use `add_tuples(a::NTuple{N}, b::NTuple{N}) where N` instead.
└ @ nothing partials.jl:195
┌ Warning: Deprecated syntax `parametric method syntax sub_tuples{N}(a::NTuple{N}, b::NTuple{N})` around /home/vagrant/.julia/v0.7/ForwardDiff/src/partials.jl:199.
│ Use `sub_tuples(a::NTuple{N}, b::NTuple{N}) where N` instead.
└ @ nothing partials.jl:199
┌ Warning: Deprecated syntax `parametric method syntax minus_tuple{N}(tup::NTuple{N})` around /home/vagrant/.julia/v0.7/ForwardDiff/src/partials.jl:203.
│ Use `minus_tuple(tup::NTuple{N}) where N` instead.
└ @ nothing partials.jl:203
┌ Warning: Deprecated syntax `parametric method syntax mul_tuples{N}(a::NTuple{N}, b::NTuple{N}, afactor, bfactor)` around /home/vagrant/.julia/v0.7/ForwardDiff/src/partials.jl:207.
│ Use `mul_tuples(a::NTuple{N}, b::NTuple{N}, afactor, bfactor) where N` instead.
└ @ nothing partials.jl:207
┌ Warning: Deprecated syntax `parametric method syntax Base.show{N}(io::IO, p::Partials{N})` around /home/vagrant/.julia/v0.7/ForwardDiff/src/partials.jl:214.
│ Use `Base.show(io::IO, p::Partials{N}) where N` instead.
└ @ nothing partials.jl:214
┌ Warning: Deprecated syntax `immutable` at /home/vagrant/.julia/v0.7/ForwardDiff/src/dual.jl:7.
│ Use `struct` instead.
└ @ nothing dual.jl:7
┌ Warning: Deprecated syntax `parametric method syntax Dual{N, T}(value::T, partials::Partials{N, T})` around /home/vagrant/.julia/v0.7/ForwardDiff/src/dual.jl:16.
│ Use `Dual(value::T, partials::Partials{N, T}) where {N, T}` instead.
└ @ nothing dual.jl:16
┌ Warning: Deprecated syntax `parametric method syntax Dual{N, A, B}(value::A, partials::Partials{N, B})` around /home/vagrant/.julia/v0.7/ForwardDiff/src/dual.jl:19.
│ Use `Dual(value::A, partials::Partials{N, B}) where {N, A, B}` instead.
└ @ nothing dual.jl:19
┌ Warning: Deprecated syntax `parametric method syntax npartials{N}(::Dual{N})` around /home/vagrant/.julia/v0.7/ForwardDiff/src/dual.jl:41.
│ Use `npartials(#unused#::Dual{N}) where N` instead.
└ @ nothing dual.jl:41
┌ Warning: Deprecated syntax `parametric method syntax npartials{N, T}(::Type{Dual{N, T}})` around /home/vagrant/.julia/v0.7/ForwardDiff/src/dual.jl:42.
│ Use `npartials(#unused#::Type{Dual{N, T}}) where {N, T}` instead.
└ @ nothing dual.jl:42
┌ Warning: Deprecated syntax `parametric method syntax degree{T}(::T)` around /home/vagrant/.julia/v0.7/ForwardDiff/src/dual.jl:44.
│ Use `degree(#unused#::T) where T` instead.
└ @ nothing dual.jl:44
┌ Warning: Deprecated syntax `parametric method syntax degree{T}(::Type{T})` around /home/vagrant/.julia/v0.7/ForwardDiff/src/dual.jl:45.
│ Use `degree(#unused#::Type{T}) where T` instead.
└ @ nothing dual.jl:45
┌ Warning: Deprecated syntax `parametric method syntax degree{N, T}(::Type{Dual{N, T}})` around /home/vagrant/.julia/v0.7/ForwardDiff/src/dual.jl:46.
│ Use `degree(#unused#::Type{Dual{N, T}}) where {N, T}` instead.
└ @ nothing dual.jl:46
┌ Warning: Deprecated syntax `parametric method syntax valtype{T}(::T)` around /home/vagrant/.julia/v0.7/ForwardDiff/src/dual.jl:48.
│ Use `valtype(#unused#::T) where T` instead.
└ @ nothing dual.jl:48
┌ Warning: Deprecated syntax `parametric method syntax valtype{T}(::Type{T})` around /home/vagrant/.julia/v0.7/ForwardDiff/src/dual.jl:49.
│ Use `valtype(#unused#::Type{T}) where T` instead.
└ @ nothing dual.jl:49
┌ Warning: Deprecated syntax `parametric method syntax valtype{N, T}(::Dual{N, T})` around /home/vagrant/.julia/v0.7/ForwardDiff/src/dual.jl:50.
│ Use `valtype(#unused#::Dual{N, T}) where {N, T}` instead.
└ @ nothing dual.jl:50
┌ Warning: Deprecated syntax `parametric method syntax valtype{N, T}(::Type{Dual{N, T}})` around /home/vagrant/.julia/v0.7/ForwardDiff/src/dual.jl:51.
│ Use `valtype(#unused#::Type{Dual{N, T}}) where {N, T}` instead.
└ @ nothing dual.jl:51
┌ Warning: Deprecated syntax `parametric method syntax Base.eps{D <: Dual}(::Type{D})` around /home/vagrant/.julia/v0.7/ForwardDiff/src/dual.jl:101.
│ Use `Base.eps(#unused#::Type{D}) where D <: Dual` instead.
└ @ nothing dual.jl:101
┌ Warning: Deprecated syntax `parametric method syntax Base.rtoldefault{N, T <: Real}(::Type{Dual{N, T}})` around /home/vagrant/.julia/v0.7/ForwardDiff/src/dual.jl:103.
│ Use `Base.rtoldefault(#unused#::Type{Dual{N, T}}) where {N, T <: Real}` instead.
└ @ nothing dual.jl:103
┌ Warning: Deprecated syntax `parametric method syntax Base.floor{T <: Real}(::Type{T}, n::Dual)` around /home/vagrant/.julia/v0.7/ForwardDiff/src/dual.jl:105.
│ Use `Base.floor(#unused#::Type{T}, n::Dual) where T <: Real` instead.
└ @ nothing dual.jl:105
┌ Warning: Deprecated syntax `parametric method syntax Base.ceil{T <: Real}(::Type{T}, n::Dual)` around /home/vagrant/.julia/v0.7/ForwardDiff/src/dual.jl:108.
│ Use `Base.ceil(#unused#::Type{T}, n::Dual) where T <: Real` instead.
└ @ nothing dual.jl:108
┌ Warning: Deprecated syntax `parametric method syntax Base.trunc{T <: Real}(::Type{T}, n::Dual)` around /home/vagrant/.julia/v0.7/ForwardDiff/src/dual.jl:111.
│ Use `Base.trunc(#unused#::Type{T}, n::Dual) where T <: Real` instead.
└ @ nothing dual.jl:111
┌ Warning: Deprecated syntax `parametric method syntax Base.round{T <: Real}(::Type{T}, n::Dual)` around /home/vagrant/.julia/v0.7/ForwardDiff/src/dual.jl:114.
│ Use `Base.round(#unused#::Type{T}, n::Dual) where T <: Real` instead.
└ @ nothing dual.jl:114
┌ Warning: Deprecated syntax `parametric method syntax Base.read{N, T}(io::IO, ::Type{Dual{N, T}})` around /home/vagrant/.julia/v0.7/ForwardDiff/src/dual.jl:121.
│ Use `Base.read(io::IO, #unused#::Type{Dual{N, T}}) where {N, T}` instead.
└ @ nothing dual.jl:121
┌ Warning: Deprecated syntax `parametric method syntax Base.zero{N, T}(::Type{Dual{N, T}})` around /home/vagrant/.julia/v0.7/ForwardDiff/src/dual.jl:132.
│ Use `Base.zero(#unused#::Type{Dual{N, T}}) where {N, T}` instead.
└ @ nothing dual.jl:132
┌ Warning: Deprecated syntax `parametric method syntax Base.one{N, T}(::Type{Dual{N, T}})` around /home/vagrant/.julia/v0.7/ForwardDiff/src/dual.jl:135.
│ Use `Base.one(#unused#::Type{Dual{N, T}}) where {N, T}` instead.
└ @ nothing dual.jl:135
┌ Warning: Deprecated syntax `parametric method syntax Base.rand{N, T}(::Type{Dual{N, T}})` around /home/vagrant/.julia/v0.7/ForwardDiff/src/dual.jl:138.
│ Use `Base.rand(#unused#::Type{Dual{N, T}}) where {N, T}` instead.
└ @ nothing dual.jl:138
┌ Warning: Deprecated syntax `parametric method syntax Base.rand{N, T}(rng::AbstractRNG, ::Type{Dual{N, T}})` around /home/vagrant/.julia/v0.7/ForwardDiff/src/dual.jl:140.
│ Use `Base.rand(rng::AbstractRNG, #unused#::Type{Dual{N, T}}) where {N, T}` instead.
└ @ nothing dual.jl:140
┌ Warning: Deprecated syntax `parametric method syntax ForwardDiff.Base.isequal{#15#N, #16#M, #17#A <: ForwardDiff.Real, #18#B <: ForwardDiff.Real}(#13#a::ForwardDiff.Dual{#15#N, #17#A}, #14#b::ForwardDiff.Dual{#16#M, #18#B})` around /home/vagrant/.julia/v0.7/ForwardDiff/src/dual.jl:88.
│ Use `ForwardDiff.Base.isequal(#13#a::ForwardDiff.Dual{#15#N, #17#A}, #14#b::ForwardDiff.Dual{#16#M, #18#B}) where {#15#N, #16#M, #17#A <: ForwardDiff.Real, #18#B <: ForwardDiff.Real}` instead.
└ @ nothing dual.jl:88
┌ Warning: Deprecated syntax `parametric method syntax ForwardDiff.Base.isequal{#21#A <: ForwardDiff.Real, #22#B <: ForwardDiff.Real}(#19#a::ForwardDiff.Dual{0, #21#A}, #20#b::ForwardDiff.Dual{0, #22#B})` around /home/vagrant/.julia/v0.7/ForwardDiff/src/dual.jl:90.
│ Use `ForwardDiff.Base.isequal(#19#a::ForwardDiff.Dual{0, #21#A}, #20#b::ForwardDiff.Dual{0, #22#B}) where {#21#A <: ForwardDiff.Real, #22#B <: ForwardDiff.Real}` instead.
└ @ nothing dual.jl:90
┌ Warning: Deprecated syntax `parametric method syntax ForwardDiff.Base.isequal{#25#M, #26#A <: ForwardDiff.Real, #27#B <: ForwardDiff.Real}(#23#a::ForwardDiff.Dual{0, #26#A}, #24#b::ForwardDiff.Dual{#25#M, #27#B})` around /home/vagrant/.julia/v0.7/ForwardDiff/src/dual.jl:91.
│ Use `ForwardDiff.Base.isequal(#23#a::ForwardDiff.Dual{0, #26#A}, #24#b::ForwardDiff.Dual{#25#M, #27#B}) where {#25#M, #26#A <: ForwardDiff.Real, #27#B <: ForwardDiff.Real}` instead.
└ @ nothing dual.jl:91
┌ Warning: Deprecated syntax `parametric method syntax ForwardDiff.Base.isequal{#30#N, #31#A <: ForwardDiff.Real, #32#B <: ForwardDiff.Real}(#28#a::ForwardDiff.Dual{#30#N, #31#A}, #29#b::ForwardDiff.Dual{0, #32#B})` around /home/vagrant/.julia/v0.7/ForwardDiff/src/dual.jl:92.
│ Use `ForwardDiff.Base.isequal(#28#a::ForwardDiff.Dual{#30#N, #31#A}, #29#b::ForwardDiff.Dual{0, #32#B}) where {#30#N, #31#A <: ForwardDiff.Real, #32#B <: ForwardDiff.Real}` instead.
└ @ nothing dual.jl:92
┌ Warning: Deprecated syntax `parametric method syntax Base.isequal{N}(a::Dual{N}, b::Dual{N})` around /home/vagrant/.julia/v0.7/ForwardDiff/src/dual.jl:147.
│ Use `Base.isequal(a::Dual{N}, b::Dual{N}) where N` instead.
└ @ nothing dual.jl:147
┌ Warning: Deprecated syntax `parametric method syntax ForwardDiff.Base.=={#35#N, #36#M, #37#A <: ForwardDiff.Real, #38#B <: ForwardDiff.Real}(#33#a::ForwardDiff.Dual{#35#N, #37#A}, #34#b::ForwardDiff.Dual{#36#M, #38#B})` around /home/vagrant/.julia/v0.7/ForwardDiff/src/dual.jl:88.
│ Use `ForwardDiff.Base.==(#33#a::ForwardDiff.Dual{#35#N, #37#A}, #34#b::ForwardDiff.Dual{#36#M, #38#B}) where {#35#N, #36#M, #37#A <: ForwardDiff.Real, #38#B <: ForwardDiff.Real}` instead.
└ @ nothing dual.jl:88
┌ Warning: Deprecated syntax `parametric method syntax ForwardDiff.Base.=={#41#A <: ForwardDiff.Real, #42#B <: ForwardDiff.Real}(#39#a::ForwardDiff.Dual{0, #41#A}, #40#b::ForwardDiff.Dual{0, #42#B})` around /home/vagrant/.julia/v0.7/ForwardDiff/src/dual.jl:90.
│ Use `ForwardDiff.Base.==(#39#a::ForwardDiff.Dual{0, #41#A}, #40#b::ForwardDiff.Dual{0, #42#B}) where {#41#A <: ForwardDiff.Real, #42#B <: ForwardDiff.Real}` instead.
└ @ nothing dual.jl:90
┌ Warning: Deprecated syntax `parametric method syntax ForwardDiff.Base.=={#45#M, #46#A <: ForwardDiff.Real, #47#B <: ForwardDiff.Real}(#43#a::ForwardDiff.Dual{0, #46#A}, #44#b::ForwardDiff.Dual{#45#M, #47#B})` around /home/vagrant/.julia/v0.7/ForwardDiff/src/dual.jl:91.
│ Use `ForwardDiff.Base.==(#43#a::ForwardDiff.Dual{0, #46#A}, #44#b::ForwardDiff.Dual{#45#M, #47#B}) where {#45#M, #46#A <: ForwardDiff.Real, #47#B <: ForwardDiff.Real}` instead.
└ @ nothing dual.jl:91
┌ Warning: Deprecated syntax `parametric method syntax ForwardDiff.Base.=={#50#N, #51#A <: ForwardDiff.Real, #52#B <: ForwardDiff.Real}(#48#a::ForwardDiff.Dual{#50#N, #51#A}, #49#b::ForwardDiff.Dual{0, #52#B})` around /home/vagrant/.julia/v0.7/ForwardDiff/src/dual.jl:92.
│ Use `ForwardDiff.Base.==(#48#a::ForwardDiff.Dual{#50#N, #51#A}, #49#b::ForwardDiff.Dual{0, #52#B}) where {#50#N, #51#A <: ForwardDiff.Real, #52#B <: ForwardDiff.Real}` instead.
└ @ nothing dual.jl:92
┌ Warning: Deprecated syntax `parametric method syntax Base.=={N}(a::Dual{N}, b::Dual{N})` around /home/vagrant/.julia/v0.7/ForwardDiff/src/dual.jl:148.
│ Use `Base.==(a::Dual{N}, b::Dual{N}) where N` instead.
└ @ nothing dual.jl:148
┌ Warning: Deprecated syntax `parametric method syntax ForwardDiff.Base.isless{#55#N, #56#M, #57#A <: ForwardDiff.Real, #58#B <: ForwardDiff.Real}(#53#a::ForwardDiff.Dual{#55#N, #57#A}, #54#b::ForwardDiff.Dual{#56#M, #58#B})` around /home/vagrant/.julia/v0.7/ForwardDiff/src/dual.jl:88.
│ Use `ForwardDiff.Base.isless(#53#a::ForwardDiff.Dual{#55#N, #57#A}, #54#b::ForwardDiff.Dual{#56#M, #58#B}) where {#55#N, #56#M, #57#A <: ForwardDiff.Real, #58#B <: ForwardDiff.Real}` instead.
└ @ nothing dual.jl:88
┌ Warning: Deprecated syntax `parametric method syntax ForwardDiff.Base.isless{#61#A <: ForwardDiff.Real, #62#B <: ForwardDiff.Real}(#59#a::ForwardDiff.Dual{0, #61#A}, #60#b::ForwardDiff.Dual{0, #62#B})` around /home/vagrant/.julia/v0.7/ForwardDiff/src/dual.jl:90.
│ Use `ForwardDiff.Base.isless(#59#a::ForwardDiff.Dual{0, #61#A}, #60#b::ForwardDiff.Dual{0, #62#B}) where {#61#A <: ForwardDiff.Real, #62#B <: ForwardDiff.Real}` instead.
└ @ nothing dual.jl:90
┌ Warning: Deprecated syntax `parametric method syntax ForwardDiff.Base.isless{#65#M, #66#A <: ForwardDiff.Real, #67#B <: ForwardDiff.Real}(#63#a::ForwardDiff.Dual{0, #66#A}, #64#b::ForwardDiff.Dual{#65#M, #67#B})` around /home/vagrant/.julia/v0.7/ForwardDiff/src/dual.jl:91.
│ Use `ForwardDiff.Base.isless(#63#a::ForwardDiff.Dual{0, #66#A}, #64#b::ForwardDiff.Dual{#65#M, #67#B}) where {#65#M, #66#A <: ForwardDiff.Real, #67#B <: ForwardDiff.Real}` instead.
└ @ nothing dual.jl:91
┌ Warning: Deprecated syntax `parametric method syntax ForwardDiff.Base.isless{#70#N, #71#A <: ForwardDiff.Real, #72#B <: ForwardDiff.Real}(#68#a::ForwardDiff.Dual{#70#N, #71#A}, #69#b::ForwardDiff.Dual{0, #72#B})` around /home/vagrant/.julia/v0.7/ForwardDiff/src/dual.jl:92.
│ Use `ForwardDiff.Base.isless(#68#a::ForwardDiff.Dual{#70#N, #71#A}, #69#b::ForwardDiff.Dual{0, #72#B}) where {#70#N, #71#A <: ForwardDiff.Real, #72#B <: ForwardDiff.Real}` instead.
└ @ nothing dual.jl:92
┌ Warning: Deprecated syntax `parametric method syntax Base.isless{N}(a::Dual{N}, b::Dual{N})` around /home/vagrant/.julia/v0.7/ForwardDiff/src/dual.jl:149.
│ Use `Base.isless(a::Dual{N}, b::Dual{N}) where N` instead.
└ @ nothing dual.jl:149
┌ Warning: Deprecated syntax `parametric method syntax ForwardDiff.Base.<{#75#N, #76#M, #77#A <: ForwardDiff.Real, #78#B <: ForwardDiff.Real}(#73#a::ForwardDiff.Dual{#75#N, #77#A}, #74#b::ForwardDiff.Dual{#76#M, #78#B})` around /home/vagrant/.julia/v0.7/ForwardDiff/src/dual.jl:88.
│ Use `ForwardDiff.Base.<(#73#a::ForwardDiff.Dual{#75#N, #77#A}, #74#b::ForwardDiff.Dual{#76#M, #78#B}) where {#75#N, #76#M, #77#A <: ForwardDiff.Real, #78#B <: ForwardDiff.Real}` instead.
└ @ nothing dual.jl:88
┌ Warning: Deprecated syntax `parametric method syntax ForwardDiff.Base.<{#81#A <: ForwardDiff.Real, #82#B <: ForwardDiff.Real}(#79#a::ForwardDiff.Dual{0, #81#A}, #80#b::ForwardDiff.Dual{0, #82#B})` around /home/vagrant/.julia/v0.7/ForwardDiff/src/dual.jl:90.
│ Use `ForwardDiff.Base.<(#79#a::ForwardDiff.Dual{0, #81#A}, #80#b::ForwardDiff.Dual{0, #82#B}) where {#81#A <: ForwardDiff.Real, #82#B <: ForwardDiff.Real}` instead.
└ @ nothing dual.jl:90
┌ Warning: Deprecated syntax `parametric method syntax ForwardDiff.Base.<{#85#M, #86#A <: ForwardDiff.Real, #87#B <: ForwardDiff.Real}(#83#a::ForwardDiff.Dual{0, #86#A}, #84#b::ForwardDiff.Dual{#85#M, #87#B})` around /home/vagrant/.julia/v0.7/ForwardDiff/src/dual.jl:91.
│ Use `ForwardDiff.Base.<(#83#a::ForwardDiff.Dual{0, #86#A}, #84#b::ForwardDiff.Dual{#85#M, #87#B}) where {#85#M, #86#A <: ForwardDiff.Real, #87#B <: ForwardDiff.Real}` instead.
└ @ nothing dual.jl:91
┌ Warning: Deprecated syntax `parametric method syntax ForwardDiff.Base.<{#90#N, #91#A <: ForwardDiff.Real, #92#B <: ForwardDiff.Real}(#88#a::ForwardDiff.Dual{#90#N, #91#A}, #89#b::ForwardDiff.Dual{0, #92#B})` around /home/vagrant/.julia/v0.7/ForwardDiff/src/dual.jl:92.
│ Use `ForwardDiff.Base.<(#88#a::ForwardDiff.Dual{#90#N, #91#A}, #89#b::ForwardDiff.Dual{0, #92#B}) where {#90#N, #91#A <: ForwardDiff.Real, #92#B <: ForwardDiff.Real}` instead.
└ @ nothing dual.jl:92
┌ Warning: Deprecated syntax `parametric method syntax Base.<{N}(a::Dual{N}, b::Dual{N})` around /home/vagrant/.julia/v0.7/ForwardDiff/src/dual.jl:150.
│ Use `Base.<(a::Dual{N}, b::Dual{N}) where N` instead.
└ @ nothing dual.jl:150
┌ Warning: Deprecated syntax `parametric method syntax ForwardDiff.Base.<={#95#N, #96#M, #97#A <: ForwardDiff.Real, #98#B <: ForwardDiff.Real}(#93#a::ForwardDiff.Dual{#95#N, #97#A}, #94#b::ForwardDiff.Dual{#96#M, #98#B})` around /home/vagrant/.julia/v0.7/ForwardDiff/src/dual.jl:88.
│ Use `ForwardDiff.Base.<=(#93#a::ForwardDiff.Dual{#95#N, #97#A}, #94#b::ForwardDiff.Dual{#96#M, #98#B}) where {#95#N, #96#M, #97#A <: ForwardDiff.Real, #98#B <: ForwardDiff.Real}` instead.
└ @ nothing dual.jl:88
┌ Warning: Deprecated syntax `parametric method syntax ForwardDiff.Base.<={#101#A <: ForwardDiff.Real, #102#B <: ForwardDiff.Real}(#99#a::ForwardDiff.Dual{0, #101#A}, #100#b::ForwardDiff.Dual{0, #102#B})` around /home/vagrant/.julia/v0.7/ForwardDiff/src/dual.jl:90.
│ Use `ForwardDiff.Base.<=(#99#a::ForwardDiff.Dual{0, #101#A}, #100#b::ForwardDiff.Dual{0, #102#B}) where {#101#A <: ForwardDiff.Real, #102#B <: ForwardDiff.Real}` instead.
└ @ nothing dual.jl:90
┌ Warning: Deprecated syntax `parametric method syntax ForwardDiff.Base.<={#105#M, #106#A <: ForwardDiff.Real, #107#B <: ForwardDiff.Real}(#103#a::ForwardDiff.Dual{0, #106#A}, #104#b::ForwardDiff.Dual{#105#M, #107#B})` around /home/vagrant/.julia/v0.7/ForwardDiff/src/dual.jl:91.
│ Use `ForwardDiff.Base.<=(#103#a::ForwardDiff.Dual{0, #106#A}, #104#b::ForwardDiff.Dual{#105#M, #107#B}) where {#105#M, #106#A <: ForwardDiff.Real, #107#B <: ForwardDiff.Real}` instead.
└ @ nothing dual.jl:91
┌ Warning: Deprecated syntax `parametric method syntax ForwardDiff.Base.<={#110#N, #111#A <: ForwardDiff.Real, #112#B <: ForwardDiff.Real}(#108#a::ForwardDiff.Dual{#110#N, #111#A}, #109#b::ForwardDiff.Dual{0, #112#B})` around /home/vagrant/.julia/v0.7/ForwardDiff/src/dual.jl:92.
│ Use `ForwardDiff.Base.<=(#108#a::ForwardDiff.Dual{#110#N, #111#A}, #109#b::ForwardDiff.Dual{0, #112#B}) where {#110#N, #111#A <: ForwardDiff.Real, #112#B <: ForwardDiff.Real}` instead.
└ @ nothing dual.jl:92
┌ Warning: Deprecated syntax `parametric method syntax Base.<={N}(a::Dual{N}, b::Dual{N})` around /home/vagrant/.julia/v0.7/ForwardDiff/src/dual.jl:151.
│ Use `Base.<=(a::Dual{N}, b::Dual{N}) where N` instead.
└ @ nothing dual.jl:151
┌ Warning: Deprecated syntax `parametric method syntax Base.promote_rule{N1, N2, A <: Real, B <: Real}(D1::Type{Dual{N1, A}}, D2::Type{Dual{N2, B}})` around /home/vagrant/.julia/v0.7/ForwardDiff/src/dual.jl:182.
│ Use `Base.promote_rule(D1::Type{Dual{N1, A}}, D2::Type{Dual{N2, B}}) where {N1, N2, A <: Real, B <: Real}` instead.
└ @ nothing dual.jl:182
┌ Warning: Deprecated syntax `parametric method syntax Base.promote_rule{N, A <: Real, B <: Real}(::Type{Dual{N, A}}, ::Type{Dual{N, B}})` around /home/vagrant/.julia/v0.7/ForwardDiff/src/dual.jl:183.
│ Use `Base.promote_rule(#unused#::Type{Dual{N, A}}, #unused#::Type{Dual{N, B}}) where {N, A <: Real, B <: Real}` instead.
└ @ nothing dual.jl:183
┌ Warning: Deprecated syntax `parametric method syntax Base.promote_rule{N, T <: Real}(::Type{Dual{N, T}}, ::Type{BigFloat})` around /home/vagrant/.julia/v0.7/ForwardDiff/src/dual.jl:184.
│ Use `Base.promote_rule(#unused#::Type{Dual{N, T}}, #unused#::Type{BigFloat}) where {N, T <: Real}` instead.
└ @ nothing dual.jl:184
┌ Warning: Deprecated syntax `parametric method syntax Base.promote_rule{N, T <: Real}(::Type{BigFloat}, ::Type{Dual{N, T}})` around /home/vagrant/.julia/v0.7/ForwardDiff/src/dual.jl:185.
│ Use `Base.promote_rule(#unused#::Type{BigFloat}, #unused#::Type{Dual{N, T}}) where {N, T <: Real}` instead.
└ @ nothing dual.jl:185
┌ Warning: Deprecated syntax `parametric method syntax Base.promote_rule{N, T <: Real}(::Type{Dual{N, T}}, ::Type{Bool})` around /home/vagrant/.julia/v0.7/ForwardDiff/src/dual.jl:186.
│ Use `Base.promote_rule(#unused#::Type{Dual{N, T}}, #unused#::Type{Bool}) where {N, T <: Real}` instead.
└ @ nothing dual.jl:186
┌ Warning: Deprecated syntax `parametric method syntax Base.promote_rule{N, T <: Real}(::Type{Bool}, ::Type{Dual{N, T}})` around /home/vagrant/.julia/v0.7/ForwardDiff/src/dual.jl:187.
│ Use `Base.promote_rule(#unused#::Type{Bool}, #unused#::Type{Dual{N, T}}) where {N, T <: Real}` instead.
└ @ nothing dual.jl:187
┌ Warning: Deprecated syntax `parametric method syntax Base.promote_rule{N, T <: Real, s}(::Type{Dual{N, T}}, ::Type{Irrational{s}})` around /home/vagrant/.julia/v0.7/ForwardDiff/src/dual.jl:188.
│ Use `Base.promote_rule(#unused#::Type{Dual{N, T}}, #unused#::Type{Irrational{s}}) where {N, T <: Real, s}` instead.
└ @ nothing dual.jl:188
┌ Warning: Deprecated syntax `parametric method syntax Base.promote_rule{N, s, T <: Real}(::Type{Irrational{s}}, ::Type{Dual{N, T}})` around /home/vagrant/.julia/v0.7/ForwardDiff/src/dual.jl:189.
│ Use `Base.promote_rule(#unused#::Type{Irrational{s}}, #unused#::Type{Dual{N, T}}) where {N, s, T <: Real}` instead.
└ @ nothing dual.jl:189
┌ Warning: Deprecated syntax `parametric method syntax Base.promote_rule{N, A <: Real, B <: Real}(::Type{Dual{N, A}}, ::Type{B})` around /home/vagrant/.julia/v0.7/ForwardDiff/src/dual.jl:190.
│ Use `Base.promote_rule(#unused#::Type{Dual{N, A}}, #unused#::Type{B}) where {N, A <: Real, B <: Real}` instead.
└ @ nothing dual.jl:190
┌ Warning: Deprecated syntax `parametric method syntax Base.promote_rule{N, A <: Real, B <: Real}(::Type{A}, ::Type{Dual{N, B}})` around /home/vagrant/.julia/v0.7/ForwardDiff/src/dual.jl:191.
│ Use `Base.promote_rule(#unused#::Type{A}, #unused#::Type{Dual{N, B}}) where {N, A <: Real, B <: Real}` instead.
└ @ nothing dual.jl:191
┌ Warning: Deprecated syntax `parametric method syntax Base.convert{N, T <: Real}(::Type{Dual{N, T}}, n::Dual{N})` around /home/vagrant/.julia/v0.7/ForwardDiff/src/dual.jl:194.
│ Use `Base.convert(#unused#::Type{Dual{N, T}}, n::Dual{N}) where {N, T <: Real}` instead.
└ @ nothing dual.jl:194
┌ Warning: Deprecated syntax `parametric method syntax Base.convert{D <: Dual}(::Type{D}, n::D)` around /home/vagrant/.julia/v0.7/ForwardDiff/src/dual.jl:195.
│ Use `Base.convert(#unused#::Type{D}, n::D) where D <: Dual` instead.
└ @ nothing dual.jl:195
┌ Warning: Deprecated syntax `parametric method syntax Base.convert{N, T <: Real}(::Type{Dual{N, T}}, x::Real)` around /home/vagrant/.julia/v0.7/ForwardDiff/src/dual.jl:196.
│ Use `Base.convert(#unused#::Type{Dual{N, T}}, x::Real) where {N, T <: Real}` instead.
└ @ nothing dual.jl:196
┌ Warning: Deprecated syntax `parametric method syntax Base.promote_array_type{D <: Dual, A <: AbstractFloat}(F, ::Type{D}, ::Type{A})` around /home/vagrant/.julia/v0.7/ForwardDiff/src/dual.jl:199.
│ Use `Base.promote_array_type(F, #unused#::Type{D}, #unused#::Type{A}) where {D <: Dual, A <: AbstractFloat}` instead.
└ @ nothing dual.jl:199
┌ Warning: Deprecated syntax `parametric method syntax Base.promote_array_type{D <: Dual, A <: AbstractFloat, P}(F, ::Type{D}, ::Type{A}, ::Type{P})` around /home/vagrant/.julia/v0.7/ForwardDiff/src/dual.jl:200.
│ Use `Base.promote_array_type(F, #unused#::Type{D}, #unused#::Type{A}, #unused#::Type{P}) where {D <: Dual, A <: AbstractFloat, P}` instead.
└ @ nothing dual.jl:200
┌ Warning: Deprecated syntax `parametric method syntax Base.promote_array_type{A <: AbstractFloat, D <: Dual}(F, ::Type{A}, ::Type{D})` around /home/vagrant/.julia/v0.7/ForwardDiff/src/dual.jl:201.
│ Use `Base.promote_array_type(F, #unused#::Type{A}, #unused#::Type{D}) where {A <: AbstractFloat, D <: Dual}` instead.
└ @ nothing dual.jl:201
┌ Warning: Deprecated syntax `parametric method syntax Base.promote_array_type{A <: AbstractFloat, D <: Dual, P}(F, ::Type{A}, ::Type{D}, ::Type{P})` around /home/vagrant/.julia/v0.7/ForwardDiff/src/dual.jl:202.
│ Use `Base.promote_array_type(F, #unused#::Type{A}, #unused#::Type{D}, #unused#::Type{P}) where {A <: AbstractFloat, D <: Dual, P}` instead.
└ @ nothing dual.jl:202
┌ Warning: Deprecated syntax `parametric method syntax Base.float{N, T}(n::Dual{N, T})` around /home/vagrant/.julia/v0.7/ForwardDiff/src/dual.jl:204.
│ Use `Base.float(n::Dual{N, T}) where {N, T}` instead.
└ @ nothing dual.jl:204
ERROR: LoadError: LoadError: LoadError: type LineNumberNode has no field args
Stacktrace:
 [1] getproperty(::LineNumberNode, ::Symbol) at ./sysimg.jl:8
 [2] @ambiguous(::LineNumberNode, ::Module, ::Any) at /home/vagrant/.julia/v0.7/ForwardDiff/src/dual.jl:59
 [3] include at ./boot.jl:295 [inlined]
 [4] include_relative(::Module, ::String) at ./loading.jl:521
 [5] include at ./sysimg.jl:26 [inlined]
 [6] include(::String) at /home/vagrant/.julia/v0.7/ForwardDiff/src/ForwardDiff.jl:3
 [7] top-level scope
 [8] include at ./boot.jl:295 [inlined]
 [9] include_relative(::Module, ::String) at ./loading.jl:521
 [10] include(::Module, ::String) at ./sysimg.jl:26
 [11] top-level scope
 [12] eval at ./boot.jl:298 [inlined]
 [13] top-level scope at ./<missing>:2
in expression starting at /home/vagrant/.julia/v0.7/ForwardDiff/src/dual.jl:213
in expression starting at /home/vagrant/.julia/v0.7/ForwardDiff/src/dual.jl:213
in expression starting at /home/vagrant/.julia/v0.7/ForwardDiff/src/ForwardDiff.jl:60
ERROR: LoadError: Failed to precompile ForwardDiff to /home/vagrant/.julia/lib/v0.7/ForwardDiff.ji.
Stacktrace:
 [1] error at ./error.jl:33 [inlined]
 [2] compilecache(::String) at ./loading.jl:648
 [3] compilecache at ./loading.jl:605 [inlined]
 [4] _require(::Symbol) at ./loading.jl:440
 [5] require(::Symbol) at ./loading.jl:333
 [6] include at ./boot.jl:295 [inlined]
 [7] include_relative(::Module, ::String) at ./loading.jl:521
 [8] include(::Module, ::String) at ./sysimg.jl:26
 [9] top-level scope
 [10] eval at ./boot.jl:298 [inlined]
 [11] top-level scope at ./<missing>:2
in expression starting at /home/vagrant/.julia/v0.7/Optim/src/Optim.jl:7
ERROR: LoadError: LoadError: Failed to precompile Optim to /home/vagrant/.julia/lib/v0.7/Optim.ji.
Stacktrace:
 [1] error at ./error.jl:33 [inlined]
 [2] compilecache(::String) at ./loading.jl:648
 [3] compilecache at ./loading.jl:605 [inlined]
 [4] _require(::Symbol) at ./loading.jl:460
 [5] require(::Symbol) at ./loading.jl:333
 [6] include at ./boot.jl:295 [inlined]
 [7] include_relative(::Module, ::String) at ./loading.jl:521
 [8] _require(::Symbol) at ./loading.jl:453
 [9] require(::Symbol) at ./loading.jl:333
 [10] include at ./boot.jl:295 [inlined]
 [11] include_relative(::Module, ::String) at ./loading.jl:521
 [12] include(::Module, ::String) at ./sysimg.jl:26
 [13] process_options(::Base.JLOptions) at ./client.jl:323
 [14] _start() at ./client.jl:374
in expression starting at /home/vagrant/.julia/v0.7/GaussianProcesses/src/GaussianProcesses.jl:2
in expression starting at /home/vagrant/.julia/v0.7/GaussianProcesses/test/runtests.jl:1
┌ Error: ------------------------------------------------------------
│ # Testing failed for GaussianProcesses
│   exception = ErrorException("failed process: Process(`/home/vagrant/julia/bin/julia -Cnative -J/home/vagrant/julia/lib/julia/sys.so --compile=yes --depwarn=yes --code-coverage=none --color=no --compiled-modules=yes --check-bounds=yes --warn-overwrite=yes --startup-file=yes /home/vagrant/.julia/v0.7/GaussianProcesses/test/runtests.jl`, ProcessExited(1)) [1]")
└ @ Base.Pkg.Entry entry.jl:739
[ Info: No packages to install, update or remove @ Base.Pkg.Entry entry.jl:517
ERROR: GaussianProcesses had test errors

>>> End of log
