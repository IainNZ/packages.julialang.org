>>> 'Pkg.add("KernelEstimator")' log
INFO: Cloning cache of KernelEstimator from https://github.com/panlanfeng/KernelEstimator.jl.git
INFO: Installing BinDeps v0.6.0
INFO: Installing Calculus v0.2.2
INFO: Installing Cubature v1.2.1
INFO: Installing DataStructures v0.5.3
INFO: Installing DiffBase v0.1.0
INFO: Installing Distributions v0.13.0
INFO: Installing ForwardDiff v0.4.2
INFO: Installing KernelEstimator v0.2.1
INFO: Installing LineSearches v0.1.5
INFO: Installing NaNMath v0.2.5
INFO: Installing Optim v0.7.8
INFO: Installing PDMats v0.7.0
INFO: Installing PositiveFactorizations v0.0.4
INFO: Installing QuadGK v0.1.2
INFO: Installing Rmath v0.1.7
INFO: Installing SHA v0.3.3
INFO: Installing SpecialFunctions v0.1.1
INFO: Installing StatsBase v0.16.1
INFO: Installing StatsFuns v0.5.0
INFO: Installing URIParser v0.1.8
INFO: Installing Yeppp v0.1.0
INFO: Building Cubature
INFO: Cubature 1.0.2 is already installed.
INFO: Building Rmath
INFO: Building Yeppp
INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of KernelEstimator
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("KernelEstimator")' log
Julia Version 0.5.2
Commit f4c6c9d (2017-05-06 16:34 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-121-generic #170-Ubuntu SMP Wed Jun 14 09:04:33 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (897.10546875 MB free)
Uptime: 55318.0 sec
Load Avg:  0.98388671875  1.0  1.00244140625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz    3362057 s       1200 s     263868 s    1270522 s        106 s
#2  3499 MHz    1395783 s       5793 s     138434 s    3826617 s          1 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.7.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.5
2 required packages:
 - JSON                          0.12.0
 - KernelEstimator               0.2.1
22 additional packages:
 - BinDeps                       0.6.0
 - Calculus                      0.2.2
 - Compat                        0.26.0
 - Cubature                      1.2.1
 - DataStructures                0.5.3
 - DiffBase                      0.1.0
 - Distributions                 0.13.0
 - ForwardDiff                   0.4.2
 - LineSearches                  0.1.5
 - NaNMath                       0.2.5
 - Optim                         0.7.8
 - PDMats                        0.7.0
 - PositiveFactorizations        0.0.4
 - QuadGK                        0.1.2
 - Rmath                         0.1.7
 - SHA                           0.3.3
 - SpecialFunctions              0.1.1
 - StatsBase                     0.16.1
 - StatsFuns                     0.5.0
 - URIParser                     0.1.8
 - Yeppp                         0.1.0
 - tmp                           0.0.0-             non-repo (unregistered)
INFO: Testing KernelEstimator
ERROR: LoadError: LoadError: ArgumentError: quantiles are undefined in presence of NaNs
 in #quantile!#979(::Bool, ::Function, ::Array{Float64,1}, ::Array{Float64,1}, ::Array{Float64,1}) at ./statistics.jl:625
 in (::Base.#kw##quantile!)(::Array{Any,1}, ::Base.#quantile!, ::Array{Float64,1}, ::Array{Float64,1}, ::Array{Float64,1}) at ./<missing>:0 (repeats 2 times)
 in #quantile#982(::Bool, ::Function, ::Array{Float64,1}, ::Array{Float64,1}) at ./statistics.jl:696
 in #bootstrapCB#39(::LinSpace{Float64}, ::Int64, ::Function, ::Float64, ::Float64, ::Function, ::Float64, ::Float64, ::KernelEstimator.#bootstrapCB, ::Array{Float64,1}, ::Array{Float64,1}) at /home/vagrant/.julia/v0.5/KernelEstimator/src/confidenceband.jl:28
 in (::KernelEstimator.#kw##bootstrapCB)(::Array{Any,1}, ::KernelEstimator.#bootstrapCB, ::Array{Float64,1}, ::Array{Float64,1}) at ./<missing>:0
 in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
 in process_options(::Base.JLOptions) at ./client.jl:265
 in _start() at ./client.jl:321
while loading /home/vagrant/.julia/v0.5/KernelEstimator/test/testreg.jl, in expression starting on line 76
while loading /home/vagrant/.julia/v0.5/KernelEstimator/test/runtests.jl, in expression starting on line 5
===========================[ ERROR: KernelEstimator ]===========================

failed process: Process(`/home/vagrant/julia/bin/julia -Cx86-64 -J/home/vagrant/julia/lib/julia/sys.so --compile=yes --depwarn=yes --check-bounds=yes --code-coverage=none --color=no --compilecache=yes /home/vagrant/.julia/v0.5/KernelEstimator/test/runtests.jl`, ProcessExited(1)) [1]

================================================================================
ERROR: KernelEstimator had test errors
 in #test#61(::Bool, ::Function, ::Array{AbstractString,1}) at ./pkg/entry.jl:748
 in (::Base.Pkg.Entry.#kw##test)(::Array{Any,1}, ::Base.Pkg.Entry.#test, ::Array{AbstractString,1}) at ./<missing>:0
 in (::Base.Pkg.Dir.##2#3{Array{Any,1},Base.Pkg.Entry.#test,Tuple{Array{AbstractString,1}}})() at ./pkg/dir.jl:31
 in cd(::Base.Pkg.Dir.##2#3{Array{Any,1},Base.Pkg.Entry.#test,Tuple{Array{AbstractString,1}}}, ::String) at ./file.jl:59
 in #cd#1(::Array{Any,1}, ::Function, ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N}) at ./pkg/dir.jl:31
 in (::Base.Pkg.Dir.#kw##cd)(::Array{Any,1}, ::Base.Pkg.Dir.#cd, ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N}) at ./<missing>:0
 in #test#3(::Bool, ::Function, ::String, ::Vararg{String,N}) at ./pkg/pkg.jl:258
 in test(::String, ::Vararg{String,N}) at ./pkg/pkg.jl:258
 in eval(::Module, ::Any) at ./boot.jl:234
 in process_options(::Base.JLOptions) at ./client.jl:242
 in _start() at ./client.jl:321

>>> End of log
