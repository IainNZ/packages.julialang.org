>>> 'Pkg.add("QuadGK")' log
[ Info: Installing DataStructures v0.7.4
[ Info: Installing QuadGK v0.2.0
[ Info: Package database updated

>>> 'Pkg.test("QuadGK")' log
Julia Version 0.7.0-DEV.3487
Commit 808e828bcb (2018-01-20 20:33 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
      Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-135-generic #184-Ubuntu SMP Wed Oct 18 11:55:51 UTC 2017 x86_64 x86_64
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
              speed         user         nice          sys         idle          irq
       #1  3499 MHz    1114396 s        100 s      58794 s     300897 s         10 s
       #2  3499 MHz     202412 s         42 s      18879 s    1532507 s          0 s
       
  Memory: 2.93927001953125 GB (826.02734375 MB free)
  Uptime: 17840.0 sec
  Load Avg:  0.9775390625  0.998046875  0.9599609375
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant
Packages:
  Package Directory: /home/vagrant/.julia/v0.7
  Package Status:
2 required packages:
 - JSON                          0.16.4
 - QuadGK                        0.2.0
3 additional packages:
 - Compat                        0.48.0
 - DataStructures                0.7.4
 - Nullables                     0.0.3
[ Info: Testing QuadGK
WARNING: importing deprecated binding Base.vecnorm into QuadGK.
WARNING: importing deprecated binding Base.SymTridiagonal into QuadGK.
quadgk: Error During Test at /home/vagrant/.julia/v0.7/QuadGK/test/runtests.jl:10
  Test threw an exception of type ErrorException
  Expression: (quadgk(cos, 0, 0.7, 1))[1] ≈ sin(1)
  Base.vecnorm has been moved to the standard library package LinearAlgebra.
  Restart Julia and then run `using LinearAlgebra` to load it.
  Stacktrace:
   [1] error(::Function, ::String, ::String, ::String, ::String, ::String, ::String) at ./error.jl:42
   [2] #vecnorm#1036 at ./deprecated.jl:138 [inlined]
   [3] vecnorm at ./deprecated.jl:138 [inlined]
   [4] evalrule(::typeof(cos), ::Float64, ::Float64, ::Array{Float64,1}, ::Any, ::Any, ::typeof(Base.vecnorm)) at /home/vagrant/.julia/v0.7/QuadGK/src/QuadGK.jl:86
   [5] do_quadgk(::typeof(cos), ::Array{Float64,1}, ::Int64, ::Type{Float64}, ::Float64, ::Float64, ::Int64, ::typeof(Base.vecnorm)) at /home/vagrant/.julia/v0.7/QuadGK/src/QuadGK.jl:131
   [6] #quadgk#13(::Float64, ::Float64, ::Int64, ::Int64, ::Function, ::Function, ::Function, ::Float64, ::Float64, ::Float64, ::Vararg{Float64,N} where N) at /home/vagrant/.julia/v0.7/QuadGK/src/QuadGK.jl:168
   [7] quadgk(::Function, ::Float64, ::Float64, ::Float64, ::Vararg{Float64,N} where N) at /home/vagrant/.julia/v0.7/QuadGK/src/QuadGK.jl:168
   [8] #quadgk#15(::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::Function, ::Int64, ::Float64, ::Int64, ::Vararg{Int64,N} where N) at /home/vagrant/.julia/v0.7/QuadGK/src/QuadGK.jl:241
   [9] quadgk(::Function, ::Int64, ::Float64, ::Int64, ::Vararg{Int64,N} where N) at /home/vagrant/.julia/v0.7/QuadGK/src/QuadGK.jl:236
   [10] macro expansion at /home/vagrant/.julia/v0.7/QuadGK/test/runtests.jl:10 [inlined]
   [11] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1007 [inlined]
   [12] top-level scope at /home/vagrant/.julia/v0.7/QuadGK/test/runtests.jl:10
quadgk: Error During Test at /home/vagrant/.julia/v0.7/QuadGK/test/runtests.jl:11
  Test threw an exception of type ErrorException
  Expression: (quadgk((x->begin
                exp(im * x)
            end), 0, 0.7, 1))[1] ≈ (exp(1im) - 1) / im
  Base.vecnorm has been moved to the standard library package LinearAlgebra.
  Restart Julia and then run `using LinearAlgebra` to load it.
  Stacktrace:
   [1] error(::Function, ::String, ::String, ::String, ::String, ::String, ::String) at ./error.jl:42
   [2] #vecnorm#1036 at ./deprecated.jl:138 [inlined]
   [3] vecnorm at ./deprecated.jl:138 [inlined]
   [4] evalrule(::getfield(, Symbol("##1#7")), ::Float64, ::Float64, ::Array{Float64,1}, ::Any, ::Any, ::typeof(Base.vecnorm)) at /home/vagrant/.julia/v0.7/QuadGK/src/QuadGK.jl:86
   [5] do_quadgk(::getfield(, Symbol("##1#7")), ::Array{Float64,1}, ::Int64, ::Type{Float64}, ::Float64, ::Float64, ::Int64, ::typeof(Base.vecnorm)) at /home/vagrant/.julia/v0.7/QuadGK/src/QuadGK.jl:131
   [6] #quadgk#13(::Float64, ::Float64, ::Int64, ::Int64, ::Function, ::Function, ::Function, ::Float64, ::Float64, ::Float64, ::Vararg{Float64,N} where N) at /home/vagrant/.julia/v0.7/QuadGK/src/QuadGK.jl:168
   [7] quadgk(::Function, ::Float64, ::Float64, ::Float64, ::Vararg{Float64,N} where N) at /home/vagrant/.julia/v0.7/QuadGK/src/QuadGK.jl:168
   [8] #quadgk#15(::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::Function, ::Int64, ::Float64, ::Int64, ::Vararg{Int64,N} where N) at /home/vagrant/.julia/v0.7/QuadGK/src/QuadGK.jl:241
   [9] quadgk(::Function, ::Int64, ::Float64, ::Int64, ::Vararg{Int64,N} where N) at /home/vagrant/.julia/v0.7/QuadGK/src/QuadGK.jl:236
   [10] macro expansion at /home/vagrant/.julia/v0.7/QuadGK/test/runtests.jl:11 [inlined]
   [11] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1007 [inlined]
   [12] top-level scope at /home/vagrant/.julia/v0.7/QuadGK/test/runtests.jl:10
quadgk: Error During Test at /home/vagrant/.julia/v0.7/QuadGK/test/runtests.jl:12
  Test threw an exception of type ErrorException
  Expression: (quadgk((x->begin
                exp(im * x)
            end), 0, 1im))[1] ≈ (-1im) * expm1(-1)
  Base.vecnorm has been moved to the standard library package LinearAlgebra.
  Restart Julia and then run `using LinearAlgebra` to load it.
  Stacktrace:
   [1] error(::Function, ::String, ::String, ::String, ::String, ::String, ::String) at ./error.jl:42
   [2] #vecnorm#1036 at ./deprecated.jl:138 [inlined]
   [3] vecnorm at ./deprecated.jl:138 [inlined]
   [4] evalrule(::getfield(, Symbol("##2#8")), ::Complex{Float64}, ::Complex{Float64}, ::Array{Float64,1}, ::Any, ::Any, ::typeof(Base.vecnorm)) at /home/vagrant/.julia/v0.7/QuadGK/src/QuadGK.jl:86
   [5] do_quadgk(::getfield(, Symbol("##2#8")), ::Array{Complex{Float64},1}, ::Int64, ::Type{Float64}, ::Float64, ::Float64, ::Int64, ::typeof(Base.vecnorm)) at /home/vagrant/.julia/v0.7/QuadGK/src/QuadGK.jl:131
   [6] #quadgk#14(::Float64, ::Float64, ::Int64, ::Int64, ::Function, ::Function, ::Function, ::Complex{Float64}, ::Complex{Float64}) at /home/vagrant/.julia/v0.7/QuadGK/src/QuadGK.jl:175
   [7] quadgk(::Function, ::Complex{Float64}, ::Complex{Float64}) at /home/vagrant/.julia/v0.7/QuadGK/src/QuadGK.jl:175
   [8] #quadgk#15(::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::Function, ::Int64, ::Complex{Int64}) at /home/vagrant/.julia/v0.7/QuadGK/src/QuadGK.jl:241
   [9] quadgk(::Function, ::Int64, ::Complex{Int64}) at /home/vagrant/.julia/v0.7/QuadGK/src/QuadGK.jl:236
   [10] macro expansion at /home/vagrant/.julia/v0.7/QuadGK/test/runtests.jl:12 [inlined]
   [11] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1007 [inlined]
   [12] top-level scope at /home/vagrant/.julia/v0.7/QuadGK/test/runtests.jl:10
quadgk: Error During Test at /home/vagrant/.julia/v0.7/QuadGK/test/runtests.jl:13
  Test threw an exception of type ErrorException
  Expression: isapprox((quadgk(cos, 0, BigFloat(1), order=40))[1], sin(BigFloat(1)), atol=1000 * eps(BigFloat))
  Base.SymTridiagonal has been moved to the standard library package LinearAlgebra.
  Restart Julia and then run `using LinearAlgebra` to load it.
  Stacktrace:
   [1] error(::Function, ::String, ::String, ::String, ::String, ::String, ::String) at ./error.jl:42
   [2] #SymTridiagonal#1040 at ./deprecated.jl:138 [inlined]
   [3] SymTridiagonal at ./deprecated.jl:138 [inlined]
   [4] eignewt at /home/vagrant/.julia/v0.7/QuadGK/src/QuadGK.jl:286 [inlined]
   [5] kronrod(::Type{BigFloat}, ::Int64) at /home/vagrant/.julia/v0.7/QuadGK/src/QuadGK.jl:426
   [6] do_quadgk(::typeof(cos), ::Array{BigFloat,1}, ::Int64, ::Type{BigFloat}, ::BigFloat, ::BigFloat, ::Int64, ::typeof(Base.vecnorm)) at /home/vagrant/.julia/v0.7/QuadGK/src/QuadGK.jl:127
   [7] #quadgk#13(::BigFloat, ::BigFloat, ::Int64, ::Int64, ::Function, ::Function, ::Function, ::BigFloat, ::BigFloat) at /home/vagrant/.julia/v0.7/QuadGK/src/QuadGK.jl:168
   [8] (::getfield(QuadGK, Symbol("#kw##quadgk")))(::NamedTuple{(:order,),Tuple{Int64}}, ::typeof(quadgk), ::Function, ::BigFloat, ::BigFloat) at ./<missing>:0
   [9] #quadgk#15(::Base.Iterators.IndexValue{Symbol,Int64,Tuple{Symbol},NamedTuple{(:order,),Tuple{Int64}}}, ::Function, ::Function, ::Int64, ::BigFloat) at /home/vagrant/.julia/v0.7/QuadGK/src/QuadGK.jl:241
   [10] (::getfield(QuadGK, Symbol("#kw##quadgk")))(::NamedTuple{(:order,),Tuple{Int64}}, ::typeof(quadgk), ::Function, ::Int64, ::BigFloat) at ./<missing>:0
   [11] macro expansion at /home/vagrant/.julia/v0.7/QuadGK/test/runtests.jl:13 [inlined]
   [12] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1007 [inlined]
   [13] top-level scope at /home/vagrant/.julia/v0.7/QuadGK/test/runtests.jl:10
quadgk: Error During Test at /home/vagrant/.julia/v0.7/QuadGK/test/runtests.jl:15
  Test threw an exception of type ErrorException
  Expression: (quadgk((x->begin
                exp(-x)
            end), 0, 0.7, Inf))[1] ≈ 1.0
  Base.vecnorm has been moved to the standard library package LinearAlgebra.
  Restart Julia and then run `using LinearAlgebra` to load it.
  Stacktrace:
   [1] error(::Function, ::String, ::String, ::String, ::String, ::String, ::String) at ./error.jl:42
   [2] #vecnorm#1036 at ./deprecated.jl:138 [inlined]
   [3] vecnorm at ./deprecated.jl:138 [inlined]
   [4] evalrule(::getfield(QuadGK, Symbol("##5#11")){getfield(, Symbol("##3#9"))}, ::Float64, ::Float64, ::Array{Float64,1}, ::Any, ::Any, ::typeof(Base.vecnorm)) at /home/vagrant/.julia/v0.7/QuadGK/src/QuadGK.jl:86
   [5] do_quadgk(::getfield(QuadGK, Symbol("##5#11")){getfield(, Symbol("##3#9"))}, ::Array{Float64,1}, ::Int64, ::Type{Float64}, ::Float64, ::Float64, ::Int64, ::typeof(Base.vecnorm)) at /home/vagrant/.julia/v0.7/QuadGK/src/QuadGK.jl:131
   [6] do_quadgk(::getfield(, Symbol("##3#9")), ::Array{Float64,1}, ::Int64, ::Type{Float64}, ::Float64, ::Float64, ::Int64, ::typeof(Base.vecnorm)) at /home/vagrant/.julia/v0.7/QuadGK/src/QuadGK.jl:118
   [7] #quadgk#13(::Float64, ::Float64, ::Int64, ::Int64, ::Function, ::Function, ::Function, ::Float64, ::Float64, ::Float64, ::Vararg{Float64,N} where N) at /home/vagrant/.julia/v0.7/QuadGK/src/QuadGK.jl:168
   [8] quadgk(::Function, ::Float64, ::Float64, ::Float64, ::Vararg{Float64,N} where N) at /home/vagrant/.julia/v0.7/QuadGK/src/QuadGK.jl:168
   [9] #quadgk#15(::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::Function, ::Int64, ::Float64, ::Float64, ::Vararg{Float64,N} where N) at /home/vagrant/.julia/v0.7/QuadGK/src/QuadGK.jl:241
   [10] quadgk(::Function, ::Int64, ::Float64, ::Float64, ::Vararg{Float64,N} where N) at /home/vagrant/.julia/v0.7/QuadGK/src/QuadGK.jl:236
   [11] macro expansion at /home/vagrant/.julia/v0.7/QuadGK/test/runtests.jl:15 [inlined]
   [12] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1007 [inlined]
   [13] top-level scope at /home/vagrant/.julia/v0.7/QuadGK/test/runtests.jl:10
quadgk: Error During Test at /home/vagrant/.julia/v0.7/QuadGK/test/runtests.jl:16
  Test threw an exception of type ErrorException
  Expression: (quadgk((x->begin
                exp(x)
            end), -Inf, 0))[1] ≈ 1.0
  Base.vecnorm has been moved to the standard library package LinearAlgebra.
  Restart Julia and then run `using LinearAlgebra` to load it.
  Stacktrace:
   [1] error(::Function, ::String, ::String, ::String, ::String, ::String, ::String) at ./error.jl:42
   [2] #vecnorm#1036 at ./deprecated.jl:138 [inlined]
   [3] vecnorm at ./deprecated.jl:138 [inlined]
   [4] evalrule(::getfield(QuadGK, Symbol("##3#9")){getfield(, Symbol("##4#10"))}, ::Float64, ::Float64, ::Array{Float64,1}, ::Any, ::Any, ::typeof(Base.vecnorm)) at /home/vagrant/.julia/v0.7/QuadGK/src/QuadGK.jl:86
   [5] do_quadgk(::getfield(QuadGK, Symbol("##3#9")){getfield(, Symbol("##4#10"))}, ::Array{Float64,1}, ::Int64, ::Type{Float64}, ::Float64, ::Float64, ::Int64, ::typeof(Base.vecnorm)) at /home/vagrant/.julia/v0.7/QuadGK/src/QuadGK.jl:131
   [6] do_quadgk(::getfield(, Symbol("##4#10")), ::Array{Float64,1}, ::Int64, ::Type{Float64}, ::Float64, ::Float64, ::Int64, ::typeof(Base.vecnorm)) at /home/vagrant/.julia/v0.7/QuadGK/src/QuadGK.jl:113
   [7] #quadgk#13(::Float64, ::Float64, ::Int64, ::Int64, ::Function, ::Function, ::Function, ::Float64, ::Float64) at /home/vagrant/.julia/v0.7/QuadGK/src/QuadGK.jl:168
   [8] quadgk(::Function, ::Float64, ::Float64) at /home/vagrant/.julia/v0.7/QuadGK/src/QuadGK.jl:168
   [9] #quadgk#15(::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::Function, ::Float64, ::Int64) at /home/vagrant/.julia/v0.7/QuadGK/src/QuadGK.jl:241
   [10] quadgk(::Function, ::Float64, ::Int64) at /home/vagrant/.julia/v0.7/QuadGK/src/QuadGK.jl:236
   [11] macro expansion at /home/vagrant/.julia/v0.7/QuadGK/test/runtests.jl:16 [inlined]
   [12] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1007 [inlined]
   [13] top-level scope at /home/vagrant/.julia/v0.7/QuadGK/test/runtests.jl:10
quadgk: Error During Test at /home/vagrant/.julia/v0.7/QuadGK/test/runtests.jl:17
  Test threw an exception of type ErrorException
  Expression: (quadgk((x->begin
                exp(-(x ^ 2))
            end), -Inf, Inf))[1] ≈ sqrt(pi)
  Base.vecnorm has been moved to the standard library package LinearAlgebra.
  Restart Julia and then run `using LinearAlgebra` to load it.
  Stacktrace:
   [1] error(::Function, ::String, ::String, ::String, ::String, ::String, ::String) at ./error.jl:42
   [2] #vecnorm#1036 at ./deprecated.jl:138 [inlined]
   [3] vecnorm at ./deprecated.jl:138 [inlined]
   [4] evalrule(::getfield(QuadGK, Symbol("##1#7")){getfield(, Symbol("##5#11"))}, ::Float64, ::Float64, ::Array{Float64,1}, ::Any, ::Any, ::typeof(Base.vecnorm)) at /home/vagrant/.julia/v0.7/QuadGK/src/QuadGK.jl:86
   [5] do_quadgk(::getfield(QuadGK, Symbol("##1#7")){getfield(, Symbol("##5#11"))}, ::Array{Float64,1}, ::Int64, ::Type{Float64}, ::Float64, ::Float64, ::Int64, ::typeof(Base.vecnorm)) at /home/vagrant/.julia/v0.7/QuadGK/src/QuadGK.jl:131
   [6] do_quadgk(::getfield(, Symbol("##5#11")), ::Array{Float64,1}, ::Int64, ::Type{Float64}, ::Float64, ::Float64, ::Int64, ::typeof(Base.vecnorm)) at /home/vagrant/.julia/v0.7/QuadGK/src/QuadGK.jl:106
   [7] #quadgk#13(::Float64, ::Float64, ::Int64, ::Int64, ::Function, ::Function, ::Function, ::Float64, ::Float64) at /home/vagrant/.julia/v0.7/QuadGK/src/QuadGK.jl:168
   [8] quadgk(::Function, ::Float64, ::Float64) at /home/vagrant/.julia/v0.7/QuadGK/src/QuadGK.jl:168
   [9] macro expansion at /home/vagrant/.julia/v0.7/QuadGK/test/runtests.jl:17 [inlined]
   [10] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1007 [inlined]
   [11] top-level scope at /home/vagrant/.julia/v0.7/QuadGK/test/runtests.jl:10
quadgk: Error During Test at /home/vagrant/.julia/v0.7/QuadGK/test/runtests.jl:18
  Test threw an exception of type ErrorException
  Expression: (quadgk((x->begin
                [exp(-x), exp(-2x)]
            end), 0, Inf))[1] ≈ [1, 0.5]
  Base.vecnorm has been moved to the standard library package LinearAlgebra.
  Restart Julia and then run `using LinearAlgebra` to load it.
  Stacktrace:
   [1] error(::Function, ::String, ::String, ::String, ::String, ::String, ::String) at ./error.jl:42
   [2] #vecnorm#1036 at ./deprecated.jl:138 [inlined]
   [3] vecnorm at ./deprecated.jl:138 [inlined]
   [4] evalrule(::getfield(QuadGK, Symbol("##5#11")){getfield(, Symbol("##6#12"))}, ::Float64, ::Float64, ::Array{Float64,1}, ::Any, ::Any, ::typeof(Base.vecnorm)) at /home/vagrant/.julia/v0.7/QuadGK/src/QuadGK.jl:86
   [5] do_quadgk(::getfield(QuadGK, Symbol("##5#11")){getfield(, Symbol("##6#12"))}, ::Array{Float64,1}, ::Int64, ::Type{Float64}, ::Float64, ::Float64, ::Int64, ::typeof(Base.vecnorm)) at /home/vagrant/.julia/v0.7/QuadGK/src/QuadGK.jl:131
   [6] do_quadgk(::getfield(, Symbol("##6#12")), ::Array{Float64,1}, ::Int64, ::Type{Float64}, ::Float64, ::Float64, ::Int64, ::typeof(Base.vecnorm)) at /home/vagrant/.julia/v0.7/QuadGK/src/QuadGK.jl:118
   [7] #quadgk#13(::Float64, ::Float64, ::Int64, ::Int64, ::Function, ::Function, ::Function, ::Float64, ::Float64) at /home/vagrant/.julia/v0.7/QuadGK/src/QuadGK.jl:168
   [8] quadgk(::Function, ::Float64, ::Float64) at /home/vagrant/.julia/v0.7/QuadGK/src/QuadGK.jl:168
   [9] #quadgk#15(::Base.Iterators.IndexValue{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::Function, ::Int64, ::Float64) at /home/vagrant/.julia/v0.7/QuadGK/src/QuadGK.jl:241
   [10] quadgk(::Function, ::Int64, ::Float64) at /home/vagrant/.julia/v0.7/QuadGK/src/QuadGK.jl:236
   [11] macro expansion at /home/vagrant/.julia/v0.7/QuadGK/test/runtests.jl:18 [inlined]
   [12] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Test/src/Test.jl:1007 [inlined]
   [13] top-level scope at /home/vagrant/.julia/v0.7/QuadGK/test/runtests.jl:10
Test Summary: | Pass  Error  Total
quadgk        |    1      8      9
ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 8 errored, 0 broken.
in expression starting at /home/vagrant/.julia/v0.7/QuadGK/test/runtests.jl:9
┌ Error: ------------------------------------------------------------
│ # Testing failed for QuadGK
│   exception =
│    failed process: Process(`/home/vagrant/julia/bin/julia -Cnative -J/home/vagrant/julia/lib/julia/sys.so --compile=yes --depwarn=yes --code-coverage=none --color=no --compiled-modules=yes --check-bounds=yes --warn-overwrite=yes --startup-file=yes /home/vagrant/.julia/v0.7/QuadGK/test/runtests.jl`, ProcessExited(1)) [1]
│    Stacktrace:
│     [1] error(::String, ::Base.Process, ::String, ::Int64, ::String) at ./error.jl:42
│     [2] pipeline_error(::Base.Process) at ./process.jl:694
│     [3] run(::Cmd) at ./process.jl:656
│     [4] (::getfield(Base.Pkg.Entry, Symbol("##91#94")){Bool,String,Array{AbstractString,1}})() at ./pkg/entry.jl:728
│     [5] cd(::getfield(Base.Pkg.Entry, Symbol("##91#94")){Bool,String,Array{AbstractString,1}}, ::String) at ./file.jl:70
│     [6] #test!#90(::Bool, ::Function, ::String, ::Array{AbstractString,1}, ::Array{AbstractString,1}, ::Array{AbstractString,1}) at ./pkg/entry.jl:716
│     [7] (::getfield(Base.Pkg.Entry, Symbol("#kw##test!")))(::NamedTuple{(:coverage,),Tuple{Bool}}, ::typeof(Base.Pkg.Entry.test!), ::String, ::Array{AbstractString,1}, ::Array{AbstractString,1}, ::Array{AbstractString,1}) at ./<missing>:0
│     [8] #test#98(::Bool, ::Function, ::Array{AbstractString,1}) at ./pkg/entry.jl:755
│     [9] (::getfield(Base.Pkg.Entry, Symbol("#kw##test")))(::NamedTuple{(:coverage,),Tuple{Bool}}, ::typeof(Base.Pkg.Entry.test), ::Array{AbstractString,1}) at ./<missing>:0
│     [10] (::getfield(Base.Pkg.Dir, Symbol("##4#7")){Base.Iterators.IndexValue{Symbol,Bool,Tuple{Symbol},NamedTuple{(:coverage,),Tuple{Bool}}},typeof(Base.Pkg.Entry.test),Tuple{Array{AbstractString,1}}})() at ./pkg/dir.jl:36
│     [11] cd(::getfield(Base.Pkg.Dir, Symbol("##4#7")){Base.Iterators.IndexValue{Symbol,Bool,Tuple{Symbol},NamedTuple{(:coverage,),Tuple{Bool}}},typeof(Base.Pkg.Entry.test),Tuple{Array{AbstractString,1}}}, ::String) at ./file.jl:70
│     [12] #cd#1(::Base.Iterators.IndexValue{Symbol,Bool,Tuple{Symbol},NamedTuple{(:coverage,),Tuple{Bool}}}, ::Function, ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N} where N) at ./pkg/dir.jl:36
│     [13] (::getfield(Base.Pkg.Dir, Symbol("#kw##cd")))(::NamedTuple{(:coverage,),Tuple{Bool}}, ::typeof(Base.Pkg.Dir.cd), ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N} where N) at ./<missing>:0
│     [14] #test#3(::Bool, ::Function, ::String, ::Vararg{String,N} where N) at ./pkg/pkg.jl:274
│     [15] test(::String, ::Vararg{String,N} where N) at ./pkg/pkg.jl:274
│     [16] top-level scope
│     [17] eval at ./boot.jl:295 [inlined]
│     [18] eval(::Module, ::Expr) at ./sysimg.jl:71
│     [19] process_options(::Base.JLOptions) at ./client.jl:301
│     [20] _start() at ./client.jl:375
└ @ Base.Pkg.Entry entry.jl:731
ERROR: QuadGK had test errors

>>> End of log
