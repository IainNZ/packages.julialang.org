>>> 'Pkg.add("AutoDiffSource")' log
┌ Info: Cloning cache of AutoDiffSource from https://github.com/gaika/AutoDiffSource.jl.git
└                                                   @ Base.Pkg.Cache cache.jl:43
[ Info: Installing AutoDiffSource v0.2.3           @ Base.Pkg.Entry entry.jl:543
[ Info: Installing BinDeps v0.8.2                  @ Base.Pkg.Entry entry.jl:543
[ Info: Installing SHA v0.5.2                      @ Base.Pkg.Entry entry.jl:543
[ Info: Installing SpecialFunctions v0.3.7         @ Base.Pkg.Entry entry.jl:543
[ Info: Installing URIParser v0.3.0                @ Base.Pkg.Entry entry.jl:543
[ Info: Building SpecialFunctions                                 @ Main none:10
WARNING: importing deprecated binding Base.Associative into BinDeps.
WARNING: Base.Associative is deprecated, use AbstractDict instead.
  likely near /home/vagrant/.julia/v0.7/SpecialFunctions/deps/binaries.jl:44
in @install at /home/vagrant/.julia/v0.7/BinDeps/src/dependencies.jl
┌ Warning: `unshift!` is deprecated, use `pushfirst!` instead.
│   caller = #_find_library#48(::Type, ::Function, ::BinDeps.LibraryDependency) at dependencies.jl:652
└                                                  @ BinDeps dependencies.jl:652
┌ Warning: `unshift!` is deprecated, use `pushfirst!` instead.
│   caller = #_find_library#48(::DataType, ::Function, ::BinDeps.LibraryDependency) at dependencies.jl:652
└                                                  @ BinDeps dependencies.jl:652
[ Info: Package database updated                    @ Base.Pkg.Entry entry.jl:32
┌ Info: METADATA is out-of-date — you may not have the latest version of AutoDiffSource
│ Use `Pkg.update()` to get the latest versions of your packages
└                                                   @ Base.Pkg.Entry entry.jl:74

>>> 'Pkg.test("AutoDiffSource")' log
Julia Version 0.7.0-DEV.3354
Commit 9b5eed2b6c (2018-01-09 08:03 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
      Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-135-generic #184-Ubuntu SMP Wed Oct 18 11:55:51 UTC 2017 x86_64 x86_64
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
              speed         user         nice          sys         idle          irq
       #1  3500 MHz     440175 s        114 s      30337 s     192173 s          5 s
       #2  3500 MHz      90312 s         41 s      15392 s     657155 s          0 s
       
  Memory: 2.93927001953125 GB (621.8046875 MB free)
  Uptime: 7730.0 sec
  Load Avg:  0.98681640625  0.943359375  1.046875
  WORD_SIZE: 64
  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant
Packages:
  Package Directory: /home/vagrant/.julia/v0.7
  Package Status:
2 required packages:
 - AutoDiffSource                0.2.3
 - JSON                          0.16.3
6 additional packages:
 - BinDeps                       0.8.2
 - Compat                        0.44.0
 - Nullables                     0.0.2
 - SHA                           0.5.2
 - SpecialFunctions              0.3.7
 - URIParser                     0.3.0
[ Info: Testing AutoDiffSource                     @ Base.Pkg.Entry entry.jl:723
┌ Warning: Deprecated syntax `type` at /home/vagrant/.julia/v0.7/AutoDiffSource/src/parse.jl:5.
│ Use `mutable struct` instead.
└                                                           @ nothing parse.jl:5
┌ Warning: Deprecated syntax `parametric method syntax safediv{T}(x::T, y)` around /home/vagrant/.julia/v0.7/AutoDiffSource/src/func.jl:16.
│ Use `safediv(x::T, y) where T` instead.
└                                                           @ nothing func.jl:16
┌ Warning: Deprecated syntax `parametric method syntax δdot_divide{T}(x::T, y::T)` around /home/vagrant/.julia/v0.7/AutoDiffSource/src/func.jl:34.
│ Use `δdot_divide(x::T, y::T) where T` instead.
└                                                           @ nothing func.jl:34
┌ Warning: Deprecated syntax `parametric method syntax δdot_minus{T}(x::T, y::T)` around /home/vagrant/.julia/v0.7/AutoDiffSource/src/func.jl:41.
│ Use `δdot_minus(x::T, y::T) where T` instead.
└                                                           @ nothing func.jl:41
┌ Warning: Deprecated syntax `parametric method syntax δdot_plus{T}(x::T, y::T)` around /home/vagrant/.julia/v0.7/AutoDiffSource/src/func.jl:48.
│ Use `δdot_plus(x::T, y::T) where T` instead.
└                                                           @ nothing func.jl:48
┌ Warning: Deprecated syntax `parametric method syntax δdot_power{T}(x::T, y::T)` around /home/vagrant/.julia/v0.7/AutoDiffSource/src/func.jl:55.
│ Use `δdot_power(x::T, y::T) where T` instead.
└                                                           @ nothing func.jl:55
┌ Warning: Deprecated syntax `parametric method syntax δdot_times{T}(x::T, y::T)` around /home/vagrant/.julia/v0.7/AutoDiffSource/src/func.jl:62.
│ Use `δdot_times(x::T, y::T) where T` instead.
└                                                           @ nothing func.jl:62
┌ Warning: Deprecated syntax `parametric method syntax δminus{T}(x::T, y::T)` around /home/vagrant/.julia/v0.7/AutoDiffSource/src/func.jl:87.
│ Use `δminus(x::T, y::T) where T` instead.
└                                                           @ nothing func.jl:87
┌ Warning: Deprecated syntax `parametric method syntax δplus{T}(x::T, y::T)` around /home/vagrant/.julia/v0.7/AutoDiffSource/src/func.jl:95.
│ Use `δplus(x::T, y::T) where T` instead.
└                                                           @ nothing func.jl:95
┌ Warning: Deprecated syntax `parametric method syntax δzeros{T}(x::T)::T` around /home/vagrant/.julia/v0.7/AutoDiffSource/src/func.jl:119.
│ Use `δzeros(x::T) where T` instead.
└                                                          @ nothing func.jl:119
┌ Warning: Deprecated syntax `parametric method syntax δmulticast{T <: AbstractArray}(f, x1::T, x2::T)` around /home/vagrant/.julia/v0.7/AutoDiffSource/src/multicast.jl:39.
│ Use `δmulticast(f, x1::T, x2::T) where T <: AbstractArray` instead.
└                                                      @ nothing multicast.jl:39
WARNING: Base.Test is deprecated, run `using Test` instead.
  likely near /home/vagrant/.julia/v0.7/AutoDiffSource/test/runtests.jl:2
┌ Warning: `macroexpand(x)` is deprecated, use `macroexpand(module, x)` instead.
│   caller = @δ(::LineNumberNode, ::Module, ::Expr) at AutoDiffSource.jl:33
└                                          @ AutoDiffSource AutoDiffSource.jl:33
ERROR: LoadError: LoadError: BoundsError: attempt to access 0-element Array{Any,1} at index [2]
Stacktrace:
 [1] getindex(::Array{Any,1}, ::Int64) at ./array.jl:646
 [2] parse_line!(::Array{Any,1}, ::Expr, ::LineNumberNode) at /home/vagrant/.julia/v0.7/AutoDiffSource/src/parse.jl:62
 [3] (::getfield(AutoDiffSource, Symbol("##10#11")))(::LineNumberNode) at ./<missing>:0
 [4] next at ./generator.jl:47 [inlined]
 [5] collect(::Base.Generator{Array{Any,1},getfield(AutoDiffSource, Symbol("##10#11"))}) at ./array.jl:536
 [6] parse_function(::Expr, ::Expr, ::Dict{Symbol,Symbol}) at /home/vagrant/.julia/v0.7/AutoDiffSource/src/parse.jl:58
 [7] parse_function at /home/vagrant/.julia/v0.7/AutoDiffSource/src/parse.jl:48 [inlined]
 [8] δ(::Expr, ::Expr) at /home/vagrant/.julia/v0.7/AutoDiffSource/src/AutoDiffSource.jl:57 (repeats 2 times)
 [9] @δ(::LineNumberNode, ::Module, ::Expr) at /home/vagrant/.julia/v0.7/AutoDiffSource/src/AutoDiffSource.jl:33
 [10] include at ./boot.jl:293 [inlined]
 [11] include_relative(::Module, ::String) at ./loading.jl:521
 [12] include(::Module, ::String) at ./sysimg.jl:26
 [13] process_options(::Base.JLOptions) at ./client.jl:324
 [14] _start() at ./client.jl:375
in expression starting at /home/vagrant/.julia/v0.7/AutoDiffSource/test/runtests.jl:29
in expression starting at /home/vagrant/.julia/v0.7/AutoDiffSource/test/runtests.jl:29
┌ Error: ------------------------------------------------------------
│ # Testing failed for AutoDiffSource
│   exception =
│    failed process: Process(`/home/vagrant/julia/bin/julia -Cnative -J/home/vagrant/julia/lib/julia/sys.so --compile=yes --depwarn=yes --code-coverage=none --color=no --compiled-modules=yes --check-bounds=yes --warn-overwrite=yes --startup-file=yes /home/vagrant/.julia/v0.7/AutoDiffSource/test/runtests.jl`, ProcessExited(1)) [1]
│    Stacktrace:
│     [1] error(::String, ::Base.Process, ::String, ::Int64, ::String) at ./error.jl:42
│     [2] pipeline_error(::Base.Process) at ./process.jl:707
│     [3] run(::Cmd) at ./process.jl:669
│     [4] (::getfield(Base.Pkg.Entry, Symbol("##91#94")){Bool,String,Array{AbstractString,1}})() at ./pkg/entry.jl:736
│     [5] cd(::getfield(Base.Pkg.Entry, Symbol("##91#94")){Bool,String,Array{AbstractString,1}}, ::String) at ./file.jl:70
│     [6] #test!#90(::Bool, ::Function, ::String, ::Array{AbstractString,1}, ::Array{AbstractString,1}, ::Array{AbstractString,1}) at ./pkg/entry.jl:724
│     [7] (::getfield(Base.Pkg.Entry, Symbol("#kw##test!")))(::NamedTuple{(:coverage,),Tuple{Bool}}, ::typeof(Base.Pkg.Entry.test!), ::String, ::Array{AbstractString,1}, ::Array{AbstractString,1}, ::Array{AbstractString,1}) at ./<missing>:0
│     [8] #test#98(::Bool, ::Function, ::Array{AbstractString,1}) at ./pkg/entry.jl:763
│     [9] (::getfield(Base.Pkg.Entry, Symbol("#kw##test")))(::NamedTuple{(:coverage,),Tuple{Bool}}, ::typeof(Base.Pkg.Entry.test), ::Array{AbstractString,1}) at ./<missing>:0
│     [10] (::getfield(Base.Pkg.Dir, Symbol("##4#7")){Base.Iterators.IndexValue{Symbol,Bool,Tuple{Symbol},NamedTuple{(:coverage,),Tuple{Bool}}},typeof(Base.Pkg.Entry.test),Tuple{Array{AbstractString,1}}})() at ./pkg/dir.jl:36
│     [11] cd(::getfield(Base.Pkg.Dir, Symbol("##4#7")){Base.Iterators.IndexValue{Symbol,Bool,Tuple{Symbol},NamedTuple{(:coverage,),Tuple{Bool}}},typeof(Base.Pkg.Entry.test),Tuple{Array{AbstractString,1}}}, ::String) at ./file.jl:70
│     [12] #cd#1(::Base.Iterators.IndexValue{Symbol,Bool,Tuple{Symbol},NamedTuple{(:coverage,),Tuple{Bool}}}, ::Function, ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N} where N) at ./pkg/dir.jl:36
│     [13] (::getfield(Base.Pkg.Dir, Symbol("#kw##cd")))(::NamedTuple{(:coverage,),Tuple{Bool}}, ::typeof(Base.Pkg.Dir.cd), ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N} where N) at ./<missing>:0
│     [14] #test#3(::Bool, ::Function, ::String, ::Vararg{String,N} where N) at ./pkg/pkg.jl:274
│     [15] test(::String, ::Vararg{String,N} where N) at ./pkg/pkg.jl:274
│     [16] top-level scope
│     [17] eval at ./boot.jl:296 [inlined]
│     [18] eval(::Module, ::Expr) at ./sysimg.jl:71
│     [19] process_options(::Base.JLOptions) at ./client.jl:301
│     [20] _start() at ./client.jl:375
└                                                  @ Base.Pkg.Entry entry.jl:739
ERROR: AutoDiffSource had test errors

>>> End of log
