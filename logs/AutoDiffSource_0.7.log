>>> 'Pkg.add("AutoDiffSource")' log
WARNING: Base.Pkg is deprecated, run `using Pkg` instead.
 in module Main
[ Info: Cloning cache of AutoDiffSource from https://github.com/gaika/AutoDiffSource.jl.git
[ Info: Installing AutoDiffSource v0.2.3
[ Info: Installing BinDeps v0.8.6
[ Info: Installing SHA v0.5.6
[ Info: Installing SpecialFunctions v0.3.8
[ Info: Installing URIParser v0.3.0
[ Info: Building SpecialFunctions
┌ Warning: `isalnum(c::Char)` is deprecated, use `isalpha(c) || isnumeric(c)` instead.
│   caller = is_userinfo_char at parser.jl:4 [inlined]
└ @ Core parser.jl:4
┌ Warning: `isalnum(c::Char)` is deprecated, use `isalpha(c) || isnumeric(c)` instead.
│   caller = is_host_char at parser.jl:8 [inlined]
└ @ Core parser.jl:8
┌ Warning: `isalnum(c::Char)` is deprecated, use `isalpha(c) || isnumeric(c)` instead.
│   caller = is_host_char at parser.jl:8 [inlined]
└ @ Core parser.jl:8
WARNING: importing deprecated binding Base.Associative into BinDeps.
WARNING: Base.Associative is deprecated, use AbstractDict instead.
  likely near /home/vagrant/.julia/v0.7/SpecialFunctions/deps/binaries.jl:44
in @install at /home/vagrant/.julia/v0.7/BinDeps/src/dependencies.jl
[ Info: Package database updated

>>> 'Pkg.test("AutoDiffSource")' log
WARNING: Base.versioninfo is deprecated: it has been moved to the standard library package `InteractiveUtils`.
Add a `using InteractiveUtils` to your imports..
 in module Main
WARNING: Base.versioninfo is deprecated: it has been moved to the standard library package `InteractiveUtils`.
Add a `using InteractiveUtils` to your imports..
 in module Main
Julia Version 0.7.0-DEV.3703
Commit 358ccc2b20 (2018-02-02 20:43 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
      Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-135-generic #184-Ubuntu SMP Wed Oct 18 11:55:51 UTC 2017 x86_64 x86_64
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
              speed         user         nice          sys         idle          irq
       #1  3498 MHz     539714 s        104 s      35201 s     220743 s         11 s
       #2  3498 MHz     163012 s         41 s      19071 s     706429 s          0 s
       
  Memory: 2.93927001953125 GB (647.91015625 MB free)
  Uptime: 9110.0 sec
  Load Avg:  1.04638671875  0.97509765625  1.04736328125
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant
Packages:
  Package Directory: /home/vagrant/.julia/v0.7
  Package Status:
2 required packages:
 - AutoDiffSource                0.2.3
 - JSON                          0.16.4
6 additional packages:
 - BinDeps                       0.8.6
 - Compat                        0.51.0
 - Nullables                     0.0.3
 - SHA                           0.5.6
 - SpecialFunctions              0.3.8
 - URIParser                     0.3.0
WARNING: Base.Pkg is deprecated, run `using Pkg` instead.
 in module Main
[ Info: Testing AutoDiffSource
┌ Warning: Deprecated syntax `type` at /home/vagrant/.julia/v0.7/AutoDiffSource/src/parse.jl:5.
│ Use `mutable struct` instead.
└ @ nothing parse.jl:5
┌ Warning: Deprecated syntax `parametric method syntax safediv{T}(x::T, y)` around /home/vagrant/.julia/v0.7/AutoDiffSource/src/func.jl:16.
│ Use `safediv(x::T, y) where T` instead.
└ @ nothing func.jl:16
┌ Warning: Deprecated syntax `parametric method syntax δdot_divide{T}(x::T, y::T)` around /home/vagrant/.julia/v0.7/AutoDiffSource/src/func.jl:34.
│ Use `δdot_divide(x::T, y::T) where T` instead.
└ @ nothing func.jl:34
┌ Warning: Deprecated syntax `parametric method syntax δdot_minus{T}(x::T, y::T)` around /home/vagrant/.julia/v0.7/AutoDiffSource/src/func.jl:41.
│ Use `δdot_minus(x::T, y::T) where T` instead.
└ @ nothing func.jl:41
┌ Warning: Deprecated syntax `parametric method syntax δdot_plus{T}(x::T, y::T)` around /home/vagrant/.julia/v0.7/AutoDiffSource/src/func.jl:48.
│ Use `δdot_plus(x::T, y::T) where T` instead.
└ @ nothing func.jl:48
┌ Warning: Deprecated syntax `parametric method syntax δdot_power{T}(x::T, y::T)` around /home/vagrant/.julia/v0.7/AutoDiffSource/src/func.jl:55.
│ Use `δdot_power(x::T, y::T) where T` instead.
└ @ nothing func.jl:55
┌ Warning: Deprecated syntax `parametric method syntax δdot_times{T}(x::T, y::T)` around /home/vagrant/.julia/v0.7/AutoDiffSource/src/func.jl:62.
│ Use `δdot_times(x::T, y::T) where T` instead.
└ @ nothing func.jl:62
┌ Warning: Deprecated syntax `parametric method syntax δminus{T}(x::T, y::T)` around /home/vagrant/.julia/v0.7/AutoDiffSource/src/func.jl:87.
│ Use `δminus(x::T, y::T) where T` instead.
└ @ nothing func.jl:87
┌ Warning: Deprecated syntax `parametric method syntax δplus{T}(x::T, y::T)` around /home/vagrant/.julia/v0.7/AutoDiffSource/src/func.jl:95.
│ Use `δplus(x::T, y::T) where T` instead.
└ @ nothing func.jl:95
┌ Warning: Deprecated syntax `parametric method syntax δzeros{T}(x::T)::T` around /home/vagrant/.julia/v0.7/AutoDiffSource/src/func.jl:119.
│ Use `δzeros(x::T) where T` instead.
└ @ nothing func.jl:119
┌ Warning: Deprecated syntax `parametric method syntax δmulticast{T <: AbstractArray}(f, x1::T, x2::T)` around /home/vagrant/.julia/v0.7/AutoDiffSource/src/multicast.jl:39.
│ Use `δmulticast(f, x1::T, x2::T) where T <: AbstractArray` instead.
└ @ nothing multicast.jl:39
WARNING: Base.Test is deprecated, run `using Test` instead.
  likely near /home/vagrant/.julia/v0.7/AutoDiffSource/test/runtests.jl:2
┌ Warning: `macroexpand(x)` is deprecated, use `macroexpand(module, x)` instead.
│   caller = @δ(::LineNumberNode, ::Module, ::Expr) at AutoDiffSource.jl:33
└ @ AutoDiffSource AutoDiffSource.jl:33
ERROR: LoadError: LoadError: BoundsError: attempt to access 0-element Array{Any,1} at index [2]
Stacktrace:
 [1] getindex(::Array{Any,1}, ::Int64) at ./array.jl:652
 [2] parse_line!(::Array{Any,1}, ::Expr, ::LineNumberNode) at /home/vagrant/.julia/v0.7/AutoDiffSource/src/parse.jl:62
 [3] (::getfield(AutoDiffSource, Symbol("##10#11")))(::LineNumberNode) at ./<missing>:0
 [4] next at ./generator.jl:47 [inlined]
 [5] collect(::Base.Generator{Array{Any,1},getfield(AutoDiffSource, Symbol("##10#11"))}) at ./array.jl:542
 [6] parse_function(::Expr, ::Expr, ::Dict{Symbol,Symbol}) at /home/vagrant/.julia/v0.7/AutoDiffSource/src/parse.jl:58
 [7] parse_function at /home/vagrant/.julia/v0.7/AutoDiffSource/src/parse.jl:48 [inlined]
 [8] δ(::Expr, ::Expr) at /home/vagrant/.julia/v0.7/AutoDiffSource/src/AutoDiffSource.jl:57 (repeats 2 times)
 [9] @δ(::LineNumberNode, ::Module, ::Expr) at /home/vagrant/.julia/v0.7/AutoDiffSource/src/AutoDiffSource.jl:33
 [10] include at ./boot.jl:296 [inlined]
 [11] include_relative(::Module, ::String) at ./loading.jl:1012
 [12] include(::Module, ::String) at ./sysimg.jl:26
 [13] exec_options(::Base.JLOptions) at ./client.jl:332
 [14] _start() at ./client.jl:447
in expression starting at /home/vagrant/.julia/v0.7/AutoDiffSource/test/runtests.jl:29
in expression starting at /home/vagrant/.julia/v0.7/AutoDiffSource/test/runtests.jl:29
┌ Error: ------------------------------------------------------------
│ # Testing failed for AutoDiffSource
│   exception =
│    failed process: Process(`/home/vagrant/julia/bin/julia -Cnative -J/home/vagrant/julia/lib/julia/sys.so --compile=yes --depwarn=yes --code-coverage=none --color=no --compiled-modules=yes --check-bounds=yes --warn-overwrite=yes --startup-file=yes /home/vagrant/.julia/v0.7/AutoDiffSource/test/runtests.jl`, ProcessExited(1)) [1]
│    Stacktrace:
│     [1] error(::String, ::Base.Process, ::String, ::Int64, ::String) at ./error.jl:42
│     [2] pipeline_error(::Base.Process) at ./process.jl:698
│     [3] run(::Cmd) at ./process.jl:660
│     [4] (::getfield(Pkg.Entry, Symbol("##89#92")){Bool,String,Array{AbstractString,1}})() at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Pkg/src/entry.jl:731
│     [5] cd(::getfield(Pkg.Entry, Symbol("##89#92")){Bool,String,Array{AbstractString,1}}, ::String) at ./file.jl:70
│     [6] #test!#88(::Bool, ::Function, ::String, ::Array{AbstractString,1}, ::Array{AbstractString,1}, ::Array{AbstractString,1}) at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Pkg/src/entry.jl:719
│     [7] (::getfield(Pkg.Entry, Symbol("#kw##test!")))(::NamedTuple{(:coverage,),Tuple{Bool}}, ::typeof(Pkg.Entry.test!), ::String, ::Array{AbstractString,1}, ::Array{AbstractString,1}, ::Array{AbstractString,1}) at ./<missing>:0
│     [8] #test#96(::Bool, ::Function, ::Array{AbstractString,1}) at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Pkg/src/entry.jl:758
│     [9] (::getfield(Pkg.Entry, Symbol("#kw##test")))(::NamedTuple{(:coverage,),Tuple{Bool}}, ::typeof(Pkg.Entry.test), ::Array{AbstractString,1}) at ./<missing>:0
│     [10] (::getfield(Pkg.Dir, Symbol("##4#7")){Base.Iterators.Pairs{Symbol,Bool,Tuple{Symbol},NamedTuple{(:coverage,),Tuple{Bool}}},typeof(Pkg.Entry.test),Tuple{Array{AbstractString,1}}})() at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Pkg/src/dir.jl:36
│     [11] cd(::getfield(Pkg.Dir, Symbol("##4#7")){Base.Iterators.Pairs{Symbol,Bool,Tuple{Symbol},NamedTuple{(:coverage,),Tuple{Bool}}},typeof(Pkg.Entry.test),Tuple{Array{AbstractString,1}}}, ::String) at ./file.jl:70
│     [12] #cd#1(::Base.Iterators.Pairs{Symbol,Bool,Tuple{Symbol},NamedTuple{(:coverage,),Tuple{Bool}}}, ::Function, ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N} where N) at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Pkg/src/dir.jl:36
│     [13] (::getfield(Pkg.Dir, Symbol("#kw##cd")))(::NamedTuple{(:coverage,),Tuple{Bool}}, ::typeof(Pkg.Dir.cd), ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N} where N) at ./<missing>:0
│     [14] #test#3(::Bool, ::Function, ::String, ::Vararg{String,N} where N) at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Pkg/src/Pkg.jl:275
│     [15] test(::String, ::Vararg{String,N} where N) at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Pkg/src/Pkg.jl:275
│     [16] top-level scope
│     [17] eval at ./boot.jl:299 [inlined]
│     [18] eval(::Module, ::Expr) at ./sysimg.jl:71
│     [19] exec_options(::Base.JLOptions) at ./client.jl:309
│     [20] _start() at ./client.jl:447
└ @ Pkg.Entry entry.jl:734
ERROR: AutoDiffSource had test errors

>>> End of log
