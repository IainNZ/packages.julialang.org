>>> 'Pkg.add("BDF")' log
[ Info: Cloning cache of BDF from https://github.com/sam81/BDF.jl.git
[ Info: Cloning cache of DocStringExtensions from https://github.com/JuliaDocs/DocStringExtensions.jl.git
[ Info: Installing BDF v0.3.0
[ Info: Installing BinDeps v0.8.5
[ Info: Installing Blosc v0.3.0
[ Info: Installing DocStringExtensions v0.4.3
[ Info: Installing HDF5 v0.8.8
[ Info: Installing SHA v0.5.3
[ Info: Installing URIParser v0.3.0
[ Info: Building Blosc
┌ Error: ------------------------------------------------------------
│ # Build failed for Blosc
│   exception =
│    LoadError: ArgumentError: Module BinDeps not found in current path.
│    Run `Pkg.add("BinDeps")` to install the BinDeps package.
│    Stacktrace:
│     [1] require(::Module, ::Symbol) at ./loading.jl:813
│     [2] include at ./boot.jl:292 [inlined]
│     [3] include_relative(::Module, ::String) at ./loading.jl:1011
│     [4] include at ./sysimg.jl:26 [inlined]
│     [5] include(::String) at ./loading.jl:1045
│     [6] top-level scope
│     [7] eval at ./boot.jl:295 [inlined]
│     [8] eval at ./sysimg.jl:71 [inlined]
│     [9] evalfile(::String, ::Array{String,1}) at ./loading.jl:1040 (repeats 2 times)
│     [10] #2 at ./none:12 [inlined]
│     [11] cd(::getfield(, Symbol("##2#5")){String}, ::String) at ./file.jl:70
│     [12] (::getfield(, Symbol("##1#3")))(::IOStream) at ./none:11
│     [13] open(::getfield(, Symbol("##1#3")), ::String, ::String) at ./iostream.jl:310
│     [14] top-level scope
│     [15] eval at ./boot.jl:295 [inlined]
│     [16] eval(::Module, ::Expr) at ./sysimg.jl:71
│     [17] process_options(::Base.JLOptions) at ./client.jl:301
│     [18] _start() at ./client.jl:375
│    in expression starting at /home/vagrant/.julia/v0.7/Blosc/deps/build.jl:1
└ @ Main none:15
[ Info: Building HDF5
┌ Error: ------------------------------------------------------------
│ # Build failed for HDF5
│   exception =
│    LoadError: ArgumentError: Module BinDeps not found in current path.
│    Run `Pkg.add("BinDeps")` to install the BinDeps package.
│    Stacktrace:
│     [1] require(::Module, ::Symbol) at ./loading.jl:813
│     [2] include at ./boot.jl:292 [inlined]
│     [3] include_relative(::Module, ::String) at ./loading.jl:1011
│     [4] include at ./sysimg.jl:26 [inlined]
│     [5] include(::String) at ./loading.jl:1045
│     [6] top-level scope
│     [7] eval at ./boot.jl:295 [inlined]
│     [8] eval at ./sysimg.jl:71 [inlined]
│     [9] evalfile(::String, ::Array{String,1}) at ./loading.jl:1040 (repeats 2 times)
│     [10] #2 at ./none:12 [inlined]
│     [11] cd(::getfield(, Symbol("##2#5")){String}, ::String) at ./file.jl:70
│     [12] (::getfield(, Symbol("##1#3")))(::IOStream) at ./none:11
│     [13] open(::getfield(, Symbol("##1#3")), ::String, ::String) at ./iostream.jl:310
│     [14] top-level scope
│     [15] eval at ./boot.jl:295 [inlined]
│     [16] eval(::Module, ::Expr) at ./sysimg.jl:71
│     [17] process_options(::Base.JLOptions) at ./client.jl:301
│     [18] _start() at ./client.jl:375
│    in expression starting at /home/vagrant/.julia/v0.7/HDF5/deps/build.jl:1
└ @ Main none:15
┌ Warning: ------------------------------------------------------------
│ # Build error summary
│ 
│ HDF5 and Blosc had build errors.
│ 
│  - packages with build errors remain installed in /home/vagrant/.julia/v0.7
│  - build the package(s) and all dependencies with `Pkg.build("HDF5", "Blosc")`
│  - build a single package by running its `deps/build.jl` script
└ @ Base.Pkg.Entry entry.jl:648
[ Info: Package database updated

>>> 'Pkg.test("BDF")' log
Julia Version 0.7.0-DEV.3487
Commit 808e828bcb (2018-01-20 20:33 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
      Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-135-generic #184-Ubuntu SMP Wed Oct 18 11:55:51 UTC 2017 x86_64 x86_64
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
              speed         user         nice          sys         idle          irq
       #1  3499 MHz     649246 s         98 s      39338 s     171503 s          7 s
       #2  3499 MHz     119747 s         57 s      15357 s     866611 s          0 s
       
  Memory: 2.93927001953125 GB (1050.24609375 MB free)
  Uptime: 10138.0 sec
  Load Avg:  1.06005859375  0.9794921875  1.00244140625
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant
Packages:
  Package Directory: /home/vagrant/.julia/v0.7
  Package Status:
2 required packages:
 - BDF                           0.3.0
 - JSON                          0.16.4
8 additional packages:
 - BinDeps                       0.8.5
 - Blosc                         0.3.0
 - Compat                        0.48.0
 - DocStringExtensions           0.4.3
 - HDF5                          0.8.8
 - Nullables                     0.0.3
 - SHA                           0.5.3
 - URIParser                     0.3.0
[ Info: Testing BDF
┌ Warning: Deprecated syntax `parametric method syntax writeBDF{P <: Real, Q <: Real, R <: Real, S <: String, T <: String, U <: String, V <: Real, W <: Real, Z <: String}(fName::AbstractString, data::AbstractMatrix{P}, trigChan::AbstractVector{Q}, statusChan::AbstractVector{R}, sampRate::Integer; subjID::String = "", recID::String = "", startDate::String = Libc.strftime("%d.%m.%y", time()), startTime::String = Libc.strftime("%H.%M.%S", time()), versionDataFormat::String = "24BIT", chanLabels::AbstractVector{S} = [ "" for i = 1:size(data)[1] ], transducer::AbstractVector{T} = [ "" for i = 1:size(data)[1] ], physDim::AbstractVector{U} = [ "" for i = 1:size(data)[1] ], physMin::AbstractVector{V} = [ -262144 for i = 1:size(data)[1] ], physMax::AbstractVector{W} = [ 262144 for i = 1:size(data)[1] ], prefilt::AbstractVector{Z} = [ "" for i = 1:size(data)[1] ])` around /home/vagrant/.julia/v0.7/BDF/src/BDF.jl:449.
│ Use `writeBDF(fName::AbstractString, data::AbstractMatrix{P}, trigChan::AbstractVector{Q}, statusChan::AbstractVector{R}, sampRate::Integer; subjID::String = "", recID::String = "", startDate::String = Libc.strftime("%d.%m.%y", time()), startTime::String = Libc.strftime("%H.%M.%S", time()), versionDataFormat::String = "24BIT", chanLabels::AbstractVector{S} = [ "" for i = 1:size(data)[1] ], transducer::AbstractVector{T} = [ "" for i = 1:size(data)[1] ], physDim::AbstractVector{U} = [ "" for i = 1:size(data)[1] ], physMin::AbstractVector{V} = [ -262144 for i = 1:size(data)[1] ], physMax::AbstractVector{W} = [ 262144 for i = 1:size(data)[1] ], prefilt::AbstractVector{Z} = [ "" for i = 1:size(data)[1] ]) where {P <: Real, Q <: Real, R <: Real, S <: String, T <: String, U <: String, V <: Real, W <: Real, Z <: String}` instead.
└ @ nothing BDF.jl:449
┌ Warning: Deprecated syntax `parametric method syntax splitBDFAtTime{T <: Real}(fName::AbstractString, timeSeconds::Union{T, AbstractVector{T}}; from::Real = 0, to::Real = -1)` around /home/vagrant/.julia/v0.7/BDF/src/BDF.jl:858.
│ Use `splitBDFAtTime(fName::AbstractString, timeSeconds::Union{T, AbstractVector{T}}; from::Real = 0, to::Real = -1) where T <: Real` instead.
└ @ nothing BDF.jl:858
WARNING: Base.Test is deprecated, run `using Test` instead.
  likely near /home/vagrant/.julia/v0.7/BDF/test/test_read_write.jl:1
┌ Warning: `read(s::IO, t::Type, d1::Int, dims::Int...)` is deprecated, use `read!(s, Array{t}(uninitialized, tuple(d1, dims...)))` instead.
│   caller = #readBDFHeader#13(::String, ::Function, ::IOStream) at BDF.jl:289
└ @ BDF BDF.jl:289
┌ Warning: `read(s::IO, t::Type, d1::Int, dims::Int...)` is deprecated, use `read!(s, Array{t}(uninitialized, tuple(d1, dims...)))` instead.
│   caller = #readBDFHeader#13(::String, ::Function, ::IOStream) at BDF.jl:290
└ @ BDF BDF.jl:290
┌ Warning: `read(s::IO, t::Type, d1::Int, dims::Int...)` is deprecated, use `read!(s, Array{t}(uninitialized, tuple(d1, dims...)))` instead.
│   caller = #readBDFHeader#13(::String, ::Function, ::IOStream) at BDF.jl:291
└ @ BDF BDF.jl:291
┌ Warning: `read(s::IO, t::Type, d1::Int, dims::Int...)` is deprecated, use `read!(s, Array{t}(uninitialized, tuple(d1, dims...)))` instead.
│   caller = #readBDFHeader#13(::String, ::Function, ::IOStream) at BDF.jl:292
└ @ BDF BDF.jl:292
┌ Warning: `read(s::IO, t::Type, d1::Int, dims::Int...)` is deprecated, use `read!(s, Array{t}(uninitialized, tuple(d1, dims...)))` instead.
│   caller = #readBDFHeader#13(::String, ::Function, ::IOStream) at BDF.jl:293
└ @ BDF BDF.jl:293
┌ Warning: `read(s::IO, t::Type, d1::Int, dims::Int...)` is deprecated, use `read!(s, Array{t}(uninitialized, tuple(d1, dims...)))` instead.
│   caller = #readBDFHeader#13(::String, ::Function, ::IOStream) at BDF.jl:294
└ @ BDF BDF.jl:294
┌ Warning: `read(s::IO, t::Type, d1::Int, dims::Int...)` is deprecated, use `read!(s, Array{t}(uninitialized, tuple(d1, dims...)))` instead.
│   caller = #readBDFHeader#13(::String, ::Function, ::IOStream) at BDF.jl:295
└ @ BDF BDF.jl:295
┌ Warning: `read(s::IO, t::Type, d1::Int, dims::Int...)` is deprecated, use `read!(s, Array{t}(uninitialized, tuple(d1, dims...)))` instead.
│   caller = #readBDFHeader#13(::String, ::Function, ::IOStream) at BDF.jl:296
└ @ BDF BDF.jl:296
┌ Warning: `read(s::IO, t::Type, d1::Int, dims::Int...)` is deprecated, use `read!(s, Array{t}(uninitialized, tuple(d1, dims...)))` instead.
│   caller = #readBDFHeader#13(::String, ::Function, ::IOStream) at BDF.jl:297
└ @ BDF BDF.jl:297
┌ Warning: `read(s::IO, t::Type, d1::Int, dims::Int...)` is deprecated, use `read!(s, Array{t}(uninitialized, tuple(d1, dims...)))` instead.
│   caller = #readBDFHeader#13(::String, ::Function, ::IOStream) at BDF.jl:298
└ @ BDF BDF.jl:298
┌ Warning: `float(x::AbstractString)` is deprecated, use `parse(Float64, x)` instead.
│   caller = #readBDFHeader#13(::String, ::Function, ::IOStream) at BDF.jl:298
└ @ BDF BDF.jl:298
┌ Warning: `read(s::IO, t::Type, d1::Int, dims::Int...)` is deprecated, use `read!(s, Array{t}(uninitialized, tuple(d1, dims...)))` instead.
│   caller = #readBDFHeader#13(::String, ::Function, ::IOStream) at BDF.jl:299
└ @ BDF BDF.jl:299
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(uninitialized, m)` instead.
│   caller = #readBDFHeader#13(::String, ::Function, ::IOStream) at BDF.jl:300
└ @ BDF BDF.jl:300
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(uninitialized, m)` instead.
│   caller = #readBDFHeader#13(::String, ::Function, ::IOStream) at BDF.jl:301
└ @ BDF BDF.jl:301
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(uninitialized, m)` instead.
│   caller = #readBDFHeader#13(::String, ::Function, ::IOStream) at BDF.jl:302
└ @ BDF BDF.jl:302
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(uninitialized, m)` instead.
│   caller = #readBDFHeader#13(::String, ::Function, ::IOStream) at BDF.jl:303
└ @ BDF BDF.jl:303
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(uninitialized, m)` instead.
│   caller = #readBDFHeader#13(::String, ::Function, ::IOStream) at BDF.jl:304
└ @ BDF BDF.jl:304
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(uninitialized, m)` instead.
│   caller = #readBDFHeader#13(::String, ::Function, ::IOStream) at BDF.jl:305
└ @ BDF BDF.jl:305
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(uninitialized, m)` instead.
│   caller = #readBDFHeader#13(::String, ::Function, ::IOStream) at BDF.jl:306
└ @ BDF BDF.jl:306
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(uninitialized, m)` instead.
│   caller = #readBDFHeader#13(::String, ::Function, ::IOStream) at BDF.jl:307
└ @ BDF BDF.jl:307
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(uninitialized, m)` instead.
│   caller = #readBDFHeader#13(::String, ::Function, ::IOStream) at BDF.jl:308
└ @ BDF BDF.jl:308
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(uninitialized, m)` instead.
│   caller = #readBDFHeader#13(::String, ::Function, ::IOStream) at BDF.jl:309
└ @ BDF BDF.jl:309
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(uninitialized, m)` instead.
│   caller = #readBDFHeader#13(::String, ::Function, ::IOStream) at BDF.jl:310
└ @ BDF BDF.jl:310
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(uninitialized, m)` instead.
│   caller = #readBDFHeader#13(::String, ::Function, ::IOStream) at BDF.jl:311
└ @ BDF BDF.jl:311
┌ Warning: `read(s::IO, t::Type, d1::Int, dims::Int...)` is deprecated, use `read!(s, Array{t}(uninitialized, tuple(d1, dims...)))` instead.
│   caller = #readBDFHeader#13(::String, ::Function, ::IOStream) at BDF.jl:316
└ @ BDF BDF.jl:316
┌ Warning: `read(s::IO, t::Type, d1::Int, dims::Int...)` is deprecated, use `read!(s, Array{t}(uninitialized, tuple(d1, dims...)))` instead.
│   caller = #readBDFHeader#13(::String, ::Function, ::IOStream) at BDF.jl:320
└ @ BDF BDF.jl:320
┌ Warning: `read(s::IO, t::Type, d1::Int, dims::Int...)` is deprecated, use `read!(s, Array{t}(uninitialized, tuple(d1, dims...)))` instead.
│   caller = #readBDFHeader#13(::String, ::Function, ::IOStream) at BDF.jl:324
└ @ BDF BDF.jl:324
┌ Warning: `read(s::IO, t::Type, d1::Int, dims::Int...)` is deprecated, use `read!(s, Array{t}(uninitialized, tuple(d1, dims...)))` instead.
│   caller = #readBDFHeader#13(::String, ::Function, ::IOStream) at BDF.jl:328
└ @ BDF BDF.jl:328
┌ Warning: `read(s::IO, t::Type, d1::Int, dims::Int...)` is deprecated, use `read!(s, Array{t}(uninitialized, tuple(d1, dims...)))` instead.
│   caller = #readBDFHeader#13(::String, ::Function, ::IOStream) at BDF.jl:332
└ @ BDF BDF.jl:332
┌ Warning: `read(s::IO, t::Type, d1::Int, dims::Int...)` is deprecated, use `read!(s, Array{t}(uninitialized, tuple(d1, dims...)))` instead.
│   caller = #readBDFHeader#13(::String, ::Function, ::IOStream) at BDF.jl:336
└ @ BDF BDF.jl:336
┌ Warning: `read(s::IO, t::Type, d1::Int, dims::Int...)` is deprecated, use `read!(s, Array{t}(uninitialized, tuple(d1, dims...)))` instead.
│   caller = #readBDFHeader#13(::String, ::Function, ::IOStream) at BDF.jl:340
└ @ BDF BDF.jl:340
┌ Warning: `read(s::IO, t::Type, d1::Int, dims::Int...)` is deprecated, use `read!(s, Array{t}(uninitialized, tuple(d1, dims...)))` instead.
│   caller = #readBDFHeader#13(::String, ::Function, ::IOStream) at BDF.jl:344
└ @ BDF BDF.jl:344
┌ Warning: `read(s::IO, t::Type, d1::Int, dims::Int...)` is deprecated, use `read!(s, Array{t}(uninitialized, tuple(d1, dims...)))` instead.
│   caller = #readBDFHeader#13(::String, ::Function, ::IOStream) at BDF.jl:348
└ @ BDF BDF.jl:348
┌ Warning: `read(s::IO, t::Type, d1::Int, dims::Int...)` is deprecated, use `read!(s, Array{t}(uninitialized, tuple(d1, dims...)))` instead.
│   caller = #readBDFHeader#13(::String, ::Function, ::IOStream) at BDF.jl:352
└ @ BDF BDF.jl:352
WARNING: importing deprecated binding Base.diff into BDF.
┌ Warning: `read(s::IO, t::Type, d1::Int, dims::Int...)` is deprecated, use `read!(s, Array{t}(uninitialized, tuple(d1, dims...)))` instead.
│   caller = #readBDF#6(::Int64, ::Int64, ::Array{Int64,1}, ::Bool, ::Function, ::IOStream) at BDF.jl:60
└ @ BDF BDF.jl:60
┌ Warning: `read(s::IO, t::Type, d1::Int, dims::Int...)` is deprecated, use `read!(s, Array{t}(uninitialized, tuple(d1, dims...)))` instead.
│   caller = #readBDF#6(::Int64, ::Int64, ::Array{Int64,1}, ::Bool, ::Function, ::IOStream) at BDF.jl:61
└ @ BDF BDF.jl:61
┌ Warning: `read(s::IO, t::Type, d1::Int, dims::Int...)` is deprecated, use `read!(s, Array{t}(uninitialized, tuple(d1, dims...)))` instead.
│   caller = #readBDF#6(::Int64, ::Int64, ::Array{Int64,1}, ::Bool, ::Function, ::IOStream) at BDF.jl:62
└ @ BDF BDF.jl:62
┌ Warning: `read(s::IO, t::Type, d1::Int, dims::Int...)` is deprecated, use `read!(s, Array{t}(uninitialized, tuple(d1, dims...)))` instead.
│   caller = #readBDF#6(::Int64, ::Int64, ::Array{Int64,1}, ::Bool, ::Function, ::IOStream) at BDF.jl:63
└ @ BDF BDF.jl:63
┌ Warning: `read(s::IO, t::Type, d1::Int, dims::Int...)` is deprecated, use `read!(s, Array{t}(uninitialized, tuple(d1, dims...)))` instead.
│   caller = #readBDF#6(::Int64, ::Int64, ::Array{Int64,1}, ::Bool, ::Function, ::IOStream) at BDF.jl:64
└ @ BDF BDF.jl:64
┌ Warning: `read(s::IO, t::Type, d1::Int, dims::Int...)` is deprecated, use `read!(s, Array{t}(uninitialized, tuple(d1, dims...)))` instead.
│   caller = #readBDF#6(::Int64, ::Int64, ::Array{Int64,1}, ::Bool, ::Function, ::IOStream) at BDF.jl:65
└ @ BDF BDF.jl:65
┌ Warning: `read(s::IO, t::Type, d1::Int, dims::Int...)` is deprecated, use `read!(s, Array{t}(uninitialized, tuple(d1, dims...)))` instead.
│   caller = #readBDF#6(::Int64, ::Int64, ::Array{Int64,1}, ::Bool, ::Function, ::IOStream) at BDF.jl:66
└ @ BDF BDF.jl:66
┌ Warning: `read(s::IO, t::Type, d1::Int, dims::Int...)` is deprecated, use `read!(s, Array{t}(uninitialized, tuple(d1, dims...)))` instead.
│   caller = #readBDF#6(::Int64, ::Int64, ::Array{Int64,1}, ::Bool, ::Function, ::IOStream) at BDF.jl:67
└ @ BDF BDF.jl:67
┌ Warning: `read(s::IO, t::Type, d1::Int, dims::Int...)` is deprecated, use `read!(s, Array{t}(uninitialized, tuple(d1, dims...)))` instead.
│   caller = #readBDF#6(::Int64, ::Int64, ::Array{Int64,1}, ::Bool, ::Function, ::IOStream) at BDF.jl:68
└ @ BDF BDF.jl:68
┌ Warning: `read(s::IO, t::Type, d1::Int, dims::Int...)` is deprecated, use `read!(s, Array{t}(uninitialized, tuple(d1, dims...)))` instead.
│   caller = #readBDF#6(::Int64, ::Int64, ::Array{Int64,1}, ::Bool, ::Function, ::IOStream) at BDF.jl:69
└ @ BDF BDF.jl:69
┌ Warning: `float(x::AbstractString)` is deprecated, use `parse(Float64, x)` instead.
│   caller = #readBDF#6(::Int64, ::Int64, ::Array{Int64,1}, ::Bool, ::Function, ::IOStream) at BDF.jl:69
└ @ BDF BDF.jl:69
┌ Warning: `read(s::IO, t::Type, d1::Int, dims::Int...)` is deprecated, use `read!(s, Array{t}(uninitialized, tuple(d1, dims...)))` instead.
│   caller = #readBDF#6(::Int64, ::Int64, ::Array{Int64,1}, ::Bool, ::Function, ::IOStream) at BDF.jl:70
└ @ BDF BDF.jl:70
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(uninitialized, m)` instead.
│   caller = #readBDF#6(::Int64, ::Int64, ::Array{Int64,1}, ::Bool, ::Function, ::IOStream) at BDF.jl:71
└ @ BDF BDF.jl:71
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(uninitialized, m)` instead.
│   caller = #readBDF#6(::Int64, ::Int64, ::Array{Int64,1}, ::Bool, ::Function, ::IOStream) at BDF.jl:72
└ @ BDF BDF.jl:72
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(uninitialized, m)` instead.
│   caller = #readBDF#6(::Int64, ::Int64, ::Array{Int64,1}, ::Bool, ::Function, ::IOStream) at BDF.jl:73
└ @ BDF BDF.jl:73
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(uninitialized, m)` instead.
│   caller = #readBDF#6(::Int64, ::Int64, ::Array{Int64,1}, ::Bool, ::Function, ::IOStream) at BDF.jl:74
└ @ BDF BDF.jl:74
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(uninitialized, m)` instead.
│   caller = #readBDF#6(::Int64, ::Int64, ::Array{Int64,1}, ::Bool, ::Function, ::IOStream) at BDF.jl:75
└ @ BDF BDF.jl:75
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(uninitialized, m)` instead.
│   caller = #readBDF#6(::Int64, ::Int64, ::Array{Int64,1}, ::Bool, ::Function, ::IOStream) at BDF.jl:76
└ @ BDF BDF.jl:76
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(uninitialized, m)` instead.
│   caller = #readBDF#6(::Int64, ::Int64, ::Array{Int64,1}, ::Bool, ::Function, ::IOStream) at BDF.jl:77
└ @ BDF BDF.jl:77
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(uninitialized, m)` instead.
│   caller = #readBDF#6(::Int64, ::Int64, ::Array{Int64,1}, ::Bool, ::Function, ::IOStream) at BDF.jl:78
└ @ BDF BDF.jl:78
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(uninitialized, m)` instead.
│   caller = #readBDF#6(::Int64, ::Int64, ::Array{Int64,1}, ::Bool, ::Function, ::IOStream) at BDF.jl:79
└ @ BDF BDF.jl:79
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(uninitialized, m)` instead.
│   caller = #readBDF#6(::Int64, ::Int64, ::Array{Int64,1}, ::Bool, ::Function, ::IOStream) at BDF.jl:80
└ @ BDF BDF.jl:80
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(uninitialized, m)` instead.
│   caller = #readBDF#6(::Int64, ::Int64, ::Array{Int64,1}, ::Bool, ::Function, ::IOStream) at BDF.jl:81
└ @ BDF BDF.jl:81
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(uninitialized, m)` instead.
│   caller = #readBDF#6(::Int64, ::Int64, ::Array{Int64,1}, ::Bool, ::Function, ::IOStream) at BDF.jl:82
└ @ BDF BDF.jl:82
┌ Warning: `read(s::IO, t::Type, d1::Int, dims::Int...)` is deprecated, use `read!(s, Array{t}(uninitialized, tuple(d1, dims...)))` instead.
│   caller = #readBDF#6(::Int64, ::Int64, ::Array{Int64,1}, ::Bool, ::Function, ::IOStream) at BDF.jl:93
└ @ BDF BDF.jl:93
┌ Warning: `read(s::IO, t::Type, d1::Int, dims::Int...)` is deprecated, use `read!(s, Array{t}(uninitialized, tuple(d1, dims...)))` instead.
│   caller = #readBDF#6(::Int64, ::Int64, ::Array{Int64,1}, ::Bool, ::Function, ::IOStream) at BDF.jl:97
└ @ BDF BDF.jl:97
┌ Warning: `read(s::IO, t::Type, d1::Int, dims::Int...)` is deprecated, use `read!(s, Array{t}(uninitialized, tuple(d1, dims...)))` instead.
│   caller = #readBDF#6(::Int64, ::Int64, ::Array{Int64,1}, ::Bool, ::Function, ::IOStream) at BDF.jl:101
└ @ BDF BDF.jl:101
┌ Warning: `read(s::IO, t::Type, d1::Int, dims::Int...)` is deprecated, use `read!(s, Array{t}(uninitialized, tuple(d1, dims...)))` instead.
│   caller = #readBDF#6(::Int64, ::Int64, ::Array{Int64,1}, ::Bool, ::Function, ::IOStream) at BDF.jl:105
└ @ BDF BDF.jl:105
┌ Warning: `read(s::IO, t::Type, d1::Int, dims::Int...)` is deprecated, use `read!(s, Array{t}(uninitialized, tuple(d1, dims...)))` instead.
│   caller = #readBDF#6(::Int64, ::Int64, ::Array{Int64,1}, ::Bool, ::Function, ::IOStream) at BDF.jl:109
└ @ BDF BDF.jl:109
┌ Warning: `read(s::IO, t::Type, d1::Int, dims::Int...)` is deprecated, use `read!(s, Array{t}(uninitialized, tuple(d1, dims...)))` instead.
│   caller = #readBDF#6(::Int64, ::Int64, ::Array{Int64,1}, ::Bool, ::Function, ::IOStream) at BDF.jl:113
└ @ BDF BDF.jl:113
┌ Warning: `read(s::IO, t::Type, d1::Int, dims::Int...)` is deprecated, use `read!(s, Array{t}(uninitialized, tuple(d1, dims...)))` instead.
│   caller = #readBDF#6(::Int64, ::Int64, ::Array{Int64,1}, ::Bool, ::Function, ::IOStream) at BDF.jl:117
└ @ BDF BDF.jl:117
┌ Warning: `read(s::IO, t::Type, d1::Int, dims::Int...)` is deprecated, use `read!(s, Array{t}(uninitialized, tuple(d1, dims...)))` instead.
│   caller = #readBDF#6(::Int64, ::Int64, ::Array{Int64,1}, ::Bool, ::Function, ::IOStream) at BDF.jl:121
└ @ BDF BDF.jl:121
┌ Warning: `read(s::IO, t::Type, d1::Int, dims::Int...)` is deprecated, use `read!(s, Array{t}(uninitialized, tuple(d1, dims...)))` instead.
│   caller = #readBDF#6(::Int64, ::Int64, ::Array{Int64,1}, ::Bool, ::Function, ::IOStream) at BDF.jl:125
└ @ BDF BDF.jl:125
┌ Warning: `read(s::IO, t::Type, d1::Int, dims::Int...)` is deprecated, use `read!(s, Array{t}(uninitialized, tuple(d1, dims...)))` instead.
│   caller = #readBDF#6(::Int64, ::Int64, ::Array{Int64,1}, ::Bool, ::Function, ::IOStream) at BDF.jl:129
└ @ BDF BDF.jl:129
┌ Warning: `Array{T}(m::Int, n::Int) where T` is deprecated, use `Array{T}(uninitialized, m, n)` instead.
│   caller = #readBDF#6(::Int64, ::Int64, ::Array{Int64,1}, ::Bool, ::Function, ::IOStream) at BDF.jl:148
└ @ BDF BDF.jl:148
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(uninitialized, m)` instead.
│   caller = #readBDF#6(::Int64, ::Int64, ::Array{Int64,1}, ::Bool, ::Function, ::IOStream) at BDF.jl:150
└ @ BDF BDF.jl:150
┌ Warning: `Array{T}(m::Int) where T` is deprecated, use `Array{T}(uninitialized, m)` instead.
│   caller = #readBDF#6(::Int64, ::Int64, ::Array{Int64,1}, ::Bool, ::Function, ::IOStream) at BDF.jl:151
└ @ BDF BDF.jl:151
┌ Warning: `read(s::IO, t::Type, d1::Int, dims::Int...)` is deprecated, use `read!(s, Array{t}(uninitialized, tuple(d1, dims...)))` instead.
│   caller = #readBDF#6(::Int64, ::Int64, ::Array{Int64,1}, ::Bool, ::Function, ::IOStream) at BDF.jl:155
└ @ BDF BDF.jl:155
┌ Warning: `findfirst(A, v)` is deprecated, use `findfirst(equalto(v), A)` instead.
│   caller = #readBDF#6(::Int64, ::Int64, ::Array{Int64,1}, ::Bool, ::Function, ::IOStream) at BDF.jl:183
└ @ BDF BDF.jl:183
ERROR: LoadError: LoadError: Base.diff has been moved to the standard library package LinearAlgebra.
Restart Julia and then run `using LinearAlgebra` to load it.
Stacktrace:
 [1] error(::Function, ::String, ::String, ::String, ::String, ::String, ::String) at ./error.jl:42
 [2] #diff#974 at ./deprecated.jl:138 [inlined]
 [3] diff at ./deprecated.jl:138 [inlined]
 [4] #readBDF#6(::Int64, ::Int64, ::Array{Int64,1}, ::Bool, ::Function, ::IOStream) at /home/vagrant/.julia/v0.7/BDF/src/BDF.jl:219
 [5] #readBDF at ./<missing>:0 [inlined]
 [6] #readBDF#1 at /home/vagrant/.julia/v0.7/BDF/src/BDF.jl:50 [inlined]
 [7] readBDF(::String) at /home/vagrant/.julia/v0.7/BDF/src/BDF.jl:43
 [8] top-level scope
 [9] include at ./boot.jl:292 [inlined]
 [10] include_relative(::Module, ::String) at ./loading.jl:1011
 [11] include(::Module, ::String) at ./sysimg.jl:26
 [12] include(::String) at ./sysimg.jl:65
 [13] top-level scope
 [14] include at ./boot.jl:292 [inlined]
 [15] include_relative(::Module, ::String) at ./loading.jl:1011
 [16] include(::Module, ::String) at ./sysimg.jl:26
 [17] process_options(::Base.JLOptions) at ./client.jl:324
 [18] _start() at ./client.jl:375
in expression starting at /home/vagrant/.julia/v0.7/BDF/test/test_read_write.jl:7
in expression starting at /home/vagrant/.julia/v0.7/BDF/test/runtests.jl:1
┌ Error: ------------------------------------------------------------
│ # Testing failed for BDF
│   exception =
│    failed process: Process(`/home/vagrant/julia/bin/julia -Cnative -J/home/vagrant/julia/lib/julia/sys.so --compile=yes --depwarn=yes --code-coverage=none --color=no --compiled-modules=yes --check-bounds=yes --warn-overwrite=yes --startup-file=yes /home/vagrant/.julia/v0.7/BDF/test/runtests.jl`, ProcessExited(1)) [1]
│    Stacktrace:
│     [1] error(::String, ::Base.Process, ::String, ::Int64, ::String) at ./error.jl:42
│     [2] pipeline_error(::Base.Process) at ./process.jl:694
│     [3] run(::Cmd) at ./process.jl:656
│     [4] (::getfield(Base.Pkg.Entry, Symbol("##91#94")){Bool,String,Array{AbstractString,1}})() at ./pkg/entry.jl:728
│     [5] cd(::getfield(Base.Pkg.Entry, Symbol("##91#94")){Bool,String,Array{AbstractString,1}}, ::String) at ./file.jl:70
│     [6] #test!#90(::Bool, ::Function, ::String, ::Array{AbstractString,1}, ::Array{AbstractString,1}, ::Array{AbstractString,1}) at ./pkg/entry.jl:716
│     [7] (::getfield(Base.Pkg.Entry, Symbol("#kw##test!")))(::NamedTuple{(:coverage,),Tuple{Bool}}, ::typeof(Base.Pkg.Entry.test!), ::String, ::Array{AbstractString,1}, ::Array{AbstractString,1}, ::Array{AbstractString,1}) at ./<missing>:0
│     [8] #test#98(::Bool, ::Function, ::Array{AbstractString,1}) at ./pkg/entry.jl:755
│     [9] (::getfield(Base.Pkg.Entry, Symbol("#kw##test")))(::NamedTuple{(:coverage,),Tuple{Bool}}, ::typeof(Base.Pkg.Entry.test), ::Array{AbstractString,1}) at ./<missing>:0
│     [10] (::getfield(Base.Pkg.Dir, Symbol("##4#7")){Base.Iterators.IndexValue{Symbol,Bool,Tuple{Symbol},NamedTuple{(:coverage,),Tuple{Bool}}},typeof(Base.Pkg.Entry.test),Tuple{Array{AbstractString,1}}})() at ./pkg/dir.jl:36
│     [11] cd(::getfield(Base.Pkg.Dir, Symbol("##4#7")){Base.Iterators.IndexValue{Symbol,Bool,Tuple{Symbol},NamedTuple{(:coverage,),Tuple{Bool}}},typeof(Base.Pkg.Entry.test),Tuple{Array{AbstractString,1}}}, ::String) at ./file.jl:70
│     [12] #cd#1(::Base.Iterators.IndexValue{Symbol,Bool,Tuple{Symbol},NamedTuple{(:coverage,),Tuple{Bool}}}, ::Function, ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N} where N) at ./pkg/dir.jl:36
│     [13] (::getfield(Base.Pkg.Dir, Symbol("#kw##cd")))(::NamedTuple{(:coverage,),Tuple{Bool}}, ::typeof(Base.Pkg.Dir.cd), ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N} where N) at ./<missing>:0
│     [14] #test#3(::Bool, ::Function, ::String, ::Vararg{String,N} where N) at ./pkg/pkg.jl:274
│     [15] test(::String, ::Vararg{String,N} where N) at ./pkg/pkg.jl:274
│     [16] top-level scope
│     [17] eval at ./boot.jl:295 [inlined]
│     [18] eval(::Module, ::Expr) at ./sysimg.jl:71
│     [19] process_options(::Base.JLOptions) at ./client.jl:301
│     [20] _start() at ./client.jl:375
└ @ Base.Pkg.Entry entry.jl:731
ERROR: BDF had test errors

>>> End of log
