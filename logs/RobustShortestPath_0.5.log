>>> 'Pkg.add("RobustShortestPath")' log
INFO: Cloning cache of RobustShortestPath from https://github.com/chkwon/RobustShortestPath.jl.git
INFO: Installing AutoHashEquals v0.1.1
INFO: Installing BinDeps v0.6.0
INFO: Installing Blosc v0.3.0
INFO: Installing Calculus v0.2.2
INFO: Installing DataStructures v0.6.1
INFO: Installing Distributions v0.13.0
INFO: Installing EzXML v0.4.5
INFO: Installing FileIO v0.5.1
INFO: Installing GZip v0.3.0
INFO: Installing HDF5 v0.8.5
INFO: Installing JLD v0.6.11
INFO: Installing LegacyStrings v0.2.2
INFO: Installing LightGraphs v0.7.7
INFO: Installing PDMats v0.7.0
INFO: Installing ParserCombinator v1.7.11
INFO: Installing QuadGK v0.1.3
INFO: Installing Rmath v0.2.0
INFO: Installing RobustShortestPath v0.2.3
INFO: Installing SHA v0.3.3
INFO: Installing SpecialFunctions v0.2.0
INFO: Installing StatsBase v0.17.0
INFO: Installing StatsFuns v0.5.0
INFO: Installing URIParser v0.2.0
INFO: Building Blosc
INFO: Building Rmath
INFO: Building EzXML
INFO: Building HDF5
INFO: Package database updated

>>> 'Pkg.test("RobustShortestPath")' log
Julia Version 0.5.2
Commit f4c6c9d (2017-05-06 16:34 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-128-generic #177-Ubuntu SMP Tue Aug 8 11:40:23 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (601.87109375 MB free)
Uptime: 33971.0 sec
Load Avg:  1.05517578125  0.9970703125  0.966796875
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz    2112665 s       6535 s     214183 s     653274 s         58 s
#2  3500 MHz     561185 s         92 s      86478 s    2680027 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.7.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.5
2 required packages:
 - JSON                          0.13.0
 - RobustShortestPath            0.2.3
23 additional packages:
 - AutoHashEquals                0.1.1
 - BinDeps                       0.6.0
 - Blosc                         0.3.0
 - Calculus                      0.2.2
 - Compat                        0.30.0
 - DataStructures                0.6.1
 - Distributions                 0.13.0
 - EzXML                         0.4.5
 - FileIO                        0.5.1
 - GZip                          0.3.0
 - HDF5                          0.8.5
 - JLD                           0.6.11
 - LegacyStrings                 0.2.2
 - LightGraphs                   0.7.7
 - PDMats                        0.7.0
 - ParserCombinator              1.7.11
 - QuadGK                        0.1.3
 - Rmath                         0.2.0
 - SHA                           0.3.3
 - SpecialFunctions              0.2.0
 - StatsBase                     0.17.0
 - StatsFuns                     0.5.0
 - URIParser                     0.2.0
INFO: Testing RobustShortestPath
Origin=1, Destination=15
----------------------------------------------------
Single Coefficient Case
Gamma=0: Robust Path is [1 2 4 3 8 12 14 15] and the worst-case cost is 6060.0.
Gamma=1: Robust Path is [1 4 3 8 12 14 15] and the worst-case cost is 15024.0.
Gamma=2: Robust Path is [1 4 3 8 12 14 15] and the worst-case cost is 20864.0.
Gamma=3: Robust Path is [1 4 3 8 12 14 15] and the worst-case cost is 26604.0.
Gamma=4: Robust Path is [1 4 3 7 12 15] and the worst-case cost is 31293.0.
Gamma=5: Robust Path is [1 4 3 8 12 15] and the worst-case cost is 32291.0.
----------------------------------------------------
Two Coefficient Case
(Gamma_u,Gamma_v)=(1,1): Robust Path is [1 4 3 8 12 14 15] and the worst-case cost is 15024.0.
(Gamma_u,Gamma_v)=(1,2): Robust Path is [1 4 3 7 12 14 15] and the worst-case cost is 19474.0.
(Gamma_u,Gamma_v)=(1,3): Robust Path is [1 4 3 7 12 14 15] and the worst-case cost is 20650.0.
(Gamma_u,Gamma_v)=(1,4): Robust Path is [1 4 3 7 12 14 15] and the worst-case cost is 21590.0.
(Gamma_u,Gamma_v)=(1,5): Robust Path is [1 4 3 7 12 14 15] and the worst-case cost is 22020.0.
(Gamma_u,Gamma_v)=(2,1): Robust Path is [1 4 3 8 12 14 15] and the worst-case cost is 17070.0.
(Gamma_u,Gamma_v)=(2,2): Robust Path is [1 4 3 8 12 14 15] and the worst-case cost is 21822.0.
(Gamma_u,Gamma_v)=(2,3): Robust Path is [1 4 3 7 12 14 15] and the worst-case cost is 25314.0.
(Gamma_u,Gamma_v)=(2,4): Robust Path is [1 4 3 7 12 14 15] and the worst-case cost is 26490.0.
(Gamma_u,Gamma_v)=(2,5): Robust Path is [1 4 3 7 12 15] and the worst-case cost is 27067.0.
(Gamma_u,Gamma_v)=(3,1): Robust Path is [1 4 3 8 12 14 15] and the worst-case cost is 18870.0.
(Gamma_u,Gamma_v)=(3,2): Robust Path is [1 4 3 8 12 14 15] and the worst-case cost is 23622.0.
(Gamma_u,Gamma_v)=(3,3): Robust Path is [1 4 3 8 12 14 15] and the worst-case cost is 27662.0.
(Gamma_u,Gamma_v)=(3,4): Robust Path is [1 4 3 7 12 15] and the worst-case cost is 29013.0.
(Gamma_u,Gamma_v)=(3,5): Robust Path is [1 4 3 7 12 15] and the worst-case cost is 29953.0.
(Gamma_u,Gamma_v)=(4,1): Robust Path is [1 4 3 8 12 14 15] and the worst-case cost is 19554.0.
(Gamma_u,Gamma_v)=(4,2): Robust Path is [1 4 3 8 12 14 15] and the worst-case cost is 24610.0.
(Gamma_u,Gamma_v)=(4,3): Robust Path is [1 4 3 8 12 14 15] and the worst-case cost is 28650.0.
(Gamma_u,Gamma_v)=(4,4): Robust Path is [1 4 3 7 12 15] and the worst-case cost is 31293.0.
(Gamma_u,Gamma_v)=(4,5): Robust Path is [1 4 3 8 12 15] and the worst-case cost is 31619.0.
(Gamma_u,Gamma_v)=(5,1): Robust Path is [1 4 3 8 12 14 15] and the worst-case cost is 20162.0.
(Gamma_u,Gamma_v)=(5,2): Robust Path is [1 4 3 8 12 14 15] and the worst-case cost is 25294.0.
(Gamma_u,Gamma_v)=(5,3): Robust Path is [1 4 3 8 12 15] and the worst-case cost is 29315.0.
(Gamma_u,Gamma_v)=(5,4): Robust Path is [1 4 3 7 12 15] and the worst-case cost is 31965.0.
(Gamma_u,Gamma_v)=(5,5): Robust Path is [1 4 3 8 12 15] and the worst-case cost is 32291.0.
32291.0
INFO: RobustShortestPath tests passed

>>> End of log
