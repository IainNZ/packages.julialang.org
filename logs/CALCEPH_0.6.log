>>> 'Pkg.add("CALCEPH")' log
INFO: Cloning cache of CALCEPH from https://github.com/bgodard/CALCEPH.jl.git
INFO: Installing BinDeps v0.8.8
INFO: Installing BinaryProvider v0.3.0
INFO: Installing CALCEPH v0.0.2
INFO: Installing SHA v0.5.7
INFO: Installing URIParser v0.3.1
INFO: Building CALCEPH
===============================[ ERROR: CALCEPH ]===============================

LoadError: MethodError: no method matching BinaryProvider.LibraryProduct(::BinaryProvider.Prefix, ::String)
Closest candidates are:
  BinaryProvider.LibraryProduct(::BinaryProvider.Prefix, ::AbstractString, !Matched::Symbol) at /home/vagrant/.julia/v0.6/BinaryProvider/src/Products.jl:81
  BinaryProvider.LibraryProduct(::BinaryProvider.Prefix, !Matched::Array{S<:AbstractString,1}, !Matched::Symbol) where S<:AbstractString at /home/vagrant/.julia/v0.6/BinaryProvider/src/Products.jl:86
  BinaryProvider.LibraryProduct(!Matched::AbstractString, ::AbstractString, !Matched::Symbol) at /home/vagrant/.julia/v0.6/BinaryProvider/src/Products.jl:98
while loading /home/vagrant/.julia/v0.6/CALCEPH/deps/build.jl, in expression starting on line 6

================================================================================
ERROR: UndefVarError: BinaryProvider not defined
deserialize_module(::SerializationState{IOStream}) at ./serialize.jl:757
handle_deserialize(::SerializationState{IOStream}, ::Int32) at ./serialize.jl:698
deserialize(::SerializationState{IOStream}) at ./serialize.jl:637
deserialize_datatype(::SerializationState{IOStream}, ::Bool) at ./serialize.jl:972
handle_deserialize(::SerializationState{IOStream}, ::Int32) at ./serialize.jl:677
deserialize(::SerializationState{IOStream}, ::DataType) at ./serialize.jl:1079
handle_deserialize(::SerializationState{IOStream}, ::Int32) at ./serialize.jl:690
deserialize(::SerializationState{IOStream}, ::DataType) at ./serialize.jl:1079
handle_deserialize(::SerializationState{IOStream}, ::Int32) at ./serialize.jl:690
(::Base.Pkg.Entry.##54#55{Dict{Any,Any}})(::IOStream) at ./pkg/entry.jl:639
open(::Base.Pkg.Entry.##54#55{Dict{Any,Any}}, ::String, ::String) at ./iostream.jl:152
build!(::Array{String,1}, ::Dict{Any,Any}, ::Set{Any}) at ./pkg/entry.jl:636
build(::Array{String,1}) at ./pkg/entry.jl:650
resolve(::Dict{String,Base.Pkg.Types.VersionSet}, ::Dict{String,Dict{VersionNumber,Base.Pkg.Types.Available}}, ::Dict{String,Tuple{VersionNumber,Bool}}, ::Dict{String,Base.Pkg.Types.Fixed}, ::Dict{String,VersionNumber}, ::Set{String}) at ./pkg/entry.jl:570
resolve(::Dict{String,Base.Pkg.Types.VersionSet}, ::Dict{String,Dict{VersionNumber,Base.Pkg.Types.Available}}, ::Dict{String,Tuple{VersionNumber,Bool}}, ::Dict{String,Base.Pkg.Types.Fixed}) at ./pkg/entry.jl:479
edit(::Function, ::String, ::Base.Pkg.Types.VersionSet, ::Vararg{Base.Pkg.Types.VersionSet,N} where N) at ./pkg/entry.jl:30
(::Base.Pkg.Entry.##1#3{String,Base.Pkg.Types.VersionSet})() at ./task.jl:335
Stacktrace:
 [1] sync_end() at ./task.jl:287
 [2] macro expansion at ./task.jl:303 [inlined]
 [3] add(::String, ::Base.Pkg.Types.VersionSet) at ./pkg/entry.jl:51
 [4] (::Base.Pkg.Dir.##4#7{Array{Any,1},Base.Pkg.Entry.#add,Tuple{String}})() at ./pkg/dir.jl:36
 [5] cd(::Base.Pkg.Dir.##4#7{Array{Any,1},Base.Pkg.Entry.#add,Tuple{String}}, ::String) at ./file.jl:70
 [6] #cd#1(::Array{Any,1}, ::Function, ::Function, ::String, ::Vararg{String,N} where N) at ./pkg/dir.jl:36
 [7] add(::String) at ./pkg/pkg.jl:117

>>> 'Pkg.test("CALCEPH")' log
Julia Version 0.6.2
Commit d386e40c17 (2017-12-13 18:08 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-143-generic #192-Ubuntu SMP Tue Feb 27 10:45:36 UTC 2018 x86_64 x86_64
Memory: 2.939197540283203 GB (742.32421875 MB free)
Uptime: 29370.0 sec
Load Avg:  0.83837890625  0.3115234375  0.5146484375
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3507 MHz    1639923 s       5750 s     125652 s     777261 s         25 s
#2  3507 MHz     371157 s       1392 s      51119 s    2463833 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.6
1 required packages:
 - JSON                          0.17.2
7 additional packages:
 - BinDeps                       0.8.8
 - BinaryProvider                0.3.0
 - CALCEPH                       0.0.2
 - Compat                        0.64.0
 - Nullables                     0.0.5
 - SHA                           0.5.7
 - URIParser                     0.3.1
INFO: Testing CALCEPH
ERROR: LoadError: LoadError: libcalceph was not found. Please run 'Pkg.build("CALCEPH").
Stacktrace:
 [1] error(::String) at ./error.jl:21
 [2] include_from_node1(::String) at ./loading.jl:576
while loading /home/vagrant/.julia/v0.6/CALCEPH/src/CALCEPH.jl, in expression starting on line 16
while loading /home/vagrant/.julia/v0.6/CALCEPH/test/runtests.jl, in expression starting on line 1
===============================[ ERROR: CALCEPH ]===============================

failed process: Process(`/home/vagrant/julia/bin/julia -Cx86-64 -J/home/vagrant/julia/lib/julia/sys.so --compile=yes --depwarn=yes --check-bounds=yes --code-coverage=none --color=no --compilecache=yes /home/vagrant/.julia/v0.6/CALCEPH/test/runtests.jl`, ProcessExited(1)) [1]

================================================================================
ERROR: CALCEPH had test errors

>>> End of log
