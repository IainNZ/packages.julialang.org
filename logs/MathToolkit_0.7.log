>>> 'Pkg.add("MathToolkit")' log
[ Info: Cloning cache of MathToolkit from https://github.com/baruchel/MathToolkit.jl.git @ Base.Pkg.Cache cache.jl:43
[ Info: Installing MathToolkit v0.0.1 @ Base.Pkg.Entry entry.jl:543
[ Info: Package database updated @ Base.Pkg.Entry entry.jl:32
┌ Info: METADATA is out-of-date — you may not have the latest version of MathToolkit
│ Use `Pkg.update()` to get the latest versions of your packages
└ @ Base.Pkg.Entry entry.jl:74

>>> 'Pkg.test("MathToolkit")' log
Julia Version 0.7.0-DEV.3299
Commit fb527308bb (2018-01-05 19:41 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
      Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-135-generic #184-Ubuntu SMP Wed Oct 18 11:55:51 UTC 2017 x86_64 x86_64
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
              speed         user         nice          sys         idle          irq
       #1  3500 MHz    3156311 s        107 s     154494 s     754341 s         18 s
       #2  3500 MHz     575601 s         72 s      59228 s    4081295 s          0 s
       
  Memory: 2.93927001953125 GB (755.36328125 MB free)
  Uptime: 47837.0 sec
  Load Avg:  1.0029296875  1.0146484375  0.9755859375
  WORD_SIZE: 64
  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant
Packages:
  Package Directory: /home/vagrant/.julia/v0.7
  Package Status:
2 required packages:
 - JSON                          0.16.3
 - MathToolkit                   0.0.1
2 additional packages:
 - Compat                        0.42.0
 - Nullables                     0.0.2
[ Info: Testing MathToolkit @ Base.Pkg.Entry entry.jl:723
┌ Warning: Deprecated syntax `==(i, j)?` at /home/vagrant/.julia/v0.7/MathToolkit/src/MathToolkit.jl:82.
│ Use `==(i, j) ?` instead.
└ @ nothing MathToolkit.jl:82
┌ Warning: Deprecated syntax `==(i, j) ?s` at /home/vagrant/.julia/v0.7/MathToolkit/src/MathToolkit.jl:82.
│ Use `==(i, j) ? s` instead.
└ @ nothing MathToolkit.jl:82
┌ Warning: Deprecated syntax `==(i, j) ? /(s[+(j, 1)], s[j]):` at /home/vagrant/.julia/v0.7/MathToolkit/src/MathToolkit.jl:82.
│ Use `==(i, j) ? /(s[+(j, 1)], s[j]) :` instead.
└ @ nothing MathToolkit.jl:82
┌ Warning: Deprecated syntax `==(i, j) ? /(s[+(j, 1)], s[j]) :-` at /home/vagrant/.julia/v0.7/MathToolkit/src/MathToolkit.jl:82.
│ Use `==(i, j) ? /(s[+(j, 1)], s[j]) : -` instead.
└ @ nothing MathToolkit.jl:82
[ Warning: Deprecated syntax ``const` declaration on local variable` around /home/vagrant/.julia/v0.7/MathToolkit/src/MathToolkit.jl:66. @ nothing MathToolkit.jl:66
[ Warning: Deprecated syntax ``const` declaration on local variable` around /home/vagrant/.julia/v0.7/MathToolkit/src/MathToolkit.jl:67. @ nothing MathToolkit.jl:67
[ Warning: Deprecated syntax ``const` declaration on local variable` around /home/vagrant/.julia/v0.7/MathToolkit/src/MathToolkit.jl:68. @ nothing MathToolkit.jl:68
WARNING: Base.Test is deprecated, run `using Test` instead.
  likely near /home/vagrant/.julia/v0.7/MathToolkit/test/runtests.jl:2
┌ Warning: `Array(::Type{T}, m::Int) where T` is deprecated, use `Array{T}(uninitialized, m)` instead.
│   caller = #recvec#1(::Type, ::Type, ::Function, ::Array{Int64,1}) at MathToolkit.jl:8
└ @ MathToolkit MathToolkit.jl:8
┌ Warning: `Array(::Type{T}, m::Int) where T` is deprecated, use `Array{T}(uninitialized, m)` instead.
│   caller = #recvec#1(::Type, ::Type, ::Function, ::Array{Int64,1}) at MathToolkit.jl:11
└ @ MathToolkit MathToolkit.jl:11
┌ Warning: `Array(::Type{T}, m::Int) where T` is deprecated, use `Array{T}(uninitialized, m)` instead.
│   caller = #recvec#1(::Type, ::Type, ::Function, ::Array{Int64,1}) at MathToolkit.jl:12
└ @ MathToolkit MathToolkit.jl:12
┌ Warning: `Array(::Type{T}, m::Int) where T` is deprecated, use `Array{T}(uninitialized, m)` instead.
│   caller = #recvec#1(::Type, ::Type, ::Function, ::Array{Int64,1}) at MathToolkit.jl:17
└ @ MathToolkit MathToolkit.jl:17
┌ Warning: `Array(::Type{T}, m::Int) where T` is deprecated, use `Array{T}(uninitialized, m)` instead.
│   caller = #recvec#1(::Type, ::Type, ::Function, ::Array{Int64,1}) at MathToolkit.jl:18
└ @ MathToolkit MathToolkit.jl:18
┌ Warning: `num` is deprecated, use `numerator` instead.
│   caller = #recvec#1(::Type, ::Type, ::Function, ::Array{Int64,1}) at MathToolkit.jl:25
└ @ MathToolkit MathToolkit.jl:25
┌ Warning: `den` is deprecated, use `denominator` instead.
│   caller = #recvec#1(::Type, ::Type, ::Function, ::Array{Int64,1}) at MathToolkit.jl:27
└ @ MathToolkit MathToolkit.jl:27
┌ Warning: `num` is deprecated, use `numerator` instead.
│   caller = #recvec#1(::Type, ::Type, ::Function, ::Array{Int64,1}) at MathToolkit.jl:28
└ @ MathToolkit MathToolkit.jl:28
┌ Warning: `Array(::Type{T}, m::Int) where T` is deprecated, use `Array{T}(uninitialized, m)` instead.
│   caller = #recvec#1(::Type, ::Type, ::Function, ::Array{Int64,1}) at MathToolkit.jl:33
└ @ MathToolkit MathToolkit.jl:33
┌ Warning: `Array(::Type{T}, m::Int) where T` is deprecated, use `Array{T}(uninitialized, m)` instead.
│   caller = #recvec#1(::Type, ::DataType, ::Function, ::Array{Int64,1}) at MathToolkit.jl:8
└ @ MathToolkit MathToolkit.jl:8
┌ Warning: `Array(::Type{T}, m::Int) where T` is deprecated, use `Array{T}(uninitialized, m)` instead.
│   caller = #recvec#1(::Type, ::DataType, ::Function, ::Array{Int64,1}) at MathToolkit.jl:11
└ @ MathToolkit MathToolkit.jl:11
┌ Warning: `Array(::Type{T}, m::Int) where T` is deprecated, use `Array{T}(uninitialized, m)` instead.
│   caller = #recvec#1(::Type, ::DataType, ::Function, ::Array{Int64,1}) at MathToolkit.jl:12
└ @ MathToolkit MathToolkit.jl:12
┌ Warning: `Array(::Type{T}, m::Int) where T` is deprecated, use `Array{T}(uninitialized, m)` instead.
│   caller = #recvec#1(::Type, ::DataType, ::Function, ::Array{Int64,1}) at MathToolkit.jl:17
└ @ MathToolkit MathToolkit.jl:17
┌ Warning: `Array(::Type{T}, m::Int) where T` is deprecated, use `Array{T}(uninitialized, m)` instead.
│   caller = #recvec#1(::Type, ::DataType, ::Function, ::Array{Int64,1}) at MathToolkit.jl:18
└ @ MathToolkit MathToolkit.jl:18
┌ Warning: `num` is deprecated, use `numerator` instead.
│   caller = #recvec#1(::Type, ::DataType, ::Function, ::Array{Int64,1}) at MathToolkit.jl:25
└ @ MathToolkit MathToolkit.jl:25
┌ Warning: `den` is deprecated, use `denominator` instead.
│   caller = #recvec#1(::Type, ::DataType, ::Function, ::Array{Int64,1}) at MathToolkit.jl:27
└ @ MathToolkit MathToolkit.jl:27
┌ Warning: `num` is deprecated, use `numerator` instead.
│   caller = #recvec#1(::Type, ::DataType, ::Function, ::Array{Int64,1}) at MathToolkit.jl:28
└ @ MathToolkit MathToolkit.jl:28
┌ Warning: `Array(::Type{T}, m::Int) where T` is deprecated, use `Array{T}(uninitialized, m)` instead.
│   caller = #recvec#1(::Type, ::DataType, ::Function, ::Array{Int64,1}) at MathToolkit.jl:33
└ @ MathToolkit MathToolkit.jl:33
┌ Warning: `Array(::Type{T}, m::Int) where T` is deprecated, use `Array{T}(uninitialized, m)` instead.
│   caller = #recvec#1(::DataType, ::DataType, ::Function, ::Array{Rational{Int64},1}) at MathToolkit.jl:8
└ @ MathToolkit MathToolkit.jl:8
┌ Warning: `Array(::Type{T}, m::Int) where T` is deprecated, use `Array{T}(uninitialized, m)` instead.
│   caller = #recvec#1(::DataType, ::DataType, ::Function, ::Array{Rational{Int64},1}) at MathToolkit.jl:11
└ @ MathToolkit MathToolkit.jl:11
┌ Warning: `Array(::Type{T}, m::Int) where T` is deprecated, use `Array{T}(uninitialized, m)` instead.
│   caller = #recvec#1(::DataType, ::DataType, ::Function, ::Array{Rational{Int64},1}) at MathToolkit.jl:12
└ @ MathToolkit MathToolkit.jl:12
┌ Warning: `Array(::Type{T}, m::Int) where T` is deprecated, use `Array{T}(uninitialized, m)` instead.
│   caller = #recvec#1(::DataType, ::DataType, ::Function, ::Array{Rational{Int64},1}) at MathToolkit.jl:17
└ @ MathToolkit MathToolkit.jl:17
┌ Warning: `Array(::Type{T}, m::Int) where T` is deprecated, use `Array{T}(uninitialized, m)` instead.
│   caller = #recvec#1(::DataType, ::DataType, ::Function, ::Array{Rational{Int64},1}) at MathToolkit.jl:18
└ @ MathToolkit MathToolkit.jl:18
┌ Warning: `num` is deprecated, use `numerator` instead.
│   caller = #recvec#1(::DataType, ::DataType, ::Function, ::Array{Rational{Int64},1}) at MathToolkit.jl:25
└ @ MathToolkit MathToolkit.jl:25
┌ Warning: `den` is deprecated, use `denominator` instead.
│   caller = #recvec#1(::DataType, ::DataType, ::Function, ::Array{Rational{Int64},1}) at MathToolkit.jl:27
└ @ MathToolkit MathToolkit.jl:27
┌ Warning: `num` is deprecated, use `numerator` instead.
│   caller = #recvec#1(::DataType, ::DataType, ::Function, ::Array{Rational{Int64},1}) at MathToolkit.jl:28
└ @ MathToolkit MathToolkit.jl:28
┌ Warning: `Array(::Type{T}, m::Int) where T` is deprecated, use `Array{T}(uninitialized, m)` instead.
│   caller = #recvec#1(::DataType, ::DataType, ::Function, ::Array{Rational{Int64},1}) at MathToolkit.jl:33
└ @ MathToolkit MathToolkit.jl:33
┌ Warning: `Array(::Type{T}, m::Int) where T` is deprecated, use `Array{T}(uninitialized, m)` instead.
│   caller = #recvec#1(::Type, ::Type, ::Function, ::Array{Int64,1}) at MathToolkit.jl:62
└ @ MathToolkit MathToolkit.jl:62
┌ Warning: `Array(::Type{T}, m::Int) where T` is deprecated, use `Array{T}(uninitialized, m)` instead.
│   caller = #recvec#1(::Type, ::Type, ::Function, ::Array{BigInt,1}) at MathToolkit.jl:8
└ @ MathToolkit MathToolkit.jl:8
┌ Warning: `Array(::Type{T}, m::Int) where T` is deprecated, use `Array{T}(uninitialized, m)` instead.
│   caller = #recvec#1(::Type, ::Type, ::Function, ::Array{BigInt,1}) at MathToolkit.jl:11
└ @ MathToolkit MathToolkit.jl:11
┌ Warning: `Array(::Type{T}, m::Int) where T` is deprecated, use `Array{T}(uninitialized, m)` instead.
│   caller = #recvec#1(::Type, ::Type, ::Function, ::Array{BigInt,1}) at MathToolkit.jl:12
└ @ MathToolkit MathToolkit.jl:12
┌ Warning: `Array(::Type{T}, m::Int) where T` is deprecated, use `Array{T}(uninitialized, m)` instead.
│   caller = #recvec#1(::Type, ::Type, ::Function, ::Array{BigInt,1}) at MathToolkit.jl:17
└ @ MathToolkit MathToolkit.jl:17
┌ Warning: `Array(::Type{T}, m::Int) where T` is deprecated, use `Array{T}(uninitialized, m)` instead.
│   caller = #recvec#1(::Type, ::Type, ::Function, ::Array{BigInt,1}) at MathToolkit.jl:18
└ @ MathToolkit MathToolkit.jl:18
┌ Warning: `num` is deprecated, use `numerator` instead.
│   caller = #recvec#1(::Type, ::Type, ::Function, ::Array{BigInt,1}) at MathToolkit.jl:25
└ @ MathToolkit MathToolkit.jl:25
┌ Warning: `den` is deprecated, use `denominator` instead.
│   caller = #recvec#1(::Type, ::Type, ::Function, ::Array{BigInt,1}) at MathToolkit.jl:27
└ @ MathToolkit MathToolkit.jl:27
┌ Warning: `num` is deprecated, use `numerator` instead.
│   caller = #recvec#1(::Type, ::Type, ::Function, ::Array{BigInt,1}) at MathToolkit.jl:28
└ @ MathToolkit MathToolkit.jl:28
┌ Warning: `Array(::Type{T}, m::Int) where T` is deprecated, use `Array{T}(uninitialized, m)` instead.
│   caller = #recvec#1(::Type, ::Type, ::Function, ::Array{BigInt,1}) at MathToolkit.jl:33
└ @ MathToolkit MathToolkit.jl:33
┌ Warning: `Array(::Type{T}, m::Int) where T` is deprecated, use `Array{T}(uninitialized, m)` instead.
│   caller = #pslq#2(::Int64, ::Function, ::Array{Float64,1}, ::Float64) at MathToolkit.jl:69
└ @ MathToolkit MathToolkit.jl:69
[ Info: MathToolkit tests passed @ Base.Pkg.Entry entry.jl:737

>>> End of log
