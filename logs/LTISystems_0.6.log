>>> 'Pkg.add("LTISystems")' log
INFO: Cloning cache of LTISystems from https://github.com/JuliaSystems/LTISystems.jl.git
INFO: Cloning cache of MuladdMacro from https://github.com/JuliaDiffEq/MuladdMacro.jl.git
INFO: Cloning cache of OrdinaryDiffEq from https://github.com/JuliaDiffEq/OrdinaryDiffEq.jl.git
INFO: Cloning cache of PolynomialMatrices from https://github.com/neveritt/PolynomialMatrices.jl.git
INFO: Cloning cache of RationalFunctions from https://github.com/aytekinar/RationalFunctions.jl.git
INFO: Installing CommonSubexpressions v0.1.0
INFO: Installing DataStructures v0.7.4
INFO: Installing DiffBase v0.3.2
INFO: Installing DiffEqBase v3.11.0
INFO: Installing DiffEqDiffTools v0.4.1
INFO: Installing DiffEqOperators v1.2.0
INFO: Installing DiffResults v0.0.3
INFO: Installing DiffRules v0.0.4
INFO: Installing Distances v0.6.0
INFO: Installing Expokit v0.0.1
INFO: Installing ForwardDiff v0.7.5
INFO: Installing FunctionWrappers v0.1.0
INFO: Installing GenericSVD v0.1.0
INFO: Installing IteratorInterfaceExtensions v0.0.2
INFO: Installing Juno v0.4.0
INFO: Installing LTISystems v0.1.0
INFO: Installing LineSearches v3.2.5
INFO: Installing LinearMaps v1.0.4
INFO: Installing MacroTools v0.4.0
INFO: Installing Media v0.3.0
INFO: Installing Missings v0.2.9
INFO: Installing MuladdMacro v0.0.2
INFO: Installing NLSolversBase v4.4.1
INFO: Installing NLsolve v1.0.1
INFO: Installing NamedTuples v4.0.0
INFO: Installing OrdinaryDiffEq v3.11.0
INFO: Installing Parameters v0.8.1
INFO: Installing PolynomialMatrices v0.2.0
INFO: Installing Polynomials v0.3.0
INFO: Installing RationalFunctions v0.1.1
INFO: Installing RecipesBase v0.2.3
INFO: Installing RecursiveArrayTools v0.14.6
INFO: Installing Roots v0.5.0
INFO: Installing SimpleTraits v0.6.0
INFO: Installing SpecialFunctions v0.4.0
INFO: Installing StaticArrays v0.7.0
INFO: Installing TableTraits v0.2.0
INFO: Building DiffEqBase
INFO: ~~~ DifferentialEquations.jl *BREAKING* changes  ~~~

We have changed the front-end API on how
users may define equations of motion and 
problems, for all problem types that can
be used in the DifferentialEquations.jl.
These are *BREAKING* changes, and they
also have *NO WARNINGS*!

Please see our latest documentation here:
http://docs.juliadiffeq.org/latest/

or the blogpost that describes the changes:
http://juliadiffeq.org/2018/01/24/Parameters.html

In short, the mutated argument is the first argument,
and parameters are now directly passed
into the equations of motion function. For all
types now mutation goes first, then dependent variables, 
then parameters, then independent variables. 

`f(mutated, dependent variables, p/integrator, independent variables)`

For example, this means that the ODE syntax will be `f(u,p,t)` (for the
out-of-place) and `f(du,u,p,t)` (for the in-place). Notice
that this change also removes the need for ParameterizedFunctions
as now parameters are part of the equations of motion.

For more details please visit the above links!
INFO: Building SpecialFunctions
INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of LTISystems
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("LTISystems")' log
Julia Version 0.6.2
Commit d386e40c17 (2017-12-13 18:08 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-143-generic #192-Ubuntu SMP Tue Feb 27 10:45:36 UTC 2018 x86_64 x86_64
Memory: 2.939197540283203 GB (2225.80859375 MB free)
Uptime: 62177.0 sec
Load Avg:  0.9267578125  0.9697265625  0.95458984375
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz    3812985 s        128 s     239639 s    1286737 s         44 s
#2  3499 MHz     890640 s       6223 s     102191 s    5099437 s          1 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.6
2 required packages:
 - JSON                          0.17.2
 - LTISystems                    0.1.0
53 additional packages:
 - BinDeps                       0.8.7
 - Cairo                         0.5.1
 - ColorTypes                    0.6.7
 - Colors                        0.8.2
 - CommonSubexpressions          0.1.0
 - Compat                        0.63.0
 - DataStructures                0.7.4
 - DiffBase                      0.3.2
 - DiffEqBase                    3.11.0
 - DiffEqDiffTools               0.4.1
 - DiffEqOperators               1.2.0
 - DiffResults                   0.0.3
 - DiffRules                     0.0.4
 - Distances                     0.6.0
 - Expokit                       0.0.1
 - FixedPointNumbers             0.4.6
 - ForwardDiff                   0.7.5
 - FunctionWrappers              0.1.0
 - GenericSVD                    0.1.0
 - Graphics                      0.3.0
 - Gtk                           0.13.1
 - IteratorInterfaceExtensions   0.0.2
 - Juno                          0.4.0
 - LineSearches                  3.2.5
 - LinearMaps                    1.0.4
 - MacroTools                    0.4.0
 - Media                         0.3.0
 - Missings                      0.2.9
 - MuladdMacro                   0.0.2
 - NLSolversBase                 4.4.1
 - NLsolve                       1.0.1
 - NaNMath                       0.3.1
 - NamedTuples                   4.0.0
 - NodeJS                        0.4.0
 - Nullables                     0.0.5
 - OrdinaryDiffEq                3.11.0
 - Parameters                    0.8.1
 - PolynomialMatrices            0.2.0
 - Polynomials                   0.3.0
 - RationalFunctions             0.1.1
 - RecipesBase                   0.2.3
 - RecursiveArrayTools           0.14.6
 - Reexport                      0.1.0
 - Requires                      0.4.3
 - Roots                         0.5.0
 - Rsvg                          0.2.0
 - SHA                           0.5.7
 - SimpleTraits                  0.6.0
 - SpecialFunctions              0.4.0
 - StaticArrays                  0.7.0
 - TableTraits                   0.2.0
 - URIParser                     0.3.1
 - VegaLite                      0.1.0              ecb31725 (dirty)
INFO: Testing LTISystems

WARNING: deprecated syntax "function .+(...)".
Use "function Base.broadcast(::typeof(+), ...)" instead.

WARNING: deprecated syntax "function .*(...)".
Use "function Base.broadcast(::typeof(*), ...)" instead.

WARNING: deprecated syntax "function ./(...)".
Use "function Base.broadcast(::typeof(/), ...)" instead.

WARNING: deprecated syntax "function .-(...)".
Use "function Base.broadcast(::typeof(-), ...)" instead.

WARNING: deprecated syntax "function .+(...)".
Use "function Base.broadcast(::typeof(+), ...)" instead.

WARNING: deprecated syntax "function .*(...)".
Use "function Base.broadcast(::typeof(*), ...)" instead.

WARNING: deprecated syntax "function ./(...)".
Use "function Base.broadcast(::typeof(/), ...)" instead.

WARNING: deprecated syntax "function .-(...)".
Use "function Base.broadcast(::typeof(-), ...)" instead.

WARNING: deprecated syntax "function .+(...)".
Use "function Base.broadcast(::typeof(+), ...)" instead.

WARNING: deprecated syntax "function .*(...)".
Use "function Base.broadcast(::typeof(*), ...)" instead.

WARNING: deprecated syntax "function ./(...)".
Use "function Base.broadcast(::typeof(/), ...)" instead.

WARNING: deprecated syntax "function .-(...)".
Use "function Base.broadcast(::typeof(-), ...)" instead.

WARNING: deprecated syntax "function .+(...)".
Use "function Base.broadcast(::typeof(+), ...)" instead.

WARNING: deprecated syntax "function .*(...)".
Use "function Base.broadcast(::typeof(*), ...)" instead.

WARNING: deprecated syntax "function ./(...)".
Use "function Base.broadcast(::typeof(/), ...)" instead.

WARNING: deprecated syntax "function .-(...)".
Use "function Base.broadcast(::typeof(-), ...)" instead.

WARNING: deprecated syntax "function .+(...)".
Use "function Base.broadcast(::typeof(+), ...)" instead.

WARNING: deprecated syntax "function .*(...)".
Use "function Base.broadcast(::typeof(*), ...)" instead.

WARNING: deprecated syntax "function ./(...)".
Use "function Base.broadcast(::typeof(/), ...)" instead.

WARNING: deprecated syntax "function .-(...)".
Use "function Base.broadcast(::typeof(-), ...)" instead.

WARNING: deprecated syntax "function .+(...)".
Use "function Base.broadcast(::typeof(+), ...)" instead.

WARNING: deprecated syntax "function .+(...)".
Use "function Base.broadcast(::typeof(+), ...)" instead.

WARNING: deprecated syntax "function .+(...)".
Use "function Base.broadcast(::typeof(+), ...)" instead.

WARNING: deprecated syntax "function .-(...)".
Use "function Base.broadcast(::typeof(-), ...)" instead.

WARNING: deprecated syntax "function .-(...)".
Use "function Base.broadcast(::typeof(-), ...)" instead.

WARNING: deprecated syntax "function .-(...)".
Use "function Base.broadcast(::typeof(-), ...)" instead.

WARNING: deprecated syntax "function .*(...)".
Use "function Base.broadcast(::typeof(*), ...)" instead.

WARNING: deprecated syntax "function .*(...)".
Use "function Base.broadcast(::typeof(*), ...)" instead.

WARNING: deprecated syntax "function .*(...)".
Use "function Base.broadcast(::typeof(*), ...)" instead.

WARNING: deprecated syntax "function ./(...)".
Use "function Base.broadcast(::typeof(/), ...)" instead.

WARNING: deprecated syntax "function ./(...)".
Use "function Base.broadcast(::typeof(/), ...)" instead.

WARNING: deprecated syntax "function ./(...)".
Use "function Base.broadcast(::typeof(/), ...)" instead.

WARNING: deprecated syntax "function .+(...)".
Use "function Base.broadcast(::typeof(+), ...)" instead.

WARNING: deprecated syntax "function .+(...)".
Use "function Base.broadcast(::typeof(+), ...)" instead.

WARNING: deprecated syntax "function .+(...)".
Use "function Base.broadcast(::typeof(+), ...)" instead.

WARNING: deprecated syntax "function .-(...)".
Use "function Base.broadcast(::typeof(-), ...)" instead.

WARNING: deprecated syntax "function .-(...)".
Use "function Base.broadcast(::typeof(-), ...)" instead.

WARNING: deprecated syntax "function .-(...)".
Use "function Base.broadcast(::typeof(-), ...)" instead.

WARNING: deprecated syntax "function .*(...)".
Use "function Base.broadcast(::typeof(*), ...)" instead.

WARNING: deprecated syntax "function .*(...)".
Use "function Base.broadcast(::typeof(*), ...)" instead.

WARNING: deprecated syntax "function .*(...)".
Use "function Base.broadcast(::typeof(*), ...)" instead.

WARNING: deprecated syntax "function ./(...)".
Use "function Base.broadcast(::typeof(/), ...)" instead.

WARNING: deprecated syntax "function ./(...)".
Use "function Base.broadcast(::typeof(/), ...)" instead.

WARNING: deprecated syntax "function ./(...)".
Use "function Base.broadcast(::typeof(/), ...)" instead.

WARNING: deprecated syntax "function .+(...)".
Use "function Base.broadcast(::typeof(+), ...)" instead.

WARNING: deprecated syntax "function .+(...)".
Use "function Base.broadcast(::typeof(+), ...)" instead.

WARNING: deprecated syntax "function .+(...)".
Use "function Base.broadcast(::typeof(+), ...)" instead.

WARNING: deprecated syntax "function .-(...)".
Use "function Base.broadcast(::typeof(-), ...)" instead.

WARNING: deprecated syntax "function .-(...)".
Use "function Base.broadcast(::typeof(-), ...)" instead.

WARNING: deprecated syntax "function .-(...)".
Use "function Base.broadcast(::typeof(-), ...)" instead.

WARNING: deprecated syntax "function .*(...)".
Use "function Base.broadcast(::typeof(*), ...)" instead.

WARNING: deprecated syntax "function .*(...)".
Use "function Base.broadcast(::typeof(*), ...)" instead.

WARNING: deprecated syntax "function .*(...)".
Use "function Base.broadcast(::typeof(*), ...)" instead.
first order SISO system: Error During Test
  Got an exception of type MethodError outside of a @test
  MethodError: no method matching (::LTISystems.TransferFunction{Val{:siso},Val{:cont},Val{:notc},Array{RationalFunctions.RationalFunction{Val{:s},Val{:notc},Int64,Int64},2}})(::LTISystems.SimType{Float64}, ::Void, ::Float64, ::LTISystems.Signals.Step{Float64,1})
  Closest candidates are:
    TransferFunction(::DiffEqBase.DEDataArray, !Matched::AbstractArray{T,1} where T, ::Any, ::Any, !Matched::Any, !Matched::Any) at /home/vagrant/.julia/v0.6/LTISystems/src/types/system/transferfunction.jl:73
    TransferFunction(!Matched::Real, !Matched::DiffEqBase.DEDataArray, !Matched::AbstractArray{T,1} where T, ::Any) at /home/vagrant/.julia/v0.6/LTISystems/src/types/system/transferfunction.jl:51
    TransferFunction(::AbstractArray{M<:Number,N} where N) where M<:Number at /home/vagrant/.julia/v0.6/LTISystems/src/types/system/transferfunction.jl:102
  Stacktrace:
   [1] initialize!(::OrdinaryDiffEq.ODEIntegrator{OrdinaryDiffEq.Tsit5,LTISystems.SimType{Float64},Float64,Void,Float64,Float64,Float64,Array{Array{Float64,1},1},DiffEqBase.ODESolution{Float64,2,Array{LTISystems.SimType{Float64},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{LTISystems.SimType{Float64},Float64,false,Void,LTISystems.##64#67{LTISystems.Signals.Step{Float64,1},LTISystems.TransferFunction{Val{:siso},Val{:cont},Val{:notc},Array{RationalFunctions.RationalFunction{Val{:s},Val{:notc},Int64,Int64},2}}},Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Tsit5,OrdinaryDiffEq.InterpolationData{LTISystems.##64#67{LTISystems.Signals.Step{Float64,1},LTISystems.TransferFunction{Val{:siso},Val{:cont},Val{:notc},Array{RationalFunctions.RationalFunction{Val{:s},Val{:notc},Int64,Int64},2}}},Array{LTISystems.SimType{Float64},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Tsit5ConstantCache{Float64,Float64}}},LTISystems.##64#67{LTISystems.Signals.Step{Float64,1},LTISystems.TransferFunction{Val{:siso},Val{:cont},Val{:notc},Array{RationalFunctions.RationalFunction{Val{:s},Val{:notc},Int64,Int64},2}}},Void,OrdinaryDiffEq.Tsit5ConstantCache{Float64,Float64},OrdinaryDiffEq.DEOptions{Float64,Float64,Float64,Float64,DiffEqBase.#ODE_DEFAULT_NORM,DiffEqBase.CallbackSet{Tuple{},Tuple{}},DiffEqBase.#ODE_DEFAULT_ISOUTOFDOMAIN,DiffEqBase.#ODE_DEFAULT_PROG_MESSAGE,DiffEqBase.#ODE_DEFAULT_UNSTABLE_CHECK,DataStructures.BinaryHeap{Float64,DataStructures.LessThan},DataStructures.BinaryHeap{Float64,DataStructures.LessThan},Void,Void,Int64,Array{Float64,1},Array{Float64,1},Array{Float64,1}},Array{Float64,1}}, ::OrdinaryDiffEq.Tsit5ConstantCache{Float64,Float64}) at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/perform_step/low_order_rk_perform_step.jl:480
   [2] #init#1418(::Int64, ::Array{Float64,1}, ::Array{Float64,1}, ::Array{Float64,1}, ::Void, ::Bool, ::Void, ::Bool, ::Bool, ::Void, ::Bool, ::Bool, ::Float64, ::Bool, ::Rational{Int64}, ::Void, ::Void, ::Int64, ::Rational{Int64}, ::Int64, ::Int64, ::Rational{Int64}, ::Bool, ::Int64, ::Rational{Int64}, ::Rational{Int64}, ::Int64, ::Float64, ::Float64, ::DiffEqBase.#ODE_DEFAULT_NORM, ::DiffEqBase.#ODE_DEFAULT_ISOUTOFDOMAIN, ::DiffEqBase.#ODE_DEFAULT_UNSTABLE_CHECK, ::Bool, ::Bool, ::Bool, ::Bool, ::Bool, ::Bool, ::Bool, ::Bool, ::Int64, ::String, ::DiffEqBase.#ODE_DEFAULT_PROG_MESSAGE, ::Void, ::Bool, ::Bool, ::Array{Any,1}, ::DiffEqBase.#init, ::DiffEqBase.ODEProblem{LTISystems.SimType{Float64},Float64,false,Void,LTISystems.##64#67{LTISystems.Signals.Step{Float64,1},LTISystems.TransferFunction{Val{:siso},Val{:cont},Val{:notc},Array{RationalFunctions.RationalFunction{Val{:s},Val{:notc},Int64,Int64},2}}},Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem}, ::OrdinaryDiffEq.Tsit5, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/solve.jl:313
   [3] (::DiffEqBase.#kw##init)(::Array{Any,1}, ::DiffEqBase.#init, ::DiffEqBase.ODEProblem{LTISystems.SimType{Float64},Float64,false,Void,LTISystems.##64#67{LTISystems.Signals.Step{Float64,1},LTISystems.TransferFunction{Val{:siso},Val{:cont},Val{:notc},Array{RationalFunctions.RationalFunction{Val{:s},Val{:notc},Int64,Int64},2}}},Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem}, ::OrdinaryDiffEq.Tsit5, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at ./<missing>:0
   [4] #solve#1417(::Array{Any,1}, ::Function, ::DiffEqBase.ODEProblem{LTISystems.SimType{Float64},Float64,false,Void,LTISystems.##64#67{LTISystems.Signals.Step{Float64,1},LTISystems.TransferFunction{Val{:siso},Val{:cont},Val{:notc},Array{RationalFunctions.RationalFunction{Val{:s},Val{:notc},Int64,Int64},2}}},Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem}, ::OrdinaryDiffEq.Tsit5, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/solve.jl:6
   [5] (::DiffEqBase.#kw##solve)(::Array{Any,1}, ::DiffEqBase.#solve, ::DiffEqBase.ODEProblem{LTISystems.SimType{Float64},Float64,false,Void,LTISystems.##64#67{LTISystems.Signals.Step{Float64,1},LTISystems.TransferFunction{Val{:siso},Val{:cont},Val{:notc},Array{RationalFunctions.RationalFunction{Val{:s},Val{:notc},Int64,Int64},2}}},Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem}, ::OrdinaryDiffEq.Tsit5, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at ./<missing>:0 (repeats 2 times)
   [6] #simulate#62(::LTISystems.Signals.Step{Float64,1}, ::OrdinaryDiffEq.Tsit5, ::Array{Float64,1}, ::Array{Float64,1}, ::Array{Any,1}, ::Function, ::LTISystems.TransferFunction{Val{:siso},Val{:cont},Val{:notc},Array{RationalFunctions.RationalFunction{Val{:s},Val{:notc},Int64,Int64},2}}, ::Tuple{Int64,Float64}) at /home/vagrant/.julia/v0.6/LTISystems/src/methods/simulate.jl:25
   [7] (::LTISystems.#kw##simulate)(::Array{Any,1}, ::LTISystems.#simulate, ::LTISystems.TransferFunction{Val{:siso},Val{:cont},Val{:notc},Array{RationalFunctions.RationalFunction{Val{:s},Val{:notc},Int64,Int64},2}}, ::Tuple{Int64,Float64}) at ./<missing>:0
   [8] macro expansion at /home/vagrant/.julia/v0.6/LTISystems/test/methods/simulation.jl:135 [inlined]
   [9] macro expansion at ./test.jl:860 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/LTISystems/test/methods/simulation.jl:133 [inlined]
   [11] macro expansion at ./test.jl:860 [inlined]
   [12] anonymous at ./<missing>:?
   [13] include_from_node1(::String) at ./loading.jl:576
   [14] include(::String) at ./sysimg.jl:14
   [15] include_from_node1(::String) at ./loading.jl:576
   [16] include(::String) at ./sysimg.jl:14
   [17] process_options(::Base.JLOptions) at ./client.jl:305
   [18] _start() at ./client.jl:371
second order MIMO system: Error During Test
  Got an exception of type MethodError outside of a @test
  MethodError: no method matching (::LTISystems.TransferFunction{Val{:mimo},Val{:cont},Val{:notc},Array{RationalFunctions.RationalFunction{Val{:s},Val{:notc},Int64,Int64},2}})(::LTISystems.SimType{Float64}, ::Void, ::Float64, ::LTISystems.Signals.Step{Float64,2})
  Closest candidates are:
    TransferFunction(::DiffEqBase.DEDataArray, !Matched::AbstractArray{T,1} where T, ::Any, ::Any, !Matched::Any, !Matched::Any) at /home/vagrant/.julia/v0.6/LTISystems/src/types/system/transferfunction.jl:73
    TransferFunction(!Matched::Real, !Matched::DiffEqBase.DEDataArray, !Matched::AbstractArray{T,1} where T, ::Any) at /home/vagrant/.julia/v0.6/LTISystems/src/types/system/transferfunction.jl:51
    TransferFunction(::AbstractArray{M<:Number,N} where N) where M<:Number at /home/vagrant/.julia/v0.6/LTISystems/src/types/system/transferfunction.jl:106
  Stacktrace:
   [1] initialize!(::OrdinaryDiffEq.ODEIntegrator{OrdinaryDiffEq.Tsit5,LTISystems.SimType{Float64},Float64,Void,Float64,Float64,Float64,Array{Array{Float64,1},1},DiffEqBase.ODESolution{Float64,2,Array{LTISystems.SimType{Float64},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{LTISystems.SimType{Float64},Float64,false,Void,LTISystems.##64#67{LTISystems.Signals.Step{Float64,2},LTISystems.TransferFunction{Val{:mimo},Val{:cont},Val{:notc},Array{RationalFunctions.RationalFunction{Val{:s},Val{:notc},Int64,Int64},2}}},Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Tsit5,OrdinaryDiffEq.InterpolationData{LTISystems.##64#67{LTISystems.Signals.Step{Float64,2},LTISystems.TransferFunction{Val{:mimo},Val{:cont},Val{:notc},Array{RationalFunctions.RationalFunction{Val{:s},Val{:notc},Int64,Int64},2}}},Array{LTISystems.SimType{Float64},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Tsit5ConstantCache{Float64,Float64}}},LTISystems.##64#67{LTISystems.Signals.Step{Float64,2},LTISystems.TransferFunction{Val{:mimo},Val{:cont},Val{:notc},Array{RationalFunctions.RationalFunction{Val{:s},Val{:notc},Int64,Int64},2}}},Void,OrdinaryDiffEq.Tsit5ConstantCache{Float64,Float64},OrdinaryDiffEq.DEOptions{Float64,Float64,Float64,Float64,DiffEqBase.#ODE_DEFAULT_NORM,DiffEqBase.CallbackSet{Tuple{},Tuple{}},DiffEqBase.#ODE_DEFAULT_ISOUTOFDOMAIN,DiffEqBase.#ODE_DEFAULT_PROG_MESSAGE,DiffEqBase.#ODE_DEFAULT_UNSTABLE_CHECK,DataStructures.BinaryHeap{Float64,DataStructures.LessThan},DataStructures.BinaryHeap{Float64,DataStructures.LessThan},Void,Void,Int64,Array{Float64,1},Array{Float64,1},Array{Float64,1}},Array{Float64,1}}, ::OrdinaryDiffEq.Tsit5ConstantCache{Float64,Float64}) at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/perform_step/low_order_rk_perform_step.jl:480
   [2] #init#1418(::Int64, ::Array{Float64,1}, ::Array{Float64,1}, ::Array{Float64,1}, ::Void, ::Bool, ::Void, ::Bool, ::Bool, ::Void, ::Bool, ::Bool, ::Float64, ::Bool, ::Rational{Int64}, ::Void, ::Void, ::Int64, ::Rational{Int64}, ::Int64, ::Int64, ::Rational{Int64}, ::Bool, ::Int64, ::Rational{Int64}, ::Rational{Int64}, ::Int64, ::Float64, ::Float64, ::DiffEqBase.#ODE_DEFAULT_NORM, ::DiffEqBase.#ODE_DEFAULT_ISOUTOFDOMAIN, ::DiffEqBase.#ODE_DEFAULT_UNSTABLE_CHECK, ::Bool, ::Bool, ::Bool, ::Bool, ::Bool, ::Bool, ::Bool, ::Bool, ::Int64, ::String, ::DiffEqBase.#ODE_DEFAULT_PROG_MESSAGE, ::Void, ::Bool, ::Bool, ::Array{Any,1}, ::DiffEqBase.#init, ::DiffEqBase.ODEProblem{LTISystems.SimType{Float64},Float64,false,Void,LTISystems.##64#67{LTISystems.Signals.Step{Float64,2},LTISystems.TransferFunction{Val{:mimo},Val{:cont},Val{:notc},Array{RationalFunctions.RationalFunction{Val{:s},Val{:notc},Int64,Int64},2}}},Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem}, ::OrdinaryDiffEq.Tsit5, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/solve.jl:313
   [3] (::DiffEqBase.#kw##init)(::Array{Any,1}, ::DiffEqBase.#init, ::DiffEqBase.ODEProblem{LTISystems.SimType{Float64},Float64,false,Void,LTISystems.##64#67{LTISystems.Signals.Step{Float64,2},LTISystems.TransferFunction{Val{:mimo},Val{:cont},Val{:notc},Array{RationalFunctions.RationalFunction{Val{:s},Val{:notc},Int64,Int64},2}}},Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem}, ::OrdinaryDiffEq.Tsit5, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at ./<missing>:0
   [4] #solve#1417(::Array{Any,1}, ::Function, ::DiffEqBase.ODEProblem{LTISystems.SimType{Float64},Float64,false,Void,LTISystems.##64#67{LTISystems.Signals.Step{Float64,2},LTISystems.TransferFunction{Val{:mimo},Val{:cont},Val{:notc},Array{RationalFunctions.RationalFunction{Val{:s},Val{:notc},Int64,Int64},2}}},Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem}, ::OrdinaryDiffEq.Tsit5, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/solve.jl:6
   [5] (::DiffEqBase.#kw##solve)(::Array{Any,1}, ::DiffEqBase.#solve, ::DiffEqBase.ODEProblem{LTISystems.SimType{Float64},Float64,false,Void,LTISystems.##64#67{LTISystems.Signals.Step{Float64,2},LTISystems.TransferFunction{Val{:mimo},Val{:cont},Val{:notc},Array{RationalFunctions.RationalFunction{Val{:s},Val{:notc},Int64,Int64},2}}},Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem}, ::OrdinaryDiffEq.Tsit5, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at ./<missing>:0 (repeats 2 times)
   [6] #simulate#62(::LTISystems.Signals.Step{Float64,2}, ::OrdinaryDiffEq.Tsit5, ::Array{Float64,1}, ::Array{Float64,1}, ::Array{Any,1}, ::Function, ::LTISystems.TransferFunction{Val{:mimo},Val{:cont},Val{:notc},Array{RationalFunctions.RationalFunction{Val{:s},Val{:notc},Int64,Int64},2}}, ::Tuple{Int64,Float64}) at /home/vagrant/.julia/v0.6/LTISystems/src/methods/simulate.jl:25
   [7] (::LTISystems.#kw##simulate)(::Array{Any,1}, ::LTISystems.#simulate, ::LTISystems.TransferFunction{Val{:mimo},Val{:cont},Val{:notc},Array{RationalFunctions.RationalFunction{Val{:s},Val{:notc},Int64,Int64},2}}, ::Tuple{Int64,Float64}) at ./<missing>:0
   [8] macro expansion at /home/vagrant/.julia/v0.6/LTISystems/test/methods/simulation.jl:142 [inlined]
   [9] macro expansion at ./test.jl:860 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/LTISystems/test/methods/simulation.jl:140 [inlined]
   [11] macro expansion at ./test.jl:860 [inlined]
   [12] anonymous at ./<missing>:?
   [13] include_from_node1(::String) at ./loading.jl:576
   [14] include(::String) at ./sysimg.jl:14
   [15] include_from_node1(::String) at ./loading.jl:576
   [16] include(::String) at ./sysimg.jl:14
   [17] process_options(::Base.JLOptions) at ./client.jl:305
   [18] _start() at ./client.jl:371
MIMO system with different row and col degrees: Error During Test
  Got an exception of type MethodError outside of a @test
  MethodError: no method matching (::LTISystems.TransferFunction{Val{:mimo},Val{:cont},Val{:notc},Array{RationalFunctions.RationalFunction{Val{:s},Val{:notc},Float64,Float64},2}})(::LTISystems.SimType{Float64}, ::Void, ::Float64, ::LTISystems.Signals.Step{Float64,2})
  Closest candidates are:
    TransferFunction(::DiffEqBase.DEDataArray, !Matched::AbstractArray{T,1} where T, ::Any, ::Any, !Matched::Any, !Matched::Any) at /home/vagrant/.julia/v0.6/LTISystems/src/types/system/transferfunction.jl:73
    TransferFunction(!Matched::Real, !Matched::DiffEqBase.DEDataArray, !Matched::AbstractArray{T,1} where T, ::Any) at /home/vagrant/.julia/v0.6/LTISystems/src/types/system/transferfunction.jl:51
    TransferFunction(::AbstractArray{M<:Number,N} where N) where M<:Number at /home/vagrant/.julia/v0.6/LTISystems/src/types/system/transferfunction.jl:106
  Stacktrace:
   [1] initialize!(::OrdinaryDiffEq.ODEIntegrator{OrdinaryDiffEq.Tsit5,LTISystems.SimType{Float64},Float64,Void,Float64,Float64,Float64,Array{Array{Float64,1},1},DiffEqBase.ODESolution{Float64,2,Array{LTISystems.SimType{Float64},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{LTISystems.SimType{Float64},Float64,false,Void,LTISystems.##64#67{LTISystems.Signals.Step{Float64,2},LTISystems.TransferFunction{Val{:mimo},Val{:cont},Val{:notc},Array{RationalFunctions.RationalFunction{Val{:s},Val{:notc},Float64,Float64},2}}},Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Tsit5,OrdinaryDiffEq.InterpolationData{LTISystems.##64#67{LTISystems.Signals.Step{Float64,2},LTISystems.TransferFunction{Val{:mimo},Val{:cont},Val{:notc},Array{RationalFunctions.RationalFunction{Val{:s},Val{:notc},Float64,Float64},2}}},Array{LTISystems.SimType{Float64},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Tsit5ConstantCache{Float64,Float64}}},LTISystems.##64#67{LTISystems.Signals.Step{Float64,2},LTISystems.TransferFunction{Val{:mimo},Val{:cont},Val{:notc},Array{RationalFunctions.RationalFunction{Val{:s},Val{:notc},Float64,Float64},2}}},Void,OrdinaryDiffEq.Tsit5ConstantCache{Float64,Float64},OrdinaryDiffEq.DEOptions{Float64,Float64,Float64,Float64,DiffEqBase.#ODE_DEFAULT_NORM,DiffEqBase.CallbackSet{Tuple{},Tuple{}},DiffEqBase.#ODE_DEFAULT_ISOUTOFDOMAIN,DiffEqBase.#ODE_DEFAULT_PROG_MESSAGE,DiffEqBase.#ODE_DEFAULT_UNSTABLE_CHECK,DataStructures.BinaryHeap{Float64,DataStructures.LessThan},DataStructures.BinaryHeap{Float64,DataStructures.LessThan},Void,Void,Int64,Array{Float64,1},Array{Float64,1},Array{Float64,1}},Array{Float64,1}}, ::OrdinaryDiffEq.Tsit5ConstantCache{Float64,Float64}) at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/perform_step/low_order_rk_perform_step.jl:480
   [2] #init#1418(::Int64, ::Array{Float64,1}, ::Array{Float64,1}, ::Array{Float64,1}, ::Void, ::Bool, ::Void, ::Bool, ::Bool, ::Void, ::Bool, ::Bool, ::Float64, ::Bool, ::Rational{Int64}, ::Void, ::Void, ::Int64, ::Rational{Int64}, ::Int64, ::Int64, ::Rational{Int64}, ::Bool, ::Int64, ::Rational{Int64}, ::Rational{Int64}, ::Int64, ::Float64, ::Float64, ::DiffEqBase.#ODE_DEFAULT_NORM, ::DiffEqBase.#ODE_DEFAULT_ISOUTOFDOMAIN, ::DiffEqBase.#ODE_DEFAULT_UNSTABLE_CHECK, ::Bool, ::Bool, ::Bool, ::Bool, ::Bool, ::Bool, ::Bool, ::Bool, ::Int64, ::String, ::DiffEqBase.#ODE_DEFAULT_PROG_MESSAGE, ::Void, ::Bool, ::Bool, ::Array{Any,1}, ::DiffEqBase.#init, ::DiffEqBase.ODEProblem{LTISystems.SimType{Float64},Float64,false,Void,LTISystems.##64#67{LTISystems.Signals.Step{Float64,2},LTISystems.TransferFunction{Val{:mimo},Val{:cont},Val{:notc},Array{RationalFunctions.RationalFunction{Val{:s},Val{:notc},Float64,Float64},2}}},Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem}, ::OrdinaryDiffEq.Tsit5, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/solve.jl:313
   [3] (::DiffEqBase.#kw##init)(::Array{Any,1}, ::DiffEqBase.#init, ::DiffEqBase.ODEProblem{LTISystems.SimType{Float64},Float64,false,Void,LTISystems.##64#67{LTISystems.Signals.Step{Float64,2},LTISystems.TransferFunction{Val{:mimo},Val{:cont},Val{:notc},Array{RationalFunctions.RationalFunction{Val{:s},Val{:notc},Float64,Float64},2}}},Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem}, ::OrdinaryDiffEq.Tsit5, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at ./<missing>:0
   [4] #solve#1417(::Array{Any,1}, ::Function, ::DiffEqBase.ODEProblem{LTISystems.SimType{Float64},Float64,false,Void,LTISystems.##64#67{LTISystems.Signals.Step{Float64,2},LTISystems.TransferFunction{Val{:mimo},Val{:cont},Val{:notc},Array{RationalFunctions.RationalFunction{Val{:s},Val{:notc},Float64,Float64},2}}},Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem}, ::OrdinaryDiffEq.Tsit5, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/solve.jl:6
   [5] (::DiffEqBase.#kw##solve)(::Array{Any,1}, ::DiffEqBase.#solve, ::DiffEqBase.ODEProblem{LTISystems.SimType{Float64},Float64,false,Void,LTISystems.##64#67{LTISystems.Signals.Step{Float64,2},LTISystems.TransferFunction{Val{:mimo},Val{:cont},Val{:notc},Array{RationalFunctions.RationalFunction{Val{:s},Val{:notc},Float64,Float64},2}}},Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem}, ::OrdinaryDiffEq.Tsit5, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at ./<missing>:0 (repeats 2 times)
   [6] #simulate#62(::LTISystems.Signals.Step{Float64,2}, ::OrdinaryDiffEq.Tsit5, ::Array{Float64,1}, ::Array{Float64,1}, ::Array{Any,1}, ::Function, ::LTISystems.TransferFunction{Val{:mimo},Val{:cont},Val{:notc},Array{RationalFunctions.RationalFunction{Val{:s},Val{:notc},Float64,Float64},2}}, ::Tuple{Int64,Float64}) at /home/vagrant/.julia/v0.6/LTISystems/src/methods/simulate.jl:25
   [7] (::LTISystems.#kw##simulate)(::Array{Any,1}, ::LTISystems.#simulate, ::LTISystems.TransferFunction{Val{:mimo},Val{:cont},Val{:notc},Array{RationalFunctions.RationalFunction{Val{:s},Val{:notc},Float64,Float64},2}}, ::Tuple{Int64,Float64}) at ./<missing>:0
   [8] macro expansion at /home/vagrant/.julia/v0.6/LTISystems/test/methods/simulation.jl:149 [inlined]
   [9] macro expansion at ./test.jl:860 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/LTISystems/test/methods/simulation.jl:147 [inlined]
   [11] macro expansion at ./test.jl:860 [inlined]
   [12] anonymous at ./<missing>:?
   [13] include_from_node1(::String) at ./loading.jl:576
   [14] include(::String) at ./sysimg.jl:14
   [15] include_from_node1(::String) at ./loading.jl:576
   [16] include(::String) at ./sysimg.jl:14
   [17] process_options(::Base.JLOptions) at ./client.jl:305
   [18] _start() at ./client.jl:371
second order SISO system with direct term: Error During Test
  Got an exception of type MethodError outside of a @test
  MethodError: no method matching (::LTISystems.TransferFunction{Val{:siso},Val{:cont},Val{:notc},Array{RationalFunctions.RationalFunction{Val{:s},Val{:notc},Float64,Float64},2}})(::LTISystems.SimType{Float64}, ::Void, ::Float64, ::LTISystems.Signals.Step{Float64,1})
  Closest candidates are:
    TransferFunction(::DiffEqBase.DEDataArray, !Matched::AbstractArray{T,1} where T, ::Any, ::Any, !Matched::Any, !Matched::Any) at /home/vagrant/.julia/v0.6/LTISystems/src/types/system/transferfunction.jl:73
    TransferFunction(!Matched::Real, !Matched::DiffEqBase.DEDataArray, !Matched::AbstractArray{T,1} where T, ::Any) at /home/vagrant/.julia/v0.6/LTISystems/src/types/system/transferfunction.jl:51
    TransferFunction(::AbstractArray{M<:Number,N} where N) where M<:Number at /home/vagrant/.julia/v0.6/LTISystems/src/types/system/transferfunction.jl:102
  Stacktrace:
   [1] initialize!(::OrdinaryDiffEq.ODEIntegrator{OrdinaryDiffEq.Tsit5,LTISystems.SimType{Float64},Float64,Void,Float64,Float64,Float64,Array{Array{Float64,1},1},DiffEqBase.ODESolution{Float64,2,Array{LTISystems.SimType{Float64},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{LTISystems.SimType{Float64},Float64,false,Void,LTISystems.##64#67{LTISystems.Signals.Step{Float64,1},LTISystems.TransferFunction{Val{:siso},Val{:cont},Val{:notc},Array{RationalFunctions.RationalFunction{Val{:s},Val{:notc},Float64,Float64},2}}},Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Tsit5,OrdinaryDiffEq.InterpolationData{LTISystems.##64#67{LTISystems.Signals.Step{Float64,1},LTISystems.TransferFunction{Val{:siso},Val{:cont},Val{:notc},Array{RationalFunctions.RationalFunction{Val{:s},Val{:notc},Float64,Float64},2}}},Array{LTISystems.SimType{Float64},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Tsit5ConstantCache{Float64,Float64}}},LTISystems.##64#67{LTISystems.Signals.Step{Float64,1},LTISystems.TransferFunction{Val{:siso},Val{:cont},Val{:notc},Array{RationalFunctions.RationalFunction{Val{:s},Val{:notc},Float64,Float64},2}}},Void,OrdinaryDiffEq.Tsit5ConstantCache{Float64,Float64},OrdinaryDiffEq.DEOptions{Float64,Float64,Float64,Float64,DiffEqBase.#ODE_DEFAULT_NORM,DiffEqBase.CallbackSet{Tuple{},Tuple{}},DiffEqBase.#ODE_DEFAULT_ISOUTOFDOMAIN,DiffEqBase.#ODE_DEFAULT_PROG_MESSAGE,DiffEqBase.#ODE_DEFAULT_UNSTABLE_CHECK,DataStructures.BinaryHeap{Float64,DataStructures.LessThan},DataStructures.BinaryHeap{Float64,DataStructures.LessThan},Void,Void,Int64,Array{Float64,1},Array{Float64,1},Array{Float64,1}},Array{Float64,1}}, ::OrdinaryDiffEq.Tsit5ConstantCache{Float64,Float64}) at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/perform_step/low_order_rk_perform_step.jl:480
   [2] #init#1418(::Int64, ::Array{Float64,1}, ::Array{Float64,1}, ::Array{Float64,1}, ::Void, ::Bool, ::Void, ::Bool, ::Bool, ::Void, ::Bool, ::Bool, ::Float64, ::Bool, ::Rational{Int64}, ::Void, ::Void, ::Int64, ::Rational{Int64}, ::Int64, ::Int64, ::Rational{Int64}, ::Bool, ::Int64, ::Rational{Int64}, ::Rational{Int64}, ::Int64, ::Float64, ::Float64, ::DiffEqBase.#ODE_DEFAULT_NORM, ::DiffEqBase.#ODE_DEFAULT_ISOUTOFDOMAIN, ::DiffEqBase.#ODE_DEFAULT_UNSTABLE_CHECK, ::Bool, ::Bool, ::Bool, ::Bool, ::Bool, ::Bool, ::Bool, ::Bool, ::Int64, ::String, ::DiffEqBase.#ODE_DEFAULT_PROG_MESSAGE, ::Void, ::Bool, ::Bool, ::Array{Any,1}, ::DiffEqBase.#init, ::DiffEqBase.ODEProblem{LTISystems.SimType{Float64},Float64,false,Void,LTISystems.##64#67{LTISystems.Signals.Step{Float64,1},LTISystems.TransferFunction{Val{:siso},Val{:cont},Val{:notc},Array{RationalFunctions.RationalFunction{Val{:s},Val{:notc},Float64,Float64},2}}},Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem}, ::OrdinaryDiffEq.Tsit5, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/solve.jl:313
   [3] (::DiffEqBase.#kw##init)(::Array{Any,1}, ::DiffEqBase.#init, ::DiffEqBase.ODEProblem{LTISystems.SimType{Float64},Float64,false,Void,LTISystems.##64#67{LTISystems.Signals.Step{Float64,1},LTISystems.TransferFunction{Val{:siso},Val{:cont},Val{:notc},Array{RationalFunctions.RationalFunction{Val{:s},Val{:notc},Float64,Float64},2}}},Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem}, ::OrdinaryDiffEq.Tsit5, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at ./<missing>:0
   [4] #solve#1417(::Array{Any,1}, ::Function, ::DiffEqBase.ODEProblem{LTISystems.SimType{Float64},Float64,false,Void,LTISystems.##64#67{LTISystems.Signals.Step{Float64,1},LTISystems.TransferFunction{Val{:siso},Val{:cont},Val{:notc},Array{RationalFunctions.RationalFunction{Val{:s},Val{:notc},Float64,Float64},2}}},Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem}, ::OrdinaryDiffEq.Tsit5, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/solve.jl:6
   [5] (::DiffEqBase.#kw##solve)(::Array{Any,1}, ::DiffEqBase.#solve, ::DiffEqBase.ODEProblem{LTISystems.SimType{Float64},Float64,false,Void,LTISystems.##64#67{LTISystems.Signals.Step{Float64,1},LTISystems.TransferFunction{Val{:siso},Val{:cont},Val{:notc},Array{RationalFunctions.RationalFunction{Val{:s},Val{:notc},Float64,Float64},2}}},Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem}, ::OrdinaryDiffEq.Tsit5, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at ./<missing>:0 (repeats 2 times)
   [6] #simulate#62(::LTISystems.Signals.Step{Float64,1}, ::OrdinaryDiffEq.Tsit5, ::Array{Float64,1}, ::Array{Float64,1}, ::Array{Any,1}, ::Function, ::LTISystems.TransferFunction{Val{:siso},Val{:cont},Val{:notc},Array{RationalFunctions.RationalFunction{Val{:s},Val{:notc},Float64,Float64},2}}, ::Tuple{Int64,Float64}) at /home/vagrant/.julia/v0.6/LTISystems/src/methods/simulate.jl:25
   [7] (::LTISystems.#kw##simulate)(::Array{Any,1}, ::LTISystems.#simulate, ::LTISystems.TransferFunction{Val{:siso},Val{:cont},Val{:notc},Array{RationalFunctions.RationalFunction{Val{:s},Val{:notc},Float64,Float64},2}}, ::Tuple{Int64,Float64}) at ./<missing>:0
   [8] macro expansion at /home/vagrant/.julia/v0.6/LTISystems/test/methods/simulation.jl:156 [inlined]
   [9] macro expansion at ./test.jl:860 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/LTISystems/test/methods/simulation.jl:154 [inlined]
   [11] macro expansion at ./test.jl:860 [inlined]
   [12] anonymous at ./<missing>:?
   [13] include_from_node1(::String) at ./loading.jl:576
   [14] include(::String) at ./sysimg.jl:14
   [15] include_from_node1(::String) at ./loading.jl:576
   [16] include(::String) at ./sysimg.jl:14
   [17] process_options(::Base.JLOptions) at ./client.jl:305
   [18] _start() at ./client.jl:371
Test Summary:                                    | Error  Total
continuous simulation                            |     4      4
  first order SISO system                        |     1      1
  second order MIMO system                       |     1      1
  MIMO system with different row and col degrees |     1      1
  second order SISO system with direct term      |     1      1
ERROR: LoadError: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored, 0 broken.
while loading /home/vagrant/.julia/v0.6/LTISystems/test/methods/simulation.jl, in expression starting on line 132
while loading /home/vagrant/.julia/v0.6/LTISystems/test/runtests.jl, in expression starting on line 14
=============================[ ERROR: LTISystems ]==============================

failed process: Process(`/home/vagrant/julia/bin/julia -Cx86-64 -J/home/vagrant/julia/lib/julia/sys.so --compile=yes --depwarn=yes --check-bounds=yes --code-coverage=none --color=no --compilecache=yes /home/vagrant/.julia/v0.6/LTISystems/test/runtests.jl`, ProcessExited(1)) [1]

================================================================================
INFO: No packages to install, update or remove
ERROR: LTISystems had test errors

>>> End of log
