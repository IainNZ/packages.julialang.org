>>> 'Pkg.add("CoupledFields")' log
WARNING: Base.Pkg is deprecated, run `using Pkg` instead
 in module Main
[ Info: Installing BinDeps v0.8.7
[ Info: Installing CoupledFields v0.0.1
[ Info: Installing DataStructures v0.7.4
[ Info: Installing Missings v0.2.9
[ Info: Installing SHA v0.5.6
[ Info: Installing SortingAlgorithms v0.2.0
[ Info: Installing SpecialFunctions v0.4.0
[ Info: Installing StatsBase v0.20.1
[ Info: Installing URIParser v0.3.1
[ Info: Building SpecialFunctions
WARNING: importing deprecated binding Base.Associative into BinDeps.
WARNING: Base.Associative is deprecated, use AbstractDict instead.
  likely near /home/vagrant/.julia/v0.7/SpecialFunctions/deps/binaries.jl:44
in @install at /home/vagrant/.julia/v0.7/BinDeps/src/dependencies.jl
┌ Warning: `contains(haystack, needle)` is deprecated, use `occursin(needle, haystack)` instead.
│   caller = read_sonames() at dependencies.jl:402
└ @ BinDeps dependencies.jl:402
┌ Warning: `contains(haystack, needle)` is deprecated, use `occursin(needle, haystack)` instead.
│   caller = read_sonames() at dependencies.jl:405
└ @ BinDeps dependencies.jl:405
[ Info: Package database updated

>>> 'Pkg.test("CoupledFields")' log
WARNING: Base.versioninfo is deprecated: it has been moved to the standard library package `InteractiveUtils`.
Add `using InteractiveUtils` to your imports.
 in module Main
WARNING: Base.versioninfo is deprecated: it has been moved to the standard library package `InteractiveUtils`.
Add `using InteractiveUtils` to your imports.
 in module Main
Julia Version 0.7.0-DEV.4854
Commit 18ac6e6aa4 (2018-04-10 22:31 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
      Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-143-generic #192-Ubuntu SMP Tue Feb 27 10:45:36 UTC 2018 x86_64 x86_64
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
              speed         user         nice          sys         idle          irq
       #1  3499 MHz    2734875 s       7320 s     221184 s     932212 s         32 s
       #2  3499 MHz     774138 s        166 s      86977 s    3602250 s          1 s
       
  Memory: 2.939197540283203 GB (779.14453125 MB free)
  Uptime: 45495.0 sec
  Load Avg:  1.0224609375  0.9853515625  0.96533203125
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant
Packages:
  Package Directory: /home/vagrant/.julia/v0.7
  Package Status:
2 required packages:
 - CoupledFields                 0.0.1
 - JSON                          0.17.2
10 additional packages:
 - BinDeps                       0.8.7
 - Compat                        0.63.0
 - DataStructures                0.7.4
 - Missings                      0.2.9
 - Nullables                     0.0.5
 - SHA                           0.5.6
 - SortingAlgorithms             0.2.0
 - SpecialFunctions              0.4.0
 - StatsBase                     0.20.1
 - URIParser                     0.3.1
WARNING: Base.Pkg is deprecated, run `using Pkg` instead
 in module Main
[ Info: Testing CoupledFields
┌ Warning: Deprecated syntax `type` at /home/vagrant/.julia/v0.7/CoupledFields/src/CoupledFields.jl:23.
│ Use `mutable struct` instead.
└ @ nothing CoupledFields.jl:23
┌ Warning: Deprecated syntax `type` at /home/vagrant/.julia/v0.7/CoupledFields/src/CoupledFields.jl:52.
│ Use `mutable struct` instead.
└ @ nothing CoupledFields.jl:52
┌ Warning: Deprecated syntax `type` at /home/vagrant/.julia/v0.7/CoupledFields/src/CoupledFields.jl:78.
│ Use `mutable struct` instead.
└ @ nothing CoupledFields.jl:78
┌ Warning: Deprecated syntax `type` at /home/vagrant/.julia/v0.7/CoupledFields/src/CoupledFields.jl:95.
│ Use `mutable struct` instead.
└ @ nothing CoupledFields.jl:95
┌ Warning: Deprecated syntax `immutable` at /home/vagrant/.julia/v0.7/CoupledFields/src/MLKernels.jl:43.
│ Use `struct` instead.
└ @ nothing MLKernels.jl:43
┌ Warning: Deprecated syntax `immutable` at /home/vagrant/.julia/v0.7/CoupledFields/src/MLKernels.jl:75.
│ Use `struct` instead.
└ @ nothing MLKernels.jl:75
┌ Warning: Deprecated syntax `immutable` at /home/vagrant/.julia/v0.7/CoupledFields/src/MLKernels.jl:91.
│ Use `struct` instead.
└ @ nothing MLKernels.jl:91
┌ Warning: Deprecated syntax `immutable` at /home/vagrant/.julia/v0.7/CoupledFields/src/MLKernels.jl:120.
│ Use `struct` instead.
└ @ nothing MLKernels.jl:120
┌ Warning: Deprecated syntax `parametric method syntax phi{T <: AbstractFloat}(κ::SeparableKernel{T}, x::T, y::T)` around /home/vagrant/.julia/v0.7/CoupledFields/src/MLKernels.jl:34.
│ Use `phi(κ::SeparableKernel{T}, x::T, y::T) where T <: AbstractFloat` instead.
└ @ nothing MLKernels.jl:34
┌ Warning: Deprecated syntax `parametric method syntax (::Type{SquaredDistanceKernel{T, CASE}}){T, CASE}(t::T)` around /home/vagrant/.julia/v0.7/CoupledFields/src/MLKernels.jl:46.
│ Use `(::Type{SquaredDistanceKernel{T, CASE}})(t::T) where {T, CASE}` instead.
└ @ nothing MLKernels.jl:46
┌ Warning: Deprecated syntax `parametric method syntax SquaredDistanceKernel{T <: AbstractFloat}(t::T = 1.0)` around /home/vagrant/.julia/v0.7/CoupledFields/src/MLKernels.jl:52.
│ Use `SquaredDistanceKernel(t::T = 1.0) where T <: AbstractFloat` instead.
└ @ nothing MLKernels.jl:52
┌ Warning: Deprecated syntax `parametric method syntax phi{T <: AbstractFloat}(κ::SquaredDistanceKernel{T, :t1}, x::Vector{T}, y::Vector{T})` around /home/vagrant/.julia/v0.7/CoupledFields/src/MLKernels.jl:65.
│ Use `phi(κ::SquaredDistanceKernel{T, :t1}, x::Vector{T}, y::Vector{T}) where T <: AbstractFloat` instead.
└ @ nothing MLKernels.jl:65
┌ Warning: Deprecated syntax `parametric method syntax phi{T <: AbstractFloat}(κ::SquaredDistanceKernel{T, :t0p5}, x::Vector{T}, y::Vector{T})` around /home/vagrant/.julia/v0.7/CoupledFields/src/MLKernels.jl:66.
│ Use `phi(κ::SquaredDistanceKernel{T, :t0p5}, x::Vector{T}, y::Vector{T}) where T <: AbstractFloat` instead.
└ @ nothing MLKernels.jl:66
┌ Warning: Deprecated syntax `parametric method syntax phi{T <: AbstractFloat}(κ::SquaredDistanceKernel{T}, x::Vector{T}, y::Vector{T})` around /home/vagrant/.julia/v0.7/CoupledFields/src/MLKernels.jl:67.
│ Use `phi(κ::SquaredDistanceKernel{T}, x::Vector{T}, y::Vector{T}) where T <: AbstractFloat` instead.
└ @ nothing MLKernels.jl:67
┌ Warning: Deprecated syntax `parametric method syntax convert{T <: AbstractFloat}(::Type{ScalarProductKernel{T}}, κ::ScalarProductKernel)` around /home/vagrant/.julia/v0.7/CoupledFields/src/MLKernels.jl:80.
│ Use `convert(#unused#::Type{ScalarProductKernel{T}}, κ::ScalarProductKernel) where T <: AbstractFloat` instead.
└ @ nothing MLKernels.jl:80
┌ Warning: Deprecated syntax `parametric method syntax phi{T <: AbstractFloat}(κ::ScalarProductKernel{T}, x::T)` around /home/vagrant/.julia/v0.7/CoupledFields/src/MLKernels.jl:82.
│ Use `phi(κ::ScalarProductKernel{T}, x::T) where T <: AbstractFloat` instead.
└ @ nothing MLKernels.jl:82
┌ Warning: Deprecated syntax `parametric method syntax convert{T <: AbstractFloat}(::Type{Kernel{T}}, κ::ScalarProductKernel)` around /home/vagrant/.julia/v0.7/CoupledFields/src/MLKernels.jl:84.
│ Use `convert(#unused#::Type{Kernel{T}}, κ::ScalarProductKernel) where T <: AbstractFloat` instead.
└ @ nothing MLKernels.jl:84
┌ Warning: Deprecated syntax `parametric method syntax (::Type{PolynomialKernel{T, CASE}}){T, CASE}(κ::BaseKernel{T}, α::T, c::T, d::T)` around /home/vagrant/.julia/v0.7/CoupledFields/src/MLKernels.jl:97.
│ Use `(::Type{PolynomialKernel{T, CASE}})(κ::BaseKernel{T}, α::T, c::T, d::T) where {T, CASE}` instead.
└ @ nothing MLKernels.jl:97
┌ Warning: Deprecated syntax `parametric method syntax PolynomialKernel{T <: AbstractFloat}(κ::BaseKernel{T}, α::T = one(T), c::T = one(T), d::T = convert(T, 2))` around /home/vagrant/.julia/v0.7/CoupledFields/src/MLKernels.jl:108.
│ Use `PolynomialKernel(κ::BaseKernel{T}, α::T = one(T), c::T = one(T), d::T = convert(T, 2)) where T <: AbstractFloat` instead.
└ @ nothing MLKernels.jl:108
┌ Warning: Deprecated syntax `parametric method syntax PolynomialKernel{T <: AbstractFloat}(α::T = 1.0, c::T = one(T), d::T = convert(T, 2))` around /home/vagrant/.julia/v0.7/CoupledFields/src/MLKernels.jl:109.
│ Use `PolynomialKernel(α::T = 1.0, c::T = one(T), d::T = convert(T, 2)) where T <: AbstractFloat` instead.
└ @ nothing MLKernels.jl:109
┌ Warning: Deprecated syntax `parametric method syntax LinearKernel{T <: AbstractFloat}(α::T = 1.0, c::T = one(T))` around /home/vagrant/.julia/v0.7/CoupledFields/src/MLKernels.jl:110.
│ Use `LinearKernel(α::T = 1.0, c::T = one(T)) where T <: AbstractFloat` instead.
└ @ nothing MLKernels.jl:110
┌ Warning: Deprecated syntax `parametric method syntax phi{T <: AbstractFloat}(κ::PolynomialKernel{T}, x::Vector{T}, y::Vector{T})` around /home/vagrant/.julia/v0.7/CoupledFields/src/MLKernels.jl:112.
│ Use `phi(κ::PolynomialKernel{T}, x::Vector{T}, y::Vector{T}) where T <: AbstractFloat` instead.
└ @ nothing MLKernels.jl:112
┌ Warning: Deprecated syntax `parametric method syntax phi{T <: AbstractFloat}(κ::PolynomialKernel{T, :d1}, x::Vector{T}, y::Vector{T})` around /home/vagrant/.julia/v0.7/CoupledFields/src/MLKernels.jl:113.
│ Use `phi(κ::PolynomialKernel{T, :d1}, x::Vector{T}, y::Vector{T}) where T <: AbstractFloat` instead.
└ @ nothing MLKernels.jl:113
┌ Warning: Deprecated syntax `parametric method syntax (::Type{ExponentialKernel{T, CASE}}){T, CASE}(κ::BaseKernel{T}, α::T, γ::T)` around /home/vagrant/.julia/v0.7/CoupledFields/src/MLKernels.jl:125.
│ Use `(::Type{ExponentialKernel{T, CASE}})(κ::BaseKernel{T}, α::T, γ::T) where {T, CASE}` instead.
└ @ nothing MLKernels.jl:125
┌ Warning: Deprecated syntax `parametric method syntax ExponentialKernel{T <: AbstractFloat}(κ::BaseKernel{T}, α::T = one(T), γ::T = one(T))` around /home/vagrant/.julia/v0.7/CoupledFields/src/MLKernels.jl:135.
│ Use `ExponentialKernel(κ::BaseKernel{T}, α::T = one(T), γ::T = one(T)) where T <: AbstractFloat` instead.
└ @ nothing MLKernels.jl:135
┌ Warning: Deprecated syntax `parametric method syntax ExponentialKernel{T <: AbstractFloat}(α::T = 1.0, γ::T = one(T))` around /home/vagrant/.julia/v0.7/CoupledFields/src/MLKernels.jl:136.
│ Use `ExponentialKernel(α::T = 1.0, γ::T = one(T)) where T <: AbstractFloat` instead.
└ @ nothing MLKernels.jl:136
┌ Warning: Deprecated syntax `parametric method syntax GaussianKernel{T <: AbstractFloat}(α::T = 1.0)` around /home/vagrant/.julia/v0.7/CoupledFields/src/MLKernels.jl:138.
│ Use `GaussianKernel(α::T = 1.0) where T <: AbstractFloat` instead.
└ @ nothing MLKernels.jl:138
┌ Warning: Deprecated syntax `parametric method syntax RadialBasisKernel{T <: AbstractFloat}(α::T = 1.0)` around /home/vagrant/.julia/v0.7/CoupledFields/src/MLKernels.jl:139.
│ Use `RadialBasisKernel(α::T = 1.0) where T <: AbstractFloat` instead.
└ @ nothing MLKernels.jl:139
┌ Warning: Deprecated syntax `parametric method syntax LaplacianKernel{T <: AbstractFloat}(α::T = 1.0)` around /home/vagrant/.julia/v0.7/CoupledFields/src/MLKernels.jl:140.
│ Use `LaplacianKernel(α::T = 1.0) where T <: AbstractFloat` instead.
└ @ nothing MLKernels.jl:140
┌ Warning: Deprecated syntax `parametric method syntax convert{T <: AbstractFloat}(::Type{ExponentialKernel{T}}, κ::ExponentialKernel)` around /home/vagrant/.julia/v0.7/CoupledFields/src/MLKernels.jl:144.
│ Use `convert(#unused#::Type{ExponentialKernel{T}}, κ::ExponentialKernel) where T <: AbstractFloat` instead.
└ @ nothing MLKernels.jl:144
┌ Warning: Deprecated syntax `parametric method syntax phi{T <: AbstractFloat}(κ::ExponentialKernel{T}, x::Vector{T}, y::Vector{T})` around /home/vagrant/.julia/v0.7/CoupledFields/src/MLKernels.jl:147.
│ Use `phi(κ::ExponentialKernel{T}, x::Vector{T}, y::Vector{T}) where T <: AbstractFloat` instead.
└ @ nothing MLKernels.jl:147
┌ Warning: Deprecated syntax `parametric method syntax phi{T <: AbstractFloat}(κ::ExponentialKernel{T, :γ1}, x::Vector{T}, y::Vector{T})` around /home/vagrant/.julia/v0.7/CoupledFields/src/MLKernels.jl:148.
│ Use `phi(κ::ExponentialKernel{T, :γ1}, x::Vector{T}, y::Vector{T}) where T <: AbstractFloat` instead.
└ @ nothing MLKernels.jl:148
┌ Warning: Deprecated syntax `parametric method syntax init_pairwise{T <: AbstractFloat}(X::Matrix{T}, Y::Matrix{T}, is_trans::Bool)` around /home/vagrant/.julia/v0.7/CoupledFields/src/MLKernels.jl:156.
│ Use `init_pairwise(X::Matrix{T}, Y::Matrix{T}, is_trans::Bool) where T <: AbstractFloat` instead.
└ @ nothing MLKernels.jl:156
┌ Warning: Deprecated syntax `parametric method syntax kernelmatrix{T <: AbstractFloat}(κ::Kernel{T}, X::Matrix{T}, Y::Matrix{T}, is_trans::Bool = false)` around /home/vagrant/.julia/v0.7/CoupledFields/src/MLKernels.jl:164.
│ Use `kernelmatrix(κ::Kernel{T}, X::Matrix{T}, Y::Matrix{T}, is_trans::Bool = false) where T <: AbstractFloat` instead.
└ @ nothing MLKernels.jl:164
┌ Warning: Deprecated syntax `parametric method syntax kernelmatrix!{T <: AbstractFloat}(K::Matrix{T}, κ::BaseKernel{T}, X::Matrix{T}, Y::Matrix{T}, is_trans::Bool)` around /home/vagrant/.julia/v0.7/CoupledFields/src/MLKernels.jl:173.
│ Use `kernelmatrix!(K::Matrix{T}, κ::BaseKernel{T}, X::Matrix{T}, Y::Matrix{T}, is_trans::Bool) where T <: AbstractFloat` instead.
└ @ nothing MLKernels.jl:173
┌ Warning: Deprecated syntax `parametric method syntax kernelmatrix!{T <: AbstractFloat}(K::Matrix{T}, κ::CompositeKernel{T}, X::Matrix{T}, Y::Matrix{T}, is_trans::Bool)` around /home/vagrant/.julia/v0.7/CoupledFields/src/MLKernels.jl:177.
│ Use `kernelmatrix!(K::Matrix{T}, κ::CompositeKernel{T}, X::Matrix{T}, Y::Matrix{T}, is_trans::Bool) where T <: AbstractFloat` instead.
└ @ nothing MLKernels.jl:177
┌ Warning: Deprecated syntax `parametric method syntax init_pairwise{T <: AbstractFloat}(X::Matrix{T}, is_trans::Bool)` around /home/vagrant/.julia/v0.7/CoupledFields/src/MLKernels.jl:188.
│ Use `init_pairwise(X::Matrix{T}, is_trans::Bool) where T <: AbstractFloat` instead.
└ @ nothing MLKernels.jl:188
┌ Warning: Deprecated syntax `parametric method syntax pairwise!{T <: AbstractFloat}(K::Matrix{T}, κ::Kernel{T}, X::Matrix{T}, Y::Matrix{T}, is_trans::Bool)` around /home/vagrant/.julia/v0.7/CoupledFields/src/MLKernels.jl:195.
│ Use `pairwise!(K::Matrix{T}, κ::Kernel{T}, X::Matrix{T}, Y::Matrix{T}, is_trans::Bool) where T <: AbstractFloat` instead.
└ @ nothing MLKernels.jl:195
┌ Warning: Deprecated syntax `parametric method syntax pairwise_XY!{T <: AbstractFloat}(K::Matrix{T}, κ::Kernel{T}, X::Matrix{T}, Y::Matrix{T})` around /home/vagrant/.julia/v0.7/CoupledFields/src/MLKernels.jl:205.
│ Use `pairwise_XY!(K::Matrix{T}, κ::Kernel{T}, X::Matrix{T}, Y::Matrix{T}) where T <: AbstractFloat` instead.
└ @ nothing MLKernels.jl:205
┌ Warning: Deprecated syntax `parametric method syntax pairwise_XtYt!{T <: AbstractFloat}(K::Matrix{T}, κ::Kernel{T}, X::Matrix{T}, Y::Matrix{T})` around /home/vagrant/.julia/v0.7/CoupledFields/src/MLKernels.jl:219.
│ Use `pairwise_XtYt!(K::Matrix{T}, κ::Kernel{T}, X::Matrix{T}, Y::Matrix{T}) where T <: AbstractFloat` instead.
└ @ nothing MLKernels.jl:219
┌ Warning: Deprecated syntax `parametric method syntax Kf{T <: Float64}(par::Array{T}, X::Matrix{T}, kpars::GaussianKP)` around /home/vagrant/.julia/v0.7/CoupledFields/src/CoupledFields.jl:36.
│ Use `Kf(par::Array{T}, X::Matrix{T}, kpars::GaussianKP) where T <: Float64` instead.
└ @ nothing CoupledFields.jl:36
┌ Warning: Deprecated syntax `parametric method syntax ∇Kf{T <: Float64}(par::Array{T}, X::Matrix{T}, kpars::GaussianKP)` around /home/vagrant/.julia/v0.7/CoupledFields/src/CoupledFields.jl:41.
│ Use `∇Kf(par::Array{T}, X::Matrix{T}, kpars::GaussianKP) where T <: Float64` instead.
└ @ nothing CoupledFields.jl:41
┌ Warning: Deprecated syntax `parametric method syntax Kf{T <: Float64}(par::Array{T}, X::Matrix{T}, kpars::PolynomialKP)` around /home/vagrant/.julia/v0.7/CoupledFields/src/CoupledFields.jl:62.
│ Use `Kf(par::Array{T}, X::Matrix{T}, kpars::PolynomialKP) where T <: Float64` instead.
└ @ nothing CoupledFields.jl:62
┌ Warning: Deprecated syntax `parametric method syntax ∇Kf{T <: Float64}(par::Array{T}, X::Matrix{T}, kpars::PolynomialKP)` around /home/vagrant/.julia/v0.7/CoupledFields/src/CoupledFields.jl:66.
│ Use `∇Kf(par::Array{T}, X::Matrix{T}, kpars::PolynomialKP) where T <: Float64` instead.
└ @ nothing CoupledFields.jl:66
┌ Warning: Deprecated syntax `parametric method syntax InputSpace{T <: Matrix{Float64}}(a::T, b::T)` around /home/vagrant/.julia/v0.7/CoupledFields/src/CoupledFields.jl:99.
│ Use `InputSpace(a::T, b::T) where T <: Matrix{Float64}` instead.
└ @ nothing CoupledFields.jl:99
┌ Warning: Deprecated syntax `parametric method syntax InputSpace{T <: Matrix{Float64}}(a::T, b::T, d::Vector{Float64})` around /home/vagrant/.julia/v0.7/CoupledFields/src/CoupledFields.jl:102.
│ Use `InputSpace(a::T, b::T, d::Vector{Float64}) where T <: Matrix{Float64}` instead.
└ @ nothing CoupledFields.jl:102
┌ Warning: Deprecated syntax `parametric method syntax InputSpace{T <: Matrix{Float64}, V <: Vector{Float64}}(a::T, b::T, d::V, lat::V)` around /home/vagrant/.julia/v0.7/CoupledFields/src/CoupledFields.jl:105.
│ Use `InputSpace(a::T, b::T, d::V, lat::V) where {T <: Matrix{Float64}, V <: Vector{Float64}}` instead.
└ @ nothing CoupledFields.jl:105
┌ Warning: Deprecated syntax `parametric method syntax gradvecfield{N <: Float64, T <: Matrix{Float64}}(par::Array{N}, X::T, Y::T, kpars::KernelParameters)` around /home/vagrant/.julia/v0.7/CoupledFields/src/CoupledFields.jl:116.
│ Use `gradvecfield(par::Array{N}, X::T, Y::T, kpars::KernelParameters) where {N <: Float64, T <: Matrix{Float64}}` instead.
└ @ nothing CoupledFields.jl:116
┌ Warning: Deprecated syntax `parametric method syntax cca{T <: Matrix{Float64}}(v::Array{Float64}, X::T, Y::T)` around /home/vagrant/.julia/v0.7/CoupledFields/src/CoupledFields.jl:149.
│ Use `cca(v::Array{Float64}, X::T, Y::T) where T <: Matrix{Float64}` instead.
└ @ nothing CoupledFields.jl:149
┌ Warning: Deprecated syntax `parametric method syntax cca{T <: Matrix{Float64}}(v::Array{Float64}, X::T, Y::T, kpars::KernelParameters)` around /home/vagrant/.julia/v0.7/CoupledFields/src/CoupledFields.jl:171.
│ Use `cca(v::Array{Float64}, X::T, Y::T, kpars::KernelParameters) where T <: Matrix{Float64}` instead.
└ @ nothing CoupledFields.jl:171
WARNING: importing deprecated binding Base.@printf into CoupledFields.
WARNING: Base.@printf is deprecated: it has been moved to the standard library package `Printf`.
Add `using Printf` to your imports.
  likely near /home/vagrant/.julia/v0.7/CoupledFields/src/CoupledFields.jl:221
┌ Warning: Deprecated syntax `parametric method syntax CVfn{T <: Matrix{Float64}}(parm::T, X::T, Y::T, modelfn::Function, kerneltype::DataType; verbose::Bool = true, dcv::Int64 = 2)` around /home/vagrant/.julia/v0.7/CoupledFields/src/CoupledFields.jl:232.
│ Use `CVfn(parm::T, X::T, Y::T, modelfn::Function, kerneltype::DataType; verbose::Bool = true, dcv::Int64 = 2) where T <: Matrix{Float64}` instead.
└ @ nothing CoupledFields.jl:232
┌ Warning: Deprecated syntax `parametric method syntax Rsq_adj{T <: Array{Float64}}(Tx::T, Ty::T, df::Int)` around /home/vagrant/.julia/v0.7/CoupledFields/src/CoupledFields.jl:284.
│ Use `Rsq_adj(Tx::T, Ty::T, df::Int) where T <: Array{Float64}` instead.
└ @ nothing CoupledFields.jl:284
WARNING: Base.Range is deprecated, use AbstractRange instead.
  likely near /home/vagrant/.julia/v0.7/CoupledFields/test/runtests.jl:8
WARNING: Base.repmat is deprecated, use repeat instead.
  likely near /home/vagrant/.julia/v0.7/CoupledFields/test/runtests.jl:19
WARNING: Base.diagm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/CoupledFields/test/runtests.jl:19
WARNING: Base.repmat is deprecated, use repeat instead.
  likely near /home/vagrant/.julia/v0.7/CoupledFields/test/runtests.jl:19
WARNING: Base.diagm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/CoupledFields/test/runtests.jl:19
WARNING: importing deprecated binding Base.uninitialized into StatsBase.
WARNING: Base.uninitialized is deprecated, use undef instead.
  likely near /home/vagrant/.julia/v0.7/CoupledFields/test/runtests.jl:19
WARNING: Base.uninitialized is deprecated, use undef instead.
  likely near /home/vagrant/.julia/v0.7/CoupledFields/test/runtests.jl:19
WARNING: Base.uninitialized is deprecated, use undef instead.
  likely near /home/vagrant/.julia/v0.7/CoupledFields/test/runtests.jl:19
WARNING: Base.repmat is deprecated, use repeat instead.
  likely near /home/vagrant/.julia/v0.7/CoupledFields/test/runtests.jl:19
WARNING: Base.diagm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/CoupledFields/test/runtests.jl:19
WARNING: Base.diagm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/CoupledFields/test/runtests.jl:19
WARNING: Base.repmat is deprecated, use repeat instead.
  likely near /home/vagrant/.julia/v0.7/CoupledFields/test/runtests.jl:19
WARNING: Base.diagm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/CoupledFields/test/runtests.jl:19
WARNING: Base.diagm is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/CoupledFields/test/runtests.jl:19
WARNING: Base.repmat is deprecated, use repeat instead.
  likely near /home/vagrant/.julia/v0.7/CoupledFields/test/runtests.jl:19
in simfields at /home/vagrant/.julia/v0.7/CoupledFields/test/runtests.jl
WARNING: Base.repmat is deprecated, use repeat instead.
  likely near /home/vagrant/.julia/v0.7/CoupledFields/test/runtests.jl:19
in simfields at /home/vagrant/.julia/v0.7/CoupledFields/test/runtests.jl
┌ Warning: `diagm(v::AbstractVector)` is deprecated, use `diagm(0 => v)` or `Matrix(Diagonal(v))` instead.
│   caller = simfields(::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}, ::Int64, ::Float64) at runtests.jl:10
└ @ Main runtests.jl:10
┌ Warning: `a::AbstractArray + b::Number` is deprecated, use `broadcast(+, a, b)` instead.
│   caller = simfields(::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}, ::Int64, ::Float64) at runtests.jl:11
└ @ Main runtests.jl:11
┌ Warning: `diagm(v::AbstractVector)` is deprecated, use `diagm(0 => v)` or `Matrix(Diagonal(v))` instead.
│   caller = simfields(::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}, ::Int64, ::Float64) at runtests.jl:11
└ @ Main runtests.jl:11
┌ Warning: `mean(A::AbstractArray, dims)` is deprecated, use `mean(A, dims=dims)` instead.
│   caller = #mean_and_std#29 at moments.jl:200 [inlined]
└ @ Core moments.jl:200
┌ Warning: `varm(A::AbstractArray, m::AbstractArray, dims; kwargs...)` is deprecated, use `varm(A, m; kwargs..., dims=dims)` instead.
│   caller = ip:0x0
└ @ Core :-1
WARNING: importing deprecated binding Base.svdfact into CoupledFields.
WARNING: Base.svdfact is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/CoupledFields/test/runtests.jl:20
WARNING: Base.svdfact is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/CoupledFields/test/runtests.jl:20
WARNING: Base.svdfact is deprecated: it has been moved to the standard library package `LinearAlgebra`.
Add `using LinearAlgebra` to your imports.
  likely near /home/vagrant/.julia/v0.7/CoupledFields/test/runtests.jl:20
ERROR: LoadError: TypeError: in Type{...} expression, expected UnionAll, got Type{InputSpace}
Stacktrace:
 [1] InputSpace(::Array{Float64,2}, ::Array{Float64,2}, ::Array{Float64,1}) at /home/vagrant/.julia/v0.7/CoupledFields/src/CoupledFields.jl:102
 [2] top-level scope
 [3] include at ./boot.jl:314 [inlined]
 [4] include_relative(::Module, ::String) at ./loading.jl:1067
 [5] include(::Module, ::String) at ./sysimg.jl:29
 [6] exec_options(::Base.JLOptions) at ./client.jl:327
 [7] _start() at ./client.jl:455
in expression starting at /home/vagrant/.julia/v0.7/CoupledFields/test/runtests.jl:20
┌ Error: ------------------------------------------------------------
│ # Testing failed for CoupledFields
│   exception =
│    failed process: Process(`/home/vagrant/julia/bin/julia -Cnative -J/home/vagrant/julia/lib/julia/sys.so --compile=yes --depwarn=yes --code-coverage=none --color=no --compiled-modules=yes --check-bounds=yes --warn-overwrite=yes --startup-file=yes /home/vagrant/.julia/v0.7/CoupledFields/test/runtests.jl`, ProcessExited(1)) [1]
│    Stacktrace:
│     [1] error(::String, ::Base.Process, ::String, ::Int64, ::String) at ./error.jl:42
│     [2] pipeline_error(::Base.Process) at ./process.jl:712
│     [3] #run#542(::Bool, ::Function, ::Cmd) at ./process.jl:670
│     [4] run at ./process.jl:668 [inlined]
│     [5] (::getfield(Pkg.Entry, Symbol("##56#57")){Bool,String,Array{AbstractString,1}})() at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Pkg/src/entry.jl:729
│     [6] cd(::getfield(Pkg.Entry, Symbol("##56#57")){Bool,String,Array{AbstractString,1}}, ::String) at ./file.jl:72
│     [7] #test!#55(::Bool, ::Function, ::String, ::Array{AbstractString,1}, ::Array{AbstractString,1}, ::Array{AbstractString,1}) at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Pkg/src/entry.jl:717
│     [8] (::getfield(Pkg.Entry, Symbol("#kw##test!")))(::NamedTuple{(:coverage,),Tuple{Bool}}, ::typeof(Pkg.Entry.test!), ::String, ::Array{AbstractString,1}, ::Array{AbstractString,1}, ::Array{AbstractString,1}) at ./<missing>:0
│     [9] #test#59(::Bool, ::Function, ::Array{AbstractString,1}) at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Pkg/src/entry.jl:756
│     [10] #test at ./<missing>:0 [inlined]
│     [11] #4 at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Pkg/src/dir.jl:36 [inlined]
│     [12] cd(::getfield(Pkg.Dir, Symbol("##4#7")){Base.Iterators.Pairs{Symbol,Bool,Tuple{Symbol},NamedTuple{(:coverage,),Tuple{Bool}}},typeof(Pkg.Entry.test),Tuple{Array{AbstractString,1}}}, ::String) at ./file.jl:72
│     [13] #cd#1(::Base.Iterators.Pairs{Symbol,Bool,Tuple{Symbol},NamedTuple{(:coverage,),Tuple{Bool}}}, ::Function, ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N} where N) at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Pkg/src/dir.jl:36
│     [14] (::getfield(Pkg.Dir, Symbol("#kw##cd")))(::NamedTuple{(:coverage,),Tuple{Bool}}, ::typeof(Pkg.Dir.cd), ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N} where N) at ./<missing>:0
│     [15] #test#3(::Bool, ::Function, ::String, ::Vararg{String,N} where N) at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Pkg/src/Pkg.jl:278
│     [16] test(::String, ::Vararg{String,N} where N) at /buildworker/worker/package_linux64/build/usr/share/julia/site/v0.7/Pkg/src/Pkg.jl:278
│     [17] top-level scope
│     [18] eval at ./boot.jl:317 [inlined]
│     [19] eval(::Module, ::Expr) at ./sysimg.jl:74
│     [20] exec_options(::Base.JLOptions) at ./client.jl:304
│     [21] _start() at ./client.jl:455
└ @ Pkg.Entry entry.jl:732
ERROR: CoupledFields had test errors

>>> End of log
