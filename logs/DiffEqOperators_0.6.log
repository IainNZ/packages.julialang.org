>>> 'Pkg.add("DiffEqOperators")' log
INFO: Cloning cache of DiffEqOperators from https://github.com/JuliaDiffEq/DiffEqOperators.jl.git
INFO: Installing DiffEqBase v3.3.0
INFO: Installing DiffEqOperators v1.0.0
INFO: Installing FunctionWrappers v0.1.0
INFO: Installing IteratorInterfaceExtensions v0.0.2
INFO: Installing LinearMaps v1.0.4
INFO: Installing MacroTools v0.4.0
INFO: Installing NamedTuples v4.0.0
INFO: Installing RecipesBase v0.2.3
INFO: Installing RecursiveArrayTools v0.14.6
INFO: Installing Requires v0.4.3
INFO: Installing SimpleTraits v0.5.1
INFO: Installing StaticArrays v0.6.6
INFO: Installing TableTraits v0.1.0
INFO: Building DiffEqBase
INFO: ~~~ DifferentialEquations.jl *BREAKING* changes  ~~~

We have changed the front-end API on how
users may define equations of motion and 
problems, for all problem types that can
be used in the DifferentialEquations.jl.
These are *BREAKING* changes, and they
also have *NO WARNINGS*!

Please see our latest documentation here:
http://docs.juliadiffeq.org/latest/

or the blogpost that describes the changes:
http://juliadiffeq.org/2018/01/24/Parameters.html

In short, the mutated argument is the first argument,
and parameters are now directly passed
into the equations of motion function. For all
types now mutation goes first, then dependent variables, 
then parameters, then independent variables. 

`f(mutated, dependent variables, p/integrator, independent variables)`

For example, this means that the ODE syntax will be `f(u,p,t)` (for the
out-of-place) and `f(du,u,p,t)` (for the in-place). Notice
that this change also removes the need for ParameterizedFunctions
as now parameters are part of the equations of motion.

For more details please visit the above links!
INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of DiffEqOperators
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("DiffEqOperators")' log
Julia Version 0.6.2
Commit d386e40c17 (2017-12-13 18:08 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-135-generic #184-Ubuntu SMP Wed Oct 18 11:55:51 UTC 2017 x86_64 x86_64
Memory: 2.93927001953125 GB (1692.94140625 MB free)
Uptime: 62992.0 sec
Load Avg:  0.92919921875  0.97119140625  1.02392578125
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3515 MHz    4049954 s         86 s     173090 s    1144824 s         46 s
#2  3515 MHz    1100425 s       7188 s     114591 s    4965471 s          1 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-8-openjdk-amd64
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.6
2 required packages:
 - DiffEqOperators               1.0.0
 - JSON                          0.16.4
14 additional packages:
 - Compat                        0.53.0
 - DiffEqBase                    3.3.0
 - FunctionWrappers              0.1.0
 - IteratorInterfaceExtensions   0.0.2
 - LinearMaps                    1.0.4
 - MacroTools                    0.4.0
 - NamedTuples                   4.0.0
 - Nullables                     0.0.3
 - RecipesBase                   0.2.3
 - RecursiveArrayTools           0.14.6
 - Requires                      0.4.3
 - SimpleTraits                  0.5.1
 - StaticArrays                  0.6.6
 - TableTraits                   0.1.0
INFO: Computing test dependencies for DiffEqOperators...
INFO: Cloning cache of SpecialMatrices from https://github.com/jiahao/SpecialMatrices.jl.git
INFO: Installing BinDeps v0.8.6
INFO: Installing CommonSubexpressions v0.0.1
INFO: Installing DataStructures v0.7.4
INFO: Installing DiffBase v0.3.2
INFO: Installing DiffEqDiffTools v0.3.0
INFO: Installing DiffResults v0.0.3
INFO: Installing DiffRules v0.0.3
INFO: Installing Distances v0.5.0
INFO: Installing ForwardDiff v0.7.3
INFO: Installing GenericSVD v0.1.0
INFO: Installing Juno v0.4.0
INFO: Installing LineSearches v3.2.5
INFO: Installing Media v0.3.0
INFO: Installing Missings v0.2.6
INFO: Installing MuladdMacro v0.0.2
INFO: Installing NLSolversBase v4.2.1
INFO: Installing NLsolve v1.0.0
INFO: Installing NaNMath v0.3.1
INFO: Installing OrdinaryDiffEq v3.1.0
INFO: Installing Parameters v0.8.1
INFO: Installing Reexport v0.1.0
INFO: Installing Roots v0.5.0
INFO: Installing SHA v0.5.6
INFO: Installing SpecialFunctions v0.3.8
INFO: Installing SpecialMatrices v0.1.3
INFO: Installing URIParser v0.3.0
INFO: Building SpecialFunctions
INFO: Building DiffEqBase
INFO: ~~~ DifferentialEquations.jl *BREAKING* changes  ~~~

We have changed the front-end API on how
users may define equations of motion and 
problems, for all problem types that can
be used in the DifferentialEquations.jl.
These are *BREAKING* changes, and they
also have *NO WARNINGS*!

Please see our latest documentation here:
http://docs.juliadiffeq.org/latest/

or the blogpost that describes the changes:
http://juliadiffeq.org/2018/01/24/Parameters.html

In short, the mutated argument is the first argument,
and parameters are now directly passed
into the equations of motion function. For all
types now mutation goes first, then dependent variables, 
then parameters, then independent variables. 

`f(mutated, dependent variables, p/integrator, independent variables)`

For example, this means that the ODE syntax will be `f(u,p,t)` (for the
out-of-place) and `f(du,u,p,t)` (for the in-place). Notice
that this change also removes the need for ParameterizedFunctions
as now parameters are part of the equations of motion.

For more details please visit the above links!
INFO: Testing DiffEqOperators
WARNING: Method definition (::Type{SpecialMatrices.Hankel{T} where T})(Array{T, 1}) in module SpecialMatrices at /home/vagrant/.julia/v0.6/SpecialMatrices/src/hankel.jl:4 overwritten at /home/vagrant/.julia/v0.6/SpecialMatrices/src/hankel.jl:6.
Test Summary:                  | Pass  Total
Derivative Operators Interface | 1022   1022
 21.691508 seconds (129.14 M allocations: 6.299 GiB, 19.22% gc time)
Test Summary: | Pass  Total
Dirichlet BCs |    3      3
  0.960042 seconds (310.44 k allocations: 15.915 MiB)
Test Summary: | Pass  Total
Periodic BCs  |    3      3
  0.713644 seconds (184.68 k allocations: 9.502 MiB, 2.00% gc time)
Test Summary: | Pass  Total
Neumann BCs   |   13     13
  1.539824 seconds (561.90 k allocations: 29.293 MiB, 0.98% gc time)
WARNING: cos(x::AbstractArray{T}) where T <: Number is deprecated, use cos.(x) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] cos(::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}) at ./deprecated.jl:57
 [3] include_from_node1(::String) at ./loading.jl:576
 [4] include(::String) at ./sysimg.jl:14
 [5] macro expansion at /home/vagrant/.julia/v0.6/DiffEqOperators/test/runtests.jl:10 [inlined]
 [6] macro expansion at ./test.jl:860 [inlined]
 [7] macro expansion at ./util.jl:237 [inlined]
 [8] anonymous at ./<missing>:?
 [9] include_from_node1(::String) at ./loading.jl:576
 [10] include(::String) at ./sysimg.jl:14
 [11] process_options(::Base.JLOptions) at ./client.jl:305
 [12] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/DiffEqOperators/test/2nd_order_check.jl, in expression starting on line 10
WARNING: cos(x::AbstractArray{T}) where T <: Number is deprecated, use cos.(x) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:70
 [2] cos(::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}) at ./deprecated.jl:57
 [3] include_from_node1(::String) at ./loading.jl:576
 [4] include(::String) at ./sysimg.jl:14
 [5] macro expansion at /home/vagrant/.julia/v0.6/DiffEqOperators/test/runtests.jl:10 [inlined]
 [6] macro expansion at ./test.jl:860 [inlined]
 [7] macro expansion at ./util.jl:237 [inlined]
 [8] anonymous at ./<missing>:?
 [9] include_from_node1(::String) at ./loading.jl:576
 [10] include(::String) at ./sysimg.jl:14
 [11] process_options(::Base.JLOptions) at ./client.jl:305
 [12] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/DiffEqOperators/test/2nd_order_check.jl, in expression starting on line 11
Test Summary:   | Pass  Total
2nd order check |    4      4
  2.530357 seconds (528.94 k allocations: 27.538 MiB, 0.45% gc time)
Test Summary: | Pass  Total
None BCs      |   28     28
  0.446157 seconds (58.33 k allocations: 3.033 MiB, 2.84% gc time)
KdV equation (Single Solition): Error During Test
  Got an exception of type MethodError outside of a @test
  MethodError: no method matching A_mul_B!(::Array{Float64,1}, ::DiffEqOperators.UpwindOperator{Float64,SVector{6,Float64},:Dirichlet0,:Dirichlet0}, ::Void)
  Closest candidates are:
    A_mul_B!(::AbstractArray{T<:Real,1}, ::DiffEqOperators.AbstractDerivativeOperator{T<:Real}, !Matched::AbstractArray{T<:Real,1}) where T<:Real at /home/vagrant/.julia/v0.6/DiffEqOperators/src/derivative_operators/derivative_operator.jl:566
    A_mul_B!(::AbstractArray{T,1} where T, ::LinearMaps.LinearMap, !Matched::AbstractArray{T,1} where T) at /home/vagrant/.julia/v0.6/LinearMaps/src/LinearMaps.jl:34
    A_mul_B!(::Union{Base.ReshapedArray{T<:Union{Complex{Float32}, Complex{Float64}, Float32, Float64},1,A,MI} where MI<:Tuple{Vararg{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},N} where N} where A<:Union{DenseArray, SubArray{T,N,P,I,true} where I<:Tuple{Union{Base.Slice, UnitRange},Vararg{Any,N} where N} where P where N where T}, DenseArray{T<:Union{Complex{Float32}, Complex{Float64}, Float32, Float64},1}, SubArray{T<:Union{Complex{Float32}, Complex{Float64}, Float32, Float64},1,A,I,L} where L} where I<:Tuple{Vararg{Union{Base.AbstractCartesianIndex, Int64, Range{Int64}},N} where N} where A<:Union{Base.ReshapedArray{T,N,A,MI} where MI<:Tuple{Vararg{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},N} where N} where A<:Union{DenseArray, SubArray{T,N,P,I,true} where I<:Tuple{Union{Base.Slice, UnitRange},Vararg{Any,N} where N} where P where N where T} where N where T, DenseArray}, !Matched::Union{Union{Base.ReshapedArray{T<:Union{Complex{Float32}, Complex{Float64}, Float32, Float64},1,A,MI} where MI<:Tuple{Vararg{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},N} where N} where A<:Union{DenseArray, SubArray{T,N,P,I,true} where I<:Tuple{Union{Base.Slice, UnitRange},Vararg{Any,N} where N} where P where N where T}, DenseArray{T<:Union{Complex{Float32}, Complex{Float64}, Float32, Float64},1}, SubArray{T<:Union{Complex{Float32}, Complex{Float64}, Float32, Float64},1,A,I,L} where L} where I<:Tuple{Vararg{Union{Base.AbstractCartesianIndex, Int64, Range{Int64}},N} where N} where A<:Union{Base.ReshapedArray{T,N,A,MI} where MI<:Tuple{Vararg{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},N} where N} where A<:Union{DenseArray, SubArray{T,N,P,I,true} where I<:Tuple{Union{Base.Slice, UnitRange},Vararg{Any,N} where N} where P where N where T} where N where T, DenseArray}, Union{Base.ReshapedArray{T<:Union{Complex{Float32}, Complex{Float64}, Float32, Float64},2,A,MI} where MI<:Tuple{Vararg{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},N} where N} where A<:Union{DenseArray, SubArray{T,N,P,I,true} where I<:Tuple{Union{Base.Slice, UnitRange},Vararg{Any,N} where N} where P where N where T}, DenseArray{T<:Union{Complex{Float32}, Complex{Float64}, Float32, Float64},2}, SubArray{T<:Union{Complex{Float32}, Complex{Float64}, Float32, Float64},2,A,I,L} where L} where I<:Tuple{Vararg{Union{Base.AbstractCartesianIndex, Int64, Range{Int64}},N} where N} where A<:Union{Base.ReshapedArray{T,N,A,MI} where MI<:Tuple{Vararg{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},N} where N} where A<:Union{DenseArray, SubArray{T,N,P,I,true} where I<:Tuple{Union{Base.Slice, UnitRange},Vararg{Any,N} where N} where P where N where T} where N where T, DenseArray}}, !Matched::Union{Base.ReshapedArray{T<:Union{Complex{Float32}, Complex{Float64}, Float32, Float64},1,A,MI} where MI<:Tuple{Vararg{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},N} where N} where A<:Union{DenseArray, SubArray{T,N,P,I,true} where I<:Tuple{Union{Base.Slice, UnitRange},Vararg{Any,N} where N} where P where N where T}, DenseArray{T<:Union{Complex{Float32}, Complex{Float64}, Float32, Float64},1}, SubArray{T<:Union{Complex{Float32}, Complex{Float64}, Float32, Float64},1,A,I,L} where L} where I<:Tuple{Vararg{Union{Base.AbstractCartesianIndex, Int64, Range{Int64}},N} where N} where A<:Union{Base.ReshapedArray{T,N,A,MI} where MI<:Tuple{Vararg{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},N} where N} where A<:Union{DenseArray, SubArray{T,N,P,I,true} where I<:Tuple{Union{Base.Slice, UnitRange},Vararg{Any,N} where N} where P where N where T} where N where T, DenseArray}) where T<:Union{Complex{Float32}, Complex{Float64}, Float32, Float64} at linalg/matmul.jl:89
    ...
  Stacktrace:
   [1] (::DiffEqOperators.UpwindOperator{Float64,SVector{6,Float64},:Dirichlet0,:Dirichlet0})(::Array{Float64,1}, ::Void, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/DiffEqOperators/src/derivative_operators/upwind_operator.jl:71
   [2] (::#KdV#49)(::Array{Float64,1}, ::Void, ::Float64) at /home/vagrant/.julia/v0.6/DiffEqOperators/test/KdV.jl:28
   [3] initialize!(::OrdinaryDiffEq.ODEIntegrator{OrdinaryDiffEq.Tsit5,Array{Float64,1},Float64,Void,Float64,Float64,Array{Array{Float64,1},1},DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,false,Void,#KdV#49,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Tsit5,OrdinaryDiffEq.InterpolationData{#KdV#49,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Tsit5ConstantCache{Float64,Float64}}},#KdV#49,Void,OrdinaryDiffEq.Tsit5ConstantCache{Float64,Float64},OrdinaryDiffEq.DEOptions{Float64,Float64,Float64,Float64,DiffEqBase.#ODE_DEFAULT_NORM,DiffEqBase.CallbackSet{Tuple{},Tuple{}},DiffEqBase.#ODE_DEFAULT_ISOUTOFDOMAIN,DiffEqBase.#ODE_DEFAULT_PROG_MESSAGE,DiffEqBase.#ODE_DEFAULT_UNSTABLE_CHECK,DataStructures.BinaryHeap{Float64,DataStructures.LessThan},DataStructures.BinaryHeap{Float64,DataStructures.LessThan},Void,Void,Int64,Array{Float64,1},Array{Float64,1},Array{Float64,1}},Array{Float64,1}}, ::OrdinaryDiffEq.Tsit5ConstantCache{Float64,Float64}) at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/perform_step/low_order_rk_perform_step.jl:480
   [4] #init#1331(::Int64, ::Array{Float64,1}, ::Array{Float64,1}, ::Array{Float64,1}, ::Void, ::Bool, ::Void, ::Bool, ::Bool, ::Void, ::Bool, ::Bool, ::Float64, ::Bool, ::Rational{Int64}, ::Float64, ::Float64, ::Int64, ::Rational{Int64}, ::Int64, ::Int64, ::Rational{Int64}, ::Bool, ::Int64, ::Rational{Int64}, ::Rational{Int64}, ::Int64, ::Float64, ::Float64, ::DiffEqBase.#ODE_DEFAULT_NORM, ::DiffEqBase.#ODE_DEFAULT_ISOUTOFDOMAIN, ::DiffEqBase.#ODE_DEFAULT_UNSTABLE_CHECK, ::Bool, ::Bool, ::Bool, ::Bool, ::Bool, ::Bool, ::Bool, ::Bool, ::Int64, ::String, ::DiffEqBase.#ODE_DEFAULT_PROG_MESSAGE, ::Void, ::Bool, ::Bool, ::Array{Any,1}, ::DiffEqBase.#init, ::DiffEqBase.ODEProblem{Array{Float64,1},Float64,false,Void,#KdV#49,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem}, ::OrdinaryDiffEq.Tsit5, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/solve.jl:302
   [5] (::DiffEqBase.#kw##init)(::Array{Any,1}, ::DiffEqBase.#init, ::DiffEqBase.ODEProblem{Array{Float64,1},Float64,false,Void,#KdV#49,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem}, ::OrdinaryDiffEq.Tsit5, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at ./<missing>:0
   [6] #solve#1330(::Array{Any,1}, ::Function, ::DiffEqBase.ODEProblem{Array{Float64,1},Float64,false,Void,#KdV#49,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem}, ::OrdinaryDiffEq.Tsit5, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/solve.jl:6
   [7] (::DiffEqBase.#kw##solve)(::Array{Any,1}, ::DiffEqBase.#solve, ::DiffEqBase.ODEProblem{Array{Float64,1},Float64,false,Void,#KdV#49,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem}, ::OrdinaryDiffEq.Tsit5, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at ./<missing>:0 (repeats 2 times)
   [8] macro expansion at /home/vagrant/.julia/v0.6/DiffEqOperators/test/KdV.jl:35 [inlined]
   [9] macro expansion at ./test.jl:860 [inlined]
   [10] anonymous at ./<missing>:?
   [11] include_from_node1(::String) at ./loading.jl:576
   [12] include(::String) at ./sysimg.jl:14
   [13] macro expansion at /home/vagrant/.julia/v0.6/DiffEqOperators/test/runtests.jl:12 [inlined]
   [14] macro expansion at ./test.jl:860 [inlined]
   [15] macro expansion at ./util.jl:237 [inlined]
   [16] anonymous at ./<missing>:?
   [17] include_from_node1(::String) at ./loading.jl:576
   [18] include(::String) at ./sysimg.jl:14
   [19] process_options(::Base.JLOptions) at ./client.jl:305
   [20] _start() at ./client.jl:371
KdV equation (Double Solition): Error During Test
  Got an exception of type MethodError outside of a @test
  MethodError: no method matching A_mul_B!(::Array{Float64,1}, ::DiffEqOperators.UpwindOperator{Float64,SVector{4,Float64},:Dirichlet0,:nothing}, ::Void)
  Closest candidates are:
    A_mul_B!(::AbstractArray{T<:Real,1}, ::DiffEqOperators.AbstractDerivativeOperator{T<:Real}, !Matched::AbstractArray{T<:Real,1}) where T<:Real at /home/vagrant/.julia/v0.6/DiffEqOperators/src/derivative_operators/derivative_operator.jl:566
    A_mul_B!(::AbstractArray{T,1} where T, ::LinearMaps.LinearMap, !Matched::AbstractArray{T,1} where T) at /home/vagrant/.julia/v0.6/LinearMaps/src/LinearMaps.jl:34
    A_mul_B!(::Union{Base.ReshapedArray{T<:Union{Complex{Float32}, Complex{Float64}, Float32, Float64},1,A,MI} where MI<:Tuple{Vararg{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},N} where N} where A<:Union{DenseArray, SubArray{T,N,P,I,true} where I<:Tuple{Union{Base.Slice, UnitRange},Vararg{Any,N} where N} where P where N where T}, DenseArray{T<:Union{Complex{Float32}, Complex{Float64}, Float32, Float64},1}, SubArray{T<:Union{Complex{Float32}, Complex{Float64}, Float32, Float64},1,A,I,L} where L} where I<:Tuple{Vararg{Union{Base.AbstractCartesianIndex, Int64, Range{Int64}},N} where N} where A<:Union{Base.ReshapedArray{T,N,A,MI} where MI<:Tuple{Vararg{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},N} where N} where A<:Union{DenseArray, SubArray{T,N,P,I,true} where I<:Tuple{Union{Base.Slice, UnitRange},Vararg{Any,N} where N} where P where N where T} where N where T, DenseArray}, !Matched::Union{Union{Base.ReshapedArray{T<:Union{Complex{Float32}, Complex{Float64}, Float32, Float64},1,A,MI} where MI<:Tuple{Vararg{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},N} where N} where A<:Union{DenseArray, SubArray{T,N,P,I,true} where I<:Tuple{Union{Base.Slice, UnitRange},Vararg{Any,N} where N} where P where N where T}, DenseArray{T<:Union{Complex{Float32}, Complex{Float64}, Float32, Float64},1}, SubArray{T<:Union{Complex{Float32}, Complex{Float64}, Float32, Float64},1,A,I,L} where L} where I<:Tuple{Vararg{Union{Base.AbstractCartesianIndex, Int64, Range{Int64}},N} where N} where A<:Union{Base.ReshapedArray{T,N,A,MI} where MI<:Tuple{Vararg{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},N} where N} where A<:Union{DenseArray, SubArray{T,N,P,I,true} where I<:Tuple{Union{Base.Slice, UnitRange},Vararg{Any,N} where N} where P where N where T} where N where T, DenseArray}, Union{Base.ReshapedArray{T<:Union{Complex{Float32}, Complex{Float64}, Float32, Float64},2,A,MI} where MI<:Tuple{Vararg{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},N} where N} where A<:Union{DenseArray, SubArray{T,N,P,I,true} where I<:Tuple{Union{Base.Slice, UnitRange},Vararg{Any,N} where N} where P where N where T}, DenseArray{T<:Union{Complex{Float32}, Complex{Float64}, Float32, Float64},2}, SubArray{T<:Union{Complex{Float32}, Complex{Float64}, Float32, Float64},2,A,I,L} where L} where I<:Tuple{Vararg{Union{Base.AbstractCartesianIndex, Int64, Range{Int64}},N} where N} where A<:Union{Base.ReshapedArray{T,N,A,MI} where MI<:Tuple{Vararg{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},N} where N} where A<:Union{DenseArray, SubArray{T,N,P,I,true} where I<:Tuple{Union{Base.Slice, UnitRange},Vararg{Any,N} where N} where P where N where T} where N where T, DenseArray}}, !Matched::Union{Base.ReshapedArray{T<:Union{Complex{Float32}, Complex{Float64}, Float32, Float64},1,A,MI} where MI<:Tuple{Vararg{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},N} where N} where A<:Union{DenseArray, SubArray{T,N,P,I,true} where I<:Tuple{Union{Base.Slice, UnitRange},Vararg{Any,N} where N} where P where N where T}, DenseArray{T<:Union{Complex{Float32}, Complex{Float64}, Float32, Float64},1}, SubArray{T<:Union{Complex{Float32}, Complex{Float64}, Float32, Float64},1,A,I,L} where L} where I<:Tuple{Vararg{Union{Base.AbstractCartesianIndex, Int64, Range{Int64}},N} where N} where A<:Union{Base.ReshapedArray{T,N,A,MI} where MI<:Tuple{Vararg{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},N} where N} where A<:Union{DenseArray, SubArray{T,N,P,I,true} where I<:Tuple{Union{Base.Slice, UnitRange},Vararg{Any,N} where N} where P where N where T} where N where T, DenseArray}) where T<:Union{Complex{Float32}, Complex{Float64}, Float32, Float64} at linalg/matmul.jl:89
    ...
  Stacktrace:
   [1] (::DiffEqOperators.UpwindOperator{Float64,SVector{4,Float64},:Dirichlet0,:nothing})(::Array{Float64,1}, ::Void, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/DiffEqOperators/src/derivative_operators/upwind_operator.jl:71
   [2] (::#KdV#59)(::Array{Float64,1}, ::Void, ::Float64) at /home/vagrant/.julia/v0.6/DiffEqOperators/test/KdV.jl:76
   [3] initialize!(::OrdinaryDiffEq.ODEIntegrator{OrdinaryDiffEq.Tsit5,Array{Float64,1},Float64,Void,Float64,Float64,Array{Array{Float64,1},1},DiffEqBase.ODESolution{Float64,2,Array{Array{Float64,1},1},Void,Void,Array{Float64,1},Array{Array{Array{Float64,1},1},1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,false,Void,#KdV#59,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.Tsit5,OrdinaryDiffEq.InterpolationData{#KdV#59,Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.Tsit5ConstantCache{Float64,Float64}}},#KdV#59,Void,OrdinaryDiffEq.Tsit5ConstantCache{Float64,Float64},OrdinaryDiffEq.DEOptions{Float64,Float64,Float64,Float64,DiffEqBase.#ODE_DEFAULT_NORM,DiffEqBase.CallbackSet{Tuple{},Tuple{}},DiffEqBase.#ODE_DEFAULT_ISOUTOFDOMAIN,DiffEqBase.#ODE_DEFAULT_PROG_MESSAGE,DiffEqBase.#ODE_DEFAULT_UNSTABLE_CHECK,DataStructures.BinaryHeap{Float64,DataStructures.LessThan},DataStructures.BinaryHeap{Float64,DataStructures.LessThan},Void,Void,Int64,Array{Float64,1},Array{Float64,1},Array{Float64,1}},Array{Float64,1}}, ::OrdinaryDiffEq.Tsit5ConstantCache{Float64,Float64}) at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/perform_step/low_order_rk_perform_step.jl:480
   [4] #init#1331(::Int64, ::Array{Float64,1}, ::Array{Float64,1}, ::Array{Float64,1}, ::Void, ::Bool, ::Void, ::Bool, ::Bool, ::Void, ::Bool, ::Bool, ::Float64, ::Bool, ::Rational{Int64}, ::Void, ::Void, ::Int64, ::Rational{Int64}, ::Int64, ::Int64, ::Rational{Int64}, ::Bool, ::Int64, ::Rational{Int64}, ::Rational{Int64}, ::Int64, ::Float64, ::Float64, ::DiffEqBase.#ODE_DEFAULT_NORM, ::DiffEqBase.#ODE_DEFAULT_ISOUTOFDOMAIN, ::DiffEqBase.#ODE_DEFAULT_UNSTABLE_CHECK, ::Bool, ::Bool, ::Bool, ::Bool, ::Bool, ::Bool, ::Bool, ::Bool, ::Int64, ::String, ::DiffEqBase.#ODE_DEFAULT_PROG_MESSAGE, ::Void, ::Bool, ::Bool, ::Array{Any,1}, ::DiffEqBase.#init, ::DiffEqBase.ODEProblem{Array{Float64,1},Float64,false,Void,#KdV#59,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem}, ::OrdinaryDiffEq.Tsit5, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/solve.jl:302
   [5] init(::DiffEqBase.ODEProblem{Array{Float64,1},Float64,false,Void,#KdV#59,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem}, ::OrdinaryDiffEq.Tsit5, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/solve.jl:56
   [6] #solve#1330(::Array{Any,1}, ::Function, ::DiffEqBase.ODEProblem{Array{Float64,1},Float64,false,Void,#KdV#59,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem}, ::OrdinaryDiffEq.Tsit5, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/solve.jl:6
   [7] solve(::DiffEqBase.ODEProblem{Array{Float64,1},Float64,false,Void,#KdV#59,Void,Void,UniformScaling{Int64},DiffEqBase.StandardODEProblem}, ::OrdinaryDiffEq.Tsit5) at /home/vagrant/.julia/v0.6/OrdinaryDiffEq/src/solve.jl:6
   [8] macro expansion at /home/vagrant/.julia/v0.6/DiffEqOperators/test/KdV.jl:84 [inlined]
   [9] macro expansion at ./test.jl:860 [inlined]
   [10] anonymous at ./<missing>:?
   [11] include_from_node1(::String) at ./loading.jl:576
   [12] include(::String) at ./sysimg.jl:14
   [13] macro expansion at /home/vagrant/.julia/v0.6/DiffEqOperators/test/runtests.jl:12 [inlined]
   [14] macro expansion at ./test.jl:860 [inlined]
   [15] macro expansion at ./util.jl:237 [inlined]
   [16] anonymous at ./<missing>:?
   [17] include_from_node1(::String) at ./loading.jl:576
   [18] include(::String) at ./sysimg.jl:14
   [19] process_options(::Base.JLOptions) at ./client.jl:305
   [20] _start() at ./client.jl:371
Test Summary:                    | Error  Total
KdV                              |     2      2
  KdV equation (Single Solition) |     1      1
  KdV equation (Double Solition) |     1      1
ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 2 errored, 0 broken.
while loading /home/vagrant/.julia/v0.6/DiffEqOperators/test/runtests.jl, in expression starting on line 12
===========================[ ERROR: DiffEqOperators ]===========================

failed process: Process(`/home/vagrant/julia/bin/julia -Cx86-64 -J/home/vagrant/julia/lib/julia/sys.so --compile=yes --depwarn=yes --check-bounds=yes --code-coverage=none --color=no --compilecache=yes /home/vagrant/.julia/v0.6/DiffEqOperators/test/runtests.jl`, ProcessExited(1)) [1]

================================================================================
INFO: Removing BinDeps v0.8.6
INFO: Removing CommonSubexpressions v0.0.1
INFO: Removing DataStructures v0.7.4
INFO: Removing DiffBase v0.3.2
INFO: Removing DiffEqDiffTools v0.3.0
INFO: Removing DiffResults v0.0.3
INFO: Removing DiffRules v0.0.3
INFO: Removing Distances v0.5.0
INFO: Removing ForwardDiff v0.7.3
INFO: Removing GenericSVD v0.1.0
INFO: Removing Juno v0.4.0
INFO: Removing LineSearches v3.2.5
INFO: Removing Media v0.3.0
INFO: Removing Missings v0.2.6
INFO: Removing MuladdMacro v0.0.2
INFO: Removing NLSolversBase v4.2.1
INFO: Removing NLsolve v1.0.0
INFO: Removing NaNMath v0.3.1
INFO: Removing OrdinaryDiffEq v3.1.0
INFO: Removing Parameters v0.8.1
INFO: Removing Reexport v0.1.0
INFO: Removing Roots v0.5.0
INFO: Removing SHA v0.5.6
INFO: Removing SpecialFunctions v0.3.8
INFO: Removing SpecialMatrices v0.1.3
INFO: Removing URIParser v0.3.0
ERROR: DiffEqOperators had test errors

>>> End of log
